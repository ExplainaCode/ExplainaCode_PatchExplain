record_number,buggy_code,fixed_code,code_similarity
141001,"private Object loadClass(final String className,final Class<?> interf){
  if (className == null) {
    return null;
  }
  try {
    final Class<?> result=this.getClass().getClassLoader().loadClass(className);
    if (result == null) {
      return null;
    }
    final Object o=result.newInstance();
    if (interf.isInstance(o)) {
      return result.newInstance();
    }
    return null;
  }
 catch (  ClassNotFoundException e) {
    return null;
  }
catch (  InstantiationException e) {
    return null;
  }
catch (  IllegalAccessException e) {
    return null;
  }
}","private Object loadClass(final String className,final Class<?> interf){
  if (className == null) {
    return null;
  }
  try {
    final Class<?> result=this.getClass().getClassLoader().loadClass(className);
    if (result == null) {
      return null;
    }
    final Object o=result.newInstance();
    if (interf.isInstance(o)) {
      return result.newInstance();
    }
    return null;
  }
 catch (  ClassNotFoundException|InstantiationException|IllegalAccessException e) {
    return null;
  }
}",0.9309701492537312
141002,"@Override public boolean exists(final DataFile src,final boolean followLink){
  try {
    return new S3URL(src).getS3Object() != null;
  }
 catch (  AmazonS3Exception e) {
    return false;
  }
catch (  IOException e) {
    return false;
  }
}","@Override public boolean exists(final DataFile src,final boolean followLink){
  try {
    return new S3URL(src).getS3Object() != null;
  }
 catch (  AmazonS3Exception|IOException e) {
    return false;
  }
}",0.9155555555555556
141003,"/** 
 * Create a GenomeDescStorage
 * @param dir the path of the genome descriptions storage
 * @return a GenomeDescStorage object if the path contains an index storage ornull if no index storage is found
 */
public static final GenomeDescStorage getInstance(final DataFile dir){
  try {
    return new SimpleGenomeDescStorage(dir);
  }
 catch (  IOException e) {
    return null;
  }
catch (  NullPointerException e) {
    return null;
  }
}","/** 
 * Create a GenomeDescStorage
 * @param dir the path of the genome descriptions storage
 * @return a GenomeDescStorage object if the path contains an index storage ornull if no index storage is found
 */
public static final GenomeDescStorage getInstance(final DataFile dir){
  try {
    return new SimpleGenomeDescStorage(dir);
  }
 catch (  IOException|NullPointerException e) {
    return null;
  }
}",0.9564193168433452
141004,"/** 
 * Create a GenomeIndexStorage
 * @param dir the path of the index storage
 * @return a GenomeIndexStorage object if the path contains an index storageor null if no index storage is found
 */
public static final GenomeIndexStorage getInstance(final DataFile dir){
  try {
    return new SimpleGenomeIndexStorage(dir);
  }
 catch (  IOException e) {
    return null;
  }
catch (  NullPointerException e) {
    return null;
  }
}","/** 
 * Create a GenomeIndexStorage
 * @param dir the path of the index storage
 * @return a GenomeIndexStorage object if the path contains an index storageor null if no index storage is found
 */
public static final GenomeIndexStorage getInstance(final DataFile dir){
  try {
    return new SimpleGenomeIndexStorage(dir);
  }
 catch (  IOException|NullPointerException e) {
    return null;
  }
}",0.9071170084439084
141005,"/** 
 * Parse the sample name from its filename.
 * @param filename the filename to parse
 * @return the sample name
 */
private static String parseSampleNameFromFilename(final String filename){
  if (filename == null) {
    return null;
  }
  final List<String> list=new ArrayList<String>(Arrays.asList(filename.split(""String_Node_Str"")));
  final int size=list.size();
  if (size < 5) {
    return null;
  }
  StringBuilder sb=new StringBuilder();
  boolean first=true;
  for (  String field : list.subList(0,size - 4)) {
    if (first) {
      first=false;
    }
 else {
      sb.append('_');
    }
    sb.append(field);
  }
  return sb.toString();
}","/** 
 * Parse the sample name from its filename.
 * @param filename the filename to parse
 * @return the sample name
 */
private static String parseSampleNameFromFilename(final String filename){
  if (filename == null) {
    return null;
  }
  final List<String> list=new ArrayList<>(Arrays.asList(filename.split(""String_Node_Str"")));
  final int size=list.size();
  if (size < 5) {
    return null;
  }
  StringBuilder sb=new StringBuilder();
  boolean first=true;
  for (  String field : list.subList(0,size - 4)) {
    if (first) {
      first=false;
    }
 else {
      sb.append('_');
    }
    sb.append(field);
  }
  return sb.toString();
}",0.9953846153846154
141006,"@Override public List<ExperimentSample> getExperimentSamples(){
  List<ExperimentSample> samples=this.experiment.getExperimentSamples();
  List<ExperimentSample> result=new ArrayList<ExperimentSample>(samples.size());
  for (  ExperimentSample sample : samples) {
    result.add(new UnmodifiableExperimentSample(sample));
  }
  return Collections.unmodifiableList(result);
}","@Override public List<ExperimentSample> getExperimentSamples(){
  List<ExperimentSample> samples=this.experiment.getExperimentSamples();
  List<ExperimentSample> result=new ArrayList<>(samples.size());
  for (  ExperimentSample sample : samples) {
    result.add(new UnmodifiableExperimentSample(sample));
  }
  return Collections.unmodifiableList(result);
}",0.9781420765027322
141007,"@Override public List<Sample> getSamples(){
  List<Sample> samples=this.experiment.getSamples();
  List<Sample> result=new ArrayList<Sample>(samples.size());
  for (  Sample sample : samples) {
    result.add(new UnmodifiableSample(sample));
  }
  return Collections.unmodifiableList(result);
}","@Override public List<Sample> getSamples(){
  List<Sample> samples=this.experiment.getSamples();
  List<Sample> result=new ArrayList<>(samples.size());
  for (  Sample sample : samples) {
    result.add(new UnmodifiableSample(sample));
  }
  return Collections.unmodifiableList(result);
}",0.9896907216494846
141008,"/** 
 * Get the DesignReader for the data.
 * @return the DesignReader for the data
 * @throws IOException if an error occurs while reading data
 */
public DesignReader getDesignReader() throws IOException, IOException {
switch (getDesignFormatVersion()) {
case 1:
    return new Eoulsan1DesignReader(this);
case 2:
  return new Eoulsan2DesignReader(this);
default :
throw new IOException(""String_Node_Str"");
}
}","/** 
 * Get the DesignReader for the data.
 * @return the DesignReader for the data
 * @throws IOException if an error occurs while reading data
 */
public DesignReader getDesignReader() throws IOException {
switch (getDesignFormatVersion()) {
case 1:
    return new Eoulsan1DesignReader(this);
case 2:
  return new Eoulsan2DesignReader(this);
default :
throw new IOException(""String_Node_Str"");
}
}",0.594327990135635
141009,"private MapperProcess createMapperProcessSE(final EntryMapping mapping,final String bwaPath,final String indexPath,final File inputFile) throws IOException {
  boolean bwaAln=!MEM_FLAVOR.equals(mapping.getFlavor());
  if (bwaAln) {
    return new MapperProcess(mapping.getName(),mapping.getExecutor(),mapping.getTemporaryDirectory(),false,inputFile){
      private File saiFile;
      private File fastqFile;
      private FastqWriterThread writer;
      protected void additionalInit() throws IOException {
        final File tmpDir=EoulsanRuntime.getRuntime().getTempDirectory();
        final String uuid=getUUID();
        this.saiFile=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ SAI_EXTENSION);
        this.fastqFile=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ FASTQ_EXTENSION);
        FileUtils.createNamedPipe(this.saiFile);
        addFilesToRemove(saiFile,this.fastqFile);
        this.writer=new FastqWriterThread(this.fastqFile,""String_Node_Str"");
      }
      @Override public void writeEntry(      final String name,      final String sequence,      final String quality) throws IOException {
        super.writeEntry(name,sequence,quality);
        this.writer.write(ReadSequence.toFastQ(name,sequence,quality) + '\n');
      }
      @Override public void writeEntry1(      final ReadSequence read) throws IOException {
        super.writeEntry1(read);
        this.writer.write(read.toFastQ() + '\n');
      }
      @Override public void closeEntriesWriter() throws IOException {
        super.closeWriter1();
        this.writer.close();
      }
      @Override public void closeWriter1() throws IOException {
        super.closeWriter1();
        this.writer.close();
      }
      @Override protected List<List<String>> createCommandLines(){
        final boolean illuminaFastq=mapping.getFastqFormat() == FASTQ_ILLUMINA || mapping.getFastqFormat() == FASTQ_ILLUMINA_1_5;
        final List<String> cmd1=new ArrayList<>();
        cmd1.add(bwaPath);
        cmd1.add(ALN_FLAVOR);
        if (illuminaFastq) {
          cmd1.add(""String_Node_Str"");
        }
        cmd1.addAll(mapping.getMapperArguments());
        cmd1.add(""String_Node_Str"");
        cmd1.add(mapping.getThreadNumber() + ""String_Node_Str"");
        cmd1.add(""String_Node_Str"");
        cmd1.add(this.saiFile.getAbsolutePath());
        cmd1.add(indexPath);
        cmd1.add(getNamedPipeFile1().getAbsolutePath());
        final List<String> cmd2=new ArrayList<>();
        cmd2.add(bwaPath);
        cmd2.add(""String_Node_Str"");
        cmd2.add(indexPath);
        cmd2.add(this.saiFile.getAbsolutePath());
        cmd2.add(this.fastqFile.getAbsolutePath());
        final List<List<String>> result=new ArrayList<>();
        result.add(cmd1);
        result.add(cmd2);
        return result;
      }
    }
;
  }
  return new MapperProcess(mapping.getName(),mapping.getExecutor(),mapping.getTemporaryDirectory(),false,inputFile){
    @Override protected List<List<String>> createCommandLines(){
      final List<String> cmd=new ArrayList<>();
      cmd.add(bwaPath);
      cmd.add(MEM_FLAVOR);
      cmd.addAll(mapping.getMapperArguments());
      cmd.add(""String_Node_Str"");
      cmd.add(mapping.getThreadNumber() + ""String_Node_Str"");
      cmd.add(indexPath);
      cmd.add(getNamedPipeFile1().getAbsolutePath());
      return Collections.singletonList(cmd);
    }
  }
;
}","private MapperProcess createMapperProcessSE(final EntryMapping mapping,final String bwaPath,final String indexPath,final File inputFile) throws IOException {
  boolean bwaAln=!MEM_FLAVOR.equals(mapping.getFlavor());
  if (bwaAln) {
    return new MapperProcess(mapping.getName(),mapping.getExecutor(),mapping.getTemporaryDirectory(),false,inputFile){
      private File saiFile;
      private File fastqFile;
      private FastqWriterThread writer;
      protected void additionalInit() throws IOException {
        final File tmpDir=EoulsanRuntime.getRuntime().getTempDirectory();
        final String uuid=getUUID();
        this.saiFile=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ SAI_EXTENSION);
        FileUtils.createNamedPipe(this.saiFile);
        if (inputFile == null) {
          this.fastqFile=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ FASTQ_EXTENSION);
          this.writer=new FastqWriterThread(this.fastqFile,""String_Node_Str"");
        }
        addFilesToRemove(saiFile,this.fastqFile);
      }
      @Override public void writeEntry(      final String name,      final String sequence,      final String quality) throws IOException {
        super.writeEntry(name,sequence,quality);
        this.writer.write(ReadSequence.toFastQ(name,sequence,quality) + '\n');
      }
      @Override public void writeEntry1(      final ReadSequence read) throws IOException {
        super.writeEntry1(read);
        this.writer.write(read.toFastQ() + '\n');
      }
      @Override public void closeEntriesWriter() throws IOException {
        super.closeWriter1();
        this.writer.close();
      }
      @Override public void closeWriter1() throws IOException {
        super.closeWriter1();
        this.writer.close();
      }
      @Override protected List<List<String>> createCommandLines(){
        final boolean illuminaFastq=mapping.getFastqFormat() == FASTQ_ILLUMINA || mapping.getFastqFormat() == FASTQ_ILLUMINA_1_5;
        final List<String> cmd1=new ArrayList<>();
        cmd1.add(bwaPath);
        cmd1.add(ALN_FLAVOR);
        if (illuminaFastq) {
          cmd1.add(""String_Node_Str"");
        }
        cmd1.addAll(mapping.getMapperArguments());
        cmd1.add(""String_Node_Str"");
        cmd1.add(mapping.getThreadNumber() + ""String_Node_Str"");
        cmd1.add(""String_Node_Str"");
        cmd1.add(this.saiFile.getAbsolutePath());
        cmd1.add(indexPath);
        cmd1.add(getNamedPipeFile1().getAbsolutePath());
        final List<String> cmd2=new ArrayList<>();
        cmd2.add(bwaPath);
        cmd2.add(""String_Node_Str"");
        cmd2.add(indexPath);
        cmd2.add(this.saiFile.getAbsolutePath());
        if (inputFile != null) {
          cmd2.add(inputFile.getAbsolutePath());
        }
 else {
          cmd2.add(this.fastqFile.getAbsolutePath());
        }
        final List<List<String>> result=new ArrayList<>();
        result.add(cmd1);
        result.add(cmd2);
        return result;
      }
    }
;
  }
  return new MapperProcess(mapping.getName(),mapping.getExecutor(),mapping.getTemporaryDirectory(),false,inputFile){
    @Override protected List<List<String>> createCommandLines(){
      final List<String> cmd=new ArrayList<>();
      cmd.add(bwaPath);
      cmd.add(MEM_FLAVOR);
      cmd.addAll(mapping.getMapperArguments());
      cmd.add(""String_Node_Str"");
      cmd.add(mapping.getThreadNumber() + ""String_Node_Str"");
      cmd.add(indexPath);
      cmd.add(getNamedPipeFile1().getAbsolutePath());
      return Collections.singletonList(cmd);
    }
  }
;
}",0.946307758744782
141010,"private MapperProcess createMapperProcessPE(final EntryMapping mapping,final String bwaPath,final String indexPath,final File inputFile1,final File inputFile2) throws IOException {
  boolean bwaAln=!MEM_FLAVOR.equals(mapping.getFlavor());
  if (bwaAln) {
    return new MapperProcess(mapping.getName(),mapping.getExecutor(),mapping.getTemporaryDirectory(),true,inputFile1,inputFile2){
      private File saiFile1;
      private File saiFile2;
      private File fastqFile1;
      private File fastqFile2;
      private FastqWriterThread writer1;
      private FastqWriterThread writer2;
      protected void additionalInit() throws IOException {
        final File tmpDir=EoulsanRuntime.getRuntime().getTempDirectory();
        final String uuid=getUUID();
        this.saiFile1=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ SAI_EXTENSION);
        this.saiFile2=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ SAI_EXTENSION);
        this.fastqFile1=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ FASTQ_EXTENSION);
        this.fastqFile2=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ FASTQ_EXTENSION);
        FileUtils.createNamedPipe(this.saiFile1);
        FileUtils.createNamedPipe(this.saiFile2);
        addFilesToRemove(this.saiFile1,this.saiFile2,this.fastqFile1,this.fastqFile2);
        this.writer1=new FastqWriterThread(this.fastqFile1,""String_Node_Str"");
        this.writer2=new FastqWriterThread(this.fastqFile2,""String_Node_Str"");
      }
      @Override public void writeEntry(      final String name1,      final String sequence1,      final String quality1,      final String name2,      final String sequence2,      final String quality2) throws IOException {
        super.writeEntry(name1,sequence1,quality1,name2,sequence2,quality2);
        this.writer1.write(ReadSequence.toFastQ(name1,sequence1,quality2) + '\n');
        this.writer2.write(ReadSequence.toFastQ(name2,sequence2,quality2) + '\n');
      }
      @Override public void writeEntry1(      final ReadSequence read) throws IOException {
        super.writeEntry1(read);
        this.writer1.write(read.toFastQ() + '\n');
      }
      @Override public void writeEntry2(      final ReadSequence read) throws IOException {
        super.writeEntry2(read);
        this.writer2.write(read.toFastQ() + '\n');
      }
      @Override public void closeEntriesWriter() throws IOException {
        super.closeWriter1();
        super.closeWriter2();
        this.writer1.close();
        this.writer2.close();
      }
      @Override public void closeWriter1() throws IOException {
        super.closeWriter1();
        this.writer1.close();
      }
      @Override public void closeWriter2() throws IOException {
        super.closeWriter2();
        this.writer2.close();
      }
      @Override protected List<List<String>> createCommandLines(){
        final boolean illuminaFastq=mapping.getFastqFormat() == FASTQ_ILLUMINA || mapping.getFastqFormat() == FASTQ_ILLUMINA_1_5;
        final List<String> cmd1=new ArrayList<>();
        cmd1.add(bwaPath);
        if (MEM_FLAVOR.equals(mapping.getFlavor())) {
          cmd1.add(MEM_FLAVOR);
        }
 else {
          cmd1.add(ALN_FLAVOR);
        }
        if (illuminaFastq) {
          cmd1.add(""String_Node_Str"");
        }
        final int threadNumber=mapping.getThreadNumber() > 1 ? mapping.getThreadNumber() / 2 : 1;
        cmd1.addAll(mapping.getMapperArguments());
        cmd1.add(""String_Node_Str"");
        cmd1.add(threadNumber + ""String_Node_Str"");
        cmd1.add(""String_Node_Str"");
        cmd1.add(this.saiFile1.getAbsolutePath());
        cmd1.add(indexPath);
        cmd1.add(getNamedPipeFile1().getAbsolutePath());
        final List<String> cmd2=new ArrayList<>();
        cmd2.add(bwaPath);
        cmd2.add(ALN_FLAVOR);
        if (illuminaFastq) {
          cmd2.add(""String_Node_Str"");
        }
        cmd2.addAll(mapping.getMapperArguments());
        cmd2.add(""String_Node_Str"");
        cmd2.add(threadNumber + ""String_Node_Str"");
        cmd2.add(""String_Node_Str"");
        cmd2.add(this.saiFile2.getAbsolutePath());
        cmd2.add(indexPath);
        cmd2.add(getNamedPipeFile2().getAbsolutePath());
        final List<String> cmd3=new ArrayList<>();
        cmd3.add(bwaPath);
        cmd3.add(""String_Node_Str"");
        cmd3.add(indexPath);
        cmd3.add(this.saiFile1.getAbsolutePath());
        cmd3.add(this.saiFile2.getAbsolutePath());
        cmd3.add(this.fastqFile1.getAbsolutePath());
        cmd3.add(this.fastqFile2.getAbsolutePath());
        final List<List<String>> result=new ArrayList<>();
        result.add(cmd1);
        result.add(cmd2);
        result.add(cmd3);
        return result;
      }
    }
;
  }
 else {
    return new MapperProcess(mapping.getName(),mapping.getExecutor(),mapping.getTemporaryDirectory(),true,inputFile1,inputFile2){
      @Override protected List<List<String>> createCommandLines(){
        final List<String> cmd=new ArrayList<>();
        cmd.add(bwaPath);
        cmd.add(MEM_FLAVOR);
        cmd.addAll(mapping.getMapperArguments());
        cmd.add(""String_Node_Str"");
        cmd.add(mapping.getThreadNumber() + ""String_Node_Str"");
        cmd.add(indexPath);
        cmd.add(getNamedPipeFile1().getAbsolutePath());
        cmd.add(getNamedPipeFile2().getAbsolutePath());
        return Collections.singletonList(cmd);
      }
    }
;
  }
}","private MapperProcess createMapperProcessPE(final EntryMapping mapping,final String bwaPath,final String indexPath,final File inputFile1,final File inputFile2) throws IOException {
  boolean bwaAln=!MEM_FLAVOR.equals(mapping.getFlavor());
  if (bwaAln) {
    return new MapperProcess(mapping.getName(),mapping.getExecutor(),mapping.getTemporaryDirectory(),true,inputFile1,inputFile2){
      private File saiFile1;
      private File saiFile2;
      private File fastqFile1;
      private File fastqFile2;
      private FastqWriterThread writer1;
      private FastqWriterThread writer2;
      protected void additionalInit() throws IOException {
        final File tmpDir=EoulsanRuntime.getRuntime().getTempDirectory();
        final String uuid=getUUID();
        this.saiFile1=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ SAI_EXTENSION);
        this.saiFile2=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ SAI_EXTENSION);
        if (inputFile1 == null) {
          this.fastqFile1=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ FASTQ_EXTENSION);
          this.fastqFile2=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ FASTQ_EXTENSION);
          this.writer1=new FastqWriterThread(this.fastqFile1,""String_Node_Str"");
          this.writer2=new FastqWriterThread(this.fastqFile2,""String_Node_Str"");
        }
        FileUtils.createNamedPipe(this.saiFile1);
        FileUtils.createNamedPipe(this.saiFile2);
        addFilesToRemove(this.saiFile1,this.saiFile2,this.fastqFile1,this.fastqFile2);
      }
      @Override public void writeEntry(      final String name1,      final String sequence1,      final String quality1,      final String name2,      final String sequence2,      final String quality2) throws IOException {
        super.writeEntry(name1,sequence1,quality1,name2,sequence2,quality2);
        this.writer1.write(ReadSequence.toFastQ(name1,sequence1,quality2) + '\n');
        this.writer2.write(ReadSequence.toFastQ(name2,sequence2,quality2) + '\n');
      }
      @Override public void writeEntry1(      final ReadSequence read) throws IOException {
        super.writeEntry1(read);
        this.writer1.write(read.toFastQ() + '\n');
      }
      @Override public void writeEntry2(      final ReadSequence read) throws IOException {
        super.writeEntry2(read);
        this.writer2.write(read.toFastQ() + '\n');
      }
      @Override public void closeEntriesWriter() throws IOException {
        super.closeWriter1();
        super.closeWriter2();
        this.writer1.close();
        this.writer2.close();
      }
      @Override public void closeWriter1() throws IOException {
        super.closeWriter1();
        this.writer1.close();
      }
      @Override public void closeWriter2() throws IOException {
        super.closeWriter2();
        this.writer2.close();
      }
      @Override protected List<List<String>> createCommandLines(){
        final boolean illuminaFastq=mapping.getFastqFormat() == FASTQ_ILLUMINA || mapping.getFastqFormat() == FASTQ_ILLUMINA_1_5;
        final List<String> cmd1=new ArrayList<>();
        cmd1.add(bwaPath);
        if (MEM_FLAVOR.equals(mapping.getFlavor())) {
          cmd1.add(MEM_FLAVOR);
        }
 else {
          cmd1.add(ALN_FLAVOR);
        }
        if (illuminaFastq) {
          cmd1.add(""String_Node_Str"");
        }
        final int threadNumber=mapping.getThreadNumber() > 1 ? mapping.getThreadNumber() / 2 : 1;
        cmd1.addAll(mapping.getMapperArguments());
        cmd1.add(""String_Node_Str"");
        cmd1.add(threadNumber + ""String_Node_Str"");
        cmd1.add(""String_Node_Str"");
        cmd1.add(this.saiFile1.getAbsolutePath());
        cmd1.add(indexPath);
        cmd1.add(getNamedPipeFile1().getAbsolutePath());
        final List<String> cmd2=new ArrayList<>();
        cmd2.add(bwaPath);
        cmd2.add(ALN_FLAVOR);
        if (illuminaFastq) {
          cmd2.add(""String_Node_Str"");
        }
        cmd2.addAll(mapping.getMapperArguments());
        cmd2.add(""String_Node_Str"");
        cmd2.add(threadNumber + ""String_Node_Str"");
        cmd2.add(""String_Node_Str"");
        cmd2.add(this.saiFile2.getAbsolutePath());
        cmd2.add(indexPath);
        cmd2.add(getNamedPipeFile2().getAbsolutePath());
        final List<String> cmd3=new ArrayList<>();
        cmd3.add(bwaPath);
        cmd3.add(""String_Node_Str"");
        cmd3.add(indexPath);
        cmd3.add(this.saiFile1.getAbsolutePath());
        cmd3.add(this.saiFile2.getAbsolutePath());
        if (inputFile1 != null) {
          cmd3.add(inputFile1.getAbsolutePath());
          cmd3.add(inputFile2.getAbsolutePath());
        }
 else {
          cmd3.add(this.fastqFile1.getAbsolutePath());
          cmd3.add(this.fastqFile2.getAbsolutePath());
        }
        final List<List<String>> result=new ArrayList<>();
        result.add(cmd1);
        result.add(cmd2);
        result.add(cmd3);
        return result;
      }
    }
;
  }
 else {
    return new MapperProcess(mapping.getName(),mapping.getExecutor(),mapping.getTemporaryDirectory(),true,inputFile1,inputFile2){
      @Override protected List<List<String>> createCommandLines(){
        final List<String> cmd=new ArrayList<>();
        cmd.add(bwaPath);
        cmd.add(MEM_FLAVOR);
        cmd.addAll(mapping.getMapperArguments());
        cmd.add(""String_Node_Str"");
        cmd.add(mapping.getThreadNumber() + ""String_Node_Str"");
        cmd.add(indexPath);
        cmd.add(getNamedPipeFile1().getAbsolutePath());
        cmd.add(getNamedPipeFile2().getAbsolutePath());
        return Collections.singletonList(cmd);
      }
    }
;
  }
}",0.943157132512672
141011,"protected void additionalInit() throws IOException {
  final File tmpDir=EoulsanRuntime.getRuntime().getTempDirectory();
  final String uuid=getUUID();
  this.saiFile1=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ SAI_EXTENSION);
  this.saiFile2=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ SAI_EXTENSION);
  this.fastqFile1=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ FASTQ_EXTENSION);
  this.fastqFile2=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ FASTQ_EXTENSION);
  FileUtils.createNamedPipe(this.saiFile1);
  FileUtils.createNamedPipe(this.saiFile2);
  addFilesToRemove(this.saiFile1,this.saiFile2,this.fastqFile1,this.fastqFile2);
  this.writer1=new FastqWriterThread(this.fastqFile1,""String_Node_Str"");
  this.writer2=new FastqWriterThread(this.fastqFile2,""String_Node_Str"");
}","protected void additionalInit() throws IOException {
  final File tmpDir=EoulsanRuntime.getRuntime().getTempDirectory();
  final String uuid=getUUID();
  this.saiFile1=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ SAI_EXTENSION);
  this.saiFile2=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ SAI_EXTENSION);
  if (inputFile1 == null) {
    this.fastqFile1=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ FASTQ_EXTENSION);
    this.fastqFile2=new File(tmpDir,PREFIX_FILES + ""String_Node_Str"" + uuid+ FASTQ_EXTENSION);
    this.writer1=new FastqWriterThread(this.fastqFile1,""String_Node_Str"");
    this.writer2=new FastqWriterThread(this.fastqFile2,""String_Node_Str"");
  }
  FileUtils.createNamedPipe(this.saiFile1);
  FileUtils.createNamedPipe(this.saiFile2);
  addFilesToRemove(this.saiFile1,this.saiFile2,this.fastqFile1,this.fastqFile2);
}",0.6666666666666666
141012,"/** 
 * Remove a temporary file.
 * @param f f file to remove
 */
private void removeFile(final File f){
  if (f.exists()) {
    if (!f.delete()) {
      getLogger().warning(""String_Node_Str"" + f);
    }
  }
}","/** 
 * Remove a temporary file.
 * @param f f file to remove
 */
private void removeFile(final File f){
  if (f != null && f.exists()) {
    if (!f.delete()) {
      getLogger().warning(""String_Node_Str"" + f);
    }
  }
}",0.9698375870069604
141013,"/** 
 * Add an emergency task.
 * @param task the task to add
 */
public void add(final EmergencyStopTask task){
  checkNotNull(task,""String_Node_Str"");
synchronized (this.tasks) {
    this.tasks.add(task);
  }
}","/** 
 * Add an emergency task.
 * @param task the task to add
 */
public void add(final EmergencyStopTask task){
  checkNotNull(task,""String_Node_Str"");
  this.tasks.add(task);
}",0.9128205128205128
141014,"/** 
 * Remove an emergency task.
 * @param task the task to add
 */
public void remove(final EmergencyStopTask task){
  checkNotNull(task,""String_Node_Str"");
synchronized (this.tasks) {
    this.tasks.remove(task);
  }
}","/** 
 * Remove an emergency task.
 * @param task the task to add
 */
public void remove(final EmergencyStopTask task){
  checkNotNull(task,""String_Node_Str"");
  this.tasks.remove(task);
}",0.9166666666666666
141015,"@Override protected String internalGetMapperVersion(){
  try {
    final String bowtiePath;
synchronized (SYNC) {
      bowtiePath=install(getMapperExecutables());
    }
    final List<String> cmd=Lists.newArrayList(bowtiePath,""String_Node_Str"");
    final String s=executeToString(cmd);
    final String[] lines=s.split(""String_Node_Str"");
    if (lines.length == 0) {
      return null;
    }
    final String[] tokens=lines[0].split(""String_Node_Str"");
    if (tokens.length > 1) {
      return tokens[1].trim();
    }
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}","@Override protected String internalGetMapperVersion(){
  try {
    final String bowtiePath;
synchronized (SYNC) {
      bowtiePath=install(getMapperExecutableName());
    }
    final List<String> cmd=Lists.newArrayList(bowtiePath,""String_Node_Str"");
    final String s=executeToString(cmd);
    final String[] lines=s.split(""String_Node_Str"");
    if (lines.length == 0) {
      return null;
    }
    final String[] tokens=lines[0].split(""String_Node_Str"");
    if (tokens.length > 1) {
      return tokens[1].trim();
    }
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}",0.995787700084246
141016,"@Override protected MapperProcess internalMapSE(final File archiveIndexDir) throws IOException {
  final String bowtiePath;
synchronized (SYNC) {
    bowtiePath=install(getMapperExecutables());
  }
  final String index=getIndexArgument(archiveIndexDir);
  return new MapperProcess(this,false){
    @Override protected List<List<String>> createCommandLines(){
      final List<String> cmd=new ArrayList<>();
      cmd.addAll(createCommonArgs(bowtiePath,index));
      if (isMultipleInstancesEnabled()) {
        cmd.add(""String_Node_Str"");
      }
      cmd.add(getNamedPipeFile1().getAbsolutePath());
      getLogger().info(cmd.toString());
      return Collections.singletonList(cmd);
    }
    @Override protected File executionDirectory(){
      return archiveIndexDir;
    }
  }
;
}","@Override protected MapperProcess internalMapSE(final File archiveIndexDir) throws IOException {
  final String bowtiePath;
synchronized (SYNC) {
    bowtiePath=install(getMapperExecutableName());
  }
  final String index=getIndexArgument(archiveIndexDir);
  return new MapperProcess(this,false){
    @Override protected List<List<String>> createCommandLines(){
      final List<String> cmd=new ArrayList<>();
      cmd.addAll(createCommonArgs(bowtiePath,index));
      if (isMultipleInstancesEnabled()) {
        cmd.add(""String_Node_Str"");
      }
      cmd.add(getNamedPipeFile1().getAbsolutePath());
      getLogger().info(cmd.toString());
      return Collections.singletonList(cmd);
    }
    @Override protected File executionDirectory(){
      return archiveIndexDir;
    }
  }
;
}",0.9968253968253968
141017,"@Override protected MapperProcess internalMapPE(final File archiveIndexDir) throws IOException {
  final String bowtiePath;
synchronized (SYNC) {
    bowtiePath=install(getMapperExecutables());
  }
  final String index=getIndexArgument(archiveIndexDir);
  return new MapperProcess(this,true){
    @Override protected List<List<String>> createCommandLines(){
      final List<String> cmd=new ArrayList<>();
      cmd.addAll(createCommonArgs(bowtiePath,index));
      if (isMultipleInstancesEnabled()) {
        cmd.add(""String_Node_Str"");
      }
      cmd.add(""String_Node_Str"");
      cmd.add(getNamedPipeFile1().getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(getNamedPipeFile2().getAbsolutePath());
      return Collections.singletonList(cmd);
    }
    @Override protected File executionDirectory(){
      return archiveIndexDir;
    }
  }
;
}","@Override protected MapperProcess internalMapPE(final File archiveIndexDir) throws IOException {
  final String bowtiePath;
synchronized (SYNC) {
    bowtiePath=install(getMapperExecutableName());
  }
  final String index=getIndexArgument(archiveIndexDir);
  return new MapperProcess(this,true){
    @Override protected List<List<String>> createCommandLines(){
      final List<String> cmd=new ArrayList<>();
      cmd.addAll(createCommonArgs(bowtiePath,index));
      if (isMultipleInstancesEnabled()) {
        cmd.add(""String_Node_Str"");
      }
      cmd.add(""String_Node_Str"");
      cmd.add(getNamedPipeFile1().getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(getNamedPipeFile2().getAbsolutePath());
      return Collections.singletonList(cmd);
    }
    @Override protected File executionDirectory(){
      return archiveIndexDir;
    }
  }
;
}",0.9971214738054116
141018,"/** 
 * Wait a free JVM.
 * @param context the Hadoop context
 */
private void waitFreeJVM(final Context context){
  final long waitStartTime=System.currentTimeMillis();
  ProcessUtils.waitUntilExecutableRunning(this.mapper.getMapperName().toLowerCase());
  getLogger().info(""String_Node_Str"" + StringUtils.toTimeHumanReadable(System.currentTimeMillis() - waitStartTime) + ""String_Node_Str""+ this.mapper.getMapperName());
  context.setStatus(""String_Node_Str"" + this.mapper.getMapperName());
}","/** 
 * Wait a free JVM.
 * @param context the Hadoop context
 */
private void waitFreeJVM(final Context context){
  final long waitStartTime=System.currentTimeMillis();
  ProcessUtils.waitUntilExecutableRunning(this.mapper.getMapperExecutableName());
  getLogger().info(""String_Node_Str"" + StringUtils.toTimeHumanReadable(System.currentTimeMillis() - waitStartTime) + ""String_Node_Str""+ this.mapper.getMapperName());
  context.setStatus(""String_Node_Str"" + this.mapper.getMapperName());
}",0.6028513238289206
141019,"@Override protected void setup(final Context context) throws IOException {
  EoulsanLogger.initConsoleHandler();
  getLogger().info(""String_Node_Str"");
  final Configuration conf=context.getConfiguration();
  if (!EoulsanRuntime.isRuntime()) {
    HadoopEoulsanRuntime.newEoulsanRuntime(conf);
  }
  final String mapperName=conf.get(MAPPER_NAME_KEY);
  if (mapperName == null) {
    throw new IOException(""String_Node_Str"");
  }
  this.mapper=SequenceReadsMapperService.getInstance().newService(mapperName);
  this.mapper.setMapperVersionToUse(conf.get(MAPPER_VERSION_KEY));
  this.mapper.setMapperFlavorToUse(conf.get(MAPPER_FLAVOR_KEY));
  final String counterGroup=conf.get(CommonHadoop.COUNTER_GROUP_KEY);
  if (counterGroup != null) {
    this.counterGroup=counterGroup;
  }
  final boolean pairedEnd=Boolean.parseBoolean(conf.get(PAIR_END_KEY));
  final FastqFormat fastqFormat=FastqFormat.getFormatFromName(conf.get(FASTQ_FORMAT_KEY,""String_Node_Str"" + EoulsanRuntime.getSettings().getDefaultFastqFormat()));
  final URI[] localCacheFiles=context.getCacheFiles();
  if (localCacheFiles == null || localCacheFiles.length == 0) {
    throw new IOException(""String_Node_Str"");
  }
  if (localCacheFiles.length > 1) {
    throw new IOException(""String_Node_Str"");
  }
  getLogger().info(""String_Node_Str"" + localCacheFiles[0]);
  final DataFile archiveIndexFile=new DataFile(localCacheFiles[0].toString());
  getLogger().info(""String_Node_Str"" + archiveIndexFile);
  this.mapperIndexDir=new File(EoulsanRuntime.getRuntime().getTempDirectory(),MAPPER_INDEX_DIR_PREFIX + this.mapper.getMapperName() + ""String_Node_Str""+ conf.get(INDEX_CHECKSUM_KEY));
  getLogger().info(""String_Node_Str"" + mapperIndexDir);
  this.mapper.setFastqFormat(fastqFormat);
  getLogger().info(""String_Node_Str"" + fastqFormat);
  this.lock=new ZooKeeperLocker(conf.get(ZOOKEEPER_CONNECT_STRING_KEY),Integer.parseInt(conf.get(ZOOKEEPER_SESSION_TIMEOUT_KEY)),""String_Node_Str"" + InetAddress.getLocalHost().getHostName(),""String_Node_Str"");
  final String mapperArguments=unDoubleQuotes(conf.get(MAPPER_ARGS_KEY));
  if (mapperArguments != null) {
    this.mapper.setMapperArguments(mapperArguments);
  }
  int mapperThreads=Integer.parseInt(conf.get(MAPPER_THREADS_KEY,""String_Node_Str"" + Runtime.getRuntime().availableProcessors()));
  if (mapperThreads > Runtime.getRuntime().availableProcessors() || mapperThreads < 1) {
    mapperThreads=Runtime.getRuntime().availableProcessors();
  }
  if (!this.mapper.isMultipleInstancesEnabled()) {
    this.mapper.setThreadsNumber(mapperThreads);
  }
  getLogger().info(""String_Node_Str"" + this.mapper.getMapperName() + ""String_Node_Str""+ mapperThreads+ ""String_Node_Str"");
  final File tempDir=EoulsanRuntime.getRuntime().getTempDirectory();
  if (!tempDir.exists()) {
    getLogger().fine(""String_Node_Str"" + tempDir.getAbsolutePath());
    if (!tempDir.mkdirs()) {
      throw new IOException(""String_Node_Str"" + tempDir);
    }
  }
  this.mapper.setTempDirectory(tempDir);
  this.mapper.setExecutablesTempDirectory(tempDir);
  this.mapper.setMultipleInstancesEnabled(true);
  updateLastUsedMapperIndex(this.mapperIndexDir);
  context.setStatus(""String_Node_Str"");
  ProcessUtils.waitRandom(5000);
  this.lock.lock();
  this.mapper.init(archiveIndexFile.open(),this.mapperIndexDir,new HadoopReporter(context),this.counterGroup);
  if (this.mapper.isMultipleInstancesEnabled()) {
    this.lock.unlock();
  }
 else {
    context.setStatus(""String_Node_Str"" + this.mapper.getMapperName());
    waitFreeJVM(context);
  }
  if (pairedEnd) {
    this.process=this.mapper.mapPE();
  }
 else {
    this.process=this.mapper.mapSE();
  }
  this.writeHeaders=context.getTaskAttemptID().getTaskID().getId() == 0;
  this.samResultsParserThread=startParseSAMResultsThread(this.process);
  context.setStatus(""String_Node_Str"" + this.mapper.getMapperName());
  getLogger().info(""String_Node_Str"");
}","@Override protected void setup(final Context context) throws IOException {
  EoulsanLogger.initConsoleHandler();
  getLogger().info(""String_Node_Str"");
  final Configuration conf=context.getConfiguration();
  if (!EoulsanRuntime.isRuntime()) {
    HadoopEoulsanRuntime.newEoulsanRuntime(conf);
  }
  final String mapperName=conf.get(MAPPER_NAME_KEY);
  if (mapperName == null) {
    throw new IOException(""String_Node_Str"");
  }
  this.mapper=SequenceReadsMapperService.getInstance().newService(mapperName);
  this.mapper.setMapperVersionToUse(conf.get(MAPPER_VERSION_KEY));
  this.mapper.setMapperFlavorToUse(conf.get(MAPPER_FLAVOR_KEY));
  final String counterGroup=conf.get(CommonHadoop.COUNTER_GROUP_KEY);
  if (counterGroup != null) {
    this.counterGroup=counterGroup;
  }
  final boolean pairedEnd=Boolean.parseBoolean(conf.get(PAIR_END_KEY));
  final FastqFormat fastqFormat=FastqFormat.getFormatFromName(conf.get(FASTQ_FORMAT_KEY,""String_Node_Str"" + EoulsanRuntime.getSettings().getDefaultFastqFormat()));
  final URI[] localCacheFiles=context.getCacheFiles();
  if (localCacheFiles == null || localCacheFiles.length == 0) {
    throw new IOException(""String_Node_Str"");
  }
  if (localCacheFiles.length > 1) {
    throw new IOException(""String_Node_Str"");
  }
  getLogger().info(""String_Node_Str"" + localCacheFiles[0]);
  final DataFile archiveIndexFile=new DataFile(localCacheFiles[0].toString());
  getLogger().info(""String_Node_Str"" + archiveIndexFile);
  this.mapperIndexDir=new File(EoulsanRuntime.getRuntime().getTempDirectory(),MAPPER_INDEX_DIR_PREFIX + this.mapper.getMapperName() + ""String_Node_Str""+ conf.get(INDEX_CHECKSUM_KEY));
  getLogger().info(""String_Node_Str"" + mapperIndexDir);
  this.mapper.setFastqFormat(fastqFormat);
  getLogger().info(""String_Node_Str"" + fastqFormat);
  this.lock=new DistributedLocker(conf.get(ZOOKEEPER_CONNECT_STRING_KEY),Integer.parseInt(conf.get(ZOOKEEPER_SESSION_TIMEOUT_KEY)),""String_Node_Str"" + InetAddress.getLocalHost().getHostName(),""String_Node_Str"");
  final String mapperArguments=unDoubleQuotes(conf.get(MAPPER_ARGS_KEY));
  if (mapperArguments != null) {
    this.mapper.setMapperArguments(mapperArguments);
  }
  int mapperThreads=Integer.parseInt(conf.get(MAPPER_THREADS_KEY,""String_Node_Str"" + Runtime.getRuntime().availableProcessors()));
  if (mapperThreads > Runtime.getRuntime().availableProcessors() || mapperThreads < 1) {
    mapperThreads=Runtime.getRuntime().availableProcessors();
  }
  if (!this.mapper.isMultipleInstancesEnabled()) {
    this.mapper.setThreadsNumber(mapperThreads);
  }
  getLogger().info(""String_Node_Str"" + this.mapper.getMapperName() + ""String_Node_Str""+ mapperThreads+ ""String_Node_Str"");
  final File tempDir=EoulsanRuntime.getRuntime().getTempDirectory();
  if (!tempDir.exists()) {
    getLogger().fine(""String_Node_Str"" + tempDir.getAbsolutePath());
    if (!tempDir.mkdirs()) {
      throw new IOException(""String_Node_Str"" + tempDir);
    }
  }
  this.mapper.setTempDirectory(tempDir);
  this.mapper.setExecutablesTempDirectory(tempDir);
  this.mapper.setMultipleInstancesEnabled(true);
  updateLastUsedMapperIndex(this.mapperIndexDir);
  context.setStatus(""String_Node_Str"");
  ProcessUtils.waitRandom(5000);
  this.lock.lock();
  this.mapper.init(archiveIndexFile.open(),this.mapperIndexDir,new HadoopReporter(context),this.counterGroup);
  if (this.mapper.isMultipleInstancesEnabled()) {
    this.lock.unlock();
  }
 else {
    context.setStatus(""String_Node_Str"" + this.mapper.getMapperName());
    waitFreeJVM(context);
  }
  if (pairedEnd) {
    this.process=this.mapper.mapPE();
  }
 else {
    this.process=this.mapper.mapSE();
  }
  this.writeHeaders=context.getTaskAttemptID().getTaskID().getId() == 0;
  this.samResultsParserThread=startParseSAMResultsThread(this.process);
  context.setStatus(""String_Node_Str"" + this.mapper.getMapperName());
  getLogger().info(""String_Node_Str"");
}",0.997438524590164
141020,"/** 
 * This method runs the ExpressionCounter.
 * @param alignmentFile file containing SAM alignments
 * @param annotationFile file containing the reference genome annotation
 * @param gtfFormat true if the annotation is in GTF format
 * @param expressionFile output file for the expression step
 * @param genomeDescFile file containing the genome description
 * @param reporter the Reporter object of the Eoulsan run
 * @param counterGroup string with the counter name group for the expressionstep
 * @throws IOException
 */
protected abstract void internalCount(final DataFile alignmentFile,final DataFile annotationFile,final boolean gtfFormat,final DataFile expressionFile,final DataFile genomeDescFile,Reporter reporter,String counterGroup) throws IOException, EoulsanException, BadBioEntryException ;","/** 
 * This method runs the ExpressionCounter.
 * @param alignmentFile file containing SAM alignments
 * @param annotationFile file containing the reference genome annotation
 * @param gtfFormat true if the annotation is in GTF format
 * @param expressionFile output file for the expression step
 * @param genomeDescFile file containing the genome description
 * @param reporter the Reporter object of the Eoulsan run
 * @param counterGroup string with the counter name group for the expressionstep
 * @throws IOException if the methods fails
 */
protected abstract void internalCount(final DataFile alignmentFile,final DataFile annotationFile,final boolean gtfFormat,final DataFile expressionFile,final DataFile genomeDescFile,Reporter reporter,String counterGroup) throws IOException, EoulsanException, BadBioEntryException ;",0.9871559633027523
141021,"/** 
 * This method runs the ExpressionCounter.
 * @param alignmentFile file containing SAM alignments
 * @param annotationFile file containing the reference genome annotation
 * @param gtfFormat true if the annotation is in GTF format
 * @param expressionFile output file for the expression step
 * @param genomeDescFile file containing the genome description
 * @throws IOException
 */
void count(DataFile alignmentFile,DataFile annotationFile,final boolean gtfFormat,DataFile expressionFile,DataFile genomeDescFile) throws IOException, EoulsanException, BadBioEntryException ;","/** 
 * This method runs the ExpressionCounter.
 * @param alignmentFile file containing SAM alignments
 * @param annotationFile file containing the reference genome annotation
 * @param gtfFormat true if the annotation is in GTF format
 * @param expressionFile output file for the expression step
 * @param genomeDescFile file containing the genome description
 * @throws IOException if the counting fails
 */
void count(DataFile alignmentFile,DataFile annotationFile,final boolean gtfFormat,DataFile expressionFile,DataFile genomeDescFile) throws IOException, EoulsanException, BadBioEntryException ;",0.9813559322033898
141022,"/** 
 * Close the stream.
 * @throws IOException
 */
@Override public void close() throws IOException {
  this.reader.close();
}","/** 
 * Close the stream.
 * @throws IOException if an error occurs while closing the file
 */
@Override public void close() throws IOException {
  this.reader.close();
}",0.8590604026845637
141023,"/** 
 * @param trimmerArgs
 * @return new sequence after trimmomatic
 */
protected abstract AbstractSingleRecordTrimmer createTrimmer(String trimmerArgs);","/** 
 * Create a Trimmer object
 * @param trimmerArgs trimmer arguments
 * @return new sequence after trimmomatic
 */
protected abstract AbstractSingleRecordTrimmer createTrimmer(String trimmerArgs);",0.8725212464589235
141024,"/** 
 * Constructor.
 * @param dockerClient Docker client
 * @param dockerImage Docker image
 * @param temporaryDirectory temporary directory
 * @throws IOException if an error occurs while creating the connection
 */
DockerMapperExecutor(final String dockerImage,final File temporaryDirectory) throws IOException {
  checkNotNull(dockerImage,""String_Node_Str"");
  checkNotNull(temporaryDirectory,""String_Node_Str"");
  this.temporaryDirectory=temporaryDirectory;
  this.dockerConnection=DockerManager.getInstance().createImageInstance(dockerImage);
}","/** 
 * Constructor.
 * @param dockerImage Docker image
 * @param temporaryDirectory temporary directory
 * @throws IOException if an error occurs while creating the connection
 */
DockerMapperExecutor(final String dockerImage,final File temporaryDirectory) throws IOException {
  checkNotNull(dockerImage,""String_Node_Str"");
  checkNotNull(temporaryDirectory,""String_Node_Str"");
  this.temporaryDirectory=temporaryDirectory;
  this.dockerConnection=DockerManager.getInstance().createImageInstance(dockerImage);
}",0.9651928504233304
141025,"/** 
 * Check temporary directory.
 * @throws EoulsanException
 */
private void checkTemporaryDirectory() throws EoulsanException {
  final File tempDir=EoulsanRuntime.getSettings().getTempDirectoryFile();
  if (tempDir == null) {
    throw new EoulsanException(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(tempDir.getAbsolutePath())) {
    throw new EoulsanException(""String_Node_Str"");
  }
  if (!tempDir.exists()) {
    throw new EoulsanException(""String_Node_Str"" + tempDir);
  }
  if (!tempDir.isDirectory()) {
    throw new EoulsanException(""String_Node_Str"" + tempDir);
  }
  if (!tempDir.canRead()) {
    throw new EoulsanException(""String_Node_Str"" + tempDir);
  }
  if (!tempDir.canWrite()) {
    throw new EoulsanException(""String_Node_Str"" + tempDir);
  }
  if (!tempDir.canExecute()) {
    throw new EoulsanException(""String_Node_Str"" + tempDir);
  }
}","/** 
 * Check temporary directory.
 * @throws EoulsanException if the checking of the temporary directory fails
 */
private void checkTemporaryDirectory() throws EoulsanException {
  final File tempDir=EoulsanRuntime.getSettings().getTempDirectoryFile();
  if (tempDir == null) {
    throw new EoulsanException(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(tempDir.getAbsolutePath())) {
    throw new EoulsanException(""String_Node_Str"");
  }
  if (!tempDir.exists()) {
    throw new EoulsanException(""String_Node_Str"" + tempDir);
  }
  if (!tempDir.isDirectory()) {
    throw new EoulsanException(""String_Node_Str"" + tempDir);
  }
  if (!tempDir.canRead()) {
    throw new EoulsanException(""String_Node_Str"" + tempDir);
  }
  if (!tempDir.canWrite()) {
    throw new EoulsanException(""String_Node_Str"" + tempDir);
  }
  if (!tempDir.canExecute()) {
    throw new EoulsanException(""String_Node_Str"" + tempDir);
  }
}",0.9727626459143968
141026,"/** 
 * Public constructor.
 * @param executionArguments execution arguments
 * @param workflowCommand Command object with the content of the parameterfile
 * @param firstSteps optional steps to add at the beginning of the workflow
 * @param endSteps optional steps to add at the end of the workflow
 * @param design Design to use with the workflow
 * @throws EoulsanException
 */
public CommandWorkflow(final ExecutorArguments executionArguments,final CommandWorkflowModel workflowCommand,final List<Module> firstSteps,final List<Module> endSteps,final Design design) throws EoulsanException {
  super(executionArguments,design);
  if (workflowCommand == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.workflowCommand=workflowCommand;
  final WorkflowContext context=getWorkflowContext();
  context.setCommandName(workflowCommand.getName());
  context.setCommandDescription(workflowCommand.getDescription());
  context.setCommandAuthor(workflowCommand.getAuthor());
  initializeSettings();
  convertDesignS3URLs();
  addMainSteps();
  addFirstSteps(firstSteps);
  addEndSteps(endSteps);
  configureSteps();
  addManualDependencies();
  searchDependencies();
}","/** 
 * Public constructor.
 * @param executionArguments execution arguments
 * @param workflowCommand Command object with the content of the parameterfile
 * @param firstSteps optional steps to add at the beginning of the workflow
 * @param endSteps optional steps to add at the end of the workflow
 * @param design Design to use with the workflow
 * @throws EoulsanException if the creation of the CommandWorkflow object fails
 */
public CommandWorkflow(final ExecutorArguments executionArguments,final CommandWorkflowModel workflowCommand,final List<Module> firstSteps,final List<Module> endSteps,final Design design) throws EoulsanException {
  super(executionArguments,design);
  if (workflowCommand == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.workflowCommand=workflowCommand;
  final WorkflowContext context=getWorkflowContext();
  context.setCommandName(workflowCommand.getName());
  context.setCommandDescription(workflowCommand.getDescription());
  context.setCommandAuthor(workflowCommand.getAuthor());
  initializeSettings();
  convertDesignS3URLs();
  addMainSteps();
  addFirstSteps(firstSteps);
  addEndSteps(endSteps);
  configureSteps();
  addManualDependencies();
  searchDependencies();
}",0.978565539983512
141027,"/** 
 * Get a OutputTreeType object from the Eoulsan settings.
 * @param type the type
 * @return a OutputTreeType object
 */
public static OutputTreeType getOutputTreeType(){
  return getOutputTreeType(EoulsanRuntime.getSettings().getOutputTreeType());
}","/** 
 * Get a OutputTreeType object from the Eoulsan settings.
 * @return a OutputTreeType object
 */
public static OutputTreeType getOutputTreeType(){
  return getOutputTreeType(EoulsanRuntime.getSettings().getOutputTreeType());
}",0.9506172839506172
141028,"/** 
 * Parse the header of the new design file including the informations about the design, the genome, the annotations and the informations about the experiments.
 * @param design the design object
 * @param line the line read from your design file
 * @throws IOException
 */
private void parseHeader(final Design design,final String line) throws IOException {
  final int equalPos=line.indexOf(EQUAL_SEPARATOR);
  if (equalPos == -1) {
    throw new IOException(""String_Node_Str"");
  }
  final String key=line.substring(0,equalPos).trim();
  final String value=line.substring(equalPos + 1).trim();
  if (""String_Node_Str"".equals(key)) {
    throw new IOException(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(value)) {
    throw new IOException(""String_Node_Str"");
  }
  if (key.startsWith(EXPERIMENT_FIELD_PREFIX)) {
    readExpMetadata(key,value,design);
  }
 else {
    readDesignMetadata(key,value,design);
  }
}","/** 
 * Parse the header of the new design file including the informations about the design, the genome, the annotations and the informations about the experiments.
 * @param design the design object
 * @param line the line read from your design file
 * @throws IOException if the header parsing fails
 */
private void parseHeader(final Design design,final String line) throws IOException {
  final int equalPos=line.indexOf(EQUAL_SEPARATOR);
  if (equalPos == -1) {
    throw new IOException(""String_Node_Str"");
  }
  final String key=line.substring(0,equalPos).trim();
  final String value=line.substring(equalPos + 1).trim();
  if (""String_Node_Str"".equals(key)) {
    throw new IOException(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(value)) {
    throw new IOException(""String_Node_Str"");
  }
  if (key.startsWith(EXPERIMENT_FIELD_PREFIX)) {
    readExpMetadata(key,value,design);
  }
 else {
    readDesignMetadata(key,value,design);
  }
}",0.9851380042462844
141029,"/** 
 * Read sample metadata experiment referring to a specific experiment.
 * @param columnName the column name
 * @param columnValue the value
 * @param design the design object
 * @param sample the sample
 * @throws IOException
 */
private void readExperimentSampleMetadata(String columnName,String columnValue,Design design,Sample sample) throws IOException {
  final List<String> expField=GuavaCompatibility.splitToList(this.dotSplitter,columnName);
  if (expField.size() != 3) {
    throw new IOException(""String_Node_Str"");
  }
  String expId=expField.get(1);
  String expKey=expField.get(2);
  if (!design.containsExperiment(expId)) {
    throw new IOException(""String_Node_Str"" + expId + ""String_Node_Str"");
  }
  final Experiment experiment=design.getExperiment(expId);
  if (!experiment.containsSample(sample)) {
    experiment.addSample(sample);
  }
  final ExperimentSample experimentSample=experiment.getExperimentSample(sample);
  final ExperimentSampleMetadata experimentSampleMetadata=experimentSample.getMetadata();
  if (experimentSampleMetadata.contains(expKey)) {
    throw new IOException(""String_Node_Str"" + expKey + ""String_Node_Str"");
  }
  experimentSampleMetadata.set(expKey,columnValue);
}","/** 
 * Read sample metadata experiment referring to a specific experiment.
 * @param columnName the column name
 * @param columnValue the value
 * @param design the design object
 * @param sample the sample
 * @throws IOException if the sample metadata read is incorrect
 */
private void readExperimentSampleMetadata(String columnName,String columnValue,Design design,Sample sample) throws IOException {
  final List<String> expField=GuavaCompatibility.splitToList(this.dotSplitter,columnName);
  if (expField.size() != 3) {
    throw new IOException(""String_Node_Str"");
  }
  String expId=expField.get(1);
  String expKey=expField.get(2);
  if (!design.containsExperiment(expId)) {
    throw new IOException(""String_Node_Str"" + expId + ""String_Node_Str"");
  }
  final Experiment experiment=design.getExperiment(expId);
  if (!experiment.containsSample(sample)) {
    experiment.addSample(sample);
  }
  final ExperimentSample experimentSample=experiment.getExperimentSample(sample);
  final ExperimentSampleMetadata experimentSampleMetadata=experimentSample.getMetadata();
  if (experimentSampleMetadata.contains(expKey)) {
    throw new IOException(""String_Node_Str"" + expKey + ""String_Node_Str"");
  }
  experimentSampleMetadata.set(expKey,columnValue);
}",0.9834343434343434
141030,"/** 
 * Read the design metadata from the header.
 * @param key the key of the design metadata
 * @param value the value of the design metadata
 * @param design the design object
 * @throws IOException
 */
private void readDesignMetadata(String key,String value,Design design) throws IOException {
  if (DESIGN_FORMAT_VERSION_METADATA_KEY.equals(key)) {
    if (!FORMAT_VERSION.equals(value.trim())) {
      throw new IOException(""String_Node_Str"" + value);
    }
    return;
  }
  if (design.getMetadata().contains(key)) {
    throw new IOException(""String_Node_Str"" + key + ""String_Node_Str"");
  }
  design.getMetadata().set(key,value);
}","/** 
 * Read the design metadata from the header.
 * @param key the key of the design metadata
 * @param value the value of the design metadata
 * @param design the design object
 * @throws IOException if design metadata read is incorrect
 */
private void readDesignMetadata(String key,String value,Design design) throws IOException {
  if (DESIGN_FORMAT_VERSION_METADATA_KEY.equals(key)) {
    if (!FORMAT_VERSION.equals(value.trim())) {
      throw new IOException(""String_Node_Str"" + value);
    }
    return;
  }
  if (design.getMetadata().contains(key)) {
    throw new IOException(""String_Node_Str"" + key + ""String_Node_Str"");
  }
  design.getMetadata().set(key,value);
}",0.9719058466211086
141031,"/** 
 * Parse the column including the information by sample.
 * @param design the design object
 * @param columnNames the name of the columns
 * @param line the line read from your design file
 * @throws IOException
 */
private void parseColumns(final Design design,final List<String> columnNames,final String line,final boolean firstLine) throws IOException {
  final List<String> splitLine=GuavaCompatibility.splitToList(this.tabSplitter,line);
  if (firstLine) {
    columnNames.addAll(splitLine);
    final int sampleIdPos=columnNames.indexOf(SAMPLE_ID_FIELDNAME);
    if (sampleIdPos == -1) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + SAMPLE_ID_FIELDNAME + ""String_Node_Str"");
    }
    if (sampleIdPos != 0) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + SAMPLE_ID_FIELDNAME + ""String_Node_Str"");
    }
    final int sampleNamePos=columnNames.indexOf(SAMPLE_NAME_FIELDNAME);
    if (sampleNamePos == -1) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + SAMPLE_NAME_FIELDNAME + ""String_Node_Str"");
    }
    if (sampleNamePos != 1) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + SAMPLE_NAME_FIELDNAME + ""String_Node_Str"");
    }
  }
 else {
    if (splitLine.size() != columnNames.size()) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + splitLine.size() + ""String_Node_Str""+ columnNames.size()+ ""String_Node_Str""+ line);
    }
    final String sampleId=splitLine.get(0);
    final String sampleName=splitLine.get(1);
    final Sample sample=design.addSample(sampleId);
    sample.setName(sampleName);
    for (    Experiment e : design.getExperiments()) {
      e.addSample(sample);
    }
    final Iterator<String> nameIterator=columnNames.iterator();
    final Iterator<String> valueIterator=splitLine.iterator();
    while (nameIterator.hasNext() && valueIterator.hasNext()) {
      final String columnName=nameIterator.next();
      final String columnValue=valueIterator.next();
      if (SAMPLE_ID_FIELDNAME.equals(columnName) || SAMPLE_NAME_FIELDNAME.equals(columnName)) {
        continue;
      }
      if (columnName.startsWith(EXPERIMENT_FIELD_PREFIX)) {
        readExperimentSampleMetadata(columnName,columnValue,design,sample);
      }
 else {
        readSampleMetadata(columnName,columnValue,design,sample);
      }
    }
  }
}","/** 
 * Parse the column including the information by sample.
 * @param design the design object
 * @param columnNames the name of the columns
 * @param line the line read from your design file
 * @throws IOException if the data read is incorrect
 */
private void parseColumns(final Design design,final List<String> columnNames,final String line,final boolean firstLine) throws IOException {
  final List<String> splitLine=GuavaCompatibility.splitToList(this.tabSplitter,line);
  if (firstLine) {
    columnNames.addAll(splitLine);
    final int sampleIdPos=columnNames.indexOf(SAMPLE_ID_FIELDNAME);
    if (sampleIdPos == -1) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + SAMPLE_ID_FIELDNAME + ""String_Node_Str"");
    }
    if (sampleIdPos != 0) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + SAMPLE_ID_FIELDNAME + ""String_Node_Str"");
    }
    final int sampleNamePos=columnNames.indexOf(SAMPLE_NAME_FIELDNAME);
    if (sampleNamePos == -1) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + SAMPLE_NAME_FIELDNAME + ""String_Node_Str"");
    }
    if (sampleNamePos != 1) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + SAMPLE_NAME_FIELDNAME + ""String_Node_Str"");
    }
  }
 else {
    if (splitLine.size() != columnNames.size()) {
      throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + splitLine.size() + ""String_Node_Str""+ columnNames.size()+ ""String_Node_Str""+ line);
    }
    final String sampleId=splitLine.get(0);
    final String sampleName=splitLine.get(1);
    final Sample sample=design.addSample(sampleId);
    sample.setName(sampleName);
    for (    Experiment e : design.getExperiments()) {
      e.addSample(sample);
    }
    final Iterator<String> nameIterator=columnNames.iterator();
    final Iterator<String> valueIterator=splitLine.iterator();
    while (nameIterator.hasNext() && valueIterator.hasNext()) {
      final String columnName=nameIterator.next();
      final String columnValue=valueIterator.next();
      if (SAMPLE_ID_FIELDNAME.equals(columnName) || SAMPLE_NAME_FIELDNAME.equals(columnName)) {
        continue;
      }
      if (columnName.startsWith(EXPERIMENT_FIELD_PREFIX)) {
        readExperimentSampleMetadata(columnName,columnValue,design,sample);
      }
 else {
        readSampleMetadata(columnName,columnValue,design,sample);
      }
    }
  }
}",0.9936948297604036
141032,"/** 
 * Read sample metadata.
 * @param columnName the column name
 * @param columnValue the value
 * @param design the design object
 * @param sample the sample
 * @throws IOException
 */
private void readSampleMetadata(String columnName,String columnValue,Design design,Sample sample) throws IOException {
  if (sample.getMetadata().contains(columnName)) {
    throw new IOException(""String_Node_Str"" + columnName + ""String_Node_Str"");
  }
  sample.getMetadata().set(columnName,columnValue);
}","/** 
 * Read sample metadata.
 * @param columnName the column name
 * @param columnValue the value
 * @param design the design object
 * @param sample the sample
 * @throws IOException if the metadata read is incorrect
 */
private void readSampleMetadata(String columnName,String columnValue,Design design,Sample sample) throws IOException {
  if (sample.getMetadata().contains(columnName)) {
    throw new IOException(""String_Node_Str"" + columnName + ""String_Node_Str"");
  }
  sample.getMetadata().set(columnName,columnValue);
}",0.966796875
141033,"/** 
 * Read the experiment metadata from the header part
 * @param key the key of the experiment metadata read
 * @param value the value of the experiment metadata read
 * @param design the design object
 * @throws IOException
 */
private void readExpMetadata(String key,String value,Design design) throws IOException {
  final List<String> expField=GuavaCompatibility.splitToList(this.dotSplitter,key);
  if (expField.size() != 3) {
    throw new IOException(""String_Node_Str"");
  }
  String expId=expField.get(1);
  String expKey=expField.get(2);
  if (!design.containsExperiment(expId)) {
    design.addExperiment(expId);
  }
  if (EXPERIMENT_NAME_SUFFIX.equals(expKey)) {
    design.getExperiment(expId).setName(value);
  }
 else {
    if (design.getExperiment(expId).getMetadata().contains(key)) {
      throw new IOException(""String_Node_Str"" + key + ""String_Node_Str""+ expId+ ""String_Node_Str"");
    }
    design.getExperiment(expId).getMetadata().set(expKey,value);
  }
}","/** 
 * Read the experiment metadata from the header part
 * @param key the key of the experiment metadata read
 * @param value the value of the experiment metadata read
 * @param design the design object
 * @throws IOException if the metadata read is incorrect
 */
private void readExpMetadata(String key,String value,Design design) throws IOException {
  final List<String> expField=GuavaCompatibility.splitToList(this.dotSplitter,key);
  if (expField.size() != 3) {
    throw new IOException(""String_Node_Str"");
  }
  String expId=expField.get(1);
  String expKey=expField.get(2);
  if (!design.containsExperiment(expId)) {
    design.addExperiment(expId);
  }
  if (EXPERIMENT_NAME_SUFFIX.equals(expKey)) {
    design.getExperiment(expId).setName(value);
  }
 else {
    if (design.getExperiment(expId).getMetadata().contains(key)) {
      throw new IOException(""String_Node_Str"" + key + ""String_Node_Str""+ expId+ ""String_Node_Str"");
    }
    design.getExperiment(expId).getMetadata().set(expKey,value);
  }
}",0.9829488465396188
141034,"/** 
 * Instantiates a new tool Cheetah script interpreter.
 * @param cheetahScript the Cheetah script to execute
 * @param variables the variables of the script
 * @throws EoulsanException
 */
public CheetahInterpreter(final String cheetahScript,final Map<String,String> variables) throws EoulsanException {
  checkNotNull(variables,""String_Node_Str"");
  checkState(!variables.isEmpty(),""String_Node_Str"");
  this.cheetahScript=cheetahScript;
  this.variables=new HashMap<>(variables);
}","/** 
 * Instantiates a new tool Cheetah script interpreter.
 * @param cheetahScript the Cheetah script to execute
 * @param variables the variables of the script
 * @throws EoulsanException if the constructor fails
 */
public CheetahInterpreter(final String cheetahScript,final Map<String,String> variables) throws EoulsanException {
  checkNotNull(variables,""String_Node_Str"");
  checkState(!variables.isEmpty(),""String_Node_Str"");
  this.cheetahScript=cheetahScript;
  this.variables=new HashMap<>(variables);
}",0.975024975024975
141035,"/** 
 * Build BloomFilter represented the input stream.
 * @param is the input stream source
 * @return BloomFilter corresponding to the input stream
 * @throws IOException
 */
protected EnhancedBloomFilter buildBloomFilter(final InputStream is) throws IOException {
  final EnhancedBloomFilter filter=initBloomFilter(getExpectedNumberOfElements());
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is,Globals.DEFAULT_CHARSET));
  String line=null;
  while ((line=reader.readLine()) != null) {
    filter.put(line);
  }
  reader.close();
  return filter;
}","/** 
 * Build BloomFilter represented the input stream.
 * @param is the input stream source
 * @return BloomFilter corresponding to the input stream
 * @throws IOException if bloom filter creation fails
 */
protected EnhancedBloomFilter buildBloomFilter(final InputStream is) throws IOException {
  final EnhancedBloomFilter filter=initBloomFilter(getExpectedNumberOfElements());
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is,Globals.DEFAULT_CHARSET));
  String line=null;
  while ((line=reader.readLine()) != null) {
    filter.put(line);
  }
  reader.close();
  return filter;
}",0.9738837405223252
141036,"/** 
 * Method to decode the allowed compressions parameter.
 * @param value the parameter value as a string
 * @return the parameter value as an EnumSet
 * @throws EoulsanException
 */
private static EnumSet<CompressionType> decodeAllowedCompressionsParameterValue(final String value) throws EoulsanException {
  if (value == null) {
    throw new EoulsanException(OUTPUT_COMPRESSIONS_ALLOWED_PARAMETER + ""String_Node_Str"");
  }
  final Set<CompressionType> result=new HashSet<>();
  for (  String s : Splitter.on('\t').omitEmptyStrings().trimResults().split(value)) {
    final CompressionType compression=CompressionType.valueOf(s);
    if (compression != null) {
      result.add(compression);
    }
  }
  return EnumSet.copyOf(result);
}","/** 
 * Method to decode the allowed compressions parameter.
 * @param value the parameter value as a string
 * @return the parameter value as an EnumSet
 * @throws EoulsanException if the value parameter is null
 */
private static EnumSet<CompressionType> decodeAllowedCompressionsParameterValue(final String value) throws EoulsanException {
  if (value == null) {
    throw new EoulsanException(OUTPUT_COMPRESSIONS_ALLOWED_PARAMETER + ""String_Node_Str"");
  }
  final Set<CompressionType> result=new HashSet<>();
  for (  String s : Splitter.on('\t').omitEmptyStrings().trimResults().split(value)) {
    final CompressionType compression=CompressionType.valueOf(s);
    if (compression != null) {
      result.add(compression);
    }
  }
  return EnumSet.copyOf(result);
}",0.9795379537953796
141037,"/** 
 * Create JobConf object for HTSeq-count.
 * @param context the task context
 * @param alignmentsData alignment data
 * @param featureAnnotationData feature annotations data
 * @param gtfFormat true if the annotation file is in GTF format
 * @param genomeDescriptionData genome description data
 * @param genomicType genomic type
 * @param attributeId attributeId
 * @param splitAttributeValues split attribute values
 * @param stranded stranded mode
 * @param overlapMode overlap mode
 * @param removeAmbiguousCases true to remove ambiguous cases
 * @throws IOException if an error occurs while creating job
 * @throws BadBioEntryException if an entry of the annotation file is invalid
 * @throws EoulsanException
 */
private static Job createJobHTSeqCounter(final Configuration parentConf,final TaskContext context,final Data alignmentsData,final Data featureAnnotationData,final boolean gtfFormat,final Data genomeDescriptionData,final Data outData,final String genomicType,final String attributeId,final boolean splitAttributeValues,final StrandUsage stranded,final OverlapMode overlapMode,final boolean removeAmbiguousCases,final boolean tsamFormat) throws IOException, BadBioEntryException, EoulsanException {
  final Configuration jobConf=new Configuration(parentConf);
  DataFile inputDataFile=alignmentsData.getDataFile();
  if (inputDataFile == null) {
    throw new IOException(""String_Node_Str"");
  }
  final String dataFileSource;
  if (tsamFormat) {
    dataFileSource=StringUtils.filenameWithoutExtension(inputDataFile.getSource()) + TSAM_EXTENSION;
  }
 else {
    dataFileSource=inputDataFile.getSource();
  }
  final Path inputPath=new Path(dataFileSource);
  final DataFile annotationDataFile=featureAnnotationData.getDataFile();
  final DataFile outFile=outData.getDataFile();
  final DataFile tmpFile=new DataFile(outFile.getParent(),outFile.getBasename() + ""String_Node_Str"");
  getLogger().fine(""String_Node_Str"" + alignmentsData.getName());
  getLogger().fine(""String_Node_Str"" + inputPath.getName());
  getLogger().fine(""String_Node_Str"" + annotationDataFile.getSource());
  getLogger().fine(""String_Node_Str"" + outFile.getSource());
  getLogger().fine(""String_Node_Str"" + tmpFile.getSource());
  jobConf.set(""String_Node_Str"",""String_Node_Str"");
  jobConf.set(CommonHadoop.COUNTER_GROUP_KEY,COUNTER_GROUP);
  final DataFile genomeDescDataFile=genomeDescriptionData.getDataFile();
  jobConf.set(GENOME_DESC_PATH_KEY,genomeDescDataFile.getSource());
  jobConf.set(HTSeqCountMapper.STRANDED_PARAM,stranded.getName());
  jobConf.set(HTSeqCountMapper.OVERLAP_MODE_PARAM,overlapMode.getName());
  jobConf.setBoolean(HTSeqCountMapper.REMOVE_AMBIGUOUS_CASES,removeAmbiguousCases);
  final Path featuresIndexPath=getAnnotationIndexSerializedPath(featureAnnotationData.getDataFile());
  getLogger().info(""String_Node_Str"" + featuresIndexPath);
  if (!PathUtils.isFile(featuresIndexPath,jobConf)) {
    final Locker lock=createZookeeperLock(parentConf,context);
    lock.lock();
    createFeaturesIndex(context,annotationDataFile,gtfFormat,genomicType,attributeId,splitAttributeValues,stranded,genomeDescDataFile,featuresIndexPath,jobConf);
    lock.unlock();
  }
  final Job job=Job.getInstance(jobConf,""String_Node_Str"" + alignmentsData.getName() + ""String_Node_Str""+ inputPath.getName()+ ""String_Node_Str""+ annotationDataFile.getSource()+ ""String_Node_Str""+ genomicType+ ""String_Node_Str""+ attributeId+ ""String_Node_Str""+ stranded+ ""String_Node_Str""+ removeAmbiguousCases+ ""String_Node_Str"");
  job.addCacheFile(featuresIndexPath.toUri());
  job.setJarByClass(ExpressionHadoopModule.class);
  FileInputFormat.setInputPaths(job,inputPath);
  job.setInputFormatClass(SAMInputFormat.class);
  job.setMapperClass(HTSeqCountMapper.class);
  job.setCombinerClass(HTSeqCountReducer.class);
  job.setReducerClass(HTSeqCountReducer.class);
  job.setOutputFormatClass(ExpressionOutputFormat.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(LongWritable.class);
  FileOutputFormat.setOutputPath(job,new Path(tmpFile.getSource()));
  return job;
}","/** 
 * Create JobConf object for HTSeq-count.
 * @param context the task context
 * @param alignmentsData alignment data
 * @param featureAnnotationData feature annotations data
 * @param gtfFormat true if the annotation file is in GTF format
 * @param genomeDescriptionData genome description data
 * @param genomicType genomic type
 * @param attributeId attributeId
 * @param splitAttributeValues split attribute values
 * @param stranded stranded mode
 * @param overlapMode overlap mode
 * @param removeAmbiguousCases true to remove ambiguous cases
 * @throws IOException if an error occurs while creating job
 * @throws BadBioEntryException if an entry of the annotation file is invalid
 * @throws EoulsanException if the job creating fails
 */
private static Job createJobHTSeqCounter(final Configuration parentConf,final TaskContext context,final Data alignmentsData,final Data featureAnnotationData,final boolean gtfFormat,final Data genomeDescriptionData,final Data outData,final String genomicType,final String attributeId,final boolean splitAttributeValues,final StrandUsage stranded,final OverlapMode overlapMode,final boolean removeAmbiguousCases,final boolean tsamFormat) throws IOException, BadBioEntryException, EoulsanException {
  final Configuration jobConf=new Configuration(parentConf);
  DataFile inputDataFile=alignmentsData.getDataFile();
  if (inputDataFile == null) {
    throw new IOException(""String_Node_Str"");
  }
  final String dataFileSource;
  if (tsamFormat) {
    dataFileSource=StringUtils.filenameWithoutExtension(inputDataFile.getSource()) + TSAM_EXTENSION;
  }
 else {
    dataFileSource=inputDataFile.getSource();
  }
  final Path inputPath=new Path(dataFileSource);
  final DataFile annotationDataFile=featureAnnotationData.getDataFile();
  final DataFile outFile=outData.getDataFile();
  final DataFile tmpFile=new DataFile(outFile.getParent(),outFile.getBasename() + ""String_Node_Str"");
  getLogger().fine(""String_Node_Str"" + alignmentsData.getName());
  getLogger().fine(""String_Node_Str"" + inputPath.getName());
  getLogger().fine(""String_Node_Str"" + annotationDataFile.getSource());
  getLogger().fine(""String_Node_Str"" + outFile.getSource());
  getLogger().fine(""String_Node_Str"" + tmpFile.getSource());
  jobConf.set(""String_Node_Str"",""String_Node_Str"");
  jobConf.set(CommonHadoop.COUNTER_GROUP_KEY,COUNTER_GROUP);
  final DataFile genomeDescDataFile=genomeDescriptionData.getDataFile();
  jobConf.set(GENOME_DESC_PATH_KEY,genomeDescDataFile.getSource());
  jobConf.set(HTSeqCountMapper.STRANDED_PARAM,stranded.getName());
  jobConf.set(HTSeqCountMapper.OVERLAP_MODE_PARAM,overlapMode.getName());
  jobConf.setBoolean(HTSeqCountMapper.REMOVE_AMBIGUOUS_CASES,removeAmbiguousCases);
  final Path featuresIndexPath=getAnnotationIndexSerializedPath(featureAnnotationData.getDataFile());
  getLogger().info(""String_Node_Str"" + featuresIndexPath);
  if (!PathUtils.isFile(featuresIndexPath,jobConf)) {
    final Locker lock=createZookeeperLock(parentConf,context);
    lock.lock();
    createFeaturesIndex(context,annotationDataFile,gtfFormat,genomicType,attributeId,splitAttributeValues,stranded,genomeDescDataFile,featuresIndexPath,jobConf);
    lock.unlock();
  }
  final Job job=Job.getInstance(jobConf,""String_Node_Str"" + alignmentsData.getName() + ""String_Node_Str""+ inputPath.getName()+ ""String_Node_Str""+ annotationDataFile.getSource()+ ""String_Node_Str""+ genomicType+ ""String_Node_Str""+ attributeId+ ""String_Node_Str""+ stranded+ ""String_Node_Str""+ removeAmbiguousCases+ ""String_Node_Str"");
  job.addCacheFile(featuresIndexPath.toUri());
  job.setJarByClass(ExpressionHadoopModule.class);
  FileInputFormat.setInputPaths(job,inputPath);
  job.setInputFormatClass(SAMInputFormat.class);
  job.setMapperClass(HTSeqCountMapper.class);
  job.setCombinerClass(HTSeqCountReducer.class);
  job.setReducerClass(HTSeqCountReducer.class);
  job.setOutputFormatClass(ExpressionOutputFormat.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(LongWritable.class);
  FileOutputFormat.setOutputPath(job,new Path(tmpFile.getSource()));
  return job;
}",0.9968238455900318
141038,"/** 
 * Find the resource to load.
 * @param directory the directory where loading the resources
 * @return a list of relative paths
 * @throws IOException
 */
private List<String> findResourcePaths(final DataFile directory) throws IOException {
  final DataFile indexFile=new DataFile(directory,INDEX_FILE);
  if (indexFile.exists()) {
    return findResourcePathInIndexFile(indexFile);
  }
  return findResourcePathInDirectory(directory);
}","/** 
 * Find the resource to load.
 * @param directory the directory where loading the resources
 * @return a list of relative paths
 * @throws IOException if an error occrs while finding the resource
 */
private List<String> findResourcePaths(final DataFile directory) throws IOException {
  final DataFile indexFile=new DataFile(directory,INDEX_FILE);
  if (indexFile.exists()) {
    return findResourcePathInIndexFile(indexFile);
  }
  return findResourcePathInDirectory(directory);
}",0.9515608180839612
141039,"/** 
 * Constructor.
 * @param dockerClient Docker connection URI
 * @param dockerImage Docker image
 * @param temporaryDirectory temporary directory
 */
FallBackDockerImageInstance(final String dockerImage){
  checkNotNull(dockerImage,""String_Node_Str"");
  this.dockerImage=dockerImage;
  this.userUid=SystemUtils.uid();
  this.userGid=SystemUtils.gid();
}","/** 
 * Constructor.
 * @param dockerImage Docker image
 */
FallBackDockerImageInstance(final String dockerImage){
  checkNotNull(dockerImage,""String_Node_Str"");
  this.dockerImage=dockerImage;
  this.userUid=SystemUtils.uid();
  this.userGid=SystemUtils.gid();
}",0.8161290322580645
141040,"/** 
 * Constructor.
 * @param dockerClient Docker connection URI
 * @param dockerImage Docker image
 * @param temporaryDirectory temporary directory
 */
SportifyDockerImageInstance(final DockerClient dockerClient,final String dockerImage){
  checkNotNull(dockerClient,""String_Node_Str"");
  checkNotNull(dockerImage,""String_Node_Str"");
  this.dockerClient=dockerClient;
  this.dockerImage=dockerImage;
  this.userUid=SystemUtils.uid();
  this.userGid=SystemUtils.gid();
}","/** 
 * Constructor.
 * @param dockerClient Docker connection URI
 * @param dockerImage Docker image
 */
SportifyDockerImageInstance(final DockerClient dockerClient,final String dockerImage){
  checkNotNull(dockerClient,""String_Node_Str"");
  checkNotNull(dockerImage,""String_Node_Str"");
  this.dockerClient=dockerClient;
  this.dockerImage=dockerImage;
  this.userUid=SystemUtils.uid();
  this.userGid=SystemUtils.gid();
}",0.9451287793952968
141041,"/** 
 * Remove a file of the analysis.
 * @param filename the filename of the file to remove
 * @throws IOException
 */
protected abstract void removeFile(String filename) throws IOException ;","/** 
 * Remove a file of the analysis.
 * @param filename the filename of the file to remove
 * @throws IOException if the removing of the file fails
 */
protected abstract void removeFile(String filename) throws IOException ;",0.9186602870813396
141042,"@Override public void close(){
synchronized (this) {
    if (client != null) {
      client.close();
      this.close();
    }
  }
}","@Override public void close(){
synchronized (this) {
    if (client != null) {
      this.client.close();
    }
  }
}",0.8995983935742972
141043,"/** 
 * Public constructor.
 * @param itSuite the it suite
 * @param globalsConf global configuration for tests
 * @param applicationPath path to the application to test
 * @param testsDataDirectory file with the test configuration
 * @param outputTestsDirectory output test directory with result executeapplication
 * @param testName test name
 * @throws IOException if an error occurs while reading the configurationfile.
 * @throws EoulsanException if an error occurs while search expected directoryof the test.
 */
public IT(final ITSuite itSuite,final Properties globalsConf,final File applicationPath,final File testsDataDirectory,final File outputTestsDirectory,final String testName) throws IOException, EoulsanException {
  checkExistingDirectoryFile(testsDataDirectory,""String_Node_Str"");
  checkExistingDirectoryFile(outputTestsDirectory,""String_Node_Str"");
  checkExistingDirectoryFile(applicationPath,""String_Node_Str"");
  this.itSuite=itSuite;
  this.applicationPath=applicationPath;
  this.testName=testName;
  this.testDataDirectory=new File(testsDataDirectory,this.testName);
  this.outputTestDirectory=new File(outputTestsDirectory,this.testName);
  this.testConf=loadConfigurationFile(globalsConf);
  this.environmentVariables=extractEnvironmentVariables();
  this.itResult=new ITResult(this);
  this.isRemoveFileRequired=Boolean.parseBoolean(this.testConf.getProperty(SUCCESS_IT_DELETE_FILE_CONF_KEY));
  this.generateAllExpectedDirectoryTest=this.itSuite.isGenerateAllExpectedDirectoryTest();
  this.generateNewExpectedDirectoryTests=this.itSuite.isGenerateNewExpectedDirectoryTests();
  this.generateExpectedDirectoryTestData=this.generateAllExpectedDirectoryTest || this.generateNewExpectedDirectoryTests;
  this.manualGenerationExpectedData=Boolean.parseBoolean(this.testConf.getProperty(ITFactory.MANUAL_GENERATION_EXPECTED_DATA_CONF_KEY));
  this.expectedTestDirectory=retrieveExpectedDirectory();
  this.fileToComparePatterns=extractPattern(ITFactory.FILE_TO_COMPARE_PATTERNS_CONF_KEY);
  this.fileToRemovePatterns=extractPattern(ITFactory.FILE_TO_REMOVE_CONF_KEY);
  this.excludeToComparePatterns=buildExcludePatterns(extractPattern(ITFactory.EXCLUDE_TO_COMPARE_PATTERNS_CONF_KEY));
  this.checkExistenceFilePatterns=extractPattern(ITFactory.CHECK_EXISTENCE_FILE_PATTERNS_CONF_KEY);
  this.checkLengthFilePatterns=extractPattern(ITFactory.CHECK_LENGTH_FILE_PATTERNS_CONF_KEY);
  this.checkAbsenceFilePatterns=this.testConf.getProperty(ITFactory.CHECK_ABSENCE_FILE_PATTERNS_CONF_KEY);
  if (this.testConf.contains(ITFactory.DESCRIPTION_CONF_KEY)) {
    this.description=this.testConf.getProperty(ITFactory.DESCRIPTION_CONF_KEY) + ""String_Node_Str"" + this.itSuite.getActionType();
  }
 else {
    this.description=this.testName + ""String_Node_Str"" + this.itSuite.getActionType();
  }
}","/** 
 * Public constructor.
 * @param itSuite the it suite
 * @param globalsConf global configuration for tests
 * @param applicationPath path to the application to test
 * @param testsDataDirectory file with the test configuration
 * @param outputTestsDirectory output test directory with result executeapplication
 * @param testName test name
 * @throws IOException if an error occurs while reading the configurationfile.
 * @throws EoulsanException if an error occurs while search expected directoryof the test.
 */
public IT(final ITSuite itSuite,final Properties globalsConf,final File applicationPath,final File testsDataDirectory,final File outputTestsDirectory,final String testName) throws IOException, EoulsanException {
  checkExistingDirectoryFile(testsDataDirectory,""String_Node_Str"");
  checkExistingDirectoryFile(outputTestsDirectory,""String_Node_Str"");
  checkExistingDirectoryFile(applicationPath,""String_Node_Str"");
  this.itSuite=itSuite;
  this.applicationPath=applicationPath;
  this.testName=testName;
  this.testDataDirectory=new File(testsDataDirectory,this.testName);
  this.outputTestDirectory=new File(outputTestsDirectory,this.testName);
  this.testConf=loadConfigurationFile(globalsConf);
  this.environmentVariables=extractEnvironmentVariables();
  this.itResult=new ITResult(this);
  this.isRemoveFileRequired=Boolean.parseBoolean(this.testConf.getProperty(SUCCESS_IT_DELETE_FILE_CONF_KEY));
  this.generateAllExpectedDirectoryTest=this.itSuite.isGenerateAllExpectedDirectoryTest();
  this.generateNewExpectedDirectoryTests=this.itSuite.isGenerateNewExpectedDirectoryTests();
  this.generateExpectedDirectoryTestData=this.generateAllExpectedDirectoryTest || this.generateNewExpectedDirectoryTests;
  this.manualGenerationExpectedData=Boolean.parseBoolean(this.testConf.getProperty(ITFactory.MANUAL_GENERATION_EXPECTED_DATA_CONF_KEY));
  this.expectedTestDirectory=retrieveExpectedDirectory();
  this.fileToComparePatterns=extractPattern(ITFactory.FILE_TO_COMPARE_PATTERNS_CONF_KEY);
  this.fileToRemovePatterns=extractPattern(ITFactory.FILE_TO_REMOVE_CONF_KEY);
  this.excludeToComparePatterns=buildExcludePatterns(extractPattern(ITFactory.EXCLUDE_TO_COMPARE_PATTERNS_CONF_KEY));
  this.checkExistenceFilePatterns=extractPattern(ITFactory.CHECK_EXISTENCE_FILE_PATTERNS_CONF_KEY);
  this.checkLengthFilePatterns=extractPattern(ITFactory.CHECK_LENGTH_FILE_PATTERNS_CONF_KEY);
  this.checkAbsenceFilePatterns=this.testConf.getProperty(ITFactory.CHECK_ABSENCE_FILE_PATTERNS_CONF_KEY);
  if (this.testConf.containsKey(ITFactory.DESCRIPTION_CONF_KEY)) {
    this.description=this.testConf.getProperty(ITFactory.DESCRIPTION_CONF_KEY) + ""String_Node_Str"" + this.itSuite.getActionType();
  }
 else {
    this.description=this.testName + ""String_Node_Str"" + this.itSuite.getActionType();
  }
}",0.9994666666666666
141044,"/** 
 * Create an ArrayList Object.
 * @param elements to add at the creation of the list
 * @return a new ArrayList object
 */
public static <E>List<E> newArrayList(final Collection<? extends E> elements){
  return new ArrayList<>(elements);
}","/** 
 * Create an ArrayList Object.
 * @param elements to add at the creation of the list
 * @return a new ArrayList object
 */
public static <E>List<E> newArrayList(final Collection<? extends E> elements){
  return new ArrayList<E>(elements);
}",0.9979550102249488
141045,"/** 
 * Create a HashSet Object.
 * @param elements to add at the creation of the set
 * @return a new HashSet object
 */
public static <E>HashSet<E> newHashSet(final Collection<? extends E> elements){
  return new HashSet<>(elements);
}","/** 
 * Create a HashSet Object.
 * @param elements to add at the creation of the set
 * @return a new HashSet object
 */
public static <E>HashSet<E> newHashSet(final Collection<? extends E> elements){
  return new HashSet<E>(elements);
}",0.9978947368421052
141046,"@Test public void test(){
  Design d=new Design();
  d.addExperiment(""String_Node_Str"");
  ExperimentMetadata em=d.getExperiment(""String_Node_Str"").getMetadata();
  assertFalse(em.containsSkip());
  em.setSkip(false);
  assertTrue(em.containsSkip());
  assertFalse(em.isSkip());
  em.setSkip(true);
  assertTrue(em.isSkip());
  assertTrue(em.containsSkip());
  assertNull(em.getReference());
  em.setReference(""String_Node_Str"");
  assertEquals(""String_Node_Str"",em.getReference());
  assertTrue(em.containsReference());
  assertNull(em.getModel());
  em.setModel(""String_Node_Str"");
  assertEquals(""String_Node_Str"",em.getModel());
  assertTrue(em.containsModel());
  assertFalse(em.containsContrast());
  em.setContrast(true);
  assertEquals(true,em.isContrast());
  assertTrue(em.containsContrast());
  assertFalse(em.containsBuildContrast());
  em.setBuildContrast(true);
  assertTrue(em.isBuildContrast());
  assertTrue(em.containsBuildContrast());
  assertNull(em.getDesignFile());
  em.setDesignFile(""String_Node_Str"");
  assertEquals(""String_Node_Str"",em.getDesignFile());
  assertTrue(em.containsDesignFile());
  assertNull(em.getComparison());
  em.setComparisons(""String_Node_Str"");
  assertEquals(""String_Node_Str"",em.getComparison());
  assertTrue(em.containsComparisons());
  assertNull(em.getContrastFile());
  em.setContrastFile(""String_Node_Str"");
  assertEquals(""String_Node_Str"",em.getContrastFile());
  assertTrue(em.containsContrastFile());
}","@Test public void test(){
  Design d=new Design();
  d.addExperiment(""String_Node_Str"");
  ExperimentMetadata em=d.getExperiment(""String_Node_Str"").getMetadata();
  assertFalse(em.containsSkip());
  em.setSkip(false);
  assertTrue(em.containsSkip());
  assertFalse(em.isSkip());
  em.setSkip(true);
  assertTrue(em.isSkip());
  assertTrue(em.containsSkip());
  assertNull(em.getReference());
  em.setReference(""String_Node_Str"");
  assertEquals(""String_Node_Str"",em.getReference());
  assertTrue(em.containsReference());
  assertNull(em.getModel());
  em.setModel(""String_Node_Str"");
  assertEquals(""String_Node_Str"",em.getModel());
  assertTrue(em.containsModel());
  assertFalse(em.containsContrast());
  em.setContrast(true);
  assertEquals(true,em.isContrast());
  assertTrue(em.containsContrast());
  assertFalse(em.containsBuildContrast());
  em.setBuildContrast(true);
  assertTrue(em.isBuildContrast());
  assertTrue(em.containsBuildContrast());
  assertNull(em.getDesignFile());
  em.setDesignFile(""String_Node_Str"");
  assertEquals(""String_Node_Str"",em.getDesignFile());
  assertTrue(em.containsDesignFile());
  assertNull(em.getComparisons());
  em.setComparisons(""String_Node_Str"");
  assertEquals(""String_Node_Str"",em.getComparisons());
  assertTrue(em.containsComparisons());
  assertNull(em.getContrastFile());
  em.setContrastFile(""String_Node_Str"");
  assertEquals(""String_Node_Str"",em.getContrastFile());
  assertTrue(em.containsContrastFile());
}",0.9993169398907104
141047,"/** 
 * Wait the end of the main process.
 * @throws InterruptedException if an error occurs while waiting the end ofthe process
 * @throws IOException if an error occurs while waiting the end of the process
 */
public void waitFor() throws IOException {
  for (  Result result : this.processResults) {
    final int exitValue=result.waitFor();
    getLogger().fine(""String_Node_Str"" + exitValue + ""String_Node_Str"");
    if (exitValue != 0) {
      throw new IOException(""String_Node_Str"" + this.mapperName + ""String_Node_Str""+ exitValue);
    }
  }
  for (  File f : this.filesToRemove) {
    removeFile(f);
  }
}","/** 
 * Wait the end of the main process.
 * @throws IOException if an error occurs while waiting the end of the process
 */
public void waitFor() throws IOException {
  for (  Result result : this.processResults) {
    final int exitValue=result.waitFor();
    getLogger().fine(""String_Node_Str"" + exitValue + ""String_Node_Str"");
    if (exitValue != 0) {
      throw new IOException(""String_Node_Str"" + this.mapperName + ""String_Node_Str""+ exitValue);
    }
  }
  for (  File f : this.filesToRemove) {
    removeFile(f);
  }
}",0.5336832895888014
141048,"/** 
 * Read a step result file.
 * @param in the input stream to read
 * @throws IOException if an error occurs while reading the file
 */
public void read(final InputStream in){
  checkNotNull(in);
  checkImmutableState();
  final JsonReader reader=Json.createReader(new InputStreamReader(in));
  final JsonObject obj=reader.readObject();
  this.jobId=obj.getString(JOB_ID_TAG);
  this.jobUUID=obj.getString(JOB_UUID_TAG);
  this.jobDescription=obj.getString(JOB_DESCRIPTION_TAG);
  this.jobEnvironment=obj.getString(JOB_ENVIRONMENT_TAG);
  this.stepId=obj.getString(STEP_ID_TAG);
  this.stepName=obj.getString(STEP_NAME_TAG);
  this.stepClass=obj.getString(STEP_CLASS_TAG);
  this.stepVersion=new Version(obj.getString(STEP_VERSION_TAG));
  this.startTime=parseDate(obj.getString(START_TIME_TAG));
  this.endTime=parseDate(obj.getString(END_TIME_TAG));
  this.duration=obj.getInt(DURATION_IN_MILLISECONDS_TAG);
  this.success=obj.getBoolean(SUCCESS_TAG);
  this.stepMessage=obj.getString(STEP_MESSAGE_TAG);
  System.out.println(this.startTime);
  this.parameters=new LinkedHashSet<>();
  final JsonObject parametersObj=obj.getJsonObject(STEP_PARAMETERS_TAG);
  for (  String key : parametersObj.keySet()) {
    this.parameters.add(new Parameter(key,parametersObj.getString(key)));
  }
  final JsonObject countersObj=obj.getJsonObject(COUNTERS_TAG);
  for (  String group : countersObj.keySet()) {
    if (!this.counters.containsKey(group)) {
      this.counters.put(group,new HashMap<String,Long>());
    }
    final Map<String,Long> map=this.counters.get(group);
    JsonObject groupObj=countersObj.getJsonObject(group);
    for (    String counterName : groupObj.keySet()) {
      map.put(counterName,groupObj.getJsonNumber(counterName).longValue());
    }
  }
  final JsonArray tasksArray=obj.getJsonArray(TASKS_TAG);
  for (  JsonValue entry : tasksArray) {
    final JsonObject entryObj=(JsonObject)entry;
    final int taskId=entryObj.getInt(TASK_ID_TAG);
    this.taskNames.put(taskId,entryObj.getString(TASK_NAME_TAG));
    this.taskDescriptions.put(taskId,entryObj.getString(TASK_DESCRIPTION_TAG));
    this.taskMessages.put(taskId,entryObj.getString(TASK_MESSAGE_TAG));
    final Map<String,Long> map=new HashMap<>();
    this.taskCounters.put(taskId,map);
    final JsonObject taskCountersObj=entryObj.getJsonObject(TASK_COUNTERS_TAG);
    for (    String counterName : taskCountersObj.keySet()) {
      map.put(counterName,taskCountersObj.getJsonNumber(counterName).longValue());
    }
  }
}","/** 
 * Read a step result file.
 * @param in the input stream to read
 */
public void read(final InputStream in){
  checkNotNull(in);
  checkImmutableState();
  final JsonReader reader=Json.createReader(new InputStreamReader(in));
  final JsonObject obj=reader.readObject();
  this.jobId=obj.getString(JOB_ID_TAG);
  this.jobUUID=obj.getString(JOB_UUID_TAG);
  this.jobDescription=obj.getString(JOB_DESCRIPTION_TAG);
  this.jobEnvironment=obj.getString(JOB_ENVIRONMENT_TAG);
  this.stepId=obj.getString(STEP_ID_TAG);
  this.stepName=obj.getString(STEP_NAME_TAG);
  this.stepClass=obj.getString(STEP_CLASS_TAG);
  this.stepVersion=new Version(obj.getString(STEP_VERSION_TAG));
  this.startTime=parseDate(obj.getString(START_TIME_TAG));
  this.endTime=parseDate(obj.getString(END_TIME_TAG));
  this.duration=obj.getInt(DURATION_IN_MILLISECONDS_TAG);
  this.success=obj.getBoolean(SUCCESS_TAG);
  this.stepMessage=obj.getString(STEP_MESSAGE_TAG);
  System.out.println(this.startTime);
  this.parameters=new LinkedHashSet<>();
  final JsonObject parametersObj=obj.getJsonObject(STEP_PARAMETERS_TAG);
  for (  String key : parametersObj.keySet()) {
    this.parameters.add(new Parameter(key,parametersObj.getString(key)));
  }
  final JsonObject countersObj=obj.getJsonObject(COUNTERS_TAG);
  for (  String group : countersObj.keySet()) {
    if (!this.counters.containsKey(group)) {
      this.counters.put(group,new HashMap<String,Long>());
    }
    final Map<String,Long> map=this.counters.get(group);
    JsonObject groupObj=countersObj.getJsonObject(group);
    for (    String counterName : groupObj.keySet()) {
      map.put(counterName,groupObj.getJsonNumber(counterName).longValue());
    }
  }
  final JsonArray tasksArray=obj.getJsonArray(TASKS_TAG);
  for (  JsonValue entry : tasksArray) {
    final JsonObject entryObj=(JsonObject)entry;
    final int taskId=entryObj.getInt(TASK_ID_TAG);
    this.taskNames.put(taskId,entryObj.getString(TASK_NAME_TAG));
    this.taskDescriptions.put(taskId,entryObj.getString(TASK_DESCRIPTION_TAG));
    this.taskMessages.put(taskId,entryObj.getString(TASK_MESSAGE_TAG));
    final Map<String,Long> map=new HashMap<>();
    this.taskCounters.put(taskId,map);
    final JsonObject taskCountersObj=entryObj.getJsonObject(TASK_COUNTERS_TAG);
    for (    String counterName : taskCountersObj.keySet()) {
      map.put(counterName,taskCountersObj.getJsonNumber(counterName).longValue());
    }
  }
}",0.9868607236709116
141049,"/** 
 * Public constructor
 * @param filename File to read
 * @throws IOException if the stream is null
 * @throws FileNotFoundException if the file doesn't exist
 */
public Eoulsan1DesignReader(final String filename) throws FileNotFoundException {
  checkNotNull(filename,""String_Node_Str"");
  this.is=new FileInputStream(filename);
}","/** 
 * Public constructor
 * @param filename File to read
 * @throws FileNotFoundException if the file doesn't exist
 */
public Eoulsan1DesignReader(final String filename) throws FileNotFoundException {
  checkNotNull(filename,""String_Node_Str"");
  this.is=new FileInputStream(filename);
}",0.928
141050,"/** 
 * Read sample metadata experiment referring to a specific experiment.
 * @param columnName the column name
 * @param columnValue the value
 * @param design the design object
 * @param sampleId the sample id
 * @throws IOException
 */
private void readExperimentSampleMetadata(String columnName,String columnValue,Design design,Sample sample) throws IOException {
  final List<String> expField=splitToList(this.dotSplitter,columnName);
  if (expField.size() != 3) {
    throw new IOException(""String_Node_Str"");
  }
  String expId=expField.get(1);
  String expKey=expField.get(2);
  if (!design.containsExperiment(expId)) {
    throw new IOException(""String_Node_Str"" + expId + ""String_Node_Str"");
  }
  final Experiment experiment=design.getExperiment(expId);
  if (!experiment.containsSample(sample)) {
    experiment.addSample(sample);
  }
  final ExperimentSample experimentSample=experiment.getExperimentSample(sample);
  final ExperimentSampleMetadata experimentSampleMetadata=experimentSample.getMetadata();
  if (experimentSampleMetadata.contains(expKey)) {
    throw new IOException(""String_Node_Str"" + expKey + ""String_Node_Str"");
  }
  experimentSampleMetadata.set(expKey,columnValue);
}","/** 
 * Read sample metadata experiment referring to a specific experiment.
 * @param columnName the column name
 * @param columnValue the value
 * @param design the design object
 * @param sample the sample
 * @throws IOException
 */
private void readExperimentSampleMetadata(String columnName,String columnValue,Design design,Sample sample) throws IOException {
  final List<String> expField=splitToList(this.dotSplitter,columnName);
  if (expField.size() != 3) {
    throw new IOException(""String_Node_Str"");
  }
  String expId=expField.get(1);
  String expKey=expField.get(2);
  if (!design.containsExperiment(expId)) {
    throw new IOException(""String_Node_Str"" + expId + ""String_Node_Str"");
  }
  final Experiment experiment=design.getExperiment(expId);
  if (!experiment.containsSample(sample)) {
    experiment.addSample(sample);
  }
  final ExperimentSample experimentSample=experiment.getExperimentSample(sample);
  final ExperimentSampleMetadata experimentSampleMetadata=experimentSample.getMetadata();
  if (experimentSampleMetadata.contains(expKey)) {
    throw new IOException(""String_Node_Str"" + expKey + ""String_Node_Str"");
  }
  experimentSampleMetadata.set(expKey,columnValue);
}",0.9979175343606832
141051,"/** 
 * Read sample metadata.
 * @param columnName the column name
 * @param columnValue the value
 * @param design the design object
 * @param sampleId the sample id
 * @throws IOException
 */
private void readSampleMetadata(String columnName,String columnValue,Design design,Sample sample) throws IOException {
  if (sample.getMetadata().contains(columnName)) {
    throw new IOException(""String_Node_Str"" + columnName + ""String_Node_Str"");
  }
  sample.getMetadata().set(columnName,columnValue);
}","/** 
 * Read sample metadata.
 * @param columnName the column name
 * @param columnValue the value
 * @param design the design object
 * @param sample the sample
 * @throws IOException
 */
private void readSampleMetadata(String columnName,String columnValue,Design design,Sample sample) throws IOException {
  if (sample.getMetadata().contains(columnName)) {
    throw new IOException(""String_Node_Str"" + columnName + ""String_Node_Str"");
  }
  sample.getMetadata().set(columnName,columnValue);
}",0.9728643216080402
141052,"/** 
 * Determine if there is biological replicates in an experiment
 * @param conditionsMap
 * @param rCondNames
 * @param rRepTechGroup
 * @return a boolean
 */
private boolean isBiologicalReplicates(final Map<String,List<Integer>> conditionsMap,final List<String> rCondNames,final List<String> rRepTechGroup){
  for (  String condition : rCondNames) {
    List<Integer> condPos=conditionsMap.get(condition);
    for (int i=0; i < condPos.size() - 1; i++) {
      int pos1=condPos.get(i);
      int pos2=condPos.get(i + 1);
      if (!rRepTechGroup.get(pos1).equals(rRepTechGroup.get(pos2))) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Determine if there is biological replicates in an experiment
 * @param conditionsMap map of the conditions
 * @param rCondNames r condition names
 * @param rRepTechGroup replicate tech group
 * @return a boolean
 */
private boolean isBiologicalReplicates(final Map<String,List<Integer>> conditionsMap,final List<String> rCondNames,final List<String> rRepTechGroup){
  for (  String condition : rCondNames) {
    List<Integer> condPos=conditionsMap.get(condition);
    for (int i=0; i < condPos.size() - 1; i++) {
      int pos1=condPos.get(i);
      int pos2=condPos.get(i + 1);
      if (!rRepTechGroup.get(pos1).equals(rRepTechGroup.get(pos2))) {
        return true;
      }
    }
  }
  return false;
}",0.9553113553113554
141053,"/** 
 * Check deprecated parameters.
 * @param parameter the parameter to check
 * @param stepId step id
 * @throws EoulsanException if the parameter is no more supported
 */
static void checkDeprecatedParameter(final StepConfigurationContext context,final Parameter parameter) throws EoulsanException {
  if (parameter == null) {
    return;
  }
switch (parameter.getName()) {
case ""String_Node_Str"":
    Modules.renamedParameter(context,parameter,""String_Node_Str"",true);
case ""String_Node_Str"":
  Modules.renamedParameter(context,parameter,""String_Node_Str"",true);
case ""String_Node_Str"":
Modules.renamedParameter(context,parameter,""String_Node_Str"",true);
case ""String_Node_Str"":
Modules.renamedParameter(context,parameter,""String_Node_Str"",true);
case ""String_Node_Str"":
Modules.renamedParameter(context,parameter,""String_Node_Str"");
break;
default :
break;
}
}","/** 
 * Check deprecated parameters.
 * @param context step configuration context
 * @param parameter the parameter to check
 * @throws EoulsanException if the parameter is no more supported
 */
static void checkDeprecatedParameter(final StepConfigurationContext context,final Parameter parameter) throws EoulsanException {
  if (parameter == null) {
    return;
  }
switch (parameter.getName()) {
case ""String_Node_Str"":
    Modules.renamedParameter(context,parameter,""String_Node_Str"",true);
case ""String_Node_Str"":
  Modules.renamedParameter(context,parameter,""String_Node_Str"",true);
case ""String_Node_Str"":
Modules.renamedParameter(context,parameter,""String_Node_Str"",true);
case ""String_Node_Str"":
Modules.renamedParameter(context,parameter,""String_Node_Str"",true);
case ""String_Node_Str"":
Modules.renamedParameter(context,parameter,""String_Node_Str"");
break;
default :
break;
}
}",0.9600456621004566
141054,"/** 
 * Compute the checksum of a ZIP file.
 * @param is input stream
 * @return the checksum as a string
 * @throws IOException if an error occurs while creating the checksum
 */
private static String computeZipCheckSum(final InputStream in) throws IOException {
  ZipArchiveInputStream zais=new ZipArchiveInputStream(in);
  final Hasher hs=Hashing.md5().newHasher();
  final Map<String,long[]> map=new HashMap<>();
  ZipArchiveEntry e;
  while ((e=zais.getNextZipEntry()) != null) {
    map.put(e.getName(),new long[]{e.getSize(),e.getCrc()});
  }
  zais.close();
  for (  String filename : new TreeSet<>(map.keySet())) {
    hs.putString(filename,StandardCharsets.UTF_8);
    for (    long l : map.get(filename)) {
      hs.putLong(l);
    }
  }
  return hs.hash().toString();
}","/** 
 * Compute the checksum of a ZIP file.
 * @param in input stream
 * @return the checksum as a string
 * @throws IOException if an error occurs while creating the checksum
 */
private static String computeZipCheckSum(final InputStream in) throws IOException {
  ZipArchiveInputStream zais=new ZipArchiveInputStream(in);
  final Hasher hs=Hashing.md5().newHasher();
  final Map<String,long[]> map=new HashMap<>();
  ZipArchiveEntry e;
  while ((e=zais.getNextZipEntry()) != null) {
    map.put(e.getName(),new long[]{e.getSize(),e.getCrc()});
  }
  zais.close();
  for (  String filename : new TreeSet<>(map.keySet())) {
    hs.putString(filename,StandardCharsets.UTF_8);
    for (    long l : map.get(filename)) {
      hs.putLong(l);
    }
  }
  return hs.hash().toString();
}",0.998719590268886
141055,"/** 
 * Convert SAM file to FASTQ
 * @param samDataFile input SAM file
 * @param fastqFile output FASTQ file
 * @param reporter reporter
 * @param tmpDir temporary directory
 * @throws IOException if an error occurs
 */
private static void writeConvert(final File samDataFile,final DataFile fastqDataFile1,final DataFile fastqDataFile2,final Reporter reporter) throws IOException {
  final SamReader samReader=SamReaderFactory.makeDefault().open(SamInputResource.of(new FileInputStream(samDataFile)));
  final FastqWriter fastqWriter1=new FastqWriter(fastqDataFile1.create());
  final FastqWriter fastqWriter2=fastqDataFile2 == null ? null : new FastqWriter(fastqDataFile2.create());
  int id=0;
  String seq1=null;
  String seq2=null;
  String qual1=null;
  String qual2=null;
  String currentRecordId=null;
  for (  final SAMRecord samRecord : samReader) {
    if (currentRecordId != null && !currentRecordId.equals(samRecord.getReadName())) {
      id++;
      reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
      writeFastq(id,fastqWriter1,fastqWriter2,currentRecordId,seq1,qual1,seq2,qual2);
      seq1=seq2=qual1=qual2=null;
    }
    if (samRecord.getReadPairedFlag() && !samRecord.getFirstOfPairFlag()) {
      seq2=samRecord.getReadString();
      qual2=samRecord.getBaseQualityString();
    }
 else {
      seq1=samRecord.getReadString();
      qual1=samRecord.getBaseQualityString();
    }
    currentRecordId=samRecord.getReadName();
  }
  if (seq1 != null && seq2 != null) {
    id++;
    reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
    writeFastq(id,fastqWriter1,fastqWriter2,currentRecordId,seq1,qual1,seq2,qual2);
  }
  samReader.close();
  fastqWriter1.close();
  if (fastqWriter2 != null) {
    fastqWriter2.close();
  }
}","/** 
 * Convert SAM file to FASTQ
 * @param samDataFile input SAM file
 * @param fastqDataFile1 output FASTQ file 1
 * @param fastqDataFile2 output FASTQ file 2
 * @param reporter reporter
 * @throws IOException if an error occurs
 */
private static void writeConvert(final File samDataFile,final DataFile fastqDataFile1,final DataFile fastqDataFile2,final Reporter reporter) throws IOException {
  final SamReader samReader=SamReaderFactory.makeDefault().open(SamInputResource.of(new FileInputStream(samDataFile)));
  final FastqWriter fastqWriter1=new FastqWriter(fastqDataFile1.create());
  final FastqWriter fastqWriter2=fastqDataFile2 == null ? null : new FastqWriter(fastqDataFile2.create());
  int id=0;
  String seq1=null;
  String seq2=null;
  String qual1=null;
  String qual2=null;
  String currentRecordId=null;
  for (  final SAMRecord samRecord : samReader) {
    if (currentRecordId != null && !currentRecordId.equals(samRecord.getReadName())) {
      id++;
      reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
      writeFastq(id,fastqWriter1,fastqWriter2,currentRecordId,seq1,qual1,seq2,qual2);
      seq1=seq2=qual1=qual2=null;
    }
    if (samRecord.getReadPairedFlag() && !samRecord.getFirstOfPairFlag()) {
      seq2=samRecord.getReadString();
      qual2=samRecord.getBaseQualityString();
    }
 else {
      seq1=samRecord.getReadString();
      qual1=samRecord.getBaseQualityString();
    }
    currentRecordId=samRecord.getReadName();
  }
  if (seq1 != null && seq2 != null) {
    id++;
    reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
    writeFastq(id,fastqWriter1,fastqWriter2,currentRecordId,seq1,qual1,seq2,qual2);
  }
  samReader.close();
  fastqWriter1.close();
  if (fastqWriter2 != null) {
    fastqWriter2.close();
  }
}",0.9692177351030782
141056,"/** 
 * Map method. Copies one file from source file system to destination.
 * @param key src len
 * @param value FilePair (FileStatus src, Path dst)
 * @param out Log of failed copies
 * @param reporter
 */
@Override public void map(final LongWritable key,final FilePair value,final OutputCollector<WritableComparable<?>,Text> out,final Reporter reporter) throws IOException {
  final FileStatus srcstat=value.input;
  final Path relativedst=new Path(value.output);
  try {
    copy(srcstat,relativedst,out,reporter);
  }
 catch (  IOException e) {
    ++this.failcount;
    reporter.incrCounter(Counter.FAIL,1);
    updateStatus(reporter);
    final String sfailure=""String_Node_Str"" + relativedst + ""String_Node_Str""+ StringUtils.stringifyException(e);
    out.collect(null,new Text(sfailure));
    getLogger().info(sfailure);
    try {
      for (int i=0; i < 3; ++i) {
        try {
          final Path tmp=new Path(this.job.get(TMP_DIR_LABEL),relativedst);
          if (this.destFileSys.delete(tmp,true)) {
            break;
          }
        }
 catch (        Throwable ex) {
          getLogger().fine(""String_Node_Str"" + ex.getMessage());
        }
        updateStatus(reporter);
        Thread.sleep(3 * 1000);
      }
    }
 catch (    InterruptedException inte) {
      throw (IOException)new IOException().initCause(inte);
    }
  }
 finally {
    updateStatus(reporter);
  }
}","/** 
 * Map method. Copies one file from source file system to destination.
 * @param key src len
 * @param value FilePair (FileStatus src, Path dst)
 * @param out Log of failed copies
 * @param reporter Hadoop reporter
 */
@Override public void map(final LongWritable key,final FilePair value,final OutputCollector<WritableComparable<?>,Text> out,final Reporter reporter) throws IOException {
  final FileStatus srcstat=value.input;
  final Path relativedst=new Path(value.output);
  try {
    copy(srcstat,relativedst,out,reporter);
  }
 catch (  IOException e) {
    ++this.failcount;
    reporter.incrCounter(Counter.FAIL,1);
    updateStatus(reporter);
    final String sfailure=""String_Node_Str"" + relativedst + ""String_Node_Str""+ StringUtils.stringifyException(e);
    out.collect(null,new Text(sfailure));
    getLogger().info(sfailure);
    try {
      for (int i=0; i < 3; ++i) {
        try {
          final Path tmp=new Path(this.job.get(TMP_DIR_LABEL),relativedst);
          if (this.destFileSys.delete(tmp,true)) {
            break;
          }
        }
 catch (        Throwable ex) {
          getLogger().fine(""String_Node_Str"" + ex.getMessage());
        }
        updateStatus(reporter);
        Thread.sleep(3 * 1000);
      }
    }
 catch (    InterruptedException inte) {
      throw (IOException)new IOException().initCause(inte);
    }
  }
 finally {
    updateStatus(reporter);
  }
}",0.9943019943019944
141057,"/** 
 * Calculate how many maps to run. Number of maps is bounded by a minimum of the cumulative size of the copy / (distcp.bytes.per.map, default BYTES_PER_MAP or -m on the command line) and at most (distcp.max.map.tasks, default MAX_MAPS_PER_NODE * nodes in the cluster).
 * @param totalBytes Count of total bytes for job
 * @param job The job to configure
 * @return Count of maps to run.
 */
private static void setMapCount(final long totalBytes,final JobConf job) throws IOException {
  int numMaps=(int)(totalBytes / job.getLong(BYTES_PER_MAP_LABEL,BYTES_PER_MAP));
  numMaps=Math.min(numMaps,job.getInt(MAX_MAPS_LABEL,MAX_MAPS_PER_NODE * new JobClient(job).getClusterStatus().getTaskTrackers()));
  job.setNumMapTasks(Math.max(numMaps,1));
}","/** 
 * Calculate how many maps to run. Number of maps is bounded by a minimum of the cumulative size of the copy / (distcp.bytes.per.map, default BYTES_PER_MAP or -m on the command line) and at most (distcp.max.map.tasks, default MAX_MAPS_PER_NODE * nodes in the cluster).
 * @param totalBytes Count of total bytes for job
 * @param job The job to configure
 */
private static void setMapCount(final long totalBytes,final JobConf job) throws IOException {
  int numMaps=(int)(totalBytes / job.getLong(BYTES_PER_MAP_LABEL,BYTES_PER_MAP));
  numMaps=Math.min(numMaps,job.getInt(MAX_MAPS_LABEL,MAX_MAPS_PER_NODE * new JobClient(job).getClusterStatus().getTaskTrackers()));
  job.setNumMapTasks(Math.max(numMaps,1));
}",0.9774436090225564
141058,"/** 
 * Create a new executable requirement.
 * @param executableName the executable name
 * @param optional true if the executable is a mandatory requirement
 * @return a new PathRequirement object
 * @throws EoulsanException if an error occurs while configuring therequirement
 */
public static Requirement newPathRequirement(final String executableName,final boolean optional){
  checkNotNull(executableName,""String_Node_Str"");
  checkArgument(!executableName.trim().isEmpty(),""String_Node_Str"");
  final PathRequirement result=new PathRequirement();
  result.executableName=executableName.trim();
  result.setInstallable(false);
  result.setOptionnal(optional);
  return result;
}","/** 
 * Create a new executable requirement.
 * @param executableName the executable name
 * @param optional true if the executable is a mandatory requirement
 * @return a new PathRequirement object
 */
public static Requirement newPathRequirement(final String executableName,final boolean optional){
  checkNotNull(executableName,""String_Node_Str"");
  checkArgument(!executableName.trim().isEmpty(),""String_Node_Str"");
  final PathRequirement result=new PathRequirement();
  result.executableName=executableName.trim();
  result.setInstallable(false);
  result.setOptionnal(optional);
  return result;
}",0.937888198757764
141059,"/** 
 * Create a new Rserve requirement.
 * @param rserveServerName the Rserve server name
 * @param optional true if the Rserve server is a mandatory requirement
 * @throws EoulsanException if an error occurs while configuring therequirement
 */
public static Requirement newRserveRequirement(final String rserveServerName,final boolean optional){
  checkNotNull(rserveServerName,""String_Node_Str"");
  checkArgument(!rserveServerName.trim().isEmpty(),""String_Node_Str"");
  final RserveRequirement result=new RserveRequirement();
  result.serverName=rserveServerName.trim();
  result.setInstallable(false);
  result.setOptionnal(optional);
  return result;
}","/** 
 * Create a new Rserve requirement.
 * @param rserveServerName the Rserve server name
 * @param optional true if the Rserve server is a mandatory requirement
 */
public static Requirement newRserveRequirement(final String rserveServerName,final boolean optional){
  checkNotNull(rserveServerName,""String_Node_Str"");
  checkArgument(!rserveServerName.trim().isEmpty(),""String_Node_Str"");
  final RserveRequirement result=new RserveRequirement();
  result.serverName=rserveServerName.trim();
  result.setInstallable(false);
  result.setOptionnal(optional);
  return result;
}",0.9352750809061487
141060,"/** 
 * Launch test.
 * @throws FileNotFoundException the XML file is not found
 * @throws Exception if an error occurs during setting or execution on atest
 */
public void launchTest() throws FileNotFoundException, EoulsanException {
  if (this.command == null || this.command.isEmpty()) {
    throw new EoulsanException(""String_Node_Str"");
  }
  final InputStream is=this.getClass().getResourceAsStream(toolXMLPath);
  assertNotNull(""String_Node_Str"" + toolXMLPath,is);
  final GalaxyToolInterpreter interpreter=new GalaxyToolInterpreter(is);
  interpreter.configure(setStepParameters);
  compileParameters(interpreter);
  final ToolData toolData=interpreter.getToolData();
  final CheetahInterpreter tpi=new CheetahInterpreter(toolData.getCommandScript(),this.variablesCommand);
  compareCommandLine(tpi.execute());
}","/** 
 * Launch test.
 * @throws FileNotFoundException the XML file is not found
 * @throws EoulsanException if an error occurs during setting or execution on atest
 */
public void launchTest() throws FileNotFoundException, EoulsanException {
  if (this.command == null || this.command.isEmpty()) {
    throw new EoulsanException(""String_Node_Str"");
  }
  final InputStream is=this.getClass().getResourceAsStream(toolXMLPath);
  assertNotNull(""String_Node_Str"" + toolXMLPath,is);
  final GalaxyToolInterpreter interpreter=new GalaxyToolInterpreter(is);
  interpreter.configure(setStepParameters);
  compileParameters(interpreter);
  final ToolData toolData=interpreter.getToolData();
  final CheetahInterpreter tpi=new CheetahInterpreter(toolData.getCommandScript(),this.variablesCommand);
  compareCommandLine(tpi.execute());
}",0.9957498482088646
141061,"/** 
 * Check deprecated setting key.
 * @param key the key to check
 * @return the new name of the key if exists or the current key name
 */
private static String checkDeprecatedKey(final String key){
  if (key == null) {
    return null;
  }
  final String trimmedKey=key.trim().toLowerCase();
switch (trimmedKey) {
case ""String_Node_Str"":
    printWarningRenamedSetting(trimmedKey,AWS_ACCESS_KEY);
case ""String_Node_Str"":
  printWarningRenamedSetting(trimmedKey,AWS_SECRET_KEY);
case ""String_Node_Str"":
printWarningRenamedSetting(trimmedKey,GFF_STORAGE_KEY);
return GFF_STORAGE_KEY;
default :
return key;
}
}","/** 
 * Check deprecated setting key.
 * @param key the key to check
 * @return the new name of the key if exists or the current key name
 */
private static String checkDeprecatedKey(final String key){
  if (key == null) {
    return null;
  }
  final String trimmedKey=key.trim().toLowerCase();
switch (trimmedKey) {
case ""String_Node_Str"":
    printWarningRenamedSetting(trimmedKey,AWS_ACCESS_KEY);
  break;
case ""String_Node_Str"":
printWarningRenamedSetting(trimmedKey,AWS_SECRET_KEY);
break;
case ""String_Node_Str"":
printWarningRenamedSetting(trimmedKey,GFF_STORAGE_KEY);
return GFF_STORAGE_KEY;
default :
return key;
}
return key;
}",0.9759615384615384
141062,"/** 
 * Set if Eoulsan result files must be written using the old format.
 * @param useOldEoulsanResultFormat true if Eoulsan result files must bewritten using the old format
 */
public void setUseOldEoulsanResultFormat(final boolean useOldEoulsanResultFormat){
  this.properties.getProperty(USE_OLD_EOULSAN_RESULT_FORMAT_KEY,Boolean.toString(useOldEoulsanResultFormat));
}","/** 
 * Set if Eoulsan result files must be written using the old format.
 * @param useOldEoulsanResultFormat true if Eoulsan result files must bewritten using the old format
 */
public void setUseOldEoulsanResultFormat(final boolean useOldEoulsanResultFormat){
  this.properties.setProperty(USE_OLD_EOULSAN_RESULT_FORMAT_KEY,Boolean.toString(useOldEoulsanResultFormat));
}",0.9973190348525468
141063,"@Override public int compareTo(final GenomicInterval e){
  if (e == null) {
    return -1;
  }
  if (!getChromosome().equals(e.getChromosome())) {
    return getChromosome().compareTo(e.getChromosome());
  }
  final int startComp=((Integer)this.start).compareTo(e.getStart());
  if (startComp != 0) {
    return startComp;
  }
  return ((Integer)this.end).compareTo(e.getEnd());
}","@Override public int compareTo(final GenomicInterval e){
  if (e == null) {
    return -1;
  }
  if (!getChromosome().equals(e.getChromosome())) {
    return getChromosome().compareTo(e.getChromosome());
  }
  final int startComp=Integer.compare(this.start,e.getStart());
  if (startComp != 0) {
    return startComp;
  }
  return ((Integer)this.end).compareTo(e.getEnd());
}",0.9403973509933776
141064,"/** 
 * Compare 2 Version object.
 * @param version Version to compare.
 * @return a negative integer, zero, or a positive integer as this object isless than, equal to, or greater than the specified object.
 */
@Override public int compareTo(final Version version){
  if (version == null) {
    return 1;
  }
  final int compMajor=Integer.valueOf(getMajor()).compareTo(version.getMajor());
  if (compMajor != 0) {
    return compMajor;
  }
  final int compMinor=Integer.valueOf(getMinor()).compareTo(version.getMinor());
  if (compMinor != 0) {
    return compMinor;
  }
  final int compRevision=Integer.valueOf(getRevision()).compareTo(version.getRevision());
  if (compRevision != 0) {
    return compRevision;
  }
  return getType().compareTo(version.getType());
}","/** 
 * Compare 2 Version object.
 * @param version Version to compare.
 * @return a negative integer, zero, or a positive integer as this object isless than, equal to, or greater than the specified object.
 */
@Override public int compareTo(final Version version){
  if (version == null) {
    return 1;
  }
  final int compMajor=Integer.compare(getMajor(),version.getMajor());
  if (compMajor != 0) {
    return compMajor;
  }
  final int compMinor=Integer.valueOf(getMinor()).compareTo(version.getMinor());
  if (compMinor != 0) {
    return compMinor;
  }
  final int compRevision=Integer.valueOf(getRevision()).compareTo(version.getRevision());
  if (compRevision != 0) {
    return compRevision;
  }
  return getType().compareTo(version.getType());
}",0.9822718319107026
141065,"/** 
 * Get the singleton instance of the class.
 * @return the singleton instance of the class
 */
public static EmergencyStopTasks getInstance(){
  if (instance == null) {
    instance=new EmergencyStopTasks();
  }
  return instance;
}","/** 
 * Get the singleton instance of the class.
 * @return the singleton instance of the class
 */
public static synchronized EmergencyStopTasks getInstance(){
  if (instance == null) {
    instance=new EmergencyStopTasks();
  }
  return instance;
}",0.973305954825462
141066,"public TaskResultImpl(final TaskContextImpl context,final Date startTime,final Date endTime,final long duration,final Throwable exception,final String errorMessage){
  Preconditions.checkNotNull(context,""String_Node_Str"");
  this.context=context;
  this.startTime=startTime;
  this.endTime=endTime;
  this.duration=duration;
  this.success=false;
  this.taskMessage=null;
  this.taskDescription=null;
  this.exception=exception;
  this.errorMessage=errorMessage;
}","public TaskResultImpl(final TaskContextImpl context,final Date startTime,final Date endTime,final long duration,final Throwable exception,final String errorMessage){
  Preconditions.checkNotNull(context,""String_Node_Str"");
  this.context=context;
  this.startTime=startTime == null ? null : new Date(startTime.getTime());
  this.endTime=endTime == null ? null : new Date(endTime.getTime());
  this.duration=duration;
  this.success=false;
  this.taskMessage=null;
  this.taskDescription=null;
  this.exception=exception;
  this.errorMessage=errorMessage;
}",0.8627450980392157
141067,"@Override public List<DataFile> list(final DataFile file) throws IOException {
  final File directoryFile=getSourceAsFile(file);
  if (!directoryFile.exists()) {
    throw new FileNotFoundException(""String_Node_Str"" + file);
  }
  if (!directoryFile.isDirectory()) {
    throw new IOException(""String_Node_Str"" + file);
  }
  final File[] files=directoryFile.listFiles();
  final List<DataFile> result=new ArrayList<>(files.length);
  for (  File f : files) {
    result.add(new DataFile(f));
  }
  return Collections.unmodifiableList(result);
}","@Override public List<DataFile> list(final DataFile file) throws IOException {
  final File directoryFile=getSourceAsFile(file);
  if (!directoryFile.exists()) {
    throw new FileNotFoundException(""String_Node_Str"" + file);
  }
  if (!directoryFile.isDirectory()) {
    throw new IOException(""String_Node_Str"" + file);
  }
  final File[] files=directoryFile.listFiles();
  if (files == null) {
    return Collections.emptyList();
  }
  final List<DataFile> result=new ArrayList<>(files.length);
  for (  File f : files) {
    result.add(new DataFile(f));
  }
  return Collections.unmodifiableList(result);
}",0.9453599306157848
141068,"/** 
 * Tab.
 * @param n the n
 * @return the string
 */
protected String tab(final int n){
  String str=""String_Node_Str"";
  for (int i=0; i < tabulations + n; i++) {
    str+=TAB;
  }
  tabulations+=n;
  return str;
}","/** 
 * Tab.
 * @param n the n
 * @return the string
 */
protected String tab(final int n){
  final StringBuilder sb=new StringBuilder();
  for (int i=0; i < tabulations + n; i++) {
    sb.append(TAB);
  }
  tabulations+=n;
  return sb.toString();
}",0.7948717948717948
141069,"@Override public int compare(final Data a,final Data b){
  return Integer.valueOf(a.getPart()).compareTo(b.getPart());
}","@Override public int compare(final Data a,final Data b){
  return Integer.compare(a.getPart(),b.getPart());
}",0.8995633187772926
141070,"public Iterator<DataFile> getIterator(final String dataName,final int fileIndex) throws EoulsanException {
  final List<Data> list=Lists.newArrayList(this.map.get(dataName));
  Collections.sort(list,new Comparator<Data>(){
    @Override public int compare(    final Data a,    final Data b){
      return Integer.valueOf(a.getPart()).compareTo(b.getPart());
    }
  }
);
  if (checkForPartDuplicates()) {
    final Set<Integer> partNumbers=new HashSet<>();
    for (    Data data : list) {
      if (partNumbers.contains(data.getPart())) {
        throw new EoulsanException(""String_Node_Str"" + data.getName());
      }
      partNumbers.add(data.getPart());
    }
  }
  final Iterator<Data> it=list.iterator();
  return new Iterator<DataFile>(){
    @Override public boolean hasNext(){
      return it.hasNext();
    }
    @Override public DataFile next(){
      if (fileIndex == -1) {
        return it.next().getDataFile();
      }
 else {
        return it.next().getDataFile(fileIndex);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}","public Iterator<DataFile> getIterator(final String dataName,final int fileIndex) throws EoulsanException {
  final List<Data> list=Lists.newArrayList(this.map.get(dataName));
  Collections.sort(list,new Comparator<Data>(){
    @Override public int compare(    final Data a,    final Data b){
      return Integer.compare(a.getPart(),b.getPart());
    }
  }
);
  if (checkForPartDuplicates()) {
    final Set<Integer> partNumbers=new HashSet<>();
    for (    Data data : list) {
      if (partNumbers.contains(data.getPart())) {
        throw new EoulsanException(""String_Node_Str"" + data.getName());
      }
      partNumbers.add(data.getPart());
    }
  }
  final Iterator<Data> it=list.iterator();
  return new Iterator<DataFile>(){
    @Override public boolean hasNext(){
      return it.hasNext();
    }
    @Override public DataFile next(){
      if (fileIndex == -1) {
        return it.next().getDataFile();
      }
 else {
        return it.next().getDataFile(fileIndex);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}",0.9877105143377332
141071,"@Override public int compare(final DataFile f1,final DataFile f2){
  long size1;
  try {
    size1=f1.getMetaData().getContentLength();
  }
 catch (  IOException e) {
    size1=-1;
  }
  long size2;
  try {
    size2=f2.getMetaData().getContentLength();
  }
 catch (  IOException e) {
    size2=-1;
  }
  return ((Long)size1).compareTo(size2) * -1;
}","@Override public int compare(final DataFile f1,final DataFile f2){
  long size1;
  try {
    size1=f1.getMetaData().getContentLength();
  }
 catch (  IOException e) {
    size1=-1;
  }
  long size2;
  try {
    size2=f2.getMetaData().getContentLength();
  }
 catch (  IOException e) {
    size2=-1;
  }
  return Long.compare(size1,size2) * -1;
}",0.9726618705035972
141072,"/** 
 * Sort a list of DataFile by dissident order.
 * @param inFiles list of DataFile to sort
 */
private void sortInFilesByDescSize(final List<DataFile> inFiles){
  Collections.sort(inFiles,new Comparator<DataFile>(){
    @Override public int compare(    final DataFile f1,    final DataFile f2){
      long size1;
      try {
        size1=f1.getMetaData().getContentLength();
      }
 catch (      IOException e) {
        size1=-1;
      }
      long size2;
      try {
        size2=f2.getMetaData().getContentLength();
      }
 catch (      IOException e) {
        size2=-1;
      }
      return ((Long)size1).compareTo(size2) * -1;
    }
  }
);
}","/** 
 * Sort a list of DataFile by dissident order.
 * @param inFiles list of DataFile to sort
 */
private void sortInFilesByDescSize(final List<DataFile> inFiles){
  Collections.sort(inFiles,new Comparator<DataFile>(){
    @Override public int compare(    final DataFile f1,    final DataFile f2){
      long size1;
      try {
        size1=f1.getMetaData().getContentLength();
      }
 catch (      IOException e) {
        size1=-1;
      }
      long size2;
      try {
        size2=f2.getMetaData().getContentLength();
      }
 catch (      IOException e) {
        size2=-1;
      }
      return Long.compare(size1,size2) * -1;
    }
  }
);
}",0.98544061302682
141073,"@Override public void notifyWorkflowSuccess(final boolean success,final String message){
  if (this.terminal == null || this.jobDone) {
    return;
  }
synchronized (this) {
    this.terminal.setCursorVisible(false);
    final int lastLineY=this.terminalSize.getRows() - 1;
    showWorkflowProgress(lastLineY,1.0,success,message);
    this.terminal.moveCursor(0,lastLineY);
    this.terminal.setCursorVisible(true);
    this.jobDone=true;
  }
}","@Override public void notifyWorkflowSuccess(final boolean success,final String message){
synchronized (this) {
    if (this.terminal == null || this.jobDone) {
      return;
    }
    this.terminal.setCursorVisible(false);
    final int lastLineY=this.terminalSize.getRows() - 1;
    showWorkflowProgress(lastLineY,1.0,success,message);
    this.terminal.moveCursor(0,lastLineY);
    this.terminal.setCursorVisible(true);
    this.jobDone=true;
  }
}",0.9261744966442952
141074,"@Override public int compareTo(final Ticket ticket){
  if (ticket == null) {
    return 1;
  }
  final int comp1=Long.valueOf(this.creationTime).compareTo(ticket.creationTime);
  if (comp1 != 0) {
    return comp1;
  }
  final int comp2=Long.valueOf(this.nanoCreationTime).compareTo(ticket.nanoCreationTime);
  if (comp2 != 0) {
    return comp2;
  }
  final int comp3=Integer.valueOf(this.pid).compareTo(ticket.pid);
  if (comp3 != 0) {
    return comp3;
  }
  return Long.valueOf(this.threadId).compareTo(ticket.threadId);
}","@Override public int compareTo(final Ticket ticket){
  if (ticket == null) {
    return 1;
  }
  final int comp1=Long.compare(this.creationTime,ticket.creationTime);
  if (comp1 != 0) {
    return comp1;
  }
  final int comp2=Long.valueOf(this.nanoCreationTime).compareTo(ticket.nanoCreationTime);
  if (comp2 != 0) {
    return comp2;
  }
  final int comp3=Integer.compare(this.pid,ticket.pid);
  if (comp3 != 0) {
    return comp3;
  }
  return Long.valueOf(this.threadId).compareTo(ticket.threadId);
}",0.3805825242718446
141075,"/** 
 * Constructor.
 * @param command command to execute
 * @param executionDirectory execution directory
 * @param stdout true if stdout will be read
 * @param redirectStderr redirect stderr to stdout
 * @param filesUsed files used by the process
 * @throws IOException if an error occurs while creating the object
 */
private DockerResult(final List<String> command,final File executionDirectory,boolean stdout,final boolean redirectStderr,File... filesUsed) throws IOException {
  checkNotNull(command,""String_Node_Str"");
  try {
    pullImageIfNotExists(dockerClient,dockerImage);
    getLogger().fine(""String_Node_Str"" + command);
    List<File> newFilesUsed=new ArrayList<>();
    if (filesUsed != null) {
      for (      File f : filesUsed) {
        newFilesUsed.add(f);
      }
    }
    if (stdout) {
      final String uuid=UUID.randomUUID().toString();
      this.stdoutFile=new File(temporaryDirectory,""String_Node_Str"" + uuid);
      FileUtils.createNamedPipe(this.stdoutFile);
      newFilesUsed.add(this.stdoutFile);
    }
 else {
      this.stdoutFile=null;
    }
    final ContainerConfig.Builder builder=ContainerConfig.builder().image(dockerImage).cmd(convertCommand(command,this.stdoutFile,redirectStderr));
    if (executionDirectory != null) {
      builder.workingDir(executionDirectory.getAbsolutePath());
      newFilesUsed.add(executionDirectory);
    }
    if (userUid >= 0 && userGid >= 0) {
      builder.user(userUid + ""String_Node_Str"" + userGid);
    }
    builder.hostConfig(createBinds(executionDirectory,newFilesUsed));
    final ContainerCreation creation=dockerClient.createContainer(builder.build());
    this.containerId=creation.id();
    getLogger().fine(""String_Node_Str"" + containerId);
    dockerClient.startContainer(containerId);
  }
 catch (  DockerException|InterruptedException e) {
    throw new IOException(e);
  }
}","/** 
 * Constructor.
 * @param command command to execute
 * @param executionDirectory execution directory
 * @param stdout true if stdout will be read
 * @param redirectStderr redirect stderr to stdout
 * @param filesUsed files used by the process
 * @throws IOException if an error occurs while creating the object
 */
private DockerResult(final List<String> command,final File executionDirectory,boolean stdout,final boolean redirectStderr,File... filesUsed) throws IOException {
  checkNotNull(command,""String_Node_Str"");
  try {
    pullImageIfNotExists(dockerClient,dockerImage);
    getLogger().fine(""String_Node_Str"" + command);
    List<File> newFilesUsed=new ArrayList<>();
    if (filesUsed != null) {
      Collections.addAll(newFilesUsed,filesUsed);
    }
    if (stdout) {
      final String uuid=UUID.randomUUID().toString();
      this.stdoutFile=new File(temporaryDirectory,""String_Node_Str"" + uuid);
      FileUtils.createNamedPipe(this.stdoutFile);
      newFilesUsed.add(this.stdoutFile);
    }
 else {
      this.stdoutFile=null;
    }
    final ContainerConfig.Builder builder=ContainerConfig.builder().image(dockerImage).cmd(convertCommand(command,this.stdoutFile,redirectStderr));
    if (executionDirectory != null) {
      builder.workingDir(executionDirectory.getAbsolutePath());
      newFilesUsed.add(executionDirectory);
    }
    if (userUid >= 0 && userGid >= 0) {
      builder.user(userUid + ""String_Node_Str"" + userGid);
    }
    builder.hostConfig(createBinds(executionDirectory,newFilesUsed));
    final ContainerCreation creation=dockerClient.createContainer(builder.build());
    this.containerId=creation.id();
    getLogger().fine(""String_Node_Str"" + containerId);
    dockerClient.startContainer(containerId);
  }
 catch (  DockerException|InterruptedException e) {
    throw new IOException(e);
  }
}",0.9763058696822832
141076,"/** 
 * Add a list of temporary files to remove at the end of the mapping.
 * @param files files to remove
 */
protected void addFilesToRemove(final File... files){
  if (files == null) {
    return;
  }
  for (  File f : files) {
    this.filesToRemove.add(f);
  }
}","/** 
 * Add a list of temporary files to remove at the end of the mapping.
 * @param files files to remove
 */
protected void addFilesToRemove(final File... files){
  if (files == null) {
    return;
  }
  Collections.addAll(this.filesToRemove,files);
}",0.8807692307692307
141077,"/** 
 * Convert the workflow to Graphviz format
 * @return a string with the workflow converted to Graphviz format
 */
private String convert(){
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + Globals.APP_NAME + ""String_Node_Str""+ Globals.APP_VERSION_STRING);
  sb.append('\n');
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  for (  Step step : this.workflow.getSteps()) {
    if (step == this.workflow.getFirstStep() || step == this.workflow.getCheckerStep()) {
      continue;
    }
    sb.append(""String_Node_Str"");
    sb.append(step.getNumber());
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(step.getId());
    sb.append(""String_Node_Str"");
    addRow(sb,step.getModuleName() + ""String_Node_Str"" + step.getStepVersion());
    for (    Parameter p : step.getParameters()) {
      addRow(sb,xmlEscape(p.getName()) + ""String_Node_Str"" + xmlEscape(p.getValue()));
    }
    sb.append(""String_Node_Str"");
  }
  sb.append('\n');
  final Multimap<AbstractStep,AbstractStep> linkedSteps=HashMultimap.create();
  for (  Step step : this.workflow.getSteps()) {
    if (step == this.workflow.getFirstStep() || step == this.workflow.getCheckerStep()) {
      continue;
    }
    final int stepNumber=step.getNumber();
    AbstractStep abstractStep=(AbstractStep)step;
    for (    StepOutputPort outputPort : abstractStep.getWorkflowOutputPorts()) {
      for (      StepInputPort link : outputPort.getLinks()) {
        final AbstractStep linkedStep=link.getStep();
        if (linkedStep == this.workflow.getFirstStep() || linkedStep == this.workflow.getCheckerStep()) {
          continue;
        }
        linkedSteps.put(linkedStep,abstractStep);
        sb.append(""String_Node_Str"");
        sb.append(stepNumber);
        sb.append(""String_Node_Str"");
        sb.append(linkedStep.getNumber());
        sb.append(""String_Node_Str"");
        final DataFormat format=outputPort.getFormat();
        String formatName=format.getAlias() == null || ""String_Node_Str"".equals(format.getAlias()) ? format.getName() : format.getAlias();
        sb.append(formatName);
        sb.append(""String_Node_Str"");
      }
    }
  }
  for (  Step step : this.workflow.getSteps()) {
    if (step == this.workflow.getFirstStep() || step == this.workflow.getCheckerStep()) {
      continue;
    }
    AbstractStep abstractStep=(AbstractStep)step;
    StepStateObserver observer=((AbstractStep)step).getStepStateObserver();
    Set<AbstractStep> requiredSteps=new HashSet<>(observer.getRequiredSteps());
    requiredSteps.removeAll(linkedSteps.get(abstractStep));
    requiredSteps.remove(this.workflow.getFirstStep());
    requiredSteps.remove(this.workflow.getCheckerStep());
    for (    AbstractStep requiredStep : requiredSteps) {
      sb.append(""String_Node_Str"");
      sb.append(requiredStep.getNumber());
      sb.append(""String_Node_Str"");
      sb.append(step.getNumber());
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","/** 
 * Convert the workflow to Graphviz format
 * @return a string with the workflow converted to Graphviz format
 */
private String convert(){
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + Globals.APP_NAME + ""String_Node_Str"");
  sb.append(Globals.APP_VERSION_STRING);
  sb.append('\n');
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  for (  Step step : this.workflow.getSteps()) {
    if (step == this.workflow.getFirstStep() || step == this.workflow.getCheckerStep()) {
      continue;
    }
    sb.append(""String_Node_Str"");
    sb.append(step.getNumber());
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(step.getId());
    sb.append(""String_Node_Str"");
    addRow(sb,step.getModuleName() + ""String_Node_Str"" + step.getStepVersion());
    for (    Parameter p : step.getParameters()) {
      addRow(sb,xmlEscape(p.getName()) + ""String_Node_Str"" + xmlEscape(p.getValue()));
    }
    sb.append(""String_Node_Str"");
  }
  sb.append('\n');
  final Multimap<AbstractStep,AbstractStep> linkedSteps=HashMultimap.create();
  for (  Step step : this.workflow.getSteps()) {
    if (step == this.workflow.getFirstStep() || step == this.workflow.getCheckerStep()) {
      continue;
    }
    final int stepNumber=step.getNumber();
    AbstractStep abstractStep=(AbstractStep)step;
    for (    StepOutputPort outputPort : abstractStep.getWorkflowOutputPorts()) {
      for (      StepInputPort link : outputPort.getLinks()) {
        final AbstractStep linkedStep=link.getStep();
        if (linkedStep == this.workflow.getFirstStep() || linkedStep == this.workflow.getCheckerStep()) {
          continue;
        }
        linkedSteps.put(linkedStep,abstractStep);
        sb.append(""String_Node_Str"");
        sb.append(stepNumber);
        sb.append(""String_Node_Str"");
        sb.append(linkedStep.getNumber());
        sb.append(""String_Node_Str"");
        final DataFormat format=outputPort.getFormat();
        String formatName=format.getAlias() == null || ""String_Node_Str"".equals(format.getAlias()) ? format.getName() : format.getAlias();
        sb.append(formatName);
        sb.append(""String_Node_Str"");
      }
    }
  }
  for (  Step step : this.workflow.getSteps()) {
    if (step == this.workflow.getFirstStep() || step == this.workflow.getCheckerStep()) {
      continue;
    }
    AbstractStep abstractStep=(AbstractStep)step;
    StepStateObserver observer=((AbstractStep)step).getStepStateObserver();
    Set<AbstractStep> requiredSteps=new HashSet<>(observer.getRequiredSteps());
    requiredSteps.removeAll(linkedSteps.get(abstractStep));
    requiredSteps.remove(this.workflow.getFirstStep());
    requiredSteps.remove(this.workflow.getCheckerStep());
    for (    AbstractStep requiredStep : requiredSteps) {
      sb.append(""String_Node_Str"");
      sb.append(requiredStep.getNumber());
      sb.append(""String_Node_Str"");
      sb.append(step.getNumber());
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9973190348525468
141078,"/** 
 * Show a design
 * @param design Design to show
 */
public static void showDesign(final Design design){
  checkNotNull(design,""String_Node_Str"");
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(design.getName());
  sb.append(""String_Node_Str"");
  sb.append(design.getNumber());
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (  Map.Entry<String,String> e : design.getMetadata().entrySet()) {
    sb.append('\t');
    sb.append(e.getKey());
    sb.append('=');
    sb.append(e.getValue());
    sb.append('\n');
  }
  sb.append('\n');
  sb.append(""String_Node_Str"");
  for (  Experiment e : design.getExperiments()) {
    final String expId=e.getId();
    for (    Map.Entry<String,String> m : e.getMetadata().entrySet()) {
      sb.append('\t');
      sb.append(""String_Node_Str"" + expId + ""String_Node_Str""+ m.getKey());
      sb.append('=');
      sb.append(m.getValue());
      sb.append('\n');
    }
    sb.append('\n');
  }
  sb.append('\n');
  sb.append(""String_Node_Str"");
  sb.append('\t');
  sb.append(""String_Node_Str"");
  sb.append('\t');
  sb.append(""String_Node_Str"");
  final List<String> sampleMDKeys=getAllSamplesMetadataKeys(design);
  for (  String key : sampleMDKeys) {
    sb.append('\t');
    sb.append(key);
  }
  for (  Experiment experiment : design.getExperiments()) {
    final String prefix=""String_Node_Str"" + experiment.getId() + ""String_Node_Str"";
    final List<String> experimentMDKeys=getExperimentSampleAllMetadataKeys(experiment);
    for (    String key : experimentMDKeys) {
      sb.append('\t');
      sb.append(prefix);
      sb.append(key);
    }
  }
  sb.append('\n');
  for (  Sample sample : design.getSamples()) {
    sb.append(sample.getId());
    sb.append('\t');
    sb.append(sample.getNumber());
    sb.append('\t');
    sb.append(sample.getName());
    final SampleMetadata smd=sample.getMetadata();
    for (    String key : sampleMDKeys) {
      sb.append('\t');
      if (smd.contains(key)) {
        sb.append(smd.get(key));
      }
    }
    for (    Experiment experiment : design.getExperiments()) {
      final ExperimentSampleMetadata expSampleMetadata=experiment.getExperimentSample(sample).getMetadata();
      final List<String> experimentMDKeys=getExperimentSampleAllMetadataKeys(experiment);
      for (      String key : experimentMDKeys) {
        sb.append('\t');
        if (expSampleMetadata.contains(key)) {
          sb.append(expSampleMetadata.get(key));
        }
      }
    }
    sb.append('\n');
  }
  System.out.println(sb.toString());
}","/** 
 * Show a design
 * @param design Design to show
 */
public static void showDesign(final Design design){
  checkNotNull(design,""String_Node_Str"");
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(design.getName());
  sb.append(""String_Node_Str"");
  sb.append(design.getNumber());
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (  Map.Entry<String,String> e : design.getMetadata().entrySet()) {
    sb.append('\t');
    sb.append(e.getKey());
    sb.append('=');
    sb.append(e.getValue());
    sb.append('\n');
  }
  sb.append('\n');
  sb.append(""String_Node_Str"");
  for (  Experiment e : design.getExperiments()) {
    final String expId=e.getId();
    for (    Map.Entry<String,String> m : e.getMetadata().entrySet()) {
      sb.append('\t');
      sb.append(""String_Node_Str"");
      sb.append(expId);
      sb.append(""String_Node_Str"");
      sb.append(m.getKey());
      sb.append('=');
      sb.append(m.getValue());
      sb.append('\n');
    }
    sb.append('\n');
  }
  sb.append('\n');
  sb.append(""String_Node_Str"");
  sb.append('\t');
  sb.append(""String_Node_Str"");
  sb.append('\t');
  sb.append(""String_Node_Str"");
  final List<String> sampleMDKeys=getAllSamplesMetadataKeys(design);
  for (  String key : sampleMDKeys) {
    sb.append('\t');
    sb.append(key);
  }
  for (  Experiment experiment : design.getExperiments()) {
    final String prefix=""String_Node_Str"" + experiment.getId() + ""String_Node_Str"";
    final List<String> experimentMDKeys=getExperimentSampleAllMetadataKeys(experiment);
    for (    String key : experimentMDKeys) {
      sb.append('\t');
      sb.append(prefix);
      sb.append(key);
    }
  }
  sb.append('\n');
  for (  Sample sample : design.getSamples()) {
    sb.append(sample.getId());
    sb.append('\t');
    sb.append(sample.getNumber());
    sb.append('\t');
    sb.append(sample.getName());
    final SampleMetadata smd=sample.getMetadata();
    for (    String key : sampleMDKeys) {
      sb.append('\t');
      if (smd.contains(key)) {
        sb.append(smd.get(key));
      }
    }
    for (    Experiment experiment : design.getExperiments()) {
      final ExperimentSampleMetadata expSampleMetadata=experiment.getExperimentSample(sample).getMetadata();
      final List<String> experimentMDKeys=getExperimentSampleAllMetadataKeys(experiment);
      for (      String key : experimentMDKeys) {
        sb.append('\t');
        if (expSampleMetadata.contains(key)) {
          sb.append(expSampleMetadata.get(key));
        }
      }
    }
    sb.append('\n');
  }
  System.out.println(sb.toString());
}",0.9875455068020692
141079,"@Override public void write(final Design design) throws IOException {
  if (design == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.bw=new BufferedWriter(new OutputStreamWriter(this.out,Globals.DEFAULT_CHARSET));
  this.bw.append(SAMPLE_NUMBER_FIELD);
  this.bw.append(SEPARATOR);
  this.bw.append(SAMPLE_NAME_FIELD);
  final List<String> sampleMDKeys=DesignUtils.getAllSamplesMetadataKeys(design);
  for (  String key : sampleMDKeys) {
    if (SampleMetadata.UUID_KEY.equals(key)) {
      continue;
    }
    this.bw.append(SEPARATOR);
    this.bw.append(key);
  }
  if (design.getMetadata().containsGenomeFile()) {
    this.bw.append(SEPARATOR);
    this.bw.append(""String_Node_Str"");
  }
  if (design.getMetadata().containsGffFile()) {
    this.bw.append(SEPARATOR);
    this.bw.append(""String_Node_Str"");
  }
  if (design.getMetadata().containsGtfFile()) {
    this.bw.append(SEPARATOR);
    this.bw.append(DesignMetadata.GFF_FILE_KEY);
  }
  if (design.getMetadata().containsAdditionnalAnnotationFile()) {
    this.bw.append(SEPARATOR);
    this.bw.append(""String_Node_Str"");
  }
  final Experiment exp=design.getExperiments().isEmpty() ? null : design.getExperiments().get(0);
  final List<String> esmdk=exp == null ? null : DesignUtils.getExperimentSampleAllMetadataKeys(exp);
  if (exp != null) {
    this.bw.append(SEPARATOR);
    this.bw.append(EXPERIMENT_FIELD);
    if (esmdk.contains(ExperimentSampleMetadata.CONDITION_KEY)) {
      this.bw.append(SEPARATOR);
      this.bw.append(""String_Node_Str"");
    }
    if (esmdk.contains(ExperimentSampleMetadata.REP_TECH_GROUP_KEY)) {
      this.bw.append(SEPARATOR);
      this.bw.append(""String_Node_Str"");
    }
    if (esmdk.contains(ExperimentSampleMetadata.REFERENCE_KEY)) {
      this.bw.append(SEPARATOR);
      this.bw.append(""String_Node_Str"");
    }
  }
  if (sampleMDKeys.contains(UUID_KEY)) {
    bw.append(TAB_SEPARATOR);
    bw.append(UUID_KEY);
  }
  this.bw.append(NEWLINE);
  for (  Sample sample : design.getSamples()) {
    this.bw.append(""String_Node_Str"" + sample.getNumber());
    this.bw.append(SEPARATOR);
    this.bw.append(sample.getId());
    final SampleMetadata smd=sample.getMetadata();
    for (    String key : sampleMDKeys) {
      if (UUID_KEY.equals(key)) {
        continue;
      }
      this.bw.append(SEPARATOR);
      if (smd.contains(key)) {
        this.bw.append(smd.get(key));
      }
    }
    if (design.getMetadata().containsGenomeFile()) {
      this.bw.append(SEPARATOR);
      this.bw.append(design.getMetadata().getGenomeFile());
    }
    if (design.getMetadata().containsGffFile()) {
      this.bw.append(SEPARATOR);
      this.bw.append(design.getMetadata().getGffFile());
    }
    if (design.getMetadata().containsGtfFile()) {
      this.bw.append(SEPARATOR);
      this.bw.append(design.getMetadata().getGtfFile());
    }
    if (design.getMetadata().containsAdditionnalAnnotationFile()) {
      this.bw.append(SEPARATOR);
      this.bw.append(design.getMetadata().getAdditionnalAnnotationFile());
    }
    if (exp != null) {
      this.bw.append(SEPARATOR);
      this.bw.append(exp.getId());
      ExperimentSample es=exp.getExperimentSample(sample);
      if (esmdk.contains(ExperimentSampleMetadata.CONDITION_KEY)) {
        this.bw.append(SEPARATOR);
        if (es.getMetadata().containsCondition()) {
          this.bw.append(es.getMetadata().getCondition());
        }
      }
      if (esmdk.contains(ExperimentSampleMetadata.REP_TECH_GROUP_KEY)) {
        this.bw.append(SEPARATOR);
        if (es.getMetadata().containsRepTechGroup()) {
          this.bw.append(es.getMetadata().getRepTechGroup());
        }
      }
      if (esmdk.contains(ExperimentSampleMetadata.REFERENCE_KEY)) {
        this.bw.append(SEPARATOR);
        if (es.getMetadata().containsReference()) {
          this.bw.append(""String_Node_Str"" + es.getMetadata().getReference());
        }
      }
    }
    if (sampleMDKeys.contains(UUID_KEY)) {
      bw.append(TAB_SEPARATOR);
      bw.append(smd.get(UUID_KEY));
    }
    this.bw.append(NEWLINE);
  }
  this.bw.close();
}","@Override public void write(final Design design) throws IOException {
  if (design == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.bw=new BufferedWriter(new OutputStreamWriter(this.out,Globals.DEFAULT_CHARSET));
  this.bw.append(SAMPLE_NUMBER_FIELD);
  this.bw.append(SEPARATOR);
  this.bw.append(SAMPLE_NAME_FIELD);
  final List<String> sampleMDKeys=DesignUtils.getAllSamplesMetadataKeys(design);
  for (  String key : sampleMDKeys) {
    if (SampleMetadata.UUID_KEY.equals(key)) {
      continue;
    }
    this.bw.append(SEPARATOR);
    this.bw.append(key);
  }
  if (design.getMetadata().containsGenomeFile()) {
    this.bw.append(SEPARATOR);
    this.bw.append(""String_Node_Str"");
  }
  if (design.getMetadata().containsGffFile()) {
    this.bw.append(SEPARATOR);
    this.bw.append(""String_Node_Str"");
  }
  if (design.getMetadata().containsGtfFile()) {
    this.bw.append(SEPARATOR);
    this.bw.append(DesignMetadata.GFF_FILE_KEY);
  }
  if (design.getMetadata().containsAdditionnalAnnotationFile()) {
    this.bw.append(SEPARATOR);
    this.bw.append(""String_Node_Str"");
  }
  final Experiment exp=design.getExperiments().isEmpty() ? null : design.getExperiments().get(0);
  final List<String> esmdk=exp == null ? null : DesignUtils.getExperimentSampleAllMetadataKeys(exp);
  if (exp != null) {
    this.bw.append(SEPARATOR);
    this.bw.append(EXPERIMENT_FIELD);
    if (esmdk.contains(ExperimentSampleMetadata.CONDITION_KEY)) {
      this.bw.append(SEPARATOR);
      this.bw.append(""String_Node_Str"");
    }
    if (esmdk.contains(ExperimentSampleMetadata.REP_TECH_GROUP_KEY)) {
      this.bw.append(SEPARATOR);
      this.bw.append(""String_Node_Str"");
    }
    if (esmdk.contains(ExperimentSampleMetadata.REFERENCE_KEY)) {
      this.bw.append(SEPARATOR);
      this.bw.append(""String_Node_Str"");
    }
  }
  if (sampleMDKeys.contains(UUID_KEY)) {
    bw.append(TAB_SEPARATOR);
    bw.append(UUID_KEY);
  }
  this.bw.append(NEWLINE);
  for (  Sample sample : design.getSamples()) {
    this.bw.append(""String_Node_Str"" + sample.getNumber());
    this.bw.append(SEPARATOR);
    this.bw.append(sample.getId());
    final SampleMetadata smd=sample.getMetadata();
    for (    String key : sampleMDKeys) {
      if (UUID_KEY.equals(key)) {
        continue;
      }
      this.bw.append(SEPARATOR);
      if (smd.contains(key)) {
        this.bw.append(smd.get(key));
      }
    }
    if (design.getMetadata().containsGenomeFile()) {
      this.bw.append(SEPARATOR);
      this.bw.append(design.getMetadata().getGenomeFile());
    }
    if (design.getMetadata().containsGffFile()) {
      this.bw.append(SEPARATOR);
      this.bw.append(design.getMetadata().getGffFile());
    }
    if (design.getMetadata().containsGtfFile()) {
      this.bw.append(SEPARATOR);
      this.bw.append(design.getMetadata().getGtfFile());
    }
    if (design.getMetadata().containsAdditionnalAnnotationFile()) {
      this.bw.append(SEPARATOR);
      this.bw.append(design.getMetadata().getAdditionnalAnnotationFile());
    }
    if (exp != null) {
      this.bw.append(SEPARATOR);
      this.bw.append(exp.getId());
      ExperimentSample es=exp.getExperimentSample(sample);
      if (esmdk.contains(ExperimentSampleMetadata.CONDITION_KEY)) {
        this.bw.append(SEPARATOR);
        if (es.getMetadata().containsCondition()) {
          this.bw.append(es.getMetadata().getCondition());
        }
      }
      if (esmdk.contains(ExperimentSampleMetadata.REP_TECH_GROUP_KEY)) {
        this.bw.append(SEPARATOR);
        if (es.getMetadata().containsRepTechGroup()) {
          this.bw.append(es.getMetadata().getRepTechGroup());
        }
      }
      if (esmdk.contains(ExperimentSampleMetadata.REFERENCE_KEY)) {
        this.bw.append(SEPARATOR);
        if (es.getMetadata().containsReference()) {
          this.bw.append(es.getMetadata().getReference());
        }
      }
    }
    if (sampleMDKeys.contains(UUID_KEY)) {
      bw.append(TAB_SEPARATOR);
      bw.append(smd.get(UUID_KEY));
    }
    this.bw.append(NEWLINE);
  }
  this.bw.close();
}",0.9975544142822206
141080,"@Override public void write(final Design design) throws IOException {
  checkNotNull(design,""String_Node_Str"");
  final BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(this.out,Globals.DEFAULT_CHARSET));
  checkNotNull(design,""String_Node_Str"");
  bw.append(HEADER_SECTION);
  bw.append(NEWLINE);
  bw.append(Eoulsan2DesignReader.DESIGN_FORMAT_VERSION_METADATA_KEY);
  bw.append(EQUAL_SEPARATOR);
  bw.append(Eoulsan2DesignReader.FORMAT_VERSION);
  bw.append(NEWLINE);
  for (  Map.Entry<String,String> e : design.getMetadata().entrySet()) {
    bw.append(e.getKey());
    bw.append(EQUAL_SEPARATOR);
    bw.append(e.getValue());
    bw.append(NEWLINE);
  }
  bw.append(NEWLINE);
  if (!design.getExperiments().isEmpty()) {
    bw.append(EXPERIMENT_SECTION);
    bw.append(NEWLINE);
  }
  for (  Experiment e : design.getExperiments()) {
    final String expId=e.getId();
    bw.append(EXPERIMENT_FIELD_PREFIX + expId + DOT_SEPARATOR+ EXPERIMENT_NAME_SUFFIX+ EQUAL_SEPARATOR+ e.getName()+ NEWLINE);
    for (    Map.Entry<String,String> m : e.getMetadata().entrySet()) {
      bw.append(EXPERIMENT_FIELD_PREFIX + expId + DOT_SEPARATOR+ m.getKey());
      bw.append(EQUAL_SEPARATOR);
      bw.append(m.getValue());
      bw.append(NEWLINE);
    }
    bw.append(NEWLINE);
  }
  bw.append(COLUMN_SECTION);
  bw.append(NEWLINE);
  bw.append(SAMPLE_ID_FIELDNAME);
  bw.append(TAB_SEPARATOR);
  bw.append(SAMPLE_NAME_FIELDNAME);
  final List<String> sampleMDKeys=getAllSamplesMetadataKeys(design);
  for (  String key : sampleMDKeys) {
    if (SampleMetadata.UUID_KEY.equals(key)) {
      continue;
    }
    bw.append(TAB_SEPARATOR);
    bw.append(key);
  }
  for (  Experiment experiment : design.getExperiments()) {
    final String prefix=EXPERIMENT_FIELD_PREFIX + experiment.getId() + DOT_SEPARATOR;
    final List<String> experimentMDKeys=getExperimentSampleAllMetadataKeys(experiment);
    for (    String key : experimentMDKeys) {
      bw.append(TAB_SEPARATOR);
      bw.append(prefix);
      bw.append(key);
    }
  }
  if (sampleMDKeys.contains(UUID_KEY)) {
    bw.append(TAB_SEPARATOR);
    bw.append(UUID_KEY);
  }
  bw.append(NEWLINE);
  for (  Sample sample : design.getSamples()) {
    bw.append(sample.getId());
    bw.append(TAB_SEPARATOR);
    bw.append(sample.getName());
    final SampleMetadata smd=sample.getMetadata();
    for (    String key : sampleMDKeys) {
      if (UUID_KEY.equals(key)) {
        continue;
      }
      bw.append(TAB_SEPARATOR);
      if (smd.contains(key)) {
        bw.append(smd.get(key));
      }
    }
    for (    Experiment experiment : design.getExperiments()) {
      final ExperimentSampleMetadata expSampleMetadata=experiment.getExperimentSample(sample).getMetadata();
      final List<String> experimentMDKeys=getExperimentSampleAllMetadataKeys(experiment);
      for (      String key : experimentMDKeys) {
        bw.append(TAB_SEPARATOR);
        if (expSampleMetadata.contains(key)) {
          bw.append(expSampleMetadata.get(key));
        }
      }
    }
    if (sampleMDKeys.contains(UUID_KEY)) {
      bw.append(TAB_SEPARATOR);
      bw.append(smd.get(UUID_KEY));
    }
    bw.append(NEWLINE);
  }
  bw.close();
}","@Override public void write(final Design design) throws IOException {
  checkNotNull(design,""String_Node_Str"");
  final BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(this.out,Globals.DEFAULT_CHARSET));
  checkNotNull(design,""String_Node_Str"");
  bw.append(HEADER_SECTION);
  bw.append(NEWLINE);
  bw.append(Eoulsan2DesignReader.DESIGN_FORMAT_VERSION_METADATA_KEY);
  bw.append(EQUAL_SEPARATOR);
  bw.append(Eoulsan2DesignReader.FORMAT_VERSION);
  bw.append(NEWLINE);
  for (  Map.Entry<String,String> e : design.getMetadata().entrySet()) {
    bw.append(e.getKey());
    bw.append(EQUAL_SEPARATOR);
    bw.append(e.getValue());
    bw.append(NEWLINE);
  }
  bw.append(NEWLINE);
  if (!design.getExperiments().isEmpty()) {
    bw.append(EXPERIMENT_SECTION);
    bw.append(NEWLINE);
  }
  for (  Experiment e : design.getExperiments()) {
    final String expId=e.getId();
    bw.append(EXPERIMENT_FIELD_PREFIX);
    bw.append(expId).append(DOT_SEPARATOR);
    bw.append(EXPERIMENT_NAME_SUFFIX);
    bw.append(EQUAL_SEPARATOR);
    bw.append(e.getName());
    bw.append(NEWLINE);
    for (    Map.Entry<String,String> m : e.getMetadata().entrySet()) {
      bw.append(EXPERIMENT_FIELD_PREFIX);
      bw.append(expId);
      bw.append(DOT_SEPARATOR);
      bw.append(m.getKey());
      bw.append(EQUAL_SEPARATOR);
      bw.append(m.getValue());
      bw.append(NEWLINE);
    }
    bw.append(NEWLINE);
  }
  bw.append(COLUMN_SECTION);
  bw.append(NEWLINE);
  bw.append(SAMPLE_ID_FIELDNAME);
  bw.append(TAB_SEPARATOR);
  bw.append(SAMPLE_NAME_FIELDNAME);
  final List<String> sampleMDKeys=getAllSamplesMetadataKeys(design);
  for (  String key : sampleMDKeys) {
    if (SampleMetadata.UUID_KEY.equals(key)) {
      continue;
    }
    bw.append(TAB_SEPARATOR);
    bw.append(key);
  }
  for (  Experiment experiment : design.getExperiments()) {
    final String prefix=EXPERIMENT_FIELD_PREFIX + experiment.getId() + DOT_SEPARATOR;
    final List<String> experimentMDKeys=getExperimentSampleAllMetadataKeys(experiment);
    for (    String key : experimentMDKeys) {
      bw.append(TAB_SEPARATOR);
      bw.append(prefix);
      bw.append(key);
    }
  }
  if (sampleMDKeys.contains(UUID_KEY)) {
    bw.append(TAB_SEPARATOR);
    bw.append(UUID_KEY);
  }
  bw.append(NEWLINE);
  for (  Sample sample : design.getSamples()) {
    bw.append(sample.getId());
    bw.append(TAB_SEPARATOR);
    bw.append(sample.getName());
    final SampleMetadata smd=sample.getMetadata();
    for (    String key : sampleMDKeys) {
      if (UUID_KEY.equals(key)) {
        continue;
      }
      bw.append(TAB_SEPARATOR);
      if (smd.contains(key)) {
        bw.append(smd.get(key));
      }
    }
    for (    Experiment experiment : design.getExperiments()) {
      final ExperimentSampleMetadata expSampleMetadata=experiment.getExperimentSample(sample).getMetadata();
      final List<String> experimentMDKeys=getExperimentSampleAllMetadataKeys(experiment);
      for (      String key : experimentMDKeys) {
        bw.append(TAB_SEPARATOR);
        if (expSampleMetadata.contains(key)) {
          bw.append(expSampleMetadata.get(key));
        }
      }
    }
    if (sampleMDKeys.contains(UUID_KEY)) {
      bw.append(TAB_SEPARATOR);
      bw.append(smd.get(UUID_KEY));
    }
    bw.append(NEWLINE);
  }
  bw.close();
}",0.970023059185242
141081,"@Override String buildLineScript(final String line){
  final StringBuilder txt=new StringBuilder();
  txt.append(this.tab(currentTabCount));
  txt.append(VAR_CMD_NAME);
  txt.append(""String_Node_Str"");
  txt.append(line);
  txt.append(""String_Node_Str"");
  return txt.toString();
}","@Override String buildLineScript(final String line){
  return this.tab(currentTabCount) + VAR_CMD_NAME + ""String_Node_Str""+ line+ ""String_Node_Str"";
}",0.654292343387471
141082,"/** 
 * Gets the report on execution command line.
 * @return the report
 */
public String getReport(){
  if (isReportCreated) {
    return this.message.toString();
  }
  this.message.append(""String_Node_Str"" + this.desc + ""String_Node_Str"");
  this.message.append(""String_Node_Str"" + this.commandLine);
  this.message.append(""String_Node_Str"" + this.directory.getAbsolutePath());
  this.message.append(""String_Node_Str"" + (this.duration == -1 ? ""String_Node_Str"" : toTimeHumanReadable(this.duration)));
  this.message.append(""String_Node_Str"" + this.exitValue);
  this.message.append(getSTDERRMessageOnProcess());
  if (isInterruptedProcess()) {
    this.message.append(""String_Node_Str"" + toTimeHumanReadable(durationMaxToInterruptProcess));
  }
  this.message.append(""String_Node_Str"");
  isReportCreated=true;
  return this.message.toString();
}","/** 
 * Gets the report on execution command line.
 * @return the report
 */
public String getReport(){
  if (isReportCreated) {
    return this.message.toString();
  }
  this.message.append(""String_Node_Str"");
  this.message.append(this.desc);
  this.message.append(""String_Node_Str"");
  this.message.append(""String_Node_Str"");
  this.message.append(this.commandLine);
  this.message.append(""String_Node_Str"");
  this.message.append(this.directory.getAbsolutePath());
  this.message.append(""String_Node_Str"");
  this.message.append(this.duration == -1 ? ""String_Node_Str"" : toTimeHumanReadable(this.duration));
  this.message.append(""String_Node_Str"");
  this.message.append(this.exitValue);
  this.message.append(getSTDERRMessageOnProcess());
  if (isInterruptedProcess()) {
    this.message.append(""String_Node_Str"");
    this.message.append(toTimeHumanReadable(durationMaxToInterruptProcess));
  }
  this.message.append(""String_Node_Str"");
  isReportCreated=true;
  return this.message.toString();
}",0.8930885529157667
141083,"/** 
 * Adds the stderr message on process in the report.
 * @return the string
 */
public String getSTDERRMessageOnProcess(){
  if (stderrFile == null || !stderrFile.exists()) {
    return ""String_Node_Str"";
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + this.stderrFile.getAbsolutePath() + ""String_Node_Str"");
  try (BufferedReader br=Files.newReader(stderrFile,DEFAULT_CHARSET)){
    String line=""String_Node_Str"";
    while ((line=br.readLine()) != null) {
      sb.append(""String_Node_Str"" + line);
    }
    sb.append(""String_Node_Str"");
  }
 catch (  IOException e) {
    sb.append(""String_Node_Str"" + stderrFile.getAbsolutePath() + ""String_Node_Str"");
  }
  return sb.toString();
}","/** 
 * Adds the stderr message on process in the report.
 * @return the string
 */
public String getSTDERRMessageOnProcess(){
  if (stderrFile == null || !stderrFile.exists()) {
    return ""String_Node_Str"";
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(this.stderrFile.getAbsolutePath());
  sb.append('\n');
  try (BufferedReader br=Files.newReader(stderrFile,DEFAULT_CHARSET)){
    String line=""String_Node_Str"";
    while ((line=br.readLine()) != null) {
      sb.append(""String_Node_Str"");
      sb.append(line);
    }
    sb.append(""String_Node_Str"");
  }
 catch (  IOException e) {
    sb.append(""String_Node_Str"");
    sb.append(stderrFile.getAbsolutePath());
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}",0.9208250166334
141084,"/** 
 * Delete file matching on pattern, if is a link, delete the real file too.
 * @param itResult the it result
 * @param isDeleteFileRequired the is delete file required.
 */
public void deleteFileMatchingOnPattern(final ITResult itResult,final boolean isDeleteFileRequired){
  final List<File> linksSymbolic=new ArrayList<>();
  StringBuilder msg=new StringBuilder();
  msg.append(""String_Node_Str"");
  boolean success=true;
  if (!itResult.isSuccess()) {
    msg.append((isDeleteFileRequired ? ""String_Node_Str"" : ""String_Node_Str"") + this.directory.getAbsolutePath());
  }
  if (itResult.isSuccess() && isDeleteFileRequired) {
    msg.append(""String_Node_Str"");
    msg.append(""String_Node_Str"" + this.directory.getAbsolutePath());
    for (    File f : getFilesToRemove()) {
      if (Files.isSymbolicLink(f.toPath())) {
        linksSymbolic.add(f);
        continue;
      }
      if (!f.delete()) {
        success=false;
        msg.append(""String_Node_Str"" + f.getAbsolutePath());
      }
    }
    final String s=removeBrokenSymbolicLink(linksSymbolic);
    msg.append(s);
    if (success) {
      msg.append(""String_Node_Str"");
    }
  }
 else {
    msg.append(""String_Node_Str"");
  }
  itResult.addCommentsIntoTextReport(msg.toString());
}","/** 
 * Delete file matching on pattern, if is a link, delete the real file too.
 * @param itResult the it result
 * @param isDeleteFileRequired the is delete file required.
 */
public void deleteFileMatchingOnPattern(final ITResult itResult,final boolean isDeleteFileRequired){
  final List<File> linksSymbolic=new ArrayList<>();
  StringBuilder msg=new StringBuilder();
  msg.append(""String_Node_Str"");
  boolean success=true;
  if (!itResult.isSuccess()) {
    msg.append(isDeleteFileRequired ? ""String_Node_Str"" : ""String_Node_Str"");
    msg.append(this.directory.getAbsolutePath());
  }
  if (itResult.isSuccess() && isDeleteFileRequired) {
    msg.append(""String_Node_Str"");
    msg.append(""String_Node_Str"");
    msg.append(this.directory.getAbsolutePath());
    for (    File f : getFilesToRemove()) {
      if (Files.isSymbolicLink(f.toPath())) {
        linksSymbolic.add(f);
        continue;
      }
      if (!f.delete()) {
        success=false;
        msg.append(""String_Node_Str"");
        msg.append(f.getAbsolutePath());
      }
    }
    final String s=removeBrokenSymbolicLink(linksSymbolic);
    msg.append(s);
    if (success) {
      msg.append(""String_Node_Str"");
    }
  }
 else {
    msg.append(""String_Node_Str"");
  }
  itResult.addCommentsIntoTextReport(msg.toString());
}",0.9737769080234834
141085,"/** 
 * Removes broken symbolic links.
 * @param linksSymbolic the links symbolic
 * @return message to final report
 */
private String removeBrokenSymbolicLink(final List<File> linksSymbolic){
  final StringBuilder msg=new StringBuilder();
  for (  File link : linksSymbolic) {
    File realFile=null;
    try {
      realFile=Files.readSymbolicLink(link.toPath()).toFile();
    }
 catch (    IOException e) {
    }
    if (realFile == null)     continue;
    if (!realFile.exists()) {
      if (link.delete()) {
        msg.append(""String_Node_Str"" + link.getName());
      }
    }
  }
  return msg.toString();
}","/** 
 * Removes broken symbolic links.
 * @param linksSymbolic the links symbolic
 * @return message to final report
 */
private String removeBrokenSymbolicLink(final List<File> linksSymbolic){
  final StringBuilder msg=new StringBuilder();
  for (  File link : linksSymbolic) {
    File realFile=null;
    try {
      realFile=Files.readSymbolicLink(link.toPath()).toFile();
    }
 catch (    IOException e) {
    }
    if (realFile == null)     continue;
    if (!realFile.exists()) {
      if (link.delete()) {
        msg.append(""String_Node_Str"");
        msg.append(link.getName());
      }
    }
  }
  return msg.toString();
}",0.9799518845228548
141086,"/** 
 * Get report on comparison.
 * @return report on comparison
 */
public String getReport(){
  final StringBuilder txt=new StringBuilder();
  txt.append(""String_Node_Str"" + this.statusComparison.getType() + ""String_Node_Str""+ this.filename);
  if (this.statusComparison.getType().equals(TYPE_FAIL)) {
    txt.append(""String_Node_Str"" + this.statusComparison.getName());
    txt.append(""String_Node_Str"" + this.fileTestedPath);
    txt.append(""String_Node_Str"" + this.fileExpectedPath);
    txt.append(""String_Node_Str"" + this.message);
  }
  return txt.toString();
}","/** 
 * Get report on comparison.
 * @return report on comparison
 */
public String getReport(){
  final StringBuilder txt=new StringBuilder();
  txt.append(""String_Node_Str"").append(this.statusComparison.getType()).append(""String_Node_Str"");
  txt.append(this.filename);
  if (this.statusComparison.getType().equals(TYPE_FAIL)) {
    txt.append(""String_Node_Str"");
    txt.append(this.statusComparison.getName());
    txt.append(""String_Node_Str"");
    txt.append(this.fileTestedPath);
    txt.append(""String_Node_Str"");
    txt.append(this.fileExpectedPath);
    txt.append(""String_Node_Str"");
    txt.append(this.message);
  }
  return txt.toString();
}",0.8972267536704731
141087,"/** 
 * Set the entry.
 * @return
 */
public Set<Map.Entry<String,String>> entrySet(){
  return Collections.unmodifiableSet(this.metadata.entrySet());
}","/** 
 * Get an entry set of the metadata.
 * @return a set of entries
 */
public Set<Map.Entry<String,String>> entrySet(){
  return Collections.unmodifiableSet(this.metadata.entrySet());
}",0.8705882352941177
141088,"/** 
 * Set the key.
 * @return
 */
public Set<String> keySet(){
  return Collections.unmodifiableSet(this.metadata.keySet());
}","/** 
 * Get the keys of the metadata
 * @return a set with the keys of the metadata
 */
public Set<String> keySet(){
  return Collections.unmodifiableSet(this.metadata.keySet());
}",0.8181818181818182
141089,"/** 
 * Get all the experiment metadata keys of the samples of a design.
 * @param design the design
 * @return a list with the experiment metadata keys of the samples of a design
 */
public static List<String> getExperimentSampleAllMetadataKeys(final Experiment experiment){
  checkNotNull(experiment,""String_Node_Str"");
  final List<String> result=new ArrayList<>();
  final Set<String> keys=new HashSet<>();
  for (  ExperimentSample sample : experiment.getExperimentSamples()) {
    for (    String key : sample.getMetadata().keySet()) {
      if (keys.contains(key)) {
        continue;
      }
      keys.add(key);
      result.add(key);
    }
  }
  return Collections.unmodifiableList(result);
}","/** 
 * Get all the experiment metadata keys of the samples of a design.
 * @param experiment the experiment
 * @return a list with the experiment metadata keys of the samples of a design
 */
public static List<String> getExperimentSampleAllMetadataKeys(final Experiment experiment){
  checkNotNull(experiment,""String_Node_Str"");
  final List<String> result=new ArrayList<>();
  final Set<String> keys=new HashSet<>();
  for (  ExperimentSample sample : experiment.getExperimentSamples()) {
    for (    String key : sample.getMetadata().keySet()) {
      if (keys.contains(key)) {
        continue;
      }
      keys.add(key);
      result.add(key);
    }
  }
  return Collections.unmodifiableList(result);
}",0.9773371104815864
141090,"/** 
 * Set the name of the experiment.
 * @param newExperimentName the new experiment name
 * @return the experiment name
 */
public void setName(String newExperimentName){
  checkNotNull(newExperimentName,""String_Node_Str"");
  final String name=newExperimentName.trim();
  checkArgument(!this.design.containsExperimentName(name),""String_Node_Str"" + name);
  this.experimentName=name;
}","/** 
 * Set the name of the experiment.
 * @param newExperimentName the new experiment name
 */
public void setName(String newExperimentName){
  checkNotNull(newExperimentName,""String_Node_Str"");
  final String name=newExperimentName.trim();
  checkArgument(!this.design.containsExperimentName(name),""String_Node_Str"" + name);
  this.experimentName=name;
}",0.9582772543741588
141091,"/** 
 * Add a sample.
 * @param sampleId the sample id
 * @return the sample object
 */
public ExperimentSample addSample(final Sample sample){
  checkNotNull(sample,""String_Node_Str"");
  checkArgument(!this.samples.contains(sample),""String_Node_Str"" + sample.getId());
  checkArgument(sample.getDesign() == this.design,""String_Node_Str"" + sample.getId());
  final ExperimentSample newExperimentSample=new ExperimentSample(sample);
  this.samples.add(newExperimentSample);
  return newExperimentSample;
}","/** 
 * Add a sample.
 * @param sample the sample to add
 * @return an experiment sample object
 */
public ExperimentSample addSample(final Sample sample){
  checkNotNull(sample,""String_Node_Str"");
  checkArgument(!this.samples.contains(sample),""String_Node_Str"" + sample.getId());
  checkArgument(sample.getDesign() == this.design,""String_Node_Str"" + sample.getId());
  final ExperimentSample newExperimentSample=new ExperimentSample(sample);
  this.samples.add(newExperimentSample);
  return newExperimentSample;
}",0.9529411764705882
141092,"/** 
 * Remove the sample.
 * @param sampleId the sample id
 */
public void removeSample(final Sample sample){
  checkNotNull(sample,""String_Node_Str"");
  checkArgument(this.samples.contains(sample),""String_Node_Str"" + sample.getId());
  checkArgument(sample.getDesign() == this.design,""String_Node_Str"" + sample.getId());
  this.samples.remove(sample);
}","/** 
 * Remove the sample.
 * @param sample the sample to remove
 */
public void removeSample(final Sample sample){
  checkNotNull(sample,""String_Node_Str"");
  checkArgument(this.samples.contains(sample),""String_Node_Str"" + sample.getId());
  checkArgument(sample.getDesign() == this.design,""String_Node_Str"" + sample.getId());
  this.samples.remove(sample);
}",0.9482517482517484
141093,"/** 
 * Set the contrastFile DEseq2 option.
 * @param newcontrastFile the new contrastFile DEseq2 option
 */
public void setContrastFile(String newContrastFile){
  set(CONTRAST_FILE_KEY,newContrastFile);
}","/** 
 * Set the contrastFile DEseq2 option.
 * @param newContrastFile the new contrastFile DEseq2 option
 */
public void setContrastFile(String newContrastFile){
  set(CONTRAST_FILE_KEY,newContrastFile);
}",0.9951219512195122
141094,"/** 
 * Set the skip option.
 * @param newSkip the new skip option
 */
public void setSkip(boolean skip){
  set(SKIP_KEY,""String_Node_Str"" + skip);
}","/** 
 * Set the skip option.
 * @param newSkip the new skip option
 */
public void setSkip(boolean newSkip){
  set(SKIP_KEY,""String_Node_Str"" + newSkip);
}",0.9671052631578948
141095,"/** 
 * Set the reference option.
 * @param newReptechGroup the new reference option
 */
public void setReference(String newReference){
  set(REFERENCE_KEY,newReference);
}","/** 
 * Set the reference option.
 * @param newReference the new reference option
 */
public void setReference(String newReference){
  set(REFERENCE_KEY,newReference);
}",0.9618768328445748
141096,"/** 
 * Set the buildContrast DEseq2 option.
 * @param newbuildContrast the new buildContrast DEseq2 option
 */
public void setBuildContrast(boolean newBuildContrast){
  set(BUILD_CONTRAST_KEY,""String_Node_Str"" + newBuildContrast);
}","/** 
 * Set the buildContrast DEseq2 option.
 * @param newBuildContrast the new buildContrast DEseq2 option
 */
public void setBuildContrast(boolean newBuildContrast){
  set(BUILD_CONTRAST_KEY,""String_Node_Str"" + newBuildContrast);
}",0.9957081545064378
141097,"/** 
 * Set the reference.
 * @param newReptechGroup the new reference
 */
public void setReference(boolean newReference){
  set(REFERENCE_KEY,""String_Node_Str"" + newReference);
}","/** 
 * Set the reference.
 * @param newReference the new reference
 */
public void setReference(boolean newReference){
  set(REFERENCE_KEY,""String_Node_Str"" + newReference);
}",0.9633802816901408
141098,"/** 
 * Set the reads.
 * @param newReads the new reads
 */
public void setReads(List<String> reads){
  set(READS_KEY,reads);
}","/** 
 * Set the reads.
 * @param newReads the new reads
 */
public void setReads(List<String> newReads){
  set(READS_KEY,newReads);
}",0.9615384615384616
141099,"/** 
 * Create a new executable requirement.
 * @param executableName the executable name
 * @param optional true if the executable is a mandatory requirement
 * @throws EoulsanException if an error occurs while configuring therequirement
 */
public static Requirement newPathRequirement(final String executableName,final boolean optional){
  checkNotNull(executableName,""String_Node_Str"");
  checkArgument(!executableName.trim().isEmpty(),""String_Node_Str"");
  final PathRequirement result=new PathRequirement();
  result.executableName=executableName.trim();
  result.setInstallable(false);
  result.setOptionnal(optional);
  return result;
}","/** 
 * Create a new executable requirement.
 * @param executableName the executable name
 * @param optional true if the executable is a mandatory requirement
 * @return a new PathRequirement object
 * @throws EoulsanException if an error occurs while configuring therequirement
 */
public static Requirement newPathRequirement(final String executableName,final boolean optional){
  checkNotNull(executableName,""String_Node_Str"");
  checkArgument(!executableName.trim().isEmpty(),""String_Node_Str"");
  final PathRequirement result=new PathRequirement();
  result.executableName=executableName.trim();
  result.setInstallable(false);
  result.setOptionnal(optional);
  return result;
}",0.9698795180722892
141100,"/** 
 * Generate the R script.
 * @param samples list of sample experiments
 * @return String rScript R script to execute
 * @throws EoulsanException if an error occurs while generate the R script
 */
protected String generateScript(final Experiment experiment,final StepContext context) throws EoulsanException {
  final Map<String,List<Integer>> conditionsMap=new HashMap<>();
  final List<Integer> rSampleIds=new ArrayList<>();
  final List<String> rSampleNames=new ArrayList<>();
  final List<String> rCondNames=new ArrayList<>();
  List<String> rRepTechGroup=new ArrayList<>();
  int i=0;
  for (  Sample s : experiment.getSamples()) {
    if (!s.getMetadata().containsCondition()) {
      throw new EoulsanException(""String_Node_Str"");
    }
    final String condition=s.getMetadata().getCondition().trim();
    if (""String_Node_Str"".equals(condition)) {
      throw new EoulsanException(""String_Node_Str"" + s.getName() + ""String_Node_Str""+ s.getId()+ ""String_Node_Str"");
    }
    final String repTechGroup=s.getMetadata().getRepTechGroup().trim();
    if (!""String_Node_Str"".equals(repTechGroup)) {
      rRepTechGroup.add(repTechGroup);
    }
    final List<Integer> index;
    if (!conditionsMap.containsKey(condition)) {
      index=new ArrayList<>();
      conditionsMap.put(condition,index);
    }
 else {
      index=conditionsMap.get(condition);
    }
    index.add(i);
    rSampleIds.add(s.getNumber());
    rSampleNames.add(s.getName());
    rCondNames.add(condition);
    i++;
  }
  checkRepTechGroupCoherence(rRepTechGroup,rCondNames);
  String pdfTitle=escapeUnderScore(experiment.getName()) + ""String_Node_Str"";
  String filePrefix=""String_Node_Str"" + escapeUnderScore(experiment.getName());
  final StringBuilder sb=generateRnwpreamble(experiment.getSamples(),pdfTitle,filePrefix);
  replaceRtgNA(rRepTechGroup,rSampleNames);
  generateSampleNamePart(rSampleNames,sb);
  generateSampleIdsPart(rSampleIds,sb);
  generateExpressionFileNamesPart(sb);
  generateRepTechGroupPart(rRepTechGroup,sb);
  generateConditionPart(rCondNames,sb);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + experiment.getName() + ""String_Node_Str""+ ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(readStaticScript(TARGET_CREATION));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (experiment.getSamples().size() > 2) {
    sb.append(readStaticScript(CLUSTERING_PCA_RAW));
  }
  if (isTechnicalReplicates(rRepTechGroup)) {
    sb.append(readStaticScript(NORMALISATION_PART1_WHITH_TECHREP));
  }
 else {
    sb.append(readStaticScript(NORMALIZATION_PART1_WHITHOUT_TECHREP));
  }
  if (isEnoughRepTechGroup(rRepTechGroup)) {
    sb.append(readStaticScript(CLUSTERING_PCA_NORM));
  }
  sb.append(readStaticScript(NORMALIZATION_PART2));
  sb.append(""String_Node_Str"");
  return sb.toString();
}","/** 
 * Generate the R script.
 * @param experiment the experiment
 * @param context step context
 * @return String rScript R script to execute
 * @throws EoulsanException if an error occurs while generate the R script
 */
protected String generateScript(final Experiment experiment,final StepContext context) throws EoulsanException {
  final Map<String,List<Integer>> conditionsMap=new HashMap<>();
  final List<Integer> rSampleIds=new ArrayList<>();
  final List<String> rSampleNames=new ArrayList<>();
  final List<String> rCondNames=new ArrayList<>();
  List<String> rRepTechGroup=new ArrayList<>();
  int i=0;
  for (  Sample s : experiment.getSamples()) {
    if (!s.getMetadata().containsCondition()) {
      throw new EoulsanException(""String_Node_Str"");
    }
    final String condition=s.getMetadata().getCondition().trim();
    if (""String_Node_Str"".equals(condition)) {
      throw new EoulsanException(""String_Node_Str"" + s.getName() + ""String_Node_Str""+ s.getId()+ ""String_Node_Str"");
    }
    final String repTechGroup=s.getMetadata().getRepTechGroup().trim();
    if (!""String_Node_Str"".equals(repTechGroup)) {
      rRepTechGroup.add(repTechGroup);
    }
    final List<Integer> index;
    if (!conditionsMap.containsKey(condition)) {
      index=new ArrayList<>();
      conditionsMap.put(condition,index);
    }
 else {
      index=conditionsMap.get(condition);
    }
    index.add(i);
    rSampleIds.add(s.getNumber());
    rSampleNames.add(s.getName());
    rCondNames.add(condition);
    i++;
  }
  checkRepTechGroupCoherence(rRepTechGroup,rCondNames);
  String pdfTitle=escapeUnderScore(experiment.getName()) + ""String_Node_Str"";
  String filePrefix=""String_Node_Str"" + escapeUnderScore(experiment.getName());
  final StringBuilder sb=generateRnwpreamble(experiment.getSamples(),pdfTitle,filePrefix);
  replaceRtgNA(rRepTechGroup,rSampleNames);
  generateSampleNamePart(rSampleNames,sb);
  generateSampleIdsPart(rSampleIds,sb);
  generateExpressionFileNamesPart(sb);
  generateRepTechGroupPart(rRepTechGroup,sb);
  generateConditionPart(rCondNames,sb);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + experiment.getName() + ""String_Node_Str""+ ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(readStaticScript(TARGET_CREATION));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (experiment.getSamples().size() > 2) {
    sb.append(readStaticScript(CLUSTERING_PCA_RAW));
  }
  if (isTechnicalReplicates(rRepTechGroup)) {
    sb.append(readStaticScript(NORMALISATION_PART1_WHITH_TECHREP));
  }
 else {
    sb.append(readStaticScript(NORMALIZATION_PART1_WHITHOUT_TECHREP));
  }
  if (isEnoughRepTechGroup(rRepTechGroup)) {
    sb.append(readStaticScript(CLUSTERING_PCA_NORM));
  }
  sb.append(readStaticScript(NORMALIZATION_PART2));
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9883759548322816
141101,"/** 
 * Public constructor
 * @param the Bloom filters
 * @param addedNumberOfElements added number of elements
 * @param expectedNumberOfElements parameter to create bloom filter, must bepositive
 * @param falsePositiveProbability parameter to create bloom filter, must bebetween 0 and 100%
 */
public EnhancedBloomFilter(final BloomFilter<String> bf,final int addedNumberOfElements,final int expectedNumberOfElements,final double falsePositiveProbability){
  if (bf == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.bf=bf.copy();
  this.addedNumberOfElements=addedNumberOfElements;
  this.expectedNumberOfElements=expectedNumberOfElements;
  this.falsePositiveProbability=falsePositiveProbability;
}","/** 
 * Public constructor
 * @param bf the Bloom filters
 * @param addedNumberOfElements added number of elements
 * @param expectedNumberOfElements parameter to create bloom filter, must bepositive
 * @param falsePositiveProbability parameter to create bloom filter, must bebetween 0 and 100%
 */
public EnhancedBloomFilter(final BloomFilter<String> bf,final int addedNumberOfElements,final int expectedNumberOfElements,final double falsePositiveProbability){
  if (bf == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.bf=bf.copy();
  this.addedNumberOfElements=addedNumberOfElements;
  this.expectedNumberOfElements=expectedNumberOfElements;
  this.falsePositiveProbability=falsePositiveProbability;
}",0.997943797121316
141102,"/** 
 * Convert a number of milliseconds into a human reading string.
 * @param time time in ms
 * @return a string with the compact time
 */
public static final String toCompactTime(final long millisSinceEpoch){
  final Calendar cal=Calendar.getInstance(Locale.ENGLISH);
  cal.setTime(new Date(millisSinceEpoch));
  return String.format(""String_Node_Str"",cal.get(Calendar.YEAR),cal.get(Calendar.MONTH) + 1,cal.get(Calendar.DAY_OF_MONTH),cal.get(Calendar.HOUR_OF_DAY),cal.get(Calendar.MINUTE),cal.get(Calendar.SECOND));
}","/** 
 * Convert a number of milliseconds into a human reading string.
 * @param millisSinceEpoch time in ms
 * @return a string with the compact time
 */
public static final String toCompactTime(final long millisSinceEpoch){
  final Calendar cal=Calendar.getInstance(Locale.ENGLISH);
  cal.setTime(new Date(millisSinceEpoch));
  return String.format(""String_Node_Str"",cal.get(Calendar.YEAR),cal.get(Calendar.MONTH) + 1,cal.get(Calendar.DAY_OF_MONTH),cal.get(Calendar.HOUR_OF_DAY),cal.get(Calendar.MINUTE),cal.get(Calendar.SECOND));
}",0.9810246679316889
141103,"/** 
 * Create R command.
 * @param rScriptFile the R script file to execute
 * @param sweave true if the script is a Sweave file
 * @param scriprArguments script arguments
 * @return the R command as a list
 */
protected List<String> createCommand(final File rScriptFile,final boolean sweave,final String sweaveOuput,final String... scriptArguments){
  final List<String> result=new ArrayList<>();
  result.add(RSCRIPT_EXECUTABLE);
  if (sweave) {
    result.add(""String_Node_Str"");
    final StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(rScriptFile.getAbsolutePath());
    sb.append('\""');
    if (sweaveOuput != null) {
      sb.append(""String_Node_Str"");
      sb.append(sweaveOuput);
      sb.append('\""');
    }
    sb.append(')');
    result.add(sb.toString());
  }
 else {
    result.add(rScriptFile.getAbsolutePath());
  }
  if (scriptArguments != null) {
    for (    String argument : scriptArguments) {
      result.add(argument);
    }
  }
  return result;
}","/** 
 * Create R command.
 * @param rScriptFile the R script file to execute
 * @param sweave true if the script is a Sweave file
 * @param scriptArguments script arguments
 * @return the R command as a list
 */
protected List<String> createCommand(final File rScriptFile,final boolean sweave,final String sweaveOuput,final String... scriptArguments){
  final List<String> result=new ArrayList<>();
  result.add(RSCRIPT_EXECUTABLE);
  if (sweave) {
    result.add(""String_Node_Str"");
    final StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(rScriptFile.getAbsolutePath());
    sb.append('\""');
    if (sweaveOuput != null) {
      sb.append(""String_Node_Str"");
      sb.append(sweaveOuput);
      sb.append('\""');
    }
    sb.append(')');
    result.add(sb.toString());
  }
 else {
    result.add(rScriptFile.getAbsolutePath());
  }
  if (scriptArguments != null) {
    for (    String argument : scriptArguments) {
      result.add(argument);
    }
  }
  return result;
}",0.99901185770751
141104,"/** 
 * Execute a R script.
 * @param rScript the source of the script to execute
 * @param sweave true if the script is a Sweave script
 * @param sweaveOutput Sweave output file
 * @param saveRscript true to keep the R script
 * @param description description of the R script
 * @param scriprArguments script arguments
 * @throws IOException if an error occurs while executing the script
 */
void executeRScript(String rScript,boolean sweave,String sweaveOutput,boolean saveRscript,String description,String... scriptArguments) throws IOException ;","/** 
 * Execute a R script.
 * @param rScript the source of the script to execute
 * @param sweave true if the script is a Sweave script
 * @param sweaveOutput Sweave output file
 * @param saveRscript true to keep the R script
 * @param description description of the R script
 * @param scriptArguments script arguments
 * @throws IOException if an error occurs while executing the script
 */
void executeRScript(String rScript,boolean sweave,String sweaveOutput,boolean saveRscript,String description,String... scriptArguments) throws IOException ;",0.9981785063752276
141105,"/** 
 * Set the cluster mode.
 * @param clusterMode cluster mode
 */
public void setMode(final EoulsanExecMode mode){
  if (mode == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (this.mode != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.mode=mode;
}","/** 
 * Set the cluster mode.
 * @param mode Eoulsan execution mode
 */
public void setMode(final EoulsanExecMode mode){
  if (mode == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (this.mode != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.mode=mode;
}",0.933115823817292
141106,"/** 
 * Configure Log4J. If no log level is provided, the INFO log level will be used.
 * @param logLevel logLevel as string.
 * @param logFile the log file
 */
public static void configureLog4J(final String logLevel,final String logFilename){
  if (logFilename == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Logger rootLogger=Logger.getRootLogger();
  rootLogger.setLevel(Level.toLevel(logLevel,DEFAULT_LOG_LEVEL));
  rootLogger.removeAllAppenders();
  final PatternLayout layout=new PatternLayout(""String_Node_Str"");
  try {
    final RollingFileAppender fileAppender=new RollingFileAppender(layout,logFilename);
    rootLogger.addAppender(fileAppender);
  }
 catch (  IOException e) {
    EoulsanLogger.getLogger().warning(""String_Node_Str"");
  }
}","/** 
 * Configure Log4J. If no log level is provided, the INFO log level will be used.
 * @param logLevel logLevel as string.
 * @param logFilename the log filename
 */
public static void configureLog4J(final String logLevel,final String logFilename){
  if (logFilename == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Logger rootLogger=Logger.getRootLogger();
  rootLogger.setLevel(Level.toLevel(logLevel,DEFAULT_LOG_LEVEL));
  rootLogger.removeAllAppenders();
  final PatternLayout layout=new PatternLayout(""String_Node_Str"");
  try {
    final RollingFileAppender fileAppender=new RollingFileAppender(layout,logFilename);
    rootLogger.addAppender(fileAppender);
  }
 catch (  IOException e) {
    EoulsanLogger.getLogger().warning(""String_Node_Str"");
  }
}",0.9948717948717948
141107,"/** 
 * Get the Galaxy tool path.
 * @returnthe Galaxy tool path
 */
public String getGalaxyToolPath(){
  return this.properties.getProperty(GALAXY_TOOL_PATH);
}","/** 
 * Get the Galaxy tool path.
 * @return the Galaxy tool path
 */
public String getGalaxyToolPath(){
  return this.properties.getProperty(GALAXY_TOOL_PATH);
}",0.9969040247678018
141108,"/** 
 * Public constructor.
 * @param context the context
 * @param os output stream
 */
public ExpressionRecordWriter(final TaskAttemptContext context,final DataOutputStream out){
  this.context=context;
  this.out=out;
}","/** 
 * Public constructor.
 * @param context the context
 * @param out data output stream
 */
public ExpressionRecordWriter(final TaskAttemptContext context,final DataOutputStream out){
  this.context=context;
  this.out=out;
}",0.9822222222222222
141109,"/** 
 * Public constructor.
 * @param context the context
 * @param os output stream
 */
public FastqRecordWriter(final TaskAttemptContext context,final DataOutputStream out){
  this.context=context;
  this.out=out;
}","/** 
 * Public constructor.
 * @param context the context
 * @param out data output stream
 */
public FastqRecordWriter(final TaskAttemptContext context,final DataOutputStream out){
  this.context=context;
  this.out=out;
}",0.9818181818181818
141110,"/** 
 * Public constructor.
 * @param context the context
 * @param os output stream
 */
public SAMRecordWriter(final TaskAttemptContext context,final DataOutputStream out){
  this.context=context;
  this.out=out;
}","/** 
 * Public constructor.
 * @param context the context
 * @param out data output stream
 */
public SAMRecordWriter(final TaskAttemptContext context,final DataOutputStream out){
  this.context=context;
  this.out=out;
}",0.981651376146789
141111,"/** 
 * Create the prefix of a related task file.
 * @param context the context
 * @return a string with the prefix of the task file
 */
public String getTaskFilePrefix(){
  return getStep().getId() + ""String_Node_Str"" + getId();
}","/** 
 * Create the prefix of a related task file.
 * @return a string with the prefix of the task file
 */
public String getTaskFilePrefix(){
  return getStep().getId() + ""String_Node_Str"" + getId();
}",0.9305555555555556
141112,"/** 
 * Constructor a new galaxy tool executor.
 * @param context the context
 * @param interpreter the interpreter to use
 * @param commandLine the command line
 * @param toolName the tool name
 * @param toolVersion the tool version
 */
public ToolExecutor(final StepContext context,final ToolData toolData,final String commandLine){
  checkNotNull(commandLine,""String_Node_Str"");
  checkNotNull(context,""String_Node_Str"");
  this.toolData=toolData;
  this.commandLine=commandLine.trim();
  this.stepContext=context;
  execute();
}","/** 
 * Constructor a new galaxy tool executor.
 * @param context the context
 * @param toolData the tool data
 * @param commandLine the command line
 */
public ToolExecutor(final StepContext context,final ToolData toolData,final String commandLine){
  checkNotNull(commandLine,""String_Node_Str"");
  checkNotNull(context,""String_Node_Str"");
  this.toolData=toolData;
  this.commandLine=commandLine.trim();
  this.stepContext=context;
  execute();
}",0.8693877551020408
141113,"/** 
 * Install the requirement.
 * @throw EoulsanException if the requirement cannot be installed
 */
void install(Progress progress) throws EoulsanException ;","/** 
 * Install the requirement.
 * @throws EoulsanException if the requirement cannot be installed
 */
void install(Progress progress) throws EoulsanException ;",0.9968847352024922
141114,"/** 
 * Add a resource paths.
 * @param resourcePath the resource path to add
 */
public void addResourcePaths(final String resourcePaths){
  checkNotNull(resourcePaths,""String_Node_Str"");
  for (  String directory : resourcePaths.split(""String_Node_Str"")) {
    directory=directory.trim();
    if (!directory.isEmpty()) {
      addResourcePath(new DataFile(directory));
    }
  }
}","/** 
 * Add a resource paths.
 * @param resourcePaths the resource path to add
 */
public void addResourcePaths(final String resourcePaths){
  checkNotNull(resourcePaths,""String_Node_Str"");
  for (  String directory : resourcePaths.split(""String_Node_Str"")) {
    directory=directory.trim();
    if (!directory.isEmpty()) {
      addResourcePath(new DataFile(directory));
    }
  }
}",0.9986928104575163
141115,"/** 
 * Load all available resources.
 * @param a list with all the loaded resources
 */
public List<S> loadAllResources();","/** 
 * Load all available resources.
 * @return a list with all the loaded resources
 */
public List<S> loadAllResources();",0.9635627530364372
141116,"@Override protected void cleanup(final Context context) throws IOException, InterruptedException {
  getLogger().info(""String_Node_Str"");
  this.samResultsParserThread.join();
  this.process.waitFor();
  this.mapper.throwMappingException();
  if (!this.mapper.isMultipleInstancesEnabled()) {
    this.lock.unlock();
  }
  writeResults(context,this.writeHeaders);
  getLogger().info(this.entriesParsed + ""String_Node_Str"" + this.mapper.getMapperName()+ ""String_Node_Str"");
  removeUnusedMapperIndexes(context.getConfiguration());
  getLogger().info(""String_Node_Str"");
}","@Override protected void cleanup(final Context context) throws IOException, InterruptedException {
  getLogger().info(""String_Node_Str"");
  this.process.closeEntriesWriter();
  this.samResultsParserThread.join();
  this.process.waitFor();
  this.mapper.throwMappingException();
  if (!this.mapper.isMultipleInstancesEnabled()) {
    this.lock.unlock();
  }
  writeResults(context,this.writeHeaders);
  getLogger().info(this.entriesParsed + ""String_Node_Str"" + this.mapper.getMapperName()+ ""String_Node_Str"");
  removeUnusedMapperIndexes(context.getConfiguration());
  getLogger().info(""String_Node_Str"");
}",0.9685106382978724
141117,"@Override protected void setup(final Context context) throws IOException {
  EoulsanLogger.initConsoleHandler();
  getLogger().info(""String_Node_Str"");
  final Configuration conf=context.getConfiguration();
  if (!EoulsanRuntime.isRuntime()) {
    HadoopEoulsanRuntime.newEoulsanRuntime(conf);
  }
  final String mapperName=conf.get(MAPPER_NAME_KEY);
  if (mapperName == null) {
    throw new IOException(""String_Node_Str"");
  }
  this.mapper=SequenceReadsMapperService.getInstance().newService(mapperName);
  this.mapper.setMapperVersionToUse(conf.get(MAPPER_VERSION_KEY));
  this.mapper.setMapperFlavorToUse(conf.get(MAPPER_FLAVOR_KEY));
  final String counterGroup=conf.get(CommonHadoop.COUNTER_GROUP_KEY);
  if (counterGroup != null) {
    this.counterGroup=counterGroup;
  }
  final boolean pairedEnd=Boolean.parseBoolean(conf.get(PAIR_END_KEY));
  final FastqFormat fastqFormat=FastqFormat.getFormatFromName(conf.get(FASTQ_FORMAT_KEY,""String_Node_Str"" + EoulsanRuntime.getSettings().getDefaultFastqFormat()));
  final URI[] localCacheFiles=context.getCacheFiles();
  if (localCacheFiles == null || localCacheFiles.length == 0) {
    throw new IOException(""String_Node_Str"");
  }
  if (localCacheFiles.length > 1) {
    throw new IOException(""String_Node_Str"");
  }
  getLogger().info(""String_Node_Str"" + localCacheFiles[0]);
  final DataFile archiveIndexFile=new DataFile(localCacheFiles[0].toString());
  getLogger().info(""String_Node_Str"" + archiveIndexFile);
  this.mapperIndexDir=new File(context.getConfiguration().get(HADOOP_TEMP_DIR) + ""String_Node_Str"" + MAPPER_INDEX_DIR_PREFIX+ this.mapper.getMapperName()+ ""String_Node_Str""+ conf.get(INDEX_CHECKSUM_KEY));
  getLogger().info(""String_Node_Str"" + mapperIndexDir);
  this.mapper.setFastqFormat(fastqFormat);
  getLogger().info(""String_Node_Str"" + fastqFormat);
  this.lock=new ZooKeeperLocker(conf.get(ZOOKEEPER_CONNECT_STRING_KEY),Integer.parseInt(conf.get(ZOOKEEPER_SESSION_TIMEOUT_KEY)),""String_Node_Str"" + InetAddress.getLocalHost().getHostName(),""String_Node_Str"");
  final String mapperArguments=unDoubleQuotes(conf.get(MAPPER_ARGS_KEY));
  if (mapperArguments != null) {
    this.mapper.setMapperArguments(mapperArguments);
  }
  int mapperThreads=Integer.parseInt(conf.get(MAPPER_THREADS_KEY,""String_Node_Str"" + Runtime.getRuntime().availableProcessors()));
  if (mapperThreads > Runtime.getRuntime().availableProcessors() || mapperThreads < 1) {
    mapperThreads=Runtime.getRuntime().availableProcessors();
  }
  this.mapper.setMultipleInstancesEnabled(true);
  if (!this.mapper.isMultipleInstancesEnabled()) {
    this.mapper.setThreadsNumber(mapperThreads);
  }
  getLogger().info(""String_Node_Str"" + this.mapper.getMapperName() + ""String_Node_Str""+ mapperThreads+ ""String_Node_Str"");
  final File tempDir=new File(conf.get(HADOOP_TEMP_DIR));
  if (!tempDir.exists()) {
    getLogger().fine(""String_Node_Str"" + tempDir.getAbsolutePath());
    if (!tempDir.mkdirs()) {
      throw new IOException(""String_Node_Str"" + tempDir);
    }
  }
  this.mapper.setTempDirectory(tempDir);
  updateLastUsedMapperIndex(this.mapperIndexDir);
  context.setStatus(""String_Node_Str"" + this.mapper.getMapperName());
  ProcessUtils.waitRandom(5000);
  this.lock.lock();
  this.mapper.init(archiveIndexFile.open(),this.mapperIndexDir,new HadoopReporter(context),this.counterGroup);
  if (pairedEnd) {
    this.process=this.mapper.mapPE();
  }
 else {
    this.process=this.mapper.mapSE();
  }
  if (this.mapper.isMultipleInstancesEnabled()) {
    this.lock.unlock();
  }
 else {
    waitFreeJVM(context);
  }
  this.writeHeaders=context.getTaskAttemptID().getTaskID().getId() == 0;
  this.samResultsParserThread=startParseSAMResultsThread(this.process);
  context.setStatus(""String_Node_Str"" + this.mapper.getMapperName());
  getLogger().info(""String_Node_Str"");
}","@Override protected void setup(final Context context) throws IOException {
  EoulsanLogger.initConsoleHandler();
  getLogger().info(""String_Node_Str"");
  final Configuration conf=context.getConfiguration();
  if (!EoulsanRuntime.isRuntime()) {
    HadoopEoulsanRuntime.newEoulsanRuntime(conf);
  }
  final String mapperName=conf.get(MAPPER_NAME_KEY);
  if (mapperName == null) {
    throw new IOException(""String_Node_Str"");
  }
  this.mapper=SequenceReadsMapperService.getInstance().newService(mapperName);
  this.mapper.setMapperVersionToUse(conf.get(MAPPER_VERSION_KEY));
  this.mapper.setMapperFlavorToUse(conf.get(MAPPER_FLAVOR_KEY));
  final String counterGroup=conf.get(CommonHadoop.COUNTER_GROUP_KEY);
  if (counterGroup != null) {
    this.counterGroup=counterGroup;
  }
  final boolean pairedEnd=Boolean.parseBoolean(conf.get(PAIR_END_KEY));
  final FastqFormat fastqFormat=FastqFormat.getFormatFromName(conf.get(FASTQ_FORMAT_KEY,""String_Node_Str"" + EoulsanRuntime.getSettings().getDefaultFastqFormat()));
  final URI[] localCacheFiles=context.getCacheFiles();
  if (localCacheFiles == null || localCacheFiles.length == 0) {
    throw new IOException(""String_Node_Str"");
  }
  if (localCacheFiles.length > 1) {
    throw new IOException(""String_Node_Str"");
  }
  getLogger().info(""String_Node_Str"" + localCacheFiles[0]);
  final DataFile archiveIndexFile=new DataFile(localCacheFiles[0].toString());
  getLogger().info(""String_Node_Str"" + archiveIndexFile);
  this.mapperIndexDir=new File(context.getConfiguration().get(HADOOP_TEMP_DIR) + ""String_Node_Str"" + MAPPER_INDEX_DIR_PREFIX+ this.mapper.getMapperName()+ ""String_Node_Str""+ conf.get(INDEX_CHECKSUM_KEY));
  getLogger().info(""String_Node_Str"" + mapperIndexDir);
  this.mapper.setFastqFormat(fastqFormat);
  getLogger().info(""String_Node_Str"" + fastqFormat);
  this.lock=new ZooKeeperLocker(conf.get(ZOOKEEPER_CONNECT_STRING_KEY),Integer.parseInt(conf.get(ZOOKEEPER_SESSION_TIMEOUT_KEY)),""String_Node_Str"" + InetAddress.getLocalHost().getHostName(),""String_Node_Str"");
  final String mapperArguments=unDoubleQuotes(conf.get(MAPPER_ARGS_KEY));
  if (mapperArguments != null) {
    this.mapper.setMapperArguments(mapperArguments);
  }
  int mapperThreads=Integer.parseInt(conf.get(MAPPER_THREADS_KEY,""String_Node_Str"" + Runtime.getRuntime().availableProcessors()));
  if (mapperThreads > Runtime.getRuntime().availableProcessors() || mapperThreads < 1) {
    mapperThreads=Runtime.getRuntime().availableProcessors();
  }
  if (!this.mapper.isMultipleInstancesEnabled()) {
    this.mapper.setThreadsNumber(mapperThreads);
  }
 else {
    this.mapper.setThreadsNumber(1);
  }
  getLogger().info(""String_Node_Str"" + this.mapper.getMapperName() + ""String_Node_Str""+ mapperThreads+ ""String_Node_Str"");
  final File tempDir=new File(conf.get(HADOOP_TEMP_DIR));
  if (!tempDir.exists()) {
    getLogger().fine(""String_Node_Str"" + tempDir.getAbsolutePath());
    if (!tempDir.mkdirs()) {
      throw new IOException(""String_Node_Str"" + tempDir);
    }
  }
  this.mapper.setTempDirectory(tempDir);
  updateLastUsedMapperIndex(this.mapperIndexDir);
  context.setStatus(""String_Node_Str"");
  ProcessUtils.waitRandom(5000);
  this.lock.lock();
  this.mapper.init(archiveIndexFile.open(),this.mapperIndexDir,new HadoopReporter(context),this.counterGroup);
  if (this.mapper.isMultipleInstancesEnabled()) {
    this.lock.unlock();
  }
 else {
    context.setStatus(""String_Node_Str"" + this.mapper.getMapperName());
    waitFreeJVM(context);
  }
  if (pairedEnd) {
    this.process=this.mapper.mapPE();
  }
 else {
    this.process=this.mapper.mapSE();
  }
  this.writeHeaders=context.getTaskAttemptID().getTaskID().getId() == 0;
  this.samResultsParserThread=startParseSAMResultsThread(this.process);
  context.setStatus(""String_Node_Str"" + this.mapper.getMapperName());
  getLogger().info(""String_Node_Str"");
}",0.9247395833333332
141118,"@Override public List<S> loadResources(final String resourceName){
  checkNotNull(resourceName,""String_Node_Str"");
  if (!this.resources.containsKey(resourceName)) {
    return Collections.emptyList();
  }
  final List<S> result=new ArrayList<>();
  for (  String resourcePath : this.resources.get(resourceName)) {
    try {
      result.add(load(getResourceAsStream(resourcePath)));
    }
 catch (    IOException|EoulsanException e) {
      throw new ServiceConfigurationError(e);
    }
  }
  return Collections.unmodifiableList(result);
}","@Override public List<S> loadResources(final String resourceName){
  checkNotNull(resourceName,""String_Node_Str"");
  if (!this.resources.containsKey(resourceName)) {
    return Collections.emptyList();
  }
  final List<S> result=new ArrayList<>();
  for (  String resourcePath : this.resources.get(resourceName)) {
    try {
      result.add(load(getResourceAsStream(resourcePath)));
    }
 catch (    IOException|EoulsanException e) {
      throw new ServiceConfigurationError(""String_Node_Str"",e);
    }
  }
  return Collections.unmodifiableList(result);
}",0.9836065573770492
141119,"@Override public List<S> loadAllResources(){
  final List<S> result=new ArrayList<>();
  for (  String resourcePath : this.resources.values()) {
    try {
      result.add(load(getResourceAsStream(resourcePath)));
    }
 catch (    IOException|EoulsanException e) {
      throw new ServiceConfigurationError(e);
    }
  }
  return Collections.unmodifiableList(result);
}","@Override public List<S> loadAllResources(){
  final List<S> result=new ArrayList<>();
  for (  String resourcePath : this.resources.values()) {
    try {
      result.add(load(getResourceAsStream(resourcePath)));
    }
 catch (    IOException|EoulsanException e) {
      throw new ServiceConfigurationError(""String_Node_Str"",e);
    }
  }
  return Collections.unmodifiableList(result);
}",0.9762532981530344
141120,"@Override public void reload(){
  try {
    for (    String filename : ServiceListLoader.load(this.clazz.getName())) {
      final String resourcePath=this.resourceBasePath + filename;
      getLogger().fine(""String_Node_Str"" + this.clazz.getSimpleName() + ""String_Node_Str""+ filename+ ""String_Node_Str"");
      final S resource=load(getResourceAsStream(resourcePath));
      if (resource == null) {
        throw new EoulsanException(""String_Node_Str"" + resourcePath);
      }
      final String resourceName=getResourceName(resource);
      if (resourceName == null) {
        throw new EoulsanException(""String_Node_Str"" + resource);
      }
      addResource(resourceName,resourcePath);
    }
  }
 catch (  IOException|EoulsanException e) {
    throw new ServiceConfigurationError(e);
  }
}","@Override public void reload(){
  try {
    for (    String filename : ServiceListLoader.load(this.clazz.getName())) {
      final String resourcePath=this.resourceBasePath + filename;
      getLogger().fine(""String_Node_Str"" + this.clazz.getSimpleName() + ""String_Node_Str""+ filename+ ""String_Node_Str"");
      final S resource=load(getResourceAsStream(resourcePath));
      if (resource == null) {
        throw new EoulsanException(""String_Node_Str"" + resourcePath);
      }
      final String resourceName=getResourceName(resource);
      if (resourceName == null) {
        throw new EoulsanException(""String_Node_Str"" + resource);
      }
      addResource(resourceName,resourcePath);
    }
  }
 catch (  IOException|EoulsanException e) {
    throw new ServiceConfigurationError(""String_Node_Str"",e);
  }
}",0.9887920298879204
141121,"@Override public void reload(){
  if (this.directories.isEmpty()) {
    return;
  }
  try {
    for (    DataFile directory : this.directories) {
      if (!directory.exists()) {
        return;
      }
      for (      String filename : findResourcePaths(directory)) {
        getLogger().fine(""String_Node_Str"" + this.clazz.getSimpleName() + ""String_Node_Str""+ filename+ ""String_Node_Str"");
        final DataFile file=new DataFile(directory,filename);
        final S resource=load(file.open());
        if (resource == null) {
          throw new EoulsanException(""String_Node_Str"" + file);
        }
        final String resourceName=getResourceName(resource);
        if (resourceName == null) {
          throw new EoulsanException(""String_Node_Str"" + resource);
        }
        addResource(resourceName,file.getSource());
      }
    }
  }
 catch (  IOException|EoulsanException e) {
    throw new ServiceConfigurationError(e);
  }
}","@Override public void reload(){
  if (this.directories.isEmpty()) {
    return;
  }
  try {
    for (    DataFile directory : this.directories) {
      if (!directory.exists()) {
        return;
      }
      for (      String filename : findResourcePaths(directory)) {
        getLogger().fine(""String_Node_Str"" + this.clazz.getSimpleName() + ""String_Node_Str""+ filename+ ""String_Node_Str"");
        final DataFile file=new DataFile(directory,filename);
        final S resource=load(file.open());
        if (resource == null) {
          throw new EoulsanException(""String_Node_Str"" + file);
        }
        final String resourceName=getResourceName(resource);
        if (resourceName == null) {
          throw new EoulsanException(""String_Node_Str"" + resource);
        }
        addResource(resourceName,file.getSource());
      }
    }
  }
 catch (  IOException|EoulsanException e) {
    throw new ServiceConfigurationError(""String_Node_Str"",e);
  }
}",0.990546218487395
141122,"@Override public StepResult execute(final StepContext context,final StepStatus status){
  final Data inData=context.getInputData(this.inputFormat);
  final Data outData=context.getOutputData(DataFormats.FASTQC_REPORT_HTML,inData);
  final DataFile inFile;
  if (inData.getFormat().getMaxFilesCount() > 1) {
    inFile=inData.getDataFile(0);
  }
 else {
    inFile=inData.getDataFile();
  }
  final DataFile reportFile=outData.getDataFile();
  SequenceFile seqFile=null;
  try {
    seqFile=SequenceFactory.getSequenceFile(inFile.toFile());
  }
 catch (  SequenceFormatException|IOException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
  final OverRepresentedSeqs os=new OverRepresentedSeqs();
  final List<AbstractQCModule> modules=Lists.newArrayList(new BasicStats(),new PerBaseQualityScores(),new PerTileQualityScores(),new PerSequenceQualityScores(),new PerBaseSequenceContent(),new PerSequenceGCContent(),new NContent(),new SequenceLengthDistribution(),os.duplicationLevelModule(),os,new AdapterContent(),new KmerContent());
  try {
    processSequences(modules,seqFile);
    createReport(modules,seqFile,reportFile.toFile());
    status.setDescription(""String_Node_Str"" + inData.getDataFile(0).toFile().getAbsolutePath() + ""String_Node_Str""+ reportFile.getName()+ ""String_Node_Str"");
    modules.clear();
    return status.createStepResult();
  }
 catch (  final SequenceFormatException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
catch (  final IOException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
catch (  final XMLStreamException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
}","@Override public StepResult execute(final StepContext context,final StepStatus status){
  final Data inData=context.getInputData(this.inputFormat);
  final Data outData=context.getOutputData(DataFormats.FASTQC_REPORT_HTML,inData);
  final DataFile inFile;
  if (inData.getFormat().getMaxFilesCount() > 1) {
    inFile=inData.getDataFile(0);
  }
 else {
    inFile=inData.getDataFile();
  }
  final DataFile reportFile=outData.getDataFile();
  SequenceFile seqFile=null;
  try {
    seqFile=SequenceFactory.getSequenceFile(inFile.toFile());
  }
 catch (  SequenceFormatException|IOException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
  final OverRepresentedSeqs os=new OverRepresentedSeqs();
  final List<AbstractQCModule> modules=Lists.newArrayList(new BasicStats(),new PerBaseQualityScores(),new PerTileQualityScores(),new PerSequenceQualityScores(),new PerBaseSequenceContent(),new PerSequenceGCContent(),new NContent(),new SequenceLengthDistribution(),os.duplicationLevelModule(),os,new AdapterContent(),new KmerContent());
  try {
    processSequences(modules,seqFile);
    createReport(modules,seqFile,reportFile.toFile());
    status.setDescription(""String_Node_Str"" + inFile + ""String_Node_Str""+ reportFile.getName()+ ""String_Node_Str"");
    modules.clear();
    return status.createStepResult();
  }
 catch (  final SequenceFormatException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
catch (  final IOException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
catch (  final XMLStreamException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
}",0.9854651162790696
141123,"@Override public InputPorts getInputPorts(){
  final InputPortsBuilder builder=new InputPortsBuilder();
  if (this.inputFormat == DataFormats.READS_FASTQ) {
    builder.addPort(""String_Node_Str"",DataFormats.READS_FASTQ);
  }
 else {
    builder.addPort(""String_Node_Str"",DataFormats.MAPPER_RESULTS_SAM);
  }
  return builder.create();
}","@Override public InputPorts getInputPorts(){
  final InputPortsBuilder builder=new InputPortsBuilder();
  if (this.inputFormat == DataFormats.READS_FASTQ) {
    builder.addPort(DEFAULT_SINGLE_INPUT_PORT_NAME,DataFormats.READS_FASTQ);
  }
 else {
    builder.addPort(DEFAULT_SINGLE_INPUT_PORT_NAME,DataFormats.MAPPER_RESULTS_SAM);
  }
  return builder.create();
}",0.8653295128939829
141124,"@Override public StepResult execute(final StepContext context,final StepStatus status){
  final Data inData=context.getInputData(this.inputFormat);
  final Data outData=context.getOutputData(DataFormats.FASTQC_REPORT_HTML,inData);
  final DataFile inFile=inData.getDataFile(0);
  final DataFile reportFile=outData.getDataFile();
  SequenceFile seqFile=null;
  try {
    seqFile=SequenceFactory.getSequenceFile(inFile.toFile());
  }
 catch (  SequenceFormatException|IOException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
  final OverRepresentedSeqs os=new OverRepresentedSeqs();
  final List<AbstractQCModule> modules=Lists.newArrayList(new BasicStats(),new PerBaseQualityScores(),new PerTileQualityScores(),new PerSequenceQualityScores(),new PerBaseSequenceContent(),new PerSequenceGCContent(),new NContent(),new SequenceLengthDistribution(),os.duplicationLevelModule(),os,new AdapterContent(),new KmerContent());
  try {
    processSequences(modules,seqFile);
    createReport(modules,seqFile,reportFile.toFile());
    status.setDescription(""String_Node_Str"" + inData.getDataFile(0).toFile().getAbsolutePath() + ""String_Node_Str""+ reportFile.getName()+ ""String_Node_Str"");
    modules.clear();
    return status.createStepResult();
  }
 catch (  final SequenceFormatException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
catch (  final IOException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
catch (  final XMLStreamException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
}","@Override public StepResult execute(final StepContext context,final StepStatus status){
  final Data inData=context.getInputData(this.inputFormat);
  final Data outData=context.getOutputData(DataFormats.FASTQC_REPORT_HTML,inData);
  final DataFile inFile;
  if (inData.getFormat().getMaxFilesCount() > 1) {
    inFile=inData.getDataFile(0);
  }
 else {
    inFile=inData.getDataFile();
  }
  final DataFile reportFile=outData.getDataFile();
  SequenceFile seqFile=null;
  try {
    seqFile=SequenceFactory.getSequenceFile(inFile.toFile());
  }
 catch (  SequenceFormatException|IOException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
  final OverRepresentedSeqs os=new OverRepresentedSeqs();
  final List<AbstractQCModule> modules=Lists.newArrayList(new BasicStats(),new PerBaseQualityScores(),new PerTileQualityScores(),new PerSequenceQualityScores(),new PerBaseSequenceContent(),new PerSequenceGCContent(),new NContent(),new SequenceLengthDistribution(),os.duplicationLevelModule(),os,new AdapterContent(),new KmerContent());
  try {
    processSequences(modules,seqFile);
    createReport(modules,seqFile,reportFile.toFile());
    status.setDescription(""String_Node_Str"" + inData.getDataFile(0).toFile().getAbsolutePath() + ""String_Node_Str""+ reportFile.getName()+ ""String_Node_Str"");
    modules.clear();
    return status.createStepResult();
  }
 catch (  final SequenceFormatException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
catch (  final IOException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
catch (  final XMLStreamException e) {
    return status.createStepResult(e,""String_Node_Str"" + e.getMessage());
  }
}",0.9667655786350148
141125,"/** 
 * Set the Docker URI.
 * @param uiName the UI name
 */
public void setDockerURI(final String uri){
  this.properties.setProperty(DOCKER_URI_KEY,uri);
}","/** 
 * Set the Docker URI.
 * @param uri the Docker URI
 */
public void setDockerURI(final String uri){
  this.properties.setProperty(DOCKER_URI_KEY,uri);
}",0.9426751592356688
141126,"/** 
 * Get the value of the setting as a boolean value
 * @return the value of the setting as an integer
 * @throws EoulsanException if the value is not an integer
 */
public boolean getBooleanSetting(final String settingName){
  return Boolean.parseBoolean(getSetting(settingName));
}","/** 
 * Get the value of the setting as a boolean value
 * @return the value of the setting as an integer
 */
public boolean getBooleanSetting(final String settingName){
  return Boolean.parseBoolean(getSetting(settingName));
}",0.884990253411306
141127,"/** 
 * Add the provided alignment to a list of SAMRecord objects if this alignment has the same read name as the other alignments of the list.
 * @param alignment
 * @return true if the alignment provides is stored, i.e. if it has the sameread name as the other alignments already stored.
 * @return false if the alignment provides has not the same read name than theprevious one, so this alignment is not stored.
 */
public boolean addAlignment(final SAMRecord alignment){
  if (alignment == null) {
    return false;
  }
  final String name=parseAlignmentName(alignment);
  if (this.currentName == null) {
    this.currentName=name;
  }
 else {
    if (!this.currentName.equals(name)) {
      this.currentName=null;
      return false;
    }
  }
  this.list.add(alignment);
  return true;
}","/** 
 * Add the provided alignment to a list of SAMRecord objects if this alignment has the same read name as the other alignments of the list.
 * @param alignment SAM alignment
 * @return true if the alignment provides is stored, i.e. if it has the sameread name as the other alignments already stored.
 */
public boolean addAlignment(final SAMRecord alignment){
  if (alignment == null) {
    return false;
  }
  final String name=parseAlignmentName(alignment);
  if (this.currentName == null) {
    this.currentName=name;
  }
 else {
    if (!this.currentName.equals(name)) {
      this.currentName=null;
      return false;
    }
  }
  this.list.add(alignment);
  return true;
}",0.9057627118644068
141128,"/** 
 * Public constructor.
 * @param os output stream
 */
public ExpressionRecordWriter(final DataOutputStream out){
  this.out=out;
}","/** 
 * Public constructor.
 * @param out output stream
 */
public ExpressionRecordWriter(final DataOutputStream out){
  this.out=out;
}",0.988929889298893
141129,"/** 
 * Public constructor.
 * @param os output stream
 */
public FastqRecordWriter(DataOutputStream out){
  this.out=out;
}","/** 
 * Public constructor.
 * @param out output stream
 */
public FastqRecordWriter(DataOutputStream out){
  this.out=out;
}",0.9879518072289156
141130,"/** 
 * Public constructor.
 * @param os output stream
 */
public SAMRecordWriter(final DataOutputStream out){
  this.out=out;
}","/** 
 * Public constructor.
 * @param out output stream
 */
public SAMRecordWriter(final DataOutputStream out){
  this.out=out;
}",0.9883268482490272
141131,"/** 
 * Check if a binary bundled in the jar exists.
 * @param binaryFilename program to check
 * @return true if the binary exists
 * @throws IOException if an error occurs while installing binary
 */
protected boolean checkIfBinaryExists(final String binaryFilename){
  return BinariesInstaller.check(getSoftwarePackage(),this.mapperVersionToUse,binaryFilename);
}","/** 
 * Check if a binary bundled in the jar exists.
 * @param binaryFilename program to check
 * @return true if the binary exists
 */
protected boolean checkIfBinaryExists(final String binaryFilename){
  return BinariesInstaller.check(getSoftwarePackage(),this.mapperVersionToUse,binaryFilename);
}",0.9009009009009008
141132,"/** 
 * Get the name of a bowtie flavored binary.
 * @param binary the binary
 * @param firstFlavoredVersion first version of Bowtie to be flavored
 * @return the flavored binary name
 */
private String flavoredBinary(){
  final String flavor=getMapperFlavorToUse();
  if (flavor != null && LARGE_INDEX_FLAVOR.equals(flavor.trim().toLowerCase())) {
    return MAPPER_LARGE_INDEX_EXECUTABLE;
  }
  return MAPPER_STANDARD_EXECUTABLE;
}","/** 
 * Get the name of the flavored binary.
 * @return the flavored binary name
 */
private String flavoredBinary(){
  final String flavor=getMapperFlavorToUse();
  if (flavor != null && LARGE_INDEX_FLAVOR.equals(flavor.trim().toLowerCase())) {
    return MAPPER_LARGE_INDEX_EXECUTABLE;
  }
  return MAPPER_STANDARD_EXECUTABLE;
}",0.8597640891218873
141133,"/** 
 * Execute the step.
 * @param context Execution context
 * @param status of the step
 * @throws EoulsanException if an error occurs while executing step
 */
StepResult execute(StepContext context,StepStatus status);","/** 
 * Execute the step.
 * @param context Execution context
 * @param status of the step
 */
StepResult execute(StepContext context,StepStatus status);",0.8181818181818182
141134,"/** 
 * Create a step for a standard step.
 * @param workflow workflow of the step
 * @param id identifier of the step
 * @param stepName Step name
 * @param stepVrsion step version
 * @param skip true to skip execution of the step
 * @param parameters parameters of the step
 * @throws EoulsanException id an error occurs while creating the step
 */
public CommandWorkflowStep(final AbstractWorkflow workflow,final String id,final String stepName,final String stepVersion,final Set<Parameter> parameters,final boolean skip,final boolean copyResultsToOutput) throws EoulsanException {
  super(workflow,id,stepName,stepVersion,skip,copyResultsToOutput,parameters);
}","/** 
 * Create a step for a standard step.
 * @param workflow workflow of the step
 * @param id identifier of the step
 * @param stepName Step name
 * @param stepVersion step version
 * @param skip true to skip execution of the step
 * @param parameters parameters of the step
 * @throws EoulsanException id an error occurs while creating the step
 */
public CommandWorkflowStep(final AbstractWorkflow workflow,final String id,final String stepName,final String stepVersion,final Set<Parameter> parameters,final boolean skip,final boolean copyResultsToOutput) throws EoulsanException {
  super(workflow,id,stepName,stepVersion,skip,copyResultsToOutput,parameters);
}",0.9992486851990984
141135,"/** 
 * Set the metadata of a data object from the information of another data object.
 * @param data the data object
 * @param dataSourceOfMetadata data source of metadata
 * @param sample the sample
 */
public static void setDataMetadata(final Data data,final Data dataSourceOfMetadata){
  checkNotNull(data,""String_Node_Str"");
  checkNotNull(dataSourceOfMetadata,""String_Node_Str"");
  if (data.isList()) {
    return;
  }
  final DataMetadata metadata=data.getMetadata();
  if (dataSourceOfMetadata.isList()) {
    for (    Data d : dataSourceOfMetadata.getListElements()) {
      metadata.set(d.getMetadata());
    }
  }
 else {
    metadata.set(dataSourceOfMetadata.getMetadata());
  }
}","/** 
 * Set the metadata of a data object from the information of another data object.
 * @param data the data object
 * @param dataSourceOfMetadata data source of metadata
 */
public static void setDataMetadata(final Data data,final Data dataSourceOfMetadata){
  checkNotNull(data,""String_Node_Str"");
  checkNotNull(dataSourceOfMetadata,""String_Node_Str"");
  if (data.isList()) {
    return;
  }
  final DataMetadata metadata=data.getMetadata();
  if (dataSourceOfMetadata.isList()) {
    for (    Data d : dataSourceOfMetadata.getListElements()) {
      metadata.set(d.getMetadata());
    }
  }
 else {
    metadata.set(dataSourceOfMetadata.getMetadata());
  }
}",0.9793510324483776
141136,"/** 
 * Get a DataFormat from its alias.
 * @param dataFormatAlias the name of the DataFormat to get
 * @return a DataFormat if found or null
 */
public DataFormat getDataFormatFromNameOrAlias(final String name){
  DataFormat result=getDataFormatFromName(name);
  return result != null ? result : getDataFormatFromAlias(name);
}","/** 
 * Get a DataFormat from its alias.
 * @param name the name of the DataFormat to get
 * @return a DataFormat if found or null
 */
public DataFormat getDataFormatFromNameOrAlias(final String name){
  DataFormat result=getDataFormatFromName(name);
  return result != null ? result : getDataFormatFromAlias(name);
}",0.9705426356589149
141137,"/** 
 * Set the project name
 * @param experiment
 */
void setExperiment(String experiment);","/** 
 * Set the project name
 * @param experiment the name of the experiment
 */
void setExperiment(String experiment);",0.8720379146919431
141138,"/** 
 * Set the UUID of the sample.
 * @param uuid
 */
void setUUID(final String uuid);","/** 
 * Set the UUID of the sample.
 * @param uuid The UUID of the sample
 */
void setUUID(final String uuid);",0.883248730964467
141139,"/** 
 * Create a bzip2 input stream.
 * @param is
 * @return
 * @throws IOException
 */
public static InputStream createBZip2InputStream(final InputStream is) throws IOException {
  return new BZip2CompressorInputStream(is);
}","/** 
 * Create a bzip2 input stream.
 * @param is input stream
 * @return an uncompressed input stream
 * @throws IOException if an error occurs while creating the input stream
 */
public static InputStream createBZip2InputStream(final InputStream is) throws IOException {
  return new BZip2CompressorInputStream(is);
}",0.8293577981651377
141140,"/** 
 * Create a bzip2 input stream.
 * @param is
 * @return
 * @throws IOException
 */
public static InputStream createBZip2InputStream(final InputStream is) throws IOException {
  return new BZip2Codec().createInputStream(is);
}","/** 
 * Create a bzip2 input stream.
 * @param is input stream
 * @return an uncompressed input stream
 * @throws IOException if an error occurs while creating the input stream
 */
public static InputStream createBZip2InputStream(final InputStream is) throws IOException {
  return new BZip2Codec().createInputStream(is);
}",0.8318264014466547
141141,"/** 
 * Create report retrieve by global tests logger.
 * @param duration duration of execution
 * @return report text
 */
private void updateLogger(final String duration){
  String txt=""String_Node_Str"";
  if (this.nothingToDo) {
    txt+=""String_Node_Str"" + this.it.getTestName();
  }
 else {
    txt+=(isSuccess() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + this.it.getTestName()+ ((isGeneratedData()) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ duration;
    if (!isSuccess()) {
      txt+=createExceptionText(false);
    }
  }
  getLogger().info(txt);
}","/** 
 * Create report retrieve by global tests logger.
 * @param duration duration of execution
 */
private void updateLogger(final String duration){
  String txt=""String_Node_Str"";
  if (this.nothingToDo) {
    txt+=""String_Node_Str"" + this.it.getTestName();
  }
 else {
    txt+=(isSuccess() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + this.it.getTestName()+ ((isGeneratedData()) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ duration;
    if (!isSuccess()) {
      txt+=createExceptionText(false);
    }
  }
  getLogger().info(txt);
}",0.192274678111588
141142,"/** 
 * Create the path to the serialized annotation index.
 * @param context Eoulsan context
 * @param featureAnnotationData feature annotation data
 * @return an Hadoop path with the path of the serialized annotation
 * @throws IOException
 */
private static Path getAnnotationIndexSerializedPath(final DataFile featureAnnotationFile) throws IOException {
  final DataFile file=new DataFile(featureAnnotationFile.getParent(),featureAnnotationFile.getBasename() + SERIALIZATION_EXTENSION);
  return new Path(file.getSource());
}","/** 
 * Create the path to the serialized annotation index.
 * @param featureAnnotationFile feature annotation file
 * @return an Hadoop path with the path of the serialized annotation
 * @throws IOException if an error occurs while getting the path
 */
private static Path getAnnotationIndexSerializedPath(final DataFile featureAnnotationFile) throws IOException {
  final DataFile file=new DataFile(featureAnnotationFile.getParent(),featureAnnotationFile.getBasename() + SERIALIZATION_EXTENSION);
  return new Path(file.getSource());
}",0.8442776735459663
141143,"/** 
 * @param context Eoulsan context
 * @param gffFile GFF annotation file path
 * @param featureType feature type to use
 * @param attributeId attribute id
 * @param splitAttributeValues split attribute values
 * @param stranded strand mode
 * @param genomeDescDataFile genome description DataFile
 * @param featuresIndexPath feature index output path
 * @param conf Hadoop configuration object
 * @return the feature index output path
 * @throws IOException if an error occurs while creating the feature indexfile
 * @throws BadBioEntryException if an entry of the annotation file is invalid
 * @throws EoulsanException if an error occurs with feature types and featureidentifiers
 */
private static final void createFeaturesIndex(final StepContext context,final DataFile gffFile,final String featureType,final String attributeId,final boolean splitAttributeValues,final StrandUsage stranded,final DataFile genomeDescDataFile,final Path featuresIndexPath,final Configuration conf) throws IOException, BadBioEntryException, EoulsanException {
  final GenomicArray<String> features=new GenomicArray<>();
  final GenomeDescription genomeDescription=GenomeDescription.load(genomeDescDataFile.open());
  final Map<String,Integer> counts=new HashMap<>();
  HTSeqUtils.storeAnnotation(features,gffFile.open(),featureType,stranded,attributeId,splitAttributeValues,counts);
  if (counts.size() == 0) {
    throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str"");
  }
  final File featuresIndexFile=context.getRuntime().createFileInTempDir(StringUtils.basename(gffFile.getName()) + SERIALIZATION_EXTENSION);
  features.addChromosomes(genomeDescription);
  features.save(featuresIndexFile);
  PathUtils.copyLocalFileToPath(featuresIndexFile,featuresIndexPath,conf);
  if (!featuresIndexFile.delete()) {
    getLogger().warning(""String_Node_Str"" + featuresIndexFile.getAbsolutePath());
  }
}","/** 
 * @param context Eoulsan context
 * @param gffFile GFF annotation file path
 * @param featureType feature type to use
 * @param attributeId attribute id
 * @param splitAttributeValues split attribute values
 * @param stranded strand mode
 * @param genomeDescDataFile genome description DataFile
 * @param featuresIndexPath feature index output path
 * @param conf Hadoop configuration object
 * @throws IOException if an error occurs while creating the feature indexfile
 * @throws BadBioEntryException if an entry of the annotation file is invalid
 * @throws EoulsanException if an error occurs with feature types and featureidentifiers
 */
private static final void createFeaturesIndex(final StepContext context,final DataFile gffFile,final String featureType,final String attributeId,final boolean splitAttributeValues,final StrandUsage stranded,final DataFile genomeDescDataFile,final Path featuresIndexPath,final Configuration conf) throws IOException, BadBioEntryException, EoulsanException {
  final GenomicArray<String> features=new GenomicArray<>();
  final GenomeDescription genomeDescription=GenomeDescription.load(genomeDescDataFile.open());
  final Map<String,Integer> counts=new HashMap<>();
  HTSeqUtils.storeAnnotation(features,gffFile.open(),featureType,stranded,attributeId,splitAttributeValues,counts);
  if (counts.size() == 0) {
    throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str"");
  }
  final File featuresIndexFile=context.getRuntime().createFileInTempDir(StringUtils.basename(gffFile.getName()) + SERIALIZATION_EXTENSION);
  features.addChromosomes(genomeDescription);
  features.save(featuresIndexFile);
  PathUtils.copyLocalFileToPath(featuresIndexFile,featuresIndexPath,conf);
  if (!featuresIndexFile.delete()) {
    getLogger().warning(""String_Node_Str"" + featuresIndexFile.getAbsolutePath());
  }
}",0.989133315663928
141144,"/** 
 * Convert command tag from tool file in string, variable are replace by value.
 * @param inputData the input data
 * @param outputData the output data
 * @return the string
 * @throws EoulsanException the Eoulsan exception
 * @throws IOException
 */
ToolExecutorResult execute(final StepContext context) throws EoulsanException ;","/** 
 * Convert command tag from tool file in string, variable are replace by value.
 * @param context Step context
 * @return the string
 * @throws EoulsanException the Eoulsan exception
 */
ToolExecutorResult execute(final StepContext context) throws EoulsanException ;",0.7722772277227723
141145,"/** 
 * Comparison parameters xml variables command.
 * @param toolInterpreter TODO
 * @param parametersXML the parameters xml
 * @return the map
 * @throws EoulsanException the eoulsan exception
 */
private Map<String,String> compareVariablesFromXMLToCommand() throws EoulsanException {
  final Map<String,String> results=new HashMap<>();
  for (  final String variableName : getVariableNames()) {
    if (this.variablesCommand.get(variableName) == null) {
      results.put(variableName,DEFAULT_VALUE_NULL);
    }
  }
  return Collections.unmodifiableMap(results);
}","/** 
 * Comparison parameters xml variables command.
 * @return the map
 * @throws EoulsanException the eoulsan exception
 */
private Map<String,String> compareVariablesFromXMLToCommand() throws EoulsanException {
  final Map<String,String> results=new HashMap<>();
  for (  final String variableName : getVariableNames()) {
    if (this.variablesCommand.get(variableName) == null) {
      results.put(variableName,DEFAULT_VALUE_NULL);
    }
  }
  return Collections.unmodifiableMap(results);
}",0.9303201506591338
141146,"/** 
 * Translate command xml in python.
 * @param cmdTag the content command tag.
 * @throws EoulsanException if the translation fails.
 */
private void translateCommandXMLInPython() throws EoulsanException {
  if (isCommandLineTranslate) {
    return;
  }
  this.pythonScriptWithJavaCode=translator.getTranslatedCommandInPython();
  isCommandLineTranslate=true;
}","/** 
 * Translate command xml in python.
 * @throws EoulsanException if the translation fails.
 */
private void translateCommandXMLInPython() throws EoulsanException {
  if (isCommandLineTranslate) {
    return;
  }
  this.pythonScriptWithJavaCode=translator.getTranslatedCommandInPython();
  isCommandLineTranslate=true;
}",0.938953488372093
141147,"/** 
 * Instantiates a new translator string to script Python.
 * @param string the raw command tag
 * @throws EoulsanException occurs if translation fail.
 */
TranslatorStringToPython(final String cmdTag) throws EoulsanException {
  Preconditions.checkNotNull(cmdTag,""String_Node_Str"");
  this.rawCommand=NEW_LINE.splitToList(cmdTag);
  this.variableNames=Sets.newHashSet();
  this.translatedCommand=translate();
  Preconditions.checkNotNull(translatedCommand,""String_Node_Str"");
}","/** 
 * Instantiates a new translator string to script Python.
 * @param cmdTag the raw command tag
 * @throws EoulsanException occurs if translation fail.
 */
TranslatorStringToPython(final String cmdTag) throws EoulsanException {
  Preconditions.checkNotNull(cmdTag,""String_Node_Str"");
  this.rawCommand=NEW_LINE.splitToList(cmdTag);
  this.variableNames=Sets.newHashSet();
  this.translatedCommand=translate();
  Preconditions.checkNotNull(translatedCommand,""String_Node_Str"");
}",0.9896265560165975
141148,"/** 
 * Extract parameter by name.
 * @param stepParameters
 * @return the parameter found or null.
 */
Parameter extractParameterByName(final Map<String,Parameter> stepParameters);","/** 
 * Extract parameter by name.
 * @param stepParameters step parameters
 * @return the parameter found or null.
 */
Parameter extractParameterByName(final Map<String,Parameter> stepParameters);",0.9576719576719576
141149,"/** 
 * Create the JobConf object for a sample
 * @param readsData reads data
 * @param inputFormat inputFormat
 * @param fastqFormat FASTQ format
 * @param mapperIndexData mapper index data
 * @param outData output data
 * @return a new JobConf object
 * @throws IOException
 */
private Job createJobConf(final Configuration parentConf,final StepContext context,final String dataName,final DataFile readsFile,final boolean pairedEnd,final DataFormat inputFormat,final FastqFormat fastqFormat,final DataFile mapperIndexFile,final DataFile outFile) throws IOException {
  final Configuration jobConf=new Configuration(parentConf);
  final Path inputPath=new Path(readsFile.getSource());
  jobConf.set(ReadsMapperMapper.MAPPER_NAME_KEY,getMapperName());
  jobConf.set(ReadsMapperMapper.MAPPER_VERSION_KEY,getMapperVersion());
  jobConf.set(ReadsMapperMapper.MAPPER_FLAVOR_KEY,getMapperFlavor());
  jobConf.set(ReadsMapperMapper.PAIR_END_KEY,Boolean.toString(pairedEnd));
  if (getMapperLocalThreads() < 0) {
    jobConf.set(ReadsMapperMapper.MAPPER_THREADS_KEY,""String_Node_Str"" + getMapperHadoopThreads());
  }
  if (getMapperArguments() != null) {
    jobConf.set(ReadsMapperMapper.MAPPER_ARGS_KEY,getMapperArguments());
  }
  jobConf.set(ReadsMapperMapper.FASTQ_FORMAT_KEY,""String_Node_Str"" + fastqFormat);
  jobConf.set(ReadsMapperMapper.INDEX_CHECKSUM_KEY,""String_Node_Str"" + computeZipCheckSum(mapperIndexFile,parentConf));
  jobConf.set(CommonHadoop.COUNTER_GROUP_KEY,COUNTER_GROUP);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + HADOOP_TIMEOUT);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + 1);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + getMapperHadoopMemoryRequired());
  setZooKeeperJobConfiguration(jobConf,context);
  final Job job=Job.getInstance(jobConf,""String_Node_Str"" + fastqFormat + ""String_Node_Str""+ getMapperName()+ ""String_Node_Str""+ dataName+ ""String_Node_Str""+ readsFile.getName()+ ""String_Node_Str"");
  final Path genomeIndex=new Path(mapperIndexFile.getSource());
  job.addCacheFile(genomeIndex.toUri());
  job.setJarByClass(ReadsMapperHadoopStep.class);
  FileInputFormat.addInputPath(job,inputPath);
  if (inputFormat == READS_FASTQ) {
    job.setInputFormatClass(FastqInputFormat.class);
  }
 else {
    job.setInputFormatClass(KeyValueTextInputFormat.class);
  }
  job.setMapperClass(ReadsMapperMapper.class);
  job.setOutputFormatClass(SAMOutputFormat.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  job.setNumReduceTasks(0);
  FileOutputFormat.setOutputPath(job,new Path(outFile.getSource()));
  return job;
}","/** 
 * Create the JobConf object for a sample.
 * @param parentConf Hadoop configuration
 * @param dataName data name
 * @param readsFile reads file
 * @param inputFormat inputFormat
 * @param fastqFormat FASTQ format
 * @param mapperIndexFile mapper index file
 * @param outFile output file
 * @return a new JobConf object
 * @throws IOException if an error occurs while creating the job
 */
private Job createJobConf(final Configuration parentConf,final StepContext context,final String dataName,final DataFile readsFile,final boolean pairedEnd,final DataFormat inputFormat,final FastqFormat fastqFormat,final DataFile mapperIndexFile,final DataFile outFile) throws IOException {
  final Configuration jobConf=new Configuration(parentConf);
  final Path inputPath=new Path(readsFile.getSource());
  jobConf.set(ReadsMapperMapper.MAPPER_NAME_KEY,getMapperName());
  jobConf.set(ReadsMapperMapper.MAPPER_VERSION_KEY,getMapperVersion());
  jobConf.set(ReadsMapperMapper.MAPPER_FLAVOR_KEY,getMapperFlavor());
  jobConf.set(ReadsMapperMapper.PAIR_END_KEY,Boolean.toString(pairedEnd));
  if (getMapperLocalThreads() < 0) {
    jobConf.set(ReadsMapperMapper.MAPPER_THREADS_KEY,""String_Node_Str"" + getMapperHadoopThreads());
  }
  if (getMapperArguments() != null) {
    jobConf.set(ReadsMapperMapper.MAPPER_ARGS_KEY,getMapperArguments());
  }
  jobConf.set(ReadsMapperMapper.FASTQ_FORMAT_KEY,""String_Node_Str"" + fastqFormat);
  jobConf.set(ReadsMapperMapper.INDEX_CHECKSUM_KEY,""String_Node_Str"" + computeZipCheckSum(mapperIndexFile,parentConf));
  jobConf.set(CommonHadoop.COUNTER_GROUP_KEY,COUNTER_GROUP);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + HADOOP_TIMEOUT);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + 1);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + getMapperHadoopMemoryRequired());
  setZooKeeperJobConfiguration(jobConf,context);
  final Job job=Job.getInstance(jobConf,""String_Node_Str"" + fastqFormat + ""String_Node_Str""+ getMapperName()+ ""String_Node_Str""+ dataName+ ""String_Node_Str""+ readsFile.getName()+ ""String_Node_Str"");
  final Path genomeIndex=new Path(mapperIndexFile.getSource());
  job.addCacheFile(genomeIndex.toUri());
  job.setJarByClass(ReadsMapperHadoopStep.class);
  FileInputFormat.addInputPath(job,inputPath);
  if (inputFormat == READS_FASTQ) {
    job.setInputFormatClass(FastqInputFormat.class);
  }
 else {
    job.setInputFormatClass(KeyValueTextInputFormat.class);
  }
  job.setMapperClass(ReadsMapperMapper.class);
  job.setOutputFormatClass(SAMOutputFormat.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  job.setNumReduceTasks(0);
  FileOutputFormat.setOutputPath(job,new Path(outFile.getSource()));
  return job;
}",0.9620015048908954
141150,"/** 
 * Unzip a zip file in a directory.
 * @param zipFile
 * @param outputDirectory
 * @throws IOException
 */
public static void unzip(final File zipFile,final File outputDirectory) throws IOException {
  if (zipFile == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (!(zipFile.exists() && zipFile.isFile())) {
    throw new IOException(""String_Node_Str"" + zipFile.getName() + ""String_Node_Str"");
  }
  unzip(new FileInputStream(zipFile),outputDirectory);
}","/** 
 * Unzip a zip file in a directory.
 * @param zipFile The zip file
 * @param outputDirectory The output directory
 * @throws IOException if an issue occurs while unzipping the file
 */
public static void unzip(final File zipFile,final File outputDirectory) throws IOException {
  if (zipFile == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (!(zipFile.exists() && zipFile.isFile())) {
    throw new IOException(""String_Node_Str"" + zipFile.getName() + ""String_Node_Str"");
  }
  unzip(new FileInputStream(zipFile),outputDirectory);
}",0.9241245136186772
141151,"/** 
 * Wait the completion of a collection of jobs.
 * @param jobs Collection of jobs to submit
 * @param waitTimeInMillis waiting time between 2 checks of the completion ofjobs
 * @throws IOException if an IO error occurs while waiting for jobs
 * @throws InterruptedException if an error occurs while waiting for jobs
 * @throws ClassNotFoundException if a class needed for map reduce executionis not found
 */
public static void waitForJobs(final Collection<Job> jobs,final int waitTimeInMillis) throws InterruptedException, IOException {
  if (jobs == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final int totalJobs=jobs.size();
  int completedJobs=0;
  while (completedJobs != totalJobs) {
    Thread.sleep(waitTimeInMillis);
    completedJobs=0;
    for (    Job j : jobs) {
      if (j.isComplete()) {
        completedJobs++;
      }
    }
  }
}","/** 
 * Wait the completion of a collection of jobs.
 * @param jobs Collection of jobs to submit
 * @param waitTimeInMillis waiting time between 2 checks of the completion ofjobs
 * @throws IOException if an IO error occurs while waiting for jobs
 * @throws InterruptedException if an error occurs while waiting for jobs
 */
public static void waitForJobs(final Collection<Job> jobs,final int waitTimeInMillis) throws InterruptedException, IOException {
  if (jobs == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final int totalJobs=jobs.size();
  int completedJobs=0;
  while (completedJobs != totalJobs) {
    Thread.sleep(waitTimeInMillis);
    completedJobs=0;
    for (    Job j : jobs) {
      if (j.isComplete()) {
        completedJobs++;
      }
    }
  }
}",0.9466746554823248
141152,"/** 
 * Destroy the connection to the Rserve server
 * @throws REngineException if an error occurs while deleting to Rserve
 */
void disConnect();","/** 
 * Destroy the connection to the Rserve server
 */
void disConnect();",0.6727272727272727
141153,"/** 
 * Open a file to read on Rserve server
 * @param filename
 * @return file
 * @throws REngineException
 */
public RFileInputStream openFile(final String filename) throws REngineException {
  final RConnection connection=getRConnection();
  RFileInputStream file;
  try {
    file=this.rconnection.openFile(filename);
  }
 catch (  IOException e) {
    throw new REngineException(connection,""String_Node_Str"");
  }
  return file;
}","/** 
 * Open a file to read on Rserve server
 * @param filename the filename
 * @return an input stream
 * @throws REngineException if an error occurs while creating the input stream
 */
public RFileInputStream openFile(final String filename) throws REngineException {
  final RConnection connection=getRConnection();
  RFileInputStream file;
  try {
    file=this.rconnection.openFile(filename);
  }
 catch (  IOException e) {
    throw new REngineException(connection,""String_Node_Str"");
  }
  return file;
}",0.9121693121693122
141154,"@Override public void delete(final DataFile file,final boolean recursive) throws IOException {
  final Path path=getSourceAsFile(file).toPath();
  if (new File(""String_Node_Str"").equals(path.normalize().toAbsolutePath())) {
    new IOException(""String_Node_Str"" + file);
  }
  if (!(recursive && Files.isDirectory(path,LinkOption.NOFOLLOW_LINKS))) {
    Files.delete(path);
    return;
  }
  Files.walkFileTree(path,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      Files.delete(file);
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult postVisitDirectory(    Path dir,    IOException e) throws IOException {
      Files.delete(dir);
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFileFailed(    Path file,    IOException e) throws IOException {
      throw new IOException(""String_Node_Str"" + file);
    }
  }
);
}","@Override public void delete(final DataFile file,final boolean recursive) throws IOException {
  final Path path=getSourceAsFile(file).toPath();
  if (new File(""String_Node_Str"").toPath().equals(path.normalize().toAbsolutePath())) {
    throw new IOException(""String_Node_Str"" + file);
  }
  if (!(recursive && Files.isDirectory(path,LinkOption.NOFOLLOW_LINKS))) {
    Files.delete(path);
    return;
  }
  Files.walkFileTree(path,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      Files.delete(file);
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult postVisitDirectory(    Path dir,    IOException e) throws IOException {
      Files.delete(dir);
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFileFailed(    Path file,    IOException e) throws IOException {
      throw new IOException(""String_Node_Str"" + file);
    }
  }
);
}",0.9924509310518368
141155,"/** 
 * Compute the md5 sum of a file.
 * @param file the file
 * @return a string with the md5sum of a file
 * @throws IOException if an error occurs while computing the md5sum
 */
private static final String computeMD5SumFile(File file) throws IOException {
  MessageDigest md5Digest;
  try {
    md5Digest=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    md5Digest=null;
  }
  try (InputStream is=new FileInputStream(file)){
    new DigestInputStream(is,md5Digest);
  }
   return new BigInteger(1,md5Digest.digest()).toString(16);
}","/** 
 * Compute the md5 sum of a file.
 * @param file the file
 * @return a string with the md5sum of a file
 * @throws IOException if an error occurs while computing the md5sum
 */
private static final String computeMD5SumFile(File file) throws IOException {
  MessageDigest md5Digest;
  try {
    md5Digest=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    throw new IOException(e);
  }
  try (InputStream is=new FileInputStream(file)){
    new DigestInputStream(is,md5Digest);
  }
   return new BigInteger(1,md5Digest.digest()).toString(16);
}",0.9675213675213676
141156,"@Override public String getMapperVersion(){
  try {
    final String execPath;
synchronized (SYNC) {
      execPath=install(MAPPER_EXECUTABLE);
    }
    final File tempDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tempDir.delete();
    tempDir.mkdir();
    final ProcessBuilder pb=new ProcessBuilder(execPath);
    pb.directory(tempDir);
    final Process p=pb.start();
    p.waitFor();
    final File logFile=new File(tempDir,""String_Node_Str"");
    String version=null;
    try (BufferedReader reader=Files.newReader(logFile,Globals.DEFAULT_CHARSET)){
      final String line=reader.readLine();
      if (line != null && line.indexOf('=') != -1) {
        version=line.substring(line.indexOf('=') + 1).trim();
        if (version.startsWith(""String_Node_Str"")) {
          version=version.substring(""String_Node_Str"".length());
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return null;
    }
    new File(tempDir,""String_Node_Str"").delete();
    new File(tempDir,""String_Node_Str"").delete();
    new File(tempDir,""String_Node_Str"").delete();
    logFile.delete();
    tempDir.delete();
    return version;
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
catch (  InterruptedException e) {
    e.printStackTrace();
    return null;
  }
}","@Override public String getMapperVersion(){
  try {
    final String execPath;
synchronized (SYNC) {
      execPath=install(MAPPER_EXECUTABLE);
    }
    final File tempDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    if (!(tempDir.delete() && tempDir.mkdir())) {
      EoulsanLogger.getLogger().warning(""String_Node_Str"" + tempDir);
      return null;
    }
    final ProcessBuilder pb=new ProcessBuilder(execPath);
    pb.directory(tempDir);
    final Process p=pb.start();
    p.waitFor();
    final File logFile=new File(tempDir,""String_Node_Str"");
    String version=null;
    try (BufferedReader reader=Files.newReader(logFile,Globals.DEFAULT_CHARSET)){
      final String line=reader.readLine();
      if (line != null && line.indexOf('=') != -1) {
        version=line.substring(line.indexOf('=') + 1).trim();
        if (version.startsWith(""String_Node_Str"")) {
          version=version.substring(""String_Node_Str"".length());
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return null;
    }
    new File(tempDir,""String_Node_Str"").delete();
    new File(tempDir,""String_Node_Str"").delete();
    new File(tempDir,""String_Node_Str"").delete();
    logFile.delete();
    tempDir.delete();
    return version;
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
catch (  InterruptedException e) {
    e.printStackTrace();
    return null;
  }
}",0.9586956521739132
141157,"@Override protected void clean(){
  outputFile.delete();
  unmapFile.delete();
}","@Override protected void clean(){
  if (!outputFile.delete()) {
    getLogger().warning(""String_Node_Str"" + outputFile);
  }
  if (!unmapFile.delete()) {
    getLogger().warning(""String_Node_Str"" + unmapFile);
  }
}",0.4203389830508474
141158,"private MapperProcess createMapperProcessSE(final String soapPath,final String archivePath,final File readsFile,final File outputFile,final File unmapFile,final GenomeDescription genomeDescription,final boolean fileMode) throws IOException {
  return new MapperProcess(this,fileMode,false,false){
    @Override protected List<List<String>> createCommandLines(){
      final List<String> cmd=new ArrayList<String>();
      cmd.add(soapPath);
      if (getListMapperArguments() != null)       cmd.addAll(getListMapperArguments());
      cmd.add(""String_Node_Str"");
      cmd.add(getThreadsNumber() + ""String_Node_Str"");
      cmd.add(""String_Node_Str"");
      if (fileMode)       cmd.add(readsFile.getAbsolutePath());
 else       cmd.add(getTmpInputFile1().getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(archivePath);
      cmd.add(""String_Node_Str"");
      cmd.add(outputFile.getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(unmapFile.getAbsolutePath());
      return Collections.singletonList(cmd);
    }
    @Override protected InputStream createCustomInputStream(    InputStream stdout) throws FileNotFoundException {
      return new SequenceInputStream(convertSOAP2SAM(stdout,genomeDescription,isPairedEnd()),convertFasta2SAM(new FileInputStream(unmapFile)));
    }
    @Override protected void clean(){
      outputFile.delete();
      unmapFile.delete();
    }
  }
;
}","private MapperProcess createMapperProcessSE(final String soapPath,final String archivePath,final File readsFile,final File outputFile,final File unmapFile,final GenomeDescription genomeDescription,final boolean fileMode) throws IOException {
  return new MapperProcess(this,fileMode,false,false){
    @Override protected List<List<String>> createCommandLines(){
      final List<String> cmd=new ArrayList<String>();
      cmd.add(soapPath);
      if (getListMapperArguments() != null)       cmd.addAll(getListMapperArguments());
      cmd.add(""String_Node_Str"");
      cmd.add(getThreadsNumber() + ""String_Node_Str"");
      cmd.add(""String_Node_Str"");
      if (fileMode)       cmd.add(readsFile.getAbsolutePath());
 else       cmd.add(getTmpInputFile1().getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(archivePath);
      cmd.add(""String_Node_Str"");
      cmd.add(outputFile.getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(unmapFile.getAbsolutePath());
      return Collections.singletonList(cmd);
    }
    @Override protected InputStream createCustomInputStream(    InputStream stdout) throws FileNotFoundException {
      return new SequenceInputStream(convertSOAP2SAM(stdout,genomeDescription,isPairedEnd()),convertFasta2SAM(new FileInputStream(unmapFile)));
    }
    @Override protected void clean(){
      if (!outputFile.delete()) {
        getLogger().warning(""String_Node_Str"" + outputFile);
      }
      if (!unmapFile.delete()) {
        getLogger().warning(""String_Node_Str"" + unmapFile);
      }
    }
  }
;
}",0.916414904330312
141159,"private MapperProcess createMapperProcessPE(final String soapPath,final String archivePath,final File readsFile1,final File readsFile2,final File outputFile,final File unmapFile,final File unpairedFile,final GenomeDescription genomeDescription,final boolean fileMode) throws IOException {
  return new MapperProcess(this,true,false,true){
    @Override protected List<List<String>> createCommandLines(){
      final List<String> cmd=new ArrayList<String>();
      cmd.add(soapPath);
      if (getListMapperArguments() != null)       cmd.addAll(getListMapperArguments());
      cmd.add(""String_Node_Str"");
      cmd.add(getThreadsNumber() + ""String_Node_Str"");
      cmd.add(""String_Node_Str"");
      cmd.add(readsFile1.getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(readsFile2.getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(archivePath);
      cmd.add(""String_Node_Str"");
      cmd.add(outputFile.getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(unmapFile.getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(unpairedFile.getAbsolutePath());
      return Collections.singletonList(cmd);
    }
    @Override protected InputStream createCustomInputStream(    InputStream stdout) throws FileNotFoundException {
      return new SequenceInputStream(convertSOAP2SAM(stdout,genomeDescription,isPairedEnd()),convertFasta2SAM(new FileInputStream(unmapFile)));
    }
    @Override protected void clean(){
      outputFile.delete();
      unmapFile.delete();
    }
  }
;
}","private MapperProcess createMapperProcessPE(final String soapPath,final String archivePath,final File readsFile1,final File readsFile2,final File outputFile,final File unmapFile,final File unpairedFile,final GenomeDescription genomeDescription,final boolean fileMode) throws IOException {
  return new MapperProcess(this,true,false,true){
    @Override protected List<List<String>> createCommandLines(){
      final List<String> cmd=new ArrayList<String>();
      cmd.add(soapPath);
      if (getListMapperArguments() != null)       cmd.addAll(getListMapperArguments());
      cmd.add(""String_Node_Str"");
      cmd.add(getThreadsNumber() + ""String_Node_Str"");
      cmd.add(""String_Node_Str"");
      cmd.add(readsFile1.getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(readsFile2.getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(archivePath);
      cmd.add(""String_Node_Str"");
      cmd.add(outputFile.getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(unmapFile.getAbsolutePath());
      cmd.add(""String_Node_Str"");
      cmd.add(unpairedFile.getAbsolutePath());
      return Collections.singletonList(cmd);
    }
    @Override protected InputStream createCustomInputStream(    InputStream stdout) throws FileNotFoundException {
      return new SequenceInputStream(convertSOAP2SAM(stdout,genomeDescription,isPairedEnd()),convertFasta2SAM(new FileInputStream(unmapFile)));
    }
    @Override protected void clean(){
      if (!outputFile.delete()) {
        getLogger().warning(""String_Node_Str"" + outputFile);
      }
      if (!unmapFile.delete()) {
        getLogger().warning(""String_Node_Str"" + unmapFile);
      }
    }
  }
;
}",0.9228385497365976
141160,"@Override public String getMapperVersion(){
  try {
    final String gsnapPath;
synchronized (SYNC) {
      gsnapPath=install(MAPPER_EXECUTABLE);
    }
    final String cmd=gsnapPath + ""String_Node_Str"";
    final String s=ProcessUtils.execToString(cmd);
    if (s == null)     return null;
    final String[] lines=s.split(""String_Node_Str"");
    if (lines.length == 0)     return null;
    final String[] tokens=lines[2].split(""String_Node_Str"");
    if (tokens.length == 2)     return tokens[1];
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}","@Override public String getMapperVersion(){
  try {
    final String gsnapPath;
synchronized (SYNC) {
      gsnapPath=install(MAPPER_EXECUTABLE);
    }
    final String cmd=gsnapPath + ""String_Node_Str"";
    final String s=ProcessUtils.execToString(cmd);
    final String[] lines=s.split(""String_Node_Str"");
    if (lines.length == 0)     return null;
    final String[] tokens=lines[2].split(""String_Node_Str"");
    if (tokens.length == 2)     return tokens[1];
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}",0.9673321234119784
141161,"/** 
 * Constructor.
 * @param step step related to the context
 */
TaskContext(final WorkflowContext workflowContext,final AbstractWorkflowStep step,Map<InputPort,Data> inputData,Map<OutputPort,AbstractData> outputData){
  checkNotNull(workflowContext,""String_Node_Str"");
  checkNotNull(step,""String_Node_Str"");
synchronized (this.getClass()) {
    this.id=(++instanceCounter);
  }
  this.contextName=""String_Node_Str"" + id;
  this.workflowContext=workflowContext;
  this.step=step;
  for (  Map.Entry<InputPort,Data> e : inputData.entrySet()) {
    this.inputData.put(e.getKey().getName(),e.getValue());
  }
  for (  Map.Entry<OutputPort,AbstractData> e : outputData.entrySet()) {
    this.outputData.put(e.getKey().getName(),e.getValue());
  }
}","/** 
 * Constructor.
 * @param step step related to the context
 */
TaskContext(final WorkflowContext workflowContext,final AbstractWorkflowStep step,Map<InputPort,Data> inputData,Map<OutputPort,AbstractData> outputData){
  checkNotNull(workflowContext,""String_Node_Str"");
  checkNotNull(step,""String_Node_Str"");
synchronized (TaskContext.class) {
    this.id=(++instanceCounter);
  }
  this.contextName=""String_Node_Str"" + id;
  this.workflowContext=workflowContext;
  this.step=step;
  for (  Map.Entry<InputPort,Data> e : inputData.entrySet()) {
    this.inputData.put(e.getKey().getName(),e.getValue());
  }
  for (  Map.Entry<OutputPort,AbstractData> e : outputData.entrySet()) {
    this.outputData.put(e.getKey().getName(),e.getValue());
  }
}",0.9786381842456608
141162,"/** 
 * Count the number of alignments for all the features of the annotation file.
 * @param samFile SAM file that contains alignments.
 * @param gffFile annotation file.
 * @param outFile output file.
 * @param stranded strand to consider.
 * @param overlapMode overlap mode to consider.
 * @param removeAmbiguousCases if true : ambiguous cases will be removed.
 * @param featureType annotation feature type to consider.
 * @param attributeId annotation attribute id to consider.
 * @param quiet if true : suppress progress report and warnings.
 * @param minAverageQual minimum value for alignment quality.
 * @param samOutFile output SAM file annotating each line with its assignmentto a feature or a special counter (as an optional field with tag 'XF').
 * @param reporter Reporter object.
 * @param counterGroup counter group for the Reporter object.
 * @throws EoulsanException
 * @throws IOException
 * @throws BadBioEntryException
 */
private static void countReadsInFeatures(final DataFile samFile,final DataFile gffFile,final DataFile outFile,final StrandUsage stranded,final OverlapMode overlapMode,final boolean removeAmbiguousCases,final String featureType,final String attributeId,final boolean quiet,final int minAverageQual,final DataFile samOutFile,final DataFile genomeDescFile,final Reporter reporter,String counterGroup) throws EoulsanException, IOException, BadBioEntryException {
  final GenomicArray<String> features=new GenomicArray<String>(GenomeDescription.load(genomeDescFile.open()));
  final Map<String,Integer> counts=new HashMap<>();
  final Writer writer=FileUtils.createBufferedWriter(outFile.create());
  boolean pairedEnd=false;
  HTSeqUtils.storeAnnotation(features,gffFile.open(),featureType,stranded,attributeId,counts);
  if (counts.size() == 0) {
    writer.close();
    throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str"");
  }
  List<GenomicInterval> ivSeq=new ArrayList<GenomicInterval>();
  final SAMFileReader inputSam=new SAMFileReader(samFile.open());
  pairedEnd=isPairedData(samFile.open());
  int empty=0;
  int ambiguous=0;
  int notaligned=0;
  int lowqual=0;
  int nonunique=0;
  SAMRecord sam1=null, sam2=null;
  for (  final SAMRecord samRecord : inputSam) {
    reporter.incrCounter(counterGroup,ExpressionCounters.TOTAL_ALIGNMENTS_COUNTER.counterName(),1);
    if (!pairedEnd) {
      ivSeq.clear();
      if (samRecord.getReadUnmappedFlag()) {
        notaligned++;
        continue;
      }
      if (samRecord.getAttribute(""String_Node_Str"") != null && samRecord.getIntegerAttribute(""String_Node_Str"") > 1) {
        nonunique++;
        continue;
      }
      if (samRecord.getMappingQuality() < minAverageQual) {
        lowqual++;
        continue;
      }
      ivSeq.addAll(HTSeqUtils.addIntervals(samRecord,stranded));
    }
 else {
      if (sam1 != null && sam2 != null) {
        sam1=null;
        sam2=null;
        ivSeq.clear();
      }
      if (samRecord.getFirstOfPairFlag())       sam1=samRecord;
 else       sam2=samRecord;
      if (sam1 == null || sam2 == null)       continue;
      if (!sam1.getReadName().equals(sam2.getReadName())) {
        sam1=sam2;
        sam2=null;
        continue;
      }
      if (sam1 != null && !sam1.getReadUnmappedFlag()) {
        ivSeq.addAll(HTSeqUtils.addIntervals(sam1,stranded));
      }
      if (sam2 != null && !sam2.getReadUnmappedFlag()) {
        ivSeq.addAll(HTSeqUtils.addIntervals(sam2,stranded));
      }
      if (sam1.getReadUnmappedFlag() && sam2.getReadUnmappedFlag()) {
        notaligned++;
        continue;
      }
      if ((sam1.getAttribute(""String_Node_Str"") != null && sam1.getIntegerAttribute(""String_Node_Str"") > 1) || (sam2.getAttribute(""String_Node_Str"") != null && sam2.getIntegerAttribute(""String_Node_Str"") > 1)) {
        nonunique++;
        continue;
      }
      if (sam1.getMappingQuality() < minAverageQual || sam2.getMappingQuality() < minAverageQual) {
        lowqual++;
        continue;
      }
    }
    Set<String> fs=null;
    fs=HTSeqUtils.featuresOverlapped(ivSeq,features,overlapMode,stranded);
    if (fs == null)     fs=Collections.emptySet();
switch (fs.size()) {
case 0:
      empty++;
    break;
case 1:
  final String id1=fs.iterator().next();
counts.put(id1,counts.get(id1) + 1);
break;
default :
if (removeAmbiguousCases) {
ambiguous++;
}
 else {
for (String id2 : fs) counts.put(id2,counts.get(id2) + 1);
}
break;
}
}
inputSam.close();
final List<String> keysSorted=new ArrayList<String>(counts.keySet());
Collections.sort(keysSorted);
writer.write(""String_Node_Str"");
for (String key : keysSorted) {
writer.write(key + ""String_Node_Str"" + counts.get(key)+ ""String_Node_Str"");
}
reporter.incrCounter(counterGroup,ExpressionCounters.EMPTY_ALIGNMENTS_COUNTER.counterName(),empty);
reporter.incrCounter(counterGroup,ExpressionCounters.AMBIGUOUS_ALIGNMENTS_COUNTER.counterName(),ambiguous);
reporter.incrCounter(counterGroup,ExpressionCounters.LOW_QUAL_ALIGNMENTS_COUNTER.counterName(),lowqual);
reporter.incrCounter(counterGroup,ExpressionCounters.NOT_ALIGNED_ALIGNMENTS_COUNTER.counterName(),notaligned);
reporter.incrCounter(counterGroup,ExpressionCounters.NOT_UNIQUE_ALIGNMENTS_COUNTER.counterName(),nonunique);
reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),empty + ambiguous + lowqual+ notaligned+ nonunique);
writer.close();
}","/** 
 * Count the number of alignments for all the features of the annotation file.
 * @param samFile SAM file that contains alignments.
 * @param gffFile annotation file.
 * @param outFile output file.
 * @param stranded strand to consider.
 * @param overlapMode overlap mode to consider.
 * @param removeAmbiguousCases if true : ambiguous cases will be removed.
 * @param featureType annotation feature type to consider.
 * @param attributeId annotation attribute id to consider.
 * @param quiet if true : suppress progress report and warnings.
 * @param minAverageQual minimum value for alignment quality.
 * @param samOutFile output SAM file annotating each line with its assignmentto a feature or a special counter (as an optional field with tag 'XF').
 * @param reporter Reporter object.
 * @param counterGroup counter group for the Reporter object.
 * @throws EoulsanException
 * @throws IOException
 * @throws BadBioEntryException
 */
private static void countReadsInFeatures(final DataFile samFile,final DataFile gffFile,final DataFile outFile,final StrandUsage stranded,final OverlapMode overlapMode,final boolean removeAmbiguousCases,final String featureType,final String attributeId,final boolean quiet,final int minAverageQual,final DataFile samOutFile,final DataFile genomeDescFile,final Reporter reporter,String counterGroup) throws EoulsanException, IOException, BadBioEntryException {
  final GenomicArray<String> features=new GenomicArray<String>(GenomeDescription.load(genomeDescFile.open()));
  final Map<String,Integer> counts=new HashMap<>();
  final Writer writer=FileUtils.createBufferedWriter(outFile.create());
  boolean pairedEnd=false;
  HTSeqUtils.storeAnnotation(features,gffFile.open(),featureType,stranded,attributeId,counts);
  if (counts.size() == 0) {
    writer.close();
    throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str"");
  }
  List<GenomicInterval> ivSeq=new ArrayList<GenomicInterval>();
  final SAMFileReader inputSam=new SAMFileReader(samFile.open());
  pairedEnd=isPairedData(samFile.open());
  int empty=0;
  int ambiguous=0;
  int notaligned=0;
  int lowqual=0;
  int nonunique=0;
  SAMRecord sam1=null, sam2=null;
  for (  final SAMRecord samRecord : inputSam) {
    reporter.incrCounter(counterGroup,ExpressionCounters.TOTAL_ALIGNMENTS_COUNTER.counterName(),1);
    if (!pairedEnd) {
      ivSeq.clear();
      if (samRecord.getReadUnmappedFlag()) {
        notaligned++;
        continue;
      }
      if (samRecord.getAttribute(""String_Node_Str"") != null && samRecord.getIntegerAttribute(""String_Node_Str"") > 1) {
        nonunique++;
        continue;
      }
      if (samRecord.getMappingQuality() < minAverageQual) {
        lowqual++;
        continue;
      }
      ivSeq.addAll(HTSeqUtils.addIntervals(samRecord,stranded));
    }
 else {
      if (sam1 != null && sam2 != null) {
        sam1=null;
        sam2=null;
        ivSeq.clear();
      }
      if (samRecord.getFirstOfPairFlag())       sam1=samRecord;
 else       sam2=samRecord;
      if (sam1 == null || sam2 == null)       continue;
      if (!sam1.getReadName().equals(sam2.getReadName())) {
        sam1=sam2;
        sam2=null;
        continue;
      }
      if (!sam1.getReadUnmappedFlag()) {
        ivSeq.addAll(HTSeqUtils.addIntervals(sam1,stranded));
      }
      if (!sam2.getReadUnmappedFlag()) {
        ivSeq.addAll(HTSeqUtils.addIntervals(sam2,stranded));
      }
      if (sam1.getReadUnmappedFlag() && sam2.getReadUnmappedFlag()) {
        notaligned++;
        continue;
      }
      if ((sam1.getAttribute(""String_Node_Str"") != null && sam1.getIntegerAttribute(""String_Node_Str"") > 1) || (sam2.getAttribute(""String_Node_Str"") != null && sam2.getIntegerAttribute(""String_Node_Str"") > 1)) {
        nonunique++;
        continue;
      }
      if (sam1.getMappingQuality() < minAverageQual || sam2.getMappingQuality() < minAverageQual) {
        lowqual++;
        continue;
      }
    }
    Set<String> fs=null;
    fs=HTSeqUtils.featuresOverlapped(ivSeq,features,overlapMode,stranded);
    if (fs == null)     fs=Collections.emptySet();
switch (fs.size()) {
case 0:
      empty++;
    break;
case 1:
  final String id1=fs.iterator().next();
counts.put(id1,counts.get(id1) + 1);
break;
default :
if (removeAmbiguousCases) {
ambiguous++;
}
 else {
for (String id2 : fs) counts.put(id2,counts.get(id2) + 1);
}
break;
}
}
inputSam.close();
final List<String> keysSorted=new ArrayList<String>(counts.keySet());
Collections.sort(keysSorted);
writer.write(""String_Node_Str"");
for (String key : keysSorted) {
writer.write(key + ""String_Node_Str"" + counts.get(key)+ ""String_Node_Str"");
}
reporter.incrCounter(counterGroup,ExpressionCounters.EMPTY_ALIGNMENTS_COUNTER.counterName(),empty);
reporter.incrCounter(counterGroup,ExpressionCounters.AMBIGUOUS_ALIGNMENTS_COUNTER.counterName(),ambiguous);
reporter.incrCounter(counterGroup,ExpressionCounters.LOW_QUAL_ALIGNMENTS_COUNTER.counterName(),lowqual);
reporter.incrCounter(counterGroup,ExpressionCounters.NOT_ALIGNED_ALIGNMENTS_COUNTER.counterName(),notaligned);
reporter.incrCounter(counterGroup,ExpressionCounters.NOT_UNIQUE_ALIGNMENTS_COUNTER.counterName(),nonunique);
reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),empty + ambiguous + lowqual+ notaligned+ nonunique);
writer.close();
}",0.9970171513795676
141163,"static Arguments valueOf(String[] args,Configuration conf) throws IOException {
  List<Path> srcs=new ArrayList<Path>();
  Path dst=null;
  Path log=null;
  EnumSet<Options> flags=EnumSet.noneOf(Options.class);
  String presevedAttributes=null;
  String mapredSslConf=null;
  long filelimit=Long.MAX_VALUE;
  long sizelimit=Long.MAX_VALUE;
  for (int idx=0; idx < args.length; idx++) {
    Options[] opt=Options.values();
    int i=0;
    for (; i < opt.length && !args[idx].startsWith(opt[i].cmd); i++)     ;
    if (i < opt.length) {
      flags.add(opt[i]);
      if (opt[i] == Options.PRESERVE_STATUS) {
        presevedAttributes=args[idx].substring(2);
        FileAttribute.parse(presevedAttributes);
      }
 else       if (opt[i] == Options.FILE_LIMIT) {
        filelimit=Options.FILE_LIMIT.parseLong(args,++idx);
      }
 else       if (opt[i] == Options.SIZE_LIMIT) {
        sizelimit=Options.SIZE_LIMIT.parseLong(args,++idx);
      }
    }
 else     if (""String_Node_Str"".equals(args[idx])) {
      if (++idx == args.length) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      srcs.addAll(fetchFileList(conf,new Path(args[idx])));
    }
 else     if (""String_Node_Str"".equals(args[idx])) {
      if (++idx == args.length) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      log=new Path(args[idx]);
    }
 else     if (""String_Node_Str"".equals(args[idx])) {
      if (++idx == args.length) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      mapredSslConf=args[idx];
    }
 else     if (""String_Node_Str"".equals(args[idx])) {
      if (++idx == args.length) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      try {
        conf.setInt(MAX_MAPS_LABEL,Integer.valueOf(args[idx]));
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + args[idx]);
      }
    }
 else     if ('-' == args[idx].codePointAt(0)) {
      throw new IllegalArgumentException(""String_Node_Str"" + args[idx]);
    }
 else     if (idx == args.length - 1) {
      dst=new Path(args[idx]);
    }
 else {
      srcs.add(new Path(args[idx]));
    }
  }
  if (srcs.isEmpty() || dst == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + (dst == null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  final boolean isOverwrite=flags.contains(Options.OVERWRITE);
  final boolean isUpdate=flags.contains(Options.UPDATE);
  final boolean isDelete=flags.contains(Options.DELETE);
  if (isOverwrite && isUpdate) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (isDelete && !isOverwrite && !isUpdate) {
    throw new IllegalArgumentException(Options.DELETE.cmd + ""String_Node_Str"" + Options.OVERWRITE+ ""String_Node_Str""+ Options.UPDATE+ ""String_Node_Str"");
  }
  return new Arguments(srcs,dst,log,flags,presevedAttributes,filelimit,sizelimit,mapredSslConf);
}","static Arguments valueOf(String[] args,Configuration conf) throws IOException {
  List<Path> srcs=new ArrayList<Path>();
  Path dst=null;
  Path log=null;
  EnumSet<Options> flags=EnumSet.noneOf(Options.class);
  String presevedAttributes=null;
  String mapredSslConf=null;
  long filelimit=Long.MAX_VALUE;
  long sizelimit=Long.MAX_VALUE;
  for (int idx=0; idx < args.length; idx++) {
    Options[] opt=Options.values();
    int i=0;
    for (; i < opt.length && !args[idx].startsWith(opt[i].cmd); i++)     ;
    if (i < opt.length) {
      flags.add(opt[i]);
      if (opt[i] == Options.PRESERVE_STATUS) {
        presevedAttributes=args[idx].substring(2);
        FileAttribute.parse(presevedAttributes);
      }
 else       if (opt[i] == Options.FILE_LIMIT) {
        filelimit=Options.FILE_LIMIT.parseLong(args,++idx);
      }
 else       if (opt[i] == Options.SIZE_LIMIT) {
        sizelimit=Options.SIZE_LIMIT.parseLong(args,++idx);
      }
    }
 else     if (""String_Node_Str"".equals(args[idx])) {
      if (++idx == args.length) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      srcs.addAll(fetchFileList(conf,new Path(args[idx])));
    }
 else     if (""String_Node_Str"".equals(args[idx])) {
      if (++idx == args.length) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      log=new Path(args[idx]);
    }
 else     if (""String_Node_Str"".equals(args[idx])) {
      if (++idx == args.length) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      mapredSslConf=args[idx];
    }
 else     if (""String_Node_Str"".equals(args[idx])) {
      if (++idx == args.length) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      try {
        conf.setInt(MAX_MAPS_LABEL,Integer.parseInt(args[idx]));
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + args[idx]);
      }
    }
 else     if ('-' == args[idx].codePointAt(0)) {
      throw new IllegalArgumentException(""String_Node_Str"" + args[idx]);
    }
 else     if (idx == args.length - 1) {
      dst=new Path(args[idx]);
    }
 else {
      srcs.add(new Path(args[idx]));
    }
  }
  if (srcs.isEmpty() || dst == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + (dst == null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  final boolean isOverwrite=flags.contains(Options.OVERWRITE);
  final boolean isUpdate=flags.contains(Options.UPDATE);
  final boolean isDelete=flags.contains(Options.DELETE);
  if (isOverwrite && isUpdate) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (isDelete && !isOverwrite && !isUpdate) {
    throw new IllegalArgumentException(Options.DELETE.cmd + ""String_Node_Str"" + Options.OVERWRITE+ ""String_Node_Str""+ Options.UPDATE+ ""String_Node_Str"");
  }
  return new Arguments(srcs,dst,log,flags,presevedAttributes,filelimit,sizelimit,mapredSslConf);
}",0.9974441983302096
141164,"private boolean fillBuffer(final int minSize) throws IOException {
  final int finalPos=this.pos + minSize;
  if (finalPos < this.buffer.length)   return false;
  if (this.endStream)   return true;
  this.sb.setLength(0);
  this.sb.append(new String(this.buffer,this.pos,this.buffer.length - this.pos));
  do {
    String line=this.reader.readLine();
    final List<String> lines;
    if (line == null) {
      lines=transform(null);
      this.endStream=true;
    }
 else {
      lines=transform(line);
    }
    if (lines != null)     for (    String l : lines) {
      this.sb.append(l);
      this.sb.append('\n');
    }
  }
 while (sb.length() < minSize || this.endStream);
  this.buffer=this.sb.toString().getBytes(CHARSET);
  this.pos=0;
  return false;
}","private boolean fillBuffer(final int minSize) throws IOException {
  final int finalPos=this.pos + minSize;
  if (finalPos < this.buffer.length)   return false;
  if (this.endStream)   return true;
  this.sb.setLength(0);
  this.sb.append(new String(this.buffer,this.pos,this.buffer.length - this.pos,Globals.DEFAULT_CHARSET));
  do {
    String line=this.reader.readLine();
    final List<String> lines;
    if (line == null) {
      lines=transform(null);
      this.endStream=true;
    }
 else {
      lines=transform(line);
    }
    if (lines != null)     for (    String l : lines) {
      this.sb.append(l);
      this.sb.append('\n');
    }
  }
 while (sb.length() < minSize || this.endStream);
  this.buffer=this.sb.toString().getBytes(CHARSET);
  this.pos=0;
  return false;
}",0.4418604651162791
141165,"@Override public String getMapperVersion(){
  try {
    final String execPath;
synchronized (SYNC) {
      execPath=install(MAPPER_EXECUTABLE);
    }
    final File tempDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tempDir.delete();
    tempDir.mkdir();
    final ProcessBuilder pb=new ProcessBuilder(execPath);
    pb.directory(tempDir);
    final Process p=pb.start();
    p.waitFor();
    final File logFile=new File(tempDir,""String_Node_Str"");
    String version=null;
    try (BufferedReader reader=new BufferedReader(new FileReader(logFile))){
      final String line=reader.readLine();
      if (line != null && line.indexOf('=') != -1) {
        version=line.substring(line.indexOf('=') + 1).trim();
        if (version.startsWith(""String_Node_Str"")) {
          version=version.substring(""String_Node_Str"".length());
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return null;
    }
    new File(tempDir,""String_Node_Str"").delete();
    new File(tempDir,""String_Node_Str"").delete();
    new File(tempDir,""String_Node_Str"").delete();
    logFile.delete();
    tempDir.delete();
    return version;
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
catch (  InterruptedException e) {
    e.printStackTrace();
    return null;
  }
}","@Override public String getMapperVersion(){
  try {
    final String execPath;
synchronized (SYNC) {
      execPath=install(MAPPER_EXECUTABLE);
    }
    final File tempDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tempDir.delete();
    tempDir.mkdir();
    final ProcessBuilder pb=new ProcessBuilder(execPath);
    pb.directory(tempDir);
    final Process p=pb.start();
    p.waitFor();
    final File logFile=new File(tempDir,""String_Node_Str"");
    String version=null;
    try (BufferedReader reader=Files.newReader(logFile,Globals.DEFAULT_CHARSET)){
      final String line=reader.readLine();
      if (line != null && line.indexOf('=') != -1) {
        version=line.substring(line.indexOf('=') + 1).trim();
        if (version.startsWith(""String_Node_Str"")) {
          version=version.substring(""String_Node_Str"".length());
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return null;
    }
    new File(tempDir,""String_Node_Str"").delete();
    new File(tempDir,""String_Node_Str"").delete();
    new File(tempDir,""String_Node_Str"").delete();
    logFile.delete();
    tempDir.delete();
    return version;
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
catch (  InterruptedException e) {
    e.printStackTrace();
    return null;
  }
}",0.977761025254429
141166,"/** 
 * Load metadata.
 * @throws EoulsanException if an error occurs while reading metadata
 */
private void loadMetaDataEntries() throws EoulsanException {
  if (!this.metadataFile.exists()) {
    return;
  }
  try (BufferedReader reader=new BufferedReader(new InputStreamReader(this.metadataFile.open()))){
    String line=null;
    while ((line=reader.readLine()) != null) {
      final String[] fields=line.split(FIELD_SEPARATOR);
      if (fields.length % 2 != 0) {
        final String filename=fields[0];
        final Map<String,String> entries=new HashMap<>();
        this.metadata.put(filename,entries);
        for (int i=1; i < fields.length; i+=2) {
          entries.put(fields[i],fields[i + 1]);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Load metadata.
 * @throws EoulsanException if an error occurs while reading metadata
 */
private void loadMetaDataEntries() throws EoulsanException {
  if (!this.metadataFile.exists()) {
    return;
  }
  try (BufferedReader reader=new BufferedReader(new InputStreamReader(this.metadataFile.open(),Globals.DEFAULT_CHARSET))){
    String line=null;
    while ((line=reader.readLine()) != null) {
      final String[] fields=line.split(FIELD_SEPARATOR);
      if (fields.length % 2 != 0) {
        final String filename=fields[0];
        final Map<String,String> entries=new HashMap<>();
        this.metadata.put(filename,entries);
        for (int i=1; i < fields.length; i+=2) {
          entries.put(fields[i],fields[i + 1]);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
}",0.9859320046893316
141167,"private void writeMetadataEntry(final String s) throws EoulsanException {
  if (!this.metadataFile.isLocalFile()) {
    return;
  }
  try (PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(this.metadataFile.toFile(),true)))){
    out.println(s);
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
}","private void writeMetadataEntry(final String s) throws EoulsanException {
  if (!this.metadataFile.isLocalFile()) {
    return;
  }
  try (PrintWriter out=new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.metadataFile.toFile(),true),Globals.DEFAULT_CHARSET))){
    out.println(s);
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
}",0.8537859007832899
141168,"/** 
 * Build BloomFilter represented the input stream.
 * @param is the input stream source
 * @return BloomFilter corresponding to the input stream
 * @throws IOException
 */
protected BloomFilterUtils buildBloomFilter(InputStream is) throws IOException {
  final BloomFilterUtils filter=initBloomFilter(getExpectedNumberOfElements());
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is));
  String line=null;
  while ((line=reader.readLine()) != null) {
    filter.put(line);
  }
  reader.close();
  return filter;
}","/** 
 * Build BloomFilter represented the input stream.
 * @param is the input stream source
 * @return BloomFilter corresponding to the input stream
 * @throws IOException
 */
protected BloomFilterUtils buildBloomFilter(InputStream is) throws IOException {
  final BloomFilterUtils filter=initBloomFilter(getExpectedNumberOfElements());
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is,Globals.DEFAULT_CHARSET));
  String line=null;
  while ((line=reader.readLine()) != null) {
    filter.put(line);
  }
  reader.close();
  return filter;
}",0.9783393501805054
141169,"@Override public boolean compareFiles(BloomFilterUtils filter,InputStream is) throws IOException {
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is));
  String line=null;
  numberElementsCompared=0;
  while ((line=reader.readLine()) != null) {
    numberElementsCompared++;
    if (line.charAt(0) == '@') {
      if (!this.tagsToNotCompare.contains(getTag(line))) {
        if (!filter.mightContain(line)) {
          setCauseFailComparison(line);
          reader.close();
          return false;
        }
      }
    }
 else {
      if (!filter.mightContain(line)) {
        setCauseFailComparison(line);
        reader.close();
        return false;
      }
    }
  }
  reader.close();
  if (this.numberElementsCompared != filter.getAddedNumberOfElements()) {
    setCauseFailComparison(""String_Node_Str"" + this.numberElementsCompared + ""String_Node_Str""+ filter.getAddedNumberOfElements()+ ""String_Node_Str"");
    return false;
  }
  return true;
}","@Override public boolean compareFiles(BloomFilterUtils filter,InputStream is) throws IOException {
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is,Globals.DEFAULT_CHARSET));
  String line=null;
  numberElementsCompared=0;
  while ((line=reader.readLine()) != null) {
    numberElementsCompared++;
    if (line.charAt(0) == '@') {
      if (!this.tagsToNotCompare.contains(getTag(line))) {
        if (!filter.mightContain(line)) {
          setCauseFailComparison(line);
          reader.close();
          return false;
        }
      }
    }
 else {
      if (!filter.mightContain(line)) {
        setCauseFailComparison(line);
        reader.close();
        return false;
      }
    }
  }
  reader.close();
  if (this.numberElementsCompared != filter.getAddedNumberOfElements()) {
    setCauseFailComparison(""String_Node_Str"" + this.numberElementsCompared + ""String_Node_Str""+ filter.getAddedNumberOfElements()+ ""String_Node_Str"");
    return false;
  }
  return true;
}",0.987878787878788
141170,"@Override public boolean compareFiles(BloomFilterUtils filter,InputStream is) throws IOException {
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is));
  String line=null;
  numberElementsCompared=0;
  while ((line=reader.readLine()) != null) {
    numberElementsCompared++;
    if (!filter.mightContain(line)) {
      setCauseFailComparison(line);
      reader.close();
      return false;
    }
  }
  reader.close();
  if (numberElementsCompared != filter.getAddedNumberOfElements()) {
    setCauseFailComparison(""String_Node_Str"" + this.numberElementsCompared + ""String_Node_Str""+ filter.getAddedNumberOfElements()+ ""String_Node_Str"");
    return false;
  }
  return true;
}","@Override public boolean compareFiles(BloomFilterUtils filter,InputStream is) throws IOException {
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is,Globals.DEFAULT_CHARSET));
  String line=null;
  numberElementsCompared=0;
  while ((line=reader.readLine()) != null) {
    numberElementsCompared++;
    if (!filter.mightContain(line)) {
      setCauseFailComparison(line);
      reader.close();
      return false;
    }
  }
  reader.close();
  if (numberElementsCompared != filter.getAddedNumberOfElements()) {
    setCauseFailComparison(""String_Node_Str"" + this.numberElementsCompared + ""String_Node_Str""+ filter.getAddedNumberOfElements()+ ""String_Node_Str"");
    return false;
  }
  return true;
}",0.9831697054698456
141171,"public static void addTranslatorFields(final InputStream is,int fieldToTranslate,final Translator translator,final TranslatorOutputFormat of) throws IOException {
  if (is == null)   throw new NullPointerException(""String_Node_Str"");
  if (translator == null)   throw new NullPointerException(""String_Node_Str"");
  if (of == null)   throw new NullPointerException(""String_Node_Str"");
  String[] translatorFieldnames=translator.getFields();
  final int n=translatorFieldnames.length;
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is));
  String line;
  boolean first=true;
  while ((line=reader.readLine()) != null) {
    final String[] fields=line.split(""String_Node_Str"");
    if (first) {
      for (int i=0; i < fields.length; i++)       of.addHeaderField(fields[i]);
      for (int i=0; i < n; i++)       of.addHeaderField(translatorFieldnames[i]);
      first=false;
    }
 else {
      of.newLine();
      for (int i=0; i < fields.length; i++)       try {
        of.writeDouble(Double.parseDouble(fields[i]));
      }
 catch (      NumberFormatException e) {
        of.writeText(fields[i]);
      }
      for (int i=0; i < n; i++) {
        final String field=translatorFieldnames[i];
        final String valueToTranslate=fields[fieldToTranslate];
        final String value;
        if (field == null)         value=null;
 else         value=translator.translateField(valueToTranslate,field);
        String link;
        if (value == null || !translator.isLinkInfo(field))         link=null;
 else         link=translator.getLinkInfo(value,field);
        if (value == null)         of.writeEmpty();
 else {
          if (link == null)           of.writeText(value);
 else           of.writeLink(value,link);
        }
      }
    }
  }
  reader.close();
  of.close();
}","public static void addTranslatorFields(final InputStream is,int fieldToTranslate,final Translator translator,final TranslatorOutputFormat of) throws IOException {
  if (is == null)   throw new NullPointerException(""String_Node_Str"");
  if (translator == null)   throw new NullPointerException(""String_Node_Str"");
  if (of == null)   throw new NullPointerException(""String_Node_Str"");
  String[] translatorFieldnames=translator.getFields();
  final int n=translatorFieldnames.length;
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is,Globals.DEFAULT_CHARSET));
  String line;
  boolean first=true;
  while ((line=reader.readLine()) != null) {
    final String[] fields=line.split(""String_Node_Str"");
    if (first) {
      for (int i=0; i < fields.length; i++)       of.addHeaderField(fields[i]);
      for (int i=0; i < n; i++)       of.addHeaderField(translatorFieldnames[i]);
      first=false;
    }
 else {
      of.newLine();
      for (int i=0; i < fields.length; i++)       try {
        of.writeDouble(Double.parseDouble(fields[i]));
      }
 catch (      NumberFormatException e) {
        of.writeText(fields[i]);
      }
      for (int i=0; i < n; i++) {
        final String field=translatorFieldnames[i];
        final String valueToTranslate=fields[fieldToTranslate];
        final String value;
        if (field == null)         value=null;
 else         value=translator.translateField(valueToTranslate,field);
        String link;
        if (value == null || !translator.isLinkInfo(field))         link=null;
 else         link=translator.getLinkInfo(value,field);
        if (value == null)         of.writeEmpty();
 else {
          if (link == null)           of.writeText(value);
 else           of.writeLink(value,link);
        }
      }
    }
  }
  reader.close();
  of.close();
}",0.9933993399339934
141172,"/** 
 * Public constructor.
 * @param file output file
 */
public TSVTranslatorOutputFormat(final File file) throws IOException {
  this.writer=new BufferedWriter(new FileWriter(file));
}","/** 
 * Public constructor.
 * @param file output file
 */
public TSVTranslatorOutputFormat(final File file) throws IOException {
  this.writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),Globals.DEFAULT_CHARSET));
}",0.8364485981308412
141173,"@Override protected void clean(){
  tmpFile1.delete();
  tmpFile2.delete();
}","@Override protected void clean(){
  if (tmpFile1.delete()) {
    getLogger().warning(""String_Node_Str"" + tmpFile1);
  }
  if (tmpFile2.delete()) {
    getLogger().warning(""String_Node_Str"" + tmpFile2);
  }
}",0.5422535211267606
141174,"private MapperProcess createMapperProcessSE(final String bwaPath,final String indexPath,final File readsFile,final File tmpFile,final boolean fileMode) throws IOException {
  return new MapperProcess(this,fileMode,false,false){
    @Override protected List<List<String>> createCommandLines(){
      final boolean illuminaFastq=getFastqFormat() == FASTQ_ILLUMINA || getFastqFormat() == FASTQ_ILLUMINA_1_5;
      final List<String> cmd1=new ArrayList<String>();
      cmd1.add(bwaPath);
      cmd1.add(""String_Node_Str"");
      if (illuminaFastq)       cmd1.add(""String_Node_Str"");
      cmd1.add(getMapperArguments());
      cmd1.add(""String_Node_Str"");
      cmd1.add(getThreadsNumber() + ""String_Node_Str"");
      cmd1.add(""String_Node_Str"");
      cmd1.add(tmpFile.getAbsolutePath());
      cmd1.add(indexPath);
      if (fileMode)       cmd1.add(readsFile.getAbsolutePath());
 else       cmd1.add(getTmpInputFile1().getAbsolutePath());
      final List<String> cmd2=new ArrayList<String>();
      cmd2.add(bwaPath);
      cmd2.add(""String_Node_Str"");
      cmd2.add(indexPath);
      cmd2.add(tmpFile.getAbsolutePath());
      if (fileMode)       cmd2.add(readsFile.getAbsolutePath());
 else       cmd2.add(getTmpInputFile1().getAbsolutePath());
      final List<List<String>> result=new ArrayList<List<String>>();
      result.add(cmd1);
      result.add(cmd2);
      return result;
    }
    @Override protected void clean(){
      tmpFile.delete();
    }
  }
;
}","private MapperProcess createMapperProcessSE(final String bwaPath,final String indexPath,final File readsFile,final File tmpFile,final boolean fileMode) throws IOException {
  return new MapperProcess(this,fileMode,false,false){
    @Override protected List<List<String>> createCommandLines(){
      final boolean illuminaFastq=getFastqFormat() == FASTQ_ILLUMINA || getFastqFormat() == FASTQ_ILLUMINA_1_5;
      final List<String> cmd1=new ArrayList<String>();
      cmd1.add(bwaPath);
      cmd1.add(""String_Node_Str"");
      if (illuminaFastq)       cmd1.add(""String_Node_Str"");
      cmd1.add(getMapperArguments());
      cmd1.add(""String_Node_Str"");
      cmd1.add(getThreadsNumber() + ""String_Node_Str"");
      cmd1.add(""String_Node_Str"");
      cmd1.add(tmpFile.getAbsolutePath());
      cmd1.add(indexPath);
      if (fileMode)       cmd1.add(readsFile.getAbsolutePath());
 else       cmd1.add(getTmpInputFile1().getAbsolutePath());
      final List<String> cmd2=new ArrayList<String>();
      cmd2.add(bwaPath);
      cmd2.add(""String_Node_Str"");
      cmd2.add(indexPath);
      cmd2.add(tmpFile.getAbsolutePath());
      if (fileMode)       cmd2.add(readsFile.getAbsolutePath());
 else       cmd2.add(getTmpInputFile1().getAbsolutePath());
      final List<List<String>> result=new ArrayList<List<String>>();
      result.add(cmd1);
      result.add(cmd2);
      return result;
    }
    @Override protected void clean(){
      if (!tmpFile.delete()) {
        getLogger().warning(""String_Node_Str"" + tmpFile);
      }
    }
  }
;
}",0.9624459953472916
141175,"private MapperProcess createMapperProcessPE(final String bwaPath,final String indexPath,final File readsFile1,final File readsFile2,final File tmpFile1,final File tmpFile2,final boolean fileMode) throws IOException {
  return new MapperProcess(this,fileMode,false,true){
    @Override protected List<List<String>> createCommandLines(){
      final boolean illuminaFastq=getFastqFormat() == FASTQ_ILLUMINA || getFastqFormat() == FASTQ_ILLUMINA_1_5;
      final List<String> cmd1=new ArrayList<String>();
      cmd1.add(bwaPath);
      cmd1.add(""String_Node_Str"");
      if (illuminaFastq)       cmd1.add(""String_Node_Str"");
      cmd1.add(getMapperArguments());
      cmd1.add(""String_Node_Str"");
      cmd1.add(getThreadsNumber() + ""String_Node_Str"");
      cmd1.add(""String_Node_Str"");
      cmd1.add(tmpFile1.getAbsolutePath());
      cmd1.add(indexPath);
      if (fileMode)       cmd1.add(readsFile1.getAbsolutePath());
 else       cmd1.add(getTmpInputFile1().getAbsolutePath());
      final List<String> cmd2=new ArrayList<String>();
      cmd2.add(bwaPath);
      cmd2.add(""String_Node_Str"");
      if (illuminaFastq)       cmd2.add(""String_Node_Str"");
      cmd2.add(getMapperArguments());
      cmd2.add(""String_Node_Str"");
      cmd2.add(getThreadsNumber() + ""String_Node_Str"");
      cmd2.add(""String_Node_Str"");
      cmd2.add(tmpFile2.getAbsolutePath());
      cmd2.add(indexPath);
      if (fileMode)       cmd2.add(readsFile2.getAbsolutePath());
 else       cmd2.add(getTmpInputFile2().getAbsolutePath());
      final List<String> cmd3=new ArrayList<String>();
      cmd3.add(bwaPath);
      cmd3.add(""String_Node_Str"");
      cmd3.add(indexPath);
      cmd3.add(tmpFile1.getAbsolutePath());
      cmd3.add(tmpFile2.getAbsolutePath());
      if (fileMode) {
        cmd3.add(readsFile1.getAbsolutePath());
        cmd3.add(readsFile2.getAbsolutePath());
      }
 else {
        cmd3.add(getTmpInputFile1().getAbsolutePath());
        cmd3.add(getTmpInputFile2().getAbsolutePath());
      }
      final List<List<String>> result=new ArrayList<List<String>>();
      result.add(cmd1);
      result.add(cmd2);
      result.add(cmd3);
      return result;
    }
    @Override protected void clean(){
      tmpFile1.delete();
      tmpFile2.delete();
    }
  }
;
}","private MapperProcess createMapperProcessPE(final String bwaPath,final String indexPath,final File readsFile1,final File readsFile2,final File tmpFile1,final File tmpFile2,final boolean fileMode) throws IOException {
  return new MapperProcess(this,fileMode,false,true){
    @Override protected List<List<String>> createCommandLines(){
      final boolean illuminaFastq=getFastqFormat() == FASTQ_ILLUMINA || getFastqFormat() == FASTQ_ILLUMINA_1_5;
      final List<String> cmd1=new ArrayList<String>();
      cmd1.add(bwaPath);
      cmd1.add(""String_Node_Str"");
      if (illuminaFastq)       cmd1.add(""String_Node_Str"");
      cmd1.add(getMapperArguments());
      cmd1.add(""String_Node_Str"");
      cmd1.add(getThreadsNumber() + ""String_Node_Str"");
      cmd1.add(""String_Node_Str"");
      cmd1.add(tmpFile1.getAbsolutePath());
      cmd1.add(indexPath);
      if (fileMode)       cmd1.add(readsFile1.getAbsolutePath());
 else       cmd1.add(getTmpInputFile1().getAbsolutePath());
      final List<String> cmd2=new ArrayList<String>();
      cmd2.add(bwaPath);
      cmd2.add(""String_Node_Str"");
      if (illuminaFastq)       cmd2.add(""String_Node_Str"");
      cmd2.add(getMapperArguments());
      cmd2.add(""String_Node_Str"");
      cmd2.add(getThreadsNumber() + ""String_Node_Str"");
      cmd2.add(""String_Node_Str"");
      cmd2.add(tmpFile2.getAbsolutePath());
      cmd2.add(indexPath);
      if (fileMode)       cmd2.add(readsFile2.getAbsolutePath());
 else       cmd2.add(getTmpInputFile2().getAbsolutePath());
      final List<String> cmd3=new ArrayList<String>();
      cmd3.add(bwaPath);
      cmd3.add(""String_Node_Str"");
      cmd3.add(indexPath);
      cmd3.add(tmpFile1.getAbsolutePath());
      cmd3.add(tmpFile2.getAbsolutePath());
      if (fileMode) {
        cmd3.add(readsFile1.getAbsolutePath());
        cmd3.add(readsFile2.getAbsolutePath());
      }
 else {
        cmd3.add(getTmpInputFile1().getAbsolutePath());
        cmd3.add(getTmpInputFile2().getAbsolutePath());
      }
      final List<List<String>> result=new ArrayList<List<String>>();
      result.add(cmd1);
      result.add(cmd2);
      result.add(cmd3);
      return result;
    }
    @Override protected void clean(){
      if (tmpFile1.delete()) {
        getLogger().warning(""String_Node_Str"" + tmpFile1);
      }
      if (tmpFile2.delete()) {
        getLogger().warning(""String_Node_Str"" + tmpFile2);
      }
    }
  }
;
}",0.9637681159420288
141176,"/** 
 * Custom splitter for Casava tabulated file.
 * @param line line to parse
 * @return a list of String with the contents of each cell without unnecessaryquotes
 */
public static List<String> parseTabulatedDesignLine(final String line){
  if (s == null)   return null;
  return Arrays.asList(s.split(""String_Node_Str""));
}","/** 
 * Custom splitter for Casava tabulated file.
 * @param line line to parse
 * @return a list of String with the contents of each cell without unnecessaryquotes
 */
public static List<String> parseTabulatedDesignLine(final String line){
  if (line == null)   return null;
  return Arrays.asList(line.split(""String_Node_Str""));
}",0.9848024316109424
141177,"@Override public void action(final List<String> arguments){
  final Options options=makeOptions();
  final CommandLineParser parser=new GnuParser();
  String filename=""String_Node_Str"";
  int argsOptions=0;
  boolean pairEndMode=false;
  String sampleSheetPath=null;
  String samplesProjectName=null;
  boolean symnlinks=false;
  try {
    final CommandLine line=parser.parse(options,arguments.toArray(new String[0]),true);
    if (line.hasOption(""String_Node_Str"")) {
      pairEndMode=true;
      argsOptions+=1;
    }
    if (line.hasOption(""String_Node_Str"")) {
      help(options);
    }
    if (line.hasOption(""String_Node_Str"")) {
      filename=line.getOptionValue(""String_Node_Str"").trim();
      argsOptions+=2;
    }
    if (line.hasOption(""String_Node_Str"")) {
      sampleSheetPath=line.getOptionValue(""String_Node_Str"").trim();
      argsOptions+=2;
    }
    if (line.hasOption(""String_Node_Str"")) {
      samplesProjectName=line.getOptionValue(""String_Node_Str"").trim();
      argsOptions+=2;
    }
    if (line.hasOption(""String_Node_Str"")) {
      symnlinks=true;
      argsOptions++;
    }
  }
 catch (  ParseException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
  Main.getInstance().flushLog();
  Design design=null;
  final File designFile=new File(filename);
  try {
    final List<String> newArgs=arguments.subList(argsOptions,arguments.size() - 1);
    final DesignBuilder db=new DesignBuilder();
    if (sampleSheetPath != null)     db.addCasavaDesignProject(new File(sampleSheetPath),samplesProjectName);
    db.addFiles(newArgs);
    design=db.getDesign(pairEndMode);
    if (symnlinks)     DesignUtils.replaceLocalPathBySymlinks(design,designFile.getParentFile());
  }
 catch (  EoulsanException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
  if (design.getSampleCount() == 0) {
    Common.showErrorMessageAndExit(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Globals.APP_NAME_LOWER_CASE + ""String_Node_Str"");
  }
  try {
    if (designFile.exists())     throw new EoulsanIOException(""String_Node_Str"" + designFile + ""String_Node_Str"");
    DesignWriter dw=new SimpleDesignWriter(designFile);
    dw.write(design);
  }
 catch (  EoulsanIOException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
}","@Override public void action(final List<String> arguments){
  final Options options=makeOptions();
  final CommandLineParser parser=new GnuParser();
  String filename=""String_Node_Str"";
  int argsOptions=0;
  boolean pairEndMode=false;
  String sampleSheetPath=null;
  String samplesProjectName=null;
  boolean symnlinks=false;
  try {
    final CommandLine line=parser.parse(options,arguments.toArray(new String[0]),true);
    if (line.hasOption(""String_Node_Str"")) {
      pairEndMode=true;
      argsOptions+=1;
    }
    if (line.hasOption(""String_Node_Str"")) {
      help(options);
    }
    if (line.hasOption(""String_Node_Str"")) {
      filename=line.getOptionValue(""String_Node_Str"").trim();
      argsOptions+=2;
    }
    if (line.hasOption(""String_Node_Str"")) {
      sampleSheetPath=line.getOptionValue(""String_Node_Str"").trim();
      argsOptions+=2;
    }
    if (line.hasOption(""String_Node_Str"")) {
      samplesProjectName=line.getOptionValue(""String_Node_Str"").trim();
      argsOptions+=2;
    }
    if (line.hasOption(""String_Node_Str"")) {
      symnlinks=true;
      argsOptions++;
    }
  }
 catch (  ParseException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
  Main.getInstance().flushLog();
  Design design=null;
  final File designFile=new File(filename);
  try {
    final List<String> newArgs=arguments.subList(argsOptions,arguments.size());
    final DesignBuilder db=new DesignBuilder();
    if (sampleSheetPath != null)     db.addCasavaDesignProject(new File(sampleSheetPath),samplesProjectName);
    db.addFiles(newArgs);
    design=db.getDesign(pairEndMode);
    if (symnlinks)     DesignUtils.replaceLocalPathBySymlinks(design,designFile.getParentFile());
  }
 catch (  EoulsanException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
  if (design.getSampleCount() == 0) {
    Common.showErrorMessageAndExit(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + Globals.APP_NAME_LOWER_CASE + ""String_Node_Str"");
  }
  try {
    if (designFile.exists())     throw new EoulsanIOException(""String_Node_Str"" + designFile + ""String_Node_Str"");
    DesignWriter dw=new SimpleDesignWriter(designFile);
    dw.write(design);
  }
 catch (  EoulsanIOException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
}",0.99913307325531
141178,"private boolean isDataFormatExtension(final DataFormat dataFormat,final String extension,DataFileMetadata md){
  if (md != null && md.getDataFormat() != null && dataFormat.equals(md.getDataFormat()))   return true;
  return dfr.getDataFormatFromExtension(extension) != null;
}","private boolean isDataFormatExtension(final DataFormat dataFormat,final String extension,DataFileMetadata md){
  if (md != null && md.getDataFormat() != null) {
    return dataFormat.equals(md.getDataFormat());
  }
  return dfr.getDataFormatFromExtension(extension) == dataFormat;
}",0.899641577060932
141179,"/** 
 * Get the AbstractData object wrapped by this object.
 * @return the AbstractData object wrapped by this object
 */
AbstractData getData(){
  Data data=this;
  do {
    data=((UnmodifiableData)data).data;
  }
 while (data instanceof UnmodifiableData);
  return (AbstractData)this.data;
}","/** 
 * Get the AbstractData object wrapped by this object.
 * @return the AbstractData object wrapped by this object
 */
AbstractData getData(){
  Data data=this;
  do {
    data=((UnmodifiableData)data).data;
  }
 while (data instanceof UnmodifiableData);
  return (AbstractData)data;
}",0.991394148020654
141180,"/** 
 * Add data to the token manager.
 * @param inputPort inputPort port for the data
 * @param data the data
 */
private void addData(final WorkflowInputPort inputPort,final Data data){
  if (!inputPort.isList()) {
synchronized (this) {
      inputTokens.put(inputPort,data);
    }
  }
 else {
    final DataList dataList;
    final Collection<Data> inputData=this.inputTokens.get(inputPort);
    if (inputData.size() == 0) {
      dataList=new DataList(inputPort);
    }
 else {
      dataList=(DataList)inputData.iterator().next();
    }
    dataList.getModifiableList().add(data);
  }
}","/** 
 * Add data to the token manager.
 * @param inputPort inputPort port for the data
 * @param data the data
 */
private void addData(final WorkflowInputPort inputPort,final Data data){
  if (!inputPort.isList()) {
synchronized (this) {
      inputTokens.put(inputPort,data);
    }
  }
 else {
    final DataList dataList;
    final Collection<Data> inputData=this.inputTokens.get(inputPort);
    if (inputData.size() == 0) {
      dataList=new DataList(inputPort);
      inputData.add(dataList);
    }
 else {
      dataList=(DataList)inputData.iterator().next();
    }
    dataList.getModifiableList().add(data);
  }
}",0.9744435284418796
141181,"/** 
 * Post a token to the the token manager.
 * @param inputPort port where the token must be posted
 * @param token the token to post
 */
public void postToken(final WorkflowInputPort inputPort,final Token token){
  checkNotNull(token);
  checkNotNull(inputPort);
  final StepState originStepState=token.getOrigin().getStep().getState();
  checkState(originStepState == WORKING || originStepState == DONE,""String_Node_Str"" + originStepState);
  checkState(!this.receivedToken.contains(token.getId()),""String_Node_Str"" + token.getId());
  checkState(this.inputPorts.contains(inputPort),""String_Node_Str"" + inputPort);
  checkState(inputPort.getLink() == token.getOrigin(),""String_Node_Str"" + inputPort + ""String_Node_Str""+ outputPorts+ ""String_Node_Str"");
  checkState(!this.closedPorts.contains(inputPort),""String_Node_Str"" + inputPort);
  if (token.isEndOfStepToken()) {
    checkState(!this.inputTokens.get(inputPort).isEmpty(),""String_Node_Str"" + inputPort);
    this.closedPorts.add(inputPort);
  }
 else {
    final Data data=token.getData();
    if (data.isList())     for (    Data e : data.getListElements())     addData(inputPort,e);
 else     addData(inputPort,data);
  }
}","/** 
 * Post a token to the the token manager.
 * @param inputPort port where the token must be posted
 * @param token the token to post
 */
public void postToken(final WorkflowInputPort inputPort,final Token token){
  checkNotNull(token);
  checkNotNull(inputPort);
  final StepState originStepState=token.getOrigin().getStep().getState();
  checkState(originStepState == WORKING || originStepState == DONE,""String_Node_Str"" + originStepState);
  checkState(!this.receivedToken.contains(token.getId()),""String_Node_Str"" + token.getId());
  checkState(this.inputPorts.contains(inputPort),""String_Node_Str"" + inputPort);
  checkState(inputPort.getLink() == token.getOrigin(),""String_Node_Str"" + inputPort + ""String_Node_Str""+ token.getOrigin()+ ""String_Node_Str"");
  checkState(!this.closedPorts.contains(inputPort),""String_Node_Str"" + this.step.getId() + ""String_Node_Str""+ inputPort.getName());
  if (token.isEndOfStepToken()) {
    checkState(!this.inputTokens.get(inputPort).isEmpty(),""String_Node_Str"" + this.step.getId() + ""String_Node_Str""+ inputPort.getName());
    this.closedPorts.add(inputPort);
  }
 else {
    final Data data=token.getData();
    if (data.isList()) {
      for (      Data e : data.getListElements()) {
        addData(inputPort,e);
      }
    }
 else {
      addData(inputPort,data);
    }
  }
}",0.9179936305732485
141182,"/** 
 * Constructor.
 * @param step step related to the context
 */
WorkflowStepContext(final WorkflowContext workflowContext,final AbstractWorkflowStep step,Map<InputPort,Data> inputData,Map<OutputPort,AbstractData> outputData){
  checkNotNull(workflowContext,""String_Node_Str"");
  checkNotNull(step,""String_Node_Str"");
  this.workflowContext=workflowContext;
  this.step=step;
  for (  Map.Entry<InputPort,Data> e : inputData.entrySet()) {
    this.inputData.put(e.getKey().getName(),e.getValue());
  }
  for (  Map.Entry<OutputPort,AbstractData> e : outputData.entrySet()) {
    this.outputData.put(e.getKey().getName(),e.getValue());
  }
}","/** 
 * Constructor.
 * @param step step related to the context
 */
WorkflowStepContext(final WorkflowContext workflowContext,final AbstractWorkflowStep step,Map<InputPort,Data> inputData,Map<OutputPort,AbstractData> outputData){
  checkNotNull(workflowContext,""String_Node_Str"");
  checkNotNull(step,""String_Node_Str"");
synchronized (this.getClass()) {
    this.id=(++instanceCounter);
  }
  this.contextName=""String_Node_Str"" + id;
  this.workflowContext=workflowContext;
  this.step=step;
  for (  Map.Entry<InputPort,Data> e : inputData.entrySet()) {
    this.inputData.put(e.getKey().getName(),e.getValue());
  }
  for (  Map.Entry<OutputPort,AbstractData> e : outputData.entrySet()) {
    this.outputData.put(e.getKey().getName(),e.getValue());
  }
}",0.919228020014296
141183,"@Override public void run(){
  do {
    try {
      Thread.sleep(CHECKING_DELAY_MS);
    }
 catch (    InterruptedException e) {
      EoulsanLogger.getLogger().severe(e.getMessage());
    }
    if (this.step.getState() != READY) {
      continue;
    }
    final Set<WorkflowStepContext> contexts;
synchronized (this) {
      final WorkflowContext workflowContext=this.step.getAbstractWorkflow().getWorkflowContext();
      if (this.inputPorts.size() > 0) {
        contexts=createContexts(workflowContext);
      }
 else {
        contexts=createContextWhenNoInputPortExist(workflowContext);
      }
    }
    this.executors.processContexts(contexts);
    if (isNoTokenToReceive()) {
      this.executors.waitEndOfThreads();
      this.executors.getStepResult().setImmutable();
      if (this.step.isCreateLogFiles()) {
        writeStepResult();
      }
      if (this.executors.getStepResult().isSuccess()) {
        this.step.setState(DONE);
      }
 else {
        this.step.setState(FAIL);
      }
      sendEndOfStepTokens();
      this.endOfStep=true;
    }
  }
 while (!this.endOfStep);
  this.executors.stop();
}","@Override public void run(){
  do {
    try {
      Thread.sleep(CHECKING_DELAY_MS);
    }
 catch (    InterruptedException e) {
      EoulsanLogger.getLogger().severe(e.getMessage());
    }
    final StepState state=this.step.getState();
    if (!(state == READY || state == WORKING)) {
      continue;
    }
    if (state == READY) {
      this.step.setState(WORKING);
    }
    final Set<WorkflowStepContext> contexts;
synchronized (this) {
      final WorkflowContext workflowContext=this.step.getAbstractWorkflow().getWorkflowContext();
      if (this.inputPorts.size() > 0) {
        contexts=createContexts(workflowContext);
      }
 else {
        contexts=createContextWhenNoInputPortExist(workflowContext);
      }
    }
    this.executors.processContexts(contexts);
    if (isNoTokenToReceive()) {
      this.executors.waitEndOfThreads();
      this.executors.getStepResult().setImmutable();
      if (this.step.isCreateLogFiles()) {
        writeStepResult();
      }
      if (this.executors.getStepResult().isSuccess()) {
        this.step.setState(DONE);
      }
 else {
        this.step.setState(FAIL);
      }
      sendEndOfStepTokens();
      this.endOfStep=true;
    }
  }
 while (!this.endOfStep);
  this.executors.stop();
}",0.943858168003377
141184,"/** 
 * Get the number of context created by the token manager.
 * @return the number of context created by the token manager
 */
public int getContextCount(){
  return this.cartesianProductsUsed.size();
}","/** 
 * Get the number of context created by the token manager.
 * @return the number of context created by the token manager
 */
public int getContextCount(){
  return this.inputPorts.size() == 0 ? 1 : this.cartesianProductsUsed.size();
}",0.9234234234234234
141185,"/** 
 * Set the state of the step.
 * @param state the new state of the step
 */
public void setState(final StepState state){
  if (state == null)   return;
  if (this.step.getType() == WorkflowStep.StepType.ROOT_STEP && state == StepState.WAITING)   this.stepState=StepState.READY;
 else   this.stepState=state;
  if (this.stepState == StepState.DONE)   for (  AbstractWorkflowStep step : this.stepsToInform)   step.getStepStateObserver().updateStatus();
  step.getAbstractWorkflow().updateStepState(this.step);
  for (  WorkflowStepObserver o : WorkflowStepObserverRegistry.getInstance().getObservers())   o.notifyStepState(this.step);
}","/** 
 * Set the state of the step.
 * @param state the new state of the step
 */
public void setState(final StepState state){
  if (state == null)   return;
synchronized (this) {
    if (this.step.getType() == WorkflowStep.StepType.ROOT_STEP && state == StepState.WAITING)     this.stepState=StepState.READY;
 else     this.stepState=state;
  }
  if (this.stepState == StepState.DONE)   for (  AbstractWorkflowStep step : this.stepsToInform)   step.getStepStateObserver().updateStatus();
  step.getAbstractWorkflow().updateStepState(this.step);
  for (  WorkflowStepObserver o : WorkflowStepObserverRegistry.getInstance().getObservers())   o.notifyStepState(this.step);
}",0.9755725190839696
141186,"public HadoopExecutorArguments(final long millisSinceEpoch,final Path designPath,final Path paramPath){
  super(millisSinceEpoch);
  setHadoopWorkingPathname(designPath.getParent().toString());
  final Path logPath=new Path(designPath.getParent().toString() + ""String_Node_Str"" + getJobId());
  final Path outputPath=new Path(designPath.getParent().toString() + ""String_Node_Str"" + getJobId());
  setLogPathname(logPath.toString());
  setOutputPathname(outputPath.toString());
  setDesignPathname(designPath.toString());
  setWorkflowPathname(paramPath.toString());
}","public HadoopExecutorArguments(final long millisSinceEpoch,final Path paramPath,final Path designPath,final Path destPath){
  super(millisSinceEpoch);
  setHadoopWorkingPathname(designPath.getParent().toString());
  final Path logPath=new Path(designPath.getParent().toString() + ""String_Node_Str"" + getJobId());
  final Path outputPath=new Path(designPath.getParent().toString() + ""String_Node_Str"" + getJobId());
  setLogPathname(logPath.toString());
  setOutputPathname(outputPath.toString());
  setDesignPathname(designPath.toString());
  setWorkflowPathname(paramPath.toString());
  setLocalWorkingPathname(new File(""String_Node_Str"").getAbsolutePath());
  setHadoopWorkingPathname(destPath.toString());
}",0.8707909162098669
141187,"/** 
 * Run Eoulsan in hadoop mode
 * @param workflowPathname workflow file path
 * @param designPathname design file path
 * @param destPathname data path
 * @param jobDescription job description
 * @param jobEnvironment job environment
 * @param millisSinceEpoch milliseconds since epoch
 * @param uploadOnly true if execution must end after upload
 */
private static final void run(final String workflowPathname,final String designPathname,final String destPathname,final String jobDescription,final String jobEnvironment,final boolean uploadOnly,final long millisSinceEpoch){
  checkNotNull(workflowPathname,""String_Node_Str"");
  checkNotNull(designPathname,""String_Node_Str"");
  checkNotNull(destPathname,""String_Node_Str"");
  final String desc;
  final String env;
  if (jobDescription == null) {
    desc=""String_Node_Str"";
  }
 else {
    desc=jobDescription;
  }
  if (jobEnvironment == null) {
    env=""String_Node_Str"";
  }
 else {
    env=jobEnvironment;
  }
  try {
    final Configuration conf=((HadoopEoulsanRuntime)EoulsanRuntime.getRuntime()).getConfiguration();
    final URI paramURI;
    if (workflowPathname.indexOf(""String_Node_Str"") != -1)     paramURI=new URI(workflowPathname);
 else     paramURI=new File(workflowPathname).getAbsoluteFile().toURI();
    final URI designURI;
    if (designPathname.indexOf(""String_Node_Str"") != -1)     designURI=new URI(designPathname);
 else     designURI=new File(designPathname).getAbsoluteFile().toURI();
    final URI destURI=new URI(destPathname);
    final Path paramPath=new Path(paramURI.toString());
    final Path designPath=new Path(designURI.toString());
    FileSystem paramFs=paramPath.getFileSystem(conf);
    if (!paramFs.exists(paramPath))     throw new FileNotFoundException(paramPath.toString());
    FileSystem designFs=designPath.getFileSystem(conf);
    if (!designFs.exists(designPath))     throw new FileNotFoundException(designPath.toString());
    final ExecutorArguments arguments=new HadoopExecutorArguments(millisSinceEpoch,paramPath,designPath);
    arguments.setJobDescription(desc);
    arguments.setJobEnvironment(env);
    Main.getInstance().createLogFileAndFlushLog(arguments.getLogPathname() + File.separator + ""String_Node_Str"");
    final Executor e=new Executor(arguments);
    final Step uploadStep=new HadoopUploadStep(new DataFile(destURI.toString()),conf);
    final List<Step> firstSteps;
    if (uploadOnly) {
      firstSteps=Arrays.asList(new Step[]{uploadStep,new TerminalStep(),new CopyDesignAndWorkflowFilesToOutputStep()});
    }
 else {
      firstSteps=Arrays.asList(uploadStep,new CopyDesignAndWorkflowFilesToOutputStep());
    }
    final List<Step> lastSteps=Collections.singletonList((Step)new HDFSDataDownloadStep());
    e.execute(firstSteps,lastSteps);
  }
 catch (  FileNotFoundException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
catch (  EoulsanException e) {
    Common.errorExit(e,""String_Node_Str"" + Globals.APP_NAME_LOWER_CASE + ""String_Node_Str""+ e.getMessage());
  }
catch (  EoulsanRuntimeException e) {
    Common.errorExit(e,""String_Node_Str"" + Globals.APP_NAME_LOWER_CASE + ""String_Node_Str""+ e.getMessage());
  }
catch (  IOException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
catch (  URISyntaxException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Run Eoulsan in hadoop mode
 * @param workflowPathname workflow file path
 * @param designPathname design file path
 * @param destPathname data path
 * @param jobDescription job description
 * @param jobEnvironment job environment
 * @param millisSinceEpoch milliseconds since epoch
 * @param uploadOnly true if execution must end after upload
 */
private static final void run(final String workflowPathname,final String designPathname,final String destPathname,final String jobDescription,final String jobEnvironment,final boolean uploadOnly,final long millisSinceEpoch){
  checkNotNull(workflowPathname,""String_Node_Str"");
  checkNotNull(designPathname,""String_Node_Str"");
  checkNotNull(destPathname,""String_Node_Str"");
  final String desc;
  final String env;
  if (jobDescription == null) {
    desc=""String_Node_Str"";
  }
 else {
    desc=jobDescription;
  }
  if (jobEnvironment == null) {
    env=""String_Node_Str"";
  }
 else {
    env=jobEnvironment;
  }
  try {
    final Configuration conf=((HadoopEoulsanRuntime)EoulsanRuntime.getRuntime()).getConfiguration();
    final URI paramURI;
    if (workflowPathname.indexOf(""String_Node_Str"") != -1)     paramURI=new URI(workflowPathname);
 else     paramURI=new File(workflowPathname).getAbsoluteFile().toURI();
    final URI designURI;
    if (designPathname.indexOf(""String_Node_Str"") != -1)     designURI=new URI(designPathname);
 else     designURI=new File(designPathname).getAbsoluteFile().toURI();
    final URI destURI=new URI(destPathname);
    final Path paramPath=new Path(paramURI.toString());
    final Path designPath=new Path(designURI.toString());
    final Path destPath=new Path(destURI.toString());
    FileSystem paramFs=paramPath.getFileSystem(conf);
    if (!paramFs.exists(paramPath))     throw new FileNotFoundException(paramPath.toString());
    FileSystem designFs=designPath.getFileSystem(conf);
    if (!designFs.exists(designPath))     throw new FileNotFoundException(designPath.toString());
    final ExecutorArguments arguments=new HadoopExecutorArguments(millisSinceEpoch,paramPath,designPath,destPath);
    arguments.setJobDescription(desc);
    arguments.setJobEnvironment(env);
    Main.getInstance().createLogFileAndFlushLog(arguments.getLogPathname() + File.separator + ""String_Node_Str"");
    final Executor e=new Executor(arguments);
    final Step uploadStep=new HadoopUploadStep(new DataFile(destURI.toString()),conf);
    final List<Step> firstSteps;
    if (uploadOnly) {
      firstSteps=Arrays.asList(new Step[]{uploadStep,new TerminalStep(),new CopyDesignAndWorkflowFilesToOutputStep()});
    }
 else {
      firstSteps=Arrays.asList(uploadStep,new CopyDesignAndWorkflowFilesToOutputStep());
    }
    final List<Step> lastSteps=Collections.singletonList((Step)new HDFSDataDownloadStep());
    e.execute(firstSteps,lastSteps);
  }
 catch (  FileNotFoundException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
catch (  EoulsanException e) {
    Common.errorExit(e,""String_Node_Str"" + Globals.APP_NAME_LOWER_CASE + ""String_Node_Str""+ e.getMessage());
  }
catch (  EoulsanRuntimeException e) {
    Common.errorExit(e,""String_Node_Str"" + Globals.APP_NAME_LOWER_CASE + ""String_Node_Str""+ e.getMessage());
  }
catch (  IOException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
catch (  URISyntaxException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
}",0.990717548254015
141188,"@Override public void run(){
  resultWrapper.add(step.execute());
  System.out.println(""String_Node_Str"");
}","@Override public void run(){
  resultWrapper.add(step.execute());
}",0.7657142857142857
141189,"/** 
 * Launch the step and create a log file for each step.
 * @param step step
 * @return the step result object
 * @throws EoulsanException if an Interrupted exception occurs
 */
private StepResult executeStep(final AbstractWorkflowStep step) throws EoulsanException {
  final String threadGroupName=""String_Node_Str"" + step.getNumber();
  final ThreadGroup threadGroup=new ThreadGroup(threadGroupName);
  final Logger logger=step.isCreateLogFiles() ? createStepLogger(step,threadGroupName) : null;
  if (logger != null)   EoulsanLogger.registerThreadGroupLogger(threadGroup,logger);
  final List<StepResult> resultWrapper=Lists.newArrayList();
  final Runnable r=new Runnable(){
    @Override public void run(){
      resultWrapper.add(step.execute());
      System.out.println(""String_Node_Str"");
    }
  }
;
  try {
    final Thread thread=new Thread(threadGroup,r);
    thread.start();
    System.out.println(""String_Node_Str"");
    thread.join();
    System.out.println(""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    throw new EoulsanException(e.getMessage());
  }
 finally {
    if (logger != null) {
      Handler handler=logger.getHandlers()[0];
      handler.close();
      EoulsanLogger.removeThreadGroupLogger(threadGroup);
      logger.removeHandler(handler);
    }
  }
  return resultWrapper.get(0);
}","/** 
 * Launch the step and create a log file for each step.
 * @param step step
 * @return the step result object
 * @throws EoulsanException if an Interrupted exception occurs
 */
private StepResult executeStep(final AbstractWorkflowStep step) throws EoulsanException {
  final String threadGroupName=""String_Node_Str"" + step.getNumber();
  final ThreadGroup threadGroup=new ThreadGroup(threadGroupName);
  final Logger logger=step.isCreateLogFiles() ? createStepLogger(step,threadGroupName) : null;
  if (logger != null)   EoulsanLogger.registerThreadGroupLogger(threadGroup,logger);
  final List<StepResult> resultWrapper=Lists.newArrayList();
  final Runnable r=new Runnable(){
    @Override public void run(){
      resultWrapper.add(step.execute());
    }
  }
;
  try {
    final Thread thread=new Thread(threadGroup,r);
    thread.start();
    thread.join();
  }
 catch (  InterruptedException e) {
    throw new EoulsanException(e.getMessage());
  }
 finally {
    if (logger != null) {
      Handler handler=logger.getHandlers()[0];
      handler.close();
      EoulsanLogger.removeThreadGroupLogger(threadGroup);
      logger.removeHandler(handler);
    }
  }
  return resultWrapper.get(0);
}",0.9389042175798188
141190,"/** 
 * Add a dependency for this step.
 * @param step the dependency
 */
protected void addDependency(final AbstractWorkflowStep step){
  Preconditions.checkNotNull(step,""String_Node_Str"");
  if (this.getWorkflow() != step.getWorkflow())   throw new EoulsanRuntimeException(""String_Node_Str"");
  this.requieredSteps.add(step);
  step.stepsToInform.add(this);
}","/** 
 * Add a dependency for this step.
 * @param step the dependency
 */
protected void addDependency(final AbstractWorkflowStep step){
  checkNotNull(step,""String_Node_Str"");
  if (step == this)   throw new EoulsanRuntimeException(""String_Node_Str"" + step.getId());
  if (this.getWorkflow() != step.getWorkflow())   throw new EoulsanRuntimeException(""String_Node_Str"");
  this.requieredSteps.add(step);
  step.stepsToInform.add(this);
}",0.8685857321652065
141191,"/** 
 * Get the file count for an input step of the step.
 * @param portName name of the output port that generate file
 * @param sample sample sample that correspond to the file
 * @param existingFiles if true return the number of files that really existsotherwise the maximum of files.
 * @return the count of intput DataFiles
 */
int getInputDataFileCount(final String portName,final Sample sample,final boolean existingFiles){
  Preconditions.checkNotNull(portName,""String_Node_Str"");
  Preconditions.checkNotNull(sample,""String_Node_Str"");
  if (!getInputPorts().contains(portName))   throw new EoulsanRuntimeException(""String_Node_Str"" + portName);
  final WorkflowInputPort port=getInputPorts().getPort(portName);
  if (!port.isLinked())   throw new EoulsanRuntimeException(""String_Node_Str"" + portName + ""String_Node_Str""+ getId()+ ""String_Node_Str"");
  return port.getLink().getDataFileCount(sample,existingFiles);
}","/** 
 * Get the file count for an input step of the step.
 * @param portName name of the output port that generate file
 * @param sample sample sample that correspond to the file
 * @param existingFiles if true return the number of files that really existsotherwise the maximum of files.
 * @return the count of intput DataFiles
 */
int getInputDataFileCount(final String portName,final Sample sample,final boolean existingFiles){
  checkNotNull(portName,""String_Node_Str"");
  checkNotNull(sample,""String_Node_Str"");
  if (!getInputPorts().contains(portName))   throw new EoulsanRuntimeException(""String_Node_Str"" + portName);
  final WorkflowInputPort port=getInputPorts().getPort(portName);
  if (!port.isLinked())   throw new EoulsanRuntimeException(""String_Node_Str"" + portName + ""String_Node_Str""+ getId()+ ""String_Node_Str"");
  return port.getLink().getDataFileCount(sample,existingFiles);
}",0.9495060373216246
141192,"/** 
 * Initialization Eoulsan runtime for external application who needed Eoulsan
 * @throws IOException
 * @throws EoulsanException
 */
public static void initEoulsanRuntimeForExternalApp() throws IOException, EoulsanException {
  if (!EoulsanRuntime.isRuntime())   newEoulsanRuntime(new Settings(true));
  Logger.getLogger(Globals.APP_NAME).setLevel(Level.OFF);
}","/** 
 * Initialization Eoulsan runtime for external application who needed Eoulsan
 * @throws IOException
 * @throws EoulsanException
 */
public static void initEoulsanRuntimeForExternalApp() throws IOException, EoulsanException {
  if (!EoulsanRuntime.isRuntime())   newEoulsanRuntime(new Settings(true));
  final Handler[] handlers=EoulsanLogger.getLogger().getHandlers();
  if (handlers != null)   for (  Handler handler : handlers)   handler.setLevel(Level.OFF);
}",0.8393285371702638
141193,"@Override public void run(){
  if (parserLine != null) {
    try {
      InputStream is=p.getInputStream();
      BufferedReader buff=new BufferedReader(new InputStreamReader(is));
      String line=""String_Node_Str"";
      while ((line=buff.readLine()) != null) {
        parserLine.parseLine(line);
      }
      buff.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  if (parserLine != null) {
    try {
      InputStream is=p.getInputStream();
      BufferedReader buff=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
      String line=""String_Node_Str"";
      while ((line=buff.readLine()) != null) {
        parserLine.parseLine(line);
      }
      buff.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.924574209245742
141194,"/** 
 * create a processBuilder for execute command and include a thread for get output stream which redirect to parserLine and a second thread for get error stream
 * @param cmd line command
 * @param temporaryDirectory
 * @param parserLine SAMParserLine which retrieve output stream
 * @return integer exit value for the process
 * @throws IOException if an error occurs while executing the command
 */
protected int sh(final List<String> cmd,final File temporaryDirectory,final SAMParserLine parserLine) throws IOException {
  ProcessBuilder pb;
  final Process p;
  int exitValue=Integer.MAX_VALUE;
  try {
    pb=new ProcessBuilder(cmd);
    if (!(temporaryDirectory == null))     pb.directory(temporaryDirectory);
    LOGGER.fine(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ cmd.toString());
    p=pb.start();
    final Thread tout=new Thread(new Runnable(){
      @Override public void run(){
        if (parserLine != null) {
          try {
            InputStream is=p.getInputStream();
            BufferedReader buff=new BufferedReader(new InputStreamReader(is));
            String line=""String_Node_Str"";
            while ((line=buff.readLine()) != null) {
              parserLine.parseLine(line);
            }
            buff.close();
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
    }
);
    tout.start();
    final Thread terr=new Thread(new ProcessThreadErrOutput(p.getErrorStream()));
    terr.start();
    tout.join();
    terr.join();
    exitValue=p.waitFor();
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"" + e.getMessage());
  }
  return exitValue;
}","/** 
 * create a processBuilder for execute command and include a thread for get output stream which redirect to parserLine and a second thread for get error stream
 * @param cmd line command
 * @param temporaryDirectory
 * @param parserLine SAMParserLine which retrieve output stream
 * @return integer exit value for the process
 * @throws IOException if an error occurs while executing the command
 */
protected int sh(final List<String> cmd,final File temporaryDirectory,final SAMParserLine parserLine) throws IOException {
  ProcessBuilder pb;
  final Process p;
  int exitValue=Integer.MAX_VALUE;
  try {
    pb=new ProcessBuilder(cmd);
    if (!(temporaryDirectory == null))     pb.directory(temporaryDirectory);
    LOGGER.fine(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ cmd.toString());
    p=pb.start();
    final Thread tout=new Thread(new Runnable(){
      @Override public void run(){
        if (parserLine != null) {
          try {
            InputStream is=p.getInputStream();
            BufferedReader buff=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
            String line=""String_Node_Str"";
            while ((line=buff.readLine()) != null) {
              parserLine.parseLine(line);
            }
            buff.close();
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
    }
);
    tout.start();
    final Thread terr=new Thread(new ProcessThreadErrOutput(p.getErrorStream()));
    terr.start();
    tout.join();
    terr.join();
    exitValue=p.waitFor();
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"" + e.getMessage());
  }
  return exitValue;
}",0.994733762434172
141195,"/** 
 * Create a step for a standard step.
 * @param workflow workflow of the step
 * @param id identifier of the step
 * @param step Step object
 * @param skip true to skip execution of the step
 * @param copyResultsToOutput copy step result to output directory
 * @param parameters parameters of the step
 * @throws EoulsanException id an error occurs while creating the step
 */
protected AbstractWorkflowStep(final AbstractWorkflow workflow,final String id,final String stepName,final boolean skip,final boolean copyResultsToOutput,final DataFile workingDir,final Set<Parameter> parameters) throws EoulsanException {
  Preconditions.checkNotNull(workflow,""String_Node_Str"");
  Preconditions.checkNotNull(id,""String_Node_Str"");
  Preconditions.checkNotNull(stepName,""String_Node_Str"");
  Preconditions.checkNotNull(workingDir,""String_Node_Str"");
  Preconditions.checkNotNull(parameters,""String_Node_Str"");
  if (!(workingDir.equals(workflow.getOutputDir()) || workingDir.equals(workflow.getLocalWorkingDir()) || workingDir.equals(workflow.getHadoopWorkingDir()))) {
    throw new IllegalArgumentException(""String_Node_Str"" + workingDir);
  }
  this.workflow=workflow;
  this.stepContext=new WorkflowStepContext(workflow.getWorkflowContext(),this);
  this.id=id;
  this.skip=skip;
  this.type=StepType.STANDARD_STEP;
  this.stepName=stepName;
  this.copyResultsToOutput=copyResultsToOutput;
  final Step step=StepInstances.getInstance().getStep(this,stepName);
  this.mode=EoulsanMode.getEoulsanMode(step.getClass());
  this.parameters=Sets.newLinkedHashSet(parameters);
  this.terminalStep=step.isTerminalStep();
  this.createLogFiles=step.isCreateLogFiles();
  this.workingDir=workingDir;
  this.workflow.register(this);
}","/** 
 * Create a step for a standard step.
 * @param workflow workflow of the step
 * @param id identifier of the step
 * @param step Step object
 * @param skip true to skip execution of the step
 * @param copyResultsToOutput copy step result to output directory
 * @param parameters parameters of the step
 * @throws EoulsanException id an error occurs while creating the step
 */
protected AbstractWorkflowStep(final AbstractWorkflow workflow,final String id,final String stepName,final boolean skip,final boolean copyResultsToOutput,final DataFile workingDir,final Set<Parameter> parameters) throws EoulsanException {
  Preconditions.checkNotNull(workflow,""String_Node_Str"");
  Preconditions.checkNotNull(id,""String_Node_Str"");
  Preconditions.checkNotNull(stepName,""String_Node_Str"");
  Preconditions.checkNotNull(workingDir,""String_Node_Str"");
  Preconditions.checkNotNull(parameters,""String_Node_Str"");
  if (!(workingDir.equals(workflow.getOutputDir()) || workingDir.equals(workflow.getLocalWorkingDir()) || workingDir.equals(workflow.getHadoopWorkingDir()))) {
    throw new IllegalArgumentException(""String_Node_Str"" + workingDir);
  }
  this.workflow=workflow;
  this.stepContext=new WorkflowStepContext(workflow.getWorkflowContext(),this);
  this.number=instanceCounter++;
  this.id=id;
  this.skip=skip;
  this.type=StepType.STANDARD_STEP;
  this.stepName=stepName;
  this.copyResultsToOutput=copyResultsToOutput;
  final Step step=StepInstances.getInstance().getStep(this,stepName);
  this.mode=EoulsanMode.getEoulsanMode(step.getClass());
  this.parameters=Sets.newLinkedHashSet(parameters);
  this.terminalStep=step.isTerminalStep();
  this.createLogFiles=step.isCreateLogFiles();
  this.workingDir=workingDir;
  this.workflow.register(this);
}",0.9905308464849354
141196,"/** 
 * Run checker (runs only for Design step).
 * @param status step status
 * @return a StepResult object
 */
private void configureCheckerStep(final StepStatus status){
  if (getType() != CHECKER_STEP)   return;
  final CheckerStep checkerStep=(CheckerStep)StepInstances.getInstance().getStep(this);
  final Set<WorkflowStepOutputDataFile> files=getWorkflow().getWorkflowFilesAtRootStep().getInputFiles();
  final Design design=this.getWorkflow().getDesign();
  if (design.getSampleCount() == 0)   return;
  for (  WorkflowStepOutputDataFile file : files)   if (file.getFormat().isChecker()) {
    checkerStep.addChecker(file.getFormat().getChecker());
  }
}","/** 
 * Run checker (runs only for Design step).
 * @param status step status
 */
private void configureCheckerStep(final StepStatus status){
  if (getType() != CHECKER_STEP)   return;
  final CheckerStep checkerStep=(CheckerStep)StepInstances.getInstance().getStep(this);
  final Set<WorkflowStepOutputDataFile> files=getWorkflow().getWorkflowFilesAtRootStep().getInputFiles();
  final Design design=this.getWorkflow().getDesign();
  if (design.getSampleCount() == 0)   return;
  for (  WorkflowStepOutputDataFile file : files)   if (file.getFormat().isChecker()) {
    checkerStep.addChecker(file.getFormat().getChecker());
  }
}",0.9760247486465584
141197,"/** 
 * Define the working directory of the step.
 * @param workflow the workflow
 * @param step step instance
 * @return the working directory of the step
 */
private static final DataFile defineWorkingDirectory(final AbstractWorkflow workflow,final Step step,final boolean copyResultsToOutput){
  final boolean hadoopMode=EoulsanRuntime.getRuntime().isHadoopMode();
  if (!hadoopMode) {
    if (copyResultsToOutput)     return workflow.getOutputDir();
 else     return workflow.getLocalWorkingDir();
  }
switch (EoulsanMode.getEoulsanMode(step.getClass())) {
case HADOOP_COMPATIBLE:
    if (copyResultsToOutput)     return workflow.getOutputDir();
 else     return workflow.getHadoopWorkingDir();
case HADOOP_ONLY:
  return workflow.getHadoopWorkingDir();
default :
return workflow.getLocalWorkingDir();
}
}","/** 
 * Define the working directory of the step.
 * @param workflow the workflow
 * @param step step instance
 * @return the working directory of the step
 */
private static final DataFile defineWorkingDirectory(final AbstractWorkflow workflow,final Step step,final boolean copyResultsToOutput){
  final boolean hadoopMode=EoulsanRuntime.getRuntime().isHadoopMode();
  if (!hadoopMode) {
    if (copyResultsToOutput)     return workflow.getOutputDir();
    return workflow.getLocalWorkingDir();
  }
switch (EoulsanMode.getEoulsanMode(step.getClass())) {
case HADOOP_COMPATIBLE:
    if (copyResultsToOutput)     return workflow.getOutputDir();
  return workflow.getHadoopWorkingDir();
case HADOOP_ONLY:
return workflow.getHadoopWorkingDir();
default :
return workflow.getLocalWorkingDir();
}
}",0.9900124843945068
141198,"/** 
 * Search dependency between steps.
 * @throws EoulsanException if an error occurs while search dependencies
 */
private void searchDependencies() throws EoulsanException {
  final Set<DataFormat> dataFormatsFromDesign=getDesignDataFormats();
  final List<CommandWorkflowStep> steps=this.steps;
  for (int i=steps.size() - 1; i >= 0; i--) {
    final CommandWorkflowStep step=steps.get(i);
    if (step.getInputDataFormats().isEmpty() && i > 0)     step.addDependency(steps.get(i - 1));
    for (    DataFormat format : step.getInputDataFormats()) {
      if (step.isDependencySet(format))       continue;
      boolean found=false;
      for (int j=i - 1; j >= 0; j--) {
        final CommandWorkflowStep stepTested=steps.get(j);
        if ((stepTested.getType() == StepType.STANDARD_STEP || stepTested.getType() == StepType.GENERATOR_STEP) && stepTested.getOutputDataFormats().contains(format)) {
          addDependency(step,format,stepTested);
          found=true;
          break;
        }
        if (stepTested.getType() == StepType.DESIGN_STEP && dataFormatsFromDesign.contains(format)) {
          addDependency(step,format,stepTested);
          found=true;
          break;
        }
      }
      if (!found) {
        if (format.isGenerator()) {
          if (!this.generatorAdded.containsKey(format)) {
            final CommandWorkflowStep generatorStep=new CommandWorkflowStep(this,format);
            generatorStep.configure();
            addStep(indexOfStep(getCheckerStep()) + 1,generatorStep);
            this.generatorAdded.put(format,generatorStep);
            searchDependencies();
            return;
          }
 else {
            if (step.getType() == StepType.GENERATOR_STEP) {
              Collections.swap(this.steps,indexOfStep(step),indexOfStep(this.generatorAdded.get(format)));
              searchDependencies();
              return;
            }
 else             throw new EoulsanException(""String_Node_Str"" + format.getName() + ""String_Node_Str""+ step.getId()+ ""String_Node_Str"");
          }
        }
 else         throw new EoulsanException(""String_Node_Str"" + format.getName() + ""String_Node_Str""+ step.getId()+ ""String_Node_Str"");
      }
    }
  }
  this.generatorAdded.clear();
  final List<CommandWorkflowStep> terminalSteps=Lists.newArrayList();
  for (  CommandWorkflowStep step : this.steps) {
    for (    CommandWorkflowStep terminalStep : terminalSteps)     step.addDependency(terminalStep);
    if (step.isTerminalStep())     terminalSteps.add(step);
  }
  for (  CommandWorkflowStep step : Lists.newArrayList(this.steps)) {
    if (step.isCopyResultsToOutput() && !step.getStepWorkingDir().equals(getOutputDir())) {
      CommandWorkflowStep newStep=newOutputFormatCopyStep(this,step.getId(),getOutputDir(),step.getOutputDataFormats());
      addStep(indexOfStep(step) + 1,newStep);
      for (      DataFormat format : step.getOutputDataFormats())       newStep.addDependency(format,step);
    }
  }
}","/** 
 * Search dependency between steps.
 * @throws EoulsanException if an error occurs while search dependencies
 */
private void searchDependencies() throws EoulsanException {
  final Set<DataFormat> dataFormatsFromDesign=getDesignDataFormats();
  final List<CommandWorkflowStep> steps=this.steps;
  for (int i=steps.size() - 1; i >= 0; i--) {
    final CommandWorkflowStep step=steps.get(i);
    if (step.getInputDataFormats().isEmpty() && i > 0)     step.addDependency(steps.get(i - 1));
    for (    DataFormat format : step.getInputDataFormats()) {
      if (step.isDependencySet(format))       continue;
      boolean found=false;
      for (int j=i - 1; j >= 0; j--) {
        final CommandWorkflowStep stepTested=steps.get(j);
        if ((stepTested.getType() == StepType.STANDARD_STEP || stepTested.getType() == StepType.GENERATOR_STEP) && stepTested.getOutputDataFormats().contains(format)) {
          addDependency(step,format,stepTested);
          found=true;
          break;
        }
        if (stepTested.getType() == StepType.DESIGN_STEP && dataFormatsFromDesign.contains(format)) {
          addDependency(step,format,stepTested);
          found=true;
          break;
        }
      }
      if (!found) {
        if (format.isGenerator()) {
          if (!this.generatorAdded.containsKey(format)) {
            final CommandWorkflowStep generatorStep=new CommandWorkflowStep(this,format);
            generatorStep.configure();
            addStep(indexOfStep(getCheckerStep()) + 1,generatorStep);
            this.generatorAdded.put(format,generatorStep);
            searchDependencies();
            return;
          }
          if (step.getType() == StepType.GENERATOR_STEP) {
            Collections.swap(this.steps,indexOfStep(step),indexOfStep(this.generatorAdded.get(format)));
            searchDependencies();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + format.getName() + ""String_Node_Str""+ step.getId()+ ""String_Node_Str"");
        }
      }
    }
  }
  this.generatorAdded.clear();
  final List<CommandWorkflowStep> terminalSteps=Lists.newArrayList();
  for (  CommandWorkflowStep step : this.steps) {
    for (    CommandWorkflowStep terminalStep : terminalSteps)     step.addDependency(terminalStep);
    if (step.isTerminalStep())     terminalSteps.add(step);
  }
  for (  CommandWorkflowStep step : Lists.newArrayList(this.steps)) {
    if (step.isCopyResultsToOutput() && !step.getStepWorkingDir().equals(getOutputDir())) {
      CommandWorkflowStep newStep=newOutputFormatCopyStep(this,step.getId(),step.getOutputDataFormats());
      addStep(indexOfStep(step) + 1,newStep);
      for (      DataFormat format : step.getOutputDataFormats())       newStep.addDependency(format,step);
    }
  }
}",0.9649061848505908
141199,"/** 
 * Add a dependency. Add an additional step that copy/(un)compress data if necessary.
 * @param step the step
 * @param format format provided by the dependency
 * @param dependency the dependency
 * @throws EoulsanException if an error occurs while adding the dependency
 */
private void addDependency(final AbstractWorkflowStep step,final DataFormat format,final AbstractWorkflowStep dependency) throws EoulsanException {
  try {
    final DataFile stepDir=step.getStepWorkingDir();
    final DataFile depDir=dependency.getStepWorkingDir();
    final DataProtocol stepProtocol=stepDir.getProtocol();
    final DataProtocol depProtocol=depDir.getProtocol();
    final EnumSet<CompressionType> stepCompressionsAllowed=step.getInputDataFormatCompressionsAllowed(format);
    final CompressionType depOutputCompression=dependency == getDesignStep() ? CompressionType.NONE : dependency.getOutputDataFormatCompression(format);
    final Set<DataFormat> stepFormatRequieredWD=step.getInputFormatsRequieredInWorkingDirectory();
    CommandWorkflowStep newStep=null;
    if (step.getType() == StepType.STANDARD_STEP && stepProtocol != depProtocol && stepFormatRequieredWD.contains(format)) {
      newStep=newInputFormatCopyStep(this,step.getId(),stepDir,format,depOutputCompression,stepCompressionsAllowed);
    }
    if (newStep == null && step.getType() == StepType.STANDARD_STEP && !stepCompressionsAllowed.contains(depOutputCompression)) {
      newStep=newInputFormatCopyStep(this,step.getId(),stepDir,format,depOutputCompression,stepCompressionsAllowed);
    }
    if (newStep == null && step.getType() == StepType.STANDARD_STEP && dependency == this.getDesignStep() && !EnumSet.allOf(CompressionType.class).containsAll(stepCompressionsAllowed)) {
      newStep=newInputFormatCopyStep(this,step.getId(),stepDir,format,depOutputCompression,stepCompressionsAllowed);
    }
    if (newStep != null) {
      addStep(indexOfStep(step),newStep);
      newStep.addDependency(format,dependency);
      step.addDependency(format,newStep);
    }
 else {
      step.addDependency(format,dependency);
    }
  }
 catch (  IOException e) {
    throw new EoulsanException(e.getMessage());
  }
}","/** 
 * Add a dependency. Add an additional step that copy/(un)compress data if necessary.
 * @param step the step
 * @param format format provided by the dependency
 * @param dependency the dependency
 * @throws EoulsanException if an error occurs while adding the dependency
 */
private void addDependency(final AbstractWorkflowStep step,final DataFormat format,final AbstractWorkflowStep dependency) throws EoulsanException {
  try {
    final DataFile stepDir=step.getStepWorkingDir();
    final DataFile depDir=dependency.getStepWorkingDir();
    final DataProtocol stepProtocol=stepDir.getProtocol();
    final DataProtocol depProtocol=depDir.getProtocol();
    final EnumSet<CompressionType> stepCompressionsAllowed=step.getInputDataFormatCompressionsAllowed(format);
    final CompressionType depOutputCompression=dependency == getDesignStep() ? CompressionType.NONE : dependency.getOutputDataFormatCompression(format);
    final Set<DataFormat> stepFormatRequieredWD=step.getInputFormatsRequieredInWorkingDirectory();
    CommandWorkflowStep newStep=null;
    if (step.getType() == StepType.STANDARD_STEP && stepProtocol != depProtocol && stepFormatRequieredWD.contains(format)) {
      newStep=newInputFormatCopyStep(this,step.getId(),format,depOutputCompression,stepCompressionsAllowed);
    }
    if (newStep == null && step.getType() == StepType.STANDARD_STEP && !stepCompressionsAllowed.contains(depOutputCompression)) {
      newStep=newInputFormatCopyStep(this,step.getId(),format,depOutputCompression,stepCompressionsAllowed);
    }
    if (newStep == null && step.getType() == StepType.STANDARD_STEP && dependency == this.getDesignStep() && !EnumSet.allOf(CompressionType.class).containsAll(stepCompressionsAllowed)) {
      newStep=newInputFormatCopyStep(this,step.getId(),format,depOutputCompression,stepCompressionsAllowed);
    }
    if (newStep != null) {
      addStep(indexOfStep(step),newStep);
      newStep.addDependency(format,dependency);
      step.addDependency(format,newStep);
    }
 else {
      step.addDependency(format,dependency);
    }
  }
 catch (  IOException e) {
    throw new EoulsanException(e.getMessage());
  }
}",0.994475138121547
141200,"/** 
 * Create a new step that copy/(un)compress input data of a step.
 * @param workflow workflow where adding the step
 * @param oriStepId id of the step that required copying data
 * @param format format of the data
 * @param inputCompression compression format of the data to read
 * @param outputCompressionAllowed compression formats allowed by the step
 * @return a new step
 * @throws EoulsanException if an error occurs while creating the step
 */
private static CommandWorkflowStep newInputFormatCopyStep(final CommandWorkflow workflow,final String oriStepId,final DataFile workingDirectory,final DataFormat format,final CompressionType inputCompression,final EnumSet<CompressionType> outputCompressionAllowed) throws EoulsanException {
  final String stepName=CopyInputFormatStep.STEP_NAME;
  final Set<String> stepsIds=Sets.newHashSet();
  for (  WorkflowStep s : workflow.getSteps())   stepsIds.add(s.getId());
  int i=1;
  String stepId;
  do {
    stepId=oriStepId + ""String_Node_Str"" + i;
    i++;
  }
 while (stepsIds.contains(stepId));
  CompressionType comp=null;
  if (outputCompressionAllowed.contains(inputCompression))   comp=inputCompression;
 else   if (outputCompressionAllowed.contains(CompressionType.NONE))   comp=CompressionType.NONE;
 else   comp=outputCompressionAllowed.iterator().next();
  final Set<Parameter> parameters=Sets.newHashSet();
  parameters.add(new Parameter(CopyInputFormatStep.FORMAT_PARAMETER,format.getName()));
  parameters.add(new Parameter(CopyInputFormatStep.OUTPUT_COMPRESSION_PARAMETER,comp.name()));
  CommandWorkflowStep step=new CommandWorkflowStep(workflow,stepId,stepName,parameters,false,false);
  step.configure();
  return step;
}","/** 
 * Create a new step that copy/(un)compress input data of a step.
 * @param workflow workflow where adding the step
 * @param oriStepId id of the step that required copying data
 * @param format format of the data
 * @param inputCompression compression format of the data to read
 * @param outputCompressionAllowed compression formats allowed by the step
 * @return a new step
 * @throws EoulsanException if an error occurs while creating the step
 */
private static CommandWorkflowStep newInputFormatCopyStep(final CommandWorkflow workflow,final String oriStepId,final DataFormat format,final CompressionType inputCompression,final EnumSet<CompressionType> outputCompressionAllowed) throws EoulsanException {
  final String stepName=CopyInputFormatStep.STEP_NAME;
  final Set<String> stepsIds=Sets.newHashSet();
  for (  WorkflowStep s : workflow.getSteps())   stepsIds.add(s.getId());
  int i=1;
  String stepId;
  do {
    stepId=oriStepId + ""String_Node_Str"" + i;
    i++;
  }
 while (stepsIds.contains(stepId));
  CompressionType comp=null;
  if (outputCompressionAllowed.contains(inputCompression))   comp=inputCompression;
 else   if (outputCompressionAllowed.contains(CompressionType.NONE))   comp=CompressionType.NONE;
 else   comp=outputCompressionAllowed.iterator().next();
  final Set<Parameter> parameters=Sets.newHashSet();
  parameters.add(new Parameter(CopyInputFormatStep.FORMAT_PARAMETER,format.getName()));
  parameters.add(new Parameter(CopyInputFormatStep.OUTPUT_COMPRESSION_PARAMETER,comp.name()));
  CommandWorkflowStep step=new CommandWorkflowStep(workflow,stepId,stepName,parameters,false,false);
  step.configure();
  return step;
}",0.9904705181655749
141201,"/** 
 * Create a new step that copy output data of a step.
 * @param workflow workflow where adding the step
 * @param oriStepId id of the step that required copying data
 * @param format format of the data
 * @return a new step
 * @throws EoulsanException if an error occurs while creating the step
 */
private static CommandWorkflowStep newOutputFormatCopyStep(final CommandWorkflow workflow,final String oriStepId,final DataFile workingDirectory,final Set<DataFormat> formats) throws EoulsanException {
  final String stepName=CopyOutputFormatStep.STEP_NAME;
  final Set<String> stepsIds=Sets.newHashSet();
  for (  WorkflowStep s : workflow.getSteps())   stepsIds.add(s.getId());
  int i=1;
  String stepId;
  do {
    stepId=oriStepId + ""String_Node_Str"" + i;
    i++;
  }
 while (stepsIds.contains(stepId));
  List<String> formatsList=Lists.newArrayList();
  for (  DataFormat format : formats)   formatsList.add(format.getName());
  final Set<Parameter> parameters=Sets.newHashSet();
  parameters.add(new Parameter(CopyOutputFormatStep.FORMAT_PARAMETER,Joiner.on(',').join(formatsList)));
  CommandWorkflowStep step=new CommandWorkflowStep(workflow,stepId,stepName,parameters,false,false);
  step.configure();
  return step;
}","/** 
 * Create a new step that copy output data of a step.
 * @param workflow workflow where adding the step
 * @param oriStepId id of the step that required copying data
 * @param format format of the data
 * @return a new step
 * @throws EoulsanException if an error occurs while creating the step
 */
private static CommandWorkflowStep newOutputFormatCopyStep(final CommandWorkflow workflow,final String oriStepId,final Set<DataFormat> formats) throws EoulsanException {
  final String stepName=CopyOutputFormatStep.STEP_NAME;
  final Set<String> stepsIds=Sets.newHashSet();
  for (  WorkflowStep s : workflow.getSteps())   stepsIds.add(s.getId());
  int i=1;
  String stepId;
  do {
    stepId=oriStepId + ""String_Node_Str"" + i;
    i++;
  }
 while (stepsIds.contains(stepId));
  List<String> formatsList=Lists.newArrayList();
  for (  DataFormat format : formats)   formatsList.add(format.getName());
  final Set<Parameter> parameters=Sets.newHashSet();
  parameters.add(new Parameter(CopyOutputFormatStep.FORMAT_PARAMETER,Joiner.on(',').join(formatsList)));
  CommandWorkflowStep step=new CommandWorkflowStep(workflow,stepId,stepName,parameters,false,false);
  step.configure();
  return step;
}",0.9868529170090388
141202,"/** 
 * Get a step instance.
 * @param workflowStep workflow step
 * @return a step instance
 * @throws EoulsanException if an error occurs while loading the step
 */
public Step getStep(final WorkflowStep workflowStep,final String stepName) throws EoulsanException {
  checkNotNull(stepName,""String_Node_Str"");
  if (!this.steps.containsKey(workflowStep)) {
    final Step stepInstance=loadStep(stepName);
    if (stepInstance == null)     return null;
    registerStep(workflowStep,stepInstance);
    return stepInstance;
  }
  return this.steps.get(workflowStep);
}","/** 
 * Get a step instance.
 * @param workflowStep workflow step
 * @return a step instance
 * @throws EoulsanException if an error occurs while loading the step
 */
public Step getStep(final WorkflowStep workflowStep,final String stepName) throws EoulsanException {
  checkNotNull(stepName,""String_Node_Str"");
  if (!this.steps.containsKey(workflowStep)) {
    final Step stepInstance=loadStep(stepName);
    registerStep(workflowStep,stepInstance);
    return stepInstance;
  }
  return this.steps.get(workflowStep);
}",0.9568411386593204
141203,"@Override public void updateStepState(final WorkflowStep step,final String note){
  if (step == null)   return;
  if (this.lastStates.containsKey(step) && this.lastNotes.containsKey(step) && step.getState() == this.lastStates.get(step) && note == this.lastNotes.get(step))   return;
  for (  WorkflowStepEvent listener : this.listeners)   listener.updateStepState(step,note);
  this.lastStates.put(step,step.getState());
  this.lastNotes.put(step,note);
}","@Override public void updateStepState(final WorkflowStep step,final String note){
  if (step == null)   return;
  if (this.lastStates.containsKey(step) && this.lastNotes.containsKey(step) && step.getState() == this.lastStates.get(step) && Objects.equal(note,this.lastNotes.get(step)))   return;
  for (  WorkflowStepEvent listener : this.listeners)   listener.updateStepState(step,note);
  this.lastStates.put(step,step.getState());
  this.lastNotes.put(step,note);
}",0.9696312364425164
141204,"/** 
 * Get the DataFormat of a file from its filename
 * @param filename the filename of the file
 * @return a DataFormat or null if the DataFormat was not found
 */
public DataFormat getDataFormatFromFilename(final String filename){
  if (filename == null)   throw new NullPointerException(""String_Node_Str"");
  final String f=StringUtils.filenameWithoutCompressionExtension(filename.trim());
  final int dotPos=f.lastIndexOf('.');
  if (dotPos == -1)   return null;
  final String ext=f.substring(dotPos);
  final int underscorePos=f.lastIndexOf('_',dotPos);
  if (underscorePos != -1) {
    final String prefix=f.substring(0,underscorePos + 1);
    final DataFormat df=getDataFormatFromFilename(prefix,ext);
    if (df != null)     return df;
  }
  for (  DataFormat df : this.formats)   if (df.isDataTypeFromDesignFile())   for (  String dfExt : df.getExtensions())   if (dfExt.equals(ext))   return df;
  return null;
}","/** 
 * Get the DataFormat of a file from its filename
 * @param filename the filename of the file
 * @return a DataFormat or null if the DataFormat was not found
 */
public DataFormat getDataFormatFromFilename(final String filename){
  if (filename == null)   throw new NullPointerException(""String_Node_Str"");
  final String f=StringUtils.filenameWithoutCompressionExtension(filename.trim());
  final int dotPos=f.lastIndexOf('.');
  if (dotPos == -1)   return null;
  final String ext=f.substring(dotPos);
  final int underscorePos=f.lastIndexOf('_',dotPos);
  if (underscorePos != -1) {
    final String prefix=f.substring(0,underscorePos + 1);
    final DataFormat df=getDataFormatFromFilename(prefix,ext);
    if (df != null)     return df;
  }
  for (  DataFormat df : this.formats)   if (df.isDataFormatFromDesignFile())   for (  String dfExt : df.getExtensions())   if (dfExt.equals(ext))   return df;
  return null;
}",0.9946004319654428
141205,"private void check(final DataFormat df,final boolean callFromConstructor) throws EoulsanException {
  if (df.getName() == null)   throw new EoulsanException(""String_Node_Str"" + df.getClass().getName() + ""String_Node_Str"");
  if (!df.getName().toLowerCase().trim().equals(df.getName())) {
    throw new EoulsanException(""String_Node_Str"" + df.getClass().getName() + ""String_Node_Str"");
  }
  for (  DataFormat format : this.formats) {
    if (format.getName().equals(df.getName()))     throw new EoulsanException(""String_Node_Str"" + df.getName() + ""String_Node_Str"");
  }
  final String prefix=df.getPrefix();
  if (prefix == null)   throw new EoulsanException(""String_Node_Str"" + df.getName() + ""String_Node_Str"");
  if (prefix == null || ""String_Node_Str"".equals(prefix))   throw new EoulsanException(""String_Node_Str"" + df.getName() + ""String_Node_Str"");
  if (prefix.indexOf('\t') != -1)   throw new EoulsanException(""String_Node_Str"" + prefix);
  final List<String> extensions=df.getExtensions();
  if (extensions == null || extensions.size() == 0)   throw new EoulsanException(""String_Node_Str"");
  if (df.getDefaultExtention() == null)   throw new EoulsanException(""String_Node_Str"" + df.getName());
  boolean defaultExtensionFound=false;
  for (  String suffix : df.getExtensions()) {
    if (suffix == null)     throw new EoulsanException(""String_Node_Str"");
    if (suffix.indexOf('\t') != -1)     throw new EoulsanException(""String_Node_Str"" + suffix);
    if (suffix.equals(df.getDefaultExtention()))     defaultExtensionFound=true;
    final String key=prefix + ""String_Node_Str"" + suffix;
    if (this.mapFormats.containsKey(key)) {
      throw new EoulsanException(""String_Node_Str"" + prefix + ""String_Node_Str""+ suffix+ ""String_Node_Str"");
    }
    if (!callFromConstructor)     throw new EoulsanException(""String_Node_Str"" + df.getName() + ""String_Node_Str"");
    if (df.getDesignFieldName() != null)     this.mapDesignDataFormat.put(df.getDesignFieldName(),df);
    formats.add(df);
    this.mapFormats.put(key,df);
  }
  if (!defaultExtensionFound)   throw new EoulsanException(""String_Node_Str"" + df.getName() + ""String_Node_Str"");
}","private void check(final DataFormat df,final boolean callFromConstructor) throws EoulsanException {
  if (df.getName() == null)   throw new EoulsanException(""String_Node_Str"" + df.getClass().getName() + ""String_Node_Str"");
  if (!df.getName().toLowerCase().trim().equals(df.getName())) {
    throw new EoulsanException(""String_Node_Str"" + df.getClass().getName() + ""String_Node_Str"");
  }
  for (  DataFormat format : this.formats) {
    if (format.getName().equals(df.getName()))     throw new EoulsanException(""String_Node_Str"" + df.getName() + ""String_Node_Str"");
  }
  final String prefix=df.getPrefix();
  if (prefix == null || ""String_Node_Str"".equals(prefix))   throw new EoulsanException(""String_Node_Str"" + df.getName() + ""String_Node_Str"");
  if (prefix.indexOf('\t') != -1)   throw new EoulsanException(""String_Node_Str"" + prefix);
  final List<String> extensions=df.getExtensions();
  if (extensions == null || extensions.size() == 0)   throw new EoulsanException(""String_Node_Str"");
  if (df.getDefaultExtention() == null)   throw new EoulsanException(""String_Node_Str"" + df.getName());
  boolean defaultExtensionFound=false;
  for (  String suffix : df.getExtensions()) {
    if (suffix == null)     throw new EoulsanException(""String_Node_Str"");
    if (suffix.indexOf('\t') != -1)     throw new EoulsanException(""String_Node_Str"" + suffix);
    if (suffix.equals(df.getDefaultExtention()))     defaultExtensionFound=true;
    final String key=prefix + ""String_Node_Str"" + suffix;
    if (this.mapFormats.containsKey(key)) {
      throw new EoulsanException(""String_Node_Str"" + prefix + ""String_Node_Str""+ suffix+ ""String_Node_Str"");
    }
    if (!callFromConstructor)     throw new EoulsanException(""String_Node_Str"" + df.getName() + ""String_Node_Str"");
    if (df.getDesignFieldName() != null)     this.mapDesignDataFormat.put(df.getDesignFieldName(),df);
    formats.add(df);
    this.mapFormats.put(key,df);
  }
  if (!defaultExtensionFound)   throw new EoulsanException(""String_Node_Str"" + df.getName() + ""String_Node_Str"");
}",0.5619047619047619
141206,"private final boolean isValidLineAndSaveSAMHeader(final String line,final Context context) throws IOException {
  if (line.length() == 0)   return false;
  if (line.charAt(0) != '@') {
    if (this.headers != null) {
      final Path outputPath=new Path(context.getConfiguration().get(""String_Node_Str""));
      final Path headerPath=new Path(outputPath,SAM_HEADER_FILE_PREFIX + context.getTaskAttemptID().toString());
      final Writer writer=new OutputStreamWriter(PathUtils.createOutputStream(headerPath,context.getConfiguration()));
      for (      String l : this.headers)       writer.write(l + ""String_Node_Str"");
      writer.close();
      this.headers=null;
    }
    return true;
  }
  if (this.headers == null)   this.headers=Lists.newArrayList();
  this.headers.add(line);
  return false;
}","private final boolean isValidLineAndSaveSAMHeader(final String line,final Context context) throws IOException {
  if (line.length() == 0)   return false;
  if (line.charAt(0) != '@') {
    if (this.headers != null) {
      final Path outputPath=new Path(context.getConfiguration().get(""String_Node_Str""));
      final Path headerPath=new Path(outputPath,SAM_HEADER_FILE_PREFIX + context.getTaskAttemptID().toString());
      final Writer writer=new OutputStreamWriter(PathUtils.createOutputStream(headerPath,context.getConfiguration()),""String_Node_Str"");
      for (      String l : this.headers)       writer.write(l + ""String_Node_Str"");
      writer.close();
      this.headers=null;
    }
    return true;
  }
  if (this.headers == null)   this.headers=Lists.newArrayList();
  this.headers.add(line);
  return false;
}",0.9054054054054054
141207,"@Override protected void setup(final Context context) throws IOException, InterruptedException {
  final Configuration conf=context.getConfiguration();
  if (!EoulsanRuntime.isRuntime()) {
    HadoopEoulsanRuntime.newEoulsanRuntime(conf);
  }
  this.counterGroup=conf.get(Globals.PARAMETER_PREFIX + ""String_Node_Str"");
  if (this.counterGroup == null) {
    throw new IOException(""String_Node_Str"");
  }
  final String genomeDescFile=conf.get(GENOME_DESC_PATH_KEY);
  if (genomeDescFile == null) {
    throw new IOException(""String_Node_Str"");
  }
  final GenomeDescription genomeDescription=GenomeDescription.load(new DataFile(genomeDescFile).open());
  this.parser.setGenomeDescription(genomeDescription);
  try {
    final MultiReadAlignmentsFilterBuilder mrafb=new MultiReadAlignmentsFilterBuilder();
    mrafb.addParameters(jobConfToParameters(conf,MAP_FILTER_PARAMETER_KEY_PREFIX));
    this.filter=mrafb.getAlignmentsFilter(new HadoopReporterIncrementer(context),this.counterGroup);
    LOGGER.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(this.filter.getFilterNames()));
  }
 catch (  EoulsanException e) {
    throw new IOException(e.getMessage());
  }
  if (context.getTaskAttemptID().getTaskID().getId() == 0) {
    final Path outputPath=new Path(context.getConfiguration().get(""String_Node_Str""));
    final FileSystem fs=context.getWorkingDirectory().getFileSystem(context.getConfiguration());
    Path bestFile=null;
    long maxLen=-1;
    for (    FileStatus status : fs.listStatus(outputPath)) {
      if (status.getPath().getName().startsWith(SAM_HEADER_FILE_PREFIX) && status.getLen() > maxLen) {
        maxLen=status.getLen();
        bestFile=status.getPath();
      }
    }
    if (bestFile != null) {
      final BufferedReader reader=new BufferedReader(new InputStreamReader(fs.open(bestFile)));
      String line=null;
      while ((line=reader.readLine()) != null) {
        final int indexOfFirstTab=line.indexOf(""String_Node_Str"");
        this.outKey.set(line.substring(0,indexOfFirstTab));
        this.outValue.set(line.substring(indexOfFirstTab + 1));
        context.write(this.outKey,this.outValue);
      }
      reader.close();
    }
  }
}","@Override protected void setup(final Context context) throws IOException, InterruptedException {
  final Configuration conf=context.getConfiguration();
  if (!EoulsanRuntime.isRuntime()) {
    HadoopEoulsanRuntime.newEoulsanRuntime(conf);
  }
  this.counterGroup=conf.get(Globals.PARAMETER_PREFIX + ""String_Node_Str"");
  if (this.counterGroup == null) {
    throw new IOException(""String_Node_Str"");
  }
  final String genomeDescFile=conf.get(GENOME_DESC_PATH_KEY);
  if (genomeDescFile == null) {
    throw new IOException(""String_Node_Str"");
  }
  final GenomeDescription genomeDescription=GenomeDescription.load(new DataFile(genomeDescFile).open());
  this.parser.setGenomeDescription(genomeDescription);
  try {
    final MultiReadAlignmentsFilterBuilder mrafb=new MultiReadAlignmentsFilterBuilder();
    mrafb.addParameters(jobConfToParameters(conf,MAP_FILTER_PARAMETER_KEY_PREFIX));
    this.filter=mrafb.getAlignmentsFilter(new HadoopReporterIncrementer(context),this.counterGroup);
    LOGGER.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(this.filter.getFilterNames()));
  }
 catch (  EoulsanException e) {
    throw new IOException(e.getMessage());
  }
  if (context.getTaskAttemptID().getTaskID().getId() == 0) {
    final Path outputPath=new Path(context.getConfiguration().get(""String_Node_Str""));
    final FileSystem fs=context.getWorkingDirectory().getFileSystem(context.getConfiguration());
    Path bestFile=null;
    long maxLen=-1;
    for (    FileStatus status : fs.listStatus(outputPath)) {
      if (status.getPath().getName().startsWith(SAM_HEADER_FILE_PREFIX) && status.getLen() > maxLen) {
        maxLen=status.getLen();
        bestFile=status.getPath();
      }
    }
    if (bestFile != null) {
      final BufferedReader reader=new BufferedReader(new InputStreamReader(fs.open(bestFile),""String_Node_Str""));
      String line=null;
      while ((line=reader.readLine()) != null) {
        final int indexOfFirstTab=line.indexOf(""String_Node_Str"");
        this.outKey.set(line.substring(0,indexOfFirstTab));
        this.outValue.set(line.substring(indexOfFirstTab + 1));
        context.write(this.outKey,this.outValue);
      }
      reader.close();
    }
  }
}",0.9959053685168336
141208,"/** 
 * Test if two stream are equals
 * @param fileA First filename to compare
 * @param fileB Second filename to compare
 * @return true if the two stream are equals
 * @throws IOException if an error occurs while reading the streams
 */
public static boolean compareFile(final File fileA,final File fileB) throws IOException {
  final InputStream isa=new FileInputStream(fileA);
  final InputStream isb=new FileInputStream(fileB);
  try {
    return compareFile(isa,isb);
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    isa.close();
    isb.close();
  }
}","/** 
 * Test if two stream are equals
 * @param fileA First filename to compare
 * @param fileB Second filename to compare
 * @return true if the two stream are equals
 * @throws IOException if an error occurs while reading the streams
 */
public static boolean compareFile(final File fileA,final File fileB) throws IOException {
  InputStream isa=null;
  InputStream isb=null;
  try {
    isa=new FileInputStream(fileA);
    isb=new FileInputStream(fileB);
    return compareFile(isa,isb);
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    if (isa != null)     isa.close();
    if (isb != null)     isb.close();
  }
}",0.872093023255814
141209,"@Override public void filterReadAlignments(final List<SAMRecord> records){
  if (records == null || records.isEmpty())   return;
  if (!records.get(0).getReadPairedFlag()) {
    if (records.size() > 1)     records.removeAll(records);
  }
 else {
    if (records.size() > 2)     records.removeAll(records);
  }
}","@Override public void filterReadAlignments(final List<SAMRecord> records){
  if (records == null || records.isEmpty())   return;
  if (!records.get(0).getReadPairedFlag()) {
    if (records.size() > 1)     records.clear();
  }
 else {
    if (records.size() > 2)     records.clear();
  }
}",0.9233333333333332
141210,"/** 
 * Determine features that overlap genomic intervals.
 * @param ivList the list of genomic intervals.
 * @param features the list of features.
 * @param mode the overlap mode.
 * @return the set of features that overlap genomic intervals according to theoverlap mode.
 * @throws EoulsanException
 */
public static Set<String> featuresOverlapped(List<GenomicInterval> ivList,GenomicArray<String> features,OverlapMode mode,StrandUsage stranded) throws EoulsanException, IOException {
  Set<String> fs=null;
  if (mode == UNION) {
    fs=new HashSet<String>();
    for (    final GenomicInterval iv : ivList) {
      final String chr=iv.getChromosome();
      if (!features.containsChromosome(chr))       throw new EoulsanException(""String_Node_Str"" + chr);
      final Map<GenomicInterval,Set<String>> intervals=features.getEntries(chr,iv.getStart(),iv.getEnd());
      if (stranded == YES || stranded == REVERSE)       filterIntervalsStrands(intervals,iv.getStrand());
      if (intervals != null && intervals.size() > 0) {
        for (        Map.Entry<GenomicInterval,Set<String>> e : intervals.entrySet()) {
          if (e.getValue() != null)           fs.addAll(e.getValue());
        }
      }
    }
  }
 else   if (mode == INTERSECTION_NONEMPTY || mode == INTERSECTION_STRICT) {
    for (    final GenomicInterval iv : ivList) {
      final String chr=iv.getChromosome();
      if (!features.containsChromosome(chr))       throw new EoulsanException(""String_Node_Str"" + chr);
      final Map<GenomicInterval,Set<String>> intervals=features.getEntries(chr,iv.getStart(),iv.getEnd());
      if (stranded == StrandUsage.YES || stranded == StrandUsage.REVERSE)       filterIntervalsStrands(intervals,iv.getStrand());
      if (intervals.isEmpty()) {
        final Set<String> emptySet=Collections.emptySet();
        intervals.put(iv,emptySet);
      }
      if (intervals != null && intervals.size() > 0) {
        for (        Map.Entry<GenomicInterval,Set<String>> i : intervals.entrySet()) {
          final Set<String> fs2=i.getValue();
          if (fs2.size() > 0 || mode == INTERSECTION_STRICT) {
            if (fs == null)             fs=new HashSet<String>(fs2);
 else             fs.retainAll(fs2);
          }
        }
      }
    }
  }
 else   throw new EoulsanException(""String_Node_Str"");
  return fs;
}","/** 
 * Determine features that overlap genomic intervals.
 * @param ivList the list of genomic intervals.
 * @param features the list of features.
 * @param mode the overlap mode.
 * @return the set of features that overlap genomic intervals according to theoverlap mode.
 * @throws EoulsanException
 */
public static Set<String> featuresOverlapped(List<GenomicInterval> ivList,GenomicArray<String> features,OverlapMode mode,StrandUsage stranded) throws EoulsanException, IOException {
  Set<String> fs=null;
  if (mode == UNION) {
    fs=new HashSet<String>();
    for (    final GenomicInterval iv : ivList) {
      final String chr=iv.getChromosome();
      if (!features.containsChromosome(chr))       throw new EoulsanException(""String_Node_Str"" + chr);
      final Map<GenomicInterval,Set<String>> intervals=features.getEntries(chr,iv.getStart(),iv.getEnd());
      if (stranded == YES || stranded == REVERSE)       filterIntervalsStrands(intervals,iv.getStrand());
      if (intervals != null && intervals.size() > 0) {
        for (        Map.Entry<GenomicInterval,Set<String>> e : intervals.entrySet()) {
          if (e.getValue() != null)           fs.addAll(e.getValue());
        }
      }
    }
  }
 else   if (mode == INTERSECTION_NONEMPTY || mode == INTERSECTION_STRICT) {
    for (    final GenomicInterval iv : ivList) {
      final String chr=iv.getChromosome();
      if (!features.containsChromosome(chr))       throw new EoulsanException(""String_Node_Str"" + chr);
      final Map<GenomicInterval,Set<String>> intervals=features.getEntries(chr,iv.getStart(),iv.getEnd());
      if (stranded == StrandUsage.YES || stranded == StrandUsage.REVERSE)       filterIntervalsStrands(intervals,iv.getStrand());
      if (intervals.isEmpty()) {
        final Set<String> emptySet=Collections.emptySet();
        intervals.put(iv,emptySet);
      }
      if (intervals.size() > 0) {
        for (        Map.Entry<GenomicInterval,Set<String>> i : intervals.entrySet()) {
          final Set<String> fs2=i.getValue();
          if (fs2.size() > 0 || mode == INTERSECTION_STRICT) {
            if (fs == null)             fs=new HashSet<String>(fs2);
 else             fs.retainAll(fs2);
          }
        }
      }
    }
  }
 else   throw new EoulsanException(""String_Node_Str"");
  return fs;
}",0.9954692556634304
141211,"@Override public void run(){
  if (parserLine != null) {
    try {
      InputStream is=p.getInputStream();
      BufferedReader buff=new BufferedReader(new InputStreamReader(is));
      String line=""String_Node_Str"";
      while ((line=buff.readLine()) != null) {
        parserLine.parseLine(line);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  if (parserLine != null) {
    try {
      InputStream is=p.getInputStream();
      BufferedReader buff=new BufferedReader(new InputStreamReader(is));
      String line=""String_Node_Str"";
      while ((line=buff.readLine()) != null) {
        parserLine.parseLine(line);
      }
      buff.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.9744897959183674
141212,"/** 
 * create a processBuilder for execute command and include a thread for get output stream which redirect to parserLine and a second thread for get error stream
 * @param cmd line command
 * @param temporaryDirectory
 * @param parserLine SAMParserLine which retrieve output stream
 * @return integer exit value for the process
 * @throws IOException if an error occurs while executing the command
 */
protected int sh(final List<String> cmd,final File temporaryDirectory,final SAMParserLine parserLine) throws IOException {
  ProcessBuilder pb;
  final Process p;
  int exitValue=Integer.MAX_VALUE;
  try {
    pb=new ProcessBuilder(cmd);
    if (!(temporaryDirectory == null))     pb.directory(temporaryDirectory);
    LOGGER.fine(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ cmd.toString());
    p=pb.start();
    final Thread tout=new Thread(new Runnable(){
      @Override public void run(){
        if (parserLine != null) {
          try {
            InputStream is=p.getInputStream();
            BufferedReader buff=new BufferedReader(new InputStreamReader(is));
            String line=""String_Node_Str"";
            while ((line=buff.readLine()) != null) {
              parserLine.parseLine(line);
            }
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
    }
);
    tout.start();
    final Thread terr=new Thread(new ProcessThreadErrOutput(p.getErrorStream()));
    terr.start();
    tout.join();
    terr.join();
    exitValue=p.waitFor();
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"" + e.getMessage());
  }
  return exitValue;
}","/** 
 * create a processBuilder for execute command and include a thread for get output stream which redirect to parserLine and a second thread for get error stream
 * @param cmd line command
 * @param temporaryDirectory
 * @param parserLine SAMParserLine which retrieve output stream
 * @return integer exit value for the process
 * @throws IOException if an error occurs while executing the command
 */
protected int sh(final List<String> cmd,final File temporaryDirectory,final SAMParserLine parserLine) throws IOException {
  ProcessBuilder pb;
  final Process p;
  int exitValue=Integer.MAX_VALUE;
  try {
    pb=new ProcessBuilder(cmd);
    if (!(temporaryDirectory == null))     pb.directory(temporaryDirectory);
    LOGGER.fine(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ cmd.toString());
    p=pb.start();
    final Thread tout=new Thread(new Runnable(){
      @Override public void run(){
        if (parserLine != null) {
          try {
            InputStream is=p.getInputStream();
            BufferedReader buff=new BufferedReader(new InputStreamReader(is));
            String line=""String_Node_Str"";
            while ((line=buff.readLine()) != null) {
              parserLine.parseLine(line);
            }
            buff.close();
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
    }
);
    tout.start();
    final Thread terr=new Thread(new ProcessThreadErrOutput(p.getErrorStream()));
    terr.start();
    tout.join();
    terr.join();
    exitValue=p.waitFor();
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"" + e.getMessage());
  }
  return exitValue;
}",0.992294013040901
141213,"@Override protected void internalMap(final File readsFile,final File archiveIndex,final SAMParserLine parserLine) throws IOException {
  new UnsupportedOperationException();
}","@Override protected void internalMap(final File readsFile,final File archiveIndex,final SAMParserLine parserLine) throws IOException {
  throw new UnsupportedOperationException();
}",0.9831460674157304
141214,"@Override protected void internalMap(final File readsFile,final File archiveIndex,final SAMParserLine parserLine) throws IOException {
  new UnsupportedOperationException();
}","@Override protected void internalMap(final File readsFile,final File archiveIndex,final SAMParserLine parserLine) throws IOException {
  throw new UnsupportedOperationException();
}",0.9831460674157304
141215,"@Override protected void internalMap(final File readsFile,final File archiveIndex,final SAMParserLine parserLine) throws IOException {
  new UnsupportedOperationException();
}","@Override protected void internalMap(final File readsFile,final File archiveIndex,final SAMParserLine parserLine) throws IOException {
  throw new UnsupportedOperationException();
}",0.9831460674157304
141216,"@Override protected void internalMap(final File readsFile,final File archiveIndex,final SAMParserLine parserLine) throws IOException {
  new UnsupportedOperationException();
}","@Override protected void internalMap(final File readsFile,final File archiveIndex,final SAMParserLine parserLine) throws IOException {
  throw new UnsupportedOperationException();
}",0.9831460674157304
141217,"/** 
 * Get the real Context object. This method is useful to redefine context values like base directory.
 * @return The Context object
 */
WorkflowContext getWorkflowContext(){
  return this.workflowContext;
}","/** 
 * Get the real Context object. This method is useful to redefine context values like base directory.
 * @return The Context object
 */
public WorkflowContext getWorkflowContext(){
  return this.workflowContext;
}",0.9836829836829836
141218,"/** 
 * Execute the step.
 * @return a StepResult object
 */
StepResult execute(){
  if (getState() != StepState.READY)   throw new IllegalStateException(""String_Node_Str"" + getState());
  getLogger().info(""String_Node_Str"" + getId() + ""String_Node_Str"");
  setState(StepState.WORKING);
  final StepStatus status=new WorkflowStepStatus(this);
  final StepResult result;
switch (getType()) {
case CHECKER_STEP:
    configureCheckerStep(status);
case STANDARD_STEP:
case GENERATOR_STEP:
  final Step step=StepInstances.getInstance().getStep(this);
result=step.execute(this.workflow.getDesign(),getContext(),status);
break;
default :
result=null;
}
if (result != null) getLogger().info(""String_Node_Str"" + getId() + ""String_Node_Str""+ StringUtils.toTimeHumanReadable(result.getDuration())+ ""String_Node_Str"");
setState(StepState.DONE);
return result;
}","/** 
 * Execute the step.
 * @return a StepResult object
 */
StepResult execute(){
  if (getState() != StepState.READY)   throw new IllegalStateException(""String_Node_Str"" + getState());
  getLogger().info(""String_Node_Str"" + getId() + ""String_Node_Str"");
  setState(StepState.WORKING);
  final StepStatus status=new WorkflowStepStatus(this);
  final StepResult result;
switch (getType()) {
case CHECKER_STEP:
    configureCheckerStep(status);
case STANDARD_STEP:
case GENERATOR_STEP:
  final Step step=StepInstances.getInstance().getStep(this);
result=step.execute(this.workflow.getDesign(),getContext(),status);
break;
default :
result=null;
}
if (result != null) getLogger().info(""String_Node_Str"" + getId() + ""String_Node_Str""+ StringUtils.toTimeHumanReadable(result.getDuration())+ ""String_Node_Str"");
setState(StepState.DONE);
this.result=result;
return result;
}",0.9883585564610012
141219,"/** 
 * Add a step to the analysis
 * @param stepId id of the step
 * @param stepName name of the step to add
 * @param inputs where find step inputs
 * @param parameters parameters of the step
 * @param skipStep true if the step must be skip
 * @param discardOutput true if the output of the step can be removed
 * @throws EoulsanException if an error occurs while adding the step
 */
void addStep(final String stepId,final String stepName,final Map<String,String> inputs,final Set<Parameter> parameters,final boolean skipStep,final boolean discardOutput) throws EoulsanException {
  if (stepName == null)   throw new EoulsanException(""String_Node_Str"");
  final String stepNameLower=stepName.toLowerCase().trim();
  if (""String_Node_Str"".equals(stepNameLower))   throw new EoulsanException(""String_Node_Str"");
  final String stepIdLower;
  if (stepId == null || ""String_Node_Str"".equals(stepId.trim()))   stepIdLower=stepNameLower;
 else   stepIdLower=stepId.toLowerCase().trim();
  if (""String_Node_Str"".equals(stepIdLower))   throw new EoulsanException(""String_Node_Str"");
  if (this.stepParameters.containsKey(stepIdLower) || StepType.getAllDefaultStepId().contains(stepIdLower))   throw new EoulsanException(""String_Node_Str"" + stepIdLower);
  if (parameters == null)   throw new EoulsanException(""String_Node_Str"");
  if (inputs == null)   throw new EoulsanException(""String_Node_Str"");
  Map<DataFormat,String> inputsMap=Maps.newHashMap();
  DataFormatRegistry registry=DataFormatRegistry.getInstance();
  for (  Map.Entry<String,String> e : inputs.entrySet()) {
    final DataFormat inputFormat=registry.getDataFormatFromName(e.getKey());
    final String inputStepId=e.getValue().toLowerCase().trim();
    if (e.getValue() == null)     throw new EoulsanException(""String_Node_Str"" + inputFormat + ""String_Node_Str""+ stepId+ ""String_Node_Str"");
    if (inputFormat == null)     throw new EoulsanException(""String_Node_Str"" + stepId + ""String_Node_Str""+ inputFormat);
    if (!StepType.DESIGN_STEP.getDefaultStepId().equals(inputStepId) && !this.stepIdNames.containsKey(inputStepId))     throw new EoulsanException(""String_Node_Str"" + inputFormat + ""String_Node_Str""+ stepId+ ""String_Node_Str"");
    inputsMap.put(inputFormat,inputStepId);
  }
  this.stepIdList.add(stepIdLower);
  this.stepIdNames.put(stepIdLower,stepNameLower);
  this.stepInputs.put(stepIdLower,inputsMap);
  this.stepParameters.put(stepNameLower,parameters);
  this.stepSkiped.put(stepIdLower,skipStep);
  this.stepDiscardOutput.put(stepIdLower,discardOutput);
}","/** 
 * Add a step to the analysis
 * @param stepId id of the step
 * @param stepName name of the step to add
 * @param inputs where find step inputs
 * @param parameters parameters of the step
 * @param skipStep true if the step must be skip
 * @param discardOutput true if the output of the step can be removed
 * @throws EoulsanException if an error occurs while adding the step
 */
void addStep(final String stepId,final String stepName,final Map<String,String> inputs,final Set<Parameter> parameters,final boolean skipStep,final boolean discardOutput) throws EoulsanException {
  if (stepName == null)   throw new EoulsanException(""String_Node_Str"");
  final String stepNameLower=stepName.toLowerCase().trim();
  if (""String_Node_Str"".equals(stepNameLower))   throw new EoulsanException(""String_Node_Str"");
  final String stepIdLower;
  if (stepId == null || ""String_Node_Str"".equals(stepId.trim()))   stepIdLower=stepNameLower;
 else   stepIdLower=stepId.toLowerCase().trim();
  if (""String_Node_Str"".equals(stepIdLower))   throw new EoulsanException(""String_Node_Str"");
  if (this.stepParameters.containsKey(stepIdLower) || StepType.getAllDefaultStepId().contains(stepIdLower))   throw new EoulsanException(""String_Node_Str"" + stepIdLower);
  if (parameters == null)   throw new EoulsanException(""String_Node_Str"");
  if (inputs == null)   throw new EoulsanException(""String_Node_Str"");
  Map<DataFormat,String> inputsMap=Maps.newHashMap();
  DataFormatRegistry registry=DataFormatRegistry.getInstance();
  for (  Map.Entry<String,String> e : inputs.entrySet()) {
    final DataFormat inputFormat=registry.getDataFormatFromName(e.getKey());
    final String inputStepId=e.getValue().toLowerCase().trim();
    if (e.getValue() == null)     throw new EoulsanException(""String_Node_Str"" + inputFormat + ""String_Node_Str""+ stepId+ ""String_Node_Str"");
    if (inputFormat == null)     throw new EoulsanException(""String_Node_Str"" + stepId + ""String_Node_Str""+ e.getKey());
    if (!StepType.DESIGN_STEP.getDefaultStepId().equals(inputStepId) && !this.stepIdNames.containsKey(inputStepId))     throw new EoulsanException(""String_Node_Str"" + inputFormat + ""String_Node_Str""+ stepId+ ""String_Node_Str"");
    inputsMap.put(inputFormat,inputStepId);
  }
  this.stepIdList.add(stepIdLower);
  this.stepIdNames.put(stepIdLower,stepNameLower);
  this.stepInputs.put(stepIdLower,inputsMap);
  this.stepParameters.put(stepNameLower,parameters);
  this.stepSkiped.put(stepIdLower,skipStep);
  this.stepDiscardOutput.put(stepIdLower,discardOutput);
}",0.9958669553237552
141220,"/** 
 * Set the start date.
 * @param date the start date
 */
public void setStartTime(final Date date){
  checkNotNull(date,""String_Node_Str"");
  this.startTime=date;
}","/** 
 * Set the start date.
 * @param date the start date
 */
public void setStartTime(final Date date){
  checkNotNull(date,""String_Node_Str"");
  this.startTime=new Date(date.getTime());
}",0.9441340782122905
141221,"/** 
 * Set the end date.
 * @param date the end date
 */
public void setEndTime(final Date date){
  checkNotNull(date,""String_Node_Str"");
  this.endTime=date;
}","/** 
 * Set the end date.
 * @param date the end date
 */
public void setEndTime(final Date date){
  checkNotNull(date,""String_Node_Str"");
  this.endTime=new Date(date.getTime());
}",0.9415204678362572
141222,"@Override public Map<String,Long> getSampleCounters(final Sample sample){
  return this.getSampleCounters(sample);
}","@Override public Map<String,Long> getSampleCounters(final Sample sample){
  return this.result.getSampleCounters(sample);
}",0.9707112970711296
141223,"@Override public int hashCode(){
  final String[] extensions=getExtensions();
  final Integer extensionsHashCode=extensions == null ? null : extensions.hashCode();
  final Integer generatorHashCode=isGenerator() ? getGenerator().getClass().hashCode() : null;
  final Integer checkerHashCode=isChecker() ? getChecker().getClass().hashCode() : null;
  return Objects.hashCode(getName(),getDescription(),getContentType(),getDefaultExtention(),extensionsHashCode,isGenerator(),isChecker(),generatorHashCode,checkerHashCode,getMaxFilesCount());
}","@Override public int hashCode(){
  final String[] extensions=getExtensions();
  final Integer extensionsHashCode=extensions == null ? null : Arrays.hashCode(extensions);
  final Integer generatorHashCode=isGenerator() ? getGenerator().getClass().hashCode() : null;
  final Integer checkerHashCode=isChecker() ? getChecker().getClass().hashCode() : null;
  return Objects.hashCode(getName(),getDescription(),getContentType(),getDefaultExtention(),extensionsHashCode,isGenerator(),isChecker(),generatorHashCode,checkerHashCode,getMaxFilesCount());
}",0.9779411764705882
141224,"private void parse(final Document document) throws EoulsanException {
  for (  Element e : XMLUtils.getElementsByTagName(document,""String_Node_Str"")) {
    this.name=XMLUtils.getTagValue(e,""String_Node_Str"");
    this.description=XMLUtils.getTagValue(e,""String_Node_Str"");
    this.prefix=XMLUtils.getTagValue(e,""String_Node_Str"");
    this.oneFilePerAnalysis=Boolean.parseBoolean(XMLUtils.getTagValue(e,""String_Node_Str""));
    this.designFieldName=XMLUtils.getTagValue(e,""String_Node_Str"");
    this.contentType=XMLUtils.getTagValue(e,""String_Node_Str"");
    this.generatorClassName=XMLUtils.getTagValue(e,""String_Node_Str"");
    this.checkerClassName=XMLUtils.getTagValue(e,""String_Node_Str"");
    if (this.designFieldName != null)     this.dataTypeFromDesignFile=true;
    for (    Element generatorElement : XMLUtils.getElementsByTagName(e,""String_Node_Str"")) {
      final List<String> attributeNames=XMLUtils.getAttributeNames(generatorElement);
      for (      String attributeName : attributeNames)       this.generatorParameters.add(new Parameter(attributeName,generatorElement.getAttribute(attributeName)));
    }
    final String maxFiles=XMLUtils.getTagValue(e,""String_Node_Str"");
    try {
      if (maxFiles == null)       this.maxFilesCount=DEFAULT_MAX_FILES_COUNT;
 else       this.maxFilesCount=Integer.parseInt(maxFiles);
    }
 catch (    NumberFormatException exp) {
      throw new EoulsanException(""String_Node_Str"" + this.name + ""String_Node_Str""+ maxFiles);
    }
    List<String> extensions=Utils.newArrayList();
    for (    Element e2 : XMLUtils.getElementsByTagName(document,""String_Node_Str""))     for (    Element e3 : XMLUtils.getElementsByTagName(e2,""String_Node_Str"")) {
      final String defaultAttribute=e3.getAttribute(""String_Node_Str"");
      if (defaultAttribute != null && ""String_Node_Str"".equals(defaultAttribute.trim().toLowerCase()))       extensions.add(0,e3.getTextContent().trim());
 else       extensions.add(e3.getTextContent().trim());
    }
    this.extensions=new LinkedHashSet<String>(extensions).toArray(new String[0]);
  }
  if (this.name == null)   throw new EoulsanException(""String_Node_Str"");
  this.name=this.name.trim().toLowerCase();
  if (this.description != null)   this.description.trim();
  if (this.contentType == null || ""String_Node_Str"".equals(this.contentType.trim()))   this.contentType=DEFAULT_CONTENT_TYPE;
  if (this.generatorClassName != null && ""String_Node_Str"".equals(this.generatorClassName.trim()))   this.generatorClassName=null;
  if (this.checkerClassName != null && ""String_Node_Str"".equals(this.checkerClassName.trim()))   this.checkerClassName=null;
  if (this.maxFilesCount < 1 || this.maxFilesCount > 2)   throw new EoulsanException(""String_Node_Str"" + this.name + ""String_Node_Str""+ this.maxFilesCount);
}","private void parse(final Document document) throws EoulsanException {
  for (  Element e : XMLUtils.getElementsByTagName(document,""String_Node_Str"")) {
    this.name=XMLUtils.getTagValue(e,""String_Node_Str"");
    this.description=XMLUtils.getTagValue(e,""String_Node_Str"");
    this.prefix=XMLUtils.getTagValue(e,""String_Node_Str"");
    this.oneFilePerAnalysis=Boolean.parseBoolean(XMLUtils.getTagValue(e,""String_Node_Str""));
    this.designFieldName=XMLUtils.getTagValue(e,""String_Node_Str"");
    this.contentType=XMLUtils.getTagValue(e,""String_Node_Str"");
    this.generatorClassName=XMLUtils.getTagValue(e,""String_Node_Str"");
    this.checkerClassName=XMLUtils.getTagValue(e,""String_Node_Str"");
    if (this.designFieldName != null)     this.dataTypeFromDesignFile=true;
    for (    Element generatorElement : XMLUtils.getElementsByTagName(e,""String_Node_Str"")) {
      final List<String> attributeNames=XMLUtils.getAttributeNames(generatorElement);
      for (      String attributeName : attributeNames)       this.generatorParameters.add(new Parameter(attributeName,generatorElement.getAttribute(attributeName)));
    }
    final String maxFiles=XMLUtils.getTagValue(e,""String_Node_Str"");
    try {
      if (maxFiles == null)       this.maxFilesCount=DEFAULT_MAX_FILES_COUNT;
 else       this.maxFilesCount=Integer.parseInt(maxFiles);
    }
 catch (    NumberFormatException exp) {
      throw new EoulsanException(""String_Node_Str"" + this.name + ""String_Node_Str""+ maxFiles);
    }
    List<String> extensions=Utils.newArrayList();
    for (    Element e2 : XMLUtils.getElementsByTagName(document,""String_Node_Str""))     for (    Element e3 : XMLUtils.getElementsByTagName(e2,""String_Node_Str"")) {
      final String defaultAttribute=e3.getAttribute(""String_Node_Str"");
      if (defaultAttribute != null && ""String_Node_Str"".equals(defaultAttribute.trim().toLowerCase()))       extensions.add(0,e3.getTextContent().trim());
 else       extensions.add(e3.getTextContent().trim());
    }
    this.extensions=new LinkedHashSet<String>(extensions).toArray(new String[0]);
  }
  if (this.name == null)   throw new EoulsanException(""String_Node_Str"");
  this.name=this.name.trim().toLowerCase();
  if (this.description != null)   this.description=this.description.trim();
  if (this.contentType == null || ""String_Node_Str"".equals(this.contentType.trim()))   this.contentType=DEFAULT_CONTENT_TYPE;
  if (this.generatorClassName != null && ""String_Node_Str"".equals(this.generatorClassName.trim()))   this.generatorClassName=null;
  if (this.checkerClassName != null && ""String_Node_Str"".equals(this.checkerClassName.trim()))   this.checkerClassName=null;
  if (this.maxFilesCount < 1 || this.maxFilesCount > 2)   throw new EoulsanException(""String_Node_Str"" + this.name + ""String_Node_Str""+ this.maxFilesCount);
}",0.9969713165864956
141225,"/** 
 * run Rnw script on Rserve server
 * @throws EoulsanException
 */
protected void runRserveRnwScript(final StepContext context) throws EoulsanException {
  try {
    LOGGER.info(""String_Node_Str"" + getRConnection().getServerName());
    Map<String,List<Sample>> experiments=experimentsSpliter();
    Set<String> cles=experiments.keySet();
    Iterator<String> itr=cles.iterator();
    while (itr.hasNext()) {
      String cle=itr.next();
      List<Sample> experimentSampleList=experiments.get(cle);
      LOGGER.info(""String_Node_Str"" + experimentSampleList.get(0).getMetadata().getExperiment());
      putExpressionFiles(experimentSampleList);
      String rScript=generateScript(experimentSampleList,context);
      runRnwScript(rScript,true);
      removeExpressionFiles(experimentSampleList);
      if (!context.getSettings().isSaveRscripts())       this.rConnection.removeFile(rScript);
      this.rConnection.getAllFiles(outPath.toString() + ""String_Node_Str"");
    }
  }
 catch (  REngineException e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
catch (  REXPMismatchException e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    try {
      this.rConnection.removeAllFiles();
      this.rConnection.disConnect();
    }
 catch (    Exception e) {
      throw new EoulsanException(""String_Node_Str"" + e.getMessage());
    }
  }
}","/** 
 * run Rnw script on Rserve server
 * @throws EoulsanException
 */
protected void runRserveRnwScript(final StepContext context) throws EoulsanException {
  try {
    LOGGER.info(""String_Node_Str"" + getRConnection().getServerName());
    Map<String,List<Sample>> experiments=experimentsSpliter();
    for (    List<Sample> experimentSampleList : experiments.values()) {
      LOGGER.info(""String_Node_Str"" + experimentSampleList.get(0).getMetadata().getExperiment());
      putExpressionFiles(experimentSampleList);
      String rScript=generateScript(experimentSampleList,context);
      runRnwScript(rScript,true);
      removeExpressionFiles(experimentSampleList);
      if (!context.getSettings().isSaveRscripts())       this.rConnection.removeFile(rScript);
      this.rConnection.getAllFiles(outPath.toString() + ""String_Node_Str"");
    }
  }
 catch (  REngineException e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
catch (  REXPMismatchException e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
 finally {
    try {
      this.rConnection.removeAllFiles();
      this.rConnection.disConnect();
    }
 catch (    Exception e) {
      throw new EoulsanException(""String_Node_Str"" + e.getMessage());
    }
  }
}",0.9080759211016004
141226,"/** 
 * run Rnw script on local mode
 * @throws EoulsanException
 */
protected void runLocalRnwScript(final StepContext context) throws EoulsanException {
  try {
    Map<String,List<Sample>> experiments=experimentsSpliter();
    Set<String> cles=experiments.keySet();
    Iterator<String> itr=cles.iterator();
    while (itr.hasNext()) {
      String cle=itr.next();
      List<Sample> experimentSampleList=experiments.get(cle);
      LOGGER.info(""String_Node_Str"" + experimentSampleList.get(0).getMetadata().getExperiment());
      String rScript=generateScript(experimentSampleList,context);
      runRnwScript(rScript,false);
      if (!context.getSettings().isSaveRscripts()) {
        new File(rScript).delete();
      }
    }
  }
 catch (  Exception e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * run Rnw script on local mode
 * @throws EoulsanException
 */
protected void runLocalRnwScript(final StepContext context) throws EoulsanException {
  try {
    Map<String,List<Sample>> experiments=experimentsSpliter();
    for (    List<Sample> experimentSampleList : experiments.values()) {
      LOGGER.info(""String_Node_Str"" + experimentSampleList.get(0).getMetadata().getExperiment());
      String rScript=generateScript(experimentSampleList,context);
      runRnwScript(rScript,false);
      if (!context.getSettings().isSaveRscripts()) {
        new File(rScript).delete();
      }
    }
  }
 catch (  Exception e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
}",0.8395061728395061
141227,"/** 
 * 'key': annotation identifier of the feature (gene, mRNA, exon...). 'values': a list of '1', the size of this list is the number of reads found on the feature.
 */
@Override protected void reduce(final Text key,final Iterable<Text> values,final Context context) throws IOException, InterruptedException {
  int counts=0;
  for (  Text val : values) {
    counts++;
  }
  context.write(key,new Long(counts));
}","/** 
 * 'key': annotation identifier of the feature (gene, mRNA, exon...). 'values': a list of '1', the size of this list is the number of reads found on the feature.
 */
@Override protected void reduce(final Text key,final Iterable<Text> values,final Context context) throws IOException, InterruptedException {
  int counts=0;
  final Iterator<Text> it=values.iterator();
  while (it.hasNext()) {
    it.next();
    counts++;
  }
  context.write(key,Long.valueOf(counts));
}",0.8821548821548821
141228,"/** 
 * 'key': the identifier of the aligned read without the integer indicating the member of the pair. 'values': the rest of the paired alignments, i.e the SAM line of the first paired alignment and the SAM line of the second paired alignment.
 */
@Override protected void reduce(final Text key,final Iterable<Text> values,final Context context) throws IOException, InterruptedException {
  String stringVal;
  String strOutKey=""String_Node_Str"";
  String strOutValue=""String_Node_Str"";
  SAMRecord samRecord;
  String stringRecord;
  records.clear();
  for (  Text val : values) {
    stringVal=val.toString();
    stringRecord=key.toString() + stringVal;
    try {
      samRecord=this.parser.parseLine(stringRecord);
      records.add(samRecord);
    }
 catch (    SAMFormatException e) {
      context.getCounter(this.counterGroup,INVALID_SAM_ENTRIES_COUNTER.counterName()).increment(1);
      LOGGER.info(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ stringRecord+ ""String_Node_Str"");
      return;
    }
  }
  Collections.sort(records,new SAMComparator());
  int indexOfFirstTab=records.get(0).getSAMString().indexOf(""String_Node_Str"");
  strOutKey=records.get(0).getSAMString().substring(0,indexOfFirstTab);
  strOutValue=records.get(0).getSAMString().substring(indexOfFirstTab + 1).replaceAll(""String_Node_Str"",""String_Node_Str"");
  records.remove(0);
  for (  SAMRecord r : records) {
    if (r.getFirstOfPairFlag()) {
      strOutValue+=""String_Node_Str"" + r.getSAMString().replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      strOutValue+=""String_Node_Str"" + r.getSAMString().replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
  }
  this.outKey.set(strOutKey);
  this.outValue.set(strOutValue);
  context.write(this.outKey,this.outValue);
}","/** 
 * 'key': the identifier of the aligned read without the integer indicating the member of the pair. 'values': the rest of the paired alignments, i.e the SAM line of the first paired alignment and the SAM line of the second paired alignment.
 */
@Override protected void reduce(final Text key,final Iterable<Text> values,final Context context) throws IOException, InterruptedException {
  String stringVal;
  final String strOutKey;
  StringBuilder strOutValue=new StringBuilder();
  SAMRecord samRecord;
  String stringRecord;
  records.clear();
  for (  Text val : values) {
    stringVal=val.toString();
    stringRecord=key.toString() + stringVal;
    try {
      samRecord=this.parser.parseLine(stringRecord);
      records.add(samRecord);
    }
 catch (    SAMFormatException e) {
      context.getCounter(this.counterGroup,INVALID_SAM_ENTRIES_COUNTER.counterName()).increment(1);
      LOGGER.info(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ stringRecord+ ""String_Node_Str"");
      return;
    }
  }
  Collections.sort(records,new SAMComparator());
  int indexOfFirstTab=records.get(0).getSAMString().indexOf(""String_Node_Str"");
  strOutKey=records.get(0).getSAMString().substring(0,indexOfFirstTab);
  strOutValue.append(records.get(0).getSAMString().substring(indexOfFirstTab + 1).replaceAll(""String_Node_Str"",""String_Node_Str""));
  records.remove(0);
  for (  SAMRecord r : records) {
    if (r.getFirstOfPairFlag()) {
      strOutValue.append('\n');
    }
 else {
      strOutValue.append('£');
    }
    strOutValue.append(r.getSAMString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  this.outKey.set(strOutKey);
  this.outValue.set(strOutValue.toString());
  context.write(this.outKey,this.outValue);
}",0.8760283687943262
141229,"/** 
 * Reducer
 * @param key input key of the reducer
 * @param values values for the key
 * @param output list of output values of the reducer
 * @param reporter reporter
 * @throws IOException if an error occurs while executing the reducer
 */
public void reduce(final String key,Iterator<String> values,final List<String> output,final Reporter reporter) throws IOException {
  geneExpr.clear();
  reporter.incrCounter(this.counterGroup,PARENTS_COUNTER.counterName(),1);
  final String parentId=key;
  boolean first=true;
  String chr=null;
  int count=0;
  while (values.hasNext()) {
    count++;
    StringUtils.fastSplit(values.next().toString(),this.fields);
    final String exonChr=this.fields[0];
    final int exonStart=Integer.parseInt(this.fields[1]);
    final int exonEnd=Integer.parseInt(this.fields[2]);
    final String alignementChr=this.fields[6];
    final int alignmentStart=Integer.parseInt(this.fields[7]);
    final int alignementEnd=Integer.parseInt(this.fields[8]);
    if (first) {
      chr=exonChr;
      first=false;
    }
    if (!exonChr.equals(alignementChr) || !chr.equals(alignementChr)) {
      reporter.incrCounter(this.counterGroup,INVALID_CHROMOSOME_COUNTER.counterName(),1);
      continue;
    }
    geneExpr.addAlignement(exonStart,exonEnd,alignmentStart,alignementEnd,true);
  }
  if (count == 0)   return;
  final Transcript transcript=tef.getTranscript(parentId);
  if (transcript == null) {
    reporter.incrCounter(this.counterGroup,PARENT_ID_NOT_FOUND_COUNTER.counterName(),1);
    return;
  }
  final int geneLength=transcript.getLength();
  final int notCovered=geneExpr.getNotCovered(geneLength);
  final String result=key + ""String_Node_Str"" + notCovered+ ""String_Node_Str""+ geneExpr.getAlignementCount();
  output.add(result);
}","/** 
 * Reducer
 * @param key input key of the reducer
 * @param values values for the key
 * @param output list of output values of the reducer
 * @param reporter reporter
 * @throws IOException if an error occurs while executing the reducer
 */
public void reduce(final String key,Iterator<String> values,final List<String> output,final Reporter reporter) throws IOException {
  geneExpr.clear();
  reporter.incrCounter(this.counterGroup,PARENTS_COUNTER.counterName(),1);
  final String parentId=key;
  boolean first=true;
  String chr=null;
  int count=0;
  while (values.hasNext()) {
    count++;
    StringUtils.fastSplit(values.next(),this.fields);
    final String exonChr=this.fields[0];
    final int exonStart=Integer.parseInt(this.fields[1]);
    final int exonEnd=Integer.parseInt(this.fields[2]);
    final String alignementChr=this.fields[6];
    final int alignmentStart=Integer.parseInt(this.fields[7]);
    final int alignementEnd=Integer.parseInt(this.fields[8]);
    if (first) {
      chr=exonChr;
      first=false;
    }
    if (!exonChr.equals(alignementChr) || !chr.equals(alignementChr)) {
      reporter.incrCounter(this.counterGroup,INVALID_CHROMOSOME_COUNTER.counterName(),1);
      continue;
    }
    geneExpr.addAlignement(exonStart,exonEnd,alignmentStart,alignementEnd,true);
  }
  if (count == 0)   return;
  final Transcript transcript=tef.getTranscript(parentId);
  if (transcript == null) {
    reporter.incrCounter(this.counterGroup,PARENT_ID_NOT_FOUND_COUNTER.counterName(),1);
    return;
  }
  final int geneLength=transcript.getLength();
  final int notCovered=geneExpr.getNotCovered(geneLength);
  final String result=key + ""String_Node_Str"" + notCovered+ ""String_Node_Str""+ geneExpr.getAlignementCount();
  output.add(result);
}",0.9969040247678018
141230,"@Override public void configure(Set<Parameter> stepParameters) throws EoulsanException {
  for (  Parameter p : stepParameters) {
    if (FORMAT_PARAMETER.equals(p.getName()))     this.format=DataFormatRegistry.getInstance().getDataFormatFromName(p.getValue());
 else     if (OUTPUT_COMPRESSION_PARAMETER.equals(p.getName()))     this.outputCompression=CompressionType.valueOf(p.getValue());
  }
  if (this.format == null)   new EoulsanException(""String_Node_Str"");
  if (this.outputCompression == null)   new EoulsanException(""String_Node_Str"");
}","@Override public void configure(Set<Parameter> stepParameters) throws EoulsanException {
  for (  Parameter p : stepParameters) {
    if (FORMAT_PARAMETER.equals(p.getName()))     this.format=DataFormatRegistry.getInstance().getDataFormatFromName(p.getValue());
 else     if (OUTPUT_COMPRESSION_PARAMETER.equals(p.getName()))     this.outputCompression=CompressionType.valueOf(p.getValue());
  }
  if (this.format == null)   throw new EoulsanException(""String_Node_Str"");
  if (this.outputCompression == null)   throw new EoulsanException(""String_Node_Str"");
}",0.9891696750902528
141231,"@Override public void configure(Set<Parameter> stepParameters) throws EoulsanException {
  for (  Parameter p : stepParameters) {
    if (FORMAT_PARAMETER.equals(p.getName())) {
      final DataFormatRegistry registry=DataFormatRegistry.getInstance();
      for (      String formatName : Splitter.on(',').split(p.getValue())) {
        final DataFormat format=registry.getDataFormatFromName(formatName);
        if (format != null)         this.formats.add(format);
      }
    }
  }
  if (this.formats.isEmpty())   new EoulsanException(""String_Node_Str"");
}","@Override public void configure(Set<Parameter> stepParameters) throws EoulsanException {
  for (  Parameter p : stepParameters) {
    if (FORMAT_PARAMETER.equals(p.getName())) {
      final DataFormatRegistry registry=DataFormatRegistry.getInstance();
      for (      String formatName : Splitter.on(',').split(p.getValue())) {
        final DataFormat format=registry.getDataFormatFromName(formatName);
        if (format != null)         this.formats.add(format);
      }
    }
  }
  if (this.formats.isEmpty())   throw new EoulsanException(""String_Node_Str"");
}",0.994661921708185
141232,"@Override public StepResult execute(final Design design,final StepContext context,final StepStatus status){
  final StringBuilder log=new StringBuilder();
  final WorkflowContext fullContext=(WorkflowContext)context;
  final Map<DataFile,DataFile> filesToCopy=newHashMap();
  File repackagedJarFile=null;
  try {
    for (    Sample sample : design.getSamples())     filesToCopy.putAll(findDataFilesInWorkflow(sample,context));
    removeNotExistingDataFile(filesToCopy);
    if (getDest().exists()) {
      throw new IOException(""String_Node_Str"" + getDest());
    }
    if (!context.getRuntime().isHadoopMode()) {
      repackagedJarFile=HadoopJarRepackager.repack();
      final DataFile jarDataFile=new DataFile(repackagedJarFile.getAbsolutePath());
      filesToCopy.put(jarDataFile,getUploadedDataFile(jarDataFile));
    }
    final Settings settings=context.getRuntime().getSettings();
    reWriteDesign(context,filesToCopy);
    if (settings.isObfuscateDesign()) {
      DesignUtils.obfuscate(design,settings.isObfuscateDesignRemoveReplicateInfo());
    }
    final File newDesignFile=writeTempDesignFile(context,design);
    final DataFile uploadedDesignDataFile=getUploadedDataFile(new DataFile(context.getDesignPathname()));
    filesToCopy.put(new DataFile(newDesignFile.getAbsolutePath()),uploadedDesignDataFile);
    final DataFile currentParamDataFile=new DataFile(context.getWorkflowPathname());
    final DataFile uploadedParamDataFile=getUploadedDataFile(currentParamDataFile);
    filesToCopy.put(currentParamDataFile,uploadedParamDataFile);
    for (    Map.Entry<DataFile,DataFile> e : filesToCopy.entrySet()) {
      log.append(""String_Node_Str"");
      log.append(e.getKey());
      log.append(""String_Node_Str"");
      log.append(e.getValue());
      log.append('\n');
    }
    copy(filesToCopy);
    if (!newDesignFile.delete()) {
      LOGGER.warning(""String_Node_Str"" + newDesignFile);
    }
    fullContext.setDesignPathname(uploadedDesignDataFile.getSource());
    fullContext.setWorkflowPathname(uploadedParamDataFile.getSource());
  }
 catch (  IOException e) {
    return status.createStepResult(e);
  }
catch (  EoulsanIOException e) {
    return status.createStepResult(e);
  }
  if (!context.getRuntime().isHadoopMode()) {
    fullContext.setJarPathname(getDest().toString() + ""String_Node_Str"" + repackagedJarFile.getName());
  }
  status.setStepMessage(log.toString());
  return status.createStepResult();
}","@Override public StepResult execute(final Design design,final StepContext context,final StepStatus status){
  final StringBuilder log=new StringBuilder();
  final WorkflowContext fullContext=((AbstractWorkflow)context.getWorkflow()).getWorkflowContext();
  final Map<DataFile,DataFile> filesToCopy=newHashMap();
  File repackagedJarFile=null;
  try {
    for (    Sample sample : design.getSamples())     filesToCopy.putAll(findDataFilesInWorkflow(sample,context));
    removeNotExistingDataFile(filesToCopy);
    if (getDest().exists()) {
      throw new IOException(""String_Node_Str"" + getDest());
    }
    if (!context.getRuntime().isHadoopMode()) {
      repackagedJarFile=HadoopJarRepackager.repack();
      final DataFile jarDataFile=new DataFile(repackagedJarFile.getAbsolutePath());
      filesToCopy.put(jarDataFile,getUploadedDataFile(jarDataFile));
    }
    final Settings settings=context.getRuntime().getSettings();
    reWriteDesign(context,filesToCopy);
    if (settings.isObfuscateDesign()) {
      DesignUtils.obfuscate(design,settings.isObfuscateDesignRemoveReplicateInfo());
    }
    final File newDesignFile=writeTempDesignFile(context,design);
    final DataFile uploadedDesignDataFile=getUploadedDataFile(new DataFile(context.getDesignPathname()));
    filesToCopy.put(new DataFile(newDesignFile.getAbsolutePath()),uploadedDesignDataFile);
    final DataFile currentParamDataFile=new DataFile(context.getWorkflowPathname());
    final DataFile uploadedParamDataFile=getUploadedDataFile(currentParamDataFile);
    filesToCopy.put(currentParamDataFile,uploadedParamDataFile);
    for (    Map.Entry<DataFile,DataFile> e : filesToCopy.entrySet()) {
      log.append(""String_Node_Str"");
      log.append(e.getKey());
      log.append(""String_Node_Str"");
      log.append(e.getValue());
      log.append('\n');
    }
    copy(filesToCopy);
    if (!newDesignFile.delete()) {
      LOGGER.warning(""String_Node_Str"" + newDesignFile);
    }
    fullContext.setDesignPathname(uploadedDesignDataFile.getSource());
    fullContext.setWorkflowPathname(uploadedParamDataFile.getSource());
  }
 catch (  IOException e) {
    return status.createStepResult(e);
  }
catch (  EoulsanIOException e) {
    return status.createStepResult(e);
  }
  if (!context.getRuntime().isHadoopMode()) {
    fullContext.setJarPathname(getDest().toString() + ""String_Node_Str"" + repackagedJarFile.getName());
  }
  status.setStepMessage(log.toString());
  return status.createStepResult();
}",0.9890422077922078
141233,"/** 
 * Sort several files in sortOutputFile
 * @return true if success sort
 * @throws IOException
 */
private boolean sort() throws IOException {
  this.sortOutputFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"",this.tmpDir);
  String listFile=""String_Node_Str"";
  for (  File mapOutputFile : listMapOutputFile) {
    listFile+=StringUtils.bashEscaping(mapOutputFile.getAbsolutePath()) + ""String_Node_Str"";
  }
  final String cmd=""String_Node_Str"" + (this.tmpDir != null ? ""String_Node_Str"" + StringUtils.bashEscaping(this.tmpDir.getAbsolutePath()) : ""String_Node_Str"") + ""String_Node_Str""+ StringUtils.bashEscaping(this.sortOutputFile.getAbsolutePath())+ ""String_Node_Str""+ listFile;
  final boolean result=ProcessUtils.system(cmd) == 0;
  for (  File mapOutputFile : listMapOutputFile) {
    if (!mapOutputFile.delete())     LOGGER.warning(""String_Node_Str"" + mapOutputFile.getAbsolutePath());
  }
  return result;
}","/** 
 * Sort several files in sortOutputFile
 * @return true if success sort
 * @throws IOException
 */
private boolean sort() throws IOException {
  this.sortOutputFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"",this.tmpDir);
  final StringBuilder listFile=new StringBuilder();
  for (  File mapOutputFile : listMapOutputFile) {
    listFile.append(StringUtils.bashEscaping(mapOutputFile.getAbsolutePath()));
    listFile.append(""String_Node_Str"");
  }
  final String cmd=""String_Node_Str"" + (this.tmpDir != null ? ""String_Node_Str"" + StringUtils.bashEscaping(this.tmpDir.getAbsolutePath()) : ""String_Node_Str"") + ""String_Node_Str""+ StringUtils.bashEscaping(this.sortOutputFile.getAbsolutePath())+ ""String_Node_Str""+ listFile.toString();
  final boolean result=ProcessUtils.system(cmd) == 0;
  for (  File mapOutputFile : listMapOutputFile) {
    if (!mapOutputFile.delete())     LOGGER.warning(""String_Node_Str"" + mapOutputFile.getAbsolutePath());
  }
  return result;
}",0.9431403234220136
141234,"/** 
 * Create a new DataFile object from the step, format, sample and file index.
 * @param step step of the file
 * @param format format of the file
 * @param sample sample of the file
 * @param fileIndex file index of the file for multifile data
 * @return a new DataFile object
 */
private static final DataFile newDataFile(final AbstractWorkflowStep step,final DataFormat format,final Sample sample,final int fileIndex){
  Preconditions.checkNotNull(format,""String_Node_Str"");
  Preconditions.checkNotNull(sample,""String_Node_Str"");
switch (step.getType()) {
case STANDARD_STEP:
case GENERATOR_STEP:
    if (!Arrays.asList(step.getStep().getOutputFormats()).contains(format))     throw new EoulsanRuntimeException(""String_Node_Str"" + format.getFormatName() + ""String_Node_Str""+ step.getStep().getName());
  return newStandardDataFile(step.getContext(),step,format,sample,fileIndex);
case DESIGN_STEP:
final List<String> designValues=getDesignValues(step.getWorkflow().getDesign(),format,sample);
return newDesignDataFile(designValues,format,sample,fileIndex);
default :
return null;
}
}","/** 
 * Create a new DataFile object from the step, format, sample and file index.
 * @param step step of the file
 * @param format format of the file
 * @param sample sample of the file
 * @param fileIndex file index of the file for multifile data
 * @return a new DataFile object
 */
private static final DataFile newDataFile(final AbstractWorkflowStep step,final DataFormat format,final Sample sample,final int fileIndex){
  Preconditions.checkNotNull(format,""String_Node_Str"");
  Preconditions.checkNotNull(sample,""String_Node_Str"");
switch (step.getType()) {
case STANDARD_STEP:
case GENERATOR_STEP:
    if (!step.getStep().getOutputFormats().contains(format))     throw new EoulsanRuntimeException(""String_Node_Str"" + format.getFormatName() + ""String_Node_Str""+ step.getStep().getName());
  return newStandardDataFile(step.getContext(),step,format,sample,fileIndex);
case DESIGN_STEP:
final List<String> designValues=getDesignValues(step.getWorkflow().getDesign(),format,sample);
return newDesignDataFile(designValues,format,sample,fileIndex);
default :
return null;
}
}",0.993077988001846
141235,"@Override public Set<DataFormat> getInputFormats(){
  return Sets.newHashSet(MAPPER_RESULTS_SAM,GENOME_DESC_TXT);
}","@Override public Set<DataFormat> getInputFormats(){
  return newHashSet(MAPPER_RESULTS_SAM,GENOME_DESC_TXT);
}",0.9777777777777776
141236,"/** 
 * Execute HTSeq-count counter as an Hadoop job.
 * @param design design object
 * @param context Eoulsan context
 * @return a StepResult object
 */
private StepResult executeJobHTSeqCounter(final Design design,final Context context){
  final Configuration conf=new Configuration(false);
  final Map<Sample,Job> jobsRunning=new HashMap<Sample,Job>();
  try {
    final long startTime=System.currentTimeMillis();
    LOGGER.info(""String_Node_Str"" + getGenomicType());
    final List<Job> jobsPairedEnd=new ArrayList<Job>();
    for (    Sample s : design.getSamples()) {
      if (context.getDataFileCount(READS_FASTQ,s) == 2)       jobsPairedEnd.add(createJobPairedEnd(conf,context,s));
    }
    MapReduceUtils.submitAndWaitForJobs(jobsPairedEnd,CommonHadoop.CHECK_COMPLETION_TIME,COUNTER_GROUP);
    for (    Sample s : design.getSamples()) {
      final Job jconf=createJobHTSeqCounter(conf,context,s,getGenomicType(),getAttributeId(),getStranded(),getOverlapMode(),isRemoveAmbiguousCases());
      jconf.submit();
      jobsRunning.put(s,jconf);
    }
    final HadoopJobsResults jobsResults=new NewAPIJobsResults(jobsRunning.values(),CommonHadoop.CHECK_COMPLETION_TIME,COUNTER_GROUP);
    final long mapReduceEndTime=System.currentTimeMillis();
    LOGGER.info(""String_Node_Str"" + ((mapReduceEndTime - startTime) / 1000) + ""String_Node_Str"");
    createFinalExpressionFeaturesFile(context,jobsRunning,this.conf);
    LOGGER.info(""String_Node_Str"" + ((System.currentTimeMillis() - mapReduceEndTime) / 1000) + ""String_Node_Str"");
    return jobsResults.getStepResult(context,startTime);
  }
 catch (  IOException e) {
    return new StepResult(context,e,""String_Node_Str"" + e.getMessage());
  }
catch (  InterruptedException e) {
    return new StepResult(context,e,""String_Node_Str"" + e.getMessage());
  }
catch (  BadBioEntryException e) {
    return new StepResult(context,e,""String_Node_Str"" + e.getEntry());
  }
catch (  ClassNotFoundException e) {
    return new StepResult(context,e,""String_Node_Str"" + e.getMessage());
  }
catch (  EoulsanException e) {
    return new StepResult(context,e,""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Execute HTSeq-count counter as an Hadoop job.
 * @param design design object
 * @param context Eoulsan context
 * @return a StepResult object
 */
private StepResult executeJobHTSeqCounter(final Design design,final Context context){
  final Configuration conf=new Configuration(false);
  final Map<Sample,Job> jobsRunning=new HashMap<Sample,Job>();
  try {
    final long startTime=System.currentTimeMillis();
    LOGGER.info(""String_Node_Str"" + getGenomicType());
    final List<Job> jobsPairedEnd=new ArrayList<Job>();
    for (    Sample s : design.getSamples()) {
      if (context.getDataFileCount(READS_FASTQ,s) == 2)       jobsPairedEnd.add(createJobPairedEnd(conf,context,s));
    }
    if (jobsPairedEnd.size() > 0)     MapReduceUtils.submitAndWaitForJobs(jobsPairedEnd,CommonHadoop.CHECK_COMPLETION_TIME,COUNTER_GROUP);
    for (    Sample s : design.getSamples()) {
      final Job jconf=createJobHTSeqCounter(conf,context,s,getGenomicType(),getAttributeId(),getStranded(),getOverlapMode(),isRemoveAmbiguousCases());
      jconf.submit();
      jobsRunning.put(s,jconf);
    }
    final HadoopJobsResults jobsResults=new NewAPIJobsResults(jobsRunning.values(),CommonHadoop.CHECK_COMPLETION_TIME,COUNTER_GROUP);
    final long mapReduceEndTime=System.currentTimeMillis();
    LOGGER.info(""String_Node_Str"" + ((mapReduceEndTime - startTime) / 1000) + ""String_Node_Str"");
    createFinalExpressionFeaturesFile(context,jobsRunning,this.conf);
    LOGGER.info(""String_Node_Str"" + ((System.currentTimeMillis() - mapReduceEndTime) / 1000) + ""String_Node_Str"");
    return jobsResults.getStepResult(context,startTime);
  }
 catch (  IOException e) {
    return new StepResult(context,e,""String_Node_Str"" + e.getMessage());
  }
catch (  InterruptedException e) {
    return new StepResult(context,e,""String_Node_Str"" + e.getMessage());
  }
catch (  BadBioEntryException e) {
    return new StepResult(context,e,""String_Node_Str"" + e.getEntry());
  }
catch (  ClassNotFoundException e) {
    return new StepResult(context,e,""String_Node_Str"" + e.getMessage());
  }
catch (  EoulsanException e) {
    return new StepResult(context,e,""String_Node_Str"" + e.getMessage());
  }
}",0.9921478060046188
141237,"@Override public StepResult execute(final Design design,final Context context){
  if (getCounter().getCounterName().equals(""String_Node_Str""))   return executeJobEoulsanCounter(design,context);
 else   if (getCounter().getCounterName().equals(""String_Node_Str""))   return executeJobHTSeqCounter(design,context);
  return new StepResult(context,new EoulsanException(""String_Node_Str"" + getCounter().getCounterName()),""String_Node_Str"" + getCounter().getCounterName());
}","@Override public StepResult execute(final Design design,final Context context){
  if (getCounter().getCounterName().equals(EoulsanCounter.COUNTER_NAME))   return executeJobEoulsanCounter(design,context);
 else   if (getCounter().getCounterName().equals(HTSeqCounter.COUNTER_NAME))   return executeJobHTSeqCounter(design,context);
  return new StepResult(context,new EoulsanException(""String_Node_Str"" + getCounter().getCounterName()),""String_Node_Str"" + getCounter().getCounterName());
}",0.910041841004184
141238,"private static final void createFinalExpressionFeaturesFile(final Context context,final Map<Sample,Job> jobconfs,final Configuration conf) throws IOException {
  FinalExpressionFeaturesCreator fefc=null;
  for (  Map.Entry<Sample,Job> e : jobconfs.entrySet()) {
    final Sample sample=e.getKey();
    final FileSystem fs=new Path(context.getBasePathname()).getFileSystem(conf);
    final Path featuresIndexPath=new Path(context.getOtherDataFilename(ANNOTATION_INDEX_SERIAL,sample));
    fefc=new FinalExpressionFeaturesCreator(fs.open(featuresIndexPath));
    final Path resultPath=new Path(context.getOtherDataFilename(EXPRESSION_RESULTS_TXT,sample));
    fefc.initializeExpressionResults();
    fefc.loadPreResults(new DataFile(context.getOutputDataFile(EXPRESSION_RESULTS_TXT,sample).getSourceWithoutExtension() + ""String_Node_Str"").open());
    fefc.saveFinalResults(fs.create(resultPath));
  }
}","private static final void createFinalExpressionFeaturesFile(final Context context,final Map<Sample,Job> jobconfs,final Configuration conf) throws IOException {
  FinalExpressionFeaturesCreator fefc=null;
  for (  Map.Entry<Sample,Job> e : jobconfs.entrySet()) {
    LOGGER.info(""String_Node_Str"" + e.getValue().getConfiguration().get(""String_Node_Str""));
    Path p=new Path(e.getValue().getConfiguration().get(""String_Node_Str""));
    FileSystem fs=FileSystem.get(p.toUri(),conf);
    for (    FileStatus fst : fs.listStatus(p.getParent())) {
      LOGGER.info(fst.getPath().getName() + ""String_Node_Str"" + fst.getLen());
    }
    final Sample sample=e.getKey();
    final Path featuresIndexPath=new Path(context.getOtherDataFilename(ANNOTATION_INDEX_SERIAL,sample));
    fefc=new FinalExpressionFeaturesCreator(fs.open(featuresIndexPath));
    final Path resultPath=new Path(context.getOtherDataFilename(EXPRESSION_RESULTS_TXT,sample));
    fefc.initializeExpressionResults();
    fefc.loadPreResults(new DataFile(e.getValue().getConfiguration().get(""String_Node_Str"")).open());
    fefc.saveFinalResults(fs.create(resultPath));
  }
}",0.633954857703631
141239,"public Ticket(final int pid,final long threadId,final long creationTime,final long nanoCreationTime,final long lastActiveTime,final boolean working){
  this.pid=pid;
  this.threadId=threadId;
  this.creationTime=creationTime;
  this.nanoCreationTime=nanoCreationTime;
  this.lastActiveTime=lastActiveTime == -1 ? this.creationTime : lastActiveTime;
  this.working=working;
}","public Ticket(final int pid,final long threadId,final long creationTime,final long nanoCreationTime,final String description,final long lastActiveTime,final boolean working){
  this.pid=pid;
  this.threadId=threadId;
  this.creationTime=creationTime;
  this.nanoCreationTime=nanoCreationTime;
  this.description=description;
  this.lastActiveTime=lastActiveTime == -1 ? this.creationTime : lastActiveTime;
  this.working=working;
}",0.929192546583851
141240,"@Override public String toString(){
  return (this.creationTime - initTime) + ""String_Node_Str"" + this.pid+ '.'+ this.threadId+ ""String_Node_Str"";
}","@Override public String toString(){
  return DATE_FORMAT.format(new Date(this.creationTime)) + ""String_Node_Str"" + DATE_FORMAT.format(new Date(this.lastActiveTime))+ ""String_Node_Str""+ DATE_FORMAT.format(new Date(System.currentTimeMillis() - this.creationTime))+ ""String_Node_Str""+ (this.working ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ this.pid+ '.'+ this.threadId+ ""String_Node_Str""+ (this.description != null ? this.description : ""String_Node_Str"")+ ""String_Node_Str"";
}",0.31201248049922
141241,"@Override public void lock() throws IOException {
  if (thread == null)   thread=new LockerThread(new Ticket());
  final Thread t=new Thread(thread);
  t.start();
  while (t.isAlive())   try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
}","@Override public void lock() throws IOException {
  if (thread == null)   thread=new LockerThread(new Ticket(this.description));
  final Thread t=new Thread(thread);
  t.start();
  while (t.isAlive())   try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
}",0.9703703703703704
141242,"/** 
 * Public constructor.
 * @param lockerName The name of the locker
 * @param port port to use
 */
public TicketLocker(final String lockerName,final int port){
  this.lockerName=lockerName;
  this.port=port;
}","/** 
 * Public constructor.
 * @param lockerName The name of the locker
 * @param port port to use
 * @param description locker description
 */
public TicketLocker(final String lockerName,final int port,final String description){
  this.lockerName=lockerName;
  this.port=port;
  this.description=description;
}",0.8129770992366412
141243,"/** 
 * Main method.
 * @param args command line arguments
 * @throws RemoteException if an error occurs while inspecting tickets
 */
public static final void main(String[] args) throws RemoteException {
  if (args.length < 2) {
    System.err.println(""String_Node_Str"" + TicketLocker.class.getName() + ""String_Node_Str"");
    return;
  }
  TicketLocker locker=new TicketLocker(args[0],Integer.parseInt(args[1]));
  for (  Ticket t : locker.getStub().getTickets(null)) {
    System.out.println(t);
  }
}","/** 
 * Main method.
 * @param args command line arguments
 * @throws RemoteException if an error occurs while inspecting tickets
 * @throws MalformedURLException
 */
public static final void main(String[] args) throws RemoteException, MalformedURLException {
  if (args.length < 2) {
    System.err.println(""String_Node_Str"" + TicketLocker.class.getName() + ""String_Node_Str"");
    return;
  }
  TicketLocker locker=new TicketLocker(args[0],Integer.parseInt(args[1]),null);
  List<Ticket> tickets=new ArrayList<Ticket>(locker.getStub().getTickets(null));
  Collections.sort(tickets);
  for (  Ticket t : tickets) {
    System.out.println(t);
  }
}",0.8166811468288445
141244,"public static void newServer(final Set<Ticket> tickets,final String lockerName,final int port){
  try {
    final TicketScheduler stub=(TicketScheduler)UnicastRemoteObject.exportObject(new TicketSchedulerServer(tickets),0);
    Registry registry=LocateRegistry.getRegistry(port);
    if (registry == null)     registry=LocateRegistry.createRegistry(port);
    registry.bind(TicketLocker.RMI_SERVICE_PREFIX + lockerName,stub);
  }
 catch (  Exception e) {
    Utils.nop();
  }
}","public static void newServer(final Set<Ticket> tickets,final String lockerName,final int port){
  if (serverInstance != null)   return;
  try {
    serverInstance=new TicketSchedulerServer(tickets);
    final TicketScheduler stub=(TicketScheduler)UnicastRemoteObject.exportObject(serverInstance,0);
    Registry registry=LocateRegistry.getRegistry(port);
    if (registry == null)     registry=LocateRegistry.createRegistry(port);
    registry.bind(TicketLocker.RMI_SERVICE_PREFIX + lockerName,stub);
  }
 catch (  Exception e) {
    Utils.nop();
  }
}",0.8707482993197279
141245,"public TicketSchedulerServer(final Set<Ticket> tickets){
  if (tickets != null) {
    for (    Ticket t : tickets)     this.tickets.put(t,t);
    check();
  }
}","private TicketSchedulerServer(final Set<Ticket> tickets){
  if (tickets != null) {
    for (    Ticket t : tickets)     this.tickets.put(t,t);
    check();
  }
}",0.97196261682243
141246,"/** 
 * Execute the analysis.
 * @throws EoulsanException if an error occurs while creating or executing theR script
 */
public void run() throws EoulsanException {
  final Map<String,Integer> conditionsMap=new HashMap<String,Integer>();
  final List<Integer> rSampleIds=new ArrayList<Integer>();
  final List<String> rSampleNames=new ArrayList<String>();
  final List<String> rCondNames=new ArrayList<String>();
  final List<Integer> rCondIndexes=new ArrayList<Integer>();
  final List<String> rCondRep=new ArrayList<String>();
  for (  Sample s : this.design.getSamples()) {
    if (!s.getMetadata().isConditionField())     throw new EoulsanException(""String_Node_Str"");
    if (!s.getMetadata().isReplicatTypeField())     throw new EoulsanException(""String_Node_Str"");
    final String condition=s.getMetadata().getCondition().trim();
    final String replicatType=s.getMetadata().getReplicatType().trim().toLowerCase();
    if (""String_Node_Str"".equals(condition))     throw new EoulsanException(""String_Node_Str"" + s.getName() + ""String_Node_Str""+ s.getId()+ ""String_Node_Str"");
    if (!(""String_Node_Str"".equals(replicatType) || ""String_Node_Str"".equals(replicatType)))     throw new EoulsanException(""String_Node_Str"" + replicatType + ""String_Node_Str""+ s.getName()+ ""String_Node_Str""+ s.getId()+ ""String_Node_Str"");
    if (!conditionsMap.containsKey(condition)) {
      conditionsMap.put(condition,conditionsMap.size() + 1);
      rCondNames.add(condition);
    }
    rSampleIds.add(s.getId());
    rSampleNames.add(s.getName());
    rCondIndexes.add(conditionsMap.get(condition));
    rCondRep.add(replicatType);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(Globals.APP_NAME);
  sb.append(""String_Node_Str"");
  sb.append(Globals.APP_VERSION_STRING);
  sb.append(""String_Node_Str"");
  sb.append(new Date(System.currentTimeMillis()));
  sb.append(""String_Node_Str"");
  sb.append(readStaticScript());
  if (isBiologicalReplicates(rCondIndexes,rCondRep))   writeWithBiologicalReplicate(sb,rSampleIds,rSampleNames,rCondIndexes,rCondNames,rCondRep);
 else   writeWithoutBiologicalReplicate(sb,rSampleIds,rSampleNames,rCondIndexes,rCondNames);
  final File rScript;
  try {
    rScript=FileUtils.createTempFile(this.tempDir,""String_Node_Str"",""String_Node_Str"");
    LOGGER.fine(""String_Node_Str"" + rScript.getAbsolutePath());
    Writer writer=FileUtils.createFastBufferedWriter(rScript);
    writer.write(sb.toString());
    writer.close();
    rScript.setExecutable(true);
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
  try {
    final ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",StringUtils.bashEscaping(rScript.getAbsolutePath()));
    pb.environment().put(""String_Node_Str"",this.tempDir.getAbsolutePath());
    ProcessUtils.logEndTime(pb.start(),pb.toString(),System.currentTimeMillis());
    if (!rScript.delete())     LOGGER.warning(""String_Node_Str"" + rScript.getAbsolutePath());
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Execute the analysis.
 * @throws EoulsanException if an error occurs while creating or executing theR script
 */
public void run() throws EoulsanException {
  final Map<String,Integer> conditionsMap=new HashMap<String,Integer>();
  final List<Integer> rSampleIds=new ArrayList<Integer>();
  final List<String> rSampleNames=new ArrayList<String>();
  final List<String> rCondNames=new ArrayList<String>();
  final List<Integer> rCondIndexes=new ArrayList<Integer>();
  final List<String> rCondRep=new ArrayList<String>();
  for (  Sample s : this.design.getSamples()) {
    if (!s.getMetadata().isConditionField())     throw new EoulsanException(""String_Node_Str"");
    if (!s.getMetadata().isReplicatTypeField())     throw new EoulsanException(""String_Node_Str"");
    final String condition=s.getMetadata().getCondition().trim();
    final String replicatType=s.getMetadata().getReplicatType().trim().toLowerCase();
    if (""String_Node_Str"".equals(condition))     throw new EoulsanException(""String_Node_Str"" + s.getName() + ""String_Node_Str""+ s.getId()+ ""String_Node_Str"");
    if (!(""String_Node_Str"".equals(replicatType) || ""String_Node_Str"".equals(replicatType)))     throw new EoulsanException(""String_Node_Str"" + replicatType + ""String_Node_Str""+ s.getName()+ ""String_Node_Str""+ s.getId()+ ""String_Node_Str"");
    if (!conditionsMap.containsKey(condition)) {
      conditionsMap.put(condition,conditionsMap.size() + 1);
      rCondNames.add(condition);
    }
    rSampleIds.add(s.getId());
    rSampleNames.add(s.getName());
    rCondIndexes.add(conditionsMap.get(condition));
    rCondRep.add(replicatType);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(Globals.APP_NAME);
  sb.append(""String_Node_Str"");
  sb.append(Globals.APP_VERSION_STRING);
  sb.append(""String_Node_Str"");
  sb.append(new Date(System.currentTimeMillis()));
  sb.append(""String_Node_Str"");
  sb.append(readStaticScript());
  if (isBiologicalReplicates(rCondIndexes,rCondRep))   writeWithBiologicalReplicate(sb,rSampleIds,rSampleNames,rCondIndexes,rCondNames,rCondRep);
 else   writeWithoutBiologicalReplicate(sb,rSampleIds,rSampleNames,rCondIndexes,rCondNames);
  final File rScript;
  try {
    rScript=FileUtils.createTempFile(this.tempDir,""String_Node_Str"",""String_Node_Str"");
    LOGGER.fine(""String_Node_Str"" + rScript.getAbsolutePath());
    Writer writer=FileUtils.createFastBufferedWriter(rScript);
    writer.write(sb.toString());
    writer.close();
    rScript.setExecutable(true);
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
  try {
    final ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",rScript.getAbsolutePath());
    pb.environment().put(""String_Node_Str"",this.tempDir.getAbsolutePath());
    ProcessUtils.logEndTime(pb.start(),Joiner.on(' ').join(pb.command()),System.currentTimeMillis());
    if (!rScript.delete())     LOGGER.warning(""String_Node_Str"" + rScript.getAbsolutePath());
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + e.getMessage());
  }
}",0.9897730904442312
141247,"/** 
 * Execute the analysis.
 * @param rScript
 * @throws IOException
 * @throws REngineException
 * @throws EoulsanException
 */
private void runRnwScript(String rnwScript) throws REngineException, EoulsanException {
  if (EoulsanRuntime.getSettings().isRServeServerEnabled()) {
    this.rConnection.executeRnwCode(rnwScript);
  }
 else {
    try {
      final ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",StringUtils.bashEscaping(rnwScript));
      pb.environment().put(""String_Node_Str"",this.outPath.getAbsolutePath());
      ProcessUtils.logEndTime(pb.start(),pb.toString(),System.currentTimeMillis());
      if (!new File(rnwScript).delete())       LOGGER.warning(""String_Node_Str"" + rnwScript);
    }
 catch (    IOException e) {
      throw new EoulsanException(""String_Node_Str"" + e.getMessage());
    }
  }
}","/** 
 * Execute the analysis.
 * @param rScript
 * @throws IOException
 * @throws REngineException
 * @throws EoulsanException
 */
private void runRnwScript(String rnwScript) throws REngineException, EoulsanException {
  if (EoulsanRuntime.getSettings().isRServeServerEnabled()) {
    this.rConnection.executeRnwCode(rnwScript);
  }
 else {
    try {
      final ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",rnwScript);
      pb.environment().put(""String_Node_Str"",this.outPath.getAbsolutePath());
      ProcessUtils.logEndTime(pb.start(),Joiner.on(' ').join(pb.command()),System.currentTimeMillis());
      if (!new File(rnwScript).delete())       LOGGER.warning(""String_Node_Str"" + rnwScript);
    }
 catch (    IOException e) {
      throw new EoulsanException(""String_Node_Str"" + e.getMessage());
    }
  }
}",0.9523809523809524
141248,"/** 
 * Create a GenomeDescription object from a Fasta file of GFF file.
 * @param genomeFastaIs genome fasta input stream
 * @param filename name of the file of the input stream
 * @param gffFormat the input file is in GFF format
 */
public static GenomeDescription createGenomeDesc(final InputStream genomeFastaIs,final String filename,final boolean gffFormat) throws BadBioEntryException, IOException {
  checkNotNull(genomeFastaIs,""String_Node_Str"");
  LOGGER.fine(""String_Node_Str"");
  final GenomeDescription result=new GenomeDescription();
  result.setGenomeName(StringUtils.basename(filename));
  MessageDigest md5Digest;
  try {
    md5Digest=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    md5Digest=null;
  }
  final FastaLineParser parser=new FastaLineParser(genomeFastaIs,gffFormat);
  final Alphabet alphabet=Alphabets.AMBIGUOUS_DNA_ALPHABET;
  String seqName=null;
  String lastSeqName=null;
  String parsedSeqName=null;
  long chrSize=0;
  while ((seqName=parser.parseNextLineAndGetSequenceName()) != null) {
    if (!seqName.equals(lastSeqName)) {
      if (result.getSequenceLength(lastSeqName) != -1)       throw new BadBioEntryException(""String_Node_Str"" + lastSeqName,lastSeqName);
      if (lastSeqName != null)       result.addSequence(parsedSeqName,chrSize);
      parsedSeqName=parseChromosomeName(seqName);
      if (md5Digest != null)       md5Digest.update(parsedSeqName.getBytes(Globals.DEFAULT_FILE_ENCODING));
      lastSeqName=seqName;
      chrSize=0;
    }
    final String sequence=parser.getSequence();
    chrSize+=checkBases(sequence,lastSeqName,alphabet);
    md5Digest.update(sequence.getBytes(Globals.DEFAULT_FILE_ENCODING));
  }
  if (lastSeqName != null)   result.addSequence(parsedSeqName,chrSize);
  if (md5Digest != null)   result.setMD5Sum(digestToString(md5Digest));
  genomeFastaIs.close();
  return result;
}","/** 
 * Create a GenomeDescription object from a Fasta file of GFF file.
 * @param genomeFastaIs genome fasta input stream
 * @param filename name of the file of the input stream
 * @param gffFormat the input file is in GFF format
 */
public static GenomeDescription createGenomeDesc(final InputStream genomeFastaIs,final String filename,final boolean gffFormat) throws BadBioEntryException, IOException {
  checkNotNull(genomeFastaIs,""String_Node_Str"");
  LOGGER.fine(""String_Node_Str"");
  final GenomeDescription result=new GenomeDescription();
  result.setGenomeName(StringUtils.basename(filename));
  MessageDigest md5Digest;
  try {
    md5Digest=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    md5Digest=null;
  }
  final FastaLineParser parser=new FastaLineParser(genomeFastaIs,gffFormat);
  final Alphabet alphabet=Alphabets.AMBIGUOUS_DNA_ALPHABET;
  String seqName=null;
  String lastSeqName=null;
  String parsedSeqName=null;
  long chrSize=0;
  while ((seqName=parser.parseNextLineAndGetSequenceName()) != null) {
    if (!seqName.equals(lastSeqName)) {
      if (result.getSequenceLength(lastSeqName) != -1)       throw new BadBioEntryException(""String_Node_Str"" + lastSeqName,lastSeqName);
      if (lastSeqName != null)       result.addSequence(parsedSeqName,chrSize);
      parsedSeqName=parseChromosomeName(seqName);
      if (parsedSeqName == null)       throw new IOException(""String_Node_Str"");
      if (md5Digest != null)       md5Digest.update(parsedSeqName.getBytes(Globals.DEFAULT_FILE_ENCODING));
      lastSeqName=seqName;
      chrSize=0;
    }
    final String sequence=parser.getSequence();
    if (sequence == null)     throw new IOException(""String_Node_Str"");
    chrSize+=checkBases(sequence,lastSeqName,alphabet);
    md5Digest.update(sequence.getBytes(Globals.DEFAULT_FILE_ENCODING));
  }
  if (lastSeqName != null)   result.addSequence(parsedSeqName,chrSize);
  if (md5Digest != null)   result.setMD5Sum(digestToString(md5Digest));
  genomeFastaIs.close();
  return result;
}",0.96137339055794
141249,"@Override public boolean equals(final Object o){
  if (o == this)   return true;
  if (o == null || !(o instanceof Exon))   return false;
  final GenomicInterval that=(GenomicInterval)o;
  return Utils.equal(this.chromosome,that.chromosome) && this.start == that.start && this.end == that.end && this.strand == that.strand;
}","@Override public boolean equals(final Object o){
  if (o == this)   return true;
  if (o == null || !(o instanceof GenomicInterval))   return false;
  final GenomicInterval that=(GenomicInterval)o;
  return Utils.equal(this.chromosome,that.chromosome) && this.start == that.start && this.end == that.end && this.strand == that.strand;
}",0.9712556732223904
141250,"@Override protected void internalCount(File alignmentFile,DataFile annotationFile,File expressionFile,final DataFile genomeDescFile,Reporter reporter,String counterGroup) throws IOException {
  ExpressionPseudoMapReduce epmr=null;
  String lastAnnotationKey=null;
  final String genomicType=getGenomicType();
  final String annotationKey=annotationFile.getName() + ""String_Node_Str"" + getGenomicType();
  final File expressionTmpFile=new File(alignmentFile.getAbsolutePath() + ""String_Node_Str"");
  try {
    if (!annotationKey.equals(lastAnnotationKey)) {
      epmr=new ExpressionPseudoMapReduce(annotationFile.open(),genomicType,genomeDescFile.open(),counterGroup);
      lastAnnotationKey=annotationKey;
    }
    if (getTempDirectory() != null)     epmr.setMapReduceTemporaryDirectory(new File(getTempDirectory()));
    epmr.doMap(alignmentFile);
    epmr.doReduce(expressionTmpFile);
    final FinalExpressionTranscriptsCreator fetc=new FinalExpressionTranscriptsCreator(epmr.getTranscriptAndExonFinder());
    fetc.initializeExpressionResults();
    fetc.loadPreResults(expressionTmpFile,epmr.getReporter().getCounterValue(counterGroup,""String_Node_Str""));
    fetc.saveFinalResults(expressionFile);
    if (!expressionTmpFile.delete())     LOGGER.warning(""String_Node_Str"" + expressionTmpFile.getAbsolutePath());
  }
 catch (  BadBioEntryException e) {
  }
}","@Override protected void internalCount(final File alignmentFile,final DataFile annotationFile,final File expressionFile,final DataFile genomeDescFile,final Reporter reporter,final String counterGroup) throws IOException {
  ExpressionPseudoMapReduce epmr=null;
  final String genomicType=getGenomicType();
  final File expressionTmpFile=new File(alignmentFile.getAbsolutePath() + ""String_Node_Str"");
  try {
    epmr=new ExpressionPseudoMapReduce(annotationFile.open(),genomicType,genomeDescFile.open(),counterGroup);
    if (getTempDirectory() != null)     epmr.setMapReduceTemporaryDirectory(new File(getTempDirectory()));
    epmr.doMap(alignmentFile);
    epmr.doReduce(expressionTmpFile);
    final FinalExpressionTranscriptsCreator fetc=new FinalExpressionTranscriptsCreator(epmr.getTranscriptAndExonFinder());
    fetc.initializeExpressionResults();
    fetc.loadPreResults(expressionTmpFile,epmr.getReporter().getCounterValue(counterGroup,""String_Node_Str""));
    fetc.saveFinalResults(expressionFile);
    if (!expressionTmpFile.delete())     LOGGER.warning(""String_Node_Str"" + expressionTmpFile.getAbsolutePath());
  }
 catch (  BadBioEntryException e) {
  }
}",0.7255520504731862
141251,"/** 
 * Public constructor.
 * @param serverName RServe server to use
 */
public RSConnectionNewImpl(final String serverName){
  System.out.println(this.serverName);
  this.serverName=serverName == null ? ""String_Node_Str"" : serverName.trim();
}","/** 
 * Public constructor.
 * @param serverName RServe server to use
 */
public RSConnectionNewImpl(final String serverName){
  this.serverName=serverName == null ? ""String_Node_Str"" : serverName.trim();
}",0.9135254988913526
141252,"/** 
 * Count the number of alignments for all the features of the annotation file.
 * @param samFile SAM file that contains alignments.
 * @param gffFile annotation file.
 * @param outFile output file.
 * @param stranded strand to consider.
 * @param overlapMode overlap mode to consider.
 * @param featureType annotation feature type to consider.
 * @param attributeId annotation attribute id to consider.
 * @param quiet if true : suppress progress report and warnings.
 * @param minAverageQual minimum value for alignment quality.
 * @param samOutFile output SAM file annotating each line with its assignmentto a feature or a special counter (as an optional field with tag 'XF').
 * @param reporter Reporter object.
 * @param counterGroup counter group for the Reporter object.
 * @throws EoulsanException
 * @throws IOException
 * @throws BadBioEntryException
 */
private static void countReadsInFeatures(final File samFile,final InputStream gffFile,final File outFile,final StrandUsage stranded,final OverlapMode overlapMode,final String featureType,final String attributeId,final boolean quiet,final int minAverageQual,final File samOutFile,Reporter reporter,String counterGroup) throws EoulsanException, IOException, BadBioEntryException {
  final GenomicArray<String> features=new GenomicArray<String>();
  final Map<String,Integer> counts=Utils.newHashMap();
  Writer writer=new FileWriter(outFile);
  boolean pairedEnd=false;
  final GFFReader gffReader=new GFFReader(gffFile);
  for (  final GFFEntry gff : gffReader) {
    if (featureType.equals(gff.getType())) {
      final String featureId=gff.getAttributeValue(attributeId);
      if (featureId == null)       throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ attributeId+ ""String_Node_Str"");
      if ((stranded == StrandUsage.YES || stranded == StrandUsage.REVERSE) && '.' == gff.getStrand())       throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ ""String_Node_Str"");
      features.addEntry(new GenomicInterval(gff,stranded.isSaveStrandInfo()),featureId);
      counts.put(featureId,0);
    }
  }
  gffReader.throwException();
  gffReader.close();
  if (counts.size() == 0)   throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str"");
  List<GenomicInterval> ivSeq=new ArrayList<GenomicInterval>();
  final SAMFileReader inputSam=new SAMFileReader(samFile);
  final SAMFileReader input=new SAMFileReader(samFile);
  SAMRecordIterator samIterator=input.iterator();
  SAMRecord firstRecord=samIterator.next();
  if (firstRecord.getReadPairedFlag())   pairedEnd=true;
  input.close();
  int empty=0;
  int ambiguous=0;
  int notaligned=0;
  int lowqual=0;
  int nonunique=0;
  int i=0;
  SAMRecord sam1=null, sam2=null;
  for (  final SAMRecord samRecord : inputSam) {
    reporter.incrCounter(counterGroup,ExpressionCounters.TOTAL_ALIGNMENTS_COUNTER.counterName(),1);
    i++;
    if (i % 1000000 == 0)     System.out.println(i + ""String_Node_Str"");
    if (!pairedEnd) {
      ivSeq.clear();
      if (samRecord.getReadUnmappedFlag()) {
        notaligned++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if (samRecord.getAttribute(""String_Node_Str"") != null && samRecord.getIntegerAttribute(""String_Node_Str"") > 1) {
        nonunique++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if (samRecord.getMappingQuality() < minAverageQual) {
        lowqual++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      ivSeq.addAll(addIntervals(samRecord,stranded));
    }
 else {
      if (sam1 != null && sam2 != null) {
        sam1=null;
        sam2=null;
        ivSeq.clear();
      }
      if (samRecord.getFirstOfPairFlag())       sam1=samRecord;
 else       sam2=samRecord;
      if (sam1 == null || sam2 == null)       continue;
      if (!sam1.getReadName().equals(sam2.getReadName())) {
        sam1=sam2;
        sam2=null;
        continue;
      }
      if (sam1 != null && !sam1.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam1,stranded));
      }
      if (sam2 != null && !sam2.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam2,stranded));
      }
      if (sam1.getReadUnmappedFlag() && sam2.getReadUnmappedFlag()) {
        notaligned++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if ((sam1.getAttribute(""String_Node_Str"") != null && sam1.getIntegerAttribute(""String_Node_Str"") > 1) || (sam2.getAttribute(""String_Node_Str"") != null && sam2.getIntegerAttribute(""String_Node_Str"") > 1)) {
        nonunique++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if (sam1.getMappingQuality() < minAverageQual || sam2.getMappingQuality() < minAverageQual) {
        lowqual++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
    }
    Set<String> fs=null;
    fs=featuresOverlapped(ivSeq,features,overlapMode,stranded);
    if (fs == null)     fs=new HashSet<String>();
switch (fs.size()) {
case 0:
      empty++;
    reporter.incrCounter(counterGroup,ExpressionCounters.UNMAPPED_READS_COUNTER.counterName(),1);
  break;
case 1:
final String id=fs.iterator().next();
counts.put(id,counts.get(id) + 1);
break;
default :
ambiguous++;
reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
break;
}
}
inputSam.close();
final List<String> keysSorted=new ArrayList<String>(counts.keySet());
Collections.sort(keysSorted);
for (String key : keysSorted) {
writer.write(key + ""String_Node_Str"" + counts.get(key)+ ""String_Node_Str"");
}
writer.write(String.format(""String_Node_Str"",empty));
writer.write(String.format(""String_Node_Str"",ambiguous));
writer.write(String.format(""String_Node_Str"",lowqual));
writer.write(String.format(""String_Node_Str"",notaligned));
writer.write(String.format(""String_Node_Str"",nonunique));
writer.close();
}","/** 
 * Count the number of alignments for all the features of the annotation file.
 * @param samFile SAM file that contains alignments.
 * @param gffFile annotation file.
 * @param outFile output file.
 * @param stranded strand to consider.
 * @param overlapMode overlap mode to consider.
 * @param featureType annotation feature type to consider.
 * @param attributeId annotation attribute id to consider.
 * @param quiet if true : suppress progress report and warnings.
 * @param minAverageQual minimum value for alignment quality.
 * @param samOutFile output SAM file annotating each line with its assignmentto a feature or a special counter (as an optional field with tag 'XF').
 * @param reporter Reporter object.
 * @param counterGroup counter group for the Reporter object.
 * @throws EoulsanException
 * @throws IOException
 * @throws BadBioEntryException
 */
private static void countReadsInFeatures(final File samFile,final InputStream gffFile,final File outFile,final StrandUsage stranded,final OverlapMode overlapMode,final String featureType,final String attributeId,final boolean quiet,final int minAverageQual,final File samOutFile,Reporter reporter,String counterGroup) throws EoulsanException, IOException, BadBioEntryException {
  final GenomicArray<String> features=new GenomicArray<String>();
  final Map<String,Integer> counts=Utils.newHashMap();
  Writer writer=new FileWriter(outFile);
  boolean pairedEnd=false;
  final GFFReader gffReader=new GFFReader(gffFile);
  for (  final GFFEntry gff : gffReader) {
    if (featureType.equals(gff.getType())) {
      final String featureId=gff.getAttributeValue(attributeId);
      if (featureId == null)       throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ attributeId+ ""String_Node_Str"");
      if ((stranded == StrandUsage.YES || stranded == StrandUsage.REVERSE) && '.' == gff.getStrand())       throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ ""String_Node_Str"");
      features.addEntry(new GenomicInterval(gff,stranded.isSaveStrandInfo()),featureId);
      counts.put(featureId,0);
    }
  }
  gffReader.throwException();
  gffReader.close();
  if (counts.size() == 0)   throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str"");
  List<GenomicInterval> ivSeq=new ArrayList<GenomicInterval>();
  final SAMFileReader inputSam=new SAMFileReader(samFile);
  final SAMFileReader input=new SAMFileReader(samFile);
  SAMRecordIterator samIterator=input.iterator();
  SAMRecord firstRecord=samIterator.next();
  if (firstRecord.getReadPairedFlag())   pairedEnd=true;
  input.close();
  int empty=0;
  int ambiguous=0;
  int notaligned=0;
  int lowqual=0;
  int nonunique=0;
  int i=0;
  SAMRecord sam1=null, sam2=null;
  for (  final SAMRecord samRecord : inputSam) {
    reporter.incrCounter(counterGroup,ExpressionCounters.TOTAL_ALIGNMENTS_COUNTER.counterName(),1);
    i++;
    if (i % 1000000 == 0)     System.out.println(i + ""String_Node_Str"");
    if (!pairedEnd) {
      ivSeq.clear();
      if (samRecord.getReadUnmappedFlag()) {
        notaligned++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if (samRecord.getAttribute(""String_Node_Str"") != null && samRecord.getIntegerAttribute(""String_Node_Str"") > 1) {
        nonunique++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if (samRecord.getMappingQuality() < minAverageQual) {
        lowqual++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      ivSeq.addAll(addIntervals(samRecord,stranded));
    }
 else {
      if (sam1 != null && sam2 != null) {
        sam1=null;
        sam2=null;
        ivSeq.clear();
      }
      if (samRecord.getFirstOfPairFlag())       sam1=samRecord;
 else       sam2=samRecord;
      if (sam1 == null || sam2 == null)       continue;
      if (!sam1.getReadName().equals(sam2.getReadName())) {
        sam1=sam2;
        sam2=null;
        continue;
      }
      if (sam1 != null && !sam1.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam1,stranded));
      }
      if (sam2 != null && !sam2.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam2,stranded));
      }
      if (sam1.getReadUnmappedFlag() && sam2.getReadUnmappedFlag()) {
        notaligned++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if ((sam1.getAttribute(""String_Node_Str"") != null && sam1.getIntegerAttribute(""String_Node_Str"") > 1) || (sam2.getAttribute(""String_Node_Str"") != null && sam2.getIntegerAttribute(""String_Node_Str"") > 1)) {
        nonunique++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if (sam1.getMappingQuality() < minAverageQual || sam2.getMappingQuality() < minAverageQual) {
        lowqual++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
    }
    Set<String> fs=null;
    fs=featuresOverlapped(ivSeq,features,overlapMode,stranded);
    if (fs == null)     fs=new HashSet<String>();
switch (fs.size()) {
case 0:
      empty++;
    reporter.incrCounter(counterGroup,ExpressionCounters.UNMAPPED_READS_COUNTER.counterName(),1);
  break;
case 1:
final String id=fs.iterator().next();
counts.put(id,counts.get(id) + 1);
break;
default :
ambiguous++;
reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
break;
}
}
inputSam.close();
final List<String> keysSorted=new ArrayList<String>(counts.keySet());
Collections.sort(keysSorted);
for (String key : keysSorted) {
writer.write(key + ""String_Node_Str"" + counts.get(key)+ ""String_Node_Str"");
}
writer.write(""String_Node_Str"" + empty + '\n');
writer.write(""String_Node_Str"" + ambiguous + '\n');
writer.write(""String_Node_Str"" + lowqual + '\n');
writer.write(""String_Node_Str"" + notaligned + '\n');
writer.write(""String_Node_Str"" + nonunique + '\n');
writer.close();
}",0.9880306415576126
141253,"private static Set<String> featuresOverlapped(List<GenomicInterval> ivList,GenomicArray<String> features,String mode,String stranded) throws EoulsanException {
  Set<String> fs=null;
  Map<GenomicInterval,String> inter=new HashMap<GenomicInterval,String>();
  if (mode.equals(""String_Node_Str"")) {
    fs=new HashSet<String>();
    for (    final GenomicInterval iv : ivList) {
      final String chr=iv.getChromosome();
      if (!features.containsChromosome(chr))       throw new EoulsanException(""String_Node_Str"" + chr);
      Map<GenomicInterval,String> intervals=features.getEntries(chr,iv.getStart(),iv.getEnd());
      if (stranded.equals(""String_Node_Str"") || stranded.equals(""String_Node_Str"")) {
        for (        Map.Entry<GenomicInterval,String> e : intervals.entrySet()) {
          if (e.getKey().getStrand() == iv.getStrand())           inter.put(e.getKey(),e.getValue());
        }
        intervals=inter;
      }
      if (intervals != null) {
        Collection<String> values=intervals.values();
        if (values != null) {
          fs.addAll(values);
        }
      }
    }
  }
 else   if (mode.equals(""String_Node_Str"")) {
    final Set<String> featureTmp=new HashSet<String>();
    for (    final GenomicInterval iv : ivList) {
      final String chr=iv.getChromosome();
      if (!features.containsChromosome(chr))       throw new EoulsanException(""String_Node_Str"" + chr);
      Map<GenomicInterval,String> intervals=features.getEntries(chr,iv.getStart(),iv.getEnd());
      if (stranded.equals(""String_Node_Str"") || stranded.equals(""String_Node_Str"")) {
        for (        Map.Entry<GenomicInterval,String> e : intervals.entrySet()) {
          if (e.getKey().getStrand() == iv.getStrand())           inter.put(e.getKey(),e.getValue());
        }
        intervals=inter;
      }
      if (intervals != null) {
        Collection<String> values=intervals.values();
        if (values != null) {
          for (int pos=iv.getStart(); pos <= iv.getEnd(); pos++) {
            featureTmp.clear();
            for (            Map.Entry<GenomicInterval,String> e : intervals.entrySet()) {
              if (e.getKey().include(pos,pos))               featureTmp.add(e.getValue());
            }
            if (featureTmp.size() > 0) {
              if (fs == null) {
                fs=new HashSet<String>();
                fs.addAll(featureTmp);
              }
 else               fs.retainAll(featureTmp);
            }
          }
        }
      }
    }
  }
 else   if (mode == ""String_Node_Str"") {
    final Set<String> featureTmp=new HashSet<String>();
    for (    final GenomicInterval iv : ivList) {
      final String chr=iv.getChromosome();
      if (!features.containsChromosome(chr))       throw new EoulsanException(""String_Node_Str"" + chr);
      Map<GenomicInterval,String> intervals=features.getEntries(chr,iv.getStart(),iv.getEnd());
      if (stranded.equals(""String_Node_Str"") || stranded.equals(""String_Node_Str"")) {
        for (        Map.Entry<GenomicInterval,String> e : intervals.entrySet()) {
          if (e.getKey().getStrand() == iv.getStrand())           inter.put(e.getKey(),e.getValue());
        }
        intervals=inter;
      }
      if (intervals != null) {
        Collection<String> values=intervals.values();
        if (values != null) {
          for (int pos=iv.getStart(); pos <= iv.getEnd(); pos++) {
            featureTmp.clear();
            for (            Map.Entry<GenomicInterval,String> e : intervals.entrySet()) {
              if (e.getKey().include(pos,pos)) {
                featureTmp.add(e.getValue());
              }
            }
            if (fs == null) {
              fs=new HashSet<String>();
              fs.addAll(featureTmp);
            }
 else             fs.retainAll(featureTmp);
          }
        }
      }
 else {
        if (fs == null)         fs=new HashSet<String>();
 else         fs.clear();
      }
    }
  }
  return fs;
}","private static Set<String> featuresOverlapped(List<GenomicInterval> ivList,GenomicArray<String> features,String mode,String stranded) throws EoulsanException {
  Set<String> fs=null;
  Map<GenomicInterval,String> inter=new HashMap<GenomicInterval,String>();
  if (mode.equals(""String_Node_Str"")) {
    fs=new HashSet<String>();
    for (    final GenomicInterval iv : ivList) {
      final String chr=iv.getChromosome();
      if (!features.containsChromosome(chr))       throw new EoulsanException(""String_Node_Str"" + chr);
      Map<GenomicInterval,String> intervals=features.getEntries(chr,iv.getStart(),iv.getEnd());
      if (stranded.equals(""String_Node_Str"") || stranded.equals(""String_Node_Str"")) {
        for (        Map.Entry<GenomicInterval,String> e : intervals.entrySet()) {
          if (e.getKey().getStrand() == iv.getStrand())           inter.put(e.getKey(),e.getValue());
        }
        intervals=inter;
      }
      if (intervals != null) {
        Collection<String> values=intervals.values();
        if (values != null) {
          fs.addAll(values);
        }
      }
    }
  }
 else   if (mode.equals(""String_Node_Str"")) {
    final Set<String> featureTmp=new HashSet<String>();
    for (    final GenomicInterval iv : ivList) {
      final String chr=iv.getChromosome();
      if (!features.containsChromosome(chr))       throw new EoulsanException(""String_Node_Str"" + chr);
      Map<GenomicInterval,String> intervals=features.getEntries(chr,iv.getStart(),iv.getEnd());
      if (stranded.equals(""String_Node_Str"") || stranded.equals(""String_Node_Str"")) {
        for (        Map.Entry<GenomicInterval,String> e : intervals.entrySet()) {
          if (e.getKey().getStrand() == iv.getStrand())           inter.put(e.getKey(),e.getValue());
        }
        intervals=inter;
      }
      if (intervals != null) {
        Collection<String> values=intervals.values();
        if (values != null) {
          for (int pos=iv.getStart(); pos <= iv.getEnd(); pos++) {
            featureTmp.clear();
            for (            Map.Entry<GenomicInterval,String> e : intervals.entrySet()) {
              if (e.getKey().include(pos,pos))               featureTmp.add(e.getValue());
            }
            if (featureTmp.size() > 0) {
              if (fs == null) {
                fs=new HashSet<String>();
                fs.addAll(featureTmp);
              }
 else               fs.retainAll(featureTmp);
            }
          }
        }
      }
    }
  }
 else   if (""String_Node_Str"".equals(mode)) {
    final Set<String> featureTmp=new HashSet<String>();
    for (    final GenomicInterval iv : ivList) {
      final String chr=iv.getChromosome();
      if (!features.containsChromosome(chr))       throw new EoulsanException(""String_Node_Str"" + chr);
      Map<GenomicInterval,String> intervals=features.getEntries(chr,iv.getStart(),iv.getEnd());
      if (stranded.equals(""String_Node_Str"") || stranded.equals(""String_Node_Str"")) {
        for (        Map.Entry<GenomicInterval,String> e : intervals.entrySet()) {
          if (e.getKey().getStrand() == iv.getStrand())           inter.put(e.getKey(),e.getValue());
        }
        intervals=inter;
      }
      if (intervals != null) {
        Collection<String> values=intervals.values();
        if (values != null) {
          for (int pos=iv.getStart(); pos <= iv.getEnd(); pos++) {
            featureTmp.clear();
            for (            Map.Entry<GenomicInterval,String> e : intervals.entrySet()) {
              if (e.getKey().include(pos,pos)) {
                featureTmp.add(e.getValue());
              }
            }
            if (fs == null) {
              fs=new HashSet<String>();
              fs.addAll(featureTmp);
            }
 else             fs.retainAll(featureTmp);
          }
        }
      }
 else {
        if (fs == null)         fs=new HashSet<String>();
 else         fs.clear();
      }
    }
  }
  return fs;
}",0.9973427812223208
141254,"public static void countReadsInFeatures(final InputStream samFile,final File gffFile,final File output,final String stranded,final String overlapMode,final String featureType,final String attributeId,final boolean quiet,final int minAverageQual,final File samOutFile) throws EoulsanException, IOException, BadBioEntryException {
  final GenomicArray<String> features=new GenomicArray<String>();
  final Map<String,Integer> counts=Utils.newHashMap();
  Writer writer=new FileWriter(output);
  boolean pairedEnd=false;
  final GFFReader gffReader=new GFFReader(gffFile);
  for (  final GFFEntry gff : gffReader) {
    if (featureType.equals(gff.getType())) {
      final String featureId=gff.getAttributeValue(attributeId);
      if (featureId == null)       throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ attributeId+ ""String_Node_Str"");
      if (stranded.equals(""String_Node_Str"") && '.' == gff.getStrand())       throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ ""String_Node_Str"");
      boolean saveStrandInfo=""String_Node_Str"".equals(stranded) || ""String_Node_Str"".equals(stranded);
      features.addEntry(new GenomicInterval(gff,saveStrandInfo),featureId);
      counts.put(featureId,0);
    }
  }
  gffReader.throwException();
  gffReader.close();
  if (counts.size() == 0)   throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str"");
  List<GenomicInterval> ivSeq=new ArrayList<GenomicInterval>();
  final SAMFileReader inputSam=new SAMFileReader(samFile);
  final SAMFileReader input=new SAMFileReader(samFile);
  SAMRecordIterator samIterator=input.iterator();
  SAMRecord firstRecord;
  if (samIterator.hasNext())   firstRecord=samIterator.next();
 else   throw new EoulsanException(""String_Node_Str"");
  if (firstRecord.getReadPairedFlag())   pairedEnd=true;
  input.close();
  int empty=0;
  int ambiguous=0;
  int notaligned=0;
  int lowqual=0;
  int nonunique=0;
  int i=0;
  SAMRecord sam1=null, sam2=null;
  for (  final SAMRecord samRecord : inputSam) {
    i++;
    if (i % 1000000 == 0)     System.out.println(i + ""String_Node_Str"");
    if (!pairedEnd) {
      ivSeq.clear();
      if (samRecord.getReadUnmappedFlag()) {
        notaligned++;
        continue;
      }
      if (samRecord.getAttribute(""String_Node_Str"") != null && samRecord.getIntegerAttribute(""String_Node_Str"") > 1) {
        nonunique++;
        continue;
      }
      if (samRecord.getMappingQuality() < minAverageQual) {
        lowqual++;
        continue;
      }
      ivSeq.addAll(addIntervals(samRecord,stranded));
    }
 else {
      if (sam1 != null && sam2 != null) {
        sam1=null;
        sam2=null;
        ivSeq.clear();
      }
      if (samRecord.getFirstOfPairFlag())       sam1=samRecord;
 else       sam2=samRecord;
      if (sam1 == null || sam2 == null)       continue;
      if (!sam1.getReadName().equals(sam2.getReadName())) {
        sam1=sam2;
        sam2=null;
        continue;
      }
      if (sam1 != null && !sam1.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam1,stranded));
      }
      if (sam2 != null && !sam2.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam2,stranded));
      }
      if (sam1.getReadUnmappedFlag() && sam2.getReadUnmappedFlag()) {
        notaligned++;
        continue;
      }
      if ((sam1.getAttribute(""String_Node_Str"") != null && sam1.getIntegerAttribute(""String_Node_Str"") > 1) || (sam2.getAttribute(""String_Node_Str"") != null && sam2.getIntegerAttribute(""String_Node_Str"") > 1)) {
        nonunique++;
        continue;
      }
      if (sam1.getMappingQuality() < minAverageQual || sam2.getMappingQuality() < minAverageQual) {
        lowqual++;
        continue;
      }
    }
    Set<String> fs=null;
    fs=featuresOverlapped(ivSeq,features,overlapMode,stranded);
    if (fs == null)     fs=new HashSet<String>();
switch (fs.size()) {
case 0:
      empty++;
    break;
case 1:
  final String id=fs.iterator().next();
counts.put(id,counts.get(id) + 1);
break;
default :
ambiguous++;
break;
}
}
inputSam.close();
final List<String> keysSorted=new ArrayList<String>(counts.keySet());
Collections.sort(keysSorted);
for (String key : keysSorted) {
writer.write(key + ""String_Node_Str"" + counts.get(key)+ ""String_Node_Str"");
}
writer.write(String.format(""String_Node_Str"",empty));
writer.write(String.format(""String_Node_Str"",ambiguous));
writer.write(String.format(""String_Node_Str"",lowqual));
writer.write(String.format(""String_Node_Str"",notaligned));
writer.write(String.format(""String_Node_Str"",nonunique));
writer.close();
}","public static void countReadsInFeatures(final InputStream samFile,final File gffFile,final File output,final String stranded,final String overlapMode,final String featureType,final String attributeId,final boolean quiet,final int minAverageQual,final File samOutFile) throws EoulsanException, IOException, BadBioEntryException {
  final GenomicArray<String> features=new GenomicArray<String>();
  final Map<String,Integer> counts=Utils.newHashMap();
  Writer writer=new FileWriter(output);
  boolean pairedEnd=false;
  final GFFReader gffReader=new GFFReader(gffFile);
  for (  final GFFEntry gff : gffReader) {
    if (featureType.equals(gff.getType())) {
      final String featureId=gff.getAttributeValue(attributeId);
      if (featureId == null)       throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ attributeId+ ""String_Node_Str"");
      if (stranded.equals(""String_Node_Str"") && '.' == gff.getStrand())       throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ ""String_Node_Str"");
      boolean saveStrandInfo=""String_Node_Str"".equals(stranded) || ""String_Node_Str"".equals(stranded);
      features.addEntry(new GenomicInterval(gff,saveStrandInfo),featureId);
      counts.put(featureId,0);
    }
  }
  gffReader.throwException();
  gffReader.close();
  if (counts.size() == 0)   throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str"");
  List<GenomicInterval> ivSeq=new ArrayList<GenomicInterval>();
  final SAMFileReader inputSam=new SAMFileReader(samFile);
  final SAMFileReader input=new SAMFileReader(samFile);
  SAMRecordIterator samIterator=input.iterator();
  SAMRecord firstRecord;
  if (samIterator.hasNext())   firstRecord=samIterator.next();
 else   throw new EoulsanException(""String_Node_Str"");
  if (firstRecord.getReadPairedFlag())   pairedEnd=true;
  input.close();
  int empty=0;
  int ambiguous=0;
  int notaligned=0;
  int lowqual=0;
  int nonunique=0;
  int i=0;
  SAMRecord sam1=null, sam2=null;
  for (  final SAMRecord samRecord : inputSam) {
    i++;
    if (i % 1000000 == 0)     System.out.println(i + ""String_Node_Str"");
    if (!pairedEnd) {
      ivSeq.clear();
      if (samRecord.getReadUnmappedFlag()) {
        notaligned++;
        continue;
      }
      if (samRecord.getAttribute(""String_Node_Str"") != null && samRecord.getIntegerAttribute(""String_Node_Str"") > 1) {
        nonunique++;
        continue;
      }
      if (samRecord.getMappingQuality() < minAverageQual) {
        lowqual++;
        continue;
      }
      ivSeq.addAll(addIntervals(samRecord,stranded));
    }
 else {
      if (sam1 != null && sam2 != null) {
        sam1=null;
        sam2=null;
        ivSeq.clear();
      }
      if (samRecord.getFirstOfPairFlag())       sam1=samRecord;
 else       sam2=samRecord;
      if (sam1 == null || sam2 == null)       continue;
      if (!sam1.getReadName().equals(sam2.getReadName())) {
        sam1=sam2;
        sam2=null;
        continue;
      }
      if (sam1 != null && !sam1.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam1,stranded));
      }
      if (sam2 != null && !sam2.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam2,stranded));
      }
      if (sam1.getReadUnmappedFlag() && sam2.getReadUnmappedFlag()) {
        notaligned++;
        continue;
      }
      if ((sam1.getAttribute(""String_Node_Str"") != null && sam1.getIntegerAttribute(""String_Node_Str"") > 1) || (sam2.getAttribute(""String_Node_Str"") != null && sam2.getIntegerAttribute(""String_Node_Str"") > 1)) {
        nonunique++;
        continue;
      }
      if (sam1.getMappingQuality() < minAverageQual || sam2.getMappingQuality() < minAverageQual) {
        lowqual++;
        continue;
      }
    }
    Set<String> fs=null;
    fs=featuresOverlapped(ivSeq,features,overlapMode,stranded);
    if (fs == null)     fs=new HashSet<String>();
switch (fs.size()) {
case 0:
      empty++;
    break;
case 1:
  final String id=fs.iterator().next();
counts.put(id,counts.get(id) + 1);
break;
default :
ambiguous++;
break;
}
}
inputSam.close();
final List<String> keysSorted=new ArrayList<String>(counts.keySet());
Collections.sort(keysSorted);
for (String key : keysSorted) {
writer.write(key + ""String_Node_Str"" + counts.get(key)+ ""String_Node_Str"");
}
writer.write(""String_Node_Str"" + empty + '\n');
writer.write(""String_Node_Str"" + ambiguous + '\n');
writer.write(""String_Node_Str"" + lowqual + '\n');
writer.write(""String_Node_Str"" + notaligned + '\n');
writer.write(""String_Node_Str"" + nonunique + '\n');
writer.close();
}",0.9836636898279242
141255,"/** 
 * Get the value of the setting as a double value
 * @return the value of the setting as an double
 * @throws EoulsanException if the value is not an double
 */
public double getDoubleSetting(final String settingName) throws EoulsanException {
  if (settingName == null)   throw new EoulsanException(""String_Node_Str"");
  final String value=getSetting(settingName);
  if (value == null)   throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  try {
    return Double.parseDouble(value);
  }
 catch (  NumberFormatException e) {
    throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  }
}","/** 
 * Get the value of the setting as a double value
 * @return the value of the setting as an double
 * @throws EoulsanException if the value is not an double
 */
public double getDoubleSetting(final String settingName) throws EoulsanException {
  if (settingName == null)   throw new EoulsanException(""String_Node_Str"");
  final String value=getSetting(settingName);
  if (value == null)   throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str"");
  try {
    return Double.parseDouble(value);
  }
 catch (  NumberFormatException e) {
    throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  }
}",0.7350943396226415
141256,"/** 
 * Get the value of the setting as a integer value
 * @return the value of the setting as an integer
 * @throws EoulsanException if the value is not an integer
 */
public int getIntSetting(final String settingName) throws EoulsanException {
  if (settingName == null)   throw new EoulsanException(""String_Node_Str"");
  final String value=getSetting(settingName);
  if (value == null)   throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  try {
    return Integer.parseInt(value);
  }
 catch (  NumberFormatException e) {
    throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  }
}","/** 
 * Get the value of the setting as a integer value
 * @return the value of the setting as an integer
 * @throws EoulsanException if the value is not an integer
 */
public int getIntSetting(final String settingName) throws EoulsanException {
  if (settingName == null)   throw new EoulsanException(""String_Node_Str"");
  final String value=getSetting(settingName);
  if (value == null)   throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str"");
  try {
    return Integer.parseInt(value);
  }
 catch (  NumberFormatException e) {
    throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  }
}",0.9946768060836502
141257,"@Override public String getMapperVersion(){
  try {
    final String execPath;
synchronized (SYNC) {
      execPath=BinariesInstaller.install(MAPPER_EXECUTABLE,getTempDirectoryPath());
    }
    final String cmd=execPath;
    final String s=ProcessUtils.execToString(cmd,true,false);
    if (s == null)     return null;
    final String[] lines=s.split(""String_Node_Str"");
    for (int i=0; i < lines.length; i++)     if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] tokens=lines[i].split(""String_Node_Str"");
      if (tokens.length > 1)       return tokens[1].trim();
    }
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}","@Override public String getMapperVersion(){
  try {
    final String execPath;
synchronized (SYNC) {
      execPath=BinariesInstaller.install(MAPPER_EXECUTABLE,getTempDirectoryPath());
    }
    final String cmd=execPath;
    final String s=ProcessUtils.execToString(cmd,true,false);
    final String[] lines=s.split(""String_Node_Str"");
    for (int i=0; i < lines.length; i++)     if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] tokens=lines[i].split(""String_Node_Str"");
      if (tokens.length > 1)       return tokens[1].trim();
    }
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}",0.972093023255814
141258,"@Override public String getMapperVersion(){
  try {
    final String bowtiePath;
synchronized (SYNC) {
      bowtiePath=install(MAPPER_EXECUTABLE);
    }
    final String cmd=bowtiePath + ""String_Node_Str"";
    final String s=ProcessUtils.execToString(cmd);
    if (s == null)     return null;
    final String[] lines=s.split(""String_Node_Str"");
    if (lines.length == 0)     return null;
    final String[] tokens=lines[0].split(""String_Node_Str"");
    if (tokens.length > 1)     return tokens[1].trim();
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}","@Override public String getMapperVersion(){
  try {
    final String bowtiePath;
synchronized (SYNC) {
      bowtiePath=install(MAPPER_EXECUTABLE);
    }
    final String cmd=bowtiePath + ""String_Node_Str"";
    final String s=ProcessUtils.execToString(cmd);
    final String[] lines=s.split(""String_Node_Str"");
    if (lines.length == 0)     return null;
    final String[] tokens=lines[0].split(""String_Node_Str"");
    if (tokens.length > 1)     return tokens[1].trim();
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}",0.9678571428571427
141259,"@Override public String getMapperVersion(){
  try {
    final String gmapPath;
synchronized (SYNC) {
      gmapPath=install(MAPPER_EXECUTABLE);
    }
    final String cmd=gmapPath + ""String_Node_Str"";
    final String s=ProcessUtils.execToString(cmd);
    if (s == null)     return null;
    final String[] lines=s.split(""String_Node_Str"");
    if (lines.length == 0)     return null;
    final String[] tokens1=lines[0].split(""String_Node_Str"");
    if (tokens1.length > 1) {
      final String[] tokens2=tokens1[1].trim().split(""String_Node_Str"");
      if (tokens2.length > 1)       return tokens2[0];
    }
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}","@Override public String getMapperVersion(){
  try {
    final String gmapPath;
synchronized (SYNC) {
      gmapPath=install(MAPPER_EXECUTABLE);
    }
    final String cmd=gmapPath + ""String_Node_Str"";
    final String s=ProcessUtils.execToString(cmd);
    final String[] lines=s.split(""String_Node_Str"");
    if (lines.length == 0)     return null;
    final String[] tokens1=lines[0].split(""String_Node_Str"");
    if (tokens1.length > 1) {
      final String[] tokens2=tokens1[1].trim().split(""String_Node_Str"");
      if (tokens2.length > 1)       return tokens2[0];
    }
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}",0.9728506787330315
141260,"@Override public String getMapperVersion(){
  try {
    final String execPath;
synchronized (SYNC) {
      execPath=install(MAPPER_EXECUTABLE);
    }
    final String cmd=execPath;
    final String s=ProcessUtils.execToString(cmd,true,false);
    if (s == null)     return null;
    final String[] lines=s.split(""String_Node_Str"");
    for (int i=0; i < lines.length; i++)     if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] tokens=lines[i].split(""String_Node_Str"");
      if (tokens.length > 1)       return tokens[1].trim();
    }
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}","@Override public String getMapperVersion(){
  try {
    final String execPath;
synchronized (SYNC) {
      execPath=install(MAPPER_EXECUTABLE);
    }
    final String cmd=execPath;
    final String s=ProcessUtils.execToString(cmd,true,false);
    final String[] lines=s.split(""String_Node_Str"");
    for (int i=0; i < lines.length; i++)     if (lines[i].startsWith(""String_Node_Str"")) {
      final String[] tokens=lines[i].split(""String_Node_Str"");
      if (tokens.length > 1)       return tokens[1].trim();
    }
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}",0.9701986754966888
141261,"@Override public boolean exists(final DataFile src){
  try {
    final DataFile f=internalDataFile(src);
    if (f == null)     return false;
    return f.exists();
  }
 catch (  IOException e) {
    return false;
  }
}","@Override public boolean exists(final DataFile src){
  try {
    return internalDataFile(src).exists();
  }
 catch (  IOException e) {
    return false;
  }
}",0.8116710875331565
141262,"/** 
 * Custom splitter for Casava tabulated file.
 * @param line line to parse
 * @return a list of String with the contents of each cell without unnecessaryquotes
 */
public static List<String> parseTabulatedDesignLine(final String s){
  if (s == null)   return null;
  final String[] fields=s.split(""String_Node_Str"");
  if (fields == null)   return null;
  return Arrays.asList(fields);
}","/** 
 * Custom splitter for Casava tabulated file.
 * @param line line to parse
 * @return a list of String with the contents of each cell without unnecessaryquotes
 */
public static List<String> parseTabulatedDesignLine(final String s){
  if (s == null)   return null;
  return Arrays.asList(s.split(""String_Node_Str""));
}",0.8447552447552448
141263,"/** 
 * Get the list of DataFormat of the files to download
 * @param context current context
 * @return a list with the DataFormat of the files to download
 */
private List<DataFormat> getDataFormats(final Context context){
  final List<DataFormat> result=Lists.newArrayList();
  final String list=context.getRuntime().getSettings().getSetting(DATAFORMATS_TO_DOWNLOAD_SETTING);
  if (list == null) {
    return result;
  }
  final String[] fields=list.split(""String_Node_Str"");
  if (fields == null) {
    return result;
  }
  final DataFormatRegistry registry=DataFormatRegistry.getInstance();
  for (  String dataFormatName : fields) {
    final DataFormat df=registry.getDataFormatFromName(dataFormatName);
    if (df != null) {
      result.add(df);
    }
  }
  return result;
}","/** 
 * Get the list of DataFormat of the files to download
 * @param context current context
 * @return a list with the DataFormat of the files to download
 */
private List<DataFormat> getDataFormats(final Context context){
  final List<DataFormat> result=Lists.newArrayList();
  final String list=context.getRuntime().getSettings().getSetting(DATAFORMATS_TO_DOWNLOAD_SETTING);
  if (list == null) {
    return result;
  }
  final String[] fields=list.split(""String_Node_Str"");
  final DataFormatRegistry registry=DataFormatRegistry.getInstance();
  for (  String dataFormatName : fields) {
    final DataFormat df=registry.getDataFormatFromName(dataFormatName);
    if (df != null) {
      result.add(df);
    }
  }
  return result;
}",0.9690585911784068
141264,"/** 
 * Utility method to create fast BufferedReader.
 * @param is InputStream to read
 * @param charset Charset to use
 * @return a BufferedReader
 */
public static final BufferedReader createBufferedReader(final InputStream is,final Charset charset){
  if (is == null)   throw new NullPointerException(""String_Node_Str"");
  if (charset != null)   return new BufferedReader(new InputStreamReader(is,charset));
  return new BufferedReader(new InputStreamReader(is,charset != null ? charset : Charset.forName(CHARSET)));
}","/** 
 * Utility method to create fast BufferedReader.
 * @param is InputStream to read
 * @param charset Charset to use
 * @return a BufferedReader
 */
public static final BufferedReader createBufferedReader(final InputStream is,final Charset charset){
  if (is == null)   throw new NullPointerException(""String_Node_Str"");
  if (charset != null)   return new BufferedReader(new InputStreamReader(is,charset));
  return new BufferedReader(new InputStreamReader(is,Charset.forName(CHARSET)));
}",0.9723865877712032
141265,"/** 
 * Execute a command with the OS and return the output in a string.
 * @param cmd Command to execute
 * @param addStdErr add the output of stderr in the result
 * @return a string with the output the command
 * @throws IOException if an error occurs while running the process
 */
public static String execToString(final String cmd,final boolean addStdErr,final boolean checkExitCode) throws IOException {
  logger.fine(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ cmd);
  final long startTime=System.currentTimeMillis();
  Process p=Runtime.getRuntime().exec(new String[]{""String_Node_Str"",""String_Node_Str"",cmd});
  InputStream std=p.getInputStream();
  BufferedReader stdr=new BufferedReader(new InputStreamReader(std,CHARSET));
  StringBuffer sb=new StringBuffer();
  String l1=null;
  while ((l1=stdr.readLine()) != null) {
    sb.append(l1);
    sb.append('\n');
  }
  InputStream err=p.getErrorStream();
  BufferedReader errr=new BufferedReader(new InputStreamReader(err,CHARSET));
  String l2=null;
  while ((l2=errr.readLine()) != null)   if (addStdErr) {
    sb.append(l2);
    sb.append('\n');
  }
 else   System.err.println(l2);
  stdr.close();
  errr.close();
  if (checkExitCode)   logEndTime(p,cmd,startTime);
  return sb.toString();
}","/** 
 * Execute a command with the OS and return the output in a string.
 * @param cmd Command to execute
 * @param addStdErr add the output of stderr in the result
 * @return a string with the output the command
 * @throws IOException if an error occurs while running the process
 */
public static String execToString(final String cmd,final boolean addStdErr,final boolean checkExitCode) throws IOException {
  logger.fine(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ cmd);
  final long startTime=System.currentTimeMillis();
  final Process p=Runtime.getRuntime().exec(new String[]{""String_Node_Str"",""String_Node_Str"",cmd});
  final InputStream std=p.getInputStream();
  final BufferedReader stdr=new BufferedReader(new InputStreamReader(std,CHARSET));
  final StringBuilder sb=new StringBuilder();
  String l1=null;
  while ((l1=stdr.readLine()) != null) {
    sb.append(l1);
    sb.append('\n');
  }
  InputStream err=p.getErrorStream();
  BufferedReader errr=new BufferedReader(new InputStreamReader(err,CHARSET));
  String l2=null;
  while ((l2=errr.readLine()) != null)   if (addStdErr) {
    sb.append(l2);
    sb.append('\n');
  }
 else   System.err.println(l2);
  stdr.close();
  errr.close();
  if (checkExitCode)   logEndTime(p,cmd,startTime);
  return sb.toString();
}",0.9868624420401856
141266,"/** 
 * Return a set withs pid of existing executable.
 * @return a set of integers with pid of existing executable
 */
public static Set<Integer> getExecutablePids(final String executableName){
  if (executableName == null)   return null;
  Set<Integer> result=new HashSet<Integer>();
  try {
    final String s=ProcessUtils.execToString(""String_Node_Str"" + executableName.trim());
    if (s == null)     return result;
    final String[] lines=s.split(""String_Node_Str"");
    for (    String line : lines)     try {
      result.add(Integer.parseInt(line));
    }
 catch (    NumberFormatException e) {
      continue;
    }
  }
 catch (  IOException e) {
    return result;
  }
  return result;
}","/** 
 * Return a set withs pid of existing executable.
 * @return a set of integers with pid of existing executable
 */
public static Set<Integer> getExecutablePids(final String executableName){
  if (executableName == null)   return null;
  Set<Integer> result=new HashSet<Integer>();
  try {
    final String s=ProcessUtils.execToString(""String_Node_Str"" + executableName.trim());
    final String[] lines=s.split(""String_Node_Str"");
    for (    String line : lines)     try {
      result.add(Integer.parseInt(line));
    }
 catch (    NumberFormatException e) {
      continue;
    }
  }
 catch (  IOException e) {
    return result;
  }
  return result;
}",0.9720588235294118
141267,"/** 
 * Count the number of alignments for all the features of the annotation file.
 * @param samFile SAM file that contains alignments.
 * @param gffFile annotation file.
 * @param outFile output file.
 * @param stranded strand to consider.
 * @param overlapMode overlap mode to consider.
 * @param featureType annotation feature type to consider.
 * @param attributeId annotation attribute id to consider.
 * @param quiet if true : suppress progress report and warnings.
 * @param minAverageQual minimum value for alignment quality.
 * @param samOutFile output SAM file annotating each line with its assignmentto a feature or a special counter (as an optional field with tag 'XF').
 * @param reporter Reporter object.
 * @param counterGroup counter group for the Reporter object.
 * @throws EoulsanException
 * @throws IOException
 * @throws BadBioEntryException
 */
private static void countReadsInFeatures(final File samFile,final InputStream gffFile,final File outFile,final StrandUsage stranded,final OverlapMode overlapMode,final String featureType,final String attributeId,final boolean quiet,final int minAverageQual,final File samOutFile,Reporter reporter,String counterGroup) throws EoulsanException, IOException, BadBioEntryException {
  final GenomicArray<String> features=new GenomicArray<String>();
  final Map<String,Integer> counts=Utils.newHashMap();
  Writer writer=new FileWriter(outFile);
  boolean pairedEnd=false;
  final GFFReader gffReader=new GFFReader(gffFile);
  for (  final GFFEntry gff : gffReader) {
    if (featureType.equals(gff.getType())) {
      final String featureId=gff.getAttributeValue(attributeId);
      if (featureId == null) {
        gffReader.close();
        writer.close();
        throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ attributeId+ ""String_Node_Str"");
      }
      if ((stranded == StrandUsage.YES || stranded == StrandUsage.REVERSE) && '.' == gff.getStrand()) {
        gffReader.close();
        writer.close();
        throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ ""String_Node_Str"");
      }
      features.addEntry(new GenomicInterval(gff,stranded.isSaveStrandInfo()),featureId);
      counts.put(featureId,0);
    }
  }
  gffReader.throwException();
  gffReader.close();
  if (counts.size() == 0) {
    writer.close();
    throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str"");
  }
  List<GenomicInterval> ivSeq=new ArrayList<GenomicInterval>();
  final SAMFileReader inputSam=new SAMFileReader(samFile);
  final SAMFileReader input=new SAMFileReader(samFile);
  SAMRecordIterator samIterator=input.iterator();
  SAMRecord firstRecord=samIterator.next();
  if (firstRecord.getReadPairedFlag())   pairedEnd=true;
  input.close();
  int empty=0;
  int ambiguous=0;
  int notaligned=0;
  int lowqual=0;
  int nonunique=0;
  int i=0;
  SAMRecord sam1=null, sam2=null;
  for (  final SAMRecord samRecord : inputSam) {
    reporter.incrCounter(counterGroup,ExpressionCounters.TOTAL_ALIGNMENTS_COUNTER.counterName(),1);
    i++;
    if (i % 1000000 == 0)     System.out.println(i + ""String_Node_Str"");
    if (!pairedEnd) {
      ivSeq.clear();
      if (samRecord.getReadUnmappedFlag()) {
        notaligned++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if (samRecord.getAttribute(""String_Node_Str"") != null && samRecord.getIntegerAttribute(""String_Node_Str"") > 1) {
        nonunique++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if (samRecord.getMappingQuality() < minAverageQual) {
        lowqual++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      ivSeq.addAll(addIntervals(samRecord,stranded));
    }
 else {
      if (sam1 != null && sam2 != null) {
        sam1=null;
        sam2=null;
        ivSeq.clear();
      }
      if (samRecord.getFirstOfPairFlag())       sam1=samRecord;
 else       sam2=samRecord;
      if (sam1 == null || sam2 == null)       continue;
      if (!sam1.getReadName().equals(sam2.getReadName())) {
        sam1=sam2;
        sam2=null;
        continue;
      }
      if (sam1 != null && !sam1.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam1,stranded));
      }
      if (sam2 != null && !sam2.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam2,stranded));
      }
      if (sam1.getReadUnmappedFlag() && sam2.getReadUnmappedFlag()) {
        notaligned++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if ((sam1.getAttribute(""String_Node_Str"") != null && sam1.getIntegerAttribute(""String_Node_Str"") > 1) || (sam2.getAttribute(""String_Node_Str"") != null && sam2.getIntegerAttribute(""String_Node_Str"") > 1)) {
        nonunique++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if (sam1.getMappingQuality() < minAverageQual || sam2.getMappingQuality() < minAverageQual) {
        lowqual++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
    }
    Set<String> fs=null;
    fs=featuresOverlapped(ivSeq,features,overlapMode,stranded);
    if (fs == null)     fs=new HashSet<String>();
switch (fs.size()) {
case 0:
      empty++;
    reporter.incrCounter(counterGroup,ExpressionCounters.UNMAPPED_READS_COUNTER.counterName(),1);
  break;
case 1:
final String id=fs.iterator().next();
counts.put(id,counts.get(id) + 1);
break;
default :
ambiguous++;
reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
break;
}
}
inputSam.close();
final List<String> keysSorted=new ArrayList<String>(counts.keySet());
Collections.sort(keysSorted);
for (String key : keysSorted) {
writer.write(key + ""String_Node_Str"" + counts.get(key)+ ""String_Node_Str"");
}
writer.write(""String_Node_Str"" + empty + '\n');
writer.write(""String_Node_Str"" + ambiguous + '\n');
writer.write(""String_Node_Str"" + lowqual + '\n');
writer.write(""String_Node_Str"" + notaligned + '\n');
writer.write(""String_Node_Str"" + nonunique + '\n');
writer.close();
}","/** 
 * Count the number of alignments for all the features of the annotation file.
 * @param samFile SAM file that contains alignments.
 * @param gffFile annotation file.
 * @param outFile output file.
 * @param stranded strand to consider.
 * @param overlapMode overlap mode to consider.
 * @param featureType annotation feature type to consider.
 * @param attributeId annotation attribute id to consider.
 * @param quiet if true : suppress progress report and warnings.
 * @param minAverageQual minimum value for alignment quality.
 * @param samOutFile output SAM file annotating each line with its assignmentto a feature or a special counter (as an optional field with tag 'XF').
 * @param reporter Reporter object.
 * @param counterGroup counter group for the Reporter object.
 * @throws EoulsanException
 * @throws IOException
 * @throws BadBioEntryException
 */
private static void countReadsInFeatures(final File samFile,final InputStream gffFile,final File outFile,final StrandUsage stranded,final OverlapMode overlapMode,final String featureType,final String attributeId,final boolean quiet,final int minAverageQual,final File samOutFile,Reporter reporter,String counterGroup) throws EoulsanException, IOException, BadBioEntryException {
  final GenomicArray<String> features=new GenomicArray<String>();
  final Map<String,Integer> counts=Utils.newHashMap();
  final Writer writer=FileUtils.createBufferedWriter(outFile);
  boolean pairedEnd=false;
  final GFFReader gffReader=new GFFReader(gffFile);
  for (  final GFFEntry gff : gffReader) {
    if (featureType.equals(gff.getType())) {
      final String featureId=gff.getAttributeValue(attributeId);
      if (featureId == null) {
        gffReader.close();
        writer.close();
        throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ attributeId+ ""String_Node_Str"");
      }
      if ((stranded == StrandUsage.YES || stranded == StrandUsage.REVERSE) && '.' == gff.getStrand()) {
        gffReader.close();
        writer.close();
        throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ ""String_Node_Str"");
      }
      features.addEntry(new GenomicInterval(gff,stranded.isSaveStrandInfo()),featureId);
      counts.put(featureId,0);
    }
  }
  gffReader.throwException();
  gffReader.close();
  if (counts.size() == 0) {
    writer.close();
    throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str"");
  }
  List<GenomicInterval> ivSeq=new ArrayList<GenomicInterval>();
  final SAMFileReader inputSam=new SAMFileReader(samFile);
  final SAMFileReader input=new SAMFileReader(samFile);
  SAMRecordIterator samIterator=input.iterator();
  SAMRecord firstRecord=samIterator.next();
  if (firstRecord.getReadPairedFlag())   pairedEnd=true;
  input.close();
  int empty=0;
  int ambiguous=0;
  int notaligned=0;
  int lowqual=0;
  int nonunique=0;
  int i=0;
  SAMRecord sam1=null, sam2=null;
  for (  final SAMRecord samRecord : inputSam) {
    reporter.incrCounter(counterGroup,ExpressionCounters.TOTAL_ALIGNMENTS_COUNTER.counterName(),1);
    i++;
    if (i % 1000000 == 0)     System.out.println(i + ""String_Node_Str"");
    if (!pairedEnd) {
      ivSeq.clear();
      if (samRecord.getReadUnmappedFlag()) {
        notaligned++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if (samRecord.getAttribute(""String_Node_Str"") != null && samRecord.getIntegerAttribute(""String_Node_Str"") > 1) {
        nonunique++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if (samRecord.getMappingQuality() < minAverageQual) {
        lowqual++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      ivSeq.addAll(addIntervals(samRecord,stranded));
    }
 else {
      if (sam1 != null && sam2 != null) {
        sam1=null;
        sam2=null;
        ivSeq.clear();
      }
      if (samRecord.getFirstOfPairFlag())       sam1=samRecord;
 else       sam2=samRecord;
      if (sam1 == null || sam2 == null)       continue;
      if (!sam1.getReadName().equals(sam2.getReadName())) {
        sam1=sam2;
        sam2=null;
        continue;
      }
      if (sam1 != null && !sam1.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam1,stranded));
      }
      if (sam2 != null && !sam2.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam2,stranded));
      }
      if (sam1.getReadUnmappedFlag() && sam2.getReadUnmappedFlag()) {
        notaligned++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if ((sam1.getAttribute(""String_Node_Str"") != null && sam1.getIntegerAttribute(""String_Node_Str"") > 1) || (sam2.getAttribute(""String_Node_Str"") != null && sam2.getIntegerAttribute(""String_Node_Str"") > 1)) {
        nonunique++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
      if (sam1.getMappingQuality() < minAverageQual || sam2.getMappingQuality() < minAverageQual) {
        lowqual++;
        reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
        continue;
      }
    }
    Set<String> fs=null;
    fs=featuresOverlapped(ivSeq,features,overlapMode,stranded);
    if (fs == null)     fs=new HashSet<String>();
switch (fs.size()) {
case 0:
      empty++;
    reporter.incrCounter(counterGroup,ExpressionCounters.UNMAPPED_READS_COUNTER.counterName(),1);
  break;
case 1:
final String id=fs.iterator().next();
counts.put(id,counts.get(id) + 1);
break;
default :
ambiguous++;
reporter.incrCounter(counterGroup,ExpressionCounters.ELIMINATED_READS_COUNTER.counterName(),1);
break;
}
}
inputSam.close();
final List<String> keysSorted=new ArrayList<String>(counts.keySet());
Collections.sort(keysSorted);
for (String key : keysSorted) {
writer.write(key + ""String_Node_Str"" + counts.get(key)+ ""String_Node_Str"");
}
writer.write(""String_Node_Str"" + empty + '\n');
writer.write(""String_Node_Str"" + ambiguous + '\n');
writer.write(""String_Node_Str"" + lowqual + '\n');
writer.write(""String_Node_Str"" + notaligned + '\n');
writer.write(""String_Node_Str"" + nonunique + '\n');
writer.close();
}",0.9976620947630924
141268,"public static void countReadsInFeatures(final InputStream samFile,final File gffFile,final File output,final String stranded,final String overlapMode,final String featureType,final String attributeId,final boolean quiet,final int minAverageQual,final File samOutFile) throws EoulsanException, IOException, BadBioEntryException {
  final GenomicArray<String> features=new GenomicArray<String>();
  final Map<String,Integer> counts=Utils.newHashMap();
  Writer writer=new FileWriter(output);
  boolean pairedEnd=false;
  final GFFReader gffReader=new GFFReader(gffFile);
  for (  final GFFEntry gff : gffReader) {
    if (featureType.equals(gff.getType())) {
      final String featureId=gff.getAttributeValue(attributeId);
      if (featureId == null) {
        writer.close();
        gffReader.close();
        throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ attributeId+ ""String_Node_Str"");
      }
      if (stranded.equals(""String_Node_Str"") && '.' == gff.getStrand()) {
        writer.close();
        gffReader.close();
        throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ ""String_Node_Str"");
      }
      boolean saveStrandInfo=""String_Node_Str"".equals(stranded) || ""String_Node_Str"".equals(stranded);
      features.addEntry(new GenomicInterval(gff,saveStrandInfo),featureId);
      counts.put(featureId,0);
    }
  }
  gffReader.throwException();
  gffReader.close();
  if (counts.size() == 0) {
    writer.close();
    throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str"");
  }
  List<GenomicInterval> ivSeq=new ArrayList<GenomicInterval>();
  final SAMFileReader inputSam=new SAMFileReader(samFile);
  final SAMFileReader input=new SAMFileReader(samFile);
  SAMRecordIterator samIterator=input.iterator();
  SAMRecord firstRecord;
  if (samIterator.hasNext())   firstRecord=samIterator.next();
 else {
    writer.close();
    input.close();
    inputSam.close();
    throw new EoulsanException(""String_Node_Str"");
  }
  if (firstRecord.getReadPairedFlag())   pairedEnd=true;
  input.close();
  int empty=0;
  int ambiguous=0;
  int notaligned=0;
  int lowqual=0;
  int nonunique=0;
  int i=0;
  SAMRecord sam1=null, sam2=null;
  for (  final SAMRecord samRecord : inputSam) {
    i++;
    if (i % 1000000 == 0)     System.out.println(i + ""String_Node_Str"");
    if (!pairedEnd) {
      ivSeq.clear();
      if (samRecord.getReadUnmappedFlag()) {
        notaligned++;
        continue;
      }
      if (samRecord.getAttribute(""String_Node_Str"") != null && samRecord.getIntegerAttribute(""String_Node_Str"") > 1) {
        nonunique++;
        continue;
      }
      if (samRecord.getMappingQuality() < minAverageQual) {
        lowqual++;
        continue;
      }
      ivSeq.addAll(addIntervals(samRecord,stranded));
    }
 else {
      if (sam1 != null && sam2 != null) {
        sam1=null;
        sam2=null;
        ivSeq.clear();
      }
      if (samRecord.getFirstOfPairFlag())       sam1=samRecord;
 else       sam2=samRecord;
      if (sam1 == null || sam2 == null)       continue;
      if (!sam1.getReadName().equals(sam2.getReadName())) {
        sam1=sam2;
        sam2=null;
        continue;
      }
      if (sam1 != null && !sam1.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam1,stranded));
      }
      if (sam2 != null && !sam2.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam2,stranded));
      }
      if (sam1.getReadUnmappedFlag() && sam2.getReadUnmappedFlag()) {
        notaligned++;
        continue;
      }
      if ((sam1.getAttribute(""String_Node_Str"") != null && sam1.getIntegerAttribute(""String_Node_Str"") > 1) || (sam2.getAttribute(""String_Node_Str"") != null && sam2.getIntegerAttribute(""String_Node_Str"") > 1)) {
        nonunique++;
        continue;
      }
      if (sam1.getMappingQuality() < minAverageQual || sam2.getMappingQuality() < minAverageQual) {
        lowqual++;
        continue;
      }
    }
    Set<String> fs=null;
    fs=featuresOverlapped(ivSeq,features,overlapMode,stranded);
    if (fs == null)     fs=new HashSet<String>();
switch (fs.size()) {
case 0:
      empty++;
    break;
case 1:
  final String id=fs.iterator().next();
counts.put(id,counts.get(id) + 1);
break;
default :
ambiguous++;
break;
}
}
inputSam.close();
final List<String> keysSorted=new ArrayList<String>(counts.keySet());
Collections.sort(keysSorted);
for (String key : keysSorted) {
writer.write(key + ""String_Node_Str"" + counts.get(key)+ ""String_Node_Str"");
}
writer.write(""String_Node_Str"" + empty + '\n');
writer.write(""String_Node_Str"" + ambiguous + '\n');
writer.write(""String_Node_Str"" + lowqual + '\n');
writer.write(""String_Node_Str"" + notaligned + '\n');
writer.write(""String_Node_Str"" + nonunique + '\n');
writer.close();
}","public static void countReadsInFeatures(final InputStream samFile,final File gffFile,final File output,final String stranded,final String overlapMode,final String featureType,final String attributeId,final boolean quiet,final int minAverageQual,final File samOutFile) throws EoulsanException, IOException, BadBioEntryException {
  final GenomicArray<String> features=new GenomicArray<String>();
  final Map<String,Integer> counts=Utils.newHashMap();
  Writer writer=FileUtils.createBufferedWriter(output);
  boolean pairedEnd=false;
  final GFFReader gffReader=new GFFReader(gffFile);
  for (  final GFFEntry gff : gffReader) {
    if (featureType.equals(gff.getType())) {
      final String featureId=gff.getAttributeValue(attributeId);
      if (featureId == null) {
        writer.close();
        gffReader.close();
        throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ attributeId+ ""String_Node_Str"");
      }
      if (stranded.equals(""String_Node_Str"") && '.' == gff.getStrand()) {
        writer.close();
        gffReader.close();
        throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str""+ ""String_Node_Str"");
      }
      boolean saveStrandInfo=""String_Node_Str"".equals(stranded) || ""String_Node_Str"".equals(stranded);
      features.addEntry(new GenomicInterval(gff,saveStrandInfo),featureId);
      counts.put(featureId,0);
    }
  }
  gffReader.throwException();
  gffReader.close();
  if (counts.size() == 0) {
    writer.close();
    throw new EoulsanException(""String_Node_Str"" + featureType + ""String_Node_Str"");
  }
  List<GenomicInterval> ivSeq=new ArrayList<GenomicInterval>();
  final SAMFileReader inputSam=new SAMFileReader(samFile);
  final SAMFileReader input=new SAMFileReader(samFile);
  SAMRecordIterator samIterator=input.iterator();
  SAMRecord firstRecord;
  if (samIterator.hasNext())   firstRecord=samIterator.next();
 else {
    writer.close();
    input.close();
    inputSam.close();
    throw new EoulsanException(""String_Node_Str"");
  }
  if (firstRecord.getReadPairedFlag())   pairedEnd=true;
  input.close();
  int empty=0;
  int ambiguous=0;
  int notaligned=0;
  int lowqual=0;
  int nonunique=0;
  int i=0;
  SAMRecord sam1=null, sam2=null;
  for (  final SAMRecord samRecord : inputSam) {
    i++;
    if (i % 1000000 == 0)     System.out.println(i + ""String_Node_Str"");
    if (!pairedEnd) {
      ivSeq.clear();
      if (samRecord.getReadUnmappedFlag()) {
        notaligned++;
        continue;
      }
      if (samRecord.getAttribute(""String_Node_Str"") != null && samRecord.getIntegerAttribute(""String_Node_Str"") > 1) {
        nonunique++;
        continue;
      }
      if (samRecord.getMappingQuality() < minAverageQual) {
        lowqual++;
        continue;
      }
      ivSeq.addAll(addIntervals(samRecord,stranded));
    }
 else {
      if (sam1 != null && sam2 != null) {
        sam1=null;
        sam2=null;
        ivSeq.clear();
      }
      if (samRecord.getFirstOfPairFlag())       sam1=samRecord;
 else       sam2=samRecord;
      if (sam1 == null || sam2 == null)       continue;
      if (!sam1.getReadName().equals(sam2.getReadName())) {
        sam1=sam2;
        sam2=null;
        continue;
      }
      if (sam1 != null && !sam1.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam1,stranded));
      }
      if (sam2 != null && !sam2.getReadUnmappedFlag()) {
        ivSeq.addAll(addIntervals(sam2,stranded));
      }
      if (sam1.getReadUnmappedFlag() && sam2.getReadUnmappedFlag()) {
        notaligned++;
        continue;
      }
      if ((sam1.getAttribute(""String_Node_Str"") != null && sam1.getIntegerAttribute(""String_Node_Str"") > 1) || (sam2.getAttribute(""String_Node_Str"") != null && sam2.getIntegerAttribute(""String_Node_Str"") > 1)) {
        nonunique++;
        continue;
      }
      if (sam1.getMappingQuality() < minAverageQual || sam2.getMappingQuality() < minAverageQual) {
        lowqual++;
        continue;
      }
    }
    Set<String> fs=null;
    fs=featuresOverlapped(ivSeq,features,overlapMode,stranded);
    if (fs == null)     fs=new HashSet<String>();
switch (fs.size()) {
case 0:
      empty++;
    break;
case 1:
  final String id=fs.iterator().next();
counts.put(id,counts.get(id) + 1);
break;
default :
ambiguous++;
break;
}
}
inputSam.close();
final List<String> keysSorted=new ArrayList<String>(counts.keySet());
Collections.sort(keysSorted);
for (String key : keysSorted) {
writer.write(key + ""String_Node_Str"" + counts.get(key)+ ""String_Node_Str"");
}
writer.write(""String_Node_Str"" + empty + '\n');
writer.write(""String_Node_Str"" + ambiguous + '\n');
writer.write(""String_Node_Str"" + lowqual + '\n');
writer.write(""String_Node_Str"" + notaligned + '\n');
writer.write(""String_Node_Str"" + nonunique + '\n');
writer.close();
}",0.9975036405242356
141269,"public void writeStringAsFile(final String outputFilename,final String value) throws REngineException {
  if (outputFilename == null)   return;
  PrintWriter pw=new PrintWriter(getFileOutputStream(outputFilename));
  if (value != null)   pw.write(value);
  pw.close();
}","public void writeStringAsFile(final String outputFilename,final String value) throws REngineException {
  if (outputFilename == null)   return;
  try {
    final Writer writer=FileUtils.createBufferedWriter(getFileOutputStream(outputFilename));
    if (value != null) {
      writer.write(value);
      writer.close();
    }
  }
 catch (  IOException e) {
    throw new REngineException(getRConnection(),""String_Node_Str"" + e.getMessage());
  }
}",0.6927374301675978
141270,"@Override public void configure(final Set<Parameter> stepParameters) throws EoulsanException {
  String mapperName=null;
  final MultiReadFilterBuilder mrfb=new MultiReadFilterBuilder();
  for (  Parameter p : stepParameters) {
    if (""String_Node_Str"".equals(p.getName()))     this.pairEnd=p.getBooleanValue();
 else     if (""String_Node_Str"".equals(p.getName()))     mapperName=p.getStringValue();
 else     if (""String_Node_Str"".equals(p.getName()))     this.mapperArguments=p.getStringValue();
 else     if (""String_Node_Str"".equals(p.getName()))     mappingQualityThreshold=p.getIntValue();
 else     mrfb.addParameter(AbstractReadsFilterStep.convertCompatibilityFilterKey(p.getName()),p.getStringValue());
    mrfb.getReadFilter();
    this.readFilterBuilder=mrfb;
  }
  if (mapperName == null) {
    throw new EoulsanException(""String_Node_Str"");
  }
  this.mapper=SequenceReadsMapperService.getInstance().getMapper(mapperName);
  if (this.mapper == null) {
    throw new EoulsanException(""String_Node_Str"" + mapperName);
  }
  if (this.mapper.isIndexGeneratorOnly()) {
    throw new EoulsanException(""String_Node_Str"" + mapperName);
  }
  if (this.mapper.isSplitsAllowed()) {
    throw new EoulsanException(""String_Node_Str"" + ""String_Node_Str"" + mapperName);
  }
  if (this.mappingQualityThreshold == -1) {
    throw new EoulsanException(""String_Node_Str"");
  }
  if (this.mappingQualityThreshold < 0 || this.mappingQualityThreshold > MAX_MAPPING_QUALITY_THRESHOLD) {
    throw new EoulsanException(""String_Node_Str"" + this.mappingQualityThreshold);
  }
  LOGGER.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ this.pairEnd);
  LOGGER.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ this.mapper.getMapperName()+ ""String_Node_Str""+ mapper.getMapperVersion()+ ""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ this.mapperArguments);
  LOGGER.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ this.mappingQualityThreshold);
}","@Override public void configure(final Set<Parameter> stepParameters) throws EoulsanException {
  String mapperName=null;
  final MultiReadFilterBuilder mrfb=new MultiReadFilterBuilder();
  for (  Parameter p : stepParameters) {
    if (""String_Node_Str"".equals(p.getName()))     this.pairEnd=p.getBooleanValue();
 else     if (""String_Node_Str"".equals(p.getName()))     mapperName=p.getStringValue();
 else     if (""String_Node_Str"".equals(p.getName()))     this.mapperArguments=p.getStringValue();
 else     if (""String_Node_Str"".equals(p.getName()))     mappingQualityThreshold=p.getIntValue();
 else     mrfb.addParameter(AbstractReadsFilterStep.convertCompatibilityFilterKey(p.getName()),p.getStringValue());
    mrfb.getReadFilter();
    this.readFilterBuilder=mrfb;
  }
  if (mapperName == null) {
    throw new EoulsanException(""String_Node_Str"");
  }
  this.mapper=SequenceReadsMapperService.getInstance().getMapper(mapperName);
  if (this.mapper == null) {
    throw new EoulsanException(""String_Node_Str"" + mapperName);
  }
  if (this.mapper.isIndexGeneratorOnly()) {
    throw new EoulsanException(""String_Node_Str"" + mapperName);
  }
  if (this.mappingQualityThreshold == -1) {
    throw new EoulsanException(""String_Node_Str"");
  }
  if (this.mappingQualityThreshold < 0 || this.mappingQualityThreshold > MAX_MAPPING_QUALITY_THRESHOLD) {
    throw new EoulsanException(""String_Node_Str"" + this.mappingQualityThreshold);
  }
  LOGGER.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ this.pairEnd);
  LOGGER.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ this.mapper.getMapperName()+ ""String_Node_Str""+ mapper.getMapperVersion()+ ""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ this.mapperArguments);
  LOGGER.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ this.mappingQualityThreshold);
}",0.9670215528434172
141271,"private static synchronized void readManifest(){
  if (manifestProperties != null) {
    return;
  }
  try {
    manifestProperties=new Properties();
    final InputStream is=Globals.class.getResourceAsStream(MANIFEST_PROPERTIES_FILE);
    if (is == null) {
      return;
    }
    manifestProperties.load(is);
  }
 catch (  IOException e) {
  }
}","private static synchronized void readManifest(){
  if (manifestProperties != null) {
    return;
  }
  try {
    manifestProperties=new Properties();
    final InputStream is=Globals.class.getResourceAsStream(MANIFEST_PROPERTIES_FILE);
    if (is == null) {
      return;
    }
    manifestProperties.load(is);
    is.close();
  }
 catch (  IOException e) {
  }
}",0.9774647887323944
141272,"/** 
 * Get the value of the setting as a double value
 * @return the value of the setting as an double
 * @throws EoulsanException if the value is not an double
 */
public double getDoubleSetting(final String settingName) throws EoulsanException {
  final String value=getSetting(settingName);
  if (value == null)   throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  try {
    return Double.parseDouble(value);
  }
 catch (  NumberFormatException e) {
    throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  }
}","/** 
 * Get the value of the setting as a double value
 * @return the value of the setting as an double
 * @throws EoulsanException if the value is not an double
 */
public double getDoubleSetting(final String settingName) throws EoulsanException {
  if (settingName == null)   throw new EoulsanException(""String_Node_Str"");
  final String value=getSetting(settingName);
  if (value == null)   throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  try {
    return Double.parseDouble(value);
  }
 catch (  NumberFormatException e) {
    throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  }
}",0.8726114649681529
141273,"/** 
 * Get the value of the setting as a integer value
 * @return the value of the setting as an integer
 * @throws EoulsanException if the value is not an integer
 */
public int getIntSetting(final String settingName) throws EoulsanException {
  final String value=getSetting(settingName);
  if (value == null)   throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  try {
    return Integer.parseInt(value);
  }
 catch (  NumberFormatException e) {
    throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  }
}","/** 
 * Get the value of the setting as a integer value
 * @return the value of the setting as an integer
 * @throws EoulsanException if the value is not an integer
 */
public int getIntSetting(final String settingName) throws EoulsanException {
  if (settingName == null)   throw new EoulsanException(""String_Node_Str"");
  final String value=getSetting(settingName);
  if (value == null)   throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  try {
    return Integer.parseInt(value);
  }
 catch (  NumberFormatException e) {
    throw new EoulsanException(""String_Node_Str"" + settingName + ""String_Node_Str""+ value);
  }
}",0.8715890850722311
141274,"@Override public boolean equals(final Object o){
  if (o == this)   return true;
  if (o == null)   return false;
  final Alphabet that=(Alphabet)o;
  return Utils.equal(this.getName(),that.getName()) && this.getLetters().equals(that.getLetters()) && this.isLowerCaseValid() == that.isLowerCaseValid();
}","@Override public boolean equals(final Object o){
  if (o == this)   return true;
  if (o == null)   return false;
  if (!(o instanceof Alphabet))   return false;
  final Alphabet that=(Alphabet)o;
  return Utils.equal(this.getName(),that.getName()) && this.getLetters().equals(that.getLetters()) && this.isLowerCaseValid() == that.isLowerCaseValid();
}",0.926829268292683
141275,"/** 
 * Create a GenomeDescription object from a Fasta file.
 * @param genomeFastaIs InputStream
 */
public static GenomeDescription createGenomeDescFromFasta(final InputStream genomeFastaIs,final String filename) throws BadBioEntryException, IOException {
  checkNotNull(genomeFastaIs,""String_Node_Str"");
  final GenomeDescription result=new GenomeDescription();
  result.setGenomeName(StringUtils.basename(filename));
  MessageDigest md5Digest;
  try {
    md5Digest=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    md5Digest=null;
  }
  final FastaReader reader=new FastaReader(genomeFastaIs);
  for (  final Sequence sequence : reader) {
    long len=checkBases(sequence);
    final String name=parseChromosomeName(sequence.getName());
    if (md5Digest != null) {
      md5Digest.update(name.getBytes());
      for (      final String s : StringUtils.splitStringIterator(sequence.getSequence(),STRING_LENGTH_BUFFER))       md5Digest.update(s.getBytes());
    }
    result.addSequence(name,len);
  }
  reader.throwException();
  if (md5Digest != null)   result.setMD5Sum(digestToString(md5Digest));
  genomeFastaIs.close();
  return result;
}","/** 
 * Create a GenomeDescription object from a Fasta file.
 * @param genomeFastaIs InputStream
 */
public static GenomeDescription createGenomeDescFromFasta(final InputStream genomeFastaIs,final String filename) throws BadBioEntryException, IOException {
  checkNotNull(genomeFastaIs,""String_Node_Str"");
  final GenomeDescription result=new GenomeDescription();
  result.setGenomeName(StringUtils.basename(filename));
  MessageDigest md5Digest;
  try {
    md5Digest=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    md5Digest=null;
  }
  final FastaReader reader=new FastaReader(genomeFastaIs);
  for (  final Sequence sequence : reader) {
    long len=checkBases(sequence);
    final String name=parseChromosomeName(sequence.getName());
    if (md5Digest != null) {
      md5Digest.update(name.getBytes(Globals.DEFAULT_FILE_ENCODING));
      for (      final String s : StringUtils.splitStringIterator(sequence.getSequence(),STRING_LENGTH_BUFFER))       md5Digest.update(s.getBytes(Globals.DEFAULT_FILE_ENCODING));
    }
    result.addSequence(name,len);
  }
  reader.throwException();
  if (md5Digest != null)   result.setMD5Sum(digestToString(md5Digest));
  genomeFastaIs.close();
  return result;
}",0.9762295081967212
141276,"@Override public boolean next(final LongWritable key,final Text value) throws IOException {
  if (!stillInChunk)   return false;
  final long startPos=fsin.getPos();
  boolean status=readUntilMatch(endTag,true);
  final String data;
  if (startPos == 0)   data=new String(buffer.getData(),1,buffer.getLength());
 else   data=new String(buffer.getData(),0,buffer.getLength());
  final String[] lines=PATTERN.split(data);
  for (int i=0; i < lines.length; i++) {
    final String line=lines[i].trim();
    if (""String_Node_Str"".equals(line))     continue;
    sb.append(line);
    if (i == 0)     sb.append(""String_Node_Str"");
  }
  if (sb.charAt(sb.length() - 1) == '>')   sb.setLength(sb.length() - 1);
  key.set(fsin.getPos());
  value.set(sb.toString());
  sb.setLength(0);
  buffer.reset();
  if (!status) {
    stillInChunk=false;
  }
  return true;
}","@Override public boolean next(final LongWritable key,final Text value) throws IOException {
  if (!stillInChunk)   return false;
  final long startPos=fsin.getPos();
  boolean status=readUntilMatch(endTag,true);
  final String data;
  if (startPos == 0)   data=new String(buffer.getData(),1,buffer.getLength(),CHARSET);
 else   data=new String(buffer.getData(),0,buffer.getLength(),CHARSET);
  final String[] lines=PATTERN.split(data);
  for (int i=0; i < lines.length; i++) {
    final String line=lines[i].trim();
    if (""String_Node_Str"".equals(line))     continue;
    sb.append(line);
    if (i == 0)     sb.append(""String_Node_Str"");
  }
  if (sb.charAt(sb.length() - 1) == '>')   sb.setLength(sb.length() - 1);
  key.set(fsin.getPos());
  value.set(sb.toString());
  sb.setLength(0);
  buffer.reset();
  if (!status) {
    stillInChunk=false;
  }
  return true;
}",0.9907300115874856
141277,"@Override public boolean next(final LongWritable key,final Text value) throws IOException {
  if (!stillInChunk)   return false;
  final long startPos=fsin.getPos();
  boolean status=readUntilMatch(endTag,true);
  final String data;
  if (startPos == 0)   data=new String(buffer.getData(),1,buffer.getLength());
 else   data=new String(buffer.getData(),0,buffer.getLength());
  final String[] lines=PATTERN.split(data);
  String id=""String_Node_Str"";
  int count=0;
  for (int i=0; i < lines.length; i++) {
    final String line=lines[i].trim();
    if (""String_Node_Str"".equals(line))     continue;
    if (count == 0)     id=line;
    if (count == 2 && !id.equals(line.substring(1)))     throw new IOException(""String_Node_Str"" + id + ""String_Node_Str""+ line.substring(1));
    if (count != 2 && count < 4) {
      if (count > 0)       sb.append(""String_Node_Str"");
      sb.append(line);
    }
    count++;
  }
  key.set(fsin.getPos());
  value.set(sb.toString());
  sb.setLength(0);
  buffer.reset();
  if (!status)   stillInChunk=false;
  return true;
}","@Override public boolean next(final LongWritable key,final Text value) throws IOException {
  if (!stillInChunk)   return false;
  final long startPos=fsin.getPos();
  boolean status=readUntilMatch(endTag,true);
  final String data;
  if (startPos == 0)   data=new String(buffer.getData(),1,buffer.getLength(),CHARSET);
 else   data=new String(buffer.getData(),0,buffer.getLength(),CHARSET);
  final String[] lines=PATTERN.split(data);
  String id=""String_Node_Str"";
  int count=0;
  for (int i=0; i < lines.length; i++) {
    final String line=lines[i].trim();
    if (""String_Node_Str"".equals(line))     continue;
    if (count == 0)     id=line;
    if (count == 2 && !id.equals(line.substring(1)))     throw new IOException(""String_Node_Str"" + id + ""String_Node_Str""+ line.substring(1));
    if (count != 2 && count < 4) {
      if (count > 0)       sb.append(""String_Node_Str"");
      sb.append(line);
    }
    count++;
  }
  key.set(fsin.getPos());
  value.set(sb.toString());
  sb.setLength(0);
  buffer.reset();
  if (!status)   stillInChunk=false;
  return true;
}",0.9924953095684804
141278,"/** 
 * Load the information from the index file
 * @throws IOException if an error occurs while loading the index file
 */
private void load() throws IOException {
  if (!this.dir.exists())   throw new IOException(""String_Node_Str"" + this.dir.getSource());
  final DataFile indexFile=new DataFile(dir,INDEX_FILENAME);
  if (!indexFile.exists()) {
    save();
    return;
  }
  final BufferedReader br=new BufferedReader(new InputStreamReader(indexFile.open()));
  final Pattern pattern=Pattern.compile(""String_Node_Str"");
  String line=null;
  while ((line=br.readLine()) != null) {
    final String trimmedLine=line.trim();
    if (""String_Node_Str"".equals(trimmedLine) || trimmedLine.startsWith(""String_Node_Str""))     continue;
    final List<String> fields=Arrays.asList(pattern.split(trimmedLine));
    if (fields.size() != 6)     continue;
    final IndexEntry e=new IndexEntry();
    e.genomeName=fields.get(0);
    e.genomeMD5=fields.get(1);
    e.mapperName=fields.get(4);
    e.file=new DataFile(dir,fields.get(5));
    if (e.file.exists())     this.entries.put(e.getKey(),e);
  }
  br.close();
}","/** 
 * Load the information from the index file
 * @throws IOException if an error occurs while loading the index file
 */
private void load() throws IOException {
  if (!this.dir.exists())   throw new IOException(""String_Node_Str"" + this.dir.getSource());
  final DataFile indexFile=new DataFile(dir,INDEX_FILENAME);
  if (!indexFile.exists()) {
    save();
    return;
  }
  final BufferedReader br=new BufferedReader(new InputStreamReader(indexFile.open(),Globals.DEFAULT_FILE_ENCODING));
  final Pattern pattern=Pattern.compile(""String_Node_Str"");
  String line=null;
  while ((line=br.readLine()) != null) {
    final String trimmedLine=line.trim();
    if (""String_Node_Str"".equals(trimmedLine) || trimmedLine.startsWith(""String_Node_Str""))     continue;
    final List<String> fields=Arrays.asList(pattern.split(trimmedLine));
    if (fields.size() != 6)     continue;
    final IndexEntry e=new IndexEntry();
    e.genomeName=fields.get(0);
    e.genomeMD5=fields.get(1);
    e.mapperName=fields.get(4);
    e.file=new DataFile(dir,fields.get(5));
    if (e.file.exists())     this.entries.put(e.getKey(),e);
  }
  br.close();
}",0.9866310160427808
141279,"/** 
 * Save the information in the index file
 * @throws IOException if an error occurs while saving the index file
 */
private void save() throws IOException {
  if (!this.dir.exists())   throw new IOException(""String_Node_Str"" + this.dir.getSource());
  final DataFile indexFile=new DataFile(dir,INDEX_FILENAME);
  final BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(indexFile.create()));
  writer.write(""String_Node_Str"");
  for (  Map.Entry<String,IndexEntry> e : this.entries.entrySet()) {
    IndexEntry ie=e.getValue();
    writer.append(ie.genomeName == null ? ""String_Node_Str"" : ie.genomeName);
    writer.append(""String_Node_Str"");
    writer.append(ie.genomeMD5);
    writer.append(""String_Node_Str"");
    writer.append(Integer.toString(ie.sequences));
    writer.append(""String_Node_Str"");
    writer.append(Long.toString(ie.length));
    writer.append(""String_Node_Str"");
    writer.append(ie.mapperName);
    writer.append(""String_Node_Str"");
    writer.append(ie.file.getName());
    writer.append(""String_Node_Str"");
  }
  writer.close();
}","/** 
 * Save the information in the index file
 * @throws IOException if an error occurs while saving the index file
 */
private void save() throws IOException {
  if (!this.dir.exists())   throw new IOException(""String_Node_Str"" + this.dir.getSource());
  final DataFile indexFile=new DataFile(dir,INDEX_FILENAME);
  final BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(indexFile.create(),Globals.DEFAULT_FILE_ENCODING));
  writer.write(""String_Node_Str"");
  for (  Map.Entry<String,IndexEntry> e : this.entries.entrySet()) {
    IndexEntry ie=e.getValue();
    writer.append(ie.genomeName == null ? ""String_Node_Str"" : ie.genomeName);
    writer.append(""String_Node_Str"");
    writer.append(ie.genomeMD5);
    writer.append(""String_Node_Str"");
    writer.append(Integer.toString(ie.sequences));
    writer.append(""String_Node_Str"");
    writer.append(Long.toString(ie.length));
    writer.append(""String_Node_Str"");
    writer.append(ie.mapperName);
    writer.append(""String_Node_Str"");
    writer.append(ie.file.getName());
    writer.append(""String_Node_Str"");
  }
  writer.close();
}",0.9862511457378552
141280,"/** 
 * Check a genome file.
 * @param is Input stream to read for the checking
 * @return a map the the sizes of the chromosomes
 * @throws IOException if an error occurs while reading data
 * @throws BadBioEntryException if the name or the sequence of the chromosomeis not valid
 */
private Map<String,Integer> checkGenomeFile(final InputStream is) throws IOException, BadBioEntryException {
  final BufferedReader br=new BufferedReader(new InputStreamReader(is));
  String line=null;
  final Map<String,Integer> chromosomes=new HashMap<String,Integer>();
  String currentChr=null;
  int currentSize=0;
  while ((line=br.readLine()) != null) {
    line=line.trim();
    if (""String_Node_Str"".equals(line))     continue;
    if (line.startsWith(""String_Node_Str"")) {
      chromosomes.put(currentChr,currentSize);
      currentChr=parseFastaEntryHeader(line);
      if (chromosomes.containsKey(currentChr))       throw new BadBioEntryException(""String_Node_Str"" + currentChr,line);
      currentSize=0;
    }
 else {
      if (currentChr == null)       throw new BadBioEntryException(""String_Node_Str"",line);
      currentSize+=checkBases(line.trim());
    }
  }
  chromosomes.put(currentChr,currentSize);
  is.close();
  return chromosomes;
}","/** 
 * Check a genome file.
 * @param is Input stream to read for the checking
 * @return a map the the sizes of the chromosomes
 * @throws IOException if an error occurs while reading data
 * @throws BadBioEntryException if the name or the sequence of the chromosomeis not valid
 */
private Map<String,Integer> checkGenomeFile(final InputStream is) throws IOException, BadBioEntryException {
  final BufferedReader br=new BufferedReader(new InputStreamReader(is,Globals.DEFAULT_FILE_ENCODING));
  String line=null;
  final Map<String,Integer> chromosomes=new HashMap<String,Integer>();
  String currentChr=null;
  int currentSize=0;
  while ((line=br.readLine()) != null) {
    line=line.trim();
    if (""String_Node_Str"".equals(line))     continue;
    if (line.startsWith(""String_Node_Str"")) {
      chromosomes.put(currentChr,currentSize);
      currentChr=parseFastaEntryHeader(line);
      if (chromosomes.containsKey(currentChr))       throw new BadBioEntryException(""String_Node_Str"" + currentChr,line);
      currentSize=0;
    }
 else {
      if (currentChr == null)       throw new BadBioEntryException(""String_Node_Str"",line);
      currentSize+=checkBases(line.trim());
    }
  }
  chromosomes.put(currentChr,currentSize);
  is.close();
  return chromosomes;
}",0.988085782366958
141281,"private void writeDirectoryCatalog(final Path catPath,final FileSystem fs) throws IOException {
  final Writer writer=new OutputStreamWriter(fs.create(catPath));
  final Path basePath=new Path(getContext().getBasePathname());
  final FileSystem baseFs=basePath.getFileSystem(this.conf);
  final StringBuilder sb=new StringBuilder();
  final FileStatus[] files=baseFs.listStatus(basePath);
  long count=0;
  if (files != null)   for (  FileStatus f : files) {
    if (f.isDir())     sb.append(""String_Node_Str"");
 else     sb.append(""String_Node_Str"");
    sb.append(new Date(f.getModificationTime()));
    sb.append(""String_Node_Str"");
    sb.append(String.format(""String_Node_Str"",f.getLen()));
    sb.append(""String_Node_Str"");
    sb.append(f.getPath().getName());
    sb.append(""String_Node_Str"");
    count+=f.getLen();
  }
  sb.append(count);
  sb.append(""String_Node_Str"");
  sb.append(basePath);
  sb.append(""String_Node_Str"");
  writer.write(sb.toString());
  writer.close();
}","private void writeDirectoryCatalog(final Path catPath,final FileSystem fs) throws IOException {
  final Writer writer=new OutputStreamWriter(fs.create(catPath),Globals.DEFAULT_FILE_ENCODING);
  final Path basePath=new Path(getContext().getBasePathname());
  final FileSystem baseFs=basePath.getFileSystem(this.conf);
  final StringBuilder sb=new StringBuilder();
  final FileStatus[] files=baseFs.listStatus(basePath);
  long count=0;
  if (files != null)   for (  FileStatus f : files) {
    if (f.isDir())     sb.append(""String_Node_Str"");
 else     sb.append(""String_Node_Str"");
    sb.append(new Date(f.getModificationTime()));
    sb.append(""String_Node_Str"");
    sb.append(String.format(""String_Node_Str"",f.getLen()));
    sb.append(""String_Node_Str"");
    sb.append(f.getPath().getName());
    sb.append(""String_Node_Str"");
    count+=f.getLen();
  }
  sb.append(count);
  sb.append(""String_Node_Str"");
  sb.append(basePath);
  sb.append(""String_Node_Str"");
  writer.write(sb.toString());
  writer.close();
}",0.985014985014985
141282,"private void writeErrorLog(final Path logPath,final FileSystem fs,final StepResult result) throws IOException {
  final Writer writer=new OutputStreamWriter(fs.create(logPath));
  final String data=result.getErrorMessage();
  final Exception e=result.getException();
  if (data != null)   writer.write(data);
  if (e != null) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    e.printStackTrace(new PrintWriter(writer));
  }
  writer.close();
}","private void writeErrorLog(final Path logPath,final FileSystem fs,final StepResult result) throws IOException {
  final Writer writer=new OutputStreamWriter(fs.create(logPath),Globals.DEFAULT_FILE_ENCODING);
  final String data=result.getErrorMessage();
  final Exception e=result.getException();
  if (data != null)   writer.write(data);
  if (e != null) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    e.printStackTrace(new PrintWriter(writer));
  }
  writer.close();
}",0.9767080745341616
141283,"private void writeResultLog(final Path logPath,final FileSystem fs,final StepResult result) throws IOException {
  final Writer writer=new OutputStreamWriter(fs.create(logPath));
  final String data=result.getLogMessage();
  if (data != null)   writer.write(data);
  writer.close();
}","private void writeResultLog(final Path logPath,final FileSystem fs,final StepResult result) throws IOException {
  final Writer writer=new OutputStreamWriter(fs.create(logPath),Globals.DEFAULT_FILE_ENCODING);
  final String data=result.getLogMessage();
  if (data != null)   writer.write(data);
  writer.close();
}",0.9498327759197324
141284,"private void standardUpload(final ObjectMetadata md){
  final PutObjectRequest or;
  if (file != null)   or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),file);
 else   or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
  getS3().putObject(or);
}","private void standardUpload(final ObjectMetadata md){
  final PutObjectRequest or;
  if (file != null)   or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),file);
 else   or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
  getS3().putObject(or);
  if (this.is != null)   try {
    this.is.close();
  }
 catch (  IOException e) {
    throw new AmazonClientException(e.getMessage());
  }
}",0.7959183673469388
141285,"private void multipartUpload(final ObjectMetadata md){
  LOGGER.info(""String_Node_Str"");
  final Transfer myUpload;
  if (file != null)   myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),file);
 else   myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
  try {
    while (myUpload.isDone() == false) {
      Thread.sleep(500);
    }
    if (myUpload.getState() != TransferState.Completed)     throw new AmazonClientException(""String_Node_Str"" + myUpload.getState());
  }
 catch (  InterruptedException e) {
    LOGGER.warning(e.getMessage());
    throw new AmazonClientException(e.getMessage());
  }
}","private void multipartUpload(final ObjectMetadata md){
  LOGGER.info(""String_Node_Str"");
  final Transfer myUpload;
  if (file != null)   myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),file);
 else   myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
  try {
    while (myUpload.isDone() == false) {
      Thread.sleep(500);
    }
    if (myUpload.getState() != TransferState.Completed)     throw new AmazonClientException(""String_Node_Str"" + myUpload.getState());
  }
 catch (  InterruptedException e) {
    LOGGER.warning(e.getMessage());
    throw new AmazonClientException(e.getMessage());
  }
 finally {
    try {
      if (this.is != null)       this.is.close();
    }
 catch (    IOException e) {
      throw new AmazonClientException(e.getMessage());
    }
  }
}",0.8784648187633263
141286,"public FileToUpload(final DataFile dest,final InputStream is,final DataFileMetadata md) throws IOException {
  this.s3url=new S3URL(dest);
  this.is=is;
  this.metadata=md == null ? new SimpleDataFileMetadata() : md;
}","public FileToUpload(final DataFile dest,final File file) throws IOException {
  this.s3url=new S3URL(dest);
  this.is=null;
  this.file=file;
  this.metadata=new SimpleDataFileMetadata();
}",0.8108108108108109
141287,"/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}","/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  if (file == null)   md.setContentLength(this.metadata.getContentLength());
  final long fileLength=this.file == null ? this.metadata.getContentLength() : this.file.length();
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ fileLength+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload;
    if (file != null)     myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),file);
 else     myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or;
      if (file != null)       or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),file);
 else       or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(fileLength / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ fileLength+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}",0.9118136439267888
141288,"@Override public void putData(final DataFile src,final DataFile dest) throws IOException {
  if (src == null)   throw new NullPointerException(""String_Node_Str"");
  if (dest == null)   throw new NullPointerException(""String_Node_Str"");
  final DataFileMetadata mdSrc=src.getMetaData();
  new FileToUpload(dest,src.open(),mdSrc).upload();
}","@Override public void putData(final DataFile src,final DataFile dest) throws IOException {
  if (src == null)   throw new NullPointerException(""String_Node_Str"");
  if (dest == null)   throw new NullPointerException(""String_Node_Str"");
  final DataFileMetadata mdSrc=src.getMetaData();
  LOGGER.finest(""String_Node_Str"" + dest);
  final File file=src.toFile();
  final FileToUpload toUpload;
  if (file != null)   toUpload=new FileToUpload(dest,file);
 else   toUpload=new FileToUpload(dest,src.open(),mdSrc);
  toUpload.upload();
}",0.7784156142365097
141289,"@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}","@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  LOGGER.finest(""String_Node_Str"" + f.getAbsolutePath());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}",0.675392670157068
141290,"public FileToUpload(final DataFile dest,final InputStream is,final DataFileMetadata md) throws IOException {
  this.s3url=new S3URL(dest);
  this.is=is;
  this.metadata=md == null ? new SimpleDataFileMetadata() : md;
}","public FileToUpload(final DataFile dest,final File file) throws IOException {
  this.s3url=new S3URL(dest);
  this.is=null;
  this.file=file;
  this.metadata=new SimpleDataFileMetadata();
}",0.8108108108108109
141291,"/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}","/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  if (file == null)   md.setContentLength(this.metadata.getContentLength());
  final long fileLength=this.file == null ? this.metadata.getContentLength() : this.file.length();
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ fileLength+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload;
    if (file != null)     myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),file);
 else     myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or;
      if (file != null)       or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),file);
 else       or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(fileLength / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ fileLength+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}",0.9118136439267888
141292,"@Override public void putData(final DataFile src,final DataFile dest) throws IOException {
  if (src == null)   throw new NullPointerException(""String_Node_Str"");
  if (dest == null)   throw new NullPointerException(""String_Node_Str"");
  final DataFileMetadata mdSrc=src.getMetaData();
  new FileToUpload(dest,src.open(),mdSrc).upload();
}","@Override public void putData(final DataFile src,final DataFile dest) throws IOException {
  if (src == null)   throw new NullPointerException(""String_Node_Str"");
  if (dest == null)   throw new NullPointerException(""String_Node_Str"");
  final DataFileMetadata mdSrc=src.getMetaData();
  LOGGER.finest(""String_Node_Str"" + dest);
  final File file=src.toFile();
  final FileToUpload toUpload;
  if (file != null)   toUpload=new FileToUpload(dest,file);
 else   toUpload=new FileToUpload(dest,src.open(),mdSrc);
  toUpload.upload();
}",0.7784156142365097
141293,"@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}","@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  LOGGER.finest(""String_Node_Str"" + f.getAbsolutePath());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}",0.675392670157068
141294,"public FileToUpload(final DataFile dest,final InputStream is,final DataFileMetadata md) throws IOException {
  this.s3url=new S3URL(dest);
  this.is=is;
  this.metadata=md == null ? new SimpleDataFileMetadata() : md;
}","public FileToUpload(final DataFile dest,final File file) throws IOException {
  this.s3url=new S3URL(dest);
  this.is=null;
  this.file=file;
  this.metadata=new SimpleDataFileMetadata();
}",0.8108108108108109
141295,"/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}","/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  if (file == null)   md.setContentLength(this.metadata.getContentLength());
  final long fileLength=this.file == null ? this.metadata.getContentLength() : this.file.length();
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ fileLength+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload;
    if (file != null)     myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),file);
 else     myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or;
      if (file != null)       or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),file);
 else       or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(fileLength / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ fileLength+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}",0.9118136439267888
141296,"@Override public void putData(final DataFile src,final DataFile dest) throws IOException {
  if (src == null)   throw new NullPointerException(""String_Node_Str"");
  if (dest == null)   throw new NullPointerException(""String_Node_Str"");
  final DataFileMetadata mdSrc=src.getMetaData();
  new FileToUpload(dest,src.open(),mdSrc).upload();
}","@Override public void putData(final DataFile src,final DataFile dest) throws IOException {
  if (src == null)   throw new NullPointerException(""String_Node_Str"");
  if (dest == null)   throw new NullPointerException(""String_Node_Str"");
  final DataFileMetadata mdSrc=src.getMetaData();
  LOGGER.finest(""String_Node_Str"" + dest);
  final File file=src.toFile();
  final FileToUpload toUpload;
  if (file != null)   toUpload=new FileToUpload(dest,file);
 else   toUpload=new FileToUpload(dest,src.open(),mdSrc);
  toUpload.upload();
}",0.7784156142365097
141297,"@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}","@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  LOGGER.finest(""String_Node_Str"" + f.getAbsolutePath());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}",0.675392670157068
141298,"public FileToUpload(final DataFile dest,final InputStream is,final DataFileMetadata md) throws IOException {
  this.s3url=new S3URL(dest);
  this.is=is;
  this.metadata=md == null ? new SimpleDataFileMetadata() : md;
}","public FileToUpload(final DataFile dest,final File file) throws IOException {
  this.s3url=new S3URL(dest);
  this.is=null;
  this.file=file;
  this.metadata=new SimpleDataFileMetadata();
}",0.8108108108108109
141299,"/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}","/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  if (file == null)   md.setContentLength(this.metadata.getContentLength());
  final long fileLength=this.file == null ? this.metadata.getContentLength() : this.file.length();
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ fileLength+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload;
    if (file != null)     myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),file);
 else     myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or;
      if (file != null)       or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),file);
 else       or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(fileLength / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ fileLength+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}",0.9118136439267888
141300,"@Override public void putData(final DataFile src,final DataFile dest) throws IOException {
  if (src == null)   throw new NullPointerException(""String_Node_Str"");
  if (dest == null)   throw new NullPointerException(""String_Node_Str"");
  final DataFileMetadata mdSrc=src.getMetaData();
  new FileToUpload(dest,src.open(),mdSrc).upload();
}","@Override public void putData(final DataFile src,final DataFile dest) throws IOException {
  if (src == null)   throw new NullPointerException(""String_Node_Str"");
  if (dest == null)   throw new NullPointerException(""String_Node_Str"");
  final DataFileMetadata mdSrc=src.getMetaData();
  LOGGER.finest(""String_Node_Str"" + dest);
  final File file=src.toFile();
  final FileToUpload toUpload;
  if (file != null)   toUpload=new FileToUpload(dest,file);
 else   toUpload=new FileToUpload(dest,src.open(),mdSrc);
  toUpload.upload();
}",0.7784156142365097
141301,"@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}","@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  LOGGER.finest(""String_Node_Str"" + f.getAbsolutePath());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}",0.675392670157068
141302,"public FileToUpload(final DataFile dest,final InputStream is,final DataFileMetadata md) throws IOException {
  this.s3url=new S3URL(dest);
  this.is=is;
  this.metadata=md == null ? new SimpleDataFileMetadata() : md;
}","public FileToUpload(final DataFile dest,final File file) throws IOException {
  this.s3url=new S3URL(dest);
  this.is=null;
  this.file=file;
  this.metadata=new SimpleDataFileMetadata();
}",0.8108108108108109
141303,"/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}","/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  if (file == null)   md.setContentLength(this.metadata.getContentLength());
  final long fileLength=this.file == null ? this.metadata.getContentLength() : this.file.length();
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ fileLength+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload;
    if (file != null)     myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),file);
 else     myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or;
      if (file != null)       or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),file);
 else       or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(fileLength / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ fileLength+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}",0.9118136439267888
141304,"@Override public void putData(final DataFile src,final DataFile dest) throws IOException {
  if (src == null)   throw new NullPointerException(""String_Node_Str"");
  if (dest == null)   throw new NullPointerException(""String_Node_Str"");
  final DataFileMetadata mdSrc=src.getMetaData();
  new FileToUpload(dest,src.open(),mdSrc).upload();
}","@Override public void putData(final DataFile src,final DataFile dest) throws IOException {
  if (src == null)   throw new NullPointerException(""String_Node_Str"");
  if (dest == null)   throw new NullPointerException(""String_Node_Str"");
  final DataFileMetadata mdSrc=src.getMetaData();
  LOGGER.finest(""String_Node_Str"" + dest);
  final File file=src.toFile();
  final FileToUpload toUpload;
  if (file != null)   toUpload=new FileToUpload(dest,file);
 else   toUpload=new FileToUpload(dest,src.open(),mdSrc);
  toUpload.upload();
}",0.7784156142365097
141305,"@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}","@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  LOGGER.finest(""String_Node_Str"" + f.getAbsolutePath());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}",0.675392670157068
141306,"@Override public void removeMetadataField(final String fieldName){
  if (fieldName == null)   throw new EoulsanRuntimeException(""String_Node_Str"");
  if (!isMetadataField(fieldName))   throw new EoulsanRuntimeException(""String_Node_Str"");
  final String suffix=""String_Node_Str"" + this.metadataFields.get(fieldName);
  for (  String key : this.metadataData.keySet())   if (key.endsWith(suffix))   this.metadataData.remove(key);
  this.metadataFields.remove(fieldName);
  this.metadataOrder.remove(fieldName);
}","@Override public void removeMetadataField(final String fieldName){
  if (fieldName == null)   throw new EoulsanRuntimeException(""String_Node_Str"");
  if (!isMetadataField(fieldName))   throw new EoulsanRuntimeException(""String_Node_Str"");
  final String suffix=""String_Node_Str"" + this.metadataFields.get(fieldName);
  for (  String key : new HashSet<String>(this.metadataData.keySet()))   if (key.endsWith(suffix))   this.metadataData.remove(key);
  this.metadataFields.remove(fieldName);
  this.metadataOrder.remove(fieldName);
}",0.9798270893371758
141307,"@Override public void removeMetadataField(final String fieldName){
  if (fieldName == null)   throw new EoulsanRuntimeException(""String_Node_Str"");
  if (!isMetadataField(fieldName))   throw new EoulsanRuntimeException(""String_Node_Str"");
  final String suffix=""String_Node_Str"" + this.metadataFields.get(fieldName);
  for (  String key : this.metadataData.keySet())   if (key.endsWith(suffix))   this.metadataData.remove(key);
  this.metadataFields.remove(fieldName);
  this.metadataOrder.remove(fieldName);
}","@Override public void removeMetadataField(final String fieldName){
  if (fieldName == null)   throw new EoulsanRuntimeException(""String_Node_Str"");
  if (!isMetadataField(fieldName))   throw new EoulsanRuntimeException(""String_Node_Str"");
  final String suffix=""String_Node_Str"" + this.metadataFields.get(fieldName);
  for (  String key : new HashSet<String>(this.metadataData.keySet()))   if (key.endsWith(suffix))   this.metadataData.remove(key);
  this.metadataFields.remove(fieldName);
  this.metadataOrder.remove(fieldName);
}",0.9798270893371758
141308,"/** 
 * Upload the file.
 */
public void upload(){
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
  LOGGER.fine(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Upload myUpload=tx.upload(or);
    int count=0;
    while (!myUpload.isDone()) {
      if (count % 10 == 0)       LOGGER.info(""String_Node_Str"" + myUpload.getDescription() + ""String_Node_Str""+ myUpload.getState()+ ""String_Node_Str""+ myUpload.getProgress().getBytesTransfered());
      count++;
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw ace;
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}","/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}",0.7914438502673797
141309,"@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}","@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,new FileInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}",0.9770773638968482
141310,"/** 
 * Upload the file.
 */
public void upload(){
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
  LOGGER.fine(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Upload myUpload=tx.upload(or);
    int count=0;
    while (!myUpload.isDone()) {
      if (count % 10 == 0)       LOGGER.info(""String_Node_Str"" + myUpload.getDescription() + ""String_Node_Str""+ myUpload.getState()+ ""String_Node_Str""+ myUpload.getProgress().getBytesTransfered());
      count++;
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw ace;
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}","/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}",0.7914438502673797
141311,"@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}","@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,new FileInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}",0.9770773638968482
141312,"@Override public void removeMetadataField(final String fieldName){
  if (fieldName == null)   throw new EoulsanRuntimeException(""String_Node_Str"");
  if (!isMetadataField(fieldName))   throw new EoulsanRuntimeException(""String_Node_Str"");
  final String suffix=""String_Node_Str"" + this.metadataFields.get(fieldName);
  for (  String key : this.metadataData.keySet())   if (key.endsWith(suffix))   this.metadataData.remove(key);
  this.metadataFields.remove(fieldName);
  this.metadataOrder.remove(fieldName);
}","@Override public void removeMetadataField(final String fieldName){
  if (fieldName == null)   throw new EoulsanRuntimeException(""String_Node_Str"");
  if (!isMetadataField(fieldName))   throw new EoulsanRuntimeException(""String_Node_Str"");
  final String suffix=""String_Node_Str"" + this.metadataFields.get(fieldName);
  for (  String key : new HashSet<String>(this.metadataData.keySet()))   if (key.endsWith(suffix))   this.metadataData.remove(key);
  this.metadataFields.remove(fieldName);
  this.metadataOrder.remove(fieldName);
}",0.9798270893371758
141313,"@Override public void removeMetadataField(final String fieldName){
  if (fieldName == null)   throw new EoulsanRuntimeException(""String_Node_Str"");
  if (!isMetadataField(fieldName))   throw new EoulsanRuntimeException(""String_Node_Str"");
  final String suffix=""String_Node_Str"" + this.metadataFields.get(fieldName);
  for (  String key : this.metadataData.keySet())   if (key.endsWith(suffix))   this.metadataData.remove(key);
  this.metadataFields.remove(fieldName);
  this.metadataOrder.remove(fieldName);
}","@Override public void removeMetadataField(final String fieldName){
  if (fieldName == null)   throw new EoulsanRuntimeException(""String_Node_Str"");
  if (!isMetadataField(fieldName))   throw new EoulsanRuntimeException(""String_Node_Str"");
  final String suffix=""String_Node_Str"" + this.metadataFields.get(fieldName);
  for (  String key : new HashSet<String>(this.metadataData.keySet()))   if (key.endsWith(suffix))   this.metadataData.remove(key);
  this.metadataFields.remove(fieldName);
  this.metadataOrder.remove(fieldName);
}",0.9798270893371758
141314,"/** 
 * Upload the file.
 */
public void upload(){
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
  LOGGER.fine(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Upload myUpload=tx.upload(or);
    int count=0;
    while (!myUpload.isDone()) {
      if (count % 10 == 0)       LOGGER.info(""String_Node_Str"" + myUpload.getDescription() + ""String_Node_Str""+ myUpload.getState()+ ""String_Node_Str""+ myUpload.getProgress().getBytesTransfered());
      count++;
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw ace;
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}","/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}",0.7914438502673797
141315,"@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}","@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,new FileInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}",0.9770773638968482
141316,"/** 
 * Upload the file.
 */
public void upload(){
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
  LOGGER.fine(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Upload myUpload=tx.upload(or);
    int count=0;
    while (!myUpload.isDone()) {
      if (count % 10 == 0)       LOGGER.info(""String_Node_Str"" + myUpload.getDescription() + ""String_Node_Str""+ myUpload.getState()+ ""String_Node_Str""+ myUpload.getProgress().getBytesTransfered());
      count++;
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw ace;
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}","/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}",0.7914438502673797
141317,"@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}","@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,new FileInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}",0.9770773638968482
141318,"@Override public void removeMetadataField(final String fieldName){
  if (fieldName == null)   throw new EoulsanRuntimeException(""String_Node_Str"");
  if (!isMetadataField(fieldName))   throw new EoulsanRuntimeException(""String_Node_Str"");
  final String suffix=""String_Node_Str"" + this.metadataFields.get(fieldName);
  for (  String key : this.metadataData.keySet())   if (key.endsWith(suffix))   this.metadataData.remove(key);
  this.metadataFields.remove(fieldName);
  this.metadataOrder.remove(fieldName);
}","@Override public void removeMetadataField(final String fieldName){
  if (fieldName == null)   throw new EoulsanRuntimeException(""String_Node_Str"");
  if (!isMetadataField(fieldName))   throw new EoulsanRuntimeException(""String_Node_Str"");
  final String suffix=""String_Node_Str"" + this.metadataFields.get(fieldName);
  for (  String key : new HashSet<String>(this.metadataData.keySet()))   if (key.endsWith(suffix))   this.metadataData.remove(key);
  this.metadataFields.remove(fieldName);
  this.metadataOrder.remove(fieldName);
}",0.9798270893371758
141319,"/** 
 * Upload the file.
 */
public void upload(){
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
  LOGGER.fine(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Upload myUpload=tx.upload(or);
    int count=0;
    while (!myUpload.isDone()) {
      if (count % 10 == 0)       LOGGER.info(""String_Node_Str"" + myUpload.getDescription() + ""String_Node_Str""+ myUpload.getState()+ ""String_Node_Str""+ myUpload.getProgress().getBytesTransfered());
      count++;
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw ace;
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}","/** 
 * Upload the file.
 */
public void upload() throws IOException {
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  if (multipartUpload) {
    LOGGER.info(""String_Node_Str"");
    final Transfer myUpload=tx.upload(s3url.bucket,s3url.getFilePath(),this.is,md);
    try {
      while (myUpload.isDone() == false) {
        Thread.sleep(500);
      }
      if (myUpload.getState() != TransferState.Completed)       throw new IOException(""String_Node_Str"" + myUpload.getState());
    }
 catch (    InterruptedException e) {
      LOGGER.warning(e.getMessage());
      throw new IOException(e.getMessage());
    }
    uploadOk=true;
  }
 else   do {
    tryCount++;
    try {
      final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str""+ e.getMessage());
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw new IOException(ace.getMessage());
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}",0.7914438502673797
141320,"@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}","@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,new FileInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}",0.9770773638968482
141321,"/** 
 * Public constructor
 * @param file File to use
 * @param reuseResultObject if the object returns by the next() method will bealways the same
 */
public FastqReader(final File file,final boolean reuseResultObject) throws FileNotFoundException {
  if (file == null)   throw new NullPointerException(""String_Node_Str"");
  if (!file.isFile())   throw new FileNotFoundException(""String_Node_Str"" + file.getAbsolutePath());
  this.reader=FileUtils.createBufferedReader(file);
  this.reuse=reuseResultObject;
}","/** 
 * Public constructor
 * @param file File to use
 * @param reuseResultObject if the object returns by the next() method will bealways the same
 */
public FastqReader(final File file,final boolean reuseResultObject) throws FileNotFoundException {
  if (file == null)   throw new NullPointerException(""String_Node_Str"");
  if (!file.isFile())   throw new FileNotFoundException(""String_Node_Str"" + file.getAbsolutePath());
  this.reader=FileUtils.createBufferedReader(file);
  this.reuse=reuseResultObject;
  if (this.reuse)   this.result=new ReadSequence();
}",0.9514925373134328
141322,"/** 
 * Public constructor
 * @param file File to use
 * @param reuseResultObject if the object returns by the next() method will bealways the same
 */
public FastqReader(final File file,final boolean reuseResultObject) throws FileNotFoundException {
  if (file == null)   throw new NullPointerException(""String_Node_Str"");
  if (!file.isFile())   throw new FileNotFoundException(""String_Node_Str"" + file.getAbsolutePath());
  this.reader=FileUtils.createBufferedReader(file);
  this.reuse=reuseResultObject;
}","/** 
 * Public constructor
 * @param file File to use
 * @param reuseResultObject if the object returns by the next() method will bealways the same
 */
public FastqReader(final File file,final boolean reuseResultObject) throws FileNotFoundException {
  if (file == null)   throw new NullPointerException(""String_Node_Str"");
  if (!file.isFile())   throw new FileNotFoundException(""String_Node_Str"" + file.getAbsolutePath());
  this.reader=FileUtils.createBufferedReader(file);
  this.reuse=reuseResultObject;
  if (this.reuse)   this.result=new ReadSequence();
}",0.9514925373134328
141323,"/** 
 * Public constructor
 * @param file File to use
 * @param reuseResultObject if the object returns by the next() method will bealways the same
 */
public FastqReader(final File file,final boolean reuseResultObject) throws FileNotFoundException {
  if (file == null)   throw new NullPointerException(""String_Node_Str"");
  if (!file.isFile())   throw new FileNotFoundException(""String_Node_Str"" + file.getAbsolutePath());
  this.reader=FileUtils.createBufferedReader(file);
  this.reuse=reuseResultObject;
}","/** 
 * Public constructor
 * @param file File to use
 * @param reuseResultObject if the object returns by the next() method will bealways the same
 */
public FastqReader(final File file,final boolean reuseResultObject) throws FileNotFoundException {
  if (file == null)   throw new NullPointerException(""String_Node_Str"");
  if (!file.isFile())   throw new FileNotFoundException(""String_Node_Str"" + file.getAbsolutePath());
  this.reader=FileUtils.createBufferedReader(file);
  this.reuse=reuseResultObject;
  if (this.reuse)   this.result=new ReadSequence();
}",0.9514925373134328
141324,"/** 
 * Public constructor
 * @param file File to use
 * @param reuseResultObject if the object returns by the next() method will bealways the same
 */
public FastqReader(final File file,final boolean reuseResultObject) throws FileNotFoundException {
  if (file == null)   throw new NullPointerException(""String_Node_Str"");
  if (!file.isFile())   throw new FileNotFoundException(""String_Node_Str"" + file.getAbsolutePath());
  this.reader=FileUtils.createBufferedReader(file);
  this.reuse=reuseResultObject;
}","/** 
 * Public constructor
 * @param file File to use
 * @param reuseResultObject if the object returns by the next() method will bealways the same
 */
public FastqReader(final File file,final boolean reuseResultObject) throws FileNotFoundException {
  if (file == null)   throw new NullPointerException(""String_Node_Str"");
  if (!file.isFile())   throw new FileNotFoundException(""String_Node_Str"" + file.getAbsolutePath());
  this.reader=FileUtils.createBufferedReader(file);
  this.reuse=reuseResultObject;
  if (this.reuse)   this.result=new ReadSequence();
}",0.9514925373134328
141325,"/** 
 * Public constructor
 * @param file File to use
 * @param reuseResultObject if the object returns by the next() method will bealways the same
 */
public FastqReader(final File file,final boolean reuseResultObject) throws FileNotFoundException {
  if (file == null)   throw new NullPointerException(""String_Node_Str"");
  if (!file.isFile())   throw new FileNotFoundException(""String_Node_Str"" + file.getAbsolutePath());
  this.reader=FileUtils.createBufferedReader(file);
  this.reuse=reuseResultObject;
}","/** 
 * Public constructor
 * @param file File to use
 * @param reuseResultObject if the object returns by the next() method will bealways the same
 */
public FastqReader(final File file,final boolean reuseResultObject) throws FileNotFoundException {
  if (file == null)   throw new NullPointerException(""String_Node_Str"");
  if (!file.isFile())   throw new FileNotFoundException(""String_Node_Str"" + file.getAbsolutePath());
  this.reader=FileUtils.createBufferedReader(file);
  this.reuse=reuseResultObject;
  if (this.reuse)   this.result=new ReadSequence();
}",0.9514925373134328
141326,"private void scanWorkflow() throws EoulsanException {
  final Context context=this.context;
  final Set<DataFile> checkedDatafile=newHashSet();
  final Map<DataFormat,Checker> checkers=newHashMap();
  boolean firstSample=true;
  for (  Sample s : this.design.getSamples()) {
    final Cart cart=new Cart();
    fillCartWithDesignFiles(cart,s);
    for (    Step step : this.steps) {
      if (firstSample)       checkStepInOutFormat(step);
      final Map<DataType,Set<DataFormat>> map=getDataFormatByDataType(step.getInputFormats());
      if (map != null && map.size() > 0)       for (      Map.Entry<DataType,Set<DataFormat>> e : map.entrySet()) {
        int foundInCart=0;
        int foundFile=0;
        boolean canBeGenerated=false;
        for (        DataFormat df : e.getValue()) {
          if (df.isGenerator())           canBeGenerated=true;
          if (cart.cart.contains(df)) {
            cart.cartUsed.add(df);
            if (df.isChecker())             checkers.put(df,df.getChecker());
            if (cart.cartGenerated.contains(df))             cart.cartReUsed.add(df);
            foundInCart++;
          }
 else           foundFile=swCheckExistingFiles(df,s,cart,foundFile);
        }
        if (foundInCart == 0 && foundFile == 0) {
          if (canBeGenerated) {
            cart.cartUsed.add(e.getValue().iterator().next());
          }
 else           throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
        }
        if (foundFile > 1 || foundInCart > 1)         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str""+ e.getKey()+ ""String_Node_Str"");
      }
      if (step.getOutputFormats() != null)       for (      DataFormat df : step.getOutputFormats()) {
        cart.cartGenerated.add(df);
        cart.cart.add(df);
      }
    }
    cart.cartNotGenerated.addAll(cart.cartUsed);
    cart.cartNotGenerated.removeAll(cart.cartGenerated);
    for (    DataFormat df : cart.cartNotGenerated) {
      final List<DataFile> files=swGetAllDataFiles(df,s);
      for (      DataFile file : files)       if (!checkedDatafile.contains(file)) {
        if (!file.exists()) {
          if (df.isGenerator()) {
            final Step generator=df.getGenerator();
            this.steps.add(swfindFirstStepThatNeedDataFormat(df),generator);
            LOGGER.info(""String_Node_Str"" + generator.getName());
            scanWorkflow();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        }
        checkedDatafile.add(file);
      }
    }
    for (    DataFormat df : cart.cartGenerated) {
      for (      DataFile file : swGetAllDataFiles(df,s))       if (!checkedDatafile.contains(file)) {
        if (context.getDataFile(df,s).exists())         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        checkedDatafile.add(file);
      }
    }
    cart.cartOnlyGenerated.addAll(cart.cartGenerated);
    cart.cartOnlyGenerated.removeAll(cart.cartReUsed);
    globalInputDataFormats.put(s.getId(),Collections.unmodifiableSet(cart.cartNotGenerated));
    globalOutputDataFormats.put(s.getId(),Collections.unmodifiableSet(cart.cartGenerated));
    if (firstSample)     firstSample=false;
  }
  runChecker(checkers);
}","private void scanWorkflow() throws EoulsanException {
  final Set<DataFile> checkedDatafile=newHashSet();
  final Map<DataFormat,Checker> checkers=newHashMap();
  boolean firstSample=true;
  for (  Sample s : this.design.getSamples()) {
    final Cart cart=new Cart();
    fillCartWithDesignFiles(cart,s);
    for (    Step step : this.steps) {
      if (firstSample)       checkStepInOutFormat(step);
      final Map<DataType,Set<DataFormat>> map=getDataFormatByDataType(step.getInputFormats());
      if (map != null && map.size() > 0)       for (      Map.Entry<DataType,Set<DataFormat>> e : map.entrySet()) {
        int foundInCart=0;
        int foundFile=0;
        boolean canBeGenerated=false;
        for (        DataFormat df : e.getValue()) {
          if (df.isGenerator())           canBeGenerated=true;
          if (cart.cart.contains(df)) {
            cart.cartUsed.add(df);
            if (df.isChecker())             checkers.put(df,df.getChecker());
            if (cart.cartGenerated.contains(df))             cart.cartReUsed.add(df);
            foundInCart++;
          }
 else           foundFile=swCheckExistingFiles(df,s,cart,foundFile);
        }
        if (foundInCart == 0 && foundFile == 0) {
          if (canBeGenerated) {
            cart.cartUsed.add(e.getValue().iterator().next());
          }
 else           throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
        }
        if (foundFile > 1 || foundInCart > 1)         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str""+ e.getKey()+ ""String_Node_Str"");
      }
      if (step.getOutputFormats() != null)       for (      DataFormat df : step.getOutputFormats()) {
        cart.cartGenerated.add(df);
        cart.cart.add(df);
      }
    }
    cart.cartNotGenerated.addAll(cart.cartUsed);
    cart.cartNotGenerated.removeAll(cart.cartGenerated);
    for (    DataFormat df : cart.cartNotGenerated) {
      final List<DataFile> files=swGetAllDataFiles(df,s);
      for (      DataFile file : files)       if (!checkedDatafile.contains(file)) {
        if (!file.exists()) {
          if (df.isGenerator()) {
            final Step generator=df.getGenerator();
            this.steps.add(swfindFirstStepThatNeedDataFormat(df),generator);
            LOGGER.info(""String_Node_Str"" + generator.getName());
            scanWorkflow();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        }
        checkedDatafile.add(file);
      }
    }
    for (    DataFormat df : cart.cartGenerated) {
      for (      DataFile file : swGetAllDataFiles(df,s))       if (!checkedDatafile.contains(file)) {
        if (file.exists())         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        checkedDatafile.add(file);
      }
    }
    cart.cartOnlyGenerated.addAll(cart.cartGenerated);
    cart.cartOnlyGenerated.removeAll(cart.cartReUsed);
    globalInputDataFormats.put(s.getId(),Collections.unmodifiableSet(cart.cartNotGenerated));
    globalOutputDataFormats.put(s.getId(),Collections.unmodifiableSet(cart.cartGenerated));
    if (firstSample)     firstSample=false;
  }
  runChecker(checkers);
}",0.9902146925660872
141327,"/** 
 * Convert the S3 URLs to S3N URLs in source, genome and annotation fields of the design.
 */
private void convertDesignS3URLs(){
  for (  Sample s : this.design.getSamples()) {
    final List<String> readsSources=s.getMetadata().getReads();
    for (int i=0; i < readsSources.size(); i++)     readsSources.set(i,convertS3URL(readsSources.get(i)));
    s.getMetadata().setReads(readsSources);
    if (s.getMetadata().isGenomeField())     s.getMetadata().setGenome(convertS3URL(s.getMetadata().getGenome()));
    if (s.getMetadata().isAnnotationField())     s.getMetadata().setAnnotation(convertS3URL(s.getMetadata().getAnnotation()));
  }
}","/** 
 * Convert the S3 URLs to S3N URLs in source, genome and annotation fields of the design.
 */
private void convertDesignS3URLs(){
  for (  Sample s : this.design.getSamples()) {
    final List<String> readsSources=Lists.newArrayList(s.getMetadata().getReads());
    for (int i=0; i < readsSources.size(); i++)     readsSources.set(i,convertS3URL(readsSources.get(i)));
    s.getMetadata().setReads(readsSources);
    if (s.getMetadata().isGenomeField())     s.getMetadata().setGenome(convertS3URL(s.getMetadata().getGenome()));
    if (s.getMetadata().isAnnotationField())     s.getMetadata().setAnnotation(convertS3URL(s.getMetadata().getAnnotation()));
  }
}",0.9465648854961832
141328,"private void scanWorkflow() throws EoulsanException {
  final Context context=this.context;
  final Set<DataFile> checkedDatafile=newHashSet();
  final Map<DataFormat,Checker> checkers=newHashMap();
  boolean firstSample=true;
  for (  Sample s : this.design.getSamples()) {
    final Cart cart=new Cart();
    fillCartWithDesignFiles(cart,s);
    for (    Step step : this.steps) {
      if (firstSample)       checkStepInOutFormat(step);
      final Map<DataType,Set<DataFormat>> map=getDataFormatByDataType(step.getInputFormats());
      if (map != null && map.size() > 0)       for (      Map.Entry<DataType,Set<DataFormat>> e : map.entrySet()) {
        int foundInCart=0;
        int foundFile=0;
        boolean canBeGenerated=false;
        for (        DataFormat df : e.getValue()) {
          if (df.isGenerator())           canBeGenerated=true;
          if (cart.cart.contains(df)) {
            cart.cartUsed.add(df);
            if (df.isChecker())             checkers.put(df,df.getChecker());
            if (cart.cartGenerated.contains(df))             cart.cartReUsed.add(df);
            foundInCart++;
          }
 else           foundFile=swCheckExistingFiles(df,s,cart,foundFile);
        }
        if (foundInCart == 0 && foundFile == 0) {
          if (canBeGenerated) {
            cart.cartUsed.add(e.getValue().iterator().next());
          }
 else           throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
        }
        if (foundFile > 1 || foundInCart > 1)         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str""+ e.getKey()+ ""String_Node_Str"");
      }
      if (step.getOutputFormats() != null)       for (      DataFormat df : step.getOutputFormats()) {
        cart.cartGenerated.add(df);
        cart.cart.add(df);
      }
    }
    cart.cartNotGenerated.addAll(cart.cartUsed);
    cart.cartNotGenerated.removeAll(cart.cartGenerated);
    for (    DataFormat df : cart.cartNotGenerated) {
      final List<DataFile> files=swGetAllDataFiles(df,s);
      for (      DataFile file : files)       if (!checkedDatafile.contains(file)) {
        if (!file.exists()) {
          if (df.isGenerator()) {
            final Step generator=df.getGenerator();
            this.steps.add(swfindFirstStepThatNeedDataFormat(df),generator);
            LOGGER.info(""String_Node_Str"" + generator.getName());
            scanWorkflow();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        }
        checkedDatafile.add(file);
      }
    }
    for (    DataFormat df : cart.cartGenerated) {
      for (      DataFile file : swGetAllDataFiles(df,s))       if (!checkedDatafile.contains(file)) {
        if (context.getDataFile(df,s).exists())         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        checkedDatafile.add(file);
      }
    }
    cart.cartOnlyGenerated.addAll(cart.cartGenerated);
    cart.cartOnlyGenerated.removeAll(cart.cartReUsed);
    globalInputDataFormats.put(s.getId(),Collections.unmodifiableSet(cart.cartNotGenerated));
    globalOutputDataFormats.put(s.getId(),Collections.unmodifiableSet(cart.cartGenerated));
    if (firstSample)     firstSample=false;
  }
  runChecker(checkers);
}","private void scanWorkflow() throws EoulsanException {
  final Set<DataFile> checkedDatafile=newHashSet();
  final Map<DataFormat,Checker> checkers=newHashMap();
  boolean firstSample=true;
  for (  Sample s : this.design.getSamples()) {
    final Cart cart=new Cart();
    fillCartWithDesignFiles(cart,s);
    for (    Step step : this.steps) {
      if (firstSample)       checkStepInOutFormat(step);
      final Map<DataType,Set<DataFormat>> map=getDataFormatByDataType(step.getInputFormats());
      if (map != null && map.size() > 0)       for (      Map.Entry<DataType,Set<DataFormat>> e : map.entrySet()) {
        int foundInCart=0;
        int foundFile=0;
        boolean canBeGenerated=false;
        for (        DataFormat df : e.getValue()) {
          if (df.isGenerator())           canBeGenerated=true;
          if (cart.cart.contains(df)) {
            cart.cartUsed.add(df);
            if (df.isChecker())             checkers.put(df,df.getChecker());
            if (cart.cartGenerated.contains(df))             cart.cartReUsed.add(df);
            foundInCart++;
          }
 else           foundFile=swCheckExistingFiles(df,s,cart,foundFile);
        }
        if (foundInCart == 0 && foundFile == 0) {
          if (canBeGenerated) {
            cart.cartUsed.add(e.getValue().iterator().next());
          }
 else           throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
        }
        if (foundFile > 1 || foundInCart > 1)         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str""+ e.getKey()+ ""String_Node_Str"");
      }
      if (step.getOutputFormats() != null)       for (      DataFormat df : step.getOutputFormats()) {
        cart.cartGenerated.add(df);
        cart.cart.add(df);
      }
    }
    cart.cartNotGenerated.addAll(cart.cartUsed);
    cart.cartNotGenerated.removeAll(cart.cartGenerated);
    for (    DataFormat df : cart.cartNotGenerated) {
      final List<DataFile> files=swGetAllDataFiles(df,s);
      for (      DataFile file : files)       if (!checkedDatafile.contains(file)) {
        if (!file.exists()) {
          if (df.isGenerator()) {
            final Step generator=df.getGenerator();
            this.steps.add(swfindFirstStepThatNeedDataFormat(df),generator);
            LOGGER.info(""String_Node_Str"" + generator.getName());
            scanWorkflow();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        }
        checkedDatafile.add(file);
      }
    }
    for (    DataFormat df : cart.cartGenerated) {
      for (      DataFile file : swGetAllDataFiles(df,s))       if (!checkedDatafile.contains(file)) {
        if (file.exists())         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        checkedDatafile.add(file);
      }
    }
    cart.cartOnlyGenerated.addAll(cart.cartGenerated);
    cart.cartOnlyGenerated.removeAll(cart.cartReUsed);
    globalInputDataFormats.put(s.getId(),Collections.unmodifiableSet(cart.cartNotGenerated));
    globalOutputDataFormats.put(s.getId(),Collections.unmodifiableSet(cart.cartGenerated));
    if (firstSample)     firstSample=false;
  }
  runChecker(checkers);
}",0.9902146925660872
141329,"/** 
 * Convert the S3 URLs to S3N URLs in source, genome and annotation fields of the design.
 */
private void convertDesignS3URLs(){
  for (  Sample s : this.design.getSamples()) {
    final List<String> readsSources=s.getMetadata().getReads();
    for (int i=0; i < readsSources.size(); i++)     readsSources.set(i,convertS3URL(readsSources.get(i)));
    s.getMetadata().setReads(readsSources);
    if (s.getMetadata().isGenomeField())     s.getMetadata().setGenome(convertS3URL(s.getMetadata().getGenome()));
    if (s.getMetadata().isAnnotationField())     s.getMetadata().setAnnotation(convertS3URL(s.getMetadata().getAnnotation()));
  }
}","/** 
 * Convert the S3 URLs to S3N URLs in source, genome and annotation fields of the design.
 */
private void convertDesignS3URLs(){
  for (  Sample s : this.design.getSamples()) {
    final List<String> readsSources=Lists.newArrayList(s.getMetadata().getReads());
    for (int i=0; i < readsSources.size(); i++)     readsSources.set(i,convertS3URL(readsSources.get(i)));
    s.getMetadata().setReads(readsSources);
    if (s.getMetadata().isGenomeField())     s.getMetadata().setGenome(convertS3URL(s.getMetadata().getGenome()));
    if (s.getMetadata().isAnnotationField())     s.getMetadata().setAnnotation(convertS3URL(s.getMetadata().getAnnotation()));
  }
}",0.9465648854961832
141330,"/** 
 * Show a design
 * @param design Design to show
 */
public static void showDesign(final Design design){
  List<String> metadataFields=design.getMetadataFieldsNames();
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (  String f : metadataFields) {
    sb.append(""String_Node_Str"");
    sb.append(f);
  }
  System.out.println(sb.toString());
  List<Sample> slides=design.getSamples();
  for (  Sample s : slides) {
    sb.setLength(0);
    sb.append(s.getName());
    sb.append(""String_Node_Str"");
    String sourceInfo=s.getSourceInfo();
    if (sourceInfo != null)     sb.append(sourceInfo);
    for (    String f : metadataFields) {
      sb.append(""String_Node_Str"");
      sb.append(s.getMetadata().get(f));
    }
    System.out.println(sb.toString());
  }
}","/** 
 * Show a design
 * @param design Design to show
 */
public static void showDesign(final Design design){
  List<String> metadataFields=design.getMetadataFieldsNames();
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (  String f : metadataFields) {
    sb.append(""String_Node_Str"");
    sb.append(f);
  }
  System.out.println(sb.toString());
  List<Sample> slides=design.getSamples();
  for (  Sample s : slides) {
    sb.setLength(0);
    sb.append(s.getId());
    sb.append(""String_Node_Str"");
    sb.append(s.getName());
    sb.append(""String_Node_Str"");
    String sourceInfo=s.getSourceInfo();
    if (sourceInfo != null)     sb.append(sourceInfo);
    for (    String f : metadataFields) {
      sb.append(""String_Node_Str"");
      sb.append(s.getMetadata().get(f));
    }
    System.out.println(sb.toString());
  }
}",0.9326818675352876
141331,"/** 
 * Show a design
 * @param design Design to show
 */
public static void showDesign(final Design design){
  List<String> metadataFields=design.getMetadataFieldsNames();
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (  String f : metadataFields) {
    sb.append(""String_Node_Str"");
    sb.append(f);
  }
  System.out.println(sb.toString());
  List<Sample> slides=design.getSamples();
  for (  Sample s : slides) {
    sb.setLength(0);
    sb.append(s.getName());
    sb.append(""String_Node_Str"");
    String sourceInfo=s.getSourceInfo();
    if (sourceInfo != null)     sb.append(sourceInfo);
    for (    String f : metadataFields) {
      sb.append(""String_Node_Str"");
      sb.append(s.getMetadata().get(f));
    }
    System.out.println(sb.toString());
  }
}","/** 
 * Show a design
 * @param design Design to show
 */
public static void showDesign(final Design design){
  List<String> metadataFields=design.getMetadataFieldsNames();
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (  String f : metadataFields) {
    sb.append(""String_Node_Str"");
    sb.append(f);
  }
  System.out.println(sb.toString());
  List<Sample> slides=design.getSamples();
  for (  Sample s : slides) {
    sb.setLength(0);
    sb.append(s.getId());
    sb.append(""String_Node_Str"");
    sb.append(s.getName());
    sb.append(""String_Node_Str"");
    String sourceInfo=s.getSourceInfo();
    if (sourceInfo != null)     sb.append(sourceInfo);
    for (    String f : metadataFields) {
      sb.append(""String_Node_Str"");
      sb.append(s.getMetadata().get(f));
    }
    System.out.println(sb.toString());
  }
}",0.9326818675352876
141332,"private void scanWorkflow() throws EoulsanException {
  final Context context=this.context;
  final Set<DataFile> checkedDatafile=newHashSet();
  final Map<DataFormat,Checker> checkers=newHashMap();
  final DataFormatRegistry dfRegistry=DataFormatRegistry.getInstance();
  dfRegistry.register(DataFormats.READS_FASTQ);
  dfRegistry.register(DataFormats.READS_TFQ);
  dfRegistry.register(DataFormats.GENOME_FASTA);
  dfRegistry.register(DataFormats.ANNOTATION_GFF);
  boolean firstSample=true;
  for (  Sample s : this.design.getSamples()) {
    final Set<DataFormat> cart=newHashSet();
    final Set<DataFormat> cartUsed=newHashSet();
    final Set<DataFormat> cartReUsed=newHashSet();
    final Set<DataFormat> cartGenerated=newHashSet();
    final Set<DataFormat> cartNotGenerated=newHashSet();
    final Set<DataFormat> cartOnlyGenerated=newHashSet();
    cart.add(getReadsDataFormat(s));
    final DataFormat genomeFormat=getGenomeDataFormat(s);
    if (genomeFormat != null) {
      cart.add(genomeFormat);
    }
    final DataFormat annotationFormat=getAnnotationDataFormat(s);
    if (annotationFormat != null) {
      cart.add(annotationFormat);
    }
    for (    Step step : this.steps) {
      if (firstSample)       checkStepInOutFormat(step);
      final Map<DataType,Set<DataFormat>> map=getDataFormatByDataType(step.getInputFormats());
      if (map != null && map.size() > 0)       for (      Map.Entry<DataType,Set<DataFormat>> e : map.entrySet()) {
        int found=0;
        boolean canBeGenerated=false;
        for (        DataFormat df : e.getValue()) {
          if (df.isGenerator())           canBeGenerated=true;
          if (cart.contains(df)) {
            cartUsed.add(df);
            if (df.isChecker())             checkers.put(df,df.getChecker());
            if (cartGenerated.contains(df))             cartReUsed.add(df);
            found++;
          }
        }
        if (found == 0) {
          if (canBeGenerated) {
            cartUsed.add(e.getValue().iterator().next());
          }
 else           throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
        }
        if (found > 1)         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
      }
      if (step.getOutputFormats() != null)       for (      DataFormat df : step.getOutputFormats()) {
        cartGenerated.add(df);
        cart.add(df);
      }
    }
    cartNotGenerated.addAll(cartUsed);
    cartNotGenerated.removeAll(cartGenerated);
    for (    DataFormat df : cartNotGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (!context.getDataFile(df,s).exists()) {
          if (df.isGenerator()) {
            this.steps.add(0,df.getGenerator());
            scanWorkflow();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        }
        checkedDatafile.add(file);
      }
    }
    for (    DataFormat df : cartGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (context.getDataFile(df,s).exists())         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        checkedDatafile.add(file);
      }
    }
    cartOnlyGenerated.addAll(cartGenerated);
    cartOnlyGenerated.removeAll(cartReUsed);
    globalInputDataFormats.put(s.getId(),Collections.unmodifiableSet(cartNotGenerated));
    globalOutputDataFormats.put(s.getId(),Collections.unmodifiableSet(cartGenerated));
    if (firstSample)     firstSample=false;
  }
  runChecker(checkers);
}","private void scanWorkflow() throws EoulsanException {
  final Context context=this.context;
  final Set<DataFile> checkedDatafile=newHashSet();
  final Map<DataFormat,Checker> checkers=newHashMap();
  final DataFormatRegistry dfRegistry=DataFormatRegistry.getInstance();
  dfRegistry.register(DataFormats.READS_FASTQ);
  dfRegistry.register(DataFormats.READS_TFQ);
  dfRegistry.register(DataFormats.GENOME_FASTA);
  dfRegistry.register(DataFormats.ANNOTATION_GFF);
  boolean firstSample=true;
  for (  Sample s : this.design.getSamples()) {
    final Set<DataFormat> cart=newHashSet();
    final Set<DataFormat> cartUsed=newHashSet();
    final Set<DataFormat> cartReUsed=newHashSet();
    final Set<DataFormat> cartGenerated=newHashSet();
    final Set<DataFormat> cartNotGenerated=newHashSet();
    final Set<DataFormat> cartOnlyGenerated=newHashSet();
    cart.add(getReadsDataFormat(s));
    final DataFormat genomeFormat=getGenomeDataFormat(s);
    if (genomeFormat != null) {
      cart.add(genomeFormat);
    }
    final DataFormat annotationFormat=getAnnotationDataFormat(s);
    if (annotationFormat != null) {
      cart.add(annotationFormat);
    }
    for (    Step step : this.steps) {
      if (firstSample)       checkStepInOutFormat(step);
      final Map<DataType,Set<DataFormat>> map=getDataFormatByDataType(step.getInputFormats());
      if (map != null && map.size() > 0)       for (      Map.Entry<DataType,Set<DataFormat>> e : map.entrySet()) {
        int found=0;
        boolean canBeGenerated=false;
        for (        DataFormat df : e.getValue()) {
          if (df.isGenerator())           canBeGenerated=true;
          if (cart.contains(df)) {
            cartUsed.add(df);
            if (df.isChecker())             checkers.put(df,df.getChecker());
            if (cartGenerated.contains(df))             cartReUsed.add(df);
            found++;
          }
 else {
            if (context.getDataFile(df,s).exists()) {
              cart.add(df);
              cartNotGenerated.add(df);
              cartUsed.add(df);
              found++;
            }
          }
        }
        if (found == 0) {
          if (canBeGenerated) {
            cartUsed.add(e.getValue().iterator().next());
          }
 else           throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
        }
        if (found > 1)         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
      }
      if (step.getOutputFormats() != null)       for (      DataFormat df : step.getOutputFormats()) {
        cartGenerated.add(df);
        cart.add(df);
      }
    }
    cartNotGenerated.addAll(cartUsed);
    cartNotGenerated.removeAll(cartGenerated);
    for (    DataFormat df : cartNotGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (!context.getDataFile(df,s).exists()) {
          if (df.isGenerator()) {
            this.steps.add(0,df.getGenerator());
            scanWorkflow();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        }
        checkedDatafile.add(file);
      }
    }
    for (    DataFormat df : cartGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (context.getDataFile(df,s).exists())         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        checkedDatafile.add(file);
      }
    }
    cartOnlyGenerated.addAll(cartGenerated);
    cartOnlyGenerated.removeAll(cartReUsed);
    globalInputDataFormats.put(s.getId(),Collections.unmodifiableSet(cartNotGenerated));
    globalOutputDataFormats.put(s.getId(),Collections.unmodifiableSet(cartGenerated));
    if (firstSample)     firstSample=false;
  }
  runChecker(checkers);
}",0.9730901670705268
141333,"private void scanWorkflow() throws EoulsanException {
  final Context context=this.context;
  final Set<DataFile> checkedDatafile=newHashSet();
  final Map<DataFormat,Checker> checkers=newHashMap();
  final DataFormatRegistry dfRegistry=DataFormatRegistry.getInstance();
  dfRegistry.register(DataFormats.READS_FASTQ);
  dfRegistry.register(DataFormats.READS_TFQ);
  dfRegistry.register(DataFormats.GENOME_FASTA);
  dfRegistry.register(DataFormats.ANNOTATION_GFF);
  boolean firstSample=true;
  for (  Sample s : this.design.getSamples()) {
    final Set<DataFormat> cart=newHashSet();
    final Set<DataFormat> cartUsed=newHashSet();
    final Set<DataFormat> cartReUsed=newHashSet();
    final Set<DataFormat> cartGenerated=newHashSet();
    final Set<DataFormat> cartNotGenerated=newHashSet();
    final Set<DataFormat> cartOnlyGenerated=newHashSet();
    cart.add(getReadsDataFormat(s));
    final DataFormat genomeFormat=getGenomeDataFormat(s);
    if (genomeFormat != null) {
      cart.add(genomeFormat);
    }
    final DataFormat annotationFormat=getAnnotationDataFormat(s);
    if (annotationFormat != null) {
      cart.add(annotationFormat);
    }
    for (    Step step : this.steps) {
      if (firstSample)       checkStepInOutFormat(step);
      final Map<DataType,Set<DataFormat>> map=getDataFormatByDataType(step.getInputFormats());
      if (map != null && map.size() > 0)       for (      Map.Entry<DataType,Set<DataFormat>> e : map.entrySet()) {
        int found=0;
        boolean canBeGenerated=false;
        for (        DataFormat df : e.getValue()) {
          if (df.isGenerator())           canBeGenerated=true;
          if (cart.contains(df)) {
            cartUsed.add(df);
            if (df.isChecker())             checkers.put(df,df.getChecker());
            if (cartGenerated.contains(df))             cartReUsed.add(df);
            found++;
          }
        }
        if (found == 0) {
          if (canBeGenerated) {
            cartUsed.add(e.getValue().iterator().next());
          }
 else           throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
        }
        if (found > 1)         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
      }
      if (step.getOutputFormats() != null)       for (      DataFormat df : step.getOutputFormats()) {
        cartGenerated.add(df);
        cart.add(df);
      }
    }
    cartNotGenerated.addAll(cartUsed);
    cartNotGenerated.removeAll(cartGenerated);
    for (    DataFormat df : cartNotGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (!context.getDataFile(df,s).exists()) {
          if (df.isGenerator()) {
            this.steps.add(0,df.getGenerator());
            scanWorkflow();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        }
        checkedDatafile.add(file);
      }
    }
    for (    DataFormat df : cartGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (context.getDataFile(df,s).exists())         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        checkedDatafile.add(file);
      }
    }
    cartOnlyGenerated.addAll(cartGenerated);
    cartOnlyGenerated.removeAll(cartReUsed);
    globalInputDataFormats.put(s.getId(),Collections.unmodifiableSet(cartNotGenerated));
    globalOutputDataFormats.put(s.getId(),Collections.unmodifiableSet(cartGenerated));
    if (firstSample)     firstSample=false;
  }
  runChecker(checkers);
}","private void scanWorkflow() throws EoulsanException {
  final Context context=this.context;
  final Set<DataFile> checkedDatafile=newHashSet();
  final Map<DataFormat,Checker> checkers=newHashMap();
  final DataFormatRegistry dfRegistry=DataFormatRegistry.getInstance();
  dfRegistry.register(DataFormats.READS_FASTQ);
  dfRegistry.register(DataFormats.READS_TFQ);
  dfRegistry.register(DataFormats.GENOME_FASTA);
  dfRegistry.register(DataFormats.ANNOTATION_GFF);
  boolean firstSample=true;
  for (  Sample s : this.design.getSamples()) {
    final Set<DataFormat> cart=newHashSet();
    final Set<DataFormat> cartUsed=newHashSet();
    final Set<DataFormat> cartReUsed=newHashSet();
    final Set<DataFormat> cartGenerated=newHashSet();
    final Set<DataFormat> cartNotGenerated=newHashSet();
    final Set<DataFormat> cartOnlyGenerated=newHashSet();
    cart.add(getReadsDataFormat(s));
    final DataFormat genomeFormat=getGenomeDataFormat(s);
    if (genomeFormat != null) {
      cart.add(genomeFormat);
    }
    final DataFormat annotationFormat=getAnnotationDataFormat(s);
    if (annotationFormat != null) {
      cart.add(annotationFormat);
    }
    for (    Step step : this.steps) {
      if (firstSample)       checkStepInOutFormat(step);
      final Map<DataType,Set<DataFormat>> map=getDataFormatByDataType(step.getInputFormats());
      if (map != null && map.size() > 0)       for (      Map.Entry<DataType,Set<DataFormat>> e : map.entrySet()) {
        int found=0;
        boolean canBeGenerated=false;
        for (        DataFormat df : e.getValue()) {
          if (df.isGenerator())           canBeGenerated=true;
          if (cart.contains(df)) {
            cartUsed.add(df);
            if (df.isChecker())             checkers.put(df,df.getChecker());
            if (cartGenerated.contains(df))             cartReUsed.add(df);
            found++;
          }
 else {
            if (context.getDataFile(df,s).exists()) {
              cart.add(df);
              cartNotGenerated.add(df);
              cartUsed.add(df);
              found++;
            }
          }
        }
        if (found == 0) {
          if (canBeGenerated) {
            cartUsed.add(e.getValue().iterator().next());
          }
 else           throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
        }
        if (found > 1)         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
      }
      if (step.getOutputFormats() != null)       for (      DataFormat df : step.getOutputFormats()) {
        cartGenerated.add(df);
        cart.add(df);
      }
    }
    cartNotGenerated.addAll(cartUsed);
    cartNotGenerated.removeAll(cartGenerated);
    for (    DataFormat df : cartNotGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (!context.getDataFile(df,s).exists()) {
          if (df.isGenerator()) {
            this.steps.add(0,df.getGenerator());
            scanWorkflow();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        }
        checkedDatafile.add(file);
      }
    }
    for (    DataFormat df : cartGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (context.getDataFile(df,s).exists())         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        checkedDatafile.add(file);
      }
    }
    cartOnlyGenerated.addAll(cartGenerated);
    cartOnlyGenerated.removeAll(cartReUsed);
    globalInputDataFormats.put(s.getId(),Collections.unmodifiableSet(cartNotGenerated));
    globalOutputDataFormats.put(s.getId(),Collections.unmodifiableSet(cartGenerated));
    if (firstSample)     firstSample=false;
  }
  runChecker(checkers);
}",0.9730901670705268
141334,"/** 
 * Wait the end of the job
 * @param secondBetweenChecking number of seconds to wait between 2 checks
 * @return the final state of the job
 */
public String waitForJob(final int secondBetweenChecking){
  if (this.runFlowResult == null) {
    return null;
  }
  final DescribeJobFlowsRequest describeJobFlowsRequest=new DescribeJobFlowsRequest().withJobFlowIds(this.runFlowResult.getJobFlowId());
  String state=null;
  String lastState=null;
  try {
    do {
      Thread.sleep(secondBetweenChecking * 1000);
      final DescribeJobFlowsResult jobFlowsResult=this.mapReduceClient.describeJobFlows(describeJobFlowsRequest);
      final JobFlowDetail detail=jobFlowsResult.getJobFlows().get(0);
      final JobFlowExecutionStatusDetail executionStatusDetail=detail.getExecutionStatusDetail();
      state=executionStatusDetail.getState();
      if (lastState == null || !lastState.equals(state)) {
        LOGGER.info(""String_Node_Str"" + this.runFlowResult.getJobFlowId() + ""String_Node_Str""+ state);
        lastState=state;
      }
    }
 while (state != null && !state.equals(""String_Node_Str"") && !state.equals(""String_Node_Str"") && !state.equals(""String_Node_Str""));
    return state;
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"" + e.getMessage());
  }
  return null;
}","/** 
 * Wait the end of the job
 * @param secondBetweenChecking number of seconds to wait between 2 checks
 * @return the final state of the job
 */
public String waitForJob(final int secondBetweenChecking){
  if (this.runFlowResult == null) {
    return null;
  }
  final DescribeJobFlowsRequest describeJobFlowsRequest=new DescribeJobFlowsRequest().withJobFlowIds(this.runFlowResult.getJobFlowId());
  String state=null;
  String lastState=null;
  int failCount=0;
  try {
    do {
      Thread.sleep(secondBetweenChecking * 1000);
      try {
        final DescribeJobFlowsResult jobFlowsResult=this.mapReduceClient.describeJobFlows(describeJobFlowsRequest);
        final JobFlowDetail detail=jobFlowsResult.getJobFlows().get(0);
        final JobFlowExecutionStatusDetail executionStatusDetail=detail.getExecutionStatusDetail();
        failCount=0;
        state=executionStatusDetail.getState();
      }
 catch (      AmazonClientException ace) {
        failCount++;
        LOGGER.warning(""String_Node_Str"" + ace.getMessage());
        if (failCount >= MAX_FAIL_COUNT) {
          throw ace;
        }
      }
      if (lastState == null || !lastState.equals(state)) {
        LOGGER.info(""String_Node_Str"" + this.runFlowResult.getJobFlowId() + ""String_Node_Str""+ state);
        lastState=state;
      }
    }
 while (state != null && !state.equals(""String_Node_Str"") && !state.equals(""String_Node_Str"") && !state.equals(""String_Node_Str""));
    return state;
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"" + e.getMessage());
  }
  return null;
}",0.6733425414364641
141335,"/** 
 * Wait the end of the job
 * @param secondBetweenChecking number of seconds to wait between 2 checks
 * @return the final state of the job
 */
public String waitForJob(final int secondBetweenChecking){
  if (this.runFlowResult == null) {
    return null;
  }
  final DescribeJobFlowsRequest describeJobFlowsRequest=new DescribeJobFlowsRequest().withJobFlowIds(this.runFlowResult.getJobFlowId());
  String state=null;
  String lastState=null;
  try {
    do {
      Thread.sleep(secondBetweenChecking * 1000);
      final DescribeJobFlowsResult jobFlowsResult=this.mapReduceClient.describeJobFlows(describeJobFlowsRequest);
      final JobFlowDetail detail=jobFlowsResult.getJobFlows().get(0);
      final JobFlowExecutionStatusDetail executionStatusDetail=detail.getExecutionStatusDetail();
      state=executionStatusDetail.getState();
      if (lastState == null || !lastState.equals(state)) {
        LOGGER.info(""String_Node_Str"" + this.runFlowResult.getJobFlowId() + ""String_Node_Str""+ state);
        lastState=state;
      }
    }
 while (state != null && !state.equals(""String_Node_Str"") && !state.equals(""String_Node_Str"") && !state.equals(""String_Node_Str""));
    return state;
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"" + e.getMessage());
  }
  return null;
}","/** 
 * Wait the end of the job
 * @param secondBetweenChecking number of seconds to wait between 2 checks
 * @return the final state of the job
 */
public String waitForJob(final int secondBetweenChecking){
  if (this.runFlowResult == null) {
    return null;
  }
  final DescribeJobFlowsRequest describeJobFlowsRequest=new DescribeJobFlowsRequest().withJobFlowIds(this.runFlowResult.getJobFlowId());
  String state=null;
  String lastState=null;
  int failCount=0;
  try {
    do {
      Thread.sleep(secondBetweenChecking * 1000);
      try {
        final DescribeJobFlowsResult jobFlowsResult=this.mapReduceClient.describeJobFlows(describeJobFlowsRequest);
        final JobFlowDetail detail=jobFlowsResult.getJobFlows().get(0);
        final JobFlowExecutionStatusDetail executionStatusDetail=detail.getExecutionStatusDetail();
        failCount=0;
        state=executionStatusDetail.getState();
      }
 catch (      AmazonClientException ace) {
        failCount++;
        LOGGER.warning(""String_Node_Str"" + ace.getMessage());
        if (failCount >= MAX_FAIL_COUNT) {
          throw ace;
        }
      }
      if (lastState == null || !lastState.equals(state)) {
        LOGGER.info(""String_Node_Str"" + this.runFlowResult.getJobFlowId() + ""String_Node_Str""+ state);
        lastState=state;
      }
    }
 while (state != null && !state.equals(""String_Node_Str"") && !state.equals(""String_Node_Str"") && !state.equals(""String_Node_Str""));
    return state;
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"" + e.getMessage());
  }
  return null;
}",0.6733425414364641
141336,"/** 
 * Create a filter reads job
 * @param basePath bas epath
 * @param sample Sample to filter
 * @return a JobConf object
 * @throws IOException
 */
private Job createJobConf(final Configuration parentConf,final Context context,final Sample sample) throws IOException {
  final Configuration jobConf=new Configuration(parentConf);
  final Path inputPath=new Path(context.getBasePathname(),sample.getSource());
  jobConf.set(CommonHadoop.COUNTER_GROUP_KEY,getCounterGroup());
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + HADOOP_TIMEOUT);
  if (getLengthThreshold() >= 0)   jobConf.set(ReadsFilterMapper.LENGTH_THRESHOLD_KEY,""String_Node_Str"" + getLengthThreshold());
  if (getQualityThreshold() >= 0)   jobConf.set(ReadsFilterMapper.QUALITY_THRESHOLD_KEY,""String_Node_Str"" + getQualityThreshold());
  jobConf.set(ReadsFilterMapper.PAIR_END_KEY,""String_Node_Str"" + isPairend());
  final Path genomeIndex=new Path(context.getDataFile(getMapper().getArchiveFormat(),sample).getSource());
  DistributedCache.addCacheFile(genomeIndex.toUri(),jobConf);
  jobConf.set(ReadsMapperMapper.MAPPER_NAME_KEY,getMapperName());
  if (getMapperThreads() < 0) {
    jobConf.set(ReadsMapperMapper.MAPPER_THREADS_KEY,""String_Node_Str"" + getMapperThreads());
  }
  if (getMapperArguments() != null) {
    jobConf.set(ReadsMapperMapper.MAPPER_ARGS_KEY,getMapperArguments());
  }
  jobConf.set(SAMFilterMapper.MAPPING_QUALITY_THRESOLD_KEY,Integer.toString(getMappingQualityThreshold()));
  jobConf.set(SAMFilterMapper.GENOME_DESC_PATH_KEY,context.getDataFile(DataFormats.GENOME_DESC_TXT,sample).getSource());
  final Job job=new Job(jobConf,""String_Node_Str"" + sample.getName() + ""String_Node_Str""+ sample.getSource()+ ""String_Node_Str"");
  job.setJarByClass(ReadsFilterHadoopStep.class);
  FileInputFormat.addInputPath(job,inputPath);
  if (sample.getSource().endsWith(READS_FASTQ.getDefaultExtention()))   job.setInputFormatClass(FastQFormatNew.class);
  job.setMapperClass(FilterAndMapMapper.class);
  job.setReducerClass(SAMFilterReducer.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  job.setNumReduceTasks(1);
  FileOutputFormat.setOutputPath(job,new Path(context.getDataFile(DataFormats.FILTERED_MAPPER_RESULTS_SAM,sample).getSource()));
  return job;
}","/** 
 * Create a filter reads job
 * @param basePath bas epath
 * @param sample Sample to filter
 * @return a JobConf object
 * @throws IOException
 */
private Job createJobConf(final Configuration parentConf,final Context context,final Sample sample) throws IOException {
  final Configuration jobConf=new Configuration(parentConf);
  final Path inputPath=new Path(context.getBasePathname(),sample.getSource());
  jobConf.set(CommonHadoop.COUNTER_GROUP_KEY,getCounterGroup());
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + HADOOP_TIMEOUT);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + 1);
  if (getLengthThreshold() >= 0)   jobConf.set(ReadsFilterMapper.LENGTH_THRESHOLD_KEY,""String_Node_Str"" + getLengthThreshold());
  if (getQualityThreshold() >= 0)   jobConf.set(ReadsFilterMapper.QUALITY_THRESHOLD_KEY,""String_Node_Str"" + getQualityThreshold());
  jobConf.set(ReadsFilterMapper.PAIR_END_KEY,""String_Node_Str"" + isPairend());
  final Path genomeIndex=new Path(context.getDataFile(getMapper().getArchiveFormat(),sample).getSource());
  DistributedCache.addCacheFile(genomeIndex.toUri(),jobConf);
  jobConf.set(ReadsMapperMapper.MAPPER_NAME_KEY,getMapperName());
  if (getMapperThreads() < 0) {
    jobConf.set(ReadsMapperMapper.MAPPER_THREADS_KEY,""String_Node_Str"" + getMapperThreads());
  }
  if (getMapperArguments() != null) {
    jobConf.set(ReadsMapperMapper.MAPPER_ARGS_KEY,getMapperArguments());
  }
  jobConf.set(SAMFilterMapper.MAPPING_QUALITY_THRESOLD_KEY,Integer.toString(getMappingQualityThreshold()));
  jobConf.set(SAMFilterMapper.GENOME_DESC_PATH_KEY,context.getDataFile(DataFormats.GENOME_DESC_TXT,sample).getSource());
  final Job job=new Job(jobConf,""String_Node_Str"" + sample.getName() + ""String_Node_Str""+ sample.getSource()+ ""String_Node_Str"");
  job.setJarByClass(ReadsFilterHadoopStep.class);
  FileInputFormat.addInputPath(job,inputPath);
  if (sample.getSource().endsWith(READS_FASTQ.getDefaultExtention()))   job.setInputFormatClass(FastQFormatNew.class);
  job.setMapperClass(FilterAndMapMapper.class);
  job.setReducerClass(SAMFilterReducer.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  job.setNumReduceTasks(1);
  FileOutputFormat.setOutputPath(job,new Path(context.getDataFile(DataFormats.FILTERED_MAPPER_RESULTS_SAM,sample).getSource()));
  return job;
}",0.9878945092952875
141337,"/** 
 * Create a filter reads job
 * @param basePath bas epath
 * @param sample Sample to filter
 * @return a JobConf object
 * @throws IOException
 */
private Job createJobConf(final Configuration parentConf,final Context context,final Sample sample) throws IOException {
  final Configuration jobConf=new Configuration(parentConf);
  final Path inputPath=new Path(context.getBasePathname(),sample.getSource());
  jobConf.set(CommonHadoop.COUNTER_GROUP_KEY,getCounterGroup());
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + HADOOP_TIMEOUT);
  if (getLengthThreshold() >= 0)   jobConf.set(ReadsFilterMapper.LENGTH_THRESHOLD_KEY,""String_Node_Str"" + getLengthThreshold());
  if (getQualityThreshold() >= 0)   jobConf.set(ReadsFilterMapper.QUALITY_THRESHOLD_KEY,""String_Node_Str"" + getQualityThreshold());
  jobConf.set(ReadsFilterMapper.PAIR_END_KEY,""String_Node_Str"" + isPairend());
  final Path genomeIndex=new Path(context.getDataFile(getMapper().getArchiveFormat(),sample).getSource());
  DistributedCache.addCacheFile(genomeIndex.toUri(),jobConf);
  jobConf.set(ReadsMapperMapper.MAPPER_NAME_KEY,getMapperName());
  if (getMapperThreads() < 0) {
    jobConf.set(ReadsMapperMapper.MAPPER_THREADS_KEY,""String_Node_Str"" + getMapperThreads());
  }
  if (getMapperArguments() != null) {
    jobConf.set(ReadsMapperMapper.MAPPER_ARGS_KEY,getMapperArguments());
  }
  jobConf.set(SAMFilterMapper.MAPPING_QUALITY_THRESOLD_KEY,Integer.toString(getMappingQualityThreshold()));
  jobConf.set(SAMFilterMapper.GENOME_DESC_PATH_KEY,context.getDataFile(DataFormats.GENOME_DESC_TXT,sample).getSource());
  final Job job=new Job(jobConf,""String_Node_Str"" + sample.getName() + ""String_Node_Str""+ sample.getSource()+ ""String_Node_Str"");
  job.setJarByClass(ReadsFilterHadoopStep.class);
  FileInputFormat.addInputPath(job,inputPath);
  if (sample.getSource().endsWith(READS_FASTQ.getDefaultExtention()))   job.setInputFormatClass(FastQFormatNew.class);
  job.setMapperClass(FilterAndMapMapper.class);
  job.setReducerClass(SAMFilterReducer.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  job.setNumReduceTasks(1);
  FileOutputFormat.setOutputPath(job,new Path(context.getDataFile(DataFormats.FILTERED_MAPPER_RESULTS_SAM,sample).getSource()));
  return job;
}","/** 
 * Create a filter reads job
 * @param basePath bas epath
 * @param sample Sample to filter
 * @return a JobConf object
 * @throws IOException
 */
private Job createJobConf(final Configuration parentConf,final Context context,final Sample sample) throws IOException {
  final Configuration jobConf=new Configuration(parentConf);
  final Path inputPath=new Path(context.getBasePathname(),sample.getSource());
  jobConf.set(CommonHadoop.COUNTER_GROUP_KEY,getCounterGroup());
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + HADOOP_TIMEOUT);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + 1);
  if (getLengthThreshold() >= 0)   jobConf.set(ReadsFilterMapper.LENGTH_THRESHOLD_KEY,""String_Node_Str"" + getLengthThreshold());
  if (getQualityThreshold() >= 0)   jobConf.set(ReadsFilterMapper.QUALITY_THRESHOLD_KEY,""String_Node_Str"" + getQualityThreshold());
  jobConf.set(ReadsFilterMapper.PAIR_END_KEY,""String_Node_Str"" + isPairend());
  final Path genomeIndex=new Path(context.getDataFile(getMapper().getArchiveFormat(),sample).getSource());
  DistributedCache.addCacheFile(genomeIndex.toUri(),jobConf);
  jobConf.set(ReadsMapperMapper.MAPPER_NAME_KEY,getMapperName());
  if (getMapperThreads() < 0) {
    jobConf.set(ReadsMapperMapper.MAPPER_THREADS_KEY,""String_Node_Str"" + getMapperThreads());
  }
  if (getMapperArguments() != null) {
    jobConf.set(ReadsMapperMapper.MAPPER_ARGS_KEY,getMapperArguments());
  }
  jobConf.set(SAMFilterMapper.MAPPING_QUALITY_THRESOLD_KEY,Integer.toString(getMappingQualityThreshold()));
  jobConf.set(SAMFilterMapper.GENOME_DESC_PATH_KEY,context.getDataFile(DataFormats.GENOME_DESC_TXT,sample).getSource());
  final Job job=new Job(jobConf,""String_Node_Str"" + sample.getName() + ""String_Node_Str""+ sample.getSource()+ ""String_Node_Str"");
  job.setJarByClass(ReadsFilterHadoopStep.class);
  FileInputFormat.addInputPath(job,inputPath);
  if (sample.getSource().endsWith(READS_FASTQ.getDefaultExtention()))   job.setInputFormatClass(FastQFormatNew.class);
  job.setMapperClass(FilterAndMapMapper.class);
  job.setReducerClass(SAMFilterReducer.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  job.setNumReduceTasks(1);
  FileOutputFormat.setOutputPath(job,new Path(context.getDataFile(DataFormats.FILTERED_MAPPER_RESULTS_SAM,sample).getSource()));
  return job;
}",0.9878945092952875
141338,"/** 
 * Create the JobConf object for a sample
 * @param basePath base path of data
 * @param sample sample to process
 * @return a new JobConf object
 * @throws IOException
 */
private Job createJobConf(final Configuration parentConf,final Context context,final Sample sample) throws IOException {
  final Configuration jobConf=new Configuration(parentConf);
  final Path inputPath=new Path(context.getDataFilename(DataFormats.FILTERED_READS_TFQ,sample));
  final Path genomeIndex=new Path(context.getDataFile(getMapper().getArchiveFormat(),sample).getSource());
  DistributedCache.addCacheFile(genomeIndex.toUri(),jobConf);
  jobConf.set(ReadsMapperMapper.MAPPER_NAME_KEY,getMapperName());
  jobConf.set(ReadsMapperMapper.PAIR_END_KEY,Boolean.FALSE.toString());
  if (getMapperThreads() < 0) {
    jobConf.set(ReadsMapperMapper.MAPPER_THREADS_KEY,""String_Node_Str"" + getMapperThreads());
  }
  if (getMapperArguments() != null) {
    jobConf.set(ReadsMapperMapper.MAPPER_ARGS_KEY,getMapperArguments());
  }
  jobConf.set(CommonHadoop.COUNTER_GROUP_KEY,COUNTER_GROUP);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + HADOOP_TIMEOUT);
  final Job job=new Job(jobConf,""String_Node_Str"" + getMapperName() + ""String_Node_Str""+ sample.getName()+ ""String_Node_Str""+ inputPath.getName()+ ""String_Node_Str"");
  job.setJarByClass(ReadsMapperHadoopStep.class);
  FileInputFormat.addInputPath(job,inputPath);
  if (sample.getSource().endsWith(READS_FASTQ.getDefaultExtention()))   job.setInputFormatClass(FastQFormatNew.class);
  job.setMapperClass(ReadsMapperMapper.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  FileOutputFormat.setOutputPath(job,new Path(context.getDataFile(MAPPER_RESULTS_SAM,sample).getSource()));
  return job;
}","/** 
 * Create the JobConf object for a sample
 * @param basePath base path of data
 * @param sample sample to process
 * @return a new JobConf object
 * @throws IOException
 */
private Job createJobConf(final Configuration parentConf,final Context context,final Sample sample) throws IOException {
  final Configuration jobConf=new Configuration(parentConf);
  final Path inputPath=new Path(context.getDataFilename(DataFormats.FILTERED_READS_TFQ,sample));
  final Path genomeIndex=new Path(context.getDataFile(getMapper().getArchiveFormat(),sample).getSource());
  DistributedCache.addCacheFile(genomeIndex.toUri(),jobConf);
  jobConf.set(ReadsMapperMapper.MAPPER_NAME_KEY,getMapperName());
  jobConf.set(ReadsMapperMapper.PAIR_END_KEY,Boolean.FALSE.toString());
  if (getMapperThreads() < 0) {
    jobConf.set(ReadsMapperMapper.MAPPER_THREADS_KEY,""String_Node_Str"" + getMapperThreads());
  }
  if (getMapperArguments() != null) {
    jobConf.set(ReadsMapperMapper.MAPPER_ARGS_KEY,getMapperArguments());
  }
  jobConf.set(CommonHadoop.COUNTER_GROUP_KEY,COUNTER_GROUP);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + HADOOP_TIMEOUT);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + 1);
  final Job job=new Job(jobConf,""String_Node_Str"" + getMapperName() + ""String_Node_Str""+ sample.getName()+ ""String_Node_Str""+ inputPath.getName()+ ""String_Node_Str"");
  job.setJarByClass(ReadsMapperHadoopStep.class);
  FileInputFormat.addInputPath(job,inputPath);
  if (sample.getSource().endsWith(READS_FASTQ.getDefaultExtention()))   job.setInputFormatClass(FastQFormatNew.class);
  job.setMapperClass(ReadsMapperMapper.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  FileOutputFormat.setOutputPath(job,new Path(context.getDataFile(MAPPER_RESULTS_SAM,sample).getSource()));
  return job;
}",0.9844097995545658
141339,"/** 
 * Create the JobConf object for a sample
 * @param basePath base path of data
 * @param sample sample to process
 * @return a new JobConf object
 * @throws IOException
 */
private Job createJobConf(final Configuration parentConf,final Context context,final Sample sample) throws IOException {
  final Configuration jobConf=new Configuration(parentConf);
  final Path inputPath=new Path(context.getDataFilename(DataFormats.FILTERED_READS_TFQ,sample));
  final Path genomeIndex=new Path(context.getDataFile(getMapper().getArchiveFormat(),sample).getSource());
  DistributedCache.addCacheFile(genomeIndex.toUri(),jobConf);
  jobConf.set(ReadsMapperMapper.MAPPER_NAME_KEY,getMapperName());
  jobConf.set(ReadsMapperMapper.PAIR_END_KEY,Boolean.FALSE.toString());
  if (getMapperThreads() < 0) {
    jobConf.set(ReadsMapperMapper.MAPPER_THREADS_KEY,""String_Node_Str"" + getMapperThreads());
  }
  if (getMapperArguments() != null) {
    jobConf.set(ReadsMapperMapper.MAPPER_ARGS_KEY,getMapperArguments());
  }
  jobConf.set(CommonHadoop.COUNTER_GROUP_KEY,COUNTER_GROUP);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + HADOOP_TIMEOUT);
  final Job job=new Job(jobConf,""String_Node_Str"" + getMapperName() + ""String_Node_Str""+ sample.getName()+ ""String_Node_Str""+ inputPath.getName()+ ""String_Node_Str"");
  job.setJarByClass(ReadsMapperHadoopStep.class);
  FileInputFormat.addInputPath(job,inputPath);
  if (sample.getSource().endsWith(READS_FASTQ.getDefaultExtention()))   job.setInputFormatClass(FastQFormatNew.class);
  job.setMapperClass(ReadsMapperMapper.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  FileOutputFormat.setOutputPath(job,new Path(context.getDataFile(MAPPER_RESULTS_SAM,sample).getSource()));
  return job;
}","/** 
 * Create the JobConf object for a sample
 * @param basePath base path of data
 * @param sample sample to process
 * @return a new JobConf object
 * @throws IOException
 */
private Job createJobConf(final Configuration parentConf,final Context context,final Sample sample) throws IOException {
  final Configuration jobConf=new Configuration(parentConf);
  final Path inputPath=new Path(context.getDataFilename(DataFormats.FILTERED_READS_TFQ,sample));
  final Path genomeIndex=new Path(context.getDataFile(getMapper().getArchiveFormat(),sample).getSource());
  DistributedCache.addCacheFile(genomeIndex.toUri(),jobConf);
  jobConf.set(ReadsMapperMapper.MAPPER_NAME_KEY,getMapperName());
  jobConf.set(ReadsMapperMapper.PAIR_END_KEY,Boolean.FALSE.toString());
  if (getMapperThreads() < 0) {
    jobConf.set(ReadsMapperMapper.MAPPER_THREADS_KEY,""String_Node_Str"" + getMapperThreads());
  }
  if (getMapperArguments() != null) {
    jobConf.set(ReadsMapperMapper.MAPPER_ARGS_KEY,getMapperArguments());
  }
  jobConf.set(CommonHadoop.COUNTER_GROUP_KEY,COUNTER_GROUP);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + HADOOP_TIMEOUT);
  jobConf.set(""String_Node_Str"",""String_Node_Str"" + 1);
  final Job job=new Job(jobConf,""String_Node_Str"" + getMapperName() + ""String_Node_Str""+ sample.getName()+ ""String_Node_Str""+ inputPath.getName()+ ""String_Node_Str"");
  job.setJarByClass(ReadsMapperHadoopStep.class);
  FileInputFormat.addInputPath(job,inputPath);
  if (sample.getSource().endsWith(READS_FASTQ.getDefaultExtention()))   job.setInputFormatClass(FastQFormatNew.class);
  job.setMapperClass(ReadsMapperMapper.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  FileOutputFormat.setOutputPath(job,new Path(context.getDataFile(MAPPER_RESULTS_SAM,sample).getSource()));
  return job;
}",0.9844097995545658
141340,"@Override public void action(String[] arguments){
  try {
    initLog();
    final Settings settings=new Settings();
    final String instanceType=MEM_INSTANCE;
    final int instanceCount=3;
    final String genome=""String_Node_Str"";
    final String dir=BASE_DIR + genome + ""String_Node_Str"";
    final String designFile=dir + ""String_Node_Str"";
    final String mapper=""String_Node_Str"";
    final String paramFile=dir + ""String_Node_Str"" + mapper+ ""String_Node_Str"";
    final String desc=genome + ""String_Node_Str"" + mapper;
    exec(settings,instanceType,instanceCount,paramFile,designFile,desc);
    LOGGER.info(""String_Node_Str"" + new Date() + ""String_Node_Str"");
  }
 catch (  IOException e) {
    LOGGER.severe(""String_Node_Str"" + e.getMessage());
  }
catch (  EoulsanException e) {
    LOGGER.severe(""String_Node_Str"" + e.getMessage());
  }
}","@Override public void action(String[] arguments){
  try {
    initLog();
    final Settings settings=new Settings();
    final String instanceType=MEM_INSTANCE;
    final int instanceCount=3;
    final String genome=""String_Node_Str"";
    final String dir=BASE_DIR + genome + ""String_Node_Str"";
    final String designFile=dir + ""String_Node_Str"";
    final String mapper=""String_Node_Str"";
    final String paramFile=dir + ""String_Node_Str"" + genome+ ""String_Node_Str""+ mapper+ ""String_Node_Str"";
    final String desc=genome + ""String_Node_Str"" + mapper;
    exec(settings,instanceType,instanceCount,paramFile,designFile,desc);
    LOGGER.info(""String_Node_Str"" + new Date() + ""String_Node_Str"");
  }
 catch (  IOException e) {
    LOGGER.severe(""String_Node_Str"" + e.getMessage());
  }
catch (  EoulsanException e) {
    LOGGER.severe(""String_Node_Str"" + e.getMessage());
  }
}",0.9844200807847664
141341,"/** 
 * Main method.
 * @param args command line arguments
 * @throws IOException if an error occurs
 * @throws EoulsanException if an error occurs
 */
public static void main(String[] args) throws IOException, EoulsanException {
}","/** 
 * Main method.
 * @param args command line arguments
 */
public static void main(final String[] args){
  new BenchmarkAction().action(args);
}",0.6174142480211082
141342,"private static void exec(final Settings settings,final String instanceType,final int nInstances,final String paramPath,String designPath,final String jobDescription){
  LOGGER.info(""String_Node_Str"");
  if (false) {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  final long startTime=System.currentTimeMillis();
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(HADOOP_VERSION);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(nInstances);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(instanceType);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(END_POINT);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(LOG_PATH);
  final List<String> eoulsanArgsList=Lists.newArrayList();
  eoulsanArgsList.add(ExecJarHadoopAction.ACTION_NAME);
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(jobDescription);
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(sb.toString());
  eoulsanArgsList.add(paramPath);
  eoulsanArgsList.add(designPath);
  eoulsanArgsList.add(""String_Node_Str"");
  final String[] eoulsanArgs=eoulsanArgsList.toArray(new String[0]);
  final AWSMapReduceBuilder builder=new AWSMapReduceBuilder();
  builder.withJobFlowName(jobDescription);
  LOGGER.info(""String_Node_Str"" + jobDescription);
  builder.withAWSAccessKey(settings.getAWSAccessKey()).withAWSsecretKey(settings.getAWSSecretKey());
  LOGGER.info(""String_Node_Str"" + settings.getAWSAccessKey());
  LOGGER.info(""String_Node_Str"" + settings.getAWSSecretKey());
  builder.withEndpoint(END_POINT);
  LOGGER.info(""String_Node_Str"" + END_POINT);
  builder.withJarLocation(JAR_LOCATION).withJarArguments(eoulsanArgs);
  LOGGER.info(""String_Node_Str"" + JAR_LOCATION);
  LOGGER.info(""String_Node_Str"" + Arrays.toString(eoulsanArgs));
  builder.withMasterInstanceType(instanceType).withSlavesInstanceType(instanceType).withInstancesNumber(nInstances);
  LOGGER.info(""String_Node_Str"" + instanceType);
  LOGGER.info(""String_Node_Str"" + nInstances);
  builder.withHadoopVersion(HADOOP_VERSION);
  LOGGER.info(""String_Node_Str"" + HADOOP_VERSION);
  builder.withLogPathname(LOG_PATH);
  LOGGER.info(""String_Node_Str"" + LOG_PATH);
  final AWSMapReduceJob job=builder.create();
  showCountDown(COUNTDOWN_START);
  LOGGER.info(""String_Node_Str"");
  final String jobFlowId=job.runJob();
  LOGGER.info(""String_Node_Str"" + jobFlowId);
  job.waitForJob(SECONDS_WAIT_BETWEEN_CHECKS);
  final long endTime=System.currentTimeMillis();
  LOGGER.info(""String_Node_Str"" + jobFlowId + ""String_Node_Str""+ (endTime - startTime)+ ""String_Node_Str"");
}","private static void exec(final Settings settings,final String instanceType,final int nInstances,final String paramPath,String designPath,final String jobDescription){
  LOGGER.info(""String_Node_Str"");
  if (false) {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  final long startTime=System.currentTimeMillis();
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(HADOOP_VERSION);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(nInstances);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(instanceType);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(END_POINT);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(LOG_PATH);
  final List<String> eoulsanArgsList=Lists.newArrayList();
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(jobDescription);
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(sb.toString());
  eoulsanArgsList.add(paramPath);
  eoulsanArgsList.add(designPath);
  eoulsanArgsList.add(""String_Node_Str"");
  final String[] eoulsanArgs=eoulsanArgsList.toArray(new String[0]);
  final AWSMapReduceBuilder builder=new AWSMapReduceBuilder();
  builder.withJobFlowName(jobDescription);
  LOGGER.info(""String_Node_Str"" + jobDescription);
  builder.withAWSAccessKey(settings.getAWSAccessKey()).withAWSSecretKey(settings.getAWSSecretKey());
  LOGGER.info(""String_Node_Str"" + settings.getAWSAccessKey());
  LOGGER.info(""String_Node_Str"" + settings.getAWSSecretKey());
  builder.withEndpoint(END_POINT);
  LOGGER.info(""String_Node_Str"" + END_POINT);
  builder.withJarLocation(JAR_LOCATION).withJarArguments(eoulsanArgs);
  LOGGER.info(""String_Node_Str"" + JAR_LOCATION);
  LOGGER.info(""String_Node_Str"" + Arrays.toString(eoulsanArgs));
  builder.withMasterInstanceType(instanceType).withSlavesInstanceType(instanceType).withInstancesNumber(nInstances);
  LOGGER.info(""String_Node_Str"" + instanceType);
  LOGGER.info(""String_Node_Str"" + nInstances);
  builder.withHadoopVersion(HADOOP_VERSION);
  LOGGER.info(""String_Node_Str"" + HADOOP_VERSION);
  builder.withLogPathname(LOG_PATH);
  LOGGER.info(""String_Node_Str"" + LOG_PATH);
  final AWSMapReduceJob job=builder.create();
  showCountDown(COUNTDOWN_START);
  LOGGER.info(""String_Node_Str"");
  final String jobFlowId=job.runJob();
  LOGGER.info(""String_Node_Str"" + jobFlowId);
  job.waitForJob(SECONDS_WAIT_BETWEEN_CHECKS);
  final long endTime=System.currentTimeMillis();
  LOGGER.info(""String_Node_Str"" + jobFlowId + ""String_Node_Str""+ (endTime - startTime)+ ""String_Node_Str"");
}",0.9907063197026024
141343,"@Override public StepResult execute(final Design design,final Context context){
  final long startTime=System.currentTimeMillis();
  final Settings settings=EoulsanRuntime.getSettings();
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(this.hadoopVersion);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.nInstances);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.instanceType);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.endpoint);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.logPathname);
  final List<String> eoulsanArgsList=Lists.newArrayList();
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(context.getJobDescription());
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(sb.toString());
  eoulsanArgsList.add(context.getParameterPathname());
  eoulsanArgsList.add(context.getDesignPathname());
  eoulsanArgsList.add(""String_Node_Str"");
  final String[] eoulsanArgs=eoulsanArgsList.toArray(new String[0]);
  final AWSMapReduceBuilder builder=new AWSMapReduceBuilder();
  builder.withJobFlowName(context.getJobDescription());
  builder.withAWSAccessKey(settings.getAWSAccessKey()).withAWSsecretKey(settings.getAWSSecretKey());
  builder.withEndpoint(this.endpoint);
  builder.withJarLocation(context.getJarPathname()).withJarArguments(eoulsanArgs);
  builder.withMasterInstanceType(this.instanceType).withSlavesInstanceType(this.instanceType).withInstancesNumber(this.nInstances);
  builder.withHadoopVersion(this.hadoopVersion);
  builder.withLogPathname(this.logPathname);
  final AWSMapReduceJob job=builder.create();
  showCountDown(COUNTDOWN_START);
  LOGGER.info(""String_Node_Str"");
  final String jobFlowId=job.runJob();
  LOGGER.info(""String_Node_Str"" + jobFlowId);
  if (this.waitJob) {
    job.waitForJob(SECONDS_WAIT_BETWEEN_CHECKS);
    return new StepResult(context,startTime,""String_Node_Str"" + jobFlowId);
  }
  return new StepResult(context,startTime,""String_Node_Str"" + jobFlowId);
}","@Override public StepResult execute(final Design design,final Context context){
  final long startTime=System.currentTimeMillis();
  final Settings settings=EoulsanRuntime.getSettings();
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(this.hadoopVersion);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.nInstances);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.instanceType);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.endpoint);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.logPathname);
  final List<String> eoulsanArgsList=Lists.newArrayList();
  eoulsanArgsList.add(ExecJarHadoopAction.ACTION_NAME);
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(context.getJobDescription());
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(sb.toString());
  eoulsanArgsList.add(context.getParameterPathname());
  eoulsanArgsList.add(context.getDesignPathname());
  eoulsanArgsList.add(""String_Node_Str"");
  final String[] eoulsanArgs=eoulsanArgsList.toArray(new String[0]);
  final AWSMapReduceBuilder builder=new AWSMapReduceBuilder();
  builder.withJobFlowName(context.getJobDescription());
  builder.withAWSAccessKey(settings.getAWSAccessKey()).withAWSSecretKey(settings.getAWSSecretKey());
  builder.withEndpoint(this.endpoint);
  builder.withJarLocation(context.getJarPathname()).withJarArguments(eoulsanArgs);
  builder.withMasterInstanceType(this.instanceType).withSlavesInstanceType(this.instanceType).withInstancesNumber(this.nInstances);
  builder.withHadoopVersion(this.hadoopVersion);
  builder.withLogPathname(this.logPathname);
  final AWSMapReduceJob job=builder.create();
  showCountDown(COUNTDOWN_START);
  LOGGER.info(""String_Node_Str"");
  final String jobFlowId=job.runJob();
  LOGGER.info(""String_Node_Str"" + jobFlowId);
  if (this.waitJob) {
    job.waitForJob(SECONDS_WAIT_BETWEEN_CHECKS);
    return new StepResult(context,startTime,""String_Node_Str"" + jobFlowId);
  }
  return new StepResult(context,startTime,""String_Node_Str"" + jobFlowId);
}",0.9884686346863468
141344,"/** 
 * Run the job.
 * @return a the JobFlowId of the job
 */
public String runJob(){
  final AWSCredentials credentials=new BasicAWSCredentials(this.AWSAccessKey,this.AWSSecretKey);
  this.mapReduceClient=new AmazonElasticMapReduceClient(credentials);
  mapReduceClient.setEndpoint(this.endpoint);
  this.runFlowResult=mapReduceClient.runJobFlow(runFlowRequest);
  return this.runFlowResult.getJobFlowId();
}","/** 
 * Run the job.
 * @return a the JobFlowId of the job
 */
public String runJob(){
  final AWSCredentials credentials=new BasicAWSCredentials(this.AWSAccessKey,this.AWSSecretKey);
  this.mapReduceClient=new AmazonElasticMapReduceClient(credentials);
  mapReduceClient.setEndpoint(this.endpoint);
  this.runFlowResult=mapReduceClient.runJobFlow(this.runFlowRequest);
  return this.runFlowResult.getJobFlowId();
}",0.993939393939394
141345,"@Override public void action(String[] arguments){
  try {
    initLog();
    final Settings settings=new Settings();
    final String instanceType=MEM_INSTANCE;
    final int instanceCount=3;
    final String genome=""String_Node_Str"";
    final String dir=BASE_DIR + genome + ""String_Node_Str"";
    final String designFile=dir + ""String_Node_Str"";
    final String mapper=""String_Node_Str"";
    final String paramFile=dir + ""String_Node_Str"" + mapper+ ""String_Node_Str"";
    final String desc=genome + ""String_Node_Str"" + mapper;
    exec(settings,instanceType,instanceCount,paramFile,designFile,desc);
    LOGGER.info(""String_Node_Str"" + new Date() + ""String_Node_Str"");
  }
 catch (  IOException e) {
    LOGGER.severe(""String_Node_Str"" + e.getMessage());
  }
catch (  EoulsanException e) {
    LOGGER.severe(""String_Node_Str"" + e.getMessage());
  }
}","@Override public void action(String[] arguments){
  try {
    initLog();
    final Settings settings=new Settings();
    final String instanceType=MEM_INSTANCE;
    final int instanceCount=3;
    final String genome=""String_Node_Str"";
    final String dir=BASE_DIR + genome + ""String_Node_Str"";
    final String designFile=dir + ""String_Node_Str"";
    final String mapper=""String_Node_Str"";
    final String paramFile=dir + ""String_Node_Str"" + genome+ ""String_Node_Str""+ mapper+ ""String_Node_Str"";
    final String desc=genome + ""String_Node_Str"" + mapper;
    exec(settings,instanceType,instanceCount,paramFile,designFile,desc);
    LOGGER.info(""String_Node_Str"" + new Date() + ""String_Node_Str"");
  }
 catch (  IOException e) {
    LOGGER.severe(""String_Node_Str"" + e.getMessage());
  }
catch (  EoulsanException e) {
    LOGGER.severe(""String_Node_Str"" + e.getMessage());
  }
}",0.9844200807847664
141346,"/** 
 * Main method.
 * @param args command line arguments
 * @throws IOException if an error occurs
 * @throws EoulsanException if an error occurs
 */
public static void main(String[] args) throws IOException, EoulsanException {
}","/** 
 * Main method.
 * @param args command line arguments
 */
public static void main(final String[] args){
  new BenchmarkAction().action(args);
}",0.6174142480211082
141347,"private static void exec(final Settings settings,final String instanceType,final int nInstances,final String paramPath,String designPath,final String jobDescription){
  LOGGER.info(""String_Node_Str"");
  if (false) {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  final long startTime=System.currentTimeMillis();
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(HADOOP_VERSION);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(nInstances);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(instanceType);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(END_POINT);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(LOG_PATH);
  final List<String> eoulsanArgsList=Lists.newArrayList();
  eoulsanArgsList.add(ExecJarHadoopAction.ACTION_NAME);
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(jobDescription);
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(sb.toString());
  eoulsanArgsList.add(paramPath);
  eoulsanArgsList.add(designPath);
  eoulsanArgsList.add(""String_Node_Str"");
  final String[] eoulsanArgs=eoulsanArgsList.toArray(new String[0]);
  final AWSMapReduceBuilder builder=new AWSMapReduceBuilder();
  builder.withJobFlowName(jobDescription);
  LOGGER.info(""String_Node_Str"" + jobDescription);
  builder.withAWSAccessKey(settings.getAWSAccessKey()).withAWSsecretKey(settings.getAWSSecretKey());
  LOGGER.info(""String_Node_Str"" + settings.getAWSAccessKey());
  LOGGER.info(""String_Node_Str"" + settings.getAWSSecretKey());
  builder.withEndpoint(END_POINT);
  LOGGER.info(""String_Node_Str"" + END_POINT);
  builder.withJarLocation(JAR_LOCATION).withJarArguments(eoulsanArgs);
  LOGGER.info(""String_Node_Str"" + JAR_LOCATION);
  LOGGER.info(""String_Node_Str"" + Arrays.toString(eoulsanArgs));
  builder.withMasterInstanceType(instanceType).withSlavesInstanceType(instanceType).withInstancesNumber(nInstances);
  LOGGER.info(""String_Node_Str"" + instanceType);
  LOGGER.info(""String_Node_Str"" + nInstances);
  builder.withHadoopVersion(HADOOP_VERSION);
  LOGGER.info(""String_Node_Str"" + HADOOP_VERSION);
  builder.withLogPathname(LOG_PATH);
  LOGGER.info(""String_Node_Str"" + LOG_PATH);
  final AWSMapReduceJob job=builder.create();
  showCountDown(COUNTDOWN_START);
  LOGGER.info(""String_Node_Str"");
  final String jobFlowId=job.runJob();
  LOGGER.info(""String_Node_Str"" + jobFlowId);
  job.waitForJob(SECONDS_WAIT_BETWEEN_CHECKS);
  final long endTime=System.currentTimeMillis();
  LOGGER.info(""String_Node_Str"" + jobFlowId + ""String_Node_Str""+ (endTime - startTime)+ ""String_Node_Str"");
}","private static void exec(final Settings settings,final String instanceType,final int nInstances,final String paramPath,String designPath,final String jobDescription){
  LOGGER.info(""String_Node_Str"");
  if (false) {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  final long startTime=System.currentTimeMillis();
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(HADOOP_VERSION);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(nInstances);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(instanceType);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(END_POINT);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(LOG_PATH);
  final List<String> eoulsanArgsList=Lists.newArrayList();
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(jobDescription);
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(sb.toString());
  eoulsanArgsList.add(paramPath);
  eoulsanArgsList.add(designPath);
  eoulsanArgsList.add(""String_Node_Str"");
  final String[] eoulsanArgs=eoulsanArgsList.toArray(new String[0]);
  final AWSMapReduceBuilder builder=new AWSMapReduceBuilder();
  builder.withJobFlowName(jobDescription);
  LOGGER.info(""String_Node_Str"" + jobDescription);
  builder.withAWSAccessKey(settings.getAWSAccessKey()).withAWSSecretKey(settings.getAWSSecretKey());
  LOGGER.info(""String_Node_Str"" + settings.getAWSAccessKey());
  LOGGER.info(""String_Node_Str"" + settings.getAWSSecretKey());
  builder.withEndpoint(END_POINT);
  LOGGER.info(""String_Node_Str"" + END_POINT);
  builder.withJarLocation(JAR_LOCATION).withJarArguments(eoulsanArgs);
  LOGGER.info(""String_Node_Str"" + JAR_LOCATION);
  LOGGER.info(""String_Node_Str"" + Arrays.toString(eoulsanArgs));
  builder.withMasterInstanceType(instanceType).withSlavesInstanceType(instanceType).withInstancesNumber(nInstances);
  LOGGER.info(""String_Node_Str"" + instanceType);
  LOGGER.info(""String_Node_Str"" + nInstances);
  builder.withHadoopVersion(HADOOP_VERSION);
  LOGGER.info(""String_Node_Str"" + HADOOP_VERSION);
  builder.withLogPathname(LOG_PATH);
  LOGGER.info(""String_Node_Str"" + LOG_PATH);
  final AWSMapReduceJob job=builder.create();
  showCountDown(COUNTDOWN_START);
  LOGGER.info(""String_Node_Str"");
  final String jobFlowId=job.runJob();
  LOGGER.info(""String_Node_Str"" + jobFlowId);
  job.waitForJob(SECONDS_WAIT_BETWEEN_CHECKS);
  final long endTime=System.currentTimeMillis();
  LOGGER.info(""String_Node_Str"" + jobFlowId + ""String_Node_Str""+ (endTime - startTime)+ ""String_Node_Str"");
}",0.9907063197026024
141348,"@Override public StepResult execute(final Design design,final Context context){
  final long startTime=System.currentTimeMillis();
  final Settings settings=EoulsanRuntime.getSettings();
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(this.hadoopVersion);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.nInstances);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.instanceType);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.endpoint);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.logPathname);
  final List<String> eoulsanArgsList=Lists.newArrayList();
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(context.getJobDescription());
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(sb.toString());
  eoulsanArgsList.add(context.getParameterPathname());
  eoulsanArgsList.add(context.getDesignPathname());
  eoulsanArgsList.add(""String_Node_Str"");
  final String[] eoulsanArgs=eoulsanArgsList.toArray(new String[0]);
  final AWSMapReduceBuilder builder=new AWSMapReduceBuilder();
  builder.withJobFlowName(context.getJobDescription());
  builder.withAWSAccessKey(settings.getAWSAccessKey()).withAWSsecretKey(settings.getAWSSecretKey());
  builder.withEndpoint(this.endpoint);
  builder.withJarLocation(context.getJarPathname()).withJarArguments(eoulsanArgs);
  builder.withMasterInstanceType(this.instanceType).withSlavesInstanceType(this.instanceType).withInstancesNumber(this.nInstances);
  builder.withHadoopVersion(this.hadoopVersion);
  builder.withLogPathname(this.logPathname);
  final AWSMapReduceJob job=builder.create();
  showCountDown(COUNTDOWN_START);
  LOGGER.info(""String_Node_Str"");
  final String jobFlowId=job.runJob();
  LOGGER.info(""String_Node_Str"" + jobFlowId);
  if (this.waitJob) {
    job.waitForJob(SECONDS_WAIT_BETWEEN_CHECKS);
    return new StepResult(context,startTime,""String_Node_Str"" + jobFlowId);
  }
  return new StepResult(context,startTime,""String_Node_Str"" + jobFlowId);
}","@Override public StepResult execute(final Design design,final Context context){
  final long startTime=System.currentTimeMillis();
  final Settings settings=EoulsanRuntime.getSettings();
  final StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(this.hadoopVersion);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.nInstances);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.instanceType);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.endpoint);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.logPathname);
  final List<String> eoulsanArgsList=Lists.newArrayList();
  eoulsanArgsList.add(ExecJarHadoopAction.ACTION_NAME);
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(context.getJobDescription());
  eoulsanArgsList.add(""String_Node_Str"");
  eoulsanArgsList.add(sb.toString());
  eoulsanArgsList.add(context.getParameterPathname());
  eoulsanArgsList.add(context.getDesignPathname());
  eoulsanArgsList.add(""String_Node_Str"");
  final String[] eoulsanArgs=eoulsanArgsList.toArray(new String[0]);
  final AWSMapReduceBuilder builder=new AWSMapReduceBuilder();
  builder.withJobFlowName(context.getJobDescription());
  builder.withAWSAccessKey(settings.getAWSAccessKey()).withAWSSecretKey(settings.getAWSSecretKey());
  builder.withEndpoint(this.endpoint);
  builder.withJarLocation(context.getJarPathname()).withJarArguments(eoulsanArgs);
  builder.withMasterInstanceType(this.instanceType).withSlavesInstanceType(this.instanceType).withInstancesNumber(this.nInstances);
  builder.withHadoopVersion(this.hadoopVersion);
  builder.withLogPathname(this.logPathname);
  final AWSMapReduceJob job=builder.create();
  showCountDown(COUNTDOWN_START);
  LOGGER.info(""String_Node_Str"");
  final String jobFlowId=job.runJob();
  LOGGER.info(""String_Node_Str"" + jobFlowId);
  if (this.waitJob) {
    job.waitForJob(SECONDS_WAIT_BETWEEN_CHECKS);
    return new StepResult(context,startTime,""String_Node_Str"" + jobFlowId);
  }
  return new StepResult(context,startTime,""String_Node_Str"" + jobFlowId);
}",0.9884686346863468
141349,"/** 
 * Run the job.
 * @return a the JobFlowId of the job
 */
public String runJob(){
  final AWSCredentials credentials=new BasicAWSCredentials(this.AWSAccessKey,this.AWSSecretKey);
  this.mapReduceClient=new AmazonElasticMapReduceClient(credentials);
  mapReduceClient.setEndpoint(this.endpoint);
  this.runFlowResult=mapReduceClient.runJobFlow(runFlowRequest);
  return this.runFlowResult.getJobFlowId();
}","/** 
 * Run the job.
 * @return a the JobFlowId of the job
 */
public String runJob(){
  final AWSCredentials credentials=new BasicAWSCredentials(this.AWSAccessKey,this.AWSSecretKey);
  this.mapReduceClient=new AmazonElasticMapReduceClient(credentials);
  mapReduceClient.setEndpoint(this.endpoint);
  this.runFlowResult=mapReduceClient.runJobFlow(this.runFlowRequest);
  return this.runFlowResult.getJobFlowId();
}",0.993939393939394
141350,"/** 
 * Create options for command line
 * @return an Options object
 */
@SuppressWarnings(""String_Node_Str"") private static Options makeOptions(){
  final Options options=new Options();
  options.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").withLongOpt(""String_Node_Str"").create('d'));
  return options;
}","/** 
 * Create options for command line
 * @return an Options object
 */
@SuppressWarnings(""String_Node_Str"") private static Options makeOptions(){
  final Options options=new Options();
  options.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").withLongOpt(""String_Node_Str"").create('d'));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").withLongOpt(""String_Node_Str"").create('e'));
  return options;
}",0.8265895953757225
141351,"/** 
 * Main method. This method is called by MainHadoop.
 * @param args command line arguments
 */
public static void main(final String[] args){
  final Options options=makeOptions();
  final CommandLineParser parser=new GnuParser();
  String jobDescription=null;
  String jobEnvironment=null;
  int argsOptions=0;
  try {
    final CommandLine line=parser.parse(options,args,true);
    if (line.hasOption(""String_Node_Str"")) {
      help(options);
    }
    if (line.hasOption(""String_Node_Str"")) {
      jobDescription=line.getOptionValue(""String_Node_Str"");
      argsOptions+=2;
    }
    if (line.hasOption(""String_Node_Str"")) {
      jobEnvironment=line.getOptionValue(""String_Node_Str"");
      argsOptions+=2;
    }
  }
 catch (  ParseException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
  if (args.length != argsOptions + 4) {
    help(options);
  }
  if (!""String_Node_Str"".equals(args[argsOptions])) {
    Common.showErrorMessageAndExit(""String_Node_Str"" + args[argsOptions]);
  }
  final String paramPathname=args[argsOptions + 1];
  final String designPathname=args[argsOptions + 2];
  final String destPathname=args[argsOptions + 3];
  run(paramPathname,designPathname,destPathname,jobDescription,jobEnvironment);
}","/** 
 * Main method. This method is called by MainHadoop.
 * @param args command line arguments
 */
public static void main(final String[] args){
  final Options options=makeOptions();
  final CommandLineParser parser=new GnuParser();
  if (args.length == 0 || !""String_Node_Str"".equals(args[0])) {
    help(options);
  }
  final String[] arguments=StringUtils.arrayWithoutFirstElement(args);
  String jobDescription=null;
  String jobEnvironment=null;
  int argsOptions=0;
  try {
    final CommandLine line=parser.parse(options,arguments,true);
    if (line.hasOption(""String_Node_Str"")) {
      help(options);
    }
    if (line.hasOption(""String_Node_Str"")) {
      jobDescription=line.getOptionValue(""String_Node_Str"");
      argsOptions+=2;
    }
    if (line.hasOption(""String_Node_Str"")) {
      jobEnvironment=line.getOptionValue(""String_Node_Str"");
      argsOptions+=2;
    }
  }
 catch (  ParseException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
  if (arguments.length != argsOptions + 3) {
    help(options);
  }
  final String paramPathname=arguments[argsOptions];
  final String designPathname=arguments[argsOptions + 1];
  final String destPathname=arguments[argsOptions + 2];
  run(paramPathname,designPathname,destPathname,jobDescription,jobEnvironment);
}",0.8450704225352113
141352,"/** 
 * Get an array without the first element of the input array.
 * @param array input array
 * @param elementsToRemove number of the first elements to remove
 * @return an array without the first element of the input array
 */
public static final String[] arrayWithoutFirstsElement(final String[] array,final int elementsToRemove){
  if (array == null)   return null;
  if (elementsToRemove < 1 || elementsToRemove > array.length)   return new String[0];
  final int newLen=array.length - elementsToRemove;
  final String[] result=new String[newLen];
  System.arraycopy(array,1,result,0,newLen);
  return result;
}","/** 
 * Get an array without the first element of the input array.
 * @param array input array
 * @param elementsToRemove number of the first elements to remove
 * @return an array without the first element of the input array
 */
public static final String[] arrayWithoutFirstsElement(final String[] array,final int elementsToRemove){
  if (array == null)   return null;
  if (elementsToRemove < 1 || elementsToRemove > array.length)   return new String[0];
  final int newLen=array.length - elementsToRemove;
  final String[] result=new String[newLen];
  System.arraycopy(array,elementsToRemove,result,0,newLen);
  return result;
}",0.9863891112890312
141353,"/** 
 * Create options for command line
 * @return an Options object
 */
@SuppressWarnings(""String_Node_Str"") private static Options makeOptions(){
  final Options options=new Options();
  options.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").withLongOpt(""String_Node_Str"").create('d'));
  return options;
}","/** 
 * Create options for command line
 * @return an Options object
 */
@SuppressWarnings(""String_Node_Str"") private static Options makeOptions(){
  final Options options=new Options();
  options.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").withLongOpt(""String_Node_Str"").create('d'));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").withLongOpt(""String_Node_Str"").create('e'));
  return options;
}",0.8265895953757225
141354,"/** 
 * Main method. This method is called by MainHadoop.
 * @param args command line arguments
 */
public static void main(final String[] args){
  final Options options=makeOptions();
  final CommandLineParser parser=new GnuParser();
  String jobDescription=null;
  String jobEnvironment=null;
  int argsOptions=0;
  try {
    final CommandLine line=parser.parse(options,args,true);
    if (line.hasOption(""String_Node_Str"")) {
      help(options);
    }
    if (line.hasOption(""String_Node_Str"")) {
      jobDescription=line.getOptionValue(""String_Node_Str"");
      argsOptions+=2;
    }
    if (line.hasOption(""String_Node_Str"")) {
      jobEnvironment=line.getOptionValue(""String_Node_Str"");
      argsOptions+=2;
    }
  }
 catch (  ParseException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
  if (args.length != argsOptions + 4) {
    help(options);
  }
  if (!""String_Node_Str"".equals(args[argsOptions])) {
    Common.showErrorMessageAndExit(""String_Node_Str"" + args[argsOptions]);
  }
  final String paramPathname=args[argsOptions + 1];
  final String designPathname=args[argsOptions + 2];
  final String destPathname=args[argsOptions + 3];
  run(paramPathname,designPathname,destPathname,jobDescription,jobEnvironment);
}","/** 
 * Main method. This method is called by MainHadoop.
 * @param args command line arguments
 */
public static void main(final String[] args){
  final Options options=makeOptions();
  final CommandLineParser parser=new GnuParser();
  if (args.length == 0 || !""String_Node_Str"".equals(args[0])) {
    help(options);
  }
  final String[] arguments=StringUtils.arrayWithoutFirstElement(args);
  String jobDescription=null;
  String jobEnvironment=null;
  int argsOptions=0;
  try {
    final CommandLine line=parser.parse(options,arguments,true);
    if (line.hasOption(""String_Node_Str"")) {
      help(options);
    }
    if (line.hasOption(""String_Node_Str"")) {
      jobDescription=line.getOptionValue(""String_Node_Str"");
      argsOptions+=2;
    }
    if (line.hasOption(""String_Node_Str"")) {
      jobEnvironment=line.getOptionValue(""String_Node_Str"");
      argsOptions+=2;
    }
  }
 catch (  ParseException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
  if (arguments.length != argsOptions + 3) {
    help(options);
  }
  final String paramPathname=arguments[argsOptions];
  final String designPathname=arguments[argsOptions + 1];
  final String destPathname=arguments[argsOptions + 2];
  run(paramPathname,designPathname,destPathname,jobDescription,jobEnvironment);
}",0.8450704225352113
141355,"@Override public void action(final String[] arguments){
  final Options options=makeOptions();
  final CommandLineParser parser=new GnuParser();
  String jobDescription=null;
  int argsOptions=0;
  try {
    final CommandLine line=parser.parse(options,arguments,true);
    if (line.hasOption(""String_Node_Str"")) {
      help(options);
    }
    if (line.hasOption(""String_Node_Str"")) {
      jobDescription=line.getOptionValue(""String_Node_Str"");
      argsOptions+=2;
    }
  }
 catch (  ParseException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
  if (arguments.length != argsOptions + 2) {
    help(options);
  }
  final File paramFile=new File(arguments[argsOptions]);
  final File designFile=new File(arguments[argsOptions + 1]);
  final String hdfsPath=arguments[argsOptions + 2];
  run(paramFile,designFile,hdfsPath,jobDescription);
}","@Override public void action(final String[] arguments){
  final Options options=makeOptions();
  final CommandLineParser parser=new GnuParser();
  String jobDescription=null;
  int argsOptions=0;
  try {
    final CommandLine line=parser.parse(options,arguments,true);
    if (line.hasOption(""String_Node_Str"")) {
      help(options);
    }
    if (line.hasOption(""String_Node_Str"")) {
      jobDescription=line.getOptionValue(""String_Node_Str"");
      argsOptions+=2;
    }
  }
 catch (  ParseException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
  if (arguments.length != argsOptions + 3) {
    help(options);
  }
  final File paramFile=new File(arguments[argsOptions]);
  final File designFile=new File(arguments[argsOptions + 1]);
  final String hdfsPath=arguments[argsOptions + 2];
  run(paramFile,designFile,hdfsPath,jobDescription);
}",0.9988452655889144
141356,"/** 
 * Run Eoulsan in hadoop mode.
 * @param paramFile parameter file
 * @param designFile design file
 * @param hdfsPath path of data on hadoop file system
 * @param jobDescription job description
 */
private void run(final File paramFile,final File designFile,final String hdfsPath,final String jobDescription){
  checkNotNull(paramFile,""String_Node_Str"");
  checkNotNull(designFile,""String_Node_Str"");
  checkNotNull(hdfsPath,""String_Node_Str"");
  try {
    File repackagedJarFile=HadoopJarRepackager.repack();
    LOGGER.info(""String_Node_Str"");
    final StringBuilder sb=new StringBuilder();
    sb.append(HADOOP_CMD);
    sb.append(repackagedJarFile.getCanonicalPath());
    sb.append(""String_Node_Str"");
    if (jobDescription != null) {
      sb.append(""String_Node_Str"");
      sb.append(jobDescription.trim());
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    sb.append(paramFile);
    sb.append(""String_Node_Str"");
    sb.append(designFile);
    sb.append(""String_Node_Str"");
    sb.append(hdfsPath);
    ProcessUtils.execThreadOutput(sb.toString());
  }
 catch (  IOException e) {
    Common.errorExit(e,""String_Node_Str"" + Globals.APP_NAME_LOWER_CASE + ""String_Node_Str""+ e.getMessage());
  }
}","/** 
 * Run Eoulsan in hadoop mode.
 * @param paramFile parameter file
 * @param designFile design file
 * @param hdfsPath path of data on hadoop file system
 * @param jobDescription job description
 */
private void run(final File paramFile,final File designFile,final String hdfsPath,final String jobDescription){
  checkNotNull(paramFile,""String_Node_Str"");
  checkNotNull(designFile,""String_Node_Str"");
  checkNotNull(hdfsPath,""String_Node_Str"");
  try {
    File repackagedJarFile=HadoopJarRepackager.repack();
    LOGGER.info(""String_Node_Str"");
    final List<String> argsList=Lists.newArrayList();
    argsList.add(""String_Node_Str"");
    argsList.add(""String_Node_Str"");
    argsList.add(repackagedJarFile.getCanonicalPath());
    argsList.add(""String_Node_Str"");
    if (jobDescription != null) {
      argsList.add(""String_Node_Str"");
      argsList.add(jobDescription.trim());
    }
    argsList.add(""String_Node_Str"");
    argsList.add(""String_Node_Str"");
    argsList.add(paramFile.toString());
    argsList.add(designFile.toString());
    argsList.add(hdfsPath);
    final String[] args=argsList.toArray(new String[0]);
    ProcessUtils.execThreadOutput(args);
  }
 catch (  IOException e) {
    Common.errorExit(e,""String_Node_Str"" + Globals.APP_NAME_LOWER_CASE + ""String_Node_Str""+ e.getMessage());
  }
}",0.68984375
141357,"/** 
 * Execute a command and write the content of the standard output and error to System.out and System.err.
 * @param cmd Command to execute
 * @throws IOException if an error occurs while executing the command
 */
public static void execThreadOutput(final String cmd) throws IOException {
  logger.fine(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ cmd);
  final long startTime=System.currentTimeMillis();
  Process p=Runtime.getRuntime().exec(cmd);
  final BufferedReader stdr=new BufferedReader(new InputStreamReader(p.getInputStream()));
  final BufferedReader errr=new BufferedReader(new InputStreamReader(p.getErrorStream()));
  new Thread(new ProcessThreadOutput(stdr,System.out)).run();
  new Thread(new ProcessThreadOutput(errr,System.err)).run();
  logEndTime(p,cmd,startTime);
}","/** 
 * Execute a command and write the content of the standard output and error to System.out and System.err.
 * @param cmd array with the command to execute
 * @throws IOException if an error occurs while executing the command
 */
public static void execThreadOutput(final String[] cmd) throws IOException {
  logger.fine(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ cmd);
  final long startTime=System.currentTimeMillis();
  Process p=Runtime.getRuntime().exec(cmd);
  final BufferedReader stdr=new BufferedReader(new InputStreamReader(p.getInputStream()));
  final BufferedReader errr=new BufferedReader(new InputStreamReader(p.getErrorStream()));
  new Thread(new ProcessThreadOutput(stdr,System.out)).run();
  new Thread(new ProcessThreadOutput(errr,System.err)).run();
  logEndTime(p,Joiner.on(' ').join(cmd),startTime);
}",0.972520908004779
141358,"@Override public void action(final String[] arguments){
  final Options options=makeOptions();
  final CommandLineParser parser=new GnuParser();
  String jobDescription=null;
  int argsOptions=0;
  try {
    final CommandLine line=parser.parse(options,arguments,true);
    if (line.hasOption(""String_Node_Str"")) {
      help(options);
    }
    if (line.hasOption(""String_Node_Str"")) {
      jobDescription=line.getOptionValue(""String_Node_Str"");
      argsOptions+=2;
    }
  }
 catch (  ParseException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
  if (arguments.length != argsOptions + 2) {
    help(options);
  }
  final File paramFile=new File(arguments[argsOptions]);
  final File designFile=new File(arguments[argsOptions + 1]);
  final String hdfsPath=arguments[argsOptions + 2];
  run(paramFile,designFile,hdfsPath,jobDescription);
}","@Override public void action(final String[] arguments){
  final Options options=makeOptions();
  final CommandLineParser parser=new GnuParser();
  String jobDescription=null;
  int argsOptions=0;
  try {
    final CommandLine line=parser.parse(options,arguments,true);
    if (line.hasOption(""String_Node_Str"")) {
      help(options);
    }
    if (line.hasOption(""String_Node_Str"")) {
      jobDescription=line.getOptionValue(""String_Node_Str"");
      argsOptions+=2;
    }
  }
 catch (  ParseException e) {
    Common.errorExit(e,""String_Node_Str"" + e.getMessage());
  }
  if (arguments.length != argsOptions + 3) {
    help(options);
  }
  final File paramFile=new File(arguments[argsOptions]);
  final File designFile=new File(arguments[argsOptions + 1]);
  final String hdfsPath=arguments[argsOptions + 2];
  run(paramFile,designFile,hdfsPath,jobDescription);
}",0.9988452655889144
141359,"/** 
 * Run Eoulsan in hadoop mode.
 * @param paramFile parameter file
 * @param designFile design file
 * @param hdfsPath path of data on hadoop file system
 * @param jobDescription job description
 */
private void run(final File paramFile,final File designFile,final String hdfsPath,final String jobDescription){
  checkNotNull(paramFile,""String_Node_Str"");
  checkNotNull(designFile,""String_Node_Str"");
  checkNotNull(hdfsPath,""String_Node_Str"");
  try {
    File repackagedJarFile=HadoopJarRepackager.repack();
    LOGGER.info(""String_Node_Str"");
    final StringBuilder sb=new StringBuilder();
    sb.append(HADOOP_CMD);
    sb.append(repackagedJarFile.getCanonicalPath());
    sb.append(""String_Node_Str"");
    if (jobDescription != null) {
      sb.append(""String_Node_Str"");
      sb.append(jobDescription.trim());
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    sb.append(paramFile);
    sb.append(""String_Node_Str"");
    sb.append(designFile);
    sb.append(""String_Node_Str"");
    sb.append(hdfsPath);
    ProcessUtils.execThreadOutput(sb.toString());
  }
 catch (  IOException e) {
    Common.errorExit(e,""String_Node_Str"" + Globals.APP_NAME_LOWER_CASE + ""String_Node_Str""+ e.getMessage());
  }
}","/** 
 * Run Eoulsan in hadoop mode.
 * @param paramFile parameter file
 * @param designFile design file
 * @param hdfsPath path of data on hadoop file system
 * @param jobDescription job description
 */
private void run(final File paramFile,final File designFile,final String hdfsPath,final String jobDescription){
  checkNotNull(paramFile,""String_Node_Str"");
  checkNotNull(designFile,""String_Node_Str"");
  checkNotNull(hdfsPath,""String_Node_Str"");
  try {
    File repackagedJarFile=HadoopJarRepackager.repack();
    LOGGER.info(""String_Node_Str"");
    final List<String> argsList=Lists.newArrayList();
    argsList.add(""String_Node_Str"");
    argsList.add(""String_Node_Str"");
    argsList.add(repackagedJarFile.getCanonicalPath());
    argsList.add(""String_Node_Str"");
    if (jobDescription != null) {
      argsList.add(""String_Node_Str"");
      argsList.add(jobDescription.trim());
    }
    argsList.add(""String_Node_Str"");
    argsList.add(""String_Node_Str"");
    argsList.add(paramFile.toString());
    argsList.add(designFile.toString());
    argsList.add(hdfsPath);
    final String[] args=argsList.toArray(new String[0]);
    ProcessUtils.execThreadOutput(args);
  }
 catch (  IOException e) {
    Common.errorExit(e,""String_Node_Str"" + Globals.APP_NAME_LOWER_CASE + ""String_Node_Str""+ e.getMessage());
  }
}",0.68984375
141360,"/** 
 * Execute a command and write the content of the standard output and error to System.out and System.err.
 * @param cmd Command to execute
 * @throws IOException if an error occurs while executing the command
 */
public static void execThreadOutput(final String cmd) throws IOException {
  logger.fine(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ cmd);
  final long startTime=System.currentTimeMillis();
  Process p=Runtime.getRuntime().exec(cmd);
  final BufferedReader stdr=new BufferedReader(new InputStreamReader(p.getInputStream()));
  final BufferedReader errr=new BufferedReader(new InputStreamReader(p.getErrorStream()));
  new Thread(new ProcessThreadOutput(stdr,System.out)).run();
  new Thread(new ProcessThreadOutput(errr,System.err)).run();
  logEndTime(p,cmd,startTime);
}","/** 
 * Execute a command and write the content of the standard output and error to System.out and System.err.
 * @param cmd array with the command to execute
 * @throws IOException if an error occurs while executing the command
 */
public static void execThreadOutput(final String[] cmd) throws IOException {
  logger.fine(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ cmd);
  final long startTime=System.currentTimeMillis();
  Process p=Runtime.getRuntime().exec(cmd);
  final BufferedReader stdr=new BufferedReader(new InputStreamReader(p.getInputStream()));
  final BufferedReader errr=new BufferedReader(new InputStreamReader(p.getErrorStream()));
  new Thread(new ProcessThreadOutput(stdr,System.out)).run();
  new Thread(new ProcessThreadOutput(errr,System.err)).run();
  logEndTime(p,Joiner.on(' ').join(cmd),startTime);
}",0.972520908004779
141361,"/** 
 * Get an array without the first element of the input array.
 * @param array input array
 * @param elementsToRemove number of the first elements to remove
 * @return an array without the first element of the input array
 */
public static final String[] arrayWithoutFirstsElement(final String[] array,final int elementsToRemove){
  if (array == null)   return null;
  if (elementsToRemove < 1 || elementsToRemove > array.length)   return new String[0];
  final int newLen=array.length - elementsToRemove;
  final String[] result=new String[newLen];
  System.arraycopy(array,1,result,0,newLen);
  return result;
}","/** 
 * Get an array without the first element of the input array.
 * @param array input array
 * @param elementsToRemove number of the first elements to remove
 * @return an array without the first element of the input array
 */
public static final String[] arrayWithoutFirstsElement(final String[] array,final int elementsToRemove){
  if (array == null)   return null;
  if (elementsToRemove < 1 || elementsToRemove > array.length)   return new String[0];
  final int newLen=array.length - elementsToRemove;
  final String[] result=new String[newLen];
  System.arraycopy(array,elementsToRemove,result,0,newLen);
  return result;
}",0.9863891112890312
141362,"private DataFormat getGenomeDataFormat(final Sample s) throws EoulsanException {
  if (!s.getMetadata().isGenomeField())   return null;
  final String genomeSource=s.getMetadata().getGenome();
  if (genomeSource == null || ""String_Node_Str"".equals(genomeSource))   throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str"");
  DataFormat readsDF;
  try {
    readsDF=new DataFile(genomeSource).getMetaData().getDataFormat();
    if (readsDF == null)     throw new EoulsanException(""String_Node_Str"" + s.getSource());
    return readsDF;
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + s.getSource());
  }
}","private DataFormat getGenomeDataFormat(final Sample s) throws EoulsanException {
  if (!s.getMetadata().isGenomeField())   return null;
  final String genomeSource=s.getMetadata().getGenome();
  if (genomeSource == null || ""String_Node_Str"".equals(genomeSource))   throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str"");
  final DataFile genomeFile=new DataFile(genomeSource);
  if (!genomeFile.exists())   return null;
  DataFormat genomeFormat;
  try {
    genomeFormat=genomeFile.getMetaData().getDataFormat();
    if (genomeFormat == null)     throw new EoulsanException(""String_Node_Str"" + s.getSource());
    return genomeFormat;
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + s.getSource());
  }
}",0.8191414496833216
141363,"private void scanWorkflow() throws EoulsanException {
  final Context context=this.context;
  final Set<DataFile> checkedDatafile=new HashSet<DataFile>();
  final Map<DataFormat,Checker> checkers=new HashMap<DataFormat,Checker>();
  final DataFormatRegistry dfRegistry=DataFormatRegistry.getInstance();
  dfRegistry.register(DataFormats.READS_FASTQ);
  dfRegistry.register(DataFormats.READS_TFQ);
  dfRegistry.register(DataFormats.GENOME_FASTA);
  dfRegistry.register(DataFormats.ANNOTATION_GFF);
  boolean firstSample=true;
  for (  Sample s : this.design.getSamples()) {
    final Set<DataFormat> cart=new HashSet<DataFormat>();
    final Set<DataFormat> cartUsed=new HashSet<DataFormat>();
    final Set<DataFormat> cartReUsed=new HashSet<DataFormat>();
    final Set<DataFormat> cartGenerated=new HashSet<DataFormat>();
    final Set<DataFormat> cartNotGenerated=new HashSet<DataFormat>();
    final Set<DataFormat> cartOnlyGenerated=new HashSet<DataFormat>();
    cart.add(getReadsDataFormat(s));
    cart.add(getGenomeDataFormat(s));
    cart.add(getAnnotationDataFormat(s));
    for (    Step step : this.steps) {
      if (firstSample)       checkStepInOutFormat(step);
      final Map<DataType,Set<DataFormat>> map=getDataFormatByDataType(step.getInputFormats());
      if (map != null && map.size() > 0)       for (      Map.Entry<DataType,Set<DataFormat>> e : map.entrySet()) {
        int found=0;
        boolean canBeGenerated=false;
        for (        DataFormat df : e.getValue()) {
          if (df.isGenerator())           canBeGenerated=true;
          if (cart.contains(df)) {
            cartUsed.add(df);
            if (df.isChecker())             checkers.put(df,df.getChecker());
            if (cartGenerated.contains(df))             cartReUsed.add(df);
            found++;
          }
        }
        if (found == 0) {
          if (canBeGenerated) {
            cartUsed.add(e.getValue().iterator().next());
          }
 else           throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
        }
        if (found > 1)         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
      }
      if (step.getOutputFormats() != null)       for (      DataFormat df : step.getOutputFormats()) {
        cartGenerated.add(df);
        cart.add(df);
      }
    }
    cartNotGenerated.addAll(cartUsed);
    cartNotGenerated.removeAll(cartGenerated);
    for (    DataFormat df : cartNotGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (!context.getDataFile(df,s).exists()) {
          if (df.isGenerator()) {
            this.steps.add(0,df.getGenerator());
            scanWorkflow();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        }
        checkedDatafile.add(file);
      }
    }
    for (    DataFormat df : cartGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (context.getDataFile(df,s).exists())         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        checkedDatafile.add(file);
      }
    }
    cartOnlyGenerated.addAll(cartGenerated);
    cartOnlyGenerated.removeAll(cartReUsed);
    globalInputDataFormats.put(s,Collections.unmodifiableSet(cartNotGenerated));
    globalOutputDataFormats.put(s,Collections.unmodifiableSet(cartOnlyGenerated));
    if (firstSample)     firstSample=false;
  }
  runChecker(checkers);
}","private void scanWorkflow() throws EoulsanException {
  final Context context=this.context;
  final Set<DataFile> checkedDatafile=newHashSet();
  final Map<DataFormat,Checker> checkers=newHashMap();
  final DataFormatRegistry dfRegistry=DataFormatRegistry.getInstance();
  dfRegistry.register(DataFormats.READS_FASTQ);
  dfRegistry.register(DataFormats.READS_TFQ);
  dfRegistry.register(DataFormats.GENOME_FASTA);
  dfRegistry.register(DataFormats.ANNOTATION_GFF);
  boolean firstSample=true;
  for (  Sample s : this.design.getSamples()) {
    final Set<DataFormat> cart=newHashSet();
    final Set<DataFormat> cartUsed=newHashSet();
    final Set<DataFormat> cartReUsed=newHashSet();
    final Set<DataFormat> cartGenerated=newHashSet();
    final Set<DataFormat> cartNotGenerated=newHashSet();
    final Set<DataFormat> cartOnlyGenerated=newHashSet();
    cart.add(getReadsDataFormat(s));
    final DataFormat genomeFormat=getGenomeDataFormat(s);
    if (genomeFormat != null) {
      cart.add(genomeFormat);
    }
    final DataFormat annotationFormat=getAnnotationDataFormat(s);
    if (annotationFormat != null) {
      cart.add(annotationFormat);
    }
    for (    Step step : this.steps) {
      if (firstSample)       checkStepInOutFormat(step);
      final Map<DataType,Set<DataFormat>> map=getDataFormatByDataType(step.getInputFormats());
      if (map != null && map.size() > 0)       for (      Map.Entry<DataType,Set<DataFormat>> e : map.entrySet()) {
        int found=0;
        boolean canBeGenerated=false;
        for (        DataFormat df : e.getValue()) {
          if (df.isGenerator())           canBeGenerated=true;
          if (cart.contains(df)) {
            cartUsed.add(df);
            if (df.isChecker())             checkers.put(df,df.getChecker());
            if (cartGenerated.contains(df))             cartReUsed.add(df);
            found++;
          }
        }
        if (found == 0) {
          if (canBeGenerated) {
            cartUsed.add(e.getValue().iterator().next());
          }
 else           throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
        }
        if (found > 1)         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
      }
      if (step.getOutputFormats() != null)       for (      DataFormat df : step.getOutputFormats()) {
        cartGenerated.add(df);
        cart.add(df);
      }
    }
    cartNotGenerated.addAll(cartUsed);
    cartNotGenerated.removeAll(cartGenerated);
    for (    DataFormat df : cartNotGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (!context.getDataFile(df,s).exists()) {
          if (df.isGenerator()) {
            this.steps.add(0,df.getGenerator());
            scanWorkflow();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        }
        checkedDatafile.add(file);
      }
    }
    for (    DataFormat df : cartGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (context.getDataFile(df,s).exists())         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        checkedDatafile.add(file);
      }
    }
    cartOnlyGenerated.addAll(cartGenerated);
    cartOnlyGenerated.removeAll(cartReUsed);
    globalInputDataFormats.put(s,Collections.unmodifiableSet(cartNotGenerated));
    globalOutputDataFormats.put(s,Collections.unmodifiableSet(cartOnlyGenerated));
    if (firstSample)     firstSample=false;
  }
  runChecker(checkers);
}",0.9290648246546228
141364,"private DataFormat getAnnotationDataFormat(final Sample s) throws EoulsanException {
  if (!s.getMetadata().isAnnotationField())   return null;
  final String annotationSource=s.getMetadata().getAnnotation();
  if (annotationSource == null || ""String_Node_Str"".equals(annotationSource))   throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str"");
  DataFormat annotDF;
  try {
    annotDF=new DataFile(annotationSource).getMetaData().getDataFormat();
    if (annotDF == null)     throw new EoulsanException(""String_Node_Str"" + s.getSource());
    return annotDF;
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + s.getSource());
  }
}","private DataFormat getAnnotationDataFormat(final Sample s) throws EoulsanException {
  if (!s.getMetadata().isAnnotationField())   return null;
  final String annotationSource=s.getMetadata().getAnnotation();
  if (annotationSource == null || ""String_Node_Str"".equals(annotationSource))   throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str"");
  final DataFile annotationFile=new DataFile(annotationSource);
  if (!annotationFile.exists()) {
    return null;
  }
  DataFormat annotDF;
  try {
    annotDF=annotationFile.getMetaData().getDataFormat();
    if (annotDF == null)     throw new EoulsanException(""String_Node_Str"" + s.getSource());
    return annotDF;
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + s.getSource());
  }
}",0.8896411645226812
141365,"@Override protected void copy(final Map<DataFile,DataFile> files) throws IOException {
  if (files == null)   throw new NullPointerException(""String_Node_Str"");
  final Set<DataFile> stdCopyFiles=new HashSet<DataFile>();
  final DataProtocol fileProtocol=DataProtocolService.getInstance().getProtocol(""String_Node_Str"");
  for (  Map.Entry<DataFile,DataFile> e : files.entrySet()) {
    final DataFile src=e.getKey();
    final DataFile dest=e.getValue();
    if (e.getKey().getProtocol() == fileProtocol) {
      new DataFormatConverter(src,dest).convert();
      stdCopyFiles.add(src);
    }
  }
  for (  DataFile file : stdCopyFiles)   files.remove(file);
  if (files.size() > 0) {
    final Path jobPath=PathUtils.createTempPath(new Path(getDest().getSource()),""String_Node_Str"",""String_Node_Str"",this.conf);
    DataSourceDistCp distCp=new DataSourceDistCp(this.conf,jobPath);
    distCp.copy(files);
  }
}","@Override protected void copy(final Map<DataFile,DataFile> files) throws IOException {
  if (files == null)   throw new NullPointerException(""String_Node_Str"");
  final Set<DataFile> stdCopyFiles=new HashSet<DataFile>();
  final DataProtocol fileProtocol=DataProtocolService.getInstance().getProtocol(""String_Node_Str"");
  for (  Map.Entry<DataFile,DataFile> e : files.entrySet()) {
    final DataFile src=e.getKey();
    final DataFile dest=e.getValue();
    if (src == null || dest == null) {
      continue;
    }
    if (e.getKey().getProtocol() == fileProtocol) {
      new DataFormatConverter(src,dest).convert();
      stdCopyFiles.add(src);
    }
  }
  for (  DataFile file : stdCopyFiles)   files.remove(file);
  if (files.size() > 0) {
    final Path jobPath=PathUtils.createTempPath(new Path(getDest().getSource()),""String_Node_Str"",""String_Node_Str"",this.conf);
    DataSourceDistCp distCp=new DataSourceDistCp(this.conf,jobPath);
    distCp.copy(files);
  }
}",0.9676048858204992
141366,"@Override protected DataFile getUploadedDataFile(final DataFile file,final int id) throws IOException {
  final DataFile dest=getDest();
  DataFile result=null;
  DataFormat df=file.getMetaData().getDataFormat();
  if (df == DataFormats.READS_FASTQ || df == DataFormats.READS_TFQ)   result=new DataFile(dest,DataFormats.READS_TFQ.getType().getPrefix() + id + DataFormats.READS_TFQ.getDefaultExtention());
  if (df == DataFormats.GENOME_FASTA)   result=new DataFile(dest,DataFormats.GENOME_FASTA.getType().getPrefix() + id + DataFormats.GENOME_FASTA.getDefaultExtention());
  if (df == DataFormats.ANNOTATION_GFF)   result=new DataFile(dest,DataFormats.ANNOTATION_GFF.getType().getPrefix() + id + DataFormats.ANNOTATION_GFF.getDefaultExtention());
  if (result == null)   result=new DataFile(dest,file.getName());
  return result;
}","@Override protected DataFile getUploadedDataFile(final DataFile file,final int id) throws IOException {
  if (file == null || !file.exists())   return null;
  final DataFile dest=getDest();
  DataFile result=null;
  DataFormat df=file.getMetaData().getDataFormat();
  if (df == DataFormats.READS_FASTQ || df == DataFormats.READS_TFQ)   result=new DataFile(dest,DataFormats.READS_TFQ.getType().getPrefix() + id + DataFormats.READS_TFQ.getDefaultExtention());
  if (df == DataFormats.GENOME_FASTA)   result=new DataFile(dest,DataFormats.GENOME_FASTA.getType().getPrefix() + id + DataFormats.GENOME_FASTA.getDefaultExtention());
  if (df == DataFormats.ANNOTATION_GFF)   result=new DataFile(dest,DataFormats.ANNOTATION_GFF.getType().getPrefix() + id + DataFormats.ANNOTATION_GFF.getDefaultExtention());
  if (result == null)   result=new DataFile(dest,file.getName());
  return result;
}",0.8034985422740525
141367,"@Override protected void copy(final Map<DataFile,DataFile> files) throws IOException {
  if (files == null)   throw new NullPointerException(""String_Node_Str"");
  for (  Map.Entry<DataFile,DataFile> e : files.entrySet()) {
    LOGGER.info(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue());
    new DataFormatConverter(e.getKey(),e.getValue()).convert();
  }
}","@Override protected void copy(final Map<DataFile,DataFile> files) throws IOException {
  if (files == null)   throw new NullPointerException(""String_Node_Str"");
  for (  Map.Entry<DataFile,DataFile> e : files.entrySet()) {
    final DataFile src=e.getKey();
    final DataFile dest=e.getValue();
    if (src == null || dest == null) {
      continue;
    }
    LOGGER.info(""String_Node_Str"" + src + ""String_Node_Str""+ dest);
    new DataFormatConverter(src,dest).convert();
  }
}",0.7306791569086651
141368,"@Override protected DataFile getUploadedDataFile(final DataFile file,final int id) throws IOException {
  return new DataFile(getDest(),file.getName());
}","@Override protected DataFile getUploadedDataFile(final DataFile file,final int id) throws IOException {
  final String filename;
  if (file.getName().endsWith(""String_Node_Str"") || file.getName().endsWith(""String_Node_Str"") || file.getName().endsWith(""String_Node_Str"")|| file.getName().endsWith(""String_Node_Str""))   filename=file.getName();
 else   filename=CompressionType.removeCompressionExtension(file.getName()) + CompressionType.BZIP2.getExtension();
  return new DataFile(getDest(),filename);
}",0.4383561643835616
141369,"private Map<DataFile,DataFile> reWriteDesign(final Design design,final Set<DataFile> filesToCopy) throws IOException {
  final Map<DataFile,DataFile> result=new HashMap<DataFile,DataFile>();
  final Map<String,String> genomesMap=new HashMap<String,String>();
  final Map<String,String> annotationsMap=new HashMap<String,String>();
  int genomesCount=0;
  int annotationsCount=0;
  for (  Sample s : design.getSamples()) {
    DataFile sampleOldFile=new DataFile(s.getSource());
    DataFile sampleNewFile=getUploadedDataFile(sampleOldFile,s.getId());
    if (filesToCopy.contains(sampleOldFile)) {
      filesToCopy.remove(sampleOldFile);
      result.put(sampleOldFile,sampleNewFile);
    }
    s.setSource(sampleNewFile.getSource());
    final String genome=s.getMetadata().getGenome();
    if (!genomesMap.containsKey(genome)) {
      genomesCount++;
      DataFile genomeOldFile=new DataFile(genome);
      DataFile genomeNewFile=getUploadedDataFile(genomeOldFile,genomesCount);
      if (filesToCopy.contains(genomeOldFile)) {
        filesToCopy.remove(genomeOldFile);
        result.put(genomeOldFile,genomeNewFile);
      }
      genomesMap.put(genome,genomeNewFile.getSource());
    }
    s.getMetadata().setGenome(genomesMap.get(genome));
    final String annotation=s.getMetadata().getAnnotation();
    if (!annotationsMap.containsKey(annotation)) {
      annotationsCount++;
      DataFile annotationOldFile=new DataFile(annotation);
      DataFile annotationNewFile=getUploadedDataFile(annotationOldFile,annotationsCount);
      if (filesToCopy.contains(annotationOldFile)) {
        filesToCopy.remove(annotationOldFile);
        result.put(annotationOldFile,annotationNewFile);
      }
      annotationsMap.put(annotation,annotationNewFile.getSource());
    }
    s.getMetadata().setAnnotation(annotationsMap.get(annotation));
  }
  for (  DataFile file : filesToCopy)   result.put(file,getUploadedDataFile(file));
  return result;
}","private Map<DataFile,DataFile> reWriteDesign(final Design design,final Set<DataFile> filesToCopy) throws IOException {
  final Map<DataFile,DataFile> result=new HashMap<DataFile,DataFile>();
  final Map<String,String> genomesMap=new HashMap<String,String>();
  final Map<String,String> annotationsMap=new HashMap<String,String>();
  int genomesCount=0;
  int annotationsCount=0;
  for (  Sample s : design.getSamples()) {
    DataFile sampleOldFile=new DataFile(s.getSource());
    DataFile sampleNewFile=getUploadedDataFile(sampleOldFile,s.getId());
    if (filesToCopy.contains(sampleOldFile)) {
      filesToCopy.remove(sampleOldFile);
      result.put(sampleOldFile,sampleNewFile);
    }
    s.setSource(sampleNewFile.getSource());
    final String genome=s.getMetadata().getGenome();
    if (!genomesMap.containsKey(genome)) {
      genomesCount++;
      final DataFile genomeOldFile=new DataFile(genome);
      final DataFile genomeNewFile=getUploadedDataFile(genomeOldFile,genomesCount);
      if (filesToCopy.contains(genomeOldFile)) {
        filesToCopy.remove(genomeOldFile);
        result.put(genomeOldFile,genomeNewFile);
      }
      genomesMap.put(genome,genomeNewFile == null ? ""String_Node_Str"" : genomeNewFile.getSource());
    }
    s.getMetadata().setGenome(genomesMap.get(genome));
    final String annotation=s.getMetadata().getAnnotation();
    if (!annotationsMap.containsKey(annotation)) {
      annotationsCount++;
      final DataFile annotationOldFile=new DataFile(annotation);
      final DataFile annotationNewFile=getUploadedDataFile(annotationOldFile,annotationsCount);
      if (filesToCopy.contains(annotationOldFile)) {
        filesToCopy.remove(annotationOldFile);
        result.put(annotationOldFile,annotationNewFile);
      }
      annotationsMap.put(annotation,annotationNewFile == null ? ""String_Node_Str"" : annotationNewFile.getSource());
    }
    s.getMetadata().setAnnotation(annotationsMap.get(annotation));
  }
  for (  DataFile file : filesToCopy)   result.put(file,getUploadedDataFile(file));
  return result;
}",0.971086739780658
141370,"private DataFormat getGenomeDataFormat(final Sample s) throws EoulsanException {
  if (!s.getMetadata().isGenomeField())   return null;
  final String genomeSource=s.getMetadata().getGenome();
  if (genomeSource == null || ""String_Node_Str"".equals(genomeSource))   throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str"");
  DataFormat readsDF;
  try {
    readsDF=new DataFile(genomeSource).getMetaData().getDataFormat();
    if (readsDF == null)     throw new EoulsanException(""String_Node_Str"" + s.getSource());
    return readsDF;
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + s.getSource());
  }
}","private DataFormat getGenomeDataFormat(final Sample s) throws EoulsanException {
  if (!s.getMetadata().isGenomeField())   return null;
  final String genomeSource=s.getMetadata().getGenome();
  if (genomeSource == null || ""String_Node_Str"".equals(genomeSource))   throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str"");
  final DataFile genomeFile=new DataFile(genomeSource);
  if (!genomeFile.exists())   return null;
  DataFormat genomeFormat;
  try {
    genomeFormat=genomeFile.getMetaData().getDataFormat();
    if (genomeFormat == null)     throw new EoulsanException(""String_Node_Str"" + s.getSource());
    return genomeFormat;
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + s.getSource());
  }
}",0.8191414496833216
141371,"private void scanWorkflow() throws EoulsanException {
  final Context context=this.context;
  final Set<DataFile> checkedDatafile=new HashSet<DataFile>();
  final Map<DataFormat,Checker> checkers=new HashMap<DataFormat,Checker>();
  final DataFormatRegistry dfRegistry=DataFormatRegistry.getInstance();
  dfRegistry.register(DataFormats.READS_FASTQ);
  dfRegistry.register(DataFormats.READS_TFQ);
  dfRegistry.register(DataFormats.GENOME_FASTA);
  dfRegistry.register(DataFormats.ANNOTATION_GFF);
  boolean firstSample=true;
  for (  Sample s : this.design.getSamples()) {
    final Set<DataFormat> cart=new HashSet<DataFormat>();
    final Set<DataFormat> cartUsed=new HashSet<DataFormat>();
    final Set<DataFormat> cartReUsed=new HashSet<DataFormat>();
    final Set<DataFormat> cartGenerated=new HashSet<DataFormat>();
    final Set<DataFormat> cartNotGenerated=new HashSet<DataFormat>();
    final Set<DataFormat> cartOnlyGenerated=new HashSet<DataFormat>();
    cart.add(getReadsDataFormat(s));
    cart.add(getGenomeDataFormat(s));
    cart.add(getAnnotationDataFormat(s));
    for (    Step step : this.steps) {
      if (firstSample)       checkStepInOutFormat(step);
      final Map<DataType,Set<DataFormat>> map=getDataFormatByDataType(step.getInputFormats());
      if (map != null && map.size() > 0)       for (      Map.Entry<DataType,Set<DataFormat>> e : map.entrySet()) {
        int found=0;
        boolean canBeGenerated=false;
        for (        DataFormat df : e.getValue()) {
          if (df.isGenerator())           canBeGenerated=true;
          if (cart.contains(df)) {
            cartUsed.add(df);
            if (df.isChecker())             checkers.put(df,df.getChecker());
            if (cartGenerated.contains(df))             cartReUsed.add(df);
            found++;
          }
        }
        if (found == 0) {
          if (canBeGenerated) {
            cartUsed.add(e.getValue().iterator().next());
          }
 else           throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
        }
        if (found > 1)         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
      }
      if (step.getOutputFormats() != null)       for (      DataFormat df : step.getOutputFormats()) {
        cartGenerated.add(df);
        cart.add(df);
      }
    }
    cartNotGenerated.addAll(cartUsed);
    cartNotGenerated.removeAll(cartGenerated);
    for (    DataFormat df : cartNotGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (!context.getDataFile(df,s).exists()) {
          if (df.isGenerator()) {
            this.steps.add(0,df.getGenerator());
            scanWorkflow();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        }
        checkedDatafile.add(file);
      }
    }
    for (    DataFormat df : cartGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (context.getDataFile(df,s).exists())         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        checkedDatafile.add(file);
      }
    }
    cartOnlyGenerated.addAll(cartGenerated);
    cartOnlyGenerated.removeAll(cartReUsed);
    globalInputDataFormats.put(s,Collections.unmodifiableSet(cartNotGenerated));
    globalOutputDataFormats.put(s,Collections.unmodifiableSet(cartOnlyGenerated));
    if (firstSample)     firstSample=false;
  }
  runChecker(checkers);
}","private void scanWorkflow() throws EoulsanException {
  final Context context=this.context;
  final Set<DataFile> checkedDatafile=newHashSet();
  final Map<DataFormat,Checker> checkers=newHashMap();
  final DataFormatRegistry dfRegistry=DataFormatRegistry.getInstance();
  dfRegistry.register(DataFormats.READS_FASTQ);
  dfRegistry.register(DataFormats.READS_TFQ);
  dfRegistry.register(DataFormats.GENOME_FASTA);
  dfRegistry.register(DataFormats.ANNOTATION_GFF);
  boolean firstSample=true;
  for (  Sample s : this.design.getSamples()) {
    final Set<DataFormat> cart=newHashSet();
    final Set<DataFormat> cartUsed=newHashSet();
    final Set<DataFormat> cartReUsed=newHashSet();
    final Set<DataFormat> cartGenerated=newHashSet();
    final Set<DataFormat> cartNotGenerated=newHashSet();
    final Set<DataFormat> cartOnlyGenerated=newHashSet();
    cart.add(getReadsDataFormat(s));
    final DataFormat genomeFormat=getGenomeDataFormat(s);
    if (genomeFormat != null) {
      cart.add(genomeFormat);
    }
    final DataFormat annotationFormat=getAnnotationDataFormat(s);
    if (annotationFormat != null) {
      cart.add(annotationFormat);
    }
    for (    Step step : this.steps) {
      if (firstSample)       checkStepInOutFormat(step);
      final Map<DataType,Set<DataFormat>> map=getDataFormatByDataType(step.getInputFormats());
      if (map != null && map.size() > 0)       for (      Map.Entry<DataType,Set<DataFormat>> e : map.entrySet()) {
        int found=0;
        boolean canBeGenerated=false;
        for (        DataFormat df : e.getValue()) {
          if (df.isGenerator())           canBeGenerated=true;
          if (cart.contains(df)) {
            cartUsed.add(df);
            if (df.isChecker())             checkers.put(df,df.getChecker());
            if (cartGenerated.contains(df))             cartReUsed.add(df);
            found++;
          }
        }
        if (found == 0) {
          if (canBeGenerated) {
            cartUsed.add(e.getValue().iterator().next());
          }
 else           throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
        }
        if (found > 1)         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ step.getName()+ ""String_Node_Str"");
      }
      if (step.getOutputFormats() != null)       for (      DataFormat df : step.getOutputFormats()) {
        cartGenerated.add(df);
        cart.add(df);
      }
    }
    cartNotGenerated.addAll(cartUsed);
    cartNotGenerated.removeAll(cartGenerated);
    for (    DataFormat df : cartNotGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (!context.getDataFile(df,s).exists()) {
          if (df.isGenerator()) {
            this.steps.add(0,df.getGenerator());
            scanWorkflow();
            return;
          }
          throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        }
        checkedDatafile.add(file);
      }
    }
    for (    DataFormat df : cartGenerated) {
      final DataFile file=context.getDataFile(df,s);
      if (!checkedDatafile.contains(file)) {
        if (context.getDataFile(df,s).exists())         throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str""+ df.getFormatName()+ ""String_Node_Str"");
        checkedDatafile.add(file);
      }
    }
    cartOnlyGenerated.addAll(cartGenerated);
    cartOnlyGenerated.removeAll(cartReUsed);
    globalInputDataFormats.put(s,Collections.unmodifiableSet(cartNotGenerated));
    globalOutputDataFormats.put(s,Collections.unmodifiableSet(cartOnlyGenerated));
    if (firstSample)     firstSample=false;
  }
  runChecker(checkers);
}",0.9290648246546228
141372,"private DataFormat getAnnotationDataFormat(final Sample s) throws EoulsanException {
  if (!s.getMetadata().isAnnotationField())   return null;
  final String annotationSource=s.getMetadata().getAnnotation();
  if (annotationSource == null || ""String_Node_Str"".equals(annotationSource))   throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str"");
  DataFormat annotDF;
  try {
    annotDF=new DataFile(annotationSource).getMetaData().getDataFormat();
    if (annotDF == null)     throw new EoulsanException(""String_Node_Str"" + s.getSource());
    return annotDF;
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + s.getSource());
  }
}","private DataFormat getAnnotationDataFormat(final Sample s) throws EoulsanException {
  if (!s.getMetadata().isAnnotationField())   return null;
  final String annotationSource=s.getMetadata().getAnnotation();
  if (annotationSource == null || ""String_Node_Str"".equals(annotationSource))   throw new EoulsanException(""String_Node_Str"" + s.getId() + ""String_Node_Str"");
  final DataFile annotationFile=new DataFile(annotationSource);
  if (!annotationFile.exists()) {
    return null;
  }
  DataFormat annotDF;
  try {
    annotDF=annotationFile.getMetaData().getDataFormat();
    if (annotDF == null)     throw new EoulsanException(""String_Node_Str"" + s.getSource());
    return annotDF;
  }
 catch (  IOException e) {
    throw new EoulsanException(""String_Node_Str"" + s.getSource());
  }
}",0.8896411645226812
141373,"@Override protected void copy(final Map<DataFile,DataFile> files) throws IOException {
  if (files == null)   throw new NullPointerException(""String_Node_Str"");
  final Set<DataFile> stdCopyFiles=new HashSet<DataFile>();
  final DataProtocol fileProtocol=DataProtocolService.getInstance().getProtocol(""String_Node_Str"");
  for (  Map.Entry<DataFile,DataFile> e : files.entrySet()) {
    final DataFile src=e.getKey();
    final DataFile dest=e.getValue();
    if (e.getKey().getProtocol() == fileProtocol) {
      new DataFormatConverter(src,dest).convert();
      stdCopyFiles.add(src);
    }
  }
  for (  DataFile file : stdCopyFiles)   files.remove(file);
  if (files.size() > 0) {
    final Path jobPath=PathUtils.createTempPath(new Path(getDest().getSource()),""String_Node_Str"",""String_Node_Str"",this.conf);
    DataSourceDistCp distCp=new DataSourceDistCp(this.conf,jobPath);
    distCp.copy(files);
  }
}","@Override protected void copy(final Map<DataFile,DataFile> files) throws IOException {
  if (files == null)   throw new NullPointerException(""String_Node_Str"");
  final Set<DataFile> stdCopyFiles=new HashSet<DataFile>();
  final DataProtocol fileProtocol=DataProtocolService.getInstance().getProtocol(""String_Node_Str"");
  for (  Map.Entry<DataFile,DataFile> e : files.entrySet()) {
    final DataFile src=e.getKey();
    final DataFile dest=e.getValue();
    if (src == null || dest == null) {
      continue;
    }
    if (e.getKey().getProtocol() == fileProtocol) {
      new DataFormatConverter(src,dest).convert();
      stdCopyFiles.add(src);
    }
  }
  for (  DataFile file : stdCopyFiles)   files.remove(file);
  if (files.size() > 0) {
    final Path jobPath=PathUtils.createTempPath(new Path(getDest().getSource()),""String_Node_Str"",""String_Node_Str"",this.conf);
    DataSourceDistCp distCp=new DataSourceDistCp(this.conf,jobPath);
    distCp.copy(files);
  }
}",0.9676048858204992
141374,"@Override protected DataFile getUploadedDataFile(final DataFile file,final int id) throws IOException {
  final DataFile dest=getDest();
  DataFile result=null;
  DataFormat df=file.getMetaData().getDataFormat();
  if (df == DataFormats.READS_FASTQ || df == DataFormats.READS_TFQ)   result=new DataFile(dest,DataFormats.READS_TFQ.getType().getPrefix() + id + DataFormats.READS_TFQ.getDefaultExtention());
  if (df == DataFormats.GENOME_FASTA)   result=new DataFile(dest,DataFormats.GENOME_FASTA.getType().getPrefix() + id + DataFormats.GENOME_FASTA.getDefaultExtention());
  if (df == DataFormats.ANNOTATION_GFF)   result=new DataFile(dest,DataFormats.ANNOTATION_GFF.getType().getPrefix() + id + DataFormats.ANNOTATION_GFF.getDefaultExtention());
  if (result == null)   result=new DataFile(dest,file.getName());
  return result;
}","@Override protected DataFile getUploadedDataFile(final DataFile file,final int id) throws IOException {
  if (file == null || !file.exists())   return null;
  final DataFile dest=getDest();
  DataFile result=null;
  DataFormat df=file.getMetaData().getDataFormat();
  if (df == DataFormats.READS_FASTQ || df == DataFormats.READS_TFQ)   result=new DataFile(dest,DataFormats.READS_TFQ.getType().getPrefix() + id + DataFormats.READS_TFQ.getDefaultExtention());
  if (df == DataFormats.GENOME_FASTA)   result=new DataFile(dest,DataFormats.GENOME_FASTA.getType().getPrefix() + id + DataFormats.GENOME_FASTA.getDefaultExtention());
  if (df == DataFormats.ANNOTATION_GFF)   result=new DataFile(dest,DataFormats.ANNOTATION_GFF.getType().getPrefix() + id + DataFormats.ANNOTATION_GFF.getDefaultExtention());
  if (result == null)   result=new DataFile(dest,file.getName());
  return result;
}",0.8034985422740525
141375,"@Override protected void copy(final Map<DataFile,DataFile> files) throws IOException {
  if (files == null)   throw new NullPointerException(""String_Node_Str"");
  for (  Map.Entry<DataFile,DataFile> e : files.entrySet()) {
    LOGGER.info(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue());
    new DataFormatConverter(e.getKey(),e.getValue()).convert();
  }
}","@Override protected void copy(final Map<DataFile,DataFile> files) throws IOException {
  if (files == null)   throw new NullPointerException(""String_Node_Str"");
  for (  Map.Entry<DataFile,DataFile> e : files.entrySet()) {
    final DataFile src=e.getKey();
    final DataFile dest=e.getValue();
    if (src == null || dest == null) {
      continue;
    }
    LOGGER.info(""String_Node_Str"" + src + ""String_Node_Str""+ dest);
    new DataFormatConverter(src,dest).convert();
  }
}",0.7306791569086651
141376,"@Override protected DataFile getUploadedDataFile(final DataFile file,final int id) throws IOException {
  return new DataFile(getDest(),file.getName());
}","@Override protected DataFile getUploadedDataFile(final DataFile file,final int id) throws IOException {
  final String filename;
  if (file.getName().endsWith(""String_Node_Str"") || file.getName().endsWith(""String_Node_Str"") || file.getName().endsWith(""String_Node_Str"")|| file.getName().endsWith(""String_Node_Str""))   filename=file.getName();
 else   filename=CompressionType.removeCompressionExtension(file.getName()) + CompressionType.BZIP2.getExtension();
  return new DataFile(getDest(),filename);
}",0.4383561643835616
141377,"private Map<DataFile,DataFile> reWriteDesign(final Design design,final Set<DataFile> filesToCopy) throws IOException {
  final Map<DataFile,DataFile> result=new HashMap<DataFile,DataFile>();
  final Map<String,String> genomesMap=new HashMap<String,String>();
  final Map<String,String> annotationsMap=new HashMap<String,String>();
  int genomesCount=0;
  int annotationsCount=0;
  for (  Sample s : design.getSamples()) {
    DataFile sampleOldFile=new DataFile(s.getSource());
    DataFile sampleNewFile=getUploadedDataFile(sampleOldFile,s.getId());
    if (filesToCopy.contains(sampleOldFile)) {
      filesToCopy.remove(sampleOldFile);
      result.put(sampleOldFile,sampleNewFile);
    }
    s.setSource(sampleNewFile.getSource());
    final String genome=s.getMetadata().getGenome();
    if (!genomesMap.containsKey(genome)) {
      genomesCount++;
      DataFile genomeOldFile=new DataFile(genome);
      DataFile genomeNewFile=getUploadedDataFile(genomeOldFile,genomesCount);
      if (filesToCopy.contains(genomeOldFile)) {
        filesToCopy.remove(genomeOldFile);
        result.put(genomeOldFile,genomeNewFile);
      }
      genomesMap.put(genome,genomeNewFile.getSource());
    }
    s.getMetadata().setGenome(genomesMap.get(genome));
    final String annotation=s.getMetadata().getAnnotation();
    if (!annotationsMap.containsKey(annotation)) {
      annotationsCount++;
      DataFile annotationOldFile=new DataFile(annotation);
      DataFile annotationNewFile=getUploadedDataFile(annotationOldFile,annotationsCount);
      if (filesToCopy.contains(annotationOldFile)) {
        filesToCopy.remove(annotationOldFile);
        result.put(annotationOldFile,annotationNewFile);
      }
      annotationsMap.put(annotation,annotationNewFile.getSource());
    }
    s.getMetadata().setAnnotation(annotationsMap.get(annotation));
  }
  for (  DataFile file : filesToCopy)   result.put(file,getUploadedDataFile(file));
  return result;
}","private Map<DataFile,DataFile> reWriteDesign(final Design design,final Set<DataFile> filesToCopy) throws IOException {
  final Map<DataFile,DataFile> result=new HashMap<DataFile,DataFile>();
  final Map<String,String> genomesMap=new HashMap<String,String>();
  final Map<String,String> annotationsMap=new HashMap<String,String>();
  int genomesCount=0;
  int annotationsCount=0;
  for (  Sample s : design.getSamples()) {
    DataFile sampleOldFile=new DataFile(s.getSource());
    DataFile sampleNewFile=getUploadedDataFile(sampleOldFile,s.getId());
    if (filesToCopy.contains(sampleOldFile)) {
      filesToCopy.remove(sampleOldFile);
      result.put(sampleOldFile,sampleNewFile);
    }
    s.setSource(sampleNewFile.getSource());
    final String genome=s.getMetadata().getGenome();
    if (!genomesMap.containsKey(genome)) {
      genomesCount++;
      final DataFile genomeOldFile=new DataFile(genome);
      final DataFile genomeNewFile=getUploadedDataFile(genomeOldFile,genomesCount);
      if (filesToCopy.contains(genomeOldFile)) {
        filesToCopy.remove(genomeOldFile);
        result.put(genomeOldFile,genomeNewFile);
      }
      genomesMap.put(genome,genomeNewFile == null ? ""String_Node_Str"" : genomeNewFile.getSource());
    }
    s.getMetadata().setGenome(genomesMap.get(genome));
    final String annotation=s.getMetadata().getAnnotation();
    if (!annotationsMap.containsKey(annotation)) {
      annotationsCount++;
      final DataFile annotationOldFile=new DataFile(annotation);
      final DataFile annotationNewFile=getUploadedDataFile(annotationOldFile,annotationsCount);
      if (filesToCopy.contains(annotationOldFile)) {
        filesToCopy.remove(annotationOldFile);
        result.put(annotationOldFile,annotationNewFile);
      }
      annotationsMap.put(annotation,annotationNewFile == null ? ""String_Node_Str"" : annotationNewFile.getSource());
    }
    s.getMetadata().setAnnotation(annotationsMap.get(annotation));
  }
  for (  DataFile file : filesToCopy)   result.put(file,getUploadedDataFile(file));
  return result;
}",0.971086739780658
141378,"@Override public StepResult execute(Design design,Context context){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + context.getBasePathname() + ""String_Node_Str""+ context.getOutputPathname());
  final long startTime=System.currentTimeMillis();
  final Configuration conf=this.conf;
  if (context.getBasePathname() == null)   throw new NullPointerException(""String_Node_Str"");
  if (context.getOutputPathname() == null)   throw new NullPointerException(""String_Node_Str"");
  try {
    final Path inPath=new Path(context.getBasePathname());
    final Path outPath=new Path(context.getOutputPathname());
    if (!PathUtils.isExistingDirectoryFile(inPath,conf))     throw new EoulsanException(""String_Node_Str"" + inPath);
    final FileSystem inFs=inPath.getFileSystem(conf);
    final FileSystem outFs=outPath.getFileSystem(conf);
    final FileStatus[] files=inFs.listStatus(inPath,new PathFilter(){
      @Override public boolean accept(      final Path p){
        final String filename=p.getName();
        if (filename.startsWith(""String_Node_Str"") && filename.endsWith(""String_Node_Str""))         return true;
        return false;
      }
    }
);
    if (!outFs.exists(outPath))     outFs.mkdirs(outPath);
    final StringBuilder logMsg=new StringBuilder();
    if (files != null)     for (    FileStatus f : files) {
      final Path ip=f.getPath();
      final Path op=new Path(outPath,ip.getName());
      String msg=""String_Node_Str"" + ip + ""String_Node_Str""+ op;
      logger.info(msg);
      logMsg.append(msg);
      logMsg.append(""String_Node_Str"");
      PathUtils.copy(ip,op,conf);
    }
    return new StepResult(this,startTime,logMsg.toString());
  }
 catch (  EoulsanException e) {
    return new StepResult(this,e,""String_Node_Str"" + e.getMessage());
  }
catch (  IOException e) {
    return new StepResult(this,e,""String_Node_Str"" + e.getMessage());
  }
}","@Override public StepResult execute(Design design,Context context){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + context.getBasePathname() + ""String_Node_Str""+ context.getOutputPathname());
  final long startTime=System.currentTimeMillis();
  final Configuration conf=this.conf;
  if (context.getBasePathname() == null)   throw new NullPointerException(""String_Node_Str"");
  if (context.getOutputPathname() == null)   throw new NullPointerException(""String_Node_Str"");
  try {
    final Path inPath=new Path(context.getBasePathname());
    final Path outPath=new Path(context.getOutputPathname());
    if (!PathUtils.isExistingDirectoryFile(inPath,conf))     throw new EoulsanException(""String_Node_Str"" + inPath);
    final FileSystem inFs=inPath.getFileSystem(conf);
    final FileSystem outFs=outPath.getFileSystem(conf);
    final FileStatus[] files=inFs.listStatus(inPath,new PathFilter(){
      @Override public boolean accept(      final Path p){
        final String filename=p.getName();
        final DataFormat df=DataFormats.EXPRESSION_RESULTS_TXT;
        if (filename.startsWith(df.getType().getPrefix()) && filename.endsWith(df.getDefaultExtention()))         return true;
        return false;
      }
    }
);
    if (!outFs.exists(outPath))     outFs.mkdirs(outPath);
    final StringBuilder logMsg=new StringBuilder();
    if (files != null)     for (    FileStatus f : files) {
      final Path ip=f.getPath();
      final Path op=new Path(outPath,ip.getName());
      String msg=""String_Node_Str"" + ip + ""String_Node_Str""+ op;
      logger.info(msg);
      logMsg.append(msg);
      logMsg.append(""String_Node_Str"");
      PathUtils.copy(ip,op,conf);
    }
    return new StepResult(this,startTime,logMsg.toString());
  }
 catch (  EoulsanException e) {
    return new StepResult(this,e,""String_Node_Str"" + e.getMessage());
  }
catch (  IOException e) {
    return new StepResult(this,e,""String_Node_Str"" + e.getMessage());
  }
}",0.9622543950361944
141379,"@Override public boolean accept(final Path p){
  final String filename=p.getName();
  if (filename.startsWith(""String_Node_Str"") && filename.endsWith(""String_Node_Str""))   return true;
  return false;
}","@Override public boolean accept(final Path p){
  final String filename=p.getName();
  final DataFormat df=DataFormats.EXPRESSION_RESULTS_TXT;
  if (filename.startsWith(df.getType().getPrefix()) && filename.endsWith(df.getDefaultExtention()))   return true;
  return false;
}",0.7058823529411765
141380,"/** 
 * Get the filename without the extension.
 * @param filename The filename
 * @return the filename without the extension
 */
public static String filenameWithoutExtension(final String filename){
  if (filename == null)   return null;
  final File f=new File(filename);
  final String shortName=f.getName();
  final int pos=shortName.lastIndexOf('.');
  if (pos == -1)   return filename;
  return filename.substring(0,pos);
}","/** 
 * Get the filename without the extension.
 * @param filename The filename
 * @return the filename without the extension
 */
public static String filenameWithoutExtension(final String filename){
  if (filename == null)   return null;
  final File f=new File(filename);
  final String shortName=f.getName();
  final int pos=shortName.lastIndexOf('.');
  if (pos == -1)   return filename;
  return filename.substring(0,filename.length() - shortName.length()) + shortName.subSequence(0,pos);
}",0.9285714285714286
141381,"/** 
 * Get the filename without the extension.
 * @param filename The filename
 * @return the filename without the extension
 */
public static String filenameWithoutExtension(final String filename){
  if (filename == null)   return null;
  final File f=new File(filename);
  final String shortName=f.getName();
  final int pos=shortName.lastIndexOf('.');
  if (pos == -1)   return filename;
  return filename.substring(0,pos);
}","/** 
 * Get the filename without the extension.
 * @param filename The filename
 * @return the filename without the extension
 */
public static String filenameWithoutExtension(final String filename){
  if (filename == null)   return null;
  final File f=new File(filename);
  final String shortName=f.getName();
  final int pos=shortName.lastIndexOf('.');
  if (pos == -1)   return filename;
  return filename.substring(0,filename.length() - shortName.length()) + shortName.subSequence(0,pos);
}",0.9285714285714286
141382,"@Override public StepResult execute(Design design,Context context){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + context.getBasePathname() + ""String_Node_Str""+ context.getOutputPathname());
  final long startTime=System.currentTimeMillis();
  final Configuration conf=this.conf;
  if (context.getBasePathname() == null)   throw new NullPointerException(""String_Node_Str"");
  if (context.getOutputPathname() == null)   throw new NullPointerException(""String_Node_Str"");
  try {
    final Path inPath=new Path(context.getBasePathname());
    final Path outPath=new Path(context.getOutputPathname());
    if (!PathUtils.isExistingDirectoryFile(inPath,conf))     throw new EoulsanException(""String_Node_Str"" + inPath);
    final FileSystem inFs=inPath.getFileSystem(conf);
    final FileSystem outFs=outPath.getFileSystem(conf);
    final FileStatus[] files=inFs.listStatus(inPath,new PathFilter(){
      @Override public boolean accept(      final Path p){
        final String filename=p.getName();
        if (filename.startsWith(""String_Node_Str"") && filename.endsWith(""String_Node_Str""))         return true;
        return false;
      }
    }
);
    if (!outFs.exists(outPath))     outFs.mkdirs(outPath);
    final StringBuilder logMsg=new StringBuilder();
    if (files != null)     for (    FileStatus f : files) {
      final Path ip=f.getPath();
      final Path op=new Path(outPath,ip.getName());
      String msg=""String_Node_Str"" + ip + ""String_Node_Str""+ op;
      logger.info(msg);
      logMsg.append(msg);
      logMsg.append(""String_Node_Str"");
      PathUtils.copy(ip,op,conf);
    }
    return new StepResult(this,startTime,logMsg.toString());
  }
 catch (  EoulsanException e) {
    return new StepResult(this,e,""String_Node_Str"" + e.getMessage());
  }
catch (  IOException e) {
    return new StepResult(this,e,""String_Node_Str"" + e.getMessage());
  }
}","@Override public StepResult execute(Design design,Context context){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + context.getBasePathname() + ""String_Node_Str""+ context.getOutputPathname());
  final long startTime=System.currentTimeMillis();
  final Configuration conf=this.conf;
  if (context.getBasePathname() == null)   throw new NullPointerException(""String_Node_Str"");
  if (context.getOutputPathname() == null)   throw new NullPointerException(""String_Node_Str"");
  try {
    final Path inPath=new Path(context.getBasePathname());
    final Path outPath=new Path(context.getOutputPathname());
    if (!PathUtils.isExistingDirectoryFile(inPath,conf))     throw new EoulsanException(""String_Node_Str"" + inPath);
    final FileSystem inFs=inPath.getFileSystem(conf);
    final FileSystem outFs=outPath.getFileSystem(conf);
    final FileStatus[] files=inFs.listStatus(inPath,new PathFilter(){
      @Override public boolean accept(      final Path p){
        final String filename=p.getName();
        final DataFormat df=DataFormats.EXPRESSION_RESULTS_TXT;
        if (filename.startsWith(df.getType().getPrefix()) && filename.endsWith(df.getDefaultExtention()))         return true;
        return false;
      }
    }
);
    if (!outFs.exists(outPath))     outFs.mkdirs(outPath);
    final StringBuilder logMsg=new StringBuilder();
    if (files != null)     for (    FileStatus f : files) {
      final Path ip=f.getPath();
      final Path op=new Path(outPath,ip.getName());
      String msg=""String_Node_Str"" + ip + ""String_Node_Str""+ op;
      logger.info(msg);
      logMsg.append(msg);
      logMsg.append(""String_Node_Str"");
      PathUtils.copy(ip,op,conf);
    }
    return new StepResult(this,startTime,logMsg.toString());
  }
 catch (  EoulsanException e) {
    return new StepResult(this,e,""String_Node_Str"" + e.getMessage());
  }
catch (  IOException e) {
    return new StepResult(this,e,""String_Node_Str"" + e.getMessage());
  }
}",0.9622543950361944
141383,"@Override public boolean accept(final Path p){
  final String filename=p.getName();
  if (filename.startsWith(""String_Node_Str"") && filename.endsWith(""String_Node_Str""))   return true;
  return false;
}","@Override public boolean accept(final Path p){
  final String filename=p.getName();
  final DataFormat df=DataFormats.EXPRESSION_RESULTS_TXT;
  if (filename.startsWith(df.getType().getPrefix()) && filename.endsWith(df.getDefaultExtention()))   return true;
  return false;
}",0.7058823529411765
141384,"/** 
 * Upload the file.
 */
public void upload(){
  logger.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
  logger.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  do {
    tryCount++;
    try {
      s3.putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      logger.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str"");
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw ace;
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  logger.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}","/** 
 * Upload the file.
 */
public void upload(){
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
  LOGGER.fine(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  do {
    tryCount++;
    try {
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str"");
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw ace;
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}",0.9772863120143456
141385,"@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   logger.severe(""String_Node_Str"" + f.getAbsolutePath());
}","@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}",0.9830028328611898
141386,"/** 
 * Upload the file.
 */
public void upload(){
  logger.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
  logger.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  do {
    tryCount++;
    try {
      s3.putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      logger.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str"");
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw ace;
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  logger.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}","/** 
 * Upload the file.
 */
public void upload(){
  LOGGER.info(""String_Node_Str"" + s3url.getSource());
  final ObjectMetadata md=new ObjectMetadata();
  if (this.metadata.getContentType() != null)   md.setContentType(this.metadata.getContentType());
  if (this.metadata.getContentEncoding() != null)   md.setContentEncoding(this.metadata.getContentEncoding());
  md.setContentLength(this.metadata.getContentLength());
  final PutObjectRequest or=new PutObjectRequest(s3url.bucket,s3url.getFilePath(),this.is,md);
  LOGGER.fine(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ md.getContentType()+ ""String_Node_Str""+ md.getContentEncoding()+ ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str"");
  int tryCount=0;
  boolean uploadOk=false;
  final long start=System.currentTimeMillis();
  AmazonClientException ace=null;
  do {
    tryCount++;
    try {
      getS3().putObject(or);
      uploadOk=true;
    }
 catch (    AmazonClientException e) {
      ace=e;
      LOGGER.warning(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ tryCount+ ""String_Node_Str"");
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!uploadOk && tryCount < 3);
  if (!uploadOk)   throw ace;
  final long end=System.currentTimeMillis();
  final long duration=end - start;
  final int speedKiB=(int)(this.metadata.getContentLength() / (duration / 1000.0) / 1024.0);
  LOGGER.info(""String_Node_Str"" + this.s3url + ""String_Node_Str""+ this.metadata.getContentLength()+ ""String_Node_Str""+ StringUtils.toTimeHumanReadable(duration)+ ""String_Node_Str""+ speedKiB+ ""String_Node_Str"");
}",0.9772863120143456
141387,"@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   logger.severe(""String_Node_Str"" + f.getAbsolutePath());
}","@Override public void close() throws IOException {
  super.close();
  final SimpleDataFileMetadata md2=new SimpleDataFileMetadata(md);
  if (md2.getContentLength() < 0)   md2.setContentLength(f.length());
  new FileToUpload(dest,FileUtils.createInputStream(f),md2).upload();
  if (!f.delete())   LOGGER.severe(""String_Node_Str"" + f.getAbsolutePath());
}",0.9830028328611898
141388,"/** 
 * Private constructor.
 */
@SuppressWarnings(""String_Node_Str"") private StepService(){
  final Set<Class<? extends Annotation>> autorisedAnnotations;
  if (EoulsanRuntime.getRuntime().isAmazonMode()) {
    autorisedAnnotations=Sets.newHashSet(HadoopOnly.class,HadoopCompatible.class);
  }
 else {
    autorisedAnnotations=Sets.newHashSet(LocalOnly.class,HadoopCompatible.class);
  }
  loader=ServiceLoader.load(Step.class,new ServiceClassLoader(autorisedAnnotations));
}","/** 
 * Private constructor.
 */
@SuppressWarnings(""String_Node_Str"") private StepService(){
  final Set<Class<? extends Annotation>> autorisedAnnotations;
  if (EoulsanRuntime.getRuntime().isHadoopMode()) {
    autorisedAnnotations=Sets.newHashSet(HadoopOnly.class,HadoopCompatible.class);
  }
 else {
    autorisedAnnotations=Sets.newHashSet(LocalOnly.class,HadoopCompatible.class);
  }
  loader=ServiceLoader.load(Step.class,new ServiceClassLoader(autorisedAnnotations));
}",0.6365546218487395
141389,"/** 
 * Retrieve definitions from the first provider that contains the word.
 */
public Step getStep(final String stepName){
  final boolean hadoopMode=EoulsanRuntime.getRuntime().isHadoopMode();
  final Iterator<Step> it=this.loader.iterator();
  while (it.hasNext()) {
    try {
      final Step step=it.next();
      if (step.getName().equals(stepName)) {
        return step;
      }
    }
 catch (    ServiceConfigurationError e) {
      LOGGER.info(""String_Node_Str"" + (hadoopMode ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ e.getClass());
    }
  }
  return null;
}","/** 
 * Retrieve definitions from the first provider that contains the word.
 */
public Step getStep(final String stepName){
  final boolean hadoopMode=EoulsanRuntime.getRuntime().isHadoopMode();
  final Iterator<Step> it=this.loader.iterator();
  while (it.hasNext()) {
    try {
      final Step step=it.next();
      if (step.getName().equals(stepName)) {
        return step;
      }
    }
 catch (    ServiceConfigurationError e) {
      LOGGER.info(""String_Node_Str"" + (hadoopMode ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ e.getMessage());
    }
  }
  return null;
}",0.9898477157360406
141390,"/** 
 * Private constructor.
 */
@SuppressWarnings(""String_Node_Str"") private StepService(){
  final Set<Class<? extends Annotation>> autorisedAnnotations;
  if (EoulsanRuntime.getRuntime().isAmazonMode()) {
    autorisedAnnotations=Sets.newHashSet(HadoopOnly.class,HadoopCompatible.class);
  }
 else {
    autorisedAnnotations=Sets.newHashSet(LocalOnly.class,HadoopCompatible.class);
  }
  loader=ServiceLoader.load(Step.class,new ServiceClassLoader(autorisedAnnotations));
}","/** 
 * Private constructor.
 */
@SuppressWarnings(""String_Node_Str"") private StepService(){
  final Set<Class<? extends Annotation>> autorisedAnnotations;
  if (EoulsanRuntime.getRuntime().isHadoopMode()) {
    autorisedAnnotations=Sets.newHashSet(HadoopOnly.class,HadoopCompatible.class);
  }
 else {
    autorisedAnnotations=Sets.newHashSet(LocalOnly.class,HadoopCompatible.class);
  }
  loader=ServiceLoader.load(Step.class,new ServiceClassLoader(autorisedAnnotations));
}",0.6365546218487395
141391,"/** 
 * Retrieve definitions from the first provider that contains the word.
 */
public Step getStep(final String stepName){
  final boolean hadoopMode=EoulsanRuntime.getRuntime().isHadoopMode();
  final Iterator<Step> it=this.loader.iterator();
  while (it.hasNext()) {
    try {
      final Step step=it.next();
      if (step.getName().equals(stepName)) {
        return step;
      }
    }
 catch (    ServiceConfigurationError e) {
      LOGGER.info(""String_Node_Str"" + (hadoopMode ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ e.getClass());
    }
  }
  return null;
}","/** 
 * Retrieve definitions from the first provider that contains the word.
 */
public Step getStep(final String stepName){
  final boolean hadoopMode=EoulsanRuntime.getRuntime().isHadoopMode();
  final Iterator<Step> it=this.loader.iterator();
  while (it.hasNext()) {
    try {
      final Step step=it.next();
      if (step.getName().equals(stepName)) {
        return step;
      }
    }
 catch (    ServiceConfigurationError e) {
      LOGGER.info(""String_Node_Str"" + (hadoopMode ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ e.getMessage());
    }
  }
  return null;
}",0.9898477157360406
141392,"/** 
 * Create the soap index in a directory.
 * @param genomeFile path to the genome file
 * @param outputDir output directory for the index
 * @throws IOException if an error occurs while creating the index
 */
public static void makeIndex(final File genomeFile,final File outputDir) throws IOException {
  if (genomeFile == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (outputDir == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  LOGGER.info(""String_Node_Str"" + genomeFile);
  final long startTime=System.currentTimeMillis();
synchronized (indexerPath) {
    if (indexerPath == null) {
      indexerPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  if (!outputDir.exists() && !outputDir.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  final File tmpGenomeFile=new File(outputDir,genomeFile.getName());
  FileUtils.createSymbolicLink(genomeFile,tmpGenomeFile);
  final String cmd=indexerPath + ""String_Node_Str"" + tmpGenomeFile.getAbsolutePath();
  ProcessUtils.exec(cmd,DEBUG);
  if (!tmpGenomeFile.delete()) {
    LOGGER.warning(""String_Node_Str"");
  }
  final long endTime=System.currentTimeMillis();
  LOGGER.info(""String_Node_Str"" + StringUtils.toTimeHumanReadable(endTime - startTime));
}","/** 
 * Create the soap index in a directory.
 * @param genomeFile path to the genome file
 * @param outputDir output directory for the index
 * @throws IOException if an error occurs while creating the index
 */
public static void makeIndex(final File genomeFile,final File outputDir) throws IOException {
  if (genomeFile == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (outputDir == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  LOGGER.info(""String_Node_Str"" + genomeFile);
  final long startTime=System.currentTimeMillis();
  if (indexerPath == null) {
synchronized (SYNC) {
      indexerPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  if (!outputDir.exists() && !outputDir.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  final File tmpGenomeFile=new File(outputDir,genomeFile.getName());
  FileUtils.createSymbolicLink(genomeFile,tmpGenomeFile);
  final String cmd=indexerPath + ""String_Node_Str"" + tmpGenomeFile.getAbsolutePath();
  ProcessUtils.exec(cmd,DEBUG);
  if (!tmpGenomeFile.delete()) {
    LOGGER.warning(""String_Node_Str"");
  }
  final long endTime=System.currentTimeMillis();
  LOGGER.info(""String_Node_Str"" + StringUtils.toTimeHumanReadable(endTime - startTime));
}",0.9792401096748924
141393,"/** 
 * Create a soap command line for mapping reads using soap in pipe mode.
 * @param soapIndexDir soap index file
 * @param soapArgs soap arguments
 * @param nbSoapThreads number of threads to use
 * @throws IOException if an error occurs while mapping reads
 */
public static String mapPipe(final File soapIndexDir,final String soapArgs,final int nbSoapThreads) throws IOException {
synchronized (soapPath) {
    if (soapPath == null) {
      soapPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  FileUtils.checkExistingDirectoryFile(soapIndexDir,""String_Node_Str"");
  final File[] indexFiles=FileUtils.listFilesByExtension(soapIndexDir,""String_Node_Str"");
  if (indexFiles == null || indexFiles.length != 1) {
    throw new IOException(""String_Node_Str"");
  }
  final String ambFile=indexFiles[0].getAbsolutePath();
  final String cmd=soapPath + ""String_Node_Str"" + soapArgs+ ""String_Node_Str""+ nbSoapThreads+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ambFile.substring(0,ambFile.length() - 4)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  LOGGER.info(cmd);
  return cmd;
}","/** 
 * Create a soap command line for mapping reads using soap in pipe mode.
 * @param soapIndexDir soap index file
 * @param soapArgs soap arguments
 * @param nbSoapThreads number of threads to use
 * @throws IOException if an error occurs while mapping reads
 */
public static String mapPipe(final File soapIndexDir,final String soapArgs,final int nbSoapThreads) throws IOException {
  if (soapPath == null) {
synchronized (SYNC) {
      soapPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  FileUtils.checkExistingDirectoryFile(soapIndexDir,""String_Node_Str"");
  final File[] indexFiles=FileUtils.listFilesByExtension(soapIndexDir,""String_Node_Str"");
  if (indexFiles == null || indexFiles.length != 1) {
    throw new IOException(""String_Node_Str"");
  }
  final String ambFile=indexFiles[0].getAbsolutePath();
  final String cmd=soapPath + ""String_Node_Str"" + soapArgs+ ""String_Node_Str""+ nbSoapThreads+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ambFile.substring(0,ambFile.length() - 4)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  LOGGER.info(cmd);
  return cmd;
}",0.9779929577464788
141394,"/** 
 * Create the soap index in a zip archive.
 * @param genomeFile path to the genome file
 * @return a File object with the path of the result zip file
 * @throws IOException if an error occurs while creating the index
 */
public static File makeIndexInZipFile(final File genomeFile) throws IOException {
  LOGGER.info(""String_Node_Str"");
synchronized (indexerPath) {
    if (indexerPath == null) {
      indexerPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  final File tmpDir=File.createTempFile(Globals.APP_NAME_LOWER_CASE + ""String_Node_Str"",""String_Node_Str"");
  if (!(tmpDir.delete())) {
    throw new IOException(""String_Node_Str"" + tmpDir.getAbsolutePath() + ""String_Node_Str"");
  }
  if (!tmpDir.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  makeIndex(genomeFile,tmpDir);
  final File indexZipFile=File.createTempFile(Globals.APP_NAME_LOWER_CASE + ""String_Node_Str"",""String_Node_Str"");
  FileUtils.createZip(tmpDir,indexZipFile);
  FileUtils.removeDirectory(tmpDir);
  LOGGER.info(""String_Node_Str"");
  return indexZipFile;
}","/** 
 * Create the soap index in a zip archive.
 * @param genomeFile path to the genome file
 * @return a File object with the path of the result zip file
 * @throws IOException if an error occurs while creating the index
 */
public static File makeIndexInZipFile(final File genomeFile) throws IOException {
  LOGGER.info(""String_Node_Str"");
  if (indexerPath == null) {
synchronized (SYNC) {
      indexerPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  final File tmpDir=File.createTempFile(Globals.APP_NAME_LOWER_CASE + ""String_Node_Str"",""String_Node_Str"");
  if (!(tmpDir.delete())) {
    throw new IOException(""String_Node_Str"" + tmpDir.getAbsolutePath() + ""String_Node_Str"");
  }
  if (!tmpDir.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  makeIndex(genomeFile,tmpDir);
  final File indexZipFile=File.createTempFile(Globals.APP_NAME_LOWER_CASE + ""String_Node_Str"",""String_Node_Str"");
  FileUtils.createZip(tmpDir,indexZipFile);
  FileUtils.removeDirectory(tmpDir);
  LOGGER.info(""String_Node_Str"");
  return indexZipFile;
}",0.9751056834194456
141395,"/** 
 * Map reads using soap.
 * @param readsFile reads file
 * @param soapIndexDir soap index file
 * @param outputFile output alignment file
 * @param unmapFile output unmap file
 * @param soapArgs soap arguments
 * @param nbSoapThreads number of threads to use
 * @throws IOException if an error occurs while mapping reads
 */
public static void map(final File readsFile,final File soapIndexDir,final File outputFile,final File unmapFile,final String soapArgs,final int nbSoapThreads) throws IOException {
synchronized (soapPath) {
    if (soapPath == null) {
      soapPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  FileUtils.checkExistingDirectoryFile(soapIndexDir,""String_Node_Str"");
  final File[] indexFiles=FileUtils.listFilesByExtension(soapIndexDir,""String_Node_Str"");
  if (indexFiles == null || indexFiles.length != 1) {
    throw new IOException(""String_Node_Str"");
  }
  final String ambFile=indexFiles[0].getAbsolutePath();
  final String cmd=soapPath + ""String_Node_Str"" + soapArgs+ ""String_Node_Str""+ nbSoapThreads+ ""String_Node_Str""+ readsFile.getAbsolutePath()+ ""String_Node_Str""+ ambFile.substring(0,ambFile.length() - 4)+ ""String_Node_Str""+ outputFile.getAbsolutePath()+ ""String_Node_Str""+ unmapFile.getAbsolutePath()+ ""String_Node_Str"";
  LOGGER.info(cmd);
  final int exitValue=ProcessUtils.sh(cmd);
  if (exitValue != 0) {
    throw new IOException(""String_Node_Str"" + exitValue);
  }
}","/** 
 * Map reads using soap.
 * @param readsFile reads file
 * @param soapIndexDir soap index file
 * @param outputFile output alignment file
 * @param unmapFile output unmap file
 * @param soapArgs soap arguments
 * @param nbSoapThreads number of threads to use
 * @throws IOException if an error occurs while mapping reads
 */
public static void map(final File readsFile,final File soapIndexDir,final File outputFile,final File unmapFile,final String soapArgs,final int nbSoapThreads) throws IOException {
  if (soapPath == null) {
synchronized (SYNC) {
      soapPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  FileUtils.checkExistingDirectoryFile(soapIndexDir,""String_Node_Str"");
  final File[] indexFiles=FileUtils.listFilesByExtension(soapIndexDir,""String_Node_Str"");
  if (indexFiles == null || indexFiles.length != 1) {
    throw new IOException(""String_Node_Str"");
  }
  final String ambFile=indexFiles[0].getAbsolutePath();
  final String cmd=soapPath + ""String_Node_Str"" + soapArgs+ ""String_Node_Str""+ nbSoapThreads+ ""String_Node_Str""+ readsFile.getAbsolutePath()+ ""String_Node_Str""+ ambFile.substring(0,ambFile.length() - 4)+ ""String_Node_Str""+ outputFile.getAbsolutePath()+ ""String_Node_Str""+ unmapFile.getAbsolutePath()+ ""String_Node_Str"";
  LOGGER.info(cmd);
  final int exitValue=ProcessUtils.sh(cmd);
  if (exitValue != 0) {
    throw new IOException(""String_Node_Str"" + exitValue);
  }
}",0.9824438202247192
141396,"/** 
 * Create the soap index in a directory.
 * @param genomeFile path to the genome file
 * @param outputDir output directory for the index
 * @throws IOException if an error occurs while creating the index
 */
public static void makeIndex(final File genomeFile,final File outputDir) throws IOException {
  if (genomeFile == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (outputDir == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  LOGGER.info(""String_Node_Str"" + genomeFile);
  final long startTime=System.currentTimeMillis();
synchronized (indexerPath) {
    if (indexerPath == null) {
      indexerPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  if (!outputDir.exists() && !outputDir.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  final File tmpGenomeFile=new File(outputDir,genomeFile.getName());
  FileUtils.createSymbolicLink(genomeFile,tmpGenomeFile);
  final String cmd=indexerPath + ""String_Node_Str"" + tmpGenomeFile.getAbsolutePath();
  ProcessUtils.exec(cmd,DEBUG);
  if (!tmpGenomeFile.delete()) {
    LOGGER.warning(""String_Node_Str"");
  }
  final long endTime=System.currentTimeMillis();
  LOGGER.info(""String_Node_Str"" + StringUtils.toTimeHumanReadable(endTime - startTime));
}","/** 
 * Create the soap index in a directory.
 * @param genomeFile path to the genome file
 * @param outputDir output directory for the index
 * @throws IOException if an error occurs while creating the index
 */
public static void makeIndex(final File genomeFile,final File outputDir) throws IOException {
  if (genomeFile == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (outputDir == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  LOGGER.info(""String_Node_Str"" + genomeFile);
  final long startTime=System.currentTimeMillis();
  if (indexerPath == null) {
synchronized (SYNC) {
      indexerPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  if (!outputDir.exists() && !outputDir.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  final File tmpGenomeFile=new File(outputDir,genomeFile.getName());
  FileUtils.createSymbolicLink(genomeFile,tmpGenomeFile);
  final String cmd=indexerPath + ""String_Node_Str"" + tmpGenomeFile.getAbsolutePath();
  ProcessUtils.exec(cmd,DEBUG);
  if (!tmpGenomeFile.delete()) {
    LOGGER.warning(""String_Node_Str"");
  }
  final long endTime=System.currentTimeMillis();
  LOGGER.info(""String_Node_Str"" + StringUtils.toTimeHumanReadable(endTime - startTime));
}",0.9792401096748924
141397,"/** 
 * Create a soap command line for mapping reads using soap in pipe mode.
 * @param soapIndexDir soap index file
 * @param soapArgs soap arguments
 * @param nbSoapThreads number of threads to use
 * @throws IOException if an error occurs while mapping reads
 */
public static String mapPipe(final File soapIndexDir,final String soapArgs,final int nbSoapThreads) throws IOException {
synchronized (soapPath) {
    if (soapPath == null) {
      soapPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  FileUtils.checkExistingDirectoryFile(soapIndexDir,""String_Node_Str"");
  final File[] indexFiles=FileUtils.listFilesByExtension(soapIndexDir,""String_Node_Str"");
  if (indexFiles == null || indexFiles.length != 1) {
    throw new IOException(""String_Node_Str"");
  }
  final String ambFile=indexFiles[0].getAbsolutePath();
  final String cmd=soapPath + ""String_Node_Str"" + soapArgs+ ""String_Node_Str""+ nbSoapThreads+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ambFile.substring(0,ambFile.length() - 4)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  LOGGER.info(cmd);
  return cmd;
}","/** 
 * Create a soap command line for mapping reads using soap in pipe mode.
 * @param soapIndexDir soap index file
 * @param soapArgs soap arguments
 * @param nbSoapThreads number of threads to use
 * @throws IOException if an error occurs while mapping reads
 */
public static String mapPipe(final File soapIndexDir,final String soapArgs,final int nbSoapThreads) throws IOException {
  if (soapPath == null) {
synchronized (SYNC) {
      soapPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  FileUtils.checkExistingDirectoryFile(soapIndexDir,""String_Node_Str"");
  final File[] indexFiles=FileUtils.listFilesByExtension(soapIndexDir,""String_Node_Str"");
  if (indexFiles == null || indexFiles.length != 1) {
    throw new IOException(""String_Node_Str"");
  }
  final String ambFile=indexFiles[0].getAbsolutePath();
  final String cmd=soapPath + ""String_Node_Str"" + soapArgs+ ""String_Node_Str""+ nbSoapThreads+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ambFile.substring(0,ambFile.length() - 4)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  LOGGER.info(cmd);
  return cmd;
}",0.9779929577464788
141398,"/** 
 * Create the soap index in a zip archive.
 * @param genomeFile path to the genome file
 * @return a File object with the path of the result zip file
 * @throws IOException if an error occurs while creating the index
 */
public static File makeIndexInZipFile(final File genomeFile) throws IOException {
  LOGGER.info(""String_Node_Str"");
synchronized (indexerPath) {
    if (indexerPath == null) {
      indexerPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  final File tmpDir=File.createTempFile(Globals.APP_NAME_LOWER_CASE + ""String_Node_Str"",""String_Node_Str"");
  if (!(tmpDir.delete())) {
    throw new IOException(""String_Node_Str"" + tmpDir.getAbsolutePath() + ""String_Node_Str"");
  }
  if (!tmpDir.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  makeIndex(genomeFile,tmpDir);
  final File indexZipFile=File.createTempFile(Globals.APP_NAME_LOWER_CASE + ""String_Node_Str"",""String_Node_Str"");
  FileUtils.createZip(tmpDir,indexZipFile);
  FileUtils.removeDirectory(tmpDir);
  LOGGER.info(""String_Node_Str"");
  return indexZipFile;
}","/** 
 * Create the soap index in a zip archive.
 * @param genomeFile path to the genome file
 * @return a File object with the path of the result zip file
 * @throws IOException if an error occurs while creating the index
 */
public static File makeIndexInZipFile(final File genomeFile) throws IOException {
  LOGGER.info(""String_Node_Str"");
  if (indexerPath == null) {
synchronized (SYNC) {
      indexerPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  final File tmpDir=File.createTempFile(Globals.APP_NAME_LOWER_CASE + ""String_Node_Str"",""String_Node_Str"");
  if (!(tmpDir.delete())) {
    throw new IOException(""String_Node_Str"" + tmpDir.getAbsolutePath() + ""String_Node_Str"");
  }
  if (!tmpDir.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  makeIndex(genomeFile,tmpDir);
  final File indexZipFile=File.createTempFile(Globals.APP_NAME_LOWER_CASE + ""String_Node_Str"",""String_Node_Str"");
  FileUtils.createZip(tmpDir,indexZipFile);
  FileUtils.removeDirectory(tmpDir);
  LOGGER.info(""String_Node_Str"");
  return indexZipFile;
}",0.9751056834194456
141399,"/** 
 * Map reads using soap.
 * @param readsFile reads file
 * @param soapIndexDir soap index file
 * @param outputFile output alignment file
 * @param unmapFile output unmap file
 * @param soapArgs soap arguments
 * @param nbSoapThreads number of threads to use
 * @throws IOException if an error occurs while mapping reads
 */
public static void map(final File readsFile,final File soapIndexDir,final File outputFile,final File unmapFile,final String soapArgs,final int nbSoapThreads) throws IOException {
synchronized (soapPath) {
    if (soapPath == null) {
      soapPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  FileUtils.checkExistingDirectoryFile(soapIndexDir,""String_Node_Str"");
  final File[] indexFiles=FileUtils.listFilesByExtension(soapIndexDir,""String_Node_Str"");
  if (indexFiles == null || indexFiles.length != 1) {
    throw new IOException(""String_Node_Str"");
  }
  final String ambFile=indexFiles[0].getAbsolutePath();
  final String cmd=soapPath + ""String_Node_Str"" + soapArgs+ ""String_Node_Str""+ nbSoapThreads+ ""String_Node_Str""+ readsFile.getAbsolutePath()+ ""String_Node_Str""+ ambFile.substring(0,ambFile.length() - 4)+ ""String_Node_Str""+ outputFile.getAbsolutePath()+ ""String_Node_Str""+ unmapFile.getAbsolutePath()+ ""String_Node_Str"";
  LOGGER.info(cmd);
  final int exitValue=ProcessUtils.sh(cmd);
  if (exitValue != 0) {
    throw new IOException(""String_Node_Str"" + exitValue);
  }
}","/** 
 * Map reads using soap.
 * @param readsFile reads file
 * @param soapIndexDir soap index file
 * @param outputFile output alignment file
 * @param unmapFile output unmap file
 * @param soapArgs soap arguments
 * @param nbSoapThreads number of threads to use
 * @throws IOException if an error occurs while mapping reads
 */
public static void map(final File readsFile,final File soapIndexDir,final File outputFile,final File unmapFile,final String soapArgs,final int nbSoapThreads) throws IOException {
  if (soapPath == null) {
synchronized (SYNC) {
      soapPath=BinariesInstaller.install(""String_Node_Str"");
    }
  }
  FileUtils.checkExistingDirectoryFile(soapIndexDir,""String_Node_Str"");
  final File[] indexFiles=FileUtils.listFilesByExtension(soapIndexDir,""String_Node_Str"");
  if (indexFiles == null || indexFiles.length != 1) {
    throw new IOException(""String_Node_Str"");
  }
  final String ambFile=indexFiles[0].getAbsolutePath();
  final String cmd=soapPath + ""String_Node_Str"" + soapArgs+ ""String_Node_Str""+ nbSoapThreads+ ""String_Node_Str""+ readsFile.getAbsolutePath()+ ""String_Node_Str""+ ambFile.substring(0,ambFile.length() - 4)+ ""String_Node_Str""+ outputFile.getAbsolutePath()+ ""String_Node_Str""+ unmapFile.getAbsolutePath()+ ""String_Node_Str"";
  LOGGER.info(cmd);
  final int exitValue=ProcessUtils.sh(cmd);
  if (exitValue != 0) {
    throw new IOException(""String_Node_Str"" + exitValue);
  }
}",0.9824438202247192
141400,"/** 
 * Set the version.
 * @param version The version to set
 */
public void setVersion(final String version){
  if (version == null)   return;
  String v=version.trim();
  if (version.endsWith(""String_Node_Str""))   v=version.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (v.matches(""String_Node_Str"")) {
    String[] ch=v.split(""String_Node_Str"");
    setVersion(Integer.parseInt(ch[0].trim()),Integer.parseInt(ch[1].trim()),Integer.parseInt(ch[2].trim()));
  }
 else   throw new InvalidParameterException(""String_Node_Str"" + version);
}","/** 
 * Set the version.
 * @param version The version to set
 */
public void setVersion(final String version){
  if (version == null)   return;
  String v=version.trim();
  if (version.endsWith(""String_Node_Str""))   v=version.replaceAll(""String_Node_Str"",""String_Node_Str"");
  final String[] fields=v.split(""String_Node_Str"");
  int major=0;
  int minor=0;
  int revision=0;
  try {
    if (fields.length > 0)     major=Integer.parseInt(fields[0].trim());
    if (fields.length > 1)     minor=Integer.parseInt(fields[1].trim());
    if (fields.length > 2)     revision=Integer.parseInt(fields[2].trim());
  }
 catch (  NumberFormatException e) {
    throw new InvalidParameterException(""String_Node_Str"" + version);
  }
  setVersion(major,minor,revision);
}",0.6467432950191571
141401,"/** 
 * Set the version.
 * @param version The version to set
 */
public void setVersion(final String version){
  if (version == null)   return;
  String v=version.trim();
  if (version.endsWith(""String_Node_Str""))   v=version.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (v.matches(""String_Node_Str"")) {
    String[] ch=v.split(""String_Node_Str"");
    setVersion(Integer.parseInt(ch[0].trim()),Integer.parseInt(ch[1].trim()),Integer.parseInt(ch[2].trim()));
  }
 else   throw new InvalidParameterException(""String_Node_Str"" + version);
}","/** 
 * Set the version.
 * @param version The version to set
 */
public void setVersion(final String version){
  if (version == null)   return;
  String v=version.trim();
  if (version.endsWith(""String_Node_Str""))   v=version.replaceAll(""String_Node_Str"",""String_Node_Str"");
  final String[] fields=v.split(""String_Node_Str"");
  int major=0;
  int minor=0;
  int revision=0;
  try {
    if (fields.length > 0)     major=Integer.parseInt(fields[0].trim());
    if (fields.length > 1)     minor=Integer.parseInt(fields[1].trim());
    if (fields.length > 2)     revision=Integer.parseInt(fields[2].trim());
  }
 catch (  NumberFormatException e) {
    throw new InvalidParameterException(""String_Node_Str"" + version);
  }
  setVersion(major,minor,revision);
}",0.6467432950191571
141402,"/** 
 * Reverse a map
 * @param map Map to reverse
 * @return The reverse map
 */
public static Map<String,Set<String>> reverseMap(Map<String,String> map){
  if (map == null)   return null;
  Map<String,Set<String>> result=new HashMap<String,Set<String>>();
  for (  Map.Entry<String,String> e : map.entrySet()) {
    final Set<String> set;
    final String value=e.getValue();
    if (!result.containsValue(value)) {
      set=new HashSet<String>();
      result.put(value,set);
    }
 else     set=result.get(value);
    set.add(e.getKey());
  }
  return result;
}","/** 
 * Reverse a map
 * @param map Map to reverse
 * @return The reverse map
 */
public static Map<String,Set<String>> reverseMap(final Map<String,String> map){
  if (map == null)   return null;
  final Map<String,Set<String>> result=new HashMap<String,Set<String>>();
  for (  Map.Entry<String,String> e : map.entrySet()) {
    final Set<String> set;
    final String value=e.getValue();
    if (!result.containsKey(value)) {
      set=new HashSet<String>();
      result.put(value,set);
    }
 else     set=result.get(value);
    set.add(e.getKey());
  }
  return result;
}",0.9824868651488616
141403,"/** 
 * Reverse a map
 * @param map Map to reverse
 * @return The reverse map
 */
public static Map<String,Set<String>> reverseMap(Map<String,String> map){
  if (map == null)   return null;
  Map<String,Set<String>> result=new HashMap<String,Set<String>>();
  for (  Map.Entry<String,String> e : map.entrySet()) {
    final Set<String> set;
    final String value=e.getValue();
    if (!result.containsValue(value)) {
      set=new HashSet<String>();
      result.put(value,set);
    }
 else     set=result.get(value);
    set.add(e.getKey());
  }
  return result;
}","/** 
 * Reverse a map
 * @param map Map to reverse
 * @return The reverse map
 */
public static Map<String,Set<String>> reverseMap(final Map<String,String> map){
  if (map == null)   return null;
  final Map<String,Set<String>> result=new HashMap<String,Set<String>>();
  for (  Map.Entry<String,String> e : map.entrySet()) {
    final Set<String> set;
    final String value=e.getValue();
    if (!result.containsKey(value)) {
      set=new HashSet<String>();
      result.put(value,set);
    }
 else     set=result.get(value);
    set.add(e.getKey());
  }
  return result;
}",0.9824868651488616
141404,"/** 
 * Public constructor.
 * @param outputFilename name of the file to use
 */
public FastQWriter(final String outputFilename) throws FileNotFoundException {
  this.writer=FileUtils.createBufferedWriter(outputFilename);
}","/** 
 * Public constructor.
 * @param outputFilename name of the file to use
 */
public FastQWriter(final String outputFilename) throws IOException {
  this.writer=FileUtils.createBufferedWriter(outputFilename);
}",0.9678899082568808
141405,"/** 
 * Close the writer
 */
@Override public void close(){
  this.close();
}","/** 
 * Close the writer.
 * @throws IOException if an error occurs while closing the writer
 */
@Override public void close() throws IOException {
  this.writer.close();
}",0.6184738955823293
141406,"/** 
 * Public constructor.
 * @param outputFilename name of the file to use
 */
public GFFWriter(final String outputFilename) throws FileNotFoundException {
  this.writer=FileUtils.createBufferedWriter(outputFilename);
}","/** 
 * Public constructor.
 * @param outputFilename name of the file to use
 */
public GFFWriter(final String outputFilename) throws IOException {
  this.writer=FileUtils.createBufferedWriter(outputFilename);
}",0.9675925925925926
141407,"/** 
 * Close the writer
 */
public void close(){
  this.sb=null;
  this.close();
}","/** 
 * Close the writer.
 * @throws IOException if an error occurs while closing the writer
 */
public void close() throws IOException {
  this.sb=null;
  this.writer.close();
}",0.6360153256704981
141408,"/** 
 * Compute mean quality score of the read. Illumina version.
 * @return the mean quality score of the read.
 */
public double meanQuality(){
  if (this.quality == null)   return Double.NaN;
  int score=0;
  final int len=quality.length();
  for (int i=0; i < len; i++)   score+=quality.charAt(i) - 64;
  return score / len;
}","/** 
 * Compute mean quality score of the read. Illumina version.
 * @return the mean quality score of the read.
 */
public double meanQuality(){
  if (this.quality == null)   return Double.NaN;
  int score=0;
  final int len=quality.length();
  for (int i=0; i < len; i++)   score+=quality.charAt(i) - 64;
  return score / (double)len;
}",0.9880239520958084
141409,"/** 
 * Public constructor.
 * @param outputFilename name of the file to use
 */
public FastQWriter(final String outputFilename) throws FileNotFoundException {
  this.writer=FileUtils.createBufferedWriter(outputFilename);
}","/** 
 * Public constructor.
 * @param outputFilename name of the file to use
 */
public FastQWriter(final String outputFilename) throws IOException {
  this.writer=FileUtils.createBufferedWriter(outputFilename);
}",0.9678899082568808
141410,"/** 
 * Close the writer
 */
@Override public void close(){
  this.close();
}","/** 
 * Close the writer.
 * @throws IOException if an error occurs while closing the writer
 */
@Override public void close() throws IOException {
  this.writer.close();
}",0.6184738955823293
141411,"/** 
 * Public constructor.
 * @param outputFilename name of the file to use
 */
public GFFWriter(final String outputFilename) throws FileNotFoundException {
  this.writer=FileUtils.createBufferedWriter(outputFilename);
}","/** 
 * Public constructor.
 * @param outputFilename name of the file to use
 */
public GFFWriter(final String outputFilename) throws IOException {
  this.writer=FileUtils.createBufferedWriter(outputFilename);
}",0.9675925925925926
141412,"/** 
 * Close the writer
 */
public void close(){
  this.sb=null;
  this.close();
}","/** 
 * Close the writer.
 * @throws IOException if an error occurs while closing the writer
 */
public void close() throws IOException {
  this.sb=null;
  this.writer.close();
}",0.6360153256704981
141413,"/** 
 * Compute mean quality score of the read. Illumina version.
 * @return the mean quality score of the read.
 */
public double meanQuality(){
  if (this.quality == null)   return Double.NaN;
  int score=0;
  final int len=quality.length();
  for (int i=0; i < len; i++)   score+=quality.charAt(i) - 64;
  return score / len;
}","/** 
 * Compute mean quality score of the read. Illumina version.
 * @return the mean quality score of the read.
 */
public double meanQuality(){
  if (this.quality == null)   return Double.NaN;
  int score=0;
  final int len=quality.length();
  for (int i=0; i < len; i++)   score+=quality.charAt(i) - 64;
  return score / (double)len;
}",0.9880239520958084
141414,"protected void uploadFiles(final List<FileUploader> files) throws IOException {
  final Map<String,String> dataSourceDistCpEntries=new HashMap<String,String>();
  for (  FileUploader f : files) {
    f.prepare();
    f.upload();
    if (f instanceof HDFSFileUploader)     dataSourceDistCpEntries.putAll(((HDFSFileUploader)f).getDistCpEntries());
  }
  if (dataSourceDistCpEntries.size() > 0) {
    final Map<String,String> distCpEntries=new HashMap<String,String>();
    for (    Map.Entry<String,String> e : dataSourceDistCpEntries.entrySet()) {
      if (e.getKey().startsWith(""String_Node_Str"")) {
        final Path src=new Path(e.getKey());
        final Path dest=new Path(e.getValue());
        if (src.getName().equals(dest.getName())) {
          distCpEntries.put(e.getKey(),e.getValue());
          dataSourceDistCpEntries.remove(e.getKey());
        }
      }
    }
    final DataSourceDistCp cp=new DataSourceDistCp(this.conf,new Path(getDestURI().toString()));
    cp.copy(dataSourceDistCpEntries);
    DistCp distcp=new DistCp(this.conf);
    Map<String,Set<String>> reverseEntries=Utils.reverseMap(distCpEntries);
    for (    Map.Entry<String,Set<String>> e : reverseEntries.entrySet()) {
      final String dest=e.getKey();
      final Set<String> sources=e.getValue();
      String[] args=new String[sources.size() + 1];
      int i=0;
      for (      String src : sources)       args[i++]=src;
      args[i]=dest;
      distcp.run(args);
    }
  }
}","protected void uploadFiles(final List<FileUploader> files) throws IOException {
  final Map<String,String> originalDistCpEntries=new HashMap<String,String>();
  for (  FileUploader f : files) {
    f.prepare();
    f.upload();
    if (f instanceof HDFSFileUploader)     originalDistCpEntries.putAll(((HDFSFileUploader)f).getDistCpEntries());
  }
  if (originalDistCpEntries.size() > 0) {
    final Map<String,String> dataSourceDistCpEntries=new HashMap<String,String>();
    final Map<String,String> hadoopdistCpEntries=new HashMap<String,String>();
    for (    Map.Entry<String,String> e : originalDistCpEntries.entrySet()) {
      boolean useHadoopDistCp=false;
      if (e.getKey().startsWith(""String_Node_Str"")) {
        final Path src=new Path(e.getKey());
        final Path dest=new Path(e.getValue());
        if (src.getName().equals(dest.getName()))         useHadoopDistCp=true;
      }
      if (useHadoopDistCp)       hadoopdistCpEntries.put(e.getKey(),e.getValue());
 else       dataSourceDistCpEntries.put(e.getKey(),e.getValue());
    }
    final DataSourceDistCp cp=new DataSourceDistCp(this.conf,new Path(getDestURI().toString()));
    cp.copy(dataSourceDistCpEntries);
    hadoopDistCp(hadoopdistCpEntries);
  }
}",0.7019230769230769
141415,"protected void uploadFiles(final List<FileUploader> files) throws IOException {
  final Map<String,String> dataSourceDistCpEntries=new HashMap<String,String>();
  for (  FileUploader f : files) {
    f.prepare();
    f.upload();
    if (f instanceof HDFSFileUploader)     dataSourceDistCpEntries.putAll(((HDFSFileUploader)f).getDistCpEntries());
  }
  if (dataSourceDistCpEntries.size() > 0) {
    final Map<String,String> distCpEntries=new HashMap<String,String>();
    for (    Map.Entry<String,String> e : dataSourceDistCpEntries.entrySet()) {
      if (e.getKey().startsWith(""String_Node_Str"")) {
        final Path src=new Path(e.getKey());
        final Path dest=new Path(e.getValue());
        if (src.getName().equals(dest.getName())) {
          distCpEntries.put(e.getKey(),e.getValue());
          dataSourceDistCpEntries.remove(e.getKey());
        }
      }
    }
    final DataSourceDistCp cp=new DataSourceDistCp(this.conf,new Path(getDestURI().toString()));
    cp.copy(dataSourceDistCpEntries);
    DistCp distcp=new DistCp(this.conf);
    Map<String,Set<String>> reverseEntries=Utils.reverseMap(distCpEntries);
    for (    Map.Entry<String,Set<String>> e : reverseEntries.entrySet()) {
      final String dest=e.getKey();
      final Set<String> sources=e.getValue();
      String[] args=new String[sources.size() + 1];
      int i=0;
      for (      String src : sources)       args[i++]=src;
      args[i]=dest;
      distcp.run(args);
    }
  }
}","protected void uploadFiles(final List<FileUploader> files) throws IOException {
  final Map<String,String> originalDistCpEntries=new HashMap<String,String>();
  for (  FileUploader f : files) {
    f.prepare();
    f.upload();
    if (f instanceof HDFSFileUploader)     originalDistCpEntries.putAll(((HDFSFileUploader)f).getDistCpEntries());
  }
  if (originalDistCpEntries.size() > 0) {
    final Map<String,String> dataSourceDistCpEntries=new HashMap<String,String>();
    final Map<String,String> hadoopdistCpEntries=new HashMap<String,String>();
    for (    Map.Entry<String,String> e : originalDistCpEntries.entrySet()) {
      boolean useHadoopDistCp=false;
      if (e.getKey().startsWith(""String_Node_Str"")) {
        final Path src=new Path(e.getKey());
        final Path dest=new Path(e.getValue());
        if (src.getName().equals(dest.getName()))         useHadoopDistCp=true;
      }
      if (useHadoopDistCp)       hadoopdistCpEntries.put(e.getKey(),e.getValue());
 else       dataSourceDistCpEntries.put(e.getKey(),e.getValue());
    }
    final DataSourceDistCp cp=new DataSourceDistCp(this.conf,new Path(getDestURI().toString()));
    cp.copy(dataSourceDistCpEntries);
    hadoopDistCp(hadoopdistCpEntries);
  }
}",0.7019230769230769
141416,"private static void filterSamples(final Path srcDesignFile,final Path destDesignFile,final double threshold) throws IOException, EoulsanIOException {
  if (srcDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (destDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  final Configuration conf=new Configuration();
  final FileSystem fs=srcDesignFile.getFileSystem(conf);
  if (PathUtils.isFile(destDesignFile,conf))   throw new EoulsanIOException(""String_Node_Str"" + destDesignFile);
  final DesignReader dr=new SimpleDesignReader(fs.open(srcDesignFile));
  final Design design=dr.read();
  LogReader logReader=new LogReader(fs.open(new Path(srcDesignFile.getParent(),""String_Node_Str"")));
  final Reporter reporter=logReader.read();
  for (  String group : reporter.getCounterGroups()) {
    final int pos1=group.indexOf('(');
    final int pos2=group.indexOf(',');
    if (pos1 == -1 || pos2 == -1)     continue;
    final String sample=group.substring(pos1 + 1,pos2).trim();
    final long inputReads=reporter.getCounterValue(group,""String_Node_Str"");
    final long oneLocus=reporter.getCounterValue(group,""String_Node_Str"");
    final double ratio=(double)oneLocus / (double)inputReads;
    logger.info(""String_Node_Str"" + sample + ""String_Node_Str""+ oneLocus+ ""String_Node_Str""+ inputReads+ ""String_Node_Str""+ ratio+ ""String_Node_Str""+ threshold);
    if (ratio < threshold) {
      design.removeSample(sample);
      logger.info(""String_Node_Str"" + sample);
    }
  }
  DesignWriter writer=new SimpleDesignWriter(fs.create(destDesignFile));
  writer.write(design);
}","private static void filterSamples(final Path srcDesignFile,final Path destDesignFile,final double threshold) throws IOException, EoulsanIOException {
  if (srcDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (destDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  final Configuration conf=new Configuration();
  final FileSystem fs=srcDesignFile.getFileSystem(conf);
  if (PathUtils.isFile(destDesignFile,conf))   throw new EoulsanIOException(""String_Node_Str"" + destDesignFile);
  final DesignReader dr=new SimpleDesignReader(fs.open(srcDesignFile));
  final Design design=dr.read();
  LogReader logReader=new LogReader(fs.open(new Path(srcDesignFile.getParent(),""String_Node_Str"")));
  final Reporter reporter=logReader.read();
  for (  String group : reporter.getCounterGroups()) {
    final int pos1=group.indexOf('(');
    final int pos2=group.indexOf(',');
    if (pos1 == -1 || pos2 == -1)     continue;
    final String sample=group.substring(pos1 + 1,pos2).trim();
    final long inputReads=reporter.getCounterValue(group,Common.SOAP_INPUT_READS_COUNTER);
    final long oneLocus=reporter.getCounterValue(group,Common.SOAP_ALIGNEMENT_WITH_ONLY_ONE_HIT_COUNTER);
    final double ratio=(double)oneLocus / (double)inputReads;
    logger.info(""String_Node_Str"" + sample + ""String_Node_Str""+ oneLocus+ ""String_Node_Str""+ inputReads+ ""String_Node_Str""+ ratio+ ""String_Node_Str""+ threshold);
    if (ratio < threshold) {
      design.removeSample(sample);
      logger.info(""String_Node_Str"" + sample);
    }
  }
  DesignWriter writer=new SimpleDesignWriter(fs.create(destDesignFile));
  writer.write(design);
}",0.9656430525995744
141417,"private final void parseSOAPResults(final File resultFile,final File unmapFile,final OutputCollector<Text,Text> collector,final Reporter reporter) throws IOException {
  String line;
  final Text outKey=new Text();
  final Text outValue=new Text();
  final BufferedReader readerResults=FileUtils.createBufferedReader(resultFile);
  final AlignResult aln=new AlignResult();
  String lastSequenceId=null;
  while ((line=readerResults.readLine()) != null) {
    final String trimmedLine=line.trim();
    if (""String_Node_Str"".equals(trimmedLine))     continue;
    aln.parseResultLine(trimmedLine);
    reporter.incrCounter(this.counterGroup,""String_Node_Str"",1);
    final String currentSequenceId=aln.getSequenceId();
    if (aln.getNumberOfHits() == 1) {
      outKey.set(aln.getSequenceId());
      outValue.set(StringUtils.subStringAfterFirstTab(line));
      collector.collect(outKey,outValue);
      reporter.incrCounter(this.counterGroup,""String_Node_Str"",1);
    }
 else     if (currentSequenceId != null && (!currentSequenceId.equals(lastSequenceId)))     reporter.incrCounter(this.counterGroup,""String_Node_Str"",1);
    lastSequenceId=currentSequenceId;
  }
  readerResults.close();
  final BufferedReader readerUnmap=FileUtils.createBufferedReader(unmapFile);
  int countUnMap=0;
  while ((line=readerUnmap.readLine()) != null)   if (line.trim().startsWith(""String_Node_Str""))   countUnMap++;
  readerUnmap.close();
  reporter.incrCounter(this.counterGroup,""String_Node_Str"",countUnMap);
  final Path unmapPath=new Path(this.unmapFilesDirPath,unmapFile.getName());
  PathUtils.copyLocalFileToPath(unmapFile,unmapPath,true,this.conf);
}","private final void parseSOAPResults(final File resultFile,final File unmapFile,final OutputCollector<Text,Text> collector,final Reporter reporter) throws IOException {
  String line;
  final Text outKey=new Text();
  final Text outValue=new Text();
  final BufferedReader readerResults=FileUtils.createBufferedReader(resultFile);
  final AlignResult aln=new AlignResult();
  String lastSequenceId=null;
  while ((line=readerResults.readLine()) != null) {
    final String trimmedLine=line.trim();
    if (""String_Node_Str"".equals(trimmedLine))     continue;
    aln.parseResultLine(trimmedLine);
    reporter.incrCounter(this.counterGroup,""String_Node_Str"",1);
    final String currentSequenceId=aln.getSequenceId();
    if (aln.getNumberOfHits() == 1) {
      outKey.set(aln.getSequenceId());
      outValue.set(StringUtils.subStringAfterFirstTab(line));
      collector.collect(outKey,outValue);
      reporter.incrCounter(this.counterGroup,Common.SOAP_ALIGNEMENT_WITH_ONLY_ONE_HIT_COUNTER,1);
    }
 else     if (currentSequenceId != null && (!currentSequenceId.equals(lastSequenceId)))     reporter.incrCounter(this.counterGroup,""String_Node_Str"",1);
    lastSequenceId=currentSequenceId;
  }
  readerResults.close();
  final BufferedReader readerUnmap=FileUtils.createBufferedReader(unmapFile);
  int countUnMap=0;
  while ((line=readerUnmap.readLine()) != null)   if (line.trim().startsWith(""String_Node_Str""))   countUnMap++;
  readerUnmap.close();
  reporter.incrCounter(this.counterGroup,""String_Node_Str"",countUnMap);
  final Path unmapPath=new Path(this.unmapFilesDirPath,unmapFile.getName());
  PathUtils.copyLocalFileToPath(unmapFile,unmapPath,true,this.conf);
}",0.709852365170232
141418,"protected final void writeRead(final ReadSequence readSequence,final OutputCollector<Text,Text> collector,final Reporter reporter) throws IOException {
  this.writer.write(readSequence.toFastQ());
  reporter.incrCounter(this.counterGroup,""String_Node_Str"",1);
  if (this.reporter == null && reporter != null)   this.reporter=reporter;
  if (this.collector == null && collector != null)   this.collector=collector;
}","protected final void writeRead(final ReadSequence readSequence,final OutputCollector<Text,Text> collector,final Reporter reporter) throws IOException {
  this.writer.write(readSequence.toFastQ());
  reporter.incrCounter(this.counterGroup,Common.SOAP_INPUT_READS_COUNTER,1);
  if (this.reporter == null && reporter != null)   this.reporter=reporter;
  if (this.collector == null && collector != null)   this.collector=collector;
}",0.9549763033175356
141419,"private static void filterSamples(final File srcDesignFile,final File destDesignFile,final double threshold) throws IOException, EoulsanIOException {
  if (srcDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (destDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (destDesignFile.exists())   throw new EoulsanIOException(""String_Node_Str"" + destDesignFile);
  final DesignReader dr=new SimpleDesignReader(srcDesignFile);
  final Design design=dr.read();
  LogReader logReader=new LogReader(new File(""String_Node_Str""));
  final Reporter filterReadsReporter=logReader.read();
  logReader=new LogReader(new File(""String_Node_Str""));
  final Reporter soapMapReadsReporter=logReader.read();
  final Map<String,Long> sampleInputMapReads=parseReporter(filterReadsReporter,""String_Node_Str"");
  final Map<String,Long> soapAlignementWithOneLocus=parseReporter(soapMapReadsReporter,""String_Node_Str"");
  for (  String sample : sampleInputMapReads.keySet()) {
    if (!soapAlignementWithOneLocus.containsKey(sample))     continue;
    final long inputReads=sampleInputMapReads.get(sample);
    final long oneLocus=soapAlignementWithOneLocus.get(sample);
    final double ratio=(double)oneLocus / (double)inputReads;
    logger.info(""String_Node_Str"" + sample + ""String_Node_Str""+ oneLocus+ ""String_Node_Str""+ inputReads+ ""String_Node_Str""+ ratio+ ""String_Node_Str""+ threshold);
    if (ratio < threshold) {
      design.removeSample(sample);
      logger.info(""String_Node_Str"" + sample);
    }
  }
  DesignWriter writer=new SimpleDesignWriter(destDesignFile);
  writer.write(design);
}","private static void filterSamples(final File srcDesignFile,final File destDesignFile,final double threshold) throws IOException, EoulsanIOException {
  if (srcDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (destDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (destDesignFile.exists())   throw new EoulsanIOException(""String_Node_Str"" + destDesignFile);
  final DesignReader dr=new SimpleDesignReader(srcDesignFile);
  final Design design=dr.read();
  LogReader logReader=new LogReader(new File(""String_Node_Str""));
  final Reporter filterReadsReporter=logReader.read();
  logReader=new LogReader(new File(""String_Node_Str""));
  final Reporter soapMapReadsReporter=logReader.read();
  final Map<String,Long> sampleInputMapReads=parseReporter(filterReadsReporter,Common.READS_AFTER_FILTERING_COUNTER);
  final Map<String,Long> soapAlignementWithOneLocus=parseReporter(soapMapReadsReporter,Common.SOAP_ALIGNEMENT_WITH_ONLY_ONE_HIT_COUNTER);
  for (  String sample : sampleInputMapReads.keySet()) {
    if (!soapAlignementWithOneLocus.containsKey(sample))     continue;
    final long inputReads=sampleInputMapReads.get(sample);
    final long oneLocus=soapAlignementWithOneLocus.get(sample);
    final double ratio=(double)oneLocus / (double)inputReads;
    logger.info(""String_Node_Str"" + sample + ""String_Node_Str""+ oneLocus+ ""String_Node_Str""+ inputReads+ ""String_Node_Str""+ ratio+ ""String_Node_Str""+ threshold);
    if (ratio < threshold) {
      design.removeSample(sample);
      logger.info(""String_Node_Str"" + sample);
    }
  }
  DesignWriter writer=new SimpleDesignWriter(destDesignFile);
  writer.write(design);
}",0.9643934821967411
141420,"/** 
 * Filter soap results to remove results with more than one hit
 * @param soapAlignFile SOAP alignment result file
 * @param soapAlignFilteredFile result file
 * @param reporter reporter that record events
 * @throws IOException if an error occurs while filtring data
 */
private static void filterSoapResult(final File soapAlignFile,final File soapAlignFilteredFile,final Reporter reporter) throws IOException {
  final BufferedReader readerResults=FileUtils.createBufferedReader(soapAlignFile);
  final BufferedWriter bw=new BufferedWriter(new FileWriter(soapAlignFilteredFile));
  final AlignResult aln=new AlignResult();
  String line=null;
  String lastSequenceId=null;
  while ((line=readerResults.readLine()) != null) {
    final String trimmedLine=line.trim();
    if (""String_Node_Str"".equals(trimmedLine))     continue;
    aln.parseResultLine(trimmedLine);
    reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
    final String currentSequenceId=aln.getSequenceId();
    if (aln.getNumberOfHits() == 1) {
      bw.write(line + ""String_Node_Str"");
      reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
    }
 else     if (currentSequenceId != null && (!currentSequenceId.equals(lastSequenceId)))     reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
    lastSequenceId=currentSequenceId;
  }
  readerResults.close();
  bw.close();
}","/** 
 * Filter soap results to remove results with more than one hit
 * @param soapAlignFile SOAP alignment result file
 * @param soapAlignFilteredFile result file
 * @param reporter reporter that record events
 * @throws IOException if an error occurs while filtring data
 */
private static void filterSoapResult(final File soapAlignFile,final File soapAlignFilteredFile,final Reporter reporter) throws IOException {
  final BufferedReader readerResults=FileUtils.createBufferedReader(soapAlignFile);
  final BufferedWriter bw=new BufferedWriter(new FileWriter(soapAlignFilteredFile));
  final AlignResult aln=new AlignResult();
  String line=null;
  String lastSequenceId=null;
  while ((line=readerResults.readLine()) != null) {
    final String trimmedLine=line.trim();
    if (""String_Node_Str"".equals(trimmedLine))     continue;
    aln.parseResultLine(trimmedLine);
    reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
    final String currentSequenceId=aln.getSequenceId();
    if (aln.getNumberOfHits() == 1) {
      bw.write(line + ""String_Node_Str"");
      reporter.incrCounter(COUNTER_GROUP,Common.SOAP_ALIGNEMENT_WITH_ONLY_ONE_HIT_COUNTER,1);
    }
 else     if (currentSequenceId != null && (!currentSequenceId.equals(lastSequenceId)))     reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
    lastSequenceId=currentSequenceId;
  }
  readerResults.close();
  bw.close();
}",0.8892096715987008
141421,"private static void filterSamples(final Path srcDesignFile,final Path destDesignFile,final double threshold) throws IOException, EoulsanIOException {
  if (srcDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (destDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  final Configuration conf=new Configuration();
  final FileSystem fs=srcDesignFile.getFileSystem(conf);
  if (PathUtils.isFile(destDesignFile,conf))   throw new EoulsanIOException(""String_Node_Str"" + destDesignFile);
  final DesignReader dr=new SimpleDesignReader(fs.open(srcDesignFile));
  final Design design=dr.read();
  LogReader logReader=new LogReader(fs.open(new Path(srcDesignFile.getParent(),""String_Node_Str"")));
  final Reporter reporter=logReader.read();
  for (  String group : reporter.getCounterGroups()) {
    final int pos1=group.indexOf('(');
    final int pos2=group.indexOf(',');
    if (pos1 == -1 || pos2 == -1)     continue;
    final String sample=group.substring(pos1 + 1,pos2).trim();
    final long inputReads=reporter.getCounterValue(group,""String_Node_Str"");
    final long oneLocus=reporter.getCounterValue(group,""String_Node_Str"");
    final double ratio=(double)oneLocus / (double)inputReads;
    logger.info(""String_Node_Str"" + sample + ""String_Node_Str""+ oneLocus+ ""String_Node_Str""+ inputReads+ ""String_Node_Str""+ ratio+ ""String_Node_Str""+ threshold);
    if (ratio < threshold) {
      design.removeSample(sample);
      logger.info(""String_Node_Str"" + sample);
    }
  }
  DesignWriter writer=new SimpleDesignWriter(fs.create(destDesignFile));
  writer.write(design);
}","private static void filterSamples(final Path srcDesignFile,final Path destDesignFile,final double threshold) throws IOException, EoulsanIOException {
  if (srcDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (destDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  final Configuration conf=new Configuration();
  final FileSystem fs=srcDesignFile.getFileSystem(conf);
  if (PathUtils.isFile(destDesignFile,conf))   throw new EoulsanIOException(""String_Node_Str"" + destDesignFile);
  final DesignReader dr=new SimpleDesignReader(fs.open(srcDesignFile));
  final Design design=dr.read();
  LogReader logReader=new LogReader(fs.open(new Path(srcDesignFile.getParent(),""String_Node_Str"")));
  final Reporter reporter=logReader.read();
  for (  String group : reporter.getCounterGroups()) {
    final int pos1=group.indexOf('(');
    final int pos2=group.indexOf(',');
    if (pos1 == -1 || pos2 == -1)     continue;
    final String sample=group.substring(pos1 + 1,pos2).trim();
    final long inputReads=reporter.getCounterValue(group,Common.SOAP_INPUT_READS_COUNTER);
    final long oneLocus=reporter.getCounterValue(group,Common.SOAP_ALIGNEMENT_WITH_ONLY_ONE_HIT_COUNTER);
    final double ratio=(double)oneLocus / (double)inputReads;
    logger.info(""String_Node_Str"" + sample + ""String_Node_Str""+ oneLocus+ ""String_Node_Str""+ inputReads+ ""String_Node_Str""+ ratio+ ""String_Node_Str""+ threshold);
    if (ratio < threshold) {
      design.removeSample(sample);
      logger.info(""String_Node_Str"" + sample);
    }
  }
  DesignWriter writer=new SimpleDesignWriter(fs.create(destDesignFile));
  writer.write(design);
}",0.9656430525995744
141422,"private final void parseSOAPResults(final File resultFile,final File unmapFile,final OutputCollector<Text,Text> collector,final Reporter reporter) throws IOException {
  String line;
  final Text outKey=new Text();
  final Text outValue=new Text();
  final BufferedReader readerResults=FileUtils.createBufferedReader(resultFile);
  final AlignResult aln=new AlignResult();
  String lastSequenceId=null;
  while ((line=readerResults.readLine()) != null) {
    final String trimmedLine=line.trim();
    if (""String_Node_Str"".equals(trimmedLine))     continue;
    aln.parseResultLine(trimmedLine);
    reporter.incrCounter(this.counterGroup,""String_Node_Str"",1);
    final String currentSequenceId=aln.getSequenceId();
    if (aln.getNumberOfHits() == 1) {
      outKey.set(aln.getSequenceId());
      outValue.set(StringUtils.subStringAfterFirstTab(line));
      collector.collect(outKey,outValue);
      reporter.incrCounter(this.counterGroup,""String_Node_Str"",1);
    }
 else     if (currentSequenceId != null && (!currentSequenceId.equals(lastSequenceId)))     reporter.incrCounter(this.counterGroup,""String_Node_Str"",1);
    lastSequenceId=currentSequenceId;
  }
  readerResults.close();
  final BufferedReader readerUnmap=FileUtils.createBufferedReader(unmapFile);
  int countUnMap=0;
  while ((line=readerUnmap.readLine()) != null)   if (line.trim().startsWith(""String_Node_Str""))   countUnMap++;
  readerUnmap.close();
  reporter.incrCounter(this.counterGroup,""String_Node_Str"",countUnMap);
  final Path unmapPath=new Path(this.unmapFilesDirPath,unmapFile.getName());
  PathUtils.copyLocalFileToPath(unmapFile,unmapPath,true,this.conf);
}","private final void parseSOAPResults(final File resultFile,final File unmapFile,final OutputCollector<Text,Text> collector,final Reporter reporter) throws IOException {
  String line;
  final Text outKey=new Text();
  final Text outValue=new Text();
  final BufferedReader readerResults=FileUtils.createBufferedReader(resultFile);
  final AlignResult aln=new AlignResult();
  String lastSequenceId=null;
  while ((line=readerResults.readLine()) != null) {
    final String trimmedLine=line.trim();
    if (""String_Node_Str"".equals(trimmedLine))     continue;
    aln.parseResultLine(trimmedLine);
    reporter.incrCounter(this.counterGroup,""String_Node_Str"",1);
    final String currentSequenceId=aln.getSequenceId();
    if (aln.getNumberOfHits() == 1) {
      outKey.set(aln.getSequenceId());
      outValue.set(StringUtils.subStringAfterFirstTab(line));
      collector.collect(outKey,outValue);
      reporter.incrCounter(this.counterGroup,Common.SOAP_ALIGNEMENT_WITH_ONLY_ONE_HIT_COUNTER,1);
    }
 else     if (currentSequenceId != null && (!currentSequenceId.equals(lastSequenceId)))     reporter.incrCounter(this.counterGroup,""String_Node_Str"",1);
    lastSequenceId=currentSequenceId;
  }
  readerResults.close();
  final BufferedReader readerUnmap=FileUtils.createBufferedReader(unmapFile);
  int countUnMap=0;
  while ((line=readerUnmap.readLine()) != null)   if (line.trim().startsWith(""String_Node_Str""))   countUnMap++;
  readerUnmap.close();
  reporter.incrCounter(this.counterGroup,""String_Node_Str"",countUnMap);
  final Path unmapPath=new Path(this.unmapFilesDirPath,unmapFile.getName());
  PathUtils.copyLocalFileToPath(unmapFile,unmapPath,true,this.conf);
}",0.709852365170232
141423,"protected final void writeRead(final ReadSequence readSequence,final OutputCollector<Text,Text> collector,final Reporter reporter) throws IOException {
  this.writer.write(readSequence.toFastQ());
  reporter.incrCounter(this.counterGroup,""String_Node_Str"",1);
  if (this.reporter == null && reporter != null)   this.reporter=reporter;
  if (this.collector == null && collector != null)   this.collector=collector;
}","protected final void writeRead(final ReadSequence readSequence,final OutputCollector<Text,Text> collector,final Reporter reporter) throws IOException {
  this.writer.write(readSequence.toFastQ());
  reporter.incrCounter(this.counterGroup,Common.SOAP_INPUT_READS_COUNTER,1);
  if (this.reporter == null && reporter != null)   this.reporter=reporter;
  if (this.collector == null && collector != null)   this.collector=collector;
}",0.9549763033175356
141424,"private static void filterSamples(final File srcDesignFile,final File destDesignFile,final double threshold) throws IOException, EoulsanIOException {
  if (srcDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (destDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (destDesignFile.exists())   throw new EoulsanIOException(""String_Node_Str"" + destDesignFile);
  final DesignReader dr=new SimpleDesignReader(srcDesignFile);
  final Design design=dr.read();
  LogReader logReader=new LogReader(new File(""String_Node_Str""));
  final Reporter filterReadsReporter=logReader.read();
  logReader=new LogReader(new File(""String_Node_Str""));
  final Reporter soapMapReadsReporter=logReader.read();
  final Map<String,Long> sampleInputMapReads=parseReporter(filterReadsReporter,""String_Node_Str"");
  final Map<String,Long> soapAlignementWithOneLocus=parseReporter(soapMapReadsReporter,""String_Node_Str"");
  for (  String sample : sampleInputMapReads.keySet()) {
    if (!soapAlignementWithOneLocus.containsKey(sample))     continue;
    final long inputReads=sampleInputMapReads.get(sample);
    final long oneLocus=soapAlignementWithOneLocus.get(sample);
    final double ratio=(double)oneLocus / (double)inputReads;
    logger.info(""String_Node_Str"" + sample + ""String_Node_Str""+ oneLocus+ ""String_Node_Str""+ inputReads+ ""String_Node_Str""+ ratio+ ""String_Node_Str""+ threshold);
    if (ratio < threshold) {
      design.removeSample(sample);
      logger.info(""String_Node_Str"" + sample);
    }
  }
  DesignWriter writer=new SimpleDesignWriter(destDesignFile);
  writer.write(design);
}","private static void filterSamples(final File srcDesignFile,final File destDesignFile,final double threshold) throws IOException, EoulsanIOException {
  if (srcDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (destDesignFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (destDesignFile.exists())   throw new EoulsanIOException(""String_Node_Str"" + destDesignFile);
  final DesignReader dr=new SimpleDesignReader(srcDesignFile);
  final Design design=dr.read();
  LogReader logReader=new LogReader(new File(""String_Node_Str""));
  final Reporter filterReadsReporter=logReader.read();
  logReader=new LogReader(new File(""String_Node_Str""));
  final Reporter soapMapReadsReporter=logReader.read();
  final Map<String,Long> sampleInputMapReads=parseReporter(filterReadsReporter,Common.READS_AFTER_FILTERING_COUNTER);
  final Map<String,Long> soapAlignementWithOneLocus=parseReporter(soapMapReadsReporter,Common.SOAP_ALIGNEMENT_WITH_ONLY_ONE_HIT_COUNTER);
  for (  String sample : sampleInputMapReads.keySet()) {
    if (!soapAlignementWithOneLocus.containsKey(sample))     continue;
    final long inputReads=sampleInputMapReads.get(sample);
    final long oneLocus=soapAlignementWithOneLocus.get(sample);
    final double ratio=(double)oneLocus / (double)inputReads;
    logger.info(""String_Node_Str"" + sample + ""String_Node_Str""+ oneLocus+ ""String_Node_Str""+ inputReads+ ""String_Node_Str""+ ratio+ ""String_Node_Str""+ threshold);
    if (ratio < threshold) {
      design.removeSample(sample);
      logger.info(""String_Node_Str"" + sample);
    }
  }
  DesignWriter writer=new SimpleDesignWriter(destDesignFile);
  writer.write(design);
}",0.9643934821967411
141425,"/** 
 * Filter soap results to remove results with more than one hit
 * @param soapAlignFile SOAP alignment result file
 * @param soapAlignFilteredFile result file
 * @param reporter reporter that record events
 * @throws IOException if an error occurs while filtring data
 */
private static void filterSoapResult(final File soapAlignFile,final File soapAlignFilteredFile,final Reporter reporter) throws IOException {
  final BufferedReader readerResults=FileUtils.createBufferedReader(soapAlignFile);
  final BufferedWriter bw=new BufferedWriter(new FileWriter(soapAlignFilteredFile));
  final AlignResult aln=new AlignResult();
  String line=null;
  String lastSequenceId=null;
  while ((line=readerResults.readLine()) != null) {
    final String trimmedLine=line.trim();
    if (""String_Node_Str"".equals(trimmedLine))     continue;
    aln.parseResultLine(trimmedLine);
    reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
    final String currentSequenceId=aln.getSequenceId();
    if (aln.getNumberOfHits() == 1) {
      bw.write(line + ""String_Node_Str"");
      reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
    }
 else     if (currentSequenceId != null && (!currentSequenceId.equals(lastSequenceId)))     reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
    lastSequenceId=currentSequenceId;
  }
  readerResults.close();
  bw.close();
}","/** 
 * Filter soap results to remove results with more than one hit
 * @param soapAlignFile SOAP alignment result file
 * @param soapAlignFilteredFile result file
 * @param reporter reporter that record events
 * @throws IOException if an error occurs while filtring data
 */
private static void filterSoapResult(final File soapAlignFile,final File soapAlignFilteredFile,final Reporter reporter) throws IOException {
  final BufferedReader readerResults=FileUtils.createBufferedReader(soapAlignFile);
  final BufferedWriter bw=new BufferedWriter(new FileWriter(soapAlignFilteredFile));
  final AlignResult aln=new AlignResult();
  String line=null;
  String lastSequenceId=null;
  while ((line=readerResults.readLine()) != null) {
    final String trimmedLine=line.trim();
    if (""String_Node_Str"".equals(trimmedLine))     continue;
    aln.parseResultLine(trimmedLine);
    reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
    final String currentSequenceId=aln.getSequenceId();
    if (aln.getNumberOfHits() == 1) {
      bw.write(line + ""String_Node_Str"");
      reporter.incrCounter(COUNTER_GROUP,Common.SOAP_ALIGNEMENT_WITH_ONLY_ONE_HIT_COUNTER,1);
    }
 else     if (currentSequenceId != null && (!currentSequenceId.equals(lastSequenceId)))     reporter.incrCounter(COUNTER_GROUP,""String_Node_Str"",1);
    lastSequenceId=currentSequenceId;
  }
  readerResults.close();
  bw.close();
}",0.8892096715987008
141426,"private void writeLoadData(final StringBuilder sb,final List<Integer> rSampleIds,final List<String> rSampleNames,final List<Integer> rCondIndexes,final List<String> rCondNames){
  boolean first=true;
  for (int i=0; i < rSampleIds.size(); i++) {
    sb.append(""String_Node_Str"");
    sb.append(i + 1);
    sb.append(""String_Node_Str"");
    sb.append(StringUtils.bashEscaping(this.expressionFilesDirectory.getAbsolutePath()));
    sb.append(""String_Node_Str"");
    sb.append(rSampleIds.get(i));
    sb.append(""String_Node_Str"");
    if (first)     first=false;
 else {
      sb.append(""String_Node_Str"");
      sb.append(rSampleIds.get(i));
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    sb.append(rSampleNames.get(i));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  first=true;
  for (  String c : rCondNames) {
    if (first)     first=false;
 else     sb.append(',');
    sb.append('""');
    sb.append(c);
    sb.append('""');
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  first=true;
  for (  int i : rCondIndexes) {
    if (first)     first=false;
 else     sb.append(',');
    sb.append(i);
  }
  sb.append(""String_Node_Str"");
}","private void writeLoadData(final StringBuilder sb,final List<Integer> rSampleIds,final List<String> rSampleNames,final List<Integer> rCondIndexes,final List<String> rCondNames){
  boolean first=true;
  for (int i=0; i < rSampleIds.size(); i++) {
    sb.append(""String_Node_Str"");
    sb.append(i + 1);
    sb.append(""String_Node_Str"");
    sb.append(StringUtils.bashEscaping(this.expressionFilesDirectory.getAbsolutePath()));
    sb.append(""String_Node_Str"");
    sb.append(rSampleIds.get(i));
    sb.append(""String_Node_Str"");
    if (first)     first=false;
 else {
      sb.append(""String_Node_Str"");
      sb.append(i + 1);
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    sb.append(rSampleNames.get(i));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  first=true;
  for (  String c : rCondNames) {
    if (first)     first=false;
 else     sb.append(',');
    sb.append('""');
    sb.append(c);
    sb.append('""');
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  first=true;
  for (  int i : rCondIndexes) {
    if (first)     first=false;
 else     sb.append(',');
    sb.append(i);
  }
  sb.append(""String_Node_Str"");
}",0.991691842900302
141427,"private void writeLoadData(final StringBuilder sb,final List<Integer> rSampleIds,final List<String> rSampleNames,final List<Integer> rCondIndexes,final List<String> rCondNames){
  boolean first=true;
  for (int i=0; i < rSampleIds.size(); i++) {
    sb.append(""String_Node_Str"");
    sb.append(i + 1);
    sb.append(""String_Node_Str"");
    sb.append(StringUtils.bashEscaping(this.expressionFilesDirectory.getAbsolutePath()));
    sb.append(""String_Node_Str"");
    sb.append(rSampleIds.get(i));
    sb.append(""String_Node_Str"");
    if (first)     first=false;
 else {
      sb.append(""String_Node_Str"");
      sb.append(rSampleIds.get(i));
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    sb.append(rSampleNames.get(i));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  first=true;
  for (  String c : rCondNames) {
    if (first)     first=false;
 else     sb.append(',');
    sb.append('""');
    sb.append(c);
    sb.append('""');
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  first=true;
  for (  int i : rCondIndexes) {
    if (first)     first=false;
 else     sb.append(',');
    sb.append(i);
  }
  sb.append(""String_Node_Str"");
}","private void writeLoadData(final StringBuilder sb,final List<Integer> rSampleIds,final List<String> rSampleNames,final List<Integer> rCondIndexes,final List<String> rCondNames){
  boolean first=true;
  for (int i=0; i < rSampleIds.size(); i++) {
    sb.append(""String_Node_Str"");
    sb.append(i + 1);
    sb.append(""String_Node_Str"");
    sb.append(StringUtils.bashEscaping(this.expressionFilesDirectory.getAbsolutePath()));
    sb.append(""String_Node_Str"");
    sb.append(rSampleIds.get(i));
    sb.append(""String_Node_Str"");
    if (first)     first=false;
 else {
      sb.append(""String_Node_Str"");
      sb.append(i + 1);
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    sb.append(rSampleNames.get(i));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"" + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  first=true;
  for (  String c : rCondNames) {
    if (first)     first=false;
 else     sb.append(',');
    sb.append('""');
    sb.append(c);
    sb.append('""');
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  first=true;
  for (  int i : rCondIndexes) {
    if (first)     first=false;
 else     sb.append(',');
    sb.append(i);
  }
  sb.append(""String_Node_Str"");
}",0.991691842900302
141428,"@Override public Design read() throws EoulsanIOException {
  Map<String,List<String>> data=new HashMap<String,List<String>>();
  List<String> fieldnames=new ArrayList<String>();
  try {
    setBufferedReader(new BufferedReader(new InputStreamReader(getInputStream(),Globals.DEFAULT_FILE_ENCODING)));
    BufferedReader br=getBufferedReader();
    final String separator=getSeparatorField();
    String line=null;
    boolean firstLine=true;
    while ((line=br.readLine()) != null) {
      final String empty=line.trim();
      if (""String_Node_Str"".equals(empty) || empty.startsWith(""String_Node_Str""))       continue;
      final String[] fields=line.split(separator);
      if (firstLine) {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          data.put(field,new ArrayList<String>());
          fieldnames.add(field);
        }
        firstLine=false;
      }
 else {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          final String fieldName=fieldnames.get(i);
          List<String> l=data.get(fieldName);
          if ((SLIDENUMBER_FIELD.equals(fieldName) || NAME_FIELD.equals(fieldName)) && l.contains(field))           throw new EoulsanIOException(""String_Node_Str"" + ""String_Node_Str"");
          l.add(field);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"");
  }
  try {
    getBufferedReader().close();
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"" + e.getMessage());
  }
  if (!data.containsKey(SLIDENUMBER_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  if (!data.containsKey(FILENAME_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  Design design=DesignFactory.createEmptyDesign();
  boolean refName=data.containsKey(NAME_FIELD);
  List<String> ids=data.get(refName ? NAME_FIELD : SLIDENUMBER_FIELD);
  final int count=ids.size();
  for (  final String id : ids)   design.addSample(id);
  if (refName) {
    design.addMetadataField(SampleMetadata.SLIDE_NUMBER_FIELD);
    List<String> slides=data.get(SLIDENUMBER_FIELD);
    for (int i=0; i < count; i++) {
      design.getSampleMetadata(ids.get(i)).setSlideNumber(Integer.parseInt(slides.get(i)));
      design.getSample(ids.get(i)).setId(Integer.parseInt(slides.get(i)));
    }
  }
  List<String> filenames=data.get(FILENAME_FIELD);
  for (int i=0; i < count; i++) {
    DataSource source=DataSourceUtils.identifyDataSource(this.baseDir,filenames.get(i));
    design.setSource(ids.get(i),source.toString());
  }
  for (  String fd : fieldnames) {
    if (SLIDENUMBER_FIELD.equals(fd) || NAME_FIELD.equals(fd) || FILENAME_FIELD.equals(fd))     continue;
    design.addMetadataField(fd);
    List<String> descriptions=data.get(fd);
    int k=0;
    for (    String desc : descriptions)     design.setMetadata(ids.get(k++),fd,desc);
  }
  return design;
}","@Override public Design read() throws EoulsanIOException {
  Map<String,List<String>> data=new HashMap<String,List<String>>();
  List<String> fieldnames=new ArrayList<String>();
  try {
    setBufferedReader(new BufferedReader(new InputStreamReader(getInputStream(),Globals.DEFAULT_FILE_ENCODING)));
    BufferedReader br=getBufferedReader();
    final String separator=getSeparatorField();
    String line=null;
    boolean firstLine=true;
    while ((line=br.readLine()) != null) {
      final String empty=line.trim();
      if (""String_Node_Str"".equals(empty) || empty.startsWith(""String_Node_Str""))       continue;
      final String[] fields=line.split(separator);
      if (firstLine) {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          data.put(field,new ArrayList<String>());
          fieldnames.add(field);
        }
        firstLine=false;
      }
 else {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          final String fieldName=fieldnames.get(i);
          List<String> l=data.get(fieldName);
          if ((SLIDENUMBER_FIELD.equals(fieldName) || NAME_FIELD.equals(fieldName)) && l.contains(field))           throw new EoulsanIOException(""String_Node_Str"" + ""String_Node_Str"");
          l.add(field);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"");
  }
  try {
    getBufferedReader().close();
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"" + e.getMessage());
  }
  if (!data.containsKey(SLIDENUMBER_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  if (!data.containsKey(FILENAME_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  Design design=DesignFactory.createEmptyDesign();
  List<String> names=data.get(NAME_FIELD);
  List<String> ids=data.get(SLIDENUMBER_FIELD);
  final int count=ids.size();
  for (int i=0; i < names.size(); i++) {
    final String name=names.get(i);
    design.addSample(name);
    design.getSample(name).setId(Integer.parseInt(ids.get(i)));
  }
  List<String> filenames=data.get(FILENAME_FIELD);
  for (int i=0; i < count; i++) {
    DataSource source=DataSourceUtils.identifyDataSource(this.baseDir,filenames.get(i));
    design.setSource(names.get(i),source.toString());
  }
  for (  String fd : fieldnames) {
    if (SLIDENUMBER_FIELD.equals(fd) || NAME_FIELD.equals(fd) || FILENAME_FIELD.equals(fd))     continue;
    design.addMetadataField(fd);
    List<String> descriptions=data.get(fd);
    int k=0;
    for (    String desc : descriptions)     design.setMetadata(names.get(k++),fd,desc);
  }
  return design;
}",0.7252396166134185
141429,"@Override public Design read() throws EoulsanIOException {
  Map<String,List<String>> data=new HashMap<String,List<String>>();
  List<String> fieldnames=new ArrayList<String>();
  try {
    setBufferedReader(new BufferedReader(new InputStreamReader(getInputStream(),Globals.DEFAULT_FILE_ENCODING)));
    BufferedReader br=getBufferedReader();
    final String separator=getSeparatorField();
    String line=null;
    boolean firstLine=true;
    while ((line=br.readLine()) != null) {
      final String empty=line.trim();
      if (""String_Node_Str"".equals(empty) || empty.startsWith(""String_Node_Str""))       continue;
      final String[] fields=line.split(separator);
      if (firstLine) {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          data.put(field,new ArrayList<String>());
          fieldnames.add(field);
        }
        firstLine=false;
      }
 else {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          final String fieldName=fieldnames.get(i);
          List<String> l=data.get(fieldName);
          if ((SLIDENUMBER_FIELD.equals(fieldName) || NAME_FIELD.equals(fieldName)) && l.contains(field))           throw new EoulsanIOException(""String_Node_Str"" + ""String_Node_Str"");
          l.add(field);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"");
  }
  try {
    getBufferedReader().close();
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"" + e.getMessage());
  }
  if (!data.containsKey(SLIDENUMBER_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  if (!data.containsKey(FILENAME_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  Design design=DesignFactory.createEmptyDesign();
  boolean refName=data.containsKey(NAME_FIELD);
  List<String> ids=data.get(refName ? NAME_FIELD : SLIDENUMBER_FIELD);
  final int count=ids.size();
  for (  final String id : ids)   design.addSample(id);
  if (refName) {
    design.addMetadataField(SampleMetadata.SLIDE_NUMBER_FIELD);
    List<String> slides=data.get(SLIDENUMBER_FIELD);
    for (int i=0; i < count; i++) {
      design.getSampleMetadata(ids.get(i)).setSlideNumber(Integer.parseInt(slides.get(i)));
      design.getSample(ids.get(i)).setId(Integer.parseInt(slides.get(i)));
    }
  }
  List<String> filenames=data.get(FILENAME_FIELD);
  for (int i=0; i < count; i++) {
    DataSource source=DataSourceUtils.identifyDataSource(this.baseDir,filenames.get(i));
    design.setSource(ids.get(i),source.toString());
  }
  for (  String fd : fieldnames) {
    if (SLIDENUMBER_FIELD.equals(fd) || NAME_FIELD.equals(fd) || FILENAME_FIELD.equals(fd))     continue;
    design.addMetadataField(fd);
    List<String> descriptions=data.get(fd);
    int k=0;
    for (    String desc : descriptions)     design.setMetadata(ids.get(k++),fd,desc);
  }
  return design;
}","@Override public Design read() throws EoulsanIOException {
  Map<String,List<String>> data=new HashMap<String,List<String>>();
  List<String> fieldnames=new ArrayList<String>();
  try {
    setBufferedReader(new BufferedReader(new InputStreamReader(getInputStream(),Globals.DEFAULT_FILE_ENCODING)));
    BufferedReader br=getBufferedReader();
    final String separator=getSeparatorField();
    String line=null;
    boolean firstLine=true;
    while ((line=br.readLine()) != null) {
      final String empty=line.trim();
      if (""String_Node_Str"".equals(empty) || empty.startsWith(""String_Node_Str""))       continue;
      final String[] fields=line.split(separator);
      if (firstLine) {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          data.put(field,new ArrayList<String>());
          fieldnames.add(field);
        }
        firstLine=false;
      }
 else {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          final String fieldName=fieldnames.get(i);
          List<String> l=data.get(fieldName);
          if ((SLIDENUMBER_FIELD.equals(fieldName) || NAME_FIELD.equals(fieldName)) && l.contains(field))           throw new EoulsanIOException(""String_Node_Str"" + ""String_Node_Str"");
          l.add(field);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"");
  }
  try {
    getBufferedReader().close();
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"" + e.getMessage());
  }
  if (!data.containsKey(SLIDENUMBER_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  if (!data.containsKey(FILENAME_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  Design design=DesignFactory.createEmptyDesign();
  List<String> names=data.get(NAME_FIELD);
  List<String> ids=data.get(SLIDENUMBER_FIELD);
  final int count=ids.size();
  for (int i=0; i < names.size(); i++) {
    final String name=names.get(i);
    design.addSample(name);
    design.getSample(name).setId(Integer.parseInt(ids.get(i)));
  }
  List<String> filenames=data.get(FILENAME_FIELD);
  for (int i=0; i < count; i++) {
    DataSource source=DataSourceUtils.identifyDataSource(this.baseDir,filenames.get(i));
    design.setSource(names.get(i),source.toString());
  }
  for (  String fd : fieldnames) {
    if (SLIDENUMBER_FIELD.equals(fd) || NAME_FIELD.equals(fd) || FILENAME_FIELD.equals(fd))     continue;
    design.addMetadataField(fd);
    List<String> descriptions=data.get(fd);
    int k=0;
    for (    String desc : descriptions)     design.setMetadata(names.get(k++),fd,desc);
  }
  return design;
}",0.7252396166134185
141430,"@Override public Design read() throws EoulsanIOException {
  Map<String,List<String>> data=new HashMap<String,List<String>>();
  List<String> fieldnames=new ArrayList<String>();
  try {
    setBufferedReader(new BufferedReader(new InputStreamReader(getInputStream(),Globals.DEFAULT_FILE_ENCODING)));
    BufferedReader br=getBufferedReader();
    final String separator=getSeparatorField();
    String line=null;
    boolean firstLine=true;
    while ((line=br.readLine()) != null) {
      final String empty=line.trim();
      if (""String_Node_Str"".equals(empty) || empty.startsWith(""String_Node_Str""))       continue;
      final String[] fields=line.split(separator);
      if (firstLine) {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          data.put(field,new ArrayList<String>());
          fieldnames.add(field);
        }
        firstLine=false;
      }
 else {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          final String fieldName=fieldnames.get(i);
          List<String> l=data.get(fieldName);
          if ((SLIDENUMBER_FIELD.equals(fieldName) || NAME_FIELD.equals(fieldName)) && l.contains(field))           throw new EoulsanIOException(""String_Node_Str"" + ""String_Node_Str"");
          l.add(field);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"");
  }
  try {
    getBufferedReader().close();
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"" + e.getMessage());
  }
  if (!data.containsKey(SLIDENUMBER_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  if (!data.containsKey(FILENAME_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  Design design=DesignFactory.createEmptyDesign();
  boolean refName=data.containsKey(NAME_FIELD);
  List<String> ids=data.get(refName ? NAME_FIELD : SLIDENUMBER_FIELD);
  final int count=ids.size();
  for (  final String id : ids)   design.addSample(id);
  if (refName) {
    design.addMetadataField(SampleMetadata.SLIDE_NUMBER_FIELD);
    List<String> slides=data.get(SLIDENUMBER_FIELD);
    for (int i=0; i < count; i++)     design.getSampleMetadata(ids.get(i)).setSlideNumber(Integer.parseInt(slides.get(i)));
  }
  List<String> filenames=data.get(FILENAME_FIELD);
  for (int i=0; i < count; i++) {
    DataSource source=DataSourceUtils.identifyDataSource(this.baseDir,filenames.get(i));
    design.setSource(ids.get(i),source);
  }
  for (  String fd : fieldnames) {
    if (SLIDENUMBER_FIELD.equals(fd) || NAME_FIELD.equals(fd) || FILENAME_FIELD.equals(fd))     continue;
    design.addMetadataField(fd);
    List<String> descriptions=data.get(fd);
    int k=0;
    for (    String desc : descriptions)     design.setMetadata(ids.get(k++),fd,desc);
  }
  return design;
}","@Override public Design read() throws EoulsanIOException {
  Map<String,List<String>> data=new HashMap<String,List<String>>();
  List<String> fieldnames=new ArrayList<String>();
  try {
    setBufferedReader(new BufferedReader(new InputStreamReader(getInputStream(),Globals.DEFAULT_FILE_ENCODING)));
    BufferedReader br=getBufferedReader();
    final String separator=getSeparatorField();
    String line=null;
    boolean firstLine=true;
    while ((line=br.readLine()) != null) {
      final String empty=line.trim();
      if (""String_Node_Str"".equals(empty) || empty.startsWith(""String_Node_Str""))       continue;
      final String[] fields=line.split(separator);
      if (firstLine) {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          data.put(field,new ArrayList<String>());
          fieldnames.add(field);
        }
        firstLine=false;
      }
 else {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          final String fieldName=fieldnames.get(i);
          List<String> l=data.get(fieldName);
          if ((SLIDENUMBER_FIELD.equals(fieldName) || NAME_FIELD.equals(fieldName)) && l.contains(field))           throw new EoulsanIOException(""String_Node_Str"" + ""String_Node_Str"");
          l.add(field);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"");
  }
  try {
    getBufferedReader().close();
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"" + e.getMessage());
  }
  if (!data.containsKey(SLIDENUMBER_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  if (!data.containsKey(FILENAME_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  Design design=DesignFactory.createEmptyDesign();
  boolean refName=data.containsKey(NAME_FIELD);
  List<String> ids=data.get(refName ? NAME_FIELD : SLIDENUMBER_FIELD);
  final int count=ids.size();
  for (  final String id : ids)   design.addSample(id);
  if (refName) {
    design.addMetadataField(SampleMetadata.SLIDE_NUMBER_FIELD);
    List<String> slides=data.get(SLIDENUMBER_FIELD);
    for (int i=0; i < count; i++)     design.getSampleMetadata(ids.get(i)).setSlideNumber(Integer.parseInt(slides.get(i)));
  }
  List<String> filenames=data.get(FILENAME_FIELD);
  for (int i=0; i < count; i++) {
    DataSource source=DataSourceUtils.identifyDataSource(this.baseDir,filenames.get(i));
    design.setSource(ids.get(i),source.toString());
  }
  for (  String fd : fieldnames) {
    if (SLIDENUMBER_FIELD.equals(fd) || NAME_FIELD.equals(fd) || FILENAME_FIELD.equals(fd))     continue;
    design.addMetadataField(fd);
    List<String> descriptions=data.get(fd);
    int k=0;
    for (    String desc : descriptions)     design.setMetadata(ids.get(k++),fd,desc);
  }
  return design;
}",0.9980725424916768
141431,"@Override public Design read() throws EoulsanIOException {
  Map<String,List<String>> data=new HashMap<String,List<String>>();
  List<String> fieldnames=new ArrayList<String>();
  try {
    setBufferedReader(new BufferedReader(new InputStreamReader(getInputStream(),Globals.DEFAULT_FILE_ENCODING)));
    BufferedReader br=getBufferedReader();
    final String separator=getSeparatorField();
    String line=null;
    boolean firstLine=true;
    while ((line=br.readLine()) != null) {
      final String empty=line.trim();
      if (""String_Node_Str"".equals(empty) || empty.startsWith(""String_Node_Str""))       continue;
      final String[] fields=line.split(separator);
      if (firstLine) {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          data.put(field,new ArrayList<String>());
          fieldnames.add(field);
        }
        firstLine=false;
      }
 else {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          final String fieldName=fieldnames.get(i);
          List<String> l=data.get(fieldName);
          if ((SLIDENUMBER_FIELD.equals(fieldName) || NAME_FIELD.equals(fieldName)) && l.contains(field))           throw new EoulsanIOException(""String_Node_Str"" + ""String_Node_Str"");
          l.add(field);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"");
  }
  try {
    getBufferedReader().close();
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"" + e.getMessage());
  }
  if (!data.containsKey(SLIDENUMBER_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  if (!data.containsKey(FILENAME_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  Design design=DesignFactory.createEmptyDesign();
  boolean refName=data.containsKey(NAME_FIELD);
  List<String> ids=data.get(refName ? NAME_FIELD : SLIDENUMBER_FIELD);
  final int count=ids.size();
  for (  final String id : ids)   design.addSample(id);
  if (refName) {
    design.addMetadataField(SampleMetadata.SLIDE_NUMBER_FIELD);
    List<String> slides=data.get(SLIDENUMBER_FIELD);
    for (int i=0; i < count; i++)     design.getSampleMetadata(ids.get(i)).setSlideNumber(Integer.parseInt(slides.get(i)));
  }
  List<String> filenames=data.get(FILENAME_FIELD);
  for (int i=0; i < count; i++) {
    DataSource source=DataSourceUtils.identifyDataSource(this.baseDir,filenames.get(i));
    design.setSource(ids.get(i),source);
  }
  for (  String fd : fieldnames) {
    if (SLIDENUMBER_FIELD.equals(fd) || NAME_FIELD.equals(fd) || FILENAME_FIELD.equals(fd))     continue;
    design.addMetadataField(fd);
    List<String> descriptions=data.get(fd);
    int k=0;
    for (    String desc : descriptions)     design.setMetadata(ids.get(k++),fd,desc);
  }
  return design;
}","@Override public Design read() throws EoulsanIOException {
  Map<String,List<String>> data=new HashMap<String,List<String>>();
  List<String> fieldnames=new ArrayList<String>();
  try {
    setBufferedReader(new BufferedReader(new InputStreamReader(getInputStream(),Globals.DEFAULT_FILE_ENCODING)));
    BufferedReader br=getBufferedReader();
    final String separator=getSeparatorField();
    String line=null;
    boolean firstLine=true;
    while ((line=br.readLine()) != null) {
      final String empty=line.trim();
      if (""String_Node_Str"".equals(empty) || empty.startsWith(""String_Node_Str""))       continue;
      final String[] fields=line.split(separator);
      if (firstLine) {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          data.put(field,new ArrayList<String>());
          fieldnames.add(field);
        }
        firstLine=false;
      }
 else {
        for (int i=0; i < fields.length; i++) {
          final String field=fields[i].trim();
          final String fieldName=fieldnames.get(i);
          List<String> l=data.get(fieldName);
          if ((SLIDENUMBER_FIELD.equals(fieldName) || NAME_FIELD.equals(fieldName)) && l.contains(field))           throw new EoulsanIOException(""String_Node_Str"" + ""String_Node_Str"");
          l.add(field);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"");
  }
  try {
    getBufferedReader().close();
  }
 catch (  IOException e) {
    throw new EoulsanIOException(""String_Node_Str"" + e.getMessage());
  }
  if (!data.containsKey(SLIDENUMBER_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  if (!data.containsKey(FILENAME_FIELD))   throw new EoulsanIOException(""String_Node_Str"");
  Design design=DesignFactory.createEmptyDesign();
  boolean refName=data.containsKey(NAME_FIELD);
  List<String> ids=data.get(refName ? NAME_FIELD : SLIDENUMBER_FIELD);
  final int count=ids.size();
  for (  final String id : ids)   design.addSample(id);
  if (refName) {
    design.addMetadataField(SampleMetadata.SLIDE_NUMBER_FIELD);
    List<String> slides=data.get(SLIDENUMBER_FIELD);
    for (int i=0; i < count; i++)     design.getSampleMetadata(ids.get(i)).setSlideNumber(Integer.parseInt(slides.get(i)));
  }
  List<String> filenames=data.get(FILENAME_FIELD);
  for (int i=0; i < count; i++) {
    DataSource source=DataSourceUtils.identifyDataSource(this.baseDir,filenames.get(i));
    design.setSource(ids.get(i),source.toString());
  }
  for (  String fd : fieldnames) {
    if (SLIDENUMBER_FIELD.equals(fd) || NAME_FIELD.equals(fd) || FILENAME_FIELD.equals(fd))     continue;
    design.addMetadataField(fd);
    List<String> descriptions=data.get(fd);
    int k=0;
    for (    String desc : descriptions)     design.setMetadata(ids.get(k++),fd,desc);
  }
  return design;
}",0.9980725424916768
141432,"@Override public void dispose(){
  super.dispose();
  getOWLModelManager().removeListener(this.listener);
  this.sqwrlQueryEngineModel.unregisterOntologyListener();
}","@Override public void dispose(){
  super.dispose();
  getOWLModelManager().removeListener(this.listener);
  if (this.sqwrlQueryEngineModel != null)   this.sqwrlQueryEngineModel.unregisterOntologyListener();
}",0.8877005347593583
141433,"@Override public void dispose(){
  super.dispose();
  getOWLModelManager().removeListener(this.listener);
  this.swrlRuleEngineModel.unregisterOntologyListener();
}","@Override public void dispose(){
  super.dispose();
  getOWLModelManager().removeListener(this.listener);
  if (this.swrlRuleEngineModel != null)   this.swrlRuleEngineModel.unregisterOntologyListener();
}",0.8913043478260869
141434,"@Override public void initialise(){
  super.initialise();
  this.modelManager=getOWLModelManager();
  this.modelManager.addListener(listener);
  setLayout(new BorderLayout());
  log.info(""String_Node_Str"");
}","@Override public void initialise(){
  super.initialise();
  this.modelManager=getOWLModelManager();
  this.modelManager.addListener(listener);
  setLayout(new BorderLayout());
  if (this.modelManager.getActiveOntology() != null)   update();
  log.info(""String_Node_Str"");
}",0.8648648648648649
141435,"@Override public void initialise(){
  super.initialise();
  log.info(""String_Node_Str"");
  this.modelManager=getOWLModelManager();
  this.modelManager.addListener(this.listener);
  setLayout(new BorderLayout());
  log.info(""String_Node_Str"");
}","@Override public void initialise(){
  super.initialise();
  log.info(""String_Node_Str"");
  this.modelManager=getOWLModelManager();
  this.modelManager.addListener(this.listener);
  setLayout(new BorderLayout());
  if (this.modelManager.getActiveOntology() != null)   update();
  log.info(""String_Node_Str"");
}",0.8824593128390597
141436,"public static int reverse(int n){
  for (int i=0; i < 32; i++) {
    n=question0502.swapBit(n,i,31);
  }
  return n;
}","public static int reverse(int n){
  for (int i=0; i < 32; i++) {
    n=question0502.swapBit(n,i,31 - i);
  }
  return n;
}",0.9833333333333332
141437,"public int getCapacity(int[] heights){
  int capacity=0;
  int minHeight=Integer.MIN_VALUE;
  for (int i=0; i < heights.length; i++) {
    capacity=Math.max(capacity,heights[i] - minHeight);
    minHeight=Math.min(minHeight,heights[i]);
  }
  return minHeight;
}","public int getCapacity(int[] heights){
  int capacity=0;
  int minHeight=Integer.MAX_VALUE;
  for (int i=0; i < heights.length; i++) {
    capacity=Math.max(capacity,heights[i] - minHeight);
    minHeight=Math.min(minHeight,heights[i]);
  }
  return minHeight;
}",0.9923664122137404
141438,"public TreeNode(T n){
  this.data=n;
}","public TreeNode(T n){
  this.data=n;
  left=null;
  right=null;
  parent=null;
}",0.6440677966101694
141439,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void preorder(TreeNode n){
  n.parent=null;
  TreeNode current=n;
  TreeNode prev=null;
  while (current != null) {
    TreeNode next=null;
    if (prev == null || prev == current.parent) {
      System.out.println(current.data);
      if (current.left != null) {
        next=current.left;
      }
 else       if (current.right != null) {
        next=current.right;
      }
 else       next=current.parent;
    }
 else     if (prev == current.left) {
      if (current.right != null)       next=current.right;
 else {
        next=current.parent;
      }
    }
 else     if (prev == current.right) {
      next=current.parent;
    }
    current=next;
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void preorder(TreeNode n){
  n.parent=null;
  TreeNode current=n;
  TreeNode prev=null;
  while (current != null) {
    TreeNode next=null;
    if (prev == null || prev == current.parent) {
      System.out.println(current.data);
      if (current.left != null) {
        next=current.left;
      }
 else       if (current.right != null) {
        next=current.right;
      }
 else       next=current.parent;
    }
 else     if (prev == current.left) {
      if (current.right != null)       next=current.right;
 else {
        next=current.parent;
      }
    }
 else     if (prev == current.right) {
      next=current.parent;
    }
    prev=current;
    current=next;
  }
}",0.9829816201497618
141440,"@Override public Set<String> getPropertyNames(String... exclude){
  Set<CratePersistentProperty> properties=getPersistentProperties();
  Set<String> excluded=new HashSet<String>(asList(exclude));
  Set<String> propertyNames=new LinkedHashSet<String>(properties.size());
  for (  CratePersistentProperty property : properties) {
    if (!excluded.contains(property.getFieldName())) {
      propertyNames.add(property.getFieldName());
    }
  }
  return propertyNames;
}","@Override public Set<String> getPropertyNames(String... exclude){
  Set<CratePersistentProperty> properties=getPersistentProperties();
  Set<String> excluded=new HashSet<String>(asList(exclude));
  Set<String> propertyNames=new TreeSet<String>();
  for (  CratePersistentProperty property : properties) {
    if (!excluded.contains(property.getFieldName())) {
      propertyNames.add(property.getFieldName());
    }
  }
  return propertyNames;
}",0.9397590361445785
141441,"public BulkInsertOperation(Class<T> entityClass,String tableName,List<T> entities){
  super(tableName,entityClass,entities,INSERT);
}","public BulkInsertOperation(Class<T> entityClass,String tableName,List<T> entities){
  super(tableName,entityClass,entities,INSERT);
  columns=new TreeSet<String>();
  columns.add(DEFAULT_TYPE_KEY);
  columns.addAll(getColumns());
}",0.7307692307692307
141442,public BulkActionResult<T> handle(SQLBulkResponse response);,public ActionableResult<T> handle(SQLBulkResponse response);,0.9333333333333332
141443,"/** 
 * Delete the given list of objects from the given table. The object must define an id (primary key). All life cycle callback methods will be invoked for entities succeeding the delete operation.
 * @param ids the list of objects to store in the table.
 * @param entityClass the parameterized type of the object.
 * @param tableName name of the table to delete the object from.
 * @return Results containing the details of the bulk operation
 */
<T>BulkActionResult<Object> bulkDelete(List<Object> ids,Class<T> entityClass,String tableName);","/** 
 * Delete the given list of objects from the given table. The object must define an id (primary key). All life cycle callback methods will be invoked for entities succeeding the delete operation.
 * @param ids the list of objects to store in the table.
 * @param entityClass the parameterized type of the object.
 * @param tableName name of the table to delete the object from.
 * @return Results containing the details of the bulk operation
 */
<T>ActionableResult<Object> bulkDelete(List<Object> ids,Class<T> entityClass,String tableName);",0.9926739926739928
141444,"/** 
 * Insert the given list of objects in the given table. If the object defines an id (primary key), it must not be null. All life cycle callback methods will be invoked for entities succeeding the insert operation.
 * @param entities the list of objects to store in the table.
 * @param entityClass the parameterized type of the object.
 * @param tableName name of the table to store the object in.
 * @return Results containing the details of the bulk operation
 */
<T>BulkActionResult<T> bulkInsert(List<T> entities,Class<T> entityClass,String tableName);","/** 
 * Insert the given list of objects in the given table. If the object defines an id (primary key), it must not be null. All life cycle callback methods will be invoked for entities succeeding the insert operation.
 * @param entities the list of objects to store in the table.
 * @param entityClass the parameterized type of the object.
 * @param tableName name of the table to store the object in.
 * @return Results containing the details of the bulk operation
 */
<T>ActionableResult<T> bulkInsert(List<T> entities,Class<T> entityClass,String tableName);",0.9928698752228164
141445,"/** 
 * Update the given list of objects in the given table. The object must define an id (primary key). All life cycle callback methods will be invoked for entities succeeding the update operation.
 * @param entities the list of objects to store in the table.
 * @param entityClass the parameterized type of the object.
 * @param tableName name of the table to store the object in.
 * @return Results containing the details of the bulk operation
 */
<T>BulkActionResult<T> bulkUpdate(List<T> entities,Class<T> entityClass,String tableName);","/** 
 * Update the given list of objects in the given table. The object must define an id (primary key). All life cycle callback methods will be invoked for entities succeeding the update operation.
 * @param entities the list of objects to store in the table.
 * @param entityClass the parameterized type of the object.
 * @param tableName name of the table to store the object in.
 * @return Results containing the details of the bulk operation
 */
<T>ActionableResult<T> bulkUpdate(List<T> entities,Class<T> entityClass,String tableName);",0.9926062846580408
141446,"/** 
 * Execute the given bulk operation (insert | update | delete) All operations are executed whatsoever. It does not matter whether one single operation failed or all succeeded
 * @param action must not be {@literal null}.
 * @param handler must not be {@literal null}. 
 */
<T>BulkActionResult<T> execute(CrateBulkAction action,CrateBulkActionResponseHandler<T> handler) throws DataAccessException, CrateSQLActionException ;","/** 
 * Execute the given bulk operation (insert | update | delete) All operations are executed whatsoever. It does not matter whether one single operation failed or all succeeded
 * @param action must not be {@literal null}.
 * @param handler must not be {@literal null}. 
 */
<T>ActionableResult<T> execute(CrateBulkAction action,CrateBulkActionResponseHandler<T> handler) throws DataAccessException, CrateSQLActionException ;",0.9766355140186916
141447,"@Override public <T>BulkActionResult<T> bulkInsert(List<T> entities,Class<T> entityClass,String tableName){
  boolean hasId=isIdPropertyDefined(entityClass);
  if (!hasId) {
    logger.warn(NO_ID_WARNING,entityClass.getName());
  }
  BulkInsertOperation<T> actionHandler=new BulkInsertOperation<T>(entityClass,tableName,entities);
  return execute(actionHandler,actionHandler);
}","@Override public <T>ActionableResult<T> bulkInsert(List<T> entities,Class<T> entityClass,String tableName){
  boolean hasId=isIdPropertyDefined(entityClass);
  if (!hasId) {
    logger.warn(NO_ID_WARNING,entityClass.getName());
  }
  BulkInsertOperation<T> actionHandler=new BulkInsertOperation<T>(entityClass,tableName,entities);
  return execute(actionHandler,actionHandler);
}",0.9894459102902374
141448,"private CrateSQLStatement initSelectStatement(Class<?> entityClass,String tableName){
  CratePersistentEntity<?> entity=getPersistentEntityFor(entityClass);
  boolean isVersioned=entity.hasVersionProperty();
  Set<String> columns=isVersioned ? entity.getPropertyNames(entity.getVersionProperty().getFieldName()) : entity.getPropertyNames();
  String idColumn=entity.hasIdProperty() ? entity.getIdProperty().getFieldName() : null;
  return new Select(idColumn,tableName,columns);
}","private CrateSQLStatement initSelectStatement(Class<?> entityClass,String tableName){
  CratePersistentEntity<?> entity=getPersistentEntityFor(entityClass);
  boolean isVersioned=entity.hasVersionProperty();
  Set<String> columns=isVersioned ? entity.getPropertyNames(entity.getVersionProperty().getFieldName()) : entity.getPropertyNames();
  String idColumn=id != null ? entity.getIdProperty().getFieldName() : null;
  return new Select(idColumn,tableName,columns);
}",0.9662447257383966
141449,"@Override public BulkActionResult<Object> handle(SQLBulkResponse response){
  Result[] results=response.results();
  BulkActionResult<Object> actionResults=new BulkActionResult<Object>();
  for (int index=0; index < results.length; index++) {
    Object id=convertedIds.get(index);
    ActionResult<Object> actionResult=actionResults.addResult(results[index],id);
    if (actionResult.isSuccess()) {
      doAfterDelete(id);
    }
  }
  return actionResults;
}","@Override public ActionableResult<Object> handle(SQLBulkResponse response){
  Result[] results=response.results();
  BulkActionResult<Object> actionResults=new BulkActionResult<Object>();
  for (int index=0; index < results.length; index++) {
    Object id=convertedIds.get(index);
    ActionResult<Object> actionResult=actionResults.addResult(results[index],id);
    if (actionResult.isSuccess()) {
      doAfterDelete(id);
    }
  }
  return actionResults;
}",0.991304347826087
141450,"@Override public <T>BulkActionResult<T> execute(CrateBulkAction action,CrateBulkActionResponseHandler<T> handler) throws DataAccessException {
  notNull(action,""String_Node_Str"");
  notNull(action.getActionType(),""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  if (!ALLOWED_BULK_OPERATIONS.contains(action.getActionType())) {
    throw new CrateSQLActionException(format(BULK_ACTION,action.getActionType(),ALLOWED_BULK_OPERATIONS));
  }
  try {
    SQLBulkRequest request=action.getSQLRequest();
    if (logger.isDebugEnabled()) {
      logger.debug(SQL_STATEMENT,request.stmt(),Arrays.deepToString(request.bulkArgs()));
    }
    return handler.handle(client.bulkSql(request).get());
  }
 catch (  SQLActionException e) {
    throw tryConvertingRuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new CrateSQLActionException(e.getMessage(),e);
  }
catch (  ExecutionException e) {
    throw new CrateSQLActionException(e.getMessage(),e);
  }
}","@Override public <T>ActionableResult<T> execute(CrateBulkAction action,CrateBulkActionResponseHandler<T> handler) throws DataAccessException {
  notNull(action,""String_Node_Str"");
  notNull(action.getActionType(),""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  if (!ALLOWED_BULK_OPERATIONS.contains(action.getActionType())) {
    throw new CrateSQLActionException(format(BULK_ACTION,action.getActionType(),ALLOWED_BULK_OPERATIONS));
  }
  try {
    SQLBulkRequest request=action.getSQLRequest();
    if (logger.isDebugEnabled()) {
      logger.debug(SQL_STATEMENT,request.stmt(),Arrays.deepToString(request.bulkArgs()));
    }
    return handler.handle(client.bulkSql(request).get());
  }
 catch (  SQLActionException e) {
    throw tryConvertingRuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new CrateSQLActionException(e.getMessage(),e);
  }
catch (  ExecutionException e) {
    throw new CrateSQLActionException(e.getMessage(),e);
  }
}",0.9897330595482546
141451,"@Override public <T>BulkActionResult<Object> bulkDelete(List<Object> ids,Class<T> entityClass,String tableName){
  notEmpty(ids);
  notNull(entityClass);
  hasText(tableName);
  BulkDeleteOperation actionHandler=new BulkDeleteOperation(entityClass,tableName,ids);
  return execute(actionHandler,actionHandler);
}","@Override public <T>ActionableResult<Object> bulkDelete(List<Object> ids,Class<T> entityClass,String tableName){
  notEmpty(ids);
  notNull(entityClass);
  hasText(tableName);
  BulkDeleteOperation actionHandler=new BulkDeleteOperation(entityClass,tableName,ids);
  return execute(actionHandler,actionHandler);
}",0.9871794871794872
141452,"public SelectAction(Class<?> entityClass,String tableName,Object id){
  notNull(entityClass);
  notNull(id);
  this.select=initSelectStatement(entityClass,tableName);
  this.id=crateConverter.convertToCrateType(id,null);
}","public SelectAction(Class<?> entityClass,String tableName,Object id){
  notNull(entityClass);
  this.id=crateConverter.convertToCrateType(id,null);
  this.select=initSelectStatement(entityClass,tableName);
}",0.6946386946386947
141453,"@Override public <T>BulkActionResult<T> bulkUpdate(List<T> entities,Class<T> entityClass,String tableName){
  notNull(entityClass);
  notEmpty(entities);
  BulkUpdateOperation<T> actionHandler=new BulkUpdateOperation<T>(entityClass,tableName,entities);
  return execute(actionHandler,actionHandler);
}","@Override public <T>ActionableResult<T> bulkUpdate(List<T> entities,Class<T> entityClass,String tableName){
  notNull(entityClass);
  notEmpty(entities);
  BulkUpdateOperation<T> actionHandler=new BulkUpdateOperation<T>(entityClass,tableName,entities);
  return execute(actionHandler,actionHandler);
}",0.9867109634551496
141454,Long getVersion(T entity);,"/** 
 * Returns the version value from the given entity.
 * @return
 */
Long getVersion(T entity);",0.4193548387096774
141455,String getIdAttribute();,"/** 
 * Returns the attribute that the id will be persisted to.
 * @return
 */
String getIdAttribute();",0.3779527559055118
141456,"@Override public Long getVersion(T entity){
  CratePersistentProperty versionProperty=entityMetadata.getVersionProperty();
  try {
    if (versionProperty != null) {
      return (Long)BeanWrapper.create(entity,null).getProperty(versionProperty);
    }
  }
 catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
  return null;
}","@Override public Long getVersion(T entity){
  if (entityMetadata.hasVersionProperty()) {
    return (Long)entityMetadata.getPropertyAccessor(entity).getProperty(entityMetadata.getVersionProperty());
  }
  return null;
}",0.4248704663212435
141457,"@Override public String getIdAttribute(){
  Assert.notNull(entityMetadata.getIdProperty(),""String_Node_Str"" + entityMetadata.getType().getSimpleName() + ""String_Node_Str"");
  return entityMetadata.getIdProperty().getFieldName();
}","@Override public String getIdAttribute(){
  notNull(entityMetadata.getIdProperty(),format(ID_MSG,entityMetadata.getType().getSimpleName()));
  return entityMetadata.getIdProperty().getFieldName();
}",0.8598130841121495
141458,"@SuppressWarnings(""String_Node_Str"") @Override public ID getId(T entity){
  CratePersistentProperty id=entityMetadata.getIdProperty();
  try {
    return (ID)BeanWrapper.create(entity,null).getProperty(id);
  }
 catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public ID getId(T entity){
  if (entityMetadata.hasIdProperty()) {
    return (ID)entityMetadata.getPropertyAccessor(entity).getProperty(entityMetadata.getIdProperty());
  }
  return null;
}",0.3843283582089552
141459,"/** 
 * Internal helper method to write the source object into the target document.
 * @param source the source object.
 * @param sink the target document.
 * @param entity the persistent entity to convert from.
 */
protected void writeInternal(final Object source,final CrateDocument sink,final CratePersistentEntity<?> entity){
  if (source == null) {
    return;
  }
  if (entity == null) {
    throw new MappingException(""String_Node_Str"".concat(source.getClass().getName()));
  }
  final BeanWrapper<Object> wrapper=create(source,conversionService);
  final CratePersistentProperty idProperty=entity.getIdProperty();
  final CratePersistentProperty versionProperty=entity.getVersionProperty();
  if (idProperty != null && !sink.containsKey(idProperty.getFieldName())) {
    try {
      Object id=convertToCrateType(wrapper.getProperty(idProperty,Object.class),idProperty.getTypeInformation());
      sink.put(idProperty.getFieldName(),id);
    }
 catch (    ConversionException e) {
      logger.warn(""String_Node_Str"",new Object[]{idProperty.getFieldName(),e.getMessage()});
    }
  }
  for (  CratePersistentProperty property : entity.getPersistentProperties()) {
    if (property.equals(idProperty) || (versionProperty != null && property.equals(versionProperty))) {
      continue;
    }
    Object propertyObj=wrapper.getProperty(property,property.getType());
    if (propertyObj != null) {
      if (!conversions.isSimpleType(propertyObj.getClass())) {
        writePropertyInternal(propertyObj,sink,property);
      }
 else {
        writeSimpleInternal(propertyObj,sink,property.getFieldName());
      }
    }
  }
  entity.doWithAssociations(new AssociationHandler<CratePersistentProperty>(){
    @Override public void doWithAssociation(    final Association<CratePersistentProperty> association){
      CratePersistentProperty inverse=association.getInverse();
      Class<?> type=inverse.getType();
      Object propertyObj=wrapper.getProperty(inverse,type);
      if (propertyObj != null) {
        writePropertyInternal(propertyObj,sink,inverse);
      }
    }
  }
);
}","/** 
 * Internal helper method to write the source object into the target document.
 * @param source the source object.
 * @param sink the target document.
 * @param entity the persistent entity to convert from.
 */
protected void writeInternal(final Object source,final CrateDocument sink,final CratePersistentEntity<?> entity){
  if (source == null) {
    return;
  }
  if (entity == null) {
    throw new MappingException(""String_Node_Str"".concat(source.getClass().getName()));
  }
  final BeanWrapper<Object> wrapper=create(source,conversionService);
  final CratePersistentProperty idProperty=entity.getIdProperty();
  final CratePersistentProperty versionProperty=entity.getVersionProperty();
  if (idProperty != null && !sink.containsKey(idProperty.getFieldName())) {
    try {
      Object id=convertToCrateType(wrapper.getProperty(idProperty,Object.class),idProperty.getTypeInformation());
      sink.put(idProperty.getFieldName(),id);
    }
 catch (    ConversionException e) {
      logger.warn(""String_Node_Str"",new Object[]{idProperty.getFieldName(),e.getMessage()});
    }
  }
  for (  CratePersistentProperty property : entity.getPersistentProperties()) {
    if (property.equals(idProperty) || (versionProperty != null && property.equals(versionProperty))) {
      continue;
    }
    Object propertyObj=wrapper.getProperty(property,property.getType());
    if (propertyObj != null) {
      if (!conversions.isSimpleType(propertyObj.getClass()) || isPrimitiveArray(property)) {
        writePropertyInternal(propertyObj,sink,property);
      }
 else {
        writeSimpleInternal(propertyObj,sink,property.getFieldName());
      }
    }
  }
  entity.doWithAssociations(new AssociationHandler<CratePersistentProperty>(){
    @Override public void doWithAssociation(    final Association<CratePersistentProperty> association){
      CratePersistentProperty inverse=association.getInverse();
      Class<?> type=inverse.getType();
      Object propertyObj=wrapper.getProperty(inverse,type);
      if (propertyObj != null) {
        writePropertyInternal(propertyObj,sink,inverse);
      }
    }
  }
);
}",0.9928605425987624
141460,"@Test public void shouldWriteArrayOfPrimitive(){
  Boolean[] array=new Boolean[1];
  array[0]=true;
  Map<String,Object> expected=new HashMap<String,Object>();
  expected.put(DEFAULT_TYPE_KEY,PrimitiveArray.class.getName());
  expected.put(""String_Node_Str"",array);
  PrimitiveArray entity=new PrimitiveArray();
  entity.booleans=array;
  CrateDocument document=new CrateDocument();
  converter.write(entity,document);
  assertThat(document,hasEntry(DEFAULT_TYPE_KEY,(Object)PrimitiveArray.class.getName()));
  assertThat(document,hasKey(""String_Node_Str""));
  assertThat(document.get(""String_Node_Str""),is(instanceOf(CrateArray.class)));
  assertThat(((CrateArray)document.get(""String_Node_Str"")).size(),is(1));
  assertThat(((CrateArray)document.get(""String_Node_Str"")).get(0).toString(),is(""String_Node_Str""));
}","@Test public void shouldWriteArrayOfPrimitive(){
  boolean[] array=new boolean[]{true};
  Map<String,Object> expected=new HashMap<String,Object>();
  expected.put(DEFAULT_TYPE_KEY,PrimitiveArray.class.getName());
  expected.put(""String_Node_Str"",array);
  PrimitiveArray entity=new PrimitiveArray();
  entity.booleans=array;
  CrateDocument document=new CrateDocument();
  converter.write(entity,document);
  assertThat(document,hasEntry(DEFAULT_TYPE_KEY,(Object)PrimitiveArray.class.getName()));
  assertThat(document,hasKey(""String_Node_Str""));
  assertThat(document.get(""String_Node_Str""),is(instanceOf(CrateArray.class)));
  assertThat(((CrateArray)document.get(""String_Node_Str"")).size(),is(1));
  assertThat(((CrateArray)document.get(""String_Node_Str"")).get(0).toString(),is(""String_Node_Str""));
}",0.9826946847960444
141461,"/** 
 * Nesting ARRAY or Collection types is not supported by crate. It is safe to assume that the payload will contain either a Map or a primitive type. Map types will be converted to   {@link CrateDocument}while simple types will be added without any conversion
 * @param array {@link CrateArray} for adding either Map or Simple types
 * @param payload containing either a Map or primitive type.
 */
@SuppressWarnings(""String_Node_Str"") private void toCrateArray(CrateArray array,Object payload){
  Collection<Object> objects=(Collection<Object>)payload;
  for (  Object object : objects) {
    TypeInformation<?> type=getTypeInformation(object.getClass());
    if (type.isMap()) {
      CrateDocument document=new CrateDocument();
      toCrateDocument(document,object);
      array.add(document);
    }
 else {
      array.add(object);
    }
  }
}","/** 
 * Nesting Array or Collection types is not supported by crate. It is safe to assume that the payload will contain either a Map or a primitive type. Map types will be converted to   {@link CrateDocument}while simple types will be added without any conversion
 * @param array {@link CrateArray} for adding either Map or Simple types
 * @param payload containing either a Map or primitive type.
 */
@SuppressWarnings(""String_Node_Str"") private void toCrateArray(CrateArray array,Object payload){
  Collection<Object> objects=(Collection<Object>)(payload.getClass().isArray() ? asList((Object[])payload) : payload);
  for (  Object object : objects) {
    TypeInformation<?> type=getTypeInformation(object.getClass());
    if (type.isMap()) {
      CrateDocument document=new CrateDocument();
      toCrateDocument(document,object);
      array.add(document);
    }
 else {
      array.add(object);
    }
  }
}",0.952921157118548
141462,"public CrateDocument toDocument(){
  CrateDocument root=new CrateDocument();
  for (  Row row : rows) {
    if (row.isObject()) {
      toCrateDocument(root,row.getPayload());
      logger.debug(""String_Node_Str"",row.getColumn());
    }
 else     if (row.isArray()) {
      CrateArray array=new CrateArray();
      toCrateArray(array,row.getPayload());
      root.put(row.getColumn(),array);
      logger.debug(""String_Node_Str"",row.getColumn());
    }
 else {
      root.put(row.getColumn(),row.getPayload());
      logger.debug(""String_Node_Str"",new Object[]{row.getColumn(),row.getPayload().getClass().getName()});
    }
  }
  return root;
}","public CrateDocument toDocument(){
  CrateDocument root=new CrateDocument();
  for (  Row row : rows) {
    if (row.isObject()) {
      CrateDocument document=new CrateDocument();
      toCrateDocument(document,row.getPayload());
      root.put(row.getColumn(),document);
      logger.debug(""String_Node_Str"",row.getColumn());
    }
 else     if (row.isArray()) {
      CrateArray array=new CrateArray();
      toCrateArray(array,row.getPayload());
      root.put(row.getColumn(),array);
      logger.debug(""String_Node_Str"",row.getColumn());
    }
 else {
      root.put(row.getColumn(),row.getPayload());
      logger.debug(""String_Node_Str"",new Object[]{row.getColumn(),row.getPayload().getClass().getName()});
    }
  }
  return root;
}",0.9219653179190752
141463,"private String resolveTableName(TypeInformation<T> typeInformation){
  String tableName=null;
  Class<T> clazz=typeInformation.getType();
  if (clazz.isAnnotationPresent(Table.class)) {
    String name=typeInformation.getType().getAnnotation(Table.class).name();
    hasText(name,""String_Node_Str"");
    tableName=name;
  }
 else {
    tableName=replace(clazz.getName(),""String_Node_Str"",""String_Node_Str"");
  }
  return tableName;
}","private String resolveTableName(TypeInformation<T> typeInformation){
  String fallback=replace(typeInformation.getType().getName(),""String_Node_Str"",""String_Node_Str"");
  String tableName=null;
  Table annotation=findAnnotation(Table.class);
  if (annotation != null) {
    tableName=hasText(annotation.name()) ? replace(annotation.name(),""String_Node_Str"",""String_Node_Str"") : fallback;
  }
 else {
    tableName=fallback;
  }
  return tableName;
}",0.2789115646258503
141464,"/** 
 * Helper method to write the map into the crate document.
 * @param source the source object.
 * @param sink the target document.
 * @param type the type information for the document.
 * @return the written crate document.
 */
private CrateDocument writeMapInternal(final Map<Object,Object> source,final CrateDocument sink,final TypeInformation<?> type){
  for (  Map.Entry<Object,Object> entry : source.entrySet()) {
    Object key=entry.getKey();
    Object val=entry.getValue();
    if (conversions.isSimpleType(key.getClass())) {
      String simpleKey=key.toString();
      if (val == null || conversions.isSimpleType(val.getClass())) {
        writeSimpleInternal(val,sink,simpleKey);
      }
 else       if (val instanceof Collection || val.getClass().isArray()) {
        sink.put(simpleKey,writeCollectionInternal(asCollection(val),new CrateArray(),type.getMapValueType()));
      }
 else {
        CrateDocument document=new CrateDocument();
        TypeInformation<?> valueTypeInfo=type.isMap() ? type.getMapValueType() : OBJECT;
        writeInternal(val,document,valueTypeInfo);
        sink.put(simpleKey,document);
      }
    }
 else {
      throw new MappingException(""String_Node_Str"");
    }
  }
  return sink;
}","/** 
 * Helper method to write the map into the crate document.
 * @param source the source object.
 * @param sink the target document.
 * @param type the type information for the document.
 * @return the written crate document.
 */
private CrateDocument writeMapInternal(final Map<Object,Object> source,final CrateDocument sink,final TypeInformation<?> type){
  for (  Map.Entry<Object,Object> entry : source.entrySet()) {
    Object key=entry.getKey();
    Object val=entry.getValue();
    if (conversions.isSimpleType(key.getClass())) {
      String simpleKey=key.toString();
      if (val == null || (conversions.isSimpleType(val.getClass()) && !val.getClass().isArray())) {
        writeSimpleInternal(val,sink,simpleKey);
      }
 else       if (val instanceof Collection || val.getClass().isArray()) {
        sink.put(simpleKey,writeCollectionInternal(asCollection(val),new CrateArray(),type.getMapValueType()));
      }
 else {
        CrateDocument document=new CrateDocument();
        TypeInformation<?> valueTypeInfo=type.isMap() ? type.getMapValueType() : OBJECT;
        writeInternal(val,document,valueTypeInfo);
        sink.put(simpleKey,document);
      }
    }
 else {
      throw new MappingException(""String_Node_Str"");
    }
  }
  return sink;
}",0.987624750499002
141465,"@Test public void shouldWriteArrayOfPrimitiveWrapper(){
  Integer[] array=new Integer[]{new Integer(1)};
  Map<String,Object> expected=new HashMap<String,Object>();
  expected.put(DEFAULT_TYPE_KEY,PrimitiveWrapperArray.class.getName());
  expected.put(""String_Node_Str"",array);
  PrimitiveWrapperArray entity=new PrimitiveWrapperArray();
  entity.integers=array;
  CrateDocument document=new CrateDocument();
  converter.write(entity,document);
  assertThat(document,hasEntry(DEFAULT_TYPE_KEY,(Object)PrimitiveWrapperArray.class.getName()));
  assertThat(document,hasKey(""String_Node_Str""));
  assertThat(document.get(""String_Node_Str""),is(instanceOf(CrateArray.class)));
  assertThat(((CrateArray)document.get(""String_Node_Str"")).size(),is(1));
  assertThat(((CrateArray)document.get(""String_Node_Str"")).get(0).toString(),is(""String_Node_Str""));
}","@Test public void shouldWriteArrayOfPrimitiveWrapper(){
  Integer[] array=new Integer[]{new Integer(1)};
  CrateArray crateArray=new CrateArray(new Integer(1));
  Map<String,Object> expected=new HashMap<String,Object>();
  expected.put(DEFAULT_TYPE_KEY,PrimitiveWrapperArray.class.getName());
  expected.put(""String_Node_Str"",crateArray);
  PrimitiveWrapperArray entity=new PrimitiveWrapperArray();
  entity.integers=array;
  CrateDocument document=new CrateDocument();
  converter.write(entity,document);
  assertThat(document,hasEntry(DEFAULT_TYPE_KEY,(Object)PrimitiveWrapperArray.class.getName()));
  assertThat(document,hasKey(""String_Node_Str""));
  assertThat(document.get(""String_Node_Str""),is(instanceOf(CrateArray.class)));
  assertThat(((CrateArray)document.get(""String_Node_Str"")).size(),is(1));
  assertThat(((CrateArray)document.get(""String_Node_Str"")).get(0).toString(),is(""String_Node_Str""));
}",0.9641434262948207
141466,"@Override public boolean isTypeKey(String typeKey){
  return hasText(typeKey) ? typeKey.equals(typeKey) : false;
}","@Override public boolean isTypeKey(String typeKey){
  return hasText(typeKey) ? this.typeKey.equals(typeKey) : false;
}",0.9785407725321889
141467,"public DefaultCrateTypeMapper(String typeKey){
  super(new CrateDocumentTypeAliasAccessor(typeKey));
}","public DefaultCrateTypeMapper(String typeKey){
  super(new CrateDocumentTypeAliasAccessor(typeKey));
  this.typeKey=typeKey;
}",0.8947368421052632
141468,"/** 
 * Read an incoming   {@link CrateDocument} into the target entity.
 * @param entity the target entity.
 * @param source the document to convert.
 * @param parent an optional parent object.
 * @param < R > the entity type.
 * @return the converted entity.
 */
protected <R>R read(final CratePersistentEntity<R> entity,final CrateDocument source,final Object parent){
  final DefaultSpELExpressionEvaluator evaluator=new DefaultSpELExpressionEvaluator(source,spELContext);
  ParameterValueProvider<CratePersistentProperty> provider=getParameterProvider(entity,source,evaluator,parent);
  EntityInstantiator instantiator=instantiators.getInstantiatorFor(entity);
  R instance=instantiator.createInstance(entity,provider);
  final BeanWrapper<R> wrapper=create(instance,conversionService);
  final R result=wrapper.getBean();
  entity.doWithProperties(new PropertyHandler<CratePersistentProperty>(){
    @Override public void doWithPersistentProperty(    final CratePersistentProperty prop){
      if (!sourceHasProperty(prop) || entity.isConstructorArgument(prop)) {
        return;
      }
      wrapper.setProperty(prop,getValueInternal(prop,source,result));
    }
    private boolean sourceHasProperty(    final CratePersistentProperty property){
      return property.isIdProperty() || source.containsKey(property.getFieldName());
    }
  }
);
  entity.doWithAssociations(new AssociationHandler<CratePersistentProperty>(){
    @Override public void doWithAssociation(    final Association<CratePersistentProperty> association){
      CratePersistentProperty inverseProp=association.getInverse();
      Object obj=getValueInternal(inverseProp,source,result);
      wrapper.setProperty(inverseProp,obj);
    }
  }
);
  return result;
}","/** 
 * Read an incoming   {@link CrateDocument} into the target entity.
 * @param entity the target entity.
 * @param source the document to convert.
 * @param parent an optional parent object.
 * @param < R > the entity type.
 * @return the converted entity.
 */
protected <R>R read(final CratePersistentEntity<R> entity,final CrateDocument source,final Object parent){
  final DefaultSpELExpressionEvaluator evaluator=new DefaultSpELExpressionEvaluator(source,spELContext);
  ParameterValueProvider<CratePersistentProperty> provider=getParameterProvider(entity,source,evaluator,parent);
  EntityInstantiator instantiator=instantiators.getInstantiatorFor(entity);
  R instance=instantiator.createInstance(entity,provider);
  final BeanWrapper<R> wrapper=create(instance,conversionService);
  final R result=wrapper.getBean();
  final CratePersistentProperty idProperty=entity.getIdProperty();
  if (idProperty != null) {
    Object idValue=getValueInternal(idProperty,source,result);
    wrapper.setProperty(idProperty,idValue);
  }
  for (  CratePersistentProperty property : entity.getPersistentProperties()) {
    if (idProperty != null && idProperty.equals(property)) {
      continue;
    }
    if (!source.containsKey(property.getFieldName()) || entity.isConstructorArgument(property)) {
      continue;
    }
    wrapper.setProperty(property,getValueInternal(property,source,result));
  }
  entity.doWithAssociations(new AssociationHandler<CratePersistentProperty>(){
    @Override public void doWithAssociation(    final Association<CratePersistentProperty> association){
      CratePersistentProperty inverseProp=association.getInverse();
      Object obj=getValueInternal(inverseProp,source,result);
      wrapper.setProperty(inverseProp,obj);
    }
  }
);
  return result;
}",0.7927417068330026
141469,"@Override public boolean isIdProperty(){
  return super.isIdProperty() || (field != null && SUPPORTED_ID_PROPERTY_NAMES.contains(getFieldName()));
}","@Override public boolean isIdProperty(){
  return super.isIdProperty() || (field != null && SUPPORTED_ID_PROPERTY_NAMES.contains(getName()));
}",0.9828178694158076
141470,"public SimpleCratePersistentProperty(Field field,PropertyDescriptor propertyDescriptor,PersistentEntity<?,CratePersistentProperty> owner,SimpleTypeHolder simpleTypeHolder){
  super(field,propertyDescriptor,owner,simpleTypeHolder);
}","public SimpleCratePersistentProperty(Field field,PropertyDescriptor propertyDescriptor,PersistentEntity<?,CratePersistentProperty> owner,SimpleTypeHolder simpleTypeHolder){
  super(field,propertyDescriptor,owner,simpleTypeHolder);
  if (isIdProperty() && getFieldName() != ID_FIELD_NAME) {
    logger.warn(""String_Node_Str"");
  }
}",0.8241563055062167
141471,"@Override public String getFieldName(){
  return field.getName();
}","@Override public String getFieldName(){
  if (isIdProperty()) {
    if (owner == null) {
      return ID_FIELD_NAME;
    }
    if (owner.getIdProperty() == null) {
      return ID_FIELD_NAME;
    }
    if (owner.isIdProperty(this)) {
      return ID_FIELD_NAME;
    }
  }
  return field.getName();
}",0.366120218579235
141472,"private void columnToDotPath(Column column,Map<String,Column> map,String columnName){
  Iterator<Column> subColumns=column.getSubColumns().iterator();
  while (subColumns.hasNext()) {
    Column subColumn=subColumns.next();
    String dotPath=createdotPathKey(columnName,subColumn.getName());
    map.put(dotPath,subColumn);
    columnToDotPath(subColumn,map,dotPath);
  }
}","private void columnToDotPath(Column column,Map<String,Column> map,String columnName){
  Iterator<Column> subColumns=column.getSubColumns().iterator();
  while (subColumns.hasNext()) {
    Column subColumn=subColumns.next();
    String dotPath=createdotPathKey(columnName,subColumn.getName());
    logger.debug(""String_Node_Str"",dotPath);
    map.put(dotPath,subColumn);
    columnToDotPath(subColumn,map,dotPath);
  }
}",0.9432534678436316
141473,"/** 
 * Creates table definition containing table information and columns that are not found in   {@link TableMetadata}
 * @param entity instance used to generate table definition
 * @param tableMetadata metadata associated to the {@link CratePersistentEntity}
 * @return table with column definitions. If there is no difference in{@link CratePersistentEntity} instance and the {@link TableMetadata} information,null is returned
 */
public TableDefinition updateDefinition(CratePersistentEntity<?> entity,TableMetadata tableMetadata){
  List<Column> columns=entityColumnMapper.toColumns(entity);
  Map<String,Column> columnPaths=columnToDotPath(columns);
  Map<String,String> sqlPaths=sqlToDotPath(tableMetadata.getColumns());
  List<Column> additionalColumns=new LinkedList<Column>();
  Iterator<Entry<String,Column>> iterator=columnPaths.entrySet().iterator();
  while (iterator.hasNext()) {
    Entry<String,Column> columnPath=iterator.next();
    if (!sqlPaths.containsKey(columnPath.getKey())) {
      additionalColumns.add(columnPath.getValue());
      if (columnPath.getValue().isObjectColumn()) {
        removePropertyPaths(columnPath.getKey(),iterator);
      }
    }
  }
  return additionalColumns.isEmpty() ? null : new TableDefinition(entity.getTableName(),additionalColumns);
}","/** 
 * Creates table definition containing table information and columns that are not found in   {@link TableMetadata}
 * @param entity instance used to generate table definition
 * @param tableMetadata metadata associated to the {@link CratePersistentEntity}
 * @return table with column definitions. If there is no difference in{@link CratePersistentEntity} instance and the {@link TableMetadata} information,null is returned
 */
public TableDefinition updateDefinition(CratePersistentEntity<?> entity,TableMetadata tableMetadata){
  List<Column> columns=entityColumnMapper.toColumns(entity);
  Map<String,Column> columnPaths=columnToDotPath(columns);
  Map<String,String> sqlPaths=sqlToDotPath(tableMetadata.getColumns());
  List<Column> additionalColumns=new LinkedList<Column>();
  Iterator<Entry<String,Column>> iterator=columnPaths.entrySet().iterator();
  while (iterator.hasNext()) {
    Entry<String,Column> columnPath=iterator.next();
    if (!sqlPaths.containsKey(columnPath.getKey())) {
      logger.debug(""String_Node_Str"",columnPath.getKey());
      additionalColumns.add(columnPath.getValue());
      if (columnPath.getValue().isObjectColumn() || columnPath.getValue().isObjectArrayColumn()) {
        removePropertyPaths(columnPath.getKey(),iterator);
      }
    }
  }
  return additionalColumns.isEmpty() ? null : new TableDefinition(entity.getTableName(),additionalColumns);
}",0.9605654761904762
141474,"private Map<String,String> sqlToDotPath(List<ColumnMetadata> columns){
  Map<String,String> sqlPaths=new LinkedHashMap<String,String>(columns.size());
  for (  ColumnMetadata metadata : columns) {
    String dotPath=toDotPath(metadata.getSqlPath());
    String type=metadata.getCrateType();
    sqlPaths.put(dotPath,type);
  }
  return sqlPaths;
}","private Map<String,String> sqlToDotPath(List<ColumnMetadata> columns){
  Map<String,String> sqlPaths=new LinkedHashMap<String,String>(columns.size());
  for (  ColumnMetadata metadata : columns) {
    String dotPath=toDotPath(metadata.getSqlPath());
    String type=metadata.getCrateType();
    logger.debug(""String_Node_Str"",dotPath);
    sqlPaths.put(dotPath,type);
  }
  return sqlPaths;
}",0.939106901217862
141475,"/** 
 * @param property The property to inspect 
 * @see VisitedPath#isCyclic(CratePersistentProperty)
 */
private VisitedPath getVisitedPath(CratePersistentProperty property){
  VisitedPath path=null;
  String type=property.getActualType().getName();
  if (visitedPaths.containsKey(type)) {
    List<VisitedPath> paths=visitedPaths.get(type);
    if (paths != null && !paths.isEmpty()) {
      for (      VisitedPath visitedPath : paths) {
        if (visitedPath.isCyclic(property)) {
          path=visitedPath;
          break;
        }
      }
    }
  }
  return path;
}","/** 
 * @param property The property to inspect 
 * @see VisitedPath#isCyclic(CratePersistentProperty)
 */
private VisitedPath getVisitedPath(CratePersistentProperty property){
  VisitedPath path=null;
  String propertyTypeKey=createKey(property);
  if (visitedPaths.containsKey(propertyTypeKey)) {
    List<VisitedPath> paths=visitedPaths.get(propertyTypeKey);
    if (paths != null && !paths.isEmpty()) {
      for (      VisitedPath visitedPath : paths) {
        if (visitedPath.isCyclic(property)) {
          path=visitedPath;
          break;
        }
      }
    }
  }
  return path;
}",0.7829059829059829
141476,"/** 
 * @param property The property to watch 
 * @throws CyclicReferenceException in case a potential cycle is detected.
 */
private void pushPath(CratePersistentProperty property){
  if (getVisitedPath(property) != null) {
    throw new CyclicReferenceException(property.getFieldName(),property.getOwner().getType(),dotPath);
  }
  String type=property.getActualType().getName();
  List<VisitedPath> paths=visitedPaths.get(type);
  if (paths == null) {
    paths=new LinkedList<VisitedPath>();
  }
  paths.add(new VisitedPath(property));
  if (!visitedPaths.containsKey(type)) {
    visitedPaths.put(type,paths);
  }
  if (hasText(dotPath)) {
    dotPath=dotPath.concat(""String_Node_Str"").concat(property.getFieldName());
  }
 else {
    dotPath=property.getFieldName();
  }
}","/** 
 * @param property The property to watch 
 * @throws CyclicReferenceException in case a potential cycle is detected.
 */
private void pushPath(CratePersistentProperty property){
  if (getVisitedPath(property) != null) {
    throw new CyclicReferenceException(property.getFieldName(),property.getOwner().getType(),dotPath);
  }
  String propertyTypeKey=createKey(property);
  List<VisitedPath> paths=visitedPaths.get(propertyTypeKey);
  if (paths == null) {
    paths=new LinkedList<VisitedPath>();
  }
  paths.add(new VisitedPath(property));
  if (!visitedPaths.containsKey(propertyTypeKey)) {
    visitedPaths.put(propertyTypeKey,paths);
  }
  if (hasText(dotPath)) {
    dotPath=dotPath.concat(""String_Node_Str"").concat(property.getFieldName());
  }
 else {
    dotPath=property.getFieldName();
  }
}",0.9198738170347004
141477,"@Scheduled(cron=""String_Node_Str"") public void updatePredictions(){
  log.info(""String_Node_Str"");
  TransactionTemplate txTemplate=new TransactionTemplate(transactionManager);
  txTemplate.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);
  txTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  for (  Long predictorId : findPredictorsNeedingUpdate()) {
    Optional<Lock> lock=Optional.empty();
    try {
      lock=Optional.of(lockRepository.acquireLock(""String_Node_Str"" + predictorId,Duration.standardMinutes(1)));
      txTemplate.execute(tx -> {
        updatePredictor(predictorId);
        log.debug(""String_Node_Str"",predictorId);
        return null;
      }
);
    }
 catch (    LockException e) {
      log.debug(""String_Node_Str"",predictorId);
    }
catch (    Exception e) {
      log.error(""String_Node_Str"",predictorId,e);
    }
 finally {
      lock.ifPresent(l -> lockRepository.releaseLock(l));
    }
  }
}","@Scheduled(cron=""String_Node_Str"") public void updatePredictions(){
  Optional<Lock> lock=Optional.empty();
  try {
    lock=Optional.of(lockRepository.acquireLock(""String_Node_Str"",Duration.standardMinutes(2)));
  }
 catch (  LockException e) {
    log.debug(""String_Node_Str"");
    return;
  }
  log.info(""String_Node_Str"");
  TransactionTemplate txTemplate=new TransactionTemplate(transactionManager);
  txTemplate.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);
  txTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  for (  Long predictorId : findPredictorsNeedingUpdate()) {
    try {
      txTemplate.execute(tx -> {
        updatePredictor(predictorId);
        log.debug(""String_Node_Str"",predictorId);
        return null;
      }
);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",predictorId,e);
    }
 finally {
      lock.ifPresent(l -> lockRepository.releaseLock(l));
    }
  }
}",0.4584408879710893
141478,"@TransactionalWrite public void registerUtilization(long facilityId,List<Utilization> utilization,User currentUser){
  authorize(currentUser,repository.getFacilityInfo(facilityId),FACILITY_UTILIZATION_UPDATE);
  initUtilizationDefaults(facilityId,utilization);
  validateUtilizations(facilityId,utilization);
  utilizationRepository.insertUtilizations(utilization);
  predictionService.signalUpdateNeeded(utilization);
}","@TransactionalWrite public void registerUtilization(long facilityId,List<Utilization> utilization,User currentUser){
  final FacilityInfo facilityInfo=repository.getFacilityInfo(facilityId);
  authorize(currentUser,facilityInfo,FACILITY_UTILIZATION_UPDATE);
  initUtilizationDefaults(facilityId,utilization);
  validateUtilizations(facilityId,utilization);
  checkUtilizationApplicability(facilityInfo,utilization);
  utilizationRepository.insertUtilizations(utilization);
  predictionService.signalUpdateNeeded(utilization);
}",0.8405491024287223
141479,"@TransactionalRead public Set<Utilization> findLatestUtilization(long facilityId){
  return utilizationRepository.findLatestUtilization(facilityId);
}","@TransactionalRead public Set<Utilization> findLatestUtilization(long facilityId){
  final Facility facility=getFacility(facilityId);
  return utilizationRepository.findLatestUtilization(facilityId).stream().filter(u -> facility.builtCapacity.getOrDefault(u.capacityType,0) > 0).filter(u -> facility.usages.contains(u.usage)).collect(toSet());
}",0.6060606060606061
141480,"@RequestMapping(method=PUT,value=DEV_UTILIZATION) @TransactionalWrite public ResponseEntity<Void> generateUtilizationData(@NotNull @PathVariable(FACILITY_ID) Long facilityId){
  final Facility facility=facilityRepository.getFacility(facilityId);
  final Random random=new Random();
  final List<Utilization> utilizations=StreamSupport.stream(spliteratorUnknownSize(new DateTimeIterator(DateTime.now().minusMonths(1),DateTime.now(),Minutes.minutes(5)),Spliterator.ORDERED),false).flatMap(ts -> Stream.of(CAR,DISABLED,ELECTRIC_CAR).filter(facility.builtCapacity::containsKey).flatMap(capacityType -> {
    final Stream.Builder<UtilizationKey> builder=Stream.builder();
    builder.add(new UtilizationKey(facilityId,capacityType,Usage.PARK_AND_RIDE));
    if (capacityType == CAR) {
      builder.add(new UtilizationKey(facilityId,capacityType,Usage.HSL_TRAVEL_CARD));
    }
    return builder.build();
  }
).map(utilizationKey -> newUtilization(utilizationKey,facility.builtCapacity.get(utilizationKey.capacityType),ts.minusSeconds(random.nextInt(180))))).collect(toList());
  utilizationRepository.insertUtilizations(utilizations);
  predictionService.signalUpdateNeeded(utilizations);
  return new ResponseEntity<>(CREATED);
}","@RequestMapping(method=PUT,value=DEV_UTILIZATION) @TransactionalWrite public ResponseEntity<Void> generateUtilizationData(@NotNull @PathVariable(FACILITY_ID) Long facilityId){
  final Facility facility=facilityRepository.getFacility(facilityId);
  final Random random=new Random();
  final List<Utilization> utilizations=StreamSupport.stream(spliteratorUnknownSize(new DateTimeIterator(DateTime.now().minusMonths(1),DateTime.now(),Minutes.minutes(5)),Spliterator.ORDERED),false).flatMap(ts -> Stream.of(CAR,DISABLED,ELECTRIC_CAR).filter(facility.builtCapacity::containsKey).flatMap(capacityType -> {
    final Stream.Builder<UtilizationKey> builder=Stream.builder();
    builder.add(new UtilizationKey(facilityId,capacityType,Usage.PARK_AND_RIDE));
    if (capacityType == CAR) {
      builder.add(new UtilizationKey(facilityId,capacityType,Usage.COMMERCIAL));
    }
    return builder.build();
  }
).map(utilizationKey -> newUtilization(utilizationKey,facility.builtCapacity.get(utilizationKey.capacityType),ts.minusSeconds(random.nextInt(180))))).collect(toList());
  utilizationRepository.insertUtilizations(utilizations);
  predictionService.signalUpdateNeeded(utilizations);
  return new ResponseEntity<>(CREATED);
}",0.9906007355946056
141481,"@RequestMapping(method=GET,value=FACILITY_PREDICTION,produces=APPLICATION_JSON_VALUE) public ResponseEntity<List<PredictionResult>> getPrediction(@PathVariable(FACILITY_ID) long facilityId,@ModelAttribute @Valid PredictionRequest request){
  DateTime time=request.requestedTime();
  log.info(""String_Node_Str"",facilityId,time);
  List<PredictionBatch> predictions=predictionService.getPredictionsByFacility(facilityId,time);
  List<PredictionResult> results=predictions.stream().flatMap(pb -> PredictionResult.from(pb).stream()).collect(toList());
  return new ResponseEntity<>(results,OK);
}","@RequestMapping(method=GET,value=FACILITY_PREDICTION,produces=APPLICATION_JSON_VALUE) public ResponseEntity<List<PredictionResult>> getPrediction(@PathVariable(FACILITY_ID) long facilityId,@ModelAttribute @Valid PredictionRequest request){
  DateTime time=request.requestedTime();
  log.info(""String_Node_Str"",facilityId,time);
  List<PredictionResult> results=predictionService.getPredictionResultByFacility(facilityId,time);
  return new ResponseEntity<>(results,OK);
}",0.786453433678269
141482,"@RequestMapping(method=GET,value=HUB_PREDICTION,produces=APPLICATION_JSON_VALUE) public ResponseEntity<List<HubPredictionResult>> getPrediction(@PathVariable(HUB_ID) long hubId,@ModelAttribute @Valid PredictionRequest request){
  DateTime time=request.requestedTime();
  log.info(""String_Node_Str"",hubId,time);
  final List<HubPredictionResult> results=hubService.getHub(hubId).facilityIds.stream().flatMap(facilityId -> predictionService.getPredictionsByFacility(facilityId,time).stream()).flatMap(pb -> PredictionResult.from(pb).stream()).collect(groupingBy(result -> result.capacityType.name() + result.usage.name())).values().stream().map(list -> HubPredictionResult.sumFrom(hubId,list)).collect(toList());
  return new ResponseEntity<>(results,OK);
}","@RequestMapping(method=GET,value=HUB_PREDICTION,produces=APPLICATION_JSON_VALUE) public ResponseEntity<List<HubPredictionResult>> getPrediction(@PathVariable(HUB_ID) long hubId,@ModelAttribute @Valid PredictionRequest request){
  DateTime time=request.requestedTime();
  log.info(""String_Node_Str"",hubId,time);
  final List<HubPredictionResult> results=hubService.getHub(hubId).facilityIds.stream().flatMap(facilityId -> predictionService.getPredictionResultByFacility(facilityId,time).stream()).collect(groupingBy(result -> result.capacityType.name() + result.usage.name())).values().stream().map(list -> HubPredictionResult.sumFrom(hubId,list)).collect(toList());
  return new ResponseEntity<>(results,OK);
}",0.9610921501706484
141483,"public static Utilization newUtilization(){
  Utilization u=new Utilization();
  u.capacityType=CapacityType.CAR;
  u.usage=Usage.HSL_TRAVEL_CARD;
  u.spacesAvailable=30;
  u.timestamp=new DateTime();
  return u;
}","public static Utilization newUtilization(){
  Utilization u=new Utilization();
  u.capacityType=CapacityType.CAR;
  u.usage=Usage.PARK_AND_RIDE;
  u.spacesAvailable=30;
  u.timestamp=new DateTime();
  return u;
}",0.9483568075117372
141484,"@Before public void initFixture(){
  devHelper.deleteAll();
  facilityId=dummies.createFacility();
  Long operatorId=facilityService.getFacility(facilityId).operatorId;
  user=devHelper.createOrUpdateUser(new NewUser(1L,""String_Node_Str"",OPERATOR_API,operatorId,""String_Node_Str""));
  authToken=devHelper.login(user.username).token;
}","@Before public void initFixture(){
  devHelper.deleteAll();
  facilityId=dummies.createFacility();
  f=facilityService.getFacility(facilityId);
  Long operatorId=f.operatorId;
  user=devHelper.createOrUpdateUser(new NewUser(1L,""String_Node_Str"",OPERATOR_API,operatorId,""String_Node_Str""));
  adminUser=devHelper.createOrUpdateUser(new NewUser(100l,""String_Node_Str"",ADMIN,""String_Node_Str""));
  f.pricingMethod=PricingMethod.PARK_AND_RIDE_247_FREE;
  f.pricing=emptyList();
  facilityService.updateFacility(f.id,f,adminUser);
}",0.6132404181184669
141485,"@Test public void hub_sums_predictions_for_facilities(){
  final long facility2Id=dummies.createFacility();
  final Long operator2Id=facilityService.getFacility(facility2Id).operatorId;
  final User user2=devHelper.createOrUpdateUser(new NewUser(2L,""String_Node_Str"",OPERATOR_API,operator2Id,""String_Node_Str""));
  final long hubId=dummies.createHub(facilityId,facility2Id);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facilityId,user);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facility2Id,user2);
  makeDummyPredictions(Usage.COMMERCIAL,facility2Id,user2);
  final HubPredictionResult[] predictionsForHub=getPredictionsForHub(hubId);
  assertThat(predictionsForHub[0].hubId).isEqualTo(hubId);
  assertThat(predictionsForHub[0].capacityType).isEqualTo(CapacityType.CAR);
  assertIsNear(DateTime.now(),predictionsForHub[0].timestamp);
  final HubPredictionResult parkAndRide=stream(predictionsForHub).filter(pred -> pred.usage == Usage.PARK_AND_RIDE).findFirst().get();
  assertThat(parkAndRide.spacesAvailable).isEqualTo(SPACES_AVAILABLE * 2);
  final HubPredictionResult commercial=stream(predictionsForHub).filter(pred -> pred.usage == Usage.COMMERCIAL).findFirst().get();
  assertThat(commercial.spacesAvailable).isEqualTo(SPACES_AVAILABLE);
}","@Test public void hub_sums_predictions_for_facilities(){
  final long facility2Id=dummies.createFacility();
  final Long operator2Id=facilityService.getFacility(facility2Id).operatorId;
  final User user2=devHelper.createOrUpdateUser(new NewUser(2L,""String_Node_Str"",OPERATOR_API,operator2Id,""String_Node_Str""));
  final long hubId=dummies.createHub(facilityId,facility2Id);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facilityId,user);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facility2Id,user2);
  makeDummyPredictions(Usage.COMMERCIAL,facility2Id,user2);
  final Facility f2=facilityService.getFacility(facility2Id);
  f2.builtCapacity=ImmutableMap.of(CAR,1000);
  f2.pricing=asList(new Pricing(CAR,PARK_AND_RIDE,1000,BUSINESS_DAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,PARK_AND_RIDE,1000,SATURDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,PARK_AND_RIDE,1000,SUNDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,COMMERCIAL,1000,BUSINESS_DAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,COMMERCIAL,1000,SATURDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,COMMERCIAL,1000,SUNDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  ;
  f2.pricingMethod=PricingMethod.CUSTOM;
  facilityService.updateFacility(f2.id,f2,adminUser);
  final HubPredictionResult[] predictionsForHub=getPredictionsForHub(hubId);
  assertThat(predictionsForHub).hasSize(2);
  assertThat(predictionsForHub[0].hubId).isEqualTo(hubId);
  assertThat(predictionsForHub[0].capacityType).isEqualTo(CapacityType.CAR);
  assertIsNear(DateTime.now(),predictionsForHub[0].timestamp);
  final HubPredictionResult parkAndRide=stream(predictionsForHub).filter(pred -> pred.usage == Usage.PARK_AND_RIDE).findFirst().get();
  assertThat(parkAndRide.spacesAvailable).isEqualTo(SPACES_AVAILABLE * 2);
  final HubPredictionResult commercial=stream(predictionsForHub).filter(pred -> pred.usage == Usage.COMMERCIAL).findFirst().get();
  assertThat(commercial.spacesAvailable).isEqualTo(SPACES_AVAILABLE);
}",0.3945172824791418
141486,"@Test public void returns_predictions_for_all_capacity_types_and_usages(){
  makeDummyPredictions(Usage.HSL_TRAVEL_CARD);
  makeDummyPredictions(Usage.COMMERCIAL);
  PredictionResult[] predictions=getPredictions(facilityId);
  assertThat(predictions).hasSize(2);
}","@Test public void returns_predictions_for_all_capacity_types_and_usages(){
  makeDummyPredictions(Usage.HSL_TRAVEL_CARD);
  makeDummyPredictions(Usage.COMMERCIAL);
  f.builtCapacity=ImmutableMap.of(CAR,1000);
  f.pricingMethod=CUSTOM;
  f.pricing=asList(new Pricing(CAR,HSL_TRAVEL_CARD,1000,BUSINESS_DAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,HSL_TRAVEL_CARD,1000,SATURDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,HSL_TRAVEL_CARD,1000,SUNDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,COMMERCIAL,1000,BUSINESS_DAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,COMMERCIAL,1000,SATURDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,COMMERCIAL,1000,SUNDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  facilityService.updateFacility(f.id,f,adminUser);
  PredictionResult[] predictions=getPredictions(facilityId);
  assertThat(predictions).hasSize(2);
}",0.4167324388318863
141487,"@TransactionalRead public Set<Utilization> findLatestUtilization(long facilityId){
  final Facility facility=getFacility(facilityId);
  return utilizationRepository.findLatestUtilization(facilityId).stream().filter(u -> facility.builtCapacity.getOrDefault(u.capacityType,0) > 0).filter(u -> facility.usages.contains(u.usage)).collect(toSet());
}","@TransactionalRead public Set<Utilization> findLatestUtilization(long facilityId){
  final Facility facility=getFacility(facilityId);
  final Map<CapacityType,Set<Usage>> usagesByCapacityType=FacilityUtil.usagesByCapacityType(facility);
  return utilizationRepository.findLatestUtilization(facilityId).stream().filter(u -> usagesByCapacityType.getOrDefault(u.capacityType,emptySet()).contains(u.usage)).filter(u -> facility.builtCapacity.getOrDefault(u.capacityType,0) > 0).collect(toSet());
}",0.711217183770883
141488,"/** 
 * Get the predictions by facility. Predictions that don't match the current built capacity or usage of the facility are left out.
 * @param facilityId the id of the facility
 * @param time the timestamp for the predictions
 * @return prediction results
 */
public List<PredictionResult> getPredictionResultByFacility(long facilityId,DateTime time){
  final Facility facility=facilityRepository.getFacility(facilityId);
  return getPredictionsByFacility(facilityId,time).stream().flatMap(pb -> PredictionResult.from(pb).stream()).filter(pr -> facility.usages.contains(pr.usage)).filter(pr -> facility.builtCapacity.getOrDefault(pr.capacityType,0) > 0).collect(toList());
}","/** 
 * Get the predictions by facility. Predictions that don't match the current built capacity or usage of the facility are left out.
 * @param facilityId the id of the facility
 * @param time the timestamp for the predictions
 * @return prediction results
 */
public List<PredictionResult> getPredictionResultByFacility(long facilityId,DateTime time){
  final Facility facility=facilityRepository.getFacility(facilityId);
  Map<CapacityType,Set<Usage>> usagesByCapacityType=FacilityUtil.usagesByCapacityType(facility);
  return getPredictionsByFacility(facilityId,time).stream().flatMap(pb -> PredictionResult.from(pb).stream()).filter(pr -> usagesByCapacityType.getOrDefault(pr.capacityType,emptySet()).contains(pr.usage)).filter(pr -> facility.builtCapacity.getOrDefault(pr.capacityType,0) > 0).collect(toList());
}",0.884435537742151
141489,"@RequestMapping(method=PUT,value=DEV_UTILIZATION) @TransactionalWrite public ResponseEntity<Void> generateUtilizationData(@NotNull @PathVariable(FACILITY_ID) Long facilityId){
  final Facility facility=facilityRepository.getFacility(facilityId);
  final Random random=new Random();
  final List<Utilization> utilizations=StreamSupport.stream(spliteratorUnknownSize(new DateTimeIterator(DateTime.now().minusMonths(1),DateTime.now(),Minutes.minutes(5)),Spliterator.ORDERED),false).flatMap(ts -> Stream.of(CAR,DISABLED,ELECTRIC_CAR).filter(facility.builtCapacity::containsKey).flatMap(capacityType -> {
    final Stream.Builder<UtilizationKey> builder=Stream.builder();
    builder.add(new UtilizationKey(facilityId,capacityType,Usage.PARK_AND_RIDE));
    if (capacityType == CAR) {
      builder.add(new UtilizationKey(facilityId,capacityType,Usage.COMMERCIAL));
    }
    return builder.build();
  }
).map(utilizationKey -> newUtilization(utilizationKey,facility.builtCapacity.get(utilizationKey.capacityType),ts.minusSeconds(random.nextInt(180))))).collect(toList());
  utilizationRepository.insertUtilizations(utilizations);
  predictionService.signalUpdateNeeded(utilizations);
  return new ResponseEntity<>(CREATED);
}","@RequestMapping(method=PUT,value=DEV_UTILIZATION) @TransactionalWrite public ResponseEntity<Void> generateUtilizationData(@NotNull @PathVariable(FACILITY_ID) Long facilityId){
  final Facility facility=facilityRepository.getFacility(facilityId);
  final Random random=new Random();
  final List<Utilization> utilizations=StreamSupport.stream(spliteratorUnknownSize(new DateTimeIterator(DateTime.now().minusMonths(1),DateTime.now(),Minutes.minutes(5)),Spliterator.ORDERED),false).flatMap(ts -> facility.builtCapacity.keySet().stream().flatMap(capacityType -> {
    if (facility.pricingMethod == PricingMethod.PARK_AND_RIDE_247_FREE) {
      return Stream.of(new UtilizationKey(facilityId,capacityType,Usage.PARK_AND_RIDE));
    }
 else {
      return facility.pricing.stream().filter(pr -> pr.capacityType == capacityType).map(pr -> new UtilizationKey(facilityId,capacityType,pr.usage));
    }
  }
).map(utilizationKey -> newUtilization(utilizationKey,facility.builtCapacity.get(utilizationKey.capacityType),ts.minusSeconds(random.nextInt(180))))).collect(toList());
  utilizationRepository.insertUtilizations(utilizations);
  predictionService.signalUpdateNeeded(utilizations);
  return new ResponseEntity<>(CREATED);
}",0.7778688524590164
141490,"@Test public void hub_excludes_prediction_if_no_usage(){
  final long facility2Id=dummies.createFacility();
  final Long operator2Id=facilityService.getFacility(facility2Id).operatorId;
  final User user2=devHelper.createOrUpdateUser(new NewUser(2L,""String_Node_Str"",OPERATOR_API,operator2Id,""String_Node_Str""));
  final long hubId=dummies.createHub(facilityId,facility2Id);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facilityId,user);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facility2Id,user2);
  makeDummyPredictions(Usage.COMMERCIAL,facility2Id,user2);
  final Facility f2=facilityService.getFacility(facility2Id);
  f2.builtCapacity=ImmutableMap.of(CAR,1000);
  f2.pricingMethod=PARK_AND_RIDE_247_FREE;
  f2.pricing=emptyList();
  facilityService.updateFacility(f2.id,f2,adminUser);
  final HubPredictionResult[] predictionsForHub=getPredictionsForHub(hubId);
  assertThat(predictionsForHub[0].hubId).isEqualTo(hubId);
  assertThat(predictionsForHub[0].capacityType).isEqualTo(CapacityType.CAR);
  assertIsNear(DateTime.now(),predictionsForHub[0].timestamp);
  assertThat(predictionsForHub).hasSize(1).extracting(hpr -> hpr.usage).containsExactly(PARK_AND_RIDE);
  final HubPredictionResult parkAndRide=predictionsForHub[0];
  assertThat(parkAndRide.spacesAvailable).isEqualTo(SPACES_AVAILABLE * 2);
}","@Test public void hub_excludes_prediction_if_no_usage(){
  final long facility2Id=dummies.createFacility();
  final Long operator2Id=facilityService.getFacility(facility2Id).operatorId;
  final User user2=devHelper.createOrUpdateUser(new NewUser(2L,""String_Node_Str"",OPERATOR_API,operator2Id,""String_Node_Str""));
  final long hubId=dummies.createHub(facilityId,facility2Id);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facilityId,user,CapacityType.CAR);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facility2Id,user2,CapacityType.CAR);
  makeDummyPredictions(Usage.COMMERCIAL,facility2Id,user2,CapacityType.CAR);
  final Facility f2=facilityService.getFacility(facility2Id);
  f2.builtCapacity=ImmutableMap.of(CAR,1000);
  f2.pricingMethod=PARK_AND_RIDE_247_FREE;
  f2.pricing=emptyList();
  facilityService.updateFacility(f2.id,f2,adminUser);
  final HubPredictionResult[] predictionsForHub=getPredictionsForHub(hubId);
  assertThat(predictionsForHub[0].hubId).isEqualTo(hubId);
  assertThat(predictionsForHub[0].capacityType).isEqualTo(CapacityType.CAR);
  assertIsNear(DateTime.now(),predictionsForHub[0].timestamp);
  assertThat(predictionsForHub).hasSize(1).extracting(hpr -> hpr.usage).containsExactly(PARK_AND_RIDE);
  final HubPredictionResult parkAndRide=predictionsForHub[0];
  assertThat(parkAndRide.spacesAvailable).isEqualTo(SPACES_AVAILABLE * 2);
}",0.9808773903262092
141491,"@Test public void hub_sums_predictions_for_facilities(){
  final long facility2Id=dummies.createFacility();
  final Long operator2Id=facilityService.getFacility(facility2Id).operatorId;
  final User user2=devHelper.createOrUpdateUser(new NewUser(2L,""String_Node_Str"",OPERATOR_API,operator2Id,""String_Node_Str""));
  final long hubId=dummies.createHub(facilityId,facility2Id);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facilityId,user);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facility2Id,user2);
  makeDummyPredictions(Usage.COMMERCIAL,facility2Id,user2);
  final Facility f2=facilityService.getFacility(facility2Id);
  f2.builtCapacity=ImmutableMap.of(CAR,1000);
  f2.pricing=asList(new Pricing(CAR,PARK_AND_RIDE,1000,BUSINESS_DAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,PARK_AND_RIDE,1000,SATURDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,PARK_AND_RIDE,1000,SUNDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,COMMERCIAL,1000,BUSINESS_DAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,COMMERCIAL,1000,SATURDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,COMMERCIAL,1000,SUNDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  ;
  f2.pricingMethod=PricingMethod.CUSTOM;
  facilityService.updateFacility(f2.id,f2,adminUser);
  final HubPredictionResult[] predictionsForHub=getPredictionsForHub(hubId);
  assertThat(predictionsForHub).hasSize(2);
  assertThat(predictionsForHub[0].hubId).isEqualTo(hubId);
  assertThat(predictionsForHub[0].capacityType).isEqualTo(CapacityType.CAR);
  assertIsNear(DateTime.now(),predictionsForHub[0].timestamp);
  final HubPredictionResult parkAndRide=stream(predictionsForHub).filter(pred -> pred.usage == Usage.PARK_AND_RIDE).findFirst().get();
  assertThat(parkAndRide.spacesAvailable).isEqualTo(SPACES_AVAILABLE * 2);
  final HubPredictionResult commercial=stream(predictionsForHub).filter(pred -> pred.usage == Usage.COMMERCIAL).findFirst().get();
  assertThat(commercial.spacesAvailable).isEqualTo(SPACES_AVAILABLE);
}","@Test public void hub_sums_predictions_for_facilities(){
  final long facility2Id=dummies.createFacility();
  final Long operator2Id=facilityService.getFacility(facility2Id).operatorId;
  final User user2=devHelper.createOrUpdateUser(new NewUser(2L,""String_Node_Str"",OPERATOR_API,operator2Id,""String_Node_Str""));
  final long hubId=dummies.createHub(facilityId,facility2Id);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facilityId,user,CapacityType.CAR);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facility2Id,user2,CapacityType.CAR);
  makeDummyPredictions(Usage.COMMERCIAL,facility2Id,user2,CapacityType.CAR);
  final Facility f2=facilityService.getFacility(facility2Id);
  f2.builtCapacity=ImmutableMap.of(CAR,1000);
  f2.pricing=asList(new Pricing(CAR,PARK_AND_RIDE,1000,BUSINESS_DAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,PARK_AND_RIDE,1000,SATURDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,PARK_AND_RIDE,1000,SUNDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,COMMERCIAL,1000,BUSINESS_DAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,COMMERCIAL,1000,SATURDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new Pricing(CAR,COMMERCIAL,1000,SUNDAY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  ;
  f2.pricingMethod=PricingMethod.CUSTOM;
  facilityService.updateFacility(f2.id,f2,adminUser);
  final HubPredictionResult[] predictionsForHub=getPredictionsForHub(hubId);
  assertThat(predictionsForHub).hasSize(2);
  assertThat(predictionsForHub[0].hubId).isEqualTo(hubId);
  assertThat(predictionsForHub[0].capacityType).isEqualTo(CapacityType.CAR);
  assertIsNear(DateTime.now(),predictionsForHub[0].timestamp);
  final HubPredictionResult parkAndRide=stream(predictionsForHub).filter(pred -> pred.usage == Usage.PARK_AND_RIDE).findFirst().get();
  assertThat(parkAndRide.spacesAvailable).isEqualTo(SPACES_AVAILABLE * 2);
  final HubPredictionResult commercial=stream(predictionsForHub).filter(pred -> pred.usage == Usage.COMMERCIAL).findFirst().get();
  assertThat(commercial.spacesAvailable).isEqualTo(SPACES_AVAILABLE);
}",0.98805340829234
141492,"private Utilization makeDummyPredictions(Usage usage,long facilityId,User user){
  Utilization u=new Utilization();
  u.facilityId=facilityId;
  u.capacityType=CapacityType.CAR;
  u.usage=usage;
  u.timestamp=now;
  u.spacesAvailable=SPACES_AVAILABLE;
  facilityService.registerUtilization(facilityId,Collections.singletonList(u),user);
  predictionService.updatePredictions();
  return u;
}","private Utilization makeDummyPredictions(Usage usage,long facilityId,User user,CapacityType capacityType){
  Utilization u=new Utilization();
  u.facilityId=facilityId;
  u.capacityType=capacityType;
  u.usage=usage;
  u.timestamp=now;
  u.spacesAvailable=SPACES_AVAILABLE;
  facilityService.registerUtilization(facilityId,Collections.singletonList(u),user);
  predictionService.updatePredictions();
  return u;
}",0.9601990049751244
141493,"@Test public void hub_excludes_prediction_if_no_built_capacity(){
  final long facility2Id=dummies.createFacility();
  final Long operator2Id=facilityService.getFacility(facility2Id).operatorId;
  final User user2=devHelper.createOrUpdateUser(new NewUser(2L,""String_Node_Str"",OPERATOR_API,operator2Id,""String_Node_Str""));
  final long hubId=dummies.createHub(facilityId,facility2Id);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facilityId,user);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facility2Id,user2);
  makeDummyPredictions(Usage.COMMERCIAL,facility2Id,user2);
  final Facility f2=facilityService.getFacility(facility2Id);
  f2.pricing=emptyList();
  f2.pricingMethod=PricingMethod.PARK_AND_RIDE_247_FREE;
  f2.builtCapacity=ImmutableMap.of(CapacityType.BICYCLE,1);
  facilityService.updateFacility(f2.id,f2,adminUser);
  final HubPredictionResult[] predictionsForHub=getPredictionsForHub(hubId);
  assertThat(predictionsForHub).hasSize(1);
  assertThat(predictionsForHub[0].hubId).isEqualTo(hubId);
  assertThat(predictionsForHub[0].capacityType).isEqualTo(CapacityType.CAR);
  assertIsNear(DateTime.now(),predictionsForHub[0].timestamp);
  final HubPredictionResult parkAndRide=stream(predictionsForHub).filter(pred -> pred.usage == Usage.PARK_AND_RIDE).findFirst().get();
  assertThat(parkAndRide.spacesAvailable).isEqualTo(SPACES_AVAILABLE);
}","@Test public void hub_excludes_prediction_if_no_built_capacity(){
  final long facility2Id=dummies.createFacility();
  final Long operator2Id=facilityService.getFacility(facility2Id).operatorId;
  final User user2=devHelper.createOrUpdateUser(new NewUser(2L,""String_Node_Str"",OPERATOR_API,operator2Id,""String_Node_Str""));
  final long hubId=dummies.createHub(facilityId,facility2Id);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facilityId,user,CapacityType.CAR);
  makeDummyPredictions(Usage.PARK_AND_RIDE,facility2Id,user2,CapacityType.CAR);
  makeDummyPredictions(Usage.COMMERCIAL,facility2Id,user2,CapacityType.CAR);
  final Facility f2=facilityService.getFacility(facility2Id);
  f2.pricing=emptyList();
  f2.pricingMethod=PricingMethod.PARK_AND_RIDE_247_FREE;
  f2.builtCapacity=ImmutableMap.of(CapacityType.BICYCLE,1);
  facilityService.updateFacility(f2.id,f2,adminUser);
  final HubPredictionResult[] predictionsForHub=getPredictionsForHub(hubId);
  assertThat(predictionsForHub).hasSize(1);
  assertThat(predictionsForHub[0].hubId).isEqualTo(hubId);
  assertThat(predictionsForHub[0].capacityType).isEqualTo(CapacityType.CAR);
  assertIsNear(DateTime.now(),predictionsForHub[0].timestamp);
  final HubPredictionResult parkAndRide=stream(predictionsForHub).filter(pred -> pred.usage == Usage.PARK_AND_RIDE).findFirst().get();
  assertThat(parkAndRide.spacesAvailable).isEqualTo(SPACES_AVAILABLE);
}",0.9815150416817688
141494,"private void multiCapacityCreate(){
  DateTime now=DateTime.now();
  Utilization u1=new Utilization();
  u1.timestamp=now;
  u1.spacesAvailable=1;
  u1.capacityType=CapacityType.CAR;
  u1.usage=Usage.PARK_AND_RIDE;
  Utilization u2=new Utilization();
  u2.timestamp=now.minusSeconds(10);
  u2.spacesAvailable=1;
  u2.capacityType=CapacityType.BICYCLE;
  u2.usage=Usage.PARK_AND_RIDE;
  Utilization u3=new Utilization();
  u3.timestamp=now.minusSeconds(20);
  u3.spacesAvailable=2;
  u3.capacityType=CapacityType.ELECTRIC_CAR;
  u3.usage=Usage.PARK_AND_RIDE;
  List<Utilization> payload=Lists.newArrayList(u1,u2,u3);
  givenWithContent(authToken).body(payload).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().statusCode(OK.value());
  Utilization[] results=getUtilizations();
  assertThat(results).extracting(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").contains(tuple(f.id,u1.capacityType,u1.usage,u1.spacesAvailable,u1.timestamp.toInstant()),tuple(f.id,u2.capacityType,u2.usage,u2.spacesAvailable,u2.timestamp.toInstant()),tuple(f.id,u3.capacityType,u3.usage,u3.spacesAvailable,u3.timestamp.toInstant()));
}","private void multiCapacityCreate(Usage usageCar,Usage usageBike,Usage usageElectric){
  DateTime now=DateTime.now();
  Utilization u1=new Utilization();
  u1.timestamp=now;
  u1.spacesAvailable=1;
  u1.capacityType=CapacityType.CAR;
  u1.usage=usageCar;
  Utilization u2=new Utilization();
  u2.timestamp=now.minusSeconds(10);
  u2.spacesAvailable=1;
  u2.capacityType=CapacityType.BICYCLE;
  u2.usage=usageBike;
  Utilization u3=new Utilization();
  u3.timestamp=now.minusSeconds(20);
  u3.spacesAvailable=2;
  u3.capacityType=CapacityType.ELECTRIC_CAR;
  u3.usage=usageElectric;
  List<Utilization> payload=Lists.newArrayList(u1,u2,u3);
  registerUtilizations(payload);
  Utilization[] results=getUtilizations();
  assertThat(results).extracting(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").contains(tuple(f.id,u1.capacityType,u1.usage,u1.spacesAvailable,u1.timestamp.toInstant()),tuple(f.id,u2.capacityType,u2.usage,u2.spacesAvailable,u2.timestamp.toInstant()),tuple(f.id,u3.capacityType,u3.usage,u3.spacesAvailable,u3.timestamp.toInstant()));
}",0.8753880266075388
141495,"private void updatePredictor(Long predictorId){
  PredictorState state=predictorRepository.getForUpdate(predictorId);
  state.moreUtilizations=false;
  getPredictor(state.predictorType).ifPresent(predictor -> {
    List<Prediction> predictions=predictor.predict(state,new UtilizationHistoryImpl(utilizationRepository,state.utilizationKey));
    predictionRepository.updatePredictions(toPredictionBatch(state,predictions),predictorId);
    predictorRepository.save(state);
  }
);
}","private void updatePredictor(Long predictorId){
  PredictorState state=predictorRepository.getForUpdate(predictorId);
  state.moreUtilizations=false;
  getPredictor(state.predictorType).ifPresent(predictor -> {
    List<Prediction> predictions=predictor.predict(state,new UtilizationHistoryImpl(utilizationRepository,state.utilizationKey));
    predictionRepository.updatePredictions(toPredictionBatch(state,predictions),predictorId);
  }
);
  predictorRepository.save(state);
}",0.9874739039665972
141496,"private void addRegionsSheet(Excel excel,List<Hub> hubs,Map<Long,List<Facility>> facilitiesByHubId){
  excel.addSheet(""String_Node_Str"",hubs,asList(col(""String_Node_Str"",h -> h.name),col(""String_Node_Str"",h -> addressText(h.address)),col(""String_Node_Str"",h -> h.location.getX()),col(""String_Node_Str"",h -> h.location.getY()),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,motorCapacities)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,bicycleCapacities)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,CAR)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,DISABLED)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,ELECTRIC_CAR)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,MOTORCYCLE)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,BICYCLE)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,BICYCLE_SECURE_SPACE)),col(""String_Node_Str"",h -> facilitiesByHubId.get(h.id).stream().map((  Facility f) -> f.name.fi).collect(toList()))));
}","private void addRegionsSheet(Excel excel,List<Hub> hubs,Map<Long,List<Facility>> facilitiesByHubId){
  excel.addSheet(""String_Node_Str"",hubs,asList(col(""String_Node_Str"",(  Hub h) -> h.name),col(""String_Node_Str"",(  Hub h) -> addressText(h.address)),col(""String_Node_Str"",(  Hub h) -> h.location.getX()),col(""String_Node_Str"",(  Hub h) -> h.location.getY()),col(""String_Node_Str"",(  Hub h) -> capcitySum(facilitiesByHubId,h.id,motorCapacities)),col(""String_Node_Str"",(  Hub h) -> capcitySum(facilitiesByHubId,h.id,bicycleCapacities)),col(""String_Node_Str"",(  Hub h) -> capcitySum(facilitiesByHubId,h.id,CAR)),col(""String_Node_Str"",(  Hub h) -> capcitySum(facilitiesByHubId,h.id,DISABLED)),col(""String_Node_Str"",(  Hub h) -> capcitySum(facilitiesByHubId,h.id,ELECTRIC_CAR)),col(""String_Node_Str"",(  Hub h) -> capcitySum(facilitiesByHubId,h.id,MOTORCYCLE)),col(""String_Node_Str"",(  Hub h) -> capcitySum(facilitiesByHubId,h.id,BICYCLE)),col(""String_Node_Str"",(  Hub h) -> capcitySum(facilitiesByHubId,h.id,BICYCLE_SECURE_SPACE)),col(""String_Node_Str"",(  Hub h) -> facilitiesByHubId.get(h.id).stream().map((  Facility f) -> f.name.fi).collect(toList()))));
}",0.7667876588021778
141497,"private void addFacilitiesSheet(Excel excel,List<Facility> facilities,Map<Long,List<Hub>> hubsByFacilityId){
  excel.addSheet(""String_Node_Str"",facilities,asList(col(""String_Node_Str"",(  Facility f) -> f.name),col(""String_Node_Str"",(  Facility f) -> join(""String_Node_Str"",f.aliases)),col(""String_Node_Str"",(  Facility f) -> hubsByFacilityId.get(f.id).stream().map(h -> h.name.fi).collect(joining(""String_Node_Str""))),col(""String_Node_Str"",(  Facility f) -> operatorService.getOperator(f.operatorId).name),col(""String_Node_Str"",(  Facility f) -> translationService.translate(f.status)),col(""String_Node_Str"",(  Facility f) -> f.statusDescription),col(""String_Node_Str"",(  Facility f) -> f.location.getCentroid().getX()),col(""String_Node_Str"",(  Facility f) -> f.location.getCentroid().getY()),col(""String_Node_Str"",(  Facility f) -> time(f.openingHours.byDayType.get(BUSINESS_DAY))),col(""String_Node_Str"",(  Facility f) -> time(f.openingHours.byDayType.get(SATURDAY))),col(""String_Node_Str"",(  Facility f) -> time(f.openingHours.byDayType.get(SUNDAY))),col(""String_Node_Str"",(  Facility f) -> f.openingHours.info),col(""String_Node_Str"",(  Facility f) -> capacitySum(f.builtCapacity,motorCapacityList)),col(""String_Node_Str"",(  Facility f) -> capacitySum(f.builtCapacity,bicycleCapacityList)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(CAR)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(DISABLED)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(ELECTRIC_CAR)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(MOTORCYCLE)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(BICYCLE)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(BICYCLE_SECURE_SPACE)),col(""String_Node_Str"",(  Facility f) -> f.pricing.stream().map((p) -> translationService.translate(p.usage)).distinct().collect(joining(""String_Node_Str""))),col(""String_Node_Str"",(  Facility f) -> f.paymentInfo.paymentMethods.stream().map(m -> translationService.translate(m)).collect(joining(""String_Node_Str""))),col(""String_Node_Str"",(  Facility f) -> f.paymentInfo.detail),col(""String_Node_Str"",(  Facility f) -> f.services.stream().map(s -> translationService.translate(s)).collect(joining(""String_Node_Str""))),col(""String_Node_Str"",(  Facility f) -> contactText(f.contacts.emergency)),col(""String_Node_Str"",(  Facility f) -> contactText(f.contacts.operator)),col(""String_Node_Str"",(  Facility f) -> contactText(f.contacts.service))));
}","private void addFacilitiesSheet(Excel excel,List<Facility> facilities,Map<Long,List<Hub>> hubsByFacilityId){
  excel.addSheet(""String_Node_Str"",facilities,asList(col(""String_Node_Str"",(  Facility f) -> f.name),col(""String_Node_Str"",(  Facility f) -> join(""String_Node_Str"",f.aliases)),col(""String_Node_Str"",(  Facility f) -> hubsByFacilityId.get(f.id).stream().map((  Hub h) -> h.name.fi).collect(joining(""String_Node_Str""))),col(""String_Node_Str"",(  Facility f) -> operatorService.getOperator(f.operatorId).name),col(""String_Node_Str"",(  Facility f) -> translationService.translate(f.status)),col(""String_Node_Str"",(  Facility f) -> f.statusDescription),col(""String_Node_Str"",(  Facility f) -> f.location.getCentroid().getX()),col(""String_Node_Str"",(  Facility f) -> f.location.getCentroid().getY()),col(""String_Node_Str"",(  Facility f) -> time(f.openingHours.byDayType.get(BUSINESS_DAY))),col(""String_Node_Str"",(  Facility f) -> time(f.openingHours.byDayType.get(SATURDAY))),col(""String_Node_Str"",(  Facility f) -> time(f.openingHours.byDayType.get(SUNDAY))),col(""String_Node_Str"",(  Facility f) -> f.openingHours.info),col(""String_Node_Str"",(  Facility f) -> capacitySum(f.builtCapacity,motorCapacityList)),col(""String_Node_Str"",(  Facility f) -> capacitySum(f.builtCapacity,bicycleCapacityList)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(CAR)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(DISABLED)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(ELECTRIC_CAR)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(MOTORCYCLE)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(BICYCLE)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(BICYCLE_SECURE_SPACE)),col(""String_Node_Str"",(  Facility f) -> f.pricing.stream().map((p) -> translationService.translate(p.usage)).distinct().collect(joining(""String_Node_Str""))),col(""String_Node_Str"",(  Facility f) -> f.paymentInfo.paymentMethods.stream().map(m -> translationService.translate(m)).collect(joining(""String_Node_Str""))),col(""String_Node_Str"",(  Facility f) -> f.paymentInfo.detail),col(""String_Node_Str"",(  Facility f) -> f.services.stream().map(s -> translationService.translate(s)).collect(joining(""String_Node_Str""))),col(""String_Node_Str"",(  Facility f) -> contactText(f.contacts.emergency)),col(""String_Node_Str"",(  Facility f) -> contactText(f.contacts.operator)),col(""String_Node_Str"",(  Facility f) -> contactText(f.contacts.service))));
}",0.9983838383838384
141498,"private void addRegionsSheet(Excel excel,List<Hub> hubs,Map<Long,List<Facility>> facilitiesByHubId){
  excel.addSheet(""String_Node_Str"",hubs,asList(col(""String_Node_Str"",h -> h.name),col(""String_Node_Str"",h -> addressText(h.address)),col(""String_Node_Str"",h -> h.location.getX()),col(""String_Node_Str"",h -> h.location.getY()),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,motorCapacities)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,bicycleCapacities)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,CAR)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,DISABLED)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,ELECTRIC_CAR)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,MOTORCYCLE)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,BICYCLE)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,BICYCLE_SECURE_SPACE)),col(""String_Node_Str"",h -> facilitiesByHubId.get(h.id).stream().map(f -> f.name.fi).collect(toList()))));
}","private void addRegionsSheet(Excel excel,List<Hub> hubs,Map<Long,List<Facility>> facilitiesByHubId){
  excel.addSheet(""String_Node_Str"",hubs,asList(col(""String_Node_Str"",h -> h.name),col(""String_Node_Str"",h -> addressText(h.address)),col(""String_Node_Str"",h -> h.location.getX()),col(""String_Node_Str"",h -> h.location.getY()),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,motorCapacities)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,bicycleCapacities)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,CAR)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,DISABLED)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,ELECTRIC_CAR)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,MOTORCYCLE)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,BICYCLE)),col(""String_Node_Str"",h -> capcitySum(facilitiesByHubId,h.id,BICYCLE_SECURE_SPACE)),col(""String_Node_Str"",h -> facilitiesByHubId.get(h.id).stream().map((  Facility f) -> f.name.fi).collect(toList()))));
}",0.9928126497364638
141499,"private void addFacilitiesSheet(Excel excel,List<Facility> facilities,Map<Long,List<Hub>> hubsByFacilityId){
  excel.addSheet(""String_Node_Str"",facilities,asList(col(""String_Node_Str"",f -> f.name),col(""String_Node_Str"",f -> join(""String_Node_Str"",f.aliases)),col(""String_Node_Str"",f -> hubsByFacilityId.get(f.id).stream().map(h -> h.name.fi).collect(joining(""String_Node_Str""))),col(""String_Node_Str"",f -> operatorService.getOperator(f.operatorId).name),col(""String_Node_Str"",f -> translationService.translate(f.status)),col(""String_Node_Str"",f -> f.statusDescription),col(""String_Node_Str"",f -> f.location.getCentroid().getX()),col(""String_Node_Str"",f -> f.location.getCentroid().getY()),col(""String_Node_Str"",f -> time(f.openingHours.byDayType.get(BUSINESS_DAY))),col(""String_Node_Str"",f -> time(f.openingHours.byDayType.get(SATURDAY))),col(""String_Node_Str"",f -> time(f.openingHours.byDayType.get(SUNDAY))),col(""String_Node_Str"",f -> f.openingHours.info),col(""String_Node_Str"",f -> capacitySum(f.builtCapacity,motorCapacityList)),col(""String_Node_Str"",f -> capacitySum(f.builtCapacity,bicycleCapacityList)),col(""String_Node_Str"",f -> f.builtCapacity.get(CAR)),col(""String_Node_Str"",f -> f.builtCapacity.get(DISABLED)),col(""String_Node_Str"",f -> f.builtCapacity.get(ELECTRIC_CAR)),col(""String_Node_Str"",f -> f.builtCapacity.get(MOTORCYCLE)),col(""String_Node_Str"",f -> f.builtCapacity.get(BICYCLE)),col(""String_Node_Str"",f -> f.builtCapacity.get(BICYCLE_SECURE_SPACE)),col(""String_Node_Str"",f -> f.pricing.stream().map((p) -> translationService.translate(p.usage)).distinct().collect(joining(""String_Node_Str""))),col(""String_Node_Str"",f -> f.paymentInfo.paymentMethods.stream().map(m -> translationService.translate(m)).collect(joining(""String_Node_Str""))),col(""String_Node_Str"",f -> f.paymentInfo.detail),col(""String_Node_Str"",f -> f.services.stream().map(s -> translationService.translate(s)).collect(joining(""String_Node_Str""))),col(""String_Node_Str"",f -> contactText(f.contacts.emergency)),col(""String_Node_Str"",f -> contactText(f.contacts.operator)),col(""String_Node_Str"",f -> contactText(f.contacts.service))));
}","private void addFacilitiesSheet(Excel excel,List<Facility> facilities,Map<Long,List<Hub>> hubsByFacilityId){
  excel.addSheet(""String_Node_Str"",facilities,asList(col(""String_Node_Str"",(  Facility f) -> f.name),col(""String_Node_Str"",(  Facility f) -> join(""String_Node_Str"",f.aliases)),col(""String_Node_Str"",(  Facility f) -> hubsByFacilityId.get(f.id).stream().map(h -> h.name.fi).collect(joining(""String_Node_Str""))),col(""String_Node_Str"",(  Facility f) -> operatorService.getOperator(f.operatorId).name),col(""String_Node_Str"",(  Facility f) -> translationService.translate(f.status)),col(""String_Node_Str"",(  Facility f) -> f.statusDescription),col(""String_Node_Str"",(  Facility f) -> f.location.getCentroid().getX()),col(""String_Node_Str"",(  Facility f) -> f.location.getCentroid().getY()),col(""String_Node_Str"",(  Facility f) -> time(f.openingHours.byDayType.get(BUSINESS_DAY))),col(""String_Node_Str"",(  Facility f) -> time(f.openingHours.byDayType.get(SATURDAY))),col(""String_Node_Str"",(  Facility f) -> time(f.openingHours.byDayType.get(SUNDAY))),col(""String_Node_Str"",(  Facility f) -> f.openingHours.info),col(""String_Node_Str"",(  Facility f) -> capacitySum(f.builtCapacity,motorCapacityList)),col(""String_Node_Str"",(  Facility f) -> capacitySum(f.builtCapacity,bicycleCapacityList)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(CAR)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(DISABLED)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(ELECTRIC_CAR)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(MOTORCYCLE)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(BICYCLE)),col(""String_Node_Str"",(  Facility f) -> f.builtCapacity.get(BICYCLE_SECURE_SPACE)),col(""String_Node_Str"",(  Facility f) -> f.pricing.stream().map((p) -> translationService.translate(p.usage)).distinct().collect(joining(""String_Node_Str""))),col(""String_Node_Str"",(  Facility f) -> f.paymentInfo.paymentMethods.stream().map(m -> translationService.translate(m)).collect(joining(""String_Node_Str""))),col(""String_Node_Str"",(  Facility f) -> f.paymentInfo.detail),col(""String_Node_Str"",(  Facility f) -> f.services.stream().map(s -> translationService.translate(s)).collect(joining(""String_Node_Str""))),col(""String_Node_Str"",(  Facility f) -> contactText(f.contacts.emergency)),col(""String_Node_Str"",(  Facility f) -> contactText(f.contacts.operator)),col(""String_Node_Str"",(  Facility f) -> contactText(f.contacts.service))));
}",0.9117839250707906
141500,"private int capcitySum(Map<Long,List<Facility>> facilitiesByHubId,long hubId,CapacityType... types){
  List<Facility> facilities=facilitiesByHubId.get(hubId);
  int sum=0;
  for (  CapacityType type : types) {
    sum+=facilities.stream().mapToInt(f -> f.builtCapacity.get(type)).sum();
  }
  return sum;
}","private int capcitySum(Map<Long,List<Facility>> facilitiesByHubId,long hubId,CapacityType... types){
  List<Facility> facilities=facilitiesByHubId.get(hubId);
  int sum=0;
  for (  CapacityType type : types) {
    sum+=facilities.stream().mapToInt((    Facility f) -> f.builtCapacity.get(type)).sum();
  }
  return sum;
}",0.9728867623604466
141501,"private List<Facility> getFacilities(){
  PageableFacilitySearch search=new PageableFacilitySearch();
  search.setLimit(10000);
  List<FacilityInfo> facilityInfos=facilityService.search(search).results;
  List<Facility> facilities=facilityInfos.stream().map(f -> facilityService.getFacility(f.id)).collect(toList());
  return facilities;
}","private List<Facility> getFacilities(){
  PageableFacilitySearch search=new PageableFacilitySearch();
  search.setLimit(10000);
  List<FacilityInfo> facilityInfos=facilityService.search(search).results;
  List<Facility> facilities=facilityInfos.stream().map((  Facility f) -> facilityService.getFacility(f.id)).collect(toList());
  return facilities;
}",0.9782923299565848
141502,"public byte[] reportHubsAndFacilities(User currentUser){
  authorize(currentUser,REPORT_GENERATE);
  List<Facility> facilities=getFacilities();
  List<Hub> hubs=getHubs();
  Map<Long,Facility> facilitiesByFacilityId=facilities.stream().collect(toMap(f -> f.id,identity()));
  Map<Long,List<Facility>> facilitiesByHubId=new HashMap<>();
  Map<Long,List<Hub>> hubsByFacilityId=new HashMap<>();
  hubs.stream().forEach(hub -> {
    facilitiesByHubId.put(hub.id,hub.facilityIds.stream().map(id -> facilitiesByFacilityId.get(id)).collect(toList()));
    for (    long facilityId : hub.facilityIds) {
      List<Hub> hubList=hubsByFacilityId.get(facilityId);
      if (hubList == null) {
        hubList=new ArrayList<>();
        hubsByFacilityId.put(facilityId,hubList);
      }
      hubList.add(hub);
    }
  }
);
  Excel excel=new Excel();
  addRegionsSheet(excel,hubs,facilitiesByHubId);
  addFacilitiesSheet(excel,facilities,hubsByFacilityId);
  excel.addSheet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return excel.toBytes();
}","public byte[] reportHubsAndFacilities(User currentUser){
  authorize(currentUser,REPORT_GENERATE);
  List<Facility> facilities=getFacilities();
  List<Hub> hubs=getHubs();
  Map<Long,Facility> facilitiesByFacilityId=facilities.stream().collect(toMap((  Facility f) -> f.id,identity()));
  Map<Long,List<Facility>> facilitiesByHubId=new HashMap<>();
  Map<Long,List<Hub>> hubsByFacilityId=new HashMap<>();
  hubs.stream().forEach(hub -> {
    facilitiesByHubId.put(hub.id,hub.facilityIds.stream().map(id -> facilitiesByFacilityId.get(id)).collect(toList()));
    for (    long facilityId : hub.facilityIds) {
      List<Hub> hubList=hubsByFacilityId.get(facilityId);
      if (hubList == null) {
        hubList=new ArrayList<>();
        hubsByFacilityId.put(facilityId,hubList);
      }
      hubList.add(hub);
    }
  }
);
  Excel excel=new Excel();
  addRegionsSheet(excel,hubs,facilitiesByHubId);
  addFacilitiesSheet(excel,facilities,hubsByFacilityId);
  excel.addSheet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return excel.toBytes();
}",0.9937264742785444
141503,"@TransactionalWrite public Set<Utilization> registerUtilization(long facilityId,List<Utilization> utilization,User currentUser){
  authorize(currentUser,repository.getFacilityInfo(facilityId),FACILITY_UTILIZATION_UPDATE);
  initUtilizationDefaults(facilityId,utilization);
  utilization.forEach(u -> validateUtilization(u,facilityId));
  utilizationRepository.insertUtilizations(utilization);
  predictionService.signalUpdateNeeded(utilization);
  return findLatestUtilization(facilityId);
}","@TransactionalWrite public Set<Utilization> registerUtilization(long facilityId,List<Utilization> utilization,User currentUser){
  authorize(currentUser,repository.getFacilityInfo(facilityId),FACILITY_UTILIZATION_UPDATE);
  initUtilizationDefaults(facilityId,utilization);
  validateUtilizations(facilityId,utilization);
  utilizationRepository.insertUtilizations(utilization);
  predictionService.signalUpdateNeeded(utilization);
  return findLatestUtilization(facilityId);
}",0.7197518097207859
141504,"private void validateUtilization(Utilization u,long expectedFacilityId){
  List<Violation> violations=new ArrayList<>();
  validationService.validate(u,violations);
  if (!Objects.equals(u.facilityId,expectedFacilityId)) {
    violations.add(new Violation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + expectedFacilityId + ""String_Node_Str""+ u.facilityId));
  }
  if (isFarIntoFuture(u.timestamp)) {
    violations.add(new Violation(""String_Node_Str"",""String_Node_Str"",u.timestamp + ""String_Node_Str"" + DateTime.now()));
  }
  if (!violations.isEmpty()) {
    throw new ValidationException(violations);
  }
}","private List<Violation> validateUtilization(Utilization u,long expectedFacilityId){
  List<Violation> violations=new ArrayList<>();
  validationService.validate(u,violations);
  if (!Objects.equals(u.facilityId,expectedFacilityId)) {
    violations.add(new Violation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + expectedFacilityId + ""String_Node_Str""+ u.facilityId));
  }
  if (isFarIntoFuture(u.timestamp)) {
    violations.add(new Violation(""String_Node_Str"",""String_Node_Str"",u.timestamp + ""String_Node_Str"" + DateTime.now()));
  }
  return violations;
}",0.9038785834738616
141505,"@Test public void timestamp_must_not_be_far_into_the_future(){
  givenWithContent(authToken).body(minValidPayload().put(Key.TIMESTAMP,DateTime.now().plusMinutes(3)).asArray()).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().spec(assertResponse(HttpStatus.BAD_REQUEST,ValidationException.class)).body(""String_Node_Str"",is(Key.TIMESTAMP)).body(""String_Node_Str"",is(""String_Node_Str""));
}","@Test public void timestamp_must_not_be_far_into_the_future(){
  givenWithContent(authToken).body(minValidPayload().put(Key.TIMESTAMP,DateTime.now().plusMinutes(3)).asArray()).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().spec(assertResponse(HttpStatus.BAD_REQUEST,ValidationException.class)).body(""String_Node_Str"",is(""String_Node_Str"" + Key.TIMESTAMP)).body(""String_Node_Str"",is(""String_Node_Str""));
}",0.9751243781094528
141506,"@Test public void capacity_type_is_required(){
  givenWithContent(authToken).body(minValidPayload().put(Key.CAPACITY_TYPE,null).asArray()).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().spec(assertResponse(HttpStatus.BAD_REQUEST,ValidationException.class)).body(""String_Node_Str"",is(Key.CAPACITY_TYPE)).body(""String_Node_Str"",is(""String_Node_Str""));
}","@Test public void capacity_type_is_required(){
  givenWithContent(authToken).body(minValidPayload().put(Key.CAPACITY_TYPE,null).asArray()).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().spec(assertResponse(HttpStatus.BAD_REQUEST,ValidationException.class)).body(""String_Node_Str"",is(""String_Node_Str"" + Key.CAPACITY_TYPE)).body(""String_Node_Str"",is(""String_Node_Str""));
}",0.97289972899729
141507,"@Test public void timestamp_is_required(){
  givenWithContent(authToken).body(minValidPayload().put(Key.TIMESTAMP,null).asArray()).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().spec(assertResponse(HttpStatus.BAD_REQUEST,ValidationException.class)).body(""String_Node_Str"",is(Key.TIMESTAMP)).body(""String_Node_Str"",is(""String_Node_Str""));
}","@Test public void timestamp_is_required(){
  givenWithContent(authToken).body(minValidPayload().put(Key.TIMESTAMP,null).asArray()).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().spec(assertResponse(HttpStatus.BAD_REQUEST,ValidationException.class)).body(""String_Node_Str"",is(""String_Node_Str"" + Key.TIMESTAMP)).body(""String_Node_Str"",is(""String_Node_Str""));
}",0.9719887955182072
141508,"@Test public void usage_is_required(){
  givenWithContent(authToken).body(minValidPayload().put(Key.USAGE,null).asArray()).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().spec(assertResponse(HttpStatus.BAD_REQUEST,ValidationException.class)).body(""String_Node_Str"",is(Key.USAGE)).body(""String_Node_Str"",is(""String_Node_Str""));
}","@Test public void usage_is_required(){
  givenWithContent(authToken).body(minValidPayload().put(Key.USAGE,null).asArray()).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().spec(assertResponse(HttpStatus.BAD_REQUEST,ValidationException.class)).body(""String_Node_Str"",is(""String_Node_Str"" + Key.USAGE)).body(""String_Node_Str"",is(""String_Node_Str""));
}",0.9710144927536232
141509,"@Test public void spaces_available_is_required(){
  givenWithContent(authToken).body(minValidPayload().put(Key.SPACES_AVAILABLE,null).asArray()).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().spec(assertResponse(HttpStatus.BAD_REQUEST,ValidationException.class)).body(""String_Node_Str"",is(Key.SPACES_AVAILABLE)).body(""String_Node_Str"",is(""String_Node_Str""));
}","@Test public void spaces_available_is_required(){
  givenWithContent(authToken).body(minValidPayload().put(Key.SPACES_AVAILABLE,null).asArray()).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().spec(assertResponse(HttpStatus.BAD_REQUEST,ValidationException.class)).body(""String_Node_Str"",is(""String_Node_Str"" + Key.SPACES_AVAILABLE)).body(""String_Node_Str"",is(""String_Node_Str""));
}",0.9735449735449736
141510,"@Test public void facility_id_in_playload_cannot_be_different_from_facility_id_in_path(){
  givenWithContent(authToken).body(minValidPayload().put(Key.FACILITY_ID,f.id + 1).asArray()).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().spec(assertResponse(HttpStatus.BAD_REQUEST,ValidationException.class)).body(""String_Node_Str"",is(Key.FACILITY_ID)).body(""String_Node_Str"",is(""String_Node_Str""));
}","@Test public void facility_id_in_playload_cannot_be_different_from_facility_id_in_path(){
  givenWithContent(authToken).body(minValidPayload().put(Key.FACILITY_ID,f.id + 1).asArray()).when().put(UrlSchema.FACILITY_UTILIZATION,f.id).then().spec(assertResponse(HttpStatus.BAD_REQUEST,ValidationException.class)).body(""String_Node_Str"",is(""String_Node_Str"" + Key.FACILITY_ID)).body(""String_Node_Str"",is(""String_Node_Str""));
}",0.9757281553398058
141511,"@Override public T deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {
  try {
    return jsonMapper.fromJson(jp.readValueAsTree().toString(),type);
  }
 catch (  JsonException e) {
    throw new IOException(e);
  }
}","@Override public T deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {
  try {
    return jsonMapper.fromJson(jp.readValueAsTree().toString(),type);
  }
 catch (  JsonException e) {
    throw new JsonMappingException(e.getMessage(),jp.getCurrentLocation(),e.getCause());
  }
}",0.8934010152284264
141512,"@Bean public ExceptionHandlerExceptionResolver exceptionHandlerExceptionResolver(){
  return new ExceptionHandlerExceptionResolver();
}","@Bean public ExceptionHandlerExceptionResolver exceptionHandlerExceptionResolver(){
  ExceptionHandlerExceptionResolver resolver=new ExceptionHandlerExceptionResolver();
  resolver.setMessageConverters(messageConverters.getConverters());
  return resolver;
}",0.4885496183206106
141513,"public ValidationException(Iterable<Violation> violations){
  this.violations=ImmutableList.copyOf(violations);
}","public ValidationException(Iterable<Violation> violations){
  super(""String_Node_Str"");
  this.violations=ImmutableList.copyOf(violations);
}",0.889763779527559
141514,"private void setLocaleWith(Locale locale) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSuchFieldException {
  Class<?> activityManagerNativeClass=Class.forName(""String_Node_Str"");
  Object amn;
  Configuration config;
  Method methodGetDefault=activityManagerNativeClass.getMethod(""String_Node_Str"");
  methodGetDefault.setAccessible(true);
  amn=methodGetDefault.invoke(activityManagerNativeClass);
  Method methodGetConfiguration=activityManagerNativeClass.getMethod(""String_Node_Str"");
  methodGetConfiguration.setAccessible(true);
  config=(Configuration)methodGetConfiguration.invoke(amn);
  Class<?> configClass=config.getClass();
  Field f=configClass.getField(""String_Node_Str"");
  f.setBoolean(config,true);
  config.locale=locale;
  Method methodUpdateConfiguration=activityManagerNativeClass.getMethod(""String_Node_Str"",Configuration.class);
  methodUpdateConfiguration.setAccessible(true);
  methodUpdateConfiguration.invoke(amn,config);
}","private void setLocaleWith(Locale locale) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSuchFieldException {
  Class<?> activityManagerNativeClass=Class.forName(""String_Node_Str"");
  Object amn;
  Configuration config;
  Method methodGetDefault=activityManagerNativeClass.getMethod(""String_Node_Str"");
  methodGetDefault.setAccessible(true);
  amn=methodGetDefault.invoke(activityManagerNativeClass);
  if (Build.VERSION.SDK_INT >= 26) {
    activityManagerNativeClass=Class.forName(amn.getClass().getName());
  }
  Method methodGetConfiguration=activityManagerNativeClass.getMethod(""String_Node_Str"");
  methodGetConfiguration.setAccessible(true);
  config=(Configuration)methodGetConfiguration.invoke(amn);
  Class<?> configClass=config.getClass();
  Field f=configClass.getField(""String_Node_Str"");
  f.setBoolean(config,true);
  config.locale=locale;
  Method methodUpdateConfiguration=activityManagerNativeClass.getMethod(""String_Node_Str"",Configuration.class);
  methodUpdateConfiguration.setAccessible(true);
  methodUpdateConfiguration.invoke(amn,config);
}",0.9471715755025713
141515,"public LocaleSettingHandler(Context context){
  this.context=context;
}","public LocaleSettingHandler(Context context){
  super(context,CHANGE_CONFIGURATION);
}",0.7515923566878981
141516,"/** 
 * {@inheritDoc}
 */
@Override public void pruneChanges(int keep,int mustBeExceededBy){
  try (Transaction tx=database.beginTx()){
    Relationship oldestChangeRel=getRoot().getSingleRelationship(_GA_CHANGEFEED_OLDEST_CHANGE,OUTGOING);
    if (oldestChangeRel != null) {
      Node oldestNode=oldestChangeRel.getEndNode();
      Node newestNode=getRoot().getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,OUTGOING).getEndNode();
      if (newestNode != null) {
        int changeCount=1;
        Node lastNodeToKeep=newestNode;
        Relationship nextRel=lastNodeToKeep.getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,OUTGOING);
        while (changeCount < keep && nextRel != null) {
          lastNodeToKeep=nextRel.getEndNode();
          changeCount++;
          nextRel=lastNodeToKeep.getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,OUTGOING);
        }
        if (changeCount < keep) {
          LOG.debug(""String_Node_Str"");
          tx.success();
          return;
        }
        int exceededCount=0;
        Relationship nextExceededByRel=nextRel;
        while (exceededCount < mustBeExceededBy && nextExceededByRel != null) {
          nextExceededByRel=nextExceededByRel.getEndNode().getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,OUTGOING);
          exceededCount++;
        }
        if (exceededCount < mustBeExceededBy) {
          LOG.debug(""String_Node_Str"");
          tx.success();
          return;
        }
        LOG.debug(""String_Node_Str"");
        if (nextRel != null) {
          Lock rootLock=tx.acquireWriteLock(getRoot());
          Lock oldestNodeLock=tx.acquireWriteLock(oldestNode);
          nextRel.delete();
          oldestChangeRel.delete();
          getRoot().createRelationshipTo(lastNodeToKeep,_GA_CHANGEFEED_OLDEST_CHANGE);
          oldestNodeLock.release();
          rootLock.release();
          Relationship previousChange=oldestNode.getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,INCOMING);
          while (previousChange != null) {
            Node newOldestNode=previousChange.getStartNode();
            previousChange.delete();
            oldestNode.delete();
            previousChange=newOldestNode.getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,INCOMING);
            oldestNode=newOldestNode;
          }
          oldestNode.delete();
        }
        LOG.debug(""String_Node_Str"");
      }
    }
    tx.success();
  }
 }","/** 
 * {@inheritDoc}
 */
@Override public void pruneChanges(int keep,int mustBeExceededBy){
  try (Transaction tx=database.beginTx()){
    tx.acquireWriteLock(getRoot());
    Relationship oldestChangeRel=getRoot().getSingleRelationship(_GA_CHANGEFEED_OLDEST_CHANGE,OUTGOING);
    if (oldestChangeRel != null) {
      Node oldestNode=oldestChangeRel.getEndNode();
      Node newestNode=getRoot().getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,OUTGOING).getEndNode();
      if (newestNode != null) {
        int changeCount=1;
        Node lastNodeToKeep=newestNode;
        Relationship nextRel=lastNodeToKeep.getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,OUTGOING);
        while (changeCount < keep && nextRel != null) {
          lastNodeToKeep=nextRel.getEndNode();
          changeCount++;
          nextRel=lastNodeToKeep.getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,OUTGOING);
        }
        if (changeCount < keep) {
          LOG.debug(""String_Node_Str"");
          tx.success();
          return;
        }
        int exceededCount=0;
        Relationship nextExceededByRel=nextRel;
        while (exceededCount < mustBeExceededBy && nextExceededByRel != null) {
          nextExceededByRel=nextExceededByRel.getEndNode().getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,OUTGOING);
          exceededCount++;
        }
        if (exceededCount < mustBeExceededBy) {
          LOG.debug(""String_Node_Str"");
          tx.success();
          return;
        }
        LOG.debug(""String_Node_Str"");
        if (nextRel != null) {
          nextRel.delete();
          oldestChangeRel.delete();
          getRoot().createRelationshipTo(lastNodeToKeep,_GA_CHANGEFEED_OLDEST_CHANGE);
          Relationship previousChange=oldestNode.getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,INCOMING);
          while (previousChange != null) {
            Node newOldestNode=previousChange.getStartNode();
            previousChange.delete();
            oldestNode.delete();
            previousChange=newOldestNode.getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,INCOMING);
            oldestNode=newOldestNode;
          }
          oldestNode.delete();
        }
        LOG.debug(""String_Node_Str"");
      }
    }
    tx.success();
  }
 }",0.9525445565814902
141517,"/** 
 * {@inheritDoc}
 */
@Override public Void beforeCommit(ImprovedTransactionData transactionData){
  changeWriter.recordChanges(transactionData.mutationsToStrings());
  return null;
}","/** 
 * {@inheritDoc}
 */
@Override public Void beforeCommit(ImprovedTransactionData transactionData){
  if (transactionData.hasBeenDeleted(changeWriter.getRoot())) {
    throw new DeliberateTransactionRollbackException(""String_Node_Str"");
  }
  changeWriter.recordChanges(transactionData.mutationsToStrings());
  return null;
}",0.7262135922330097
141518,"/** 
 * {@inheritDoc}
 */
@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + uuid + '\''+ ""String_Node_Str""+ timestamp+ ""String_Node_Str""+ ArrayUtils.primitiveOrStringArrayToString(changes)+ '}';
}","/** 
 * {@inheritDoc}
 */
@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + uuid + '\''+ ""String_Node_Str""+ timestamp+ ""String_Node_Str""+ ArrayUtils.primitiveOrStringArrayToString(getChangesAsArray())+ '}';
}",0.9704641350210972
141519,"/** 
 * Get the root.
 * @return root, will never be null.
 */
private Node getRoot(){
  if (root == null) {
    throw new IllegalStateException(""String_Node_Str"" + moduleId + ""String_Node_Str"");
  }
  return root;
}","/** 
 * Get the root.
 * @return root, will never be null.
 */
public Node getRoot(){
  if (root == null) {
    throw new IllegalStateException(""String_Node_Str"" + moduleId + ""String_Node_Str"");
  }
  return root;
}",0.974477958236659
141520,"/** 
 * {@inheritDoc}
 */
@Override public int hashCode(){
  int result=super.hashCode();
  result=31 * result + maxChanges;
  return result;
}","/** 
 * {@inheritDoc}
 */
@Override public int hashCode(){
  int result=super.hashCode();
  result=31 * result + maxChanges;
  result=31 * result + pruneDelay;
  result=31 * result + pruneWhenMaxExceededBy;
  return result;
}",0.7771739130434783
141521,"/** 
 * {@inheritDoc}
 */
@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  if (!super.equals(o))   return false;
  ChangeFeedConfiguration that=(ChangeFeedConfiguration)o;
  if (maxChanges != that.maxChanges)   return false;
  return true;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  if (!super.equals(o))   return false;
  ChangeFeedConfiguration that=(ChangeFeedConfiguration)o;
  if (maxChanges != that.maxChanges)   return false;
  if (pruneDelay != that.pruneDelay)   return false;
  if (pruneWhenMaxExceededBy != that.pruneWhenMaxExceededBy)   return false;
  return true;
}",0.836272040302267
141522,"/** 
 * Initialize the sequence to the last used number. No need to synchronize, called from constructor, thus in a single thread.
 */
private void initializeSequence(){
  int startSequence=0;
  try (Transaction tx=database.beginTx()){
    Relationship nextRel=getRoot().getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,OUTGOING);
    if (nextRel != null) {
      startSequence=(Integer)nextRel.getEndNode().getProperty(SEQUENCE);
    }
    tx.success();
  }
   sequence=new AtomicInteger(startSequence);
}","/** 
 * Initialize the sequence to the last used number. No need to synchronize, called from constructor, thus in a single thread.
 */
private void initializeSequence(){
  long startSequence=0L;
  try (Transaction tx=database.beginTx()){
    Relationship nextRel=getRoot().getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,OUTGOING);
    if (nextRel != null) {
      startSequence=(long)nextRel.getEndNode().getProperty(SEQUENCE,0L);
    }
    tx.success();
  }
   sequence=new AtomicLong(startSequence);
}",0.9673590504451038
141523,"@Test public void feedShouldBeEmptyOnANewDatabase(){
  registerSingleModuleAndCreateReader();
  assertEquals(0,new GraphChangeReader(getDatabase()).getAllChanges().size());
  assertEquals(0,new GraphChangeReader(getDatabase(),""String_Node_Str"").getAllChanges().size());
  assertEquals(0,new CachingGraphChangeReader(getDatabase()).getAllChanges().size());
  assertEquals(0,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getAllChanges().size());
}","@Test public void feedShouldBeEmptyOnANewDatabase(){
  registerSingleModuleAndStart();
  assertEquals(0,new GraphChangeReader(getDatabase()).getAllChanges().size());
  assertEquals(0,new GraphChangeReader(getDatabase(),""String_Node_Str"").getAllChanges().size());
  assertEquals(0,new CachingGraphChangeReader(getDatabase()).getAllChanges().size());
  assertEquals(0,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getAllChanges().size());
}",0.9814207650273225
141524,"@Test public void shouldBeAbleToRegisterMultipleModules(){
}","@Test public void shouldBeAbleToRegisterMultipleModules(){
  registerMultipleModulesAndStart();
  try (Transaction tx=getDatabase().beginTx()){
    getDatabase().createNode(DynamicLabel.label(""String_Node_Str""));
    tx.success();
  }
   try (Transaction tx=getDatabase().beginTx()){
    getDatabase().createNode(DynamicLabel.label(""String_Node_Str""));
    tx.success();
  }
   assertEquals(1,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getAllChanges().size());
  assertEquals(1,new GraphChangeReader(getDatabase(),""String_Node_Str"").getAllChanges().size());
  assertEquals(2,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getAllChanges().size());
  assertEquals(2,new GraphChangeReader(getDatabase(),""String_Node_Str"").getAllChanges().size());
}",0.1430274135876043
141525,"@Test public void transactionsNotCommittedShouldNotReflectInTheChangeFeed(){
  registerSingleModuleAndCreateReader();
  performChangesWithException();
  Collection<ChangeSet> changes=new GraphChangeReader(getDatabase()).getAllChanges();
  assertEquals(2,changes.size());
  Iterator<ChangeSet> it=changes.iterator();
  ChangeSet set1=it.next();
  long set1Date=set1.getTimestamp();
  assertEquals(1,set1.getChanges().size());
  assertTrue(set1.getChanges().contains(""String_Node_Str""));
  assertEquals(set1.getSequence(),2);
  ChangeSet set2=it.next();
  long set2Date=set2.getTimestamp();
  assertEquals(3,set2.getChanges().size());
  assertTrue(set2.getChanges().contains(""String_Node_Str""));
  assertTrue(set2.getChanges().contains(""String_Node_Str""));
  assertTrue(set2.getChanges().contains(""String_Node_Str""));
  assertEquals(1,set2.getSequence());
  assertTrue(set1Date >= set2Date);
}","@Test public void transactionsNotCommittedShouldNotReflectInTheChangeFeed(){
  registerSingleModuleAndStart();
  performChangesWithException();
  Collection<ChangeSet> changes=new GraphChangeReader(getDatabase()).getAllChanges();
  assertEquals(2,changes.size());
  Iterator<ChangeSet> it=changes.iterator();
  ChangeSet set1=it.next();
  long set1Date=set1.getTimestamp();
  assertEquals(1,set1.getChanges().size());
  assertTrue(set1.getChanges().contains(""String_Node_Str""));
  assertEquals(set1.getSequence(),2);
  ChangeSet set2=it.next();
  long set2Date=set2.getTimestamp();
  assertEquals(3,set2.getChanges().size());
  assertTrue(set2.getChanges().contains(""String_Node_Str""));
  assertTrue(set2.getChanges().contains(""String_Node_Str""));
  assertTrue(set2.getChanges().contains(""String_Node_Str""));
  assertEquals(1,set2.getSequence());
  assertTrue(set1Date >= set2Date);
}",0.9904225352112676
141526,"@Test public void sequenceNumbersShouldBeOrdered() throws InterruptedException {
  registerSingleModuleAndCreateReader();
  getDatabase().registerTransactionEventHandler(new TransactionEventHandler.Adapter<Void>(){
    protected volatile boolean hasRun=false;
    @Override public Void beforeCommit(    TransactionData data) throws Exception {
      if (!hasRun) {
        hasRun=true;
        Thread.sleep(100);
      }
      return null;
    }
  }
);
  ExecutorService executor=Executors.newFixedThreadPool(2);
  executor.submit(new Runnable(){
    @Override public void run(){
      try (Transaction tx=getDatabase().beginTx()){
        getDatabase().createNode().setProperty(""String_Node_Str"",""String_Node_Str"");
        tx.success();
      }
     }
  }
);
  executor.submit(new Runnable(){
    @Override public void run(){
      try (Transaction tx=getDatabase().beginTx()){
        getDatabase().createNode().setProperty(""String_Node_Str"",""String_Node_Str"");
        tx.success();
      }
     }
  }
);
  executor.shutdown();
  executor.awaitTermination(1000,TimeUnit.MILLISECONDS);
  Collection<ChangeSet> changes=new GraphChangeReader(getDatabase()).getAllChanges();
  assertEquals(2,changes.size());
  Iterator<ChangeSet> it=changes.iterator();
  assertEquals(2,it.next().getSequence());
  assertEquals(1,it.next().getSequence());
  changes=new CachingGraphChangeReader(getDatabase()).getAllChanges();
  assertEquals(2,changes.size());
  it=changes.iterator();
  assertEquals(2,it.next().getSequence());
  assertEquals(1,it.next().getSequence());
}","@Test public void sequenceNumbersShouldBeOrdered() throws InterruptedException {
  registerSingleModuleAndStart();
  getDatabase().registerTransactionEventHandler(new TransactionEventHandler.Adapter<Void>(){
    protected volatile boolean hasRun=false;
    @Override public Void beforeCommit(    TransactionData data) throws Exception {
      if (!hasRun) {
        hasRun=true;
        Thread.sleep(100);
      }
      return null;
    }
  }
);
  ExecutorService executor=Executors.newFixedThreadPool(2);
  executor.submit(new Runnable(){
    @Override public void run(){
      try (Transaction tx=getDatabase().beginTx()){
        getDatabase().createNode().setProperty(""String_Node_Str"",""String_Node_Str"");
        tx.success();
      }
     }
  }
);
  executor.submit(new Runnable(){
    @Override public void run(){
      try (Transaction tx=getDatabase().beginTx()){
        getDatabase().createNode().setProperty(""String_Node_Str"",""String_Node_Str"");
        tx.success();
      }
     }
  }
);
  executor.shutdown();
  executor.awaitTermination(1000,TimeUnit.MILLISECONDS);
  Collection<ChangeSet> changes=new GraphChangeReader(getDatabase()).getAllChanges();
  assertEquals(2,changes.size());
  Iterator<ChangeSet> it=changes.iterator();
  assertEquals(2,it.next().getSequence());
  assertEquals(1,it.next().getSequence());
  changes=new CachingGraphChangeReader(getDatabase()).getAllChanges();
  assertEquals(2,changes.size());
  it=changes.iterator();
  assertEquals(2,it.next().getSequence());
  assertEquals(1,it.next().getSequence());
}",0.994528484068233
141527,"@Test public void graphChangesShouldAppearInTheChangeFeed() throws InterruptedException {
  registerSingleModuleAndCreateReader();
  performModifications();
  Thread.sleep(1000);
  verifyChanges(3,new GraphChangeReader(getDatabase()).getAllChanges());
  verifyChanges(3,new GraphChangeReader(getDatabase(),""String_Node_Str"").getAllChanges());
  verifyChanges(3,new CachingGraphChangeReader(getDatabase()).getAllChanges());
  verifyChanges(3,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getAllChanges());
  verifyChanges(3,new GraphChangeReader(getDatabase()).getNumberOfChanges(3));
  verifyChanges(3,new GraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChanges(3));
  verifyChanges(3,new CachingGraphChangeReader(getDatabase()).getNumberOfChanges(3));
  verifyChanges(3,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChanges(3));
  verifyChanges(2,new GraphChangeReader(getDatabase()).getNumberOfChanges(2));
  verifyChanges(2,new GraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChanges(2));
  verifyChanges(2,new CachingGraphChangeReader(getDatabase()).getNumberOfChanges(2));
  verifyChanges(2,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChanges(2));
  verifyChanges(3,new GraphChangeReader(getDatabase()).getChangesSince(0));
  verifyChanges(3,new GraphChangeReader(getDatabase(),""String_Node_Str"").getChangesSince(0));
  verifyChanges(3,new CachingGraphChangeReader(getDatabase()).getChangesSince(0));
  verifyChanges(3,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getChangesSince(0));
  verifyChanges(2,new GraphChangeReader(getDatabase()).getChangesSince(2));
  verifyChanges(2,new GraphChangeReader(getDatabase(),""String_Node_Str"").getChangesSince(2));
  verifyChanges(2,new CachingGraphChangeReader(getDatabase()).getChangesSince(2));
  verifyChanges(2,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getChangesSince(2));
  verifyChanges(3,new GraphChangeReader(getDatabase()).getNumberOfChangesSince(0,3));
  verifyChanges(3,new GraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChangesSince(0,3));
  verifyChanges(3,new CachingGraphChangeReader(getDatabase()).getNumberOfChangesSince(0,3));
  verifyChanges(3,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChangesSince(0,3));
  verifyChanges(1,new GraphChangeReader(getDatabase()).getNumberOfChangesSince(2,1));
  verifyChanges(1,new GraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChangesSince(3,3));
  verifyChanges(1,new CachingGraphChangeReader(getDatabase()).getNumberOfChangesSince(3,3));
  verifyChanges(1,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChangesSince(2,1));
}","@Test public void graphChangesShouldAppearInTheChangeFeed() throws InterruptedException {
  registerSingleModuleAndStart();
  performModifications();
  Thread.sleep(1000);
  verifyChanges(3,new GraphChangeReader(getDatabase()).getAllChanges());
  verifyChanges(3,new GraphChangeReader(getDatabase(),""String_Node_Str"").getAllChanges());
  verifyChanges(3,new CachingGraphChangeReader(getDatabase()).getAllChanges());
  verifyChanges(3,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getAllChanges());
  verifyChanges(3,new GraphChangeReader(getDatabase()).getNumberOfChanges(3));
  verifyChanges(3,new GraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChanges(3));
  verifyChanges(3,new CachingGraphChangeReader(getDatabase()).getNumberOfChanges(3));
  verifyChanges(3,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChanges(3));
  verifyChanges(2,new GraphChangeReader(getDatabase()).getNumberOfChanges(2));
  verifyChanges(2,new GraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChanges(2));
  verifyChanges(2,new CachingGraphChangeReader(getDatabase()).getNumberOfChanges(2));
  verifyChanges(2,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChanges(2));
  verifyChanges(3,new GraphChangeReader(getDatabase()).getChangesSince(0));
  verifyChanges(3,new GraphChangeReader(getDatabase(),""String_Node_Str"").getChangesSince(0));
  verifyChanges(3,new CachingGraphChangeReader(getDatabase()).getChangesSince(0));
  verifyChanges(3,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getChangesSince(0));
  verifyChanges(2,new GraphChangeReader(getDatabase()).getChangesSince(2));
  verifyChanges(2,new GraphChangeReader(getDatabase(),""String_Node_Str"").getChangesSince(2));
  verifyChanges(2,new CachingGraphChangeReader(getDatabase()).getChangesSince(2));
  verifyChanges(2,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getChangesSince(2));
  verifyChanges(3,new GraphChangeReader(getDatabase()).getNumberOfChangesSince(0,3));
  verifyChanges(3,new GraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChangesSince(0,3));
  verifyChanges(3,new CachingGraphChangeReader(getDatabase()).getNumberOfChangesSince(0,3));
  verifyChanges(3,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChangesSince(0,3));
  verifyChanges(1,new GraphChangeReader(getDatabase()).getNumberOfChangesSince(2,1));
  verifyChanges(1,new GraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChangesSince(3,3));
  verifyChanges(1,new CachingGraphChangeReader(getDatabase()).getNumberOfChangesSince(3,3));
  verifyChanges(1,new CachingGraphChangeReader(getDatabase(),""String_Node_Str"").getNumberOfChangesSince(2,1));
}",0.9969051520116512
141528,"@Test public void transactionsNotCommittedShouldNotReflectInCachedChangeFeed(){
  registerSingleModuleAndCreateReader();
  performChangesWithException();
  Collection<ChangeSet> changes=new CachingGraphChangeReader(getDatabase()).getAllChanges();
  assertEquals(2,changes.size());
  Iterator<ChangeSet> it=changes.iterator();
  ChangeSet set1=it.next();
  long set1Date=set1.getTimestamp();
  assertEquals(1,set1.getChanges().size());
  assertTrue(set1.getChanges().contains(""String_Node_Str""));
  assertEquals(set1.getSequence(),2);
  ChangeSet set2=it.next();
  long set2Date=set2.getTimestamp();
  assertEquals(3,set2.getChanges().size());
  assertTrue(set2.getChanges().contains(""String_Node_Str""));
  assertTrue(set2.getChanges().contains(""String_Node_Str""));
  assertTrue(set2.getChanges().contains(""String_Node_Str""));
  assertEquals(1,set2.getSequence());
  assertTrue(set1Date >= set2Date);
}","@Test public void transactionsNotCommittedShouldNotReflectInCachedChangeFeed(){
  registerSingleModuleAndStart();
  performChangesWithException();
  Collection<ChangeSet> changes=new CachingGraphChangeReader(getDatabase()).getAllChanges();
  assertEquals(2,changes.size());
  Iterator<ChangeSet> it=changes.iterator();
  ChangeSet set1=it.next();
  long set1Date=set1.getTimestamp();
  assertEquals(1,set1.getChanges().size());
  assertTrue(set1.getChanges().contains(""String_Node_Str""));
  assertEquals(set1.getSequence(),2);
  ChangeSet set2=it.next();
  long set2Date=set2.getTimestamp();
  assertEquals(3,set2.getChanges().size());
  assertTrue(set2.getChanges().contains(""String_Node_Str""));
  assertTrue(set2.getChanges().contains(""String_Node_Str""));
  assertTrue(set2.getChanges().contains(""String_Node_Str""));
  assertEquals(1,set2.getSequence());
  assertTrue(set1Date >= set2Date);
}",0.9905292479108636
141529,"@Test public void changeRootShouldHavePointerToOldestChange(){
  registerSingleModuleAndCreateReader();
  performModifications();
  try (Transaction tx=getDatabase().beginTx()){
    Node changeRoot=getSingleOrNull(at(getDatabase()).getAllNodesWithLabel(Labels._GA_ChangeFeed));
    assertNotNull(changeRoot);
    Relationship rel=changeRoot.getSingleRelationship(Relationships._GA_CHANGEFEED_OLDEST_CHANGE,Direction.OUTGOING);
    assertNotNull(rel);
    assertEquals(1L,rel.getEndNode().getProperty(SEQUENCE));
    tx.success();
  }
 }","@Test public void changeRootShouldHavePointerToOldestChange(){
  registerSingleModuleAndStart();
  performModifications();
  try (Transaction tx=getDatabase().beginTx()){
    Node changeRoot=getSingleOrNull(at(getDatabase()).getAllNodesWithLabel(Labels._GA_ChangeFeed));
    assertNotNull(changeRoot);
    Relationship rel=changeRoot.getSingleRelationship(Relationships._GA_CHANGEFEED_OLDEST_CHANGE,Direction.OUTGOING);
    assertNotNull(rel);
    assertEquals(1L,rel.getEndNode().getProperty(SEQUENCE));
    tx.success();
  }
 }",0.984037558685446
141530,"/** 
 * {@inheritDoc}
 */
@Override public void pruneChanges(int keep,int mustBeExceededBy){
  try (Transaction tx=database.beginTx()){
    Relationship oldestChangeRel=getRoot().getSingleRelationship(_GA_CHANGEFEED_OLDEST_CHANGE,OUTGOING);
    if (oldestChangeRel != null) {
      Node oldestNode=oldestChangeRel.getEndNode();
      Node newestNode=getRoot().getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,OUTGOING).getEndNode();
      if (newestNode != null) {
        long highSequence=(long)newestNode.getProperty(SEQUENCE);
        long lowSequence=(long)oldestNode.getProperty(SEQUENCE);
        long nodesToDelete=((highSequence - lowSequence) + 1) - keep;
        Node newOldestNode=null;
        if (nodesToDelete >= mustBeExceededBy) {
          LOG.info(""String_Node_Str"",nodesToDelete);
          getRoot().getSingleRelationship(_GA_CHANGEFEED_OLDEST_CHANGE,OUTGOING).delete();
          while (nodesToDelete > 0) {
            Relationship rel=oldestNode.getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,INCOMING);
            newOldestNode=rel.getStartNode();
            rel.delete();
            oldestNode.delete();
            oldestNode=newOldestNode;
            nodesToDelete--;
          }
          getRoot().createRelationshipTo(newOldestNode,_GA_CHANGEFEED_OLDEST_CHANGE);
          LOG.info(""String_Node_Str"");
        }
      }
    }
    tx.success();
  }
 }","/** 
 * {@inheritDoc}
 */
@Override public void pruneChanges(int keep,int mustBeExceededBy){
  try (Transaction tx=database.beginTx()){
    Relationship oldestChangeRel=getRoot().getSingleRelationship(_GA_CHANGEFEED_OLDEST_CHANGE,OUTGOING);
    if (oldestChangeRel != null) {
      Node oldestNode=oldestChangeRel.getEndNode();
      Node newestNode=getRoot().getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,OUTGOING).getEndNode();
      if (newestNode != null) {
        long highSequence=(long)newestNode.getProperty(SEQUENCE);
        long lowSequence=(long)oldestNode.getProperty(SEQUENCE);
        long nodesToDelete=((highSequence - lowSequence) + 1) - keep;
        Node newOldestNode=null;
        if (nodesToDelete >= mustBeExceededBy) {
          LOG.debug(""String_Node_Str"",nodesToDelete);
          getRoot().getSingleRelationship(_GA_CHANGEFEED_OLDEST_CHANGE,OUTGOING).delete();
          while (nodesToDelete > 0) {
            Relationship rel=oldestNode.getSingleRelationship(_GA_CHANGEFEED_NEXT_CHANGE,INCOMING);
            newOldestNode=rel.getStartNode();
            rel.delete();
            oldestNode.delete();
            oldestNode=newOldestNode;
            nodesToDelete--;
          }
          getRoot().createRelationshipTo(newOldestNode,_GA_CHANGEFEED_OLDEST_CHANGE);
          LOG.debug(""String_Node_Str"");
        }
      }
    }
    tx.success();
  }
 }",0.9935158501440924
141531,"/** 
 * Populate the stack. Please note that the elements are added to the stack in the reverse order than presented by the input parameters. In other words, the first element of the input parameter will be returned first by this stack's iterator.
 * @param elements to populate the stack with.
 */
public void populate(Collection<E> elements){
  this.elements.addAll(elements);
}","/** 
 * Populate the stack. Please note that the elements are added to the stack in the reverse order than presented by the input parameters. In other words, the first element of the input parameter will be returned first by this stack's iterator.
 * @param elements to populate the stack with.
 */
public void populate(Collection<E> elements){
  this.elements.addAll(elements);
  while (this.elements.size() > maxCapacity) {
    this.elements.removeLast();
  }
}",0.9015421115065244
141532,"@Override public CommandResult execute(CommandSource sender,CommandContext args) throws CommandException {
  checkPermission(sender,getPermission());
  if (!args.hasAny(""String_Node_Str"")) {
    checkIfPlayer(sender);
    Player p=(Player)sender;
    p.getInventory().clear();
    Messages.send(sender,""String_Node_Str"");
    return CommandResult.success();
  }
 else {
    Player t=args.<Player>getOne(""String_Node_Str"").get();
    t.getInventory().clear();
    Messages.send(sender,""String_Node_Str"",""String_Node_Str"",VariableUtil.getNameEntity(t));
    Messages.send(sender,""String_Node_Str"",""String_Node_Str"",sender);
    return CommandResult.success();
  }
}","@Override public CommandResult execute(CommandSource sender,CommandContext args) throws CommandException {
  checkPermission(sender,getPermission());
  if (!args.hasAny(""String_Node_Str"")) {
    checkIfPlayer(sender);
    Player p=(Player)sender;
    p.getInventory().clear();
    Messages.send(sender,""String_Node_Str"");
    return CommandResult.success();
  }
 else {
    Player t=args.<Player>getOne(""String_Node_Str"").get();
    t.getInventory().clear();
    Messages.send(sender,""String_Node_Str"",""String_Node_Str"",VariableUtil.getNameEntity(t));
    Messages.send(t,""String_Node_Str"",""String_Node_Str"",sender);
    return CommandResult.success();
  }
}",0.9947009841029524
141533,"@Override public void save(Game arg,List<Warp> data){
  HashMap<UUID,List<Warp>> worldWarps=new HashMap<>();
  for (  Warp warp : data) {
    List<Warp> warps=worldWarps.containsKey(warp.getLocation().getExtent().getUniqueId()) ? worldWarps.get(warp.getLocation().getExtent().getUniqueId()) : new ArrayList<>();
    warps.add(warp);
    worldWarps.put(warp.getLocation().getExtent().getUniqueId(),warps);
  }
  for (  UUID uuid : worldWarps.keySet()) {
    WorldDataFile loader=new WorldDataFile(uuid);
    CommentedConfigurationNode node=loader.get();
    node.getNode(""String_Node_Str"").getChildrenMap().keySet().forEach(node.getNode(""String_Node_Str"")::removeChild);
    List<Warp> warps=worldWarps.get(uuid);
    for (    Warp warp : warps) {
      try {
        node.getNode(""String_Node_Str"",warp.getName()).setValue(TypeToken.of(Warp.class),warp);
      }
 catch (      ObjectMappingException e) {
        ErrorLogger.log(e,""String_Node_Str"");
      }
    }
    loader.save(node);
  }
}","@Override public void save(Game arg,List<Warp> data){
  HashMap<UUID,List<Warp>> worldWarps=new HashMap<>();
  for (  Warp warp : data) {
    List<Warp> warps=worldWarps.containsKey(warp.getLocation().getExtent().getUniqueId()) ? worldWarps.get(warp.getLocation().getExtent().getUniqueId()) : new ArrayList<>();
    warps.add(warp);
    worldWarps.put(warp.getLocation().getExtent().getUniqueId(),warps);
  }
  for (  UUID uuid : worldWarps.keySet()) {
    WorldDataFile loader=new WorldDataFile(uuid);
    CommentedConfigurationNode node=loader.get();
    node.getNode(""String_Node_Str"").setValue(null);
    List<Warp> warps=worldWarps.get(uuid);
    for (    Warp warp : warps) {
      try {
        node.getNode(""String_Node_Str"",warp.getName()).setValue(TypeToken.of(Warp.class),warp);
      }
 catch (      ObjectMappingException e) {
        ErrorLogger.log(e,""String_Node_Str"");
      }
    }
    loader.save(node);
  }
}",0.952628839146278
141534,"@Override public CommandResult execute(CommandSource sender,CommandContext args) throws CommandException {
  checkPermission(sender,WarpPermissions.UC_WARP_DELWARP_BASE);
  Warp warp=args.<Warp>getOne(""String_Node_Str"").get();
  List<Warp> warps=GlobalData.get(WarpKeys.WARPS).get();
  warps.remove(warp);
  GlobalData.offer(WarpKeys.WARPS,warps);
  sender.sendMessage(Messages.getFormatted(sender,""String_Node_Str"",""String_Node_Str"",warp.getName()));
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource sender,CommandContext args) throws CommandException {
  checkPermission(sender,WarpPermissions.UC_WARP_DELWARP_BASE);
  Warp warp=args.<Warp>getOne(""String_Node_Str"").get();
  List<Warp> warps=GlobalData.get(WarpKeys.WARPS).get();
  warps=warps.stream().filter(w -> !w.getName().equalsIgnoreCase(warp.getName())).collect(Collectors.toList());
  GlobalData.offer(WarpKeys.WARPS,warps);
  sender.sendMessage(Messages.getFormatted(sender,""String_Node_Str"",""String_Node_Str"",warp.getName()));
  return CommandResult.success();
}",0.8928571428571429
141535,"public void reload(){
  try {
    if (!file.exists()) {
      file.createNewFile();
    }
    loader=HoconConfigurationLoader.builder().setPath(file.toPath()).build();
    node=loader.load();
  }
 catch (  IOException e) {
    ErrorLogger.log(e,""String_Node_Str"" + file);
  }
}","public void reload(){
  try {
    if (!file.exists()) {
      file.getParentFile().mkdirs();
      file.createNewFile();
    }
    loader=HoconConfigurationLoader.builder().setPath(file.toPath()).build();
    node=loader.load();
  }
 catch (  IOException e) {
    ErrorLogger.log(e,""String_Node_Str"" + file);
  }
}",0.937394247038917
141536,"@Override public Text load(UltimateUser user){
  PlayerDataFile config=new PlayerDataFile(user.getIdentifier());
  CommentedConfigurationNode node=config.get();
  return Messages.toText(node.getNode(""String_Node_Str"").getString());
}","@Override public Text load(UltimateUser user){
  PlayerDataFile config=new PlayerDataFile(user.getIdentifier());
  CommentedConfigurationNode node=config.get();
  Text name=Messages.toText(node.getNode(""String_Node_Str"").getString());
  if (name == null)   return null;
  if (!name.toPlain().matches(""String_Node_Str"")) {
    return null;
  }
  return name;
}",0.7635135135135135
141537,"@Override public CommandResult execute(CommandSource sender,CommandContext args) throws CommandException {
  if (!args.hasAny(""String_Node_Str"")) {
    checkIfPlayer(sender);
    Player p=(Player)sender;
    UltimateUser up=UltimateCore.get().getUserService().getUser(p);
    Text name=TextUtil.replaceColors(args.<String>getOne(""String_Node_Str"").get(),sender,""String_Node_Str"");
    sender.sendMessage(Messages.getFormatted(sender,""String_Node_Str"",""String_Node_Str"",name));
    up.offer(NickKeys.NICKNAME,name);
  }
 else {
    checkPermSuffix(sender,""String_Node_Str"");
    Player t=args.<Player>getOne(""String_Node_Str"").get();
    UltimateUser up=UltimateCore.get().getUserService().getUser(t);
    Text name=TextUtil.replaceColors(args.<String>getOne(""String_Node_Str"").get(),sender,""String_Node_Str"");
    sender.sendMessage(Messages.getFormatted(sender,""String_Node_Str"",""String_Node_Str"",t,""String_Node_Str"",name));
    t.sendMessage(Messages.getFormatted(t,""String_Node_Str"",""String_Node_Str"",sender,""String_Node_Str"",name));
    up.offer(NickKeys.NICKNAME,name);
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource sender,CommandContext args) throws CommandException {
  if (!args.hasAny(""String_Node_Str"")) {
    checkIfPlayer(sender);
    Player p=(Player)sender;
    UltimateUser up=UltimateCore.get().getUserService().getUser(p);
    Text name=TextUtil.replaceColors(args.<String>getOne(""String_Node_Str"").get(),sender,""String_Node_Str"");
    if (!name.toPlain().matches(""String_Node_Str"")) {
      sender.sendMessage(Messages.getFormatted(sender,""String_Node_Str""));
      return CommandResult.empty();
    }
    sender.sendMessage(Messages.getFormatted(sender,""String_Node_Str"",""String_Node_Str"",name));
    up.offer(NickKeys.NICKNAME,name);
  }
 else {
    checkPermSuffix(sender,""String_Node_Str"");
    Player t=args.<Player>getOne(""String_Node_Str"").get();
    UltimateUser up=UltimateCore.get().getUserService().getUser(t);
    Text name=TextUtil.replaceColors(args.<String>getOne(""String_Node_Str"").get(),sender,""String_Node_Str"");
    if (!name.toPlain().matches(""String_Node_Str"")) {
      sender.sendMessage(Messages.getFormatted(sender,""String_Node_Str""));
      return CommandResult.empty();
    }
    sender.sendMessage(Messages.getFormatted(sender,""String_Node_Str"",""String_Node_Str"",t,""String_Node_Str"",name));
    t.sendMessage(Messages.getFormatted(t,""String_Node_Str"",""String_Node_Str"",sender,""String_Node_Str"",name));
    up.offer(NickKeys.NICKNAME,name);
  }
  return CommandResult.success();
}",0.8669260700389105
141538,"public static void handleHeaderFooter(){
  ModuleConfig config=Modules.TABLIST.get().getConfig().get();
  boolean enablehf=config.get().getNode(""String_Node_Str"",""String_Node_Str"").getBoolean();
  if (enablehf) {
    String header;
    String footer;
    try {
      header=StringUtil.join(""String_Node_Str"",config.get().getNode(""String_Node_Str"",""String_Node_Str"").getList(TypeToken.of(String.class)));
      footer=StringUtil.join(""String_Node_Str"",config.get().getNode(""String_Node_Str"",""String_Node_Str"").getList(TypeToken.of(String.class)));
    }
 catch (    ObjectMappingException e) {
      ErrorLogger.log(e,""String_Node_Str"");
      return;
    }
    for (    Player p : Sponge.getServer().getOnlinePlayers()) {
      p.getTabList().setHeaderAndFooter(VariableUtil.replaceVariables(Messages.toText(header),p),VariableUtil.replaceVariables(Messages.toText(footer),p));
    }
  }
}","public static void handleHeaderFooter(){
  ModuleConfig config=Modules.TABLIST.get().getConfig().get();
  boolean enablehf=config.get().getNode(""String_Node_Str"",""String_Node_Str"").getBoolean();
  if (enablehf) {
    String header;
    String footer;
    try {
      header=StringUtil.join(""String_Node_Str"",config.get().getNode(""String_Node_Str"",""String_Node_Str"").getList(TypeToken.of(String.class)));
      footer=StringUtil.join(""String_Node_Str"",config.get().getNode(""String_Node_Str"",""String_Node_Str"").getList(TypeToken.of(String.class)));
    }
 catch (    ObjectMappingException e) {
      ErrorLogger.log(e,""String_Node_Str"");
      return;
    }
    for (    Player p : Sponge.getServer().getOnlinePlayers()) {
      Text h=VariableUtil.replaceVariables(Messages.toText(header),p);
      p.getTabList().setHeaderAndFooter(h,VariableUtil.replaceVariables(Messages.toText(footer),p));
    }
  }
}",0.9297658862876256
141539,"private Tuples.Tri<Text,Text,Text> getDetails(Player p){
  ModuleConfig config=Modules.TABLIST.get().getConfig().get();
  CommentedConfigurationNode node=config.get();
  Text prefix=Messages.toText(node.getNode(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").getString());
  Text suffix=Messages.toText(node.getNode(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").getString());
  Text name=Messages.toText(node.getNode(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").getString());
  String group=TablistPermissions.UC_TABLIST_GROUP.getFor(p);
  if (group != null && !node.getNode(""String_Node_Str"",""String_Node_Str"",group).isVirtual()) {
    CommentedConfigurationNode subnode=node.getNode(""String_Node_Str"",""String_Node_Str"",group);
    name=Messages.toText(subnode.getNode(""String_Node_Str"").getString());
    prefix=Messages.toText(subnode.getNode(""String_Node_Str"").getString());
    suffix=Messages.toText(subnode.getNode(""String_Node_Str"").getString());
  }
  if (Modules.AFK.isPresent()) {
    UltimateUser up=UltimateCore.get().getUserService().getUser(p);
    if (up.get(AfkKeys.IS_AFK).get()) {
      Text afksuffix=Messages.toText(config.get().getNode(""String_Node_Str"").getString());
      suffix=Text.of(suffix,afksuffix);
    }
  }
  if (TextSerializers.FORMATTING_CODE.serialize(prefix).length() > 16) {
    prefix=TextSerializers.FORMATTING_CODE.deserialize(TextSerializers.FORMATTING_CODE.serialize(prefix).substring(0,16));
  }
  if (TextSerializers.FORMATTING_CODE.serialize(suffix).length() > 16) {
    suffix=TextSerializers.FORMATTING_CODE.deserialize(TextSerializers.FORMATTING_CODE.serialize(suffix).substring(0,16));
  }
  prefix=VariableUtil.replaceVariables(prefix,p);
  suffix=VariableUtil.replaceVariables(suffix,p);
  name=VariableUtil.replaceVariables(name,p);
  return Tuples.of(prefix,name,suffix);
}","private Tuples.Tri<Text,Text,Text> getDetails(Player p){
  ModuleConfig config=Modules.TABLIST.get().getConfig().get();
  CommentedConfigurationNode node=config.get();
  Text prefix=Messages.toText(node.getNode(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").getString());
  Text suffix=Messages.toText(node.getNode(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").getString());
  Text name=Messages.toText(node.getNode(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").getString());
  String group=TablistPermissions.UC_TABLIST_GROUP.getFor(p);
  if (group != null && !node.getNode(""String_Node_Str"",""String_Node_Str"",group).isVirtual()) {
    CommentedConfigurationNode subnode=node.getNode(""String_Node_Str"",""String_Node_Str"",group);
    name=Messages.toText(subnode.getNode(""String_Node_Str"").getString());
    prefix=Messages.toText(subnode.getNode(""String_Node_Str"").getString());
    suffix=Messages.toText(subnode.getNode(""String_Node_Str"").getString());
  }
  if (Modules.AFK.isPresent()) {
    UltimateUser up=UltimateCore.get().getUserService().getUser(p);
    if (up.get(AfkKeys.IS_AFK).get()) {
      Text afksuffix=Messages.toText(config.get().getNode(""String_Node_Str"").getString());
      suffix=Text.of(suffix,afksuffix);
    }
  }
  prefix=VariableUtil.replaceVariables(prefix,p);
  suffix=VariableUtil.replaceVariables(suffix,p);
  name=VariableUtil.replaceVariables(name,p);
  if (TextSerializers.FORMATTING_CODE.serialize(name).length() > 16) {
    name=TextSerializers.FORMATTING_CODE.deserialize(TextSerializers.FORMATTING_CODE.serialize(name).substring(0,16));
  }
  if (TextSerializers.FORMATTING_CODE.serialize(prefix).length() > 16) {
    prefix=TextSerializers.FORMATTING_CODE.deserialize(TextSerializers.FORMATTING_CODE.serialize(prefix).substring(0,16));
  }
  if (TextSerializers.FORMATTING_CODE.serialize(suffix).length() > 16) {
    suffix=TextSerializers.FORMATTING_CODE.deserialize(TextSerializers.FORMATTING_CODE.serialize(suffix).substring(0,16));
  }
  return Tuples.of(prefix,name,suffix);
}",0.8513582778062532
141540,"public void refreshNormal(){
  for (  Player p : Sponge.getServer().getOnlinePlayers()) {
    TabList list=p.getTabList();
    new ArrayList<>(list.getEntries()).forEach(entry -> list.removeEntry(entry.getProfile().getUniqueId()));
    names.forEach((uuid,name) -> {
      Player player=Sponge.getServer().getPlayer(uuid).get();
      list.addEntry(TabListEntry.builder().displayName(Text.of(name.getFirst(),name.getSecond(),name.getThird())).gameMode(player.gameMode().get()).latency(player.getConnection().getLatency()).list(list).profile(player.getProfile()).build());
    }
);
  }
}","public void refreshNormal(){
  for (  Player p : Sponge.getServer().getOnlinePlayers()) {
    TabList list=p.getTabList();
    new ArrayList<>(list.getEntries()).forEach(entry -> list.removeEntry(entry.getProfile().getUniqueId()));
    names.forEach((uuid,name) -> {
      Player player=Sponge.getServer().getPlayer(uuid).get();
      Text fullname=Text.of(name.getFirst(),name.getSecond(),name.getThird());
      list.addEntry(TabListEntry.builder().displayName(fullname).gameMode(player.gameMode().get()).latency(player.getConnection().getLatency()).list(list).profile(player.getProfile()).build());
    }
);
  }
}",0.7587354409317804
141541,"/** 
 * This will get a specific piece of text, starting at   {@code init} and ending at {@code end - 1}. This is the same as   {@link String#substring(int,int)}, but keeps formatting.
 * @param text  The text to get the subtext for
 * @param start The beginning index, inclusive
 * @param end   The ending index, exclusive
 * @return The subtext
 */
public static LiteralText subtext(Text text,int start,int end){
  if (start == end) {
    return Text.of(""String_Node_Str"");
  }
  List<LiteralText> chars=getFormattedChars(text);
  LiteralText.Builder sub=LiteralText.builder(""String_Node_Str"");
  for (  Text tex : Arrays.copyOfRange(chars.toArray(new Text[chars.size()]),start,end)) {
    sub.append(tex);
  }
  return sub.build();
}","/** 
 * This will get a specific piece of text, starting at   {@code init} and ending at {@code end - 1}. This is the same as   {@link String#substring(int,int)}, but keeps formatting.
 * @param text  The text to get the subtext for
 * @param start The beginning index, inclusive
 * @param end   The ending index, exclusive
 * @return The subtext
 */
public static LiteralText subtext(Text text,int start,int end){
  if (start == end) {
    return Text.of(""String_Node_Str"");
  }
  List<LiteralText> chars=getFormattedChars(text);
  LiteralText.Builder sub=LiteralText.builder(""String_Node_Str"");
  for (  Text tex : Arrays.copyOfRange(chars.toArray(new Text[chars.size()]),start,end)) {
    sub.append(tex);
  }
  return (LiteralText)TextSimplifier.simplify(sub.build());
}",0.96158940397351
141542,"/** 
 * This will replace all literal matches of   {@code find} with {@code replace}. This is the same as   {@link String#replace(CharSequence,CharSequence)}, but keeps formatting. This does NOT support regex.
 * @param text    The text to search & replace in.
 * @param find    The string to search for.
 * @param replace The text to replace the string with.
 * @return The text, where every match has been replaced.
 */
public static Text replace(Text text,String find,Text replace){
  int index=text.toPlain().indexOf(find);
  if (replace.toPlain().contains(find)) {
    replace=replace(replace,find,Text.of());
  }
  while (index != -1) {
    Text charr=getChar(text,index);
    Text replacenew=merge(replace,charr);
    Text front=subtext(text,0,index);
    Text after=subtext(text,index + find.length(),text.toPlain().length());
    text=Text.of(front,replacenew,after);
    index=indexOf(text,find,true);
  }
  return text;
}","/** 
 * This will replace all literal matches of   {@code find} with {@code replace}. This is the same as   {@link String#replace(CharSequence,CharSequence)}, but keeps formatting. This does NOT support regex.
 * @param text    The text to search & replace in.
 * @param find    The string to search for.
 * @param replace The text to replace the string with.
 * @return The text, where every match has been replaced.
 */
public static Text replace(Text text,String find,Text replace){
  if (replace.toPlain().contains(find)) {
    replace=replace(replace,find,Text.of());
  }
  int index=text.toPlain().indexOf(find);
  while (index != -1) {
    Text charr=getChar(text,index);
    Text replacenew=merge(replace,charr);
    Text front=subtext(text,0,index);
    Text after=subtext(text,index + find.length(),text.toPlain().length());
    text=Text.of(front,replacenew,after);
    index=indexOf(text,find,true);
  }
  return text;
}",0.8937768240343348
141543,"default void checkPermission(CommandSource commander,Permission permission) throws CommandException {
  if (!commander.hasPermission(permission.get())) {
    throw new CommandPermissionException();
  }
}","default void checkPermission(CommandSource sender,Permission permission) throws CommandException {
  if (!sender.hasPermission(permission.get())) {
    throw new CommandPermissionException();
  }
}",0.965
141544,"default CommandElement[] getArguments(){
  return new CommandElement[]{};
}",CommandElement[] getArguments();,0.5981308411214953
141545,"@Override default CommandResult run(CommandSource sender,String[] rawargs){
  InputTokenizer argumentParser=InputTokenizer.quotedStrings(false);
  String args=StringUtil.join(""String_Node_Str"",rawargs);
  try {
    CommandArgs cargs=new CommandArgs(StringUtil.join(""String_Node_Str"",rawargs),argumentParser.tokenize(args,false));
    CommandContext context=new CommandContext();
    GenericArguments.seq(getArguments()).parse(sender,cargs,context);
    return execute(sender,context);
  }
 catch (  CommandPermissionException ex) {
    sender.sendMessage(Messages.getFormatted(sender,""String_Node_Str""));
    return CommandResult.empty();
  }
catch (  CommandException ex) {
    if (ex.getText() != null) {
      sender.sendMessage(ex.getText());
    }
    return CommandResult.empty();
  }
}","@Override default CommandResult run(CommandSource sender,String[] rawargs){
  InputTokenizer argumentParser=InputTokenizer.quotedStrings(false);
  String args=StringUtil.join(""String_Node_Str"",rawargs);
  try {
    CommandArgs cargs=new CommandArgs(StringUtil.join(""String_Node_Str"",rawargs),argumentParser.tokenize(args,false));
    CommandContext context=new CommandContext();
    GenericArguments.seq(getArguments()).parse(sender,cargs,context);
    return execute(sender,context);
  }
 catch (  CommandPermissionException ex) {
    sender.sendMessage(Messages.getFormatted(sender,""String_Node_Str""));
    return CommandResult.empty();
  }
catch (  CommandException ex) {
    if (ex.getText() != null) {
      sender.sendMessage(Text.of(TextColors.RED,ex.getText()));
      if (ex.shouldIncludeUsage()) {
        sender.sendMessage(Text.of(TextColors.RED,getUsage(sender)));
      }
    }
    return CommandResult.empty();
  }
}",0.9065583284968078
141546,"@Override default List<String> onTabComplete(CommandSource sender,String[] rawargs,String curs,Integer curn){
  InputTokenizer argumentParser=InputTokenizer.quotedStrings(false);
  String args=StringUtil.join(""String_Node_Str"",rawargs);
  try {
    CommandArgs cargs=new CommandArgs(StringUtil.join(""String_Node_Str"",rawargs),argumentParser.tokenize(args,false));
    CommandContext context=new CommandContext();
    GenericArguments.seq(getArguments()).parse(sender,cargs,context);
    if (sender instanceof Player) {
      BlockRay<World> blockRay=BlockRay.from((Player)sender).stopFilter(BlockRay.continueAfterFilter(BlockRay.onlyAirFilter(),1)).build();
      if (blockRay.hasNext()) {
        Location<World> loc=blockRay.next().getLocation();
        context.putArg(CommandContext.TARGET_BLOCK_ARG,loc);
      }
    }
    List<String> ret=GenericArguments.seq(getArguments()).complete(sender,cargs,context);
    return ret == null ? ImmutableList.of() : ImmutableList.copyOf(ret);
  }
 catch (  CommandException ex) {
    if (ex.getText() != null) {
      sender.sendMessage(ex.getText());
    }
    return new ArrayList<>();
  }
}","@Override default List<String> onTabComplete(CommandSource sender,String[] rawargs,String curs,Integer curn){
  InputTokenizer argumentParser=InputTokenizer.quotedStrings(false);
  String args=StringUtil.join(""String_Node_Str"",rawargs);
  try {
    CommandArgs cargs=new CommandArgs(StringUtil.join(""String_Node_Str"",rawargs),argumentParser.tokenize(args,false));
    CommandContext context=new CommandContext();
    if (sender instanceof Player) {
      BlockRay<World> blockRay=BlockRay.from((Player)sender).stopFilter(BlockRay.continueAfterFilter(BlockRay.onlyAirFilter(),1)).build();
      if (blockRay.hasNext()) {
        Location<World> loc=blockRay.next().getLocation();
        context.putArg(CommandContext.TARGET_BLOCK_ARG,loc);
      }
    }
    List<String> ret=GenericArguments.seq(getArguments()).complete(sender,cargs,context);
    return ret == null ? ImmutableList.of() : ImmutableList.copyOf(ret);
  }
 catch (  CommandException ex) {
    if (ex.getText() != null) {
      sender.sendMessage(ex.getText());
    }
    return new ArrayList<>();
  }
}",0.9682395644283122
141547,"@Nullable @Override protected Object parseValue(CommandSource source,CommandArgs args) throws ArgumentParseException {
  String var=args.next();
switch (var) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
  return false;
default :
throw args.createError(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",var));
}
}","@Nullable @Override public Boolean parseValue(CommandSource source,CommandArgs args) throws ArgumentParseException {
  String var=args.next();
switch (var.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
  return false;
default :
throw args.createError(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",var));
}
}",0.8217054263565892
141548,"@Nullable @Override protected Object parseValue(CommandSource source,CommandArgs args) throws ArgumentParseException {
  String player=args.next();
  return Selector.one(source,player).orElseThrow(() -> args.createError(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",player)));
}","@Nullable @Override public Player parseValue(CommandSource source,CommandArgs args) throws ArgumentParseException {
  String player=args.next();
  Optional<Player> t=Selector.one(source,player);
  if (t.isPresent()) {
    return t.get();
  }
 else {
    throw args.createError(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",player));
  }
}",0.79375
141549,"@Nullable @Override public Boolean parseValue(CommandSource source,CommandArgs args) throws ArgumentParseException {
  String var=args.next();
switch (var.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
  return false;
default :
throw args.createError(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",var));
}
}","@Nullable @Override public Boolean parseValue(CommandSource source,CommandArgs args) throws ArgumentParseException {
  String var=args.next();
switch (var.toLowerCase()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
  return false;
default :
throw args.createError(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",var));
}
}",0.9252336448598132
141550,"@Override public CommandElement[] getArguments(){
  return new CommandElement[]{Arguments.builder(new PlayerArgument(Text.of(""String_Node_Str""))).onlyOne().optionalWeak().build()};
}","@Override public CommandElement[] getArguments(){
  return new CommandElement[]{Arguments.builder(new PlayerArgument(Text.of(""String_Node_Str""))).onlyOne().optional().build()};
}",0.9888888888888888
141551,"@Override public CommandElement[] getArguments(){
  return new CommandElement[]{Arguments.builder(new PlayerArgument(Text.of(""String_Node_Str""))).optionalWeak().onlyOne().build()};
}","@Override public CommandElement[] getArguments(){
  return new CommandElement[]{Arguments.builder(new PlayerArgument(Text.of(""String_Node_Str""))).optional().onlyOne().build()};
}",0.9888888888888888
141552,"public void postload(){
  try {
    boolean modified=false;
    if (!node.getNode(""String_Node_Str"").getComment().isPresent()) {
      node.getNode(""String_Node_Str"").setComment(""String_Node_Str"");
    }
    for (    Module mod : UltimateCore.get().getModuleService().getRegisteredModules()) {
      if (mod.getIdentifier().equals(""String_Node_Str"")) {
        continue;
      }
      CommentedConfigurationNode modnode=node.getNode(""String_Node_Str"",mod.getIdentifier());
      if (modnode.getNode(""String_Node_Str"").getValue() == null) {
        modified=true;
        modnode.getNode(""String_Node_Str"").setValue(""String_Node_Str"");
      }
    }
    if (modified) {
      loader.save(node);
    }
  }
 catch (  IOException e) {
    Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    e.printStackTrace();
  }
}","public void postload(){
  try {
    boolean modified=false;
    if (!node.getNode(""String_Node_Str"").getComment().isPresent()) {
      node.getNode(""String_Node_Str"").setComment(""String_Node_Str"");
    }
    for (    Module mod : UltimateCore.get().getModuleService().getRegisteredModules()) {
      if (mod.getIdentifier().equals(""String_Node_Str"")) {
        continue;
      }
      CommentedConfigurationNode modnode=node.getNode(""String_Node_Str"",mod.getIdentifier());
      if (modnode.getNode(""String_Node_Str"").isVirtual()) {
        modified=true;
        modnode.getNode(""String_Node_Str"").setValue(""String_Node_Str"");
      }
    }
    if (modified) {
      loader.save(node);
    }
  }
 catch (  IOException e) {
    Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    e.printStackTrace();
  }
}",0.984182776801406
141553,"/** 
 * Registers a new module
 * @param module The module to register
 * @return Whether it was successfully registered
 */
@Override public boolean registerModule(Module module){
  ModuleRegisterEvent event=new ModuleRegisterEvent(module,Cause.builder().owner(UltimateCore.get()).build());
  Sponge.getEventManager().post(event);
  String state=UltimateCore.get().getModulesConfig().get().getNode(""String_Node_Str"",module.getIdentifier(),""String_Node_Str"").getString();
  if (event.isCancelled() && !module.getIdentifier().equalsIgnoreCase(""String_Node_Str"") && !state.equalsIgnoreCase(""String_Node_Str"")) {
    Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",module.getIdentifier()));
    return false;
  }
  if (!module.getIdentifier().equalsIgnoreCase(""String_Node_Str"") && state.equalsIgnoreCase(""String_Node_Str"")) {
    Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",module.getIdentifier()));
    return false;
  }
  modules.add(module);
  module.onRegister();
  return true;
}","/** 
 * Registers a new module
 * @param module The module to register
 * @return Whether it was successfully registered
 */
@Override public boolean registerModule(Module module){
  try {
    ModuleRegisterEvent event=new ModuleRegisterEvent(module,Cause.builder().owner(UltimateCore.get()).build());
    Sponge.getEventManager().post(event);
    String state=UltimateCore.get().getModulesConfig().get().getNode(""String_Node_Str"",module.getIdentifier(),""String_Node_Str"").getString();
    if (event.isCancelled() && !module.getIdentifier().equalsIgnoreCase(""String_Node_Str"") && state != null && !state.equalsIgnoreCase(""String_Node_Str"")) {
      Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",module.getIdentifier()));
      return false;
    }
    if (!module.getIdentifier().equalsIgnoreCase(""String_Node_Str"") && state != null && state.equalsIgnoreCase(""String_Node_Str"")) {
      Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",module.getIdentifier()));
      return false;
    }
    modules.add(module);
    module.onRegister();
    return true;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    Messages.log(Text.of(TextColors.RED,""String_Node_Str"" + module.getIdentifier() + ""String_Node_Str""));
    return false;
  }
}",0.6738567730802416
141554,"@Override public void run(){
  try {
    data.put(""String_Node_Str"",getCountryCode());
    Webb webb=Webb.create();
    Response<String> response=webb.post(""String_Node_Str"").params(data).asString();
    Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",response.getStatusLine()));
    File file=new File(UltimateCore.get().getDataFolder().toFile(),""String_Node_Str"");
    if (!file.exists()) {
      file.getParentFile().mkdirs();
      file.createNewFile();
    }
    List<String> lines=new ArrayList<>();
    for (    String key : data.keySet()) {
      lines.add(key + ""String_Node_Str"" + data.get(key));
    }
    FileUtil.writeLines(file,lines);
  }
 catch (  IOException e) {
    Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",e.getMessage()));
  }
}","@Override public void run(){
  try {
    data.put(""String_Node_Str"",getCountryCode());
    Webb webb=Webb.create();
    Response<String> response=webb.post(""String_Node_Str"").params(data).asString();
    Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",response.getStatusLine()));
    File file=new File(UltimateCore.get().getDataFolder().toFile(),""String_Node_Str"");
    if (!file.exists()) {
      file.getParentFile().mkdirs();
      file.createNewFile();
    }
    List<String> lines=new ArrayList<>();
    for (    String key : data.keySet()) {
      lines.add(key + ""String_Node_Str"" + data.get(key));
    }
    FileUtil.writeLines(file,lines);
  }
 catch (  Exception e) {
    Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",e.getMessage()));
  }
}",0.9987515605493134
141555,"public static void send(){
  final HashMap<String,Object> data=collect();
  Sponge.getScheduler().createTaskBuilder().name(""String_Node_Str"").delayTicks(1L).async().execute(new Runnable(){
    @Override public void run(){
      try {
        data.put(""String_Node_Str"",getCountryCode());
        Webb webb=Webb.create();
        Response<String> response=webb.post(""String_Node_Str"").params(data).asString();
        Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",response.getStatusLine()));
        File file=new File(UltimateCore.get().getDataFolder().toFile(),""String_Node_Str"");
        if (!file.exists()) {
          file.getParentFile().mkdirs();
          file.createNewFile();
        }
        List<String> lines=new ArrayList<>();
        for (        String key : data.keySet()) {
          lines.add(key + ""String_Node_Str"" + data.get(key));
        }
        FileUtil.writeLines(file,lines);
      }
 catch (      IOException e) {
        Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",e.getMessage()));
      }
    }
  }
).submit(UltimateCore.get());
}","public static void send(){
  final HashMap<String,Object> data=collect();
  Sponge.getScheduler().createTaskBuilder().name(""String_Node_Str"").delayTicks(1L).async().execute(new Runnable(){
    @Override public void run(){
      try {
        data.put(""String_Node_Str"",getCountryCode());
        Webb webb=Webb.create();
        Response<String> response=webb.post(""String_Node_Str"").params(data).asString();
        Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",response.getStatusLine()));
        File file=new File(UltimateCore.get().getDataFolder().toFile(),""String_Node_Str"");
        if (!file.exists()) {
          file.getParentFile().mkdirs();
          file.createNewFile();
        }
        List<String> lines=new ArrayList<>();
        for (        String key : data.keySet()) {
          lines.add(key + ""String_Node_Str"" + data.get(key));
        }
        FileUtil.writeLines(file,lines);
      }
 catch (      Exception e) {
        Messages.log(Messages.getFormatted(""String_Node_Str"",""String_Node_Str"",e.getMessage()));
      }
    }
  }
).submit(UltimateCore.get());
}",0.9991023339317774
141556,"/** 
 * Add the   {@link UltimateUser} to the cache. This will overwrite other users with the same UUID.
 * @param user The user to add to the cache
 * @return Whether the user was added to the cache successfully
 */
@Override public boolean addToCache(UltimateUser user){
  if (removeFromCache(user.getIdentifier())) {
    Messages.log(""String_Node_Str"");
    return users.add(user);
  }
 else {
    Messages.log(""String_Node_Str"");
    return false;
  }
}","/** 
 * Add the   {@link UltimateUser} to the cache. This will overwrite other users with the same UUID.
 * @param user The user to add to the cache
 * @return Whether the user was added to the cache successfully
 */
@Override public boolean addToCache(UltimateUser user){
  if (removeFromCache(user.getIdentifier())) {
    return users.add(user);
  }
 else {
    return false;
  }
}",0.8047619047619048
141557,"/** 
 * Remove all users from the cache. <p> <p>Warning: This will reset all   {@link bammerbom.ultimatecore.sponge.api.user.Key.Online}s! (So afk players will no longer be afk, etc)</p>
 * @return Whether the reset was successful
 */
@Override public boolean clearcache(){
  users.clear();
  return true;
}","/** 
 * Remove all users from the cache. <p> <p>Warning: This will reset all   {@link bammerbom.ultimatecore.sponge.api.user.Key.User.Online}s! (So afk players will no longer be afk, etc)</p>
 * @return Whether the reset was successful
 */
@Override public boolean clearcache(){
  users.clear();
  return true;
}",0.9919224555735056
141558,"/** 
 * Remove the specified user from the cache. <p> <p>Warning: This will reset all   {@link bammerbom.ultimatecore.sponge.api.user.Key.Online}s of the user! (So afk player will no longer be afk, etc)</p>
 * @param uuid The user's uuid to remove from the cache
 * @return Whether the reset was successful
 */
@Override public boolean removeFromCache(UUID uuid){
  List<UltimateUser> rusers=new ArrayList<>();
  users.stream().filter(user -> user.getIdentifier().equals(uuid)).forEach(user -> {
    rusers.add(user);
  }
);
  Messages.log(rusers.isEmpty());
  return !rusers.isEmpty() && users.remove(rusers);
}","/** 
 * Remove the specified user from the cache. <p> <p>Warning: This will reset all   {@link bammerbom.ultimatecore.sponge.api.user.Key.User.Online}s of the user! (So afk player will no longer be afk, etc)</p>
 * @param uuid The user's uuid to remove from the cache
 * @return Whether the reset was successful
 */
@Override public boolean removeFromCache(UUID uuid){
  List<UltimateUser> rusers=new ArrayList<>();
  users.stream().filter(user -> user.getIdentifier().equals(uuid)).forEach(user -> {
    rusers.add(user);
  }
);
  return !rusers.isEmpty() && users.removeAll(rusers);
}",0.9649415692821368
141559,"@EventHandler(priority=EventPriority.LOW) public void onJoin(PlayerJoinEvent e){
  try {
    if (spawnOnJoin) {
      LocationUtil.teleportUnsafe(e.getPlayer(),UC.getPlayer(e.getPlayer()).getSpawn(false),TeleportCause.PLUGIN,false);
    }
    UC.getPlayer(e.getPlayer()).updateLastInventory();
    if (UC.getPlayer(e.getPlayer()).isJailed()) {
      e.getPlayer().teleport(UC.getServer().getJail(UC.getPlayer(e.getPlayer()).getJail()));
    }
    UC.getPlayer(e.getPlayer()).updateLastConnectMillis();
    UC.getPlayer(e.getPlayer()).setLastIp(e.getPlayer().getAddress().toString().split(""String_Node_Str"")[1].split(""String_Node_Str"")[0]);
    UC.getPlayer(e.getPlayer()).setLastHostname(e.getPlayer().getAddress().getHostName());
    for (    Player p : UC.getServer().getVanishOnlinePlayers()) {
      e.getPlayer().hidePlayer(p);
    }
    if (UC.getPlayer(e.getPlayer()).getPlayerConfig().contains(""String_Node_Str"")) {
      JsonConfig conf=UC.getPlayer(e.getPlayer()).getPlayerConfig();
      r.sendMes(e.getPlayer(),""String_Node_Str"",""String_Node_Str"",conf.getString(""String_Node_Str""),""String_Node_Str"",e.getPlayer().getName());
      conf.set(""String_Node_Str"",null);
      conf.save();
    }
  }
 catch (  Exception ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
}","@EventHandler(priority=EventPriority.LOW) public void onJoin(PlayerJoinEvent e){
  try {
    if (spawnOnJoin && UC.getPlayer(e.getPlayer()).getSpawn(false) != null) {
      LocationUtil.teleportUnsafe(e.getPlayer(),UC.getPlayer(e.getPlayer()).getSpawn(false),TeleportCause.PLUGIN,false);
    }
    UC.getPlayer(e.getPlayer()).updateLastInventory();
    if (UC.getPlayer(e.getPlayer()).isJailed()) {
      e.getPlayer().teleport(UC.getServer().getJail(UC.getPlayer(e.getPlayer()).getJail()));
    }
    UC.getPlayer(e.getPlayer()).updateLastConnectMillis();
    UC.getPlayer(e.getPlayer()).setLastIp(e.getPlayer().getAddress().toString().split(""String_Node_Str"")[1].split(""String_Node_Str"")[0]);
    UC.getPlayer(e.getPlayer()).setLastHostname(e.getPlayer().getAddress().getHostName());
    for (    Player p : UC.getServer().getVanishOnlinePlayers()) {
      e.getPlayer().hidePlayer(p);
    }
    if (UC.getPlayer(e.getPlayer()).getPlayerConfig().contains(""String_Node_Str"")) {
      JsonConfig conf=UC.getPlayer(e.getPlayer()).getPlayerConfig();
      r.sendMes(e.getPlayer(),""String_Node_Str"",""String_Node_Str"",conf.getString(""String_Node_Str""),""String_Node_Str"",e.getPlayer().getName());
      conf.set(""String_Node_Str"",null);
      conf.save();
    }
  }
 catch (  Exception ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
}",0.9789674952198852
141560,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  Player p=(Player)cs;
  ItemStack InHandItem=p.getItemInHand();
  if (p.getInventory().getHelmet() == null || p.getInventory().getHelmet().getType().equals(Material.AIR)) {
    p.getInventory().setHelmet(InHandItem);
    p.getInventory().remove(InHandItem);
  }
 else {
    ItemStack tohand=p.getInventory().getHelmet();
    p.getInventory().setHelmet(InHandItem);
    p.getInventory().remove(InHandItem);
    p.getInventory().setItemInHand(tohand);
  }
  r.sendMes(p,""String_Node_Str"");
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  Player p=(Player)cs;
  ItemStack InHandItem=p.getItemInHand();
  if (p.getInventory().getHelmet() == null || p.getInventory().getHelmet().getType().equals(Material.AIR)) {
    p.getInventory().setHelmet(InHandItem);
    p.getInventory().setItemInHand(null);
  }
 else {
    ItemStack tohand=p.getInventory().getHelmet();
    p.getInventory().setHelmet(InHandItem);
    p.getInventory().setItemInHand(tohand);
  }
  r.sendMes(p,""String_Node_Str"");
}",0.9419847328244276
141561,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (r.getOnlinePlayers().length > 64) {
      r.sendMes(cs,""String_Node_Str"");
      return;
    }
    Integer size=9;
    while (r.getOnlinePlayers().length > size) {
      size=size + 9;
    }
    Inventory inv=Bukkit.createInventory(null,size,r.mes(""String_Node_Str""));
    for (    Player pl : r.getOnlinePlayers()) {
      if (!(pl == p)) {
        ItemStack item=new ItemStack(Material.SKULL_ITEM);
        item.setDurability(Short.parseShort(""String_Node_Str""));
        SkullMeta meta=(SkullMeta)item.getItemMeta();
        meta.setDisplayName(r.neutral + pl.getName());
        meta.setOwner(pl.getName());
        item.setItemMeta(meta);
        inv.addItem(item);
      }
    }
    UC.getPlayer(p).setInTeleportMenu(true);
    if (inv.getItem(0) == null) {
      Inventory inv2=Bukkit.createInventory(null,9,r.mes(""String_Node_Str""));
      p.openInventory(inv2);
      return;
    }
    p.openInventory(inv);
  }
 else   if (r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str"")) || args[0].replace(""String_Node_Str"",""String_Node_Str"").isEmpty()) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    World w=p.getWorld();
    Double x=LocationUtil.getCoordinate(args[0],p.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,2) == false) {
      z=LocationUtil.getCoordinate(args[1],p.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[1],p.getLocation().getY());
      z=LocationUtil.getCoordinate(args[2],p.getLocation().getZ());
    }
    LocationUtil.teleport(p,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,true,true);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
  }
 else   if (r.checkArgs(args,1) == true && (r.isDouble(args[1].replace(""String_Node_Str"",""String_Node_Str"")) || args[1].replace(""String_Node_Str"",""String_Node_Str"").isEmpty()) && (!r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str"")) && !args[0].replace(""String_Node_Str"",""String_Node_Str"").isEmpty())) {
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    Player t=r.searchPlayer(args[0]);
    if (t == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    World w=t.getWorld();
    Double x=LocationUtil.getCoordinate(args[1],t.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,3) == false) {
      z=LocationUtil.getCoordinate(args[2],t.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[2],t.getLocation().getY());
      z=LocationUtil.getCoordinate(args[3],t.getLocation().getZ());
    }
    LocationUtil.teleport(t,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,true,false);
    LocationUtil.playEffect(t,new Location(w,x,y,z));
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
  }
 else {
    Player tg=r.searchPlayer(args[0]);
    if (tg == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    }
 else {
      if (r.checkArgs(args,1) == false) {
        if (!r.isPlayer(cs)) {
          return;
        }
        Player p=(Player)cs;
        if (!UC.getPlayer(tg).hasTeleportEnabled() && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
          return;
        }
        LocationUtil.teleport(p,tg,PlayerTeleportEvent.TeleportCause.COMMAND,true,true);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
      }
 else {
        if (!r.perm(cs,""String_Node_Str"",false,true)) {
          return;
        }
        Player tg2=r.searchPlayer(args[1]);
        if (tg2 == null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
        }
 else {
          if (UC.getPlayer(tg).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
            return;
          }
          if (UC.getPlayer(tg2).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg2.getName());
            return;
          }
          LocationUtil.teleport(tg,tg2,PlayerTeleportEvent.TeleportCause.COMMAND,true,false);
          LocationUtil.playEffect(tg,tg2.getLocation());
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName(),""String_Node_Str"",tg2.getName());
        }
      }
    }
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (r.getOnlinePlayers().length > 64) {
      r.sendMes(cs,""String_Node_Str"");
      return;
    }
    Integer size=9;
    while (r.getOnlinePlayers().length > size) {
      size=size + 9;
    }
    Inventory inv=Bukkit.createInventory(null,size,r.mes(""String_Node_Str""));
    for (    Player pl : r.getOnlinePlayers()) {
      if (!(pl == p)) {
        ItemStack item=new ItemStack(Material.SKULL_ITEM);
        item.setDurability(Short.parseShort(""String_Node_Str""));
        SkullMeta meta=(SkullMeta)item.getItemMeta();
        meta.setDisplayName(r.neutral + pl.getName());
        meta.setOwner(pl.getName());
        item.setItemMeta(meta);
        inv.addItem(item);
      }
    }
    UC.getPlayer(p).setInTeleportMenu(true);
    if (inv.getItem(0) == null) {
      Inventory inv2=Bukkit.createInventory(null,9,r.mes(""String_Node_Str""));
      p.openInventory(inv2);
      return;
    }
    p.openInventory(inv);
  }
 else   if ((r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str"")) || args[0].replace(""String_Node_Str"",""String_Node_Str"").isEmpty()) && (r.isDouble(args[1].replace(""String_Node_Str"",""String_Node_Str"")) || args[1].replace(""String_Node_Str"",""String_Node_Str"").isEmpty())) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    World w=p.getWorld();
    Double x=LocationUtil.getCoordinate(args[0],p.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,2) == false) {
      z=LocationUtil.getCoordinate(args[1],p.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[1],p.getLocation().getY());
      z=LocationUtil.getCoordinate(args[2],p.getLocation().getZ());
    }
    LocationUtil.teleport(p,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,true,true);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
  }
 else   if (r.checkArgs(args,1) == true && (r.isDouble(args[1].replace(""String_Node_Str"",""String_Node_Str"")) || args[1].replace(""String_Node_Str"",""String_Node_Str"").isEmpty()) && (!r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str"")) && !args[0].replace(""String_Node_Str"",""String_Node_Str"").isEmpty())) {
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    Player t=r.searchPlayer(args[0]);
    if (t == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    World w=t.getWorld();
    Double x=LocationUtil.getCoordinate(args[1],t.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,3) == false) {
      z=LocationUtil.getCoordinate(args[2],t.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[2],t.getLocation().getY());
      z=LocationUtil.getCoordinate(args[3],t.getLocation().getZ());
    }
    LocationUtil.teleport(t,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,true,false);
    LocationUtil.playEffect(t,new Location(w,x,y,z));
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
  }
 else {
    Player tg=r.searchPlayer(args[0]);
    if (tg == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    }
 else {
      if (r.checkArgs(args,1) == false) {
        if (!r.isPlayer(cs)) {
          return;
        }
        Player p=(Player)cs;
        if (!UC.getPlayer(tg).hasTeleportEnabled() && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
          return;
        }
        LocationUtil.teleport(p,tg,PlayerTeleportEvent.TeleportCause.COMMAND,true,true);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
      }
 else {
        if (!r.perm(cs,""String_Node_Str"",false,true)) {
          return;
        }
        Player tg2=r.searchPlayer(args[1]);
        if (tg2 == null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
        }
 else {
          if (UC.getPlayer(tg).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
            return;
          }
          if (UC.getPlayer(tg2).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg2.getName());
            return;
          }
          LocationUtil.teleport(tg,tg2,PlayerTeleportEvent.TeleportCause.COMMAND,true,false);
          LocationUtil.playEffect(tg,tg2.getLocation());
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName(),""String_Node_Str"",tg2.getName());
        }
      }
    }
  }
}",0.9864546525323912
141562,"public UltimateCore(){
  instance=this;
  try {
    r.prestart();
    r.log(""String_Node_Str"");
  }
 catch (  Exception ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
}","public UltimateCore(){
  instance=this;
  try {
    r.prestart();
    r.log(""String_Node_Str"");
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.8821752265861027
141563,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String ip;
  OfflinePlayer t=null;
  if (FormatUtil.validIP(args[0])) {
    ip=args[0];
    for (    Player p : r.getOnlinePlayers()) {
      if (ip.equalsIgnoreCase(UC.getPlayer(t).getLastIp())) {
        t=p;
      }
    }
  }
 else {
    t=r.searchOfflinePlayer(args[0]);
    if (UC.getPlayer(t).getLastIp() != null) {
      ip=UC.getPlayer(t).getLastIp();
    }
 else {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
  }
  Long time=0L;
  String reason=r.mes(""String_Node_Str"");
  if (!r.checkArgs(args,1)) {
  }
 else   if (DateUtil.parseDateDiff(args[1]) == -1) {
    reason=r.getFinalArg(args,1);
  }
 else {
    time=DateUtil.parseDateDiff(args[1]);
    if (r.checkArgs(args,2)) {
      reason=r.getFinalArg(args,2);
    }
  }
  String timen=DateUtil.format(time);
  if (time == 0) {
    timen=r.mes(""String_Node_Str"");
  }
 else {
    timen=""String_Node_Str"" + timen;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time <= 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && !(time <= 0L)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String msg=r.mes(""String_Node_Str"").replace(""String_Node_Str"",timen).replace(""String_Node_Str"",reason);
  if (t != null && t.isOnline()) {
    t.getPlayer().kickPlayer(msg);
  }
  Date date=time == 0 ? null : new Date(time + System.currentTimeMillis());
  Bukkit.getBanList(BanList.Type.IP).addBan(ip,reason,date,cs.getName());
  if (r.getCnfg().getBoolean(""String_Node_Str"")) {
    Bukkit.broadcastMessage(r.mes(""String_Node_Str"",""String_Node_Str"",((cs instanceof Player) ? r.getDisplayName(cs) : r.getDisplayName(cs).toLowerCase()),""String_Node_Str"",ip,""String_Node_Str"",timen,""String_Node_Str"",reason));
  }
 else {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",((cs instanceof Player) ? r.getDisplayName(cs) : r.getDisplayName(cs).toLowerCase()),""String_Node_Str"",ip,""String_Node_Str"",timen,""String_Node_Str"",reason);
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String ip;
  OfflinePlayer t=null;
  if (FormatUtil.validIP(args[0])) {
    ip=args[0];
    for (    Player p : r.getOnlinePlayers()) {
      if (ip.equalsIgnoreCase(UC.getPlayer(p).getLastIp())) {
        t=p;
      }
    }
  }
 else {
    t=r.searchOfflinePlayer(args[0]);
    if (UC.getPlayer(t).getLastIp() != null) {
      ip=UC.getPlayer(t).getLastIp();
    }
 else {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
  }
  Long time=0L;
  String reason=r.mes(""String_Node_Str"");
  if (!r.checkArgs(args,1)) {
  }
 else   if (DateUtil.parseDateDiff(args[1]) == -1) {
    reason=r.getFinalArg(args,1);
  }
 else {
    time=DateUtil.parseDateDiff(args[1]);
    if (r.checkArgs(args,2)) {
      reason=r.getFinalArg(args,2);
    }
  }
  String timen=DateUtil.format(time);
  if (time == 0) {
    timen=r.mes(""String_Node_Str"");
  }
 else {
    timen=""String_Node_Str"" + timen;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time <= 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && !(time <= 0L)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String msg=r.mes(""String_Node_Str"").replace(""String_Node_Str"",timen).replace(""String_Node_Str"",reason);
  if (t != null && t.isOnline()) {
    t.getPlayer().kickPlayer(msg);
  }
  Date date=time == 0 ? null : new Date(time + System.currentTimeMillis());
  Bukkit.getBanList(BanList.Type.IP).addBan(ip,reason,date,cs.getName());
  if (r.getCnfg().getBoolean(""String_Node_Str"")) {
    Bukkit.broadcastMessage(r.mes(""String_Node_Str"",""String_Node_Str"",((cs instanceof Player) ? r.getDisplayName(cs) : r.getDisplayName(cs).toLowerCase()),""String_Node_Str"",ip,""String_Node_Str"",timen,""String_Node_Str"",reason));
  }
 else {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",((cs instanceof Player) ? r.getDisplayName(cs) : r.getDisplayName(cs).toLowerCase()),""String_Node_Str"",ip,""String_Node_Str"",timen,""String_Node_Str"",reason);
  }
}",0.9995549621717846
141564,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String ip;
  OfflinePlayer t=null;
  if (FormatUtil.validIP(args[0])) {
    ip=args[0];
    for (    Player p : r.getOnlinePlayers()) {
      if (ip.equalsIgnoreCase(UC.getPlayer(t).getLastIp())) {
        t=p;
      }
    }
  }
 else {
    t=r.searchOfflinePlayer(args[0]);
    if (UC.getPlayer(t).getLastIp() != null) {
      ip=UC.getPlayer(t).getLastIp();
    }
 else {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
  }
  Long time=0L;
  String reason=r.mes(""String_Node_Str"");
  if (!r.checkArgs(args,1)) {
  }
 else   if (DateUtil.parseDateDiff(args[1]) == -1) {
    reason=r.getFinalArg(args,1);
  }
 else {
    time=DateUtil.parseDateDiff(args[1]);
    if (r.checkArgs(args,2)) {
      reason=r.getFinalArg(args,2);
    }
  }
  String timen=DateUtil.format(time);
  if (time == 0) {
    timen=r.mes(""String_Node_Str"");
  }
 else {
    timen=""String_Node_Str"" + timen;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time <= 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && !(time <= 0L)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String msg=r.mes(""String_Node_Str"").replace(""String_Node_Str"",timen).replace(""String_Node_Str"",reason);
  if (t != null && t.isOnline()) {
    t.getPlayer().kickPlayer(msg);
  }
  Date date=time == 0 ? null : new Date(time + System.currentTimeMillis());
  Bukkit.getBanList(BanList.Type.IP).addBan(ip,reason,date,cs.getName());
  if (r.getCnfg().getBoolean(""String_Node_Str"")) {
    Bukkit.broadcastMessage(r.mes(""String_Node_Str"",""String_Node_Str"",((cs instanceof Player) ? r.getDisplayName(cs) : r.getDisplayName(cs).toLowerCase()),""String_Node_Str"",ip,""String_Node_Str"",timen,""String_Node_Str"",reason));
  }
 else {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",((cs instanceof Player) ? r.getDisplayName(cs) : r.getDisplayName(cs).toLowerCase()),""String_Node_Str"",ip,""String_Node_Str"",timen,""String_Node_Str"",reason);
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String ip;
  OfflinePlayer t=null;
  if (FormatUtil.validIP(args[0])) {
    ip=args[0];
    for (    Player p : r.getOnlinePlayers()) {
      if (ip.equalsIgnoreCase(UC.getPlayer(p).getLastIp())) {
        t=p;
      }
    }
  }
 else {
    t=r.searchOfflinePlayer(args[0]);
    if (UC.getPlayer(t).getLastIp() != null) {
      ip=UC.getPlayer(t).getLastIp();
    }
 else {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
  }
  Long time=0L;
  String reason=r.mes(""String_Node_Str"");
  if (!r.checkArgs(args,1)) {
  }
 else   if (DateUtil.parseDateDiff(args[1]) == -1) {
    reason=r.getFinalArg(args,1);
  }
 else {
    time=DateUtil.parseDateDiff(args[1]);
    if (r.checkArgs(args,2)) {
      reason=r.getFinalArg(args,2);
    }
  }
  String timen=DateUtil.format(time);
  if (time == 0) {
    timen=r.mes(""String_Node_Str"");
  }
 else {
    timen=""String_Node_Str"" + timen;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time <= 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && !(time <= 0L)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String msg=r.mes(""String_Node_Str"").replace(""String_Node_Str"",timen).replace(""String_Node_Str"",reason);
  if (t != null && t.isOnline()) {
    t.getPlayer().kickPlayer(msg);
  }
  Date date=time == 0 ? null : new Date(time + System.currentTimeMillis());
  Bukkit.getBanList(BanList.Type.IP).addBan(ip,reason,date,cs.getName());
  if (r.getCnfg().getBoolean(""String_Node_Str"")) {
    Bukkit.broadcastMessage(r.mes(""String_Node_Str"",""String_Node_Str"",((cs instanceof Player) ? r.getDisplayName(cs) : r.getDisplayName(cs).toLowerCase()),""String_Node_Str"",ip,""String_Node_Str"",timen,""String_Node_Str"",reason));
  }
 else {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",((cs instanceof Player) ? r.getDisplayName(cs) : r.getDisplayName(cs).toLowerCase()),""String_Node_Str"",ip,""String_Node_Str"",timen,""String_Node_Str"",reason);
  }
}",0.9995549621717846
141565,"public static UPlayer getPlayer(String n){
  for (  UPlayer pl : uplayers) {
    if (pl.name.equals(n)) {
      return pl;
    }
  }
  UPlayer pl=new UPlayer(r.searchOfflinePlayer(n));
  uplayers.add(pl);
  return pl;
}","public static UPlayer getPlayer(String n){
  for (  UPlayer pl : uplayers) {
    if (pl.name == null) {
      continue;
    }
    if (pl.name.equals(n)) {
      return pl;
    }
  }
  UPlayer pl=new UPlayer(r.searchOfflinePlayer(n));
  uplayers.add(pl);
  return pl;
}",0.8993839835728953
141566,"public static bammerbom.ultimatecore.spongeapi.api.UPlayer getPlayer(String n){
  for (  bammerbom.ultimatecore.spongeapi.api.UPlayer pl : uplayers) {
    if (pl.name.equals(n)) {
      return pl;
    }
  }
  bammerbom.ultimatecore.spongeapi.api.UPlayer pl=new bammerbom.ultimatecore.spongeapi.api.UPlayer(r.searchOfflinePlayer(n));
  uplayers.add(pl);
  return pl;
}","public static bammerbom.ultimatecore.spongeapi.api.UPlayer getPlayer(String n){
  for (  bammerbom.ultimatecore.spongeapi.api.UPlayer pl : uplayers) {
    if (pl.name == null) {
      continue;
    }
    if (pl.name.equals(n)) {
      return pl;
    }
  }
  bammerbom.ultimatecore.spongeapi.api.UPlayer pl=new bammerbom.ultimatecore.spongeapi.api.UPlayer(r.searchOfflinePlayer(n));
  uplayers.add(pl);
  return pl;
}",0.9374201787994892
141567,"/** 
 * Deposit an amount to a player - DO NOT USE NEGATIVE AMOUNTS IMPLEMENTATION SPECIFIC - if an economy plugin does not support this the global balance will be returned.
 * @param player    to deposit to
 * @param worldName name of the world
 * @param amount    Amount to deposit
 * @return Detailed response of transaction
 */
@Override public EconomyResponse depositPlayer(OfflinePlayer player,String worldName,double amount){
  return depositPlayer(UuidUtil.requestUuid(player).toString(),amount);
}","/** 
 * Deposit an amount to a player - DO NOT USE NEGATIVE AMOUNTS IMPLEMENTATION SPECIFIC - if an economy plugin does not support this the global balance will be returned.
 * @param player    to deposit to
 * @param worldName name of the world
 * @param amount    Amount to deposit
 * @return Detailed response of transaction
 */
@Override public EconomyResponse depositPlayer(OfflinePlayer player,String worldName,double amount){
  return depositPlayer(player.getUniqueId().toString(),amount);
}",0.9661354581673308
141568,"/** 
 * Withdraw an amount from a player on a given world - DO NOT USE NEGATIVE AMOUNTS IMPLEMENTATION SPECIFIC - if an economy plugin does not support this the global balance will be returned.
 * @param player    to withdraw from
 * @param worldName - name of the world
 * @param amount    Amount to withdraw
 * @return Detailed response of transaction
 */
@Override public EconomyResponse withdrawPlayer(OfflinePlayer player,String worldName,double amount){
  return withdrawPlayer(UuidUtil.requestUuid(player).toString(),amount);
}","/** 
 * Withdraw an amount from a player on a given world - DO NOT USE NEGATIVE AMOUNTS IMPLEMENTATION SPECIFIC - if an economy plugin does not support this the global balance will be returned.
 * @param player    to withdraw from
 * @param worldName - name of the world
 * @param amount    Amount to withdraw
 * @return Detailed response of transaction
 */
@Override public EconomyResponse withdrawPlayer(OfflinePlayer player,String worldName,double amount){
  return withdrawPlayer(player.getUniqueId().toString(),amount);
}",0.9679245283018868
141569,"/** 
 * Attempts to create a player account for the given player on the specified world IMPLEMENTATION SPECIFIC - if an economy plugin does not support this the global balance will be returned.
 * @param player    OfflinePlayer
 * @param worldName String name of the world
 * @return if the account creation was successful
 */
@Override public boolean createPlayerAccount(OfflinePlayer player,String worldName){
  return createPlayerAccount(UuidUtil.requestUuid(player).toString());
}","/** 
 * Attempts to create a player account for the given player on the specified world IMPLEMENTATION SPECIFIC - if an economy plugin does not support this the global balance will be returned.
 * @param player    OfflinePlayer
 * @param worldName String name of the world
 * @return if the account creation was successful
 */
@Override public boolean createPlayerAccount(OfflinePlayer player,String worldName){
  return createPlayerAccount(player.getUniqueId().toString());
}",0.9645833333333332
141570,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String message=r.getFinalArg(args,0);
  message=format.replace(""String_Node_Str"",message);
  for (  Player pl : r.getOnlinePlayers()) {
    pl.sendMessage(ChatColor.translateAlternateColorCodes('&',message.replace(""String_Node_Str"",r.positive + ""String_Node_Str"").replace(""String_Node_Str"",r.neutral + ""String_Node_Str"").replace(""String_Node_Str"",r.negative + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
    Bukkit.getConsoleSender().sendMessage(ChatColor.translateAlternateColorCodes('&',message).replace(""String_Node_Str"",r.positive + ""String_Node_Str"").replace(""String_Node_Str"",r.neutral + ""String_Node_Str"").replace(""String_Node_Str"",r.negative + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String message=r.getFinalArg(args,0);
  message=format.replace(""String_Node_Str"",message);
  Bukkit.broadcastMessage(ChatColor.translateAlternateColorCodes('&',message).replace(""String_Node_Str"",r.positive + ""String_Node_Str"").replace(""String_Node_Str"",r.neutral + ""String_Node_Str"").replace(""String_Node_Str"",r.negative + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
}",0.7653701380175659
141571,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"") || label.equalsIgnoreCase(""String_Node_Str"")) {
    if (!r.checkArgs(args,0)) {
      if (!r.isPlayer(cs)) {
        return;
      }
      Player p=(Player)cs;
      p.setGameMode(GameMode.SURVIVAL);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
    }
 else {
      if (!r.perm(cs,""String_Node_Str"",false,true)) {
        return;
      }
      Player t=r.searchPlayer(args[0]);
      if (t == null) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
        return;
      }
      t.setGameMode(GameMode.SURVIVAL);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",t.getName());
      r.sendMes(t,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",cs.getName());
    }
    return;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"") || label.equalsIgnoreCase(""String_Node_Str"")) {
    if (!r.checkArgs(args,0)) {
      if (!r.isPlayer(cs)) {
        return;
      }
      Player p=(Player)cs;
      p.setGameMode(GameMode.CREATIVE);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
    }
 else {
      if (!r.perm(cs,""String_Node_Str"",false,true)) {
        return;
      }
      Player t=r.searchPlayer(args[0]);
      if (t == null) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
        return;
      }
      t.setGameMode(GameMode.CREATIVE);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",t.getName());
      r.sendMes(t,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",cs.getName());
    }
    return;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"") || label.equalsIgnoreCase(""String_Node_Str"")) {
    if (!r.checkArgs(args,0)) {
      if (!r.isPlayer(cs)) {
        return;
      }
      Player p=(Player)cs;
      p.setGameMode(GameMode.ADVENTURE);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
    }
 else {
      if (!r.perm(cs,""String_Node_Str"",false,true)) {
        return;
      }
      Player t=r.searchPlayer(args[0]);
      if (t == null) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
        return;
      }
      t.setGameMode(GameMode.ADVENTURE);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",t.getName());
      r.sendMes(t,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",cs.getName());
    }
    return;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"") || label.equalsIgnoreCase(""String_Node_Str"")) {
    if (!r.checkArgs(args,0)) {
      if (!r.isPlayer(cs)) {
        return;
      }
      Player p=(Player)cs;
      p.setGameMode(GameMode.SPECTATOR);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
    }
 else {
      if (!r.perm(cs,""String_Node_Str"",false,true)) {
        return;
      }
      Player t=r.searchPlayer(args[0]);
      if (t == null) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
        return;
      }
      t.setGameMode(GameMode.SPECTATOR);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",t.getName());
      r.sendMes(t,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",cs.getName());
    }
    return;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"") || label.equalsIgnoreCase(""String_Node_Str"")) {
    GameMode mode;
    if (!r.checkArgs(args,0)) {
      r.sendMes(cs,""String_Node_Str"");
      return;
    }
switch (args[0]) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
      mode=GameMode.SURVIVAL;
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
  mode=GameMode.CREATIVE;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
mode=GameMode.ADVENTURE;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
mode=GameMode.SPECTATOR;
break;
default :
r.sendMes(cs,""String_Node_Str"");
return;
}
if (r.checkArgs(args,1)) {
Player t=r.searchPlayer(args[1]);
if (t == null) {
r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
return;
}
t.setGameMode(mode);
r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str"" + StringUtil.firstUpperCase(mode.toString().toLowerCase())),""String_Node_Str"",t.getName());
r.sendMes(t,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str"" + StringUtil.firstUpperCase(mode.toString().toLowerCase())),""String_Node_Str"",cs.getName());
}
 else {
if (!r.isPlayer(cs)) {
return;
}
Player p=(Player)cs;
p.setGameMode(mode);
r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str"" + StringUtil.firstUpperCase(mode.toString().toLowerCase())));
}
}
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"") || label.equalsIgnoreCase(""String_Node_Str"")) {
    if (!r.checkArgs(args,0)) {
      if (!r.isPlayer(cs)) {
        return;
      }
      Player p=(Player)cs;
      p.setGameMode(GameMode.SURVIVAL);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
    }
 else {
      if (!r.perm(cs,""String_Node_Str"",false,true)) {
        return;
      }
      Player t=r.searchPlayer(args[0]);
      if (t == null) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
        return;
      }
      t.setGameMode(GameMode.SURVIVAL);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",t.getName());
      r.sendMes(t,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",cs.getName());
    }
    return;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"") || label.equalsIgnoreCase(""String_Node_Str"")) {
    if (!r.checkArgs(args,0)) {
      if (!r.isPlayer(cs)) {
        return;
      }
      Player p=(Player)cs;
      p.setGameMode(GameMode.CREATIVE);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
    }
 else {
      if (!r.perm(cs,""String_Node_Str"",false,true)) {
        return;
      }
      Player t=r.searchPlayer(args[0]);
      if (t == null) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
        return;
      }
      t.setGameMode(GameMode.CREATIVE);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",t.getName());
      r.sendMes(t,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",cs.getName());
    }
    return;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"") || label.equalsIgnoreCase(""String_Node_Str"")) {
    if (!r.checkArgs(args,0)) {
      if (!r.isPlayer(cs)) {
        return;
      }
      Player p=(Player)cs;
      p.setGameMode(GameMode.ADVENTURE);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
    }
 else {
      if (!r.perm(cs,""String_Node_Str"",false,true)) {
        return;
      }
      Player t=r.searchPlayer(args[0]);
      if (t == null) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
        return;
      }
      t.setGameMode(GameMode.ADVENTURE);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",t.getName());
      r.sendMes(t,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",cs.getName());
    }
    return;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"") || label.equalsIgnoreCase(""String_Node_Str"")) {
    if (!r.checkArgs(args,0)) {
      if (!r.isPlayer(cs)) {
        return;
      }
      Player p=(Player)cs;
      p.setGameMode(GameMode.SPECTATOR);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
    }
 else {
      if (!r.perm(cs,""String_Node_Str"",false,true)) {
        return;
      }
      Player t=r.searchPlayer(args[0]);
      if (t == null) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
        return;
      }
      t.setGameMode(GameMode.SPECTATOR);
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",t.getName());
      r.sendMes(t,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",cs.getName());
    }
    return;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"") || label.equalsIgnoreCase(""String_Node_Str"")) {
    GameMode mode;
    if (!r.checkArgs(args,0)) {
      r.sendMes(cs,""String_Node_Str"");
      return;
    }
switch (args[0]) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
      mode=GameMode.SURVIVAL;
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
  mode=GameMode.CREATIVE;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
mode=GameMode.ADVENTURE;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
mode=GameMode.SPECTATOR;
break;
default :
r.sendMes(cs,""String_Node_Str"");
return;
}
if (r.checkArgs(args,1)) {
if (!r.perm(cs,""String_Node_Str"",false,true)) {
return;
}
Player t=r.searchPlayer(args[1]);
if (t == null) {
r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
return;
}
t.setGameMode(mode);
r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str"" + StringUtil.firstUpperCase(mode.toString().toLowerCase())),""String_Node_Str"",t.getName());
r.sendMes(t,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str"" + StringUtil.firstUpperCase(mode.toString().toLowerCase())),""String_Node_Str"",cs.getName());
}
 else {
if (!r.isPlayer(cs)) {
return;
}
Player p=(Player)cs;
p.setGameMode(mode);
r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str"" + StringUtil.firstUpperCase(mode.toString().toLowerCase())));
}
}
}",0.9943928847641144
141572,"@EventHandler(priority=EventPriority.LOW) public void onInventoryClose(InventoryCloseEvent e){
  try {
    if (UC.getPlayer((OfflinePlayer)e.getPlayer()).isInCommandEnchantingtable()) {
      UC.getPlayer((OfflinePlayer)e.getPlayer()).setInCommandEnchantingtable(false);
    }
    if (UC.getPlayer(e.getPlayer().getUniqueId()).isInOfflineInventory()) {
      UC.getPlayer(e.getPlayer().getUniqueId()).setInOfflineInventory(false);
    }
    if (UC.getPlayer(e.getPlayer().getUniqueId()).isInOnlineInventory()) {
      UC.getPlayer(e.getPlayer().getUniqueId()).setInOnlineInventory(false);
    }
    if (UC.getPlayer((OfflinePlayer)e.getPlayer()).isInRecipeView()) {
      UC.getPlayer((OfflinePlayer)e.getPlayer()).isInRecipeView();
      e.getInventory().clear();
    }
    if (UC.getPlayer(e.getPlayer().getUniqueId()).isInTeleportMenu()) {
      UC.getPlayer(e.getPlayer().getUniqueId()).setInTeleportMenu(false);
    }
  }
 catch (  Exception ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
}","@EventHandler(priority=EventPriority.LOW) public void onInventoryClose(InventoryCloseEvent e){
  try {
    if (UC.getPlayer((OfflinePlayer)e.getPlayer()).isInCommandEnchantingtable()) {
      UC.getPlayer((OfflinePlayer)e.getPlayer()).setInCommandEnchantingtable(false);
    }
    if (UC.getPlayer(e.getPlayer().getUniqueId()).isInOfflineInventory()) {
      UC.getPlayer(e.getPlayer().getUniqueId()).setInOfflineInventory(false);
    }
    if (UC.getPlayer(e.getPlayer().getUniqueId()).isInOnlineInventory()) {
      UC.getPlayer(e.getPlayer().getUniqueId()).setInOnlineInventory(false);
    }
    if (UC.getPlayer((OfflinePlayer)e.getPlayer()).isInRecipeView()) {
      UC.getPlayer((OfflinePlayer)e.getPlayer()).setInRecipeView(false);
      e.getInventory().clear();
    }
    if (UC.getPlayer(e.getPlayer().getUniqueId()).isInTeleportMenu()) {
      UC.getPlayer(e.getPlayer().getUniqueId()).setInTeleportMenu(false);
    }
  }
 catch (  Exception ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
}",0.9950199203187252
141573,"public static Location convertStringToLocation(String s){
  if (s == null) {
    return null;
  }
  if (s.contains(""String_Node_Str"")) {
    String[] split=s.split(""String_Node_Str"");
    return new Location(Bukkit.getWorld(split[0]),Double.parseDouble(split[1]),Double.parseDouble(split[2]),Double.parseDouble(split[3]),Float.parseFloat(split[4]),Float.parseFloat(split[5]));
  }
  String[] split=s.split(""String_Node_Str"");
  return new Location(Bukkit.getWorld(split[0]),Double.parseDouble(split[1]),Double.parseDouble(split[2]),Double.parseDouble(split[3]),Float.parseFloat(split[4]),Float.parseFloat(split[5]));
}","public static Location convertStringToLocation(String s){
  if (s == null) {
    return null;
  }
  if (s.contains(""String_Node_Str"")) {
    String[] split=s.split(""String_Node_Str"");
    return new Location(Bukkit.getWorld(split[0]),Double.parseDouble(split[1]),Double.parseDouble(split[2]),Double.parseDouble(split[3]),Float.parseFloat(split[5]),Float.parseFloat(split[4]));
  }
  String[] split=s.split(""String_Node_Str"");
  return new Location(Bukkit.getWorld(split[0]),Double.parseDouble(split[1]),Double.parseDouble(split[2]),Double.parseDouble(split[3]),Float.parseFloat(split[5]),Float.parseFloat(split[4]));
}",0.912621359223301
141574,"@Override public List<String> onTabComplete(CommandSender sender,Command cmd,String label,String[] args){
  if (Overrider.checkOverridden(sender,cmd,label,args)) {
    return null;
  }
  List<String> rtrn=null;
  if (label.startsWith(""String_Node_Str"")) {
    label=label.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  for (  UltimateCommand cmdr : cmds) {
    if (cmdr.getName().equals(label) || cmdr.getAliases().contains(label)) {
      try {
        rtrn=cmdr.onTabComplete(sender,cmd,label,args,args[args.length - 1],args.length - 1);
      }
 catch (      Exception ex) {
        ErrorLogger.log(ex,""String_Node_Str"" + label);
      }
      break;
    }
  }
  if (rtrn == null) {
    rtrn=new ArrayList<>();
    for (    Player p : r.getOnlinePlayers()) {
      rtrn.add(p.getName());
    }
  }
  if (!StringUtil.nullOrEmpty(args[args.length - 1])) {
    List<String> remv=new ArrayList<>();
    for (    String s : rtrn) {
      if (!StringUtils.startsWithIgnoreCase(s,args[args.length - 1])) {
        remv.add(s);
      }
    }
    rtrn.removeAll(remv);
  }
  return rtrn;
}","@Override public List<String> onTabComplete(CommandSender sender,Command cmd,String label,String[] args){
  if (Overrider.checkOverridden(sender,cmd,label,args)) {
    return null;
  }
  List<String> rtrn=null;
  if (label.startsWith(""String_Node_Str"")) {
    label=label.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  for (  UltimateCommand cmdr : cmds) {
    if (cmdr.getName().equals(label) || cmdr.getAliases().contains(label)) {
      try {
        rtrn=cmdr.onTabComplete(sender,cmd,label,args,args[args.length - 1],args.length - 1);
      }
 catch (      Exception ex) {
        ErrorLogger.log(ex,""String_Node_Str"" + label);
      }
      break;
    }
  }
  if (rtrn == null) {
    rtrn=new ArrayList<>();
    for (    Player p : r.getOnlinePlayers()) {
      rtrn.add(p.getName());
    }
  }
  ArrayList<String> rtrn2=new ArrayList<>();
  rtrn2.addAll(rtrn);
  rtrn=rtrn2;
  if (!StringUtil.nullOrEmpty(args[args.length - 1])) {
    List<String> remv=new ArrayList<>();
    for (    String s : rtrn) {
      if (!StringUtils.startsWithIgnoreCase(s,args[args.length - 1])) {
        remv.add(s);
      }
    }
    rtrn.removeAll(remv);
  }
  return rtrn;
}",0.964269960299956
141575,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",true,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  StringBuilder builder=new StringBuilder(""String_Node_Str"");
  Boolean a=true;
  Integer range=250;
  if (r.checkArgs(args,0)) {
    if (!r.isInt(args[0])) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    range=r.normalize(Integer.parseInt(args[0]),1,5000);
  }
  for (  Entity e : r.getNearbyEntities(p,range.doubleValue())) {
    if (e instanceof Player) {
      Player t=(Player)e;
      if (!a) {
        builder.append(""String_Node_Str"");
      }
      builder.append(t.getName());
      builder.append(""String_Node_Str"" + Double.valueOf(t.getLocation().distance(p.getLocation())).intValue() + ""String_Node_Str"");
      a=false;
    }
  }
  if (a) {
    builder.append(r.mes(""String_Node_Str""));
  }
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",range,""String_Node_Str"",builder.toString());
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",true,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  StringBuilder builder=new StringBuilder(""String_Node_Str"");
  Boolean a=true;
  Integer range=250;
  if (r.checkArgs(args,0)) {
    if (!r.isInt(args[0])) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    range=r.normalize(Integer.parseInt(args[0]),1,5000);
  }
  for (  Entity e : r.getNearbyPlayers(p,range.doubleValue())) {
    Player t=(Player)e;
    if (!a) {
      builder.append(""String_Node_Str"");
    }
    builder.append(t.getName());
    builder.append(""String_Node_Str"" + Double.valueOf(t.getLocation().distance(p.getLocation())).intValue() + ""String_Node_Str"");
    a=false;
  }
  if (a) {
    builder.append(r.mes(""String_Node_Str""));
  }
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",range,""String_Node_Str"",builder.toString());
}",0.804093567251462
141576,"@SuppressWarnings(""String_Node_Str"") @Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  if (args.length < 1) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Block b=LocationUtil.getAbsoluteTarget(p).getBlock();
  if ((b == null) || b.getState() == null || (!(b.getState() instanceof Sign))) {
    if (b != null && b.getState() != null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",ItemUtil.getName(new ItemStack(b.getType(),b.getData())));
    }
 else {
      r.sendMes(cs,""String_Node_Str"");
    }
    return;
  }
  Sign s=(Sign)b.getState();
  int lineNumber;
  try {
    lineNumber=Integer.parseInt(args[0]);
    lineNumber--;
  }
 catch (  NumberFormatException e) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if ((lineNumber < 0) || (lineNumber > 3)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (args.length < 2) {
    s.setLine(lineNumber,""String_Node_Str"");
    s.update();
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",lineNumber + 1);
    return;
  }
  String text=r.getFinalArg(args,1);
  if (r.perm(p,""String_Node_Str"",false,false)) {
    s.setLine(0,ChatColor.translateAlternateColorCodes('&',s.getLine(0)));
    s.setLine(1,ChatColor.translateAlternateColorCodes('&',s.getLine(1)));
    s.setLine(2,ChatColor.translateAlternateColorCodes('&',s.getLine(2)));
    s.setLine(3,ChatColor.translateAlternateColorCodes('&',s.getLine(3)));
    text=ChatColor.translateAlternateColorCodes('&',text);
  }
  s.setLine(lineNumber,text);
  s.update();
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",lineNumber + 1,""String_Node_Str"",r.getFinalArg(args,1));
  return;
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Block b=LocationUtil.getAbsoluteTarget(p).getBlock();
  if ((b == null) || b.getState() == null || (!(b.getState() instanceof Sign))) {
    if (b != null && b.getState() != null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",ItemUtil.getName(new ItemStack(b.getType(),b.getData())));
    }
 else {
      r.sendMes(cs,""String_Node_Str"");
    }
    return;
  }
  Sign s=(Sign)b.getState();
  int lineNumber;
  try {
    lineNumber=Integer.parseInt(args[0]);
    lineNumber--;
  }
 catch (  NumberFormatException e) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if ((lineNumber < 0) || (lineNumber > 3)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (args.length < 2) {
    s.setLine(lineNumber,""String_Node_Str"");
    s.update();
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",lineNumber + 1);
    return;
  }
  String text=r.getFinalArg(args,1);
  if (r.perm(p,""String_Node_Str"",false,false)) {
    s.setLine(0,ChatColor.translateAlternateColorCodes('&',s.getLine(0)));
    s.setLine(1,ChatColor.translateAlternateColorCodes('&',s.getLine(1)));
    s.setLine(2,ChatColor.translateAlternateColorCodes('&',s.getLine(2)));
    s.setLine(3,ChatColor.translateAlternateColorCodes('&',s.getLine(3)));
    text=ChatColor.translateAlternateColorCodes('&',text);
  }
  s.setLine(lineNumber,text);
  s.update();
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",lineNumber + 1,""String_Node_Str"",r.getFinalArg(args,1));
  return;
}",0.9907795473595976
141577,"public static void startWorldLoading(){
  Config conf=new Config(UltimateFileLoader.DFworlds);
  for (  String str : conf.getKeys(false)) {
    try {
      WorldCreator w=new WorldCreator(str);
      w.environment(Environment.valueOf(conf.getString(str + ""String_Node_Str"")));
      Bukkit.createWorld(w);
    }
 catch (    Exception ex) {
      r.log(""String_Node_Str"" + str);
      ErrorLogger.log(ex,""String_Node_Str"" + str);
    }
  }
}","public static void startWorldLoading(){
  Config conf=new Config(UltimateFileLoader.DFworlds);
  for (  String str : conf.getKeys(false)) {
    try {
      WorldCreator w=new WorldCreator(str);
      if (conf.contains(str + ""String_Node_Str"")) {
        w.environment(Environment.valueOf(conf.getString(str + ""String_Node_Str"")));
        Bukkit.createWorld(w);
      }
    }
 catch (    Exception ex) {
      r.log(""String_Node_Str"" + str);
      ErrorLogger.log(ex,""String_Node_Str"" + str);
    }
  }
}",0.9322033898305084
141578,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (!r.isFloat(args[0])) {
    if (r.isFloat(args[1])) {
      run(cs,label,new String[]{args[1],args[0]});
      return;
    }
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Player p=(Player)cs;
  Float d=Float.parseFloat(args[0]);
  if (d > 10 || d < 0) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (r.checkArgs(args,1) == false) {
    p.setFlySpeed(getSpeed(d,true));
    p.setWalkSpeed(getSpeed(d,false));
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
  }
 else {
    Player t=r.searchPlayer(args[1]);
    if (t == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
      return;
    }
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    t.setFlySpeed(getSpeed(d,true));
    t.setWalkSpeed(getSpeed(d,false));
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",args[0]);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (!r.isFloat(args[0])) {
    if (r.checkArgs(args,1) && r.isFloat(args[1])) {
      run(cs,label,new String[]{args[1],args[0]});
      return;
    }
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Player p=(Player)cs;
  Float d=Float.parseFloat(args[0]);
  if (d > 10 || d < 0) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (r.checkArgs(args,1) == false) {
    p.setFlySpeed(getSpeed(d,true));
    p.setWalkSpeed(getSpeed(d,false));
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
  }
 else {
    Player t=r.searchPlayer(args[1]);
    if (t == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
      return;
    }
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    t.setFlySpeed(getSpeed(d,true));
    t.setWalkSpeed(getSpeed(d,false));
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",args[0]);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
  }
}",0.9907444668008047
141579,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Player p=(Player)cs;
  Enchantment ench=EnchantmentDatabase.getByName(args[0]);
  if (ench == null) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  ItemStack stack=p.getItemInHand();
  if (stack == null || stack.getType() == null || stack.getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String name=ench.getName().replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
  Integer level=1;
  if (r.checkArgs(args,1) == true && r.isInt(args[1])) {
    level=Integer.parseInt(args[1]);
  }
  if (level < 0) {
    level=0;
  }
  if (level == 0) {
    stack.removeEnchantment(ench);
  }
 else {
    MetaItemStack stack2=new MetaItemStack(stack);
    stack2.addEnchantment(r.perm(cs,""String_Node_Str"",false,false),ench,level);
    p.setItemInHand(stack2.getItemStack());
  }
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name,""String_Node_Str"",level,""String_Node_Str"",ItemUtil.getName(stack).toLowerCase());
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Player p=(Player)cs;
  Enchantment ench=EnchantmentDatabase.getByName(args[0]);
  if (ench == null) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  ItemStack stack=p.getItemInHand();
  if (stack == null || stack.getType() == null || stack.getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String name=ench.getName().replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
  Integer level=1;
  if (r.checkArgs(args,1) == true && r.isInt(args[1])) {
    level=Integer.parseInt(args[1]);
  }
  if (level < 0) {
    level=0;
  }
  if (level == 0) {
    stack.removeEnchantment(ench);
  }
 else {
    MetaItemStack stack2=new MetaItemStack(stack);
    stack2.addEnchantment(cs,r.perm(cs,""String_Node_Str"",false,false),ench,level);
    p.setItemInHand(stack2.getItemStack());
  }
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name,""String_Node_Str"",level,""String_Node_Str"",ItemUtil.getName(stack).toLowerCase());
}",0.998809051210798
141580,"private void parseEnchantmentStrings(boolean allowUnsafe,String[] split) throws Exception {
  Enchantment enchantment=EnchantmentDatabase.getByName(split[0]);
  if ((enchantment == null)) {
    return;
  }
  int level=-1;
  if (split.length > 1) {
    try {
      level=Integer.parseInt(split[1]);
    }
 catch (    NumberFormatException ex) {
      level=-1;
    }
  }
  if ((level < 0) || ((!allowUnsafe) && (level > enchantment.getMaxLevel()))) {
    level=enchantment.getMaxLevel();
  }
  addEnchantment(allowUnsafe,enchantment,level);
}","private void parseEnchantmentStrings(CommandSender cs,boolean allowUnsafe,String[] split) throws Exception {
  Enchantment enchantment=EnchantmentDatabase.getByName(split[0]);
  if ((enchantment == null)) {
    return;
  }
  int level=-1;
  if (split.length > 1) {
    try {
      level=Integer.parseInt(split[1]);
    }
 catch (    NumberFormatException ex) {
      level=-1;
    }
  }
  if ((level < 0) || ((!allowUnsafe) && (level > enchantment.getMaxLevel()))) {
    level=enchantment.getMaxLevel();
  }
  addEnchantment(cs,allowUnsafe,enchantment,level);
}",0.9818511796733213
141581,"public void addEnchantment(boolean allowUnsafe,Enchantment enchantment,int level){
  if (enchantment == null) {
    return;
  }
  try {
    if (this.stack.getType().equals(Material.ENCHANTED_BOOK)) {
      EnchantmentStorageMeta meta=(EnchantmentStorageMeta)this.stack.getItemMeta();
      if (level == 0) {
        meta.removeStoredEnchant(enchantment);
      }
 else {
        meta.addStoredEnchant(enchantment,level,allowUnsafe);
      }
      this.stack.setItemMeta(meta);
    }
 else     if (level == 0) {
      this.stack.removeEnchantment(enchantment);
    }
 else     if (allowUnsafe) {
      this.stack.addUnsafeEnchantment(enchantment,level);
    }
 else {
      this.stack.addEnchantment(enchantment,level);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","public void addEnchantment(CommandSender cs,boolean allowUnsafe,Enchantment enchantment,int level){
  if (enchantment == null) {
    return;
  }
  if (this.stack.getType().equals(Material.ENCHANTED_BOOK)) {
    EnchantmentStorageMeta meta=(EnchantmentStorageMeta)this.stack.getItemMeta();
    if (level == 0) {
      meta.removeStoredEnchant(enchantment);
    }
 else {
      meta.addStoredEnchant(enchantment,level,allowUnsafe);
    }
    this.stack.setItemMeta(meta);
  }
 else   if (level == 0) {
    this.stack.removeEnchantment(enchantment);
  }
 else   if (allowUnsafe) {
    this.stack.addUnsafeEnchantment(enchantment,level);
  }
 else {
    try {
      this.stack.addEnchantment(enchantment,level);
    }
 catch (    IllegalArgumentException e) {
      if (cs != null) {
        r.sendMes(cs,""String_Node_Str"");
      }
    }
  }
}",0.8277982779827798
141582,"public Enchantment getEnchantment(Player user,String name) throws Exception {
  Enchantment enchantment=EnchantmentDatabase.getByName(name);
  return enchantment;
}","public Enchantment getEnchantment(String name) throws Exception {
  Enchantment enchantment=EnchantmentDatabase.getByName(name);
  return enchantment;
}",0.9620253164556962
141583,"@SuppressWarnings({""String_Node_Str""}) public void addStringMeta(CommandSender cs,boolean allowUnsafe,String string){
  String[] split=this.splitPattern.split(string,2);
  if (split.length < 1) {
    return;
  }
  if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    String displayName=ChatColor.translateAlternateColorCodes('&',split[1].replace('_',' '));
    ItemMeta meta=this.stack.getItemMeta();
    meta.setDisplayName(displayName);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=r.normalize(max,0.0,2147483647.0);
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_MAX_HEALTH).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=r.normalize(max,0.0,Double.MAX_VALUE);
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_ATTACK_DAMAGE).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=max / 50;
      max=r.normalize(max,0.0,Double.MAX_VALUE);
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_MOVEMENT_SPEED).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=r.normalize(max,0.0,100.0);
      max=max / 100.0;
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_KNOCKBACK_RESISTANCE).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && ((split[0].equalsIgnoreCase(""String_Node_Str"")) || (split[0].equalsIgnoreCase(""String_Node_Str"")))) {
    List<String> lore=new ArrayList<>();
    for (    String line : split[1].split(""String_Node_Str"")) {
      lore.add(ChatColor.translateAlternateColorCodes('&',line.replace('_',' ')));
    }
    ItemMeta meta=this.stack.getItemMeta();
    meta.setLore(lore);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && ((split[0].equalsIgnoreCase(""String_Node_Str"")) || (split[0].equalsIgnoreCase(""String_Node_Str""))) && (this.stack.getType() == Material.SKULL_ITEM)) {
    if (this.stack.getDurability() == 3) {
      String owner=split[1];
      SkullMeta meta=(SkullMeta)this.stack.getItemMeta();
      meta.setOwner(owner);
      this.stack.setItemMeta(meta);
    }
 else {
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"")) && (this.stack.getType() == Material.WRITTEN_BOOK)) {
    String author=ChatColor.translateAlternateColorCodes('&',split[1]);
    BookMeta meta=(BookMeta)this.stack.getItemMeta();
    meta.setAuthor(author);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"")) && (this.stack.getType() == Material.WRITTEN_BOOK)) {
    String title=ChatColor.translateAlternateColorCodes('&',split[1].replace('_',' '));
    BookMeta meta=(BookMeta)this.stack.getItemMeta();
    meta.setTitle(title);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"")) && (this.stack.getType() == Material.FIREWORK)) {
    int power=r.isInt(split[1]) ? Integer.parseInt(split[1]) : 0;
    FireworkMeta meta=(FireworkMeta)this.stack.getItemMeta();
    meta.setPower(power > 3 ? 4 : power);
    this.stack.setItemMeta(meta);
  }
 else   if (this.stack.getType() == Material.FIREWORK) {
    try {
      addFireworkMeta(false,string);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (this.stack.getType() == Material.POTION) {
    try {
      addPotionMeta(false,string);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if ((split.length > 1) && ((split[0].equalsIgnoreCase(""String_Node_Str"")) || (split[0].equalsIgnoreCase(""String_Node_Str""))) && ((this.stack.getType() == Material.LEATHER_BOOTS) || (this.stack.getType() == Material.LEATHER_CHESTPLATE) || (this.stack.getType() == Material.LEATHER_HELMET)|| (this.stack.getType() == Material.LEATHER_LEGGINGS))) {
    String[] color=split[1].split(""String_Node_Str"");
    if (color.length == 3) {
      int red=r.isInt(color[0]) ? Integer.parseInt(color[0]) : 0;
      int green=r.isInt(color[1]) ? Integer.parseInt(color[1]) : 0;
      int blue=r.isInt(color[2]) ? Integer.parseInt(color[2]) : 0;
      LeatherArmorMeta meta=(LeatherArmorMeta)this.stack.getItemMeta();
      meta.setColor(Color.fromRGB(red,green,blue));
      this.stack.setItemMeta(meta);
    }
 else {
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    ItemUtil.addGlow(stack);
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    try {
      ItemMeta meta=stack.getItemMeta();
      meta.spigot().setUnbreakable(true);
      stack.setItemMeta(meta);
    }
 catch (    Exception ex) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
  }
 else   if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    List<ItemStack> c=new ArrayList<>();
    if (split[1].contains(""String_Node_Str"")) {
      for (      String s : split[1].split(""String_Node_Str"")) {
        ItemStack i=ItemUtil.searchItem(s);
        if (i == null || i.getType().equals(Material.AIR)) {
          if (cs != null) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",s);
          }
          return;
        }
        c.add(i);
      }
    }
 else {
      ItemStack i=ItemUtil.searchItem(split[1]);
      if (i == null || i.getType().equals(Material.AIR)) {
        if (cs != null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",split[1]);
        }
        return;
      }
      c.add(i);
    }
    StringBuilder s=new StringBuilder();
    for (    ItemStack i : c) {
      if (!s.toString().isEmpty()) {
        s.append(""String_Node_Str"");
      }
      s.append(""String_Node_Str"" + ItemUtil.getID(i.getType()) + ""String_Node_Str"");
    }
    try {
      ItemMeta meta=stack.getItemMeta();
      Map<String,Object> m=(Map<String,Object>)ReflectionUtil.execute(""String_Node_Str"",meta).fetch();
      ReflectionObject nc=ReflectionUtil.executeStatic(""String_Node_Str"",ReflectionStatic.fromNMS(""String_Node_Str""),""String_Node_Str"" + s.toString() + ""String_Node_Str"");
      m.put(""String_Node_Str"",ReflectionUtil.execute(""String_Node_Str"",nc.fetch(),""String_Node_Str"").fetch());
      ReflectionObject ro=new ReflectionObject(meta);
      ro.set(""String_Node_Str"",m);
      stack.setItemMeta(ro.fetchAs(ItemMeta.class));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    List<ItemStack> c=new ArrayList<>();
    if (split[1].contains(""String_Node_Str"")) {
      for (      String s : split[1].split(""String_Node_Str"")) {
        ItemStack i=ItemUtil.searchItem(s);
        if (i == null || i.getType().equals(Material.AIR)) {
          if (cs != null) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",s);
          }
          return;
        }
        c.add(i);
      }
    }
 else {
      ItemStack i=ItemUtil.searchItem(split[1]);
      if (i == null || i.getType().equals(Material.AIR)) {
        if (cs != null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",split[1]);
        }
        return;
      }
      c.add(i);
    }
    StringBuilder s=new StringBuilder();
    for (    ItemStack i : c) {
      if (!s.toString().isEmpty()) {
        s.append(""String_Node_Str"");
      }
      s.append(""String_Node_Str"" + ItemUtil.getID(i.getType()) + ""String_Node_Str"");
    }
    try {
      ItemMeta meta=stack.getItemMeta();
      Map<String,Object> m=(Map<String,Object>)ReflectionUtil.execute(""String_Node_Str"",meta).fetch();
      ReflectionObject nc=ReflectionUtil.executeStatic(""String_Node_Str"",ReflectionStatic.fromNMS(""String_Node_Str""),""String_Node_Str"" + s.toString() + ""String_Node_Str"");
      m.put(""String_Node_Str"",ReflectionUtil.execute(""String_Node_Str"",nc.fetch(),""String_Node_Str"").fetch());
      ReflectionObject ro=new ReflectionObject(meta);
      ro.set(""String_Node_Str"",m);
      stack.setItemMeta(ro.fetchAs(ItemMeta.class));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str"")) || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Integer i=0;
    if (split[1].contains(""String_Node_Str"")) {
      for (      String s : split[1].split(""String_Node_Str"")) {
        if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=1;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=2;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=4;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=8;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=16;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=32;
        }
 else         if (r.isInt(s)) {
          i+=Integer.parseInt(s);
        }
      }
    }
 else {
      if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=1;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=2;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=4;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=8;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=16;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=32;
      }
 else       if (r.isInt(split[1])) {
        i+=Integer.parseInt(split[1]);
      }
    }
    try {
      ItemMeta meta=stack.getItemMeta();
      Map<String,Object> m=(Map<String,Object>)ReflectionUtil.execute(""String_Node_Str"",meta).fetch();
      ReflectionObject nc=ReflectionUtil.executeStatic(""String_Node_Str"",ReflectionStatic.fromNMS(""String_Node_Str""),""String_Node_Str"" + i + ""String_Node_Str"");
      m.put(""String_Node_Str"",ReflectionUtil.execute(""String_Node_Str"",nc.fetch(),""String_Node_Str"").fetch());
      ReflectionObject ro=new ReflectionObject(meta);
      ro.set(""String_Node_Str"",m);
      stack.setItemMeta(ro.fetchAs(ItemMeta.class));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"") && split.length > 1 && r.isInt(split[1])) {
    stack.setAmount(Integer.parseInt(split[1]));
  }
 else {
    try {
      parseEnchantmentStrings(allowUnsafe,split);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@SuppressWarnings({""String_Node_Str""}) public void addStringMeta(CommandSender cs,boolean allowUnsafe,String string){
  String[] split=this.splitPattern.split(string,2);
  if (split.length < 1) {
    return;
  }
  if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    String displayName=ChatColor.translateAlternateColorCodes('&',split[1].replace('_',' '));
    ItemMeta meta=this.stack.getItemMeta();
    meta.setDisplayName(displayName);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=r.normalize(max,0.0,2147483647.0);
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_MAX_HEALTH).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=r.normalize(max,0.0,Double.MAX_VALUE);
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_ATTACK_DAMAGE).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=max / 50;
      max=r.normalize(max,0.0,Double.MAX_VALUE);
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_MOVEMENT_SPEED).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=r.normalize(max,0.0,100.0);
      max=max / 100.0;
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_KNOCKBACK_RESISTANCE).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && ((split[0].equalsIgnoreCase(""String_Node_Str"")) || (split[0].equalsIgnoreCase(""String_Node_Str"")))) {
    List<String> lore=new ArrayList<>();
    for (    String line : split[1].split(""String_Node_Str"")) {
      lore.add(ChatColor.translateAlternateColorCodes('&',line.replace('_',' ')));
    }
    ItemMeta meta=this.stack.getItemMeta();
    meta.setLore(lore);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && ((split[0].equalsIgnoreCase(""String_Node_Str"")) || (split[0].equalsIgnoreCase(""String_Node_Str""))) && (this.stack.getType() == Material.SKULL_ITEM)) {
    if (this.stack.getDurability() == 3) {
      String owner=split[1];
      SkullMeta meta=(SkullMeta)this.stack.getItemMeta();
      meta.setOwner(owner);
      this.stack.setItemMeta(meta);
    }
 else {
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"")) && (this.stack.getType() == Material.WRITTEN_BOOK)) {
    String author=ChatColor.translateAlternateColorCodes('&',split[1]);
    BookMeta meta=(BookMeta)this.stack.getItemMeta();
    meta.setAuthor(author);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"")) && (this.stack.getType() == Material.WRITTEN_BOOK)) {
    String title=ChatColor.translateAlternateColorCodes('&',split[1].replace('_',' '));
    BookMeta meta=(BookMeta)this.stack.getItemMeta();
    meta.setTitle(title);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"")) && (this.stack.getType() == Material.FIREWORK)) {
    int power=r.isInt(split[1]) ? Integer.parseInt(split[1]) : 0;
    FireworkMeta meta=(FireworkMeta)this.stack.getItemMeta();
    meta.setPower(power > 3 ? 4 : power);
    this.stack.setItemMeta(meta);
  }
 else   if (this.stack.getType() == Material.FIREWORK) {
    try {
      addFireworkMeta(false,string);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (this.stack.getType() == Material.POTION) {
    try {
      addPotionMeta(false,string);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if ((split.length > 1) && ((split[0].equalsIgnoreCase(""String_Node_Str"")) || (split[0].equalsIgnoreCase(""String_Node_Str""))) && ((this.stack.getType() == Material.LEATHER_BOOTS) || (this.stack.getType() == Material.LEATHER_CHESTPLATE) || (this.stack.getType() == Material.LEATHER_HELMET)|| (this.stack.getType() == Material.LEATHER_LEGGINGS))) {
    String[] color=split[1].split(""String_Node_Str"");
    if (color.length == 3) {
      int red=r.isInt(color[0]) ? Integer.parseInt(color[0]) : 0;
      int green=r.isInt(color[1]) ? Integer.parseInt(color[1]) : 0;
      int blue=r.isInt(color[2]) ? Integer.parseInt(color[2]) : 0;
      LeatherArmorMeta meta=(LeatherArmorMeta)this.stack.getItemMeta();
      meta.setColor(Color.fromRGB(red,green,blue));
      this.stack.setItemMeta(meta);
    }
 else {
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    ItemUtil.addGlow(stack);
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    try {
      ItemMeta meta=stack.getItemMeta();
      meta.spigot().setUnbreakable(true);
      stack.setItemMeta(meta);
    }
 catch (    Exception ex) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
  }
 else   if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    List<ItemStack> c=new ArrayList<>();
    if (split[1].contains(""String_Node_Str"")) {
      for (      String s : split[1].split(""String_Node_Str"")) {
        ItemStack i=ItemUtil.searchItem(s);
        if (i == null || i.getType().equals(Material.AIR)) {
          if (cs != null) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",s);
          }
          return;
        }
        c.add(i);
      }
    }
 else {
      ItemStack i=ItemUtil.searchItem(split[1]);
      if (i == null || i.getType().equals(Material.AIR)) {
        if (cs != null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",split[1]);
        }
        return;
      }
      c.add(i);
    }
    StringBuilder s=new StringBuilder();
    for (    ItemStack i : c) {
      if (!s.toString().isEmpty()) {
        s.append(""String_Node_Str"");
      }
      s.append(""String_Node_Str"" + ItemUtil.getID(i.getType()) + ""String_Node_Str"");
    }
    try {
      ItemMeta meta=stack.getItemMeta();
      Map<String,Object> m=(Map<String,Object>)ReflectionUtil.execute(""String_Node_Str"",meta).fetch();
      ReflectionObject nc=ReflectionUtil.executeStatic(""String_Node_Str"",ReflectionStatic.fromNMS(""String_Node_Str""),""String_Node_Str"" + s.toString() + ""String_Node_Str"");
      m.put(""String_Node_Str"",ReflectionUtil.execute(""String_Node_Str"",nc.fetch(),""String_Node_Str"").fetch());
      ReflectionObject ro=new ReflectionObject(meta);
      ro.set(""String_Node_Str"",m);
      stack.setItemMeta(ro.fetchAs(ItemMeta.class));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    List<ItemStack> c=new ArrayList<>();
    if (split[1].contains(""String_Node_Str"")) {
      for (      String s : split[1].split(""String_Node_Str"")) {
        ItemStack i=ItemUtil.searchItem(s);
        if (i == null || i.getType().equals(Material.AIR)) {
          if (cs != null) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",s);
          }
          return;
        }
        c.add(i);
      }
    }
 else {
      ItemStack i=ItemUtil.searchItem(split[1]);
      if (i == null || i.getType().equals(Material.AIR)) {
        if (cs != null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",split[1]);
        }
        return;
      }
      c.add(i);
    }
    StringBuilder s=new StringBuilder();
    for (    ItemStack i : c) {
      if (!s.toString().isEmpty()) {
        s.append(""String_Node_Str"");
      }
      s.append(""String_Node_Str"" + ItemUtil.getID(i.getType()) + ""String_Node_Str"");
    }
    try {
      ItemMeta meta=stack.getItemMeta();
      Map<String,Object> m=(Map<String,Object>)ReflectionUtil.execute(""String_Node_Str"",meta).fetch();
      ReflectionObject nc=ReflectionUtil.executeStatic(""String_Node_Str"",ReflectionStatic.fromNMS(""String_Node_Str""),""String_Node_Str"" + s.toString() + ""String_Node_Str"");
      m.put(""String_Node_Str"",ReflectionUtil.execute(""String_Node_Str"",nc.fetch(),""String_Node_Str"").fetch());
      ReflectionObject ro=new ReflectionObject(meta);
      ro.set(""String_Node_Str"",m);
      stack.setItemMeta(ro.fetchAs(ItemMeta.class));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str"")) || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Integer i=0;
    if (split[1].contains(""String_Node_Str"")) {
      for (      String s : split[1].split(""String_Node_Str"")) {
        if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=1;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=2;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=4;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=8;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=16;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=32;
        }
 else         if (r.isInt(s)) {
          i+=Integer.parseInt(s);
        }
      }
    }
 else {
      if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=1;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=2;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=4;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=8;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=16;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=32;
      }
 else       if (r.isInt(split[1])) {
        i+=Integer.parseInt(split[1]);
      }
    }
    try {
      ItemMeta meta=stack.getItemMeta();
      Map<String,Object> m=(Map<String,Object>)ReflectionUtil.execute(""String_Node_Str"",meta).fetch();
      ReflectionObject nc=ReflectionUtil.executeStatic(""String_Node_Str"",ReflectionStatic.fromNMS(""String_Node_Str""),""String_Node_Str"" + i + ""String_Node_Str"");
      m.put(""String_Node_Str"",ReflectionUtil.execute(""String_Node_Str"",nc.fetch(),""String_Node_Str"").fetch());
      ReflectionObject ro=new ReflectionObject(meta);
      ro.set(""String_Node_Str"",m);
      stack.setItemMeta(ro.fetchAs(ItemMeta.class));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"") && split.length > 1 && r.isInt(split[1])) {
    stack.setAmount(Integer.parseInt(split[1]));
  }
 else {
    try {
      parseEnchantmentStrings(cs,allowUnsafe,split);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.999881792032783
141584,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  Player p=(Player)cs;
  if (p.getItemInHand() == null || p.getItemInHand().getType() == null || p.getItemInHand().getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"");
  }
  p.getItemInHand().setAmount(64);
  r.sendMes(cs,""String_Node_Str"");
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  Player p=(Player)cs;
  if (p.getItemInHand() == null || p.getItemInHand().getType() == null || p.getItemInHand().getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  p.getItemInHand().setAmount(64);
  r.sendMes(cs,""String_Node_Str"");
}",0.986725663716814
141585,"@SuppressWarnings(""String_Node_Str"") public static Inventory convertStringToInventory(String invString,String name){
  String[] serializedBlocks=invString.split(""String_Node_Str"");
  String invInfo=serializedBlocks[0];
  Inventory deserializedInventory=Bukkit.getServer().createInventory(null,Integer.valueOf(invInfo),name);
  for (int i=1; i < serializedBlocks.length; i++) {
    String[] serializedBlock=serializedBlocks[i].split(""String_Node_Str"");
    int stackPosition=Integer.valueOf(serializedBlock[0]);
    if (stackPosition >= deserializedInventory.getSize()) {
      continue;
    }
    ItemStack is=null;
    Boolean createdItemStack=false;
    String[] serializedItemStack=serializedBlock[1].split(""String_Node_Str"");
    for (    String itemInfo : serializedItemStack) {
      String[] itemAttribute=itemInfo.split(""String_Node_Str"");
      if (itemAttribute[0].equals(""String_Node_Str"")) {
        is=new ItemStack(Material.getMaterial(Integer.valueOf(itemAttribute[1])));
        createdItemStack=true;
      }
 else       if (itemAttribute[0].equals(""String_Node_Str"") && createdItemStack) {
        is.setDurability(Short.valueOf(itemAttribute[1]));
      }
 else       if (itemAttribute[0].equals(""String_Node_Str"") && createdItemStack) {
        is.setAmount(Integer.valueOf(itemAttribute[1]));
      }
 else       if (itemAttribute[0].equals(""String_Node_Str"") && createdItemStack) {
        is.addEnchantment(Enchantment.getById(Integer.valueOf(itemAttribute[1])),Integer.valueOf(itemAttribute[2]));
      }
    }
    deserializedInventory.setItem(stackPosition,is);
  }
  return deserializedInventory;
}","@SuppressWarnings(""String_Node_Str"") public static Inventory convertStringToInventory(String invString,String name){
  String[] serializedBlocks=invString.split(""String_Node_Str"");
  String invInfo=serializedBlocks[0];
  Inventory deserializedInventory=Bukkit.getServer().createInventory(null,Integer.valueOf(invInfo),name.substring(0,31));
  for (int i=1; i < serializedBlocks.length; i++) {
    String[] serializedBlock=serializedBlocks[i].split(""String_Node_Str"");
    int stackPosition=Integer.valueOf(serializedBlock[0]);
    if (stackPosition >= deserializedInventory.getSize()) {
      continue;
    }
    ItemStack is=null;
    Boolean createdItemStack=false;
    String[] serializedItemStack=serializedBlock[1].split(""String_Node_Str"");
    for (    String itemInfo : serializedItemStack) {
      String[] itemAttribute=itemInfo.split(""String_Node_Str"");
      if (itemAttribute[0].equals(""String_Node_Str"")) {
        is=new ItemStack(Material.getMaterial(Integer.valueOf(itemAttribute[1])));
        createdItemStack=true;
      }
 else       if (itemAttribute[0].equals(""String_Node_Str"") && createdItemStack) {
        is.setDurability(Short.valueOf(itemAttribute[1]));
      }
 else       if (itemAttribute[0].equals(""String_Node_Str"") && createdItemStack) {
        is.setAmount(Integer.valueOf(itemAttribute[1]));
      }
 else       if (itemAttribute[0].equals(""String_Node_Str"") && createdItemStack) {
        is.addEnchantment(Enchantment.getById(Integer.valueOf(itemAttribute[1])),Integer.valueOf(itemAttribute[2]));
      }
    }
    deserializedInventory.setItem(stackPosition,is);
  }
  return deserializedInventory;
}",0.9951010410287814
141586,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (r.getOnlinePlayers().length > 64) {
      r.sendMes(cs,""String_Node_Str"");
      return;
    }
    Integer size=9;
    while (r.getOnlinePlayers().length > size) {
      size=size + 9;
    }
    Inventory inv=Bukkit.createInventory(null,size,r.mes(""String_Node_Str""));
    for (    Player pl : r.getOnlinePlayers()) {
      if (!(pl == p)) {
        ItemStack item=new ItemStack(Material.SKULL_ITEM);
        item.setDurability(Short.parseShort(""String_Node_Str""));
        SkullMeta meta=(SkullMeta)item.getItemMeta();
        meta.setDisplayName(r.neutral + pl.getName());
        meta.setOwner(pl.getName());
        item.setItemMeta(meta);
        inv.addItem(item);
      }
    }
    UC.getPlayer(p).setInTeleportMenu(true);
    if (inv.getItem(0) == null) {
      Inventory inv2=Bukkit.createInventory(null,9,r.mes(""String_Node_Str""));
      p.openInventory(inv2);
      return;
    }
    p.openInventory(inv);
    return;
  }
 else   if (r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str""))) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    World w=p.getWorld();
    Double x=LocationUtil.getCoordinate(args[0],p.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,2) == false) {
      z=LocationUtil.getCoordinate(args[1],p.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[1],p.getLocation().getY());
      z=LocationUtil.getCoordinate(args[2],p.getLocation().getZ());
    }
    LocationUtil.teleport(p,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,true);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
    return;
  }
 else   if (r.checkArgs(args,1) == true && r.isDouble(args[1].replace(""String_Node_Str"",""String_Node_Str"")) && !(r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str"")))) {
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    Player t=r.searchPlayer(args[0]);
    if (t == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    World w=t.getWorld();
    Double x=LocationUtil.getCoordinate(args[1],t.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,3) == false) {
      z=LocationUtil.getCoordinate(args[2],t.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[2],t.getLocation().getY());
      z=LocationUtil.getCoordinate(args[3],t.getLocation().getZ());
    }
    LocationUtil.teleport(t,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,false);
    LocationUtil.playEffect(t,new Location(w,x,y,z));
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
    return;
  }
 else {
    Player tg=r.searchPlayer(args[0]);
    if (tg == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
 else {
      if (r.checkArgs(args,1) == false) {
        if (!r.isPlayer(cs)) {
          return;
        }
        Player p=(Player)cs;
        if (!UC.getPlayer(tg).hasTeleportEnabled() && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
          return;
        }
        LocationUtil.teleport(p,tg,PlayerTeleportEvent.TeleportCause.COMMAND,true);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
      }
 else {
        if (!r.perm(cs,""String_Node_Str"",false,true)) {
          return;
        }
        Player tg2=r.searchPlayer(args[1]);
        if (tg2 == null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
        }
 else {
          if (UC.getPlayer(tg).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
            return;
          }
          if (UC.getPlayer(tg2).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg2.getName());
            return;
          }
          LocationUtil.teleport(tg,tg2,PlayerTeleportEvent.TeleportCause.COMMAND,false);
          LocationUtil.playEffect(tg,tg2.getLocation());
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName(),""String_Node_Str"",tg2.getName());
        }
      }
    }
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (r.getOnlinePlayers().length > 64) {
      r.sendMes(cs,""String_Node_Str"");
      return;
    }
    Integer size=9;
    while (r.getOnlinePlayers().length > size) {
      size=size + 9;
    }
    Inventory inv=Bukkit.createInventory(null,size,r.mes(""String_Node_Str""));
    for (    Player pl : r.getOnlinePlayers()) {
      if (!(pl == p)) {
        ItemStack item=new ItemStack(Material.SKULL_ITEM);
        item.setDurability(Short.parseShort(""String_Node_Str""));
        SkullMeta meta=(SkullMeta)item.getItemMeta();
        meta.setDisplayName(r.neutral + pl.getName());
        meta.setOwner(pl.getName());
        item.setItemMeta(meta);
        inv.addItem(item);
      }
    }
    UC.getPlayer(p).setInTeleportMenu(true);
    if (inv.getItem(0) == null) {
      Inventory inv2=Bukkit.createInventory(null,9,r.mes(""String_Node_Str""));
      p.openInventory(inv2);
      return;
    }
    p.openInventory(inv);
    return;
  }
 else   if (r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str"")) || args[0].replace(""String_Node_Str"",""String_Node_Str"").isEmpty()) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    World w=p.getWorld();
    Double x=LocationUtil.getCoordinate(args[0],p.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,2) == false) {
      z=LocationUtil.getCoordinate(args[1],p.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[1],p.getLocation().getY());
      z=LocationUtil.getCoordinate(args[2],p.getLocation().getZ());
    }
    LocationUtil.teleport(p,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,true);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
    return;
  }
 else   if (r.checkArgs(args,1) == true && (r.isDouble(args[1].replace(""String_Node_Str"",""String_Node_Str"")) || args[1].replace(""String_Node_Str"",""String_Node_Str"").isEmpty()) && (!r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str"")) && !args[0].replace(""String_Node_Str"",""String_Node_Str"").isEmpty())) {
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    Player t=r.searchPlayer(args[0]);
    if (t == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    World w=t.getWorld();
    Double x=LocationUtil.getCoordinate(args[1],t.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,3) == false) {
      z=LocationUtil.getCoordinate(args[2],t.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[2],t.getLocation().getY());
      z=LocationUtil.getCoordinate(args[3],t.getLocation().getZ());
    }
    LocationUtil.teleport(t,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,false);
    LocationUtil.playEffect(t,new Location(w,x,y,z));
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
    return;
  }
 else {
    Player tg=r.searchPlayer(args[0]);
    if (tg == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
 else {
      if (r.checkArgs(args,1) == false) {
        if (!r.isPlayer(cs)) {
          return;
        }
        Player p=(Player)cs;
        if (!UC.getPlayer(tg).hasTeleportEnabled() && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
          return;
        }
        LocationUtil.teleport(p,tg,PlayerTeleportEvent.TeleportCause.COMMAND,true);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
      }
 else {
        if (!r.perm(cs,""String_Node_Str"",false,true)) {
          return;
        }
        Player tg2=r.searchPlayer(args[1]);
        if (tg2 == null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
        }
 else {
          if (UC.getPlayer(tg).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
            return;
          }
          if (UC.getPlayer(tg2).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg2.getName());
            return;
          }
          LocationUtil.teleport(tg,tg2,PlayerTeleportEvent.TeleportCause.COMMAND,false);
          LocationUtil.playEffect(tg,tg2.getLocation());
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName(),""String_Node_Str"",tg2.getName());
        }
      }
    }
  }
}",0.9795135735190232
141587,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  if (!r.perm(p,""String_Node_Str"",true,true)) {
    return;
  }
  if (r.checkArgs(args,0) && args[0].contains(""String_Node_Str"")) {
    if (!r.perm(p,""String_Node_Str"",true,true)) {
      return;
    }
    OfflinePlayer t=r.searchOfflinePlayer(args[0].split(""String_Node_Str"")[0]);
    if (t == null || (!t.hasPlayedBefore() && !t.isOnline())) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0].split(""String_Node_Str"")[0]);
      return;
    }
    List<String> homes=UC.getPlayer(t).getHomeNames();
    if (homes.contains(args[0])) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    }
 else {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    }
    if (!homes.contains(args[0].toLowerCase().split(""String_Node_Str"")[1])) {
      homes.add(args[0].toLowerCase().split(""String_Node_Str"")[1]);
    }
    UC.getPlayer(t).addHome(args[0].toLowerCase().split(""String_Node_Str"")[1],p.getLocation());
    return;
  }
  Set<String> multihomes=r.getCnfg().getConfigurationSection(""String_Node_Str"").getKeys(false);
  Integer limit=1;
  if (multihomes != null) {
    for (    String s : multihomes) {
      if (r.perm(cs,""String_Node_Str"" + s.toLowerCase(),false,false)) {
        if (limit < r.getCnfg().getInt(""String_Node_Str"" + s)) {
          limit=r.getCnfg().getInt(""String_Node_Str"" + s);
        }
      }
    }
  }
  if (r.perm(cs,""String_Node_Str"",false,false)) {
    limit=999999;
  }
  List<String> homes=UC.getPlayer(p).getHomeNames();
  if (homes.size() >= limit) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",limit);
    return;
  }
  String name=r.checkArgs(args,0) ? args[0] : ""String_Node_Str"";
  if (homes.contains(name)) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name);
  }
 else {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name);
  }
  if (!homes.contains(name.toLowerCase())) {
    homes.add(name.toLowerCase());
  }
  UC.getPlayer(p).addHome(name.toLowerCase(),p.getLocation());
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  if (!r.perm(p,""String_Node_Str"",true,true)) {
    return;
  }
  if (r.checkArgs(args,0) && args[0].contains(""String_Node_Str"")) {
    if (!r.perm(p,""String_Node_Str"",true,true)) {
      return;
    }
    OfflinePlayer t=r.searchOfflinePlayer(args[0].split(""String_Node_Str"")[0]);
    if (t == null || (!t.hasPlayedBefore() && !t.isOnline())) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0].split(""String_Node_Str"")[0]);
      return;
    }
    List<String> homes=UC.getPlayer(t).getHomeNames();
    if (homes.contains(args[0])) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    }
 else {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    }
    if (!homes.contains(args[0].toLowerCase().split(""String_Node_Str"")[1])) {
      homes.add(args[0].toLowerCase().split(""String_Node_Str"")[1]);
    }
    UC.getPlayer(t).addHome(args[0].toLowerCase().split(""String_Node_Str"")[1],p.getLocation());
    return;
  }
  Set<String> multihomes=r.getCnfg().getConfigurationSection(""String_Node_Str"").getKeys(false);
  Integer limit=1;
  if (multihomes != null) {
    for (    String s : multihomes) {
      if (r.perm(cs,""String_Node_Str"" + s.toLowerCase(),false,false)) {
        if (limit < r.getCnfg().getInt(""String_Node_Str"" + s)) {
          limit=r.getCnfg().getInt(""String_Node_Str"" + s);
        }
      }
    }
  }
  if (r.perm(cs,""String_Node_Str"",false,false)) {
    limit=999999;
  }
  List<String> homes=UC.getPlayer(p).getHomeNames();
  if (homes.size() >= limit) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",limit);
    return;
  }
  String name=r.checkArgs(args,0) ? args[0] : ""String_Node_Str"";
  if (homes.contains(name)) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name);
  }
 else {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name);
  }
  if (!homes.contains(name.toLowerCase())) {
    homes.add(name.toLowerCase());
  }
  UC.getPlayer(p).addHome(name.toLowerCase(),p.getLocation());
}",0.995776630689817
141588,"@EventHandler(priority=EventPriority.MONITOR) public void bleed(final EntityDamageEvent e){
  if (e.isCancelled() || e.getEntity().isDead()) {
    return;
  }
  if (e.getEntity() == null || !(e.getEntity() instanceof LivingEntity)) {
    return;
  }
  if (r.getCnfg().getBoolean(""String_Node_Str"") == false) {
    return;
  }
  if (e.getEntity() instanceof Player || r.getCnfg().getBoolean(""String_Node_Str"") == false) {
    if (e.getEntity() instanceof Player) {
      final Player p=(Player)e.getEntity();
      if (UC.getPlayer(p).isGod()) {
        return;
      }
      if (iCD.contains(p.getEntityId())) {
        return;
      }
      if (((HumanEntity)e.getEntity()).getGameMode().equals(GameMode.CREATIVE)) {
        return;
      }
      iCD.add(p.getEntityId());
      Bukkit.getScheduler().scheduleSyncDelayedTask(r.getUC(),new Runnable(){
        @Override public void run(){
          iCD.remove((Object)p.getEntityId());
        }
      }
,5L);
      ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
    }
 else {
      if (iCD.contains(e.getEntity().getEntityId())) {
        return;
      }
      iCD.add(e.getEntity().getEntityId());
switch (e.getEntityType()) {
case SKELETON:
        if (((Skeleton)e.getEntity()).getSkeletonType().equals(SkeletonType.NORMAL)) {
          ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.WOOL,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
        }
 else {
          ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.COAL_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
        }
      break;
case CREEPER:
    ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.WOOL,(byte)5),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
  break;
case SPIDER:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,0.6,0),r.getOnlinePlayersL());
break;
case GIANT:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case ZOMBIE:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case SLIME:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.SLIME_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case GHAST:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.QUARTZ_ORE,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case PIG_ZOMBIE:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.STAINED_CLAY,(byte)10),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case ENDERMAN:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.ENDER_CHEST,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case CAVE_SPIDER:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,0.6,0),r.getOnlinePlayersL());
break;
case SILVERFISH:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.STONE,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation(),r.getOnlinePlayersL());
break;
case BLAZE:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.LAVA,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,0.7,0),r.getOnlinePlayersL());
break;
case MAGMA_CUBE:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.LAVA,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case ENDER_DRAGON:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case WITHER:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case BAT:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.1F,20,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case WITCH:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.STAINED_CLAY,(byte)10),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case ENDERMITE:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.ENDER_CHEST,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation(),r.getOnlinePlayersL());
break;
case GUARDIAN:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.LAVA,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,0.8,0),r.getOnlinePlayersL());
break;
case PIG:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case SHEEP:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case COW:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case CHICKEN:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case SQUID:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.COAL_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case WOLF:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case MUSHROOM_COW:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case SNOWMAN:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.SNOW_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case OCELOT:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,0.2,0),r.getOnlinePlayersL());
break;
case IRON_GOLEM:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case HORSE:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case RABBIT:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,0.3,0),r.getOnlinePlayersL());
break;
case VILLAGER:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case PLAYER:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
default :
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
}
Bukkit.getScheduler().scheduleSyncDelayedTask(r.getUC(),new Runnable(){
@Override public void run(){
iCD.remove((Object)e.getEntity().getEntityId());
}
}
,10L);
}
}
}","@EventHandler(priority=EventPriority.MONITOR) public void bleed(final EntityDamageEvent e){
  if (e.isCancelled() || e.getEntity().isDead()) {
    return;
  }
  if (e.getEntity() == null || !(e.getEntity() instanceof LivingEntity)) {
    return;
  }
  if (r.getCnfg().getBoolean(""String_Node_Str"") == false) {
    return;
  }
  if (r.getOnlinePlayersL().isEmpty()) {
    return;
  }
  if (e.getEntity() instanceof Player || r.getCnfg().getBoolean(""String_Node_Str"") == false) {
    if (e.getEntity() instanceof Player) {
      final Player p=(Player)e.getEntity();
      if (UC.getPlayer(p).isGod()) {
        return;
      }
      if (iCD.contains(p.getEntityId())) {
        return;
      }
      if (((HumanEntity)e.getEntity()).getGameMode().equals(GameMode.CREATIVE)) {
        return;
      }
      iCD.add(p.getEntityId());
      Bukkit.getScheduler().scheduleSyncDelayedTask(r.getUC(),new Runnable(){
        @Override public void run(){
          iCD.remove((Object)p.getEntityId());
        }
      }
,5L);
      ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
    }
 else {
      if (iCD.contains(e.getEntity().getEntityId())) {
        return;
      }
      iCD.add(e.getEntity().getEntityId());
switch (e.getEntityType()) {
case SKELETON:
        if (((Skeleton)e.getEntity()).getSkeletonType().equals(SkeletonType.NORMAL)) {
          ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.WOOL,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
        }
 else {
          ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.COAL_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
        }
      break;
case CREEPER:
    ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.WOOL,(byte)5),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
  break;
case SPIDER:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,0.6,0),r.getOnlinePlayersL());
break;
case GIANT:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case ZOMBIE:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case SLIME:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.SLIME_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case GHAST:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.QUARTZ_ORE,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case PIG_ZOMBIE:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.STAINED_CLAY,(byte)10),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case ENDERMAN:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.ENDER_CHEST,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case CAVE_SPIDER:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,0.6,0),r.getOnlinePlayersL());
break;
case SILVERFISH:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.STONE,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation(),r.getOnlinePlayersL());
break;
case BLAZE:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.LAVA,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,0.7,0),r.getOnlinePlayersL());
break;
case MAGMA_CUBE:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.LAVA,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case ENDER_DRAGON:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case WITHER:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case BAT:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.1F,20,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case WITCH:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.STAINED_CLAY,(byte)10),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case ENDERMITE:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.ENDER_CHEST,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation(),r.getOnlinePlayersL());
break;
case GUARDIAN:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.LAVA,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,0.8,0),r.getOnlinePlayersL());
break;
case PIG:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case SHEEP:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case COW:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case CHICKEN:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case SQUID:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.COAL_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case WOLF:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case MUSHROOM_COW:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case SNOWMAN:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.SNOW_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case OCELOT:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,0.2,0),r.getOnlinePlayersL());
break;
case IRON_GOLEM:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case HORSE:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case RABBIT:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,0.3,0),r.getOnlinePlayersL());
break;
case VILLAGER:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
case PLAYER:
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
break;
default :
ParticleUtil.BLOCK_CRACK.display(new BlockData(Material.REDSTONE_BLOCK,(byte)0),0.3F,0.3F,0.3F,0.3F,50,e.getEntity().getLocation().add(0,1.0,0),r.getOnlinePlayersL());
}
Bukkit.getScheduler().scheduleSyncDelayedTask(r.getUC(),new Runnable(){
@Override public void run(){
iCD.remove((Object)e.getEntity().getEntityId());
}
}
,10L);
}
}
}",0.996485603304766
141589,"@Override public List<String> onTabComplete(CommandSender sender,Command cmd,String label,String[] args){
  if (Overrider.checkOverridden(sender,cmd,label,args)) {
    return null;
  }
  List<String> rtrn=null;
  if (label.startsWith(""String_Node_Str"")) {
    label=label.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  for (  UltimateCommand cmdr : cmds) {
    if (cmdr.getName().equals(label) || cmdr.getAliases().contains(label)) {
      try {
        rtrn=cmdr.onTabComplete(sender,cmd,label,args,args[args.length - 1],args.length - 1);
      }
 catch (      Exception ex) {
        ErrorLogger.log(ex,""String_Node_Str"" + label);
      }
      break;
    }
  }
  if (rtrn == null) {
    rtrn=new ArrayList<>();
    for (    Player p : r.getOnlinePlayers()) {
      rtrn.add(p.getName());
    }
  }
  if (!StringUtil.nullOrEmpty(args[args.length - 1])) {
    Iterator<String> i=rtrn.iterator();
    while (i.hasNext()) {
      String s=i.next();
      if (!s.startsWith(args[args.length - 1])) {
        i.remove();
      }
    }
  }
  return rtrn;
}","@Override public List<String> onTabComplete(CommandSender sender,Command cmd,String label,String[] args){
  if (Overrider.checkOverridden(sender,cmd,label,args)) {
    return null;
  }
  List<String> rtrn=null;
  if (label.startsWith(""String_Node_Str"")) {
    label=label.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  for (  UltimateCommand cmdr : cmds) {
    if (cmdr.getName().equals(label) || cmdr.getAliases().contains(label)) {
      try {
        rtrn=cmdr.onTabComplete(sender,cmd,label,args,args[args.length - 1],args.length - 1);
      }
 catch (      Exception ex) {
        ErrorLogger.log(ex,""String_Node_Str"" + label);
      }
      break;
    }
  }
  if (rtrn == null) {
    rtrn=new ArrayList<>();
    for (    Player p : r.getOnlinePlayers()) {
      rtrn.add(p.getName());
    }
  }
  if (!StringUtil.nullOrEmpty(args[args.length - 1])) {
    Iterator<String> i=(new ArrayList<>(rtrn)).iterator();
    while (i.hasNext()) {
      String s=i.next();
      if (!s.startsWith(args[args.length - 1])) {
        i.remove();
      }
    }
  }
  return rtrn;
}",0.9874008399440036
141590,"public void setNick(String str){
  nickname=str == null ? null : str + ChatColor.RESET;
  save();
  if (str != null) {
    if (getPlayer().isOnline()) {
      getPlayer().getPlayer().setDisplayName(nickname.replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
  Config data=getPlayerConfig();
  data.set(""String_Node_Str"",str);
  data.save(UltimateFileLoader.getPlayerFile(getPlayer()));
}","public void setNick(String str){
  nickname=str == null ? null : str + ChatColor.RESET;
  save();
  if (str != null) {
    if (getPlayer().isOnline()) {
      getPlayer().getPlayer().setDisplayName(nickname.replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    if (getPlayer().isOnline()) {
      getPlayer().getPlayer().setDisplayName(getPlayer().getPlayer().getName());
    }
  }
  Config data=getPlayerConfig();
  data.set(""String_Node_Str"",str);
  data.save(UltimateFileLoader.getPlayerFile(getPlayer()));
}",0.8552774755168662
141591,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  if (!r.perm(p,""String_Node_Str"",true,true)) {
    return;
  }
  if (r.checkArgs(args,0) && args[0].contains(""String_Node_Str"")) {
    if (!r.perm(p,""String_Node_Str"",true,true)) {
      return;
    }
    OfflinePlayer t=r.searchOfflinePlayer(args[0].split(""String_Node_Str"")[0]);
    if (t == null || (!t.hasPlayedBefore() && !t.isOnline())) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0].split(""String_Node_Str"")[0]);
      return;
    }
    List<String> homes=UC.getPlayer(t).getHomeNames();
    if (homes.contains(args[0])) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    }
 else {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    }
    if (!homes.contains(args[0].toLowerCase().split(""String_Node_Str"")[1])) {
      homes.add(args[0].toLowerCase().split(""String_Node_Str"")[1]);
    }
    UC.getPlayer(t).addHome(args[0].toLowerCase().split(""String_Node_Str"")[1],p.getLocation());
    return;
  }
  Set<String> multihomes=r.getCnfg().getConfigurationSection(""String_Node_Str"").getKeys(false);
  Integer limit=1;
  if (multihomes != null) {
    for (    String s : multihomes) {
      if (r.perm(cs,""String_Node_Str"" + s.toLowerCase(),false,false)) {
        if (limit > r.getCnfg().getInt(""String_Node_Str"" + s)) {
          limit=r.getCnfg().getInt(""String_Node_Str"" + s);
        }
      }
    }
  }
  if (r.perm(cs,""String_Node_Str"",false,false)) {
    limit=999999;
  }
  List<String> homes=UC.getPlayer(p).getHomeNames();
  if (homes.size() >= limit) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",limit);
    return;
  }
  String name=r.checkArgs(args,0) ? args[0] : ""String_Node_Str"";
  if (homes.contains(name)) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name);
  }
 else {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name);
  }
  if (!homes.contains(name.toLowerCase())) {
    homes.add(name.toLowerCase());
  }
  UC.getPlayer(p).addHome(name.toLowerCase(),p.getLocation());
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  if (!r.perm(p,""String_Node_Str"",true,true)) {
    return;
  }
  if (r.checkArgs(args,0) && args[0].contains(""String_Node_Str"")) {
    if (!r.perm(p,""String_Node_Str"",true,true)) {
      return;
    }
    OfflinePlayer t=r.searchOfflinePlayer(args[0].split(""String_Node_Str"")[0]);
    if (t == null || (!t.hasPlayedBefore() && !t.isOnline())) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0].split(""String_Node_Str"")[0]);
      return;
    }
    List<String> homes=UC.getPlayer(t).getHomeNames();
    if (homes.contains(args[0])) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    }
 else {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    }
    if (!homes.contains(args[0].toLowerCase().split(""String_Node_Str"")[1])) {
      homes.add(args[0].toLowerCase().split(""String_Node_Str"")[1]);
    }
    UC.getPlayer(t).addHome(args[0].toLowerCase().split(""String_Node_Str"")[1],p.getLocation());
    return;
  }
  Set<String> multihomes=r.getCnfg().getConfigurationSection(""String_Node_Str"").getKeys(false);
  Integer limit=1;
  if (multihomes != null) {
    for (    String s : multihomes) {
      if (r.perm(cs,""String_Node_Str"" + s.toLowerCase(),false,false)) {
        if (limit < r.getCnfg().getInt(""String_Node_Str"" + s)) {
          limit=r.getCnfg().getInt(""String_Node_Str"" + s);
        }
      }
    }
  }
  if (r.perm(cs,""String_Node_Str"",false,false)) {
    limit=999999;
  }
  List<String> homes=UC.getPlayer(p).getHomeNames();
  if (homes.size() >= limit) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",limit);
    return;
  }
  String name=r.checkArgs(args,0) ? args[0] : ""String_Node_Str"";
  if (homes.contains(name)) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name);
  }
 else {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name);
  }
  if (!homes.contains(name.toLowerCase())) {
    homes.add(name.toLowerCase());
  }
  UC.getPlayer(p).addHome(name.toLowerCase(),p.getLocation());
}",0.9995327102803738
141592,"/** 
 * Gets an ItemStack from the given node
 * @param item Node representing an ItemStack
 * @return ItemStack of null
 */
private ItemStack getItemStack(final Map<String,Object> item){
  final ItemStack is=ItemUtil.searchItem((String)item.get(""String_Node_Str""));
  if (is == null) {
    return null;
  }
  if (item.containsKey(""String_Node_Str"")) {
    is.setAmount((int)item.get(""String_Node_Str""));
  }
  if (item.containsKey(""String_Node_Str"")) {
    is.setDurability(((Number)item.get(""String_Node_Str"")).shortValue());
  }
  MetaItemStack ism=new MetaItemStack(is);
  for (  String s : item.keySet()) {
    if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
      continue;
    }
    ism.addStringMeta(null,true,s + ""String_Node_Str"" + item.get(s).toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  return ism.getItemStack();
}","/** 
 * Gets an ItemStack from the given node
 * @param item Node representing an ItemStack
 * @return ItemStack of null
 */
private ItemStack getItemStack(final Map<String,Object> item){
  final ItemStack is=ItemUtil.searchItem((String)item.get(""String_Node_Str""));
  if (is == null) {
    return null;
  }
  if (item.containsKey(""String_Node_Str"")) {
    is.setAmount((int)item.get(""String_Node_Str""));
  }
  if (item.containsKey(""String_Node_Str"")) {
    is.setDurability(((Number)item.get(""String_Node_Str"")).shortValue());
  }
  MetaItemStack ism=new MetaItemStack(is);
  for (  String s : item.keySet()) {
    if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
      continue;
    }
    try {
      ism.addStringMeta(null,true,s + ""String_Node_Str"" + item.get(s).toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception ex) {
      continue;
    }
  }
  return ism.getItemStack();
}",0.9646569646569648
141593,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Player p=(Player)cs;
  Enchantment ench=EnchantmentDatabase.getByName(args[0]);
  if (ench == null) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  ItemStack stack=p.getItemInHand();
  if (stack == null || stack.getType() == null || stack.getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String name=ench.getName().replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
  Integer level=1;
  if (r.checkArgs(args,1) == true && r.isInt(args[1])) {
    level=Integer.parseInt(args[1]);
  }
  if (level < 0) {
    level=0;
  }
  if (level == 0) {
    stack.removeEnchantment(ench);
  }
 else {
    MetaItemStack stack2=new MetaItemStack(stack);
    stack2.addEnchantment(cs,r.perm(cs,""String_Node_Str"",false,false),ench,level);
    p.setItemInHand(stack2.getItemStack());
  }
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name,""String_Node_Str"",level,""String_Node_Str"",ItemUtil.getName(stack).toLowerCase());
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Player p=(Player)cs;
  Enchantment ench=EnchantmentDatabase.getByName(args[0]);
  if (ench == null) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  ItemStack stack=p.getItemInHand();
  if (stack == null || stack.getType() == null || stack.getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String name=ench.getName().replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
  Integer level=1;
  if (r.checkArgs(args,1) == true && r.isInt(args[1])) {
    level=Integer.parseInt(args[1]);
  }
  if (level < 0) {
    level=0;
  }
  if (level == 0) {
    stack.removeEnchantment(ench);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name,""String_Node_Str"",level,""String_Node_Str"",ItemUtil.getName(stack).toLowerCase());
  }
 else {
    try {
      MetaItemStack stack2=new MetaItemStack(stack);
      stack2.addEnchantment(cs,r.perm(cs,""String_Node_Str"",false,false),ench,level);
      p.setItemInHand(stack2.getItemStack());
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name,""String_Node_Str"",level,""String_Node_Str"",ItemUtil.getName(stack).toLowerCase());
    }
 catch (    IllegalArgumentException ex) {
      if (ex.getMessage() != null && ex.getMessage().contains(""String_Node_Str"")) {
        r.sendMes(cs,""String_Node_Str"");
        return;
      }
      return;
    }
  }
}",0.7772413793103449
141594,"@SuppressWarnings(""String_Node_Str"") @Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,1)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Player target=r.searchPlayer(args[0]);
  if (target == null) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  ItemStack item;
  try {
    item=new ItemStack(ItemUtil.searchItem(args[1]));
  }
 catch (  Exception e) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
    return;
  }
  if (item == null || item.getType() == null || item.getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
    return;
  }
  if (InventoryUtil.isFullInventory(target.getInventory())) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
    return;
  }
  Integer amount=item.getMaxStackSize();
  if (r.checkArgs(args,2)) {
    if (!r.isInt(args[2])) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[2]);
      return;
    }
    amount=Integer.parseInt(args[2]);
  }
  item.setAmount(amount);
  if (r.checkArgs(args,3)) {
    if (r.isInt(args[3])) {
      item.setDurability(Short.parseShort(args[3]));
    }
    MetaItemStack meta=new MetaItemStack(item);
    int metaStart=r.isInt(args[3]) ? 4 : 3;
    if (args.length > metaStart) {
      try {
        String s=r.getFinalArg(args,metaStart);
        if (s.startsWith(""String_Node_Str"")) {
          item=Bukkit.getUnsafe().modifyItemStack(item,s);
        }
 else {
          meta.parseStringMeta(cs,r.perm(cs,""String_Node_Str"",false,false),args,metaStart);
          item=meta.getItemStack();
        }
      }
 catch (      Exception e) {
        r.sendMes(cs,""String_Node_Str"");
      }
    }
  }
  InventoryUtil.addItem(target.getInventory(),item);
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",ItemUtil.getName(item),""String_Node_Str"",amount,""String_Node_Str"",target.getName());
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,1)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Player target=r.searchPlayer(args[0]);
  if (target == null) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  ItemStack item;
  try {
    item=new ItemStack(ItemUtil.searchItem(args[1]));
  }
 catch (  Exception e) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
    return;
  }
  if (item == null || item.getType() == null || item.getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
    return;
  }
  if (InventoryUtil.isFullInventory(target.getInventory())) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
    return;
  }
  Integer amount=item.getMaxStackSize();
  if (r.checkArgs(args,2)) {
    if (!r.isInt(args[2])) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[2]);
      return;
    }
    amount=Integer.parseInt(args[2]);
  }
  item.setAmount(amount);
  if (r.checkArgs(args,3)) {
    if (r.isInt(args[3])) {
      item.setDurability(Short.parseShort(args[3]));
    }
    MetaItemStack meta=new MetaItemStack(item);
    int metaStart=r.isInt(args[3]) ? 4 : 3;
    if (args.length > metaStart) {
      try {
        String s=r.getFinalArg(args,metaStart);
        if (s.startsWith(""String_Node_Str"")) {
          item=Bukkit.getUnsafe().modifyItemStack(item,s);
        }
 else {
          try {
            meta.parseStringMeta(cs,r.perm(cs,""String_Node_Str"",false,false),args,metaStart);
          }
 catch (          IllegalArgumentException ex) {
            if (ex.getMessage() != null && (ex.getMessage().contains(""String_Node_Str"") || ex.getMessage().contains(""String_Node_Str""))) {
              r.sendMes(cs,""String_Node_Str"");
            }
            return;
          }
          item=meta.getItemStack();
        }
      }
 catch (      Exception e) {
        r.sendMes(cs,""String_Node_Str"");
        return;
      }
    }
  }
  InventoryUtil.addItem(target.getInventory(),item);
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",ItemUtil.getName(item),""String_Node_Str"",amount,""String_Node_Str"",target.getName());
}",0.8854574786817239
141595,"@SuppressWarnings(""String_Node_Str"") @Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  ItemStack item;
  try {
    item=new ItemStack(ItemUtil.searchItem(args[0]));
  }
 catch (  Exception e) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  if (item == null || item.getType() == null || item.getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  if (InventoryUtil.isFullInventory(p.getInventory())) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Integer amount=item.getMaxStackSize();
  if (r.checkArgs(args,1)) {
    if (!r.isInt(args[1])) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
      return;
    }
    amount=Integer.parseInt(args[1]);
  }
  item.setAmount(amount);
  if (r.checkArgs(args,2)) {
    if (r.isInt(args[2])) {
      item.setDurability(Short.parseShort(args[2]));
    }
    MetaItemStack meta=new MetaItemStack(item);
    int metaStart=r.isInt(args[2]) ? 3 : 2;
    if (args.length > metaStart) {
      try {
        String s=r.getFinalArg(args,metaStart);
        if (s.startsWith(""String_Node_Str"")) {
          item=Bukkit.getUnsafe().modifyItemStack(item,s);
        }
 else {
          meta.parseStringMeta(cs,r.perm(cs,""String_Node_Str"",false,false),args,metaStart);
          item=meta.getItemStack();
        }
      }
 catch (      Exception e) {
        r.sendMes(cs,""String_Node_Str"");
      }
    }
  }
  InventoryUtil.addItem(p.getInventory(),item);
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",ItemUtil.getName(item),""String_Node_Str"",amount,""String_Node_Str"",p.getName());
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  ItemStack item;
  try {
    item=new ItemStack(ItemUtil.searchItem(args[0]));
  }
 catch (  Exception e) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  if (item == null || item.getType() == null || item.getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  if (InventoryUtil.isFullInventory(p.getInventory())) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Integer amount=item.getMaxStackSize();
  if (r.checkArgs(args,1)) {
    if (!r.isInt(args[1])) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
      return;
    }
    amount=Integer.parseInt(args[1]);
  }
  item.setAmount(amount);
  if (r.checkArgs(args,2)) {
    if (r.isInt(args[2])) {
      item.setDurability(Short.parseShort(args[2]));
    }
    MetaItemStack meta=new MetaItemStack(item);
    int metaStart=r.isInt(args[2]) ? 3 : 2;
    if (args.length > metaStart) {
      try {
        String s=r.getFinalArg(args,metaStart);
        if (s.startsWith(""String_Node_Str"")) {
          item=Bukkit.getUnsafe().modifyItemStack(item,s);
        }
 else {
          try {
            meta.parseStringMeta(cs,r.perm(cs,""String_Node_Str"",false,false),args,metaStart);
            item=meta.getItemStack();
          }
 catch (          IllegalArgumentException ex) {
            if (ex.getMessage() != null && ex.getMessage().contains(""String_Node_Str"")) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            return;
          }
        }
      }
 catch (      Exception e) {
        r.sendMes(cs,""String_Node_Str"");
        return;
      }
    }
  }
  InventoryUtil.addItem(p.getInventory(),item);
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",ItemUtil.getName(item),""String_Node_Str"",amount,""String_Node_Str"",p.getName());
}",0.9169941060903732
141596,"@SuppressWarnings(""String_Node_Str"") @Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Player p=(Player)cs;
  ItemStack stack=p.getItemInHand();
  if (stack == null || stack.getType() == null || stack.getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  try {
    String s=r.getFinalArg(args,0);
    if (s.startsWith(""String_Node_Str"")) {
      stack=Bukkit.getUnsafe().modifyItemStack(stack,s);
    }
 else {
      MetaItemStack meta=new MetaItemStack(stack);
      meta.parseStringMeta(cs,r.perm(cs,""String_Node_Str"",false,false),args,0);
      stack=meta.getItemStack();
    }
  }
 catch (  Exception e) {
    r.sendMes(cs,""String_Node_Str"");
  }
  p.setItemInHand(stack);
  r.sendMes(cs,""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Player p=(Player)cs;
  ItemStack stack=p.getItemInHand();
  if (stack == null || stack.getType() == null || stack.getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  try {
    String s=r.getFinalArg(args,0);
    if (s.startsWith(""String_Node_Str"")) {
      stack=Bukkit.getUnsafe().modifyItemStack(stack,s);
    }
 else {
      MetaItemStack meta=new MetaItemStack(stack);
      try {
        meta.parseStringMeta(cs,r.perm(cs,""String_Node_Str"",false,false),args,0);
      }
 catch (      IllegalArgumentException ex) {
        if (ex.getMessage() != null && ex.getMessage().contains(""String_Node_Str"")) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        return;
      }
      stack=meta.getItemStack();
    }
  }
 catch (  Exception e) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  p.setItemInHand(stack);
  r.sendMes(cs,""String_Node_Str"");
}",0.8287795992714025
141597,"public void addEnchantment(CommandSender cs,boolean allowUnsafe,Enchantment enchantment,int level){
  if (enchantment == null) {
    return;
  }
  if (this.stack.getType().equals(Material.ENCHANTED_BOOK)) {
    EnchantmentStorageMeta meta=(EnchantmentStorageMeta)this.stack.getItemMeta();
    if (level == 0) {
      meta.removeStoredEnchant(enchantment);
    }
 else {
      meta.addStoredEnchant(enchantment,level,allowUnsafe);
    }
    this.stack.setItemMeta(meta);
  }
 else   if (level == 0) {
    this.stack.removeEnchantment(enchantment);
  }
 else   if (allowUnsafe) {
    this.stack.addUnsafeEnchantment(enchantment,level);
  }
 else {
    try {
      this.stack.addEnchantment(enchantment,level);
    }
 catch (    IllegalArgumentException e) {
      if (cs != null) {
        r.sendMes(cs,""String_Node_Str"");
      }
    }
  }
}","public void addEnchantment(CommandSender cs,boolean allowUnsafe,Enchantment enchantment,int level){
  if (enchantment == null) {
    return;
  }
  if (this.stack.getType().equals(Material.ENCHANTED_BOOK)) {
    EnchantmentStorageMeta meta=(EnchantmentStorageMeta)this.stack.getItemMeta();
    if (level == 0) {
      meta.removeStoredEnchant(enchantment);
    }
 else {
      meta.addStoredEnchant(enchantment,level,allowUnsafe);
    }
    this.stack.setItemMeta(meta);
  }
 else   if (level == 0) {
    this.stack.removeEnchantment(enchantment);
  }
 else   if (allowUnsafe) {
    this.stack.addUnsafeEnchantment(enchantment,level);
  }
 else {
    this.stack.addEnchantment(enchantment,level);
  }
}",0.90979883192732
141598,"@SuppressWarnings(""String_Node_Str"") public void parseStringMeta(CommandSender sender,boolean allowUnsafe,String[] string,int fromArg){
  if (string[fromArg].startsWith(""String_Node_Str"")) {
    this.stack=Bukkit.getServer().getUnsafe().modifyItemStack(this.stack,Joiner.on(' ').join(Arrays.asList(string).subList(fromArg,string.length)));
  }
 else {
    for (int i=fromArg; i < string.length; i++) {
      addStringMeta(sender,allowUnsafe,string[i]);
    }
    if (this.validFirework) {
      FireworkEffect effect=this.builder.build();
      FireworkMeta fmeta=(FireworkMeta)this.stack.getItemMeta();
      fmeta.addEffect(effect);
      this.stack.setItemMeta(fmeta);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void parseStringMeta(CommandSender sender,boolean allowUnsafe,String[] string,int fromArg) throws Exception {
  if (string[fromArg].startsWith(""String_Node_Str"")) {
    this.stack=Bukkit.getServer().getUnsafe().modifyItemStack(this.stack,Joiner.on(' ').join(Arrays.asList(string).subList(fromArg,string.length)));
  }
 else {
    for (int i=fromArg; i < string.length; i++) {
      addStringMeta(sender,allowUnsafe,string[i]);
    }
    if (this.validFirework) {
      FireworkEffect effect=this.builder.build();
      FireworkMeta fmeta=(FireworkMeta)this.stack.getItemMeta();
      fmeta.addEffect(effect);
      this.stack.setItemMeta(fmeta);
    }
  }
}",0.9869942196531792
141599,"@SuppressWarnings({""String_Node_Str""}) public void addStringMeta(CommandSender cs,boolean allowUnsafe,String string){
  String[] split=this.splitPattern.split(string,2);
  if (split.length < 1) {
    return;
  }
  if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    String displayName=ChatColor.translateAlternateColorCodes('&',split[1].replace('_',' '));
    ItemMeta meta=this.stack.getItemMeta();
    meta.setDisplayName(displayName);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=r.normalize(max,0.0,2147483647.0);
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_MAX_HEALTH).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=r.normalize(max,0.0,Double.MAX_VALUE);
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_ATTACK_DAMAGE).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=max / 50;
      max=r.normalize(max,0.0,Double.MAX_VALUE);
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_MOVEMENT_SPEED).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=r.normalize(max,0.0,100.0);
      max=max / 100.0;
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_KNOCKBACK_RESISTANCE).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && ((split[0].equalsIgnoreCase(""String_Node_Str"")) || (split[0].equalsIgnoreCase(""String_Node_Str"")))) {
    List<String> lore=new ArrayList<>();
    for (    String line : split[1].split(""String_Node_Str"")) {
      lore.add(ChatColor.translateAlternateColorCodes('&',line.replace('_',' ')));
    }
    ItemMeta meta=this.stack.getItemMeta();
    meta.setLore(lore);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && ((split[0].equalsIgnoreCase(""String_Node_Str"")) || (split[0].equalsIgnoreCase(""String_Node_Str""))) && (this.stack.getType() == Material.SKULL_ITEM)) {
    if (this.stack.getDurability() == 3) {
      String owner=split[1];
      SkullMeta meta=(SkullMeta)this.stack.getItemMeta();
      meta.setOwner(owner);
      this.stack.setItemMeta(meta);
    }
 else {
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"")) && (this.stack.getType() == Material.WRITTEN_BOOK)) {
    String author=ChatColor.translateAlternateColorCodes('&',split[1]);
    BookMeta meta=(BookMeta)this.stack.getItemMeta();
    meta.setAuthor(author);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"")) && (this.stack.getType() == Material.WRITTEN_BOOK)) {
    String title=ChatColor.translateAlternateColorCodes('&',split[1].replace('_',' '));
    BookMeta meta=(BookMeta)this.stack.getItemMeta();
    meta.setTitle(title);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"")) && (this.stack.getType() == Material.FIREWORK)) {
    int power=r.isInt(split[1]) ? Integer.parseInt(split[1]) : 0;
    FireworkMeta meta=(FireworkMeta)this.stack.getItemMeta();
    meta.setPower(power > 3 ? 4 : power);
    this.stack.setItemMeta(meta);
  }
 else   if (this.stack.getType() == Material.FIREWORK) {
    try {
      addFireworkMeta(false,string);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (this.stack.getType() == Material.POTION) {
    try {
      addPotionMeta(false,string);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if ((split.length > 1) && ((split[0].equalsIgnoreCase(""String_Node_Str"")) || (split[0].equalsIgnoreCase(""String_Node_Str""))) && ((this.stack.getType() == Material.LEATHER_BOOTS) || (this.stack.getType() == Material.LEATHER_CHESTPLATE) || (this.stack.getType() == Material.LEATHER_HELMET)|| (this.stack.getType() == Material.LEATHER_LEGGINGS))) {
    String[] color=split[1].split(""String_Node_Str"");
    if (color.length == 3) {
      int red=r.isInt(color[0]) ? Integer.parseInt(color[0]) : 0;
      int green=r.isInt(color[1]) ? Integer.parseInt(color[1]) : 0;
      int blue=r.isInt(color[2]) ? Integer.parseInt(color[2]) : 0;
      LeatherArmorMeta meta=(LeatherArmorMeta)this.stack.getItemMeta();
      meta.setColor(Color.fromRGB(red,green,blue));
      this.stack.setItemMeta(meta);
    }
 else {
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    ItemUtil.addGlow(stack);
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    try {
      ItemMeta meta=stack.getItemMeta();
      meta.spigot().setUnbreakable(true);
      stack.setItemMeta(meta);
    }
 catch (    Exception ex) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
  }
 else   if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    List<ItemStack> c=new ArrayList<>();
    if (split[1].contains(""String_Node_Str"")) {
      for (      String s : split[1].split(""String_Node_Str"")) {
        ItemStack i=ItemUtil.searchItem(s);
        if (i == null || i.getType().equals(Material.AIR)) {
          if (cs != null) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",s);
          }
          return;
        }
        c.add(i);
      }
    }
 else {
      ItemStack i=ItemUtil.searchItem(split[1]);
      if (i == null || i.getType().equals(Material.AIR)) {
        if (cs != null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",split[1]);
        }
        return;
      }
      c.add(i);
    }
    StringBuilder s=new StringBuilder();
    for (    ItemStack i : c) {
      if (!s.toString().isEmpty()) {
        s.append(""String_Node_Str"");
      }
      s.append(""String_Node_Str"" + ItemUtil.getID(i.getType()) + ""String_Node_Str"");
    }
    try {
      ItemMeta meta=stack.getItemMeta();
      Map<String,Object> m=(Map<String,Object>)ReflectionUtil.execute(""String_Node_Str"",meta).fetch();
      ReflectionObject nc=ReflectionUtil.executeStatic(""String_Node_Str"",ReflectionStatic.fromNMS(""String_Node_Str""),""String_Node_Str"" + s.toString() + ""String_Node_Str"");
      m.put(""String_Node_Str"",ReflectionUtil.execute(""String_Node_Str"",nc.fetch(),""String_Node_Str"").fetch());
      ReflectionObject ro=new ReflectionObject(meta);
      ro.set(""String_Node_Str"",m);
      stack.setItemMeta(ro.fetchAs(ItemMeta.class));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    List<ItemStack> c=new ArrayList<>();
    if (split[1].contains(""String_Node_Str"")) {
      for (      String s : split[1].split(""String_Node_Str"")) {
        ItemStack i=ItemUtil.searchItem(s);
        if (i == null || i.getType().equals(Material.AIR)) {
          if (cs != null) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",s);
          }
          return;
        }
        c.add(i);
      }
    }
 else {
      ItemStack i=ItemUtil.searchItem(split[1]);
      if (i == null || i.getType().equals(Material.AIR)) {
        if (cs != null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",split[1]);
        }
        return;
      }
      c.add(i);
    }
    StringBuilder s=new StringBuilder();
    for (    ItemStack i : c) {
      if (!s.toString().isEmpty()) {
        s.append(""String_Node_Str"");
      }
      s.append(""String_Node_Str"" + ItemUtil.getID(i.getType()) + ""String_Node_Str"");
    }
    try {
      ItemMeta meta=stack.getItemMeta();
      Map<String,Object> m=(Map<String,Object>)ReflectionUtil.execute(""String_Node_Str"",meta).fetch();
      ReflectionObject nc=ReflectionUtil.executeStatic(""String_Node_Str"",ReflectionStatic.fromNMS(""String_Node_Str""),""String_Node_Str"" + s.toString() + ""String_Node_Str"");
      m.put(""String_Node_Str"",ReflectionUtil.execute(""String_Node_Str"",nc.fetch(),""String_Node_Str"").fetch());
      ReflectionObject ro=new ReflectionObject(meta);
      ro.set(""String_Node_Str"",m);
      stack.setItemMeta(ro.fetchAs(ItemMeta.class));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str"")) || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Integer i=0;
    if (split[1].contains(""String_Node_Str"")) {
      for (      String s : split[1].split(""String_Node_Str"")) {
        if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=1;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=2;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=4;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=8;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=16;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=32;
        }
 else         if (r.isInt(s)) {
          i+=Integer.parseInt(s);
        }
      }
    }
 else {
      if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=1;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=2;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=4;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=8;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=16;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=32;
      }
 else       if (r.isInt(split[1])) {
        i+=Integer.parseInt(split[1]);
      }
    }
    try {
      ItemMeta meta=stack.getItemMeta();
      Map<String,Object> m=(Map<String,Object>)ReflectionUtil.execute(""String_Node_Str"",meta).fetch();
      ReflectionObject nc=ReflectionUtil.executeStatic(""String_Node_Str"",ReflectionStatic.fromNMS(""String_Node_Str""),""String_Node_Str"" + i + ""String_Node_Str"");
      m.put(""String_Node_Str"",ReflectionUtil.execute(""String_Node_Str"",nc.fetch(),""String_Node_Str"").fetch());
      ReflectionObject ro=new ReflectionObject(meta);
      ro.set(""String_Node_Str"",m);
      stack.setItemMeta(ro.fetchAs(ItemMeta.class));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"") && split.length > 1 && r.isInt(split[1])) {
    stack.setAmount(Integer.parseInt(split[1]));
  }
 else {
    try {
      parseEnchantmentStrings(cs,allowUnsafe,split);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@SuppressWarnings({""String_Node_Str""}) public void addStringMeta(CommandSender cs,boolean allowUnsafe,String string) throws Exception {
  String[] split=this.splitPattern.split(string,2);
  if (split.length < 1) {
    return;
  }
  if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    String displayName=ChatColor.translateAlternateColorCodes('&',split[1].replace('_',' '));
    ItemMeta meta=this.stack.getItemMeta();
    meta.setDisplayName(displayName);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=r.normalize(max,0.0,2147483647.0);
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_MAX_HEALTH).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=r.normalize(max,0.0,Double.MAX_VALUE);
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_ATTACK_DAMAGE).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=max / 50;
      max=r.normalize(max,0.0,Double.MAX_VALUE);
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_MOVEMENT_SPEED).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (r.isDouble(split[1])) {
      Double max=Double.parseDouble(split[1]);
      max=r.normalize(max,0.0,100.0);
      max=max / 100.0;
      AttributeUtil attributes=new AttributeUtil(stack);
      attributes.add(Attribute.newBuilder().name(""String_Node_Str"").type(AttributeType.GENERIC_KNOCKBACK_RESISTANCE).amount(max).build());
      stack=attributes.getStack();
    }
  }
 else   if ((split.length > 1) && ((split[0].equalsIgnoreCase(""String_Node_Str"")) || (split[0].equalsIgnoreCase(""String_Node_Str"")))) {
    List<String> lore=new ArrayList<>();
    for (    String line : split[1].split(""String_Node_Str"")) {
      lore.add(ChatColor.translateAlternateColorCodes('&',line.replace('_',' ')));
    }
    ItemMeta meta=this.stack.getItemMeta();
    meta.setLore(lore);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && ((split[0].equalsIgnoreCase(""String_Node_Str"")) || (split[0].equalsIgnoreCase(""String_Node_Str""))) && (this.stack.getType() == Material.SKULL_ITEM)) {
    if (this.stack.getDurability() == 3) {
      String owner=split[1];
      SkullMeta meta=(SkullMeta)this.stack.getItemMeta();
      meta.setOwner(owner);
      this.stack.setItemMeta(meta);
    }
 else {
    }
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"")) && (this.stack.getType() == Material.WRITTEN_BOOK)) {
    String author=ChatColor.translateAlternateColorCodes('&',split[1]);
    BookMeta meta=(BookMeta)this.stack.getItemMeta();
    meta.setAuthor(author);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"")) && (this.stack.getType() == Material.WRITTEN_BOOK)) {
    String title=ChatColor.translateAlternateColorCodes('&',split[1].replace('_',' '));
    BookMeta meta=(BookMeta)this.stack.getItemMeta();
    meta.setTitle(title);
    this.stack.setItemMeta(meta);
  }
 else   if ((split.length > 1) && (split[0].equalsIgnoreCase(""String_Node_Str"")) && (this.stack.getType() == Material.FIREWORK)) {
    int power=r.isInt(split[1]) ? Integer.parseInt(split[1]) : 0;
    FireworkMeta meta=(FireworkMeta)this.stack.getItemMeta();
    meta.setPower(power > 3 ? 4 : power);
    this.stack.setItemMeta(meta);
  }
 else   if (this.stack.getType() == Material.FIREWORK) {
    addFireworkMeta(false,string);
  }
 else   if (this.stack.getType() == Material.POTION) {
    addPotionMeta(false,string);
  }
 else   if ((split.length > 1) && ((split[0].equalsIgnoreCase(""String_Node_Str"")) || (split[0].equalsIgnoreCase(""String_Node_Str""))) && ((this.stack.getType() == Material.LEATHER_BOOTS) || (this.stack.getType() == Material.LEATHER_CHESTPLATE) || (this.stack.getType() == Material.LEATHER_HELMET)|| (this.stack.getType() == Material.LEATHER_LEGGINGS))) {
    String[] color=split[1].split(""String_Node_Str"");
    if (color.length == 3) {
      int red=r.isInt(color[0]) ? Integer.parseInt(color[0]) : 0;
      int green=r.isInt(color[1]) ? Integer.parseInt(color[1]) : 0;
      int blue=r.isInt(color[2]) ? Integer.parseInt(color[2]) : 0;
      LeatherArmorMeta meta=(LeatherArmorMeta)this.stack.getItemMeta();
      meta.setColor(Color.fromRGB(red,green,blue));
      this.stack.setItemMeta(meta);
    }
 else {
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    ItemUtil.addGlow(stack);
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    try {
      ItemMeta meta=stack.getItemMeta();
      meta.spigot().setUnbreakable(true);
      stack.setItemMeta(meta);
    }
 catch (    Exception ex) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
  }
 else   if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    List<ItemStack> c=new ArrayList<>();
    if (split[1].contains(""String_Node_Str"")) {
      for (      String s : split[1].split(""String_Node_Str"")) {
        ItemStack i=ItemUtil.searchItem(s);
        if (i == null || i.getType().equals(Material.AIR)) {
          if (cs != null) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",s);
          }
          return;
        }
        c.add(i);
      }
    }
 else {
      ItemStack i=ItemUtil.searchItem(split[1]);
      if (i == null || i.getType().equals(Material.AIR)) {
        if (cs != null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",split[1]);
        }
        return;
      }
      c.add(i);
    }
    StringBuilder s=new StringBuilder();
    for (    ItemStack i : c) {
      if (!s.toString().isEmpty()) {
        s.append(""String_Node_Str"");
      }
      s.append(""String_Node_Str"" + ItemUtil.getID(i.getType()) + ""String_Node_Str"");
    }
    ItemMeta meta=stack.getItemMeta();
    Map<String,Object> m=(Map<String,Object>)ReflectionUtil.execute(""String_Node_Str"",meta).fetch();
    ReflectionObject nc=ReflectionUtil.executeStatic(""String_Node_Str"",ReflectionStatic.fromNMS(""String_Node_Str""),""String_Node_Str"" + s.toString() + ""String_Node_Str"");
    m.put(""String_Node_Str"",ReflectionUtil.execute(""String_Node_Str"",nc.fetch(),""String_Node_Str"").fetch());
    ReflectionObject ro=new ReflectionObject(meta);
    ro.set(""String_Node_Str"",m);
    stack.setItemMeta(ro.fetchAs(ItemMeta.class));
  }
 else   if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    List<ItemStack> c=new ArrayList<>();
    if (split[1].contains(""String_Node_Str"")) {
      for (      String s : split[1].split(""String_Node_Str"")) {
        ItemStack i=ItemUtil.searchItem(s);
        if (i == null || i.getType().equals(Material.AIR)) {
          if (cs != null) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",s);
          }
          return;
        }
        c.add(i);
      }
    }
 else {
      ItemStack i=ItemUtil.searchItem(split[1]);
      if (i == null || i.getType().equals(Material.AIR)) {
        if (cs != null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",split[1]);
        }
        return;
      }
      c.add(i);
    }
    StringBuilder s=new StringBuilder();
    for (    ItemStack i : c) {
      if (!s.toString().isEmpty()) {
        s.append(""String_Node_Str"");
      }
      s.append(""String_Node_Str"" + ItemUtil.getID(i.getType()) + ""String_Node_Str"");
    }
    ItemMeta meta=stack.getItemMeta();
    Map<String,Object> m=(Map<String,Object>)ReflectionUtil.execute(""String_Node_Str"",meta).fetch();
    ReflectionObject nc=ReflectionUtil.executeStatic(""String_Node_Str"",ReflectionStatic.fromNMS(""String_Node_Str""),""String_Node_Str"" + s.toString() + ""String_Node_Str"");
    m.put(""String_Node_Str"",ReflectionUtil.execute(""String_Node_Str"",nc.fetch(),""String_Node_Str"").fetch());
    ReflectionObject ro=new ReflectionObject(meta);
    ro.set(""String_Node_Str"",m);
    stack.setItemMeta(ro.fetchAs(ItemMeta.class));
  }
 else   if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str"")) || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Integer i=0;
    if (split[1].contains(""String_Node_Str"")) {
      for (      String s : split[1].split(""String_Node_Str"")) {
        if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=1;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=2;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=4;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=8;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=16;
        }
 else         if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
          i+=32;
        }
 else         if (r.isInt(s)) {
          i+=Integer.parseInt(s);
        }
      }
    }
 else {
      if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=1;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=2;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=4;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=8;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=16;
      }
 else       if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
        i+=32;
      }
 else       if (r.isInt(split[1])) {
        i+=Integer.parseInt(split[1]);
      }
    }
    ItemMeta meta=stack.getItemMeta();
    Map<String,Object> m=(Map<String,Object>)ReflectionUtil.execute(""String_Node_Str"",meta).fetch();
    ReflectionObject nc=ReflectionUtil.executeStatic(""String_Node_Str"",ReflectionStatic.fromNMS(""String_Node_Str""),""String_Node_Str"" + i + ""String_Node_Str"");
    m.put(""String_Node_Str"",ReflectionUtil.execute(""String_Node_Str"",nc.fetch(),""String_Node_Str"").fetch());
    ReflectionObject ro=new ReflectionObject(meta);
    ro.set(""String_Node_Str"",m);
    stack.setItemMeta(ro.fetchAs(ItemMeta.class));
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"") && split.length > 1 && r.isInt(split[1])) {
    stack.setAmount(Integer.parseInt(split[1]));
  }
 else {
    parseEnchantmentStrings(cs,allowUnsafe,split);
  }
}",0.9790327763496144
141600,"public String getNick(){
  if (nickname != null) {
    return nickname;
  }
  Config data=getPlayerConfig();
  if (data.get(""String_Node_Str"") == null) {
    return null;
  }
  String nick=ChatColor.translateAlternateColorCodes('&',data.getString(""String_Node_Str""));
  if (getPlayer().isOnline()) {
    getPlayer().getPlayer().setDisplayName(nickname.replace(""String_Node_Str"",""String_Node_Str""));
  }
  if (getPlayer().isOnline() && r.perm((CommandSender)getPlayer(),""String_Node_Str"",false,false)) {
    nick=nick.replaceAll(""String_Node_Str"",r.getRandomChatColor() + ""String_Node_Str"");
  }
  nickname=nick + ChatColor.RESET;
  save();
  return nick + ChatColor.RESET;
}","public String getNick(){
  if (nickname != null) {
    return nickname;
  }
  Config data=getPlayerConfig();
  if (data.get(""String_Node_Str"") == null) {
    return null;
  }
  String nick=ChatColor.translateAlternateColorCodes('&',data.getString(""String_Node_Str""));
  if (getPlayer().isOnline()) {
    getPlayer().getPlayer().setDisplayName(nick.replace(""String_Node_Str"",""String_Node_Str""));
  }
  if (getPlayer().isOnline() && r.perm((CommandSender)getPlayer(),""String_Node_Str"",false,false)) {
    nick=nick.replaceAll(""String_Node_Str"",r.getRandomChatColor() + ""String_Node_Str"");
  }
  nickname=nick + ChatColor.RESET;
  save();
  return nick + ChatColor.RESET;
}",0.9970238095238096
141601,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  StringBuilder s=new StringBuilder(""String_Node_Str"");
  for (  World w : Bukkit.getWorlds()) {
    if (r.checkArgs(args,0) && !w.getName().equalsIgnoreCase(args[0])) {
      continue;
    }
    Integer c=0;
    for (    Chunk chunk : w.getLoadedChunks()) {
      try {
        chunk.unload(true,true);
      }
 catch (      Exception ex) {
        r.log(""String_Node_Str"" + chunk.getX() + ""String_Node_Str""+ chunk.getZ());
        return;
      }
      c++;
    }
    c=c - w.getLoadedChunks().length;
    Integer e=0;
    Integer d=0;
    for (    Entity en : w.getEntities()) {
      if (en instanceof Monster) {
        if (en.getTicksLived() > 200) {
          en.playEffect(EntityEffect.DEATH);
          en.remove();
          e++;
        }
      }
      if (en instanceof Item) {
        Item item=(Item)en;
        if (item.getTicksLived() > 200) {
          if (!item.isValid()) {
            en.remove();
          }
          d++;
        }
      }
    }
    s.append(r.mes(""String_Node_Str"",""String_Node_Str"",w.getName(),""String_Node_Str"",c,""String_Node_Str"",e,""String_Node_Str"",d));
  }
  cs.sendMessage(s.toString());
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  StringBuilder s=new StringBuilder(""String_Node_Str"");
  for (  World w : Bukkit.getWorlds()) {
    if (r.checkArgs(args,0) && !w.getName().equalsIgnoreCase(args[0])) {
      continue;
    }
    Integer c=0;
    for (    Chunk chunk : w.getLoadedChunks()) {
      try {
        chunk.unload(true,true);
      }
 catch (      Exception ex) {
        r.log(""String_Node_Str"" + chunk.getX() + ""String_Node_Str""+ chunk.getZ());
        return;
      }
      c++;
    }
    c=c - w.getLoadedChunks().length;
    Integer e=0;
    Integer d=0;
    for (    Entity en : w.getEntities()) {
      if (en instanceof Monster) {
        if (en.getTicksLived() > 200 && en.getCustomName() == null) {
          en.playEffect(EntityEffect.DEATH);
          en.remove();
          e++;
        }
      }
      if (en instanceof Item) {
        Item item=(Item)en;
        if (item.getTicksLived() > 200) {
          if (!item.isValid()) {
            en.remove();
          }
          d++;
        }
      }
    }
    s.append(r.mes(""String_Node_Str"",""String_Node_Str"",w.getName(),""String_Node_Str"",c,""String_Node_Str"",e,""String_Node_Str"",d));
  }
  cs.sendMessage(s.toString());
}",0.9884169884169884
141602,"@Override public void onEnable(){
  try {
    Long time=System.currentTimeMillis();
    instance=this;
    file=getFile();
    UuidUtil.loadPlayers();
    UltimateFileLoader.Enable();
    r.EnableMES();
    UltimateFileLoader.addConfig();
    UltimateCommands.load();
    PerformanceUtil.getTps();
    BossbarUtil.enable();
    ItemDatabase.enable();
    String c=Bukkit.getServer().getVersion().split(""String_Node_Str"")[1].split(""String_Node_Str"")[0];
    Integer v=Integer.parseInt(c.replace(""String_Node_Str"",""String_Node_Str""));
    if (v < 18) {
      Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
      r.log(ChatColor.DARK_RED + ""String_Node_Str"");
      r.log(ChatColor.YELLOW + ""String_Node_Str"" + c+ ""String_Node_Str"");
      r.log(ChatColor.YELLOW + ""String_Node_Str"");
      r.log(ChatColor.DARK_RED + ""String_Node_Str"");
      Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
    }
    UltimateConverter.convert();
    r.runUpdater();
    r.runMetrics();
    PluginManager pm=Bukkit.getPluginManager();
    GlobalPlayerListener.start();
    pm.registerEvents(new GlobalWorldListener(),this);
    AfkListener.start();
    AutomessageListener.start();
    AutosaveListener.start();
    BloodListener.start();
    ChatListener.start();
    DeathmessagesListener.start();
    DynmapListener.start();
    ExplosionListener.start();
    JoinLeaveListener.start();
    MotdListener.start();
    PluginStealListener.start();
    RespawnListener.start();
    SignListener.start();
    TabListener.start();
    TreeListener.start();
    UnknownCommandListener.start();
    WeatherListener.start();
    time=System.currentTimeMillis() - time;
    r.log(ChatColor.GREEN + ""String_Node_Str"" + time+ ""String_Node_Str"");
  }
 catch (  Exception ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
  UltimateWorldLoader.startWorldLoading();
  test();
}","@Override public void onEnable(){
  try {
    Long time=System.currentTimeMillis();
    instance=this;
    file=getFile();
    UltimateFileLoader.Enable();
    r.EnableMES();
    UltimateFileLoader.addConfig();
    UuidUtil.loadPlayers();
    UltimateCommands.load();
    PerformanceUtil.getTps();
    BossbarUtil.enable();
    ItemDatabase.enable();
    String c=Bukkit.getServer().getVersion().split(""String_Node_Str"")[1].split(""String_Node_Str"")[0];
    Integer v=Integer.parseInt(c.replace(""String_Node_Str"",""String_Node_Str""));
    if (v < 18) {
      Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
      r.log(ChatColor.DARK_RED + ""String_Node_Str"");
      r.log(ChatColor.YELLOW + ""String_Node_Str"" + c+ ""String_Node_Str"");
      r.log(ChatColor.YELLOW + ""String_Node_Str"");
      r.log(ChatColor.DARK_RED + ""String_Node_Str"");
      Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
    }
    UltimateConverter.convert();
    r.runUpdater();
    r.runMetrics();
    PluginManager pm=Bukkit.getPluginManager();
    GlobalPlayerListener.start();
    pm.registerEvents(new GlobalWorldListener(),this);
    AfkListener.start();
    AutomessageListener.start();
    AutosaveListener.start();
    BloodListener.start();
    ChatListener.start();
    DeathmessagesListener.start();
    DynmapListener.start();
    ExplosionListener.start();
    JoinLeaveListener.start();
    MotdListener.start();
    PluginStealListener.start();
    RespawnListener.start();
    SignListener.start();
    TabListener.start();
    TreeListener.start();
    UnknownCommandListener.start();
    WeatherListener.start();
    time=System.currentTimeMillis() - time;
    r.log(ChatColor.GREEN + ""String_Node_Str"" + time+ ""String_Node_Str"");
  }
 catch (  Exception ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
  UltimateWorldLoader.startWorldLoading();
  test();
}",0.9850347407803314
141603,"/** 
 * Gets an ItemStack from the given node
 * @param item Node representing an ItemStack
 * @return ItemStack of null
 */
private ItemStack getItemStack(final Map<String,Object> item){
  final ItemStack is=ItemUtil.searchItem((String)item.get(""String_Node_Str""));
  if (is == null) {
    return null;
  }
  if (item.containsKey(""String_Node_Str"")) {
    is.setAmount((int)item.get(""String_Node_Str""));
  }
  if (item.containsKey(""String_Node_Str"")) {
    is.setDurability(((Integer)item.get(""String_Node_Str"")).shortValue());
  }
  MetaItemStack ism=new MetaItemStack(is);
  for (  String s : item.keySet()) {
    if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
      continue;
    }
    ism.addStringMeta(null,true,s + ""String_Node_Str"" + item.get(s).toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  return ism.getItemStack();
}","/** 
 * Gets an ItemStack from the given node
 * @param item Node representing an ItemStack
 * @return ItemStack of null
 */
private ItemStack getItemStack(final Map<String,Object> item){
  final ItemStack is=ItemUtil.searchItem((String)item.get(""String_Node_Str""));
  if (is == null) {
    return null;
  }
  if (item.containsKey(""String_Node_Str"")) {
    is.setAmount((int)item.get(""String_Node_Str""));
  }
  if (item.containsKey(""String_Node_Str"")) {
    is.setDurability(((Number)item.get(""String_Node_Str"")).shortValue());
  }
  MetaItemStack ism=new MetaItemStack(is);
  for (  String s : item.keySet()) {
    if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
      continue;
    }
    ism.addStringMeta(null,true,s + ""String_Node_Str"" + item.get(s).toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  return ism.getItemStack();
}",0.9951534733441034
141604,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    String message1=""String_Node_Str"";
    String message2=""String_Node_Str"";
    String message3=""String_Node_Str"";
    for (    MobType mob : MobType.values()) {
      if (mob.type.equals(MobType.Enemies.ENEMY)) {
        message3=message3 + ""String_Node_Str"" + mob.name;
      }
      if (mob.type.equals(MobType.Enemies.NEUTRAL)) {
        message2=message2 + ""String_Node_Str"" + mob.name;
      }
      if (mob.type.equals(MobType.Enemies.FRIENDLY)) {
        message1=message1 + ""String_Node_Str"" + mob.name;
      }
    }
    message1=message1.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    message2=message2.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    message3=message3.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",message3);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",message2);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",message1);
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Location loc=p.getLocation();
  MobType mob=MobType.fromName(args[0]);
  Integer amount=1;
  ArrayList<MobType> smob=new ArrayList<>();
  if (r.checkArgs(args,1) == true) {
    if (r.isInt(args[1])) {
      amount=Integer.parseInt(args[1]);
    }
  }
  if (mob == null || mob.name == null || mob.name.equals(""String_Node_Str"") || mob.getType() == null) {
    if (!args[0].contains(""String_Node_Str"")) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    ArrayList<SpawnKit> kits=new ArrayList<>();
    for (    String string : args[0].split(""String_Node_Str"")) {
      MobType mo1=MobType.fromName(string);
      if (mo1 == null || mo1.name == null || mo1.name.equals(""String_Node_Str"") || mo1.getType() == null) {
        mo1=MobType.fromName(string.split(""String_Node_Str"")[0]);
        if (mo1 == null || mo1.name == null || mo1.name.equals(""String_Node_Str"") || mo1.getType() == null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",string);
          return;
        }
 else {
          kits.add(new SpawnKit(mo1,string.split(""String_Node_Str"")[1]));
        }
      }
 else {
        kits.add(new SpawnKit(mo1,""String_Node_Str""));
      }
    }
    for (int i=0; i < amount; i++) {
      LivingEntity lastmob=null;
      for (      SpawnKit kit : kits) {
        EntityType type=kit.a().getType();
        LivingEntity en=(LivingEntity)loc.getWorld().spawnEntity(loc,type);
        if (kit.a().name().equals(""String_Node_Str"")) {
          Skeleton skel=(Skeleton)en;
          skel.setSkeletonType(SkeletonType.WITHER);
          EntityEquipment invent=skel.getEquipment();
          invent.setItemInHand(new ItemStack(Material.STONE_SWORD,1));
          invent.setItemInHandDropChance(0.09F);
        }
 else         if (kit.a().name().equalsIgnoreCase(""String_Node_Str"")) {
          Skeleton skel=(Skeleton)en;
          skel.setSkeletonType(SkeletonType.NORMAL);
          skel.getEquipment().setItemInHand(new ItemStack(Material.BOW));
          skel.getEquipment().setItemInHandDropChance(0.09F);
        }
        if (kit.a().name().equalsIgnoreCase(""String_Node_Str"")) {
          Guardian g=(Guardian)en;
          g.setElder(true);
        }
        defaultMobData(type,en);
        if (lastmob != null) {
          lastmob.setPassenger(en);
        }
        lastmob=en;
      }
    }
    return;
  }
  for (int i=0; i < amount; i++) {
    try {
      Entity en=(Entity)loc.getWorld().spawnEntity(loc,mob.getType());
      if (args[0].equals(""String_Node_Str"")) {
        Skeleton skel=(Skeleton)en;
        skel.setSkeletonType(SkeletonType.WITHER);
        EntityEquipment invent=skel.getEquipment();
        invent.setItemInHand(new ItemStack(Material.STONE_SWORD,1));
        invent.setItemInHandDropChance(0.09F);
      }
      defaultMobData(mob.getType(),en);
      if (en instanceof LivingEntity) {
        utilize(args,mob,(LivingEntity)en,p);
      }
    }
 catch (    ClassCastException ex) {
      ex.printStackTrace();
    }
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    String message1=""String_Node_Str"";
    String message2=""String_Node_Str"";
    String message3=""String_Node_Str"";
    for (    MobType mob : MobType.values()) {
      if (mob.type.equals(MobType.Enemies.ENEMY)) {
        message3=message3 + ""String_Node_Str"" + mob.name;
      }
      if (mob.type.equals(MobType.Enemies.NEUTRAL)) {
        message2=message2 + ""String_Node_Str"" + mob.name;
      }
      if (mob.type.equals(MobType.Enemies.FRIENDLY)) {
        message1=message1 + ""String_Node_Str"" + mob.name;
      }
    }
    message1=message1.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    message2=message2.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    message3=message3.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",message3);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",message2);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",message1);
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Location loc=p.getLocation();
  MobType mob=MobType.fromName(args[0]);
  Integer amount=1;
  ArrayList<MobType> smob=new ArrayList<>();
  if (r.checkArgs(args,1) == true) {
    if (r.isInt(args[1])) {
      amount=Integer.parseInt(args[1]);
    }
  }
  if (mob == null || mob.name == null || mob.name.equals(""String_Node_Str"") || mob.getType() == null) {
    if (!args[0].contains(""String_Node_Str"")) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    ArrayList<SpawnKit> kits=new ArrayList<>();
    for (    String string : args[0].split(""String_Node_Str"")) {
      MobType mo1=MobType.fromName(string);
      if (mo1 == null || mo1.name == null || mo1.name.equals(""String_Node_Str"") || mo1.getType() == null) {
        mo1=MobType.fromName(string.split(""String_Node_Str"")[0]);
        if (mo1 == null || mo1.name == null || mo1.name.equals(""String_Node_Str"") || mo1.getType() == null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",string);
          return;
        }
 else {
          kits.add(new SpawnKit(mo1,string.split(""String_Node_Str"")[1]));
        }
      }
 else {
        kits.add(new SpawnKit(mo1,""String_Node_Str""));
      }
    }
    for (int i=0; i < amount; i++) {
      LivingEntity lastmob=null;
      for (      SpawnKit kit : kits) {
        EntityType type=kit.a().getType();
        LivingEntity en=(LivingEntity)loc.getWorld().spawnEntity(loc,type);
        if (kit.a().name().equals(""String_Node_Str"")) {
          Skeleton skel=(Skeleton)en;
          skel.setSkeletonType(SkeletonType.WITHER);
          EntityEquipment invent=skel.getEquipment();
          invent.setItemInHand(new ItemStack(Material.STONE_SWORD,1));
          invent.setItemInHandDropChance(0.09F);
        }
 else         if (kit.a().name().equalsIgnoreCase(""String_Node_Str"")) {
          Skeleton skel=(Skeleton)en;
          skel.setSkeletonType(SkeletonType.NORMAL);
          skel.getEquipment().setItemInHand(new ItemStack(Material.BOW));
          skel.getEquipment().setItemInHandDropChance(0.09F);
        }
        if (kit.a().name().equalsIgnoreCase(""String_Node_Str"")) {
          Guardian g=(Guardian)en;
          g.setElder(true);
        }
        defaultMobData(type,en);
        if (lastmob != null) {
          lastmob.setPassenger(en);
        }
        lastmob=en;
      }
    }
    return;
  }
  for (int i=0; i < amount; i++) {
    try {
      Entity en=loc.getWorld().spawnEntity(loc,mob.getType());
      if (args[0].equals(""String_Node_Str"")) {
        Skeleton skel=(Skeleton)en;
        skel.setSkeletonType(SkeletonType.WITHER);
        EntityEquipment invent=skel.getEquipment();
        invent.setItemInHand(new ItemStack(Material.STONE_SWORD,1));
        invent.setItemInHandDropChance(0.09F);
      }
      defaultMobData(mob.getType(),en);
      if (en instanceof LivingEntity) {
        utilize(args,mob,(LivingEntity)en,p);
      }
    }
 catch (    ClassCastException ex) {
      ex.printStackTrace();
    }
  }
}",0.9991642290012536
141605,"@Override public Object put(String key,Object value){
  return wrapOutgoing(original.put((String)key,unwrapIncoming(value)));
}","@Override public Object put(String key,Object value){
  return wrapOutgoing(original.put(key,unwrapIncoming(value)));
}",0.967479674796748
141606,"/** 
 * Retrieve the NBT type from a given NMS NBT tag.
 * @param nms - the native NBT tag.
 * @return The corresponding type.
 */
private NbtType getNbtType(Object nms){
  int type=(Byte)invokeMethod(NBT_GET_TYPE,nms);
  return NBT_ENUM.get(type);
}","/** 
 * Retrieve the NBT type from a given NMS NBT tag.
 * @param nms - the native NBT tag.
 * @return The corresponding type.
 */
private NbtType getNbtType(Object nms){
  int type=(int)invokeMethod(NBT_GET_TYPE,nms);
  return NBT_ENUM.get(type);
}",0.9859719438877756
141607,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!(cs instanceof Player)) {
    Boolean perm=true;
    for (    World w : Bukkit.getWorlds()) {
      if (r.checkArgs(args,0) == false) {
        r.sendMes(cs,""String_Node_Str"");
        return;
      }
 else {
        if (!r.checkArgs(args,1)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          w.setFullTime(0);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          w.setFullTime(13000);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          w.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          w.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (r.isInt(args[0])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          Integer time=Integer.parseInt(args[0]);
          w.setFullTime(time);
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (r.isInt(args[1])) {
            if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            Integer time=Integer.parseInt(args[1]);
            w.setFullTime(w.getTime() + time);
          }
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
            if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            w.setFullTime(1000);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
            if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            w.setFullTime(13000);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
            if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            w.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
            if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            w.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
          }
 else           if (r.isInt(args[1])) {
            if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            Integer time=Integer.parseInt(args[1]);
            w.setFullTime(time);
          }
        }
      }
    }
    if (r.checkArgs(args,0) == false) {
      r.sendMes(cs,""String_Node_Str"");
    }
 else {
      if (perm == false) {
        return;
      }
      if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (r.isInt(args[0])) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          World w=Bukkit.getWorlds().get(0);
          if (r.checkArgs(args,2)) {
            w=Bukkit.getWorld(args[2]);
            if (w == null) {
              r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[2]);
              return;
            }
          }
          Long time=w.getTime();
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",time);
        }
 else         if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          World w=Bukkit.getWorlds().get(0);
          if (r.checkArgs(args,2)) {
            w=Bukkit.getWorld(args[2]);
            if (w == null) {
              r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[2]);
              return;
            }
          }
          Long time=w.getFullTime();
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",time);
        }
 else {
          r.sendMes(cs,""String_Node_Str"");
        }
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (r.isInt(args[1])) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
        }
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (r.isInt(args[1])) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
        }
 else {
          r.sendMes(cs,""String_Node_Str"");
        }
      }
 else {
        r.sendMes(cs,""String_Node_Str"");
      }
    }
  }
 else {
    Player p=(Player)cs;
    World world=p.getWorld();
    if (r.checkArgs(args,0) == false) {
      r.sendMes(cs,""String_Node_Str"");
    }
 else {
      if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        world.setFullTime(1000);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        world.setFullTime(13000);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        world.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        world.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (r.isInt(args[0])) {
        if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        Integer time=Integer.parseInt(args[0]);
        world.setFullTime(time);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (r.checkArgs(args,1) && args[1].equalsIgnoreCase(""String_Node_Str"")) {
          World w=p.getWorld();
          if (r.checkArgs(args,2)) {
            w=Bukkit.getWorld(args[2]);
            if (w == null) {
              r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[2]);
              return;
            }
          }
          Long time=w.getTime();
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",time);
        }
 else         if (r.checkArgs(args,1) && args[1].equalsIgnoreCase(""String_Node_Str"")) {
          World w=p.getWorld();
          if (r.checkArgs(args,2)) {
            w=Bukkit.getWorld(args[2]);
            if (w == null) {
              r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[2]);
              return;
            }
          }
          Long time=w.getFullTime();
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",time);
        }
 else {
          r.sendMes(cs,""String_Node_Str"");
        }
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (r.isInt(args[1])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          Integer time=Integer.parseInt(args[1]);
          world.setFullTime(world.getTime() + time);
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",time);
        }
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (!r.checkArgs(args,1)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          world.setFullTime(1000);
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          world.setFullTime(13000);
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          world.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          world.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (r.isInt(args[1])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          Integer time=Integer.parseInt(args[1]);
          world.setFullTime(time);
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",time);
        }
 else {
          r.sendMes(cs,""String_Node_Str"");
        }
      }
 else {
        r.sendMes(cs,""String_Node_Str"");
      }
    }
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!(cs instanceof Player)) {
    Boolean perm=true;
    for (    World w : Bukkit.getWorlds()) {
      if (r.checkArgs(args,0) == false) {
        r.sendMes(cs,""String_Node_Str"");
        return;
      }
 else {
        if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          w.setFullTime(0);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          w.setFullTime(13000);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          w.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          w.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (r.isInt(args[0])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          Integer time=Integer.parseInt(args[0]);
          w.setFullTime(time);
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (!r.checkArgs(args,1)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          if (r.isInt(args[1])) {
            if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            Integer time=Integer.parseInt(args[1]);
            w.setFullTime(w.getTime() + time);
          }
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        }
 else         if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
          if (!r.checkArgs(args,1)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
            if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            w.setFullTime(1000);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
            if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            w.setFullTime(13000);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
            if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            w.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
            if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            w.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
          }
 else           if (r.isInt(args[1])) {
            if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
              r.sendMes(cs,""String_Node_Str"");
              return;
            }
            Integer time=Integer.parseInt(args[1]);
            w.setFullTime(time);
          }
        }
      }
    }
    if (r.checkArgs(args,0) == false) {
      r.sendMes(cs,""String_Node_Str"");
    }
 else {
      if (perm == false) {
        return;
      }
      if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (r.isInt(args[0])) {
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          World w=Bukkit.getWorlds().get(0);
          if (r.checkArgs(args,2)) {
            w=Bukkit.getWorld(args[2]);
            if (w == null) {
              r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[2]);
              return;
            }
          }
          Long time=w.getTime();
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",time);
        }
 else         if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          World w=Bukkit.getWorlds().get(0);
          if (r.checkArgs(args,2)) {
            w=Bukkit.getWorld(args[2]);
            if (w == null) {
              r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[2]);
              return;
            }
          }
          Long time=w.getFullTime();
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",time);
        }
 else {
          r.sendMes(cs,""String_Node_Str"");
        }
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (r.isInt(args[1])) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
        }
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (r.isInt(args[1])) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
        }
 else {
          r.sendMes(cs,""String_Node_Str"");
        }
      }
 else {
        r.sendMes(cs,""String_Node_Str"");
      }
    }
  }
 else {
    Player p=(Player)cs;
    World world=p.getWorld();
    if (r.checkArgs(args,0) == false) {
      r.sendMes(cs,""String_Node_Str"");
    }
 else {
      if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        world.setFullTime(1000);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        world.setFullTime(13000);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        world.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(args[0])) {
        if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        world.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
      }
 else       if (r.isInt(args[0])) {
        if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        Integer time=Integer.parseInt(args[0]);
        world.setFullTime(time);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (r.checkArgs(args,1) && args[1].equalsIgnoreCase(""String_Node_Str"")) {
          World w=p.getWorld();
          if (r.checkArgs(args,2)) {
            w=Bukkit.getWorld(args[2]);
            if (w == null) {
              r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[2]);
              return;
            }
          }
          Long time=w.getTime();
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",time);
        }
 else         if (r.checkArgs(args,1) && args[1].equalsIgnoreCase(""String_Node_Str"")) {
          World w=p.getWorld();
          if (r.checkArgs(args,2)) {
            w=Bukkit.getWorld(args[2]);
            if (w == null) {
              r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[2]);
              return;
            }
          }
          Long time=w.getFullTime();
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""),""String_Node_Str"",time);
        }
 else {
          r.sendMes(cs,""String_Node_Str"");
        }
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (!r.checkArgs(args,1)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        if (r.isInt(args[1])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          Integer time=Integer.parseInt(args[1]);
          world.setFullTime(world.getTime() + time);
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",time);
        }
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (!r.checkArgs(args,1)) {
          r.sendMes(cs,""String_Node_Str"");
          return;
        }
        if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          world.setFullTime(1000);
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          world.setFullTime(13000);
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          world.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(args[1])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          world.setGameRuleValue(""String_Node_Str"",""String_Node_Str"");
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",r.mes(""String_Node_Str""));
        }
 else         if (r.isInt(args[1])) {
          if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"");
            return;
          }
          Integer time=Integer.parseInt(args[1]);
          world.setFullTime(time);
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",time);
        }
 else {
          r.sendMes(cs,""String_Node_Str"");
        }
      }
 else {
        r.sendMes(cs,""String_Node_Str"");
      }
    }
  }
}",0.9831894593366652
141608,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  if (!r.perm(p,""String_Node_Str"",false,true)) {
    return;
  }
  Class type=Fireball.class;
  if (args.length > 0) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=SmallFireball.class;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=Arrow.class;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=WitherSkull.class;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=Egg.class;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=Snowball.class;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=ThrownExpBottle.class;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=LargeFireball.class;
    }
  }
  Vector direction=p.getEyeLocation().getDirection().multiply(2);
  Projectile projectile=(Projectile)p.getWorld().spawn(p.getEyeLocation().add(direction.getX(),direction.getY(),direction.getZ()),type);
  projectile.setShooter(p);
  projectile.setVelocity(direction);
  projectile.setBounce(true);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  Player p=(Player)cs;
  if (!r.perm(p,""String_Node_Str"",false,true)) {
    return;
  }
  Class type=Fireball.class;
  if (args.length > 0) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=SmallFireball.class;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=Arrow.class;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=WitherSkull.class;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=Egg.class;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=Snowball.class;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=ThrownExpBottle.class;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      type=LargeFireball.class;
    }
  }
  Vector direction=p.getEyeLocation().getDirection().multiply(2);
  Projectile projectile=(Projectile)p.getWorld().spawn(p.getEyeLocation().add(direction.getX(),direction.getY(),direction.getZ()),type);
  projectile.setShooter(p);
  projectile.setVelocity(direction);
}",0.9881889763779528
141609,"@SuppressWarnings(""String_Node_Str"") public static Inventory convertStringToInventory(String invString,String name){
  String[] serializedBlocks=invString.split(""String_Node_Str"");
  String invInfo=serializedBlocks[0];
  Inventory deserializedInventory=Bukkit.getServer().createInventory(null,Integer.valueOf(invInfo),name.substring(0,31));
  for (int i=1; i < serializedBlocks.length; i++) {
    String[] serializedBlock=serializedBlocks[i].split(""String_Node_Str"");
    int stackPosition=Integer.valueOf(serializedBlock[0]);
    if (stackPosition >= deserializedInventory.getSize()) {
      continue;
    }
    ItemStack is=null;
    Boolean createdItemStack=false;
    String[] serializedItemStack=serializedBlock[1].split(""String_Node_Str"");
    for (    String itemInfo : serializedItemStack) {
      String[] itemAttribute=itemInfo.split(""String_Node_Str"");
      if (itemAttribute[0].equals(""String_Node_Str"")) {
        is=new ItemStack(Material.getMaterial(Integer.valueOf(itemAttribute[1])));
        createdItemStack=true;
      }
 else       if (itemAttribute[0].equals(""String_Node_Str"") && createdItemStack) {
        is.setDurability(Short.valueOf(itemAttribute[1]));
      }
 else       if (itemAttribute[0].equals(""String_Node_Str"") && createdItemStack) {
        is.setAmount(Integer.valueOf(itemAttribute[1]));
      }
 else       if (itemAttribute[0].equals(""String_Node_Str"") && createdItemStack) {
        is.addEnchantment(Enchantment.getById(Integer.valueOf(itemAttribute[1])),Integer.valueOf(itemAttribute[2]));
      }
    }
    deserializedInventory.setItem(stackPosition,is);
  }
  return deserializedInventory;
}","@SuppressWarnings(""String_Node_Str"") public static Inventory convertStringToInventory(String invString,String name){
  String[] serializedBlocks=invString.split(""String_Node_Str"");
  String invInfo=serializedBlocks[0];
  Inventory deserializedInventory=Bukkit.getServer().createInventory(null,Integer.valueOf(invInfo),name.substring(0,31));
  for (int i=1; i < serializedBlocks.length; i++) {
    String[] serializedBlock=serializedBlocks[i].split(""String_Node_Str"");
    int stackPosition=Integer.valueOf(serializedBlock[0]);
    if (stackPosition >= deserializedInventory.getSize()) {
      continue;
    }
    ItemStack is=null;
    Boolean createdItemStack=false;
    String[] serializedItemStack=serializedBlock[1].split(""String_Node_Str"");
    for (    String itemInfo : serializedItemStack) {
      String[] itemAttribute=itemInfo.split(""String_Node_Str"");
      if (itemAttribute[0].equals(""String_Node_Str"")) {
        is=new ItemStack(Material.getMaterial(Integer.valueOf(itemAttribute[1])));
        createdItemStack=true;
      }
 else       if (itemAttribute[0].equals(""String_Node_Str"") && createdItemStack) {
        is.setDurability(Short.valueOf(itemAttribute[1]));
      }
 else       if (itemAttribute[0].equals(""String_Node_Str"") && createdItemStack) {
        is.setAmount(Integer.valueOf(itemAttribute[1]));
      }
 else       if (itemAttribute[0].equals(""String_Node_Str"") && createdItemStack) {
        is.addUnsafeEnchantment(Enchantment.getById(Integer.valueOf(itemAttribute[1])),Integer.valueOf(itemAttribute[2]));
      }
    }
    deserializedInventory.setItem(stackPosition,is);
  }
  return deserializedInventory;
}",0.998175182481752
141610,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (r.getOnlinePlayers().length > 64) {
      r.sendMes(cs,""String_Node_Str"");
      return;
    }
    Integer size=9;
    while (r.getOnlinePlayers().length > size) {
      size=size + 9;
    }
    Inventory inv=Bukkit.createInventory(null,size,r.mes(""String_Node_Str""));
    for (    Player pl : r.getOnlinePlayers()) {
      if (!(pl == p)) {
        ItemStack item=new ItemStack(Material.SKULL_ITEM);
        item.setDurability(Short.parseShort(""String_Node_Str""));
        SkullMeta meta=(SkullMeta)item.getItemMeta();
        meta.setDisplayName(r.neutral + pl.getName());
        meta.setOwner(pl.getName());
        item.setItemMeta(meta);
        inv.addItem(item);
      }
    }
    UC.getPlayer(p).setInTeleportMenu(true);
    if (inv.getItem(0) == null) {
      Inventory inv2=Bukkit.createInventory(null,9,r.mes(""String_Node_Str""));
      p.openInventory(inv2);
      return;
    }
    p.openInventory(inv);
    return;
  }
 else   if (r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str""))) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    World w=p.getWorld();
    Double x=LocationUtil.getCoordinate(args[0],p.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,2) == false) {
      z=LocationUtil.getCoordinate(args[1],p.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[1],p.getLocation().getY());
      z=LocationUtil.getCoordinate(args[2],p.getLocation().getZ());
    }
    LocationUtil.teleport(p,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,true);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
    return;
  }
 else   if (r.checkArgs(args,1) == true && r.isDouble(args[1].replace(""String_Node_Str"",""String_Node_Str"")) && !(r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str"")))) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    Player t=r.searchPlayer(args[0]);
    if (t == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    World w=p.getWorld();
    Double x=LocationUtil.getCoordinate(args[1],t.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,3) == false) {
      z=LocationUtil.getCoordinate(args[2],p.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[2],p.getLocation().getY());
      z=LocationUtil.getCoordinate(args[3],p.getLocation().getZ());
    }
    LocationUtil.teleport(p,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,false);
    LocationUtil.playEffect(p,new Location(w,x,y,z));
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
    return;
  }
 else {
    Player tg=r.searchPlayer(args[0]);
    if (tg == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
 else {
      if (r.checkArgs(args,1) == false) {
        if (!r.isPlayer(cs)) {
          return;
        }
        Player p=(Player)cs;
        if (!UC.getPlayer(tg).hasTeleportEnabled() && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
          return;
        }
        LocationUtil.teleport(p,tg,PlayerTeleportEvent.TeleportCause.COMMAND,true);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
      }
 else {
        if (!r.perm(cs,""String_Node_Str"",false,true)) {
          return;
        }
        Player tg2=r.searchPlayer(args[1]);
        if (tg2 == null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
        }
 else {
          if (UC.getPlayer(tg).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
            return;
          }
          if (UC.getPlayer(tg2).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg2.getName());
            return;
          }
          LocationUtil.teleport(tg,tg2,PlayerTeleportEvent.TeleportCause.COMMAND,false);
          LocationUtil.playEffect(tg,tg2.getLocation());
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName(),""String_Node_Str"",tg2.getName());
        }
      }
    }
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (r.getOnlinePlayers().length > 64) {
      r.sendMes(cs,""String_Node_Str"");
      return;
    }
    Integer size=9;
    while (r.getOnlinePlayers().length > size) {
      size=size + 9;
    }
    Inventory inv=Bukkit.createInventory(null,size,r.mes(""String_Node_Str""));
    for (    Player pl : r.getOnlinePlayers()) {
      if (!(pl == p)) {
        ItemStack item=new ItemStack(Material.SKULL_ITEM);
        item.setDurability(Short.parseShort(""String_Node_Str""));
        SkullMeta meta=(SkullMeta)item.getItemMeta();
        meta.setDisplayName(r.neutral + pl.getName());
        meta.setOwner(pl.getName());
        item.setItemMeta(meta);
        inv.addItem(item);
      }
    }
    UC.getPlayer(p).setInTeleportMenu(true);
    if (inv.getItem(0) == null) {
      Inventory inv2=Bukkit.createInventory(null,9,r.mes(""String_Node_Str""));
      p.openInventory(inv2);
      return;
    }
    p.openInventory(inv);
    return;
  }
 else   if (r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str""))) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    World w=p.getWorld();
    Double x=LocationUtil.getCoordinate(args[0],p.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,2) == false) {
      z=LocationUtil.getCoordinate(args[1],p.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[1],p.getLocation().getY());
      z=LocationUtil.getCoordinate(args[2],p.getLocation().getZ());
    }
    LocationUtil.teleport(p,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,true);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
    return;
  }
 else   if (r.checkArgs(args,1) == true && r.isDouble(args[1].replace(""String_Node_Str"",""String_Node_Str"")) && !(r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str"")))) {
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    Player t=r.searchPlayer(args[0]);
    if (t == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    World w=t.getWorld();
    Double x=LocationUtil.getCoordinate(args[1],t.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,3) == false) {
      z=LocationUtil.getCoordinate(args[2],t.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[2],t.getLocation().getY());
      z=LocationUtil.getCoordinate(args[3],t.getLocation().getZ());
    }
    LocationUtil.teleport(t,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,false);
    LocationUtil.playEffect(t,new Location(w,x,y,z));
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
    return;
  }
 else {
    Player tg=r.searchPlayer(args[0]);
    if (tg == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
 else {
      if (r.checkArgs(args,1) == false) {
        if (!r.isPlayer(cs)) {
          return;
        }
        Player p=(Player)cs;
        if (!UC.getPlayer(tg).hasTeleportEnabled() && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
          return;
        }
        LocationUtil.teleport(p,tg,PlayerTeleportEvent.TeleportCause.COMMAND,true);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
      }
 else {
        if (!r.perm(cs,""String_Node_Str"",false,true)) {
          return;
        }
        Player tg2=r.searchPlayer(args[1]);
        if (tg2 == null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
        }
 else {
          if (UC.getPlayer(tg).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
            return;
          }
          if (UC.getPlayer(tg2).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg2.getName());
            return;
          }
          LocationUtil.teleport(tg,tg2,PlayerTeleportEvent.TeleportCause.COMMAND,false);
          LocationUtil.playEffect(tg,tg2.getLocation());
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName(),""String_Node_Str"",tg2.getName());
        }
      }
    }
  }
}",0.9914110429447852
141611,"public static void load(){
  cmds.add(new CmdAccountstatus());
  cmds.add(new CmdAfk());
  cmds.add(new CmdAlert());
  cmds.add(new CmdBack());
  cmds.add(new CmdBan());
  cmds.add(new CmdBanlist());
  cmds.add(new CmdBroadcast());
  cmds.add(new CmdBurn());
  cmds.add(new CmdButcher());
  cmds.add(new CmdClean());
  cmds.add(new CmdClear());
  cmds.add(new CmdClearchat());
  cmds.add(new CmdCompact());
  cmds.add(new CmdCompass());
  cmds.add(new CmdCoordinates());
  cmds.add(new CmdDamage());
  cmds.add(new CmdDeaf());
  cmds.add(new CmdDeaflist());
  cmds.add(new CmdDelhome());
  cmds.add(new CmdDeljail());
  cmds.add(new CmdDelwarp());
  cmds.add(new CmdEditsign());
  cmds.add(new CmdEffect());
  cmds.add(new CmdEnchant());
  cmds.add(new CmdEnderchest());
  cmds.add(new CmdExperience());
  cmds.add(new CmdExtinguish());
  cmds.add(new CmdFeed());
  cmds.add(new CmdFireball());
  cmds.add(new CmdFirework());
  cmds.add(new CmdFly());
  cmds.add(new CmdFreeze());
  cmds.add(new CmdFreezelist());
  cmds.add(new CmdGamemode());
  cmds.add(new CmdGarbagecollector());
  cmds.add(new CmdGive());
  cmds.add(new CmdGod());
  cmds.add(new CmdHat());
  cmds.add(new CmdHeal());
  cmds.add(new CmdHelp());
  cmds.add(new CmdHome());
  cmds.add(new CmdHomelist());
  cmds.add(new CmdHunger());
  cmds.add(new CmdInventory());
  cmds.add(new CmdIp());
  cmds.add(new CmdItem());
  cmds.add(new CmdJail());
  cmds.add(new CmdJaillist());
  cmds.add(new CmdJump());
  cmds.add(new CmdKick());
  cmds.add(new CmdKickall());
  cmds.add(new CmdKill());
  cmds.add(new CmdKillall());
  cmds.add(new CmdKittycannon());
  cmds.add(new CmdLag());
  cmds.add(new CmdList());
  cmds.add(new CmdMe());
  cmds.add(new CmdMegasmite());
  cmds.add(new CmdMinecraftservers());
  cmds.add(new CmdMobtp());
  cmds.add(new CmdModify());
  cmds.add(new CmdMore());
  cmds.add(new CmdMotd());
  cmds.add(new CmdMsg());
  cmds.add(new CmdMute());
  cmds.add(new CmdMutelist());
  cmds.add(new CmdNames());
  cmds.add(new CmdNear());
  cmds.add(new CmdNick());
  cmds.add(new CmdPing());
  cmds.add(new CmdPlugin());
  cmds.add(new CmdPotion());
  cmds.add(new CmdPowertool());
  cmds.add(new CmdRealname());
  cmds.add(new CmdRecipe());
  cmds.add(new CmdRemoveall());
  cmds.add(new CmdRepair());
  cmds.add(new CmdReply());
  cmds.add(new CmdRules());
  cmds.add(new CmdSave());
  cmds.add(new CmdSay());
  cmds.add(new CmdSeen());
  cmds.add(new CmdSetarmor());
  cmds.add(new CmdSetexperience());
  cmds.add(new CmdSethealth());
  cmds.add(new CmdSethome());
  cmds.add(new CmdSethunger());
  cmds.add(new CmdSetjail());
  cmds.add(new CmdSetlevel());
  cmds.add(new CmdSetspawn());
  cmds.add(new CmdSetwarp());
  cmds.add(new CmdSkull());
  cmds.add(new CmdSmite());
  cmds.add(new CmdSpawn());
  cmds.add(new CmdSpawner());
  cmds.add(new CmdSpawnmob());
  cmds.add(new CmdSpeed());
  cmds.add(new CmdSpy());
  cmds.add(new CmdTeleport());
  cmds.add(new CmdTeleportaccept());
  cmds.add(new CmdTeleportall());
  cmds.add(new CmdTeleportask());
  cmds.add(new CmdTeleportaskall());
  cmds.add(new CmdTeleportdeny());
  cmds.add(new CmdTeleporthere());
  cmds.add(new CmdTeleporthere());
  cmds.add(new CmdTeleporttoggle());
  cmds.add(new CmdTime());
  cmds.add(new CmdTop());
  cmds.add(new CmdUltimatecore());
  cmds.add(new CmdUnban());
  cmds.add(new CmdUndeaf());
  cmds.add(new CmdUnfreeze());
  cmds.add(new CmdUnjail());
  cmds.add(new CmdUnmute());
  cmds.add(new CmdUptime());
  cmds.add(new CmdUuid());
  cmds.add(new CmdVanish());
  cmds.add(new CmdWarp());
  cmds.add(new CmdWarplist());
  cmds.add(new CmdWeather());
  cmds.add(new CmdWorkbench());
  cmds.add(new CmdWorld());
  ucmds=new UltimateCommands();
  for (  UltimateCommand cmd : cmds) {
    if (Bukkit.getPluginCommand(""String_Node_Str"" + cmd.getName()) == null) {
      r.log(""String_Node_Str"" + cmd.getName());
      continue;
    }
    Bukkit.getPluginCommand(""String_Node_Str"" + cmd.getName()).setTabCompleter(ucmds);
  }
}","public static void load(){
  cmds.add(new CmdAccountstatus());
  cmds.add(new CmdAfk());
  cmds.add(new CmdAlert());
  cmds.add(new CmdBack());
  cmds.add(new CmdBan());
  cmds.add(new CmdBanlist());
  cmds.add(new CmdBroadcast());
  cmds.add(new CmdBurn());
  cmds.add(new CmdButcher());
  cmds.add(new CmdClean());
  cmds.add(new CmdClear());
  cmds.add(new CmdClearchat());
  cmds.add(new CmdCompact());
  cmds.add(new CmdCompass());
  cmds.add(new CmdCoordinates());
  cmds.add(new CmdDamage());
  cmds.add(new CmdDeaf());
  cmds.add(new CmdDeaflist());
  cmds.add(new CmdDelhome());
  cmds.add(new CmdDeljail());
  cmds.add(new CmdDelwarp());
  cmds.add(new CmdEditsign());
  cmds.add(new CmdEffect());
  cmds.add(new CmdEnchant());
  cmds.add(new CmdEnderchest());
  cmds.add(new CmdExperience());
  cmds.add(new CmdExtinguish());
  cmds.add(new CmdFeed());
  cmds.add(new CmdFireball());
  cmds.add(new CmdFirework());
  cmds.add(new CmdFly());
  cmds.add(new CmdFreeze());
  cmds.add(new CmdFreezelist());
  cmds.add(new CmdGamemode());
  cmds.add(new CmdGarbagecollector());
  cmds.add(new CmdGive());
  cmds.add(new CmdGod());
  cmds.add(new CmdHat());
  cmds.add(new CmdHeal());
  cmds.add(new CmdHelp());
  cmds.add(new CmdHome());
  cmds.add(new CmdHomelist());
  cmds.add(new CmdHunger());
  cmds.add(new CmdInventory());
  cmds.add(new CmdIp());
  cmds.add(new CmdItem());
  cmds.add(new CmdJail());
  cmds.add(new CmdJaillist());
  cmds.add(new CmdJump());
  cmds.add(new CmdKick());
  cmds.add(new CmdKickall());
  cmds.add(new CmdKill());
  cmds.add(new CmdKillall());
  cmds.add(new CmdKittycannon());
  cmds.add(new CmdLag());
  cmds.add(new CmdList());
  cmds.add(new CmdMe());
  cmds.add(new CmdMegasmite());
  cmds.add(new CmdMinecraftservers());
  cmds.add(new CmdMobtp());
  cmds.add(new CmdModify());
  cmds.add(new CmdMore());
  cmds.add(new CmdMotd());
  cmds.add(new CmdMsg());
  cmds.add(new CmdMute());
  cmds.add(new CmdMutelist());
  cmds.add(new CmdNames());
  cmds.add(new CmdNear());
  cmds.add(new CmdNick());
  cmds.add(new CmdPing());
  cmds.add(new CmdPlugin());
  cmds.add(new CmdPotion());
  cmds.add(new CmdPowertool());
  cmds.add(new CmdRealname());
  cmds.add(new CmdRecipe());
  cmds.add(new CmdRemoveall());
  cmds.add(new CmdRepair());
  cmds.add(new CmdReply());
  cmds.add(new CmdRules());
  cmds.add(new CmdSave());
  cmds.add(new CmdSay());
  cmds.add(new CmdSeen());
  cmds.add(new CmdSetarmor());
  cmds.add(new CmdSetexperience());
  cmds.add(new CmdSethealth());
  cmds.add(new CmdSethome());
  cmds.add(new CmdSethunger());
  cmds.add(new CmdSetjail());
  cmds.add(new CmdSetlevel());
  cmds.add(new CmdSetspawn());
  cmds.add(new CmdSetwarp());
  cmds.add(new CmdSkull());
  cmds.add(new CmdSmite());
  cmds.add(new CmdSpawn());
  cmds.add(new CmdSpawner());
  cmds.add(new CmdSpawnmob());
  cmds.add(new CmdSpeed());
  cmds.add(new CmdSpy());
  cmds.add(new CmdTeleport());
  cmds.add(new CmdTeleportaccept());
  cmds.add(new CmdTeleportall());
  cmds.add(new CmdTeleportask());
  cmds.add(new CmdTeleportaskall());
  cmds.add(new CmdTeleportdeny());
  cmds.add(new CmdTeleporthere());
  cmds.add(new CmdTeleporttoggle());
  cmds.add(new CmdTime());
  cmds.add(new CmdTop());
  cmds.add(new CmdUltimatecore());
  cmds.add(new CmdUnban());
  cmds.add(new CmdUndeaf());
  cmds.add(new CmdUnfreeze());
  cmds.add(new CmdUnjail());
  cmds.add(new CmdUnmute());
  cmds.add(new CmdUptime());
  cmds.add(new CmdUuid());
  cmds.add(new CmdVanish());
  cmds.add(new CmdWarp());
  cmds.add(new CmdWarplist());
  cmds.add(new CmdWeather());
  cmds.add(new CmdWorkbench());
  cmds.add(new CmdWorld());
  ucmds=new UltimateCommands();
  for (  UltimateCommand cmd : cmds) {
    if (Bukkit.getPluginCommand(""String_Node_Str"" + cmd.getName()) == null) {
      r.log(""String_Node_Str"" + cmd.getName());
      continue;
    }
    Bukkit.getPluginCommand(""String_Node_Str"" + cmd.getName()).setTabCompleter(ucmds);
  }
}",0.9956013572954632
141612,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    p.setFoodLevel(20);
    p.setSaturation(10F);
    r.sendMes(cs,""String_Node_Str"");
  }
 else {
    Player p=r.searchPlayer(args[0]);
    if (p == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    p.setFoodLevel(20);
    p.setSaturation(10F);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",p.getName());
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",cs.getName());
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    p.setFoodLevel(20);
    p.setSaturation(10F);
    r.sendMes(cs,""String_Node_Str"");
  }
 else {
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    Player p=r.searchPlayer(args[0]);
    if (p == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    p.setFoodLevel(20);
    p.setSaturation(10F);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",p.getName());
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",cs.getName());
  }
}",0.9496503496503496
141613,"@Override public void run(final CommandSender cs,String label,String[] args){
  String command=label;
  String pageStr=args.length > 0 ? args[0] : null;
  String chapterPageStr=args.length > 1 ? args[1] : null;
  UText input=new TextInput(cs);
  UText output;
  if (input.getLines().isEmpty()) {
    if ((r.isInt(pageStr)) || (pageStr == null)) {
      output=new HelpInput(cs,""String_Node_Str"");
    }
 else {
      output=new HelpInput(cs,pageStr.toLowerCase(Locale.ENGLISH));
      command=command.concat(""String_Node_Str"").concat(pageStr);
      pageStr=chapterPageStr;
    }
    chapterPageStr=null;
  }
 else {
    output=input;
  }
  TextPager pager=new TextPager(output);
  pager.showPage(pageStr,chapterPageStr,command,cs);
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  String command=label;
  String pageStr=args.length > 0 ? args[0] : null;
  String chapterPageStr=args.length > 1 ? args[1] : null;
  UText input=new TextInput(cs);
  UText output;
  if (input.getLines().isEmpty()) {
    if ((r.isInt(pageStr)) || (pageStr == null)) {
      output=new HelpInput(cs,""String_Node_Str"");
    }
 else {
      output=new HelpInput(cs,pageStr.toLowerCase(Locale.ENGLISH));
      command=command.concat(""String_Node_Str"").concat(pageStr);
      pageStr=chapterPageStr;
    }
    chapterPageStr=null;
  }
 else {
    output=input;
  }
  TextPager pager=new TextPager(output);
  pager.showPage(pageStr,chapterPageStr,command,cs);
}",0.9569752281616688
141614,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (r.getOnlinePlayers().length > 64) {
      r.sendMes(cs,""String_Node_Str"");
      return;
    }
    Integer size=9;
    while (r.getOnlinePlayers().length > size) {
      size=size + 9;
    }
    Inventory inv=Bukkit.createInventory(null,size,r.mes(""String_Node_Str""));
    for (    Player pl : r.getOnlinePlayers()) {
      if (!(pl == p)) {
        ItemStack item=new ItemStack(Material.SKULL_ITEM);
        item.setDurability(Short.parseShort(""String_Node_Str""));
        SkullMeta meta=(SkullMeta)item.getItemMeta();
        meta.setDisplayName(r.neutral + pl.getName());
        meta.setOwner(pl.getName());
        item.setItemMeta(meta);
        inv.addItem(item);
      }
    }
    UC.getPlayer(p).setInTeleportMenu(true);
    if (inv.getItem(0) == null) {
      Inventory inv2=Bukkit.createInventory(null,9,r.mes(""String_Node_Str""));
      p.openInventory(inv2);
      return;
    }
    p.openInventory(inv);
    return;
  }
 else   if (r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str""))) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    World w=p.getWorld();
    Double x=LocationUtil.getCoordinate(args[0],p.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,2) == false) {
      z=LocationUtil.getCoordinate(args[1],p.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[1],p.getLocation().getY());
      z=LocationUtil.getCoordinate(args[2],p.getLocation().getZ());
    }
    LocationUtil.teleport(p,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,true);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
    return;
  }
 else   if (r.checkArgs(args,1) == true && r.isDouble(args[1].replace(""String_Node_Str"",""String_Node_Str"")) && !(r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str"")))) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    Player t=r.searchPlayer(args[0]);
    if (t == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    World w=p.getWorld();
    Double x=LocationUtil.getCoordinate(args[1],t.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,3) == false) {
      z=LocationUtil.getCoordinate(args[2],p.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[2],p.getLocation().getY());
      z=LocationUtil.getCoordinate(args[3],p.getLocation().getZ());
    }
    LocationUtil.teleport(p,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,false);
    LocationUtil.playEffect(p,new Location(w,x,y,z));
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
    return;
  }
 else {
    Player tg=r.searchPlayer(args[0]);
    if (tg == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
 else {
      if (r.checkArgs(args,1) == false) {
        if (!r.isPlayer(cs)) {
          return;
        }
        Player p=(Player)cs;
        if (!UC.getPlayer(tg).hasTeleportEnabled() && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
          return;
        }
        LocationUtil.teleport(p,tg,PlayerTeleportEvent.TeleportCause.COMMAND,true);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
      }
 else {
        Player tg2=r.searchPlayer(args[1]);
        if (tg2 == null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
        }
 else {
          if (UC.getPlayer(tg).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
            return;
          }
          if (UC.getPlayer(tg2).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg2.getName());
            return;
          }
          LocationUtil.teleport(tg,tg2,PlayerTeleportEvent.TeleportCause.COMMAND,false);
          LocationUtil.playEffect(tg,tg2.getLocation());
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName(),""String_Node_Str"",tg2.getName());
        }
      }
    }
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (r.getOnlinePlayers().length > 64) {
      r.sendMes(cs,""String_Node_Str"");
      return;
    }
    Integer size=9;
    while (r.getOnlinePlayers().length > size) {
      size=size + 9;
    }
    Inventory inv=Bukkit.createInventory(null,size,r.mes(""String_Node_Str""));
    for (    Player pl : r.getOnlinePlayers()) {
      if (!(pl == p)) {
        ItemStack item=new ItemStack(Material.SKULL_ITEM);
        item.setDurability(Short.parseShort(""String_Node_Str""));
        SkullMeta meta=(SkullMeta)item.getItemMeta();
        meta.setDisplayName(r.neutral + pl.getName());
        meta.setOwner(pl.getName());
        item.setItemMeta(meta);
        inv.addItem(item);
      }
    }
    UC.getPlayer(p).setInTeleportMenu(true);
    if (inv.getItem(0) == null) {
      Inventory inv2=Bukkit.createInventory(null,9,r.mes(""String_Node_Str""));
      p.openInventory(inv2);
      return;
    }
    p.openInventory(inv);
    return;
  }
 else   if (r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str""))) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    World w=p.getWorld();
    Double x=LocationUtil.getCoordinate(args[0],p.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,2) == false) {
      z=LocationUtil.getCoordinate(args[1],p.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[1],p.getLocation().getY());
      z=LocationUtil.getCoordinate(args[2],p.getLocation().getZ());
    }
    LocationUtil.teleport(p,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,true);
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
    return;
  }
 else   if (r.checkArgs(args,1) == true && r.isDouble(args[1].replace(""String_Node_Str"",""String_Node_Str"")) && !(r.isDouble(args[0].replace(""String_Node_Str"",""String_Node_Str"")))) {
    if (!r.isPlayer(cs)) {
      return;
    }
    Player p=(Player)cs;
    if (!r.perm(cs,""String_Node_Str"",false,true)) {
      return;
    }
    Player t=r.searchPlayer(args[0]);
    if (t == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
    World w=p.getWorld();
    Double x=LocationUtil.getCoordinate(args[1],t.getLocation().getX());
    Double y;
    Double z;
    if (r.checkArgs(args,3) == false) {
      z=LocationUtil.getCoordinate(args[2],p.getLocation().getZ());
      y=(double)w.getHighestBlockYAt(x.intValue(),z.intValue());
    }
 else {
      y=LocationUtil.getCoordinate(args[2],p.getLocation().getY());
      z=LocationUtil.getCoordinate(args[3],p.getLocation().getZ());
    }
    LocationUtil.teleport(p,new Location(w,x,y,z),PlayerTeleportEvent.TeleportCause.COMMAND,false);
    LocationUtil.playEffect(p,new Location(w,x,y,z));
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",x,""String_Node_Str"",y,""String_Node_Str"",z);
    return;
  }
 else {
    Player tg=r.searchPlayer(args[0]);
    if (tg == null) {
      r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
      return;
    }
 else {
      if (r.checkArgs(args,1) == false) {
        if (!r.isPlayer(cs)) {
          return;
        }
        Player p=(Player)cs;
        if (!UC.getPlayer(tg).hasTeleportEnabled() && !r.perm(cs,""String_Node_Str"",false,false)) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
          return;
        }
        LocationUtil.teleport(p,tg,PlayerTeleportEvent.TeleportCause.COMMAND,true);
        r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
      }
 else {
        if (!r.perm(cs,""String_Node_Str"",false,true)) {
          return;
        }
        Player tg2=r.searchPlayer(args[1]);
        if (tg2 == null) {
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[1]);
        }
 else {
          if (UC.getPlayer(tg).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName());
            return;
          }
          if (UC.getPlayer(tg2).hasTeleportEnabled() == false && !r.perm(cs,""String_Node_Str"",false,false)) {
            r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg2.getName());
            return;
          }
          LocationUtil.teleport(tg,tg2,PlayerTeleportEvent.TeleportCause.COMMAND,false);
          LocationUtil.playEffect(tg,tg2.getLocation());
          r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",tg.getName(),""String_Node_Str"",tg2.getName());
        }
      }
    }
  }
}",0.9914004914004914
141615,"public static void load(){
  cmds.add(new CmdAccountstatus());
  cmds.add(new CmdAfk());
  cmds.add(new CmdAlert());
  cmds.add(new CmdBack());
  cmds.add(new CmdBan());
  cmds.add(new CmdBanlist());
  cmds.add(new CmdBroadcast());
  cmds.add(new CmdBurn());
  cmds.add(new CmdButcher());
  cmds.add(new CmdClean());
  cmds.add(new CmdClear());
  cmds.add(new CmdClearchat());
  cmds.add(new CmdCompact());
  cmds.add(new CmdCompass());
  cmds.add(new CmdCoordinates());
  cmds.add(new CmdDamage());
  cmds.add(new CmdDeaf());
  cmds.add(new CmdDeaflist());
  cmds.add(new CmdDelhome());
  cmds.add(new CmdDeljail());
  cmds.add(new CmdDelwarp());
  cmds.add(new CmdEditsign());
  cmds.add(new CmdEffect());
  cmds.add(new CmdEnchant());
  cmds.add(new CmdEnderchest());
  cmds.add(new CmdExperience());
  cmds.add(new CmdExtinguish());
  cmds.add(new CmdFeed());
  cmds.add(new CmdFireball());
  cmds.add(new CmdFirework());
  cmds.add(new CmdFly());
  cmds.add(new CmdFreeze());
  cmds.add(new CmdFreezelist());
  cmds.add(new CmdGamemode());
  cmds.add(new CmdGarbagecollector());
  cmds.add(new CmdGive());
  cmds.add(new CmdGod());
  cmds.add(new CmdHat());
  cmds.add(new CmdHeal());
  cmds.add(new CmdHelp());
  cmds.add(new CmdHome());
  cmds.add(new CmdHomelist());
  cmds.add(new CmdHunger());
  cmds.add(new CmdInventory());
  cmds.add(new CmdIp());
  cmds.add(new CmdItem());
  cmds.add(new CmdJail());
  cmds.add(new CmdJaillist());
  cmds.add(new CmdJump());
  cmds.add(new CmdKick());
  cmds.add(new CmdKickall());
  cmds.add(new CmdKill());
  cmds.add(new CmdKillall());
  cmds.add(new CmdKittycannon());
  cmds.add(new CmdLag());
  cmds.add(new CmdList());
  cmds.add(new CmdMe());
  cmds.add(new CmdMegasmite());
  cmds.add(new CmdMinecraftservers());
  cmds.add(new CmdMobtp());
  cmds.add(new CmdModify());
  cmds.add(new CmdMore());
  cmds.add(new CmdMotd());
  cmds.add(new CmdMsg());
  cmds.add(new CmdMute());
  cmds.add(new CmdMutelist());
  cmds.add(new CmdNames());
  cmds.add(new CmdNear());
  cmds.add(new CmdNick());
  cmds.add(new CmdPing());
  cmds.add(new CmdPlugin());
  cmds.add(new CmdPotion());
  cmds.add(new CmdPowertool());
  cmds.add(new CmdRealname());
  cmds.add(new CmdRecipe());
  cmds.add(new CmdRemoveall());
  cmds.add(new CmdRepair());
  cmds.add(new CmdReply());
  cmds.add(new CmdRules());
  cmds.add(new CmdSave());
  cmds.add(new CmdSay());
  cmds.add(new CmdSeen());
  cmds.add(new CmdSetarmor());
  cmds.add(new CmdSetexperience());
  cmds.add(new CmdSethealth());
  cmds.add(new CmdSethome());
  cmds.add(new CmdSethunger());
  cmds.add(new CmdSetjail());
  cmds.add(new CmdSetlevel());
  cmds.add(new CmdSetspawn());
  cmds.add(new CmdSetwarp());
  cmds.add(new CmdSkull());
  cmds.add(new CmdSmite());
  cmds.add(new CmdSpawn());
  cmds.add(new CmdSpawner());
  cmds.add(new CmdSpawnmob());
  cmds.add(new CmdSpeed());
  cmds.add(new CmdSpy());
  cmds.add(new CmdTeleport());
  cmds.add(new CmdTeleportaccept());
  cmds.add(new CmdTeleportall());
  cmds.add(new CmdTeleportask());
  cmds.add(new CmdTeleportaskall());
  cmds.add(new CmdTeleportdeny());
  cmds.add(new CmdTeleporthere());
  cmds.add(new CmdTeleporttoggle());
  cmds.add(new CmdTime());
  cmds.add(new CmdTop());
  cmds.add(new CmdUltimatecore());
  cmds.add(new CmdUnban());
  cmds.add(new CmdUndeaf());
  cmds.add(new CmdUnfreeze());
  cmds.add(new CmdUnjail());
  cmds.add(new CmdUnmute());
  cmds.add(new CmdUptime());
  cmds.add(new CmdUuid());
  cmds.add(new CmdVanish());
  cmds.add(new CmdWarp());
  cmds.add(new CmdWarplist());
  cmds.add(new CmdWeather());
  cmds.add(new CmdWorkbench());
  cmds.add(new CmdWorld());
  ucmds=new UltimateCommands();
  for (  UltimateCommand cmd : cmds) {
    if (Bukkit.getPluginCommand(""String_Node_Str"" + cmd.getName()) == null) {
      r.log(""String_Node_Str"" + cmd.getName());
      continue;
    }
    Bukkit.getPluginCommand(""String_Node_Str"" + cmd.getName()).setTabCompleter(ucmds);
  }
}","public static void load(){
  cmds.add(new CmdAccountstatus());
  cmds.add(new CmdAfk());
  cmds.add(new CmdAlert());
  cmds.add(new CmdBack());
  cmds.add(new CmdBan());
  cmds.add(new CmdBanlist());
  cmds.add(new CmdBroadcast());
  cmds.add(new CmdBurn());
  cmds.add(new CmdButcher());
  cmds.add(new CmdClean());
  cmds.add(new CmdClear());
  cmds.add(new CmdClearchat());
  cmds.add(new CmdCompact());
  cmds.add(new CmdCompass());
  cmds.add(new CmdCoordinates());
  cmds.add(new CmdDamage());
  cmds.add(new CmdDeaf());
  cmds.add(new CmdDeaflist());
  cmds.add(new CmdDelhome());
  cmds.add(new CmdDeljail());
  cmds.add(new CmdDelwarp());
  cmds.add(new CmdEditsign());
  cmds.add(new CmdEffect());
  cmds.add(new CmdEnchant());
  cmds.add(new CmdEnderchest());
  cmds.add(new CmdExperience());
  cmds.add(new CmdExtinguish());
  cmds.add(new CmdFeed());
  cmds.add(new CmdFireball());
  cmds.add(new CmdFirework());
  cmds.add(new CmdFly());
  cmds.add(new CmdFreeze());
  cmds.add(new CmdFreezelist());
  cmds.add(new CmdGamemode());
  cmds.add(new CmdGarbagecollector());
  cmds.add(new CmdGive());
  cmds.add(new CmdGod());
  cmds.add(new CmdHat());
  cmds.add(new CmdHeal());
  cmds.add(new CmdHelp());
  cmds.add(new CmdHome());
  cmds.add(new CmdHomelist());
  cmds.add(new CmdHunger());
  cmds.add(new CmdInventory());
  cmds.add(new CmdIp());
  cmds.add(new CmdItem());
  cmds.add(new CmdJail());
  cmds.add(new CmdJaillist());
  cmds.add(new CmdJump());
  cmds.add(new CmdKick());
  cmds.add(new CmdKickall());
  cmds.add(new CmdKill());
  cmds.add(new CmdKillall());
  cmds.add(new CmdKit());
  cmds.add(new CmdKittycannon());
  cmds.add(new CmdLag());
  cmds.add(new CmdList());
  cmds.add(new CmdMe());
  cmds.add(new CmdMegasmite());
  cmds.add(new CmdMinecraftservers());
  cmds.add(new CmdMobtp());
  cmds.add(new CmdModify());
  cmds.add(new CmdMore());
  cmds.add(new CmdMotd());
  cmds.add(new CmdMsg());
  cmds.add(new CmdMute());
  cmds.add(new CmdMutelist());
  cmds.add(new CmdNames());
  cmds.add(new CmdNear());
  cmds.add(new CmdNick());
  cmds.add(new CmdPing());
  cmds.add(new CmdPlugin());
  cmds.add(new CmdPotion());
  cmds.add(new CmdPowertool());
  cmds.add(new CmdRealname());
  cmds.add(new CmdRecipe());
  cmds.add(new CmdRemoveall());
  cmds.add(new CmdRepair());
  cmds.add(new CmdReply());
  cmds.add(new CmdRules());
  cmds.add(new CmdSave());
  cmds.add(new CmdSay());
  cmds.add(new CmdSeen());
  cmds.add(new CmdSetarmor());
  cmds.add(new CmdSetexperience());
  cmds.add(new CmdSethealth());
  cmds.add(new CmdSethome());
  cmds.add(new CmdSethunger());
  cmds.add(new CmdSetjail());
  cmds.add(new CmdSetlevel());
  cmds.add(new CmdSetspawn());
  cmds.add(new CmdSetwarp());
  cmds.add(new CmdSkull());
  cmds.add(new CmdSmite());
  cmds.add(new CmdSpawn());
  cmds.add(new CmdSpawner());
  cmds.add(new CmdSpawnmob());
  cmds.add(new CmdSpeed());
  cmds.add(new CmdSpy());
  cmds.add(new CmdTeleport());
  cmds.add(new CmdTeleportaccept());
  cmds.add(new CmdTeleportall());
  cmds.add(new CmdTeleportask());
  cmds.add(new CmdTeleportaskall());
  cmds.add(new CmdTeleportdeny());
  cmds.add(new CmdTeleporthere());
  cmds.add(new CmdTeleporttoggle());
  cmds.add(new CmdTime());
  cmds.add(new CmdTop());
  cmds.add(new CmdUltimatecore());
  cmds.add(new CmdUnban());
  cmds.add(new CmdUndeaf());
  cmds.add(new CmdUnfreeze());
  cmds.add(new CmdUnjail());
  cmds.add(new CmdUnmute());
  cmds.add(new CmdUptime());
  cmds.add(new CmdUuid());
  cmds.add(new CmdVanish());
  cmds.add(new CmdWarp());
  cmds.add(new CmdWarplist());
  cmds.add(new CmdWeather());
  cmds.add(new CmdWorkbench());
  cmds.add(new CmdWorld());
  ucmds=new UltimateCommands();
  for (  UltimateCommand cmd : cmds) {
    if (Bukkit.getPluginCommand(""String_Node_Str"" + cmd.getName()) == null) {
      r.log(""String_Node_Str"" + cmd.getName());
      continue;
    }
    Bukkit.getPluginCommand(""String_Node_Str"" + cmd.getName()).setTabCompleter(ucmds);
  }
}",0.9967287367891292
141616,"public static void addConfig(){
{
    File tempFile;
    try {
      tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException ex) {
      ErrorLogger.log(ex,""String_Node_Str"");
      return;
    }
    try (FileOutputStream out=new FileOutputStream(tempFile)){
      tempFile.deleteOnExit();
      copy(Bukkit.getPluginManager().getPlugin(""String_Node_Str"").getResource(""String_Node_Str""),out);
      out.close();
    }
 catch (    IOException ex) {
      ErrorLogger.log(ex,""String_Node_Str"");
    }
catch (    Exception e) {
      r.log(""String_Node_Str"");
      r.log(""String_Node_Str"");
    }
    Config confL=new Config(tempFile);
    Config confS=r.getCnfg();
    for (    String s : confL.getKeys(true)) {
      if (!confS.contains(s) && !(confL.get(s) instanceof MemorySection)) {
        confS.set(s,confL.get(s));
      }
    }
    for (    String str : confL.getHeaders().keySet()) {
      confS.setHeader(str,confL.getHeaders().get(str));
    }
    confS.save();
    if (tempFile != null) {
      tempFile.delete();
    }
  }
  try {
    File tempFile;
    try {
      tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException ex) {
      ErrorLogger.log(ex,""String_Node_Str"");
      return;
    }
    try (FileOutputStream out=new FileOutputStream(tempFile);InputStream in=r.getUC().getResource(""String_Node_Str"")){
      tempFile.deleteOnExit();
      copy(in,out);
      in.close();
      out.close();
    }
 catch (    IOException ex) {
      ErrorLogger.log(ex,""String_Node_Str"");
    }
    ResourceBundle tempR;
    try {
      tempR=new PropertyResourceBundle(new FileInputStream(tempFile));
    }
 catch (    IOException ex) {
      ErrorLogger.log(ex,""String_Node_Str"");
      return;
    }
    Enumeration<String> keys=tempR.getKeys();
    Properties propsEN=new Properties();
    Properties propsCU=new Properties();
    FileInputStream strEN=new FileInputStream(ENf);
    FileInputStream strCU=new FileInputStream(LANGf);
    propsEN.load(strEN);
    propsCU.load(strCU);
    strEN.close();
    strCU.close();
    Boolean rl=false;
    while (keys.hasMoreElements()) {
      String key=keys.nextElement();
      if (!r.en.containsKey(key)) {
        rl=true;
        propsEN.put(key,tempR.getString(key));
      }
      if (!r.cu.containsKey(key)) {
        rl=true;
        propsCU.put(key,tempR.getString(key));
      }
    }
    if (rl) {
      FileOutputStream ENo=StreamUtil.createOutputStream(ENf);
      FileOutputStream CUo=StreamUtil.createOutputStream(LANGf);
      propsEN.store(ENo,""String_Node_Str"");
      propsCU.store(CUo,""String_Node_Str"" + (FilenameUtils.removeExtension(LANGf.getName())));
      ENo.close();
      CUo.close();
    }
    if (tempFile != null) {
      tempFile.delete();
    }
    if (rl) {
      InputStream inA=new FileInputStream(UltimateFileLoader.ENf);
      InputStream inB=new FileInputStream(UltimateFileLoader.LANGf);
      r.en=new PropertyResourceBundle(inA);
      r.cu=new PropertyResourceBundle(inB);
      inA.close();
      inB.close();
    }
  }
 catch (  IOException|SecurityException ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
}","public static void addConfig(){
{
    File tempFile;
    try {
      tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException ex) {
      ErrorLogger.log(ex,""String_Node_Str"");
      return;
    }
    try (FileOutputStream out=new FileOutputStream(tempFile)){
      tempFile.deleteOnExit();
      copy(Bukkit.getPluginManager().getPlugin(""String_Node_Str"").getResource(""String_Node_Str""),out);
      out.close();
    }
 catch (    IOException ex) {
      ErrorLogger.log(ex,""String_Node_Str"");
    }
catch (    Exception e) {
      r.log(""String_Node_Str"");
      r.log(""String_Node_Str"");
    }
    Config confL=new Config(tempFile);
    Config confS=r.getCnfg();
    Boolean changed=false;
    for (    String s : confL.getKeys(true)) {
      if (!confS.contains(s) && !(confL.get(s) instanceof MemorySection)) {
        confS.set(s,confL.get(s));
        changed=true;
      }
    }
    if (changed) {
      for (      String str : confL.getHeaders().keySet()) {
        confS.setHeader(str,confL.getHeaders().get(str));
      }
      confS.save();
    }
    if (tempFile != null) {
      tempFile.delete();
    }
  }
  try {
    File tempFile;
    try {
      tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException ex) {
      ErrorLogger.log(ex,""String_Node_Str"");
      return;
    }
    try (FileOutputStream out=new FileOutputStream(tempFile);InputStream in=r.getUC().getResource(""String_Node_Str"")){
      tempFile.deleteOnExit();
      copy(in,out);
      in.close();
      out.close();
    }
 catch (    IOException ex) {
      ErrorLogger.log(ex,""String_Node_Str"");
    }
    ResourceBundle tempR;
    try {
      tempR=new PropertyResourceBundle(new FileInputStream(tempFile));
    }
 catch (    IOException ex) {
      ErrorLogger.log(ex,""String_Node_Str"");
      return;
    }
    Enumeration<String> keys=tempR.getKeys();
    Properties propsEN=new Properties();
    Properties propsCU=new Properties();
    FileInputStream strEN=new FileInputStream(ENf);
    FileInputStream strCU=new FileInputStream(LANGf);
    propsEN.load(strEN);
    propsCU.load(strCU);
    strEN.close();
    strCU.close();
    Boolean rl=false;
    while (keys.hasMoreElements()) {
      String key=keys.nextElement();
      if (!r.en.containsKey(key)) {
        rl=true;
        propsEN.put(key,tempR.getString(key));
      }
      if (!r.cu.containsKey(key)) {
        rl=true;
        propsCU.put(key,tempR.getString(key));
      }
    }
    if (rl) {
      FileOutputStream ENo=StreamUtil.createOutputStream(ENf);
      FileOutputStream CUo=StreamUtil.createOutputStream(LANGf);
      propsEN.store(ENo,""String_Node_Str"");
      propsCU.store(CUo,""String_Node_Str"" + (FilenameUtils.removeExtension(LANGf.getName())));
      ENo.close();
      CUo.close();
    }
    if (tempFile != null) {
      tempFile.delete();
    }
    if (rl) {
      InputStream inA=new FileInputStream(UltimateFileLoader.ENf);
      InputStream inB=new FileInputStream(UltimateFileLoader.LANGf);
      r.en=new PropertyResourceBundle(inA);
      r.cu=new PropertyResourceBundle(inB);
      inA.close();
      inB.close();
    }
  }
 catch (  IOException|SecurityException ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
}",0.9854758961681088
141617,"public static void Enable(){
  Plugin plugin=r.getUC();
  if (!plugin.getDataFolder().exists()) {
    plugin.getDataFolder().mkdir();
  }
  conf=new File(plugin.getDataFolder() + ""String_Node_Str"");
  if (!conf.exists()) {
    plugin.saveResource(""String_Node_Str"",true);
  }
  messages=new File(plugin.getDataFolder(),""String_Node_Str"");
  datamap=new File(plugin.getDataFolder(),""String_Node_Str"");
  if (!datamap.exists()) {
    datamap.mkdir();
  }
  if (!messages.exists()) {
    messages.mkdir();
  }
  DFspawns=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  DFwarps=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  DFworlds=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  DFreports=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  DFjails=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  try {
    if (!DFspawns.exists()) {
      DFspawns.createNewFile();
    }
    if (!DFwarps.exists()) {
      DFwarps.createNewFile();
    }
    if (!DFworlds.exists()) {
      DFworlds.createNewFile();
    }
    if (!DFjails.exists()) {
      DFjails.createNewFile();
    }
  }
 catch (  Exception ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
  if (!new File(plugin.getDataFolder() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"").exists()) {
    plugin.saveResource(""String_Node_Str"" + File.separator + ""String_Node_Str"",true);
  }
  File file=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",r.getCnfg().getString(""String_Node_Str"") + ""String_Node_Str"");
  if (file.exists()) {
    LANGf=file;
  }
 else {
    LANGf=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  }
  ENf=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  for (  OfflinePlayer pl : r.getOfflinePlayers()) {
    try {
      getPlayerFile(pl);
    }
 catch (    Exception ex) {
      ErrorLogger.log(ex,""String_Node_Str"" + pl.getName() + ""String_Node_Str""+ pl.getUniqueId());
    }
  }
}","public static void Enable(){
  Plugin plugin=r.getUC();
  if (!plugin.getDataFolder().exists()) {
    plugin.getDataFolder().mkdir();
  }
  conf=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"");
  if (!conf.exists()) {
    plugin.saveResource(""String_Node_Str"",true);
  }
  messages=new File(plugin.getDataFolder(),""String_Node_Str"");
  datamap=new File(plugin.getDataFolder(),""String_Node_Str"");
  if (!datamap.exists()) {
    datamap.mkdir();
  }
  if (!messages.exists()) {
    messages.mkdir();
  }
  DFspawns=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  DFwarps=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  DFworlds=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  DFreports=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  DFjails=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  DFkits=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  try {
    if (!DFspawns.exists()) {
      DFspawns.createNewFile();
    }
    if (!DFwarps.exists()) {
      DFwarps.createNewFile();
    }
    if (!DFworlds.exists()) {
      DFworlds.createNewFile();
    }
    if (!DFjails.exists()) {
      DFjails.createNewFile();
    }
    if (!DFkits.exists()) {
      plugin.saveResource(""String_Node_Str"" + File.separator + ""String_Node_Str"",true);
    }
  }
 catch (  Exception ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
  if (!new File(plugin.getDataFolder() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"").exists()) {
    plugin.saveResource(""String_Node_Str"" + File.separator + ""String_Node_Str"",true);
  }
  File file=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",r.getCnfg().getString(""String_Node_Str"") + ""String_Node_Str"");
  if (file.exists()) {
    LANGf=file;
  }
 else {
    LANGf=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  }
  ENf=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"",""String_Node_Str"");
  for (  OfflinePlayer pl : r.getOfflinePlayers()) {
    try {
      getPlayerFile(pl);
    }
 catch (    Exception ex) {
      ErrorLogger.log(ex,""String_Node_Str"" + pl.getName() + ""String_Node_Str""+ pl.getUniqueId());
    }
  }
}",0.948823148348089
141618,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (r.checkArgs(args,0) == false) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  OfflinePlayer banp=r.searchOfflinePlayer(args[0]);
  if (banp == null || (!banp.hasPlayedBefore() && !banp.isOnline())) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  Long time=0L;
  String reason=r.mes(""String_Node_Str"");
  if (r.checkArgs(args,1) == false) {
  }
 else   if (DateUtil.parseDateDiff(args[1],true) == -1) {
    reason=r.getFinalArg(args,1);
  }
 else {
    time=DateUtil.parseDateDiff(args[1],true);
    if (r.checkArgs(args,2) == true) {
      reason=r.getFinalArg(args,2);
    }
  }
  String timen=DateUtil.format(time + System.currentTimeMillis());
  if (time == 0) {
    timen=r.mes(""String_Node_Str"");
  }
 else {
    timen=""String_Node_Str"" + timen;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time <= 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && !(time <= 0L)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String msg=r.mes(""String_Node_Str"").replace(""String_Node_Str"",timen).replace(""String_Node_Str"",reason);
  if (banp.isOnline()) {
    banp.getPlayer().kickPlayer(msg);
  }
  UPlayer pl=UC.getPlayer(banp);
  pl.ban(time,reason);
  if (r.getCnfg().getBoolean(""String_Node_Str"")) {
    Bukkit.broadcastMessage(r.mes(""String_Node_Str"").replace(""String_Node_Str"",((cs instanceof Player) ? cs.getName() : cs.getName().toLowerCase())).replace(""String_Node_Str"",banp.getName()).replace(""String_Node_Str"",timen).replace(""String_Node_Str"",reason));
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (r.checkArgs(args,0) == false) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  OfflinePlayer banp=r.searchOfflinePlayer(args[0]);
  if (banp == null || (!banp.hasPlayedBefore() && !banp.isOnline())) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  Long time=0L;
  String reason=r.mes(""String_Node_Str"");
  if (r.checkArgs(args,1) == false) {
  }
 else   if (DateUtil.parseDateDiff(args[1]) == -1) {
    reason=r.getFinalArg(args,1);
  }
 else {
    time=DateUtil.parseDateDiff(args[1]);
    if (r.checkArgs(args,2) == true) {
      reason=r.getFinalArg(args,2);
    }
  }
  String timen=DateUtil.format(time + System.currentTimeMillis());
  if (time == 0) {
    timen=r.mes(""String_Node_Str"");
  }
 else {
    timen=""String_Node_Str"" + timen;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time <= 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && !(time <= 0L)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String msg=r.mes(""String_Node_Str"").replace(""String_Node_Str"",timen).replace(""String_Node_Str"",reason);
  if (banp.isOnline()) {
    banp.getPlayer().kickPlayer(msg);
  }
  UPlayer pl=UC.getPlayer(banp);
  pl.ban(time,reason);
  if (r.getCnfg().getBoolean(""String_Node_Str"")) {
    Bukkit.broadcastMessage(r.mes(""String_Node_Str"").replace(""String_Node_Str"",((cs instanceof Player) ? cs.getName() : cs.getName().toLowerCase())).replace(""String_Node_Str"",banp.getName()).replace(""String_Node_Str"",timen).replace(""String_Node_Str"",reason));
  }
}",0.9972497249724972
141619,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (r.checkArgs(args,0) == false) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  OfflinePlayer banp=r.searchOfflinePlayer(args[0]);
  if (banp == null || (!banp.hasPlayedBefore() && !banp.isOnline())) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  Long time=0L;
  if (r.checkArgs(args,1) == false) {
  }
 else   if (DateUtil.parseDateDiff(args[1],true) != -1) {
    time=DateUtil.parseDateDiff(args[1],true);
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time == 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time != 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  UC.getPlayer(banp).setDeaf(true,time);
  if (time == 0L) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",banp.getName());
  }
 else {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",banp.getName(),""String_Node_Str"",DateUtil.format(time + System.currentTimeMillis()));
  }
  if (banp.isOnline()) {
    Player banp2=(Player)banp;
    r.sendMes(banp2,""String_Node_Str"");
  }
  return;
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (r.checkArgs(args,0) == false) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  OfflinePlayer banp=r.searchOfflinePlayer(args[0]);
  if (banp == null || (!banp.hasPlayedBefore() && !banp.isOnline())) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  Long time=0L;
  if (r.checkArgs(args,1) == false) {
  }
 else   if (DateUtil.parseDateDiff(args[1]) != -1) {
    time=DateUtil.parseDateDiff(args[1]);
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time == 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time != 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  UC.getPlayer(banp).setDeaf(true,time);
  if (time == 0L) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",banp.getName());
  }
 else {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",banp.getName(),""String_Node_Str"",DateUtil.format(time + System.currentTimeMillis()));
  }
  if (banp.isOnline()) {
    Player banp2=(Player)banp;
    r.sendMes(banp2,""String_Node_Str"");
  }
  return;
}",0.996022275258552
141620,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Player p=(Player)cs;
  Enchantment ench=EnchantmentDatabase.getByName(args[0]);
  if (ench == null) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  ItemStack stack=p.getItemInHand();
  if (stack == null || stack.getType() == null || stack.getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String name=ench.getName().replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
  Integer level=1;
  if (r.checkArgs(args,1) == true && r.isInt(args[1])) {
    level=Integer.parseInt(args[1]);
  }
  if (level < 0) {
    level=0;
  }
  if (level == 0) {
    stack.removeEnchantment(ench);
  }
 else {
    MetaItemStack stack2=new MetaItemStack(stack);
    stack2.addEnchantment(cs,true,ench,level);
    p.setItemInHand(stack2.getItemStack());
  }
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name,""String_Node_Str"",level,""String_Node_Str"",ItemUtil.getName(stack).toLowerCase());
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  Player p=(Player)cs;
  Enchantment ench=EnchantmentDatabase.getByName(args[0]);
  if (ench == null) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  ItemStack stack=p.getItemInHand();
  if (stack == null || stack.getType() == null || stack.getType().equals(Material.AIR)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  String name=ench.getName().replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
  Integer level=1;
  if (r.checkArgs(args,1) == true && r.isInt(args[1])) {
    level=Integer.parseInt(args[1]);
  }
  if (level < 0) {
    level=0;
  }
  if (level == 0) {
    stack.removeEnchantment(ench);
  }
 else {
    MetaItemStack stack2=new MetaItemStack(stack);
    stack2.addEnchantment(true,ench,level);
    p.setItemInHand(stack2.getItemStack());
  }
  r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",name,""String_Node_Str"",level,""String_Node_Str"",ItemUtil.getName(stack).toLowerCase());
}",0.9987740089906008
141621,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  Player p=(Player)cs;
  Boolean spawnin=!(p.getItemInHand().getType() == Material.FIREWORK);
  ItemStack stack=p.getItemInHand().getType() == Material.FIREWORK ? p.getItemInHand() : new ItemStack(Material.FIREWORK);
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && (p.getItemInHand().getType() == Material.FIREWORK)) {
    FireworkMeta fmeta=(FireworkMeta)stack.getItemMeta();
    fmeta.clearEffects();
    stack.setItemMeta(fmeta);
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  MetaItemStack mStack=new MetaItemStack(stack);
  for (  String arg : args) {
    if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
      FireworkMeta fmeta=(FireworkMeta)stack.getItemMeta();
      try {
        int power=Integer.parseInt(arg.split(""String_Node_Str"")[1]);
        try {
          mStack.addFireworkMeta(cs,true,""String_Node_Str"" + power);
        }
 catch (        Exception e) {
          r.sendMes(cs,""String_Node_Str"");
        }
      }
 catch (      NumberFormatException e) {
        r.sendMes(cs,""String_Node_Str"");
        return;
      }
      stack.setItemMeta(fmeta);
    }
 else     if (r.isInt(arg)) {
      stack.setAmount(Integer.parseInt(arg));
    }
 else {
      try {
        mStack.addFireworkMeta(p,true,arg);
      }
 catch (      Exception e) {
        r.sendMes(cs,""String_Node_Str"");
        return;
      }
    }
  }
  if (mStack.isValidFirework()) {
    FireworkMeta fmeta=(FireworkMeta)mStack.getItemStack().getItemMeta();
    FireworkEffect effect=mStack.getFireworkBuilder().build();
    fmeta.addEffect(effect);
    stack.setItemMeta(fmeta);
  }
 else {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (spawnin) {
    r.sendMes(cs,""String_Node_Str"");
    p.getInventory().addItem(stack);
  }
 else {
    r.sendMes(cs,""String_Node_Str"");
  }
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (!r.isPlayer(cs)) {
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,true)) {
    return;
  }
  Player p=(Player)cs;
  Boolean spawnin=!(p.getItemInHand().getType() == Material.FIREWORK);
  ItemStack stack=p.getItemInHand().getType() == Material.FIREWORK ? p.getItemInHand() : new ItemStack(Material.FIREWORK);
  if (!r.checkArgs(args,0)) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && (p.getItemInHand().getType() == Material.FIREWORK)) {
    FireworkMeta fmeta=(FireworkMeta)stack.getItemMeta();
    fmeta.clearEffects();
    stack.setItemMeta(fmeta);
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  MetaItemStack mStack=new MetaItemStack(stack);
  for (  String arg : args) {
    if (arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")) {
      FireworkMeta fmeta=(FireworkMeta)stack.getItemMeta();
      try {
        int power=Integer.parseInt(arg.split(""String_Node_Str"")[1]);
        try {
          mStack.addFireworkMeta(true,""String_Node_Str"" + power);
        }
 catch (        Exception e) {
          r.sendMes(cs,""String_Node_Str"");
        }
      }
 catch (      NumberFormatException e) {
        r.sendMes(cs,""String_Node_Str"");
        return;
      }
      stack.setItemMeta(fmeta);
    }
 else     if (r.isInt(arg)) {
      stack.setAmount(Integer.parseInt(arg));
    }
 else {
      try {
        mStack.addFireworkMeta(true,arg);
      }
 catch (      Exception e) {
        r.sendMes(cs,""String_Node_Str"");
        return;
      }
    }
  }
  if (mStack.isValidFirework()) {
    FireworkMeta fmeta=(FireworkMeta)mStack.getItemStack().getItemMeta();
    FireworkEffect effect=mStack.getFireworkBuilder().build();
    fmeta.addEffect(effect);
    stack.setItemMeta(fmeta);
  }
 else {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (spawnin) {
    r.sendMes(cs,""String_Node_Str"");
    p.getInventory().addItem(stack);
  }
 else {
    r.sendMes(cs,""String_Node_Str"");
  }
}",0.99880810488677
141622,"@Override public void run(final CommandSender cs,String label,String[] args){
  if (r.checkArgs(args,0) == false) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  OfflinePlayer t=r.searchOfflinePlayer(args[0]);
  if (t == null) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  Long time=0L;
  if (r.checkArgs(args,1) == false) {
  }
 else   if (DateUtil.parseDateDiff(args[1],true) != -1) {
    time=DateUtil.parseDateDiff(args[1],true);
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time == 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time != 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  UC.getPlayer(t).setFrozen(true,time);
  if (time == 0L) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName());
  }
 else {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",DateUtil.format(time + System.currentTimeMillis()));
  }
  if (t.isOnline()) {
    Player banp2=(Player)t;
    r.sendMes(banp2,""String_Node_Str"");
  }
  return;
}","@Override public void run(final CommandSender cs,String label,String[] args){
  if (r.checkArgs(args,0) == false) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  OfflinePlayer t=r.searchOfflinePlayer(args[0]);
  if (t == null) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",args[0]);
    return;
  }
  Long time=0L;
  if (r.checkArgs(args,1) == false) {
  }
 else   if (DateUtil.parseDateDiff(args[1]) != -1) {
    time=DateUtil.parseDateDiff(args[1]);
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time == 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  if (!r.perm(cs,""String_Node_Str"",false,false) && !r.perm(cs,""String_Node_Str"",false,false) && time != 0L) {
    r.sendMes(cs,""String_Node_Str"");
    return;
  }
  UC.getPlayer(t).setFrozen(true,time);
  if (time == 0L) {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName());
  }
 else {
    r.sendMes(cs,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",DateUtil.format(time + System.currentTimeMillis()));
  }
  if (t.isOnline()) {
    Player banp2=(Player)t;
    r.sendMes(banp2,""String_Node_Str"");
  }
  return;
}",0.9957947855340622
141623,"public static void runUpdater(){
  if (!r.getCnfg().getBoolean(""String_Node_Str"")) {
    return;
  }
  Boolean dl=r.getCnfg().getBoolean(""String_Node_Str"");
  updater=new UltimateUpdater(r.getUC(),66979,UltimateCore.getPluginFile(),dl ? UpdateType.DEFAULT : UpdateType.NO_DOWNLOAD,true);
  Thread thr=new Thread(new Runnable(){
    @Override public void run(){
      updater.waitForThread();
      try {
        if (updater.getResult().equals(UpdateResult.UPDATE_AVAILABLE)) {
          r.log(""String_Node_Str"");
          r.log(""String_Node_Str"");
        }
      }
 catch (      Exception ex) {
        ErrorLogger.log(ex,""String_Node_Str"");
      }
    }
  }
);
  thr.setName(""String_Node_Str"");
  thr.start();
}","public static void runUpdater(){
  if (!r.getCnfg().getBoolean(""String_Node_Str"")) {
    return;
  }
  Boolean dl=r.getCnfg().getBoolean(""String_Node_Str"");
  updater=new UltimateUpdater(r.getUC(),66979,UltimateCore.getPluginFile(),dl ? UpdateType.DEFAULT : UpdateType.NO_DOWNLOAD,true);
  Thread thr=new Thread(new Runnable(){
    @Override public void run(){
      updater.waitForThread();
      try {
        if (updater.getResult() == null || updater.getResult().equals(UpdateResult.UPDATE_AVAILABLE)) {
          r.log(""String_Node_Str"");
          r.log(""String_Node_Str"");
        }
      }
 catch (      Exception ex) {
        ErrorLogger.log(ex,""String_Node_Str"");
      }
    }
  }
);
  thr.setName(""String_Node_Str"");
  thr.start();
}",0.9787816563997264
141624,"@Override public void run(){
  updater.waitForThread();
  try {
    if (updater.getResult().equals(UpdateResult.UPDATE_AVAILABLE)) {
      r.log(""String_Node_Str"");
      r.log(""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
}","@Override public void run(){
  updater.waitForThread();
  try {
    if (updater.getResult() == null || updater.getResult().equals(UpdateResult.UPDATE_AVAILABLE)) {
      r.log(""String_Node_Str"");
      r.log(""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    ErrorLogger.log(ex,""String_Node_Str"");
  }
}",0.9477234401349072
141625,"protected void saveProject(){
  File output=getSelectedOutputFile(ZIP_FILTER);
  if (output != null) {
    Appender app=Logger.getRootLogger().getAppender(""String_Node_Str"");
    String logFile=null;
    if (app instanceof FileAppender && app != null) {
      logFile=((FileAppender)app).getFile();
    }
 else {
      logger.error(""String_Node_Str"");
    }
    ZipProject zp=new ZipProject(indatafile,inlabelsfile,inpointsfile,logFile);
    try {
      if (new File(output.getCanonicalPath()).exists()) {
        new File(output.getCanonicalPath()).delete();
      }
      zp.saveTo(output.getCanonicalPath());
    }
 catch (    IOException e) {
      logger.error(e,e);
      JOptionPane.showMessageDialog(this,e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}","protected void saveProject(){
  File output=getSelectedOutputFile(ZIP_FILTER);
  if (output != null && !output.equals(""String_Node_Str"")) {
    Appender app=Logger.getRootLogger().getAppender(""String_Node_Str"");
    String logFile=null;
    if (app instanceof FileAppender && app != null) {
      logFile=((FileAppender)app).getFile();
    }
 else {
      logger.error(""String_Node_Str"");
    }
    ZipProject zp=new ZipProject(indatafile,inlabelsfile,inpointsfile,logFile);
    try {
      if (new File(output.getCanonicalPath()).exists()) {
        new File(output.getCanonicalPath()).delete();
      }
      zp.saveTo(output.getCanonicalPath());
    }
 catch (    IOException e) {
      logger.error(e,e);
      JOptionPane.showMessageDialog(this,e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}",0.9769757311761046
141626,"protected void openProject(){
  String input=getSelectedInputFile(ZIP_FILTER);
  if (input != null) {
    ZipProject zip;
    try {
      zip=new ZipProject(input);
      this.textfield_file.setText(zip.getDataInputFile());
      if (zip.getLabelInputFile() != null) {
        this.textfield_labels.setText(zip.getLabelInputFile());
      }
      this.textfield_points_file.setText(zip.getPointInputFile());
      File f=new File(input);
      setWorkspaceName(f.getName());
    }
 catch (    IOException e) {
      logger.error(e,e);
      JOptionPane.showMessageDialog(this,e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}","protected void openProject(){
  String input=getSelectedInputFile(ZIP_FILTER);
  if (input != null && !input.equals(""String_Node_Str"")) {
    ZipProject zip;
    try {
      zip=new ZipProject(input);
      this.textfield_file.setText(zip.getDataInputFile());
      if (zip.getLabelInputFile() != null) {
        this.textfield_labels.setText(zip.getLabelInputFile());
      }
      this.textfield_points_file.setText(zip.getPointInputFile());
      File f=new File(input);
      setWorkspaceName(f.getName());
    }
 catch (    IOException e) {
      logger.error(e,e);
      JOptionPane.showMessageDialog(this,e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}",0.972972972972973
141627,"@Override public synchronized void init(VerifiableProperties props){
  if (!initialized) {
    KafkaMetricsConfig metricsConfig=new KafkaMetricsConfig(props);
    graphiteHost=props.getString(""String_Node_Str"",GRAPHITE_DEFAULT_HOST);
    graphitePort=props.getInt(""String_Node_Str"",GRAPHITE_DEFAULT_PORT);
    graphiteGroupPrefix=props.getString(""String_Node_Str"",GRAPHITE_DEFAULT_PREFIX);
    hostMatch=props.getString(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",hostMatch);
    System.setProperty(""String_Node_Str"",props.getString(""String_Node_Str"",""String_Node_Str""));
    System.setProperty(""String_Node_Str"",props.getString(""String_Node_Str"",""String_Node_Str""));
    System.setProperty(""String_Node_Str"",props.getString(""String_Node_Str"",""String_Node_Str""));
    System.setProperty(""String_Node_Str"",props.getString(""String_Node_Str"",""String_Node_Str""));
    System.setProperty(""String_Node_Str"",props.getString(""String_Node_Str"",""String_Node_Str""));
    System.setProperty(""String_Node_Str"",props.getString(""String_Node_Str"",""String_Node_Str""));
    try {
      graphiteSuffix=InetAddress.getLocalHost().getHostName().toLowerCase();
      if (graphiteSuffix.contains(""String_Node_Str"")) {
        String[] parts=graphiteSuffix.split(""String_Node_Str"");
        graphiteSuffix=parts[0];
      }
    }
 catch (    UnknownHostException e1) {
      LOG.error(e1);
    }
    String regex=props.getString(""String_Node_Str"",null);
    LOG.info(""String_Node_Str"" + graphiteHost + ""String_Node_Str""+ graphitePort+ ""String_Node_Str""+ graphiteGroupPrefix+ ""String_Node_Str""+ hostMatch+ ""String_Node_Str"");
    if (regex != null) {
      predicate=new RegexMetricPredicate(regex);
    }
    try {
      reporter=new GraphiteReporter(Metrics.defaultRegistry(),graphiteHost,graphitePort,graphiteGroupPrefix,graphiteSuffix);
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    if (props.getBoolean(""String_Node_Str"",false)) {
      initialized=true;
      startReporter(metricsConfig.pollingIntervalSecs());
      LOG.debug(""String_Node_Str"");
    }
  }
}","@Override public synchronized void init(VerifiableProperties props){
  if (!initialized) {
    KafkaMetricsConfig metricsConfig=new KafkaMetricsConfig(props);
    graphiteHost=props.getString(""String_Node_Str"",GRAPHITE_DEFAULT_HOST);
    graphitePort=props.getInt(""String_Node_Str"",GRAPHITE_DEFAULT_PORT);
    graphiteGroupPrefix=props.getString(""String_Node_Str"",GRAPHITE_DEFAULT_PREFIX);
    System.setProperty(""String_Node_Str"",props.getString(""String_Node_Str"",""String_Node_Str""));
    System.setProperty(""String_Node_Str"",props.getString(""String_Node_Str"",""String_Node_Str""));
    System.setProperty(""String_Node_Str"",props.getString(""String_Node_Str"",""String_Node_Str""));
    System.setProperty(""String_Node_Str"",props.getString(""String_Node_Str"",""String_Node_Str""));
    System.setProperty(""String_Node_Str"",props.getString(""String_Node_Str"",""String_Node_Str""));
    System.setProperty(""String_Node_Str"",props.getString(""String_Node_Str"",""String_Node_Str""));
    hostMatch=props.getString(""String_Node_Str"",""String_Node_Str"");
    try {
      graphiteSuffix=InetAddress.getLocalHost().getHostName().toLowerCase();
      if (graphiteSuffix.contains(""String_Node_Str"")) {
        String[] parts=graphiteSuffix.split(""String_Node_Str"");
        graphiteSuffix=parts[0];
      }
    }
 catch (    UnknownHostException e1) {
      LOG.error(e1);
    }
    String regex=props.getString(""String_Node_Str"",null);
    LOG.info(""String_Node_Str"" + graphiteHost + ""String_Node_Str""+ graphitePort+ ""String_Node_Str""+ graphiteGroupPrefix+ ""String_Node_Str""+ hostMatch+ ""String_Node_Str"");
    if (regex != null) {
      predicate=new RegexMetricPredicate(regex);
    }
    try {
      reporter=new GraphiteReporter(Metrics.defaultRegistry(),graphiteHost,graphitePort,graphiteGroupPrefix,graphiteSuffix);
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    if (props.getBoolean(""String_Node_Str"",false)) {
      initialized=true;
      startReporter(metricsConfig.pollingIntervalSecs());
      LOG.debug(""String_Node_Str"");
    }
  }
}",0.7111004555262527
141628,"@Override public void onBackPressed(){
  Fragment fg=getFragmentManager().findFragmentByTag(""String_Node_Str"");
  if (fg != null) {
    if (!((SelectFragment)fg).onBackPressed()) {
      super.onBackPressed();
    }
  }
}","@Override public void onBackPressed(){
  Fragment fg=getFragmentManager().findFragmentByTag(""String_Node_Str"");
  if (fg != null && ((SelectFragment)fg).onBackPressed()) {
    return;
  }
  super.onBackPressed();
}",0.9103448275862068
141629,"@Override public void onCreate(){
  super.onCreate();
  Log.i(TAG,""String_Node_Str"");
  prefs=PreferenceManager.getDefaultSharedPreferences(this);
  audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  remoteControl=new RemoteControl(this,audioManager);
  hasAudioFocus=requestAudioFocus();
  if (!hasAudioFocus) {
    Log.e(TAG,""String_Node_Str"");
  }
  receiverHelper=new ReceiverHelper(this);
  receiverHelper.registerReceivers();
  int bufferMs=prefs.getInt(Preferences.BUFFER_MS,DEFAULT_BUFFER_MS);
  if (bufferMs < MIN_BUFFER_MS) {
    bufferMs=MIN_BUFFER_MS;
  }
 else   if (bufferMs > MAX_BUFFER_MS) {
    bufferMs=MAX_BUFFER_MS;
  }
  sampleRate=Integer.parseInt(prefs.getString(Preferences.SAMPLING_RATE,""String_Node_Str""));
  if (Xmp.init(sampleRate,bufferMs)) {
    audioInitialized=true;
  }
  isAlive=false;
  isLoaded=false;
  paused=false;
  allSequences=prefs.getBoolean(Preferences.ALL_SEQUENCES,false);
  session=new MediaSessionWrapper(this,getPackageName());
  session.setActive(true);
  if (Build.VERSION.SDK_INT >= 21) {
    notifier=new LollipopNotifier(this,session.getSessionToken());
  }
 else {
    notifier=new LegacyNotifier(this);
  }
  watchdog=new Watchdog(10);
  watchdog.setOnTimeoutListener(new Watchdog.OnTimeoutListener(){
    public void onTimeout(){
      Log.e(TAG,""String_Node_Str"");
      audioManager.abandonAudioFocus(PlayerService.this);
      stopSelf();
    }
  }
);
  watchdog.start();
}","@Override public void onCreate(){
  super.onCreate();
  Log.i(TAG,""String_Node_Str"");
  prefs=PreferenceManager.getDefaultSharedPreferences(this);
  audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  remoteControl=new RemoteControl(this,audioManager);
  hasAudioFocus=requestAudioFocus();
  if (!hasAudioFocus) {
    Log.e(TAG,""String_Node_Str"");
  }
  receiverHelper=new ReceiverHelper(this);
  receiverHelper.registerReceivers();
  int bufferMs=prefs.getInt(Preferences.BUFFER_MS,DEFAULT_BUFFER_MS);
  if (bufferMs < MIN_BUFFER_MS) {
    bufferMs=MIN_BUFFER_MS;
  }
 else   if (bufferMs > MAX_BUFFER_MS) {
    bufferMs=MAX_BUFFER_MS;
  }
  sampleRate=Integer.parseInt(prefs.getString(Preferences.SAMPLING_RATE,""String_Node_Str""));
  if (Xmp.init(sampleRate,bufferMs)) {
    audioInitialized=true;
  }
  isAlive=false;
  isLoaded=false;
  paused=false;
  allSequences=prefs.getBoolean(Preferences.ALL_SEQUENCES,false);
  if (Build.VERSION.SDK_INT >= 21) {
    notifier=new LollipopNotifier(this);
  }
 else {
    notifier=new LegacyNotifier(this);
  }
  watchdog=new Watchdog(10);
  watchdog.setOnTimeoutListener(new Watchdog.OnTimeoutListener(){
    public void onTimeout(){
      Log.e(TAG,""String_Node_Str"");
      audioManager.abandonAudioFocus(PlayerService.this);
      stopSelf();
    }
  }
);
  watchdog.start();
}",0.9602862254025044
141630,"@Override public void onDestroy(){
  receiverHelper.unregisterReceivers();
  watchdog.stop();
  notifier.cancel();
  session.setActive(false);
  if (audioInitialized) {
    end(hasAudioFocus ? RESULT_OK : RESULT_NO_AUDIO_FOCUS);
  }
 else {
    end(RESULT_CANT_OPEN_AUDIO);
  }
  super.onDestroy();
}","@Override public void onDestroy(){
  receiverHelper.unregisterReceivers();
  watchdog.stop();
  notifier.cancel();
  if (audioInitialized) {
    end(hasAudioFocus ? RESULT_OK : RESULT_NO_AUDIO_FOCUS);
  }
 else {
    end(RESULT_CANT_OPEN_AUDIO);
  }
  super.onDestroy();
}",0.9475524475524476
141631,"public LollipopNotifier(final Service service,final MediaSession.Token token){
  super(service);
  this.token=token;
}","public LollipopNotifier(final Service service){
  super(service);
}",0.7243243243243244
141632,"@TargetApi(21) public void notify(String title,String info,final int index,final int type){
  if (title != null && title.trim().isEmpty()) {
    title=""String_Node_Str"";
  }
  final String indexText=formatIndex(index);
  if (type == TYPE_PAUSE) {
    info=""String_Node_Str"";
  }
  final Notification.Builder builder=new Notification.Builder(service).setContentTitle(title).setContentText(info).setContentInfo(indexText).setContentIntent(contentIntent).setSmallIcon(R.drawable.notification_icon).setLargeIcon(icon).setOngoing(true).setWhen(0).setStyle(new Notification.MediaStyle().setMediaSession(token).setShowActionsInCompactView(2)).setVisibility(Notification.VISIBILITY_PUBLIC).addAction(R.drawable.ic_action_previous,""String_Node_Str"",prevIntent).addAction(R.drawable.ic_action_stop,""String_Node_Str"",stopIntent);
  if (type == TYPE_PAUSE) {
    builder.addAction(R.drawable.ic_action_play,""String_Node_Str"",pauseIntent);
    builder.setContentText(""String_Node_Str"");
  }
 else {
    builder.addAction(R.drawable.ic_action_pause,""String_Node_Str"",pauseIntent);
  }
  builder.addAction(R.drawable.ic_action_next,""String_Node_Str"",nextIntent);
  if (type == TYPE_TICKER) {
    if (queue.size() > 1) {
      builder.setTicker(title + ""String_Node_Str"" + indexText+ ""String_Node_Str"");
    }
 else {
      builder.setTicker(title);
    }
  }
  service.startForeground(NOTIFY_ID,builder.build());
}","@TargetApi(21) public void notify(String title,String info,final int index,final int type){
  if (title != null && title.trim().isEmpty()) {
    title=""String_Node_Str"";
  }
  final String indexText=formatIndex(index);
  if (type == TYPE_PAUSE) {
    info=""String_Node_Str"";
  }
  final Notification.Builder builder=new Notification.Builder(service).setContentTitle(title).setContentText(info).setContentInfo(indexText).setContentIntent(contentIntent).setSmallIcon(R.drawable.notification_icon).setLargeIcon(icon).setOngoing(true).setWhen(0).setStyle(new Notification.MediaStyle().setShowActionsInCompactView(2)).setVisibility(Notification.VISIBILITY_PUBLIC).addAction(R.drawable.ic_action_previous,""String_Node_Str"",prevIntent).addAction(R.drawable.ic_action_stop,""String_Node_Str"",stopIntent);
  if (type == TYPE_PAUSE) {
    builder.addAction(R.drawable.ic_action_play,""String_Node_Str"",pauseIntent);
    builder.setContentText(""String_Node_Str"");
  }
 else {
    builder.addAction(R.drawable.ic_action_pause,""String_Node_Str"",pauseIntent);
  }
  builder.addAction(R.drawable.ic_action_next,""String_Node_Str"",nextIntent);
  if (type == TYPE_TICKER) {
    if (queue.size() > 1) {
      builder.setTicker(title + ""String_Node_Str"" + indexText+ ""String_Node_Str"");
    }
 else {
      builder.setTicker(title);
    }
  }
  service.startForeground(NOTIFY_ID,builder.build());
}",0.9917117117117116
141633,"public List<String> getFilenameList(final int location){
  final List<PlaylistItem> subItems=items.subList(location,items.size() - 1);
  final List<String> list=new ArrayList<String>();
  for (  final PlaylistItem item : subItems) {
    list.add(item.filename);
  }
  return list;
}","public List<String> getFilenameList(final int location){
  final List<PlaylistItem> subItems=items.subList(location,items.size());
  final List<String> list=new ArrayList<String>();
  for (  final PlaylistItem item : subItems) {
    list.add(item.filename);
  }
  return list;
}",0.9928571428571428
141634,"@Override public void onDestroy(){
  if (deleteDialog != null) {
    deleteDialog.cancel();
  }
  if (modPlayer != null) {
    try {
      modPlayer.unregisterCallback(playerCallback);
    }
 catch (    RemoteException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  unregisterReceiver(screenReceiver);
  Log.i(TAG,""String_Node_Str"");
  unbindService(connection);
  super.onDestroy();
}","@Override public void onDestroy(){
  if (deleteDialog != null) {
    deleteDialog.cancel();
  }
  if (modPlayer != null) {
    try {
      modPlayer.unregisterCallback(playerCallback);
    }
 catch (    RemoteException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  unregisterReceiver(screenReceiver);
  try {
    unbindService(connection);
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
    Log.i(TAG,""String_Node_Str"");
  }
  super.onDestroy();
}",0.821917808219178
141635,"@Override protected void onNewIntent(final Intent intent){
  boolean reconnect=false;
  Log.i(TAG,""String_Node_Str"");
  String path=null;
  if (intent.getData() != null) {
    path=intent.getData().getPath();
  }
  fileArray=null;
  if (path != null) {
    fileArray=new String[1];
    fileArray[0]=path;
    shuffleMode=false;
    loopListMode=false;
    start=0;
  }
 else {
    final Bundle extras=intent.getExtras();
    if (extras != null) {
      fileArray=extras.getStringArray(""String_Node_Str"");
      shuffleMode=extras.getBoolean(""String_Node_Str"");
      loopListMode=extras.getBoolean(""String_Node_Str"");
      start=extras.getInt(""String_Node_Str"");
    }
 else {
      reconnect=true;
    }
  }
  final Intent service=new Intent(this,PlayerService.class);
  if (!reconnect) {
    Log.i(TAG,""String_Node_Str"");
    startService(service);
  }
  if (!bindService(service,connection,0)) {
    Log.e(TAG,""String_Node_Str"");
    finish();
  }
}","@Override protected void onNewIntent(final Intent intent){
  boolean reconnect=false;
  boolean fromHistory=false;
  Log.i(TAG,""String_Node_Str"");
  if ((intent.getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
    Log.i(TAG,""String_Node_Str"");
    fromHistory=true;
  }
  String path=null;
  if (intent.getData() != null) {
    path=intent.getData().getPath();
  }
  fileArray=null;
  if (path != null) {
    Log.i(TAG,""String_Node_Str"");
    fileArray=new String[1];
    fileArray[0]=path;
    shuffleMode=false;
    loopListMode=false;
    start=0;
  }
 else   if (fromHistory) {
    Log.i(TAG,""String_Node_Str"");
    final Intent browserIntent=new Intent(this,PlaylistMenu.class);
    browserIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    startActivity(browserIntent);
    finish();
    return;
  }
 else {
    final Bundle extras=intent.getExtras();
    if (extras != null) {
      fileArray=extras.getStringArray(""String_Node_Str"");
      shuffleMode=extras.getBoolean(""String_Node_Str"");
      loopListMode=extras.getBoolean(""String_Node_Str"");
      start=extras.getInt(""String_Node_Str"");
    }
 else {
      reconnect=true;
    }
  }
  final Intent service=new Intent(this,PlayerService.class);
  if (!reconnect) {
    Log.i(TAG,""String_Node_Str"");
    startService(service);
  }
  if (!bindService(service,connection,0)) {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
}",0.8032026970080067
141636,"public void run(){
  final short buffer[]=new short[bufferSize];
  returnToPrev=false;
  do {
    fileName=queue.getFilename();
    if (!InfoCache.testModule(fileName)) {
      Log.w(TAG,fileName + ""String_Node_Str"");
      if (returnToPrev) {
        queue.previous();
      }
      continue;
    }
    Log.i(TAG,""String_Node_Str"" + fileName);
    if (Xmp.loadModule(fileName) < 0) {
      Log.e(TAG,""String_Node_Str"" + fileName);
      if (returnToPrev) {
        queue.previous();
      }
      continue;
    }
    returnToPrev=false;
    notifier.notification(Xmp.getModName(),queue.getIndex());
    isLoaded=true;
    for (int i=0; i < 64; i++) {
      Xmp.mute(i,0);
    }
    int numClients=callbacks.beginBroadcast();
    for (int j=0; j < numClients; j++) {
      try {
        callbacks.getBroadcastItem(j).newModCallback(fileName,Xmp.getInstruments());
      }
 catch (      RemoteException e) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
    callbacks.finishBroadcast();
    final String volBoost=prefs.getString(Preferences.VOL_BOOST,""String_Node_Str"");
    final int[] interpTypes={Xmp.XMP_INTERP_NEAREST,Xmp.XMP_INTERP_LINEAR,Xmp.XMP_INTERP_SPLINE};
    final int temp=Integer.parseInt(prefs.getString(Preferences.INTERP_TYPE,""String_Node_Str""));
    int interpType;
    if (temp >= 1 && temp <= 2) {
      interpType=interpTypes[temp];
    }
 else {
      interpType=Xmp.XMP_INTERP_LINEAR;
    }
    int dsp=0;
    if (prefs.getBoolean(Preferences.FILTER,true)) {
      dsp|=Xmp.XMP_DSP_LOWPASS;
    }
    if (!prefs.getBoolean(Preferences.INTERPOLATE,true)) {
      interpType=Xmp.XMP_INTERP_NEAREST;
    }
    audio.play();
    Xmp.startPlayer(0,sampleRate,sampleFormat);
    Xmp.setPlayer(Xmp.XMP_PLAYER_AMP,Integer.parseInt(volBoost));
    Xmp.setPlayer(Xmp.XMP_PLAYER_MIX,prefs.getInt(Preferences.PAN_SEPARATION,70));
    Xmp.setPlayer(Xmp.XMP_PLAYER_INTERP,interpType);
    Xmp.setPlayer(Xmp.XMP_PLAYER_DSP,dsp);
    updateData=true;
    int count;
    int loopCount=0;
    while (Xmp.playFrame() == 0) {
      count=Xmp.getLoopCount();
      if (!looped && count != loopCount) {
        break;
      }
      loopCount=count;
      final int size=Xmp.getBuffer(buffer);
      audio.write(buffer,0,size);
      while (paused) {
        audio.pause();
        watchdog.refresh();
        try {
          Thread.sleep(500);
          checkMediaButtons();
          checkNotificationButtons();
        }
 catch (        InterruptedException e) {
          break;
        }
      }
      audio.play();
      watchdog.refresh();
      checkMediaButtons();
      checkNotificationButtons();
    }
    Xmp.endPlayer();
    isLoaded=false;
    numClients=callbacks.beginBroadcast();
    for (int j=0; j < numClients; j++) {
      try {
        callbacks.getBroadcastItem(j).endModCallback();
      }
 catch (      RemoteException e) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
    callbacks.finishBroadcast();
    Xmp.releaseModule();
    audio.stop();
    if (restartList) {
      queue.setIndex(startIndex - 1);
      restartList=false;
      continue;
    }
    if (returnToPrev) {
      queue.previous();
      continue;
    }
  }
 while (!stopPlaying && queue.next());
synchronized (this) {
    updateData=false;
  }
  watchdog.stop();
  notifier.cancel();
  end();
  stopSelf();
}","public void run(){
  final short buffer[]=new short[bufferSize];
  returnToPrev=false;
  do {
    fileName=queue.getFilename();
    if (!InfoCache.testModule(fileName)) {
      Log.w(TAG,fileName + ""String_Node_Str"");
      if (returnToPrev) {
        queue.previous();
      }
      continue;
    }
    Log.i(TAG,""String_Node_Str"" + fileName);
    if (Xmp.loadModule(fileName) < 0) {
      Log.e(TAG,""String_Node_Str"" + fileName);
      if (returnToPrev) {
        queue.previous();
      }
      continue;
    }
    returnToPrev=false;
    notifier.notification(Xmp.getModName(),queue.getIndex());
    isLoaded=true;
    for (int i=0; i < 64; i++) {
      Xmp.mute(i,0);
    }
    int numClients=callbacks.beginBroadcast();
    for (int j=0; j < numClients; j++) {
      try {
        callbacks.getBroadcastItem(j).newModCallback(fileName,Xmp.getInstruments());
      }
 catch (      RemoteException e) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
    callbacks.finishBroadcast();
    final String volBoost=prefs.getString(Preferences.VOL_BOOST,""String_Node_Str"");
    final int[] interpTypes={Xmp.XMP_INTERP_NEAREST,Xmp.XMP_INTERP_LINEAR,Xmp.XMP_INTERP_SPLINE};
    final int temp=Integer.parseInt(prefs.getString(Preferences.INTERP_TYPE,""String_Node_Str""));
    int interpType;
    if (temp >= 1 && temp <= 2) {
      interpType=interpTypes[temp];
    }
 else {
      interpType=Xmp.XMP_INTERP_LINEAR;
    }
    int dsp=0;
    if (prefs.getBoolean(Preferences.FILTER,true)) {
      dsp|=Xmp.XMP_DSP_LOWPASS;
    }
    if (!prefs.getBoolean(Preferences.INTERPOLATE,true)) {
      interpType=Xmp.XMP_INTERP_NEAREST;
    }
    audio.play();
    Xmp.startPlayer(0,sampleRate,sampleFormat);
    Xmp.setPlayer(Xmp.XMP_PLAYER_AMP,Integer.parseInt(volBoost));
    Xmp.setPlayer(Xmp.XMP_PLAYER_MIX,prefs.getInt(Preferences.PAN_SEPARATION,70));
    Xmp.setPlayer(Xmp.XMP_PLAYER_INTERP,interpType);
    Xmp.setPlayer(Xmp.XMP_PLAYER_DSP,dsp);
    updateData=true;
    int count;
    int loopCount=0;
    while (Xmp.playFrame() == 0) {
      count=Xmp.getLoopCount();
      if (!looped && count != loopCount) {
        break;
      }
      loopCount=count;
      final int size=Xmp.getBuffer(buffer);
      audio.write(buffer,0,size);
      while (paused) {
        audio.pause();
        watchdog.refresh();
        try {
          Thread.sleep(500);
          checkMediaButtons();
          checkNotificationButtons();
        }
 catch (        InterruptedException e) {
          break;
        }
      }
      audio.play();
      watchdog.refresh();
      checkMediaButtons();
      checkNotificationButtons();
    }
    Xmp.endPlayer();
    isLoaded=false;
    numClients=callbacks.beginBroadcast();
    for (int j=0; j < numClients; j++) {
      try {
        callbacks.getBroadcastItem(j).endModCallback();
      }
 catch (      RemoteException e) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
    callbacks.finishBroadcast();
    Xmp.releaseModule();
    audio.stop();
    if (restartList) {
      queue.setIndex(startIndex - 1);
      restartList=false;
      continue;
    }
    if (returnToPrev) {
      queue.previous();
      continue;
    }
  }
 while (!stopPlaying && queue.next());
synchronized (this) {
    updateData=false;
  }
  watchdog.stop();
  notifier.cancel();
  end();
  Log.i(TAG,""String_Node_Str"");
  stopSelf();
}",0.994001199760048
141637,"public void onTimeout(){
  Log.e(TAG,""String_Node_Str"");
  stopSelf();
}","public void onTimeout(){
  Log.e(TAG,""String_Node_Str"");
  stopSelf();
  return;
}",0.935064935064935
141638,"protected void end(){
  Log.i(TAG,""String_Node_Str"");
  final int numClients=callbacks.beginBroadcast();
  for (int i=0; i < numClients; i++) {
    try {
      callbacks.getBroadcastItem(i).endPlayCallback();
    }
 catch (    RemoteException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  callbacks.finishBroadcast();
  isAlive=false;
  Xmp.stopModule();
  paused=false;
  if (playThread != null && playThread.isAlive()) {
    try {
      playThread.join();
    }
 catch (    InterruptedException e) {
    }
  }
  Xmp.deinit();
  audio.release();
}","private void end(){
  Log.i(TAG,""String_Node_Str"");
  final int numClients=callbacks.beginBroadcast();
  for (int i=0; i < numClients; i++) {
    try {
      callbacks.getBroadcastItem(i).endPlayCallback();
    }
 catch (    RemoteException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  callbacks.finishBroadcast();
  isAlive=false;
  Xmp.stopModule();
  paused=false;
  Xmp.deinit();
  audio.release();
}",0.7755946225439504
141639,"@Override public void onCreate(){
  super.onCreate();
  Log.i(TAG,""String_Node_Str"");
  prefs=PreferenceManager.getDefaultSharedPreferences(this);
  final int bufferMs=prefs.getInt(Preferences.BUFFER_MS,500);
  sampleRate=Integer.parseInt(prefs.getString(Preferences.SAMPLING_RATE,""String_Node_Str""));
  sampleFormat=0;
  final boolean stereo=prefs.getBoolean(Preferences.STEREO,true);
  if (!stereo) {
    sampleFormat|=Xmp.XMP_FORMAT_MONO;
  }
  bufferSize=(sampleRate * (stereo ? 2 : 1) * 2* bufferMs / 1000) & ~0x3;
  final int channelConfig=stereo ? AudioFormat.CHANNEL_OUT_STEREO : AudioFormat.CHANNEL_OUT_MONO;
  final int minSize=AudioTrack.getMinBufferSize(sampleRate,channelConfig,AudioFormat.ENCODING_PCM_16BIT);
  if (bufferSize < minSize) {
    bufferSize=minSize;
  }
  audio=new AudioTrack(AudioManager.STREAM_MUSIC,sampleRate,channelConfig,AudioFormat.ENCODING_PCM_16BIT,bufferSize,AudioTrack.MODE_STREAM);
  Xmp.init();
  isAlive=false;
  isLoaded=false;
  paused=false;
  notifier=new Notifier(this);
  final XmpPhoneStateListener listener=new XmpPhoneStateListener(this);
  final TelephonyManager tm=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
  tm.listen(listener,XmpPhoneStateListener.LISTEN_CALL_STATE);
  audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  remoteControlResponder=new ComponentName(getPackageName(),RemoteControlReceiver.class.getName());
  registerRemoteControl();
  watchdog=new Watchdog(10);
  watchdog.setOnTimeoutListener(new Watchdog.onTimeoutListener(){
    public void onTimeout(){
      Log.e(TAG,""String_Node_Str"");
      stopSelf();
    }
  }
);
  watchdog.start();
}","@Override public void onCreate(){
  super.onCreate();
  Log.i(TAG,""String_Node_Str"");
  prefs=PreferenceManager.getDefaultSharedPreferences(this);
  final int bufferMs=prefs.getInt(Preferences.BUFFER_MS,500);
  sampleRate=Integer.parseInt(prefs.getString(Preferences.SAMPLING_RATE,""String_Node_Str""));
  sampleFormat=0;
  final boolean stereo=prefs.getBoolean(Preferences.STEREO,true);
  if (!stereo) {
    sampleFormat|=Xmp.XMP_FORMAT_MONO;
  }
  bufferSize=(sampleRate * (stereo ? 2 : 1) * 2* bufferMs / 1000) & ~0x3;
  final int channelConfig=stereo ? AudioFormat.CHANNEL_OUT_STEREO : AudioFormat.CHANNEL_OUT_MONO;
  final int minSize=AudioTrack.getMinBufferSize(sampleRate,channelConfig,AudioFormat.ENCODING_PCM_16BIT);
  if (bufferSize < minSize) {
    bufferSize=minSize;
  }
  audio=new AudioTrack(AudioManager.STREAM_MUSIC,sampleRate,channelConfig,AudioFormat.ENCODING_PCM_16BIT,bufferSize,AudioTrack.MODE_STREAM);
  Xmp.init();
  isAlive=false;
  isLoaded=false;
  paused=false;
  notifier=new Notifier(this);
  final XmpPhoneStateListener listener=new XmpPhoneStateListener(this);
  final TelephonyManager tm=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
  tm.listen(listener,XmpPhoneStateListener.LISTEN_CALL_STATE);
  audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  remoteControlResponder=new ComponentName(getPackageName(),RemoteControlReceiver.class.getName());
  registerRemoteControl();
  watchdog=new Watchdog(10);
  watchdog.setOnTimeoutListener(new Watchdog.onTimeoutListener(){
    public void onTimeout(){
      Log.e(TAG,""String_Node_Str"");
      stopSelf();
      return;
    }
  }
);
  watchdog.start();
}",0.99578567128236
141640,"public void compareAddressBooks(boolean initMode){
  for (  String currentUID : listSyncContacts) {
    if (davContacts.get(currentUID) == null) {
      if (outlookContacts.get(currentUID) != null) {
        outlookContacts.get(currentUID).setStatus(Contact.Status.DELETE);
      }
    }
    if (outlookContacts.get(currentUID) == null) {
      if (davContacts.get(currentUID) != null) {
        davContacts.get(currentUID).setStatus(Contact.Status.DELETE);
      }
    }
  }
  List<Contact> newOutlookContacts=new ArrayList();
  List<Contact> newDAVContacts=new ArrayList();
  List<Contact> replacedOutlookContacts=new ArrayList();
  List<Contact> replacedlDAVContacts=new ArrayList();
  for (  Entry<String,Contact> outlookEntry : outlookContacts.entrySet()) {
    Contact outlookContact=outlookEntry.getValue();
    String outlookKey=outlookEntry.getKey();
    if (outlookContact.getStatus() != Contact.Status.READIN && outlookContact.getStatus() != Contact.Status.UIDADDED) {
      continue;
    }
    Contact davContact=davContacts.get(outlookKey);
    if ((outlookContact.getStatus() == Contact.Status.UIDADDED) != (davContact == null)) {
      Status.print(""String_Node_Str"");
      continue;
    }
    if (davContact == null) {
      if (initMode) {
        Contact equalDavContact=null;
        for (        Contact initDavContact : davContacts.values()) {
          if (outlookContact.equalTo(initDavContact) && initDavContact.getStatus() == Contact.Status.READIN) {
            equalDavContact=initDavContact;
            break;
          }
        }
        if (equalDavContact != null) {
          Contact newContact=new Contact(outlookContact,Contact.Status.UIDADDED,equalDavContact.getUid());
          newOutlookContacts.add(newContact);
          replacedOutlookContacts.add(outlookContact);
          equalDavContact.setStatus(Contact.Status.UNCHANGED);
          continue;
        }
      }
      Contact newContact=new Contact(outlookContact,Contact.Status.NEW);
      newDAVContacts.add(newContact);
      continue;
    }
    if (outlookContact.equalTo(davContact)) {
      outlookContact.setStatus(Contact.Status.UNCHANGED);
      davContact.setStatus(Contact.Status.UNCHANGED);
      continue;
    }
    if (outlookContact.getLastModificationTime().getTime() > davContact.getLastModificationTime().getTime()) {
      replacedlDAVContacts.add(davContact);
      Contact newContact=new Contact(outlookContact,Contact.Status.CHANGED);
      newDAVContacts.add(newContact);
      outlookContact.setStatus(Contact.Status.UNCHANGED);
      davContact.setStatus(Contact.Status.DELETE);
    }
 else {
      replacedOutlookContacts.add(outlookContact);
      Contact newContact=new Contact(davContact,Contact.Status.CHANGED);
      newContact.setEntryID(outlookContact.getEntryID());
      newOutlookContacts.add(newContact);
      davContact.setStatus(Contact.Status.UNCHANGED);
      outlookContact.setStatus(Contact.Status.DELETE);
    }
  }
  for (  Contact contact : replacedOutlookContacts) {
    this.removeContact(Addressbook.OUTLOOKADDRESSBOOK,contact.getUid());
  }
  for (  Contact contact : replacedlDAVContacts) {
    this.removeContact(Addressbook.WEBDAVADDRESSBOOK,contact.getUid());
  }
  for (  Contact contact : newDAVContacts) {
    this.addContact(Contacts.Addressbook.WEBDAVADDRESSBOOK,contact);
  }
  for (  Entry<String,Contact> davEntry : davContacts.entrySet()) {
    Contact davContact=davEntry.getValue();
    String davKey=davEntry.getKey();
    if (davContact.getStatus() != Contact.Status.READIN && (davContact.getStatus() != Contact.Status.UIDADDED)) {
      continue;
    }
    Contact outlookContact=outlookContacts.get(davKey);
    if (outlookContact == null) {
      Contact newContact=new Contact(davContact,Contact.Status.NEW);
      newOutlookContacts.add(newContact);
    }
  }
  for (  Contact contact : newOutlookContacts) {
    this.addContact(Contacts.Addressbook.OUTLOOKADDRESSBOOK,contact);
  }
}","public void compareAddressBooks(boolean initMode){
  for (  String currentUID : listSyncContacts) {
    if (davContacts.get(currentUID) == null) {
      if (outlookContacts.get(currentUID) != null) {
        outlookContacts.get(currentUID).setStatus(Contact.Status.DELETE);
      }
    }
    if (outlookContacts.get(currentUID) == null) {
      if (davContacts.get(currentUID) != null) {
        davContacts.get(currentUID).setStatus(Contact.Status.DELETE);
      }
    }
  }
  List<Contact> newOutlookContacts=new ArrayList();
  List<Contact> newDAVContacts=new ArrayList();
  List<Contact> replacedOutlookContacts=new ArrayList();
  List<Contact> replacedlDAVContacts=new ArrayList();
  for (  Entry<String,Contact> outlookEntry : outlookContacts.entrySet()) {
    Contact outlookContact=outlookEntry.getValue();
    String outlookKey=outlookEntry.getKey();
    if (outlookContact.getStatus() != Contact.Status.READIN && outlookContact.getStatus() != Contact.Status.UIDADDED) {
      continue;
    }
    Contact davContact=davContacts.get(outlookKey);
    if ((outlookContact.getStatus() == Contact.Status.UIDADDED) != (davContact == null)) {
      if (!initMode) {
        Status.print(""String_Node_Str"");
        continue;
      }
    }
    if (davContact == null) {
      if (initMode) {
        Contact equalDavContact=null;
        for (        Contact initDavContact : davContacts.values()) {
          if (outlookContact.equalTo(initDavContact) && initDavContact.getStatus() == Contact.Status.READIN) {
            equalDavContact=initDavContact;
            break;
          }
        }
        if (equalDavContact != null) {
          Contact newContact=new Contact(outlookContact,Contact.Status.UIDADDED,equalDavContact.getUid());
          newOutlookContacts.add(newContact);
          replacedOutlookContacts.add(outlookContact);
          equalDavContact.setStatus(Contact.Status.UNCHANGED);
          continue;
        }
      }
      Contact newContact=new Contact(outlookContact,Contact.Status.NEW);
      newDAVContacts.add(newContact);
      continue;
    }
    if (outlookContact.equalTo(davContact)) {
      outlookContact.setStatus(Contact.Status.UNCHANGED);
      davContact.setStatus(Contact.Status.UNCHANGED);
      continue;
    }
    if (outlookContact.getLastModificationTime().getTime() > davContact.getLastModificationTime().getTime()) {
      replacedlDAVContacts.add(davContact);
      Contact newContact=new Contact(outlookContact,Contact.Status.CHANGED);
      newDAVContacts.add(newContact);
      outlookContact.setStatus(Contact.Status.UNCHANGED);
      davContact.setStatus(Contact.Status.DELETE);
    }
 else {
      replacedOutlookContacts.add(outlookContact);
      Contact newContact=new Contact(davContact,Contact.Status.CHANGED);
      newContact.setEntryID(outlookContact.getEntryID());
      newOutlookContacts.add(newContact);
      davContact.setStatus(Contact.Status.UNCHANGED);
      outlookContact.setStatus(Contact.Status.DELETE);
    }
  }
  for (  Contact contact : replacedOutlookContacts) {
    this.removeContact(Addressbook.OUTLOOKADDRESSBOOK,contact.getUid());
  }
  for (  Contact contact : replacedlDAVContacts) {
    this.removeContact(Addressbook.WEBDAVADDRESSBOOK,contact.getUid());
  }
  for (  Contact contact : newDAVContacts) {
    this.addContact(Contacts.Addressbook.WEBDAVADDRESSBOOK,contact);
  }
  for (  Entry<String,Contact> davEntry : davContacts.entrySet()) {
    Contact davContact=davEntry.getValue();
    String davKey=davEntry.getKey();
    if (davContact.getStatus() != Contact.Status.READIN && (davContact.getStatus() != Contact.Status.UIDADDED)) {
      continue;
    }
    Contact outlookContact=outlookContacts.get(davKey);
    if (outlookContact == null) {
      Contact newContact=new Contact(davContact,Contact.Status.NEW);
      newOutlookContacts.add(newContact);
    }
  }
  for (  Contact contact : newOutlookContacts) {
    this.addContact(Contacts.Addressbook.OUTLOOKADDRESSBOOK,contact);
  }
}",0.99332913782253
141641,"/** 
 * Create contact from Outlook.
 */
public Contact(String strUid,String strEntryID,String strTitle,String strFirstName,String strMiddleName,String strLastName,String strSuffix,String strCompanyName,String strJobTitle,String strEmail1Address,String strEmail2Address,String strEmail3Address,String strWebPage,String strMobileTelephoneNumber,String strAssistantTelephoneNumber,String strCallbackTelephoneNumber,String strCarTelephoneNumber,String strCompanyMainTelephoneNumber,String strOtherTelephoneNumber,String strPrimaryTelephoneNumber,String strRadioTelephoneNumber,String strTTYTDDTelephoneNumber,String strBusinessTelephoneNumber,String strBusiness2TelephoneNumber,String strBusinessFaxNumber,String strHomeTelephoneNumber,String strHome2TelephoneNumber,String strHomeFaxNumber,String strHomeAddressCity,String strHomeAddressCountry,String strHomeAddressPostalCode,String strHomeAddressState,String strHomeAddressStreet,String strBusinessAddressCity,String strBusinessAddressCountry,String strBusinessAddressPostalCode,String strBusinessAddressState,String strBusinessAddressStreet,String strBody,Calendar calBirthday,Calendar calAnniversary,String strPathToTmpPicture,String strLastModificationTime){
  this.statusConntact=Status.READIN;
  this.vcard=new VCard();
  if (strUid.isEmpty()) {
    this.vcard.setUid(Uid.random());
    this.statusConntact=Status.UIDADDED;
  }
 else {
    this.vcard.setUid(new Uid(strUid.trim()));
  }
  this.strUid=this.vcard.getUid().getValue();
  this.strFileOnDavServer=null;
  if (strEntryID.length() > 0) {
    this.strEntryID=strEntryID;
  }
  if (strTitle.length() > 0 || strFirstName.length() > 0 || strMiddleName.length() > 0 || strLastName.length() > 0 || strSuffix.length() > 0) {
    StructuredName sn=new StructuredName();
    sn.addPrefix(strTitle);
    sn.setGiven(strFirstName);
    sn.addAdditional(strMiddleName);
    sn.setFamily(strLastName);
    sn.addSuffix(strSuffix);
    this.vcard.setStructuredName(sn);
  }
  if (strCompanyName.length() > 0) {
    Organization org=new Organization();
    org.addValue(strCompanyName);
    this.vcard.setOrganization(org);
  }
  if (strJobTitle.length() > 0) {
    this.vcard.addTitle(new Title(strJobTitle));
  }
  if (strEmail1Address.length() > 0) {
    Email email=new Email(strEmail1Address);
    email.addType(EmailType.HOME);
    this.vcard.addEmail(email);
  }
  if (strEmail2Address.length() > 0) {
    Email email=new Email(strEmail2Address);
    email.addType(EmailType.WORK);
    this.vcard.addEmail(email);
  }
  if (strEmail3Address.length() > 0) {
    Email email=new Email(strEmail3Address);
    email.addType(EmailType.INTERNET);
    this.vcard.addEmail(email);
  }
  if (strWebPage.length() > 0) {
    this.vcard.addUrl(new Url(strWebPage));
  }
  if (strMobileTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strMobileTelephoneNumber);
    tel.addType(TelephoneType.CELL);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strAssistantTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strAssistantTelephoneNumber);
    tel.addType(TelephoneType.BBS);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strCallbackTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strCallbackTelephoneNumber);
    tel.addType(TelephoneType.MODEM);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strCarTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strCarTelephoneNumber);
    tel.addType(TelephoneType.PAGER);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strCompanyMainTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strCompanyMainTelephoneNumber);
    tel.addType(TelephoneType.PCS);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strOtherTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strOtherTelephoneNumber);
    tel.addType(TelephoneType.PREF);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strPrimaryTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strPrimaryTelephoneNumber);
    tel.addType(TelephoneType.VIDEO);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strRadioTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strRadioTelephoneNumber);
    tel.addType(TelephoneType.VOICE);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strTTYTDDTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strTTYTDDTelephoneNumber);
    tel.addType(TelephoneType.TEXT);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strBusinessTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strBusinessTelephoneNumber);
    tel.addType(TelephoneType.WORK);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strBusiness2TelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strBusiness2TelephoneNumber);
    tel.addType(TelephoneType.CAR);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strBusinessFaxNumber.length() > 0) {
    Telephone tel=new Telephone(strBusinessFaxNumber);
    tel.addType(TelephoneType.FAX);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strHomeTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strHomeTelephoneNumber);
    tel.addType(TelephoneType.HOME);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strHome2TelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strHome2TelephoneNumber);
    tel.addType(TelephoneType.ISDN);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strHomeFaxNumber.length() > 0) {
    Telephone tel=new Telephone(strHomeFaxNumber);
    tel.addType(TelephoneType.MSG);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strHomeAddressStreet.length() > 0 || strHomeAddressCity.length() > 0 || strHomeAddressState.length() > 0 || strHomeAddressPostalCode.length() > 0 || strHomeAddressCountry.length() > 0) {
    Address adr=new Address();
    adr.setStreetAddress(strHomeAddressStreet);
    adr.setLocality(strHomeAddressCity);
    adr.setRegion(strHomeAddressState);
    adr.setPostalCode(strHomeAddressPostalCode);
    adr.setCountry(strHomeAddressCountry);
    adr.addType(AddressType.HOME);
    this.vcard.addAddress(adr);
  }
  if (strBusinessAddressStreet.length() > 0 || strBusinessAddressCity.length() > 0 || strBusinessAddressState.length() > 0 || strBusinessAddressPostalCode.length() > 0 || strBusinessAddressCountry.length() > 0) {
    Address adr=new Address();
    adr.setStreetAddress(strBusinessAddressStreet);
    adr.setLocality(strBusinessAddressCity);
    adr.setRegion(strBusinessAddressState);
    adr.setPostalCode(strBusinessAddressPostalCode);
    adr.setCountry(strBusinessAddressCountry);
    adr.addType(AddressType.WORK);
    this.vcard.addAddress(adr);
  }
  if (strBody.length() > 0) {
    Note note=new Note(strBody);
    this.vcard.addNote(note);
  }
  if (calBirthday != null) {
    this.vcard.setBirthday(new Birthday(calBirthday.getTime()));
  }
  if (calAnniversary != null) {
    this.vcard.setAnniversary(new Anniversary(calAnniversary.getTime()));
  }
  if (strPathToTmpPicture != null) {
    this.strPathToContactPicture=strPathToTmpPicture;
    File tmpFile=new File(this.strPathToContactPicture);
    if (tmpFile.exists()) {
      try {
        this.vcard.addPhoto(new Photo(Files.readAllBytes(tmpFile.toPath()),ImageType.JPEG));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  try {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
    this.dateLastModificationTme=sdf.parse(strLastModificationTime);
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
}","/** 
 * Create contact from Outlook.
 */
public Contact(String strUid,String strEntryID,String strTitle,String strFirstName,String strMiddleName,String strLastName,String strSuffix,String strCompanyName,String strJobTitle,String strEmail1Address,String strEmail2Address,String strEmail3Address,String strWebPage,String strMobileTelephoneNumber,String strAssistantTelephoneNumber,String strCallbackTelephoneNumber,String strCarTelephoneNumber,String strCompanyMainTelephoneNumber,String strOtherTelephoneNumber,String strPrimaryTelephoneNumber,String strRadioTelephoneNumber,String strTTYTDDTelephoneNumber,String strBusinessTelephoneNumber,String strBusiness2TelephoneNumber,String strBusinessFaxNumber,String strHomeTelephoneNumber,String strHome2TelephoneNumber,String strHomeFaxNumber,String strHomeAddressCity,String strHomeAddressCountry,String strHomeAddressPostalCode,String strHomeAddressState,String strHomeAddressStreet,String strBusinessAddressCity,String strBusinessAddressCountry,String strBusinessAddressPostalCode,String strBusinessAddressState,String strBusinessAddressStreet,String strBody,Calendar calBirthday,Calendar calAnniversary,String strPathToTmpPicture,String strLastModificationTime){
  this.statusConntact=Status.READIN;
  this.vcard=new VCard();
  if (strUid.isEmpty())   strUid=LegacyCorrectionUtilities.getBodyUID(strBody);
  if (strUid.isEmpty()) {
    this.vcard.setUid(Uid.random());
    this.statusConntact=Status.UIDADDED;
  }
 else {
    this.vcard.setUid(new Uid(strUid.trim()));
  }
  this.strUid=this.vcard.getUid().getValue();
  this.strFileOnDavServer=null;
  if (strEntryID.length() > 0) {
    this.strEntryID=strEntryID;
  }
  if (strTitle.length() > 0 || strFirstName.length() > 0 || strMiddleName.length() > 0 || strLastName.length() > 0 || strSuffix.length() > 0) {
    StructuredName sn=new StructuredName();
    sn.addPrefix(strTitle);
    sn.setGiven(strFirstName);
    sn.addAdditional(strMiddleName);
    sn.setFamily(strLastName);
    sn.addSuffix(strSuffix);
    this.vcard.setStructuredName(sn);
  }
  if (strCompanyName.length() > 0) {
    Organization org=new Organization();
    org.addValue(strCompanyName);
    this.vcard.setOrganization(org);
  }
  if (strJobTitle.length() > 0) {
    this.vcard.addTitle(new Title(strJobTitle));
  }
  if (strEmail1Address.length() > 0) {
    Email email=new Email(strEmail1Address);
    email.addType(EmailType.HOME);
    this.vcard.addEmail(email);
  }
  if (strEmail2Address.length() > 0) {
    Email email=new Email(strEmail2Address);
    email.addType(EmailType.WORK);
    this.vcard.addEmail(email);
  }
  if (strEmail3Address.length() > 0) {
    Email email=new Email(strEmail3Address);
    email.addType(EmailType.INTERNET);
    this.vcard.addEmail(email);
  }
  if (strWebPage.length() > 0) {
    this.vcard.addUrl(new Url(strWebPage));
  }
  if (strMobileTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strMobileTelephoneNumber);
    tel.addType(TelephoneType.CELL);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strAssistantTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strAssistantTelephoneNumber);
    tel.addType(TelephoneType.BBS);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strCallbackTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strCallbackTelephoneNumber);
    tel.addType(TelephoneType.MODEM);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strCarTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strCarTelephoneNumber);
    tel.addType(TelephoneType.PAGER);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strCompanyMainTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strCompanyMainTelephoneNumber);
    tel.addType(TelephoneType.PCS);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strOtherTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strOtherTelephoneNumber);
    tel.addType(TelephoneType.PREF);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strPrimaryTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strPrimaryTelephoneNumber);
    tel.addType(TelephoneType.VIDEO);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strRadioTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strRadioTelephoneNumber);
    tel.addType(TelephoneType.VOICE);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strTTYTDDTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strTTYTDDTelephoneNumber);
    tel.addType(TelephoneType.TEXT);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strBusinessTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strBusinessTelephoneNumber);
    tel.addType(TelephoneType.WORK);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strBusiness2TelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strBusiness2TelephoneNumber);
    tel.addType(TelephoneType.CAR);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strBusinessFaxNumber.length() > 0) {
    Telephone tel=new Telephone(strBusinessFaxNumber);
    tel.addType(TelephoneType.FAX);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strHomeTelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strHomeTelephoneNumber);
    tel.addType(TelephoneType.HOME);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strHome2TelephoneNumber.length() > 0) {
    Telephone tel=new Telephone(strHome2TelephoneNumber);
    tel.addType(TelephoneType.ISDN);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strHomeFaxNumber.length() > 0) {
    Telephone tel=new Telephone(strHomeFaxNumber);
    tel.addType(TelephoneType.MSG);
    this.vcard.addTelephoneNumber(tel);
  }
  if (strHomeAddressStreet.length() > 0 || strHomeAddressCity.length() > 0 || strHomeAddressState.length() > 0 || strHomeAddressPostalCode.length() > 0 || strHomeAddressCountry.length() > 0) {
    Address adr=new Address();
    adr.setStreetAddress(strHomeAddressStreet);
    adr.setLocality(strHomeAddressCity);
    adr.setRegion(strHomeAddressState);
    adr.setPostalCode(strHomeAddressPostalCode);
    adr.setCountry(strHomeAddressCountry);
    adr.addType(AddressType.HOME);
    this.vcard.addAddress(adr);
  }
  if (strBusinessAddressStreet.length() > 0 || strBusinessAddressCity.length() > 0 || strBusinessAddressState.length() > 0 || strBusinessAddressPostalCode.length() > 0 || strBusinessAddressCountry.length() > 0) {
    Address adr=new Address();
    adr.setStreetAddress(strBusinessAddressStreet);
    adr.setLocality(strBusinessAddressCity);
    adr.setRegion(strBusinessAddressState);
    adr.setPostalCode(strBusinessAddressPostalCode);
    adr.setCountry(strBusinessAddressCountry);
    adr.addType(AddressType.WORK);
    this.vcard.addAddress(adr);
  }
  if (strBody.length() > 0) {
    Note note=new Note(strBody);
    this.vcard.addNote(note);
  }
  if (calBirthday != null) {
    this.vcard.setBirthday(new Birthday(calBirthday.getTime()));
  }
  if (calAnniversary != null) {
    this.vcard.setAnniversary(new Anniversary(calAnniversary.getTime()));
  }
  if (strPathToTmpPicture != null) {
    this.strPathToContactPicture=strPathToTmpPicture;
    File tmpFile=new File(this.strPathToContactPicture);
    if (tmpFile.exists()) {
      try {
        this.vcard.addPhoto(new Photo(Files.readAllBytes(tmpFile.toPath()),ImageType.JPEG));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  try {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
    this.dateLastModificationTme=sdf.parse(strLastModificationTime);
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
}",0.99471388925598
141642,"static public Uid getBodyUID(String strBody){
  if (strBody.contains(""String_Node_Str"")) {
    String[] result=strBody.split(""String_Node_Str"");
    for (int i=0; i < result.length; i++) {
      if (result[i].contains(""String_Node_Str""))       return new Uid(result[i + 1].trim());
    }
  }
  return null;
}","static public String getBodyUID(String strBody){
  if (strBody.contains(""String_Node_Str"")) {
    String[] result=strBody.split(""String_Node_Str"");
    for (int i=0; i < result.length; i++) {
      if (result[i].contains(""String_Node_Str""))       return result[i + 1].trim();
    }
  }
  return null;
}",0.9704918032786886
141643,"protected String getNewOutlookItem(){
  Dispatch dipItem=Dispatch.call(ManageOutlook.dipOutlook,""String_Node_Str"",new Variant(2)).toDispatch();
  String strNewItemEntryID=Dispatch.get(dipItem,""String_Node_Str"").toString().trim();
  dipItem.safeRelease();
  return strNewItemEntryID;
}","protected String getNewOutlookItem(){
  Dispatch dipItem=Dispatch.call(ManageOutlook.dipOutlook,""String_Node_Str"",new Variant(2)).toDispatch();
  Dispatch.call(dipItem,""String_Node_Str"");
  String strNewItemEntryID=Dispatch.get(dipItem,""String_Node_Str"").toString().trim();
  dipItem.safeRelease();
  return strNewItemEntryID;
}",0.9281045751633988
141644,"public void removeEntry(Entry entry){
  mEntries.remove(entry.getKey());
}","public void removeEntry(Entry entry){
  mEntries.remove(entry);
}",0.935251798561151
141645,"private Plugin addFileInstallPlugin(JobInfo job){
  Plugin plugin=new Plugin();
  plugin.setGroupId(""String_Node_Str"");
  plugin.setArtifactId(""String_Node_Str"");
  plugin.setVersion(""String_Node_Str"");
  String jobVersion=PomIdsHelper.getJobVersion(job);
  Xpp3Dom configuration=new Xpp3Dom(""String_Node_Str"");
  Xpp3Dom groupId=new Xpp3Dom(""String_Node_Str"");
  groupId.setValue(model.getGroupId());
  Xpp3Dom artifactId=new Xpp3Dom(""String_Node_Str"");
  artifactId.setValue(model.getArtifactId() + ""String_Node_Str"" + job.getJobName());
  Xpp3Dom version=new Xpp3Dom(""String_Node_Str"");
  version.setValue(PomIdsHelper.getJobVersion(job.getProcessItem().getProperty()));
  Xpp3Dom packaging=new Xpp3Dom(""String_Node_Str"");
  packaging.setValue(""String_Node_Str"");
  Xpp3Dom file=new Xpp3Dom(""String_Node_Str"");
  IPath currentProjectRootDir=getJobProcessor().getTalendJavaProject().getProject().getLocation();
  IPath targetDir=getProcessor(job).getTalendJavaProject().getTargetFolder().getLocation();
  String relativeTargetDir=targetDir.makeRelativeTo(currentProjectRootDir).toString();
  String pathToJar=relativeTargetDir + Path.SEPARATOR + job.getJobName().toLowerCase()+ ""String_Node_Str""+ jobVersion.replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
  file.setValue(pathToJar);
  Xpp3Dom generatePom=new Xpp3Dom(""String_Node_Str"");
  generatePom.setValue(""String_Node_Str"");
  configuration.addChild(groupId);
  configuration.addChild(artifactId);
  configuration.addChild(version);
  configuration.addChild(packaging);
  configuration.addChild(file);
  configuration.addChild(generatePom);
  List<PluginExecution> pluginExecutions=new ArrayList<PluginExecution>();
  PluginExecution pluginExecution=new PluginExecution();
  pluginExecution.setId(""String_Node_Str"");
  pluginExecution.addGoal(""String_Node_Str"");
  pluginExecution.setPhase(""String_Node_Str"");
  pluginExecution.setConfiguration(configuration);
  pluginExecutions.add(pluginExecution);
  plugin.setExecutions(pluginExecutions);
  return plugin;
}","private Plugin addFileInstallPlugin(JobInfo job,int ndx){
  Plugin plugin=new Plugin();
  plugin.setGroupId(""String_Node_Str"");
  plugin.setArtifactId(""String_Node_Str"");
  plugin.setVersion(""String_Node_Str"");
  String jobVersion=PomIdsHelper.getJobVersion(job);
  Xpp3Dom configuration=new Xpp3Dom(""String_Node_Str"");
  Xpp3Dom groupId=new Xpp3Dom(""String_Node_Str"");
  groupId.setValue(model.getGroupId());
  Xpp3Dom artifactId=new Xpp3Dom(""String_Node_Str"");
  artifactId.setValue(model.getArtifactId() + ""String_Node_Str"" + job.getJobName());
  Xpp3Dom version=new Xpp3Dom(""String_Node_Str"");
  version.setValue(PomIdsHelper.getJobVersion(job.getProcessItem().getProperty()));
  Xpp3Dom packaging=new Xpp3Dom(""String_Node_Str"");
  packaging.setValue(""String_Node_Str"");
  Xpp3Dom file=new Xpp3Dom(""String_Node_Str"");
  IPath currentProjectRootDir=getJobProcessor().getTalendJavaProject().getProject().getLocation();
  IPath targetDir=getProcessor(job).getTalendJavaProject().getTargetFolder().getLocation();
  String relativeTargetDir=targetDir.makeRelativeTo(currentProjectRootDir).toString();
  String pathToJar=relativeTargetDir + Path.SEPARATOR + job.getJobName().toLowerCase()+ ""String_Node_Str""+ jobVersion.replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
  file.setValue(pathToJar);
  Xpp3Dom generatePom=new Xpp3Dom(""String_Node_Str"");
  generatePom.setValue(""String_Node_Str"");
  configuration.addChild(groupId);
  configuration.addChild(artifactId);
  configuration.addChild(version);
  configuration.addChild(packaging);
  configuration.addChild(file);
  configuration.addChild(generatePom);
  List<PluginExecution> pluginExecutions=new ArrayList<PluginExecution>();
  PluginExecution pluginExecution=new PluginExecution();
  pluginExecution.setId(""String_Node_Str"" + ndx);
  pluginExecution.addGoal(""String_Node_Str"");
  pluginExecution.setPhase(""String_Node_Str"");
  pluginExecution.setConfiguration(configuration);
  pluginExecutions.add(pluginExecution);
  plugin.setExecutions(pluginExecutions);
  return plugin;
}",0.9965803615046408
141646,"@Override public void create(IProgressMonitor monitor) throws Exception {
  IFile curPomFile=getPomFile();
  if (curPomFile == null) {
    return;
  }
  model=createModel();
  IContainer parent=curPomFile.getParent();
  Model pom=new Model();
  boolean route=""String_Node_Str"".equals(getJobProcessor().getProcess().getComponentsType());
  if (route) {
    RouteProcess routeProcess=(RouteProcess)getJobProcessor().getProcess();
    boolean publishAsSnapshot=BooleanUtils.toBoolean((String)routeProcess.getAdditionalProperties().get(MavenConstants.NAME_PUBLISH_AS_SNAPSHOT));
    File featurePom=new File(parent.getLocation().toOSString() + File.separator + ""String_Node_Str"");
    Model fm=new Model();
    fm.setModelVersion(""String_Node_Str"");
    fm.setParent(model.getParent());
    fm.setGroupId(model.getGroupId());
    fm.setArtifactId(model.getArtifactId() + ""String_Node_Str"");
    fm.setName(model.getName() + ""String_Node_Str"");
    fm.setVersion(model.getVersion());
    fm.setPackaging(""String_Node_Str"");
    Build fmBuild=new Build();
    fmBuild.addPlugin(addFeaturesMavenPlugin(model.getProperties().getProperty(""String_Node_Str"")));
    fmBuild.addPlugin(addDeployFeatureMavenPlugin(fm.getArtifactId(),fm.getVersion(),publishAsSnapshot));
    Set<JobInfo> subjobs=getJobProcessor().getBuildChildrenJobs();
    if (subjobs != null && !subjobs.isEmpty()) {
      for (      JobInfo subjob : subjobs) {
        if (isRoutelet(subjob) || isJob(subjob)) {
          fmBuild.addPlugin(addFileInstallPlugin(subjob));
        }
      }
    }
    fm.setBuild(fmBuild);
    PomUtil.savePom(monitor,fm,featurePom);
  }
  pom.setModelVersion(""String_Node_Str"");
  pom.setGroupId(model.getGroupId());
  pom.setArtifactId(model.getArtifactId() + ""String_Node_Str"");
  pom.setName(model.getName() + ""String_Node_Str"");
  pom.setVersion(model.getVersion());
  pom.setPackaging(""String_Node_Str"");
  for (  JobInfo job : getJobProcessor().getBuildChildrenJobs()) {
    if (isRoutelet(job)) {
      IPath currentProjectRootDir=getJobProcessor().getTalendJavaProject().getProject().getLocation();
      IPath routeletPomPath=getProcessor(job).getTalendJavaProject().getProjectPom().getLocation();
      String relativePomPath=routeletPomPath.makeRelativeTo(currentProjectRootDir).toString();
      pom.addModule(relativePomPath);
    }
  }
  pom.addModule(""String_Node_Str"");
  if (route) {
    pom.addModule(""String_Node_Str"");
  }
 else {
  }
  pom.setDependencies(model.getDependencies());
  if (pom.getBuild() == null) {
    pom.setBuild(new Build());
  }
  pom.getBuild().addPlugin(addSkipDeployFeatureMavenPlugin());
  File bd=new File(parent.getLocation().toOSString() + File.separator + ""String_Node_Str"");
  List<Profile> profiles=model.getProfiles();
  for (  Profile profile : profiles) {
    if (profile.getId().equals(""String_Node_Str"")) {
      List<Plugin> plugins=profile.getBuild().getPlugins();
      for (      Plugin plugin : plugins) {
        if (plugin.getArtifactId().equals(""String_Node_Str"")) {
          PluginExecution pluginExecution=plugin.getExecutionsAsMap().get(""String_Node_Str"");
          Xpp3Dom configuration=(Xpp3Dom)pluginExecution.getConfiguration();
          Xpp3Dom archive=new Xpp3Dom(""String_Node_Str"");
          Xpp3Dom manifestFile=new Xpp3Dom(""String_Node_Str"");
          manifestFile.setValue(""String_Node_Str"");
          archive.addChild(manifestFile);
          configuration.addChild(archive);
        }
      }
    }
  }
  model.setName(model.getName() + ""String_Node_Str"");
  PomUtil.savePom(monitor,model,bd);
  PomUtil.savePom(monitor,pom,curPomFile);
  parent.refreshLocal(IResource.DEPTH_ONE,monitor);
  afterCreate(monitor);
}","@Override public void create(IProgressMonitor monitor) throws Exception {
  IFile curPomFile=getPomFile();
  if (curPomFile == null) {
    return;
  }
  model=createModel();
  IContainer parent=curPomFile.getParent();
  Model pom=new Model();
  boolean route=""String_Node_Str"".equals(getJobProcessor().getProcess().getComponentsType());
  if (route) {
    RouteProcess routeProcess=(RouteProcess)getJobProcessor().getProcess();
    boolean publishAsSnapshot=BooleanUtils.toBoolean((String)routeProcess.getAdditionalProperties().get(MavenConstants.NAME_PUBLISH_AS_SNAPSHOT));
    File featurePom=new File(parent.getLocation().toOSString() + File.separator + ""String_Node_Str"");
    Model fm=new Model();
    fm.setModelVersion(""String_Node_Str"");
    fm.setParent(model.getParent());
    fm.setGroupId(model.getGroupId());
    fm.setArtifactId(model.getArtifactId() + ""String_Node_Str"");
    fm.setName(model.getName() + ""String_Node_Str"");
    fm.setVersion(model.getVersion());
    fm.setPackaging(""String_Node_Str"");
    Build fmBuild=new Build();
    fmBuild.addPlugin(addFeaturesMavenPlugin(model.getProperties().getProperty(""String_Node_Str"")));
    fmBuild.addPlugin(addDeployFeatureMavenPlugin(fm.getArtifactId(),fm.getVersion(),publishAsSnapshot));
    Set<JobInfo> subjobs=getJobProcessor().getBuildChildrenJobs();
    if (subjobs != null && !subjobs.isEmpty()) {
      int ndx=0;
      for (      JobInfo subjob : subjobs) {
        if (isRoutelet(subjob) || isJob(subjob)) {
          fmBuild.addPlugin(addFileInstallPlugin(subjob,ndx++));
        }
      }
    }
    fm.setBuild(fmBuild);
    PomUtil.savePom(monitor,fm,featurePom);
  }
  pom.setModelVersion(""String_Node_Str"");
  pom.setGroupId(model.getGroupId());
  pom.setArtifactId(model.getArtifactId() + ""String_Node_Str"");
  pom.setName(model.getName() + ""String_Node_Str"");
  pom.setVersion(model.getVersion());
  pom.setPackaging(""String_Node_Str"");
  for (  JobInfo job : getJobProcessor().getBuildChildrenJobs()) {
    if (isRoutelet(job)) {
      IPath currentProjectRootDir=getJobProcessor().getTalendJavaProject().getProject().getLocation();
      IPath routeletPomPath=getProcessor(job).getTalendJavaProject().getProjectPom().getLocation();
      String relativePomPath=routeletPomPath.makeRelativeTo(currentProjectRootDir).toString();
      pom.addModule(relativePomPath);
    }
  }
  pom.addModule(""String_Node_Str"");
  if (route) {
    pom.addModule(""String_Node_Str"");
  }
 else {
  }
  pom.setDependencies(model.getDependencies());
  if (pom.getBuild() == null) {
    pom.setBuild(new Build());
  }
  pom.getBuild().addPlugin(addSkipDeployFeatureMavenPlugin());
  File bd=new File(parent.getLocation().toOSString() + File.separator + ""String_Node_Str"");
  List<Profile> profiles=model.getProfiles();
  for (  Profile profile : profiles) {
    if (profile.getId().equals(""String_Node_Str"")) {
      List<Plugin> plugins=profile.getBuild().getPlugins();
      for (      Plugin plugin : plugins) {
        if (plugin.getArtifactId().equals(""String_Node_Str"")) {
          PluginExecution pluginExecution=plugin.getExecutionsAsMap().get(""String_Node_Str"");
          Xpp3Dom configuration=(Xpp3Dom)pluginExecution.getConfiguration();
          Xpp3Dom archive=new Xpp3Dom(""String_Node_Str"");
          Xpp3Dom manifestFile=new Xpp3Dom(""String_Node_Str"");
          manifestFile.setValue(""String_Node_Str"");
          archive.addChild(manifestFile);
          configuration.addChild(archive);
        }
      }
    }
  }
  model.setName(model.getName() + ""String_Node_Str"");
  PomUtil.savePom(monitor,model,bd);
  PomUtil.savePom(monitor,pom,curPomFile);
  parent.refreshLocal(IResource.DEPTH_ONE,monitor);
  afterCreate(monitor);
}",0.9968914718205164
141647,"@Override protected RepositoryNode getCurrentRepositoryNode(){
  return jobNode;
}","@Override public RepositoryNode getCurrentRepositoryNode(){
  return jobNode;
}",0.9316770186335404
141648,"@SuppressWarnings(""String_Node_Str"") private boolean updateBuildTypeForCTalendJob(NodeType currentNode){
  String processID=EmfModelUtils.findElementParameterByName(""String_Node_Str"",currentNode) == null ? null : EmfModelUtils.findElementParameterByName(""String_Node_Str"",currentNode).getValue();
  String processVersion=EmfModelUtils.findElementParameterByName(""String_Node_Str"",currentNode) == null ? null : EmfModelUtils.findElementParameterByName(""String_Node_Str"",currentNode).getValue();
  if (processID != null && processVersion != null) {
    ProcessItem item=ItemCacheManager.getProcessItem(processID,processVersion);
    if (item != null) {
      item.getProperty().getAdditionalProperties().put(TalendProcessArgumentConstant.ARG_BUILD_TYPE,""String_Node_Str"");
      try {
        ProxyRepositoryFactory.getInstance().save(item);
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
        return false;
      }
      return true;
    }
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") private boolean updateBuildTypeForCTalendJob(NodeType currentNode){
  String processID=EmfModelUtils.findElementParameterByName(""String_Node_Str"",currentNode) == null ? null : EmfModelUtils.findElementParameterByName(""String_Node_Str"",currentNode).getValue();
  String processVersion=EmfModelUtils.findElementParameterByName(""String_Node_Str"",currentNode) == null ? null : EmfModelUtils.findElementParameterByName(""String_Node_Str"",currentNode).getValue();
  if (processID != null && processVersion != null) {
    ProcessItem item=ItemCacheManager.getProcessItem(processID,processVersion);
    Project itemProject=ProjectManager.getInstance().getCurrentProject();
    if (item == null) {
      for (      Project refProject : ProjectManager.getInstance().getAllReferencedProjects()) {
        item=ItemCacheManager.getRefProcessItem(getProject(),processID);
        if (item != null) {
          itemProject=refProject;
          break;
        }
      }
    }
    if (item != null) {
      item.getProperty().getAdditionalProperties().put(TalendProcessArgumentConstant.ARG_BUILD_TYPE,""String_Node_Str"");
      try {
        ProxyRepositoryFactory.getInstance().save(itemProject,item,true);
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
        return false;
      }
      return true;
    }
  }
  return false;
}",0.8376569037656904
141649,"protected void exportRouteUsedJobBundle(IRepositoryViewObject object,File filePath,String jobVersion,String bundleName,String bundleSymbolicName,String bundleVersion,String routeName,String routeVersion,String context) throws InvocationTargetException, InterruptedException {
  RouteDedicatedJobManager talendJobManager=new RouteDedicatedJobManager(getExportChoice(),context);
  talendJobManager.setJobVersion(jobVersion);
  talendJobManager.setBundleName(bundleName);
  talendJobManager.setBundleSymbolicName(bundleSymbolicName);
  talendJobManager.setBundleVersion(bundleVersion);
  talendJobManager.setDestinationPath(filePath.getAbsolutePath());
  talendJobManager.setRouteName(routeName);
  talendJobManager.setRouteVersion(routeVersion);
  talendJobManager.setGroupId(getGroupId());
  talendJobManager.setArtifactId(getArtifactId());
  talendJobManager.setArtifactVersion(getArtifactVersion());
  RepositoryNode node=new RepositoryNode(object,null,ENodeType.REPOSITORY_ELEMENT);
  JobExportAction action=new RouteBundleExportAction(Collections.singletonList(node),jobVersion,bundleVersion,talendJobManager,getTempDir(),""String_Node_Str"");
  action.run(monitor);
}","protected void exportRouteUsedJobBundle(IRepositoryViewObject object,File filePath,String jobVersion,String bundleName,String bundleSymbolicName,String bundleVersion,String routeName,String routeVersion,String context) throws InvocationTargetException, InterruptedException {
  RouteDedicatedJobManager talendJobManager=new RouteDedicatedJobManager(getExportChoice(),context);
  talendJobManager.setJobVersion(jobVersion);
  talendJobManager.setBundleName(bundleName);
  talendJobManager.setBundleSymbolicName(bundleSymbolicName);
  talendJobManager.setBundleVersion(bundleVersion);
  talendJobManager.setDestinationPath(filePath.getAbsolutePath());
  talendJobManager.setRouteName(routeName);
  talendJobManager.setRouteVersion(routeVersion);
  talendJobManager.setGroupId(getGroupId());
  talendJobManager.setArtifactId(getArtifactId());
  talendJobManager.setArtifactVersion(getArtifactVersion());
  RepositoryNode node=new RepositoryNode(object,null,ENodeType.REPOSITORY_ELEMENT);
  node.getObject().getProperty().setVersion(jobVersion);
  JobExportAction action=new RouteBundleExportAction(Collections.singletonList(node),jobVersion,bundleVersion,talendJobManager,getTempDir(),""String_Node_Str"");
  action.run(monitor);
}",0.9762004175365344
141650,"public IBuildJobHandler getBuildJobHandler(){
  if (buildJobHandler == null) {
    buildJobHandler=BuildJobFactory.createBuildJobHandler(getProcessItem(),getContextName(),version,getExportChoiceMap(),""String_Node_Str"");
  }
  return buildJobHandler;
}","public IBuildJobHandler getBuildJobHandler(){
  if (buildJobHandler == null && getBuildProject()) {
    buildJobHandler=BuildJobFactory.createBuildJobHandler(getProcessItem(),getContextName(),version,getExportChoiceMap(),""String_Node_Str"");
  }
  return buildJobHandler;
}",0.959847036328872
141651,"@Override public void generatePom(int option){
  IRepositoryNode repositoryNode=RepositorySeekerManager.getInstance().searchRepoViewNode(getProperty().getId(),false);
  if (option == 1) {
    ProcessItem processItem=(ProcessItem)getProperty().getItem();
    Object bt=processItem.getProperty().getAdditionalProperties().get(TalendProcessArgumentConstant.ARG_BUILD_TYPE);
    if (processItem instanceof CamelProcessItem) {
      CamelProcessItem camelProcessItem=(CamelProcessItem)processItem;
      if (""String_Node_Str"".equals(bt)) {
        camelProcessItem.setExportMicroService(false);
      }
 else {
        camelProcessItem.setExportMicroService(true);
      }
    }
    try {
      ProcessorUtilities.generateCode(processItem,getContext().getName(),true,false);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    super.generatePom(option);
  }
  try {
    IRunnableWithProgress action=new JavaCamelJobScriptsExportWSAction(repositoryNode,getProperty().getVersion(),""String_Node_Str"",false);
    action.run(new NullProgressMonitor());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void generatePom(int option){
  IRepositoryNode repositoryNode=RepositorySeekerManager.getInstance().searchRepoViewNode(getProperty().getId(),false);
  if (option == 1) {
    ProcessItem processItem=(ProcessItem)getProperty().getItem();
    Object bt=processItem.getProperty().getAdditionalProperties().get(TalendProcessArgumentConstant.ARG_BUILD_TYPE);
    if (processItem instanceof CamelProcessItem) {
      CamelProcessItem camelProcessItem=(CamelProcessItem)processItem;
      if (bt == null || ""String_Node_Str"".equals(bt)) {
        camelProcessItem.setExportMicroService(false);
      }
 else {
        camelProcessItem.setExportMicroService(true);
      }
    }
    try {
      ProcessorUtilities.generateCode(processItem,getContext().getName(),true,false);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    super.generatePom(option);
  }
  try {
    IRunnableWithProgress action=new JavaCamelJobScriptsExportWSAction(repositoryNode,getProperty().getVersion(),""String_Node_Str"",false);
    action.run(new NullProgressMonitor());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9938542581211588
141652,"@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (!PluginChecker.isTIS()) {
    return;
  }
  NexusServerBean nexusServerBean=TalendLibsServerManager.getInstance().getCustomNexusServer();
  if (nexusServerBean == null) {
    return;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    List<? extends INode> graphicalNodes=this.getProcess().getGraphicalNodes();
    for (    INode node : graphicalNodes) {
      if (node.getComponent().getName().equals(""String_Node_Str"")) {
        List<Map<String,String>> jars=(List)node.getElementParameter(""String_Node_Str"").getValue();
        try {
          if (isAvailable(nexusServerBean)) {
            new ProgressMonitorDialog(getParent().getEditorSite().getShell()).run(true,true,new RunnableWithProgress(jars,null));
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            getProcess().refreshProcess();
          }
        }
);
      }
    }
  }
}","@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (!PluginChecker.isTIS()) {
    return;
  }
  NexusServerBean nexusServerBean=TalendLibsServerManager.getInstance().getCustomNexusServer();
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    List<? extends INode> graphicalNodes=this.getProcess().getGraphicalNodes();
    for (    INode node : graphicalNodes) {
      if (node.getComponent().getName().equals(""String_Node_Str"")) {
        List<Map<String,String>> jars=(List)node.getElementParameter(""String_Node_Str"").getValue();
        if (jars == null || jars.isEmpty()) {
          continue;
        }
        boolean nexusIsAvailable=nexusServerBean != null && isAvailable(nexusServerBean);
        try {
          new ProgressMonitorDialog(getParent().getEditorSite().getShell()).run(true,true,new RunnableWithProgress(jars,null,nexusIsAvailable));
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            getProcess().refreshProcess();
          }
        }
);
      }
    }
  }
}",0.57426597582038
141653,"public RunnableWithProgress(List jars,List needUpdateJars){
  this.jars=jars;
  this.needUpdateJars=needUpdateJars;
}","public RunnableWithProgress(List jars,List needUpdateJars,boolean updateNexusJars){
  this.jars=jars;
  this.needUpdateJars=needUpdateJars;
  this.updateNexusJars=updateNexusJars;
}",0.785234899328859
141654,"@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  ILibrariesService service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  INexusService nexusService=(INexusService)GlobalServiceRegister.getDefault().getService(INexusService.class);
  NexusServerBean nexusServerBean=TalendLibsServerManager.getInstance().getCustomNexusServer();
  monitor.beginTask(""String_Node_Str"",false ? IProgressMonitor.UNKNOWN : jars.size());
  for (int i=0; i < jars.size(); i++) {
    Map<String,String> o=jars.get(i);
    String jn=TalendQuoteUtils.removeQuotes(o.get(""String_Node_Str""));
    String jnv=TalendQuoteUtils.removeQuotes(o.get(""String_Node_Str""));
    String jv=String.valueOf(o.get(""String_Node_Str""));
    String a=jn.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (StringUtils.isBlank(jnv)) {
      continue;
    }
    if (StringUtils.isNotBlank(jv)) {
      File jarFile=new File(jv);
      if (jarFile.exists()) {
        try {
          monitor.subTask(""String_Node_Str"" + jn);
          service.deployLibrary(jarFile.toURI().toURL(),""String_Node_Str"" + a + ""String_Node_Str""+ jnv+ ""String_Node_Str"");
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        cConfigStoredInfo.put(jn,jnv);
        o.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (cConfigStoredInfo.get(jn) == null) {
      cConfigStoredInfo.put(jn,jnv);
      continue;
    }
    if (cConfigStoredInfo.get(jn).equals(jnv)) {
      continue;
    }
 else {
      MavenArtifact ma=new MavenArtifact();
      ma.setArtifactId(a);
      ma.setGroupId(""String_Node_Str"");
      ma.setVersion(cConfigStoredInfo.get(jn));
      ma.setType(""String_Node_Str"");
      String p=PomUtil.getAbsArtifactPath(ma);
      if (p != null) {
        File file=new File(p);
        try {
          if (file.exists()) {
            File tmp=new File(ExportJobUtil.getTmpFolder() + File.separator + jn);
            FilesUtils.copyFile(file,tmp);
            monitor.subTask(""String_Node_Str"" + jn);
            service.deployLibrary(tmp.toURI().toURL(),""String_Node_Str"" + a + ""String_Node_Str""+ jnv+ ""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    if (nexusServerBean == null) {
      monitor.subTask(""String_Node_Str"" + jn + ""String_Node_Str"");
    }
 else {
      monitor.subTask(""String_Node_Str"" + jn + ""String_Node_Str""+ nexusServerBean.getServer());
      Map metadata=nexusService.getMavenMetadata(nexusServerBean,""String_Node_Str"",a,jn);
      if (metadata.get(""String_Node_Str"").equals(jn)) {
        monitor.subTask(""String_Node_Str"" + jn + ""String_Node_Str"");
      }
    }
    monitor.worked(i);
  }
  ((ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class)).updateModulesNeededForCurrentJob(getProcess());
  monitor.done();
  if (monitor.isCanceled())   throw new InterruptedException(""String_Node_Str"");
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  if (jars == null || jars.isEmpty()) {
    return;
  }
  ILibrariesService service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  INexusService nexusService=null;
  NexusServerBean nexusServerBean=null;
  if (updateNexusJars) {
    nexusService=(INexusService)GlobalServiceRegister.getDefault().getService(INexusService.class);
    nexusServerBean=TalendLibsServerManager.getInstance().getCustomNexusServer();
  }
  monitor.beginTask(""String_Node_Str"",false ? IProgressMonitor.UNKNOWN : jars.size());
  for (int i=0; i < jars.size(); i++) {
    Map<String,String> o=jars.get(i);
    String jn=TalendQuoteUtils.removeQuotes(o.get(""String_Node_Str""));
    String jnv=TalendQuoteUtils.removeQuotes(o.get(""String_Node_Str""));
    String jv=String.valueOf(o.get(""String_Node_Str""));
    String a=jn.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (StringUtils.isBlank(jnv)) {
      continue;
    }
    if (StringUtils.isNotBlank(jv)) {
      File jarFile=new File(jv);
      if (jarFile.exists()) {
        try {
          monitor.subTask(""String_Node_Str"" + jn);
          service.deployLibrary(jarFile.toURI().toURL(),""String_Node_Str"" + a + ""String_Node_Str""+ jnv+ ""String_Node_Str"",true,updateNexusJars);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        cConfigStoredInfo.put(jn,jnv);
        o.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (cConfigStoredInfo.get(jn) == null) {
      cConfigStoredInfo.put(jn,jnv);
      continue;
    }
    if (cConfigStoredInfo.get(jn).equals(jnv)) {
      continue;
    }
 else {
      MavenArtifact ma=new MavenArtifact();
      ma.setArtifactId(a);
      ma.setGroupId(""String_Node_Str"");
      ma.setVersion(cConfigStoredInfo.get(jn));
      ma.setType(""String_Node_Str"");
      String p=PomUtil.getAbsArtifactPath(ma);
      if (p != null) {
        File file=new File(p);
        try {
          if (file.exists()) {
            File tmp=new File(ExportJobUtil.getTmpFolder() + File.separator + jn);
            FilesUtils.copyFile(file,tmp);
            monitor.subTask(""String_Node_Str"" + jn);
            service.deployLibrary(tmp.toURI().toURL(),""String_Node_Str"" + a + ""String_Node_Str""+ jnv+ ""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    if (nexusServerBean == null) {
      monitor.subTask(""String_Node_Str"" + jn + ""String_Node_Str"");
    }
 else {
      monitor.subTask(""String_Node_Str"" + jn + ""String_Node_Str""+ nexusServerBean.getServer());
      Map metadata=nexusService.getMavenMetadata(nexusServerBean,""String_Node_Str"",a,jn);
      if (metadata.get(""String_Node_Str"").equals(jn)) {
        monitor.subTask(""String_Node_Str"" + jn + ""String_Node_Str"");
      }
    }
    monitor.worked(i);
  }
  monitor.done();
  if (monitor.isCanceled())   throw new InterruptedException(""String_Node_Str"");
}",0.9464373464373464
141655,"private void handleSpringXml(String targetFilePath,ProcessItem processItem,InputStream springInput,ExportFileResource osgiResource,boolean convertToBP,boolean convertImports){
  File targetFile=new File(getTmpFolder() + PATH_SEPARATOR + targetFilePath);
  try {
    SAXReader saxReader=new SAXReader();
    saxReader.setStripWhitespaceText(false);
    Document document=saxReader.read(springInput);
    Element root=document.getRootElement();
    if (convertToBP) {
      if (""String_Node_Str"".equals(root.getName())) {
        formatSchemaLocation(root,false,false);
        InputStream inputStream=new ByteArrayInputStream(root.asXML().getBytes());
        FilesUtils.copyFile(inputStream,targetFile);
        osgiResource.addResource(FileConstants.BLUEPRINT_FOLDER_NAME,targetFile.toURI().toURL());
        return;
      }
      String bpPrefix=""String_Node_Str"";
      int cnt=0;
      while (root.getNamespaceForPrefix(bpPrefix) != null) {
        bpPrefix=""String_Node_Str"" + (++cnt);
      }
      root.setQName(QName.get(""String_Node_Str"",bpPrefix,BLUEPRINT_NSURI));
    }
    Namespace springCamelNsp=Namespace.get(""String_Node_Str"",CAMEL_SPRING_NSURI);
    boolean addCamel=springCamelNsp.equals(root.getNamespaceForPrefix(""String_Node_Str""));
    formatSchemaLocation(root,convertToBP,addCamel);
    for (Iterator<?> i=root.elementIterator(""String_Node_Str""); i.hasNext(); ) {
      Element ip=(Element)i.next();
      Attribute resource=ip.attribute(""String_Node_Str"");
      URL path=dummyURL(resource.getValue());
      for (      ResourceDependencyModel resourceModel : RouteResourceUtil.getResourceDependencies(processItem)) {
        if (matches(path,resourceModel)) {
          IFile resourceFile=RouteResourceUtil.getSourceFile(resourceModel.getItem());
          String cpUrl=adaptedClassPathUrl(resourceModel,convertImports);
          handleSpringXml(cpUrl,processItem,resourceFile.getContents(),osgiResource,convertImports,convertImports);
          resource.setValue(IMPORT_RESOURCE_PREFIX + cpUrl);
        }
      }
      if (convertImports) {
        i.remove();
      }
    }
    if (CONVERT_CAMEL_CONTEXT) {
      if (CONVERT_CAMEL_CONTEXT_ALL) {
        moveNamespace(root,CAMEL_SPRING_NSURI,CAMEL_BLUEPRINT_NSURI);
      }
 else {
        Namespace blueprintCamelNsp=Namespace.get(""String_Node_Str"",CAMEL_BLUEPRINT_NSURI);
        moveNamespace(root,springCamelNsp,blueprintCamelNsp);
        Namespace springCamelDefNsp=Namespace.get(CAMEL_SPRING_NSURI);
        Namespace blueprintCamelDefNsp=Namespace.get(CAMEL_BLUEPRINT_NSURI);
        for (Iterator<?> i=root.elementIterator(""String_Node_Str""); i.hasNext(); ) {
          Element cc=(Element)i.next();
          if (springCamelDefNsp.equals(cc.getNamespace())) {
            moveNamespace(cc,springCamelDefNsp,blueprintCamelDefNsp);
          }
        }
      }
    }
    InputStream inputStream=new ByteArrayInputStream(root.asXML().getBytes());
    FilesUtils.copyFile(inputStream,targetFile);
    osgiResource.addResource(adaptedResourceFolderName(targetFilePath,convertToBP),targetFile.toURI().toURL());
  }
 catch (  Exception e) {
    Logger.getAnonymousLogger().log(Level.WARNING,""String_Node_Str"",e);
  }
 finally {
    try {
      springInput.close();
    }
 catch (    IOException e) {
      Logger.getAnonymousLogger().log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}","private void handleSpringXml(String targetFilePath,ProcessItem processItem,InputStream springInput,ExportFileResource osgiResource,boolean convertToBP,boolean convertImports){
  File targetFile=new File(getTmpFolder() + PATH_SEPARATOR + targetFilePath);
  try {
    SAXReader saxReader=new SAXReader();
    saxReader.setStripWhitespaceText(false);
    Document document=saxReader.read(springInput);
    Element root=document.getRootElement();
    if (convertToBP) {
      if (""String_Node_Str"".equals(root.getName())) {
        formatSchemaLocation(root,false,false);
        InputStream inputStream=new ByteArrayInputStream(root.asXML().getBytes());
        FilesUtils.copyFile(inputStream,targetFile);
        osgiResource.addResource(FileConstants.BLUEPRINT_FOLDER_NAME,targetFile.toURI().toURL());
        return;
      }
      String bpPrefix=""String_Node_Str"";
      int cnt=0;
      while (root.getNamespaceForPrefix(bpPrefix) != null) {
        bpPrefix=""String_Node_Str"" + (++cnt);
      }
      root.setQName(QName.get(""String_Node_Str"",bpPrefix,BLUEPRINT_NSURI));
    }
    Namespace springCamelNsp=Namespace.get(""String_Node_Str"",CAMEL_SPRING_NSURI);
    boolean addCamel=springCamelNsp.equals(root.getNamespaceForPrefix(""String_Node_Str""));
    formatSchemaLocation(root,convertToBP,addCamel);
    for (Iterator<?> i=root.elementIterator(""String_Node_Str""); i.hasNext(); ) {
      Element ip=(Element)i.next();
      Attribute resource=ip.attribute(""String_Node_Str"");
      URL path=dummyURL(resource.getValue());
      for (      ResourceDependencyModel resourceModel : RouteResourceUtil.getResourceDependencies(processItem)) {
        if (matches(path,resourceModel)) {
          IFile resourceFile=RouteResourceUtil.getSourceFile(resourceModel.getItem());
          String cpUrl=adaptedClassPathUrl(resourceModel,convertImports);
          handleSpringXml(cpUrl,processItem,resourceFile.getContents(),osgiResource,convertImports,convertImports);
          resource.setValue(IMPORT_RESOURCE_PREFIX + cpUrl);
        }
      }
      if (convertImports) {
        i.remove();
      }
    }
    if (CONVERT_CAMEL_CONTEXT) {
      if (CONVERT_CAMEL_CONTEXT_ALL) {
        moveNamespace(root,CAMEL_SPRING_NSURI,CAMEL_BLUEPRINT_NSURI);
      }
 else {
        Namespace blueprintCamelNsp=Namespace.get(""String_Node_Str"",CAMEL_BLUEPRINT_NSURI);
        moveNamespace(root,springCamelNsp,blueprintCamelNsp);
        if (springCamelNsp.equals(root.getNamespaceForPrefix(""String_Node_Str""))) {
          root.remove(springCamelNsp);
          root.add(blueprintCamelNsp);
        }
        Namespace springCamelDefNsp=Namespace.get(CAMEL_SPRING_NSURI);
        Namespace blueprintCamelDefNsp=Namespace.get(CAMEL_BLUEPRINT_NSURI);
        for (Iterator<?> i=root.elementIterator(""String_Node_Str""); i.hasNext(); ) {
          Element cc=(Element)i.next();
          if (springCamelDefNsp.equals(cc.getNamespace())) {
            moveNamespace(cc,springCamelDefNsp,blueprintCamelDefNsp);
          }
        }
      }
    }
    InputStream inputStream=new ByteArrayInputStream(root.asXML().getBytes());
    FilesUtils.copyFile(inputStream,targetFile);
    osgiResource.addResource(adaptedResourceFolderName(targetFilePath,convertToBP),targetFile.toURI().toURL());
  }
 catch (  Exception e) {
    Logger.getAnonymousLogger().log(Level.WARNING,""String_Node_Str"",e);
  }
 finally {
    try {
      springInput.close();
    }
 catch (    IOException e) {
      Logger.getAnonymousLogger().log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}",0.975108538350217
141656,"@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=(RepositoryNode)((IStructuredSelection)getSelection()).getFirstElement();
  }
  BeanItem beanItem=(BeanItem)repositoryNode.getObject().getProperty().getItem();
  try {
    openBeanEditor(beanItem,false);
    refresh(repositoryNode);
    CorePlugin.getDefault().getRunProcessService().updateLibraries(beanItem);
  }
 catch (  PartInitException e) {
    MessageBoxExceptionHandler.process(e);
  }
catch (  SystemException e) {
    MessageBoxExceptionHandler.process(e);
  }
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=(RepositoryNode)((IStructuredSelection)getSelection()).getFirstElement();
  }
  BeanItem beanItem=(BeanItem)repositoryNode.getObject().getProperty().getItem();
  byte[] ct=beanItem.getContent().getInnerContent();
  String contentString=new String(ct);
  if (contentString.contains(""String_Node_Str"")) {
    Pattern p=Pattern.compile(""String_Node_Str"");
    if (beanItem.getImports().size() == 0) {
      addCamelDependency(beanItem);
    }
    for (int i=0; i < beanItem.getImports().size(); i++) {
      Object o=beanItem.getImports().get(i);
      if (o instanceof IMPORTTypeImpl) {
        IMPORTTypeImpl importType=(IMPORTTypeImpl)o;
        if (p.matcher(importType.getMODULE()).matches()) {
          continue;
        }
      }
 else {
        addCamelDependency(beanItem);
      }
    }
  }
  try {
    openBeanEditor(beanItem,false);
    refresh(repositoryNode);
    CorePlugin.getDefault().getRunProcessService().updateLibraries(beanItem);
  }
 catch (  PartInitException e) {
    MessageBoxExceptionHandler.process(e);
  }
catch (  SystemException e) {
    MessageBoxExceptionHandler.process(e);
  }
}",0.6358974358974359
141657,"@Override protected void addOsgiDependencies(Analyzer analyzer,ExportFileResource libResource,ProcessItem processItem) throws IOException {
  final DependenciesResolver resolver=new DependenciesResolver(processItem);
  analyzer.setProperty(Analyzer.REQUIRE_BUNDLE,resolver.getManifestRequireBundle(MANIFEST_ITEM_SEPARATOR));
  analyzer.setProperty(Analyzer.IMPORT_PACKAGE,resolver.getManifestImportPackage(MANIFEST_ITEM_SEPARATOR) + ""String_Node_Str"");
  analyzer.setProperty(Analyzer.EXPORT_PACKAGE,resolver.getManifestExportPackage(MANIFEST_ITEM_SEPARATOR));
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
    IRunProcessService processService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
    ITalendProcessJavaProject talendProcessJavaProject=processService.getTalendProcessJavaProject();
    if (talendProcessJavaProject != null) {
      final IPath libPath=talendProcessJavaProject.getLibFolder().getLocation();
      final List<URL> list=new ArrayList<URL>();
      for (      String s : resolver.getManifestBundleClasspath(MANIFEST_ITEM_SEPARATOR).split(Character.toString(MANIFEST_ITEM_SEPARATOR))) {
        if (!s.isEmpty()) {
          list.add(libPath.append(s).toFile().toURI().toURL());
        }
      }
      libResource.addResources(list);
    }
  }
}","@Override protected void addOsgiDependencies(Analyzer analyzer,ExportFileResource libResource,ProcessItem processItem) throws IOException {
  final DependenciesResolver resolver=new DependenciesResolver(processItem);
  analyzer.setProperty(Analyzer.REQUIRE_BUNDLE,resolver.getManifestRequireBundle(MANIFEST_ITEM_SEPARATOR));
  analyzer.setProperty(Analyzer.IMPORT_PACKAGE,resolver.getManifestImportPackage(MANIFEST_ITEM_SEPARATOR) + ""String_Node_Str"");
  analyzer.setProperty(Analyzer.EXPORT_PACKAGE,resolver.getManifestExportPackage(MANIFEST_ITEM_SEPARATOR));
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
    IRunProcessService processService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
    ITalendProcessJavaProject talendProcessJavaProject=processService.getTalendProcessJavaProject();
    if (talendProcessJavaProject != null) {
      final IPath libPath=talendProcessJavaProject.getLibFolder().getLocation();
      final List<URL> list=new ArrayList<URL>();
      for (      String s : resolver.getManifestBundleClasspath(MANIFEST_ITEM_SEPARATOR).split(Character.toString(MANIFEST_ITEM_SEPARATOR))) {
        if (!s.isEmpty()) {
          list.add(libPath.append(s).toFile().toURI().toURL());
        }
      }
      if (resolver.getBundleClasspaths() != null) {
        for (        BundleClasspath bcp : resolver.getBundleClasspaths()) {
          if (bcp.getName() != null && bcp.getName().toLowerCase().contains(CamelFeatureUtil.FEATURE_CAMEL_QUARTZ2_BNDL_NAME)) {
            list.add(libPath.append(bcp.getName()).toFile().toURI().toURL());
          }
        }
      }
      libResource.addResources(list);
    }
  }
}",0.8631647211413749
141658,"/** 
 * Add feature and bundle to Feature Model
 * @param node
 * @param featuresModel
 */
public static void addFeatureAndBundles(ProcessItem routeProcess,FeaturesModel featuresModel){
  IDesignerCoreService designerService=RepositoryPlugin.getDefault().getDesignerCoreService();
  IProcess process=designerService.getProcessFromProcessItem(routeProcess,false);
  Collection<FeatureModel> features=new HashSet<FeatureModel>();
  for (  String lib : process.getNeededLibraries(true)) {
    Collection<FeatureModel> featureModel=computeFeature(getNameWithoutVersion(lib));
    if (featureModel != null) {
      features.addAll(featureModel);
    }
  }
  addNodesSpecialFeatures(features,routeProcess.getProcess());
  addConnectionsSpecialFeatures(features,routeProcess.getProcess());
  for (  FeatureModel model : features) {
    featuresModel.addFeature(model);
  }
}","/** 
 * Add feature and bundle to Feature Model
 * @param node
 * @param featuresModel
 */
public static void addFeatureAndBundles(ProcessItem routeProcess,FeaturesModel featuresModel){
  IDesignerCoreService designerService=RepositoryPlugin.getDefault().getDesignerCoreService();
  IProcess process=designerService.getProcessFromProcessItem(routeProcess,false);
  Collection<FeatureModel> features=new HashSet<FeatureModel>();
  for (  String lib : process.getNeededLibraries(true)) {
    if (FEATURE_CAMEL_QUARTZ2_BNDL_NAME.equalsIgnoreCase(getNameWithoutVersion(lib))) {
      continue;
    }
    Collection<FeatureModel> featureModel=computeFeature(getNameWithoutVersion(lib));
    if (featureModel != null) {
      features.addAll(featureModel);
    }
  }
  addNodesSpecialFeatures(features,routeProcess.getProcess());
  addConnectionsSpecialFeatures(features,routeProcess.getProcess());
  for (  FeatureModel model : features) {
    featuresModel.addFeature(model);
  }
}",0.940347071583514
141659,"@Override protected void doRun(){
  RepositoryNode beanNode=getCurrentRepositoryNode();
  if (isToolbar()) {
    if (beanNode != null && beanNode.getContentType() != CamelRepositoryNodeType.repositoryBeansType) {
      beanNode=null;
    }
    if (beanNode == null) {
      beanNode=getRepositoryNodeForDefault(CamelRepositoryNodeType.repositoryBeansType);
    }
  }
  RepositoryNode node=null;
  IPath path=null;
  if (!isToolbar()) {
    ISelection selection=getSelection();
    Object obj=((IStructuredSelection)selection).getFirstElement();
    node=(RepositoryNode)obj;
    path=RepositoryNodeUtilities.getPath(node);
  }
  CamelNewBeanWizard beanWizard=new CamelNewBeanWizard(path);
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),beanWizard);
  if (dlg.open() == Window.OK) {
    try {
      openBeanEditor(beanWizard.getBean(),false);
    }
 catch (    PartInitException e) {
      MessageBoxExceptionHandler.process(e);
    }
catch (    SystemException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
}","@Override protected void doRun(){
  RepositoryNode beanNode=getCurrentRepositoryNode();
  if (isToolbar()) {
    if (beanNode != null && beanNode.getContentType() != CamelRepositoryNodeType.repositoryBeansType) {
      beanNode=null;
    }
    if (beanNode == null) {
      beanNode=getRepositoryNodeForDefault(CamelRepositoryNodeType.repositoryBeansType);
    }
  }
  RepositoryNode node=null;
  IPath path=null;
  if (!isToolbar()) {
    ISelection selection=getSelection();
    Object obj=((IStructuredSelection)selection).getFirstElement();
    node=(RepositoryNode)obj;
    path=RepositoryNodeUtilities.getPath(node);
  }
  CamelNewBeanWizard beanWizard=new CamelNewBeanWizard(path);
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),beanWizard);
  if (dlg.open() == Window.OK) {
    try {
      addCamelDependency(beanWizard.getBean());
      openBeanEditor(beanWizard.getBean(),false);
      refresh(repositoryNode);
      CorePlugin.getDefault().getRunProcessService().updateLibraries(beanWizard.getBean());
    }
 catch (    PartInitException e) {
      MessageBoxExceptionHandler.process(e);
    }
catch (    SystemException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
}",0.9246364037020716
141660,"@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=(RepositoryNode)((IStructuredSelection)getSelection()).getFirstElement();
  }
  BeanItem beanItem=(BeanItem)repositoryNode.getObject().getProperty().getItem();
  byte[] ct=beanItem.getContent().getInnerContent();
  String contentString=new String(ct);
  if (contentString.contains(""String_Node_Str"")) {
    Pattern p=Pattern.compile(""String_Node_Str"");
    if (beanItem.getImports().size() == 0) {
      addCamelDependency(beanItem);
    }
    for (int i=0; i < beanItem.getImports().size(); i++) {
      Object o=beanItem.getImports().get(i);
      if (o instanceof IMPORTTypeImpl) {
        IMPORTTypeImpl importType=(IMPORTTypeImpl)o;
        if (p.matcher(importType.getMODULE()).matches()) {
          continue;
        }
      }
 else {
        addCamelDependency(beanItem);
      }
    }
  }
  try {
    openBeanEditor(beanItem,false);
    refresh(repositoryNode);
    CorePlugin.getDefault().getRunProcessService().updateLibraries(beanItem);
  }
 catch (  PartInitException e) {
    MessageBoxExceptionHandler.process(e);
  }
catch (  SystemException e) {
    MessageBoxExceptionHandler.process(e);
  }
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=(RepositoryNode)((IStructuredSelection)getSelection()).getFirstElement();
  }
  BeanItem beanItem=(BeanItem)repositoryNode.getObject().getProperty().getItem();
  addCamelDependency(beanItem);
  try {
    openBeanEditor(beanItem,false);
    refresh(repositoryNode);
    CorePlugin.getDefault().getRunProcessService().updateLibraries(beanItem);
  }
 catch (  PartInitException e) {
    MessageBoxExceptionHandler.process(e);
  }
catch (  SystemException e) {
    MessageBoxExceptionHandler.process(e);
  }
}",0.6289871292669278
141661,"private boolean initalizeRuntime(String location,String host){
  boolean finished=true;
  performApply();
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(getShell());
  try {
    dialog.run(true,true,new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        SubMonitor totalMonitor=SubMonitor.convert(monitor,10);
        totalMonitor.beginTask(""String_Node_Str"",10);
        totalMonitor.setTaskName(""String_Node_Str"");
        new StopRuntimeProgress().run(totalMonitor);
        if (RuntimeServerController.getInstance().getRuntimeProcess() != null && RuntimeServerController.getInstance().getRuntimeProcess().isAlive()) {
          RuntimeServerController.getInstance().getRuntimeProcess().waitFor(20,TimeUnit.SECONDS);
        }
        totalMonitor.worked(2);
        if (monitor.isCanceled()) {
          throw new InterruptedException(""String_Node_Str"");
        }
        totalMonitor.setTaskName(""String_Node_Str"");
        try {
          FileUtil.deleteFolder(location + ""String_Node_Str"");
        }
 catch (        IOException e) {
          ExceptionHandler.process(e);
          throw new InterruptedException(e.getMessage());
        }
        if (new File(location + ""String_Node_Str"").exists()) {
          throw new InterruptedException(RunContainerMessages.getString(""String_Node_Str""));
        }
        totalMonitor.worked(1);
        if (monitor.isCanceled()) {
          throw new InterruptedException(""String_Node_Str"");
        }
        totalMonitor.setTaskName(""String_Node_Str"");
        new StartRuntimeProgress(false).run(totalMonitor);
        totalMonitor.worked(2);
        if (monitor.isCanceled()) {
          throw new InterruptedException(""String_Node_Str"");
        }
        File launcher;
        String os=System.getProperty(""String_Node_Str"");
        if (os != null && os.toLowerCase().contains(""String_Node_Str"")) {
          launcher=new File(location + ""String_Node_Str"");
        }
 else {
          launcher=new File(location + ""String_Node_Str"");
        }
        InputStream stream=RunContainerPreferencePage.class.getResourceAsStream(""String_Node_Str"");
        File initFile=new File(location + ""String_Node_Str"");
        if (!initFile.exists()) {
          try {
            Files.copy(stream,initFile.toPath());
          }
 catch (          IOException e) {
            ExceptionHandler.process(e);
            throw new InterruptedException(e.getMessage());
          }
        }
        String command=launcher.getAbsolutePath() + ""String_Node_Str"" + host+ ""String_Node_Str"";
        RuntimeClientProgress clientProgress=new RuntimeClientProgress(command);
        clientProgress.run(totalMonitor);
        totalMonitor.done();
      }
    }
);
  }
 catch (  Throwable e) {
    finished=false;
    ExceptionHandler.process(e);
    IStatus status=new Status(IStatus.ERROR,ESBRunContainerPlugin.PLUGIN_ID,e.getMessage(),e);
    if (e.getCause() != null) {
      status=new Status(IStatus.ERROR,ESBRunContainerPlugin.PLUGIN_ID,e.getCause().getMessage(),e.getCause());
    }
    RuntimeErrorDialog.openError(getShell(),RunContainerMessages.getString(""String_Node_Str""),RunContainerMessages.getString(""String_Node_Str""),status);
  }
  return finished;
}","private boolean initalizeRuntime(String location,String host){
  boolean finished=true;
  performApply();
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(getShell());
  try {
    dialog.run(true,true,new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        SubMonitor totalMonitor=SubMonitor.convert(monitor,10);
        totalMonitor.beginTask(""String_Node_Str"",10);
        totalMonitor.setTaskName(""String_Node_Str"");
        new StopRuntimeProgress().run(totalMonitor);
        if (RuntimeServerController.getInstance().getRuntimeProcess() != null && RuntimeServerController.getInstance().getRuntimeProcess().isAlive()) {
          RuntimeServerController.getInstance().getRuntimeProcess().waitFor(20,TimeUnit.SECONDS);
        }
        totalMonitor.worked(2);
        if (monitor.isCanceled()) {
          throw new InterruptedException(""String_Node_Str"");
        }
        totalMonitor.setTaskName(""String_Node_Str"");
        try {
          FileUtil.deleteFolder(location + ""String_Node_Str"");
        }
 catch (        IOException e) {
          ExceptionHandler.process(e);
          throw new InterruptedException(e.getMessage());
        }
        if (new File(location + ""String_Node_Str"").exists()) {
          throw new InterruptedException(RunContainerMessages.getString(""String_Node_Str""));
        }
        totalMonitor.worked(1);
        if (monitor.isCanceled()) {
          throw new InterruptedException(""String_Node_Str"");
        }
        totalMonitor.setTaskName(""String_Node_Str"");
        new StartRuntimeProgress(false).run(totalMonitor);
        totalMonitor.worked(2);
        if (monitor.isCanceled()) {
          throw new InterruptedException(""String_Node_Str"");
        }
        File launcher;
        String os=System.getProperty(""String_Node_Str"");
        if (os != null && os.toLowerCase().contains(""String_Node_Str"")) {
          launcher=new File(location + ""String_Node_Str"");
        }
 else {
          launcher=new File(location + ""String_Node_Str"");
        }
        InputStream stream=RunContainerPreferencePage.class.getResourceAsStream(""String_Node_Str"");
        File initFile=new File(location + ""String_Node_Str"");
        if (!initFile.exists()) {
          try {
            Files.copy(stream,initFile.toPath());
          }
 catch (          IOException e) {
            ExceptionHandler.process(e);
            throw new InterruptedException(e.getMessage());
          }
        }
        String command=launcher.getAbsolutePath() + ""String_Node_Str"" + host+ ""String_Node_Str"";
        RuntimeClientProgress clientProgress=new RuntimeClientProgress(command);
        clientProgress.run(totalMonitor);
        totalMonitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    finished=false;
    ExceptionHandler.process(e);
    IStatus status=new Status(IStatus.ERROR,ESBRunContainerPlugin.PLUGIN_ID,e.getMessage(),e);
    if (e.getCause() != null) {
      status=new Status(IStatus.ERROR,ESBRunContainerPlugin.PLUGIN_ID,e.getCause().getMessage(),e.getCause());
    }
    RuntimeErrorDialog.openError(getShell(),RunContainerMessages.getString(""String_Node_Str""),RunContainerMessages.getString(""String_Node_Str""),status);
  }
  return finished;
}",0.997288339861404
141662,"public static int openError(Shell parentShell,String title,String message,IStatus status,int displayMask){
  ErrorDialog dialog=new RuntimeErrorDialog(parentShell,title,message,status,displayMask);
  return dialog.open();
}","public static int openError(Shell parentShell,String title,String message,IStatus status,int displayMask){
  RuntimeErrorDialog dialog=new RuntimeErrorDialog(parentShell,title,message,status,displayMask);
  return dialog.open();
}",0.9845474613686536
141663,"public void deploy() throws Exception {
  File target=null;
  IRepositoryViewObject viewObject=findJob(process.getId());
  RepositoryNode node=new RepositoryNode(viewObject,null,ENodeType.REPOSITORY_ELEMENT);
  ProcessItem processItem=(ProcessItem)node.getObject().getProperty().getItem();
  monitor.setTaskName(""String_Node_Str"");
  if (ComponentCategory.CATEGORY_4_DI.getName().equals(process.getComponentsType())) {
    if (EmfModelUtils.getComponentByName(processItem,""String_Node_Str"") != null) {
      List<Item> items=new ArrayList<Item>(1);
      items.add(processItem);
      Collection<IRepositoryViewObject> allDependencies=ProcessUtils.getProcessDependencies(ERepositoryObjectType.METADATA,items,false);
      if (!allDependencies.isEmpty()) {
        target=File.createTempFile(""String_Node_Str"",FileConstants.KAR_FILE_SUFFIX,null);
        for (        IRepositoryViewObject object : allDependencies) {
          if (object.getProperty().getItem() != null && object.getProperty().getItem() instanceof ServiceItem) {
            ServiceItem serviceItem=(ServiceItem)object.getProperty().getItem();
            ExportServiceAction action=new ExportServiceAction(serviceItem,target.getAbsolutePath(),null,new ServiceExportForESBRuntimeManager(null,statisticsPort,tracePort));
            action.run(monitor);
            kars=JMXUtil.installKar(target);
          }
        }
      }
    }
 else {
      target=File.createTempFile(""String_Node_Str"",FileConstants.JAR_FILE_SUFFIX,null);
      JobScriptsManager jobScriptsManager=new JobJavaScriptOSGIForESBRuntimeManager(JobScriptsManagerFactory.getDefaultExportChoiceMap(),processItem.getProcess().getDefaultContext(),JobScriptsManager.LAUNCHER_ALL,statisticsPort,tracePort);
      jobScriptsManager.setDestinationPath(target.getAbsolutePath());
      JobExportAction jobAction=new JobExportAction(Collections.singletonList(node),node.getObject().getProperty().getVersion(),node.getObject().getProperty().getVersion(),jobScriptsManager,System.getProperty(""String_Node_Str""));
      jobAction.run(monitor);
      if (jobAction.isBuildSuccessful()) {
        bundles=JMXUtil.installBundle(target);
      }
    }
  }
 else   if (ComponentCategory.CATEGORY_4_CAMEL.getName().equals(process.getComponentsType())) {
    target=File.createTempFile(""String_Node_Str"",FileConstants.KAR_FILE_SUFFIX,null);
    JavaCamelJobScriptsExportWSAction camelAction=new JavaCamelJobScriptsExportWSAction(node,process.getVersion(),target.getAbsolutePath(),true,statisticsPort,tracePort);
    camelAction.run(monitor);
    kars=JMXUtil.installKar(target);
  }
  if (target != null && target.exists()) {
    target.delete();
  }
}","public void deploy() throws Exception {
  File target=null;
  IRepositoryViewObject viewObject=findJob(process.getId());
  RepositoryNode node=new RepositoryNode(viewObject,null,ENodeType.REPOSITORY_ELEMENT);
  ProcessItem processItem=(ProcessItem)node.getObject().getProperty().getItem();
  String configID=node.getObject().getLabel();
  monitor.setTaskName(""String_Node_Str"");
  if (ComponentCategory.CATEGORY_4_DI.getName().equals(process.getComponentsType())) {
    if (EmfModelUtils.getComponentByName(processItem,""String_Node_Str"") != null) {
      List<Item> items=new ArrayList<Item>(1);
      items.add(processItem);
      Collection<IRepositoryViewObject> allDependencies=ProcessUtils.getProcessDependencies(ERepositoryObjectType.METADATA,items,false);
      if (!allDependencies.isEmpty()) {
        target=File.createTempFile(""String_Node_Str"",FileConstants.KAR_FILE_SUFFIX,null);
        for (        IRepositoryViewObject object : allDependencies) {
          if (object.getProperty().getItem() != null && object.getProperty().getItem() instanceof ServiceItem) {
            ServiceItem serviceItem=(ServiceItem)object.getProperty().getItem();
            ExportServiceAction action=new ExportServiceAction(serviceItem,target.getAbsolutePath(),null,new ServiceExportForESBRuntimeManager(null,statisticsPort,tracePort));
            action.run(monitor);
            applyContextConfiguration(configID);
            kars=JMXUtil.installKar(target);
          }
        }
      }
    }
 else {
      target=File.createTempFile(""String_Node_Str"",FileConstants.JAR_FILE_SUFFIX,null);
      JobScriptsManager jobScriptsManager=new JobJavaScriptOSGIForESBRuntimeManager(JobScriptsManagerFactory.getDefaultExportChoiceMap(),processItem.getProcess().getDefaultContext(),JobScriptsManager.LAUNCHER_ALL,statisticsPort,tracePort);
      jobScriptsManager.setDestinationPath(target.getAbsolutePath());
      JobExportAction jobAction=new JobExportAction(Collections.singletonList(node),node.getObject().getProperty().getVersion(),node.getObject().getProperty().getVersion(),jobScriptsManager,System.getProperty(""String_Node_Str""));
      jobAction.run(monitor);
      if (jobAction.isBuildSuccessful()) {
        applyContextConfiguration(configID);
        bundles=JMXUtil.installBundle(target);
      }
    }
  }
 else   if (ComponentCategory.CATEGORY_4_CAMEL.getName().equals(process.getComponentsType())) {
    target=File.createTempFile(""String_Node_Str"",FileConstants.KAR_FILE_SUFFIX,null);
    JavaCamelJobScriptsExportWSAction camelAction=new JavaCamelJobScriptsExportWSAction(node,process.getVersion(),target.getAbsolutePath(),true,statisticsPort,tracePort);
    camelAction.run(monitor);
    applyContextConfiguration(configID);
    kars=JMXUtil.installKar(target);
  }
  if (target != null && target.exists()) {
    target.delete();
  }
}",0.9670170351576658
141664,"public static void reboot() throws Exception {
  MBeanServerConnection mbsc=createJMXconnection();
  String SYS_MBEAN=""String_Node_Str"" + instanceName;
  ObjectName objectKar=new ObjectName(SYS_MBEAN);
  mbsc.invoke(objectKar,""String_Node_Str"",new Object[]{String.valueOf(0)},new String[]{String.class.getName()});
}","public static void reboot() throws Exception {
  MBeanServerConnection mbsc=createJMXconnection();
  String SYS_MBEAN=""String_Node_Str"" + instanceName;
  ObjectName objectKar=new ObjectName(SYS_MBEAN);
  mbsc.invoke(objectKar,""String_Node_Str"",new Object[]{String.valueOf(0)},new String[]{STRING});
}",0.9577922077922078
141665,"public static String getBundleStatus(long bundleID) throws Exception {
  String KARAF_BUNDLE_MBEAN=""String_Node_Str"";
  ObjectName objectBundle=new ObjectName(KARAF_BUNDLE_MBEAN);
  return mbsc.invoke(objectBundle,""String_Node_Str"",new Object[]{String.valueOf(bundleID)},new String[]{String.class.getName()}).toString();
}","public static String getBundleStatus(long bundleID) throws Exception {
  String KARAF_BUNDLE_MBEAN=""String_Node_Str"";
  ObjectName objectBundle=new ObjectName(KARAF_BUNDLE_MBEAN);
  return mbsc.invoke(objectBundle,""String_Node_Str"",new Object[]{String.valueOf(bundleID)},new String[]{STRING}).toString();
}",0.9585987261146496
141666,"public static void rebootCleanAll() throws Exception {
  MBeanServerConnection mbsc=createJMXconnection();
  String SYS_MBEAN=""String_Node_Str"" + instanceName;
  ObjectName objectKar=new ObjectName(SYS_MBEAN);
  mbsc.invoke(objectKar,""String_Node_Str"",new Object[]{String.valueOf(0)},new String[]{String.class.getName()});
}","public static void rebootCleanAll() throws Exception {
  MBeanServerConnection mbsc=createJMXconnection();
  String SYS_MBEAN=""String_Node_Str"" + instanceName;
  ObjectName objectKar=new ObjectName(SYS_MBEAN);
  mbsc.invoke(objectKar,""String_Node_Str"",new Object[]{String.valueOf(0)},new String[]{STRING});
}",0.9588607594936708
141667,"@Override public void openConsole(){
  if (RuntimeServerController.getInstance().isRunning()) {
    RuntimeConsoleUtil.loadConsole();
  }
 else {
    RuntimeConsoleUtil.findConsole(RuntimeConsoleUtil.KARAF_CONSOLE);
  }
}","@Override public void openConsole(){
  if (RuntimeServerController.getInstance().isRunning()) {
    RuntimeConsoleUtil.loadConsole();
  }
 else {
    Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    if (MessageDialog.openConfirm(shell,""String_Node_Str"",""String_Node_Str"")) {
      new StartRuntimeAction(true,shell).run();
      RuntimeConsoleUtil.loadConsole();
    }
 else {
      RuntimeConsoleUtil.findConsole();
    }
  }
}",0.5319465081723626
141668,"private static ClientSession connectWithRetries(SshClient client,ClientConfig config) throws Exception, InterruptedException {
  ClientSession session=null;
  int retries=0;
  do {
    try {
      ConnectFuture future=client.connect(config.getUser(),config.getHost(),config.getPort());
      future.await();
      session=future.getSession();
    }
 catch (    RuntimeSshException ex) {
      if (++retries < 30) {
        TimeUnit.SECONDS.sleep(1);
      }
 else {
        throw ex;
      }
    }
  }
 while (session == null);
  return session;
}","private static ClientSession connectWithRetries(SshClient client,ClientConfig config) throws Exception, InterruptedException {
  ClientSession session=null;
  int retries=0;
  do {
    try {
      ConnectFuture future=client.connect(config.getUser(),config.getHost(),config.getPort());
      future.await();
      session=future.getSession();
    }
 catch (    RuntimeSshException ex) {
      if (++retries < 10) {
        TimeUnit.SECONDS.sleep(2);
      }
 else {
        throw ex;
      }
    }
  }
 while (session == null);
  return session;
}",0.9963436928702012
141669,"public void connect(String[] args) throws Exception {
  ClientConfig config=new ClientConfig(args);
  SimpleLogger.setLevel(config.getLevel());
  if (config.getFile() != null) {
    StringBuilder sb=new StringBuilder();
    sb.setLength(0);
    try (Reader reader=new BufferedReader(new InputStreamReader(new FileInputStream(config.getFile())))){
      for (int c=reader.read(); c >= 0; c=reader.read()) {
        sb.append((char)c);
      }
    }
     config.setCommand(sb.toString());
  }
 else   if (config.isBatch()) {
    StringBuilder sb=new StringBuilder();
    sb.setLength(0);
    Reader reader=new BufferedReader(new InputStreamReader(System.in));
    for (int c=reader.read(); c >= 0; c=reader.read()) {
      sb.append((char)c);
    }
    config.setCommand(sb.toString());
  }
  SshClient client=ClientBuilder.builder().build();
  setupAgent(config.getUser(),config.getKeyFile(),client);
  client.getProperties().put(FactoryManager.IDLE_TIMEOUT,String.valueOf(config.getIdleTimeout()));
  final Console console=System.console();
  if (console != null) {
    client.setUserInteraction(new UserInteraction(){
      @Override public void welcome(      ClientSession s,      String banner,      String lang){
        System.err.println(banner);
      }
      @Override public String[] interactive(      ClientSession s,      String name,      String instruction,      String lang,      String[] prompt,      boolean[] echo){
        String[] answers=new String[prompt.length];
        try {
          for (int i=0; i < prompt.length; i++) {
            if (echo[i]) {
              answers[i]=console.readLine(prompt[i] + ""String_Node_Str"");
            }
 else {
              answers[i]=new String(console.readPassword(prompt[i] + ""String_Node_Str""));
            }
            if (answers[i] == null) {
              return null;
            }
          }
          return answers;
        }
 catch (        IOError e) {
          return null;
        }
      }
      @Override public boolean isInteractionAllowed(      ClientSession session){
        return true;
      }
      @Override public void serverVersionInfo(      ClientSession session,      List<String> lines){
      }
      @Override public String getUpdatedPassword(      ClientSession session,      String prompt,      String lang){
        return null;
      }
    }
);
  }
  client.start();
  if (console != null) {
    console.printf(""String_Node_Str"",config.getUser());
  }
  ClientSession session=connectWithRetries(client,config);
  if (config.getPassword() != null) {
    session.addPasswordIdentity(config.getPassword());
  }
  session.auth().verify();
  int exitStatus=0;
  Terminal terminal=TerminalBuilder.terminal();
  Attributes attributes=terminal.enterRawMode();
  IOConsoleOutputStream outputStream=RuntimeConsoleUtil.getOutputStream();
  try {
    ClientChannel channel;
    if (config.getCommand().length() > 0) {
      channel=session.createChannel(""String_Node_Str"",config.getCommand() + ""String_Node_Str"");
      channel.setIn(new ByteArrayInputStream(new byte[0]));
    }
 else {
      ChannelShell shell=session.createShellChannel();
      channel=shell;
      channel.setIn(new NoCloseInputStream(inputStream));
      Map<PtyMode,Integer> modes=new HashMap<>();
      modes.put(PtyMode.VINTR,attributes.getControlChar(ControlChar.VINTR));
      modes.put(PtyMode.VQUIT,attributes.getControlChar(ControlChar.VQUIT));
      modes.put(PtyMode.VERASE,attributes.getControlChar(ControlChar.VERASE));
      modes.put(PtyMode.VKILL,attributes.getControlChar(ControlChar.VKILL));
      modes.put(PtyMode.VEOF,attributes.getControlChar(ControlChar.VEOF));
      modes.put(PtyMode.VEOL,attributes.getControlChar(ControlChar.VEOL));
      modes.put(PtyMode.VEOL2,attributes.getControlChar(ControlChar.VEOL2));
      modes.put(PtyMode.VSTART,attributes.getControlChar(ControlChar.VSTART));
      modes.put(PtyMode.VSTOP,attributes.getControlChar(ControlChar.VSTOP));
      modes.put(PtyMode.VSUSP,attributes.getControlChar(ControlChar.VSUSP));
      modes.put(PtyMode.VDSUSP,attributes.getControlChar(ControlChar.VDSUSP));
      modes.put(PtyMode.VREPRINT,attributes.getControlChar(ControlChar.VREPRINT));
      modes.put(PtyMode.VWERASE,attributes.getControlChar(ControlChar.VWERASE));
      modes.put(PtyMode.VLNEXT,attributes.getControlChar(ControlChar.VLNEXT));
      modes.put(PtyMode.VSTATUS,attributes.getControlChar(ControlChar.VSTATUS));
      modes.put(PtyMode.VDISCARD,attributes.getControlChar(ControlChar.VDISCARD));
      modes.put(PtyMode.IGNPAR,getFlag(attributes,InputFlag.IGNPAR));
      modes.put(PtyMode.PARMRK,getFlag(attributes,InputFlag.PARMRK));
      modes.put(PtyMode.INPCK,getFlag(attributes,InputFlag.INPCK));
      modes.put(PtyMode.ISTRIP,getFlag(attributes,InputFlag.ISTRIP));
      modes.put(PtyMode.INLCR,getFlag(attributes,InputFlag.INLCR));
      modes.put(PtyMode.IGNCR,getFlag(attributes,InputFlag.IGNCR));
      modes.put(PtyMode.ICRNL,getFlag(attributes,InputFlag.ICRNL));
      modes.put(PtyMode.IXON,getFlag(attributes,InputFlag.IXON));
      modes.put(PtyMode.IXANY,getFlag(attributes,InputFlag.IXANY));
      modes.put(PtyMode.IXOFF,getFlag(attributes,InputFlag.IXOFF));
      modes.put(PtyMode.ISIG,getFlag(attributes,LocalFlag.ISIG));
      modes.put(PtyMode.ICANON,getFlag(attributes,LocalFlag.ICANON));
      modes.put(PtyMode.ECHO,getFlag(attributes,LocalFlag.ECHO));
      modes.put(PtyMode.ECHOE,getFlag(attributes,LocalFlag.ECHOE));
      modes.put(PtyMode.ECHOK,getFlag(attributes,LocalFlag.ECHOK));
      modes.put(PtyMode.ECHONL,getFlag(attributes,LocalFlag.ECHONL));
      modes.put(PtyMode.NOFLSH,getFlag(attributes,LocalFlag.NOFLSH));
      modes.put(PtyMode.TOSTOP,getFlag(attributes,LocalFlag.TOSTOP));
      modes.put(PtyMode.IEXTEN,getFlag(attributes,LocalFlag.IEXTEN));
      modes.put(PtyMode.OPOST,getFlag(attributes,OutputFlag.OPOST));
      modes.put(PtyMode.ONLCR,getFlag(attributes,OutputFlag.ONLCR));
      modes.put(PtyMode.OCRNL,getFlag(attributes,OutputFlag.OCRNL));
      modes.put(PtyMode.ONOCR,getFlag(attributes,OutputFlag.ONOCR));
      modes.put(PtyMode.ONLRET,getFlag(attributes,OutputFlag.ONLRET));
      shell.setPtyModes(modes);
      shell.setPtyColumns(terminal.getWidth());
      shell.setPtyLines(terminal.getHeight());
      shell.setAgentForwarding(true);
      String ctype=System.getenv(""String_Node_Str"");
      if (ctype == null) {
        ctype=Locale.getDefault().toString() + ""String_Node_Str"" + System.getProperty(""String_Node_Str"",Charset.defaultCharset().name());
      }
      shell.setEnv(""String_Node_Str"",ctype);
    }
    channel.setOut(outputStream);
    channel.setErr(outputStream);
    channel.open().verify();
    if (channel instanceof PtyCapableChannelSession) {
      registerSignalHandler(terminal,(PtyCapableChannelSession)channel);
    }
    channel.waitFor(EnumSet.of(ClientChannelEvent.CLOSED),0);
    if (channel.getExitStatus() != null) {
      exitStatus=channel.getExitStatus();
    }
  }
  finally {
    terminal.setAttributes(attributes);
    outputStream.close();
    inputStream.close();
  }
}","public void connect(String[] args) throws Exception {
  ClientConfig config=new ClientConfig(args);
  SimpleLogger.setLevel(config.getLevel());
  if (config.getFile() != null) {
    StringBuilder sb=new StringBuilder();
    sb.setLength(0);
    try (Reader reader=new BufferedReader(new InputStreamReader(new FileInputStream(config.getFile())))){
      for (int c=reader.read(); c >= 0; c=reader.read()) {
        sb.append((char)c);
      }
    }
     config.setCommand(sb.toString());
  }
 else   if (config.isBatch()) {
    StringBuilder sb=new StringBuilder();
    sb.setLength(0);
    Reader reader=new BufferedReader(new InputStreamReader(System.in));
    for (int c=reader.read(); c >= 0; c=reader.read()) {
      sb.append((char)c);
    }
    config.setCommand(sb.toString());
  }
  SshClient client=ClientBuilder.builder().build();
  final Console console=System.console();
  if (console != null) {
    client.setUserInteraction(new UserInteraction(){
      @Override public void welcome(      ClientSession s,      String banner,      String lang){
        System.err.println(banner);
      }
      @Override public String[] interactive(      ClientSession s,      String name,      String instruction,      String lang,      String[] prompt,      boolean[] echo){
        String[] answers=new String[prompt.length];
        try {
          for (int i=0; i < prompt.length; i++) {
            if (echo[i]) {
              answers[i]=console.readLine(prompt[i] + ""String_Node_Str"");
            }
 else {
              answers[i]=new String(console.readPassword(prompt[i] + ""String_Node_Str""));
            }
            if (answers[i] == null) {
              return null;
            }
          }
          return answers;
        }
 catch (        IOError e) {
          return null;
        }
      }
      @Override public boolean isInteractionAllowed(      ClientSession session){
        return true;
      }
      @Override public void serverVersionInfo(      ClientSession session,      List<String> lines){
      }
      @Override public String getUpdatedPassword(      ClientSession session,      String prompt,      String lang){
        return null;
      }
    }
);
  }
  client.start();
  ClientSession session=connectWithRetries(client,config);
  if (config.getPassword() != null) {
    session.addPasswordIdentity(config.getPassword());
  }
  session.auth().verify();
  int exitStatus=0;
  Terminal terminal=TerminalBuilder.terminal();
  Attributes attributes=terminal.enterRawMode();
  IOConsoleOutputStream outputStream=RuntimeConsoleUtil.getOutputStream();
  try {
    ClientChannel channel;
    if (config.getCommand().length() > 0) {
      channel=session.createChannel(""String_Node_Str"",config.getCommand() + ""String_Node_Str"");
      channel.setIn(new ByteArrayInputStream(new byte[0]));
    }
 else {
      ChannelShell shell=session.createShellChannel();
      channel=shell;
      channel.setIn(new NoCloseInputStream(inputStream));
      Map<PtyMode,Integer> modes=new HashMap<>();
      modes.put(PtyMode.VINTR,attributes.getControlChar(ControlChar.VINTR));
      modes.put(PtyMode.VQUIT,attributes.getControlChar(ControlChar.VQUIT));
      modes.put(PtyMode.VERASE,attributes.getControlChar(ControlChar.VERASE));
      modes.put(PtyMode.VKILL,attributes.getControlChar(ControlChar.VKILL));
      modes.put(PtyMode.VEOF,attributes.getControlChar(ControlChar.VEOF));
      modes.put(PtyMode.VEOL,attributes.getControlChar(ControlChar.VEOL));
      modes.put(PtyMode.VEOL2,attributes.getControlChar(ControlChar.VEOL2));
      modes.put(PtyMode.VSTART,attributes.getControlChar(ControlChar.VSTART));
      modes.put(PtyMode.VSTOP,attributes.getControlChar(ControlChar.VSTOP));
      modes.put(PtyMode.VSUSP,attributes.getControlChar(ControlChar.VSUSP));
      modes.put(PtyMode.VDSUSP,attributes.getControlChar(ControlChar.VDSUSP));
      modes.put(PtyMode.VREPRINT,attributes.getControlChar(ControlChar.VREPRINT));
      modes.put(PtyMode.VWERASE,attributes.getControlChar(ControlChar.VWERASE));
      modes.put(PtyMode.VLNEXT,attributes.getControlChar(ControlChar.VLNEXT));
      modes.put(PtyMode.VSTATUS,attributes.getControlChar(ControlChar.VSTATUS));
      modes.put(PtyMode.VDISCARD,attributes.getControlChar(ControlChar.VDISCARD));
      modes.put(PtyMode.IGNPAR,getFlag(attributes,InputFlag.IGNPAR));
      modes.put(PtyMode.PARMRK,getFlag(attributes,InputFlag.PARMRK));
      modes.put(PtyMode.INPCK,getFlag(attributes,InputFlag.INPCK));
      modes.put(PtyMode.ISTRIP,getFlag(attributes,InputFlag.ISTRIP));
      modes.put(PtyMode.INLCR,getFlag(attributes,InputFlag.INLCR));
      modes.put(PtyMode.IGNCR,getFlag(attributes,InputFlag.IGNCR));
      modes.put(PtyMode.ICRNL,getFlag(attributes,InputFlag.ICRNL));
      modes.put(PtyMode.IXON,getFlag(attributes,InputFlag.IXON));
      modes.put(PtyMode.IXANY,getFlag(attributes,InputFlag.IXANY));
      modes.put(PtyMode.IXOFF,getFlag(attributes,InputFlag.IXOFF));
      modes.put(PtyMode.ISIG,getFlag(attributes,LocalFlag.ISIG));
      modes.put(PtyMode.ICANON,getFlag(attributes,LocalFlag.ICANON));
      modes.put(PtyMode.ECHO,getFlag(attributes,LocalFlag.ECHO));
      modes.put(PtyMode.ECHOE,getFlag(attributes,LocalFlag.ECHOE));
      modes.put(PtyMode.ECHOK,getFlag(attributes,LocalFlag.ECHOK));
      modes.put(PtyMode.ECHONL,getFlag(attributes,LocalFlag.ECHONL));
      modes.put(PtyMode.NOFLSH,getFlag(attributes,LocalFlag.NOFLSH));
      modes.put(PtyMode.TOSTOP,getFlag(attributes,LocalFlag.TOSTOP));
      modes.put(PtyMode.IEXTEN,getFlag(attributes,LocalFlag.IEXTEN));
      modes.put(PtyMode.OPOST,getFlag(attributes,OutputFlag.OPOST));
      modes.put(PtyMode.ONLCR,getFlag(attributes,OutputFlag.ONLCR));
      modes.put(PtyMode.OCRNL,getFlag(attributes,OutputFlag.OCRNL));
      modes.put(PtyMode.ONOCR,getFlag(attributes,OutputFlag.ONOCR));
      modes.put(PtyMode.ONLRET,getFlag(attributes,OutputFlag.ONLRET));
      shell.setPtyModes(modes);
      shell.setPtyColumns(terminal.getWidth());
      shell.setPtyLines(terminal.getHeight());
      shell.setAgentForwarding(true);
      String ctype=System.getenv(""String_Node_Str"");
      if (ctype == null) {
        ctype=Locale.getDefault().toString() + ""String_Node_Str"" + System.getProperty(""String_Node_Str"",Charset.defaultCharset().name());
      }
      shell.setEnv(""String_Node_Str"",ctype);
    }
    channel.setOut(outputStream);
    channel.setErr(outputStream);
    channel.open().verify();
    if (channel instanceof PtyCapableChannelSession) {
      registerSignalHandler(terminal,(PtyCapableChannelSession)channel);
    }
    channel.waitFor(EnumSet.of(ClientChannelEvent.CLOSED),0);
    if (channel.getExitStatus() != null) {
      exitStatus=channel.getExitStatus();
    }
  }
  finally {
    terminal.setAttributes(attributes);
    outputStream.close();
    inputStream.close();
  }
}",0.9826043381773928
141670,"public static IOConsole findConsole(String name){
  ConsolePlugin plugin=ConsolePlugin.getDefault();
  IConsoleManager conMan=plugin.getConsoleManager();
  IConsole[] existing=conMan.getConsoles();
  for (int i=0; i < existing.length; i++) {
    if (name.equals(existing[i].getName()))     return (IOConsole)existing[i];
  }
  IOConsole myConsole=new IOConsole(name,null);
  conMan.addConsoles(new IConsole[]{myConsole});
  return myConsole;
}","public static IOConsole findConsole(){
  ConsolePlugin plugin=ConsolePlugin.getDefault();
  IConsoleManager conMan=plugin.getConsoleManager();
  IConsole[] existing=conMan.getConsoles();
  for (int i=0; i < existing.length; i++) {
    if (KARAF_CONSOLE.equals(existing[i].getName()))     return (IOConsole)existing[i];
  }
  IOConsole myConsole=new IOConsole(KARAF_CONSOLE,null);
  conMan.addConsoles(new IConsole[]{myConsole});
  return myConsole;
}",0.9496080627099664
141671,"public static void loadConsole(){
  clearConsole();
  RuntimeClient m=new RuntimeClient();
  PipedInputStream pis=new PipedInputStream();
  PipedOutputStream pos=new PipedOutputStream();
  try {
    pos.connect(pis);
  }
 catch (  IOException e2) {
    e2.printStackTrace();
  }
  m.setInputStream(pis);
  Thread consoleThread=new Thread(""String_Node_Str""){
    @Override public void run(){
      InputStream is=findConsole(KARAF_CONSOLE).getInputStream();
      int count=0;
      byte[] bs=new byte[1024];
      try {
        while ((count=is.read(bs)) > 0) {
          pos.write(Arrays.copyOf(bs,count));
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
 finally {
        try {
          pos.close();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  consoleThread.start();
  Thread connectThread=new Thread(""String_Node_Str""){
    @Override public void run(){
      String[] karafArgs=new String[]{""String_Node_Str"",""String_Node_Str""};
      try {
        m.connect(karafArgs);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  connectThread.start();
}","public static void loadConsole(){
  clearConsole();
  RuntimeClient client=new RuntimeClient();
  PipedInputStream pis=new PipedInputStream();
  PipedOutputStream pos=new PipedOutputStream();
  try {
    pos.connect(pis);
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  client.setInputStream(pis);
  Thread consoleThread=new Thread(""String_Node_Str""){
    @Override public void run(){
      InputStream is=findConsole().getInputStream();
      int count=0;
      byte[] bs=new byte[1024];
      try {
        while ((count=is.read(bs)) > 0) {
          for (; bs[count - 1] == 10; count--) {
          }
          pos.write(Arrays.copyOf(bs,count));
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
 finally {
        try {
          pos.close();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  consoleThread.start();
  Thread connectThread=new Thread(""String_Node_Str""){
    @Override public void run(){
      IPreferenceStore store=ESBRunContainerPlugin.getDefault().getPreferenceStore();
      String etcLocation=store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_LOCATION);
      String host=store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_HOST);
      System.setProperty(""String_Node_Str"",etcLocation + ""String_Node_Str"");
      String[] karafArgs=new String[]{""String_Node_Str"",host};
      try {
        client.connect(karafArgs);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  connectThread.start();
}",0.7995705082319255
141672,"public static IOConsoleOutputStream getOutputStream(){
  IOConsoleOutputStream outputStream=findConsole(KARAF_CONSOLE).newOutputStream();
  outputStream.setEncoding(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  return outputStream;
}","public static IOConsoleOutputStream getOutputStream(){
  IOConsoleOutputStream outputStream=findConsole().newOutputStream();
  outputStream.setEncoding(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  return outputStream;
}",0.4698544698544699
141673,"@Override public void run(){
  String[] karafArgs=new String[]{""String_Node_Str"",""String_Node_Str""};
  try {
    m.connect(karafArgs);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  IPreferenceStore store=ESBRunContainerPlugin.getDefault().getPreferenceStore();
  String etcLocation=store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_LOCATION);
  String host=store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_HOST);
  System.setProperty(""String_Node_Str"",etcLocation + ""String_Node_Str"");
  String[] karafArgs=new String[]{""String_Node_Str"",host};
  try {
    client.connect(karafArgs);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.2320441988950276
141674,"@Override protected void addMavenBuildScripts(ExportFileResource[] processes,List<URL> scriptsUrls,Map<String,String> mavenPropertiesMap){
  if (!PluginChecker.isPluginLoaded(PluginChecker.EXPORT_ROUTE_PLUGIN_ID)) {
    return;
  }
  Item item=processes[0].getItem();
  File templatePomFile=null, templateBundleFile=null, templateFeatureFile=null, templateParentFile=null;
  if (item != null) {
    IPath itemLocationPath=ItemResourceUtil.getItemLocationPath(item.getProperty());
    IFolder objectTypeFolder=ItemResourceUtil.getObjectTypeFolder(item.getProperty());
    if (itemLocationPath != null && objectTypeFolder != null) {
      IPath itemRelativePath=itemLocationPath.removeLastSegments(1).makeRelativeTo(objectTypeFolder.getLocation());
      templatePomFile=PomUtil.getTemplateFile(objectTypeFolder,itemRelativePath,TalendMavenConstants.POM_FILE_NAME);
      if (FilesUtils.allInSameFolder(templatePomFile,IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_BUNDLE_FILE_NAME,IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_FEATURE_FILE_NAME,IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_PARENT_FILE_NAME)) {
        templateBundleFile=new File(templatePomFile.getParentFile(),IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_BUNDLE_FILE_NAME);
        templateFeatureFile=new File(templatePomFile.getParentFile(),IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_FEATURE_FILE_NAME);
        templateParentFile=new File(templatePomFile.getParentFile(),IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_PARENT_FILE_NAME);
      }
 else {
        templatePomFile=null;
      }
    }
  }
  File mavenBuildFile=new File(getTmpFolder() + PATH_SEPARATOR + IProjectSettingTemplateConstants.POM_FILE_NAME);
  File mavenBuildBundleFile=new File(getTmpFolder() + PATH_SEPARATOR + IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_BUNDLE_FILE_NAME);
  File mavenBuildFeatureFile=new File(getTmpFolder() + PATH_SEPARATOR + IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_FEATURE_FILE_NAME);
  File mavenBuildParentFile=new File(getTmpFolder() + PATH_SEPARATOR + IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_PARENT_FILE_NAME);
  try {
    String mavenScript=MavenTemplateManager.getTemplateContent(templatePomFile,IProjectSettingPreferenceConstants.TEMPLATE_ROUTES_KARAF_POM,PluginChecker.EXPORT_ROUTE_PLUGIN_ID,IProjectSettingTemplateConstants.PATH_ROUTE + '/' + TalendMavenConstants.POM_FILE_NAME);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildFile,mavenPropertiesMap,false,true);
      scriptsUrls.add(mavenBuildFile.toURI().toURL());
    }
    mavenScript=MavenTemplateManager.getTemplateContent(templateBundleFile,IProjectSettingPreferenceConstants.TEMPLATE_ROUTES_KARAF_BUNDLE,PluginChecker.EXPORT_ROUTE_PLUGIN_ID,IProjectSettingTemplateConstants.PATH_ROUTE + '/' + IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_BUNDLE_FILE_NAME);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildBundleFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildBundleFile,mavenPropertiesMap,true,false);
      scriptsUrls.add(mavenBuildBundleFile.toURI().toURL());
    }
    mavenScript=MavenTemplateManager.getTemplateContent(templateFeatureFile,IProjectSettingPreferenceConstants.TEMPLATE_ROUTES_KARAF_FEATURE,PluginChecker.EXPORT_ROUTE_PLUGIN_ID,IProjectSettingTemplateConstants.PATH_ROUTE + '/' + IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_FEATURE_FILE_NAME);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildFeatureFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildFeatureFile,mavenPropertiesMap);
      scriptsUrls.add(mavenBuildFeatureFile.toURI().toURL());
    }
    mavenScript=MavenTemplateManager.getTemplateContent(templateParentFile,IProjectSettingPreferenceConstants.TEMPLATE_ROUTES_KARAF_PARENT,PluginChecker.EXPORT_ROUTE_PLUGIN_ID,IProjectSettingTemplateConstants.PATH_ROUTE + '/' + IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_PARENT_FILE_NAME);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildParentFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildParentFile,mavenPropertiesMap);
      scriptsUrls.add(mavenBuildParentFile.toURI().toURL());
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override protected void addMavenBuildScripts(ExportFileResource[] processes,List<URL> scriptsUrls,Map<String,String> mavenPropertiesMap){
  if (!PluginChecker.isPluginLoaded(PluginChecker.EXPORT_ROUTE_PLUGIN_ID)) {
    return;
  }
  Item item=processes[0].getItem();
  File templatePomFile=null, templateBundleFile=null, templateFeatureFile=null, templateParentFile=null;
  if (item != null) {
    IPath itemLocationPath=ItemResourceUtil.getItemLocationPath(item.getProperty());
    IFolder objectTypeFolder=ItemResourceUtil.getObjectTypeFolder(item.getProperty());
    if (itemLocationPath != null && objectTypeFolder != null) {
      IPath itemRelativePath=itemLocationPath.removeLastSegments(1).makeRelativeTo(objectTypeFolder.getLocation());
      templatePomFile=PomUtil.getTemplateFile(objectTypeFolder,itemRelativePath,TalendMavenConstants.POM_FILE_NAME);
      if (FilesUtils.allInSameFolder(templatePomFile,IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_BUNDLE_FILE_NAME,IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_FEATURE_FILE_NAME,IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_PARENT_FILE_NAME)) {
        templateBundleFile=new File(templatePomFile.getParentFile(),IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_BUNDLE_FILE_NAME);
        templateFeatureFile=new File(templatePomFile.getParentFile(),IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_FEATURE_FILE_NAME);
        templateParentFile=new File(templatePomFile.getParentFile(),IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_PARENT_FILE_NAME);
      }
 else {
        templatePomFile=null;
      }
    }
  }
  File mavenBuildFile=new File(getTmpFolder() + PATH_SEPARATOR + IProjectSettingTemplateConstants.POM_FILE_NAME);
  File mavenBuildBundleFile=new File(getTmpFolder() + PATH_SEPARATOR + IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_BUNDLE_FILE_NAME);
  File mavenBuildFeatureFile=new File(getTmpFolder() + PATH_SEPARATOR + IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_FEATURE_FILE_NAME);
  File mavenBuildParentFile=new File(getTmpFolder() + PATH_SEPARATOR + IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_PARENT_FILE_NAME);
  try {
    final Map<String,Object> templateParameters=PomUtil.getTemplateParameters(item.getProperty());
    String mavenScript=MavenTemplateManager.getTemplateContent(templatePomFile,IProjectSettingPreferenceConstants.TEMPLATE_ROUTES_KARAF_POM,PluginChecker.EXPORT_ROUTE_PLUGIN_ID,IProjectSettingTemplateConstants.PATH_ROUTE + '/' + TalendMavenConstants.POM_FILE_NAME,templateParameters);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildFile,mavenPropertiesMap,false,true);
      scriptsUrls.add(mavenBuildFile.toURI().toURL());
    }
    mavenScript=MavenTemplateManager.getTemplateContent(templateBundleFile,IProjectSettingPreferenceConstants.TEMPLATE_ROUTES_KARAF_BUNDLE,PluginChecker.EXPORT_ROUTE_PLUGIN_ID,IProjectSettingTemplateConstants.PATH_ROUTE + '/' + IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_BUNDLE_FILE_NAME,templateParameters);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildBundleFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildBundleFile,mavenPropertiesMap,true,false);
      scriptsUrls.add(mavenBuildBundleFile.toURI().toURL());
    }
    mavenScript=MavenTemplateManager.getTemplateContent(templateFeatureFile,IProjectSettingPreferenceConstants.TEMPLATE_ROUTES_KARAF_FEATURE,PluginChecker.EXPORT_ROUTE_PLUGIN_ID,IProjectSettingTemplateConstants.PATH_ROUTE + '/' + IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_FEATURE_FILE_NAME,templateParameters);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildFeatureFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildFeatureFile,mavenPropertiesMap);
      scriptsUrls.add(mavenBuildFeatureFile.toURI().toURL());
    }
    mavenScript=MavenTemplateManager.getTemplateContent(templateParentFile,IProjectSettingPreferenceConstants.TEMPLATE_ROUTES_KARAF_PARENT,PluginChecker.EXPORT_ROUTE_PLUGIN_ID,IProjectSettingTemplateConstants.PATH_ROUTE + '/' + IProjectSettingTemplateConstants.MAVEN_KARAF_BUILD_PARENT_FILE_NAME,templateParameters);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildParentFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildParentFile,mavenPropertiesMap);
      scriptsUrls.add(mavenBuildParentFile.toURI().toURL());
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.980422866092404
141675,"@Override public void widgetSelected(SelectionEvent e){
  if (((Combo)e.getSource()).getText().startsWith(ESB_RUNTIME_ITEM)) {
    IPreferenceStore store=ESBRunContainerPlugin.getDefault().getPreferenceStore();
    String host=store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_HOST);
    File containerDir=new File(store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_LOCATION));
    if (containerDir.exists() || !(host.equals(""String_Node_Str"") || host.equals(""String_Node_Str""))) {
      defaultContextManager=RunProcessPlugin.getDefault().getRunProcessContextManager();
      esbProcessContext=defaultContextManager.getActiveContext();
      if (runtimeContextManager == null) {
        runtimeContextManager=new RunContainerProcessContextManager();
      }
      RunProcessPlugin.getDefault().setRunProcessContextManager(runtimeContextManager);
      RunProcessPlugin.getDefault().getRunProcessContextManager().setActiveProcess(esbProcessContext.getProcess());
      ProcessManager.getInstance().setProcessContext(runtimeContextManager.getActiveContext());
    }
 else {
      boolean openPrefs=MessageDialog.openConfirm(jobComposite.getShell(),RunContainerMessages.getString(""String_Node_Str""),RunContainerMessages.getString(""String_Node_Str""));
      if (openPrefs) {
        PreferenceDialog d=new PreferenceDialog(jobComposite.getShell(),PlatformUI.getWorkbench().getPreferenceManager());
        d.setSelectedNode(RunContainerPreferencePage.ID);
        d.open();
      }
    }
  }
 else   if (defaultContextManager != null) {
    RunProcessPlugin.getDefault().setRunProcessContextManager(defaultContextManager);
  }
}","@Override public void widgetSelected(SelectionEvent e){
  if (((Combo)e.getSource()).getText().startsWith(ESB_RUNTIME_ITEM)) {
    IPreferenceStore store=ESBRunContainerPlugin.getDefault().getPreferenceStore();
    String host=store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_HOST);
    File containerDir=new File(store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_LOCATION));
    if (containerDir.exists() || !(host.equals(""String_Node_Str"") || host.equals(""String_Node_Str""))) {
      defaultContextManager=RunProcessPlugin.getDefault().getRunProcessContextManager();
      esbProcessContext=defaultContextManager.getActiveContext();
      if (runtimeContextManager == null) {
        runtimeContextManager=new RunContainerProcessContextManager();
      }
      RunProcessPlugin.getDefault().setRunProcessContextManager(runtimeContextManager);
      RunProcessPlugin.getDefault().getRunProcessContextManager().setActiveProcess(esbProcessContext.getProcess());
      ProcessManager.getInstance().setProcessContext(runtimeContextManager.getActiveContext());
    }
 else {
      boolean openPrefs=MessageDialog.openConfirm(jobComposite.getShell(),RunContainerMessages.getString(""String_Node_Str""),RunContainerMessages.getString(""String_Node_Str""));
      if (openPrefs) {
        PreferenceDialog dlg=new PreferenceDialog(jobComposite.getShell(),PlatformUI.getWorkbench().getPreferenceManager());
        dlg.setSelectedNode(RunContainerPreferencePage.ID);
        dlg.open();
        ((Combo)e.getSource()).select(index);
      }
    }
  }
 else   if (defaultContextManager != null) {
    RunProcessPlugin.getDefault().setRunProcessContextManager(defaultContextManager);
  }
}",0.9845053635280095
141676,"@Override public void addRuntimeServer(TargetExecComposite targetExecComposite,JobJvmComposite jobComposite){
  Combo targetCombo=null;
  IPreferenceStore store=ESBRunContainerPlugin.getDefault().getPreferenceStore();
  String url=store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_HOST);
  String port=store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_PORT);
  String rt=ESB_RUNTIME_ITEM + ""String_Node_Str"" + url+ ""String_Node_Str""+ port+ ""String_Node_Str"";
  if (JobJvmComposite.class == jobComposite.getClass()) {
    try {
      Control control=((Composite)jobComposite.getChildren()[0]).getChildren()[0];
      if (control instanceof StyledText) {
        StyledText styled=(StyledText)control;
        styled.setText(RunContainerMessages.getString(""String_Node_Str""));
        targetCombo=new Combo((Composite)jobComposite.getChildren()[0],SWT.BORDER | SWT.READ_ONLY);
        GridData data=new GridData(GridData.FILL_BOTH);
        data.horizontalIndent=5;
        targetCombo.setLayoutData(data);
        targetCombo.add(""String_Node_Str"",0);
        targetCombo.add(rt,1);
        this.index=targetCombo.getSelectionIndex();
        targetCombo.select(index == -1 ? 0 : index);
      }
    }
 catch (    Exception ex) {
    }
  }
 else {
    try {
      Control control=((Composite)jobComposite.getChildren()[0]).getChildren()[0];
      if (control instanceof Combo) {
        targetCombo=(Combo)control;
        targetCombo.add(rt);
        this.index=targetCombo.getSelectionIndex();
      }
    }
 catch (    Exception ex) {
    }
  }
  if (targetCombo != null) {
    if (RunProcessPlugin.getDefault().getRunProcessContextManager() instanceof RunContainerProcessContextManager) {
      targetCombo.select(targetCombo.indexOf(rt));
    }
 else {
      targetCombo.select(index);
    }
    targetCombo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (((Combo)e.getSource()).getText().startsWith(ESB_RUNTIME_ITEM)) {
          IPreferenceStore store=ESBRunContainerPlugin.getDefault().getPreferenceStore();
          String host=store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_HOST);
          File containerDir=new File(store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_LOCATION));
          if (containerDir.exists() || !(host.equals(""String_Node_Str"") || host.equals(""String_Node_Str""))) {
            defaultContextManager=RunProcessPlugin.getDefault().getRunProcessContextManager();
            esbProcessContext=defaultContextManager.getActiveContext();
            if (runtimeContextManager == null) {
              runtimeContextManager=new RunContainerProcessContextManager();
            }
            RunProcessPlugin.getDefault().setRunProcessContextManager(runtimeContextManager);
            RunProcessPlugin.getDefault().getRunProcessContextManager().setActiveProcess(esbProcessContext.getProcess());
            ProcessManager.getInstance().setProcessContext(runtimeContextManager.getActiveContext());
          }
 else {
            boolean openPrefs=MessageDialog.openConfirm(jobComposite.getShell(),RunContainerMessages.getString(""String_Node_Str""),RunContainerMessages.getString(""String_Node_Str""));
            if (openPrefs) {
              PreferenceDialog d=new PreferenceDialog(jobComposite.getShell(),PlatformUI.getWorkbench().getPreferenceManager());
              d.setSelectedNode(RunContainerPreferencePage.ID);
              d.open();
            }
          }
        }
 else         if (defaultContextManager != null) {
          RunProcessPlugin.getDefault().setRunProcessContextManager(defaultContextManager);
        }
      }
    }
);
  }
}","@Override public void addRuntimeServer(TargetExecComposite targetExecComposite,JobJvmComposite jobComposite){
  Combo targetCombo=null;
  IPreferenceStore store=ESBRunContainerPlugin.getDefault().getPreferenceStore();
  String url=store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_HOST);
  String port=store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_PORT);
  String rt=ESB_RUNTIME_ITEM + ""String_Node_Str"" + url+ ""String_Node_Str""+ port+ ""String_Node_Str"";
  if (JobJvmComposite.class == jobComposite.getClass()) {
    try {
      Control control=((Composite)jobComposite.getChildren()[0]).getChildren()[0];
      if (control instanceof StyledText) {
        StyledText styled=(StyledText)control;
        styled.setText(RunContainerMessages.getString(""String_Node_Str""));
        targetCombo=new Combo((Composite)jobComposite.getChildren()[0],SWT.BORDER | SWT.READ_ONLY);
        GridData data=new GridData(GridData.FILL_BOTH);
        data.horizontalIndent=5;
        targetCombo.setLayoutData(data);
        targetCombo.add(""String_Node_Str"",0);
        targetCombo.add(rt,1);
        this.index=targetCombo.getSelectionIndex();
        targetCombo.select(index == -1 ? 0 : index);
      }
    }
 catch (    Exception ex) {
    }
  }
 else {
    try {
      Control control=((Composite)jobComposite.getChildren()[0]).getChildren()[0];
      if (control instanceof Combo) {
        targetCombo=(Combo)control;
        targetCombo.add(rt);
        this.index=targetCombo.getSelectionIndex();
      }
    }
 catch (    Exception ex) {
    }
  }
  if (targetCombo != null) {
    if (RunProcessPlugin.getDefault().getRunProcessContextManager() instanceof RunContainerProcessContextManager) {
      targetCombo.select(targetCombo.indexOf(rt));
    }
 else {
      targetCombo.select(index);
    }
    targetCombo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (((Combo)e.getSource()).getText().startsWith(ESB_RUNTIME_ITEM)) {
          IPreferenceStore store=ESBRunContainerPlugin.getDefault().getPreferenceStore();
          String host=store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_HOST);
          File containerDir=new File(store.getString(RunContainerPreferenceInitializer.P_ESB_RUNTIME_LOCATION));
          if (containerDir.exists() || !(host.equals(""String_Node_Str"") || host.equals(""String_Node_Str""))) {
            defaultContextManager=RunProcessPlugin.getDefault().getRunProcessContextManager();
            esbProcessContext=defaultContextManager.getActiveContext();
            if (runtimeContextManager == null) {
              runtimeContextManager=new RunContainerProcessContextManager();
            }
            RunProcessPlugin.getDefault().setRunProcessContextManager(runtimeContextManager);
            RunProcessPlugin.getDefault().getRunProcessContextManager().setActiveProcess(esbProcessContext.getProcess());
            ProcessManager.getInstance().setProcessContext(runtimeContextManager.getActiveContext());
          }
 else {
            boolean openPrefs=MessageDialog.openConfirm(jobComposite.getShell(),RunContainerMessages.getString(""String_Node_Str""),RunContainerMessages.getString(""String_Node_Str""));
            if (openPrefs) {
              PreferenceDialog dlg=new PreferenceDialog(jobComposite.getShell(),PlatformUI.getWorkbench().getPreferenceManager());
              dlg.setSelectedNode(RunContainerPreferencePage.ID);
              dlg.open();
              ((Combo)e.getSource()).select(index);
            }
          }
        }
 else         if (defaultContextManager != null) {
          RunProcessPlugin.getDefault().setRunProcessContextManager(defaultContextManager);
        }
      }
    }
);
  }
}",0.992264603894372
141677,"@Override public final void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  this.monitor=monitor;
  featuresModel=new FeaturesModel(getGroupId(),getArtifactId(),getArtifactVersion());
  try {
    String routeName=routeNode.getObject().getProperty().getDisplayName();
    File routeFile;
    try {
      routeFile=File.createTempFile(""String_Node_Str"",FileConstants.JAR_FILE_SUFFIX,new File(getTempDir()));
    }
 catch (    IOException e) {
      throw new InvocationTargetException(e);
    }
    BundleModel routeModel=new BundleModel(getGroupId(),routeName + ""String_Node_Str"",getArtifactVersion(),routeFile);
    if (featuresModel.addBundle(routeModel)) {
      final ProcessItem routeProcess=(ProcessItem)routeNode.getObject().getProperty().getItem();
      CamelFeatureUtil.addFeatureAndBundles(routeProcess,featuresModel);
      featuresModel.setConfigName(routeNode.getObject().getLabel());
      featuresModel.setContexts(JobContextUtils.getContextsMap(routeProcess));
      exportAllReferenceJobs(routeProcess);
      final Collection<String> routelets=new HashSet<>();
      exportAllReferenceRoutelets(routeName,routeProcess,routelets);
      exportRouteBundle(routeNode,routeFile,version,bundleVersion,routelets,null);
    }
    processResults(featuresModel,monitor);
  }
  finally {
    removeTempFiles();
  }
}","@Override public final void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  this.monitor=monitor;
  featuresModel=new FeaturesModel(getGroupId(),getArtifactId(),getArtifactVersion());
  try {
    String routeName=routeNode.getObject().getProperty().getDisplayName();
    File routeFile;
    try {
      routeFile=File.createTempFile(""String_Node_Str"",FileConstants.JAR_FILE_SUFFIX,new File(getTempDir()));
    }
 catch (    IOException e) {
      throw new InvocationTargetException(e);
    }
    BundleModel routeModel=new BundleModel(getGroupId(),routeName + ""String_Node_Str"",getArtifactVersion(),routeFile);
    if (featuresModel.addBundle(routeModel)) {
      final ProcessItem routeProcess=(ProcessItem)routeNode.getObject().getProperty().getItem();
      CamelFeatureUtil.addFeatureAndBundles(routeProcess,featuresModel);
      featuresModel.setConfigName(routeNode.getObject().getLabel());
      featuresModel.setContexts(JobContextUtils.getContextsMap(routeProcess));
      exportAllReferenceJobs(routeName,routeProcess);
      final Set<String> routelets=new HashSet<>();
      exportAllReferenceRoutelets(routeName,routeProcess,routelets);
      exportRouteBundle(routeNode,routeFile,version,bundleVersion,routelets,null);
    }
    processResults(featuresModel,monitor);
  }
  finally {
    removeTempFiles();
  }
}",0.991584339553604
141678,"private void exportAllReferenceJobs(ProcessItem routeProcess) throws InvocationTargetException, InterruptedException {
  for (  NodeType cTalendJob : EmfModelUtils.getComponentsByName(routeProcess,""String_Node_Str"")) {
    String jobId=null;
    String jobVersion=null;
    String jobContext=null;
    for (    Object o : cTalendJob.getElementParameter()) {
      if (!(o instanceof ElementParameterType)) {
        continue;
      }
      ElementParameterType ept=(ElementParameterType)o;
      String eptName=ept.getName();
      if (""String_Node_Str"".equals(eptName) && ""String_Node_Str"".equals(ept.getValue())) {
        break;
      }
      if (""String_Node_Str"".equals(eptName)) {
        jobId=ept.getValue();
      }
 else       if (""String_Node_Str"".equals(eptName)) {
        jobVersion=ept.getValue();
      }
 else       if (""String_Node_Str"".equals(eptName)) {
        jobContext=ept.getValue();
      }
    }
    if (jobId == null || jobVersion == null) {
      continue;
    }
    IRepositoryNode referencedJobNode;
    try {
      referencedJobNode=getJobRepositoryNode(jobId,ERepositoryObjectType.PROCESS);
    }
 catch (    PersistenceException e) {
      throw new InvocationTargetException(e);
    }
    if (RelationshipItemBuilder.LATEST_VERSION.equals(jobVersion)) {
      jobVersion=referencedJobNode.getObject().getVersion();
    }
    String jobName=referencedJobNode.getObject().getProperty().getDisplayName();
    File jobFile;
    try {
      jobFile=File.createTempFile(""String_Node_Str"",FileConstants.JAR_FILE_SUFFIX,new File(getTempDir()));
    }
 catch (    IOException e) {
      throw new InvocationTargetException(e);
    }
    String jobArtifactVersion=jobVersion;
    if (getArtifactVersion().endsWith(""String_Node_Str"")) {
      jobArtifactVersion+=""String_Node_Str"";
    }
    BundleModel jobModel=new BundleModel(getJobGroupId(jobId,jobName),jobName + ""String_Node_Str"",jobArtifactVersion,jobFile);
    if (featuresModel.addBundle(jobModel)) {
      exportRouteUsedJobBundle(referencedJobNode,jobFile,jobVersion,jobName,jobVersion,routeNode.getObject().getProperty().getDisplayName(),version,jobContext);
    }
  }
}","private void exportAllReferenceJobs(String routeName,ProcessItem routeProcess) throws InvocationTargetException, InterruptedException {
  for (  NodeType cTalendJob : EmfModelUtils.getComponentsByName(routeProcess,""String_Node_Str"")) {
    String jobId=null;
    String jobVersion=null;
    String jobContext=null;
    for (    Object o : cTalendJob.getElementParameter()) {
      if (!(o instanceof ElementParameterType)) {
        continue;
      }
      ElementParameterType ept=(ElementParameterType)o;
      String eptName=ept.getName();
      if (""String_Node_Str"".equals(eptName) && ""String_Node_Str"".equals(ept.getValue())) {
        break;
      }
      if (""String_Node_Str"".equals(eptName)) {
        jobId=ept.getValue();
      }
 else       if (""String_Node_Str"".equals(eptName)) {
        jobVersion=ept.getValue();
      }
 else       if (""String_Node_Str"".equals(eptName)) {
        jobContext=ept.getValue();
      }
    }
    if (jobId == null || jobVersion == null) {
      continue;
    }
    IRepositoryNode referencedJobNode;
    try {
      referencedJobNode=getJobRepositoryNode(jobId,ERepositoryObjectType.PROCESS);
    }
 catch (    PersistenceException e) {
      throw new InvocationTargetException(e);
    }
    if (RelationshipItemBuilder.LATEST_VERSION.equals(jobVersion)) {
      jobVersion=referencedJobNode.getObject().getVersion();
    }
    String jobName=referencedJobNode.getObject().getProperty().getDisplayName();
    String jobArtifactName=routeName + ""String_Node_Str"" + jobName+ ""String_Node_Str"";
    File jobFile;
    try {
      jobFile=File.createTempFile(""String_Node_Str"",FileConstants.JAR_FILE_SUFFIX,new File(getTempDir()));
    }
 catch (    IOException e) {
      throw new InvocationTargetException(e);
    }
    String jobBundleVersion=jobVersion;
    if (getArtifactVersion().endsWith(""String_Node_Str"")) {
      jobBundleVersion+=""String_Node_Str"";
    }
    BundleModel jobModel=new BundleModel(getGroupId(),jobArtifactName,getArtifactVersion(),jobFile);
    if (featuresModel.addBundle(jobModel)) {
      exportRouteUsedJobBundle(referencedJobNode,jobFile,jobVersion,jobName,jobBundleVersion,routeNode.getObject().getProperty().getDisplayName(),version,jobContext);
    }
  }
}",0.8775045537340619
141679,"@SuppressWarnings(""String_Node_Str"") protected void exportAllReferenceRoutelets(String routeName,ProcessItem routeProcess,Collection<String> routelets) throws InvocationTargetException, InterruptedException {
  for (  NodeType node : (Collection<NodeType>)routeProcess.getProcess().getNode()) {
    if (!EmfModelUtils.isComponentActive(node)) {
      continue;
    }
    final ElementParameterType routeletId=EmfModelUtils.findElementParameterByName(EParameterName.PROCESS_TYPE.getName() + ':' + EParameterName.PROCESS_TYPE_PROCESS.getName(),node);
    if (null != routeletId) {
      final IRepositoryNode referencedRouteletNode;
      try {
        referencedRouteletNode=getJobRepositoryNode(routeletId.getValue(),CamelRepositoryNodeType.repositoryRouteletType);
      }
 catch (      PersistenceException e) {
        throw new InvocationTargetException(e);
      }
      final ProcessItem routeletProcess=(ProcessItem)referencedRouteletNode.getObject().getProperty().getItem();
      final String className=RouteJavaScriptOSGIForESBManager.getClassName(routeletProcess);
      if (!routelets.add(className)) {
        continue;
      }
      String routeletVersion=EmfModelUtils.findElementParameterByName(EParameterName.PROCESS_TYPE.getName() + ':' + EParameterName.PROCESS_TYPE_VERSION.getName(),node).getValue();
      if (RelationshipItemBuilder.LATEST_VERSION.equals(routeletVersion)) {
        routeletVersion=referencedRouteletNode.getObject().getVersion();
      }
      final File routeletFile;
      try {
        routeletFile=File.createTempFile(""String_Node_Str"",FileConstants.JAR_FILE_SUFFIX,new File(getTempDir()));
      }
 catch (      IOException e) {
        throw new InvocationTargetException(e);
      }
      String routeletName=routeName + ""String_Node_Str"" + referencedRouteletNode.getObject().getLabel();
      BundleModel jobModel=new BundleModel(getGroupId(),routeletName,getArtifactVersion(),routeletFile);
      if (featuresModel.addBundle(jobModel)) {
        exportRouteBundle(referencedRouteletNode,routeletFile,routeletVersion,routeletVersion,null,EmfModelUtils.findElementParameterByName(EParameterName.PROCESS_TYPE.getName() + ':' + EParameterName.PROCESS_TYPE_CONTEXT.getName(),node).getValue());
        CamelFeatureUtil.addFeatureAndBundles(routeletProcess,featuresModel);
        exportAllReferenceRoutelets(routeName,routeletProcess,routelets);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") protected final void exportAllReferenceRoutelets(String routeName,ProcessItem routeProcess,Set<String> routelets) throws InvocationTargetException, InterruptedException {
  for (  NodeType node : (Collection<NodeType>)routeProcess.getProcess().getNode()) {
    if (!EmfModelUtils.isComponentActive(node)) {
      continue;
    }
    final ElementParameterType routeletId=EmfModelUtils.findElementParameterByName(EParameterName.PROCESS_TYPE.getName() + ':' + EParameterName.PROCESS_TYPE_PROCESS.getName(),node);
    if (null != routeletId) {
      final IRepositoryNode referencedRouteletNode;
      try {
        referencedRouteletNode=getJobRepositoryNode(routeletId.getValue(),CamelRepositoryNodeType.repositoryRouteletType);
      }
 catch (      PersistenceException e) {
        throw new InvocationTargetException(e);
      }
      final ProcessItem routeletProcess=(ProcessItem)referencedRouteletNode.getObject().getProperty().getItem();
      final String className=RouteJavaScriptOSGIForESBManager.getClassName(routeletProcess);
      if (!routelets.add(className)) {
        continue;
      }
      String routeletVersion=EmfModelUtils.findElementParameterByName(EParameterName.PROCESS_TYPE.getName() + ':' + EParameterName.PROCESS_TYPE_VERSION.getName(),node).getValue();
      if (RelationshipItemBuilder.LATEST_VERSION.equals(routeletVersion)) {
        routeletVersion=referencedRouteletNode.getObject().getVersion();
      }
      final File routeletFile;
      try {
        routeletFile=File.createTempFile(""String_Node_Str"",FileConstants.JAR_FILE_SUFFIX,new File(getTempDir()));
      }
 catch (      IOException e) {
        throw new InvocationTargetException(e);
      }
      String routeletName=referencedRouteletNode.getObject().getLabel();
      String routeletArtifactName=routeName + ""String_Node_Str"" + routeletName+ ""String_Node_Str"";
      String routeletBundleVersion=routeletVersion;
      if (getArtifactVersion().endsWith(""String_Node_Str"")) {
        routeletBundleVersion+=""String_Node_Str"";
      }
      BundleModel routeletModel=new BundleModel(getGroupId(),routeletArtifactName,getArtifactVersion(),routeletFile);
      if (featuresModel.addBundle(routeletModel)) {
        exportRouteBundle(referencedRouteletNode,routeletFile,routeletVersion,routeletBundleVersion,null,EmfModelUtils.findElementParameterByName(EParameterName.PROCESS_TYPE.getName() + ':' + EParameterName.PROCESS_TYPE_CONTEXT.getName(),node).getValue());
        CamelFeatureUtil.addFeatureAndBundles(routeletProcess,featuresModel);
        exportAllReferenceRoutelets(routeName,routeletProcess,routelets);
      }
    }
  }
}",0.929527559055118
141680,"private Collection<String> getReferenceRoutlets(){
  ProcessItem routeProcess=(ProcessItem)routeNode.getObject().getProperty().getItem();
  String routeName=routeNode.getObject().getProperty().getDisplayName();
  Collection<String> routelets=new HashSet<>();
  try {
    exportAllReferenceRoutelets(routeName,routeProcess,routelets);
  }
 catch (  InvocationTargetException e) {
    return new HashSet<>();
  }
catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
  return routelets;
}","private Collection<String> getReferenceRoutlets(){
  ProcessItem routeProcess=(ProcessItem)routeNode.getObject().getProperty().getItem();
  String routeName=routeNode.getObject().getProperty().getDisplayName();
  Set<String> routelets=new HashSet<>();
  try {
    exportAllReferenceRoutelets(routeName,routeProcess,routelets);
  }
 catch (  InvocationTargetException e) {
    return new HashSet<>();
  }
catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
  return routelets;
}",0.987192118226601
141681,"@Override public void resourceChanged(IResourceChangeEvent event){
  IResourceDelta delta=event.getDelta();
  try {
    if (delta == null || editorFile == null) {
      return;
    }
    delta.accept(new IResourceDeltaVisitor(){
      @Override public boolean visit(      IResourceDelta delta) throws CoreException {
        IResource resource=delta.getResource();
        if (resource == null) {
          return false;
        }
        if (resource.getType() != IResource.FILE) {
          IPath location=resource.getLocation();
          if (location == null || !filePath.startsWith(location.toPortableString())) {
            return false;
          }
          return true;
        }
        if (resource.equals(editorFile)) {
          RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(SAVING_RESOURCE,this){
            @Override protected void run() throws LoginException, PersistenceException {
              RouteResourceEditor.saveContentsToItem(editorInput);
            }
          }
;
          repositoryWorkUnit.setAvoidUpdateLocks(false);
          repositoryWorkUnit.setAvoidUnloadResources(false);
          repositoryWorkUnit.setUnloadResourcesAfterRun(false);
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
            }
          }
);
          return false;
        }
        return false;
      }
    }
,IResource.FILE);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}","@Override public void resourceChanged(IResourceChangeEvent event){
  IResourceDelta delta=event.getDelta();
  try {
    if (delta == null || editorFile == null) {
      return;
    }
    delta.accept(new IResourceDeltaVisitor(){
      @Override public boolean visit(      IResourceDelta delta) throws CoreException {
        IResource resource=delta.getResource();
        if (resource == null) {
          return false;
        }
        if (resource.getType() != IResource.FILE) {
          IPath location=resource.getLocation();
          if (location == null || !filePath.startsWith(location.toPortableString())) {
            return false;
          }
          return true;
        }
        if (resource.equals(editorFile)) {
          final RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(SAVING_RESOURCE,this){
            @Override protected void run() throws LoginException, PersistenceException {
              RouteResourceEditor.saveContentsToItem(editorInput);
            }
          }
;
          repositoryWorkUnit.setAvoidUpdateLocks(false);
          repositoryWorkUnit.setAvoidUnloadResources(false);
          repositoryWorkUnit.setUnloadResourcesAfterRun(false);
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
            }
          }
);
          return false;
        }
        return false;
      }
    }
,IResource.FILE);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}",0.9981378026070764
141682,"@Override public boolean visit(IResourceDelta delta) throws CoreException {
  IResource resource=delta.getResource();
  if (resource == null) {
    return false;
  }
  if (resource.getType() != IResource.FILE) {
    IPath location=resource.getLocation();
    if (location == null || !filePath.startsWith(location.toPortableString())) {
      return false;
    }
    return true;
  }
  if (resource.equals(editorFile)) {
    RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(SAVING_RESOURCE,this){
      @Override protected void run() throws LoginException, PersistenceException {
        RouteResourceEditor.saveContentsToItem(editorInput);
      }
    }
;
    repositoryWorkUnit.setAvoidUpdateLocks(false);
    repositoryWorkUnit.setAvoidUnloadResources(false);
    repositoryWorkUnit.setUnloadResourcesAfterRun(false);
    Display.getDefault().asyncExec(new Runnable(){
      @Override public void run(){
        CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      }
    }
);
    return false;
  }
  return false;
}","@Override public boolean visit(IResourceDelta delta) throws CoreException {
  IResource resource=delta.getResource();
  if (resource == null) {
    return false;
  }
  if (resource.getType() != IResource.FILE) {
    IPath location=resource.getLocation();
    if (location == null || !filePath.startsWith(location.toPortableString())) {
      return false;
    }
    return true;
  }
  if (resource.equals(editorFile)) {
    final RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(SAVING_RESOURCE,this){
      @Override protected void run() throws LoginException, PersistenceException {
        RouteResourceEditor.saveContentsToItem(editorInput);
      }
    }
;
    repositoryWorkUnit.setAvoidUpdateLocks(false);
    repositoryWorkUnit.setAvoidUnloadResources(false);
    repositoryWorkUnit.setUnloadResourcesAfterRun(false);
    Display.getDefault().asyncExec(new Runnable(){
      @Override public void run(){
        CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      }
    }
);
    return false;
  }
  return false;
}",0.9972924187725632
141683,"@Override public void resourceChanged(IResourceChangeEvent event){
  IResourceDelta delta=event.getDelta();
  try {
    if (delta == null || editorFile == null) {
      return;
    }
    delta.accept(new IResourceDeltaVisitor(){
      @Override public boolean visit(      IResourceDelta delta) throws CoreException {
        IResource resource=delta.getResource();
        if (resource == null) {
          return false;
        }
        if (resource.getType() != IResource.FILE) {
          IPath location=resource.getLocation();
          if (location == null || !filePath.startsWith(location.toPortableString())) {
            return false;
          }
          return true;
        }
        if (resource.equals(editorFile)) {
          RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(SAVING_RESOURCE,this){
            @Override protected void run() throws LoginException, PersistenceException {
              RouteResourceEditor.saveContentsToItem(editorInput);
            }
          }
;
          repositoryWorkUnit.setAvoidUpdateLocks(false);
          repositoryWorkUnit.setAvoidUnloadResources(false);
          repositoryWorkUnit.setUnloadResourcesAfterRun(false);
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
            }
          }
);
          return false;
        }
        return false;
      }
    }
,IResource.FILE);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}","@Override public void resourceChanged(IResourceChangeEvent event){
  IResourceDelta delta=event.getDelta();
  try {
    if (delta == null || editorFile == null) {
      return;
    }
    delta.accept(new IResourceDeltaVisitor(){
      @Override public boolean visit(      IResourceDelta delta) throws CoreException {
        IResource resource=delta.getResource();
        if (resource == null) {
          return false;
        }
        if (resource.getType() != IResource.FILE) {
          IPath location=resource.getLocation();
          if (location == null || !filePath.startsWith(location.toPortableString())) {
            return false;
          }
          return true;
        }
        if (resource.equals(editorFile)) {
          final RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(SAVING_RESOURCE,this){
            @Override protected void run() throws LoginException, PersistenceException {
              RouteResourceEditor.saveContentsToItem(editorInput);
            }
          }
;
          repositoryWorkUnit.setAvoidUpdateLocks(false);
          repositoryWorkUnit.setAvoidUnloadResources(false);
          repositoryWorkUnit.setUnloadResourcesAfterRun(false);
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
            }
          }
);
          return false;
        }
        return false;
      }
    }
,IResource.FILE);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}",0.9981378026070764
141684,"@Override public boolean visit(IResourceDelta delta) throws CoreException {
  IResource resource=delta.getResource();
  if (resource == null) {
    return false;
  }
  if (resource.getType() != IResource.FILE) {
    IPath location=resource.getLocation();
    if (location == null || !filePath.startsWith(location.toPortableString())) {
      return false;
    }
    return true;
  }
  if (resource.equals(editorFile)) {
    RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(SAVING_RESOURCE,this){
      @Override protected void run() throws LoginException, PersistenceException {
        RouteResourceEditor.saveContentsToItem(editorInput);
      }
    }
;
    repositoryWorkUnit.setAvoidUpdateLocks(false);
    repositoryWorkUnit.setAvoidUnloadResources(false);
    repositoryWorkUnit.setUnloadResourcesAfterRun(false);
    Display.getDefault().asyncExec(new Runnable(){
      @Override public void run(){
        CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      }
    }
);
    return false;
  }
  return false;
}","@Override public boolean visit(IResourceDelta delta) throws CoreException {
  IResource resource=delta.getResource();
  if (resource == null) {
    return false;
  }
  if (resource.getType() != IResource.FILE) {
    IPath location=resource.getLocation();
    if (location == null || !filePath.startsWith(location.toPortableString())) {
      return false;
    }
    return true;
  }
  if (resource.equals(editorFile)) {
    final RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(SAVING_RESOURCE,this){
      @Override protected void run() throws LoginException, PersistenceException {
        RouteResourceEditor.saveContentsToItem(editorInput);
      }
    }
;
    repositoryWorkUnit.setAvoidUpdateLocks(false);
    repositoryWorkUnit.setAvoidUnloadResources(false);
    repositoryWorkUnit.setUnloadResourcesAfterRun(false);
    Display.getDefault().asyncExec(new Runnable(){
      @Override public void run(){
        CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      }
    }
);
    return false;
  }
  return false;
}",0.9972924187725632
141685,"@SuppressWarnings(""String_Node_Str"") private void process(Definition wsdlDefinition,Collection<XmlFileConnectionItem> selectTables) throws IOException {
  Map<String,File> fileToSchemaMap=new HashMap<String,File>();
  File zip=null;
  final SchemaUtil schemaUtil=new SchemaUtil(wsdlDefinition);
  try {
    populationUtil=new XSDPopulationUtil2();
    for (    XmlSchema schema : schemaUtil.getSchemas()) {
      File file=initFileContent(schema);
      String ns=schema.getTargetNamespace();
      fileToSchemaMap.put(ns != null ? ns : ""String_Node_Str"",file);
      populationUtil.addSchema(file.getPath());
    }
    zip=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    Collection<File> files=fileToSchemaMap.values();
    org.talend.utils.io.FilesUtils.zips(files.toArray(new File[files.size()]),zip.getPath());
    final Set<QName> portTypes=new HashSet<QName>();
    final Set<QName> alreadyCreated=new HashSet<QName>();
    for (    Binding binding : (Collection<Binding>)wsdlDefinition.getAllBindings().values()) {
      final QName portType=binding.getPortType().getQName();
      if (portTypes.add(portType)) {
        for (        BindingOperation operation : (Collection<BindingOperation>)binding.getBindingOperations()) {
          Operation oper=operation.getOperation();
          Input inDef=oper.getInput();
          if (inDef != null) {
            Message inMsg=inDef.getMessage();
            if (inMsg != null) {
              QName parameterFromMessage=getParameterFromMessage(inMsg);
              if (parameterFromMessage == null) {
                continue;
              }
              if (alreadyCreated.add(parameterFromMessage)) {
                File schemaFile=fileToSchemaMap.get(parameterFromMessage.getNamespaceURI());
                if (null != schemaFile) {
                  XsdMetadataUtils.createMetadataFromXSD(parameterFromMessage,portType.getLocalPart(),oper.getName(),schemaFile,selectTables,zip,populationUtil);
                }
              }
            }
          }
          Output outDef=oper.getOutput();
          if (outDef != null) {
            Message outMsg=outDef.getMessage();
            if (outMsg != null) {
              QName parameterFromMessage=getParameterFromMessage(outMsg);
              if (parameterFromMessage == null) {
                continue;
              }
              if (alreadyCreated.add(parameterFromMessage)) {
                File schemaFile=fileToSchemaMap.get(parameterFromMessage.getNamespaceURI());
                if (null != schemaFile) {
                  XsdMetadataUtils.createMetadataFromXSD(parameterFromMessage,portType.getLocalPart(),oper.getName(),schemaFile,selectTables,zip,populationUtil);
                }
              }
            }
          }
          for (          Fault fault : (Collection<Fault>)oper.getFaults().values()) {
            Message faultMsg=fault.getMessage();
            if (faultMsg != null) {
              QName parameterFromMessage=getParameterFromMessage(faultMsg);
              if (parameterFromMessage == null) {
                continue;
              }
              if (alreadyCreated.add(parameterFromMessage)) {
                File schemaFile=fileToSchemaMap.get(parameterFromMessage.getNamespaceURI());
                if (null != schemaFile) {
                  XsdMetadataUtils.createMetadataFromXSD(parameterFromMessage,portType.getLocalPart(),oper.getName(),schemaFile,selectTables,zip,populationUtil);
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    for (    File file : fileToSchemaMap.values()) {
      file.delete();
    }
    if (null != zip) {
      zip.delete();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void process(Definition wsdlDefinition,Collection<XmlFileConnectionItem> selectTables) throws IOException, CoreException {
  try {
    File wsdlFile=null;
    String baseUri=wsdlDefinition.getDocumentBaseURI();
    try {
      URI uri=new URI(baseUri);
      wsdlFile=new File(uri.toURL().getFile());
    }
 catch (    URISyntaxException e) {
      wsdlFile=new File(baseUri);
    }
    if (populationUtil == null) {
      populationUtil=new WSDLPopulationUtil();
      populationUtil.loadWSDL(baseUri);
    }
    final Set<QName> portTypes=new HashSet<QName>();
    final Set<QName> alreadyCreated=new HashSet<QName>();
    for (    Binding binding : (Collection<Binding>)wsdlDefinition.getAllBindings().values()) {
      final QName portType=binding.getPortType().getQName();
      if (portTypes.add(portType)) {
        for (        BindingOperation operation : (Collection<BindingOperation>)binding.getBindingOperations()) {
          Operation oper=operation.getOperation();
          Input inDef=oper.getInput();
          if (inDef != null) {
            Message inMsg=inDef.getMessage();
            if (inMsg != null) {
              QName parameterFromMessage=getParameterFromMessage(inMsg);
              if (parameterFromMessage == null) {
                continue;
              }
              if (alreadyCreated.add(parameterFromMessage)) {
                XsdMetadataUtils.createMetadataFromXSD(parameterFromMessage,portType.getLocalPart(),oper.getName(),selectTables,wsdlFile,populationUtil);
              }
            }
          }
          Output outDef=oper.getOutput();
          if (outDef != null) {
            Message outMsg=outDef.getMessage();
            if (outMsg != null) {
              QName parameterFromMessage=getParameterFromMessage(outMsg);
              if (parameterFromMessage == null) {
                continue;
              }
              if (alreadyCreated.add(parameterFromMessage)) {
                XsdMetadataUtils.createMetadataFromXSD(parameterFromMessage,portType.getLocalPart(),oper.getName(),selectTables,wsdlFile,populationUtil);
              }
            }
          }
          for (          Fault fault : (Collection<Fault>)oper.getFaults().values()) {
            Message faultMsg=fault.getMessage();
            if (faultMsg != null) {
              QName parameterFromMessage=getParameterFromMessage(faultMsg);
              if (parameterFromMessage == null) {
                continue;
              }
              if (alreadyCreated.add(parameterFromMessage)) {
                XsdMetadataUtils.createMetadataFromXSD(parameterFromMessage,portType.getLocalPart(),oper.getName(),selectTables,wsdlFile,populationUtil);
              }
            }
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw e;
  }
}",0.2734576322570866
141686,"@Override public CharSequence generatePart(INode node,Object... ignoredParams) throws CodeGeneratorException {
  String part;
  if (""String_Node_Str"".equals(node.getComponent().getName())) {
    part=""String_Node_Str"";
  }
 else   if (NodeUtil.isStartNode(node)) {
    if (""String_Node_Str"".equals(node.getComponent().getName())) {
      part=""String_Node_Str"";
    }
    part=""String_Node_Str"" + getNodeId(node) + ""String_Node_Str"";
  }
 else {
    part=""String_Node_Str"" + getNodeId(node) + ""String_Node_Str"";
  }
  return part;
}","@Override public CharSequence generatePart(INode node,Object... ignoredParams) throws CodeGeneratorException {
  String part;
  if (""String_Node_Str"".equals(node.getComponent().getName())) {
    part=""String_Node_Str"";
  }
 else   if (NodeUtil.isStartNode(node)) {
    if (""String_Node_Str"".equals(node.getComponent().getName())) {
      part=""String_Node_Str"";
    }
 else {
      part=""String_Node_Str"" + getNodeId(node) + ""String_Node_Str"";
    }
  }
 else {
    part=""String_Node_Str"" + getNodeId(node) + ""String_Node_Str"";
  }
  return part;
}",0.9851851851851852
141687,public void setSpringContent(String springContent);,void setSpringContent(String springContent);,0.9263157894736842
141688,public String getSpringContent();,String getSpringContent();,0.8813559322033898
141689,"@Override public boolean isInstanceofCamelBeans(Item item){
  return item.eClass() == CamelPropertiesPackage.Literals.BEAN_ITEM;
}","@Override public boolean isInstanceofCamelBeans(Item item){
  if (item == null) {
    return false;
  }
  return item.eClass() == CamelPropertiesPackage.Literals.BEAN_ITEM;
}",0.8552631578947368
141690,"@Override public boolean isInstanceofCamel(Item item){
  return isInstanceofCamelRoutes(item) || isInstanceofCamelBeans(item) || item.eClass() == CamelPropertiesPackage.Literals.ROUTE_RESOURCE_ITEM;
}","@Override public boolean isInstanceofCamel(Item item){
  if (item == null) {
    return false;
  }
  return isInstanceofCamelRoutes(item) || isInstanceofCamelBeans(item) || item.eClass() == CamelPropertiesPackage.Literals.ROUTE_RESOURCE_ITEM;
}",0.9009009009009008
141691,"@Override public boolean isInstanceofCamelRoutes(Item item){
  return item.eClass() == CamelPropertiesPackage.Literals.CAMEL_PROCESS_ITEM || item.eClass() == CamelPropertiesPackage.Literals.ROUTELET_PROCESS_ITEM;
}","@Override public boolean isInstanceofCamelRoutes(Item item){
  if (item == null) {
    return false;
  }
  return item.eClass() == CamelPropertiesPackage.Literals.CAMEL_PROCESS_ITEM || item.eClass() == CamelPropertiesPackage.Literals.ROUTELET_PROCESS_ITEM;
}",0.9067796610169492
141692,"public void checkNode(Node node){
  if (!node.getComponent().getName().equals(""String_Node_Str"")) {
    return;
  }
  IElementParameter resourceParam=node.getElementParameter(EParameterName.ROUTE_RESOURCE_TYPE_ID.getName());
  IElementParameter wsdlFileParam=node.getElementParameter(""String_Node_Str"");
  IElementParameter serviceParam=node.getElementParameter(""String_Node_Str"");
  IElementParameter wsdlTypeParam=node.getElementParameter(""String_Node_Str"");
  IElementParameter clazzParam=node.getElementParameter(""String_Node_Str"");
  if (serviceParam != null && ""String_Node_Str"".equals(serviceParam.getValue())) {
    if (wsdlTypeParam != null && ""String_Node_Str"".equals(wsdlTypeParam.getValue())) {
      if (wsdlFileParam == null || wsdlFileParam.getValue() == null || wsdlFileParam.getValue().toString().isEmpty() || wsdlFileParam.getValue().toString().equals(""String_Node_Str"")) {
        String errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam == null ? ""String_Node_Str"" : wsdlFileParam.getDisplayName());
        Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
      }
    }
 else     if (wsdlTypeParam != null && ""String_Node_Str"".equals(wsdlTypeParam.getValue())) {
      String errorMessage=""String_Node_Str"";
      if (resourceParam == null || resourceParam.getValue() == null || resourceParam.getValue().toString().isEmpty()) {
        errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
        Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
      }
 else {
        String id=(String)resourceParam.getValue();
        try {
          IRepositoryViewObject lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(id);
          if (lastVersion == null) {
            errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
            Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
          }
 else           if (lastVersion.isDeleted()) {
            errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),resourceParam.getDisplayName());
            Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
          }
        }
 catch (        PersistenceException e) {
          errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
          Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
        }
      }
    }
  }
 else   if (serviceParam != null && ""String_Node_Str"".equals(serviceParam.getValue())) {
    if (clazzParam == null || clazzParam.getValue() == null || clazzParam.getValue().toString().isEmpty()) {
      String errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
      Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
    }
  }
}","public void checkNode(Node node){
  if (!node.getComponent().getName().equals(""String_Node_Str"")) {
    return;
  }
  final IElementParameter serviceParam=node.getElementParameter(""String_Node_Str"");
  if (serviceParam != null && ""String_Node_Str"".equals(serviceParam.getValue())) {
    final IElementParameter wsdlFileParam=node.getElementParameter(""String_Node_Str"");
    final IElementParameter wsdlTypeParam=node.getElementParameter(""String_Node_Str"");
    if (wsdlTypeParam != null && ""String_Node_Str"".equals(wsdlTypeParam.getValue())) {
      if (wsdlFileParam == null || wsdlFileParam.getValue() == null || wsdlFileParam.getValue().toString().isEmpty() || wsdlFileParam.getValue().toString().equals(""String_Node_Str"")) {
        String errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam == null ? ""String_Node_Str"" : wsdlFileParam.getDisplayName());
        Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
      }
    }
 else     if (wsdlTypeParam != null && ""String_Node_Str"".equals(wsdlTypeParam.getValue())) {
      final IElementParameter resourceParam=node.getElementParameter(EParameterName.ROUTE_RESOURCE_TYPE_ID.getName());
      String errorMessage=""String_Node_Str"";
      if (resourceParam == null || resourceParam.getValue() == null || resourceParam.getValue().toString().isEmpty()) {
        errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
        Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
      }
 else {
        String id=(String)resourceParam.getValue();
        try {
          IRepositoryViewObject lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(id);
          if (lastVersion == null) {
            errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
            Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
          }
 else           if (lastVersion.isDeleted()) {
            errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),resourceParam.getDisplayName());
            Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
          }
        }
 catch (        PersistenceException e) {
          errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
          Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
        }
      }
    }
  }
 else   if (serviceParam != null && ""String_Node_Str"".equals(serviceParam.getValue())) {
    final IElementParameter clazzParam=node.getElementParameter(""String_Node_Str"");
    if (clazzParam == null || clazzParam.getValue() == null || clazzParam.getValue().toString().isEmpty()) {
      String errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),clazzParam.getDisplayName());
      Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
    }
  }
}",0.893609958506224
141693,"@Override public List<? extends IElementParameter> createElementParameters(INode node){
  List<IElementParameter> listParam=new ArrayList<IElementParameter>();
  ElementParameter param=new ElementParameter(node);
  param.setName(EParameterName.UNIQUE_NAME.getName());
  param.setValue(""String_Node_Str"");
  param.setDisplayName(EParameterName.UNIQUE_NAME.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.MAIN);
  param.setNumRow(1);
  param.setReadOnly(true);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.FAMILY.getName());
  param.setValue(getOriginalFamilyName());
  param.setDisplayName(EParameterName.FAMILY.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.MAIN);
  param.setNumRow(3);
  param.setReadOnly(true);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.ACTIVATE.getName());
  param.setValue(new Boolean(true));
  param.setDisplayName(EParameterName.ACTIVATE.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.MAIN);
  param.setNumRow(5);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.DUMMY.getName());
  param.setValue(Boolean.FALSE);
  param.setDisplayName(EParameterName.DUMMY.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.MAIN);
  param.setNumRow(5);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(false);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.STARTABLE.getName());
  Boolean startable=Boolean.TRUE;
  IElementParameter elementParameter=getProcess().getElementParameter(EParameterName.STARTABLE.getName());
  if (elementParameter != null) {
    startable=(Boolean)elementParameter.getValue();
  }
  param.setValue(startable);
  param.setDisplayName(EParameterName.STARTABLE.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.MAIN);
  param.setNumRow(1);
  param.setReadOnly(true);
  param.setShow(false);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.START.getName());
  param.setValue(Boolean.FALSE);
  param.setDisplayName(EParameterName.START.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.MAIN);
  param.setNumRow(1);
  param.setReadOnly(true);
  param.setShow(false);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(""String_Node_Str"");
  param.setValue(Boolean.TRUE);
  param.setDisplayName(""String_Node_Str"");
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.BASIC);
  param.setNumRow(5);
  param.setReadOnly(true);
  param.setShow(false);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.SUBTREE_START.getName());
  param.setValue(new Boolean(startable));
  param.setDisplayName(EParameterName.SUBTREE_START.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setNumRow(5);
  param.setReadOnly(true);
  param.setRequired(false);
  param.setShow(false);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.END_OF_FLOW.getName());
  param.setValue(new Boolean(startable));
  param.setDisplayName(EParameterName.END_OF_FLOW.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setNumRow(5);
  param.setReadOnly(true);
  param.setRequired(false);
  param.setShow(false);
  listParam.add(param);
  List<String> allVersionArray=new ArrayList<String>();
  try {
    List<IRepositoryViewObject> allVersion=ProxyRepositoryFactory.getInstance().getAllVersion(this.routeletId);
    if (allVersion != null) {
      for (      IRepositoryViewObject obj : allVersion) {
        String version=obj.getVersion();
        allVersionArray.add(version);
      }
    }
    Collections.sort(allVersionArray);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (allVersionArray.size() > 0) {
    allVersionArray.add(0,RelationshipItemBuilder.LATEST_VERSION);
  }
 else {
    allVersionArray.add(RelationshipItemBuilder.LATEST_VERSION);
  }
  String[] allVersions=allVersionArray.toArray(new String[0]);
  param=new ElementParameter(node);
  param.setName(EParameterName.PROCESS_TYPE_VERSION.getName());
  param.setDisplayName(EParameterName.PROCESS_TYPE_VERSION.getDisplayName());
  param.setFieldType(EParameterFieldType.CLOSED_LIST);
  param.setRequired(true);
  param.setCategory(EComponentCategory.BASIC);
  param.setValue(allVersions[0]);
  param.setListItemsDisplayCodeName(allVersions);
  param.setListItemsDisplayName(allVersions);
  param.setListItemsValue(allVersions);
  param.setNumRow(1);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.LABEL.getName());
  param.setDisplayName(EParameterName.LABEL.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.VIEW);
  param.setNumRow(1);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.HINT.getName());
  param.setDisplayName(EParameterName.HINT.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.VIEW);
  param.setNumRow(2);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.CONNECTION_FORMAT.getName());
  param.setDisplayName(EParameterName.CONNECTION_FORMAT.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.VIEW);
  param.setNumRow(3);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.INFORMATION.getName());
  param.setValue(new Boolean(false));
  param.setDisplayName(EParameterName.INFORMATION.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.DOC);
  param.setNumRow(1);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.COMMENT.getName());
  param.setValue(""String_Node_Str"");
  param.setDisplayName(EParameterName.COMMENT.getDisplayName());
  param.setFieldType(EParameterFieldType.MEMO);
  param.setNbLines(10);
  param.setCategory(EComponentCategory.DOC);
  param.setNumRow(2);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  return listParam;
}","@Override public List<? extends IElementParameter> createElementParameters(INode node){
  List<IElementParameter> listParam=new ArrayList<IElementParameter>();
  ElementParameter param=new ElementParameter(node);
  param.setName(EParameterName.UNIQUE_NAME.getName());
  param.setValue(""String_Node_Str"");
  param.setDisplayName(EParameterName.UNIQUE_NAME.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.MAIN);
  param.setNumRow(1);
  param.setReadOnly(true);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.FAMILY.getName());
  param.setValue(getOriginalFamilyName());
  param.setDisplayName(EParameterName.FAMILY.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.MAIN);
  param.setNumRow(3);
  param.setReadOnly(true);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.ACTIVATE.getName());
  param.setValue(new Boolean(true));
  param.setDisplayName(EParameterName.ACTIVATE.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.MAIN);
  param.setNumRow(5);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.DUMMY.getName());
  param.setValue(Boolean.FALSE);
  param.setDisplayName(EParameterName.DUMMY.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.MAIN);
  param.setNumRow(5);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(false);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.STARTABLE.getName());
  param.setValue(false);
  param.setDisplayName(EParameterName.STARTABLE.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.MAIN);
  param.setNumRow(1);
  param.setReadOnly(true);
  param.setShow(false);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.START.getName());
  param.setValue(Boolean.FALSE);
  param.setDisplayName(EParameterName.START.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.MAIN);
  param.setNumRow(1);
  param.setReadOnly(true);
  param.setShow(false);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(""String_Node_Str"");
  param.setValue(Boolean.TRUE);
  param.setDisplayName(""String_Node_Str"");
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.BASIC);
  param.setNumRow(5);
  param.setReadOnly(true);
  param.setShow(false);
  listParam.add(param);
  List<String> allVersionArray=new ArrayList<String>();
  try {
    List<IRepositoryViewObject> allVersion=ProxyRepositoryFactory.getInstance().getAllVersion(this.routeletId);
    if (allVersion != null) {
      for (      IRepositoryViewObject obj : allVersion) {
        String version=obj.getVersion();
        allVersionArray.add(version);
      }
    }
    Collections.sort(allVersionArray);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (allVersionArray.size() > 0) {
    allVersionArray.add(0,RelationshipItemBuilder.LATEST_VERSION);
  }
 else {
    allVersionArray.add(RelationshipItemBuilder.LATEST_VERSION);
  }
  String[] allVersions=allVersionArray.toArray(new String[0]);
  param=new ElementParameter(node);
  param.setName(EParameterName.PROCESS_TYPE_VERSION.getName());
  param.setDisplayName(EParameterName.PROCESS_TYPE_VERSION.getDisplayName());
  param.setFieldType(EParameterFieldType.CLOSED_LIST);
  param.setRequired(true);
  param.setCategory(EComponentCategory.BASIC);
  param.setValue(allVersions[0]);
  param.setListItemsDisplayCodeName(allVersions);
  param.setListItemsDisplayName(allVersions);
  param.setListItemsValue(allVersions);
  param.setNumRow(1);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.LABEL.getName());
  param.setDisplayName(EParameterName.LABEL.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.VIEW);
  param.setNumRow(1);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.HINT.getName());
  param.setDisplayName(EParameterName.HINT.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.VIEW);
  param.setNumRow(2);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.CONNECTION_FORMAT.getName());
  param.setDisplayName(EParameterName.CONNECTION_FORMAT.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.VIEW);
  param.setNumRow(3);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.INFORMATION.getName());
  param.setValue(new Boolean(false));
  param.setDisplayName(EParameterName.INFORMATION.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.DOC);
  param.setNumRow(1);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  param=new ElementParameter(node);
  param.setName(EParameterName.COMMENT.getName());
  param.setValue(""String_Node_Str"");
  param.setDisplayName(EParameterName.COMMENT.getDisplayName());
  param.setFieldType(EParameterFieldType.MEMO);
  param.setNbLines(10);
  param.setCategory(EComponentCategory.DOC);
  param.setNumRow(2);
  param.setReadOnly(false);
  param.setRequired(false);
  param.setShow(true);
  listParam.add(param);
  return listParam;
}",0.9154876862040572
141694,"@Override public List<? extends INodeReturn> createReturns(){
  return new ArrayList<NodeReturn>();
}","@Override public List<? extends INodeReturn> createReturns(){
  return Collections.emptyList();
}",0.8383838383838383
141695,"@Override public List<ECodePart> getAvailableCodeParts(){
  return new ArrayList<ECodePart>();
}","@Override public List<ECodePart> getAvailableCodeParts(){
  return Collections.emptyList();
}",0.8359788359788359
141696,"@Override public List<? extends INodeConnector> createConnectors(INode node){
  List<INodeConnector> listConnector=new ArrayList<INodeConnector>();
  INodeConnector nodeConnector;
  int nbInput=0;
  int jobletNbInput=0;
  for (int i=0; i < EConnectionType.values().length; i++) {
    EConnectionType currentType=EConnectionType.values()[i];
    if ((currentType == EConnectionType.FLOW_REF) || (currentType == EConnectionType.FLOW_MERGE)) {
      continue;
    }
    boolean exists=false;
    for (    INodeConnector curNodeConn : listConnector) {
      if (curNodeConn.getDefaultConnectionType().equals(currentType)) {
        exists=true;
      }
    }
    if (!exists) {
      nodeConnector=new NodeConnector(node);
      nodeConnector.setDefaultConnectionType(currentType);
      nodeConnector.setName(currentType.getName());
      nodeConnector.setBaseSchema(currentType.getName());
      nodeConnector.addConnectionProperty(currentType,currentType.getRGB(),currentType.getDefaultLineStyle());
      nodeConnector.setLinkName(currentType.getDefaultLinkName());
      nodeConnector.setMenuName(currentType.getDefaultMenuName());
      int allowLinkNumber=currentType == EConnectionType.ON_SUBJOB_OK || currentType == EConnectionType.ON_SUBJOB_ERROR || currentType == EConnectionType.ON_COMPONENT_OK || currentType == EConnectionType.ON_COMPONENT_ERROR || currentType == EConnectionType.RUN_IF ? 1 : 0;
      nodeConnector.setMaxLinkInput(jobletNbInput > 0 ? 0 : allowLinkNumber);
      nodeConnector.setMinLinkInput(0);
      nodeConnector.setMaxLinkOutput(allowLinkNumber);
      nodeConnector.setMinLinkOutput(0);
      if (currentType == EConnectionType.FLOW_MAIN) {
        nodeConnector.addConnectionProperty(EConnectionType.FLOW_REF,EConnectionType.FLOW_REF.getRGB(),EConnectionType.FLOW_REF.getDefaultLineStyle());
        nodeConnector.addConnectionProperty(EConnectionType.FLOW_MERGE,EConnectionType.FLOW_MERGE.getRGB(),EConnectionType.FLOW_MERGE.getDefaultLineStyle());
      }
      listConnector.add(nodeConnector);
    }
  }
  INodeConnector mainConnector=null;
  for (  INodeConnector connector : listConnector) {
    if (connector.getDefaultConnectionType().equals(EConnectionType.FLOW_MAIN)) {
      mainConnector=connector;
    }
  }
  mainConnector.setMaxLinkInput(nbInput);
  mainConnector.setMinLinkInput(nbInput);
  mainConnector.setMaxLinkOutput(0);
  mainConnector.setMinLinkOutput(0);
  return listConnector;
}","@Override public List<? extends INodeConnector> createConnectors(INode node){
  final List<INodeConnector> listConnector=new ArrayList<INodeConnector>();
  for (  EConnectionType currentType : EConnectionType.values()) {
    final INodeConnector nodeConnector=new NodeConnector(node);
    nodeConnector.setDefaultConnectionType(currentType);
    nodeConnector.setMaxLinkInput(0);
    nodeConnector.setMinLinkInput(0);
    nodeConnector.setMaxLinkOutput(0);
    nodeConnector.setMinLinkOutput(0);
    listConnector.add(nodeConnector);
  }
  return listConnector;
}",0.2019326891036321
141697,"@Override public List<ModuleNeeded> getModulesNeeded(){
  return new ArrayList<ModuleNeeded>();
}","@Override public List<ModuleNeeded> getModulesNeeded(){
  return Collections.emptyList();
}",0.8191489361702128
141698,"@Override public Item getJobletItem(INode node,String version){
  if (isExtensionComponent(node)) {
    RouteletComponent component=(RouteletComponent)node.getComponent();
    IRepositoryViewObject specificVersion=null;
    if (version == null || version.equals(RelationshipItemBuilder.LATEST_VERSION)) {
      specificVersion=getLastVersion(ProjectManager.getInstance().getCurrentProject(),component.getJobletId());
    }
 else {
      specificVersion=getSpecificVersion(ProjectManager.getInstance().getCurrentProject(),component.getJobletId(),version);
    }
    if (specificVersion != null) {
      return specificVersion.getProperty().getItem();
    }
 else {
      return component.getProperty().getItem();
    }
  }
  return null;
}","@Override public Item getJobletItem(INode node,String version){
  if (isExtensionComponent(node)) {
    RouteletComponent component=(RouteletComponent)node.getComponent();
    IRepositoryViewObject specificVersion=null;
    if (version == null || version.equals(RelationshipItemBuilder.LATEST_VERSION)) {
      specificVersion=getLastVersion(ProjectManager.getInstance().getCurrentProject(),component.getRouteletId());
    }
 else {
      specificVersion=getSpecificVersion(ProjectManager.getInstance().getCurrentProject(),component.getRouteletId(),version);
    }
    if (specificVersion != null) {
      return specificVersion.getProperty().getItem();
    }
 else {
      return component.getProperty().getItem();
    }
  }
  return null;
}",0.9891891891891892
141699,"public List<IComponent> sortComponents(List<IComponent> filteredComponents){
  return filteredComponents;
}","@Override public List<IComponent> sortComponents(List<IComponent> filteredComponents){
  return filteredComponents;
}",0.9553571428571428
141700,"public ComponentCategory extractComponentsCategory(){
  return ComponentCategory.CATEGORY_4_CAMEL;
}","@Override public ComponentCategory extractComponentsCategory(){
  return ComponentCategory.CATEGORY_4_CAMEL;
}",0.9523809523809524
141701,"public List<IComponent> filterComponents(List<IComponent> allComponents){
  if (allComponents == null || allComponents.isEmpty() || !camelComponents.isEmpty()) {
    return camelComponents;
  }
  String categoryName=extractComponentsCategory().getName();
  for (  IComponent component : allComponents) {
    String compType=component.getPaletteType();
    if (compType != null && categoryName.equals(compType)) {
      camelComponents.add(component);
    }
  }
  return camelComponents;
}","@Override public List<IComponent> filterComponents(List<IComponent> allComponents){
  List<IComponent> camelComponents=new ArrayList<IComponent>();
  if (allComponents == null || allComponents.isEmpty()) {
    return camelComponents;
  }
  String categoryName=extractComponentsCategory().getName();
  for (  IComponent component : allComponents) {
    String compType=component.getPaletteType();
    if (compType != null && categoryName.equals(compType)) {
      camelComponents.add(component);
    }
  }
  return camelComponents;
}",0.8980392156862745
141702,"public List<IComponent> sortComponents(List<IComponent> filteredComponents){
  return filteredComponents;
}","@Override public List<IComponent> sortComponents(List<IComponent> filteredComponents){
  return filteredComponents;
}",0.9553571428571428
141703,"public ComponentCategory extractComponentsCategory(){
  return ComponentCategory.CATEGORY_4_CAMEL;
}","@Override public ComponentCategory extractComponentsCategory(){
  return ComponentCategory.CATEGORY_4_CAMEL;
}",0.9523809523809524
141704,"public List<IComponent> filterComponents(List<IComponent> allComponents){
  if (allComponents == null || allComponents.isEmpty() || !camelComponents.isEmpty()) {
    return camelComponents;
  }
  String categoryName=extractComponentsCategory().getName();
  for (  IComponent component : allComponents) {
    String compType=component.getPaletteType();
    if (compType != null && categoryName.equals(compType)) {
      camelComponents.add(component);
    }
  }
  return camelComponents;
}","@Override public List<IComponent> filterComponents(List<IComponent> allComponents){
  List<IComponent> camelComponents=new ArrayList<IComponent>();
  if (allComponents == null || allComponents.isEmpty()) {
    return camelComponents;
  }
  String categoryName=extractComponentsCategory().getName();
  for (  IComponent component : allComponents) {
    String compType=component.getPaletteType();
    if (compType != null && categoryName.equals(compType)) {
      camelComponents.add(component);
    }
  }
  return camelComponents;
}",0.8980392156862745
141705,"@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=(RepositoryNode)((IStructuredSelection)getSelection()).getFirstElement();
  }
  BeanItem beanItem=(BeanItem)repositoryNode.getObject().getProperty().getItem();
  try {
    openBeanEditor(beanItem,false);
    refresh(repositoryNode);
    CorePlugin.getDefault().getLibrariesService().resetModulesNeeded();
    CorePlugin.getDefault().getRunProcessService().updateLibraries(new HashSet<String>(),null);
  }
 catch (  PartInitException e) {
    MessageBoxExceptionHandler.process(e);
  }
catch (  SystemException e) {
    MessageBoxExceptionHandler.process(e);
  }
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=(RepositoryNode)((IStructuredSelection)getSelection()).getFirstElement();
  }
  BeanItem beanItem=(BeanItem)repositoryNode.getObject().getProperty().getItem();
  try {
    openBeanEditor(beanItem,false);
    refresh(repositoryNode);
    CorePlugin.getDefault().getLibrariesService().resetModulesNeeded();
    CorePlugin.getDefault().getRunProcessService().updateLibraries(new HashSet<ModuleNeeded>(),null);
  }
 catch (  PartInitException e) {
    MessageBoxExceptionHandler.process(e);
  }
catch (  SystemException e) {
    MessageBoxExceptionHandler.process(e);
  }
}",0.9861751152073732
141706,"/** 
 * To optimize, right now it will write the xsd file many times. Since there is no clues if the parameters comes from the same xsd, generate it everytime right now.
 * @param operationName
 * @param hashMap
 * @throws IOException
 */
private void populateMessage2(QName parameter,String portTypeName,String operationName,File schemaFile,Collection<XmlFileConnectionItem> selectItems,File zip) throws IOException {
  String name=parameter.getLocalPart();
  XmlFileConnection connection=null;
  Property connectionProperty=null;
  XmlFileConnectionItem connectionItem=null;
  String oldConnectionId=null;
  String oldTableId=null;
  IMetadataTable oldMetadataTable=null;
  Map<String,String> oldTableMap=null;
  if (!selectItems.isEmpty()) {
    boolean needRewrite=false;
    for (    XmlFileConnectionItem item : selectItems) {
      connectionProperty=item.getProperty();
      if (connectionProperty.getLabel().equals(name)) {
        oldConnectionId=connectionProperty.getId();
        connectionItem=item;
        connection=(XmlFileConnection)connectionItem.getConnection();
        needRewrite=true;
        Set<MetadataTable> tables=ConnectionHelper.getTables(connection);
        MetadataTable oldTable=null;
        if (tables.size() > 0) {
          oldTable=tables.toArray(new MetadataTable[0])[0];
          oldTableId=oldTable.getId();
          oldMetadataTable=ConvertionHelper.convert(oldTable);
        }
        oldTableMap=RepositoryUpdateManager.getOldTableIdAndNameMap(connectionItem,oldTable,false);
        break;
      }
    }
    if (!needRewrite) {
      return;
    }
  }
  connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(name);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContentFromFile(zip);
  connection.setFileContent(byteArray.getInnerContent());
  String schemaFileName=schemaFile.getName();
  schemaFileName=schemaFileName.substring(0,schemaFileName.lastIndexOf(""String_Node_Str""));
  connection.setXmlFilePath(schemaFileName.concat(""String_Node_Str"").concat(zip.getName()));
  try {
    String filePath=schemaFile.getPath();
    XSDSchema xsdSchema=populationUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      if (oldTableId != null) {
        table.setId(oldTableId);
      }
 else {
        table.setId(ProxyRepositoryFactory.getInstance().getNextId());
      }
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  IOException e) {
    throw e;
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  connectionProperty.setId(factory.getNextId());
  try {
    String folderPath=FolderNameUtil.getImportedXmlSchemaPath(parameter.getNamespaceURI(),portTypeName,operationName);
    IPath path=new Path(folderPath);
    factory.create(connectionItem,path,true);
    if (oldConnectionId != null) {
      connectionItem.getProperty().setId(oldConnectionId);
      factory.save(connectionItem);
    }
    propagateSchemaChange(oldMetadataTable,oldTableMap,connection,connectionItem);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  URISyntaxException e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * To optimize, right now it will write the xsd file many times. Since there is no clues if the parameters comes from the same xsd, generate it everytime right now.
 * @param operationName
 * @param hashMap
 * @throws IOException
 */
private void populateMessage2(QName parameter,String portTypeName,String operationName,File schemaFile,Collection<XmlFileConnectionItem> selectItems,File zip) throws IOException {
  String name=parameter.getLocalPart();
  XmlFileConnection connection=null;
  Property connectionProperty=null;
  XmlFileConnectionItem connectionItem=null;
  String oldConnectionId=null;
  String oldTableId=null;
  IMetadataTable oldMetadataTable=null;
  Map<String,String> oldTableMap=null;
  if (!selectItems.isEmpty()) {
    boolean needRewrite=false;
    for (    XmlFileConnectionItem item : selectItems) {
      connectionProperty=item.getProperty();
      if (connectionProperty.getLabel().equals(name)) {
        oldConnectionId=connectionProperty.getId();
        connectionItem=item;
        connection=(XmlFileConnection)connectionItem.getConnection();
        needRewrite=true;
        Set<MetadataTable> tables=ConnectionHelper.getTables(connection);
        MetadataTable oldTable=null;
        if (tables.size() > 0) {
          oldTable=tables.toArray(new MetadataTable[0])[0];
          oldTableId=oldTable.getId();
          oldMetadataTable=ConvertionHelper.convert(oldTable);
        }
        oldTableMap=RepositoryUpdateManager.getOldTableIdAndNameMap(connectionItem,oldTable,false);
        break;
      }
    }
    if (!needRewrite && !WSDLUtils.isNameValidInXmlFileConnection(parameter,portTypeName,operationName)) {
      return;
    }
  }
  connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(name);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContentFromFile(zip);
  connection.setFileContent(byteArray.getInnerContent());
  String schemaFileName=schemaFile.getName();
  schemaFileName=schemaFileName.substring(0,schemaFileName.lastIndexOf(""String_Node_Str""));
  connection.setXmlFilePath(schemaFileName.concat(""String_Node_Str"").concat(zip.getName()));
  try {
    String filePath=schemaFile.getPath();
    XSDSchema xsdSchema=populationUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      if (oldTableId != null) {
        table.setId(oldTableId);
      }
 else {
        table.setId(ProxyRepositoryFactory.getInstance().getNextId());
      }
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  IOException e) {
    throw e;
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  connectionProperty.setId(factory.getNextId());
  try {
    String folderPath=FolderNameUtil.getImportedXmlSchemaPath(parameter.getNamespaceURI(),portTypeName,operationName);
    IPath path=new Path(folderPath);
    factory.create(connectionItem,path,true);
    if (oldConnectionId != null) {
      connectionItem.getProperty().setId(oldConnectionId);
      factory.save(connectionItem);
    }
    propagateSchemaChange(oldMetadataTable,oldTableMap,connection,connectionItem);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  URISyntaxException e) {
    ExceptionHandler.process(e);
  }
}",0.9923916032633604
141707,"/** 
 * To optimize, right now it will write the xsd file many times. Since there is no clues if the parameters comes from the same xsd, generate it everytime right now.
 * @param operationName
 * @param hashMap
 * @throws IOException
 */
private void populateMessage2(QName parameter,String portTypeName,String operationName,File schemaFile,Collection<XmlFileConnectionItem> selectItems,File zip) throws IOException {
  String name=parameter.getLocalPart();
  XmlFileConnection connection=null;
  Property connectionProperty=null;
  XmlFileConnectionItem connectionItem=null;
  String oldConnectionId=null;
  String oldTableId=null;
  IMetadataTable oldMetadataTable=null;
  Map<String,String> oldTableMap=null;
  if (selectItems.size() > 0) {
    boolean needRewrite=false;
    for (    XmlFileConnectionItem item : selectItems) {
      connectionProperty=item.getProperty();
      if (connectionProperty.getLabel().equals(name)) {
        oldConnectionId=connectionProperty.getId();
        connectionItem=item;
        connection=(XmlFileConnection)connectionItem.getConnection();
        needRewrite=true;
        Set<MetadataTable> tables=ConnectionHelper.getTables(connection);
        MetadataTable oldTable=null;
        if (tables.size() > 0) {
          oldTable=tables.toArray(new MetadataTable[0])[0];
          oldTableId=oldTable.getId();
          oldMetadataTable=ConvertionHelper.convert(oldTable);
        }
        oldTableMap=RepositoryUpdateManager.getOldTableIdAndNameMap(connectionItem,oldTable,false);
        break;
      }
    }
    if (!needRewrite) {
      return;
    }
  }
  connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(name);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContentFromFile(zip);
  connection.setFileContent(byteArray.getInnerContent());
  String schemaFileName=schemaFile.getName();
  schemaFileName=schemaFileName.substring(0,schemaFileName.lastIndexOf(""String_Node_Str""));
  connection.setXmlFilePath(schemaFileName.concat(""String_Node_Str"").concat(zip.getName()));
  try {
    String filePath=schemaFile.getPath();
    XSDSchema xsdSchema=populationUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      if (oldTableId != null) {
        table.setId(oldTableId);
      }
 else {
        table.setId(ProxyRepositoryFactory.getInstance().getNextId());
      }
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  IOException e) {
    throw e;
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  connectionProperty.setId(factory.getNextId());
  try {
    String folderPath=FolderNameUtil.getImportedXmlSchemaPath(parameter.getNamespaceURI(),portTypeName,operationName);
    IPath path=new Path(folderPath);
    factory.create(connectionItem,path,true);
    if (oldConnectionId != null) {
      connectionItem.getProperty().setId(oldConnectionId);
      factory.save(connectionItem);
    }
    propagateSchemaChange(oldMetadataTable,oldTableMap,connection,connectionItem);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    RepositoryManager.refresh(ERepositoryObjectType.METADATA_FILE_XML);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  URISyntaxException e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * To optimize, right now it will write the xsd file many times. Since there is no clues if the parameters comes from the same xsd, generate it everytime right now.
 * @param operationName
 * @param hashMap
 * @throws IOException
 */
private void populateMessage2(QName parameter,String portTypeName,String operationName,File schemaFile,Collection<XmlFileConnectionItem> selectItems,File zip) throws IOException {
  String name=parameter.getLocalPart();
  XmlFileConnection connection=null;
  Property connectionProperty=null;
  XmlFileConnectionItem connectionItem=null;
  String oldConnectionId=null;
  String oldTableId=null;
  IMetadataTable oldMetadataTable=null;
  Map<String,String> oldTableMap=null;
  if (selectItems.size() > 0) {
    boolean needRewrite=false;
    for (    XmlFileConnectionItem item : selectItems) {
      connectionProperty=item.getProperty();
      if (connectionProperty.getLabel().equals(name)) {
        oldConnectionId=connectionProperty.getId();
        connectionItem=item;
        connection=(XmlFileConnection)connectionItem.getConnection();
        needRewrite=true;
        Set<MetadataTable> tables=ConnectionHelper.getTables(connection);
        MetadataTable oldTable=null;
        if (tables.size() > 0) {
          oldTable=tables.toArray(new MetadataTable[0])[0];
          oldTableId=oldTable.getId();
          oldMetadataTable=ConvertionHelper.convert(oldTable);
        }
        oldTableMap=RepositoryUpdateManager.getOldTableIdAndNameMap(connectionItem,oldTable,false);
        break;
      }
    }
    if (!needRewrite && !WSDLUtils.isNameValidInXmlFileConnection(parameter,portTypeName,operationName)) {
      return;
    }
  }
  connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(name);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContentFromFile(zip);
  connection.setFileContent(byteArray.getInnerContent());
  String schemaFileName=schemaFile.getName();
  schemaFileName=schemaFileName.substring(0,schemaFileName.lastIndexOf(""String_Node_Str""));
  connection.setXmlFilePath(schemaFileName.concat(""String_Node_Str"").concat(zip.getName()));
  try {
    String filePath=schemaFile.getPath();
    XSDSchema xsdSchema=populationUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      if (oldTableId != null) {
        table.setId(oldTableId);
      }
 else {
        table.setId(ProxyRepositoryFactory.getInstance().getNextId());
      }
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  IOException e) {
    throw e;
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  connectionProperty.setId(factory.getNextId());
  try {
    String folderPath=FolderNameUtil.getImportedXmlSchemaPath(parameter.getNamespaceURI(),portTypeName,operationName);
    IPath path=new Path(folderPath);
    factory.create(connectionItem,path,true);
    if (oldConnectionId != null) {
      connectionItem.getProperty().setId(oldConnectionId);
      factory.save(connectionItem);
    }
    propagateSchemaChange(oldMetadataTable,oldTableMap,connection,connectionItem);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    RepositoryManager.refresh(ERepositoryObjectType.METADATA_FILE_XML);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  URISyntaxException e) {
    ExceptionHandler.process(e);
  }
}",0.9924907264995928
141708,"private Item createNewItem(RepositoryNode sourceNode){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PIG_UDF) {
        item=PropertiesFactory.eINSTANCE.createPigudfItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        item=PropertiesFactory.eINSTANCE.createValidationRulesConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
        item=PropertiesFactory.eINSTANCE.createHeaderFooterConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}","private Item createNewItem(RepositoryNode sourceNode){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}",0.1217450118363206
141709,"private Item createNewItem(RepositoryNode sourceNode){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PIG_UDF) {
        item=PropertiesFactory.eINSTANCE.createPigudfItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        item=PropertiesFactory.eINSTANCE.createValidationRulesConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
        item=PropertiesFactory.eINSTANCE.createHeaderFooterConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}","private Item createNewItem(RepositoryNode sourceNode){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}",0.1217450118363206
141710,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType != CamelRepositoryNodeType.repositoryRoutesType) {
      canWork=false;
    }
  if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
    canWork=false;
  }
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType != CamelRepositoryNodeType.repositoryRoutesType) {
      canWork=false;
    }
  if (node.getObject() != null && node.getObject().isDeleted()) {
    canWork=false;
  }
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}",0.9752883031301482
141711,"@Override protected void doRun(){
  IRepositoryNode node=null;
  CamelNewProcessWizard processWizard=null;
  if (isToolbar()) {
    processWizard=new CamelNewProcessWizard(null);
  }
 else {
    ISelection selection=getSelection();
    if (selection == null) {
      return;
    }
    Object obj=((IStructuredSelection)selection).getFirstElement();
    node=(IRepositoryNode)obj;
    ItemCacheManager.clearCache();
    IRepositoryService service=DesignerPlugin.getDefault().getRepositoryService();
    IPath path=service.getRepositoryPath((RepositoryNode)node);
    if (RepositoryConstants.isSystemFolder(path.toString())) {
      return;
    }
    processWizard=new CamelNewProcessWizard(path);
  }
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),processWizard);
  if (dlg.open() == Window.OK) {
    if (processWizard.getProcess() == null) {
      return;
    }
    CamelProcessEditorInput fileEditorInput;
    try {
      fileEditorInput=new CamelProcessEditorInput(processWizard.getProcess(),false,true,false);
      IRepositoryNode repositoryNode=RepositoryNodeUtilities.getRepositoryNode(fileEditorInput.getItem().getProperty().getId(),false);
      fileEditorInput.setRepositoryNode(repositoryNode);
      IWorkbenchPage page=getActivePage();
      page.openEditor(fileEditorInput,CamelMultiPageTalendEditor.ID,true);
    }
 catch (    PartInitException e) {
      ExceptionHandler.process(e);
    }
catch (    PersistenceException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
}","@Override protected void doRun(){
  IRepositoryNode node=null;
  CamelNewProcessWizard processWizard=null;
  if (isToolbar()) {
    processWizard=new CamelNewProcessWizard(null);
  }
 else {
    ISelection selection=getSelection();
    if (selection == null) {
      return;
    }
    Object obj=((IStructuredSelection)selection).getFirstElement();
    node=(IRepositoryNode)obj;
    ItemCacheManager.clearCache();
    IRepositoryService service=DesignerPlugin.getDefault().getRepositoryService();
    IPath path=service.getRepositoryPath(node);
    if (RepositoryConstants.isSystemFolder(path.toString())) {
      return;
    }
    processWizard=new CamelNewProcessWizard(path);
  }
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),processWizard);
  if (dlg.open() == Window.OK) {
    if (processWizard.getProcess() == null) {
      return;
    }
    CamelProcessEditorInput fileEditorInput;
    try {
      fileEditorInput=new CamelProcessEditorInput(processWizard.getProcess(),false,true,false);
      IRepositoryNode repositoryNode=RepositoryNodeUtilities.getRepositoryNode(fileEditorInput.getItem().getProperty().getId(),false);
      fileEditorInput.setRepositoryNode(repositoryNode);
      IWorkbenchPage page=getActivePage();
      page.openEditor(fileEditorInput,CamelMultiPageTalendEditor.ID,true);
    }
 catch (    PartInitException e) {
      ExceptionHandler.process(e);
    }
catch (    PersistenceException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
}",0.994726433750824
141712,"public void run(IIntroSite site,Properties params){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
    selectRootObject(params);
    doRun();
  }
}","@Override public void run(IIntroSite site,Properties params){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
    selectRootObject(params);
    doRun();
  }
}",0.9883177570093458
141713,"public IRepositoryNode getProcessNode(){
  ERepositoryObjectType repositoryNodeType=(ERepositoryObjectType)ERepositoryObjectType.valueOf(ERepositoryObjectType.class,CamelRepositoryNodeType.ROUTES);
  IRepositoryNode repositoryNode=ProjectRepositoryNode.getInstance().getRootRepositoryNode(repositoryNodeType);
  return repositoryNode;
}","@Override public IRepositoryNode getProcessNode(){
  ERepositoryObjectType repositoryNodeType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,CamelRepositoryNodeType.ROUTES);
  IRepositoryNode repositoryNode=ProjectRepositoryNode.getInstance().getRootRepositoryNode(repositoryNodeType);
  return repositoryNode;
}",0.9499241274658572
141714,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType != CamelRepositoryNodeType.repositoryBeansType) {
      canWork=false;
    }
  if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
    canWork=false;
  }
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType != CamelRepositoryNodeType.repositoryBeansType) {
      canWork=false;
    }
  if (node.getObject() != null && node.getObject().isDeleted()) {
    canWork=false;
  }
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}",0.9808638600328048
141715,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType != CamelRepositoryNodeType.repositoryRouteResourceType) {
      canWork=false;
    }
  if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
    canWork=false;
  }
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType != CamelRepositoryNodeType.repositoryRouteResourceType) {
      canWork=false;
    }
  if (node.getObject() != null && node.getObject().isDeleted()) {
    canWork=false;
  }
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}",0.9754768392370572
141716,"@Override protected void doRun(){
  IRepositoryNode node=null;
  NewRouteResourceWizard wizard=null;
  ISelection selection=getSelection();
  if (selection == null) {
    return;
  }
  Object obj=((IStructuredSelection)selection).getFirstElement();
  node=(IRepositoryNode)obj;
  IRepositoryService service=DesignerPlugin.getDefault().getRepositoryService();
  IPath path=service.getRepositoryPath((RepositoryNode)node);
  if (RepositoryConstants.isSystemFolder(path.toString())) {
    return;
  }
  wizard=new NewRouteResourceWizard(path);
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),wizard);
  int open=dlg.open();
  if (open == Window.OK) {
    RouteResourceItem item=wizard.getItem();
    IWorkbenchPage page=getActivePage();
    RouteResourceEditorUtil.openEditor(page,null,item);
  }
}","@Override protected void doRun(){
  IRepositoryNode node=null;
  NewRouteResourceWizard wizard=null;
  ISelection selection=getSelection();
  if (selection == null) {
    return;
  }
  Object obj=((IStructuredSelection)selection).getFirstElement();
  node=(IRepositoryNode)obj;
  IRepositoryService service=DesignerPlugin.getDefault().getRepositoryService();
  IPath path=service.getRepositoryPath(node);
  if (RepositoryConstants.isSystemFolder(path.toString())) {
    return;
  }
  wizard=new NewRouteResourceWizard(path);
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),wizard);
  int open=dlg.open();
  if (open == Window.OK) {
    RouteResourceItem item=wizard.getItem();
    IWorkbenchPage page=getActivePage();
    RouteResourceEditorUtil.openEditor(page,null,item);
  }
}",0.990159901599016
141717,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
    }
  if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
    canWork=false;
  }
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
    }
  if (node.getObject() != null && node.getObject().isDeleted()) {
    canWork=false;
  }
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}",0.9749023982152816
141718,"public void run(IIntroSite site,Properties params){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
    selectRootObject(params);
    doRun();
  }
}","@Override public void run(IIntroSite site,Properties params){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
    selectRootObject(params);
    doRun();
  }
}",0.9883177570093458
141719,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
      if (node.getObjectType() != CamelRepositoryNodeType.repositoryRoutesType) {
        canWork=false;
      }
    break;
default :
  canWork=false;
}
}
setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
      if (node.getObjectType() != CamelRepositoryNodeType.repositoryRoutesType) {
        canWork=false;
      }
    break;
default :
  canWork=false;
}
if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.LOCK_BY_USER) {
canWork=false;
}
}
setEnabled(canWork);
}",0.8511029411764706
141720,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
      if (node.getObjectType() != CamelRepositoryNodeType.repositoryBeansType) {
        canWork=false;
      }
    break;
default :
  canWork=false;
}
}
setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
      if (node.getObjectType() != CamelRepositoryNodeType.repositoryBeansType) {
        canWork=false;
      }
    break;
default :
  canWork=false;
}
if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.LOCK_BY_USER) {
canWork=false;
}
}
setEnabled(canWork);
}",0.850828729281768
141721,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
    if (CamelEditorUtil.hasEditorOpened(node)) {
      canWork=false;
    }
 else {
switch (node.getType()) {
case REPOSITORY_ELEMENT:
        if (node.getObjectType() != CamelRepositoryNodeType.repositoryRoutesType) {
          canWork=false;
        }
      break;
default :
    canWork=false;
}
}
}
setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
    if (CamelEditorUtil.hasEditorOpened(node)) {
      canWork=false;
    }
 else {
switch (node.getType()) {
case REPOSITORY_ELEMENT:
        if (node.getObjectType() != CamelRepositoryNodeType.repositoryRoutesType) {
          canWork=false;
        }
      break;
default :
    canWork=false;
}
}
if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.LOCK_BY_USER) {
canWork=false;
}
}
setEnabled(canWork);
}",0.8734375
141722,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
      if (node.getObjectType() != CamelRepositoryNodeType.repositoryBeansType) {
        canWork=false;
      }
    break;
default :
  canWork=false;
}
}
setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
      if (node.getObjectType() != CamelRepositoryNodeType.repositoryBeansType) {
        canWork=false;
      }
    break;
default :
  canWork=false;
}
if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.LOCK_BY_USER) {
canWork=false;
}
}
setEnabled(canWork);
}",0.850828729281768
141723,"public void run(final IProgressMonitor monitor) throws CoreException {
  if (!alreadyEditedByUser) {
    refreshNewJob();
    try {
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
  openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
  try {
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","public void run(final IProgressMonitor monitor) throws CoreException {
  if (!alreadyEditedByUser) {
    refreshNewJob();
    try {
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  try {
    ProxyRepositoryFactory.getInstance().lock(processObject);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  LoginException e) {
    ExceptionHandler.process(e);
  }
  boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
  openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
  try {
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.8626692456479691
141724,"@Override public boolean performFinish(){
  if (mainPage.isCreateNewVersionJob()) {
    try {
      ProxyRepositoryFactory.getInstance().updateLockStatus();
    }
 catch (    PersistenceException e1) {
      ExceptionHandler.process(e1);
    }
    ERepositoryStatus repositoryStatus=ProxyRepositoryFactory.getInstance().getStatus(processObject);
    if ((repositoryStatus.equals(ERepositoryStatus.READ_ONLY)) || repositoryStatus == ERepositoryStatus.LOCK_BY_OTHER || repositoryStatus.equals(ERepositoryStatus.LOCK_BY_USER)) {
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          MessageDialog.openWarning(getShell(),""String_Node_Str"",Messages.getString(""String_Node_Str""));
        }
      }
);
      return false;
    }
 else {
      IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
        public void run(        final IProgressMonitor monitor) throws CoreException {
          try {
            ProxyRepositoryFactory.getInstance().lock(processObject);
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
catch (          LoginException e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
      }
 catch (      CoreException e) {
        MessageBoxExceptionHandler.process(e);
      }
    }
    IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
      public void run(      final IProgressMonitor monitor) throws CoreException {
        if (!alreadyEditedByUser) {
          refreshNewJob();
          try {
            ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
        boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
        openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
        try {
          ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
;
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    try {
      ISchedulingRule schedulingRule=workspace.getRoot();
      workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
    }
 catch (    CoreException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
 else {
    StructuredSelection selection=(StructuredSelection)mainPage.getSelection();
    RepositoryNode node=(RepositoryNode)selection.getFirstElement();
    boolean lastVersion=node.getObject().getVersion().equals(processObject.getVersion());
    if (lastVersion) {
      lockObject(processObject);
    }
    ERepositoryStatus status=node.getObject().getRepositoryStatus();
    boolean isLocked=false;
    if (status == ERepositoryStatus.LOCK_BY_USER) {
      isLocked=true;
    }
    restoreVersion();
    openAnotherVersion(node,!lastVersion || !isLocked);
  }
  return true;
}","@Override public boolean performFinish(){
  if (mainPage.isCreateNewVersionJob()) {
    try {
      ProxyRepositoryFactory.getInstance().updateLockStatus();
    }
 catch (    PersistenceException e1) {
      ExceptionHandler.process(e1);
    }
    ERepositoryStatus repositoryStatus=ProxyRepositoryFactory.getInstance().getStatus(processObject);
    if ((repositoryStatus.equals(ERepositoryStatus.READ_ONLY)) || repositoryStatus == ERepositoryStatus.LOCK_BY_OTHER || repositoryStatus.equals(ERepositoryStatus.LOCK_BY_USER)) {
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          MessageDialog.openWarning(getShell(),""String_Node_Str"",Messages.getString(""String_Node_Str""));
        }
      }
);
      return false;
    }
 else {
      IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
        public void run(        final IProgressMonitor monitor) throws CoreException {
          if (!alreadyEditedByUser) {
            refreshNewJob();
            try {
              ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
          }
          try {
            ProxyRepositoryFactory.getInstance().lock(processObject);
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
catch (          LoginException e) {
            ExceptionHandler.process(e);
          }
          boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
          openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
          try {
            ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
      }
 catch (      CoreException e) {
        MessageBoxExceptionHandler.process(e);
      }
    }
  }
 else {
    StructuredSelection selection=(StructuredSelection)mainPage.getSelection();
    RepositoryNode node=(RepositoryNode)selection.getFirstElement();
    boolean lastVersion=node.getObject().getVersion().equals(processObject.getVersion());
    if (lastVersion) {
      lockObject(processObject);
    }
    ERepositoryStatus status=node.getObject().getRepositoryStatus();
    boolean isLocked=false;
    if (status == ERepositoryStatus.LOCK_BY_USER) {
      isLocked=true;
    }
    restoreVersion();
    openAnotherVersion(node,!lastVersion || !isLocked);
  }
  return true;
}",0.5408681408681408
141725,"@Override public void widgetSelected(SelectionEvent e){
  String version=getProperty().getVersion();
  version=VersionUtils.upMinor(version);
  versionText.setText(version);
  getProperty().setVersion(version);
  updatePageStatus();
}","@Override public void widgetSelected(SelectionEvent e){
  String version=getProperty().getVersion();
  version=VersionUtils.upMinor(version);
  versionText.setText(version);
  newVersion=version;
  updatePageStatus();
}",0.9183222958057397
141726,"private void addListener(){
  createNewVersionButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      boolean create=createNewVersionButton.getSelection();
      versionModifComposite.setEnabled(create);
      versionListComposite.setEnabled(!create);
      refreshButtonState(create);
      createNewVersionJob=create;
      updatePageStatus();
    }
  }
);
  versionMajorBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String version=getProperty().getVersion();
      version=VersionUtils.upMajor(version);
      versionText.setText(version);
      getProperty().setVersion(version);
      updatePageStatus();
    }
  }
);
  versionMinorBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String version=getProperty().getVersion();
      version=VersionUtils.upMinor(version);
      versionText.setText(version);
      getProperty().setVersion(version);
      updatePageStatus();
    }
  }
);
}","private void addListener(){
  createNewVersionButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      boolean create=createNewVersionButton.getSelection();
      versionModifComposite.setEnabled(create);
      versionListComposite.setEnabled(!create);
      refreshButtonState(create);
      createNewVersionJob=create;
      updatePageStatus();
    }
  }
);
  versionMajorBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String version=getProperty().getVersion();
      version=VersionUtils.upMajor(version);
      versionText.setText(version);
      newVersion=version;
      updatePageStatus();
    }
  }
);
  versionMinorBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String version=getProperty().getVersion();
      version=VersionUtils.upMinor(version);
      versionText.setText(version);
      newVersion=version;
      updatePageStatus();
    }
  }
);
}",0.9492563429571304
141727,"@Override public boolean performCancel(){
  if (!alreadyEditedByUser) {
    restoreVersion();
  }
  return super.performCancel();
}","@Override public boolean performCancel(){
  return super.performCancel();
}",0.7281553398058253
141728,"public void run(final IProgressMonitor monitor) throws CoreException {
  if (!alreadyEditedByUser) {
    refreshNewJob();
    try {
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  try {
    ProxyRepositoryFactory.getInstance().lock(processObject);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  LoginException e) {
    ExceptionHandler.process(e);
  }
  boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
  openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
  try {
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","public void run(final IProgressMonitor monitor) throws CoreException {
  if (!alreadyEditedByUser) {
    getProperty().setVersion(mainPage.getNewVersion());
    refreshNewJob();
    try {
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  try {
    ProxyRepositoryFactory.getInstance().lock(processObject);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  LoginException e) {
    ExceptionHandler.process(e);
  }
  boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
  openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
  try {
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9692307692307692
141729,"@Override public boolean performFinish(){
  if (mainPage.isCreateNewVersionJob()) {
    try {
      ProxyRepositoryFactory.getInstance().updateLockStatus();
    }
 catch (    PersistenceException e1) {
      ExceptionHandler.process(e1);
    }
    ERepositoryStatus repositoryStatus=ProxyRepositoryFactory.getInstance().getStatus(processObject);
    if ((repositoryStatus.equals(ERepositoryStatus.READ_ONLY)) || repositoryStatus == ERepositoryStatus.LOCK_BY_OTHER || repositoryStatus.equals(ERepositoryStatus.LOCK_BY_USER)) {
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          MessageDialog.openWarning(getShell(),""String_Node_Str"",Messages.getString(""String_Node_Str""));
        }
      }
);
      return false;
    }
 else {
      IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
        public void run(        final IProgressMonitor monitor) throws CoreException {
          if (!alreadyEditedByUser) {
            refreshNewJob();
            try {
              ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
          }
          try {
            ProxyRepositoryFactory.getInstance().lock(processObject);
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
catch (          LoginException e) {
            ExceptionHandler.process(e);
          }
          boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
          openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
          try {
            ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
      }
 catch (      CoreException e) {
        MessageBoxExceptionHandler.process(e);
      }
    }
  }
 else {
    StructuredSelection selection=(StructuredSelection)mainPage.getSelection();
    RepositoryNode node=(RepositoryNode)selection.getFirstElement();
    boolean lastVersion=node.getObject().getVersion().equals(processObject.getVersion());
    if (lastVersion) {
      lockObject(processObject);
    }
    ERepositoryStatus status=node.getObject().getRepositoryStatus();
    boolean isLocked=false;
    if (status == ERepositoryStatus.LOCK_BY_USER) {
      isLocked=true;
    }
    restoreVersion();
    openAnotherVersion(node,!lastVersion || !isLocked);
  }
  return true;
}","@Override public boolean performFinish(){
  if (mainPage.isCreateNewVersionJob()) {
    try {
      ProxyRepositoryFactory.getInstance().updateLockStatus();
    }
 catch (    PersistenceException e1) {
      ExceptionHandler.process(e1);
    }
    ERepositoryStatus repositoryStatus=ProxyRepositoryFactory.getInstance().getStatus(processObject);
    if ((repositoryStatus.equals(ERepositoryStatus.READ_ONLY)) || repositoryStatus == ERepositoryStatus.LOCK_BY_OTHER || repositoryStatus.equals(ERepositoryStatus.LOCK_BY_USER)) {
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          MessageDialog.openWarning(getShell(),""String_Node_Str"",Messages.getString(""String_Node_Str""));
        }
      }
);
      return false;
    }
 else {
      IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
        public void run(        final IProgressMonitor monitor) throws CoreException {
          if (!alreadyEditedByUser) {
            getProperty().setVersion(mainPage.getNewVersion());
            refreshNewJob();
            try {
              ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
          }
          try {
            ProxyRepositoryFactory.getInstance().lock(processObject);
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
catch (          LoginException e) {
            ExceptionHandler.process(e);
          }
          boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
          openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
          try {
            ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
      }
 catch (      CoreException e) {
        MessageBoxExceptionHandler.process(e);
      }
    }
  }
 else {
    StructuredSelection selection=(StructuredSelection)mainPage.getSelection();
    RepositoryNode node=(RepositoryNode)selection.getFirstElement();
    boolean lastVersion=node.getObject().getVersion().equals(processObject.getVersion());
    if (lastVersion) {
      lockObject(processObject);
    }
    ERepositoryStatus status=node.getObject().getRepositoryStatus();
    boolean isLocked=false;
    if (status == ERepositoryStatus.LOCK_BY_USER) {
      isLocked=true;
    }
    openAnotherVersion(node,!lastVersion || !isLocked);
  }
  return true;
}",0.9850069735006972
141730,"public void checkNode(Node node){
  if (!node.getComponent().getName().equals(""String_Node_Str"")) {
    return;
  }
  IElementParameter resourceParam=node.getElementParameter(EParameterName.ROUTE_RESOURCE_TYPE_ID.getName());
  IElementParameter wsdlFileParam=node.getElementParameter(""String_Node_Str"");
  IElementParameter serviceParam=node.getElementParameter(""String_Node_Str"");
  IElementParameter wsdlTypeParam=node.getElementParameter(""String_Node_Str"");
  IElementParameter clazzParam=node.getElementParameter(""String_Node_Str"");
  if (serviceParam != null && ""String_Node_Str"".equals(serviceParam.getValue())) {
    if (wsdlTypeParam != null && ""String_Node_Str"".equals(wsdlTypeParam.getValue())) {
      if (wsdlFileParam == null || wsdlFileParam.getValue() == null || wsdlFileParam.getValue().toString().isEmpty() || wsdlFileParam.getValue().toString().equals(""String_Node_Str"")) {
        String errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
        Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
      }
    }
 else     if (wsdlTypeParam != null && ""String_Node_Str"".equals(wsdlTypeParam.getValue())) {
      String errorMessage=""String_Node_Str"";
      if (resourceParam == null || resourceParam.getValue() == null || resourceParam.getValue().toString().isEmpty()) {
        errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
        Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
      }
 else {
        String id=(String)resourceParam.getValue();
        try {
          IRepositoryViewObject lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(id);
          if (lastVersion == null) {
            errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
            Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
          }
 else           if (lastVersion.isDeleted()) {
            errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),resourceParam.getDisplayName());
            Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
          }
        }
 catch (        PersistenceException e) {
          errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
          Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
        }
      }
    }
  }
 else   if (serviceParam != null && ""String_Node_Str"".equals(serviceParam.getValue())) {
    if (clazzParam == null || clazzParam.getValue() == null || clazzParam.getValue().toString().isEmpty()) {
      String errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
      Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
    }
  }
}","public void checkNode(Node node){
  if (!node.getComponent().getName().equals(""String_Node_Str"")) {
    return;
  }
  IElementParameter resourceParam=node.getElementParameter(EParameterName.ROUTE_RESOURCE_TYPE_ID.getName());
  IElementParameter wsdlFileParam=node.getElementParameter(""String_Node_Str"");
  IElementParameter serviceParam=node.getElementParameter(""String_Node_Str"");
  IElementParameter wsdlTypeParam=node.getElementParameter(""String_Node_Str"");
  IElementParameter clazzParam=node.getElementParameter(""String_Node_Str"");
  if (serviceParam != null && ""String_Node_Str"".equals(serviceParam.getValue())) {
    if (wsdlTypeParam != null && ""String_Node_Str"".equals(wsdlTypeParam.getValue())) {
      if (wsdlFileParam == null || wsdlFileParam.getValue() == null || wsdlFileParam.getValue().toString().isEmpty() || wsdlFileParam.getValue().toString().equals(""String_Node_Str"")) {
        String errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam == null ? ""String_Node_Str"" : wsdlFileParam.getDisplayName());
        Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
      }
    }
 else     if (wsdlTypeParam != null && ""String_Node_Str"".equals(wsdlTypeParam.getValue())) {
      String errorMessage=""String_Node_Str"";
      if (resourceParam == null || resourceParam.getValue() == null || resourceParam.getValue().toString().isEmpty()) {
        errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
        Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
      }
 else {
        String id=(String)resourceParam.getValue();
        try {
          IRepositoryViewObject lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(id);
          if (lastVersion == null) {
            errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
            Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
          }
 else           if (lastVersion.isDeleted()) {
            errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),resourceParam.getDisplayName());
            Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
          }
        }
 catch (        PersistenceException e) {
          errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
          Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
        }
      }
    }
  }
 else   if (serviceParam != null && ""String_Node_Str"".equals(serviceParam.getValue())) {
    if (clazzParam == null || clazzParam.getValue() == null || clazzParam.getValue().toString().isEmpty()) {
      String errorMessage=MessageFormat.format(CamelDesignerMessages.getString(""String_Node_Str""),wsdlFileParam.getDisplayName());
      Problems.add(ProblemStatus.ERROR,(Element)node,errorMessage);
    }
  }
}",0.9925975773889636
141731,"public Date getOrder(){
  GregorianCalendar gc=new GregorianCalendar(2012,12,17,14,00,00);
  return gc.getTime();
}","public Date getOrder(){
  GregorianCalendar gc=new GregorianCalendar(2012,11,17,14,00,00);
  return gc.getTime();
}",0.991304347826087
141732,"public Set<ResourceDependencyModel> getResourceModel(INode node){
  Set<ResourceDependencyModel> models=new HashSet<ResourceDependencyModel>();
  String name=node.getComponent().getName();
  Set<ExResourceParamModel> resourceParams=extensionMap.get(name);
  if (resourceParams == null) {
    return models;
  }
  for (  ExResourceParamModel model : resourceParams) {
    boolean eualate=model.eualate(node);
    if (eualate) {
      String paramName=model.getParamName();
      ResourceDependencyModel denpModel=createDenpendencyModel(paramName,node);
      boolean isContained=false;
      for (      ResourceDependencyModel rdm : models) {
        if (rdm.equals(denpModel)) {
          rdm.getRefNodes().add(node.getUniqueName());
          isContained=true;
          break;
        }
      }
      if (!isContained) {
        denpModel.getRefNodes().add(node.getUniqueName());
        models.add(denpModel);
      }
    }
  }
  return models;
}","public Set<ResourceDependencyModel> getResourceModel(INode node){
  Set<ResourceDependencyModel> models=new HashSet<ResourceDependencyModel>();
  String name=node.getComponent().getName();
  Set<ExResourceParamModel> resourceParams=extensionMap.get(name);
  if (resourceParams == null) {
    return models;
  }
  for (  ExResourceParamModel model : resourceParams) {
    boolean eualate=model.eualate(node);
    if (eualate) {
      String paramName=model.getParamName();
      ResourceDependencyModel denpModel=createDenpendencyModel(paramName,node);
      if (denpModel == null) {
        continue;
      }
      boolean isContained=false;
      for (      ResourceDependencyModel rdm : models) {
        if (rdm.equals(denpModel)) {
          rdm.getRefNodes().add(node.getUniqueName());
          isContained=true;
          break;
        }
      }
      if (!isContained) {
        denpModel.getRefNodes().add(node.getUniqueName());
        models.add(denpModel);
      }
    }
  }
  return models;
}",0.970843989769821
141733,"/** 
 * @param id
 * @param version
 * @return
 */
public static ResourceDependencyModel createDependency(String id,String version){
  IRepositoryViewObject rvo=null;
  try {
    if (RouteResourceUtil.LATEST_VERSION.equals(version)) {
      rvo=ProxyRepositoryFactory.getInstance().getLastVersion(id);
    }
 else {
      rvo=ProxyRepositoryFactory.getInstance().getSpecificVersion(id,version,true);
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  Item item=rvo.getProperty().getItem();
  ResourceDependencyModel resourceDependencyModel=new ResourceDependencyModel((RouteResourceItem)item);
  resourceDependencyModel.setSelectedVersion(version);
  resourceDependencyModel.setBuiltIn(true);
  return resourceDependencyModel;
}","/** 
 * @param id
 * @param version
 * @return
 */
public static ResourceDependencyModel createDependency(String id,String version){
  IRepositoryViewObject rvo=null;
  try {
    if (RouteResourceUtil.LATEST_VERSION.equals(version)) {
      rvo=ProxyRepositoryFactory.getInstance().getLastVersion(id);
    }
 else {
      rvo=ProxyRepositoryFactory.getInstance().getSpecificVersion(id,version,true);
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  if (rvo != null) {
    Item item=rvo.getProperty().getItem();
    ResourceDependencyModel resourceDependencyModel=new ResourceDependencyModel((RouteResourceItem)item);
    resourceDependencyModel.setSelectedVersion(version);
    resourceDependencyModel.setBuiltIn(true);
    return resourceDependencyModel;
  }
  return null;
}",0.9679075738125802
141734,"/** 
 * @param routeItem
 * @param model
 */
public static void addResourceDependency(Item routeItem,ResourceDependencyModel model){
  Property property=routeItem.getProperty();
  String newModelId=model.getItem().getProperty().getId();
  String newStoreValue=""String_Node_Str"";
  EMap additionalProperties=property.getAdditionalProperties();
  if (additionalProperties != null) {
    String resourcesObj=(String)additionalProperties.get(ROUTE_RESOURCES_PROP);
    if (resourcesObj != null) {
      boolean duplicated=false;
      String[] resourceIdVersions=resourcesObj.split(COMMA_TAG);
      for (      String idVersion : resourceIdVersions) {
        String[] parts=idVersion.split(REPACE_SLASH_TAG);
        String idPart=parts[0];
        if (model.getItem().getProperty().getId().equals(idPart)) {
          String newId=idPart + SLASH_TAG + model.getSelectedVersion();
          newStoreValue=resourcesObj.toString().replace(idVersion,newId);
          duplicated=true;
        }
      }
      if (!duplicated) {
        newStoreValue=resourcesObj + ""String_Node_Str"" + newModelId+ SLASH_TAG+ model.getSelectedVersion();
      }
    }
 else {
      newStoreValue=newModelId + SLASH_TAG + model.getSelectedVersion();
    }
  }
  additionalProperties.put(ROUTE_RESOURCES_PROP,newStoreValue);
  try {
    ProxyRepositoryFactory.getInstance().save(routeItem,false);
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
}","/** 
 * @param routeItem
 * @param model
 */
public static void addResourceDependency(Item routeItem,ResourceDependencyModel model){
  Property property=routeItem.getProperty();
  String newModelId=model.getItem().getProperty().getId();
  String newStoreValue=""String_Node_Str"";
  EMap additionalProperties=property.getAdditionalProperties();
  if (additionalProperties != null) {
    String resourcesObj=(String)additionalProperties.get(ROUTE_RESOURCES_PROP);
    if (resourcesObj != null) {
      boolean duplicated=false;
      String[] resourceIdVersions=resourcesObj.split(COMMA_TAG);
      for (      String idVersion : resourceIdVersions) {
        String[] parts=idVersion.split(REPACE_SLASH_TAG);
        String idPart=parts[0];
        if (model.getItem().getProperty().getId().equals(idPart)) {
          String newId=idPart + SLASH_TAG + model.getSelectedVersion();
          newStoreValue=resourcesObj.toString().replace(idVersion,newId);
          duplicated=true;
        }
      }
      if (!duplicated) {
        newStoreValue=resourcesObj + ""String_Node_Str"" + newModelId+ SLASH_TAG+ model.getSelectedVersion();
      }
    }
 else {
      newStoreValue=newModelId + SLASH_TAG + model.getSelectedVersion();
    }
    additionalProperties.put(ROUTE_RESOURCES_PROP,newStoreValue);
  }
  try {
    ProxyRepositoryFactory.getInstance().save(routeItem,false);
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
}",0.9979195561719834
141735,"protected void doRun(){
  ISelection selection=getSelectedObject();
  if (selection == null) {
    return;
  }
  Object obj=((IStructuredSelection)selection).getFirstElement();
  if (obj == null) {
    return;
  }
  RepositoryNode node=(RepositoryNode)obj;
  openOrBindEditor(node);
}","protected void doRun(){
  ISelection selection=getSelection();
  if (selection == null) {
    return;
  }
  Object obj=((IStructuredSelection)selection).getFirstElement();
  if (obj == null) {
    return;
  }
  RepositoryNode node=(RepositoryNode)obj;
  openOrBindEditor(node);
}",0.9804618117229128
141736,"protected void doRun(){
  ISelection selection=getSelectedObject();
  if (selection == null) {
    return;
  }
  Object obj=((IStructuredSelection)selection).getFirstElement();
  if (obj == null) {
    return;
  }
  RepositoryNode node=(RepositoryNode)obj;
  opendTextEditor(node);
}","protected void doRun(){
  ISelection selection=getSelection();
  if (selection == null) {
    return;
  }
  Object obj=((IStructuredSelection)selection).getFirstElement();
  if (obj == null) {
    return;
  }
  RepositoryNode node=(RepositoryNode)obj;
  opendTextEditor(node);
}",0.9803921568627452
141737,"/** 
 * @see org.eclipse.jface.wizard.Wizard#performFinish()
 */
@Override public boolean performFinish(){
  property.setId(repositoryFactory.getNextId());
  property.setLabel(property.getDisplayName());
  URL url=mainPage.getUrl();
  Path p=new Path(property.getLabel());
  String itemName=p.removeFileExtension().lastSegment();
  String fileExtension=null;
  if (url != null) {
    p=new Path(url.getPath());
    if (p.getFileExtension() != null) {
      fileExtension=p.getFileExtension();
    }
  }
 else {
    fileExtension=p.getFileExtension();
  }
  if (fileExtension == null || fileExtension.isEmpty()) {
    fileExtension=""String_Node_Str"";
  }
  if (fileExtension.equals(FileConstants.ITEM_EXTENSION)) {
    fileExtension+=""String_Node_Str"";
  }
  if (fileExtension.equals(FileConstants.PROPERTIES_EXTENSION)) {
    fileExtension+=""String_Node_Str"";
  }
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  StringBuffer sb=new StringBuffer();
  if (url == null) {
    byteArray.setInnerContent(new byte[0]);
  }
 else {
    try {
      InputStream inputStream=url.openStream();
      BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream,""String_Node_Str""));
      String line=bufferedReader.readLine();
      while (line != null) {
        sb.append(line).append(System.getProperty(""String_Node_Str""));
        line=bufferedReader.readLine();
      }
      byteArray.setInnerContent(sb.toString().getBytes());
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
      ExceptionHandler.process(e);
      return false;
    }
  }
  ReferenceFileItem refItem=PropertiesFactory.eINSTANCE.createReferenceFileItem();
  refItem.setContent(byteArray);
  refItem.setExtension(fileExtension);
  refItem.setName(itemName);
  item.setName(itemName);
  item.setBindingExtension(fileExtension);
  byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContent(new byte[0]);
  item.setContent(byteArray);
  item.getReferenceResources().add(refItem);
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(this.getWindowTitle(),this){
    @Override protected void run() throws LoginException, PersistenceException {
      repositoryFactory.create(item,mainPage.getDestinationPath());
      RelationshipItemBuilder.getInstance().addOrUpdateItem(item);
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  repositoryFactory.executeRepositoryWorkUnit(workUnit);
  return item != null;
}","/** 
 * @see org.eclipse.jface.wizard.Wizard#performFinish()
 */
@Override public boolean performFinish(){
  property.setId(repositoryFactory.getNextId());
  property.setLabel(property.getDisplayName());
  URL url=mainPage.getUrl();
  Path p=new Path(property.getLabel());
  String itemName=p.removeFileExtension().lastSegment();
  String fileExtension=null;
  if (url != null) {
    p=new Path(url.getPath());
    if (p.getFileExtension() != null) {
      fileExtension=p.getFileExtension();
    }
  }
 else {
    fileExtension=p.getFileExtension();
  }
  if (fileExtension == null || fileExtension.isEmpty()) {
    fileExtension=""String_Node_Str"";
  }
  if (fileExtension.equals(FileConstants.ITEM_EXTENSION)) {
    fileExtension+=""String_Node_Str"";
  }
  if (fileExtension.equals(FileConstants.PROPERTIES_EXTENSION)) {
    fileExtension+=""String_Node_Str"";
  }
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  StringBuffer sb=new StringBuffer();
  if (url == null) {
    byteArray.setInnerContent(new byte[0]);
  }
 else {
    try {
      InputStream inputStream=url.openStream();
      BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream,""String_Node_Str""));
      String line=bufferedReader.readLine();
      while (line != null) {
        sb.append(line).append(System.getProperty(""String_Node_Str""));
        line=bufferedReader.readLine();
      }
      byteArray.setInnerContent(sb.toString().getBytes());
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
      ExceptionHandler.process(e);
      return false;
    }
  }
  ReferenceFileItem refItem=PropertiesFactory.eINSTANCE.createReferenceFileItem();
  refItem.setContent(byteArray);
  refItem.setExtension(fileExtension);
  refItem.setName(itemName);
  item.setName(itemName);
  item.setBindingExtension(fileExtension);
  byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContent(new byte[0]);
  item.setContent(byteArray);
  item.getReferenceResources().add(refItem);
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(this.getWindowTitle(),this){
    @Override protected void run() throws LoginException, PersistenceException {
      repositoryFactory.create(item,mainPage.getDestinationPath());
      RelationshipItemBuilder.getInstance().addOrUpdateItem(item);
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  repositoryFactory.executeRepositoryWorkUnit(workUnit);
  return true;
}",0.9967806841046276
141738,"@Override protected void doRun(){
  ISelection selection=getSelectedObject();
  if (selection == null) {
    return;
  }
  Object obj=((IStructuredSelection)selection).getFirstElement();
  if (obj == null) {
    return;
  }
  RepositoryNode node=(RepositoryNode)obj;
  Property property=node.getObject().getProperty();
  CamelProcessItem processItem=null;
  if (property != null) {
    ItemCacheManager.clearCache();
    Assert.isTrue(property.getItem() instanceof CamelProcessItem);
    processItem=(CamelProcessItem)property.getItem();
    IWorkbenchPage page=getActivePage();
    try {
      final CamelProcessEditorInput fileEditorInput=new CamelProcessEditorInput(processItem,true,true);
      checkUnLoadedNodeForProcess(fileEditorInput);
      IEditorPart editorPart=page.findEditor(fileEditorInput);
      if (editorPart == null) {
        fileEditorInput.setRepositoryNode(node);
        editorPart=page.openEditor(fileEditorInput,CamelMultiPageTalendEditor.ID,true);
      }
 else {
        ((CamelMultiPageTalendEditor)editorPart).setReadOnly(fileEditorInput.setForceReadOnly(false));
        page.activate(editorPart);
      }
      if (editorPart instanceof AbstractMultiPageTalendEditor) {
        ((AbstractMultiPageTalendEditor)editorPart).updateTitleImage();
      }
      refresh(obj);
    }
 catch (    PartInitException e) {
      MessageBoxExceptionHandler.process(e);
    }
catch (    PersistenceException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
 else {
  }
}","@Override protected void doRun(){
  ISelection selection=getSelectedObject();
  if (selection == null) {
    return;
  }
  Object obj=((IStructuredSelection)selection).getFirstElement();
  if (obj == null) {
    return;
  }
  RepositoryNode node=(RepositoryNode)obj;
  Property property=node.getObject().getProperty();
  CamelProcessItem processItem=null;
  if (property != null) {
    ItemCacheManager.clearCache();
    Assert.isTrue(property.getItem() instanceof CamelProcessItem);
    processItem=(CamelProcessItem)property.getItem();
    IWorkbenchPage page=getActivePage();
    try {
      final CamelProcessEditorInput fileEditorInput=new CamelProcessEditorInput(processItem,true,true);
      checkUnLoadedNodeForProcess(fileEditorInput);
      IEditorPart editorPart=page.findEditor(fileEditorInput);
      if (editorPart == null) {
        fileEditorInput.setRepositoryNode(node);
        editorPart=page.openEditor(fileEditorInput,CamelMultiPageTalendEditor.ID,true);
      }
 else {
        ((CamelMultiPageTalendEditor)editorPart).setReadOnly(fileEditorInput.setForceReadOnly(false));
        page.activate(editorPart);
      }
    }
 catch (    PartInitException e) {
      MessageBoxExceptionHandler.process(e);
    }
catch (    PersistenceException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
 else {
  }
}",0.8276348255199154
141739,"private boolean compareMinMax(){
  if (maxVersion == null || maxVersion.trim().equals(""String_Node_Str"") || minVersion == null || minVersion.trim().equals(""String_Node_Str"")) {
    return true;
  }
  String[] maxSplit=maxVersion.split(""String_Node_Str"");
  String[] minSplit=minVersion.split(""String_Node_Str"");
  for (int i=0; i < 3; i++) {
    try {
      if (Integer.parseInt(maxSplit[i]) - Integer.parseInt(minSplit[i]) < 0) {
        return false;
      }
    }
 catch (    Exception e) {
      return false;
    }
  }
  return true;
}","/** 
 * Compare min max.
 * @return true, if check validated.
 */
private boolean compareMinMax(){
  if (maxVersion == null || maxVersion.trim().equals(""String_Node_Str"") || minVersion == null || minVersion.trim().equals(""String_Node_Str"")) {
    return true;
  }
  try {
    Version minV=Version.parseVersion(minVersion);
    Version maxV=Version.parseVersion(maxVersion);
    if (minV == null && maxV == null) {
      return false;
    }
    if (minV.compareTo(maxV) > 0) {
      return false;
    }
 else {
      return true;
    }
  }
 catch (  Exception e) {
    return false;
  }
}",0.4152617568766637
141740,"/** 
 */
private static void initMap(){
  XPathFactory xpFactory=XPathFactory.newInstance();
  XPath newXPath=xpFactory.newXPath();
  try {
    InputStream input=CamelFeatureUtil.class.getResourceAsStream(MAPPING_XML_FILE);
    DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    Document document=builder.parse(input);
    try {
      NodeList list=(NodeList)newXPath.evaluate(""String_Node_Str"",document,XPathConstants.NODESET);
      String camelVersion=list.item(0).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      list=(NodeList)newXPath.evaluate(""String_Node_Str"",document,XPathConstants.NODESET);
      for (int index=0; index < list.getLength(); index++) {
        Node node=list.item(index);
        String hotLib=node.getParentNode().getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        hotLib=hotLib.replace(""String_Node_Str"",camelVersion);
        Collection<FeatureModel> features=camelFeaturesMap.get(hotLib);
        if (features == null) {
          features=new HashSet<FeatureModel>();
          camelFeaturesMap.put(hotLib,features);
        }
        String featureVersion=node.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        String featureName=node.getFirstChild().getNodeValue();
        features.add(new FeatureModel(featureName,featureVersion));
      }
      list=(NodeList)newXPath.evaluate(""String_Node_Str"",document,XPathConstants.NODESET);
      for (int index=0; index < list.getLength(); index++) {
        Node node=list.item(index);
        String hotLib=node.getParentNode().getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        hotLib=hotLib.replace(""String_Node_Str"",camelVersion);
        Collection<BundleModel> bundles=camelBundlesMap.get(hotLib);
        if (bundles == null) {
          bundles=new HashSet<BundleModel>();
          camelBundlesMap.put(hotLib,bundles);
        }
        String version=node.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        String groupId=node.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        String name=node.getFirstChild().getNodeValue();
        bundles.add(new BundleModel(name,groupId,version));
      }
    }
  finally {
      input.close();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 */
private static void initMap(){
  XPathFactory xpFactory=XPathFactory.newInstance();
  XPath newXPath=xpFactory.newXPath();
  try {
    InputStream input=CamelFeatureUtil.class.getResourceAsStream(MAPPING_XML_FILE);
    DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    Document document=builder.parse(input);
    try {
      NodeList list=(NodeList)newXPath.evaluate(""String_Node_Str"",document,XPathConstants.NODESET);
      String camelVersion=list.item(0).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      list=(NodeList)newXPath.evaluate(""String_Node_Str"",document,XPathConstants.NODESET);
      for (int index=0; index < list.getLength(); index++) {
        Node node=list.item(index);
        String hotLib=node.getParentNode().getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        hotLib=hotLib.replace(""String_Node_Str"",camelVersion);
        Collection<FeatureModel> features=camelFeaturesMap.get(hotLib);
        if (features == null) {
          features=new HashSet<FeatureModel>();
          camelFeaturesMap.put(hotLib,features);
        }
        String featureVersion=node.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        String featureName=node.getFirstChild().getNodeValue();
        features.add(new FeatureModel(featureName,featureVersion));
      }
      list=(NodeList)newXPath.evaluate(""String_Node_Str"",document,XPathConstants.NODESET);
      for (int index=0; index < list.getLength(); index++) {
        Node node=list.item(index);
        String hotLib=node.getParentNode().getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        hotLib=hotLib.replace(""String_Node_Str"",camelVersion);
        Collection<BundleModel> bundles=camelBundlesMap.get(hotLib);
        if (bundles == null) {
          bundles=new HashSet<BundleModel>();
          camelBundlesMap.put(hotLib,bundles);
        }
        String version=node.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        String groupId=node.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        String name=node.getFirstChild().getNodeValue();
        bundles.add(new BundleModel(groupId,name,version));
      }
    }
  finally {
      input.close();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9978795589482612
141741,"@Override public ImportPackage toTargetIgnorePredicates(){
  ImportPackage importPackage=new ImportPackage();
  importPackage.setBuiltIn(true);
  importPackage.setMaxVersion(maxVersion);
  importPackage.setMinVersion(minVersion);
  importPackage.setName(packageName);
  importPackage.setOptional(isOptional);
  return importPackage;
}","@Override public ImportPackage toTargetIgnorePredicates(){
  ImportPackage importPackage=new ImportPackage();
  importPackage.setBuiltIn(true);
  importPackage.setVersionRange(versionRange);
  importPackage.setName(packageName);
  importPackage.setOptional(isOptional);
  return importPackage;
}",0.8807631160572337
141742,"@Override public RequireBundle toTargetIgnorePredicates(){
  RequireBundle requireBundle=new RequireBundle();
  requireBundle.setBuiltIn(true);
  requireBundle.setMaxVersion(maxVersion);
  requireBundle.setMinVersion(minVersion);
  requireBundle.setName(bundleName);
  requireBundle.setOptional(isOptional);
  return requireBundle;
}","@Override public RequireBundle toTargetIgnorePredicates(){
  RequireBundle requireBundle=new RequireBundle();
  requireBundle.setBuiltIn(true);
  requireBundle.setVersionRange(versionRange);
  requireBundle.setName(bundleName);
  requireBundle.setOptional(isOptional);
  return requireBundle;
}",0.8803827751196173
141743,"private ExImportPackage createImportPackageFrom(IConfigurationElement p){
  String packageName=p.getAttribute(PACKAGE_NAME);
  String maxVersion=p.getAttribute(MAX_VERSION);
  String minVersion=p.getAttribute(MIN_VERSION);
  String optional=p.getAttribute(OPTIONAL);
  ExImportPackage importPackage=new ExImportPackage();
  importPackage.setPackageName(packageName);
  if (maxVersion != null && !""String_Node_Str"".equals(maxVersion)) {
    importPackage.setMaxVersion(maxVersion);
  }
  if (minVersion != null && !""String_Node_Str"".equals(minVersion)) {
    importPackage.setMinVersion(minVersion);
  }
  if (optional != null) {
    importPackage.setOptional(Boolean.getBoolean(optional));
  }
  IConfigurationElement[] predicates=p.getChildren(PREDICATE);
  if (predicates != null) {
    for (    IConfigurationElement pe : predicates) {
      String name=pe.getAttribute(ATTRIBUTE_NAME);
      String value=pe.getAttribute(ATTRIBUTE_VALUE);
      String isRegex=pe.getAttribute(REGEX);
      ExPredicate exPredicate=new ExPredicate();
      exPredicate.setAttributeName(name);
      exPredicate.setAttributeValue(value);
      if (""String_Node_Str"".equals(isRegex)) {
        exPredicate.setRegex(true);
      }
      importPackage.addPredicate(exPredicate);
    }
  }
  return importPackage;
}","private ExImportPackage createImportPackageFrom(IConfigurationElement p){
  String packageName=p.getAttribute(PACKAGE_NAME);
  String maxVersion=p.getAttribute(MAX_VERSION);
  String minVersion=p.getAttribute(MIN_VERSION);
  String optional=p.getAttribute(OPTIONAL);
  ExImportPackage importPackage=new ExImportPackage();
  importPackage.setPackageName(packageName);
  if (maxVersion != null && !""String_Node_Str"".equals(maxVersion)) {
  }
  if (minVersion != null && !""String_Node_Str"".equals(minVersion)) {
  }
  if (optional != null) {
    importPackage.setOptional(Boolean.getBoolean(optional));
  }
  IConfigurationElement[] predicates=p.getChildren(PREDICATE);
  if (predicates != null) {
    for (    IConfigurationElement pe : predicates) {
      String name=pe.getAttribute(ATTRIBUTE_NAME);
      String value=pe.getAttribute(ATTRIBUTE_VALUE);
      String isRegex=pe.getAttribute(REGEX);
      ExPredicate exPredicate=new ExPredicate();
      exPredicate.setAttributeName(name);
      exPredicate.setAttributeValue(value);
      if (""String_Node_Str"".equals(isRegex)) {
        exPredicate.setRegex(true);
      }
      importPackage.addPredicate(exPredicate);
    }
  }
  return importPackage;
}",0.9640287769784172
141744,"private ExRequireBundle createRequireBundleFrom(IConfigurationElement b){
  String bundleName=b.getAttribute(BUNDLE_NAME);
  String maxVersion=b.getAttribute(MAX_VERSION);
  String minVersion=b.getAttribute(MIN_VERSION);
  String optional=b.getAttribute(OPTIONAL);
  ExRequireBundle requireBundle=new ExRequireBundle();
  requireBundle.setBundleName(bundleName);
  if (maxVersion != null && !""String_Node_Str"".equals(maxVersion)) {
    requireBundle.setMaxVersion(maxVersion);
  }
  if (minVersion != null && !""String_Node_Str"".equals(minVersion)) {
    requireBundle.setMinVersion(minVersion);
  }
  if (optional != null) {
    requireBundle.setOptional(Boolean.getBoolean(optional));
  }
  IConfigurationElement[] predicates=b.getChildren(PREDICATE);
  if (predicates != null) {
    for (    IConfigurationElement pe : predicates) {
      String name=pe.getAttribute(ATTRIBUTE_NAME);
      String value=pe.getAttribute(ATTRIBUTE_VALUE);
      String isRegex=pe.getAttribute(REGEX);
      ExPredicate exPredicate=new ExPredicate();
      exPredicate.setAttributeName(name);
      exPredicate.setAttributeValue(value);
      if (""String_Node_Str"".equals(isRegex)) {
        exPredicate.setRegex(true);
      }
      requireBundle.addPredicate(exPredicate);
    }
  }
  return requireBundle;
}","private ExRequireBundle createRequireBundleFrom(IConfigurationElement b){
  String bundleName=b.getAttribute(BUNDLE_NAME);
  String maxVersion=b.getAttribute(MAX_VERSION);
  String minVersion=b.getAttribute(MIN_VERSION);
  String optional=b.getAttribute(OPTIONAL);
  ExRequireBundle requireBundle=new ExRequireBundle();
  requireBundle.setBundleName(bundleName);
  requireBundle.setVersionRange(VersionValidateUtil.tryToGetValidVersionRange(minVersion,maxVersion));
  if (optional != null) {
    requireBundle.setOptional(Boolean.getBoolean(optional));
  }
  IConfigurationElement[] predicates=b.getChildren(PREDICATE);
  if (predicates != null) {
    for (    IConfigurationElement pe : predicates) {
      String name=pe.getAttribute(ATTRIBUTE_NAME);
      String value=pe.getAttribute(ATTRIBUTE_VALUE);
      String isRegex=pe.getAttribute(REGEX);
      ExPredicate exPredicate=new ExPredicate();
      exPredicate.setAttributeName(name);
      exPredicate.setAttributeValue(value);
      if (""String_Node_Str"".equals(isRegex)) {
        exPredicate.setRegex(true);
      }
      requireBundle.addPredicate(exPredicate);
    }
  }
  return requireBundle;
}",0.8665850673194615
141745,"private List<String> getAllPaths() throws CoreException {
  List<String> paths=new ArrayList<String>();
  for (  String wsdlLocation : wsdlLocations) {
    Definition wsdlDefinition=WSDLUtils.getDefinition(wsdlLocation);
    wsdlDefinitions.add(wsdlDefinition);
    SchemaUtil schemaUtil=new SchemaUtil(wsdlDefinition);
    Map<QName,Binding> bindings=wsdlDefinition.getBindings();
    List<PortType> portTypes=new ArrayList<PortType>(bindings.size());
    List<String> alreadyCreated=new ArrayList<String>();
    for (    Binding binding : bindings.values()) {
      PortType portType=binding.getPortType();
      if (!portTypes.contains(portType)) {
        portTypes.add(portType);
        List<BindingOperation> operations=binding.getBindingOperations();
        for (        BindingOperation operation : operations) {
          Operation oper=operation.getOperation();
          Input inDef=oper.getInput();
          if (inDef != null) {
            Message inMsg=inDef.getMessage();
            if (inMsg != null) {
              ParameterInfo parameterFromMessage=schemaUtil.getParameterFromMessage(inMsg);
              if (alreadyCreated.contains(parameterFromMessage.getName())) {
                continue;
              }
 else {
                alreadyCreated.add(parameterFromMessage.getName());
              }
              String folderPath=null;
              try {
                folderPath=FolderNameUtil.getImportedXmlSchemaPath(parameterFromMessage.getNameSpace(),portType.getQName().getLocalPart(),oper.getName());
                IPath path=new Path(folderPath);
                if (!paths.contains(path.toString())) {
                  paths.add(path.toString());
                }
              }
 catch (              URISyntaxException e) {
                ExceptionHandler.process(e);
              }
            }
          }
          Output outDef=oper.getOutput();
          if (outDef != null) {
            Message outMsg=outDef.getMessage();
            if (outMsg != null) {
              ParameterInfo parameterFromMessage=schemaUtil.getParameterFromMessage(outMsg);
              if (alreadyCreated.contains(parameterFromMessage.getName())) {
                continue;
              }
 else {
                alreadyCreated.add(parameterFromMessage.getName());
              }
              String folderPath=null;
              try {
                folderPath=FolderNameUtil.getImportedXmlSchemaPath(parameterFromMessage.getNameSpace(),portType.getQName().getLocalPart(),oper.getName());
                IPath path=new Path(folderPath);
                if (!paths.contains(path.toString())) {
                  paths.add(path.toString());
                }
              }
 catch (              URISyntaxException e) {
                ExceptionHandler.process(e);
              }
            }
          }
          Collection<Fault> faults=oper.getFaults().values();
          for (          Fault fault : faults) {
            Message faultMsg=fault.getMessage();
            if (faultMsg != null) {
              ParameterInfo parameterFromMessage=schemaUtil.getParameterFromMessage(faultMsg);
              if (alreadyCreated.contains(parameterFromMessage.getName())) {
                continue;
              }
 else {
                alreadyCreated.add(parameterFromMessage.getName());
              }
              String folderPath=null;
              try {
                folderPath=FolderNameUtil.getImportedXmlSchemaPath(parameterFromMessage.getNameSpace(),portType.getQName().getLocalPart(),oper.getName());
                IPath path=new Path(folderPath);
                if (!paths.contains(path.toString())) {
                  paths.add(path.toString());
                }
              }
 catch (              URISyntaxException e) {
                ExceptionHandler.process(e);
              }
            }
          }
        }
      }
    }
  }
  return paths;
}","private List<String> getAllPaths() throws CoreException {
  List<String> paths=new ArrayList<String>();
  for (  String wsdlLocation : wsdlLocations) {
    Definition wsdlDefinition=WSDLUtils.getDefinition(wsdlLocation);
    SchemaUtil schemaUtil=new SchemaUtil(wsdlDefinition);
    Map<QName,Binding> bindings=wsdlDefinition.getBindings();
    List<PortType> portTypes=new ArrayList<PortType>(bindings.size());
    List<String> alreadyCreated=new ArrayList<String>();
    for (    Binding binding : bindings.values()) {
      PortType portType=binding.getPortType();
      if (!portTypes.contains(portType)) {
        portTypes.add(portType);
        List<BindingOperation> operations=binding.getBindingOperations();
        for (        BindingOperation operation : operations) {
          Operation oper=operation.getOperation();
          Input inDef=oper.getInput();
          if (inDef != null) {
            Message inMsg=inDef.getMessage();
            if (inMsg != null) {
              ParameterInfo parameterFromMessage=schemaUtil.getParameterFromMessage(inMsg);
              if (alreadyCreated.contains(parameterFromMessage.getName())) {
                continue;
              }
 else {
                alreadyCreated.add(parameterFromMessage.getName());
              }
              String folderPath=null;
              try {
                folderPath=FolderNameUtil.getImportedXmlSchemaPath(parameterFromMessage.getNameSpace(),portType.getQName().getLocalPart(),oper.getName());
                IPath path=new Path(folderPath);
                if (!paths.contains(path.toString())) {
                  paths.add(path.toString());
                }
              }
 catch (              URISyntaxException e) {
                ExceptionHandler.process(e);
              }
            }
          }
          Output outDef=oper.getOutput();
          if (outDef != null) {
            Message outMsg=outDef.getMessage();
            if (outMsg != null) {
              ParameterInfo parameterFromMessage=schemaUtil.getParameterFromMessage(outMsg);
              if (alreadyCreated.contains(parameterFromMessage.getName())) {
                continue;
              }
 else {
                alreadyCreated.add(parameterFromMessage.getName());
              }
              String folderPath=null;
              try {
                folderPath=FolderNameUtil.getImportedXmlSchemaPath(parameterFromMessage.getNameSpace(),portType.getQName().getLocalPart(),oper.getName());
                IPath path=new Path(folderPath);
                if (!paths.contains(path.toString())) {
                  paths.add(path.toString());
                }
              }
 catch (              URISyntaxException e) {
                ExceptionHandler.process(e);
              }
            }
          }
          Collection<Fault> faults=oper.getFaults().values();
          for (          Fault fault : faults) {
            Message faultMsg=fault.getMessage();
            if (faultMsg != null) {
              ParameterInfo parameterFromMessage=schemaUtil.getParameterFromMessage(faultMsg);
              if (alreadyCreated.contains(parameterFromMessage.getName())) {
                continue;
              }
 else {
                alreadyCreated.add(parameterFromMessage.getName());
              }
              String folderPath=null;
              try {
                folderPath=FolderNameUtil.getImportedXmlSchemaPath(parameterFromMessage.getNameSpace(),portType.getQName().getLocalPart(),oper.getName());
                IPath path=new Path(folderPath);
                if (!paths.contains(path.toString())) {
                  paths.add(path.toString());
                }
              }
 catch (              URISyntaxException e) {
                ExceptionHandler.process(e);
              }
            }
          }
        }
      }
    }
  }
  return paths;
}",0.9947509921905006
141746,"@Override protected void doRun(){
  List<IRepositoryViewObject> xmlObjs=initFileConnection();
  final Map<String,IRepositoryViewObject> selectTables=new HashMap<String,IRepositoryViewObject>();
  if (xmlObjs.size() > 0) {
    RewriteSchemaDialog selectContextDialog=new RewriteSchemaDialog(Display.getDefault().getActiveShell(),xmlObjs);
    if (selectContextDialog.open() == Window.OK) {
      selectTables.putAll(selectContextDialog.getSelectionTables());
    }
 else {
      return;
    }
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      importSchema(monitor,selectTables);
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    if (needProgressBar) {
      new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
    }
 else {
      PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
    }
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}","@Override protected void doRun(){
  List<IRepositoryViewObject> xmlObjs=initFileConnection();
  final Map<String,IRepositoryViewObject> selectTables=new HashMap<String,IRepositoryViewObject>();
  if (xmlObjs.size() > 0) {
    RewriteSchemaDialog selectContextDialog=new RewriteSchemaDialog(Display.getDefault().getActiveShell(),xmlObjs);
    if (selectContextDialog.open() == Window.OK) {
      selectTables.putAll(selectContextDialog.getSelectionTables());
    }
 else {
      return;
    }
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      importSchema(monitor,selectTables);
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}",0.9164941338854382
141747,"public IProcess getProcessFromItem(Item item,boolean loadScreenshots){
  if (CamelProcessItemImpl.class == item.getClass()) {
    RouteProcess process=null;
    process=new RouteProcess(item.getProperty());
    return process;
  }
  return null;
}","public IProcess getProcessFromItem(Item item,boolean loadScreenshots){
  if (CamelProcessItemImpl.class == item.getClass()) {
    RouteProcess process=null;
    process=new RouteProcess(item.getProperty());
    process.loadXmlFile(loadScreenshots);
    return process;
  }
  return null;
}",0.9216417910447762
141748,"public IProcess getProcessFromItem(Item item,boolean loadScreenshots){
  if (""String_Node_Str"".equals(item.eClass().getName())) {
    RouteProcess process=null;
    process=new RouteProcess(item.getProperty());
    return process;
  }
  return null;
}","public IProcess getProcessFromItem(Item item,boolean loadScreenshots){
  if (CamelProcessItemImpl.class == item.getClass()) {
    RouteProcess process=null;
    process=new RouteProcess(item.getProperty());
    return process;
  }
  return null;
}",0.8353413654618473
141749,"public IProcess getProcessFromItem(Item item,boolean loadScreenshots){
  if (CamelProcessItem.class.equals(item.getClass())) {
    RouteProcess process=null;
    process=new RouteProcess(item.getProperty());
    return process;
  }
  return null;
}","public IProcess getProcessFromItem(Item item,boolean loadScreenshots){
  if (""String_Node_Str"".equals(item.eClass().getName())) {
    RouteProcess process=null;
    process=new RouteProcess(item.getProperty());
    return process;
  }
  return null;
}",0.8256513026052105
141750,"public IProcess getProcessFromItem(Item item,boolean loadScreenshots){
  if (CamelProcessItemImpl.class == item.getClass()) {
    RouteProcess process=null;
    process=new RouteProcess(item.getProperty());
    return process;
  }
  return null;
}","public IProcess getProcessFromItem(Item item,boolean loadScreenshots){
  if (CamelProcessItemImpl.class == item.getClass()) {
    RouteProcess process=null;
    process=new RouteProcess(item.getProperty());
    process.loadXmlFile(loadScreenshots);
    return process;
  }
  return null;
}",0.9216417910447762
141751,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  List<RepositoryNode> nodes=selection.toList();
  if (nodes == null || nodes.size() != 1) {
    setEnabled(false);
    return;
  }
  RepositoryNode node=nodes.iterator().next();
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    setEnabled(false);
    return;
  }
  this.setText(createLabel);
  this.setImageDescriptor(ImageProvider.getImageDesc(ECoreImage.PROCESS_ICON));
  String jobId=getReferenceJobId(node);
  if (jobId == null) {
    setEnabled(false);
    return;
  }
  jobNode=RepositoryNodeUtilities.getRepositoryNode(jobId,false);
  final IStructuredSelection jobSelection=new StructuredSelection(jobNode);
  setSpecialSelection(new ISelectionProvider(){
    public void setSelection(    ISelection arg0){
    }
    public void removeSelectionChangedListener(    ISelectionChangedListener arg0){
    }
    public ISelection getSelection(){
      return jobSelection;
    }
    public void addSelectionChangedListener(    ISelectionChangedListener arg0){
    }
  }
);
  super.init(viewer,jobSelection);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  List<RepositoryNode> nodes=selection.toList();
  if (nodes == null || nodes.size() != 1) {
    setEnabled(false);
    return;
  }
  RepositoryNode node=nodes.iterator().next();
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    setEnabled(false);
    return;
  }
  this.setText(createLabel);
  this.setImageDescriptor(ImageProvider.getImageDesc(ECoreImage.PROCESS_ICON));
  String jobId=getReferenceJobId(node);
  if (jobId == null) {
    setEnabled(false);
    return;
  }
  jobNode=RepositoryNodeUtilities.getRepositoryNode(jobId,false);
  if (jobNode == null) {
    removeReferenecJobId(node);
    setEnabled(false);
    return;
  }
  final IStructuredSelection jobSelection=new StructuredSelection(jobNode);
  setSpecialSelection(new ISelectionProvider(){
    public void setSelection(    ISelection arg0){
    }
    public void removeSelectionChangedListener(    ISelectionChangedListener arg0){
    }
    public ISelection getSelection(){
      return jobSelection;
    }
    public void addSelectionChangedListener(    ISelectionChangedListener arg0){
    }
  }
);
  super.init(viewer,jobSelection);
}",0.9612277867528272
141752,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  List<RepositoryNode> nodes=selection.toList();
  if (nodes == null || nodes.size() != 1) {
    setEnabled(false);
    return;
  }
  RepositoryNode node=nodes.iterator().next();
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    setEnabled(false);
    return;
  }
  this.setText(createLabel);
  this.setImageDescriptor(ImageProvider.getImageDesc(ECoreImage.PROCESS_ICON));
  String jobId=getReferenceJobId(node);
  if (jobId == null) {
    setEnabled(false);
    return;
  }
  jobNode=RepositoryNodeUtilities.getRepositoryNode(jobId,false);
  final IStructuredSelection jobSelection=new StructuredSelection(jobNode);
  setSpecialSelection(new ISelectionProvider(){
    public void setSelection(    ISelection arg0){
    }
    public void removeSelectionChangedListener(    ISelectionChangedListener arg0){
    }
    public ISelection getSelection(){
      return jobSelection;
    }
    public void addSelectionChangedListener(    ISelectionChangedListener arg0){
    }
  }
);
  super.init(viewer,jobSelection);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  List<RepositoryNode> nodes=selection.toList();
  if (nodes == null || nodes.size() != 1) {
    setEnabled(false);
    return;
  }
  RepositoryNode node=nodes.iterator().next();
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    setEnabled(false);
    return;
  }
  this.setText(createLabel);
  this.setImageDescriptor(ImageProvider.getImageDesc(ECoreImage.PROCESS_ICON));
  String jobId=getReferenceJobId(node);
  if (jobId == null) {
    setEnabled(false);
    return;
  }
  jobNode=RepositoryNodeUtilities.getRepositoryNode(jobId,false);
  if (jobNode == null) {
    removeReferenecJobId(node);
    setEnabled(false);
    return;
  }
  final IStructuredSelection jobSelection=new StructuredSelection(jobNode);
  setSpecialSelection(new ISelectionProvider(){
    public void setSelection(    ISelection arg0){
    }
    public void removeSelectionChangedListener(    ISelectionChangedListener arg0){
    }
    public ISelection getSelection(){
      return jobSelection;
    }
    public void addSelectionChangedListener(    ISelectionChangedListener arg0){
    }
  }
);
  super.init(viewer,jobSelection);
}",0.9612277867528272
141753,"public Class getClassForDoubleClick(){
  try {
    RepositoryNode repositoryNode=super.getCurrentRepositoryNode();
    return (getReferenceJobId(repositoryNode) != null) ? ServiceOperation.class : Object.class;
  }
 catch (  Exception e) {
  }
  return ServiceOperation.class;
}","@Override public Class getClassForDoubleClick(){
  try {
    RepositoryNode repositoryNode=super.getCurrentRepositoryNode();
    return (getReferenceJobId(repositoryNode) != null) ? ServiceOperation.class : Object.class;
  }
 catch (  Exception e) {
  }
  return ServiceOperation.class;
}",0.9823321554770318
141754,"public String getTmpFolderPath(){
  Project project=ProjectManager.getInstance().getCurrentProject();
  String tmpFolderPath;
  try {
    IProject physProject=ResourceModelUtils.getProject(project);
    tmpFolderPath=physProject.getFolder(""String_Node_Str"").getLocation().toPortableString();
  }
 catch (  Exception e) {
    tmpFolderPath=System.getProperty(""String_Node_Str"");
  }
  tmpFolderPath=tmpFolderPath + ""String_Node_Str"";
  File tmpFolder=new File(tmpFolderPath);
  if (!tmpFolder.exists()) {
    tmpFolder.mkdirs();
  }
  return tmpFolderPath;
}","public String getTmpFolderPath(){
  if (tempFolder != null) {
    return tempFolder;
  }
  Project project=ProjectManager.getInstance().getCurrentProject();
  String tmpFolderPath;
  try {
    IProject physProject=ResourceModelUtils.getProject(project);
    tmpFolderPath=physProject.getFolder(""String_Node_Str"").getLocation().toPortableString();
  }
 catch (  Exception e) {
    tmpFolderPath=System.getProperty(""String_Node_Str"");
  }
  tmpFolderPath=tmpFolderPath + ""String_Node_Str"";
  File tmpFolder=new File(tmpFolderPath);
  if (!tmpFolder.exists()) {
    tmpFolder.mkdirs();
  }
  File tmpExportFolder=null;
  try {
    tmpExportFolder=File.createTempFile(""String_Node_Str"",null,tmpFolder);
    if (tmpExportFolder.exists() && tmpExportFolder.isFile()) {
      tmpExportFolder.delete();
      tmpExportFolder.mkdirs();
    }
  }
 catch (  IOException e) {
  }
 finally {
    if (tmpExportFolder != null) {
      tmpExportFolder.deleteOnExit();
    }
  }
  if (tmpExportFolder != null) {
    tmpFolder=tmpExportFolder;
  }
  return tmpFolder.getAbsolutePath();
}",0.6592865928659286
141755,"public static boolean generateKarFile(Set<ExportKarBundleModel> bundleModels,RepositoryNode routerNode,String version,String destination) throws IOException {
  Property routeProperty=routerNode.getObject().getProperty();
  String itemName=routeProperty.getDisplayName();
  String projectName=routerNode.getObject().getProjectLabel().toLowerCase();
  ZipOutputStream output=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(destination)));
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(projectName).append(""String_Node_Str"").append(itemName).append(""String_Node_Str"");
  String groupPrefix=sb.toString();
  String featurePrefix=sb.append(itemName).append(""String_Node_Str"").append(version).append(""String_Node_Str"").append(itemName).append(""String_Node_Str"").append(version).append(""String_Node_Str"").toString();
  String groupId=CamelFeatureUtil.getMavenGroupId(routeProperty.getItem());
  FeaturesModel featuresModel=new FeaturesModel(groupId,itemName,version);
  for (  ExportKarBundleModel p : bundleModels) {
    if (p == null || p.getBundleFilePath() == null) {
      continue;
    }
    File f=new File(p.getBundleFilePath());
    if (!f.exists()) {
      continue;
    }
    RepositoryNode repositoryNode=p.getRepositoryNode();
    String displayName=repositoryNode.getObject().getProperty().getDisplayName();
    if (repositoryNode.equals(routerNode)) {
      displayName+=""String_Node_Str"";
    }
    ZipEntry entry=new ZipEntry(groupPrefix + displayName + ""String_Node_Str""+ p.getRepositoryVersion()+ ""String_Node_Str""+ f.getName());
    entry.setSize(f.length());
    entry.setTime(f.lastModified());
    output.putNextEntry(entry);
    byte[] buf=new byte[1024];
    int readLen=0;
    InputStream is=new BufferedInputStream(new FileInputStream(f));
    while ((readLen=is.read(buf)) != -1) {
      output.write(buf,0,readLen);
    }
    is.close();
    BundleModel bundleModel=new BundleModel(f,groupId,displayName,p.getRepositoryVersion());
    featuresModel.setContexts(getContextsMap(repositoryNode));
    featuresModel.addSubBundle(bundleModel);
    CamelFeatureUtil.addFeatureAndBundles(routerNode,featuresModel);
  }
  byte[] featureContent=featuresModel.toString().getBytes();
  ZipEntry entry=new ZipEntry(featurePrefix);
  entry.setSize(featureContent.length);
  entry.setTime(System.currentTimeMillis());
  output.putNextEntry(entry);
  output.write(featureContent);
  output.flush();
  output.close();
  return true;
}","public static boolean generateKarFile(Set<ExportKarBundleModel> bundleModels,RepositoryNode routerNode,String version,String destination) throws IOException {
  Property routeProperty=routerNode.getObject().getProperty();
  String itemName=routeProperty.getDisplayName();
  String projectName=routerNode.getObject().getProjectLabel().toLowerCase();
  File destFile=new File(destination);
  File parentDestFile=destFile.getParentFile();
  if (!parentDestFile.exists()) {
    parentDestFile.mkdirs();
  }
  ZipOutputStream output=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(destFile)));
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(projectName).append(""String_Node_Str"").append(itemName).append(""String_Node_Str"");
  String groupPrefix=sb.toString();
  String featurePrefix=sb.append(itemName).append(""String_Node_Str"").append(version).append(""String_Node_Str"").append(itemName).append(""String_Node_Str"").append(version).append(""String_Node_Str"").toString();
  String groupId=CamelFeatureUtil.getMavenGroupId(routeProperty.getItem());
  FeaturesModel featuresModel=new FeaturesModel(groupId,itemName,version);
  for (  ExportKarBundleModel p : bundleModels) {
    if (p == null || p.getBundleFilePath() == null) {
      continue;
    }
    File f=new File(p.getBundleFilePath());
    if (!f.exists()) {
      continue;
    }
    RepositoryNode repositoryNode=p.getRepositoryNode();
    String displayName=repositoryNode.getObject().getProperty().getDisplayName();
    if (repositoryNode.equals(routerNode)) {
      displayName+=""String_Node_Str"";
    }
    ZipEntry entry=new ZipEntry(groupPrefix + displayName + ""String_Node_Str""+ p.getRepositoryVersion()+ ""String_Node_Str""+ f.getName());
    entry.setSize(f.length());
    entry.setTime(f.lastModified());
    output.putNextEntry(entry);
    byte[] buf=new byte[1024];
    int readLen=0;
    InputStream is=new BufferedInputStream(new FileInputStream(f));
    while ((readLen=is.read(buf)) != -1) {
      output.write(buf,0,readLen);
    }
    is.close();
    BundleModel bundleModel=new BundleModel(f,groupId,displayName,p.getRepositoryVersion());
    featuresModel.setContexts(getContextsMap(repositoryNode));
    featuresModel.addSubBundle(bundleModel);
    CamelFeatureUtil.addFeatureAndBundles(routerNode,featuresModel);
  }
  byte[] featureContent=featuresModel.toString().getBytes();
  ZipEntry entry=new ZipEntry(featurePrefix);
  entry.setSize(featureContent.length);
  entry.setTime(System.currentTimeMillis());
  output.putNextEntry(entry);
  output.write(featureContent);
  output.flush();
  output.close();
  return true;
}",0.967855055523086
141756,"/** 
 * Open an appropriate destination browser so that the user can specify a source to import from.
 */
@Override protected void handleDestinationBrowseButtonPressed(){
  FileDialog dialog=new FileDialog(getContainer().getShell(),SWT.SAVE);
  if (getCurrentExportType().equals(EXPORTTYPE_WSWAR)) {
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  }
 else   if (getCurrentExportType().equals(EXPORTTYPE_JBOSSESB)) {
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  }
 else   if (getCurrentExportType().equals(EXPORTTYPE_OSGI)) {
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  }
 else   if (getCurrentExportType().equals(EXPORTTYPE_KAR)) {
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  }
 else   if (getCurrentExportType().equals(EXPORTTYPE_PETALSESB)) {
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  }
 else {
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  }
  if (getCurrentExportType().equals(EXPORTTYPE_PETALSESB)) {
    IPath destPath=new Path(this.saDestinationFilePath);
    String fileName, directory;
    if (destPath.toFile().isDirectory()) {
      fileName=getPetalsDefaultSaName();
      directory=destPath.toOSString();
    }
 else {
      fileName=destPath.lastSegment();
      directory=destPath.removeLastSegments(1).toOSString();
    }
    dialog.setFileName(fileName);
    dialog.setFilterPath(directory);
  }
 else {
    dialog.setText(""String_Node_Str"");
    dialog.setFileName((String)this.getDefaultFileName().get(0));
    String currentSourceString=getDestinationValue();
    int lastSeparatorIndex=currentSourceString.lastIndexOf(File.separator);
    if (lastSeparatorIndex != -1) {
      dialog.setFilterPath(currentSourceString.substring(0,lastSeparatorIndex));
    }
  }
  String selectedFileName=dialog.open();
  if (selectedFileName == null) {
    return;
  }
  if (!selectedFileName.endsWith(this.getOutputSuffix())) {
    selectedFileName+=this.getOutputSuffix();
  }
  if (selectedFileName != null && !selectedFileName.endsWith(this.getSelectedJobVersion() + this.getOutputSuffix())) {
    String b=selectedFileName.substring(0,(selectedFileName.length() - 4));
    File file=new File(b);
    String str=file.getName();
    String s=(String)this.getDefaultFileName().get(0);
    if (str.equals(s)) {
      selectedFileName=b + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ this.getOutputSuffix();
    }
 else {
      selectedFileName=b + this.getOutputSuffix();
    }
  }
  if (selectedFileName != null) {
    setErrorMessage(null);
    this.saDestinationFilePath=selectedFileName;
    setDestinationValue(selectedFileName);
    if (getDialogSettings() != null) {
      IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
      if (section == null) {
        section=getDialogSettings().addNewSection(DESTINATION_FILE);
      }
      section.put(DESTINATION_FILE,selectedFileName);
    }
  }
}","/** 
 * Open an appropriate destination browser so that the user can specify a source to import from.
 */
@Override protected void handleDestinationBrowseButtonPressed(){
  FileDialog dialog=new FileDialog(getContainer().getShell(),SWT.SAVE);
  if (getCurrentExportType().equals(EXPORTTYPE_WSWAR)) {
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  }
 else   if (getCurrentExportType().equals(EXPORTTYPE_JBOSSESB)) {
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  }
 else   if (getCurrentExportType().equals(EXPORTTYPE_OSGI)) {
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  }
 else   if (getCurrentExportType().equals(EXPORTTYPE_KAR)) {
    if (isAddMavenScript()) {
      dialog.setFilterExtensions(new String[]{""String_Node_Str"" + FileConstants.ZIP_FILE_SUFFIX,""String_Node_Str""});
    }
 else {
      dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
    }
  }
 else   if (getCurrentExportType().equals(EXPORTTYPE_PETALSESB)) {
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  }
 else {
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  }
  if (getCurrentExportType().equals(EXPORTTYPE_PETALSESB)) {
    IPath destPath=new Path(this.saDestinationFilePath);
    String fileName, directory;
    if (destPath.toFile().isDirectory()) {
      fileName=getPetalsDefaultSaName();
      directory=destPath.toOSString();
    }
 else {
      fileName=destPath.lastSegment();
      directory=destPath.removeLastSegments(1).toOSString();
    }
    dialog.setFileName(fileName);
    dialog.setFilterPath(directory);
  }
 else {
    dialog.setText(""String_Node_Str"");
    dialog.setFileName((String)this.getDefaultFileName().get(0));
    String currentSourceString=getDestinationValue();
    int lastSeparatorIndex=currentSourceString.lastIndexOf(File.separator);
    if (lastSeparatorIndex != -1) {
      dialog.setFilterPath(currentSourceString.substring(0,lastSeparatorIndex));
    }
  }
  String selectedFileName=dialog.open();
  if (selectedFileName == null) {
    return;
  }
  String idealSuffix;
  if (isAddMavenScript()) {
    idealSuffix=FileConstants.ZIP_FILE_SUFFIX;
  }
 else {
    idealSuffix=getOutputSuffix();
  }
  if (!selectedFileName.endsWith(idealSuffix)) {
    selectedFileName+=idealSuffix;
  }
  if (selectedFileName != null && !selectedFileName.endsWith(this.getSelectedJobVersion() + idealSuffix)) {
    String b=selectedFileName.substring(0,(selectedFileName.length() - 4));
    File file=new File(b);
    String str=file.getName();
    String s=(String)this.getDefaultFileName().get(0);
    if (str.equals(s)) {
      selectedFileName=b + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ idealSuffix;
    }
 else {
      selectedFileName=b + idealSuffix;
    }
  }
  if (selectedFileName != null) {
    setErrorMessage(null);
    this.saDestinationFilePath=selectedFileName;
    setDestinationValue(selectedFileName);
    if (getDialogSettings() != null) {
      IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
      if (section == null) {
        section=getDialogSettings().addNewSection(DESTINATION_FILE);
      }
      section.put(DESTINATION_FILE,selectedFileName);
    }
  }
}",0.9343088418430884
141757,"@Override public void doSave(IProgressMonitor monitor){
  if (!isDirty()) {
    return;
  }
  updateRunJobContext();
  designerEditor.getProcess().getProperty().eAdapters().remove(dirtyListener);
  IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
  IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  display=getSite().getShell().getDisplay();
  repFactory.addRepositoryWorkUnitListener(repositoryWorkListener);
  if (getActivePage() == 0) {
    getEditor(0).doSave(monitor);
    Item item=getDesignerEditor().getProcess().getProperty().getItem();
    ProcessType processType=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      processType=camelService.getCamelProcessType(item);
    }
  }
  if (processEditorInput != null) {
    propertyInformation=new ArrayList(processEditorInput.getItem().getProperty().getInformations());
    propertyIsDirty=false;
    firePropertyChange(IEditorPart.PROP_DIRTY);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      if (camelService.isInstanceofCamelRoutes(processEditorInput.getItem())) {
        RepositoryManager.refresh(camelService.getRoutes());
      }
    }
  }
  if (designerEditor != null && dirtyListener != null)   designerEditor.getProcess().getProperty().eAdapters().add(dirtyListener);
  this.setName();
}","@Override public void doSave(IProgressMonitor monitor){
  if (!isDirty()) {
    return;
  }
  updateRunJobContext();
  designerEditor.getProcess().getProperty().eAdapters().remove(dirtyListener);
  IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
  IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  repFactory.addRepositoryWorkUnitListener(repositoryWorkListener);
  if (getActivePage() == 0) {
    getEditor(0).doSave(monitor);
    Item item=getDesignerEditor().getProcess().getProperty().getItem();
    ProcessType processType=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      processType=camelService.getCamelProcessType(item);
    }
  }
  if (processEditorInput != null) {
    propertyInformation=new ArrayList(processEditorInput.getItem().getProperty().getInformations());
    propertyIsDirty=false;
    firePropertyChange(IEditorPart.PROP_DIRTY);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      if (camelService.isInstanceofCamelRoutes(processEditorInput.getItem())) {
        RepositoryManager.refresh(camelService.getRoutes());
      }
    }
  }
  if (designerEditor != null && dirtyListener != null) {
    designerEditor.getProcess().getProperty().eAdapters().add(dirtyListener);
  }
  this.setName();
}",0.9844346549192364
141758,"public void updateTitleImage(){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      Image image=null;
      if (getProcess() == null) {
        return;
      }
      InformationLevel level=getProcess().getProperty().getMaxInformationLevel();
      if (level.equals(InformationLevel.ERROR_LITERAL)) {
        image=OverlayImageProvider.getImageWithError(ImageProvider.getImage(ECamelCoreImage.ROUTES_ICON)).createImage();
      }
 else {
        image=ImageProvider.getImage(ECamelCoreImage.ROUTES_ICON);
      }
      setTitleImage(image);
    }
  }
);
}","@Override public void updateTitleImage(){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      Image image=null;
      if (getProcess() == null) {
        return;
      }
      InformationLevel level=getProcess().getProperty().getMaxInformationLevel();
      if (level.equals(InformationLevel.ERROR_LITERAL)) {
        image=OverlayImageProvider.getImageWithError(ImageProvider.getImage(ECamelCoreImage.ROUTES_ICON)).createImage();
      }
 else {
        image=ImageProvider.getImage(ECamelCoreImage.ROUTES_ICON);
      }
      setTitleImage(image);
    }
  }
);
}",0.9914383561643836
141759,"/** 
 * Getter for designerEditor.
 * @return the designerEditor
 */
public AbstractTalendEditor getDesignerEditor(){
  return this.designerEditor;
}","/** 
 * Getter for designerEditor.
 * @return the designerEditor
 */
@Override public AbstractTalendEditor getDesignerEditor(){
  return this.designerEditor;
}",0.9675324675324676
141760,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  String destinationPath=serviceManager.getDestinationPath();
  if (!destinationPath.endsWith(FileConstants.KAR_FILE_SUFFIX)) {
    destinationPath=destinationPath.replace(""String_Node_Str"",PATH_SEPERATOR);
    if (destinationPath.indexOf(PATH_SEPERATOR) != -1) {
      String filePath=destinationPath.substring(0,destinationPath.lastIndexOf(PATH_SEPERATOR) + 1);
      String fileName=destinationPath.substring(destinationPath.lastIndexOf(PATH_SEPERATOR) + 1);
      if (fileName.indexOf(""String_Node_Str"") != -1) {
        fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
      }
      destinationPath=filePath + fileName + FileConstants.KAR_FILE_SUFFIX;
    }
  }
  try {
    String directoryName=serviceManager.getRootFolderName(tempFolder);
    Map<String,String> bundles=new HashMap<String,String>();
    for (    RepositoryNode node : nodes) {
      JobScriptsManager manager=serviceManager.getJobManager(exportChoiceMap,tempFolder,node,getGroupId(),getServiceVersion());
      JobExportAction job=new JobExportAction(Collections.singletonList(node),node.getObject().getVersion(),getBundleVersion(),manager,directoryName,""String_Node_Str"");
      job.run(monitor);
      bundles.put(serviceManager.getNodeLabel(node),tempFolder);
    }
    try {
      final String artefactName=getServiceName() + ""String_Node_Str"";
      bundles.put(artefactName,generateControlBundle(getGroupId(),artefactName));
      processFeature(generateFeature(bundles));
      processFinalResult(destinationPath);
    }
 catch (    Exception e) {
      throw new InvocationTargetException(e);
    }
  }
  finally {
    clean();
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  String destinationPath=serviceManager.getDestinationPath();
  if (!destinationPath.endsWith(FileConstants.KAR_FILE_SUFFIX)) {
    destinationPath=destinationPath.replace(""String_Node_Str"",PATH_SEPERATOR);
    if (destinationPath.indexOf(PATH_SEPERATOR) != -1) {
      String filePath=destinationPath.substring(0,destinationPath.lastIndexOf(PATH_SEPERATOR) + 1);
      String fileName=destinationPath.substring(destinationPath.lastIndexOf(PATH_SEPERATOR) + 1);
      if (fileName.indexOf(""String_Node_Str"") != -1) {
        fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
      }
      destinationPath=filePath + fileName + FileConstants.KAR_FILE_SUFFIX;
    }
  }
  try {
    String directoryName=serviceManager.getRootFolderName(tempFolder);
    Map<String,String> bundles=new HashMap<String,String>();
    for (    RepositoryNode node : nodes) {
      JobScriptsManager manager=serviceManager.getJobManager(exportChoiceMap,tempFolder,node,getGroupId(),getServiceVersion());
      JobExportAction job=new JobExportAction(Collections.singletonList(node),node.getObject().getVersion(),getBundleVersion(),manager,directoryName,""String_Node_Str"");
      job.run(monitor);
      bundles.put(serviceManager.getNodeLabel(node),manager.getDestinationPath());
    }
    try {
      final String artefactName=getServiceName() + ""String_Node_Str"";
      bundles.put(artefactName,generateControlBundle(getGroupId(),artefactName));
      processFeature(generateFeature(bundles));
      processFinalResult(destinationPath);
    }
 catch (    Exception e) {
      throw new InvocationTargetException(e);
    }
  }
  finally {
    clean();
  }
}",0.9891179839633448
141761,"private void addJobFilesToExport(IProgressMonitor monitor) throws Exception {
  String directoryName=serviceManager.getRootFolderName(tempFolder);
  exportChoiceMap.put(ExportChoice.needJobItem,false);
  for (  RepositoryNode node : nodes) {
    JobScriptsManager osgiManager=new OSGIJavaScriptForESBWithMavenManager(exportChoiceMap,""String_Node_Str"",""String_Node_Str"",IProcessor.NO_STATISTICS,IProcessor.NO_TRACES){
      @Override protected Map<String,String> getMainMavenProperties(      Item item){
        Map<String,String> mavenPropertiesMap=super.getMainMavenProperties(item);
        mavenPropertiesMap.put(EMavenBuildScriptProperties.ItemGroupName.getVarScript(),getGroupId());
        return mavenPropertiesMap;
      }
      @Override protected void setMavenBuildScriptProperties(      Document pomDocument,      Map<String,String> mavenPropertiesMap){
        super.setMavenBuildScriptProperties(pomDocument,mavenPropertiesMap);
        String itemName=mavenPropertiesMap.get(EMavenBuildScriptProperties.ItemName.getVarScript());
        if (itemName != null && pomDocument != null) {
          Element rootElement=pomDocument.getRootElement();
          Element artifactIdEle=rootElement.element(""String_Node_Str"");
          if (artifactIdEle != null) {
            artifactIdEle.setText(itemName);
          }
        }
      }
    }
;
    String artefactName=serviceManager.getNodeLabel(node);
    String version=node.getObject().getVersion();
    String destinationPath=tempFolder + PATH_SEPERATOR + artefactName+ osgiManager.getOutputSuffix();
    osgiManager.setDestinationPath(destinationPath);
    JobExportAction job=new JobExportAction(Collections.singletonList(node),version,osgiManager,directoryName);
    job.run(monitor);
    ZipToFile.unZipFile(destinationPath,tempFolder + PATH_SEPERATOR + ServiceExportWithMavenManager.OPERATIONS_PATH+ artefactName);
    FilesUtils.removeFile(new File(destinationPath));
  }
}","private void addJobFilesToExport(IProgressMonitor monitor) throws Exception {
  String directoryName=serviceManager.getRootFolderName(tempFolder);
  exportChoiceMap.put(ExportChoice.needJobItem,false);
  for (  RepositoryNode node : nodes) {
    JobScriptsManager osgiManager=new OSGIJavaScriptForESBWithMavenManager(exportChoiceMap,""String_Node_Str"",""String_Node_Str"",IProcessor.NO_STATISTICS,IProcessor.NO_TRACES){
      @Override protected Map<String,String> getMainMavenProperties(      Item item){
        Map<String,String> mavenPropertiesMap=super.getMainMavenProperties(item);
        mavenPropertiesMap.put(EMavenBuildScriptProperties.ItemGroupName.getVarScript(),getGroupId());
        return mavenPropertiesMap;
      }
      @Override protected void setMavenBuildScriptProperties(      Document pomDocument,      Map<String,String> mavenPropertiesMap){
        super.setMavenBuildScriptProperties(pomDocument,mavenPropertiesMap);
        String itemName=mavenPropertiesMap.get(EMavenBuildScriptProperties.ItemName.getVarScript());
        if (itemName != null && pomDocument != null) {
          Element rootElement=pomDocument.getRootElement();
          Element artifactIdEle=rootElement.element(""String_Node_Str"");
          if (artifactIdEle != null) {
            artifactIdEle.setText(itemName);
          }
        }
      }
    }
;
    String artefactName=serviceManager.getNodeLabel(node);
    String version=node.getObject().getVersion();
    File destFile=new File(tempFolder + PATH_SEPERATOR + artefactName+ osgiManager.getOutputSuffix());
    String destinationPath=destFile.getAbsolutePath();
    osgiManager.setDestinationPath(destinationPath);
    JobExportAction job=new JobExportAction(Collections.singletonList(node),version,osgiManager,directoryName);
    job.run(monitor);
    ZipToFile.unZipFile(destinationPath,tempFolder + PATH_SEPERATOR + ServiceExportWithMavenManager.OPERATIONS_PATH+ artefactName);
    FilesUtils.removeFile(destFile);
  }
}",0.9681203774547308
141762,"public void setReadOnly(boolean isReadOnly){
  if (isReadOnly) {
    ActionRegistry actionRegistry=getActionRegistry();
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(GEFActionConstants.DIRECT_EDIT));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
  }
}","public void setReadOnly(boolean isReadOnly){
  if (isReadOnly) {
    ActionRegistry actionRegistry=getActionRegistry();
    IAction ASDAddMessageAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddMessageAction != null) {
      actionRegistry.removeAction(ASDAddMessageAction);
    }
    IAction ASDAddPartAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddPartAction != null) {
      actionRegistry.removeAction(ASDAddPartAction);
    }
    IAction ASDSetNewMessageAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetNewMessageAction != null) {
      actionRegistry.removeAction(ASDSetNewMessageAction);
    }
    IAction ASDSetMessageInterfaceAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetMessageInterfaceAction != null) {
      actionRegistry.removeAction(ASDSetMessageInterfaceAction);
    }
    IAction ASDSetNewTypeAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetNewTypeAction != null) {
      actionRegistry.removeAction(ASDSetNewTypeAction);
    }
    IAction ASDSetExistingTypeAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetExistingTypeAction != null) {
      actionRegistry.removeAction(ASDSetExistingTypeAction);
    }
    IAction ASDSetNewElementAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetNewElementAction != null) {
      actionRegistry.removeAction(ASDSetNewElementAction);
    }
    IAction ASDSetExistingElementAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetExistingElementAction != null) {
      actionRegistry.removeAction(ASDSetExistingElementAction);
    }
    IAction directEditAction=actionRegistry.getAction(GEFActionConstants.DIRECT_EDIT);
    if (directEditAction != null) {
      actionRegistry.removeAction(directEditAction);
    }
    IAction ASDAddServiceAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddServiceAction != null) {
      actionRegistry.removeAction(ASDAddServiceAction);
    }
    IAction ASDAddBindingAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddBindingAction != null) {
      actionRegistry.removeAction(ASDAddBindingAction);
    }
    IAction ASDAddInterfaceAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddInterfaceAction != null) {
      actionRegistry.removeAction(ASDAddInterfaceAction);
    }
    IAction ASDAddEndPointAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddEndPointAction != null) {
      actionRegistry.removeAction(ASDAddEndPointAction);
    }
    IAction ASDAddOperationAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddOperationAction != null) {
      actionRegistry.removeAction(ASDAddOperationAction);
    }
    IAction ASDAddInputActionn=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddInputActionn != null) {
      actionRegistry.removeAction(ASDAddInputActionn);
    }
    IAction ASDAddOutputActionn=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddInputActionn != null) {
      actionRegistry.removeAction(ASDAddOutputActionn);
    }
    IAction ASDAddFaultActionn=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddFaultActionn != null) {
      actionRegistry.removeAction(ASDAddFaultActionn);
    }
    IAction ASDDeleteAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDDeleteAction != null) {
      actionRegistry.removeAction(ASDDeleteAction);
    }
    IAction ASDSetNewBindingAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetNewBindingAction != null) {
      actionRegistry.removeAction(ASDSetNewBindingAction);
    }
    IAction ASDSetExistingBindingAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetExistingBindingAction != null) {
      actionRegistry.removeAction(ASDSetExistingBindingAction);
    }
    IAction ASDSetNewInterfaceAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetNewInterfaceAction != null) {
      actionRegistry.removeAction(ASDSetNewInterfaceAction);
    }
    IAction ASDSetExistingInterfaceAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetExistingInterfaceAction != null) {
      actionRegistry.removeAction(ASDSetExistingInterfaceAction);
    }
    IAction ASDGenerateBindingActionn=actionRegistry.getAction(""String_Node_Str"");
    if (ASDGenerateBindingActionn != null) {
      actionRegistry.removeAction(ASDGenerateBindingActionn);
    }
    IAction ASDAddImportAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddImportAction != null) {
      actionRegistry.removeAction(ASDAddImportAction);
    }
    IAction ASDAddParameterAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddParameterAction != null) {
      actionRegistry.removeAction(ASDAddParameterAction);
    }
    IAction ASDAddSchemaAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddSchemaAction != null) {
      actionRegistry.removeAction(ASDAddSchemaAction);
    }
    IAction ASDOpenSchemaAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDOpenSchemaAction != null) {
      actionRegistry.removeAction(ASDOpenSchemaAction);
    }
    IAction ASDOpenImportAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDOpenImportAction != null) {
      actionRegistry.removeAction(ASDOpenImportAction);
    }
    IAction OpenInNewEditorAction=actionRegistry.getAction(""String_Node_Str"");
    if (OpenInNewEditorAction != null) {
      actionRegistry.removeAction(OpenInNewEditorAction);
    }
  }
}",0.4158189216683621
141763,"public void setReadOnly(boolean isReadOnly){
  if (isReadOnly) {
    ActionRegistry actionRegistry=getActionRegistry();
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(GEFActionConstants.DIRECT_EDIT));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
    actionRegistry.removeAction(actionRegistry.getAction(""String_Node_Str""));
  }
}","public void setReadOnly(boolean isReadOnly){
  if (isReadOnly) {
    ActionRegistry actionRegistry=getActionRegistry();
    IAction ASDAddMessageAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddMessageAction != null) {
      actionRegistry.removeAction(ASDAddMessageAction);
    }
    IAction ASDAddPartAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddPartAction != null) {
      actionRegistry.removeAction(ASDAddPartAction);
    }
    IAction ASDSetNewMessageAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetNewMessageAction != null) {
      actionRegistry.removeAction(ASDSetNewMessageAction);
    }
    IAction ASDSetMessageInterfaceAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetMessageInterfaceAction != null) {
      actionRegistry.removeAction(ASDSetMessageInterfaceAction);
    }
    IAction ASDSetNewTypeAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetNewTypeAction != null) {
      actionRegistry.removeAction(ASDSetNewTypeAction);
    }
    IAction ASDSetExistingTypeAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetExistingTypeAction != null) {
      actionRegistry.removeAction(ASDSetExistingTypeAction);
    }
    IAction ASDSetNewElementAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetNewElementAction != null) {
      actionRegistry.removeAction(ASDSetNewElementAction);
    }
    IAction ASDSetExistingElementAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetExistingElementAction != null) {
      actionRegistry.removeAction(ASDSetExistingElementAction);
    }
    IAction directEditAction=actionRegistry.getAction(GEFActionConstants.DIRECT_EDIT);
    if (directEditAction != null) {
      actionRegistry.removeAction(directEditAction);
    }
    IAction ASDAddServiceAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddServiceAction != null) {
      actionRegistry.removeAction(ASDAddServiceAction);
    }
    IAction ASDAddBindingAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddBindingAction != null) {
      actionRegistry.removeAction(ASDAddBindingAction);
    }
    IAction ASDAddInterfaceAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddInterfaceAction != null) {
      actionRegistry.removeAction(ASDAddInterfaceAction);
    }
    IAction ASDAddEndPointAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddEndPointAction != null) {
      actionRegistry.removeAction(ASDAddEndPointAction);
    }
    IAction ASDAddOperationAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddOperationAction != null) {
      actionRegistry.removeAction(ASDAddOperationAction);
    }
    IAction ASDAddInputActionn=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddInputActionn != null) {
      actionRegistry.removeAction(ASDAddInputActionn);
    }
    IAction ASDAddOutputActionn=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddInputActionn != null) {
      actionRegistry.removeAction(ASDAddOutputActionn);
    }
    IAction ASDAddFaultActionn=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddFaultActionn != null) {
      actionRegistry.removeAction(ASDAddFaultActionn);
    }
    IAction ASDDeleteAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDDeleteAction != null) {
      actionRegistry.removeAction(ASDDeleteAction);
    }
    IAction ASDSetNewBindingAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetNewBindingAction != null) {
      actionRegistry.removeAction(ASDSetNewBindingAction);
    }
    IAction ASDSetExistingBindingAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetExistingBindingAction != null) {
      actionRegistry.removeAction(ASDSetExistingBindingAction);
    }
    IAction ASDSetNewInterfaceAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetNewInterfaceAction != null) {
      actionRegistry.removeAction(ASDSetNewInterfaceAction);
    }
    IAction ASDSetExistingInterfaceAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDSetExistingInterfaceAction != null) {
      actionRegistry.removeAction(ASDSetExistingInterfaceAction);
    }
    IAction ASDGenerateBindingActionn=actionRegistry.getAction(""String_Node_Str"");
    if (ASDGenerateBindingActionn != null) {
      actionRegistry.removeAction(ASDGenerateBindingActionn);
    }
    IAction ASDAddImportAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddImportAction != null) {
      actionRegistry.removeAction(ASDAddImportAction);
    }
    IAction ASDAddParameterAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddParameterAction != null) {
      actionRegistry.removeAction(ASDAddParameterAction);
    }
    IAction ASDAddSchemaAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDAddSchemaAction != null) {
      actionRegistry.removeAction(ASDAddSchemaAction);
    }
    IAction ASDOpenSchemaAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDOpenSchemaAction != null) {
      actionRegistry.removeAction(ASDOpenSchemaAction);
    }
    IAction ASDOpenImportAction=actionRegistry.getAction(""String_Node_Str"");
    if (ASDOpenImportAction != null) {
      actionRegistry.removeAction(ASDOpenImportAction);
    }
    IAction OpenInNewEditorAction=actionRegistry.getAction(""String_Node_Str"");
    if (OpenInNewEditorAction != null) {
      actionRegistry.removeAction(OpenInNewEditorAction);
    }
  }
}",0.4158189216683621
141764,"@Override protected void addMavenBuildScripts(List<URL> scriptsUrls,Map<String,String> mavenPropertiesMap){
  IExportRouteResourcesService resourcesService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IExportRouteResourcesService.class)) {
    resourcesService=(IExportRouteResourcesService)GlobalServiceRegister.getDefault().getService(IExportRouteResourcesService.class);
  }
  if (resourcesService == null) {
    return;
  }
  File mavenBuildFile=new File(getTmpFolder() + PATH_SEPARATOR + IExportJobConstants.MAVEN_BUILD_FILE_NAME);
  File mavenBuildBundleFile=new File(getTmpFolder() + PATH_SEPARATOR + IExportJobConstants.MAVEN_KARAF_BUILD_BUNDLE_FILE_NAME);
  File mavenBuildFeatureFile=new File(getTmpFolder() + PATH_SEPARATOR + IExportJobConstants.MAVEN_KARAF_BUILD_FEATURE_FILE_NAME);
  File mavenBuildParentFile=new File(getTmpFolder() + PATH_SEPARATOR + IExportJobConstants.MAVEN_KARAF_BUILD_PARENT_FILE_NAME);
  try {
    String mavenScript=resourcesService.getScriptFromPreferenceStore(IExportRoutePrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildFile,mavenPropertiesMap,false);
      scriptsUrls.add(mavenBuildFile.toURL());
    }
    mavenScript=resourcesService.getScriptFromPreferenceStore(IExportRoutePrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE_BUNDLE);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildBundleFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildBundleFile,mavenPropertiesMap,true);
      scriptsUrls.add(mavenBuildBundleFile.toURL());
    }
    mavenScript=resourcesService.getScriptFromPreferenceStore(IExportRoutePrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE_FEATURE);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildFeatureFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildFeatureFile,mavenPropertiesMap,false);
      scriptsUrls.add(mavenBuildFeatureFile.toURL());
    }
    mavenScript=resourcesService.getScriptFromPreferenceStore(IExportRoutePrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE_PARENT);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildParentFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildParentFile,mavenPropertiesMap,false);
      scriptsUrls.add(mavenBuildParentFile.toURL());
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override protected void addMavenBuildScripts(List<URL> scriptsUrls,Map<String,String> mavenPropertiesMap){
  IExportRouteResourcesService resourcesService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IExportRouteResourcesService.class)) {
    resourcesService=(IExportRouteResourcesService)GlobalServiceRegister.getDefault().getService(IExportRouteResourcesService.class);
  }
  if (resourcesService == null) {
    return;
  }
  File mavenBuildFile=new File(getTmpFolder() + PATH_SEPARATOR + IExportJobConstants.MAVEN_BUILD_FILE_NAME);
  File mavenBuildBundleFile=new File(getTmpFolder() + PATH_SEPARATOR + IExportJobConstants.MAVEN_KARAF_BUILD_BUNDLE_FILE_NAME);
  File mavenBuildFeatureFile=new File(getTmpFolder() + PATH_SEPARATOR + IExportJobConstants.MAVEN_KARAF_BUILD_FEATURE_FILE_NAME);
  File mavenBuildParentFile=new File(getTmpFolder() + PATH_SEPARATOR + IExportJobConstants.MAVEN_KARAF_BUILD_PARENT_FILE_NAME);
  try {
    String mavenScript=resourcesService.getScriptFromPreferenceStore(IExportRoutePrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildFile,mavenPropertiesMap,false,true);
      scriptsUrls.add(mavenBuildFile.toURL());
    }
    mavenScript=resourcesService.getScriptFromPreferenceStore(IExportRoutePrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE_BUNDLE);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildBundleFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildBundleFile,mavenPropertiesMap,true,false);
      scriptsUrls.add(mavenBuildBundleFile.toURL());
    }
    mavenScript=resourcesService.getScriptFromPreferenceStore(IExportRoutePrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE_FEATURE);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildFeatureFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildFeatureFile,mavenPropertiesMap);
      scriptsUrls.add(mavenBuildFeatureFile.toURL());
    }
    mavenScript=resourcesService.getScriptFromPreferenceStore(IExportRoutePrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE_PARENT);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildParentFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildParentFile,mavenPropertiesMap);
      scriptsUrls.add(mavenBuildParentFile.toURL());
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9953787422141852
141765,"/** 
 * DOC ycbai ExportServiceWithMavenAction constructor comment.
 * @param exportChoiceMap
 * @param node
 * @param targetPath
 * @throws InvocationTargetException
 */
public ExportServiceWithMavenAction(ServiceExportWithMavenManager manager,Map<ExportChoice,Object> exportChoiceMap,RepositoryNode node,String targetPath) throws InvocationTargetException {
  super(exportChoiceMap,node,targetPath);
  this.manager=manager;
}","/** 
 * DOC ycbai ExportServiceWithMavenAction constructor comment.
 * @param exportChoiceMap
 * @param node
 * @param targetPath
 * @throws InvocationTargetException
 */
public ExportServiceWithMavenAction(ServiceExportWithMavenManager manager,Map<ExportChoice,Object> exportChoiceMap,RepositoryNode node,String targetPath) throws InvocationTargetException {
  super(exportChoiceMap,node,targetPath);
  this.manager=manager;
  this.manager.setMavenGroupId(this.getGroupId());
}",0.943646408839779
141766,"private void addJobFilesToExport(IProgressMonitor monitor) throws Exception {
  String directoryName=serviceManager.getRootFolderName(tempFolder);
  exportChoiceMap.put(ExportChoice.needJobItem,false);
  for (  RepositoryNode node : nodes) {
    JobScriptsManager manager=new OSGIJavaScriptForESBWithMavenManager(exportChoiceMap,""String_Node_Str"",""String_Node_Str"",IProcessor.NO_STATISTICS,IProcessor.NO_TRACES);
    String artefactName=serviceManager.getNodeLabel(node);
    String version=node.getObject().getVersion();
    String destinationPath=tempFolder + PATH_SEPERATOR + artefactName+ manager.getOutputSuffix();
    manager.setDestinationPath(destinationPath);
    JobExportAction job=new JobExportAction(Collections.singletonList(node),version,manager,directoryName);
    job.run(monitor);
    ZipToFile.unZipFile(destinationPath,tempFolder + PATH_SEPERATOR + ServiceExportWithMavenManager.OPERATIONS_PATH+ artefactName);
    FilesUtils.removeFile(new File(destinationPath));
  }
}","private void addJobFilesToExport(IProgressMonitor monitor) throws Exception {
  String directoryName=serviceManager.getRootFolderName(tempFolder);
  exportChoiceMap.put(ExportChoice.needJobItem,false);
  for (  RepositoryNode node : nodes) {
    JobScriptsManager osgiManager=new OSGIJavaScriptForESBWithMavenManager(exportChoiceMap,""String_Node_Str"",""String_Node_Str"",IProcessor.NO_STATISTICS,IProcessor.NO_TRACES){
      @Override protected Map<String,String> getMainMavenProperties(      Item item){
        Map<String,String> mavenPropertiesMap=super.getMainMavenProperties(item);
        mavenPropertiesMap.put(EMavenBuildScriptProperties.ItemGroupName.getVarScript(),getGroupId());
        return mavenPropertiesMap;
      }
      @Override protected void setMavenBuildScriptProperties(      Document pomDocument,      Map<String,String> mavenPropertiesMap){
        super.setMavenBuildScriptProperties(pomDocument,mavenPropertiesMap);
        String itemName=mavenPropertiesMap.get(EMavenBuildScriptProperties.ItemName.getVarScript());
        if (itemName != null && pomDocument != null) {
          Element rootElement=pomDocument.getRootElement();
          Element artifactIdEle=rootElement.element(""String_Node_Str"");
          if (artifactIdEle != null) {
            artifactIdEle.setText(itemName);
          }
        }
      }
    }
;
    String artefactName=serviceManager.getNodeLabel(node);
    String version=node.getObject().getVersion();
    String destinationPath=tempFolder + PATH_SEPERATOR + artefactName+ osgiManager.getOutputSuffix();
    osgiManager.setDestinationPath(destinationPath);
    JobExportAction job=new JobExportAction(Collections.singletonList(node),version,osgiManager,directoryName);
    job.run(monitor);
    ZipToFile.unZipFile(destinationPath,tempFolder + PATH_SEPERATOR + ServiceExportWithMavenManager.OPERATIONS_PATH+ artefactName);
    FilesUtils.removeFile(new File(destinationPath));
  }
}",0.6728079153872398
141767,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  super.run(monitor);
  try {
    addServiceFilesToExport();
    addJobFilesToExport(monitor);
    addMavenFilesToExport(monitor);
    super.processFinalResult(serviceManager.getDestinationPath());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    super.clean();
  }
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  super.run(monitor);
  try {
    addServiceFilesToExport();
    addJobFilesToExport(monitor);
    addMavenFilesToExport(monitor);
    super.processFinalResult(serviceManager.getDestinationPath());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    super.clean();
  }
}",0.9875930521091812
141768,"public void createControl(Composite parent){
  setControl(parent);
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  container.setLayout(new GridLayout(1,false));
  Group destinationGroup=new Group(container,SWT.NONE);
  destinationGroup.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
  destinationGroup.setText(""String_Node_Str"");
  destinationGroup.setLayout(new GridLayout(2,false));
  destinationText=new Text(destinationGroup,SWT.SINGLE | SWT.BORDER);
  destinationText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  destinationText.setText(getDestinationValue());
  destinationText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      destinationValue=destinationText.getText();
      checkDestination(destinationValue);
    }
  }
);
  Button browseButton=new Button(destinationGroup,SWT.PUSH);
  browseButton.setText(""String_Node_Str"");
  browseButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      handleDestinationBrowseButtonPressed();
      destinationText.setText(destinationValue);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      ;
    }
  }
);
  Group optionsGroup=new Group(container,SWT.NONE);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  optionsGroup.setLayoutData(layoutData);
  GridLayout layout=new GridLayout();
  optionsGroup.setLayout(layout);
  optionsGroup.setText(IDEWorkbenchMessages.WizardExportPage_options);
  optionsGroup.setFont(parent.getFont());
  Font font=optionsGroup.getFont();
  optionsGroup.setLayout(new GridLayout(2,false));
  final Button addBSButton=new Button(optionsGroup,SWT.CHECK | SWT.LEFT);
  addBSButton.setText(""String_Node_Str"");
  addBSButton.setFont(font);
  addBSButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean show=addBSButton.getSelection();
      String destinationValue=getDestinationValue();
      if (destinationValue.endsWith(getOutputSuffix())) {
        if (show) {
          destinationValue=destinationValue.substring(0,destinationValue.indexOf(getOutputSuffix())) + OUTPUT_FILE_SUFFIX;
        }
      }
 else       if (destinationValue.endsWith(OUTPUT_FILE_SUFFIX)) {
        if (!show) {
          destinationValue=destinationValue.substring(0,destinationValue.indexOf(OUTPUT_FILE_SUFFIX)) + getOutputSuffix();
        }
      }
      setDestinationValue(destinationValue);
    }
  }
);
}","public void createControl(Composite parent){
  setControl(parent);
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  container.setLayout(new GridLayout(1,false));
  Group destinationGroup=new Group(container,SWT.NONE);
  destinationGroup.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
  destinationGroup.setText(""String_Node_Str"");
  destinationGroup.setLayout(new GridLayout(2,false));
  destinationText=new Text(destinationGroup,SWT.SINGLE | SWT.BORDER);
  destinationText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  destinationText.setText(getDestinationValue());
  destinationText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      destinationValue=destinationText.getText();
      checkDestination(destinationValue);
    }
  }
);
  Button browseButton=new Button(destinationGroup,SWT.PUSH);
  browseButton.setText(""String_Node_Str"");
  browseButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      handleDestinationBrowseButtonPressed();
      destinationText.setText(destinationValue);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      ;
    }
  }
);
  Group optionsGroup=new Group(container,SWT.NONE);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  optionsGroup.setLayoutData(layoutData);
  GridLayout layout=new GridLayout();
  optionsGroup.setLayout(layout);
  optionsGroup.setText(IDEWorkbenchMessages.WizardExportPage_options);
  optionsGroup.setFont(parent.getFont());
  createBSGroup(optionsGroup);
}",0.7697707065980346
141769,"protected void exportKarOsgiBundles() throws InvocationTargetException, InterruptedException {
  String displayName=routeNode.getObject().getProperty().getDisplayName();
  String routerBundlePath=getTempDir() + displayName + ""String_Node_Str""+ version+ ""String_Node_Str"";
  if (processRoute(routerBundlePath,routeNode,version)) {
    exportOsgiBundle(routeNode,routerBundlePath,version,bundleVersion,""String_Node_Str"");
    exportAllReferenceJobs(routeNode);
  }
}","protected void exportKarOsgiBundles() throws InvocationTargetException, InterruptedException {
  String routerBundlePath=getTempDir() + getNodeBundleName(routeNode,version) + JAR_SUFFIX;
  if (processRoute(routerBundlePath,routeNode,version)) {
    exportOsgiBundle(routeNode,routerBundlePath,version,bundleVersion,""String_Node_Str"");
    exportAllReferenceJobs(routeNode);
  }
}",0.4128113879003559
141770,"public JavaCamelJobScriptsExportWithMavenAction(Map<ExportChoice,Object> exportChoiceMap,RepositoryNode routeNode,String version,String destinationPath,boolean addStatisticsCode){
  super(routeNode,version,destinationPath,addStatisticsCode);
  this.destinationPath=destinationPath;
  if (!destinationKar.endsWith(DEFAULT_SUFFIX)) {
    destinationKar=destinationKar.substring(0,destinationKar.lastIndexOf(""String_Node_Str""));
    destinationKar=destinationKar + DEFAULT_SUFFIX;
  }
  scriptsManager=new KarafJavaScriptForESBWithMavenManager(exportChoiceMap,destinationKar,null,null,IProcessor.NO_STATISTICS,IProcessor.NO_TRACES);
}","public JavaCamelJobScriptsExportWithMavenAction(Map<ExportChoice,Object> exportChoiceMap,RepositoryNode routeNode,String version,String destinationPath,boolean addStatisticsCode){
  super(routeNode,version,destinationPath,addStatisticsCode);
  this.destinationPath=destinationPath;
  if (!destinationKar.endsWith(KAR_SUFFIX)) {
    destinationKar=getTempDir() + File.separatorChar + getNodeBundleName(routeNode,version)+ KAR_SUFFIX;
  }
  scriptsManager=new KarafJavaScriptForESBWithMavenManager(exportChoiceMap,destinationKar,null,null,IProcessor.NO_STATISTICS,IProcessor.NO_TRACES);
}",0.8364831552999178
141771,"@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  this.monitor=monitor;
  try {
    exportKarOsgiBundles();
    processResults();
    exportMavenResources();
  }
  finally {
    FilesUtils.removeFolder(getTempDir(),true);
    FilesUtils.removeFile(new File(destinationKar));
  }
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  this.monitor=monitor;
  try {
    exportKarOsgiBundles();
    processResults();
    exportMavenResources();
  }
  finally {
    FilesUtils.removeFolder(getTempDir(),true);
  }
}",0.9157392686804452
141772,"private void addMavenBuildScripts(List<URL> scriptsUrls,ProcessItem processItem,String selectedJobVersion,String privatePackage,String exportService){
  IResourceService resourceService=(IResourceService)GlobalServiceRegister.getDefault().getService(IResourceService.class);
  if (resourceService == null) {
    return;
  }
  String projectName=getCorrespondingProjectName(processItem);
  String jobName=processItem.getProperty().getLabel();
  String jobVersion=processItem.getProperty().getVersion();
  final Map<String,String> mavenPropertiesMap=new HashMap<String,String>();
  mavenPropertiesMap.put(EMavenBuildScriptProperties.ItemProjectName.getVarScript(),projectName);
  mavenPropertiesMap.put(EMavenBuildScriptProperties.ItemName.getVarScript(),jobName);
  mavenPropertiesMap.put(EMavenBuildScriptProperties.ItemVersion.getVarScript(),jobVersion);
  mavenPropertiesMap.put(EMavenBuildScriptProperties.BundleConfigPrivatePackage.getVarScript(),privatePackage);
  mavenPropertiesMap.put(EMavenBuildScriptProperties.BundleConfigExportService.getVarScript(),exportService);
  Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(processItem.getProperty().getId(),selectedJobVersion);
  File mavenBuildFile=new File(getTmpFolder() + PATH_SEPARATOR + ExportJobConstants.MAVEN_BUILD_FILE_NAME);
  File mavenBuildBundleFile=new File(getTmpFolder() + PATH_SEPARATOR + ExportJobConstants.MAVEN_KARAF_BUILD_BUNDLE_FILE_NAME);
  File mavenBuildFeatureFile=new File(getTmpFolder() + PATH_SEPARATOR + ExportJobConstants.MAVEN_KARAF_BUILD_FEATURE_FILE_NAME);
  File mavenBuildParentFile=new File(getTmpFolder() + PATH_SEPARATOR + ExportJobConstants.MAVEN_KARAF_BUILD_PARENT_FILE_NAME);
  try {
    IPreferenceStore mavenPreferenceStore=CamelDesignerPlugin.getDefault().getPreferenceStore();
    String mavenScript=mavenPreferenceStore.getString(ICamelPrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildFile,mavenPropertiesMap);
      scriptsUrls.add(mavenBuildFile.toURL());
    }
    mavenScript=mavenPreferenceStore.getString(ICamelPrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE_BUNDLE);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildBundleFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildBundleFile,mavenPropertiesMap,neededModules,MAVEN_PROP_LIB_PATH);
      scriptsUrls.add(mavenBuildBundleFile.toURL());
    }
    mavenScript=mavenPreferenceStore.getString(ICamelPrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE_FEATURE);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildFeatureFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildFeatureFile,mavenPropertiesMap);
      scriptsUrls.add(mavenBuildFeatureFile.toURL());
    }
    mavenScript=mavenPreferenceStore.getString(ICamelPrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE_PARENT);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildParentFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildParentFile,mavenPropertiesMap);
      scriptsUrls.add(mavenBuildParentFile.toURL());
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override protected void addMavenBuildScripts(List<URL> scriptsUrls,ProcessItem processItem,String selectedJobVersion,Map<String,String> mavenPropertiesMap){
  IResourceService resourceService=(IResourceService)GlobalServiceRegister.getDefault().getService(IResourceService.class);
  if (resourceService == null) {
    return;
  }
  Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(processItem.getProperty().getId(),selectedJobVersion);
  File mavenBuildFile=new File(getTmpFolder() + PATH_SEPARATOR + ExportJobConstants.MAVEN_BUILD_FILE_NAME);
  File mavenBuildBundleFile=new File(getTmpFolder() + PATH_SEPARATOR + ExportJobConstants.MAVEN_KARAF_BUILD_BUNDLE_FILE_NAME);
  File mavenBuildFeatureFile=new File(getTmpFolder() + PATH_SEPARATOR + ExportJobConstants.MAVEN_KARAF_BUILD_FEATURE_FILE_NAME);
  File mavenBuildParentFile=new File(getTmpFolder() + PATH_SEPARATOR + ExportJobConstants.MAVEN_KARAF_BUILD_PARENT_FILE_NAME);
  try {
    IPreferenceStore mavenPreferenceStore=CamelDesignerPlugin.getDefault().getPreferenceStore();
    String mavenScript=mavenPreferenceStore.getString(ICamelPrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildFile,mavenPropertiesMap);
      scriptsUrls.add(mavenBuildFile.toURL());
    }
    mavenScript=mavenPreferenceStore.getString(ICamelPrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE_BUNDLE);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildBundleFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildBundleFile,mavenPropertiesMap,neededModules,MAVEN_PROP_LIB_PATH);
      scriptsUrls.add(mavenBuildBundleFile.toURL());
    }
    mavenScript=mavenPreferenceStore.getString(ICamelPrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE_FEATURE);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildFeatureFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildFeatureFile,mavenPropertiesMap);
      scriptsUrls.add(mavenBuildFeatureFile.toURL());
    }
    mavenScript=mavenPreferenceStore.getString(ICamelPrefConstants.MAVEN_KARAF_SCRIPT_TEMPLATE_PARENT);
    if (mavenScript != null) {
      createMavenBuildFileFromTemplate(mavenBuildParentFile,mavenScript);
      updateMavenBuildFileContent(mavenBuildParentFile,mavenPropertiesMap);
      scriptsUrls.add(mavenBuildParentFile.toURL());
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.8552338530066815
141773,"@Override public List<ExportFileResource> getExportResources(ExportFileResource[] processes,String... codeOptions) throws ProcessorException {
  List<ExportFileResource> list=super.getExportResources(processes,codeOptions);
  String privatePackage=""String_Node_Str"", exportService=""String_Node_Str"";
  Iterator<ExportFileResource> it=list.iterator();
  while (it.hasNext()) {
    ExportFileResource resource=it.next();
    if (""String_Node_Str"".equals(resource.getDirectoryName())) {
      Map<String,Set<URL>> newResourcesMap=new HashMap<String,Set<URL>>();
      for (      String path : resource.getRelativePathList()) {
        if (path.startsWith(""String_Node_Str"")) {
          Set<URL> urls=resource.getResourcesByRelativePath(path);
          newResourcesMap.put(""String_Node_Str"" + path,urls);
        }
      }
      resource.removeAllMap();
      for (      String path : newResourcesMap.keySet()) {
        resource.addResources(path,new ArrayList<URL>(newResourcesMap.get(path)));
      }
    }
 else     if (LIBRARY_FOLDER_NAME.equals(resource.getDirectoryName())) {
      resource.setDirectoryName(""String_Node_Str"");
    }
 else     if (META_INF.equals(resource.getDirectoryName())) {
      it.remove();
      if (!resource.getAllResources().isEmpty()) {
        Set<URL> urls=resource.getAllResources().iterator().next();
        if (!urls.isEmpty()) {
          URL manifestURL=urls.iterator().next();
          try {
            File manifestFile=new File(manifestURL.toURI());
            FileInputStream fis=new FileInputStream(manifestFile);
            Manifest manifest=new Manifest(fis);
            exportService=manifest.getMainAttributes().getValue(""String_Node_Str"");
            privatePackage=manifest.getMainAttributes().getValue(""String_Node_Str"");
            fis.close();
          }
 catch (          URISyntaxException e) {
            ExceptionHandler.process(e);
          }
catch (          FileNotFoundException e) {
            ExceptionHandler.process(e);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
  }
  addSourceCodeToExport(list,processes,codeOptions);
  addMavenScriptToExport(list,processes,privatePackage,exportService);
  addKarFileToExport(list);
  addFeatureFileToExport(list,processes);
  return list;
}","@Override public List<ExportFileResource> getExportResources(ExportFileResource[] processes,String... codeOptions) throws ProcessorException {
  List<ExportFileResource> list=super.getExportResources(processes,codeOptions);
  addKarFileToExport(list);
  addFeatureFileToExport(list,processes);
  return list;
}",0.1836734693877551
141774,"protected void doRun(){
  ISelection selection=getSelectedObject();
  if (selection == null) {
    return;
  }
  Object obj=((IStructuredSelection)selection).getFirstElement();
  if (obj == null) {
    return;
  }
  RepositoryNode node=(RepositoryNode)obj;
  Property property=(Property)node.getObject().getProperty();
  CamelProcessItem processItem=null;
  if (property != null) {
    ItemCacheManager.clearCache();
    Assert.isTrue(property.getItem() instanceof CamelProcessItem);
    processItem=(CamelProcessItem)property.getItem();
    IWorkbenchPage page=getActivePage();
    try {
      final CamelProcessEditorInput fileEditorInput=new CamelProcessEditorInput(processItem,true,true);
      checkUnLoadedNodeForProcess(fileEditorInput);
      IEditorPart editorPart=page.findEditor(fileEditorInput);
      if (editorPart == null) {
        fileEditorInput.setRepositoryNode(node);
        editorPart=page.openEditor(fileEditorInput,CamelMultiPageTalendEditor.ID,true);
      }
 else {
        ((CamelMultiPageTalendEditor)editorPart).setReadOnly(fileEditorInput.setForceReadOnly(false));
        page.activate(editorPart);
      }
      if (editorPart instanceof AbstractMultiPageTalendEditor) {
        ((AbstractMultiPageTalendEditor)editorPart).updateTitleImage();
      }
      refresh(obj);
    }
 catch (    PartInitException e) {
      MessageBoxExceptionHandler.process(e);
    }
catch (    PersistenceException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
 else {
    IRepositoryView viewPart=getViewPart();
    if (viewPart != null) {
      viewPart.refresh(ERepositoryObjectType.PROCESS);
    }
  }
}","@Override protected void doRun(){
  ISelection selection=getSelectedObject();
  if (selection == null) {
    return;
  }
  Object obj=((IStructuredSelection)selection).getFirstElement();
  if (obj == null) {
    return;
  }
  RepositoryNode node=(RepositoryNode)obj;
  Property property=node.getObject().getProperty();
  CamelProcessItem processItem=null;
  if (property != null) {
    ItemCacheManager.clearCache();
    Assert.isTrue(property.getItem() instanceof CamelProcessItem);
    processItem=(CamelProcessItem)property.getItem();
    IWorkbenchPage page=getActivePage();
    try {
      final CamelProcessEditorInput fileEditorInput=new CamelProcessEditorInput(processItem,true,true);
      checkUnLoadedNodeForProcess(fileEditorInput);
      IEditorPart editorPart=page.findEditor(fileEditorInput);
      if (editorPart == null) {
        fileEditorInput.setRepositoryNode(node);
        editorPart=page.openEditor(fileEditorInput,CamelMultiPageTalendEditor.ID,true);
      }
 else {
        ((CamelMultiPageTalendEditor)editorPart).setReadOnly(fileEditorInput.setForceReadOnly(false));
        page.activate(editorPart);
      }
      if (editorPart instanceof AbstractMultiPageTalendEditor) {
        ((AbstractMultiPageTalendEditor)editorPart).updateTitleImage();
      }
      refresh(obj);
    }
 catch (    PartInitException e) {
      MessageBoxExceptionHandler.process(e);
    }
catch (    PersistenceException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
 else {
  }
}",0.9511961722488038
141775,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  this.selection=selection;
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
    if (canWork) {
      canWork=isLastVersion(node);
    }
  }
  setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  this.selection=selection;
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}",0.9396325459317584
141776,"@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  this.setText(createLabel);
  this.setImageDescriptor(ImageProvider.getImageDesc(EServiceCoreImage.SERVICE_ICON));
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    creation=false;
  break;
default :
return;
}
setEnabled(true);
}","@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  this.setText(createLabel);
  this.setImageDescriptor(ImageProvider.getImageDesc(EServiceCoreImage.SERVICE_ICON));
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    creation=false;
  break;
default :
return;
}
setEnabled(isLastVersion(node));
}",0.9781990521327014
141777,"@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    break;
default :
  return;
}
boolean flag=true;
if (node.getObject() == null) {
flag=false;
}
setEnabled(flag);
}","@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    break;
default :
  return;
}
boolean flag=true;
if (node.getObject() == null) {
flag=false;
}
if (flag) {
flag=isLastVersion(node);
}
setEnabled(flag);
}",0.9260042283298098
141778,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  this.selection=selection;
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  this.selection=selection;
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
    if (canWork) {
      canWork=isLastVersion(node);
    }
  }
  setEnabled(canWork);
}",0.9617346938775512
141779,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if ((node.getType() != ENodeType.REPOSITORY_ELEMENT) || (node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) || (node.getObject() == null)|| (ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED)) {
      canWork=false;
      break;
    }
 else {
      this.selection=selection;
    }
  }
  setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if ((node.getType() != ENodeType.REPOSITORY_ELEMENT) || (node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) || (node.getObject() == null)|| (ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED)) {
      canWork=false;
      break;
    }
 else {
      this.selection=selection;
    }
    if (canWork) {
      canWork=isLastVersion(node);
    }
  }
  setEnabled(canWork);
}",0.96
141780,"/** 
 * @see org.eclipse.jface.wizard.Wizard#performFinish()
 */
@Override public boolean performFinish(){
  property.setId(repositoryFactory.getNextId());
  property.setLabel(property.getDisplayName());
  URL url=mainPage.getUrl();
  Path p=new Path(property.getLabel());
  String itemName=p.removeFileExtension().lastSegment();
  String fileExtension=""String_Node_Str"";
  if (url != null) {
    p=new Path(url.getPath());
    if (p.getFileExtension() != null) {
      fileExtension=p.getFileExtension();
    }
  }
  if (fileExtension.equals(FileConstants.ITEM_EXTENSION)) {
    fileExtension+=""String_Node_Str"";
  }
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  StringBuffer sb=new StringBuffer();
  if (url == null) {
    byteArray.setInnerContent(new byte[0]);
  }
 else {
    try {
      InputStream inputStream=url.openStream();
      BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream,""String_Node_Str""));
      String line=bufferedReader.readLine();
      while (line != null) {
        sb.append(line).append(System.getProperty(""String_Node_Str""));
        line=bufferedReader.readLine();
      }
      byteArray.setInnerContent(sb.toString().getBytes());
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
      ExceptionHandler.process(e);
      return false;
    }
  }
  ReferenceFileItem refItem=PropertiesFactory.eINSTANCE.createReferenceFileItem();
  refItem.setContent(byteArray);
  refItem.setExtension(fileExtension);
  refItem.setName(itemName);
  item.setName(itemName);
  item.setBindingExtension(fileExtension);
  byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContent(new byte[0]);
  item.setContent(byteArray);
  item.getReferenceResources().add(refItem);
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(this.getWindowTitle(),this){
    @Override protected void run() throws LoginException, PersistenceException {
      repositoryFactory.create(item,mainPage.getDestinationPath());
      RelationshipItemBuilder.getInstance().addOrUpdateItem(item);
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  repositoryFactory.executeRepositoryWorkUnit(workUnit);
  return item != null;
}","/** 
 * @see org.eclipse.jface.wizard.Wizard#performFinish()
 */
@Override public boolean performFinish(){
  property.setId(repositoryFactory.getNextId());
  property.setLabel(property.getDisplayName());
  URL url=mainPage.getUrl();
  Path p=new Path(property.getLabel());
  String itemName=p.removeFileExtension().lastSegment();
  String fileExtension=null;
  if (url != null) {
    p=new Path(url.getPath());
    if (p.getFileExtension() != null) {
      fileExtension=p.getFileExtension();
    }
  }
 else {
    fileExtension=p.getFileExtension();
  }
  if (fileExtension == null || fileExtension.isEmpty()) {
    fileExtension=""String_Node_Str"";
  }
  if (fileExtension.equals(FileConstants.ITEM_EXTENSION)) {
    fileExtension+=""String_Node_Str"";
  }
  if (fileExtension.equals(FileConstants.PROPERTIES_EXTENSION)) {
    fileExtension+=""String_Node_Str"";
  }
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  StringBuffer sb=new StringBuffer();
  if (url == null) {
    byteArray.setInnerContent(new byte[0]);
  }
 else {
    try {
      InputStream inputStream=url.openStream();
      BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream,""String_Node_Str""));
      String line=bufferedReader.readLine();
      while (line != null) {
        sb.append(line).append(System.getProperty(""String_Node_Str""));
        line=bufferedReader.readLine();
      }
      byteArray.setInnerContent(sb.toString().getBytes());
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
      ExceptionHandler.process(e);
      return false;
    }
  }
  ReferenceFileItem refItem=PropertiesFactory.eINSTANCE.createReferenceFileItem();
  refItem.setContent(byteArray);
  refItem.setExtension(fileExtension);
  refItem.setName(itemName);
  item.setName(itemName);
  item.setBindingExtension(fileExtension);
  byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContent(new byte[0]);
  item.setContent(byteArray);
  item.getReferenceResources().add(refItem);
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(this.getWindowTitle(),this){
    @Override protected void run() throws LoginException, PersistenceException {
      repositoryFactory.create(item,mainPage.getDestinationPath());
      RelationshipItemBuilder.getInstance().addOrUpdateItem(item);
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  repositoryFactory.executeRepositoryWorkUnit(workUnit);
  return item != null;
}",0.8888419273034658
141781,"@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  this.setText(createLabel);
  this.setImageDescriptor(ImageProvider.getImageDesc(EServiceCoreImage.SERVICE_ICON));
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    creation=false;
  break;
default :
return;
}
setEnabled(true);
}","@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  this.setText(createLabel);
  this.setImageDescriptor(ImageProvider.getImageDesc(EServiceCoreImage.SERVICE_ICON));
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    creation=false;
  break;
default :
return;
}
setEnabled(isLastVersion(node));
}",0.9781990521327014
141782,"@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    break;
default :
  return;
}
boolean flag=true;
if (node.getObject() == null) {
flag=false;
}
setEnabled(flag);
}","@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    break;
default :
  return;
}
boolean flag=true;
if (node.getObject() == null) {
flag=false;
}
if (flag) {
flag=isLastVersion(node);
}
setEnabled(flag);
}",0.9206349206349206
141783,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  this.selection=selection;
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  this.selection=selection;
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
    if (canWork) {
      canWork=isLastVersion(node);
    }
  }
  setEnabled(canWork);
}",0.9606299212598424
141784,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if ((node.getType() != ENodeType.REPOSITORY_ELEMENT) || (node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) || (node.getObject() == null)|| (ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED)) {
      canWork=false;
      break;
    }
 else {
      this.selection=selection;
    }
  }
  setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if ((node.getType() != ENodeType.REPOSITORY_ELEMENT) || (node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) || (node.getObject() == null)|| (ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED)) {
      canWork=false;
      break;
    }
 else {
      this.selection=selection;
    }
    if (canWork) {
      canWork=isLastVersion(node);
    }
  }
  setEnabled(canWork);
}",0.96
141785,"@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  this.setText(createLabel);
  this.setImageDescriptor(ImageProvider.getImageDesc(EServiceCoreImage.SERVICE_ICON));
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    creation=false;
  break;
default :
return;
}
setEnabled(true);
}","@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  this.setText(createLabel);
  this.setImageDescriptor(ImageProvider.getImageDesc(EServiceCoreImage.SERVICE_ICON));
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    creation=false;
  break;
default :
return;
}
setEnabled(isLastVersion(node));
}",0.9781990521327014
141786,"@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    break;
default :
  return;
}
boolean flag=true;
if (node.getObject() == null) {
flag=false;
}
setEnabled(flag);
}","@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    break;
default :
  return;
}
boolean flag=true;
if (node.getObject() == null) {
flag=false;
}
if (flag) {
flag=isLastVersion(node);
}
setEnabled(flag);
}",0.9206349206349206
141787,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  this.selection=selection;
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  this.selection=selection;
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
    if (canWork) {
      canWork=isLastVersion(node);
    }
  }
  setEnabled(canWork);
}",0.9606299212598424
141788,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if ((node.getType() != ENodeType.REPOSITORY_ELEMENT) || (node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) || (node.getObject() == null)|| (ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED)) {
      canWork=false;
      break;
    }
 else {
      this.selection=selection;
    }
  }
  setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=selection.toList();
  for (  RepositoryNode node : nodes) {
    if ((node.getType() != ENodeType.REPOSITORY_ELEMENT) || (node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) || (node.getObject() == null)|| (ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED)) {
      canWork=false;
      break;
    }
 else {
      this.selection=selection;
    }
    if (canWork) {
      canWork=isLastVersion(node);
    }
  }
  setEnabled(canWork);
}",0.9445196211096076
141789,"protected void doRun(){
  IWorkbenchWindow window=getWorkbenchWindow();
  ServiceItem serviceItem=null;
  List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    serviceItem=(ServiceItem)node.getObject().getProperty().getItem();
    ServiceConnection serviceConnection=(ServiceConnection)serviceItem.getConnection();
    Dialog dialog=new ServiceMetadataDialog(window,serviceItem,serviceConnection);
    dialog.open();
  }
}","@Override protected void doRun(){
  IWorkbenchWindow window=getWorkbenchWindow();
  ServiceItem serviceItem=null;
  List<RepositoryNode> nodes=selection.toList();
  for (  RepositoryNode node : nodes) {
    serviceItem=(ServiceItem)node.getObject().getProperty().getItem();
    ServiceConnection serviceConnection=(ServiceConnection)serviceItem.getConnection();
    Dialog dialog=new ServiceMetadataDialog(window,serviceItem,serviceConnection);
    dialog.open();
  }
}",0.9663157894736842
141790,"public boolean isVisible(){
  return isEnabled();
}","@Override public boolean isVisible(){
  return isEnabled();
}",0.9107142857142856
141791,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  this.selection=selection;
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
    if (canWork) {
      canWork=isLastVersion(node);
    }
  }
  setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  this.selection=selection;
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}",0.9396325459317584
141792,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  this.selection=selection;
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
    if (canWork) {
      canWork=isLastVersion(node);
    }
  }
  setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty() || (selection.size() > 1)) {
    setEnabled(false);
    return;
  }
  this.selection=selection;
  @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ESBRepositoryNodeType.SERVICES) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}",0.9413265306122448
141793,"@Override protected void doRun(){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      monitor.beginTask(Messages.PublishMetadataAction_Importing,100);
      if (nodes == null) {
        nodes=selection.toList();
      }
      int step=100;
      int size=nodes.size();
      if (size > 0) {
        step/=size;
      }
      for (      RepositoryNode node : nodes) {
        monitor.worked(step);
        WSDLUtils.validateWsdl(node);
        Definition wsdlDefinition=WSDLUtils.getWsdlDefinition(node);
        process(wsdlDefinition);
        if (monitor.isCanceled()) {
          break;
        }
      }
      nodes=null;
      monitor.done();
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        nodes=null;
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
    nodes=null;
  }
catch (  InterruptedException e) {
  }
}","@Override protected void doRun(){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      monitor.beginTask(Messages.PublishMetadataAction_Importing,100);
      if (nodes == null) {
        nodes=selection.toList();
      }
      int step=100;
      int size=nodes.size();
      if (size > 0) {
        step/=size;
      }
      for (      RepositoryNode node : nodes) {
        monitor.worked(step);
        WSDLUtils.validateWsdl(node);
        Definition wsdlDefinition=WSDLUtils.getWsdlDefinition(node);
        process(wsdlDefinition);
        if (monitor.isCanceled()) {
          break;
        }
      }
      nodes=null;
      monitor.done();
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        nodes=null;
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    if (needProgressBar) {
      new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
    }
 else {
      PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
    }
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
    nodes=null;
  }
catch (  InterruptedException e) {
  }
}",0.9548095545513234
141794,"public PublishMetadataAction(){
  super();
  this.setText(Messages.PublishMetadataAction_Name);
  this.setToolTipText(Messages.PublishMetadataAction_Name);
  this.setImageDescriptor(ImageProvider.getImageDesc(EImage.HIERARCHY_ICON));
}","public PublishMetadataAction(boolean needProgressBar){
  this.needProgressBar=needProgressBar;
}",0.3262839879154078
141795,"private Resource save(RouteResourceItem item){
  Resource itemResource=xmiResourceManager.getItemResource(item);
  ByteArray content=item.getContent();
  itemResource.getContents().clear();
  itemResource.getContents().add(content);
  return itemResource;
}","public Resource save(Item item) throws PersistenceException {
  Resource itemResource=null;
  if (item instanceof CamelProcessItem) {
    itemResource=saveRoute((CamelProcessItem)item);
    return itemResource;
  }
  if (item instanceof BeanItem) {
    itemResource=saveFile((BeanItem)item);
    return itemResource;
  }
  if (item instanceof RouteResourceItem) {
    itemResource=saveFile((RouteResourceItem)item);
    return itemResource;
  }
  return null;
}",0.075208913649025
141796,"@Override protected Control createDialogArea(Composite parent){
  Composite container=(Composite)super.createDialogArea(parent);
  GridData data=(GridData)container.getLayoutData();
  data.minimumHeight=400;
  data.heightHint=400;
  data.minimumWidth=500;
  data.widthHint=500;
  container.setLayoutData(data);
  Composite viewContainer=new Composite(container,SWT.BORDER);
  viewContainer.setLayout(new GridLayout());
  viewContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
  RepositoryViewerProvider provider=new RepositoryViewerProvider(){
    @Override protected TreeViewer createTreeViewer(    Composite parent,    int style){
      return new RepositoryTreeViewer(parent,style);
    }
    @Override protected IRepositoryNode getInputRoot(    IProjectRepositoryNode projectRepoNode){
      return getInput();
    }
  }
;
  repositoryTreeViewer=(RepositoryTreeViewer)provider.createViewer(viewContainer);
  repositoryTreeViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  repositoryTreeViewer.expandAll();
  repositoryTreeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      boolean highlightOKButton=isSelectionValid(event);
      getButton(IDialogConstants.OK_ID).setEnabled(highlightOKButton);
    }
  }
);
  repositoryTreeViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      if (getButton(IDialogConstants.OK_ID).isEnabled()) {
        okPressed();
      }
    }
  }
);
  addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IRepositoryNode) {
        return true;
      }
      return false;
    }
  }
);
  return container;
}","@Override protected Control createDialogArea(Composite parent){
  Composite container=(Composite)super.createDialogArea(parent);
  GridData data=(GridData)container.getLayoutData();
  data.minimumHeight=400;
  data.heightHint=400;
  data.minimumWidth=500;
  data.widthHint=500;
  container.setLayoutData(data);
  Composite viewContainer=new Composite(container,SWT.BORDER);
  viewContainer.setLayout(new GridLayout());
  viewContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
  RepositoryViewerProvider provider=new RepositoryViewerProvider(){
    @Override protected TreeViewer createTreeViewer(    Composite parent,    int style){
      return new RepositoryTreeViewer(parent,style);
    }
    @Override protected IRepositoryNode getInputRoot(    IProjectRepositoryNode projectRepoNode){
      return getInput();
    }
    @Override protected int getStyle(){
      return SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL;
    }
  }
;
  repositoryTreeViewer=(RepositoryTreeViewer)provider.createViewer(viewContainer);
  repositoryTreeViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  repositoryTreeViewer.expandAll();
  repositoryTreeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      boolean highlightOKButton=isSelectionValid(event);
      getButton(IDialogConstants.OK_ID).setEnabled(highlightOKButton);
    }
  }
);
  repositoryTreeViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      if (getButton(IDialogConstants.OK_ID).isEnabled()) {
        okPressed();
      }
    }
  }
);
  addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IRepositoryNode) {
        return true;
      }
      return false;
    }
  }
);
  return container;
}",0.9730451027488658
141797,"@Override protected void evaluateTextField(){
  super.evaluateTextField();
  boolean isValid=true;
  String text=filenameText.getText();
  if (text != null && !text.isEmpty()) {
    File file=new File(text);
    if (!file.exists()) {
      try {
        url=new URL(text);
      }
 catch (      MalformedURLException e) {
        url=null;
      }
    }
 else {
      try {
        url=file.toURI().toURL();
      }
 catch (      MalformedURLException e) {
        url=null;
      }
    }
    if (url == null) {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"" + text + ""String_Node_Str"");
      isValid=false;
    }
    updatePageStatus();
  }
  if (isValid && !Pattern.matches(RepositoryConstants.getPattern(ERepositoryObjectType.PROCESS),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    updatePageStatus();
  }
}","@Override protected void evaluateTextField(){
  super.evaluateTextField();
  boolean isValid=true;
  String text=filenameText.getText();
  if (text != null && !text.isEmpty()) {
    File file=new File(text);
    if (!file.exists()) {
      try {
        url=new URL(text);
        InputStream is=url.openStream();
        if (is == null) {
          url=null;
        }
        if (is != null) {
          is.close();
        }
      }
 catch (      Exception e) {
        url=null;
      }
    }
 else {
      try {
        url=file.toURI().toURL();
      }
 catch (      Exception e) {
        url=null;
      }
    }
    if (url == null) {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"" + text + ""String_Node_Str"");
      isValid=false;
    }
    updatePageStatus();
  }
  if (isValid && !Pattern.matches(RepositoryConstants.getPattern(ERepositoryObjectType.PROCESS),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    updatePageStatus();
  }
}",0.8157496214033316
141798,"@Override protected void evaluateTextField(){
  super.evaluateTextField();
  String text=filenameText.getText();
  if (text != null && !text.isEmpty()) {
    File file=new File(text);
    if (!file.exists()) {
      try {
        url=new URL(text);
      }
 catch (      MalformedURLException e) {
        url=null;
      }
    }
 else {
      try {
        url=file.toURI().toURL();
      }
 catch (      MalformedURLException e) {
        url=null;
      }
    }
    if (url == null) {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"" + text + ""String_Node_Str"");
    }
    updatePageStatus();
  }
}","@Override protected void evaluateTextField(){
  super.evaluateTextField();
  boolean isValid=true;
  String text=filenameText.getText();
  if (text != null && !text.isEmpty()) {
    File file=new File(text);
    if (!file.exists()) {
      try {
        url=new URL(text);
      }
 catch (      MalformedURLException e) {
        url=null;
      }
    }
 else {
      try {
        url=file.toURI().toURL();
      }
 catch (      MalformedURLException e) {
        url=null;
      }
    }
    if (url == null) {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"" + text + ""String_Node_Str"");
      isValid=false;
    }
    updatePageStatus();
  }
  if (isValid && !Pattern.matches(RepositoryConstants.getPattern(ERepositoryObjectType.PROCESS),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    updatePageStatus();
  }
}",0.7979207277452891
141799,"@Override public void modifyText(ModifyEvent e){
  File file=new File(filenameText.getText());
  String fileName=file.getName();
  if (nameText.getText().isEmpty()) {
    nameText.setText(fileName);
  }
  evaluateFields();
}","@Override public void modifyText(ModifyEvent e){
  File file=new File(filenameText.getText());
  String fileName=file.getName();
  if (nameText.getText().isEmpty()) {
    nameText.setText(fileName.replace(""String_Node_Str"",""String_Node_Str""));
  }
  evaluateFields();
}",0.9087221095334684
141800,"@Override protected void addListeners(){
  super.addListeners();
  browseBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog dlg=new FileDialog(getShell(),SWT.OPEN);
      String filename=dlg.open();
      if (filename != null) {
        filenameText.setText(filename);
      }
    }
  }
);
  filenameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      File file=new File(filenameText.getText());
      String fileName=file.getName();
      if (nameText.getText().isEmpty()) {
        nameText.setText(fileName);
      }
      evaluateFields();
    }
  }
);
}","@Override protected void addListeners(){
  super.addListeners();
  browseBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog dlg=new FileDialog(getShell(),SWT.OPEN);
      String filename=dlg.open();
      if (filename != null) {
        filenameText.setText(filename);
      }
    }
  }
);
  filenameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      File file=new File(filenameText.getText());
      String fileName=file.getName();
      if (nameText.getText().isEmpty()) {
        nameText.setText(fileName.replace(""String_Node_Str"",""String_Node_Str""));
      }
      evaluateFields();
    }
  }
);
}",0.9685534591194968
141801,"public void init(TreeViewer viewer,IStructuredSelection selection){
  assignJobAction.init(viewer,selection);
  newJobAction.init(viewer,selection);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  assignJobAction.init(viewer,selection);
  newJobAction.init(viewer,selection);
  setEnabled(assignJobAction.isEnabled());
}",0.8746355685131195
141802,"public NewAssignJobAction(){
  super();
  this.setText(""String_Node_Str"");
  this.setToolTipText(""String_Node_Str"");
  this.setImageDescriptor(ImageProvider.getImageDesc(ECoreImage.PROCESS_ICON));
  assignJobAction=new AssignJobAction();
  newJobAction=new CreateNewJobAction();
}","public NewAssignJobAction(){
  super();
  this.setText(Messages.NewAssignJobAction_actionText);
  this.setToolTipText(Messages.NewAssignJobAction_actionTooltip);
  this.setImageDescriptor(ImageProvider.getImageDesc(ECoreImage.PROCESS_ICON));
  assignJobAction=new AssignJobAction();
  newJobAction=new CreateNewJobAction();
}",0.7504132231404959
141803,"private void openAnotherVersion(final RepositoryNode node,final boolean readonly){
  try {
    if (node.getObject() != null) {
      Item item=node.getObject().getProperty().getItem();
      IWorkbenchPage page=getActivePage();
      IEditorPart editorPart=null;
      RepositoryEditorInput fileEditorInput=null;
      if (item instanceof RouteResourceItem) {
        fileEditorInput=RouteResourceInput.createInput((RouteResourceItem)item);
      }
      editorPart=page.findEditor(fileEditorInput);
      if (editorPart == null) {
        fileEditorInput.setRepositoryNode(node);
        page.openEditor(fileEditorInput,RouteResourceEditor.ID);
      }
 else {
        page.activate(editorPart);
      }
    }
  }
 catch (  PartInitException e) {
    MessageBoxExceptionHandler.process(e);
  }
}","private void openAnotherVersion(final RepositoryNode node,final boolean readonly){
  if (node.getObject() != null) {
    Item item=node.getObject().getProperty().getItem();
    IWorkbenchPage page=getActivePage();
    if (item instanceof RouteResourceItem) {
      EditRouteResourceAction.openEditor(page,node,(RouteResourceItem)item);
    }
  }
}",0.4111986001749781
141804,"@Override public boolean performFinish(){
  if (mainPage.isCreateNewVersionJob()) {
    IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
      public void run(      final IProgressMonitor monitor) throws CoreException {
        if (!alreadyEditedByUser) {
          refreshNewJob();
          try {
            ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
        try {
          ProxyRepositoryFactory.getInstance().lock(processObject);
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
catch (        LoginException e) {
          ExceptionHandler.process(e);
        }
        boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
        openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
        try {
          ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
;
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    try {
      ISchedulingRule schedulingRule=workspace.getRoot();
      workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
    }
 catch (    CoreException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
 else {
    StructuredSelection selection=(StructuredSelection)mainPage.getSelection();
    RepositoryNode node=(RepositoryNode)selection.getFirstElement();
    boolean lastVersion=node.getObject().getVersion().equals(processObject.getVersion());
    processObject.getProperty().setVersion(originalVersion);
    if (lastVersion) {
      lockObject(processObject);
    }
    ERepositoryStatus status=node.getObject().getRepositoryStatus();
    boolean isLocked=false;
    if (status == ERepositoryStatus.LOCK_BY_USER) {
      isLocked=true;
    }
    openAnotherVersion(node,!lastVersion || !isLocked);
  }
  return true;
}","@Override public boolean performFinish(){
  if (mainPage.isCreateNewVersionJob()) {
    IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
      public void run(      final IProgressMonitor monitor) throws CoreException {
        if (!alreadyEditedByUser) {
          refreshNewJob();
          try {
            ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
        try {
          ProxyRepositoryFactory.getInstance().lock(processObject);
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
catch (        LoginException e) {
          ExceptionHandler.process(e);
        }
        boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
        openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
        try {
          ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
;
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    try {
      ISchedulingRule schedulingRule=workspace.getRoot();
      workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
    }
 catch (    CoreException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
 else {
    StructuredSelection selection=(StructuredSelection)mainPage.getSelection();
    RepositoryNode node=(RepositoryNode)selection.getFirstElement();
    boolean lastVersion=node.getObject().getVersion().equals(processObject.getVersion());
    if (lastVersion) {
      lockObject(processObject);
    }
    ERepositoryStatus status=node.getObject().getRepositoryStatus();
    boolean isLocked=false;
    if (status == ERepositoryStatus.LOCK_BY_USER) {
      isLocked=true;
    }
    openAnotherVersion(node,!lastVersion || !isLocked);
  }
  return true;
}",0.985410188950012
141805,"public ResourceLabelProvider(Table table){
  this.table=table;
}","public ResourceLabelProvider(Table table){
}",0.8148148148148148
141806,"@Override public Color getBackground(Object element,int columnIndex){
  if (element instanceof ResourceDependencyModel) {
    ResourceDependencyModel item=(ResourceDependencyModel)element;
    if (item.isBuiltIn()) {
      return new Color(null,210,210,210);
    }
  }
  return null;
}","@Override public Color getBackground(Object element,int columnIndex){
  if (element instanceof ResourceDependencyModel) {
    ResourceDependencyModel item=(ResourceDependencyModel)element;
    if (item.isBuiltIn()) {
      return BG_COLOR;
    }
  }
  return null;
}",0.94010889292196
141807,"private Resource save(FileItem item){
  Resource itemResource=xmiResourceManager.getItemResource(item);
  ByteArray content=item.getContent();
  itemResource.getContents().clear();
  itemResource.getContents().add(content);
  return itemResource;
}","private Resource save(RouteResourceItem item){
  Resource itemResource=xmiResourceManager.getItemResource(item);
  ByteArray content=item.getContent();
  itemResource.getContents().clear();
  itemResource.getContents().add(content);
  return itemResource;
}",0.9702970297029704
141808,"@Override public void refresh(final IElementParameter param,boolean check){
  new Thread(){
    @Override public void run(){
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          if (hashCurControls == null) {
            return;
          }
          IElementParameter processTypeParameter=param.getChildParameters().get(EParameterName.ROUTE_RESOURCE_TYPE_ID.getName());
          String value=(String)processTypeParameter.getValue();
          IRepositoryViewObject lastVersion;
          try {
            lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(value);
            resetTextValue(lastVersion.getProperty().getItem());
          }
 catch (          Exception e) {
          }
          if (elem != null && elem instanceof Node) {
            ((Node)elem).checkAndRefreshNode();
          }
        }
      }
);
    }
  }
.start();
}","@Override public void refresh(final IElementParameter param,boolean check){
  new Thread(){
    @Override public void run(){
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          if (hashCurControls == null) {
            return;
          }
          IElementParameter processTypeParameter=param.getChildParameters().get(EParameterName.ROUTE_RESOURCE_TYPE_ID.getName());
          String value=(String)processTypeParameter.getValue();
          if (value == null) {
            labelText.setText(""String_Node_Str"");
          }
 else {
            IRepositoryViewObject lastVersion;
            try {
              lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(value);
              if (lastVersion == null) {
                processTypeParameter.setValue(null);
                labelText.setText(""String_Node_Str"");
              }
 else {
                resetTextValue(lastVersion.getProperty().getItem());
              }
            }
 catch (            Exception e) {
            }
          }
          if (elem != null && elem instanceof Node) {
            ((Node)elem).checkAndRefreshNode();
          }
        }
      }
);
    }
  }
.start();
}",0.8446555819477435
141809,"public void run(){
  if (hashCurControls == null) {
    return;
  }
  IElementParameter processTypeParameter=param.getChildParameters().get(EParameterName.ROUTE_RESOURCE_TYPE_ID.getName());
  String value=(String)processTypeParameter.getValue();
  IRepositoryViewObject lastVersion;
  try {
    lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(value);
    resetTextValue(lastVersion.getProperty().getItem());
  }
 catch (  Exception e) {
  }
  if (elem != null && elem instanceof Node) {
    ((Node)elem).checkAndRefreshNode();
  }
}","public void run(){
  if (hashCurControls == null) {
    return;
  }
  IElementParameter processTypeParameter=param.getChildParameters().get(EParameterName.ROUTE_RESOURCE_TYPE_ID.getName());
  String value=(String)processTypeParameter.getValue();
  if (value == null) {
    labelText.setText(""String_Node_Str"");
  }
 else {
    IRepositoryViewObject lastVersion;
    try {
      lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(value);
      if (lastVersion == null) {
        processTypeParameter.setValue(null);
        labelText.setText(""String_Node_Str"");
      }
 else {
        resetTextValue(lastVersion.getProperty().getItem());
      }
    }
 catch (    Exception e) {
    }
  }
  if (elem != null && elem instanceof Node) {
    ((Node)elem).checkAndRefreshNode();
  }
}",0.8008948545861297
141810,"@Override protected Set<BundleClasspath> to(NodeType t){
  Set<BundleClasspath> bundleClasspaths=new HashSet<BundleClasspath>();
  for (  Object e : t.getElementParameter()) {
    ElementParameterType p=(ElementParameterType)e;
    if (attributeName.equals(p.getName())) {
      EList elementValue=p.getElementValue();
      if (elementValue.isEmpty()) {
        String evtValue=p.getValue();
        if (evtValue != null) {
          if (evtValue.startsWith(""String_Node_Str"")) {
            evtValue=evtValue.substring(1);
          }
          if (evtValue.endsWith(""String_Node_Str"")) {
            evtValue=evtValue.substring(0,evtValue.length() - 1);
          }
          if (!evtValue.trim().equals(""String_Node_Str"")) {
            BundleClasspath bundleClasspath=new BundleClasspath();
            bundleClasspath.setBuiltIn(true);
            bundleClasspath.setPath(evtValue);
            bundleClasspaths.add(bundleClasspath);
          }
        }
      }
 else {
        for (        Object pv : p.getElementValue()) {
          ElementValueType evt=(ElementValueType)pv;
          String evtValue=evt.getValue();
          BundleClasspath bundleClasspath=new BundleClasspath();
          bundleClasspath.setBuiltIn(true);
          bundleClasspath.setPath(evtValue);
          bundleClasspaths.add(bundleClasspath);
        }
      }
    }
  }
  return Collections.unmodifiableSet(bundleClasspaths);
}","@Override protected Set<BundleClasspath> to(NodeType t){
  Set<BundleClasspath> bundleClasspaths=new HashSet<BundleClasspath>();
  for (  Object e : t.getElementParameter()) {
    ElementParameterType p=(ElementParameterType)e;
    if (attributeName.equals(p.getName())) {
      EList<?> elementValue=p.getElementValue();
      if (elementValue.isEmpty()) {
        String evtValue=p.getValue();
        if (evtValue != null) {
          if (evtValue.startsWith(""String_Node_Str"")) {
            evtValue=evtValue.substring(1);
          }
          if (evtValue.endsWith(""String_Node_Str"")) {
            evtValue=evtValue.substring(0,evtValue.length() - 1);
          }
          if (!evtValue.trim().equals(""String_Node_Str"")) {
            BundleClasspath bundleClasspath=new BundleClasspath();
            bundleClasspath.setBuiltIn(true);
            bundleClasspath.setPath(evtValue);
            bundleClasspaths.add(bundleClasspath);
          }
        }
      }
 else {
        for (        Object pv : p.getElementValue()) {
          ElementValueType evt=(ElementValueType)pv;
          String evtValue=evt.getValue();
          BundleClasspath bundleClasspath=new BundleClasspath();
          bundleClasspath.setBuiltIn(true);
          bundleClasspath.setPath(evtValue);
          bundleClasspaths.add(bundleClasspath);
        }
      }
    }
  }
  return Collections.unmodifiableSet(bundleClasspaths);
}",0.99894254494184
141811,"private void initialize(){
  Map<String,Set<ExBundleClasspath>> exClasspaths=ExtensionPointsReader.INSTANCE.getBundleClasspaths();
  Map<String,Set<ExImportPackage>> exImportPackages=ExtensionPointsReader.INSTANCE.getComponentImportPackages();
  Map<String,Set<ExRequireBundle>> exRequireBundles=ExtensionPointsReader.INSTANCE.getComponentRequireBundles();
  Set<ExRequireBundle> requireBundlesForAll=ExtensionPointsReader.INSTANCE.getRequireBundlesForAll();
  Set<ExImportPackage> importPackagesForAll=ExtensionPointsReader.INSTANCE.getImportPackagesForAll();
  for (  ExRequireBundle rb : requireBundlesForAll) {
    bundles.add(rb.toTargetIgnorePredicates());
  }
  for (  ExImportPackage ip : importPackagesForAll) {
    packages.add(ip.toTargetIgnorePredicates());
  }
  String projectFolderName=JavaResourcesHelper.getProjectFolderName(item);
  for (  Object o : nodes) {
    if (!(o instanceof NodeType)) {
      continue;
    }
    NodeType n=(NodeType)o;
    String componentName=n.getComponentName();
    Set<ExBundleClasspath> bcs=exClasspaths.get(componentName);
    if (bcs != null) {
      for (      ExBundleClasspath bc : bcs) {
        Set<BundleClasspath> targets=bc.toTargets(n);
        classpaths.addAll(targets);
      }
    }
    Set<ExImportPackage> ips=exImportPackages.get(componentName);
    if (ips != null) {
      for (      ExImportPackage ip : ips) {
        Set<ImportPackage> targets=ip.toTargets(n);
        packages.addAll(targets);
      }
    }
    Set<ExRequireBundle> rbs=exRequireBundles.get(componentName);
    if (rbs != null) {
      for (      ExRequireBundle rb : rbs) {
        Set<RequireBundle> targets=rb.toTargets(n);
        bundles.addAll(targets);
      }
    }
    if (""String_Node_Str"".equals(componentName)) {
      String jobId=null;
      String jobVersion=null;
      String jobName=null;
      EList parameters=n.getElementParameter();
      for (      Object p : parameters) {
        if (!(p instanceof ElementParameterType)) {
          continue;
        }
        ElementParameterType ept=(ElementParameterType)p;
        String eptName=ept.getName();
        System.out.println(eptName);
        if (""String_Node_Str"".equals(eptName) && ""String_Node_Str"".equals(ept.getValue())) {
          jobName=null;
          break;
        }
        if (jobId == null && ""String_Node_Str"".equals(eptName)) {
          jobId=ept.getValue();
        }
        if (jobVersion == null && ""String_Node_Str"".equals(eptName)) {
          jobVersion=ept.getValue();
        }
        if (jobName == null && ""String_Node_Str"".equals(eptName)) {
          jobName=ept.getValue();
        }
      }
      if (""String_Node_Str"".equals(jobVersion) && jobId != null) {
        try {
          jobVersion=ProxyRepositoryFactory.getInstance().getLastVersion(jobId).getVersion();
        }
 catch (        Exception e) {
          jobVersion=null;
        }
      }
 else {
        jobVersion=null;
      }
      if (jobName != null && jobVersion != null) {
        String jobFolderName=JavaResourcesHelper.getJobFolderName(jobName,jobVersion);
        ImportPackage importPackage=new ImportPackage();
        importPackage.setBuiltIn(true);
        importPackage.setName(projectFolderName + ""String_Node_Str"" + jobFolderName);
        packages.add(importPackage);
      }
    }
  }
  exClasspaths=null;
  exImportPackages=null;
  exRequireBundles=null;
}","private void initialize(){
  Map<String,Set<ExBundleClasspath>> exClasspaths=ExtensionPointsReader.INSTANCE.getBundleClasspaths();
  Map<String,Set<ExImportPackage>> exImportPackages=ExtensionPointsReader.INSTANCE.getComponentImportPackages();
  Map<String,Set<ExRequireBundle>> exRequireBundles=ExtensionPointsReader.INSTANCE.getComponentRequireBundles();
  Set<ExRequireBundle> requireBundlesForAll=ExtensionPointsReader.INSTANCE.getRequireBundlesForAll();
  Set<ExImportPackage> importPackagesForAll=ExtensionPointsReader.INSTANCE.getImportPackagesForAll();
  for (  ExRequireBundle rb : requireBundlesForAll) {
    bundles.add(rb.toTargetIgnorePredicates());
  }
  for (  ExImportPackage ip : importPackagesForAll) {
    packages.add(ip.toTargetIgnorePredicates());
  }
  String projectFolderName=JavaResourcesHelper.getProjectFolderName(item);
  for (  Object o : nodes) {
    if (!(o instanceof NodeType)) {
      continue;
    }
    NodeType n=(NodeType)o;
    String componentName=n.getComponentName();
    Set<ExBundleClasspath> bcs=exClasspaths.get(componentName);
    if (bcs != null) {
      for (      ExBundleClasspath bc : bcs) {
        Set<BundleClasspath> targets=bc.toTargets(n);
        classpaths.addAll(targets);
      }
    }
    Set<ExImportPackage> ips=exImportPackages.get(componentName);
    if (ips != null) {
      for (      ExImportPackage ip : ips) {
        Set<ImportPackage> targets=ip.toTargets(n);
        packages.addAll(targets);
      }
    }
    Set<ExRequireBundle> rbs=exRequireBundles.get(componentName);
    if (rbs != null) {
      for (      ExRequireBundle rb : rbs) {
        Set<RequireBundle> targets=rb.toTargets(n);
        bundles.addAll(targets);
      }
    }
    if (""String_Node_Str"".equals(componentName)) {
      String jobId=null;
      String jobVersion=null;
      String jobName=null;
      EList<?> parameters=n.getElementParameter();
      for (      Object p : parameters) {
        if (!(p instanceof ElementParameterType)) {
          continue;
        }
        ElementParameterType ept=(ElementParameterType)p;
        String eptName=ept.getName();
        System.out.println(eptName);
        if (""String_Node_Str"".equals(eptName) && ""String_Node_Str"".equals(ept.getValue())) {
          jobName=null;
          break;
        }
        if (jobId == null && ""String_Node_Str"".equals(eptName)) {
          jobId=ept.getValue();
        }
        if (jobVersion == null && ""String_Node_Str"".equals(eptName)) {
          jobVersion=ept.getValue();
        }
        if (jobName == null && ""String_Node_Str"".equals(eptName)) {
          jobName=ept.getValue();
        }
      }
      if (""String_Node_Str"".equals(jobVersion) && jobId != null) {
        try {
          jobVersion=ProxyRepositoryFactory.getInstance().getLastVersion(jobId).getVersion();
        }
 catch (        Exception e) {
          jobVersion=null;
        }
      }
 else {
        jobVersion=null;
      }
      if (jobName != null && jobVersion != null) {
        String jobFolderName=JavaResourcesHelper.getJobFolderName(jobName,jobVersion);
        ImportPackage importPackage=new ImportPackage();
        importPackage.setBuiltIn(true);
        importPackage.setName(projectFolderName + ""String_Node_Str"" + jobFolderName);
        packages.add(importPackage);
      }
    }
  }
  exClasspaths=null;
  exImportPackages=null;
  exRequireBundles=null;
}",0.9995582388455309
141812,"/** 
 * validate the dependency information is valid or not
 * @return {@link #OK} {@link #NAME_NULL} {@link #MIN_INVALID}{@link #MAX_INVALID} {@link #MIN_MAX_INVALID}
 */
public int isValid(){
  if (name == null) {
    return NAME_NULL;
  }
  if (minVersion != null) {
    Matcher matcher=versionPattern.matcher(minVersion);
    if (!matcher.matches()) {
      return MIN_INVALID;
    }
  }
  if (maxVersion != null) {
    Matcher matcher=versionPattern.matcher(maxVersion);
    if (!matcher.matches()) {
      return MAX_INVALID;
    }
  }
  if (!compareMinMax()) {
    return MIN_MAX_INVALID;
  }
  return OK;
}","/** 
 * validate the dependency information is valid or not
 * @return {@link #OK} {@link #NAME_NULL} {@link #MIN_INVALID}{@link #MAX_INVALID} {@link #MIN_MAX_INVALID}
 */
public int isValid(){
  if (name == null) {
    return NAME_NULL;
  }
  if (!namePattern.matcher(name).matches()) {
    return NAME_INVALID;
  }
  if (minVersion != null) {
    Matcher matcher=versionPattern.matcher(minVersion);
    if (!matcher.matches()) {
      return MIN_INVALID;
    }
  }
  if (maxVersion != null) {
    Matcher matcher=versionPattern.matcher(maxVersion);
    if (!matcher.matches()) {
      return MAX_INVALID;
    }
  }
  if (!compareMinMax()) {
    return MIN_MAX_INVALID;
  }
  return OK;
}",0.9424405218726016
141813,"/** 
 * only care about the name, ignore others
 */
@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof ImportPackage)) {
    return false;
  }
  if (name == null) {
    return false;
  }
  return name.equals(((ImportPackage)obj).getName());
}","/** 
 * only care about the name, ignore others
 */
@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (obj == this) {
    return true;
  }
  if (obj.getClass() != getClass()) {
    return false;
  }
  if (name == null) {
    return false;
  }
  return name.equals(((OsgiDependencies<?>)obj).getName());
}",0.5557163531114327
141814,"/** 
 * normalize the version to ""*.*.*"" if it is not.
 * @param version
 * @return
 */
protected String normalizeVersion(String version){
  if (version == null)   return null;
  int dotCount=0;
  int length=version.length();
  for (int i=0; i < length; i++) {
    if ('.' == version.charAt(i)) {
      dotCount++;
    }
  }
  dotCount=2 - dotCount;
  if (dotCount == 0) {
    return version;
  }
  StringBuilder sb=new StringBuilder();
  sb.append(version);
  for (int i=0; i < dotCount; i++) {
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","/** 
 * normalize the version to ""*.*.*"" if it is not.
 * @param version
 * @return
 */
protected String normalizeVersion(String version){
  if (version == null || version.trim().equals(""String_Node_Str""))   return null;
  int dotCount=0;
  int length=version.length();
  for (int i=0; i < length; i++) {
    if ('.' == version.charAt(i)) {
      dotCount++;
    }
  }
  dotCount=2 - dotCount;
  if (dotCount == 0) {
    return version;
  }
  StringBuilder sb=new StringBuilder();
  sb.append(version);
  for (int i=0; i < dotCount; i++) {
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}",0.9621342512908778
141815,"/** 
 * validate the dependency information is valid or not
 * @return {@link #OK} {@link #NAME_NULL} {@link #MIN_INVALID}{@link #MAX_INVALID} {@link #MIN_MAX_INVALID}
 */
public int isValid(){
  if (name == null) {
    return NAME_NULL;
  }
  if (!namePattern.matcher(name).matches()) {
    return NAME_INVALID;
  }
  if (minVersion != null && !minVersion.trim().equals(""String_Node_Str"")) {
    Matcher matcher=versionPattern.matcher(minVersion);
    if (!matcher.matches()) {
      return MIN_INVALID;
    }
  }
  if (maxVersion != null && !maxVersion.trim().equals(""String_Node_Str"")) {
    Matcher matcher=versionPattern.matcher(maxVersion);
    if (!matcher.matches()) {
      return MAX_INVALID;
    }
  }
  if (!compareMinMax()) {
    return MIN_MAX_INVALID;
  }
  return OK;
}","/** 
 * validate the dependency information is valid or not
 * @return {@link #OK} {@link #NAME_NULL} {@link #MIN_INVALID}{@link #MAX_INVALID} {@link #MIN_MAX_INVALID}
 */
public int isValid(){
  if (name == null || name.trim().equals(""String_Node_Str"")) {
    return NAME_NULL;
  }
  if (!namePattern.matcher(name).matches()) {
    return NAME_INVALID;
  }
  if (minVersion != null && !minVersion.trim().equals(""String_Node_Str"")) {
    Matcher matcher=versionPattern.matcher(minVersion);
    if (!matcher.matches()) {
      return MIN_INVALID;
    }
  }
  if (maxVersion != null && !maxVersion.trim().equals(""String_Node_Str"")) {
    Matcher matcher=versionPattern.matcher(maxVersion);
    if (!matcher.matches()) {
      return MAX_INVALID;
    }
  }
  if (!compareMinMax()) {
    return MIN_MAX_INVALID;
  }
  return OK;
}",0.9745499689633768
141816,"@Override public void doSaveAs(){
  SaveAsProcessAction saveAsAction=new SaveAsProcessAction(this);
  saveAsAction.run();
}","@Override public void doSaveAs(){
  SaveAsRoutesAction saveAsAction=new SaveAsRoutesAction(this);
  saveAsAction.run();
}",0.9426229508196722
141817,"public CamelMultiPageTalendEditor getParent(){
  return (CamelMultiPageTalendEditor)super.getParent();
}","@Override public CamelMultiPageTalendEditor getParent(){
  return (CamelMultiPageTalendEditor)super.getParent();
}",0.9541284403669724
141818,"public Process getProcess(){
  return (Process)super.getProcess();
}","@Override public Process getProcess(){
  return (Process)super.getProcess();
}",0.9315068493150684
141819,"@Override public void doSaveAs(){
  SaveAsProcessAction saveAsAction=new SaveAsProcessAction(this);
  saveAsAction.run();
}","@Override public void doSaveAs(){
  SaveAsRoutesAction saveAsAction=new SaveAsRoutesAction(this);
  saveAsAction.run();
}",0.9426229508196722
141820,"@Override public boolean performFinish(){
  if (mainPage.isCreateNewVersionJob()) {
    if (!alreadyEditedByUser) {
      refreshNewJob();
      try {
        ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
    try {
      ProxyRepositoryFactory.getInstance().lock(processObject);
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    LoginException e) {
      ExceptionHandler.process(e);
    }
    boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
    openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
    try {
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    StructuredSelection selection=(StructuredSelection)mainPage.getSelection();
    RepositoryNode node=(RepositoryNode)selection.getFirstElement();
    boolean lastVersion=node.getObject().getVersion().equals(processObject.getVersion());
    processObject.getProperty().setVersion(originalVersion);
    if (lastVersion) {
      lockObject(processObject);
    }
    ERepositoryStatus status=node.getObject().getRepositoryStatus();
    boolean isLocked=false;
    if (status == ERepositoryStatus.LOCK_BY_USER) {
      isLocked=true;
    }
    openAnotherVersion(node,!lastVersion || !isLocked);
  }
  return true;
}","@Override public boolean performFinish(){
  if (mainPage.isCreateNewVersionJob()) {
    IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
      public void run(      final IProgressMonitor monitor) throws CoreException {
        if (!alreadyEditedByUser) {
          refreshNewJob();
          try {
            ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
        try {
          ProxyRepositoryFactory.getInstance().lock(processObject);
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
catch (        LoginException e) {
          ExceptionHandler.process(e);
        }
        boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
        openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
        try {
          ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
;
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    try {
      ISchedulingRule schedulingRule=workspace.getRoot();
      workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
    }
 catch (    CoreException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
 else {
    StructuredSelection selection=(StructuredSelection)mainPage.getSelection();
    RepositoryNode node=(RepositoryNode)selection.getFirstElement();
    boolean lastVersion=node.getObject().getVersion().equals(processObject.getVersion());
    processObject.getProperty().setVersion(originalVersion);
    if (lastVersion) {
      lockObject(processObject);
    }
    ERepositoryStatus status=node.getObject().getRepositoryStatus();
    boolean isLocked=false;
    if (status == ERepositoryStatus.LOCK_BY_USER) {
      isLocked=true;
    }
    openAnotherVersion(node,!lastVersion || !isLocked);
  }
  return true;
}",0.850798808556729
141821,"/** 
 * To optimize, right now it will write the xsd file many times. Since there is no clues if the parameters comes from the same xsd, generate it everytime right now.
 * @param oper
 * @param hashMap
 */
private void populateMessage2(ParameterInfo parameter,QName portTypeQName,Operation oper,Map<byte[],String> schemaToFileMap){
  String name=parameter.getName();
  XmlFileConnection connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connection.setXmlFilePath(name + ""String_Node_Str"");
  XmlFileConnectionItem connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(name);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  connection.setFileContent(parameter.getSchema());
  XSDSchema xsdSchema;
  try {
    String filePath=schemaToFileMap.get(parameter.getSchema());
    if (filePath == null) {
      return;
    }
    xsdSchema=populationUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node,true);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  MalformedURLException e1) {
    ExceptionHandler.process(e1);
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  String nextId=factory.getNextId();
  connectionProperty.setId(nextId);
  try {
    String folderString=parameter.getNameSpace() + ""String_Node_Str"" + portTypeQName.getLocalPart();
    try {
      URI uri=new URI(folderString);
      String scheme=uri.getScheme();
      if (scheme != null) {
        folderString=folderString.substring(scheme.length());
      }
    }
 catch (    URISyntaxException e) {
    }
    if (folderString.startsWith(""String_Node_Str"")) {
      folderString=folderString.substring(1);
    }
    folderString=FolderNameUtil.replaceAllLimited(folderString);
    IPath path=new Path(folderString + ""String_Node_Str"" + oper.getName());
    factory.create(connectionItem,path);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    RepositoryManager.refresh(ERepositoryObjectType.METADATA_FILE_XML);
  }
 catch (  PersistenceException e) {
  }
}","/** 
 * To optimize, right now it will write the xsd file many times. Since there is no clues if the parameters comes from the same xsd, generate it everytime right now.
 * @param oper
 * @param hashMap
 */
private void populateMessage2(ParameterInfo parameter,QName portTypeQName,Operation oper,Map<byte[],String> schemaToFileMap){
  String name=parameter.getName();
  XmlFileConnection connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connection.setXmlFilePath(name + ""String_Node_Str"");
  XmlFileConnectionItem connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(name);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  connection.setFileContent(parameter.getSchema());
  XSDSchema xsdSchema;
  try {
    String filePath=schemaToFileMap.get(parameter.getSchema());
    if (filePath == null) {
      return;
    }
    xsdSchema=populationUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node,true);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      table.setId(ProxyRepositoryFactory.getInstance().getNextId());
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  MalformedURLException e1) {
    ExceptionHandler.process(e1);
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  String nextId=factory.getNextId();
  connectionProperty.setId(nextId);
  try {
    String folderString=parameter.getNameSpace() + ""String_Node_Str"" + portTypeQName.getLocalPart();
    try {
      URI uri=new URI(folderString);
      String scheme=uri.getScheme();
      if (scheme != null) {
        folderString=folderString.substring(scheme.length());
      }
    }
 catch (    URISyntaxException e) {
    }
    if (folderString.startsWith(""String_Node_Str"")) {
      folderString=folderString.substring(1);
    }
    folderString=FolderNameUtil.replaceAllLimited(folderString);
    IPath path=new Path(folderString + ""String_Node_Str"" + oper.getName());
    factory.create(connectionItem,path);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    RepositoryManager.refresh(ERepositoryObjectType.METADATA_FILE_XML);
  }
 catch (  PersistenceException e) {
  }
}",0.9916231637732184
141822,"public void run(IIntroSite site,Properties params){
  PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
  selectRootObject(params);
  doRun();
}","public void run(IIntroSite site,Properties params){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
    selectRootObject(params);
    doRun();
  }
}",0.6550079491255962
141823,"public void run(IIntroSite site,Properties params){
  PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
  selectRootObject(params);
  doRun();
}","public void run(IIntroSite site,Properties params){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
    selectRootObject(params);
    doRun();
  }
}",0.6550079491255962
141824,"@Override protected void doRun(){
  RepositoryNode beanNode=getCurrentRepositoryNode();
  if (isToolbar()) {
    if (beanNode != null && beanNode.getContentType() != ESBRepositoryNodeType.SERVICES) {
      beanNode=null;
    }
    if (beanNode == null) {
      beanNode=getRepositoryNodeForDefault(ESBRepositoryNodeType.SERVICES);
    }
  }
  ISelection selection;
  IWorkbenchPage activePage=getActivePage();
  if (activePage == null) {
    selection=getSelection();
  }
 else {
    selection=getRepositorySelection();
  }
  if (selection.isEmpty()) {
    return;
  }
  ESBWizard beanWizard=new ESBWizard(PlatformUI.getWorkbench(),true,selection);
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),beanWizard);
}","@Override protected void doRun(){
  RepositoryNode beanNode=getCurrentRepositoryNode();
  if (isToolbar()) {
    if (beanNode != null && beanNode.getContentType() != ESBRepositoryNodeType.SERVICES) {
      beanNode=null;
    }
    if (beanNode == null) {
      beanNode=getRepositoryNodeForDefault(ESBRepositoryNodeType.SERVICES);
    }
  }
  ISelection selection;
  IWorkbenchPage activePage=getActivePage();
  if (activePage == null) {
    selection=getSelection();
  }
 else {
    selection=getRepositorySelection();
  }
  if (selection.isEmpty()) {
    return;
  }
  ESBWizard beanWizard=new ESBWizard(PlatformUI.getWorkbench(),true,selection);
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),beanWizard);
  dlg.open();
}",0.9905913978494624
141825,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType != CamelRepositoryNodeType.repositoryBeansType) {
      canWork=false;
    }
  if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
    canWork=false;
  }
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType != CamelRepositoryNodeType.repositoryBeansType) {
      canWork=false;
    }
  if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
    canWork=false;
  }
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}",0.9946062567421792
141826,"protected void doRun(){
  RepositoryNode beanNode=getCurrentRepositoryNode();
  if (isToolbar()) {
    if (beanNode != null && beanNode.getContentType() != CamelRepositoryNodeType.repositoryBeansType) {
      beanNode=null;
    }
    if (beanNode == null) {
      beanNode=getRepositoryNodeForDefault(CamelRepositoryNodeType.repositoryBeansType);
    }
  }
  RepositoryNode node=null;
  IPath path=null;
  if (!isToolbar()) {
    ISelection selection=getSelection();
    Object obj=((IStructuredSelection)selection).getFirstElement();
    node=(RepositoryNode)obj;
    path=RepositoryNodeUtilities.getPath(node);
  }
  CamelNewBeanWizard beanWizard=new CamelNewBeanWizard(path);
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),beanWizard);
  if (dlg.open() == Window.OK) {
    RepositoryManager.refreshCreatedNode(CamelRepositoryNodeType.repositoryBeansType);
    try {
      openBeanEditor(beanWizard.getBean(),false);
    }
 catch (    PartInitException e) {
      MessageBoxExceptionHandler.process(e);
    }
catch (    SystemException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
}","@Override protected void doRun(){
  RepositoryNode beanNode=getCurrentRepositoryNode();
  if (isToolbar()) {
    if (beanNode != null && beanNode.getContentType() != CamelRepositoryNodeType.repositoryBeansType) {
      beanNode=null;
    }
    if (beanNode == null) {
      beanNode=getRepositoryNodeForDefault(CamelRepositoryNodeType.repositoryBeansType);
    }
  }
  RepositoryNode node=null;
  IPath path=null;
  if (!isToolbar()) {
    ISelection selection=getSelection();
    Object obj=((IStructuredSelection)selection).getFirstElement();
    node=(RepositoryNode)obj;
    path=RepositoryNodeUtilities.getPath(node);
  }
  CamelNewBeanWizard beanWizard=new CamelNewBeanWizard(path);
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),beanWizard);
  if (dlg.open() == Window.OK) {
    try {
      openBeanEditor(beanWizard.getBean(),false);
    }
 catch (    PartInitException e) {
      MessageBoxExceptionHandler.process(e);
    }
catch (    SystemException e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
}",0.9554022988505748
141827,"@Override public boolean performCancel(){
  ProcessorUtilities.resetExportConfig();
  RepositoryManager.refreshCreatedNode(CamelRepositoryNodeType.repositoryRoutesType);
  selection=null;
  mainPage=null;
  return true;
}","@Override public boolean performCancel(){
  ProcessorUtilities.resetExportConfig();
  selection=null;
  mainPage=null;
  return true;
}",0.7584269662921348
141828,"public void addPages(){
  super.addPages();
switch (((RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getProject().getLanguage()) {
case JAVA:
    mainPage=new JavaCamelJobScriptsExportWSWizardPage(selection,exportType);
  break;
}
addPage(mainPage);
}","@Override public void addPages(){
  super.addPages();
switch (((RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getProject().getLanguage()) {
case JAVA:
    mainPage=new JavaCamelJobScriptsExportWSWizardPage(selection,exportType);
  break;
}
addPage(mainPage);
}",0.983108108108108
141829,"public boolean performFinish(){
  boolean finish=mainPage.finish();
  return finish;
}","@Override public boolean performFinish(){
  boolean finish=mainPage.finish();
  return finish;
}",0.945054945054945
141830,"private void unlockObject(){
  IProxyRepositoryFactory repositoryFactory=CorePlugin.getDefault().getRepositoryService().getProxyRepositoryFactory();
  try {
    if (repositoryFactory.getStatus(processObject).equals(ERepositoryStatus.LOCK_BY_USER)) {
      repositoryFactory.unlock(processObject);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  LoginException e) {
    ExceptionHandler.process(e);
  }
  RepositoryManager.refreshCreatedNode(ERepositoryObjectType.PROCESS);
}","private void unlockObject(){
  IProxyRepositoryFactory repositoryFactory=CorePlugin.getDefault().getRepositoryService().getProxyRepositoryFactory();
  try {
    if (repositoryFactory.getStatus(processObject).equals(ERepositoryStatus.LOCK_BY_USER)) {
      repositoryFactory.unlock(processObject);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  LoginException e) {
    ExceptionHandler.process(e);
  }
}",0.9264248704663212
141831,"protected void doRun(){
  RepositoryNode beanNode=getCurrentRepositoryNode();
  if (isToolbar()) {
    if (beanNode != null && beanNode.getContentType() != ESBRepositoryNodeType.SERVICES) {
      beanNode=null;
    }
    if (beanNode == null) {
      beanNode=getRepositoryNodeForDefault(ESBRepositoryNodeType.SERVICES);
    }
  }
  ISelection selection;
  IWorkbenchPage activePage=getActivePage();
  if (activePage == null) {
    selection=getSelection();
  }
 else {
    selection=getRepositorySelection();
  }
  if (selection.isEmpty()) {
    return;
  }
  ESBWizard beanWizard=new ESBWizard(PlatformUI.getWorkbench(),true,selection);
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),beanWizard);
  if (dlg.open() == Window.OK) {
    RepositoryManager.refreshCreatedNode(ESBRepositoryNodeType.SERVICES);
  }
}","@Override protected void doRun(){
  RepositoryNode beanNode=getCurrentRepositoryNode();
  if (isToolbar()) {
    if (beanNode != null && beanNode.getContentType() != ESBRepositoryNodeType.SERVICES) {
      beanNode=null;
    }
    if (beanNode == null) {
      beanNode=getRepositoryNodeForDefault(ESBRepositoryNodeType.SERVICES);
    }
  }
  ISelection selection;
  IWorkbenchPage activePage=getActivePage();
  if (activePage == null) {
    selection=getSelection();
  }
 else {
    selection=getRepositorySelection();
  }
  if (selection.isEmpty()) {
    return;
  }
  ESBWizard beanWizard=new ESBWizard(PlatformUI.getWorkbench(),true,selection);
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),beanWizard);
}",0.9231746031746032
141832,"protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != currentNodeType) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(currentNodeType);
    }
  }
  WizardDialog wizardDialog;
  if (isToolbar()) {
    init(repositoryNode);
    OpenWSDLWizard openWizard=new OpenWSDLWizard(PlatformUI.getWorkbench(),repositoryNode);
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),openWizard);
  }
 else {
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),new OpenWSDLWizard(PlatformUI.getWorkbench(),repositoryNode));
  }
  if (!creation) {
    RepositoryManager.refreshSavedNode(repositoryNode);
  }
  wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
  wizardDialog.create();
  wizardDialog.open();
  RepositoryManager.refreshCreatedNode(ESBRepositoryNodeType.SERVICES);
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != currentNodeType) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(currentNodeType);
    }
  }
  WizardDialog wizardDialog;
  if (isToolbar()) {
    init(repositoryNode);
    OpenWSDLWizard openWizard=new OpenWSDLWizard(PlatformUI.getWorkbench(),repositoryNode);
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),openWizard);
  }
 else {
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),new OpenWSDLWizard(PlatformUI.getWorkbench(),repositoryNode));
  }
  if (!creation) {
    RepositoryManager.refreshSavedNode(repositoryNode);
  }
  wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
  wizardDialog.create();
  wizardDialog.open();
}",0.9585439838220424
141833,"public void widgetSelected(SelectionEvent e){
  wsdlText.setVisible(true);
  checkImport.setVisible(true);
  createWSDL=false;
  path=wsdlText.getText();
}","@Override public void widgetSelected(SelectionEvent e){
  wsdlText.setVisible(true);
  checkImport.setVisible(true);
  createWSDL=false;
  path=wsdlText.getText();
}",0.96875
141834,"@SuppressWarnings(""String_Node_Str"") public boolean finish(){
  item.getProperty().setLabel(item.getProperty().getDisplayName());
  String label=item.getProperty().getLabel();
  String version=item.getProperty().getVersion();
  String wsdlFileName=label + ""String_Node_Str"" + version+ ""String_Node_Str"";
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (creation) {
    item.setConnection(ServicesFactory.eINSTANCE.createServiceConnection());
    item.getProperty().setId(factory.getNextId());
    try {
      factory.create(item,pathToSave);
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
    repositoryNode=new RepositoryNode(new RepositoryViewObject(item.getProperty()),repositoryNode.getParent(),ENodeType.REPOSITORY_ELEMENT);
  }
  IProject currentProject;
  try {
    currentProject=ResourceModelUtils.getProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return false;
  }
  String foldPath=item.getState().getPath();
  String folder=""String_Node_Str"";
  if (!foldPath.equals(""String_Node_Str"")) {
    folder=""String_Node_Str"" + foldPath;
  }
  IFile fileTemp=currentProject.getFolder(""String_Node_Str"" + folder).getFile(wsdlFileName);
  try {
    item.setConnection(ServicesFactory.eINSTANCE.createServiceConnection());
    ((ServiceConnection)item.getConnection()).setWSDLPath(path);
    ((ServiceConnection)item.getConnection()).getServicePort().clear();
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    if (createWSDL) {
      TemplateProcessor.processTemplate(TEMPLATE_SERVICE_WSDL,Collections.singletonMap(""String_Node_Str"",(Object)label),new OutputStreamWriter(baos));
    }
 else {
      readWsdlFile(new File(path),baos);
    }
    ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(baos.toByteArray());
    if (!fileTemp.exists()) {
      fileTemp.create(byteArrayInputStream,true,null);
    }
 else {
      fileTemp.setContents(byteArrayInputStream,0,null);
    }
    ReferenceFileItem createReferenceFileItem=null;
    if (item.getReferenceResources().isEmpty()) {
      createReferenceFileItem=PropertiesFactory.eINSTANCE.createReferenceFileItem();
      ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
      createReferenceFileItem.setContent(byteArray);
      createReferenceFileItem.setExtension(""String_Node_Str"");
      item.getReferenceResources().add(createReferenceFileItem);
    }
 else {
      createReferenceFileItem=(ReferenceFileItem)item.getReferenceResources().get(0);
    }
    createReferenceFileItem.getContent().setInnerContent(baos.toByteArray());
    populateModelFromWsdl(factory,fileTemp.getLocation().toPortableString(),item,repositoryNode);
  }
 catch (  SystemException e) {
    ExceptionHandler.process(e);
  }
catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  try {
    factory.save(item);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    RepositoryManager.refreshCreatedNode(ESBRepositoryNodeType.SERVICES);
    repositoryNode=RepositoryNodeUtilities.getRepositoryNode(new RepositoryViewObject(item.getProperty()));
    OpenWSDLEditorAction action=new OpenWSDLEditorAction();
    action.setRepositoryNode(repositoryNode);
    action.run();
    if (checkImport.isVisible() && checkImport.getSelection()) {
      PublishMetadataAction publishAction=new PublishMetadataAction();
      publishAction.setNodes(Arrays.asList(new RepositoryNode[]{repositoryNode}));
      publishAction.run();
    }
    return true;
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") public boolean finish(){
  item.getProperty().setLabel(item.getProperty().getDisplayName());
  String label=item.getProperty().getLabel();
  String version=item.getProperty().getVersion();
  String wsdlFileName=label + ""String_Node_Str"" + version+ ""String_Node_Str"";
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (creation) {
    item.setConnection(ServicesFactory.eINSTANCE.createServiceConnection());
    item.getProperty().setId(factory.getNextId());
    try {
      factory.create(item,pathToSave);
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
    repositoryNode=new RepositoryNode(new RepositoryViewObject(item.getProperty()),repositoryNode.getParent(),ENodeType.REPOSITORY_ELEMENT);
  }
  IProject currentProject;
  try {
    currentProject=ResourceModelUtils.getProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return false;
  }
  String foldPath=item.getState().getPath();
  String folder=""String_Node_Str"";
  if (!foldPath.equals(""String_Node_Str"")) {
    folder=""String_Node_Str"" + foldPath;
  }
  IFile fileTemp=currentProject.getFolder(""String_Node_Str"" + folder).getFile(wsdlFileName);
  try {
    item.setConnection(ServicesFactory.eINSTANCE.createServiceConnection());
    ((ServiceConnection)item.getConnection()).setWSDLPath(path);
    ((ServiceConnection)item.getConnection()).getServicePort().clear();
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    if (createWSDL) {
      TemplateProcessor.processTemplate(TEMPLATE_SERVICE_WSDL,Collections.singletonMap(""String_Node_Str"",(Object)label),new OutputStreamWriter(baos));
    }
 else {
      readWsdlFile(new File(path),baos);
    }
    ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(baos.toByteArray());
    if (!fileTemp.exists()) {
      fileTemp.create(byteArrayInputStream,true,null);
    }
 else {
      fileTemp.setContents(byteArrayInputStream,0,null);
    }
    ReferenceFileItem createReferenceFileItem=null;
    if (item.getReferenceResources().isEmpty()) {
      createReferenceFileItem=PropertiesFactory.eINSTANCE.createReferenceFileItem();
      ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
      createReferenceFileItem.setContent(byteArray);
      createReferenceFileItem.setExtension(""String_Node_Str"");
      item.getReferenceResources().add(createReferenceFileItem);
    }
 else {
      createReferenceFileItem=(ReferenceFileItem)item.getReferenceResources().get(0);
    }
    createReferenceFileItem.getContent().setInnerContent(baos.toByteArray());
    populateModelFromWsdl(factory,fileTemp.getLocation().toPortableString(),item,repositoryNode);
  }
 catch (  SystemException e) {
    ExceptionHandler.process(e);
  }
catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  try {
    factory.save(item);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    repositoryNode=RepositoryNodeUtilities.getRepositoryNode(new RepositoryViewObject(item.getProperty()));
    OpenWSDLEditorAction action=new OpenWSDLEditorAction();
    action.setRepositoryNode(repositoryNode);
    action.run();
    if (checkImport.isVisible() && checkImport.getSelection()) {
      PublishMetadataAction publishAction=new PublishMetadataAction();
      publishAction.setNodes(Arrays.asList(new RepositoryNode[]{repositoryNode}));
      publishAction.run();
    }
    return true;
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  return false;
}",0.9901254336802776
141835,"public void createControl(Composite parent){
  Composite parentArea=new Composite(parent,SWT.NONE);
  parentArea.setLayout(new GridLayout(1,false));
  radioCreateWsdl=new Button(parentArea,SWT.RADIO);
  radioCreateWsdl.setText(Messages.AssignWsdlDialog_WsdlChoice_CreateNew);
  radioCreateWsdl.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      wsdlText.setVisible(false);
      checkImport.setVisible(false);
      createWSDL=true;
      path=""String_Node_Str"";
      setPageComplete(true);
    }
  }
);
  radioCreateWsdl.setSelection(createWSDL);
  radioImportWsdl=new Button(parentArea,SWT.RADIO);
  radioImportWsdl.setText(Messages.AssignWsdlDialog_WsdlChoice_ImportExistent);
  radioImportWsdl.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      wsdlText.setVisible(true);
      checkImport.setVisible(true);
      createWSDL=false;
      path=wsdlText.getText();
    }
  }
);
  radioImportWsdl.setSelection(!createWSDL);
  Composite wsdlFileArea=new Composite(parentArea,SWT.NONE);
  wsdlFileArea.setLayoutData(new GridData(SWT.FILL,SWT.NONE,true,false));
  GridLayout layout=new GridLayout(3,false);
  layout.marginLeft=15;
  layout.marginHeight=0;
  wsdlFileArea.setLayout(layout);
  String[] xmlExtensions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  wsdlText=new LabelledFileField(wsdlFileArea,Messages.AssignWsdlDialog_ExistentWsdlFilePath,xmlExtensions);
  wsdlText.setVisible(!createWSDL);
  wsdlText.setText(path);
  wsdlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      path=wsdlText.getText();
      setPageComplete(isPageComplete());
    }
  }
);
  Label lab=new Label(wsdlFileArea,SWT.NONE);
  checkImport=new Button(wsdlFileArea,SWT.CHECK);
  checkImport.setText(""String_Node_Str"");
  checkImport.setVisible(false);
  checkImport.setSelection(true);
  setControl(parentArea);
}","public void createControl(Composite parent){
  Composite parentArea=new Composite(parent,SWT.NONE);
  parentArea.setLayout(new GridLayout(1,false));
  radioCreateWsdl=new Button(parentArea,SWT.RADIO);
  radioCreateWsdl.setText(Messages.AssignWsdlDialog_WsdlChoice_CreateNew);
  radioCreateWsdl.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      wsdlText.setVisible(false);
      checkImport.setVisible(false);
      createWSDL=true;
      path=""String_Node_Str"";
      setPageComplete(true);
    }
  }
);
  radioCreateWsdl.setSelection(createWSDL);
  radioImportWsdl=new Button(parentArea,SWT.RADIO);
  radioImportWsdl.setText(Messages.AssignWsdlDialog_WsdlChoice_ImportExistent);
  radioImportWsdl.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      wsdlText.setVisible(true);
      checkImport.setVisible(true);
      createWSDL=false;
      path=wsdlText.getText();
    }
  }
);
  radioImportWsdl.setSelection(!createWSDL);
  Composite wsdlFileArea=new Composite(parentArea,SWT.NONE);
  wsdlFileArea.setLayoutData(new GridData(SWT.FILL,SWT.NONE,true,false));
  GridLayout layout=new GridLayout(3,false);
  layout.marginLeft=15;
  layout.marginHeight=0;
  wsdlFileArea.setLayout(layout);
  String[] xmlExtensions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  wsdlText=new LabelledFileField(wsdlFileArea,Messages.AssignWsdlDialog_ExistentWsdlFilePath,xmlExtensions);
  wsdlText.setVisible(!createWSDL);
  wsdlText.setText(path);
  wsdlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      path=wsdlText.getText();
      setPageComplete(isPageComplete());
    }
  }
);
  Label lab=new Label(wsdlFileArea,SWT.NONE);
  checkImport=new Button(wsdlFileArea,SWT.CHECK);
  checkImport.setText(""String_Node_Str"");
  checkImport.setVisible(false);
  checkImport.setSelection(true);
  setControl(parentArea);
}",0.9949367088607596
141836,"@Override public boolean performCancel(){
  ProcessorUtilities.resetExportConfig();
  RepositoryManager.refreshCreatedNode(ERepositoryObjectType.PROCESS);
  selection=null;
  mainPage=null;
  return true;
}","@Override public boolean performCancel(){
  ProcessorUtilities.resetExportConfig();
  selection=null;
  mainPage=null;
  return true;
}",0.7917888563049853
141837,"public void addPages(){
  super.addPages();
  mainPage=new ServiceExportWSWizardPage(selection);
  addPage((IWizardPage)mainPage);
}","@Override public void addPages(){
  super.addPages();
  mainPage=new ServiceExportWSWizardPage(selection);
  addPage(mainPage);
}",0.9118773946360154
141838,"public boolean performFinish(){
  try {
    @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=selection.toList();
    for (    RepositoryNode node : nodes) {
      new ExportServiceAction(node,mainPage.getDestinationValue()).runInWorkspace(null);
    }
    mainPage.finish();
  }
 catch (  CoreException e) {
    log.error(e);
    return false;
  }
  return true;
}","@Override public boolean performFinish(){
  try {
    @SuppressWarnings(""String_Node_Str"") List<RepositoryNode> nodes=selection.toList();
    for (    RepositoryNode node : nodes) {
      new ExportServiceAction(node,mainPage.getDestinationValue()).runInWorkspace(null);
    }
    mainPage.finish();
  }
 catch (  CoreException e) {
    log.error(e);
    return false;
  }
  return true;
}",0.9869791666666666
141839,"private void repositoryChange(RepositoryNode repNode,INode node){
  IElementParameter param=node.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
  ConnectionItem connectionItem=(ConnectionItem)repNode.getObject().getProperty().getItem();
  if (param != null) {
    param.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).setValue(EmfComponent.REPOSITORY);
    param.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName()).setValue(""String_Node_Str"");
    String serviceId=connectionItem.getProperty().getId();
    String portId=((PortRepositoryObject)repNode.getParent().getObject()).getId();
    String operationId=((OperationRepositoryObject)repNode.getObject()).getId();
    ChangeValuesFromRepository command2=new ChangeValuesFromRepository(node,null,param.getName() + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName(),""String_Node_Str"");
    command2.execute();
  }
}","private void repositoryChange(RepositoryNode repNode,INode node){
  IElementParameter param=node.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
  ConnectionItem connectionItem=(ConnectionItem)repNode.getObject().getProperty().getItem();
  if (param != null) {
    param.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).setValue(EmfComponent.REPOSITORY);
    param.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName()).setValue(""String_Node_Str"");
    connectionItem.getProperty().getId();
    ((PortRepositoryObject)repNode.getParent().getObject()).getId();
    ((OperationRepositoryObject)repNode.getObject()).getId();
    ChangeValuesFromRepository command2=new ChangeValuesFromRepository(node,null,param.getName() + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName(),""String_Node_Str"");
    command2.execute();
  }
}",0.9724669603524227
141840,"public void editJobName(String originaleObjectLabel,String newLabel){
  IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  Project project=ProjectManager.getInstance().getCurrentProject();
  List<IRepositoryViewObject> service=null;
  try {
    service=proxyRepositoryFactory.getAll(project,ESBRepositoryNodeType.SERVICES,true);
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  if (service != null && service.size() > 0) {
    for (    IRepositoryViewObject Object : service) {
      boolean flag=false;
      ServiceItem item=(ServiceItem)Object.getProperty().getItem();
      ServiceConnection serviceConnection=(ServiceConnection)item.getConnection();
      List<ServicePort> servicePorts=serviceConnection.getServicePort();
      for (      ServicePort port : servicePorts) {
        List<ServiceOperation> serviceOperations=port.getServiceOperation();
        for (        ServiceOperation operation : serviceOperations) {
          String originaleItemLabel=operation.getLabel();
          if (originaleItemLabel.contains(""String_Node_Str"")) {
            String[] array=originaleItemLabel.split(""String_Node_Str"");
            if (originaleObjectLabel.equals(array[1])) {
              operation.setLabel(array[0] + ""String_Node_Str"" + newLabel);
              flag=true;
            }
          }
        }
      }
      if (flag) {
        try {
          proxyRepositoryFactory.save(item);
        }
 catch (        PersistenceException e) {
          e.printStackTrace();
        }
      }
    }
  }
  RepositoryManager.refresh(ESBRepositoryNodeType.SERVICES);
}","public void editJobName(String originaleObjectLabel,String newLabel){
  IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  Project project=ProjectManager.getInstance().getCurrentProject();
  List<IRepositoryViewObject> service=null;
  try {
    service=proxyRepositoryFactory.getAll(project,ESBRepositoryNodeType.SERVICES,true);
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  if (service != null && service.size() > 0) {
    for (    IRepositoryViewObject Object : service) {
      boolean flag=false;
      ServiceItem item=(ServiceItem)Object.getProperty().getItem();
      ServiceConnection serviceConnection=(ServiceConnection)item.getConnection();
      List<ServicePort> servicePorts=serviceConnection.getServicePort();
      for (      ServicePort port : servicePorts) {
        List<ServiceOperation> serviceOperations=port.getServiceOperation();
        for (        ServiceOperation operation : serviceOperations) {
          String originaleItemLabel=operation.getLabel();
          if (originaleItemLabel.contains(""String_Node_Str"")) {
            String[] array=originaleItemLabel.split(""String_Node_Str"");
            if (originaleObjectLabel.equals(array[1])) {
              operation.setLabel(array[0] + ""String_Node_Str"" + newLabel);
              flag=true;
            }
          }
        }
      }
      if (flag) {
        try {
          proxyRepositoryFactory.save(item);
        }
 catch (        PersistenceException e) {
          e.printStackTrace();
        }
      }
    }
  }
}",0.9812134277794888
141841,"public void deleteOldRelation(String jobID){
  boolean flag=false;
  boolean portBreak=false;
  boolean serviceBreak=false;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    List<IRepositoryViewObject> allService=factory.getAll(ERepositoryObjectType.SERVICESOPERATION);
    for (    IRepositoryViewObject viewObject : allService) {
      ServiceItem serviceItem=(ServiceItem)viewObject.getProperty().getItem();
      ServiceConnection serviceConnection=(ServiceConnection)serviceItem.getConnection();
      List<ServicePort> ports=serviceConnection.getServicePort();
      for (      ServicePort port : ports) {
        List<ServiceOperation> operations=port.getServiceOperation();
        for (        ServiceOperation operation : operations) {
          String referenceJobId=operation.getReferenceJobId();
          if (referenceJobId != null && !referenceJobId.equals(""String_Node_Str"")) {
            if (referenceJobId.equals(jobID)) {
              operation.setLabel(operation.getName());
              operation.setReferenceJobId(null);
              flag=true;
              portBreak=true;
              break;
            }
          }
        }
        if (portBreak) {
          serviceBreak=true;
          break;
        }
      }
      if (serviceBreak) {
        factory.save(serviceItem,null);
        break;
      }
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  RepositoryManager.refresh(ESBRepositoryNodeType.SERVICES);
}","public void deleteOldRelation(String jobID){
  boolean portBreak=false;
  boolean serviceBreak=false;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    List<IRepositoryViewObject> allService=factory.getAll(ERepositoryObjectType.SERVICESOPERATION);
    for (    IRepositoryViewObject viewObject : allService) {
      ServiceItem serviceItem=(ServiceItem)viewObject.getProperty().getItem();
      ServiceConnection serviceConnection=(ServiceConnection)serviceItem.getConnection();
      List<ServicePort> ports=serviceConnection.getServicePort();
      for (      ServicePort port : ports) {
        List<ServiceOperation> operations=port.getServiceOperation();
        for (        ServiceOperation operation : operations) {
          String referenceJobId=operation.getReferenceJobId();
          if (referenceJobId != null && !referenceJobId.equals(""String_Node_Str"")) {
            if (referenceJobId.equals(jobID)) {
              operation.setLabel(operation.getName());
              operation.setReferenceJobId(null);
              portBreak=true;
              break;
            }
          }
        }
        if (portBreak) {
          serviceBreak=true;
          break;
        }
      }
      if (serviceBreak) {
        factory.save(serviceItem,null);
        break;
      }
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  RepositoryManager.refresh(ESBRepositoryNodeType.SERVICES);
}",0.9841590832490732
141842,"protected void doRun(){
  UIJob job=new UIJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",100);
      if (nodes == null) {
        nodes=(List<RepositoryNode>)selection.toList();
      }
      int step=100;
      int size=nodes.size();
      if (size > 0) {
        step/=size;
      }
      for (      RepositoryNode node : nodes) {
        monitor.worked(step);
        try {
          WSDLUtils.validateWsdl(node);
          Definition wsdlDefinition=WSDLUtils.getWsdlDefinition(node);
          process(wsdlDefinition);
        }
 catch (        CoreException e) {
          e.printStackTrace();
          monitor.done();
          nodes=null;
          return new Status(IStatus.ERROR,Activator.PLUGIN_ID,e.getMessage(),e);
        }
      }
      nodes=null;
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.schedule();
}","protected void doRun(){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      monitor.beginTask(""String_Node_Str"",100);
      if (nodes == null) {
        nodes=(List<RepositoryNode>)selection.toList();
      }
      int step=100;
      int size=nodes.size();
      if (size > 0) {
        step/=size;
      }
      for (      RepositoryNode node : nodes) {
        monitor.worked(step);
        WSDLUtils.validateWsdl(node);
        Definition wsdlDefinition=WSDLUtils.getWsdlDefinition(node);
        process(wsdlDefinition);
        if (monitor.isCanceled()) {
          break;
        }
      }
      nodes=null;
      monitor.done();
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        nodes=null;
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
    nodes=null;
  }
catch (  InterruptedException e) {
  }
}",0.4748971193415638
141843,"/** 
 * To optimize, right now it will write the xsd file many times. Since there is no clues if the parameters comes from the same xsd, generate it everytime right now.
 * @param oper
 * @param hashMap
 */
private void populateMessage2(ParameterInfo parameter,QName portTypeQName,Operation oper,Map<byte[],String> schemaToFileMap){
  String name=parameter.getName();
  XmlFileConnection connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connection.setXmlFilePath(name + ""String_Node_Str"");
  XmlFileConnectionItem connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(name);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  connection.setFileContent(parameter.getSchema());
  XSDSchema xsdSchema;
  try {
    String filePath=schemaToFileMap.get(parameter.getSchema());
    if (filePath == null) {
      return;
    }
    xsdSchema=populationUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  MalformedURLException e1) {
    ExceptionHandler.process(e1);
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  String nextId=factory.getNextId();
  connectionProperty.setId(nextId);
  try {
    String folderString=parameter.getNameSpace() + ""String_Node_Str"" + portTypeQName.getLocalPart();
    try {
      URI uri=new URI(folderString);
      String scheme=uri.getScheme();
      if (scheme != null) {
        folderString=folderString.substring(scheme.length());
      }
    }
 catch (    URISyntaxException e) {
    }
    if (folderString.startsWith(""String_Node_Str"")) {
      folderString=folderString.substring(1);
    }
    folderString=FolderNameUtil.replaceAllLimited(folderString);
    IPath path=new Path(folderString + ""String_Node_Str"" + oper.getName());
    factory.create(connectionItem,path);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    RepositoryManager.refresh(ERepositoryObjectType.METADATA_FILE_XML);
  }
 catch (  PersistenceException e) {
  }
}","/** 
 * To optimize, right now it will write the xsd file many times. Since there is no clues if the parameters comes from the same xsd, generate it everytime right now.
 * @param oper
 * @param hashMap
 */
private void populateMessage2(ParameterInfo parameter,QName portTypeQName,Operation oper,Map<byte[],String> schemaToFileMap){
  String name=parameter.getName();
  XmlFileConnection connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connection.setXmlFilePath(name + ""String_Node_Str"");
  XmlFileConnectionItem connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(name);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  connection.setFileContent(parameter.getSchema());
  XSDSchema xsdSchema;
  try {
    String filePath=schemaToFileMap.get(parameter.getSchema());
    if (filePath == null) {
      return;
    }
    xsdSchema=populationUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  MalformedURLException e1) {
    ExceptionHandler.process(e1);
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  String nextId=factory.getNextId();
  connectionProperty.setId(nextId);
  try {
    String folderString=parameter.getNameSpace() + ""String_Node_Str"" + portTypeQName.getLocalPart();
    try {
      URI uri=new URI(folderString);
      String scheme=uri.getScheme();
      if (scheme != null) {
        folderString=folderString.substring(scheme.length());
      }
    }
 catch (    URISyntaxException e) {
    }
    if (folderString.startsWith(""String_Node_Str"")) {
      folderString=folderString.substring(1);
    }
    folderString=FolderNameUtil.replaceAllLimited(folderString);
    IPath path=new Path(folderString + ""String_Node_Str"" + oper.getName());
    factory.create(connectionItem,path,true);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    RepositoryManager.refresh(ERepositoryObjectType.METADATA_FILE_XML);
  }
 catch (  PersistenceException e) {
  }
}",0.9993874800931032
141844,"private void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop) throws OdaException {
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + ""String_Node_Str"" + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setXMLPath(""String_Node_Str"" + node.getValue());
  xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + ""String_Node_Str"" + node.getValue(),subElementsInLoop);
}
}
}","private void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop) throws OdaException {
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + ""String_Node_Str"" + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
  MetadataTable metadataTable=ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0];
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setXMLPath(""String_Node_Str"" + node.getValue());
  column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
String uniqueName=extractColumnName(nameWithoutPrefixForColumn,metadataTable.getColumns());
column.setLabel(uniqueName);
xmlNode.setRelatedColumn(uniqueName);
metadataTable.getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
uniqueName=extractColumnName(nameWithoutPrefixForColumn,metadataTable.getColumns());
column.setLabel(uniqueName);
xmlNode.setRelatedColumn(uniqueName);
metadataTable.getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + ""String_Node_Str"" + node.getValue(),subElementsInLoop);
}
}
}",0.7210806697108066
141845,"public void process(Definition wsdlDefinition){
  populationUtil=new XSDPopulationUtil2();
  SchemaUtil schemaUtil=new SchemaUtil(wsdlDefinition);
  int index=0;
  Map<byte[],String> fileToSchemaMap=new HashMap<byte[],String>();
  for (  XmlSchema schema : schemaUtil.getSchemas().keySet()) {
    String file=initFileContent(schemaUtil.getSchemas().get(schema),index);
    fileToSchemaMap.put(schemaUtil.getSchemas().get(schema),file);
    try {
      populationUtil.addSchema(file);
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
    index++;
  }
  Map<QName,Binding> bindings=wsdlDefinition.getBindings();
  List<PortType> portTypes=new ArrayList<PortType>(bindings.size());
  for (  Binding binding : bindings.values()) {
    PortType portType=binding.getPortType();
    if (!portTypes.contains(portType)) {
      portTypes.add(portType);
      List<BindingOperation> operations=binding.getBindingOperations();
      for (      BindingOperation operation : operations) {
        Operation oper=operation.getOperation();
        Input inDef=oper.getInput();
        if (inDef != null) {
          Message inMsg=inDef.getMessage();
          if (inMsg != null) {
            populateMessage2(schemaUtil.getParameterFromMessage(inMsg),portType.getQName(),oper,fileToSchemaMap);
          }
        }
        Output outDef=oper.getOutput();
        if (outDef != null) {
          Message outMsg=outDef.getMessage();
          if (outMsg != null) {
            populateMessage2(schemaUtil.getParameterFromMessage(outMsg),portType.getQName(),oper,fileToSchemaMap);
          }
        }
        Collection<Fault> faults=oper.getFaults().values();
        for (        Fault fault : faults) {
          Message faultMsg=fault.getMessage();
          if (faultMsg != null) {
            populateMessage2(schemaUtil.getParameterFromMessage(faultMsg),portType.getQName(),oper,fileToSchemaMap);
          }
        }
      }
    }
  }
}","public void process(Definition wsdlDefinition){
  populationUtil=new XSDPopulationUtil2();
  List<String> alreadyCreated=new ArrayList<String>();
  SchemaUtil schemaUtil=new SchemaUtil(wsdlDefinition);
  int index=0;
  Map<byte[],String> fileToSchemaMap=new HashMap<byte[],String>();
  for (  XmlSchema schema : schemaUtil.getSchemas().keySet()) {
    String file=initFileContent(schemaUtil.getSchemas().get(schema),index);
    fileToSchemaMap.put(schemaUtil.getSchemas().get(schema),file);
    try {
      populationUtil.addSchema(file);
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
    index++;
  }
  Map<QName,Binding> bindings=wsdlDefinition.getBindings();
  List<PortType> portTypes=new ArrayList<PortType>(bindings.size());
  for (  Binding binding : bindings.values()) {
    PortType portType=binding.getPortType();
    if (!portTypes.contains(portType)) {
      portTypes.add(portType);
      List<BindingOperation> operations=binding.getBindingOperations();
      for (      BindingOperation operation : operations) {
        Operation oper=operation.getOperation();
        Input inDef=oper.getInput();
        if (inDef != null) {
          Message inMsg=inDef.getMessage();
          if (inMsg != null) {
            ParameterInfo parameterFromMessage=schemaUtil.getParameterFromMessage(inMsg);
            if (alreadyCreated.contains(parameterFromMessage.getName())) {
              continue;
            }
 else {
              alreadyCreated.add(parameterFromMessage.getName());
            }
            populateMessage2(parameterFromMessage,portType.getQName(),oper,fileToSchemaMap);
          }
        }
        Output outDef=oper.getOutput();
        if (outDef != null) {
          Message outMsg=outDef.getMessage();
          if (outMsg != null) {
            ParameterInfo parameterFromMessage=schemaUtil.getParameterFromMessage(outMsg);
            if (alreadyCreated.contains(parameterFromMessage.getName())) {
              continue;
            }
 else {
              alreadyCreated.add(parameterFromMessage.getName());
            }
            populateMessage2(parameterFromMessage,portType.getQName(),oper,fileToSchemaMap);
          }
        }
        Collection<Fault> faults=oper.getFaults().values();
        for (        Fault fault : faults) {
          Message faultMsg=fault.getMessage();
          if (faultMsg != null) {
            ParameterInfo parameterFromMessage=schemaUtil.getParameterFromMessage(faultMsg);
            if (alreadyCreated.contains(parameterFromMessage.getName())) {
              continue;
            }
 else {
              alreadyCreated.add(parameterFromMessage.getName());
            }
            populateMessage2(parameterFromMessage,portType.getQName(),oper,fileToSchemaMap);
          }
        }
      }
    }
  }
}",0.7897929303492993
141846,"private void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop) throws OdaException {
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + ""String_Node_Str"" + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
  column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + ""String_Node_Str"" + node.getValue(),subElementsInLoop);
}
}
}","private void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop) throws OdaException {
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + ""String_Node_Str"" + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setXMLPath(""String_Node_Str"" + node.getValue());
  xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + ""String_Node_Str"" + node.getValue(),subElementsInLoop);
}
}
}",0.5616787605412826
141847,"public synchronized void updateStatOnConnection(String connectionId,int mode,String nodeName) throws AttributeNotFoundException, InstanceNotFoundException, MBeanException, ReflectionException, MalformedObjectNameException, NullPointerException {
  StatBean bean;
  String key=connectionId;
  javax.management.ObjectName routeMBean=null;
  java.util.Iterator<javax.management.ObjectName> iterator=this.processors.iterator();
  while (iterator.hasNext()) {
    routeMBean=iterator.next();
    if ((""String_Node_Str"" + nodeName + ""String_Node_Str"").equals(routeMBean.getKeyProperty(""String_Node_Str""))) {
      break;
    }
  }
  if (connectionId.contains(""String_Node_Str"")) {
    String firstKey=null;
    String connectionName=connectionId.split(""String_Node_Str"")[0];
    int nbKeys=0;
    for (    String myKey : keysList) {
      if (myKey.startsWith(connectionName + ""String_Node_Str"")) {
        if (firstKey == null) {
          firstKey=myKey;
        }
        nbKeys++;
        if (nbKeys == 4) {
          break;
        }
      }
    }
    if (nbKeys == 4) {
      keysList.remove(firstKey);
    }
  }
  if (keysList.contains(key)) {
    int keyNb=keysList.indexOf(key);
    keysList.remove(key);
    keysList.add(keyNb,key);
  }
 else {
    keysList.add(key);
  }
  if (processStats.containsKey(key)) {
    bean=processStats.get(key);
  }
 else {
    bean=new StatBean(connectionId);
  }
  bean.setState(mode);
  bean.setEndTime(System.currentTimeMillis());
  if (routeMBean != null) {
    bean.setNbLine(Integer.parseInt(mBeanServer.getAttribute(routeMBean,""String_Node_Str"").toString()));
  }
  processStats.put(key,bean);
  if (mode == BEGIN) {
    bean.setNbLine(0);
    long newStatsUpdate=System.currentTimeMillis();
    if (lastStatsUpdate == 0 || lastStatsUpdate + 250 < newStatsUpdate) {
      sendMessages();
      lastStatsUpdate=newStatsUpdate;
    }
  }
  if (debug) {
    sendMessages();
  }
}","public synchronized void updateStatOnConnection(String connectionId,int mode,String nodeName) throws AttributeNotFoundException, InstanceNotFoundException, MBeanException, ReflectionException, MalformedObjectNameException, NullPointerException {
  StatBean bean;
  String key=connectionId;
  javax.management.ObjectName routeMBean=null;
  java.util.Iterator<javax.management.ObjectName> iterator=this.processors.iterator();
  while (iterator.hasNext()) {
    routeMBean=iterator.next();
    if ((""String_Node_Str"" + nodeName + ""String_Node_Str"").equals(routeMBean.getKeyProperty(""String_Node_Str""))) {
      break;
    }
    routeMBean=null;
  }
  if (connectionId.contains(""String_Node_Str"")) {
    String firstKey=null;
    String connectionName=connectionId.split(""String_Node_Str"")[0];
    int nbKeys=0;
    for (    String myKey : keysList) {
      if (myKey.startsWith(connectionName + ""String_Node_Str"")) {
        if (firstKey == null) {
          firstKey=myKey;
        }
        nbKeys++;
        if (nbKeys == 4) {
          break;
        }
      }
    }
    if (nbKeys == 4) {
      keysList.remove(firstKey);
    }
  }
  if (keysList.contains(key)) {
    int keyNb=keysList.indexOf(key);
    keysList.remove(key);
    keysList.add(keyNb,key);
  }
 else {
    keysList.add(key);
  }
  if (processStats.containsKey(key)) {
    bean=processStats.get(key);
  }
 else {
    bean=new StatBean(connectionId);
  }
  bean.setState(mode);
  bean.setEndTime(System.currentTimeMillis());
  if (routeMBean != null) {
    bean.setNbLine(Integer.parseInt(mBeanServer.getAttribute(routeMBean,""String_Node_Str"").toString()));
  }
  processStats.put(key,bean);
  if (mode == BEGIN) {
    bean.setNbLine(0);
    long newStatsUpdate=System.currentTimeMillis();
    if (lastStatsUpdate == 0 || lastStatsUpdate + 250 < newStatsUpdate) {
      sendMessages();
      lastStatsUpdate=newStatsUpdate;
    }
  }
  if (debug) {
    sendMessages();
  }
}",0.9945581756931848
141848,"private void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop) throws OdaException {
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + ""String_Node_Str"" + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setXMLPath(""String_Node_Str"" + node.getValue());
  xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + ""String_Node_Str"" + node.getValue(),subElementsInLoop);
}
}
}","private void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop) throws OdaException {
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + ""String_Node_Str"" + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
  MetadataTable metadataTable=ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0];
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setXMLPath(""String_Node_Str"" + node.getValue());
  column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
String uniqueName=extractColumnName(nameWithoutPrefixForColumn,metadataTable.getColumns());
column.setLabel(uniqueName);
xmlNode.setRelatedColumn(uniqueName);
metadataTable.getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
uniqueName=extractColumnName(nameWithoutPrefixForColumn,metadataTable.getColumns());
column.setLabel(uniqueName);
xmlNode.setRelatedColumn(uniqueName);
metadataTable.getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + ""String_Node_Str"" + node.getValue(),subElementsInLoop);
}
}
}",0.7210806697108066
141849,"public void process(Definition wsdlDefinition){
  populationUtil=new XSDPopulationUtil2();
  SchemaUtil schemaUtil=new SchemaUtil(wsdlDefinition);
  int index=0;
  Map<byte[],String> fileToSchemaMap=new HashMap<byte[],String>();
  for (  XmlSchema schema : schemaUtil.getSchemas().keySet()) {
    String file=initFileContent(schemaUtil.getSchemas().get(schema),index);
    fileToSchemaMap.put(schemaUtil.getSchemas().get(schema),file);
    try {
      populationUtil.addSchema(file);
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
    index++;
  }
  Map<QName,Binding> bindings=wsdlDefinition.getBindings();
  List<PortType> portTypes=new ArrayList<PortType>(bindings.size());
  for (  Binding binding : bindings.values()) {
    PortType portType=binding.getPortType();
    if (!portTypes.contains(portType)) {
      portTypes.add(portType);
      List<BindingOperation> operations=binding.getBindingOperations();
      for (      BindingOperation operation : operations) {
        Operation oper=operation.getOperation();
        Input inDef=oper.getInput();
        if (inDef != null) {
          Message inMsg=inDef.getMessage();
          if (inMsg != null) {
            populateMessage2(schemaUtil.getParameterFromMessage(inMsg),portType.getQName(),oper,fileToSchemaMap);
          }
        }
        Output outDef=oper.getOutput();
        if (outDef != null) {
          Message outMsg=outDef.getMessage();
          if (outMsg != null) {
            populateMessage2(schemaUtil.getParameterFromMessage(outMsg),portType.getQName(),oper,fileToSchemaMap);
          }
        }
        Collection<Fault> faults=oper.getFaults().values();
        for (        Fault fault : faults) {
          Message faultMsg=fault.getMessage();
          if (faultMsg != null) {
            populateMessage2(schemaUtil.getParameterFromMessage(faultMsg),portType.getQName(),oper,fileToSchemaMap);
          }
        }
      }
    }
  }
}","public void process(Definition wsdlDefinition){
  populationUtil=new XSDPopulationUtil2();
  List<String> alreadyCreated=new ArrayList<String>();
  SchemaUtil schemaUtil=new SchemaUtil(wsdlDefinition);
  int index=0;
  Map<byte[],String> fileToSchemaMap=new HashMap<byte[],String>();
  for (  XmlSchema schema : schemaUtil.getSchemas().keySet()) {
    String file=initFileContent(schemaUtil.getSchemas().get(schema),index);
    fileToSchemaMap.put(schemaUtil.getSchemas().get(schema),file);
    try {
      populationUtil.addSchema(file);
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
    index++;
  }
  Map<QName,Binding> bindings=wsdlDefinition.getBindings();
  List<PortType> portTypes=new ArrayList<PortType>(bindings.size());
  for (  Binding binding : bindings.values()) {
    PortType portType=binding.getPortType();
    if (!portTypes.contains(portType)) {
      portTypes.add(portType);
      List<BindingOperation> operations=binding.getBindingOperations();
      for (      BindingOperation operation : operations) {
        Operation oper=operation.getOperation();
        Input inDef=oper.getInput();
        if (inDef != null) {
          Message inMsg=inDef.getMessage();
          if (inMsg != null) {
            ParameterInfo parameterFromMessage=schemaUtil.getParameterFromMessage(inMsg);
            if (alreadyCreated.contains(parameterFromMessage.getName())) {
              continue;
            }
 else {
              alreadyCreated.add(parameterFromMessage.getName());
            }
            populateMessage2(parameterFromMessage,portType.getQName(),oper,fileToSchemaMap);
          }
        }
        Output outDef=oper.getOutput();
        if (outDef != null) {
          Message outMsg=outDef.getMessage();
          if (outMsg != null) {
            ParameterInfo parameterFromMessage=schemaUtil.getParameterFromMessage(outMsg);
            if (alreadyCreated.contains(parameterFromMessage.getName())) {
              continue;
            }
 else {
              alreadyCreated.add(parameterFromMessage.getName());
            }
            populateMessage2(parameterFromMessage,portType.getQName(),oper,fileToSchemaMap);
          }
        }
        Collection<Fault> faults=oper.getFaults().values();
        for (        Fault fault : faults) {
          Message faultMsg=fault.getMessage();
          if (faultMsg != null) {
            ParameterInfo parameterFromMessage=schemaUtil.getParameterFromMessage(faultMsg);
            if (alreadyCreated.contains(parameterFromMessage.getName())) {
              continue;
            }
 else {
              alreadyCreated.add(parameterFromMessage.getName());
            }
            populateMessage2(parameterFromMessage,portType.getQName(),oper,fileToSchemaMap);
          }
        }
      }
    }
  }
}",0.7897929303492993
141850,"private void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop) throws OdaException {
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + ""String_Node_Str"" + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
  column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + ""String_Node_Str"" + node.getValue(),subElementsInLoop);
}
}
}","private void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop) throws OdaException {
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + ""String_Node_Str"" + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setXMLPath(""String_Node_Str"" + node.getValue());
  xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + ""String_Node_Str"" + node.getValue(),subElementsInLoop);
}
}
}",0.5616787605412826
141851,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
      if (node.getParent().getContentType() != CamelRepositoryNodeType.repositoryRoutesType) {
        canWork=false;
      }
    break;
default :
  canWork=false;
}
RepositoryNode parent=node.getParent();
if (canWork && parent != null && parent instanceof BinRepositoryNode) {
canWork=false;
}
}
setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
      if (node.getParent() == null || node.getParent().getContentType() != CamelRepositoryNodeType.repositoryRoutesType) {
        canWork=false;
      }
    break;
default :
  canWork=false;
}
RepositoryNode parent=node.getParent();
if (canWork && parent != null && parent instanceof BinRepositoryNode) {
canWork=false;
}
}
setEnabled(canWork);
}",0.9773828756058158
141852,"/** 
 * ftang Comment method ""evaluateNameInRoutine"".
 */
protected void evaluateName(){
  String jobName=nameText.getText().trim();
  boolean isValid=isNameValidInRountine(jobName);
  if (!isValid || !Pattern.matches(RepositoryConstants.getPattern(ERepositoryObjectType.PROCESS),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    updatePageStatus();
  }
}","/** 
 * ftang Comment method ""evaluateNameInRoutine"".
 */
protected void evaluateName(){
  String jobName=nameText.getText().trim();
  boolean isValid=isNameValidInRountine(jobName);
  if (!isValid || !Pattern.matches(RepositoryConstants.getPattern(ERepositoryObjectType.ROUTINES),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    updatePageStatus();
  }
}",0.992248062015504
141853,"/** 
 * ftang Comment method ""evaluateNameInRoutine"".
 */
protected void evaluateName(){
  String jobName=nameText.getText().trim();
  boolean isValid=isNameValidInRountine(jobName);
  if (!isValid || !Pattern.matches(RepositoryConstants.getPattern(ERepositoryObjectType.PROCESS),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    updatePageStatus();
  }
}","/** 
 * ftang Comment method ""evaluateNameInRoutine"".
 */
protected void evaluateName(){
  String jobName=nameText.getText().trim();
  boolean isValid=isNameValidInRountine(jobName);
  if (!isValid || !Pattern.matches(RepositoryConstants.getPattern(ERepositoryObjectType.ROUTINES),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    updatePageStatus();
  }
}",0.992248062015504
141854,"private void buildParameterFromElements(String partElement,ParameterInfo parameterRoot){
  parametersName.add(parameterRoot.getName());
  Iterator<XmlSchemaElement> elementsItr=allXmlSchemaElement.iterator();
  if (partElement != null) {
    while (elementsItr.hasNext()) {
      XmlSchemaElement xmlSchemaElement=elementsItr.next();
      if (partElement.equals(xmlSchemaElement.getName())) {
        parameterRoot.setNameSpace(xmlSchemaElement.getQName().getNamespaceURI());
        if (xmlSchemaElement.getSchemaType() != null) {
          if (xmlSchemaElement.getSchemaType() instanceof XmlSchemaComplexType) {
            XmlSchemaComplexType xmlElementComplexType=(XmlSchemaComplexType)xmlSchemaElement.getSchemaType();
            XmlSchemaParticle xmlSchemaParticle=xmlElementComplexType.getParticle();
            if (xmlSchemaParticle instanceof XmlSchemaGroupParticle) {
              Collection<XmlSchemaObjectBase> xmlSchemaObjectCollection=getXmlSchemaObjectsFromXmlSchemaGroupParticle((XmlSchemaGroupParticle)xmlSchemaParticle);
              if (xmlSchemaObjectCollection != null) {
                buildParameterFromCollection(xmlSchemaObjectCollection,parameterRoot);
              }
            }
 else             if (xmlSchemaElement.getSchemaTypeName() != null) {
              String paraTypeName=xmlSchemaElement.getSchemaTypeName().getLocalPart();
              if (paraTypeName != null) {
                parameterRoot.setType(paraTypeName);
                buildParameterFromTypes(paraTypeName,parameterRoot);
              }
            }
          }
 else           if (xmlSchemaElement.getSchemaType() instanceof XmlSchemaSimpleType) {
            XmlSchemaSimpleType xmlSchemaSimpleType=(XmlSchemaSimpleType)xmlSchemaElement.getSchemaType();
            String typeName=xmlSchemaSimpleType.getName();
            parameterRoot.setType(typeName);
          }
        }
 else         if (xmlSchemaElement.getSchemaTypeName() != null) {
          String paraTypeName=xmlSchemaElement.getSchemaTypeName().getLocalPart();
          if (paraTypeName != null) {
            parameterRoot.setType(paraTypeName);
            buildParameterFromTypes(paraTypeName,parameterRoot);
          }
        }
      }
    }
  }
}","private void buildParameterFromElements(String partElement,ParameterInfo parameterRoot){
  String parameterName=parameterRoot.getName();
  if (parameterName == null) {
    return;
  }
  parametersName.add(parameterName);
  Iterator<XmlSchemaElement> elementsItr=allXmlSchemaElement.iterator();
  if (partElement != null) {
    while (elementsItr.hasNext()) {
      XmlSchemaElement xmlSchemaElement=elementsItr.next();
      if (partElement.equals(xmlSchemaElement.getName())) {
        parameterRoot.setNameSpace(xmlSchemaElement.getQName().getNamespaceURI());
        if (xmlSchemaElement.getSchemaType() != null) {
          if (xmlSchemaElement.getSchemaType() instanceof XmlSchemaComplexType) {
            XmlSchemaComplexType xmlElementComplexType=(XmlSchemaComplexType)xmlSchemaElement.getSchemaType();
            XmlSchemaParticle xmlSchemaParticle=xmlElementComplexType.getParticle();
            if (xmlSchemaParticle instanceof XmlSchemaGroupParticle) {
              Collection<XmlSchemaObjectBase> xmlSchemaObjectCollection=getXmlSchemaObjectsFromXmlSchemaGroupParticle((XmlSchemaGroupParticle)xmlSchemaParticle);
              if (xmlSchemaObjectCollection != null) {
                buildParameterFromCollection(xmlSchemaObjectCollection,parameterRoot);
              }
            }
 else             if (xmlSchemaElement.getSchemaTypeName() != null) {
              String paraTypeName=xmlSchemaElement.getSchemaTypeName().getLocalPart();
              if (paraTypeName != null) {
                parameterRoot.setType(paraTypeName);
                buildParameterFromTypes(paraTypeName,parameterRoot);
              }
            }
          }
 else           if (xmlSchemaElement.getSchemaType() instanceof XmlSchemaSimpleType) {
            XmlSchemaSimpleType xmlSchemaSimpleType=(XmlSchemaSimpleType)xmlSchemaElement.getSchemaType();
            String typeName=xmlSchemaSimpleType.getName();
            parameterRoot.setType(typeName);
          }
        }
 else         if (xmlSchemaElement.getSchemaTypeName() != null) {
          String paraTypeName=xmlSchemaElement.getSchemaTypeName().getLocalPart();
          if (paraTypeName != null) {
            parameterRoot.setType(paraTypeName);
            buildParameterFromTypes(paraTypeName,parameterRoot);
          }
        }
      }
    }
  }
}",0.9752572804904752
141855,"protected void evaluateTextField(){
  super.evaluateTextField();
  if (nameStatus.getSeverity() == IStatus.OK) {
    evaluateNameInRoutine();
  }
}","protected void evaluateTextField(){
  super.evaluateTextField();
  if (nameStatus.getSeverity() == IStatus.OK) {
    evaluateName();
  }
}",0.968421052631579
141856,"private void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop) throws OdaException {
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + ""String_Node_Str"" + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getOriginalDataType();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
  column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + ""String_Node_Str"" + node.getValue(),subElementsInLoop);
}
}
}","private void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop) throws OdaException {
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + ""String_Node_Str"" + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
  column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + ""String_Node_Str"" + node.getValue(),subElementsInLoop);
}
}
}",0.99623985751039
141857,"protected void evaluateTextField(){
  super.evaluateTextField();
  if (nameStatus.getSeverity() == IStatus.OK) {
    evaluateNameInRoutine();
  }
}","protected void evaluateTextField(){
  super.evaluateTextField();
  if (nameStatus.getSeverity() == IStatus.OK) {
    evaluateName();
  }
}",0.968421052631579
141858,"private void buildParameterFromElements(String partElement,ParameterInfo parameterRoot){
  parametersName.add(parameterRoot.getName());
  Iterator<XmlSchemaElement> elementsItr=allXmlSchemaElement.iterator();
  if (partElement != null) {
    while (elementsItr.hasNext()) {
      XmlSchemaElement xmlSchemaElement=elementsItr.next();
      if (partElement.equals(xmlSchemaElement.getName())) {
        parameterRoot.setNameSpace(xmlSchemaElement.getQName().getNamespaceURI());
        if (xmlSchemaElement.getSchemaType() != null) {
          if (xmlSchemaElement.getSchemaType() instanceof XmlSchemaComplexType) {
            XmlSchemaComplexType xmlElementComplexType=(XmlSchemaComplexType)xmlSchemaElement.getSchemaType();
            XmlSchemaParticle xmlSchemaParticle=xmlElementComplexType.getParticle();
            if (xmlSchemaParticle instanceof XmlSchemaGroupParticle) {
              Collection<XmlSchemaObjectBase> xmlSchemaObjectCollection=getXmlSchemaObjectsFromXmlSchemaGroupParticle((XmlSchemaGroupParticle)xmlSchemaParticle);
              if (xmlSchemaObjectCollection != null) {
                buildParameterFromCollection(xmlSchemaObjectCollection,parameterRoot);
              }
            }
 else             if (xmlSchemaElement.getSchemaTypeName() != null) {
              String paraTypeName=xmlSchemaElement.getSchemaTypeName().getLocalPart();
              if (paraTypeName != null) {
                parameterRoot.setType(paraTypeName);
                buildParameterFromTypes(paraTypeName,parameterRoot);
              }
            }
          }
 else           if (xmlSchemaElement.getSchemaType() instanceof XmlSchemaSimpleType) {
            XmlSchemaSimpleType xmlSchemaSimpleType=(XmlSchemaSimpleType)xmlSchemaElement.getSchemaType();
            String typeName=xmlSchemaSimpleType.getName();
            parameterRoot.setType(typeName);
          }
        }
 else         if (xmlSchemaElement.getSchemaTypeName() != null) {
          String paraTypeName=xmlSchemaElement.getSchemaTypeName().getLocalPart();
          if (paraTypeName != null) {
            parameterRoot.setType(paraTypeName);
            buildParameterFromTypes(paraTypeName,parameterRoot);
          }
        }
      }
    }
  }
}","private void buildParameterFromElements(String partElement,ParameterInfo parameterRoot){
  String parameterName=parameterRoot.getName();
  if (parameterName == null) {
    return;
  }
  parametersName.add(parameterName);
  Iterator<XmlSchemaElement> elementsItr=allXmlSchemaElement.iterator();
  if (partElement != null) {
    while (elementsItr.hasNext()) {
      XmlSchemaElement xmlSchemaElement=elementsItr.next();
      if (partElement.equals(xmlSchemaElement.getName())) {
        parameterRoot.setNameSpace(xmlSchemaElement.getQName().getNamespaceURI());
        if (xmlSchemaElement.getSchemaType() != null) {
          if (xmlSchemaElement.getSchemaType() instanceof XmlSchemaComplexType) {
            XmlSchemaComplexType xmlElementComplexType=(XmlSchemaComplexType)xmlSchemaElement.getSchemaType();
            XmlSchemaParticle xmlSchemaParticle=xmlElementComplexType.getParticle();
            if (xmlSchemaParticle instanceof XmlSchemaGroupParticle) {
              Collection<XmlSchemaObjectBase> xmlSchemaObjectCollection=getXmlSchemaObjectsFromXmlSchemaGroupParticle((XmlSchemaGroupParticle)xmlSchemaParticle);
              if (xmlSchemaObjectCollection != null) {
                buildParameterFromCollection(xmlSchemaObjectCollection,parameterRoot);
              }
            }
 else             if (xmlSchemaElement.getSchemaTypeName() != null) {
              String paraTypeName=xmlSchemaElement.getSchemaTypeName().getLocalPart();
              if (paraTypeName != null) {
                parameterRoot.setType(paraTypeName);
                buildParameterFromTypes(paraTypeName,parameterRoot);
              }
            }
          }
 else           if (xmlSchemaElement.getSchemaType() instanceof XmlSchemaSimpleType) {
            XmlSchemaSimpleType xmlSchemaSimpleType=(XmlSchemaSimpleType)xmlSchemaElement.getSchemaType();
            String typeName=xmlSchemaSimpleType.getName();
            parameterRoot.setType(typeName);
          }
        }
 else         if (xmlSchemaElement.getSchemaTypeName() != null) {
          String paraTypeName=xmlSchemaElement.getSchemaTypeName().getLocalPart();
          if (paraTypeName != null) {
            parameterRoot.setType(paraTypeName);
            buildParameterFromTypes(paraTypeName,parameterRoot);
          }
        }
      }
    }
  }
}",0.9752572804904752
141859,"/** 
 * To optimize, right now it will write the xsd file many times. Since there is no clues if the parameters comes from the same xsd, generate it everytime right now.
 * @param oper
 * @param hashMap
 */
private void populateMessage2(ParameterInfo parameter,QName portTypeQName,Operation oper,Map<byte[],String> schemaToFileMap){
  String name=parameter.getName();
  XmlFileConnection connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connection.setXmlFilePath(name + ""String_Node_Str"");
  XmlFileConnectionItem connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(name);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  connection.setFileContent(parameter.getSchema());
  XSDSchema xsdSchema;
  try {
    String filePath=schemaToFileMap.get(parameter.getSchema());
    if (filePath == null) {
      return;
    }
    xsdSchema=populationUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node,true);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",false);
  }
 catch (  MalformedURLException e1) {
    ExceptionHandler.process(e1);
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  String nextId=factory.getNextId();
  connectionProperty.setId(nextId);
  try {
    String folderString=parameter.getNameSpace() + ""String_Node_Str"" + portTypeQName.getLocalPart();
    try {
      URI uri=new URI(folderString);
      String scheme=uri.getScheme();
      if (scheme != null) {
        folderString=folderString.substring(scheme.length());
      }
    }
 catch (    URISyntaxException e) {
    }
    if (folderString.startsWith(""String_Node_Str"")) {
      folderString=folderString.substring(1);
    }
    folderString=FolderNameUtil.replaceAllLimited(folderString);
    IPath path=new Path(folderString + ""String_Node_Str"" + oper.getName());
    factory.create(connectionItem,path);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    RepositoryManager.refresh(ERepositoryObjectType.METADATA_FILE_XML);
  }
 catch (  PersistenceException e) {
  }
}","/** 
 * To optimize, right now it will write the xsd file many times. Since there is no clues if the parameters comes from the same xsd, generate it everytime right now.
 * @param oper
 * @param hashMap
 */
private void populateMessage2(ParameterInfo parameter,QName portTypeQName,Operation oper,Map<byte[],String> schemaToFileMap){
  String name=parameter.getName();
  XmlFileConnection connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connection.setXmlFilePath(name + ""String_Node_Str"");
  XmlFileConnectionItem connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(name);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  connection.setFileContent(parameter.getSchema());
  XSDSchema xsdSchema;
  try {
    String filePath=schemaToFileMap.get(parameter.getSchema());
    if (filePath == null) {
      return;
    }
    xsdSchema=populationUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node,true);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  MalformedURLException e1) {
    ExceptionHandler.process(e1);
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  String nextId=factory.getNextId();
  connectionProperty.setId(nextId);
  try {
    String folderString=parameter.getNameSpace() + ""String_Node_Str"" + portTypeQName.getLocalPart();
    try {
      URI uri=new URI(folderString);
      String scheme=uri.getScheme();
      if (scheme != null) {
        folderString=folderString.substring(scheme.length());
      }
    }
 catch (    URISyntaxException e) {
    }
    if (folderString.startsWith(""String_Node_Str"")) {
      folderString=folderString.substring(1);
    }
    folderString=FolderNameUtil.replaceAllLimited(folderString);
    IPath path=new Path(folderString + ""String_Node_Str"" + oper.getName());
    factory.create(connectionItem,path);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    RepositoryManager.refresh(ERepositoryObjectType.METADATA_FILE_XML);
  }
 catch (  PersistenceException e) {
  }
}",0.971708789136175
141860,"private void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop) throws OdaException {
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + ""String_Node_Str"" + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
  column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + ""String_Node_Str"" + node.getValue(),subElementsInLoop);
}
}
}","private void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop) throws OdaException {
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + ""String_Node_Str"" + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getOriginalDataType();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
  column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setRelatedColumn(nameWithoutPrefixForColumn);
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
column.setLabel(nameWithoutPrefixForColumn);
ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0].getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + ""String_Node_Str"" + node.getValue(),subElementsInLoop);
}
}
}",0.99623985751039
141861,"/** 
 * Insert a new <code>Line</code> at the specified <code>lineNumber</code> position.  If the page is full after insertion, the last line of the content (<strong>not</strong> including footer) will be removed and returned.
 * @param line the <code>Line</code> that will be inserted.
 * @param lineNumber the line number position in which the new line will be inserted.
 * @return discarded <code>Line</code> if insertion causes overflow and a line is removed, or<code>null</code> if no line is discarded.
 */
public Line insert(Line line,int lineNumber){
  Line result=null;
  if (lineNumber < header.length) {
    throw new IllegalArgumentException(""String_Node_Str"" + lineNumber);
  }
  if ((pageLength != null) && (lineNumber > pageLength)) {
    throw new IllegalArgumentException(""String_Node_Str"" + lineNumber);
  }
  content.add(lineNumber - header.length - 1,line);
  if (isOverflow()) {
    result=content.get(content.size() - 1);
    content.remove(result);
  }
  return result;
}","/** 
 * Insert a new <code>Line</code> at the specified <code>lineNumber</code> position.  If the page is full after insertion, the last line of the content (<strong>not</strong> including footer) will be removed and returned.
 * @param line the <code>Line</code> that will be inserted.
 * @param lineNumber the line number position in which the new line will be inserted.
 * @return discarded <code>Line</code> if insertion causes overflow and a line is removed, or<code>null</code> if no line is discarded.
 */
public Line insert(Line line,int lineNumber){
  Line result=null;
  if (lineNumber < header.length) {
    throw new IllegalArgumentException(""String_Node_Str"" + lineNumber);
  }
  if ((pageLength != null) && (lineNumber > pageLength)) {
    throw new IllegalArgumentException(""String_Node_Str"" + lineNumber);
  }
  content.add(lineNumber - header.length - 1,line);
  if (isOverflow()) {
    result=content.get(content.size() - 1);
    content.remove(content.size() - 1);
  }
  return result;
}",0.988
141862,"/** 
 * Create a new template from an URI.
 * @param uri the URI to file that will be read.
 * @throws IOException if error occured when reading the file.
 */
public JsonTemplate(URI uri) throws IOException {
  this(new File(uri));
}","/** 
 * Create a new template from an <code>InputStream</code>.
 * @param inputStream the input stream that will be read.
 * @param charset character set of the input stream.
 * @throws IOException if error occured when reading the input stream.
 */
public JsonTemplate(InputStream inputStream,Charset charset) throws IOException {
  InputStreamReader isr=new InputStreamReader(inputStream,charset);
  StringWriter sw=new StringWriter();
  int c;
  while ((c=isr.read()) != -1) {
    sw.write(c);
  }
  this.originalText=sw.getBuffer().toString();
}",0.4271099744245524
141863,"@Override public View getView(final int position,View convertView,ViewGroup parent){
  final ViewHolder holder;
  LayoutInflater inflater=context.getLayoutInflater();
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.installed_apps,null);
    holder=new ViewHolder();
    holder.apkName=(TextView)convertView.findViewById(R.id.appname);
    holder.apkName.setTypeface(Typeface.createFromAsset(context.getAssets(),""String_Node_Str""));
    holder.ck1=(CheckBox)convertView.findViewById(R.id.checkBox1);
    holder.packageName=(TextView)convertView.findViewById(R.id.app_package);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  final PackageInfo packageInfo=(PackageInfo)getItem(position);
  Drawable appIcon=packageManager.getApplicationIcon(packageInfo.applicationInfo);
  PACKAGE_NAME=packageInfo.packageName;
  final String appName=packageManager.getApplicationLabel(packageInfo.applicationInfo).toString();
  appIcon.setBounds(0,0,80,80);
  holder.apkName.setCompoundDrawables(appIcon,null,null,null);
  holder.apkName.setCompoundDrawablePadding(15);
  holder.apkName.setText(appName);
  holder.ck1.setChecked(false);
  if (itemChecked[position])   holder.ck1.setChecked(true);
 else   holder.ck1.setChecked(false);
  checked=new HashSet();
  PACKAGE_NAME=packageInfo.packageName;
  sharedPrefs=context.getSharedPreferences(context.getApplicationContext().getPackageName(),Context.MODE_PRIVATE);
  sharedPrefsapp=context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  holder.ck1.setChecked(sharedPrefs.getBoolean(PACKAGE_NAME,false));
  endTimerPreferences=context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  timerends=endTimerPreferences.getLong(""String_Node_Str"",0);
  if (System.currentTimeMillis() < timerends) {
    if (holder.ck1.isChecked()) {
      holder.ck1.setClickable(false);
      holder.ck1.setEnabled(false);
    }
  }
  holder.ck1.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      SharedPreferences.Editor editor=context.getSharedPreferences(context.getApplicationContext().getPackageName(),Context.MODE_PRIVATE).edit();
      SharedPreferences.Editor editorapp=context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).edit();
      if (holder.ck1.isChecked()) {
        itemChecked[position]=true;
        holder.ck1.setChecked(true);
        editor.putBoolean(packageInfo.packageName,true);
        editorapp.putString(packageInfo.packageName,packageInfo.packageName);
        editor.apply();
        editorapp.apply();
      }
 else {
        itemChecked[position]=false;
        holder.ck1.setChecked(false);
        editor.putBoolean(packageInfo.packageName,false);
        editorapp.remove(packageInfo.packageName);
        editor.apply();
        editorapp.apply();
      }
    }
  }
);
  return convertView;
}","@Override public View getView(final int position,View convertView,ViewGroup parent){
  final ViewHolder holder;
  LayoutInflater inflater=context.getLayoutInflater();
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.installed_apps,null);
    holder=new ViewHolder();
    holder.apkName=(TextView)convertView.findViewById(R.id.appname);
    holder.apkName.setTypeface(Typeface.createFromAsset(context.getAssets(),""String_Node_Str""));
    holder.ck1=(CheckBox)convertView.findViewById(R.id.checkBox1);
    holder.packageName=(TextView)convertView.findViewById(R.id.app_package);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  final PackageInfo packageInfo=(PackageInfo)getItem(position);
  Drawable appIcon=packageManager.getApplicationIcon(packageInfo.applicationInfo);
  PACKAGE_NAME=packageInfo.packageName;
  final String appName=packageManager.getApplicationLabel(packageInfo.applicationInfo).toString();
  appIcon.setBounds(0,0,80,80);
  holder.apkName.setCompoundDrawables(appIcon,null,null,null);
  holder.apkName.setCompoundDrawablePadding(15);
  holder.apkName.setText(appName);
  holder.ck1.setChecked(false);
  if (itemChecked[position])   holder.ck1.setChecked(true);
 else   holder.ck1.setChecked(false);
  checked=new HashSet();
  PACKAGE_NAME=packageInfo.packageName;
  sharedPrefs=context.getSharedPreferences(context.getApplicationContext().getPackageName(),Context.MODE_PRIVATE);
  sharedPrefsapp=context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  holder.ck1.setChecked(sharedPrefs.getBoolean(PACKAGE_NAME,false));
  endTimerPreferences=context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  timerends=endTimerPreferences.getLong(""String_Node_Str"",0);
  if (System.currentTimeMillis() < timerends) {
    if (holder.ck1.isChecked()) {
      holder.ck1.setClickable(false);
      holder.ck1.setEnabled(false);
    }
 else {
      holder.ck1.setClickable(true);
      holder.ck1.setEnabled(true);
    }
  }
  holder.ck1.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      SharedPreferences.Editor editor=context.getSharedPreferences(context.getApplicationContext().getPackageName(),Context.MODE_PRIVATE).edit();
      SharedPreferences.Editor editorapp=context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).edit();
      if (holder.ck1.isChecked()) {
        itemChecked[position]=true;
        holder.ck1.setChecked(true);
        editor.putBoolean(packageInfo.packageName,true);
        editorapp.putString(packageInfo.packageName,packageInfo.packageName);
        editor.apply();
        editorapp.apply();
      }
 else {
        itemChecked[position]=false;
        holder.ck1.setChecked(false);
        editor.putBoolean(packageInfo.packageName,false);
        editorapp.remove(packageInfo.packageName);
        editor.apply();
        editorapp.apply();
      }
    }
  }
);
  return convertView;
}",0.9853840924541128
141864,"/** 
 * @param metricRegistry registry containing the metrics
 */
public void setMetricRegistry(MetricRegistry metricRegistry){
  this.metrics=Preconditions.checkNotNull(metricRegistry,""String_Node_Str"");
  this.openRequestCounter=metrics.counter(name(server.getId(),""String_Node_Str""));
  this.openSessionsCounter=metrics.counter(name(server.getId(),""String_Node_Str""));
  this.sentMessageMeter=metrics.meter(name(server.getId(),""String_Node_Str""));
  this.receivedMessageMeter=metrics.meter(name(server.getId(),""String_Node_Str""));
  this.errorMeter=metrics.meter(name(server.getId(),""String_Node_Str""));
  this.circuitBreakerTrippedCounter=metrics.counter(name(server.getId(),""String_Node_Str""));
  this.circuitBreakerTimeGauge=new Gauge<Double>(){
    @Override public Double getValue(){
      if (server != null) {
        return server.getCircuitBreakerRemainingTime();
      }
 else {
        return 0.0;
      }
    }
  }
;
  this.metrics.register(name(objectId,server.getId(),""String_Node_Str""),circuitBreakerTimeGauge);
  this.latencyHistogram=new Histogram(new SlidingWindowReservoir(100));
  this.metrics.register(name(objectId,server.getId(),""String_Node_Str""),this.latencyHistogram);
  this.errorsPerSecond=new SlidingTimeWindowReservoir(1,TimeUnit.SECONDS);
}","/** 
 * @param metricRegistry registry containing the metrics
 */
public void setMetricRegistry(MetricRegistry metricRegistry){
  this.metrics=Preconditions.checkNotNull(metricRegistry,""String_Node_Str"");
  this.openRequestCounter=metrics.counter(name(server.getId(),""String_Node_Str""));
  this.openSessionsCounter=metrics.counter(name(server.getId(),""String_Node_Str""));
  this.sentMessageMeter=metrics.meter(name(server.getId(),""String_Node_Str""));
  this.receivedMessageMeter=metrics.meter(name(server.getId(),""String_Node_Str""));
  this.errorMeter=metrics.meter(name(server.getId(),""String_Node_Str""));
  this.circuitBreakerTrippedCounter=metrics.counter(name(server.getId(),""String_Node_Str""));
  this.circuitBreakerTimeGauge=new Gauge<Double>(){
    @Override public Double getValue(){
      if (server != null) {
        return server.getCircuitBreakerRemainingTime();
      }
 else {
        return 0.0;
      }
    }
  }
;
  this.metrics.register(name(objectId,server.getId(),""String_Node_Str""),circuitBreakerTimeGauge);
  this.latencyHistogram=new Histogram(new SlidingWindowReservoir(100));
  this.metrics.register(name(objectId,server.getId(),""String_Node_Str""),this.latencyHistogram);
  this.errorsPerSecond=new SlidingTimeWindowReservoir(1,TimeUnit.SECONDS,new Clock(){
    private long start=System.nanoTime();
    @Override public long getTick(){
      return System.nanoTime() - start;
    }
  }
);
}",0.944630248978075
141865,"@Test @Ignore(""String_Node_Str"") public void ShortCircuitTest() throws InterruptedException {
  Janus janus=new Janus(VIP_TEST,new ConstServerList(VIP_TEST,""String_Node_Str""),new RandomLoadBalancer(),new ServerStatsFactory(ServerStats.class,new MetricRegistry()));
  ServerStats stats=janus.getServer();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),false);
  Assert.assertTrue(stats.getServerInstance().getCircuitBreakerRemainingTime() <= 0.0);
  stats.incrementErrors();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),false);
  stats.incrementErrors();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),false);
  stats.incrementErrors();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),true);
  ServerStats stats2=janus.getServer();
  Assert.assertNull(stats2);
  Thread.sleep(2000);
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),false);
  stats=janus.getServer();
  Assert.assertNotNull(stats);
  stats.incrementErrors();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),false);
  stats.incrementErrors();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),false);
  stats.incrementErrors();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),true);
  Assert.assertTrue(stats.getServerInstance().getCircuitBreakerRemainingTime() > 0.0);
  Thread.sleep(1005);
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),true);
}","@Test public void ShortCircuitTest() throws InterruptedException {
  Janus janus=new Janus(VIP_TEST,new ConstServerList(VIP_TEST,""String_Node_Str""),new RandomLoadBalancer(),new ServerStatsFactory(ServerStats.class,new MetricRegistry()));
  ServerStats stats=janus.getServer();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),false);
  Assert.assertTrue(stats.getServerInstance().getCircuitBreakerRemainingTime() <= 0.0);
  stats.incrementErrors();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),false);
  stats.incrementErrors();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),false);
  stats.incrementErrors();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),true);
  ServerStats stats2=janus.getServer();
  Assert.assertNull(stats2);
  Thread.sleep(2000);
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),false);
  stats=janus.getServer();
  Assert.assertNotNull(stats);
  stats.incrementErrors();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),false);
  stats.incrementErrors();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),false);
  stats.incrementErrors();
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),true);
  Assert.assertTrue(stats.getServerInstance().getCircuitBreakerRemainingTime() > 0.0);
  Thread.sleep(1005);
  Assert.assertEquals(stats.getServerInstance().isShortCircuited(),true);
}",0.9908256880733946
141866,"/** 
 * @param name The name of the screen view event
 * @param id Screen view ID
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackScreenView(String name,String id,List<SchemaPayload> context,long timestamp){
  Preconditions.checkNotNull(id);
  Preconditions.checkArgument(!name.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!id.isEmpty(),""String_Node_Str"");
  Map<String,String> screenViewProperties=new HashMap<String,String>();
  screenViewProperties.put(Parameter.SV_NAME,name);
  screenViewProperties.put(Parameter.SV_ID,id);
  SchemaPayload payload=new SchemaPayload();
  payload.setSchema(this.baseSchemaPath + ""String_Node_Str"" + this.schemaTag+ ""String_Node_Str""+ this.schemaVersion);
  payload.setData(screenViewProperties);
  trackUnstructuredEvent(payload.getMap(),context,timestamp);
}","/** 
 * @param name The name of the screen view event
 * @param id Screen view ID
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackScreenView(String name,String id,List<SchemaPayload> context,long timestamp){
  Preconditions.checkArgument(name != null || id != null);
  TrackerPayload trackerPayload=new TrackerPayload();
  trackerPayload.add(Parameter.SV_NAME,name);
  trackerPayload.add(Parameter.SV_ID,id);
  SchemaPayload payload=new SchemaPayload();
  payload.setSchema(this.baseSchemaPath + ""String_Node_Str"" + this.schemaTag+ ""String_Node_Str""+ this.schemaVersion);
  payload.setData(trackerPayload);
  trackUnstructuredEvent(payload.getMap(),context,timestamp);
}",0.7649546827794562
141867,"@Test public void testTrackScreenView() throws Exception {
}","@Test public void testTrackScreenView() throws Exception {
  Emitter emitter=new Emitter(testURL,HttpMethod.POST);
  Subject subject=new Subject();
  subject.setViewPort(320,480);
  Tracker tracker=new Tracker(emitter,subject,""String_Node_Str"",""String_Node_Str"",false);
  emitter.setRequestMethod(RequestMethod.Asynchronous);
  SchemaPayload context=new SchemaPayload();
  Map<String,String> someContext=new HashMap<String,String>();
  someContext.put(""String_Node_Str"",""String_Node_Str"");
  context.setSchema(""String_Node_Str"");
  context.setData(someContext);
  ArrayList<SchemaPayload> contextList=new ArrayList<SchemaPayload>();
  contextList.add(context);
  tracker.trackScreenView(null,""String_Node_Str"",contextList,0);
  emitter.flushBuffer();
}",0.1477832512315271
141868,"@Override public void addMap(Map map,Boolean base64_encoded,String type_encoded,String type_no_encoded){
  if (map == null) {
    logger.debug(""String_Node_Str"");
    return;
  }
  String mapString;
  try {
    mapString=objectMapper.writeValueAsString(map);
  }
 catch (  JsonProcessingException e) {
    e.printStackTrace();
    return;
  }
  if (base64_encoded) {
    objectNode.put(type_encoded,Util.base64Encode(mapString));
  }
 else {
    add(type_no_encoded,map);
  }
}","@Override public void addMap(Map map,Boolean base64_encoded,String type_encoded,String type_no_encoded){
  if (map == null) {
    logger.debug(""String_Node_Str"");
    return;
  }
  String mapString;
  try {
    mapString=objectMapper.writeValueAsString(map);
  }
 catch (  JsonProcessingException e) {
    e.printStackTrace();
    return;
  }
  if (base64_encoded) {
    objectNode.put(type_encoded,Util.base64Encode(mapString));
  }
 else {
    add(type_no_encoded,mapString);
  }
}",0.9770833333333332
141869,"@Override public Map getMap(){
  HashMap<String,String> map=new HashMap<String,String>();
  try {
    map=objectMapper.readValue(objectNode.toString(),new TypeReference<HashMap<String,String>>(){
    }
);
  }
 catch (  JsonMappingException e) {
    e.printStackTrace();
  }
catch (  JsonParseException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return map;
}","@Override public Map getMap(){
  HashMap<String,String> map=new HashMap<String,String>();
  try {
    map=objectMapper.readValue(objectNode.toString(),new TypeReference<Map>(){
    }
);
  }
 catch (  JsonMappingException e) {
    e.printStackTrace();
  }
catch (  JsonParseException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return map;
}",0.9684741488020177
141870,"@Test public void testGetMap() throws Exception {
}","@Test public void testGetMap() throws Exception {
  Payload payload;
  String res;
  LinkedHashMap<String,Object> foo=new LinkedHashMap<String,Object>();
  ArrayList<String> bar=new ArrayList<String>();
  bar.add(""String_Node_Str"");
  bar.add(""String_Node_Str"");
  foo.put(""String_Node_Str"",""String_Node_Str"");
  foo.put(""String_Node_Str"",bar);
  LinkedHashMap<String,Object> data=new LinkedHashMap<String,Object>();
  data.put(""String_Node_Str"",foo);
  payload=new TrackerPayload();
  payload.setData(foo);
  assertEquals(data,payload.getMap());
}",0.1702838063439065
141871,"/** 
 * @param name The name of the screen view event
 * @param id Screen view ID
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackScreenView(String name,String id,List<Map> context,long timestamp){
  Preconditions.checkNotNull(id);
  Preconditions.checkArgument(!name.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!id.isEmpty(),""String_Node_Str"");
  Map<String,String> screenViewProperties=new HashMap<String,String>();
  screenViewProperties.put(Parameter.SV_NAME,name);
  screenViewProperties.put(Parameter.SV_ID,id);
  SchemaPayload payload=new SchemaPayload();
  payload.setSchema(this.baseSchemaPath + ""String_Node_Str"" + this.schemaTag+ Version.VERSION);
  payload.setData(screenViewProperties);
  trackUnstructuredEvent(payload.getMap(),context,timestamp);
}","/** 
 * @param name The name of the screen view event
 * @param id Screen view ID
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackScreenView(String name,String id,List<Map> context,long timestamp){
  Preconditions.checkNotNull(id);
  Preconditions.checkArgument(!name.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!id.isEmpty(),""String_Node_Str"");
  Map<String,String> screenViewProperties=new HashMap<String,String>();
  screenViewProperties.put(Parameter.SV_NAME,name);
  screenViewProperties.put(Parameter.SV_ID,id);
  SchemaPayload payload=new SchemaPayload();
  payload.setSchema(this.baseSchemaPath + ""String_Node_Str"" + this.schemaTag+ ""String_Node_Str""+ this.schemaVersion);
  payload.setData(screenViewProperties);
  trackUnstructuredEvent(payload.getMap(),context,timestamp);
}",0.9783352337514252
141872,"/** 
 * Sets the JSON schema to be used mainly for self-describing JSON.
 * @param vendor Schema vendor
 * @param schemaTag Schema tag type
 * @param version Schema version tag
 */
public void setSchema(String vendor,String schemaTag,String version){
  this.contextSchema=vendor + ""String_Node_Str"" + schemaTag+ version;
  this.unstructSchema=vendor + ""String_Node_Str"" + schemaTag+ version;
  this.baseSchemaPath=vendor;
  this.schemaTag=schemaTag;
}","/** 
 * Sets the JSON schema to be used mainly for self-describing JSON.
 * @param vendor Schema vendor
 * @param schemaTag Schema tag type
 * @param version Schema version tag
 */
public void setSchema(String vendor,String schemaTag,String version){
  this.contextSchema=vendor + ""String_Node_Str"" + schemaTag+ ""String_Node_Str""+ version;
  this.unstructSchema=vendor + ""String_Node_Str"" + schemaTag+ ""String_Node_Str""+ version;
  this.baseSchemaPath=vendor;
  this.schemaTag=schemaTag;
  this.schemaVersion=version;
}",0.9298969072164948
141873,"public SchemaPayload setData(Object data){
  objectNode.putPOJO(Parameter.DATA,objectMapper.valueToTree(data));
  return this;
}","public SchemaPayload setData(Object data){
  try {
    objectNode.putPOJO(Parameter.DATA,objectMapper.writeValueAsString(data));
  }
 catch (  JsonProcessingException e) {
    e.printStackTrace();
  }
  return this;
}",0.672463768115942
141874,"public SchemaPayload(Payload payload){
  ObjectNode data;
  if (payload.getClass() == TrackerPayload.class) {
    logger.debug(""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    data=(ObjectNode)((TrackerPayload)payload).getNode();
  }
 else {
    logger.debug(""String_Node_Str"");
    data=objectMapper.valueToTree(payload.getMap());
  }
  objectNode.set(Parameter.DATA,data);
}","public SchemaPayload(Payload payload){
  ObjectNode data;
  if (payload.getClass() == TrackerPayload.class) {
    logger.debug(""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    data=(ObjectNode)payload.getNode();
  }
 else {
    logger.debug(""String_Node_Str"");
    data=objectMapper.valueToTree(payload.getMap());
  }
  objectNode.set(Parameter.DATA,data);
}",0.9577836411609498
141875,"public Map getMap(){
  HashMap<String,String> map=new HashMap<String,String>();
  try {
    map=objectMapper.readValue(objectNode.toString(),new TypeReference<Map>(){
    }
);
  }
 catch (  JsonMappingException e) {
    e.printStackTrace();
  }
catch (  JsonParseException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return map;
}","public Map getMap(){
  HashMap map=new HashMap();
  try {
    map=objectMapper.readValue(objectNode.toString(),new TypeReference<HashMap>(){
    }
);
  }
 catch (  JsonMappingException e) {
    e.printStackTrace();
  }
catch (  JsonParseException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return map;
}",0.9532967032967034
141876,"@Override public void add(String key,Object value){
  logger.debug(""String_Node_Str"",key,value);
  objectNode.putPOJO(key,value.toString());
}","@Override public void add(String key,Object value){
  logger.debug(""String_Node_Str"",key,value);
  try {
    objectNode.putPOJO(key,objectMapper.writeValueAsString(value));
  }
 catch (  JsonProcessingException e) {
    e.printStackTrace();
  }
}",0.654639175257732
141877,"public void addMap(Map map,Boolean base64_encoded,String type_encoded,String type_no_encoded){
  if (map == null) {
    logger.debug(""String_Node_Str"");
    return;
  }
  String mapString;
  try {
    mapString=objectMapper.writeValueAsString(map);
  }
 catch (  JsonProcessingException e) {
    e.printStackTrace();
    return;
  }
  if (base64_encoded) {
    objectNode.put(type_encoded,Util.base64Encode(mapString));
  }
 else {
    add(type_no_encoded,map.toString());
  }
}","public void addMap(Map map,Boolean base64_encoded,String type_encoded,String type_no_encoded){
  if (map == null) {
    logger.debug(""String_Node_Str"");
    return;
  }
  String mapString;
  try {
    mapString=objectMapper.writeValueAsString(map);
  }
 catch (  JsonProcessingException e) {
    e.printStackTrace();
    return;
  }
  if (base64_encoded) {
    objectNode.put(type_encoded,Util.base64Encode(mapString));
  }
 else {
    add(type_no_encoded,map);
  }
}",0.9714285714285714
141878,"@Test public void testTrackPageView3() throws Exception {
  Emitter emitter=new Emitter(testURL,HttpMethod.GET);
  Subject subject=new Subject();
  subject.setViewPort(320,480);
  Tracker tracker=new Tracker(emitter,subject,""String_Node_Str"",""String_Node_Str"",true);
  emitter.setRequestMethod(RequestMethod.Asynchronous);
  Map<String,String> context=new HashMap<String,String>();
  ArrayList<Map> contextList=new ArrayList<Map>();
  context.put(""String_Node_Str"",""String_Node_Str"");
  contextList.add(context);
  tracker.trackPageView(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",contextList,0);
  emitter.flushBuffer();
}","@Test public void testTrackPageView3() throws Exception {
  Emitter emitter=new Emitter(localURL,HttpMethod.GET);
  Subject subject=new Subject();
  subject.setViewPort(320,480);
  Tracker tracker=new Tracker(emitter,subject,""String_Node_Str"",""String_Node_Str"",false);
  emitter.setRequestMethod(RequestMethod.Asynchronous);
  Map<String,String> context=new HashMap<String,String>();
  ArrayList<Map> contextList=new ArrayList<Map>();
  context.put(""String_Node_Str"",""String_Node_Str"");
  contextList.add(context);
  tracker.trackPageView(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",contextList,0);
  emitter.flushBuffer();
}",0.9873817034700316
141879,"/** 
 * @param eventData The properties of the event. Has two field:A ""data"" field containing the event properties and A ""schema"" field identifying the schema against which the data is validated
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackUnstructuredEvent(Map<String,Object> eventData,Map context,long timestamp){
  Payload payload=new TrackerPayload();
  SchemaPayload envelope=new SchemaPayload();
  envelope.setSchema(unstructSchema);
  envelope.setData(eventData);
  payload.add(Parameter.EVENT,Constants.EVENT_UNSTRUCTURED);
  payload.addMap(envelope.getMap(),base64Encoded,Parameter.UNSTRUCTURED_ENCODED,Parameter.UNSTRUCTURED);
  completePayload(payload,context,timestamp);
  addTrackerPayload(payload);
}","/** 
 * @param eventData The properties of the event. Has two field:A ""data"" field containing the event properties and A ""schema"" field identifying the schema against which the data is validated
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackUnstructuredEvent(Map<String,Object> eventData,List<Map> context,long timestamp){
  Payload payload=new TrackerPayload();
  SchemaPayload envelope=new SchemaPayload();
  envelope.setSchema(unstructSchema);
  envelope.setData(eventData);
  payload.add(Parameter.EVENT,Constants.EVENT_UNSTRUCTURED);
  payload.addMap(envelope.getMap(),base64Encoded,Parameter.UNSTRUCTURED_ENCODED,Parameter.UNSTRUCTURED);
  completePayload(payload,context,timestamp);
  addTrackerPayload(payload);
}",0.9962825278810408
141880,"/** 
 * This is an internal method called by track_ecommerce_transaction. It is not for public use.
 * @param order_id Order ID
 * @param sku Item SKU
 * @param price Item price
 * @param quantity Item quantity
 * @param name Item name
 * @param category Item category
 * @param currency The currency the price is expressed in
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
protected void trackEcommerceTransactionItem(String order_id,String sku,Double price,Integer quantity,String name,String category,String currency,Map context,long timestamp){
  Preconditions.checkNotNull(name);
  Preconditions.checkNotNull(category);
  Preconditions.checkNotNull(currency);
  Preconditions.checkArgument(!order_id.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!sku.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!name.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!category.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!currency.isEmpty(),""String_Node_Str"");
  Payload payload=new TrackerPayload();
  payload.add(Parameter.EVENT,Constants.EVENT_ECOMM_ITEM);
  payload.add(Parameter.TI_ITEM_ID,order_id);
  payload.add(Parameter.TI_ITEM_SKU,sku);
  payload.add(Parameter.TI_ITEM_NAME,name);
  payload.add(Parameter.TI_ITEM_CATEGORY,category);
  payload.add(Parameter.TI_ITEM_PRICE,price);
  payload.add(Parameter.TI_ITEM_QUANTITY,quantity);
  payload.add(Parameter.TI_ITEM_CURRENCY,currency);
  completePayload(payload,context,timestamp);
  addTrackerPayload(payload);
}","/** 
 * This is an internal method called by track_ecommerce_transaction. It is not for public use.
 * @param order_id Order ID
 * @param sku Item SKU
 * @param price Item price
 * @param quantity Item quantity
 * @param name Item name
 * @param category Item category
 * @param currency The currency the price is expressed in
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
protected void trackEcommerceTransactionItem(String order_id,String sku,Double price,Integer quantity,String name,String category,String currency,List<Map> context,long timestamp){
  Preconditions.checkNotNull(name);
  Preconditions.checkNotNull(category);
  Preconditions.checkNotNull(currency);
  Preconditions.checkArgument(!order_id.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!sku.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!name.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!category.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!currency.isEmpty(),""String_Node_Str"");
  Payload payload=new TrackerPayload();
  payload.add(Parameter.EVENT,Constants.EVENT_ECOMM_ITEM);
  payload.add(Parameter.TI_ITEM_ID,order_id);
  payload.add(Parameter.TI_ITEM_SKU,sku);
  payload.add(Parameter.TI_ITEM_NAME,name);
  payload.add(Parameter.TI_ITEM_CATEGORY,category);
  payload.add(Parameter.TI_ITEM_PRICE,price);
  payload.add(Parameter.TI_ITEM_QUANTITY,quantity);
  payload.add(Parameter.TI_ITEM_CURRENCY,currency);
  completePayload(payload,context,timestamp);
  addTrackerPayload(payload);
}",0.9981132075471698
141881,"/** 
 * @param order_id ID of the eCommerce transaction
 * @param total_value Total transaction value
 * @param affiliation Transaction affiliation
 * @param tax_value Transaction tax value
 * @param shipping Delivery cost charged
 * @param city Delivery address city
 * @param state Delivery address state
 * @param country Delivery address country
 * @param currency The currency the price is expressed in
 * @param items The items in the transaction
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackEcommerceTransaction(String order_id,Double total_value,String affiliation,Double tax_value,Double shipping,String city,String state,String country,String currency,List<TransactionItem> items,Map context,long timestamp){
  Preconditions.checkNotNull(affiliation);
  Preconditions.checkNotNull(city);
  Preconditions.checkNotNull(state);
  Preconditions.checkNotNull(country);
  Preconditions.checkNotNull(currency);
  Preconditions.checkArgument(!order_id.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!affiliation.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!city.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!state.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!country.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!currency.isEmpty(),""String_Node_Str"");
  Payload payload=new TrackerPayload();
  payload.add(Parameter.EVENT,Constants.EVENT_ECOMM);
  payload.add(Parameter.TR_ID,order_id);
  payload.add(Parameter.TR_TOTAL,total_value);
  payload.add(Parameter.TR_AFFILIATION,affiliation);
  payload.add(Parameter.TR_TAX,tax_value);
  payload.add(Parameter.TR_SHIPPING,shipping);
  payload.add(Parameter.TR_CITY,city);
  payload.add(Parameter.TR_STATE,state);
  payload.add(Parameter.TR_COUNTRY,country);
  payload.add(Parameter.TR_CURRENCY,currency);
  completePayload(payload,context,timestamp);
  for (  TransactionItem item : items) {
    trackEcommerceTransactionItem((String)item.get(Parameter.TI_ITEM_ID),(String)item.get(Parameter.TI_ITEM_SKU),(Double)item.get(Parameter.TI_ITEM_PRICE),(Integer)item.get(Parameter.TI_ITEM_QUANTITY),(String)item.get(Parameter.TI_ITEM_NAME),(String)item.get(Parameter.TI_ITEM_CATEGORY),(String)item.get(Parameter.TI_ITEM_CURRENCY),(Map)item.get(Parameter.CONTEXT),timestamp);
  }
}","/** 
 * @param order_id ID of the eCommerce transaction
 * @param total_value Total transaction value
 * @param affiliation Transaction affiliation
 * @param tax_value Transaction tax value
 * @param shipping Delivery cost charged
 * @param city Delivery address city
 * @param state Delivery address state
 * @param country Delivery address country
 * @param currency The currency the price is expressed in
 * @param items The items in the transaction
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackEcommerceTransaction(String order_id,Double total_value,String affiliation,Double tax_value,Double shipping,String city,String state,String country,String currency,List<TransactionItem> items,List<Map> context,long timestamp){
  Preconditions.checkNotNull(affiliation);
  Preconditions.checkNotNull(city);
  Preconditions.checkNotNull(state);
  Preconditions.checkNotNull(country);
  Preconditions.checkNotNull(currency);
  Preconditions.checkArgument(!order_id.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!affiliation.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!city.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!state.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!country.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!currency.isEmpty(),""String_Node_Str"");
  Payload payload=new TrackerPayload();
  payload.add(Parameter.EVENT,Constants.EVENT_ECOMM);
  payload.add(Parameter.TR_ID,order_id);
  payload.add(Parameter.TR_TOTAL,total_value);
  payload.add(Parameter.TR_AFFILIATION,affiliation);
  payload.add(Parameter.TR_TAX,tax_value);
  payload.add(Parameter.TR_SHIPPING,shipping);
  payload.add(Parameter.TR_CITY,city);
  payload.add(Parameter.TR_STATE,state);
  payload.add(Parameter.TR_COUNTRY,country);
  payload.add(Parameter.TR_CURRENCY,currency);
  completePayload(payload,context,timestamp);
  for (  TransactionItem item : items) {
    trackEcommerceTransactionItem((String)item.get(Parameter.TI_ITEM_ID),(String)item.get(Parameter.TI_ITEM_SKU),(Double)item.get(Parameter.TI_ITEM_PRICE),(Integer)item.get(Parameter.TI_ITEM_QUANTITY),(String)item.get(Parameter.TI_ITEM_NAME),(String)item.get(Parameter.TI_ITEM_CATEGORY),(String)item.get(Parameter.TI_ITEM_CURRENCY),(List<Map>)item.get(Parameter.CONTEXT),timestamp);
  }
}",0.9974905897114178
141882,"/** 
 * @param pageUrl URL of the viewed page
 * @param pageTitle Title of the viewed page
 * @param referrer Referrer of the page
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackPageView(String pageUrl,String pageTitle,String referrer,Map context,double timestamp){
  Preconditions.checkNotNull(pageUrl);
  Preconditions.checkArgument(!pageUrl.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!pageTitle.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!referrer.isEmpty(),""String_Node_Str"");
  Payload payload=new TrackerPayload();
  payload.add(Parameter.EVENT,Constants.EVENT_PAGE_VIEW);
  payload.add(Parameter.PAGE_URL,pageUrl);
  payload.add(Parameter.PAGE_TITLE,pageTitle);
  payload.add(Parameter.PAGE_REFR,referrer);
  completePayload(payload,context,timestamp);
  addTrackerPayload(payload);
}","/** 
 * @param pageUrl URL of the viewed page
 * @param pageTitle Title of the viewed page
 * @param referrer Referrer of the page
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackPageView(String pageUrl,String pageTitle,String referrer,List<Map> context,double timestamp){
  Preconditions.checkNotNull(pageUrl);
  Preconditions.checkArgument(!pageUrl.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!pageTitle.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!referrer.isEmpty(),""String_Node_Str"");
  Payload payload=new TrackerPayload();
  payload.add(Parameter.EVENT,Constants.EVENT_PAGE_VIEW);
  payload.add(Parameter.PAGE_URL,pageUrl);
  payload.add(Parameter.PAGE_TITLE,pageTitle);
  payload.add(Parameter.PAGE_REFR,referrer);
  completePayload(payload,context,timestamp);
  addTrackerPayload(payload);
}",0.9967248908296944
141883,"/** 
 * @param payload Payload builder
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 * @return A completed Payload
 */
private Payload completePayload(Payload payload,Map context,double timestamp){
  payload.add(Parameter.APPID,this.appId);
  payload.add(Parameter.NAMESPACE,this.namespace);
  payload.add(Parameter.TRACKER_VERSION,Version.VERSION);
  payload.add(Parameter.TIMESTAMP,(timestamp == 0 ? Util.getTimestamp() : timestamp));
  if (context != null) {
    SchemaPayload envelope=new SchemaPayload();
    envelope.setSchema(contextSchema);
    envelope.setData(context);
    payload.addMap(context,this.base64Encoded,Parameter.CONTEXT_ENCODED,Parameter.CONTEXT);
  }
  if (this.subject != null)   payload.addMap(subject.getSubject());
  return payload;
}","/** 
 * @param payload Payload builder
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 * @return A completed Payload
 */
private Payload completePayload(Payload payload,List<Map> context,double timestamp){
  payload.add(Parameter.APPID,this.appId);
  payload.add(Parameter.NAMESPACE,this.namespace);
  payload.add(Parameter.TRACKER_VERSION,Version.VERSION);
  payload.add(Parameter.TIMESTAMP,(timestamp == 0 ? Util.getTimestamp() : timestamp));
  if (context != null) {
    SchemaPayload envelope=new SchemaPayload();
    envelope.setSchema(contextSchema);
    envelope.setData(context);
    payload.addMap(envelope.getMap(),this.base64Encoded,Parameter.CONTEXT_ENCODED,Parameter.CONTEXT);
  }
  if (this.subject != null)   payload.addMap(subject.getSubject());
  return payload;
}",0.9821428571428572
141884,"/** 
 * @param category Category of the event
 * @param action The event itself
 * @param label Refer to the object the action is performed on
 * @param property Property associated with either the action or the object
 * @param value A value associated with the user action
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackStructuredEvent(String category,String action,String label,String property,int value,Map context,long timestamp){
  Preconditions.checkNotNull(label);
  Preconditions.checkNotNull(property);
  Preconditions.checkArgument(!label.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!property.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!category.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!action.isEmpty(),""String_Node_Str"");
  Payload payload=new TrackerPayload();
  payload.add(Parameter.EVENT,Constants.EVENT_STRUCTURED);
  payload.add(Parameter.SE_CATEGORY,category);
  payload.add(Parameter.SE_ACTION,action);
  payload.add(Parameter.SE_LABEL,label);
  payload.add(Parameter.SE_PROPERTY,property);
  payload.add(Parameter.SE_VALUE,value);
  completePayload(payload,context,timestamp);
  addTrackerPayload(payload);
}","/** 
 * @param category Category of the event
 * @param action The event itself
 * @param label Refer to the object the action is performed on
 * @param property Property associated with either the action or the object
 * @param value A value associated with the user action
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackStructuredEvent(String category,String action,String label,String property,int value,List<Map> context,long timestamp){
  Preconditions.checkNotNull(label);
  Preconditions.checkNotNull(property);
  Preconditions.checkArgument(!label.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!property.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!category.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!action.isEmpty(),""String_Node_Str"");
  Payload payload=new TrackerPayload();
  payload.add(Parameter.EVENT,Constants.EVENT_STRUCTURED);
  payload.add(Parameter.SE_CATEGORY,category);
  payload.add(Parameter.SE_ACTION,action);
  payload.add(Parameter.SE_LABEL,label);
  payload.add(Parameter.SE_PROPERTY,property);
  payload.add(Parameter.SE_VALUE,value);
  completePayload(payload,context,timestamp);
  addTrackerPayload(payload);
}",0.9976452119309264
141885,"/** 
 * @param name The name of the screen view event
 * @param id Screen view ID
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackScreenView(String name,String id,Map context,long timestamp){
  Preconditions.checkNotNull(id);
  Preconditions.checkArgument(!name.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!id.isEmpty(),""String_Node_Str"");
  Map<String,String> screenViewProperties=new HashMap<String,String>();
  screenViewProperties.put(Parameter.SV_NAME,name);
  screenViewProperties.put(Parameter.SV_ID,id);
  SchemaPayload payload=new SchemaPayload();
  payload.setSchema(this.baseSchemaPath + ""String_Node_Str"" + this.schemaTag+ Version.VERSION);
  payload.setData(screenViewProperties);
  trackUnstructuredEvent(payload.getMap(),context,timestamp);
}","/** 
 * @param name The name of the screen view event
 * @param id Screen view ID
 * @param context Custom context for the event
 * @param timestamp Optional user-provided timestamp for the event
 */
public void trackScreenView(String name,String id,List<Map> context,long timestamp){
  Preconditions.checkNotNull(id);
  Preconditions.checkArgument(!name.isEmpty(),""String_Node_Str"");
  Preconditions.checkArgument(!id.isEmpty(),""String_Node_Str"");
  Map<String,String> screenViewProperties=new HashMap<String,String>();
  screenViewProperties.put(Parameter.SV_NAME,name);
  screenViewProperties.put(Parameter.SV_ID,id);
  SchemaPayload payload=new SchemaPayload();
  payload.setSchema(this.baseSchemaPath + ""String_Node_Str"" + this.schemaTag+ Version.VERSION);
  payload.setData(screenViewProperties);
  trackUnstructuredEvent(payload.getMap(),context,timestamp);
}",0.996523754345307
141886,"public TransactionItem(String order_id,String sku,double price,int quantity,String name,String category,String currency,Map context){
  put(Parameter.EVENT,""String_Node_Str"");
  put(Parameter.TI_ITEM_ID,order_id);
  put(Parameter.TI_ITEM_SKU,sku);
  put(Parameter.TI_ITEM_NAME,name);
  put(Parameter.TI_ITEM_CATEGORY,category);
  put(Parameter.TI_ITEM_PRICE,price);
  put(Parameter.TI_ITEM_QUANTITY,quantity);
  put(Parameter.TI_ITEM_CURRENCY,currency);
  put(Parameter.CONTEXT,context);
  put(Parameter.TIMESTAMP,Util.getTimestamp());
}","public TransactionItem(String order_id,String sku,double price,int quantity,String name,String category,String currency,List<Map> context){
  put(Parameter.EVENT,""String_Node_Str"");
  put(Parameter.TI_ITEM_ID,order_id);
  put(Parameter.TI_ITEM_SKU,sku);
  put(Parameter.TI_ITEM_NAME,name);
  put(Parameter.TI_ITEM_CATEGORY,category);
  put(Parameter.TI_ITEM_PRICE,price);
  put(Parameter.TI_ITEM_QUANTITY,quantity);
  put(Parameter.TI_ITEM_CURRENCY,currency);
  put(Parameter.CONTEXT,context);
  put(Parameter.TIMESTAMP,Util.getTimestamp());
}",0.9888888888888888
141887,"public PayloadMap track_page_view_config(String page_url,String page_title,String referrer,String vendor,JSONObject context) throws UnsupportedEncodingException ;","public PayloadMap track_page_view_config(String page_url,String page_title,String referrer,JSONObject context) throws UnsupportedEncodingException ;",0.9548387096774194
141888,"public PayloadMap track_struct_event_config(String category,String action,String label,String property,String value,String vendor,JSONObject context) throws UnsupportedEncodingException ;","public PayloadMap track_struct_event_config(String category,String action,String label,String property,String value,JSONObject context) throws UnsupportedEncodingException ;",0.9611111111111112
141889,"public PayloadMap track_ecommerce_transaction_item_config(String order_id,String sku,double price,int quantity,String name,String category,String currency,String vendor,JSONObject context) throws UnsupportedEncodingException ;","public PayloadMap track_ecommerce_transaction_item_config(String order_id,String sku,String price,String quantity,String name,String category,String currency,JSONObject context,String transaction_id) throws UnsupportedEncodingException ;",0.8466522678185745
141890,"public void track_ecommerce_transaction_item(String order_id,String sku,double price,int quantity,String name,String category,String currency,String context) throws JSONException, URISyntaxException, IOException ;","public void track_ecommerce_transaction_item(String order_id,String sku,Double price,Integer quantity,String name,String category,String currency,String context,String transaction_id) throws JSONException, URISyntaxException, IOException ;",0.9247787610619468
141891,"public void track_page_view(String page_url,String page_title,String referrer,String context) throws UnsupportedEncodingException, IOException, URISyntaxException, JSONException ;","public void track_page_view(String page_url,String page_title,String referrer,String context) throws IOException, URISyntaxException, JSONException ;",0.9085365853658536
141892,"public void track() throws URISyntaxException, ClientProtocolException, IOException ;","public void track() throws URISyntaxException, IOException ;",0.8275862068965517
141893,"/** 
 * @see io.netty.handler.codec.ByteToMessageCodec#decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)
 */
@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in,List<Object> out) throws Exception {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",in.toString(StandardCharsets.UTF_8));
  }
  int retryCount=0;
  Exception thrownException=null;
  byte[] data=new byte[in.readableBytes()];
  in.readBytes(data);
  while (retryCount < 2) {
    try {
      asyncInputFeeder.feedInput(data,0,data.length);
      int event=-1;
      while (isValidEvent(event=streamReader.next())) {
        if (streamReader.getDepth() == STANZA_ELEMENT_DEPTH - 1) {
          if (event == XMLStreamConstants.END_ELEMENT) {
            out.add(new KixmppStreamEnd());
          }
 else           if (event == XMLStreamConstants.START_ELEMENT) {
            StAXElementBuilder streamElementBuilder=new StAXElementBuilder(true);
            streamElementBuilder.process(streamReader);
            out.add(new KixmppStreamStart(null));
          }
        }
 else         if (streamReader.getDepth() >= STANZA_ELEMENT_DEPTH) {
          if (event == XMLStreamConstants.START_ELEMENT && streamReader.getDepth() == STANZA_ELEMENT_DEPTH) {
            elementBuilder=new StAXElementBuilder(true);
            elementBuilder.process(streamReader);
            Element element=elementBuilder.getElement();
            if (""String_Node_Str"".equals(element.getQualifiedName())) {
              throw new RuntimeException(""String_Node_Str"");
            }
          }
 else           if (event == XMLStreamConstants.END_ELEMENT && streamReader.getDepth() == STANZA_ELEMENT_DEPTH) {
            elementBuilder.process(streamReader);
            Element element=elementBuilder.getElement();
            out.add(element);
          }
 else {
            elementBuilder.process(streamReader);
          }
        }
      }
      break;
    }
 catch (    Exception e) {
      retryCount++;
      thrownException=e;
      try {
        streamReader.close();
      }
  finally {
        streamReader=inputFactory.createAsyncXMLStreamReader();
        asyncInputFeeder=streamReader.getInputFeeder();
      }
    }
  }
  if (retryCount > 1) {
    throw thrownException;
  }
}","/** 
 * @see io.netty.handler.codec.ByteToMessageCodec#decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)
 */
@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in,List<Object> out) throws Exception {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",in.toString(StandardCharsets.UTF_8));
  }
  int retryCount=0;
  Exception thrownException=null;
  byte[] data=new byte[in.readableBytes()];
  in.readBytes(data);
  if (streamReader != null) {
    while (retryCount < 2) {
      try {
        asyncInputFeeder.feedInput(data,0,data.length);
        int event=-1;
        while (isValidEvent(event=streamReader.next())) {
          if (streamReader.getDepth() == STANZA_ELEMENT_DEPTH - 1) {
            if (event == XMLStreamConstants.END_ELEMENT) {
              out.add(new KixmppStreamEnd());
              asyncInputFeeder.endOfInput();
              streamReader.close();
              streamReader=null;
              asyncInputFeeder=null;
              break;
            }
 else             if (event == XMLStreamConstants.START_ELEMENT) {
              StAXElementBuilder streamElementBuilder=new StAXElementBuilder(true);
              streamElementBuilder.process(streamReader);
              out.add(new KixmppStreamStart(null));
            }
          }
 else           if (streamReader.getDepth() >= STANZA_ELEMENT_DEPTH) {
            if (event == XMLStreamConstants.START_ELEMENT && streamReader.getDepth() == STANZA_ELEMENT_DEPTH) {
              elementBuilder=new StAXElementBuilder(true);
              elementBuilder.process(streamReader);
              Element element=elementBuilder.getElement();
              if (""String_Node_Str"".equals(element.getQualifiedName())) {
                throw new RuntimeException(""String_Node_Str"");
              }
            }
 else             if (event == XMLStreamConstants.END_ELEMENT && streamReader.getDepth() == STANZA_ELEMENT_DEPTH) {
              elementBuilder.process(streamReader);
              Element element=elementBuilder.getElement();
              out.add(element);
            }
 else {
              elementBuilder.process(streamReader);
            }
          }
        }
        break;
      }
 catch (      Exception e) {
        retryCount++;
        logger.info(""String_Node_Str"" + e.getMessage());
        thrownException=e;
        try {
          streamReader.close();
        }
  finally {
          streamReader=inputFactory.createAsyncXMLStreamReader();
          asyncInputFeeder=streamReader.getInputFeeder();
        }
      }
    }
    if (retryCount > 1) {
      throw thrownException;
    }
  }
}",0.9200724783571572
141894,"/** 
 * @see com.kixeye.kixmpp.server.module.KixmppModule#getFeatures(io.netty.channel.Channel)
 */
public List<Element> getFeatures(Channel channel){
  List<Element> features=new LinkedList<>();
  features.add(new Element(""String_Node_Str"",Namespace.getNamespace(""String_Node_Str"",""String_Node_Str"")));
  Boolean isSessionEnabled=channel.attr(IS_SESSION_ESTABLISHED).get();
  if (isSessionEnabled == null) {
    Element bind=new Element(""String_Node_Str"",null,""String_Node_Str"");
    features.add(bind);
  }
  return features;
}","/** 
 * @see com.kixeye.kixmpp.server.module.KixmppModule#getFeatures(io.netty.channel.Channel)
 */
public List<Element> getFeatures(Channel channel){
  List<Element> features=new LinkedList<>();
  Boolean isSessionEnabled=channel.attr(IS_SESSION_ESTABLISHED).get();
  if (isSessionEnabled == null) {
    Element bind=new Element(""String_Node_Str"",null,""String_Node_Str"");
    features.add(bind);
  }
  return features;
}",0.8863157894736842
141895,"public void visitMROp(MapReduceOper mr) throws VisitorException {
  splan.UDFs.addAll(mr.UDFs);
  updateUDFs(mr.mapPlan);
  new PhyPlanSetter(mr.mapPlan).visit();
  new PhyPlanSetter(mr.reducePlan).visit();
  StormOper mo=getSOp(StormOper.OpType.MAP,getAlias(mr.mapPlan,false));
  mo.mapKeyType=mr.mapKeyType;
  splan.add(mo);
  String mapAlias=mo.name();
  System.out.println(""String_Node_Str"" + mapAlias + ""String_Node_Str"");
  if (pc.getProperties().getProperty(mapAlias + ""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    mo.shuffleBefore(true);
  }
  if (pc.getProperties().getProperty(mapAlias + ""String_Node_Str"",null) != null) {
    mo.setParallelismHint(Integer.parseInt(pc.getProperties().getProperty(mapAlias + ""String_Node_Str"")));
  }
  for (  PhysicalOperator po : mr.mapPlan.getRoots()) {
    POLoad pl=(POLoad)po;
    if (pl instanceof NOPLoad) {
      continue;
    }
    String fn=pl.getLFile().getFileName();
    if (!rootMap.containsKey(fn) && pl.getLoadFunc() instanceof SpoutWrapper) {
      StormOper spout=getSOp(StormOper.OpType.SPOUT,po.getAlias());
      SpoutWrapper sw=((SpoutWrapper)pl.getLoadFunc());
      spout.setParallelismHint(sw.getParallelismHint());
      spout.setSpout(sw.getSpout());
      spout.setTupleConverter(sw.getTupleConverter());
      splan.add(spout);
      splan.addPLSpoutLink(spout,pl);
      rootMap.put(fn,spout);
    }
    if (rootMap.containsKey(fn)) {
      try {
        splan.connect(rootMap.get(fn),mo);
      }
 catch (      PlanException e) {
        e.printStackTrace();
      }
    }
 else {
      List<StormOper> wait=missingRoots.get(po);
      if (wait == null) {
        wait=new ArrayList<StormOper>();
        missingRoots.put(fn,wait);
      }
      wait.add(mo);
    }
  }
  mo.setPlan(mr.mapPlan);
  if (mr.combinePlan.size() > 0) {
    mo.isCombined=true;
  }
  if (mr.reducePlan.size() == 0) {
    setupStore(mr.mapPlan.getLeaves(),mo);
    return;
  }
  StormOper po;
  String red_alias;
  if (mr.reducePlan.getRoots().get(0) instanceof POPackage) {
    red_alias=getAlias(mr.mapPlan,false);
  }
 else {
    red_alias=(mr.combinePlan.size() > 0) ? getAlias(mr.combinePlan,false) : getAlias(mr.reducePlan,true);
  }
  String window_opts=StormOper.getWindowOpts(pc,red_alias);
  if (mr.combinePlan.size() == 0 || window_opts != null) {
    po=getSOp(StormOper.OpType.BASIC_PERSIST,red_alias);
    po.setWindowOptions(window_opts);
  }
 else {
    po=getSOp(StormOper.OpType.COMBINE_PERSIST,getAlias(mr.combinePlan,false));
    po.setPlan(mr.combinePlan);
    po.mapKeyType=mr.mapKeyType;
  }
  if (mr.getRequestedParallelism() > 0) {
    po.setParallelismHint(mr.getRequestedParallelism());
  }
  splan.add(po);
  if (!po.getStateFactory(pc).getClass().getName().startsWith(""String_Node_Str"")) {
    StateFactory sf=po.getStateFactory(pc);
    splan.UDFs.add(sf.getClass().getName());
    if (IUDFExposer.class.isInstance(sf)) {
      IUDFExposer ex=(IUDFExposer)sf;
      splan.UDFs.addAll(ex.getUDFs());
    }
  }
  try {
    splan.connect(mo,po);
  }
 catch (  PlanException e) {
    e.printStackTrace();
  }
  StormOper rdo=getSOp(StormOper.OpType.REDUCE_DELTA,getAlias(mr.reducePlan,false));
  splan.add(rdo);
  try {
    splan.connect(po,rdo);
  }
 catch (  PlanException e) {
    e.printStackTrace();
  }
  rdo.setPlan(mr.reducePlan);
  rdo.setWindowOptions(window_opts);
  setupStore(mr.reducePlan.getLeaves(),rdo);
}","public void visitMROp(MapReduceOper mr) throws VisitorException {
  splan.UDFs.addAll(mr.UDFs);
  updateUDFs(mr.mapPlan);
  new PhyPlanSetter(mr.mapPlan).visit();
  new PhyPlanSetter(mr.reducePlan).visit();
  StormOper mo=getSOp(StormOper.OpType.MAP,getAlias(mr.mapPlan,false));
  mo.mapKeyType=mr.mapKeyType;
  splan.add(mo);
  String mapAlias=mo.name();
  log.info(""String_Node_Str"" + mapAlias + ""String_Node_Str"");
  if (pc.getProperties().getProperty(mapAlias + ""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    mo.shuffleBefore(true);
  }
  if (pc.getProperties().getProperty(mapAlias + ""String_Node_Str"",null) != null) {
    mo.setParallelismHint(Integer.parseInt(pc.getProperties().getProperty(mapAlias + ""String_Node_Str"")));
  }
  for (  PhysicalOperator po : mr.mapPlan.getRoots()) {
    POLoad pl=(POLoad)po;
    if (pl instanceof NOPLoad) {
      continue;
    }
    String fn=pl.getLFile().getFileName();
    if (!rootMap.containsKey(fn) && pl.getLoadFunc() instanceof SpoutWrapper) {
      StormOper spout=getSOp(StormOper.OpType.SPOUT,po.getAlias());
      SpoutWrapper sw=((SpoutWrapper)pl.getLoadFunc());
      spout.setParallelismHint(sw.getParallelismHint());
      spout.setSpout(sw.getSpout());
      spout.setTupleConverter(sw.getTupleConverter());
      splan.add(spout);
      splan.addPLSpoutLink(spout,pl);
      rootMap.put(fn,spout);
    }
    if (rootMap.containsKey(fn)) {
      try {
        splan.connect(rootMap.get(fn),mo);
      }
 catch (      PlanException e) {
        e.printStackTrace();
      }
    }
 else {
      List<StormOper> wait=missingRoots.get(po);
      if (wait == null) {
        wait=new ArrayList<StormOper>();
        missingRoots.put(fn,wait);
      }
      wait.add(mo);
    }
  }
  mo.setPlan(mr.mapPlan);
  if (mr.combinePlan.size() > 0) {
    mo.isCombined=true;
  }
  if (mr.reducePlan.size() == 0) {
    setupStore(mr.mapPlan.getLeaves(),mo);
    return;
  }
  StormOper po;
  String red_alias;
  if (mr.reducePlan.getRoots().get(0) instanceof POPackage) {
    red_alias=getAlias(mr.mapPlan,false);
  }
 else {
    red_alias=(mr.combinePlan.size() > 0) ? getAlias(mr.combinePlan,false) : getAlias(mr.reducePlan,true);
  }
  String window_opts=StormOper.getWindowOpts(pc,red_alias);
  if (mr.combinePlan.size() == 0 || window_opts != null) {
    po=getSOp(StormOper.OpType.BASIC_PERSIST,red_alias);
    po.setWindowOptions(window_opts);
  }
 else {
    po=getSOp(StormOper.OpType.COMBINE_PERSIST,getAlias(mr.combinePlan,false));
    po.setPlan(mr.combinePlan);
    po.mapKeyType=mr.mapKeyType;
  }
  if (mr.getRequestedParallelism() > 0) {
    po.setParallelismHint(mr.getRequestedParallelism());
  }
  splan.add(po);
  if (!po.getStateFactory(pc).getClass().getName().startsWith(""String_Node_Str"")) {
    StateFactory sf=po.getStateFactory(pc);
    splan.UDFs.add(sf.getClass().getName());
    if (IUDFExposer.class.isInstance(sf)) {
      IUDFExposer ex=(IUDFExposer)sf;
      splan.UDFs.addAll(ex.getUDFs());
    }
  }
  try {
    splan.connect(mo,po);
  }
 catch (  PlanException e) {
    e.printStackTrace();
  }
  StormOper rdo=getSOp(StormOper.OpType.REDUCE_DELTA,getAlias(mr.reducePlan,false));
  splan.add(rdo);
  try {
    splan.connect(po,rdo);
  }
 catch (  PlanException e) {
    e.printStackTrace();
  }
  rdo.setPlan(mr.reducePlan);
  rdo.setWindowOptions(window_opts);
  setupStore(mr.reducePlan.getLeaves(),rdo);
}",0.9962077012835472
141896,"public void convert(){
  try {
    StaticPlanFixer spf=new StaticPlanFixer(plan,pc);
    spf.convert();
    ReplJoinFixer rjf=new ReplJoinFixer(plan,spf.getStaticPlan(),pc);
    rjf.convert();
    if (rjf.getReplFileMap().size() > 0) {
      splan.setReplFileMap(rjf.getReplFileMap());
    }
    if (spf.getStaticPlan().size() > 0) {
      splan.setStaticPlan(spf.getStaticPlan());
    }
    visit();
    splan.setRootMap(rootMap);
    if (missingRoots.size() > 0) {
      System.out.println(""String_Node_Str"" + missingRoots);
    }
  }
 catch (  VisitorException e) {
    e.printStackTrace();
  }
}","public void convert(){
  try {
    StaticPlanFixer spf=new StaticPlanFixer(plan,pc);
    spf.convert();
    ReplJoinFixer rjf=new ReplJoinFixer(plan,spf.getStaticPlan(),pc);
    rjf.convert();
    if (rjf.getReplFileMap().size() > 0) {
      splan.setReplFileMap(rjf.getReplFileMap());
    }
    if (spf.getStaticPlan().size() > 0) {
      splan.setStaticPlan(spf.getStaticPlan());
    }
    visit();
    splan.setRootMap(rootMap);
    if (missingRoots.size() > 0) {
      log.warn(""String_Node_Str"" + missingRoots);
    }
  }
 catch (  VisitorException e) {
    e.printStackTrace();
  }
}",0.9797979797979798
141897,"public StormExecutionEngine(PigContext pigContext,boolean run_local){
  super(pigContext);
  this.launcher=new StormLauncher(run_local,false);
}","public StormExecutionEngine(PigContext pigContext,boolean run_local){
  super(pigContext);
  pigContext.getProperties().setProperty(PigConfiguration.OPT_FETCH,""String_Node_Str"");
  this.launcher=new StormLauncher(run_local,false);
}",0.7659574468085106
141898,"@Override public PigStats launchPig(PhysicalPlan php,String grpName,PigContext pc) throws PlanException, VisitorException, IOException, ExecException, Exception {
  log.trace(""String_Node_Str"");
  SOperPlan sp=compile(php,pc);
  if (pc.getClassLoader().getResource(""String_Node_Str"") != null) {
    pc.addScriptFile(""String_Node_Str"",""String_Node_Str"");
  }
  if (pc.getClassLoader().getResource(""String_Node_Str"") != null) {
    pc.addScriptFile(""String_Node_Str"",""String_Node_Str"");
  }
  if (!pc.getProperties().getProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"") && sp.getStaticPlan() != null) {
    log.info(""String_Node_Str"");
    NoCompileMapReduceLauncher mrlauncher=new NoCompileMapReduceLauncher(sp.getStaticPlan());
    ExecType memo_execType=pc.getExecType();
    if (memo_execType.isLocal()) {
      pc.setExecType(ExecType.LOCAL);
    }
 else {
      pc.setExecType(ExecType.MAPREDUCE);
    }
    MonkeyPatch.PigContextRefreshEngine(pc);
    PigStats ps=mrlauncher.launchPig(php,grpName,pc);
    if (ps.getReturnCode() != ReturnCode.SUCCESS) {
      log.warn(""String_Node_Str"");
      return ps;
    }
    pc.setExecType(memo_execType);
    MonkeyPatch.PigContextRefreshEngine(pc);
    if (sp.getReplFileMap() != null) {
      DataStorage dfs=pc.getDfs();
      FileSpec a_spec=(FileSpec)sp.getReplFileMap().values().toArray()[0];
      ElementDescriptor tmp=dfs.asElement(a_spec.getFileName());
      OutputStream tmp_fh=tmp.create();
      tmp_fh.close();
      tmp.delete();
      for (      Entry<FileSpec,FileSpec> ent : sp.getReplFileMap().entrySet()) {
        log.info(""String_Node_Str"" + ent.getKey() + ""String_Node_Str""+ ent.getValue());
        ElementDescriptor fn_from=dfs.asElement(ent.getKey().getFileName());
        ElementDescriptor fn_to=dfs.asElement(ent.getValue().getFileName());
        fn_from.rename(fn_to);
      }
    }
  }
  if (sp.getReplFileMap() != null) {
    new ReplJoinFileFixer(sp).convert();
  }
  if (pc.getProperties().getProperty(""String_Node_Str"",null) == null) {
    pc.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"" + php.getLeaves().get(0).getAlias());
  }
  log.info(""String_Node_Str"");
  pc.getProperties().setProperty(PLANKEY,ObjectSerializer.serialize(sp));
  if (!pc.inIllustrator) {
    File submitJarFile;
    if (pc.getProperties().getProperty(""String_Node_Str"",null) != null) {
      submitJarFile=new File(pc.getProperties().getProperty(""String_Node_Str""));
      log.info(""String_Node_Str"" + submitJarFile.getName());
    }
 else {
      submitJarFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      log.info(""String_Node_Str"" + submitJarFile.getName());
      submitJarFile.deleteOnExit();
    }
    pc.skipJars.clear();
    pc.predeployedJars.clear();
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    if (pc.getClassLoader().getResource(""String_Node_Str"") != null) {
      pc.addScriptFile(""String_Node_Str"",""String_Node_Str"");
    }
    if (pc.getClassLoader().getResource(""String_Node_Str"") != null) {
      pc.addScriptFile(""String_Node_Str"",""String_Node_Str"");
    }
    pc.getProperties().setProperty(""String_Node_Str"",org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());
    pc.getProperties().setProperty(""String_Node_Str"",org.apache.hadoop.fs.LocalFileSystem.class.getName());
    if (run_local) {
      pc.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
    }
    if (pc.getProperties().getProperty(Main.RUN_DIRECT_KEY,""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      log.info(""String_Node_Str"");
    }
 else {
      FileOutputStream fos=new FileOutputStream(submitJarFile);
      JarManager.createJar(fos,sp.UDFs,pc);
      log.info(""String_Node_Str"" + submitJarFile.getName() + ""String_Node_Str"");
    }
    pc.getProperties().remove(PLANKEY);
    try {
      log.info(""String_Node_Str"");
      Main m;
      if (flexy) {
        m=new FlexyMain(pc,sp);
      }
 else {
        m=new Main(pc,sp);
      }
      log.info(""String_Node_Str"");
      m.launch(submitJarFile.getAbsolutePath());
      log.info(""String_Node_Str"");
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  return PigStatsUtil.getPigStats(ReturnCode.SUCCESS);
}","@Override public PigStats launchPig(PhysicalPlan php,String grpName,PigContext pc) throws PlanException, VisitorException, IOException, ExecException, Exception {
  log.trace(""String_Node_Str"");
  SOperPlan sp=compile(php,pc);
  if (pc.getClassLoader().getResource(""String_Node_Str"") != null) {
    pc.addScriptFile(""String_Node_Str"",""String_Node_Str"");
  }
  if (pc.getClassLoader().getResource(""String_Node_Str"") != null) {
    pc.addScriptFile(""String_Node_Str"",""String_Node_Str"");
  }
  if (!pc.getProperties().getProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"") && sp.getStaticPlan() != null) {
    log.info(""String_Node_Str"");
    NoCompileMapReduceLauncher mrlauncher=new NoCompileMapReduceLauncher(sp.getStaticPlan());
    ExecType memo_execType=pc.getExecType();
    if (memo_execType.isLocal()) {
      pc.setExecType(ExecType.LOCAL);
    }
 else {
      pc.setExecType(ExecType.MAPREDUCE);
    }
    MonkeyPatch.PigContextRefreshEngine(pc);
    PigStats ps=mrlauncher.launchPig(php,grpName,pc);
    if (ps.getReturnCode() != ReturnCode.SUCCESS) {
      log.warn(""String_Node_Str"");
      return ps;
    }
    pc.setExecType(memo_execType);
    MonkeyPatch.PigContextRefreshEngine(pc);
    if (sp.getReplFileMap() != null) {
      DataStorage dfs=pc.getDfs();
      FileSpec a_spec=(FileSpec)sp.getReplFileMap().values().toArray()[0];
      ElementDescriptor tmp=dfs.asElement(a_spec.getFileName());
      OutputStream tmp_fh=tmp.create();
      tmp_fh.close();
      tmp.delete();
      for (      Entry<FileSpec,FileSpec> ent : sp.getReplFileMap().entrySet()) {
        log.info(""String_Node_Str"" + ent.getKey() + ""String_Node_Str""+ ent.getValue());
        ElementDescriptor fn_from=dfs.asElement(ent.getKey().getFileName());
        ElementDescriptor fn_to=dfs.asElement(ent.getValue().getFileName());
        fn_from.rename(fn_to);
      }
    }
  }
  if (sp.getReplFileMap() != null) {
    new ReplJoinFileFixer(sp).convert();
  }
  if (pc.getProperties().getProperty(""String_Node_Str"",null) == null) {
    pc.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"" + php.getLeaves().get(0).getAlias());
  }
  log.info(""String_Node_Str"");
  pc.getProperties().setProperty(PLANKEY,ObjectSerializer.serialize(sp));
  if (!pc.inIllustrator) {
    File submitJarFile;
    if (pc.getProperties().getProperty(""String_Node_Str"",null) != null) {
      submitJarFile=new File(pc.getProperties().getProperty(""String_Node_Str""));
      log.info(""String_Node_Str"" + submitJarFile.getName());
    }
 else {
      submitJarFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      log.info(""String_Node_Str"" + submitJarFile.getName());
      submitJarFile.deleteOnExit();
    }
    pc.skipJars.clear();
    pc.predeployedJars.clear();
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    sp.UDFs.add(""String_Node_Str"");
    try {
      pc.getClassLoader().loadClass(""String_Node_Str"");
      sp.UDFs.add(""String_Node_Str"");
    }
 catch (    ClassNotFoundException e) {
    }
    sp.UDFs.add(""String_Node_Str"");
    if (pc.getClassLoader().getResource(""String_Node_Str"") != null) {
      pc.addScriptFile(""String_Node_Str"",""String_Node_Str"");
    }
    if (pc.getClassLoader().getResource(""String_Node_Str"") != null) {
      pc.addScriptFile(""String_Node_Str"",""String_Node_Str"");
    }
    pc.getProperties().setProperty(""String_Node_Str"",org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());
    pc.getProperties().setProperty(""String_Node_Str"",org.apache.hadoop.fs.LocalFileSystem.class.getName());
    if (run_local) {
      pc.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
    }
    if (pc.getProperties().getProperty(Main.RUN_DIRECT_KEY,""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      log.info(""String_Node_Str"");
    }
 else {
      FileOutputStream fos=new FileOutputStream(submitJarFile);
      JarManager.createJar(fos,sp.UDFs,pc);
      log.info(""String_Node_Str"" + submitJarFile.getName() + ""String_Node_Str"");
    }
    pc.getProperties().remove(PLANKEY);
    try {
      log.info(""String_Node_Str"");
      Main m;
      if (flexy) {
        m=new FlexyMain(pc,sp);
      }
 else {
        m=new Main(pc,sp);
      }
      log.info(""String_Node_Str"");
      m.launch(submitJarFile.getAbsolutePath());
      log.info(""String_Node_Str"");
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  return PigStatsUtil.getPigStats(ReturnCode.SUCCESS);
}",0.9869281045751634
141899,"public List<Integer> chooseTasks(int taskId,final TridentTuple tup){
  if (gr.is_set_fields()) {
    return new ArrayList(){
{
        add(targetTasks.get(tup.select(gr_fields).hashCode() % num_tasks));
      }
    }
;
  }
 else   if (gr.is_set_shuffle()) {
    return new ArrayList(){
{
        add(targetTasks.get(r.nextInt(num_tasks) % num_tasks));
      }
    }
;
  }
 else   if (wrapped != null) {
    return wrapped.chooseTasks(taskId,tup);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + gr.getSetField());
  }
}","public List<Integer> chooseTasks(int taskId,final TridentTuple tup){
  if (gr.is_set_fields()) {
    return new ArrayList(){
{
        add(targetTasks.get(Math.abs(tup.select(gr_fields).hashCode()) % num_tasks));
      }
    }
;
  }
 else   if (gr.is_set_shuffle()) {
    return new ArrayList(){
{
        add(targetTasks.get(r.nextInt(num_tasks)));
      }
    }
;
  }
 else   if (wrapped != null) {
    return wrapped.chooseTasks(taskId,tup);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + gr.getSetField());
  }
}",0.9793621013133208
141900,"@Override public void reportError(Throwable t){
}","@Override public void reportError(Throwable t){
  throw new RuntimeException(t);
}",0.7480916030534351
141901,"@Override public void execute(Tuple input){
  boolean send_coord=false;
  int coord_type=1;
  if (input.getSourceStreamId().equals(""String_Node_Str"")) {
    if (pipeline.commit(input)) {
      coord_type=3;
    }
 else {
      coord_type=4;
    }
    send_coord=true;
  }
 else   if (input.getSourceStreamId().equals(""String_Node_Str"")) {
    seenCoord+=1;
    if (seenCoord == expectedCoord) {
      pipeline.flush();
      send_coord=true;
      seenCoord=0;
    }
  }
 else {
    send_coord=pipeline.execute(input);
    if (send_coord) {
      pipeline.flush();
    }
  }
  if (send_coord) {
    long batchid=input.getLong(0);
    collector.emit(""String_Node_Str"",input,new Values(batchid,coord_type));
  }
  collector.ack(input);
}","@Override public void execute(Tuple input){
  try {
    boolean send_coord=false;
    int coord_type=1;
    if (input.getSourceStreamId().equals(""String_Node_Str"")) {
      if (pipeline.commit(input)) {
        coord_type=3;
      }
 else {
        coord_type=4;
      }
      send_coord=true;
    }
 else     if (input.getSourceStreamId().equals(""String_Node_Str"")) {
      seenCoord+=1;
      if (seenCoord == expectedCoord) {
        pipeline.flush();
        send_coord=true;
        seenCoord=0;
      }
    }
 else {
      send_coord=pipeline.execute(input);
      if (send_coord) {
        pipeline.flush();
      }
    }
    if (send_coord) {
      long batchid=input.getLong(0);
      collector.emit(""String_Node_Str"",input,new Values(batchid,coord_type));
    }
    collector.ack(input);
  }
 catch (  Throwable e) {
    collector.fail(input);
  }
}",0.7716436637390214
141902,"public Integer getParallelism(){
  int parallelism=0;
  for (  FStream v : G.vertexSet()) {
    if (v.getParallelism() > parallelism) {
      parallelism=v.getParallelism();
    }
  }
  if (parallelism == 0) {
    return null;
  }
  return parallelism;
}","public Integer getParallelism(){
  int parallelism=0;
  for (  FStream v : G.vertexSet()) {
    if (v.getIsStage0Agg()) {
      continue;
    }
    if (v.getParallelism() > parallelism) {
      parallelism=v.getParallelism();
    }
  }
  if (parallelism == 0) {
    return null;
  }
  return parallelism;
}",0.9071428571428573
141903,"@Override public void nextTuple(){
  try {
    byte[] cur=q.poll(10,TimeUnit.MILLISECONDS);
    if (cur != null) {
      collector.emit(new Values(cur));
    }
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}","@Override public void nextTuple(){
  try {
    byte[] cur=q.poll(10,TimeUnit.MILLISECONDS);
    if (cur != null) {
      int msgid=rand.nextInt();
      outstanding.put(msgid,cur);
      collector.emit(new Values(cur),msgid);
    }
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}",0.8695652173913043
141904,"@Override public void open(Map conf,TopologyContext context,SpoutOutputCollector collector){
  q=InMemTestQueue.getQueue(qName);
  this.collector=collector;
}","@Override public void open(Map conf,TopologyContext context,SpoutOutputCollector collector){
  q=InMemTestQueue.getQueue(qName);
  failures=InMemTestQueue.getFailed(qName);
  this.collector=collector;
  rand=new Random();
  outstanding=new ConcurrentHashMap<Integer,byte[]>();
}",0.7247706422018348
141905,"public void onGlobalLayout(){
  Log.d(ControlActivity.TAG,""String_Node_Str"");
  if (cc == null || fader == null) {
    return;
  }
  if (cc.getMode() == CrossControl.MODE_POINTER_PLAIN) {
    fader.setVisibility(View.GONE);
  }
 else {
    fader.setVisibility(View.VISIBLE);
  }
  fader.setValue(cc.getSpeed() / 100.0f,0);
  setCrrSelected();
  setEnableLock();
  softpultLayout.getViewTreeObserver().removeGlobalOnLayoutListener(this);
}","public void onGlobalLayout(){
  Log.d(ControlActivity.TAG,""String_Node_Str"");
  if (cc == null || fader == null) {
    return;
  }
  if (cc.getMode() == CrossControl.MODE_POINTER_PLAIN) {
    fader.setVisibility(View.GONE);
  }
 else {
    fader.setVisibility(View.VISIBLE);
  }
  fader.setValue(cc.getSpeed() / 100.0f,0);
  setCrrSelected();
  setEnableLock();
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    softpultLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
  }
 else {
    softpultLayout.getViewTreeObserver().removeGlobalOnLayoutListener(this);
  }
}",0.8416988416988417
141906,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  Log.d(TAG,""String_Node_Str"");
  softpultLayout=(RelativeLayoutWithMultitouch)inflater.inflate(R.layout.pantilt_fragment,container,false);
  softpultLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    public void onGlobalLayout(){
      Log.d(ControlActivity.TAG,""String_Node_Str"");
      if (cc == null || fader == null) {
        return;
      }
      if (cc.getMode() == CrossControl.MODE_POINTER_PLAIN) {
        fader.setVisibility(View.GONE);
      }
 else {
        fader.setVisibility(View.VISIBLE);
      }
      fader.setValue(cc.getSpeed() / 100.0f,0);
      setCrrSelected();
      setEnableLock();
      softpultLayout.getViewTreeObserver().removeGlobalOnLayoutListener(this);
    }
  }
);
  EntityManager entityManager=EntityManager.get();
  cc=(CrossControl)softpultLayout.findViewById(R.id.crosscontrol);
  PositionModel positionModel=entityManager.getEntitySelection(EntityManager.CENTRAL_ENTITY_SELECTION).getModel(Type.Position);
  cc.setValueListener(positionModel);
  Float[] position=positionModel.getWidgetValue();
  cc.setValue(position[0],position[1]);
  fader=(FaderVerticalControl)softpultLayout.findViewById(R.id.speedfader);
  fader.setValueListener(new IValueListener(){
    @Override public void onValueChanged(    View v,    float x,    float y){
      cc.setSpeed((int)(x * 100));
    }
  }
);
  Log.d(ControlActivity.TAG,""String_Node_Str"" + cc.getSpeed());
  fader.setValue(cc.getSpeed() / 100.0f,0);
  modePlain=(Button)softpultLayout.findViewById(R.id.mode_plain);
  modePlain.setOnClickListener(this);
  modeFollow=(Button)softpultLayout.findViewById(R.id.mode_follow);
  modeFollow.setOnClickListener(this);
  modeSensor=(Button)softpultLayout.findViewById(R.id.mode_sensor);
  modeSensor.setOnClickListener(this);
  lockX=(Button)softpultLayout.findViewById(R.id.lockxdirection);
  lockX.setOnClickListener(this);
  lockY=(Button)softpultLayout.findViewById(R.id.lockydirection);
  lockY.setOnClickListener(this);
  Button reset=(Button)softpultLayout.findViewById(R.id.reset);
  reset.setOnClickListener(this);
  return softpultLayout;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  Log.d(TAG,""String_Node_Str"");
  softpultLayout=(RelativeLayoutWithMultitouch)inflater.inflate(R.layout.pantilt_fragment,container,false);
  softpultLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    public void onGlobalLayout(){
      Log.d(ControlActivity.TAG,""String_Node_Str"");
      if (cc == null || fader == null) {
        return;
      }
      if (cc.getMode() == CrossControl.MODE_POINTER_PLAIN) {
        fader.setVisibility(View.GONE);
      }
 else {
        fader.setVisibility(View.VISIBLE);
      }
      fader.setValue(cc.getSpeed() / 100.0f,0);
      setCrrSelected();
      setEnableLock();
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
        softpultLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        softpultLayout.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
    }
  }
);
  EntityManager entityManager=EntityManager.get();
  cc=(CrossControl)softpultLayout.findViewById(R.id.crosscontrol);
  PositionModel positionModel=entityManager.getEntitySelection(EntityManager.CENTRAL_ENTITY_SELECTION).getModel(Type.Position);
  cc.setValueListener(positionModel);
  Float[] position=positionModel.getWidgetValue();
  cc.setValue(position[0],position[1]);
  fader=(FaderVerticalControl)softpultLayout.findViewById(R.id.speedfader);
  fader.setValueListener(new IValueListener(){
    @Override public void onValueChanged(    View v,    float x,    float y){
      cc.setSpeed((int)(x * 100));
    }
  }
);
  Log.d(ControlActivity.TAG,""String_Node_Str"" + cc.getSpeed());
  fader.setValue(cc.getSpeed() / 100.0f,0);
  modePlain=(Button)softpultLayout.findViewById(R.id.mode_plain);
  modePlain.setOnClickListener(this);
  modeFollow=(Button)softpultLayout.findViewById(R.id.mode_follow);
  modeFollow.setOnClickListener(this);
  modeSensor=(Button)softpultLayout.findViewById(R.id.mode_sensor);
  modeSensor.setOnClickListener(this);
  lockX=(Button)softpultLayout.findViewById(R.id.lockxdirection);
  lockX.setOnClickListener(this);
  lockY=(Button)softpultLayout.findViewById(R.id.lockydirection);
  lockY.setOnClickListener(this);
  Button reset=(Button)softpultLayout.findViewById(R.id.reset);
  reset.setOnClickListener(this);
  return softpultLayout;
}",0.9621830683283196
141907,"private void Initialize(){
  this.setOrientation(LinearLayout.VERTICAL);
  setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT));
  int height=Context.getResources().getDisplayMetrics().heightPixels;
  int max=Math.max(Context.getResources().getDisplayMetrics().widthPixels,height) / 8;
  textView=new TextView(Context);
  textView.setMaxWidth(max);
  textView.setMinWidth(max);
  textView.setMaxLines(1);
  textView.setSingleLine();
  textView.setTextColor(getResources().getColor(R.color.dark_white_smoke));
  textView.setEllipsize(TextUtils.TruncateAt.MARQUEE);
  textView.setText(mExecutor.getName());
  textView.setLongClickable(true);
  textView.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    final View v){
      final AlertDialog.Builder alert=new AlertDialog.Builder(v.getContext());
      alert.setTitle(getContext().getResources().getString(R.string.executor_settings_title));
      final View view=View.inflate(v.getContext(),R.layout.executor_setting_dialog,null);
      final EditText input=(EditText)view.findViewById(R.id.editName);
      input.setText(textView.getText());
      final RadioGroup dropdown=(RadioGroup)view.findViewById(R.id.radioButtonGroup);
      final RadioButton intensity_btn=(RadioButton)view.findViewById(R.id.radioButton_Intensity);
      final RadioButton timing_btn=(RadioButton)view.findViewById(R.id.radioButton_Timing);
      final RadioButton speed_btn=(RadioButton)view.findViewById(R.id.radioButton_EffectSpeed);
switch (mExecutor.getFaderMode()) {
case 0:
        intensity_btn.setChecked(true);
      break;
case 1:
    timing_btn.setChecked(true);
  break;
case 2:
speed_btn.setChecked(true);
break;
}
final ToggleButton toggle_btn=(ToggleButton)view.findViewById(R.id.toggleButton_flash);
toggle_btn.setChecked(mExecutor.getToggle());
alert.setView(view);
alert.setPositiveButton(getContext().getResources().getString(android.R.string.ok),new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int whichButton){
String str=input.getEditableText().toString();
mExecutor.setName(str,false);
mExecutor.setToggle(toggle_btn.isChecked(),false);
if (intensity_btn.isChecked()) {
mExecutor.setFaderMode(0,false);
}
 else if (timing_btn.isChecked()) {
mExecutor.setFaderMode(1,false);
}
 else if (speed_btn.isChecked()) {
mExecutor.setFaderMode(2,false);
}
textView.setText(mExecutor.getName());
Toast.makeText(alert.getContext(),str,Toast.LENGTH_LONG).show();
}
}
);
AlertDialog alertDialog=alert.create();
alertDialog.show();
return true;
}
}
);
mExecutor.setNameChangedListener(new Entity.NameChangedListener(){
@Override public void onNameChanged(String name){
if (parentActivity != null) {
parentActivity.runOnUiThread(new Runnable(){
@Override public void run(){
textView.setText(mExecutor.getName());
instance.Resize();
instance.invalidate();
}
}
);
}
}
}
);
int margin=10;
LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
layoutParams.leftMargin=margin;
layoutParams.rightMargin=margin;
fader=new FaderVerticalControl(Context);
fader.setValue(mExecutor.getValue(),0);
fader.setBackgroundResource(R.drawable.border_normal_layer_transperent);
mExecutor.setValueChangedListener(new EntityExecutor.ValueChangedListener(){
@Override public void onValueChanged(float value){
if (parentActivity != null) {
parentActivity.runOnUiThread(new Runnable(){
@Override public void run(){
fader.setValue(mExecutor.getValue(),0);
}
}
);
}
}
}
);
fader.setValueChangedListener(new FaderVerticalControl.ValueChangedListener(){
@Override public void onValueChanged(float value,boolean isMoving){
mExecutor.setValue(value,false);
}
}
);
fader.setLayoutParams(layoutParams);
faderLayout=new FrameLayout(Context);
faderLayout.addView(fader);
layoutParams=new LinearLayout.LayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,(height / 2) + (height / 16)));
layoutParams.leftMargin=margin;
layoutParams.rightMargin=margin;
faderLayout.setLayoutParams(layoutParams);
flashbtn=new Button(Context);
flashbtn.setEnabled(false);
flashbtn.setBackgroundResource(R.drawable.btn_normal_selector);
flashbtn.setTextColor(getResources().getColor(R.color.dark_white_smoke));
flashbtn.setTextSize(18);
flashbtn.setTypeface(Typeface.createFromAsset(Context.getAssets(),""String_Node_Str""));
flashbtn.setText(getContext().getResources().getString(R.string.char_flash));
flashbtn.setTag(flashbtn.getText() + ""String_Node_Str"" + mExecutor.getName());
flashbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,height / 8));
flashbtn.setEnabled(false);
flashbtn.setClickable(false);
mExecutor.setFlashChangedListener(new EntityExecutor.FlashChangedListener(){
@Override public void onFlashChanged(float value){
if (parentActivity != null) {
parentActivity.runOnUiThread(new Runnable(){
@Override public void run(){
if (!lockflash) {
  flashbtn.setPressed(mExecutor.getFlash());
}
}
}
);
}
}
}
);
breakbtn=new Button(Context);
breakbtn.setBackgroundResource(R.drawable.btn_normal_selector);
breakbtn.setTextColor(getResources().getColor(R.color.dark_white_smoke));
breakbtn.setTypeface(Typeface.createFromAsset(Context.getAssets(),""String_Node_Str""));
breakbtn.setText(getContext().getResources().getString(R.string.char_breakback));
breakbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,height / 16));
breakbtn.setTag(breakbtn.getText() + ""String_Node_Str"" + mExecutor.getName());
breakbtn.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
mExecutor.BreakBack();
}
}
);
gobtn=new Button(Context);
gobtn.setBackgroundResource(R.drawable.btn_normal_selector);
gobtn.setTextColor(getResources().getColor(R.color.dark_white_smoke));
gobtn.setTextSize(18);
gobtn.setTypeface(Typeface.createFromAsset(Context.getAssets(),""String_Node_Str""));
gobtn.setText(getContext().getResources().getString(R.string.char_go));
gobtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,height / 8));
gobtn.setTag(gobtn.getText() + ""String_Node_Str"" + mExecutor.getName());
gobtn.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
mExecutor.GO();
}
}
);
stopbtn=new Button(Context);
stopbtn.setBackgroundResource(R.drawable.btn_normal_selector);
stopbtn.setTextColor(getResources().getColor(R.color.dark_white_smoke));
stopbtn.setTypeface(Typeface.createFromAsset(Context.getAssets(),""String_Node_Str""));
stopbtn.setText(getContext().getResources().getString(R.string.char_stop));
stopbtn.setTag(stopbtn.getText() + ""String_Node_Str"" + mExecutor.getName());
stopbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,height / 16));
stopbtn.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
mExecutor.Stop();
}
}
);
Resize();
this.addView(textView);
this.addView(stopbtn);
this.addView(breakbtn);
this.addView(gobtn);
this.addView(faderLayout);
this.addView(flashbtn);
}","private void Initialize(){
  this.setOrientation(LinearLayout.VERTICAL);
  setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT));
  int height=Context.getResources().getDisplayMetrics().heightPixels;
  int max=Math.max(Context.getResources().getDisplayMetrics().widthPixels,height) / 8;
  textView=new TextView(Context);
  textView.setMaxWidth(max);
  textView.setMinWidth(max);
  textView.setMaxLines(1);
  textView.setSingleLine();
  textView.setTextColor(getResources().getColor(R.color.dark_white_smoke));
  textView.setEllipsize(TextUtils.TruncateAt.MARQUEE);
  textView.setText(mExecutor.getName());
  textView.setLongClickable(true);
  textView.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    final View v){
      final AlertDialog.Builder alert=new AlertDialog.Builder(v.getContext());
      alert.setTitle(getContext().getResources().getString(R.string.executor_settings_title));
      final View view=View.inflate(v.getContext(),R.layout.executor_setting_dialog,null);
      final EditText input=(EditText)view.findViewById(R.id.editName);
      input.setText(textView.getText());
      final RadioGroup dropdown=(RadioGroup)view.findViewById(R.id.radioButtonGroup);
      final RadioButton intensity_btn=(RadioButton)view.findViewById(R.id.radioButton_Intensity);
      final RadioButton timing_btn=(RadioButton)view.findViewById(R.id.radioButton_Timing);
      final RadioButton speed_btn=(RadioButton)view.findViewById(R.id.radioButton_EffectSpeed);
switch (mExecutor.getFaderMode()) {
case 0:
        intensity_btn.setChecked(true);
      break;
case 1:
    timing_btn.setChecked(true);
  break;
case 2:
speed_btn.setChecked(true);
break;
}
final ToggleButton toggle_btn=(ToggleButton)view.findViewById(R.id.toggleButton_flash);
toggle_btn.setChecked(mExecutor.getToggle());
alert.setView(view);
alert.setPositiveButton(getContext().getResources().getString(android.R.string.ok),new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int whichButton){
String str=input.getEditableText().toString();
mExecutor.setName(str,false);
mExecutor.setToggle(toggle_btn.isChecked(),false);
if (intensity_btn.isChecked()) {
mExecutor.setFaderMode(0,false);
}
 else if (timing_btn.isChecked()) {
mExecutor.setFaderMode(1,false);
}
 else if (speed_btn.isChecked()) {
mExecutor.setFaderMode(2,false);
}
textView.setText(mExecutor.getName());
Toast.makeText(alert.getContext(),str,Toast.LENGTH_LONG).show();
}
}
);
AlertDialog alertDialog=alert.create();
alertDialog.show();
return true;
}
}
);
mExecutor.setNameChangedListener(new Entity.NameChangedListener(){
@Override public void onNameChanged(String name){
if (parentActivity != null) {
parentActivity.runOnUiThread(new Runnable(){
@Override public void run(){
textView.setText(mExecutor.getName());
instance.Resize();
instance.invalidate();
}
}
);
}
}
}
);
int margin=10;
LinearLayout.LayoutParams layoutParams;
if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
layoutParams=new LinearLayout.LayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
}
 else {
layoutParams=new LinearLayout.LayoutParams(new ViewGroup.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
}
layoutParams.leftMargin=margin;
layoutParams.rightMargin=margin;
fader=new FaderVerticalControl(Context);
fader.setValue(mExecutor.getValue(),0);
fader.setBackgroundResource(R.drawable.border_normal_layer_transperent);
mExecutor.setValueChangedListener(new EntityExecutor.ValueChangedListener(){
@Override public void onValueChanged(float value){
if (parentActivity != null) {
parentActivity.runOnUiThread(new Runnable(){
@Override public void run(){
fader.setValue(mExecutor.getValue(),0);
}
}
);
}
}
}
);
fader.setValueChangedListener(new FaderVerticalControl.ValueChangedListener(){
@Override public void onValueChanged(float value,boolean isMoving){
mExecutor.setValue(value,false);
}
}
);
fader.setLayoutParams(layoutParams);
faderLayout=new FrameLayout(Context);
faderLayout.addView(fader);
if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
layoutParams=new LinearLayout.LayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,(height / 2) + (height / 16)));
}
 else {
layoutParams=new LinearLayout.LayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,(height / 2) + (height / 16)));
}
layoutParams.leftMargin=margin;
layoutParams.rightMargin=margin;
faderLayout.setLayoutParams(layoutParams);
flashbtn=new Button(Context);
flashbtn.setEnabled(false);
flashbtn.setBackgroundResource(R.drawable.btn_normal_selector);
flashbtn.setTextColor(getResources().getColor(R.color.dark_white_smoke));
flashbtn.setTextSize(18);
flashbtn.setTypeface(Typeface.createFromAsset(Context.getAssets(),""String_Node_Str""));
flashbtn.setText(getContext().getResources().getString(R.string.char_flash));
flashbtn.setTag(flashbtn.getText() + ""String_Node_Str"" + mExecutor.getName());
flashbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,height / 8));
flashbtn.setEnabled(false);
flashbtn.setClickable(false);
mExecutor.setFlashChangedListener(new EntityExecutor.FlashChangedListener(){
@Override public void onFlashChanged(float value){
if (parentActivity != null) {
parentActivity.runOnUiThread(new Runnable(){
@Override public void run(){
if (!lockflash) {
  flashbtn.setPressed(mExecutor.getFlash());
}
}
}
);
}
}
}
);
breakbtn=new Button(Context);
breakbtn.setBackgroundResource(R.drawable.btn_normal_selector);
breakbtn.setTextColor(getResources().getColor(R.color.dark_white_smoke));
breakbtn.setTypeface(Typeface.createFromAsset(Context.getAssets(),""String_Node_Str""));
breakbtn.setText(getContext().getResources().getString(R.string.char_breakback));
breakbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,height / 16));
breakbtn.setTag(breakbtn.getText() + ""String_Node_Str"" + mExecutor.getName());
breakbtn.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
mExecutor.BreakBack();
}
}
);
gobtn=new Button(Context);
gobtn.setBackgroundResource(R.drawable.btn_normal_selector);
gobtn.setTextColor(getResources().getColor(R.color.dark_white_smoke));
gobtn.setTextSize(18);
gobtn.setTypeface(Typeface.createFromAsset(Context.getAssets(),""String_Node_Str""));
gobtn.setText(getContext().getResources().getString(R.string.char_go));
gobtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,height / 8));
gobtn.setTag(gobtn.getText() + ""String_Node_Str"" + mExecutor.getName());
gobtn.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
mExecutor.GO();
}
}
);
stopbtn=new Button(Context);
stopbtn.setBackgroundResource(R.drawable.btn_normal_selector);
stopbtn.setTextColor(getResources().getColor(R.color.dark_white_smoke));
stopbtn.setTypeface(Typeface.createFromAsset(Context.getAssets(),""String_Node_Str""));
stopbtn.setText(getContext().getResources().getString(R.string.char_stop));
stopbtn.setTag(stopbtn.getText() + ""String_Node_Str"" + mExecutor.getName());
stopbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,height / 16));
stopbtn.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
mExecutor.Stop();
}
}
);
Resize();
this.addView(textView);
this.addView(stopbtn);
this.addView(breakbtn);
this.addView(gobtn);
this.addView(faderLayout);
this.addView(flashbtn);
}",0.7432561960838012
141908,"public Object getItems(){
  this.items=DeviceGroupWrapper.get().getWrappedDeviceFromSelection().getGobos();
  return this.items;
}","public Object getItems(){
  EntityDevice selection=DeviceGroupWrapper.get().getLastWrappedDeviceFromSelection();
  if (selection != null) {
    this.items=selection.getGobos();
  }
  return this.items;
}",0.7207207207207207
141909,"@Override public View getView(int index,View convertView,ViewGroup parent){
  ImageView imageView=null;
  View view=null;
  try {
    if (convertView == null) {
      LayoutInflater inflater=(LayoutInflater)ctx.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View rowView=inflater.inflate(R.layout.gobo_cell,parent,false);
      view=rowView;
      imageView=(ImageView)view.findViewById(R.id.goboicon);
      imageView.setPadding(2,2,2,2);
    }
 else {
      view=(View)convertView;
      imageView=(ImageView)view.findViewById(R.id.goboicon);
    }
    if (this.items == null) {
      imageView.setVisibility(View.INVISIBLE);
      return view;
    }
    imageView.setVisibility(View.VISIBLE);
    if (!images.contains(this.items[index].getValue())) {
      images.add(new ImageWithKey(this.items[index].getImage(ctx),this.items[index].getValue()));
    }
    imageView.setImageBitmap(images.get(this.items[index].getValue()).getBitmap());
    if (DeviceGroupWrapper.get().getLastWrappedDeviceFromSelection().getSelectedValueIndices().contains(items[index].getIndex())) {
    }
 else {
      imageView.setBackgroundColor(Color.TRANSPARENT);
    }
  }
 catch (  Exception e) {
    e.toString();
  }
  return view;
}","@Override public View getView(int index,View convertView,ViewGroup parent){
  ImageView imageView=null;
  View view=null;
  try {
    if (convertView == null) {
      LayoutInflater inflater=(LayoutInflater)ctx.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View rowView=inflater.inflate(R.layout.gobo_cell,parent,false);
      view=rowView;
      imageView=(ImageView)view.findViewById(R.id.goboicon);
      imageView.setPadding(2,2,2,2);
    }
 else {
      view=(View)convertView;
      imageView=(ImageView)view.findViewById(R.id.goboicon);
    }
    if (this.items == null) {
      imageView.setVisibility(View.INVISIBLE);
      return view;
    }
    imageView.setVisibility(View.VISIBLE);
    if (!images.contains(this.items[index].getValue())) {
      images.add(new ImageWithKey(this.items[index].getImage(ctx),this.items[index].getValue()));
    }
    imageView.setImageBitmap(images.get(this.items[index].getValue()).getBitmap());
    if (DeviceGroupWrapper.get().getLastWrappedDeviceFromSelection().getSelectedValueIndices().contains(items[index].getIndex())) {
    }
 else {
      imageView.setBackgroundColor(Color.TRANSPARENT);
    }
  }
 catch (  Exception e) {
    Log.d(""String_Node_Str"",DMXControlApplication.stackTraceToString(e));
  }
  return view;
}",0.9736842105263158
141910,"private void stopAllThings(){
  if (this.animatorZoom != null) {
    this.animatorZoom.cancel();
  }
  if (this.animatorZoom != null) {
    this.animatorFocus.cancel();
  }
  if (this.animatorZoom != null) {
    this.animatorIris.cancel();
  }
  if (this.animatorZoom != null) {
    this.animatorFrost.cancel();
  }
}","private void stopAllThings(){
  if (this.animatorZoom != null) {
    this.animatorZoom.cancel();
  }
  if (this.animatorFocus != null) {
    this.animatorFocus.cancel();
  }
  if (this.animatorIris != null) {
    this.animatorIris.cancel();
  }
  if (this.animatorFrost != null) {
    this.animatorFrost.cancel();
  }
}",0.959119496855346
141911,"@Override public View getView(int index,View convertView,ViewGroup parent){
  ImageView imageView=null;
  TextView editText=null;
  View view=null;
  try {
    if (convertView == null) {
      LayoutInflater inflater=(LayoutInflater)ctx.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View rowView=inflater.inflate(R.layout.device_cell,parent,false);
      view=rowView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      imageView.setPadding(8,8,8,8);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
 else {
      view=(View)convertView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
    Entity ent=ReceivedData.get().Devices.get(index);
    if (ent == null) {
      imageView.setVisibility(View.INVISIBLE);
      editText.setVisibility(View.INVISIBLE);
      return view;
    }
    imageView.setVisibility(View.VISIBLE);
    imageView.setImageBitmap(ent.getImage(ctx));
    editText.setText(ent.getName());
    if (mEntityManager.isInEntitySelection(Type.DEVICE,mEntitySelection,ent.getId())) {
      imageView.setBackgroundColor(SelectionColor);
    }
 else {
      imageView.setBackgroundColor(Color.TRANSPARENT);
    }
  }
 catch (  Exception e) {
    e.toString();
  }
  return view;
}","@Override public View getView(int index,View convertView,ViewGroup parent){
  ImageView imageView=null;
  TextView editText=null;
  View view=null;
  try {
    if (convertView == null) {
      LayoutInflater inflater=(LayoutInflater)ctx.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View rowView=inflater.inflate(R.layout.device_cell,parent,false);
      view=rowView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      imageView.setPadding(8,8,8,8);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
 else {
      view=(View)convertView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
    Entity ent=ReceivedData.get().Devices.get(index);
    if (ent == null) {
      imageView.setVisibility(View.INVISIBLE);
      editText.setVisibility(View.INVISIBLE);
      return view;
    }
    imageView.setVisibility(View.VISIBLE);
    if (!images.contains(ent.getImageName())) {
      images.add(new ImageWithKey(ent.getImage(ctx),ent.getImageName()));
    }
    imageView.setImageBitmap(images.get(ent.getImageName()).getBitmap());
    editText.setText(ent.getName());
    editText.setText(ent.getName());
    if (mEntityManager.isInEntitySelection(Type.DEVICE,mEntitySelection,ent.getId())) {
      imageView.setBackgroundColor(SelectionColor);
    }
 else {
      imageView.setBackgroundColor(Color.TRANSPARENT);
    }
  }
 catch (  Exception e) {
    e.toString();
  }
  return view;
}",0.9227019498607242
141912,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ImageView imageView=null;
  TextView editText=null;
  View view=null;
  try {
    if (convertView == null) {
      LayoutInflater inflater=(LayoutInflater)ctx.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View rowView=inflater.inflate(R.layout.device_cell,parent,false);
      view=rowView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      imageView.setPadding(8,8,8,8);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
 else {
      view=(View)convertView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
    Entity ent=ReceivedData.get().Groups.get(position);
    if (ent == null) {
      imageView.setVisibility(View.INVISIBLE);
      editText.setVisibility(View.INVISIBLE);
      return view;
    }
    imageView.setVisibility(View.VISIBLE);
    imageView.setImageBitmap(ent.getImage(ctx));
    editText.setText(ent.getName());
    if (mEntityManager.isInEntitySelection(Type.GROUP,mEntitySelection,ent.getId())) {
      imageView.setBackgroundColor(SelectionColor);
    }
 else {
      imageView.setBackgroundColor(Color.TRANSPARENT);
    }
  }
 catch (  Exception e) {
    e.toString();
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ImageView imageView=null;
  TextView editText=null;
  View view=null;
  try {
    if (convertView == null) {
      LayoutInflater inflater=(LayoutInflater)ctx.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View rowView=inflater.inflate(R.layout.device_cell,parent,false);
      view=rowView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      imageView.setPadding(8,8,8,8);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
 else {
      view=(View)convertView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
    Entity ent=ReceivedData.get().Groups.get(position);
    if (ent == null) {
      imageView.setVisibility(View.INVISIBLE);
      editText.setVisibility(View.INVISIBLE);
      return view;
    }
    imageView.setVisibility(View.VISIBLE);
    if (!images.contains(ent.getImageName())) {
      images.add(new ImageWithKey(ent.getImage(ctx),ent.getImageName()));
    }
    imageView.setImageBitmap(images.get(ent.getImageName()).getBitmap());
    editText.setText(ent.getName());
    if (mEntityManager.isInEntitySelection(Type.GROUP,mEntitySelection,ent.getId())) {
      imageView.setBackgroundColor(SelectionColor);
    }
 else {
      imageView.setBackgroundColor(Color.TRANSPARENT);
    }
  }
 catch (  Exception e) {
    e.toString();
  }
  return view;
}",0.9349278930707
141913,"public Bitmap getImage(Context context){
  File imgFile=new File(IconStorageName + File.separator + mImage);
  if (imgFile.isFile()) {
    if (imgFile.exists()) {
      return BitmapFactory.decodeFile(imgFile.getAbsolutePath());
    }
  }
  return BitmapFactory.decodeResource(context.getResources(),R.drawable.icon);
}","public Bitmap getImage(Context context){
  try {
    File imgFile=new File(IconStorageName + File.separator + mImage);
    if (imgFile.isFile()) {
      if (imgFile.exists()) {
        return BitmapFactory.decodeFile(imgFile.getAbsolutePath());
      }
    }
  }
 catch (  Exception e) {
  }
  return BitmapFactory.decodeResource(context.getResources(),R.drawable.icon);
}",0.9204052098408104
141914,"@Override public View getView(int index,View convertView,ViewGroup parent){
  ImageView imageView=null;
  TextView editText=null;
  View view=null;
  try {
    if (convertView == null) {
      LayoutInflater inflater=(LayoutInflater)ctx.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View rowView=inflater.inflate(R.layout.device_cell,parent,false);
      view=rowView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      imageView.setPadding(8,8,8,8);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
 else {
      view=(View)convertView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
    Entity ent=ReceivedData.get().Devices.get(index);
    if (ent == null) {
      imageView.setVisibility(View.INVISIBLE);
      editText.setVisibility(View.INVISIBLE);
      return view;
    }
    imageView.setVisibility(View.VISIBLE);
    imageView.setImageBitmap(ent.getImage(ctx));
    editText.setText(ent.getName());
    final TextView finalEditText=editText;
    final View finalView=view;
    ent.setNameChangedListener(new Entity.NameChangedListener(){
      @Override public void onNameChanged(      String name){
        finalEditText.setText(name);
        finalView.invalidate();
      }
    }
);
    if (mEntityManager.isInEntitySelection(Type.DEVICE,mEntitySelection,ent.getId())) {
      imageView.setBackgroundColor(SelectionColor);
    }
 else {
      imageView.setBackgroundColor(Color.TRANSPARENT);
    }
  }
 catch (  Exception e) {
    e.toString();
  }
  return view;
}","@Override public View getView(int index,View convertView,ViewGroup parent){
  ImageView imageView=null;
  TextView editText=null;
  View view=null;
  try {
    if (convertView == null) {
      LayoutInflater inflater=(LayoutInflater)ctx.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View rowView=inflater.inflate(R.layout.device_cell,parent,false);
      view=rowView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      imageView.setPadding(8,8,8,8);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
 else {
      view=(View)convertView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
    Entity ent=ReceivedData.get().Devices.get(index);
    if (ent == null) {
      imageView.setVisibility(View.INVISIBLE);
      editText.setVisibility(View.INVISIBLE);
      return view;
    }
    imageView.setVisibility(View.VISIBLE);
    imageView.setImageBitmap(ent.getImage(ctx));
    editText.setText(ent.getName());
    final TextView finalEditText=editText;
    ent.setNameChangedListener(new Entity.NameChangedListener(){
      @Override public void onNameChanged(      String name){
        finalEditText.setText(name);
        notifyDataSetChanged();
      }
    }
);
    if (mEntityManager.isInEntitySelection(Type.DEVICE,mEntitySelection,ent.getId())) {
      imageView.setBackgroundColor(SelectionColor);
    }
 else {
      imageView.setBackgroundColor(Color.TRANSPARENT);
    }
  }
 catch (  Exception e) {
    e.toString();
  }
  return view;
}",0.977984496124031
141915,"@Override public void onNameChanged(String name){
  finalEditText.setText(name);
  finalView.invalidate();
}","@Override public void onNameChanged(String name){
  finalEditText.setText(name);
  notifyDataSetChanged();
}",0.8518518518518519
141916,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ImageView imageView=null;
  TextView editText=null;
  View view=null;
  try {
    if (convertView == null) {
      LayoutInflater inflater=(LayoutInflater)ctx.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View rowView=inflater.inflate(R.layout.device_cell,parent,false);
      view=rowView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      imageView.setPadding(8,8,8,8);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
 else {
      view=(View)convertView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
    Entity ent=ReceivedData.get().Groups.get(position);
    if (ent == null) {
      imageView.setVisibility(View.INVISIBLE);
      editText.setVisibility(View.INVISIBLE);
      return view;
    }
    imageView.setVisibility(View.VISIBLE);
    imageView.setImageBitmap(ent.getImage(ctx));
    editText.setText(ent.getName());
    final TextView finalEditText=editText;
    final View finalView=view;
    ent.setNameChangedListener(new Entity.NameChangedListener(){
      @Override public void onNameChanged(      String name){
        finalEditText.setText(name);
        finalView.invalidate();
      }
    }
);
    if (mEntityManager.isInEntitySelection(Type.DEVICE,mEntitySelection,ent.getId())) {
      imageView.setBackgroundColor(SelectionColor);
    }
 else {
      imageView.setBackgroundColor(Color.TRANSPARENT);
    }
  }
 catch (  Exception e) {
    e.toString();
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ImageView imageView=null;
  TextView editText=null;
  View view=null;
  try {
    if (convertView == null) {
      LayoutInflater inflater=(LayoutInflater)ctx.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      View rowView=inflater.inflate(R.layout.device_cell,parent,false);
      view=rowView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      imageView.setPadding(8,8,8,8);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
 else {
      view=(View)convertView;
      imageView=(ImageView)view.findViewById(R.id.deviceCell_icon);
      editText=(TextView)view.findViewById(R.id.deviceCell_name);
    }
    Entity ent=ReceivedData.get().Groups.get(position);
    if (ent == null) {
      imageView.setVisibility(View.INVISIBLE);
      editText.setVisibility(View.INVISIBLE);
      return view;
    }
    imageView.setVisibility(View.VISIBLE);
    imageView.setImageBitmap(ent.getImage(ctx));
    editText.setText(ent.getName());
    final TextView finalEditText=editText;
    ent.setNameChangedListener(new Entity.NameChangedListener(){
      @Override public void onNameChanged(      String name){
        finalEditText.setText(name);
        notifyDataSetChanged();
      }
    }
);
    if (mEntityManager.isInEntitySelection(Type.GROUP,mEntitySelection,ent.getId())) {
      imageView.setBackgroundColor(SelectionColor);
    }
 else {
      imageView.setBackgroundColor(Color.TRANSPARENT);
    }
  }
 catch (  Exception e) {
    e.toString();
  }
  return view;
}",0.9752628324056896
141917,"@Override public void onNameChanged(String name){
  finalEditText.setText(name);
  finalView.invalidate();
}","@Override public void onNameChanged(String name){
  finalEditText.setText(name);
  notifyDataSetChanged();
}",0.8518518518518519
141918,"@Override public Object instantiateItem(ViewGroup container,int position){
  if (position >= base.size()) {
    Logger.log(""String_Node_Str"",""String_Node_Str"" + position + ""String_Node_Str""+ base.size()+ ""String_Node_Str"");
    return null;
  }
  Controller controller=base.get(position);
  LayoutInflater inflater=LayoutInflater.from(host.getActivity());
  View view=inflater.inflate(controller.getView(),container,false);
  controller.attach(view,host);
  controller.connect(view,host);
  container.addView(view);
  view.setTag(controller);
  return controller;
}","@Override public Object instantiateItem(ViewGroup container,int position){
  if (position >= base.size()) {
    Logger.log(""String_Node_Str"",""String_Node_Str"" + position + ""String_Node_Str""+ base.size()+ ""String_Node_Str"");
    return null;
  }
  Controller controller=base.get(position);
  Logger.log(""String_Node_Str"",""String_Node_Str"" + position + ""String_Node_Str""+ controller);
  LayoutInflater inflater=LayoutInflater.from(host.getActivity());
  View view=inflater.inflate(controller.getView(),container,false);
  controller.attach(view,host);
  controller.connect(view,host);
  container.addView(view);
  view.setTag(controller);
  return controller;
}",0.923202614379085
141919,"@Override public void destroyItem(ViewGroup container,int position,Object object){
  if (object instanceof Controller)   ((Controller)object).disconnect(host);
  View toRemove=container.findViewWithTag(object);
  if (toRemove != null) {
    container.removeView(toRemove);
  }
}","@Override public void destroyItem(ViewGroup container,int position,Object object){
  if (object instanceof Controller)   ((Controller)object).disconnect(host);
  Logger.log(""String_Node_Str"",""String_Node_Str"" + position + ""String_Node_Str""+ object);
}",0.6616257088846881
141920,"@Override public void onDestroy(){
  super.onDestroy();
  chatIconController.disconnect(this);
}","@Override public void onDestroy(){
  super.onDestroy();
  if (chatIconController != null) {
    chatIconController.disconnect(this);
  }
}",0.8205128205128205
141921,"@Override public Controller setup(Bundle savedInstanceState,Controller controller){
  if (controller != null && controller instanceof ModelController) {
    @SuppressWarnings(""String_Node_Str"") ModelController<? extends Model> c=(ModelController<? extends Model>)controller;
    Model model=c.getModel();
    Session session=model.getSession();
    chatIconController=new ChatCounterController(session);
    if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
      navigation=(NavigationController)savedInstanceState.getSerializable(""String_Node_Str"");
    }
 else {
      navigation=new NavigationController(new NavigationModel(session));
    }
    navigationScreen=DrawerScreen.create(navigation);
    getFragmentManager().beginTransaction().replace(R.id.navigation_drawer,navigationScreen).commit();
    navigationScreen.setUp(this,R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.drawer_layout),R.drawable.ic_map_black_24dp);
    if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
      stats=(StatsController)savedInstanceState.get(""String_Node_Str"");
    }
 else {
      stats=new StatsController(new StatsModel(session));
    }
    ViewScreen statsScreen=(ViewScreen)findViewById(R.id.game_stats_screen);
    statsScreen.display(stats,this);
  }
 else {
    Logger.log(""String_Node_Str"",""String_Node_Str"" + controller + ""String_Node_Str"");
  }
  return controller;
}","@Override public Controller setup(Bundle savedInstanceState,Controller controller){
  Session session=null;
  if (controller != null && controller instanceof ModelController) {
    @SuppressWarnings(""String_Node_Str"") ModelController<? extends Model> c=(ModelController<? extends Model>)controller;
    Model model=c.getModel();
    session=model.getSession();
  }
  if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
    chatIconController=(ChatCounterController)savedInstanceState.getSerializable(""String_Node_Str"");
  }
 else   if (session != null) {
    chatIconController=new ChatCounterController(session);
  }
 else {
    Logger.log(""String_Node_Str"",""String_Node_Str"" + controller + ""String_Node_Str"");
  }
  if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
    navigation=(NavigationController)savedInstanceState.getSerializable(""String_Node_Str"");
  }
 else   if (session != null) {
    navigation=new NavigationController(new NavigationModel(session));
  }
 else {
    Logger.log(""String_Node_Str"",""String_Node_Str"" + controller + ""String_Node_Str"");
  }
  if (navigation != null) {
    navigationScreen=DrawerScreen.create(navigation);
    getFragmentManager().beginTransaction().replace(R.id.navigation_drawer,navigationScreen).commit();
    navigationScreen.setUp(this,R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.drawer_layout),R.drawable.ic_map_black_24dp);
  }
  if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
    stats=(StatsController)savedInstanceState.get(""String_Node_Str"");
  }
 else   if (session != null) {
    stats=new StatsController(new StatsModel(session));
  }
 else {
    Logger.log(""String_Node_Str"",""String_Node_Str"" + controller + ""String_Node_Str"");
  }
  if (stats != null) {
    ViewScreen statsScreen=(ViewScreen)findViewById(R.id.game_stats_screen);
    statsScreen.display(stats,this);
  }
  return controller;
}",0.7578763127187864
141922,"@Override public void onSaveInstanceState(Bundle savedInstanceState){
  super.onSaveInstanceState(savedInstanceState);
  savedInstanceState.putSerializable(""String_Node_Str"",stats);
  savedInstanceState.putSerializable(""String_Node_Str"",navigation);
}","@Override public void onSaveInstanceState(Bundle savedInstanceState){
  super.onSaveInstanceState(savedInstanceState);
  savedInstanceState.putSerializable(""String_Node_Str"",stats);
  savedInstanceState.putSerializable(""String_Node_Str"",navigation);
  savedInstanceState.putSerializable(""String_Node_Str"",chatIconController);
}",0.8685121107266436
141923,"@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.game_screen,menu);
  View chatIconView=menu.findItem(R.id.action_chat).getActionView();
  chatIconController.attach(chatIconView,this);
  chatIconController.connect(chatIconView,this);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.game_screen,menu);
  View chatIconView=menu.findItem(R.id.action_chat).getActionView();
  if (chatIconController != null) {
    chatIconController.attach(chatIconView,this);
    chatIconController.connect(chatIconView,this);
  }
  return true;
}",0.8888888888888888
141924,"public String getCharInfo(){
  String level=""String_Node_Str"" + extractInt(lastUpdate.html,0,LEVEL);
  String text=extractString(lastUpdate.html,null,LEVEL_TEXT);
  if (text == null)   return level;
 else   return level + ""String_Node_Str"" + text;
}","public String getCharInfo(){
  if (inAstralPlane()) {
    return ""String_Node_Str"";
  }
  String level=""String_Node_Str"" + extractInt(lastUpdate.html,0,LEVEL);
  String text=extractString(lastUpdate.html,null,LEVEL_TEXT);
  if (text == null)   return level;
 else   return level + ""String_Node_Str"" + text;
}",0.8940754039497307
141925,"public MessageController(MessageModel model){
  super(model);
}","public MessageController(E model){
  super(model);
}",0.8869565217391304
141926,"@Override public void attach(View view,MessageModel model,Screen host){
  view.setBackgroundColor(model.visitErrorType(new MessageModel.ErrorTypeVisitor<Integer>(){
    @Override public Integer forNone(){
      return 0xFF0000FF;
    }
    @Override public Integer forError(){
      return 0xFFBB0000;
    }
    @Override public Integer forSevere(){
      return 0xFFBB0000;
    }
  }
));
  TextView title=(TextView)view.findViewById(R.id.message_title);
  title.setText(model.getTitle());
  TextView txtMessage=(TextView)view.findViewById(R.id.message_text);
  txtMessage.setText(model.getMessage());
  Button actionButton=(Button)view.findViewById(R.id.message_action);
  if (model.hasAction()) {
    actionButton.setText(model.getActionText());
    actionButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        getModel().triggerAction();
      }
    }
);
  }
 else {
    actionButton.setVisibility(View.GONE);
  }
}","@Override public void attach(View view,E model,Screen host){
  view.setBackgroundColor(model.visitErrorType(new MessageModel.ErrorTypeVisitor<Integer>(){
    @Override public Integer forNone(){
      return 0xFF0000FF;
    }
    @Override public Integer forError(){
      return 0xFFBB0000;
    }
    @Override public Integer forSevere(){
      return 0xFFBB0000;
    }
  }
));
  TextView title=(TextView)view.findViewById(R.id.message_title);
  title.setText(model.getTitle());
  TextView txtMessage=(TextView)view.findViewById(R.id.message_text);
  txtMessage.setText(model.getMessage());
  Button actionButton=(Button)view.findViewById(R.id.message_action);
  if (model.hasAction()) {
    actionButton.setText(model.getActionText());
    actionButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        getModel().triggerAction();
      }
    }
);
  }
 else {
    actionButton.setVisibility(View.GONE);
  }
}",0.9933024214322514
141927,"private void openChatFailure(Screen host,MessageModel message){
  Logger.log(""String_Node_Str"",""String_Node_Str"" + message.getMessage());
  MessageController error=new MessageController(message);
  host.getViewContext().getPrimaryRoute().execute(error);
}","private void openChatFailure(Screen host,MessageModel message){
  Logger.log(""String_Node_Str"",""String_Node_Str"" + message.getMessage());
  MessageController<MessageModel> error=new MessageController<MessageModel>(message);
  host.getViewContext().getPrimaryRoute().execute(error);
}",0.9479553903345724
141928,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Thread.setDefaultUncaughtExceptionHandler(new ErrorHandler(this));
  this.setContentView(this.getContentView());
  this.base=this.createViewContext();
  Controller controller=null;
  if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
    controller=(Controller)savedInstanceState.getSerializable(""String_Node_Str"");
    Logger.log(this.getClass().getSimpleName(),""String_Node_Str"" + controller);
  }
 else   if (getIntent() != null && getIntent().hasExtra(""String_Node_Str"")) {
    controller=ControllerPasser.popController((UUID)getIntent().getSerializableExtra(""String_Node_Str""));
    if (controller == null) {
      Logger.log(this.getClass().getSimpleName(),""String_Node_Str"");
    }
 else {
      Logger.log(this.getClass().getSimpleName(),""String_Node_Str"" + controller);
    }
  }
 else {
    Logger.log(this.getClass().getSimpleName(),""String_Node_Str"");
  }
  controller=this.setup(savedInstanceState,controller);
  if (controller == null) {
    MessageModel error=new MessageModel(""String_Node_Str"",MessageModel.ErrorType.ERROR);
    controller=new MessageController(error);
  }
  this.currentController=controller;
  displayController(controller,false);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Thread.setDefaultUncaughtExceptionHandler(new ErrorHandler(this));
  this.setContentView(this.getContentView());
  this.base=this.createViewContext();
  Controller controller=null;
  if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
    controller=(Controller)savedInstanceState.getSerializable(""String_Node_Str"");
    Logger.log(this.getClass().getSimpleName(),""String_Node_Str"" + controller);
  }
 else   if (getIntent() != null && getIntent().hasExtra(""String_Node_Str"")) {
    controller=ControllerPasser.popController((UUID)getIntent().getSerializableExtra(""String_Node_Str""));
    if (controller == null) {
      Logger.log(this.getClass().getSimpleName(),""String_Node_Str"");
    }
 else {
      Logger.log(this.getClass().getSimpleName(),""String_Node_Str"" + controller);
    }
  }
 else {
    Logger.log(this.getClass().getSimpleName(),""String_Node_Str"");
  }
  controller=this.setup(savedInstanceState,controller);
  if (controller == null) {
    MessageModel error=new MessageModel(""String_Node_Str"",MessageModel.ErrorType.ERROR);
    controller=new MessageController<MessageModel>(error);
  }
  this.currentController=controller;
  displayController(controller,false);
}",0.9946646341463414
141929,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  this.controller=(Controller)this.getArguments().getSerializable(""String_Node_Str"");
  if (controller == null) {
    MessageModel error=new MessageModel(""String_Node_Str"",MessageModel.ErrorType.ERROR);
    controller=new MessageController(error);
    Logger.log(""String_Node_Str"",""String_Node_Str"");
  }
  int layoutId=controller.getView();
  View view=inflater.inflate(layoutId,container,false);
  controller.attach(view,this);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  this.controller=(Controller)this.getArguments().getSerializable(""String_Node_Str"");
  if (controller == null) {
    MessageModel error=new MessageModel(""String_Node_Str"",MessageModel.ErrorType.ERROR);
    controller=new MessageController<MessageModel>(error);
    Logger.log(""String_Node_Str"",""String_Node_Str"");
  }
  int layoutId=controller.getView();
  View view=inflater.inflate(layoutId,container,false);
  controller.attach(view,this);
  return view;
}",0.9875
141930,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  this.controller=(Controller)this.getArguments().getSerializable(""String_Node_Str"");
  if (controller == null) {
    Logger.log(""String_Node_Str"",""String_Node_Str"");
    MessageModel error=new MessageModel(""String_Node_Str"",MessageModel.ErrorType.ERROR);
    controller=new MessageController(error);
  }
  int layoutId=controller.getView();
  View view=inflater.inflate(layoutId,container,false);
  controller.attach(view,this);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  this.controller=(Controller)this.getArguments().getSerializable(""String_Node_Str"");
  if (controller == null) {
    Logger.log(""String_Node_Str"",""String_Node_Str"");
    MessageModel error=new MessageModel(""String_Node_Str"",MessageModel.ErrorType.ERROR);
    controller=new MessageController<MessageModel>(error);
  }
  int layoutId=controller.getView();
  View view=inflater.inflate(layoutId,container,false);
  controller.attach(view,this);
  return view;
}",0.9875
141931,"@Override public void uncaughtException(Thread thread,Throwable ex){
  Logger.log(""String_Node_Str"",""String_Node_Str"" + ex);
  String error=""String_Node_Str"";
  error+=""String_Node_Str"" + BuildConfig.VERSION_CODE + ""String_Node_Str"";
  error+=""String_Node_Str"" + Build.VERSION.RELEASE + ""String_Node_Str"";
  error+=""String_Node_Str"" + Build.MODEL + ""String_Node_Str"";
  error+=""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str"";
  error+=""String_Node_Str"" + Log.getStackTraceString(ex);
  settings.setImmediately(ErrorReportingModel.ERROR_SETTING,error);
  System.exit(2);
}","@Override public void uncaughtException(Thread thread,Throwable ex){
  Logger.log(""String_Node_Str"",""String_Node_Str"" + ex);
  String error=getPhoneInfo();
  settings.setImmediately(ErrorReportingModel.ERROR_SETTING,error);
  System.exit(2);
}",0.5624242424242424
141932,"private Controller getController(Session session,ServerReply response){
  Log.i(""String_Node_Str"",""String_Node_Str"" + response.url);
  if (response.url.contains(""String_Node_Str"")) {
    MessageModel model=new MessageModel(session,response);
    return new MessageController(model);
  }
  if (!response.hasBody()) {
    if (response.html.contains(""String_Node_Str"")) {
      InventoryUpdateModel model=new InventoryUpdateModel(session,response);
      return new InventoryUpdateController(model);
    }
 else {
      Logger.log(""String_Node_Str"",response.url + ""String_Node_Str"" + response.html);
      return null;
    }
  }
  if (response.url.contains(""String_Node_Str"")) {
    WebModel model=new WebModel(session,response);
    return new WebController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    MessageModel model=new MessageModel(""String_Node_Str"",MessageModel.ErrorType.NONE);
    return new MessageController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    if (response.url.contains(""String_Node_Str"")) {
      Logger.log(""String_Node_Str"",""String_Node_Str"");
    }
    LoginModel model=new LoginModel(session,response);
    return new LoginController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    CreateCharacterModel model=new CreateCharacterModel(session,response);
    return new WebController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    FightModel model=new FightModel(session,response);
    return new FightController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    InventoryModel model=new InventoryModel(session,response);
    return new InventoryController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    ClosetModel model=new ClosetModel(session,response);
    return new ClosetController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    SkillsModel model=new SkillsModel(session,response);
    return new SkillsController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    CraftingModel model=new CraftingModel(session,response);
    return new CraftingController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    AccountSettingsModel model=new AccountSettingsModel(session,response);
    return new AccountSettingsController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    return new ChatController(new ChatStubModel(session));
  }
  WebModel model=new WebModel(session,response);
  return new WebController(model);
}","private Controller getController(Session session,ServerReply response){
  Log.i(""String_Node_Str"",""String_Node_Str"" + response.url);
  if (response.url.contains(""String_Node_Str"")) {
    MessageModel model=new MessageModel(session,response);
    return new MessageController<MessageModel>(model);
  }
  if (!response.hasBody()) {
    if (response.html.contains(""String_Node_Str"")) {
      InventoryUpdateModel model=new InventoryUpdateModel(session,response);
      return new InventoryUpdateController(model);
    }
 else {
      Logger.log(""String_Node_Str"",response.url + ""String_Node_Str"" + response.html);
      return null;
    }
  }
  if (response.url.contains(""String_Node_Str"")) {
    WebModel model=new WebModel(session,response);
    return new WebController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    MessageModel model=new MessageModel(""String_Node_Str"",MessageModel.ErrorType.NONE);
    return new MessageController<MessageModel>(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    if (response.url.contains(""String_Node_Str"")) {
      Logger.log(""String_Node_Str"",""String_Node_Str"");
    }
    LoginModel model=new LoginModel(session,response);
    return new LoginController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    CreateCharacterModel model=new CreateCharacterModel(session,response);
    return new WebController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    FightModel model=new FightModel(session,response);
    return new FightController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    InventoryModel model=new InventoryModel(session,response);
    return new InventoryController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    ClosetModel model=new ClosetModel(session,response);
    return new ClosetController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    SkillsModel model=new SkillsModel(session,response);
    return new SkillsController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    CraftingModel model=new CraftingModel(session,response);
    return new CraftingController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    AccountSettingsModel model=new AccountSettingsModel(session,response);
    return new AccountSettingsController(model);
  }
  if (response.url.contains(""String_Node_Str"")) {
    return new ChatController(new ChatStubModel(session));
  }
  WebModel model=new WebModel(session,response);
  return new WebController(model);
}",0.9944773175542406
141933,"@Override public void attach(View view,LoginModel model,final Screen host){
  final EditText user=(EditText)view.findViewById(R.id.login_username);
  final EditText pass=(EditText)view.findViewById(R.id.login_password);
  final Button login=(Button)view.findViewById(R.id.login_submit);
  final CheckBox configPass=(CheckBox)view.findViewById(R.id.login_config_save_password);
  final CheckBox configChat=(CheckBox)view.findViewById(R.id.login_config_enter_chat);
  final SettingsContext settings=host.getViewContext().getSettingsContext();
  user.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String[] passwordHash=settings.get(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (passwordHash.length == 2 && user.getText().toString().equalsIgnoreCase(passwordHash[0])) {
        pass.setHint(""String_Node_Str"");
      }
 else {
        pass.setHint(""String_Node_Str"");
      }
    }
  }
);
  user.setText(settings.get(""String_Node_Str"",""String_Node_Str""));
  String[] passwordHash=settings.get(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  savedUser=passwordHash[0];
  savedPass=new PasswordHash(passwordHash[1],true);
  configPass.setChecked(settings.get(""String_Node_Str"",true));
  configChat.setChecked(settings.get(""String_Node_Str"",true));
  pass.setOnEditorActionListener(new OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView view,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_GO) {
        login.performClick();
        return true;
      }
      return false;
    }
  }
);
  login.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      String username=user.getText().toString();
      String password=pass.getText().toString();
      PasswordHash pass;
      if (username.equals(""String_Node_Str""))       return;
      if (savedUser != null && username.equalsIgnoreCase(savedUser) && (password.equals(""String_Node_Str""))) {
        pass=savedPass;
      }
 else {
        if (password.equals(""String_Node_Str""))         return;
        pass=new PasswordHash(password,false);
      }
      View focus=host.getActivity().getCurrentFocus();
      if (focus != null) {
        InputMethodManager inputManager=(InputMethodManager)host.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
        inputManager.hideSoftInputFromWindow(focus.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
      }
      getModel().login(username,pass);
      settings.set(""String_Node_Str"",configPass.isChecked());
      settings.set(""String_Node_Str"",configChat.isChecked());
      enterChatImmediately=configChat.isChecked();
      if (configPass.isChecked()) {
        settings.set(""String_Node_Str"",username);
        settings.set(""String_Node_Str"",username + ""String_Node_Str"" + pass.getBaseHash());
      }
 else {
        settings.remove(""String_Node_Str"");
        settings.remove(""String_Node_Str"");
      }
    }
  }
);
  Button createAccount=(Button)view.findViewById(R.id.login_create_account);
  createAccount.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      getModel().createAccount();
    }
  }
);
  ArrayList<LoginModel.MagicLoginAction> magicActions=model.getMagicCharacters();
  if (magicActions.size() > 0) {
    View panel=view.findViewById(R.id.login_magic_panel);
    panel.setVisibility(View.VISIBLE);
    ViewGroup container=(ViewGroup)view.findViewById(R.id.login_magic_group);
    for (    LoginModel.MagicLoginAction magicAction : magicActions) {
      final LoginModel.MagicLoginAction action=magicAction;
      Button magicButton=new Button(host.getActivity());
      magicButton.setText(action.getCharacter());
      magicButton.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          action.magicLogin();
        }
      }
);
      container.addView(magicButton);
    }
  }
  WebModel announcements=model.getAnnouncementsModel();
  if (announcements == null) {
    View announcementsPanel=view.findViewById(R.id.login_announcements_panel);
    announcementsPanel.setVisibility(View.GONE);
  }
 else {
    Logger.log(""String_Node_Str"",""String_Node_Str"");
    ViewScreen announcementsScreen=(ViewScreen)view.findViewById(R.id.login_announcements_screen);
    announcementsScreen.display(new WebController(announcements),host);
  }
}","@Override public void attach(View view,LoginModel model,final Screen host){
  final EditText user=(EditText)view.findViewById(R.id.login_username);
  final EditText pass=(EditText)view.findViewById(R.id.login_password);
  final Button login=(Button)view.findViewById(R.id.login_submit);
  final CheckBox configPass=(CheckBox)view.findViewById(R.id.login_config_save_password);
  final CheckBox configChat=(CheckBox)view.findViewById(R.id.login_config_enter_chat);
  final SettingsContext settings=host.getViewContext().getSettingsContext();
  user.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String[] passwordHash=settings.get(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (passwordHash.length == 2 && user.getText().toString().equalsIgnoreCase(passwordHash[0])) {
        pass.setHint(""String_Node_Str"");
      }
 else {
        pass.setHint(""String_Node_Str"");
      }
    }
  }
);
  user.setText(settings.get(""String_Node_Str"",""String_Node_Str""));
  String[] passwordHash=settings.get(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  if (passwordHash.length == 2) {
    savedUser=passwordHash[0];
    savedPass=new PasswordHash(passwordHash[1],true);
  }
 else {
    savedUser=null;
    savedPass=null;
  }
  configPass.setChecked(settings.get(""String_Node_Str"",true));
  configChat.setChecked(settings.get(""String_Node_Str"",true));
  pass.setOnEditorActionListener(new OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView view,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_GO) {
        login.performClick();
        return true;
      }
      return false;
    }
  }
);
  login.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      String username=user.getText().toString();
      String password=pass.getText().toString();
      PasswordHash pass;
      if (username.equals(""String_Node_Str""))       return;
      if (savedUser != null && username.equalsIgnoreCase(savedUser) && (password.equals(""String_Node_Str"")) && savedPass != null) {
        pass=savedPass;
      }
 else {
        if (password.equals(""String_Node_Str""))         return;
        pass=new PasswordHash(password,false);
      }
      View focus=host.getActivity().getCurrentFocus();
      if (focus != null) {
        InputMethodManager inputManager=(InputMethodManager)host.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
        inputManager.hideSoftInputFromWindow(focus.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
      }
      getModel().login(username,pass);
      settings.set(""String_Node_Str"",configPass.isChecked());
      settings.set(""String_Node_Str"",configChat.isChecked());
      enterChatImmediately=configChat.isChecked();
      if (configPass.isChecked()) {
        settings.set(""String_Node_Str"",username);
        settings.set(""String_Node_Str"",username + ""String_Node_Str"" + pass.getBaseHash());
      }
 else {
        settings.remove(""String_Node_Str"");
        settings.remove(""String_Node_Str"");
      }
    }
  }
);
  Button createAccount=(Button)view.findViewById(R.id.login_create_account);
  createAccount.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      getModel().createAccount();
    }
  }
);
  ArrayList<LoginModel.MagicLoginAction> magicActions=model.getMagicCharacters();
  if (magicActions.size() > 0) {
    View panel=view.findViewById(R.id.login_magic_panel);
    panel.setVisibility(View.VISIBLE);
    ViewGroup container=(ViewGroup)view.findViewById(R.id.login_magic_group);
    for (    LoginModel.MagicLoginAction magicAction : magicActions) {
      final LoginModel.MagicLoginAction action=magicAction;
      Button magicButton=new Button(host.getActivity());
      magicButton.setText(action.getCharacter());
      magicButton.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          action.magicLogin();
        }
      }
);
      container.addView(magicButton);
    }
  }
  WebModel announcements=model.getAnnouncementsModel();
  if (announcements == null) {
    View announcementsPanel=view.findViewById(R.id.login_announcements_panel);
    announcementsPanel.setVisibility(View.GONE);
  }
 else {
    Logger.log(""String_Node_Str"",""String_Node_Str"");
    ViewScreen announcementsScreen=(ViewScreen)view.findViewById(R.id.login_announcements_screen);
    announcementsScreen.display(new WebController(announcements),host);
  }
}",0.9879011046817464
141934,"@Override public DataCache<String,RawItem> getItemCache(){
  if (itemsCache.isLoadRequired()) {
synchronized (itemsCache) {
      if (itemsCache.isLoadRequired()) {
        itemsCache.load(this);
      }
    }
  }
  return itemsCache;
}","@Override public DataCache<String,RawItem> getItemCache(){
  return itemsCache;
}",0.5110410094637224
141935,"@Override public DataCache<String,RawSkill> getSkillCache(){
  if (skillsCache.isLoadRequired()) {
synchronized (skillsCache) {
      if (skillsCache.isLoadRequired()) {
        skillsCache.load(this);
      }
    }
  }
  return skillsCache;
}","@Override public DataCache<String,RawSkill> getSkillCache(){
  return skillsCache;
}",0.5137614678899083
141936,"@Override public void connect(View view,M model,Screen host){
  final CustomFragmentTabHost tabHost=(CustomFragmentTabHost)view.findViewById(R.id.tabs_tab_host);
  tabHost.setup(host.getActivity(),host.getChildFragmentManager());
  for (  C child : model.getChildren()) {
    Controller c=getController(child);
    Bundle bundle=FragmentScreen.prepare(c);
    TabSpec tab=tabHost.newTabSpec(child.getTitle()).setIndicator(child.getTitle());
    tabHost.addTab(tab,FragmentScreen.class,bundle);
  }
  tabHost.setCurrentTab(model.getActiveChild());
}","@CallSuper @Override public void connect(View view,M model,Screen host){
  final CustomFragmentTabHost tabHost=(CustomFragmentTabHost)view.findViewById(R.id.tabs_tab_host);
  tabHost.setup(host.getActivity(),host.getChildFragmentManager());
  for (  C child : model.getChildren()) {
    Controller c=getController(child);
    Bundle bundle=FragmentScreen.prepare(c);
    TabSpec tab=tabHost.newTabSpec(child.getTitle()).setIndicator(child.getTitle());
    tabHost.addTab(tab,FragmentScreen.class,bundle);
  }
  tabHost.setCurrentTab(model.getActiveChild());
}",0.990063233965673
141937,"@Override public void connect(View view,M model,Screen host){
  super.connect(view,model,host);
  final CustomFragmentTabHost tabHost=(CustomFragmentTabHost)view.findViewById(R.id.tabs_tab_host);
  tabHost.setOnCreateFragmentListener(new OnCreateFragmentListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void setup(    Fragment f,    String tag){
      FragmentScreen screen=(FragmentScreen)f;
      UpdatableController<C> controller=(UpdatableController<C>)screen.getController();
      linkChild(controller,tag);
    }
  }
);
}","@CallSuper @Override public void connect(View view,M model,Screen host){
  super.connect(view,model,host);
  final CustomFragmentTabHost tabHost=(CustomFragmentTabHost)view.findViewById(R.id.tabs_tab_host);
  tabHost.setOnCreateFragmentListener(new OnCreateFragmentListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void setup(    Fragment f,    String tag){
      FragmentScreen screen=(FragmentScreen)f;
      UpdatableController<C> controller=(UpdatableController<C>)screen.getController();
      linkChild(controller,tag);
    }
  }
);
}",0.9900811541929666
141938,"@Override public void disconnect(Screen host){
  if (callback != null) {
    callback.close();
  }
}","@CallSuper @Override public void disconnect(Screen host){
  if (callback != null) {
    callback.close();
  }
}",0.9478672985781992
141939,"@Override public void connect(final View view,final Screen host){
  if (callback != null) {
    callback.close();
  }
  this.callback=new HandlerCallback<C>(){
    @Override public void receiveProgress(    C message){
      LinkedModelController.this.receiveProgress(view,getModel(),message,host);
    }
  }
;
  getModel().attachCallback(callback.weak());
  super.connect(view,host);
}","@CallSuper @Override public void connect(final View view,final Screen host){
  if (callback != null) {
    callback.close();
  }
  this.callback=new HandlerCallback<C>(){
    @Override public void receiveProgress(    C message){
      LinkedModelController.this.receiveProgress(view,getModel(),message,host);
    }
  }
;
  getModel().attachCallback(callback.weak());
  super.connect(view,host);
}",0.9859154929577464
141940,"@Override public void disconnect(Screen host){
  super.disconnect(host);
  this.currentView=new WeakReference<>(null);
  this.currentScreen=new WeakReference<>(null);
}","@CallSuper @Override public void disconnect(Screen host){
  super.disconnect(host);
  this.currentView=new WeakReference<>(null);
  this.currentScreen=new WeakReference<>(null);
}",0.968299711815562
141941,"@Override public void connect(final View view,final Screen host){
  this.currentView=new WeakReference<>(view);
  this.currentScreen=new WeakReference<>(host);
  super.connect(view,host);
}","@CallSuper @Override public void connect(final View view,final Screen host){
  this.currentView=new WeakReference<>(view);
  this.currentScreen=new WeakReference<>(host);
  super.connect(view,host);
}",0.9717223650385604
141942,"@Override public void disconnect(Screen host){
  badge=null;
}","@Override public void disconnect(Screen host){
  super.disconnect(host);
  badge=null;
}",0.8266666666666667
141943,"@Override public void disconnect(Screen host){
  if (updateReceiver != null) {
    Logger.log(""String_Node_Str"",this.getClass().getSimpleName() + ""String_Node_Str"");
    ChatBroadcaster.unregisterListener(host,updateReceiver);
    updateReceiver=null;
  }
  if (sendCommand != null) {
    sendCommand.close();
    sendCommand=null;
  }
}","@Override public void disconnect(Screen host){
  super.disconnect(host);
  if (updateReceiver != null) {
    Logger.log(""String_Node_Str"",this.getClass().getSimpleName() + ""String_Node_Str"");
    ChatBroadcaster.unregisterListener(host,updateReceiver);
    updateReceiver=null;
  }
  if (sendCommand != null) {
    sendCommand.close();
    sendCommand=null;
  }
}",0.9628571428571427
141944,"@Override public void onClick(View arg0){
  String message=text.getText().toString();
  getModel().submitCommand(new ChatModel.ChatModelCommand.SubmitChatMessage(getModel().getCurrentChannel(),message));
  text.setText(""String_Node_Str"");
  InputMethodManager inputManager=(InputMethodManager)host.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
  inputManager.hideSoftInputFromWindow(host.getActivity().getCurrentFocus().getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
}","@Override public void onClick(View arg0){
  String message=text.getText().toString();
  getModel().submitCommand(new ChatModel.ChatModelCommand.SubmitChatMessage(getModel().getCurrentChannel(),message));
  text.setText(""String_Node_Str"");
  InputMethodManager inputManager=(InputMethodManager)host.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
  View focus=host.getActivity().getCurrentFocus();
  if (focus != null) {
    inputManager.hideSoftInputFromWindow(focus.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
  }
}",0.8360814742967992
141945,"@Override public void doConnect(View view,ChatSubmissionStubModel model,final Screen host){
  final EditText text=(EditText)view.findViewById(R.id.chat_submission_input);
  Button submit=(Button)view.findViewById(R.id.chat_submission_submit);
  submit.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      String message=text.getText().toString();
      getModel().submitCommand(new ChatModel.ChatModelCommand.SubmitChatMessage(getModel().getCurrentChannel(),message));
      text.setText(""String_Node_Str"");
      InputMethodManager inputManager=(InputMethodManager)host.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      inputManager.hideSoftInputFromWindow(host.getActivity().getCurrentFocus().getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
    }
  }
);
  onPartialTextFillCallback=new HandlerCallback<String>(){
    @Override protected void receiveProgress(    String message){
      if (text != null) {
        text.setText(message);
      }
    }
  }
;
  getModel().setPartialChatCallback(onPartialTextFillCallback.weak());
}","@Override public void doConnect(View view,ChatSubmissionStubModel model,final Screen host){
  final EditText text=(EditText)view.findViewById(R.id.chat_submission_input);
  Button submit=(Button)view.findViewById(R.id.chat_submission_submit);
  submit.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      String message=text.getText().toString();
      getModel().submitCommand(new ChatModel.ChatModelCommand.SubmitChatMessage(getModel().getCurrentChannel(),message));
      text.setText(""String_Node_Str"");
      InputMethodManager inputManager=(InputMethodManager)host.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      View focus=host.getActivity().getCurrentFocus();
      if (focus != null) {
        inputManager.hideSoftInputFromWindow(focus.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
      }
    }
  }
);
  onPartialTextFillCallback=new HandlerCallback<String>(){
    @Override protected void receiveProgress(    String message){
      if (text != null) {
        text.setText(message);
      }
    }
  }
;
  getModel().setPartialChatCallback(onPartialTextFillCallback.weak());
}",0.9411243913235944
141946,"@SuppressLint({""String_Node_Str"",""String_Node_Str""}) @Override public void connect(View view,WebModel model,final Screen host){
  WebViewClient client=new WebViewClient(){
    private final Regex INTERNAL_FULL_URL=new Regex(""String_Node_Str"");
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      if (url.startsWith(""String_Node_Str""))       return true;
      Logger.log(""String_Node_Str"",""String_Node_Str"" + url);
      if (!getModel().makeRequest(url)) {
        Logger.log(""String_Node_Str"",""String_Node_Str"" + url);
        Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
        host.getActivity().startActivity(intent);
      }
      return true;
    }
    @Override public WebResourceResponse shouldInterceptRequest(    WebView view,    String url){
      if (url.startsWith(""String_Node_Str""))       return null;
      if (url.contains(""String_Node_Str"")) {
        if ((url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) && !INTERNAL_FULL_URL.matches(url)) {
          return null;
        }
        InputStream result=getModel().makeBlockingRequest(url);
        return new WebResourceResponse(""String_Node_Str"",null,result);
      }
 else {
        return null;
      }
    }
  }
;
  web=(WebView)view.findViewById(R.id.web_view);
  web.getSettings().setJavaScriptEnabled(true);
  Logger.log(""String_Node_Str"",""String_Node_Str"" + inputChanges);
  web.addJavascriptInterface(new JavaScriptInterface(host),""String_Node_Str"");
  web.setWebViewClient(client);
  loadContent(model);
}","@SuppressLint({""String_Node_Str"",""String_Node_Str""}) @Override public void connect(View view,WebModel model,final Screen host){
  WebViewClient client=new WebViewClient(){
    private final Regex INTERNAL_FULL_URL=new Regex(""String_Node_Str"");
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      if (url.startsWith(""String_Node_Str""))       return true;
      Logger.log(""String_Node_Str"",""String_Node_Str"" + url);
      if (!getModel().makeRequest(url)) {
        Logger.log(""String_Node_Str"",""String_Node_Str"" + url);
        Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
        host.getActivity().startActivity(intent);
      }
      return true;
    }
    @SuppressWarnings(""String_Node_Str"") @Override public WebResourceResponse shouldInterceptRequest(    WebView view,    String url){
      if (url.startsWith(""String_Node_Str""))       return null;
      if (url.contains(""String_Node_Str"")) {
        if ((url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) && !INTERNAL_FULL_URL.matches(url)) {
          return null;
        }
        InputStream result=getModel().makeBlockingRequest(url);
        return new WebResourceResponse(""String_Node_Str"",null,result);
      }
 else {
        return null;
      }
    }
  }
;
  web=(WebView)view.findViewById(R.id.web_view);
  web.getSettings().setJavaScriptEnabled(true);
  Logger.log(""String_Node_Str"",""String_Node_Str"" + inputChanges);
  web.addJavascriptInterface(new JavaScriptInterface(host),""String_Node_Str"");
  web.setWebViewClient(client);
  loadContent(model);
}",0.98859081097749
141947,"@Override public WebResourceResponse shouldInterceptRequest(WebView view,String url){
  if (url.startsWith(""String_Node_Str""))   return null;
  if (url.contains(""String_Node_Str"")) {
    if ((url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) && !INTERNAL_FULL_URL.matches(url)) {
      return null;
    }
    InputStream result=getModel().makeBlockingRequest(url);
    return new WebResourceResponse(""String_Node_Str"",null,result);
  }
 else {
    return null;
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public WebResourceResponse shouldInterceptRequest(WebView view,String url){
  if (url.startsWith(""String_Node_Str""))   return null;
  if (url.contains(""String_Node_Str"")) {
    if ((url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) && !INTERNAL_FULL_URL.matches(url)) {
      return null;
    }
    InputStream result=getModel().makeBlockingRequest(url);
    return new WebResourceResponse(""String_Node_Str"",null,result);
  }
 else {
    return null;
  }
}",0.965961361545538
141948,"@Override public void connect(View view,LoginModel model,final Screen host){
  final EditText user=(EditText)view.findViewById(R.id.login_username);
  final EditText pass=(EditText)view.findViewById(R.id.login_password);
  final Button login=(Button)view.findViewById(R.id.login_submit);
  final CheckBox configPass=(CheckBox)view.findViewById(R.id.login_config_save_password);
  final CheckBox configChat=(CheckBox)view.findViewById(R.id.login_config_enter_chat);
  final SettingsContext settings=host.getViewContext().getSettingsContext();
  user.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String[] passwordHash=settings.get(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (passwordHash.length == 2 && user.getText().toString().equalsIgnoreCase(passwordHash[0])) {
        pass.setHint(""String_Node_Str"");
      }
 else {
        pass.setHint(""String_Node_Str"");
      }
    }
  }
);
  user.setText(settings.get(""String_Node_Str"",""String_Node_Str""));
  String[] passwordHash=settings.get(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  savedUser=passwordHash[0];
  savedPass=new PasswordHash(passwordHash[1],true);
  configPass.setChecked(settings.get(""String_Node_Str"",true));
  configChat.setChecked(settings.get(""String_Node_Str"",true));
  pass.setOnEditorActionListener(new OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView view,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_GO) {
        login.performClick();
        return true;
      }
      return false;
    }
  }
);
  login.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      String username=user.getText().toString();
      String password=pass.getText().toString();
      PasswordHash pass;
      if (username.equals(""String_Node_Str""))       return;
      if (savedUser != null && username.equalsIgnoreCase(savedUser) && (password.equals(""String_Node_Str""))) {
        pass=savedPass;
      }
 else {
        if (password.equals(""String_Node_Str""))         return;
        pass=new PasswordHash(password,false);
      }
      InputMethodManager inputManager=(InputMethodManager)host.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      inputManager.hideSoftInputFromWindow(host.getActivity().getCurrentFocus().getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
      getModel().login(username,pass);
      settings.set(""String_Node_Str"",configPass.isChecked());
      settings.set(""String_Node_Str"",configChat.isChecked());
      enterChatImmediately=configChat.isChecked();
      if (configPass.isChecked()) {
        settings.set(""String_Node_Str"",username);
        settings.set(""String_Node_Str"",username + ""String_Node_Str"" + pass.getBaseHash());
      }
 else {
        settings.remove(""String_Node_Str"");
        settings.remove(""String_Node_Str"");
      }
    }
  }
);
  Button createAccount=(Button)view.findViewById(R.id.login_create_account);
  createAccount.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      getModel().createAccount();
    }
  }
);
  ArrayList<LoginModel.MagicLoginAction> magicActions=model.getMagicCharacters();
  if (magicActions.size() > 0) {
    View panel=view.findViewById(R.id.login_magic_panel);
    panel.setVisibility(View.VISIBLE);
    ViewGroup container=(ViewGroup)view.findViewById(R.id.login_magic_group);
    for (    LoginModel.MagicLoginAction magicAction : magicActions) {
      final LoginModel.MagicLoginAction action=magicAction;
      Button magicButton=new Button(host.getActivity());
      magicButton.setText(action.getCharacter());
      magicButton.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          action.magicLogin();
        }
      }
);
      container.addView(magicButton);
    }
  }
  WebModel announcements=model.getAnnouncementsModel();
  if (announcements == null) {
    View announcementsPanel=view.findViewById(R.id.login_announcements_panel);
    announcementsPanel.setVisibility(View.GONE);
  }
 else {
    Logger.log(""String_Node_Str"",""String_Node_Str"");
    ViewScreen announcementsScreen=(ViewScreen)view.findViewById(R.id.login_announcements_screen);
    announcementsScreen.display(new WebController(announcements),host);
  }
}","@Override public void connect(View view,LoginModel model,final Screen host){
  final EditText user=(EditText)view.findViewById(R.id.login_username);
  final EditText pass=(EditText)view.findViewById(R.id.login_password);
  final Button login=(Button)view.findViewById(R.id.login_submit);
  final CheckBox configPass=(CheckBox)view.findViewById(R.id.login_config_save_password);
  final CheckBox configChat=(CheckBox)view.findViewById(R.id.login_config_enter_chat);
  final SettingsContext settings=host.getViewContext().getSettingsContext();
  user.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String[] passwordHash=settings.get(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (passwordHash.length == 2 && user.getText().toString().equalsIgnoreCase(passwordHash[0])) {
        pass.setHint(""String_Node_Str"");
      }
 else {
        pass.setHint(""String_Node_Str"");
      }
    }
  }
);
  user.setText(settings.get(""String_Node_Str"",""String_Node_Str""));
  String[] passwordHash=settings.get(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  savedUser=passwordHash[0];
  savedPass=new PasswordHash(passwordHash[1],true);
  configPass.setChecked(settings.get(""String_Node_Str"",true));
  configChat.setChecked(settings.get(""String_Node_Str"",true));
  pass.setOnEditorActionListener(new OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView view,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_GO) {
        login.performClick();
        return true;
      }
      return false;
    }
  }
);
  login.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      String username=user.getText().toString();
      String password=pass.getText().toString();
      PasswordHash pass;
      if (username.equals(""String_Node_Str""))       return;
      if (savedUser != null && username.equalsIgnoreCase(savedUser) && (password.equals(""String_Node_Str""))) {
        pass=savedPass;
      }
 else {
        if (password.equals(""String_Node_Str""))         return;
        pass=new PasswordHash(password,false);
      }
      View focus=host.getActivity().getCurrentFocus();
      if (focus != null) {
        InputMethodManager inputManager=(InputMethodManager)host.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
        inputManager.hideSoftInputFromWindow(focus.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
      }
      getModel().login(username,pass);
      settings.set(""String_Node_Str"",configPass.isChecked());
      settings.set(""String_Node_Str"",configChat.isChecked());
      enterChatImmediately=configChat.isChecked();
      if (configPass.isChecked()) {
        settings.set(""String_Node_Str"",username);
        settings.set(""String_Node_Str"",username + ""String_Node_Str"" + pass.getBaseHash());
      }
 else {
        settings.remove(""String_Node_Str"");
        settings.remove(""String_Node_Str"");
      }
    }
  }
);
  Button createAccount=(Button)view.findViewById(R.id.login_create_account);
  createAccount.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      getModel().createAccount();
    }
  }
);
  ArrayList<LoginModel.MagicLoginAction> magicActions=model.getMagicCharacters();
  if (magicActions.size() > 0) {
    View panel=view.findViewById(R.id.login_magic_panel);
    panel.setVisibility(View.VISIBLE);
    ViewGroup container=(ViewGroup)view.findViewById(R.id.login_magic_group);
    for (    LoginModel.MagicLoginAction magicAction : magicActions) {
      final LoginModel.MagicLoginAction action=magicAction;
      Button magicButton=new Button(host.getActivity());
      magicButton.setText(action.getCharacter());
      magicButton.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          action.magicLogin();
        }
      }
);
      container.addView(magicButton);
    }
  }
  WebModel announcements=model.getAnnouncementsModel();
  if (announcements == null) {
    View announcementsPanel=view.findViewById(R.id.login_announcements_panel);
    announcementsPanel.setVisibility(View.GONE);
  }
 else {
    Logger.log(""String_Node_Str"",""String_Node_Str"");
    ViewScreen announcementsScreen=(ViewScreen)view.findViewById(R.id.login_announcements_screen);
    announcementsScreen.display(new WebController(announcements),host);
  }
}",0.9855289956051024
141949,"private void addTab(final String tag,final ChatModel chat,final Screen host){
  if (tabs == null)   return;
  View preexisting=tabs.getTabByTag(tag);
  if (preexisting != null) {
    preexisting.setVisibility(View.VISIBLE);
  }
 else {
    Controller channel=new ChannelController(getModel(),tag);
    LayoutInflater inflater=(LayoutInflater)tabs.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    if (inflater == null) {
      Logger.log(""String_Node_Str"",""String_Node_Str"" + tag + ""String_Node_Str"");
      tabs.addTab(tabs.newTabSpec(tag).setIndicator(tag),FragmentScreen.class,FragmentScreen.prepare(channel));
    }
 else {
      ChannelModel channelModel=getModel().getChannel(tag);
      if (channelModel == null) {
        return;
      }
      Controller channelName=new ChannelCounterController(getModel().getChannel(tag));
      View tabView=inflater.inflate(channelName.getView(),null);
      channelName.connect(tabView,host);
      tabs.addTab(tabs.newTabSpec(tag).setIndicator(tabView),FragmentScreen.class,FragmentScreen.prepare(channel));
    }
    currentTabs.add(tag);
    View tabTitle=tabs.getTabByTag(tag);
    tabTitle.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View arg0){
        new AlertDialog.Builder(host.getActivity()).setTitle(""String_Node_Str"" + tag + ""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            if (chat != null) {
              ChannelModel channel=chat.getChannel(tag);
              channel.leave();
              dialog.dismiss();
            }
          }
        }
).setNegativeButton(""String_Node_Str"",null).show();
        return true;
      }
    }
);
  }
  currentTabs.add(tag);
}","private void addTab(final String tag,final ChatModel chat,final Screen host){
  if (tabs == null)   return;
  View preexisting=tabs.getTabByTag(tag);
  if (preexisting != null) {
    preexisting.setVisibility(View.VISIBLE);
  }
 else {
    Controller channel=new ChannelController(getModel(),tag);
    LayoutInflater inflater=(LayoutInflater)tabs.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    if (inflater == null) {
      Logger.log(""String_Node_Str"",""String_Node_Str"" + tag + ""String_Node_Str"");
      tabs.addTab(tabs.newTabSpec(tag).setIndicator(tag),FragmentScreen.class,FragmentScreen.prepare(channel));
    }
 else {
      Controller channelName;
      if (tabControllers.containsKey(tag)) {
        channelName=tabControllers.get(tag);
      }
 else {
        ChannelModel channelModel=getModel().getChannel(tag);
        if (channelModel == null) {
          return;
        }
        channelName=new ChannelCounterController(getModel().getChannel(tag));
        tabControllers.put(tag,channelName);
      }
      View tabView=inflater.inflate(channelName.getView(),null);
      channelName.connect(tabView,host);
      tabs.addTab(tabs.newTabSpec(tag).setIndicator(tabView),FragmentScreen.class,FragmentScreen.prepare(channel));
    }
    currentTabs.add(tag);
    View tabTitle=tabs.getTabByTag(tag);
    tabTitle.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View arg0){
        new AlertDialog.Builder(host.getActivity()).setTitle(""String_Node_Str"" + tag + ""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            if (chat != null) {
              ChannelModel channel=chat.getChannel(tag);
              channel.leave();
              dialog.dismiss();
            }
          }
        }
).setNegativeButton(""String_Node_Str"",null).show();
        return true;
      }
    }
);
  }
  currentTabs.add(tag);
}",0.9424756034925528
141950,"public ChatController(ChatModel model){
  super(new ChatStubModel(model));
  submission=new ChatSubmissionController(model);
  this.currentTabs=new HashSet<>();
}","public ChatController(ChatModel model){
  super(new ChatStubModel(model));
  submission=new ChatSubmissionController(model);
  this.currentTabs=new HashSet<>();
  this.tabControllers=new HashMap<>();
}",0.8925619834710744
141951,"private void updateTabs(ChatModel model,Screen host){
  ArrayList<String> currentChannels=new ArrayList<>();
  for (  ChannelModel child : model.getChannels()) {
    if (child.isActive())     currentChannels.add(child.getName());
  }
  for (  String channel : currentChannels) {
    if (!currentTabs.contains(channel)) {
      addTab(channel,model,host);
    }
  }
  ArrayList<String> toRemove=new ArrayList<>();
  for (  String channel : currentTabs) {
    if (!currentChannels.contains(channel)) {
      toRemove.add(channel);
    }
  }
  for (  String channel : toRemove) {
    removeTab(channel);
  }
  String changeTabTo=model.getCurrentChannel();
  if (currentTabs.contains(changeTabTo)) {
    tabs.setCurrentTabByTag(changeTabTo);
  }
  View current=tabs.getCurrentTabView();
  if (current != null && current.getVisibility() == View.GONE && currentChannels.size() != 0) {
    tabs.setCurrentTabByTag(currentChannels.get(0));
  }
}","private void updateTabs(ChatModel model,Screen host){
  if (tabs == null)   return;
  ArrayList<String> currentChannels=new ArrayList<>();
  for (  ChannelModel child : model.getChannels()) {
    if (child.isActive())     currentChannels.add(child.getName());
  }
  for (  String channel : currentChannels) {
    if (!currentTabs.contains(channel)) {
      addTab(channel,model,host);
    }
  }
  ArrayList<String> toRemove=new ArrayList<>();
  for (  String channel : currentTabs) {
    if (!currentChannels.contains(channel)) {
      toRemove.add(channel);
    }
  }
  for (  String channel : toRemove) {
    removeTab(channel);
  }
  String changeTabTo=model.getCurrentChannel();
  if (currentTabs.contains(changeTabTo)) {
    tabs.setCurrentTabByTag(changeTabTo);
  }
  View current=tabs.getCurrentTabView();
  if (current != null && current.getVisibility() == View.GONE && currentChannels.size() != 0) {
    tabs.setCurrentTabByTag(currentChannels.get(0));
  }
}",0.9842436974789917
141952,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  this.controller=(Controller)this.getArguments().getSerializable(""String_Node_Str"");
  if (controller == null) {
    Logger.log(""String_Node_Str"",""String_Node_Str"");
    MessageModel error=new MessageModel(""String_Node_Str"",MessageModel.ErrorType.ERROR);
    controller=new MessageController(error);
  }
  int layoutId=controller.getView();
  View view=inflater.inflate(layoutId,container,false);
  controller.connect(view,this);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  this.controller=(Controller)this.getArguments().getSerializable(""String_Node_Str"");
  if (controller == null) {
    Logger.log(""String_Node_Str"",""String_Node_Str"");
    MessageModel error=new MessageModel(""String_Node_Str"",MessageModel.ErrorType.ERROR);
    controller=new MessageController(error);
  }
  int layoutId=controller.getView();
  return inflater.inflate(layoutId,container,false);
}",0.9385052034058656
141953,"protected void notifyView(Callback message){
  if (this.view != null)   this.view.reportProgress(message);
  ;
}","protected void notifyView(Callback message){
  if (this.view != null)   this.view.reportProgress(message);
}",0.9818181818181818
141954,"@Override public void onCreateSetup(View view,InventoryModel base,Bundle savedInstanceState){
  final CustomFragmentTabHost host=(CustomFragmentTabHost)view.findViewById(R.id.tabs_tabhost);
  host.setup(getActivity(),getChildFragmentManager(),R.id.tabs_tabcontent);
  addTab(host,""String_Node_Str"",""String_Node_Str"",3);
  addTab(host,""String_Node_Str"",""String_Node_Str"",0);
  addTab(host,""String_Node_Str"",""String_Node_Str"",1);
  addTab(host,""String_Node_Str"",""String_Node_Str"",2);
  host.setCurrentTab(base.getInitialChosen());
  host.setOnCreateFragmentListener(this);
  WebModel results=base.getResultsPane();
  if (results != null) {
    DialogFragment newFragment=new WebDialog();
    newFragment.setArguments(GameFragment.getModelBundle(results));
    newFragment.show(getFragmentManager(),""String_Node_Str"");
  }
}","@Override public void onCreateSetup(View view,InventoryModel base,Bundle savedInstanceState){
  final CustomFragmentTabHost host=(CustomFragmentTabHost)view.findViewById(R.id.tabs_tabhost);
  host.setup(getActivity(),getChildFragmentManager(),R.id.tabs_tabcontent);
  addTab(host,""String_Node_Str"",""String_Node_Str"",3);
  addTab(host,""String_Node_Str"",""String_Node_Str"",0);
  addTab(host,""String_Node_Str"",""String_Node_Str"",1);
  addTab(host,""String_Node_Str"",""String_Node_Str"",2);
  int current=base.getInitialChosen();
  if (current == 3)   host.setCurrentTab(0);
 else   host.setCurrentTab(current + 1);
  host.setOnCreateFragmentListener(this);
  WebModel results=base.getResultsPane();
  if (results != null) {
    DialogFragment newFragment=new WebDialog();
    newFragment.setArguments(GameFragment.getModelBundle(results));
    newFragment.show(getFragmentManager(),""String_Node_Str"");
  }
}",0.9197674418604652
141955,"@Override public void setup(Fragment f,String tag){
  @SuppressWarnings(""String_Node_Str"") final GroupSearchListFragment<InvItem> fragment=(GroupSearchListFragment<InvItem>)f;
  int slot=fragment.getArguments().getInt(""String_Node_Str"");
  final InvPocketModel model=getModel().getPocket(slot);
  fragment.setItems(model.getItems());
  model.connectView(new AndroidProgressHandler<LiveMessage>(){
    @Override public void recieveProgress(    LiveMessage message){
switch (message) {
case REFRESH:
        fragment.setItems(model.getItems());
      break;
  }
}
}
,new AndroidViewContext(getActivity()));
fragment.setOnSelectionX(new OnListSelection<InvItem>(){
/** 
 * Autogenerated by eclipse.
 */
private static final long serialVersionUID=-2669494607044823363L;
@Override public boolean selectItem(DialogFragment list,InvItem item){
  ItemDialog.create(item).show(getFragmentManager(),""String_Node_Str"");
  return true;
}
}
);
}","@Override public void setup(Fragment f,String tag){
  @SuppressWarnings(""String_Node_Str"") final GroupSearchListFragment<InvItem> fragment=(GroupSearchListFragment<InvItem>)f;
  int slot=fragment.getArguments().getInt(""String_Node_Str"");
  final InvPocketModel model=getModel().getPocket(slot);
  fragment.setItems(model.getItems());
  model.connectView(new AndroidProgressHandler<LiveMessage>(){
    @Override public void recieveProgress(    LiveMessage message){
switch (message) {
case REFRESH:
        fragment.setItems(model.getItems());
      break;
  }
}
}
,new AndroidViewContext(getActivity()));
fragment.setOnSelectionX(new OnListSelection<InvItem>(){
@Override public boolean selectItem(DialogFragment list,InvItem item){
  ItemDialog.create(item).show(getFragmentManager(),""String_Node_Str"");
  return true;
}
}
);
}",0.9409090909090908
141956,"public void updateFilePath(SqlStorage<FormDefRecord> formDefRecordStorage,String newFilePath){
  checkFilePath(newFilePath);
  File newFormFile=new File(newFilePath);
  try {
    if (new File(mFormFilePath).getCanonicalPath().equals(newFormFile.getCanonicalPath())) {
    }
 else {
      FileUtil.deleteFileOrDir(mFormFilePath);
    }
  }
 catch (  IOException ioe) {
  }
  mFormMediaPath=getMediaPath(newFilePath);
  formDefRecordStorage.write(this);
}","public void updateFilePath(SqlStorage<FormDefRecord> formDefRecordStorage,String newFilePath){
  checkFilePath(newFilePath);
  File newFormFile=new File(newFilePath);
  try {
    if (new File(mFormFilePath).getCanonicalPath().equals(newFormFile.getCanonicalPath())) {
    }
 else {
      FileUtil.deleteFileOrDir(mFormFilePath);
    }
  }
 catch (  IOException ioe) {
  }
  mFormFilePath=newFilePath;
  mFormMediaPath=getMediaPath(newFilePath);
  formDefRecordStorage.write(this);
}",0.9689839572192512
141957,"public void upgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion == 1) {
    if (upgradeOneTwo(db)) {
      oldVersion=2;
    }
  }
  if (oldVersion == 2) {
    if (upgradeTwoThree(db)) {
      oldVersion=3;
    }
  }
  if (oldVersion == 3) {
    if (upgradeThreeFour(db)) {
      oldVersion=4;
    }
  }
  if (oldVersion == 4) {
    if (upgradeFourFive(db)) {
      oldVersion=5;
    }
  }
  if (oldVersion == 5) {
    if (upgradeFiveSix(db)) {
      oldVersion=6;
    }
  }
  if (oldVersion == 6) {
    if (upgradeSixSeven(db)) {
      oldVersion=7;
    }
  }
  if (oldVersion == 7) {
    if (upgradeSevenEight(db)) {
      oldVersion=8;
    }
  }
  if (oldVersion == 8) {
    if (upgradeEightTen(db)) {
      oldVersion=10;
    }
  }
  if (oldVersion == 9) {
    if (upgradeNineTen(db)) {
      oldVersion=10;
    }
  }
}","public void upgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion == 1) {
    if (upgradeOneTwo(db)) {
      oldVersion=2;
    }
  }
  if (oldVersion == 2) {
    if (upgradeTwoThree(db)) {
      oldVersion=3;
    }
  }
  if (oldVersion == 3) {
    if (upgradeThreeFour(db)) {
      oldVersion=4;
    }
  }
  if (oldVersion == 4) {
    if (upgradeFourFive(db)) {
      oldVersion=5;
    }
  }
  if (oldVersion == 5) {
    if (upgradeFiveSix(db)) {
      oldVersion=6;
    }
  }
  if (oldVersion == 6) {
    if (upgradeSixSeven(db)) {
      oldVersion=7;
    }
  }
  if (oldVersion == 7) {
    if (upgradeSevenEight(db)) {
      oldVersion=8;
    }
  }
  if (oldVersion == 8) {
    if (upgradeEightTen(db)) {
      oldVersion=10;
    }
  }
  if (oldVersion == 9) {
    if (upgradeNineTen(db)) {
      oldVersion=10;
    }
  }
  if (oldVersion == 10) {
    if (upgradeTenEleven(db)) {
      oldVersion=11;
    }
  }
}",0.948905109489051
141958,"private boolean upgradeFiveSix(SQLiteDatabase db){
  db.beginTransaction();
  try {
    db.execSQL(DatabaseIndexingUtils.indexOnTableCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    DbUtil.createNumbersTable(db);
    db.execSQL(EntityStorageCache.getTableDefinition());
    EntityStorageCache.createIndexes(db);
    db.execSQL(UserDbUpgradeUtils.getCreateV6AndroidCaseIndexTableSqlDef());
    AndroidCaseIndexTable.createIndexes(db);
    AndroidCaseIndexTable cit=new AndroidCaseIndexTable(db);
    SqlStorage<ACase> caseStorage=new SqlStorage<ACase>(ACase.STORAGE_KEY,ACasePreV6Model.class,new ConcreteAndroidDbHelper(c,db));
    for (    ACase c : caseStorage) {
      cit.indexCase(c);
    }
    db.setTransactionSuccessful();
    return true;
  }
  finally {
    db.endTransaction();
  }
}","private boolean upgradeFiveSix(SQLiteDatabase db){
  db.beginTransaction();
  try {
    db.execSQL(DatabaseIndexingUtils.indexOnTableCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    DbUtil.createNumbersTable(db);
    db.execSQL(EntityStorageCache.getTableDefinition());
    EntityStorageCache.createIndexes(db);
    db.execSQL(AndroidCaseIndexTableV1.getTableDefinition());
    AndroidCaseIndexTable.createIndexes(db);
    AndroidCaseIndexTableV1 cit=new AndroidCaseIndexTableV1(db);
    SqlStorage<ACase> caseStorage=new SqlStorage<ACase>(ACase.STORAGE_KEY,ACasePreV6Model.class,new ConcreteAndroidDbHelper(c,db));
    for (    ACase c : caseStorage) {
      cit.indexCase(c);
    }
    db.setTransactionSuccessful();
    return true;
  }
  finally {
    db.endTransaction();
  }
}",0.8359133126934984
141959,"private void handleFormLoadCompletion(AndroidFormController fc){
  if (GeoUtils.ACTION_CHECK_GPS_ENABLED.equals(locationRecieverErrorAction)) {
    FormEntryDialogs.handleNoGpsBroadcast(this);
  }
 else   if (PollSensorAction.XPATH_ERROR_ACTION.equals(locationRecieverErrorAction)) {
    handleXpathErrorBroadcast();
  }
  mFormController=fc;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    invalidateOptionsMenu();
  }
  registerSessionFormSaveCallback();
  boolean isRestartAfterSessionExpiration=getIntent().getBooleanExtra(KEY_IS_RESTART_AFTER_EXPIRATION,false);
  if (FormEntryInstanceState.mInstancePath == null || isRestartAfterSessionExpiration) {
    instanceState.initInstancePath();
  }
 else {
    Intent i=new Intent(this,FormHierarchyActivity.class);
    startActivityForResult(i,FormEntryConstants.HIERARCHY_ACTIVITY_FIRST_START);
    return;
  }
  reportFormEntryTime();
  formEntryRestoreSession.replaySession(this);
  uiController.refreshView();
  FormNavigationUI.updateNavigationCues(this,mFormController,uiController.questionsView);
  if (isRestartAfterSessionExpiration) {
    Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
  }
}","private void handleFormLoadCompletion(AndroidFormController fc){
  if (GeoUtils.ACTION_CHECK_GPS_ENABLED.equals(locationRecieverErrorAction)) {
    FormEntryDialogs.handleNoGpsBroadcast(this);
  }
 else   if (PollSensorAction.XPATH_ERROR_ACTION.equals(locationRecieverErrorAction)) {
    handleXpathErrorBroadcast();
  }
  mFormController=fc;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    invalidateOptionsMenu();
  }
  registerSessionFormSaveCallback();
  boolean isRestartAfterSessionExpiration=getIntent().getBooleanExtra(KEY_IS_RESTART_AFTER_EXPIRATION,false);
  if (FormEntryInstanceState.mInstancePath == null) {
    instanceState.initInstancePath();
  }
 else   if (!isRestartAfterSessionExpiration) {
    Intent i=new Intent(this,FormHierarchyActivity.class);
    startActivityForResult(i,FormEntryConstants.HIERARCHY_ACTIVITY_FIRST_START);
    return;
  }
  reportFormEntryTime();
  formEntryRestoreSession.replaySession(this);
  uiController.refreshView();
  FormNavigationUI.updateNavigationCues(this,mFormController,uiController.questionsView);
  if (isRestartAfterSessionExpiration) {
    Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
  }
}",0.9532864820173624
141960,"public void showOrHideErrorMessage(){
  Activity currentActivity=getActivity();
  if (currentActivity instanceof CommCareSetupActivity) {
    String msg=((CommCareSetupActivity)currentActivity).getErrorMessageToDisplay();
    if (msg != null && !""String_Node_Str"".equals(msg)) {
      mErrorMessageView.setText(msg);
      mErrorMessageView.setVisibility(View.VISIBLE);
      if (((CommCareSetupActivity)this.getActivity()).shouldShowNotificationErrorButton()) {
        mViewErrorContainer.setVisibility(View.VISIBLE);
      }
    }
 else {
      mErrorMessageView.setVisibility(View.GONE);
      mViewErrorContainer.setVisibility(View.GONE);
    }
  }
}","public void showOrHideErrorMessage(){
  Activity currentActivity=getActivity();
  if (currentActivity instanceof CommCareSetupActivity) {
    String msg=((CommCareSetupActivity)currentActivity).getErrorMessageToDisplay();
    if (msg != null && !""String_Node_Str"".equals(msg)) {
      mErrorMessageView.setText(msg);
      mErrorMessageView.setVisibility(View.VISIBLE);
      if (((CommCareSetupActivity)this.getActivity()).shouldShowNotificationErrorButton() && CommCareApplication.notificationManager().messagesForCommCareArePending()) {
        mViewErrorContainer.setVisibility(View.VISIBLE);
      }
    }
 else {
      mErrorMessageView.setVisibility(View.GONE);
      mViewErrorContainer.setVisibility(View.GONE);
    }
  }
}",0.9444844989185291
141961,"/** 
 * Scan SMS messages for texts with profile references.
 * @param installTriggeredManually if scan was triggered manually, theninstall automatically if reference is found
 */
private void performSMSInstall(boolean installTriggeredManually){
  if (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_SMS) != PackageManager.PERMISSION_GRANTED) {
    manualSMSInstall=installTriggeredManually;
    if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.READ_SMS)) {
      DialogCreationHelpers.buildPermissionRequestDialog(this,this,SMS_PERMISSIONS_REQUEST,Localization.get(""String_Node_Str""),Localization.get(""String_Node_Str"")).showNonPersistentDialog();
    }
 else {
      requestNeededPermissions(SMS_PERMISSIONS_REQUEST);
    }
  }
 else {
    scanSMSLinks();
  }
}","/** 
 * Scan SMS messages for texts with profile references.
 * @param installTriggeredManually if scan was triggered manually, theninstall automatically if reference is found
 */
private void performSMSInstall(boolean installTriggeredManually){
  manualSMSInstall=installTriggeredManually;
  if (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_SMS) != PackageManager.PERMISSION_GRANTED) {
    if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.READ_SMS)) {
      DialogCreationHelpers.buildPermissionRequestDialog(this,this,SMS_PERMISSIONS_REQUEST,Localization.get(""String_Node_Str""),Localization.get(""String_Node_Str"")).showNonPersistentDialog();
    }
 else {
      requestNeededPermissions(SMS_PERMISSIONS_REQUEST);
    }
  }
 else {
    scanSMSLinks();
  }
}",0.94320987654321
141962,"/** 
 * Call when the user is ready to save and return the current form as complete
 */
protected void triggerUserFormComplete(){
  if (mFormController.isFormReadOnly()) {
    finishReturnInstance(false);
  }
 else {
    saveCompletedFormToDisk(FormEntryInstanceState.getDefaultFormTitle(this,getIntent()));
  }
}","/** 
 * Call when the user is ready to save and return the current form as complete
 */
protected void triggerUserFormComplete(){
  if (mFormController.isFormReadOnly()) {
    finishReturnInstance(false);
  }
 else {
    int instanceId=getIntent().getIntExtra(KEY_INSTANCE_ID,-1);
    saveCompletedFormToDisk(FormEntryInstanceState.getDefaultFormTitle(instanceId));
  }
}",0.868421052631579
141963,"private void formEntry(long formDefId,FormRecord r,String headerTitle,boolean isRestartAfterSessionExpiration){
  Logger.log(LogTypes.TYPE_FORM_ENTRY,""String_Node_Str"" + r.getFormNamespace());
  FormLoaderTask.iif=new AndroidInstanceInitializer(CommCareApplication.instance().getCurrentSession());
  Intent i=new Intent(getApplicationContext(),FormEntryActivity.class);
  i.setAction(Intent.ACTION_EDIT);
  i.putExtra(FormEntryInstanceState.KEY_INSTANCEDESTINATION,CommCareApplication.instance().getCurrentApp().fsPath((GlobalConstants.FILE_CC_FORMS)));
  if (r.getInstanceId() != -1) {
    i.putExtra(FormEntryActivity.KEY_INSTANCE_ID,r.getInstanceId());
  }
 else {
    i.putExtra(FormEntryActivity.KEY_FORM_DEF_ID,formDefId);
  }
  i.putExtra(FormEntryActivity.KEY_RESIZING_ENABLED,HiddenPreferences.getResizeMethod());
  i.putExtra(FormEntryActivity.KEY_INCOMPLETE_ENABLED,HiddenPreferences.isIncompleteFormsEnabled());
  i.putExtra(FormEntryActivity.KEY_AES_STORAGE_KEY,Base64.encodeToString(r.getAesKey(),Base64.DEFAULT));
  i.putExtra(FormEntrySessionWrapper.KEY_RECORD_FORM_ENTRY_SESSION,DeveloperPreferences.isSessionSavingEnabled());
  i.putExtra(FormEntryActivity.KEY_IS_RESTART_AFTER_EXPIRATION,isRestartAfterSessionExpiration);
  if (headerTitle != null) {
    i.putExtra(FormEntryActivity.KEY_HEADER_STRING,headerTitle);
  }
  if (isRestoringSession) {
    isRestoringSession=false;
    SharedPreferences prefs=CommCareApplication.instance().getCurrentApp().getAppPreferences();
    String formEntrySession=prefs.getString(DevSessionRestorer.CURRENT_FORM_ENTRY_SESSION,""String_Node_Str"");
    if (!""String_Node_Str"".equals(formEntrySession)) {
      i.putExtra(FormEntrySessionWrapper.KEY_FORM_ENTRY_SESSION,formEntrySession);
    }
  }
  startActivityForResult(i,MODEL_RESULT);
}","private void formEntry(int formDefId,FormRecord r,String headerTitle,boolean isRestartAfterSessionExpiration){
  Logger.log(LogTypes.TYPE_FORM_ENTRY,""String_Node_Str"" + r.getFormNamespace());
  FormLoaderTask.iif=new AndroidInstanceInitializer(CommCareApplication.instance().getCurrentSession());
  Intent i=new Intent(getApplicationContext(),FormEntryActivity.class);
  i.setAction(Intent.ACTION_EDIT);
  i.putExtra(FormEntryInstanceState.KEY_INSTANCEDESTINATION,CommCareApplication.instance().getCurrentApp().fsPath((GlobalConstants.FILE_CC_FORMS)));
  if (r.getInstanceId() != -1) {
    i.putExtra(FormEntryActivity.KEY_INSTANCE_ID,r.getInstanceId());
  }
 else {
    i.putExtra(FormEntryActivity.KEY_FORM_DEF_ID,formDefId);
  }
  i.putExtra(FormEntryActivity.KEY_RESIZING_ENABLED,HiddenPreferences.getResizeMethod());
  i.putExtra(FormEntryActivity.KEY_INCOMPLETE_ENABLED,HiddenPreferences.isIncompleteFormsEnabled());
  i.putExtra(FormEntryActivity.KEY_AES_STORAGE_KEY,Base64.encodeToString(r.getAesKey(),Base64.DEFAULT));
  i.putExtra(FormEntrySessionWrapper.KEY_RECORD_FORM_ENTRY_SESSION,DeveloperPreferences.isSessionSavingEnabled());
  i.putExtra(FormEntryActivity.KEY_IS_RESTART_AFTER_EXPIRATION,isRestartAfterSessionExpiration);
  if (headerTitle != null) {
    i.putExtra(FormEntryActivity.KEY_HEADER_STRING,headerTitle);
  }
  if (isRestoringSession) {
    isRestoringSession=false;
    SharedPreferences prefs=CommCareApplication.instance().getCurrentApp().getAppPreferences();
    String formEntrySession=prefs.getString(DevSessionRestorer.CURRENT_FORM_ENTRY_SESSION,""String_Node_Str"");
    if (!""String_Node_Str"".equals(formEntrySession)) {
      i.putExtra(FormEntrySessionWrapper.KEY_FORM_ENTRY_SESSION,formEntrySession);
    }
  }
  startActivityForResult(i,MODEL_RESULT);
}",0.9980485085029271
141964,"/** 
 * Get the default title for ODK's ""Form title"" field
 */
public static String getDefaultFormTitle(Context context,Intent intent){
  String saveName=FormEntryActivity.mFormController.getFormTitle();
  if (InstanceProviderAPI.InstanceColumns.CONTENT_ITEM_TYPE.equals(context.getContentResolver().getType(intent.getData()))) {
    Uri instanceUri=intent.getData();
    Cursor instance=null;
    try {
      instance=context.getContentResolver().query(instanceUri,null,null,null,null);
      if (instance != null && instance.getCount() == 1) {
        instance.moveToFirst();
        saveName=instance.getString(instance.getColumnIndex(InstanceProviderAPI.InstanceColumns.DISPLAY_NAME));
      }
    }
  finally {
      if (instance != null) {
        instance.close();
      }
    }
  }
  return saveName;
}","/** 
 * Get the default title for ODK's ""Form title"" field
 */
public static String getDefaultFormTitle(int instanceId){
  String saveName=FormEntryActivity.mFormController.getFormTitle();
  if (instanceId != -1) {
    saveName=InstanceRecord.getInstance(instanceId).getDisplayName();
  }
  return saveName;
}",0.3413762287756925
141965,"public int save(){
  if (StringUtils.isEmpty(mFormFilePath)) {
    throw new SQLException(""String_Node_Str"");
  }
  if (mDate == -1) {
    mDate=System.currentTimeMillis();
  }
  if (mDisplaySubtext == null) {
    mDisplaySubtext=getDisplaySubtext();
  }
  File form=new File(mFormFilePath);
  if (StringUtils.isEmpty(mDisplayName)) {
    mDisplayName=form.getName();
  }
  mMd5Hash=FileUtil.getMd5Hash(form);
  if (StringUtils.isEmpty(mJrcacheFilePath)) {
    mJrcacheFilePath=getCachePath(mMd5Hash);
  }
  if (StringUtils.isEmpty(mFormMediaPath)) {
    mFormMediaPath=getMediaPath(mFormFilePath);
  }
  getFormDefStorage().write(this);
  if (recordId == -1) {
    throw new SQLException(""String_Node_Str"" + toString());
  }
  return recordId;
}","public int save(){
  if (StringUtils.isEmpty(mFormFilePath)) {
    throw new SQLException(""String_Node_Str"");
  }
  if (mDate == null) {
    mDate=new Date();
  }
  if (mDisplaySubtext == null) {
    mDisplaySubtext=getDisplaySubtext();
  }
  File form=new File(mFormFilePath);
  if (StringUtils.isEmpty(mDisplayName)) {
    mDisplayName=form.getName();
  }
  mMd5Hash=FileUtil.getMd5Hash(form);
  if (StringUtils.isEmpty(mJrcacheFilePath)) {
    mJrcacheFilePath=getCachePath(mMd5Hash);
  }
  if (StringUtils.isEmpty(mFormMediaPath)) {
    mFormMediaPath=getMediaPath(mFormFilePath);
  }
  getFormDefStorage().write(this);
  if (recordId == -1) {
    throw new SQLException(""String_Node_Str"" + toString());
  }
  return recordId;
}",0.9742895805142084
141966,"public static SqlStorage<FormDefRecord> getFormDefStorage(){
  return CommCareApplication.instance().getAppStorage(FormDefRecord.class);
}","public static SqlStorage<FormDefRecord> getFormDefStorage(){
  if (sFormDefStorage == null) {
    sFormDefStorage=CommCareApplication.instance().getAppStorage(FormDefRecord.class);
  }
  return sFormDefStorage;
}",0.7542857142857143
141967,"public void updateStatus(@InstanceStatus String instanceStatus,String displayName,String canEditWhenComplete){
  mDisplayName=displayName;
  mStatus=instanceStatus;
  mCanEditWhenComplete=canEditWhenComplete;
  mDisplaySubtext=getDisplaySubtext(mStatus);
  mLastStatusChangeDate=System.currentTimeMillis();
  getInstanceRecordStorage().update(getID(),this);
  finalizeSessionLinkedInsertion();
}","public void updateStatus(@InstanceStatus String instanceStatus,String displayName,String canEditWhenComplete){
  mDisplayName=displayName;
  mStatus=instanceStatus;
  mCanEditWhenComplete=canEditWhenComplete;
  mDisplaySubtext=getDisplaySubtext(mStatus);
  mLastStatusChangeDate=new Date();
  getInstanceRecordStorage().update(getID(),this);
  finalizeSessionLinkedInsertion();
}",0.7700258397932817
141968,"@Override public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,AndroidCommCarePlatform platform,boolean upgrade) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  try {
    InputStream inputFileStream;
    try {
      inputFileStream=ref.getStream();
    }
 catch (    FileNotFoundException e) {
      return false;
    }
    File tempFile=new File(CommCareApplication.instance().getTempFilePath());
    Reference localReference;
    OutputStream outputFileStream;
    try {
      Pair<String,String> fileNameAndExt=getResourceName(r,location);
      String referenceRoot=upgrade ? upgradeDestination : localDestination;
      localReference=getEmptyLocalReference(referenceRoot,fileNameAndExt.first,fileNameAndExt.second);
      outputFileStream=new FileOutputStream(tempFile);
      localLocation=localReference.getURI();
    }
 catch (    InvalidReferenceException ire) {
      throw new LocalStorageUnavailableException(""String_Node_Str"" + localLocation + ""String_Node_Str"",localLocation);
    }
catch (    IOException ioe) {
      throw new LocalStorageUnavailableException(""String_Node_Str"" + localLocation + ""String_Node_Str"",localLocation);
    }
    StreamsUtil.writeFromInputToOutputNew(inputFileStream,outputFileStream);
    renameFile(localReference.getLocalURI(),tempFile);
    int status=customInstall(r,localReference,upgrade);
    table.commit(r,status);
    if (localLocation == null) {
      throw new UnresolvedResourceException(r,""String_Node_Str"");
    }
    return true;
  }
 catch (  SSLHandshakeException|SSLPeerUnverifiedException e) {
    e.printStackTrace();
    UnresolvedResourceException mURE=new UnresolvedResourceException(r,""String_Node_Str"",true);
    mURE.initCause(e);
    throw mURE;
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new UnreliableSourceException(r,e.getMessage());
  }
}","@Override public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,AndroidCommCarePlatform platform,boolean upgrade) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  try {
    InputStream inputFileStream;
    try {
      inputFileStream=ref.getStream();
    }
 catch (    FileNotFoundException e) {
      return false;
    }
    File tempFile=new File(CommCareApplication.instance().getTempFilePath());
    Reference localReference;
    OutputStream outputFileStream;
    try {
      Pair<String,String> fileNameAndExt=getResourceName(r,location);
      String referenceRoot=upgrade ? upgradeDestination : localDestination;
      localReference=getEmptyLocalReference(referenceRoot,fileNameAndExt.first,fileNameAndExt.second);
      outputFileStream=new FileOutputStream(tempFile);
      localLocation=localReference.getURI();
    }
 catch (    InvalidReferenceException ire) {
      throw new LocalStorageUnavailableException(""String_Node_Str"" + localLocation + ""String_Node_Str"",localLocation);
    }
catch (    IOException ioe) {
      throw new LocalStorageUnavailableException(""String_Node_Str"" + localLocation + ""String_Node_Str"",localLocation);
    }
    StreamsUtil.writeFromInputToOutputNew(inputFileStream,outputFileStream);
    renameFile(localReference.getLocalURI(),tempFile);
    int status=customInstall(r,localReference,upgrade,platform);
    table.commit(r,status);
    if (localLocation == null) {
      throw new UnresolvedResourceException(r,""String_Node_Str"");
    }
    return true;
  }
 catch (  SSLHandshakeException|SSLPeerUnverifiedException e) {
    e.printStackTrace();
    UnresolvedResourceException mURE=new UnresolvedResourceException(r,""String_Node_Str"",true);
    mURE.initCause(e);
    throw mURE;
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new UnreliableSourceException(r,e.getMessage());
  }
}",0.997643362136685
141969,"/** 
 * Perform any custom installation actions required for this resource.
 */
protected abstract int customInstall(Resource r,Reference local,boolean upgrade) throws IOException, UnresolvedResourceException ;","/** 
 * Perform any custom installation actions required for this resource.
 */
protected abstract int customInstall(Resource r,Reference local,boolean upgrade,AndroidCommCarePlatform platform) throws IOException, UnresolvedResourceException ;",0.9271523178807948
141970,"@Override protected int customInstall(Resource r,Reference local,boolean upgrade) throws IOException, UnresolvedResourceException {
  return upgrade ? Resource.RESOURCE_STATUS_UPGRADE : Resource.RESOURCE_STATUS_INSTALLED;
}","@Override protected int customInstall(Resource r,Reference local,boolean upgrade,AndroidCommCarePlatform platform) throws IOException, UnresolvedResourceException {
  return upgrade ? Resource.RESOURCE_STATUS_UPGRADE : Resource.RESOURCE_STATUS_INSTALLED;
}",0.931106471816284
141971,"@Override protected int customInstall(Resource r,Reference local,boolean upgrade) throws IOException, UnresolvedResourceException {
  return upgrade ? Resource.RESOURCE_STATUS_UPGRADE : Resource.RESOURCE_STATUS_INSTALLED;
}","@Override protected int customInstall(Resource r,Reference local,boolean upgrade,AndroidCommCarePlatform platform) throws IOException, UnresolvedResourceException {
  return upgrade ? Resource.RESOURCE_STATUS_UPGRADE : Resource.RESOURCE_STATUS_INSTALLED;
}",0.931106471816284
141972,"@Override protected int customInstall(Resource r,Reference local,boolean upgrade) throws IOException, UnresolvedResourceException {
  try {
    initDemoUserRestore();
  }
 catch (  RuntimeException e) {
    throw new UnresolvedResourceException(r,e,e.getMessage(),true);
  }
  if (upgrade) {
    OfflineUserRestore currentOfflineUserRestore=CommCareApplication.instance().getCommCarePlatform().getDemoUserRestore();
    if (currentOfflineUserRestore != null) {
      AppUtils.wipeSandboxForUser(currentOfflineUserRestore.getUsername());
    }
    return Resource.RESOURCE_STATUS_UPGRADE;
  }
 else {
    return Resource.RESOURCE_STATUS_INSTALLED;
  }
}","@Override protected int customInstall(Resource r,Reference local,boolean upgrade,AndroidCommCarePlatform platform) throws IOException, UnresolvedResourceException {
  try {
    initDemoUserRestore();
  }
 catch (  RuntimeException e) {
    throw new UnresolvedResourceException(r,e,e.getMessage(),true);
  }
  if (upgrade) {
    OfflineUserRestore currentOfflineUserRestore=CommCareApplication.instance().getCommCarePlatform().getDemoUserRestore();
    if (currentOfflineUserRestore != null) {
      AppUtils.wipeSandboxForUser(currentOfflineUserRestore.getUsername());
    }
    return Resource.RESOURCE_STATUS_UPGRADE;
  }
 else {
    return Resource.RESOURCE_STATUS_INSTALLED;
  }
}",0.975317875841436
141973,"@Override protected int customInstall(Resource r,Reference local,boolean upgrade) throws IOException, UnresolvedResourceException {
  return Resource.RESOURCE_STATUS_LOCAL;
}","@Override protected int customInstall(Resource r,Reference local,boolean upgrade,AndroidCommCarePlatform platform) throws IOException, UnresolvedResourceException {
  return Resource.RESOURCE_STATUS_LOCAL;
}",0.9133858267716536
141974,"@Override protected int customInstall(Resource r,Reference local,boolean upgrade) throws IOException, UnresolvedResourceException {
  return Resource.RESOURCE_STATUS_LOCAL;
}","@Override protected int customInstall(Resource r,Reference local,boolean upgrade,AndroidCommCarePlatform platform) throws IOException, UnresolvedResourceException {
  return Resource.RESOURCE_STATUS_LOCAL;
}",0.9133858267716536
141975,"@Override protected int customInstall(Resource r,Reference local,boolean upgrade) throws IOException, UnresolvedResourceException {
  registerAndroidLevelFormParsers();
  FormDef formDef;
  try {
    formDef=XFormExtensionUtils.getFormFromInputStream(local.getStream());
  }
 catch (  XFormParseException xfpe) {
    throw new UnresolvedResourceException(r,xfpe.getMessage(),true);
  }
  this.namespace=formDef.getInstance().schema;
  if (namespace == null) {
    throw new UnresolvedResourceException(r,""String_Node_Str"",true);
  }
  Vector<Integer> existingforms=FormDefRecord.getFormDefIdsByJrFormId(formDef.getMainInstance().schema);
  if (existingforms != null && existingforms.size() > 0) {
    if (!upgrade) {
      Logger.log(LogTypes.SOFT_ASSERT,""String_Node_Str"" + formDef.getMainInstance().schema + ""String_Node_Str"");
    }
    formDefId=existingforms.get(0);
    if (existingforms.size() > 1) {
      Logger.log(LogTypes.SOFT_ASSERT,""String_Node_Str"" + formDef.getMainInstance().schema + ""String_Node_Str"");
    }
  }
 else {
    FormDefRecord formDefRecord=new FormDefRecord(""String_Node_Str"",""String_Node_Str"",formDef.getMainInstance().schema,local.getLocalURI(),GlobalConstants.MEDIA_REF);
    formDefId=formDefRecord.save();
  }
  return upgrade ? Resource.RESOURCE_STATUS_UPGRADE : Resource.RESOURCE_STATUS_INSTALLED;
}","@Override protected int customInstall(Resource r,Reference local,boolean upgrade,AndroidCommCarePlatform platform) throws IOException, UnresolvedResourceException {
  registerAndroidLevelFormParsers();
  FormDef formDef;
  try {
    formDef=XFormExtensionUtils.getFormFromInputStream(local.getStream());
  }
 catch (  XFormParseException xfpe) {
    throw new UnresolvedResourceException(r,xfpe.getMessage(),true);
  }
  this.namespace=formDef.getInstance().schema;
  if (namespace == null) {
    throw new UnresolvedResourceException(r,""String_Node_Str"",true);
  }
  FormDefRecord.setFormDefStorage(platform.getFormDefStorage());
  Vector<Integer> existingforms=FormDefRecord.getFormDefIdsByJrFormId(formDef.getMainInstance().schema);
  if (existingforms != null && existingforms.size() > 0) {
    if (!upgrade) {
      Logger.log(LogTypes.SOFT_ASSERT,""String_Node_Str"" + formDef.getMainInstance().schema + ""String_Node_Str"");
    }
    formDefId=existingforms.get(0);
    if (existingforms.size() > 1) {
      Logger.log(LogTypes.SOFT_ASSERT,""String_Node_Str"" + formDef.getMainInstance().schema + ""String_Node_Str"");
    }
  }
 else {
    FormDefRecord formDefRecord=new FormDefRecord(""String_Node_Str"",""String_Node_Str"",formDef.getMainInstance().schema,local.getLocalURI(),GlobalConstants.MEDIA_REF);
    formDefId=formDefRecord.save();
  }
  return upgrade ? Resource.RESOURCE_STATUS_UPGRADE : Resource.RESOURCE_STATUS_INSTALLED;
}",0.9646464646464646
141976,"protected void playAudio(){
  Intent i=new Intent(""String_Node_Str"");
  File audioFile=new File(mInstanceFolder + mBinaryName);
  Uri audioUri=FileUtil.getUriForExternalFile(getContext(),audioFile);
  i.setDataAndType(audioUri,""String_Node_Str"");
  UriToFilePath.grantPermissionForUri(getContext(),i,audioUri,Intent.FLAG_GRANT_READ_URI_PERMISSION);
  try {
    getContext().startActivity(i);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(getContext(),StringUtils.getStringSpannableRobust(getContext(),R.string.activity_not_found,""String_Node_Str""),Toast.LENGTH_SHORT).show();
  }
}","protected void playAudio(){
  playMedia(""String_Node_Str"");
}",0.1636363636363636
141977,protected abstract String createFilePath(Object binaryUri);,"/** 
 * If file is chosen by user, the file selection intent will return an URI If file is auto-selected after recording_fragment, then the recordingfragment will provide a string file path Set value of customFileTag if the file is a recent recording from the RecordingFragment
 */
protected String createFilePath(Object binaryuri){
  String path=""String_Node_Str"";
  destMediaPath=""String_Node_Str"";
  if (binaryuri instanceof Uri) {
    try {
      path=UriToFilePath.getPathFromUri(CommCareApplication.instance(),(Uri)binaryuri);
    }
 catch (    UriToFilePath.NoDataColumnForUriException e) {
      InputStream inputStream;
      try {
        inputStream=getContext().getContentResolver().openInputStream((Uri)binaryuri);
      }
 catch (      FileNotFoundException e1) {
        showToast(""String_Node_Str"");
        e1.printStackTrace();
        return ""String_Node_Str"";
      }
      recordedFileName=FileUtil.getFileName(((Uri)binaryuri).getPath());
      destMediaPath=mInstanceFolder + System.currentTimeMillis() + FileUtil.getExtension(((Uri)binaryuri).getPath());
      try {
        FileUtil.copyFile(inputStream,new File(destMediaPath));
      }
 catch (      IOException e1) {
        e1.printStackTrace();
        showToast(""String_Node_Str"");
        return ""String_Node_Str"";
      }
      path=destMediaPath;
    }
    customFileTag=""String_Node_Str"";
  }
 else {
    path=(String)binaryuri;
    customFileTag=CUSTOM_TAG;
  }
  return path;
}",0.0538411030860144
141978,"@TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void readFromNfcTag(Tag tag){
  Ndef ndefObject=Ndef.get(tag);
  try {
    ndefObject.connect();
    NdefMessage msg=ndefObject.getNdefMessage();
    if (msg == null) {
      finishWithErrorToast(""String_Node_Str"");
      return;
    }
    NdefRecord firstRecord=msg.getRecords()[0];
    Pair<String,Boolean> resultAndSuccess=NdefRecordUtil.readValueFromRecord(firstRecord,this.acceptableTypes,this.domainForType);
    if (resultAndSuccess.second) {
      this.valueRead=resultAndSuccess.first;
      finishWithToast(""String_Node_Str"",true);
    }
 else {
      finishWithErrorToast(resultAndSuccess.first);
    }
  }
 catch (  IOException e) {
    finishWithErrorToast(""String_Node_Str"");
  }
catch (  FormatException e) {
    finishWithErrorToast(""String_Node_Str"");
  }
 finally {
    try {
      ndefObject.close();
    }
 catch (    IOException e) {
    }
  }
}","@TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void readFromNfcTag(Tag tag){
  Ndef ndefObject=Ndef.get(tag);
  if (ndefObject == null) {
    finishWithErrorToast(""String_Node_Str"");
    return;
  }
  try {
    ndefObject.connect();
    NdefMessage msg=ndefObject.getNdefMessage();
    if (msg == null) {
      finishWithErrorToast(""String_Node_Str"");
      return;
    }
    NdefRecord firstRecord=msg.getRecords()[0];
    Pair<String,Boolean> resultAndSuccess=NdefRecordUtil.readValueFromRecord(firstRecord,this.acceptableTypes,this.domainForType);
    if (resultAndSuccess.second) {
      this.valueRead=resultAndSuccess.first;
      finishWithToast(""String_Node_Str"",true);
    }
 else {
      finishWithErrorToast(resultAndSuccess.first);
    }
  }
 catch (  IOException e) {
    finishWithErrorToast(""String_Node_Str"");
  }
catch (  FormatException e) {
    finishWithErrorToast(""String_Node_Str"");
  }
 finally {
    try {
      ndefObject.close();
    }
 catch (    IOException e) {
    }
  }
}",0.9110764430577224
141979,"public static Set<String> getAllIndexedFixtureNames(SQLiteDatabase db){
  Cursor c=db.query(IndexedFixturePathsConstants.INDEXED_FIXTURE_PATHS_TABLE,new String[]{IndexedFixturePathsConstants.INDEXED_FIXTURE_PATHS_COL_NAME},null,null,null,null,null);
  Set<String> fixtureNames=new HashSet<>();
  try {
    if (c.moveToFirst()) {
      int desiredColumnIndex=c.getColumnIndexOrThrow(IndexedFixturePathsConstants.INDEXED_FIXTURE_PATHS_COL_NAME);
      while (!c.isAfterLast()) {
        String name=c.getString(desiredColumnIndex);
        fixtureNames.add(name);
        c.moveToNext();
      }
    }
    return fixtureNames;
  }
  finally {
    if (c != null) {
      c.close();
    }
  }
}","public static List<String> getAllIndexedFixtureNames(SQLiteDatabase db){
  Cursor c=db.query(IndexedFixturePathsConstants.INDEXED_FIXTURE_PATHS_TABLE,new String[]{IndexedFixturePathsConstants.INDEXED_FIXTURE_PATHS_COL_NAME},null,null,null,null,null);
  List<String> fixtureNames=new ArrayList<>();
  try {
    if (c.moveToFirst()) {
      int desiredColumnIndex=c.getColumnIndexOrThrow(IndexedFixturePathsConstants.INDEXED_FIXTURE_PATHS_COL_NAME);
      while (!c.isAfterLast()) {
        String name=c.getString(desiredColumnIndex);
        fixtureNames.add(name);
        c.moveToNext();
      }
    }
    return fixtureNames;
  }
  finally {
    if (c != null) {
      c.close();
    }
  }
}",0.9826589595375722
141980,"private boolean upgradeNineteenTwenty(SQLiteDatabase db){
  db.beginTransaction();
  try {
    Set<String> allIndexedFixtures=IndexedFixturePathUtils.getAllIndexedFixtureNames(db);
    for (    String fixtureName : allIndexedFixtures) {
      String tableName=StorageIndexedTreeElementModel.getTableName(fixtureName);
      SqlStorage<StorageIndexedTreeElementModel> storageForThisFixture=new SqlStorage<>(tableName,StorageIndexedTreeElementModel.class,new ConcreteAndroidDbHelper(c,db));
      StorageIndexedTreeElementModel exampleChildElement=storageForThisFixture.iterate().nextRecord();
      IndexedFixturePathUtils.buildFixtureIndices(db,tableName,exampleChildElement.getIndexColumnNames());
    }
    db.setTransactionSuccessful();
    return true;
  }
  finally {
    db.endTransaction();
  }
}","private boolean upgradeNineteenTwenty(SQLiteDatabase db){
  db.beginTransaction();
  try {
    List<String> allIndexedFixtures=IndexedFixturePathUtils.getAllIndexedFixtureNames(db);
    for (    String fixtureName : allIndexedFixtures) {
      String tableName=StorageIndexedTreeElementModel.getTableName(fixtureName);
      SqlStorage<StorageIndexedTreeElementModel> storageForThisFixture=new SqlStorage<>(tableName,StorageIndexedTreeElementModel.class,new ConcreteAndroidDbHelper(c,db));
      StorageIndexedTreeElementModel exampleChildElement=storageForThisFixture.iterate().nextRecord();
      IndexedFixturePathUtils.buildFixtureIndices(db,tableName,exampleChildElement.getIndexColumnNames());
    }
    db.setTransactionSuccessful();
    return true;
  }
  finally {
    db.endTransaction();
  }
}",0.9968886123210952
141981,"@Test public void testIndexedFixturePathsTableSoundness(){
  AndroidSandbox sandbox=StoreFixturesOnFilesystemTests.installAppWithFixtureData(this.getClass(),""String_Node_Str"");
  try {
    StoreFixturesOnFilesystemTests.parseIntoSandbox(this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str""),false);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  SQLiteDatabase db=sandbox.getUserDb();
  List<String> allIndexedFixtures=IndexedFixturePathUtils.getAllIndexedFixtureNamesAsList(db);
  List<String> comparisonList=new ArrayList<>();
  for (  String fixtureName : allIndexedFixtures) {
    if (comparisonList.contains(fixtureName)) {
      fail(""String_Node_Str"");
    }
    comparisonList.add(fixtureName);
  }
  assertEquals(""String_Node_Str"",1,allIndexedFixtures.size());
}","@Test public void testIndexedFixturePathsTableSoundness(){
  AndroidSandbox sandbox=StoreFixturesOnFilesystemTests.installAppWithFixtureData(this.getClass(),""String_Node_Str"");
  try {
    StoreFixturesOnFilesystemTests.parseIntoSandbox(this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str""),false);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  SQLiteDatabase db=sandbox.getUserDb();
  List<String> allIndexedFixtures=IndexedFixturePathUtils.getAllIndexedFixtureNames(db);
  List<String> comparisonList=new ArrayList<>();
  for (  String fixtureName : allIndexedFixtures) {
    if (comparisonList.contains(fixtureName)) {
      fail(""String_Node_Str"");
    }
    comparisonList.add(fixtureName);
  }
  assertEquals(""String_Node_Str"",1,allIndexedFixtures.size());
}",0.9962453066332916
141982,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  if (resultCode == RESULT_RESTART) {
    sessionNavigator.startNextSessionStep();
  }
 else {
switch (requestCode) {
case PREFERENCES_ACTIVITY:
      if (resultCode == AdvancedActionsPreferences.RESULT_DATA_RESET) {
        finish();
      }
 else       if (resultCode == DeveloperPreferences.RESULT_SYNC_CUSTOM) {
        try {
          Uri uri=intent.getData();
          String filePath=UriToFilePath.getPathFromUri(CommCareApplication.instance(),uri);
          if (filePath != null) {
            File f=new File(filePath);
            if (f != null && f.exists()) {
              formAndDataSyncer.performCustomRestoreFromFile(this,f);
            }
          }
        }
 catch (        Exception e) {
          Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
        }
      }
    return;
case ADVANCED_ACTIONS_ACTIVITY:
  handleAdvancedActionResult(resultCode,intent);
return;
case GET_INCOMPLETE_FORM:
if (resultCode == RESULT_CANCELED) {
refreshUI();
return;
}
 else if (resultCode == RESULT_OK) {
int record=intent.getIntExtra(""String_Node_Str"",-1);
if (record == -1) {
  break;
}
FormRecord r=CommCareApplication.instance().getUserStorage(FormRecord.class).read(record);
SqlStorage<SessionStateDescriptor> ssdStorage=CommCareApplication.instance().getUserStorage(SessionStateDescriptor.class);
Vector<Integer> ssds=ssdStorage.getIDsForValue(SessionStateDescriptor.META_FORM_RECORD_ID,r.getID());
AndroidSessionWrapper currentState=CommCareApplication.instance().getCurrentSessionWrapper();
if (ssds.size() == 1) {
  currentState.loadFromStateDescription(ssdStorage.read(ssds.firstElement()));
}
 else {
  currentState.setFormRecordId(r.getID());
}
AndroidCommCarePlatform platform=CommCareApplication.instance().getCommCarePlatform();
formEntry(platform.getFormContentUri(r.getFormNamespace()),r);
return;
}
break;
case GET_COMMAND:
boolean fetchNext=processReturnFromGetCommand(resultCode,intent);
if (!fetchNext) {
return;
}
break;
case GET_CASE:
fetchNext=processReturnFromGetCase(resultCode,intent);
if (!fetchNext) {
return;
}
break;
case MODEL_RESULT:
fetchNext=processReturnFromFormEntry(resultCode,intent);
if (!fetchNext) {
return;
}
break;
case AUTHENTICATION_FOR_PIN:
if (resultCode == RESULT_OK) {
launchPinCreateScreen(LoginMode.PASSWORD);
}
return;
case CREATE_PIN:
boolean choseRememberPassword=intent != null && intent.getBooleanExtra(CreatePinActivity.CHOSE_REMEMBER_PASSWORD,false);
if (choseRememberPassword) {
CommCareApplication.instance().closeUserSession();
}
 else if (resultCode == RESULT_OK) {
Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_SHORT).show();
}
 else {
Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_SHORT).show();
}
return;
case MAKE_REMOTE_POST:
stepBackIfCancelled(resultCode);
if (resultCode == RESULT_OK) {
CommCareApplication.instance().getCurrentSessionWrapper().terminateSession();
}
break;
case GET_REMOTE_DATA:
stepBackIfCancelled(resultCode);
break;
case PROMPT_FOR_UPDATE:
UpdatePromptHelper.promptForUpdateIfNeeded(this,PROMPT_FOR_UPDATE);
return;
}
sessionNavigationProceedingAfterOnResume=true;
startNextSessionStepSafe();
}
super.onActivityResult(requestCode,resultCode,intent);
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  if (resultCode == RESULT_RESTART) {
    sessionNavigator.startNextSessionStep();
  }
 else {
switch (requestCode) {
case PREFERENCES_ACTIVITY:
      if (resultCode == AdvancedActionsPreferences.RESULT_DATA_RESET) {
        finish();
      }
 else       if (resultCode == DeveloperPreferences.RESULT_SYNC_CUSTOM) {
        try {
          Uri uri=intent.getData();
          String filePath=UriToFilePath.getPathFromUri(CommCareApplication.instance(),uri);
          if (filePath != null) {
            File f=new File(filePath);
            if (f != null && f.exists()) {
              formAndDataSyncer.performCustomRestoreFromFile(this,f);
            }
          }
        }
 catch (        Exception e) {
          Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
        }
      }
    return;
case ADVANCED_ACTIONS_ACTIVITY:
  handleAdvancedActionResult(resultCode,intent);
return;
case GET_INCOMPLETE_FORM:
if (resultCode == RESULT_CANCELED) {
refreshUI();
return;
}
 else if (resultCode == RESULT_OK) {
int record=intent.getIntExtra(""String_Node_Str"",-1);
if (record == -1) {
  break;
}
FormRecord r=CommCareApplication.instance().getUserStorage(FormRecord.class).read(record);
SqlStorage<SessionStateDescriptor> ssdStorage=CommCareApplication.instance().getUserStorage(SessionStateDescriptor.class);
Vector<Integer> ssds=ssdStorage.getIDsForValue(SessionStateDescriptor.META_FORM_RECORD_ID,r.getID());
AndroidSessionWrapper currentState=CommCareApplication.instance().getCurrentSessionWrapper();
if (ssds.size() == 1) {
  currentState.loadFromStateDescription(ssdStorage.read(ssds.firstElement()));
}
 else {
  currentState.setFormRecordId(r.getID());
}
AndroidCommCarePlatform platform=CommCareApplication.instance().getCommCarePlatform();
formEntry(platform.getFormContentUri(r.getFormNamespace()),r);
return;
}
break;
case GET_COMMAND:
boolean fetchNext=processReturnFromGetCommand(resultCode,intent);
if (!fetchNext) {
return;
}
break;
case GET_CASE:
fetchNext=processReturnFromGetCase(resultCode,intent);
if (!fetchNext) {
return;
}
break;
case MODEL_RESULT:
fetchNext=processReturnFromFormEntry(resultCode,intent);
if (!fetchNext) {
return;
}
break;
case AUTHENTICATION_FOR_PIN:
if (resultCode == RESULT_OK) {
launchPinCreateScreen(LoginMode.PASSWORD);
}
return;
case CREATE_PIN:
boolean choseRememberPassword=intent != null && intent.getBooleanExtra(CreatePinActivity.CHOSE_REMEMBER_PASSWORD,false);
if (choseRememberPassword) {
CommCareApplication.instance().closeUserSession();
}
 else if (resultCode == RESULT_OK) {
Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_SHORT).show();
}
 else {
Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_SHORT).show();
}
return;
case MAKE_REMOTE_POST:
stepBackIfCancelled(resultCode);
if (resultCode == RESULT_OK) {
CommCareApplication.instance().getCurrentSessionWrapper().terminateSession();
}
break;
case GET_REMOTE_DATA:
stepBackIfCancelled(resultCode);
break;
}
sessionNavigationProceedingAfterOnResume=true;
startNextSessionStepSafe();
}
super.onActivityResult(requestCode,resultCode,intent);
}",0.9455384615384615
141983,"private void processFromLoginLaunch(){
  if (getIntent().getBooleanExtra(DispatchActivity.START_FROM_LOGIN,false) && !loginExtraWasConsumed) {
    getIntent().removeExtra(DispatchActivity.START_FROM_LOGIN);
    loginExtraWasConsumed=true;
    CommCareSession session=CommCareApplication.instance().getCurrentSession();
    if (session.getCommand() != null) {
      isRestoringSession=true;
      sessionNavigator.startNextSessionStep();
      return;
    }
    if (!CommCareApplication.instance().isSyncPending(false)) {
      checkAndStartUnsentFormsTask(false,false);
    }
    if (isDemoUser()) {
      showDemoModeWarning();
      return;
    }
    if (UpdatePromptHelper.promptForUpdateIfNeeded(this,PROMPT_FOR_UPDATE)) {
      return;
    }
    if (checkForPinLaunchConditions()) {
      return;
    }
  }
}","private void processFromLoginLaunch(){
  if (getIntent().getBooleanExtra(DispatchActivity.START_FROM_LOGIN,false) && !loginExtraWasConsumed) {
    getIntent().removeExtra(DispatchActivity.START_FROM_LOGIN);
    loginExtraWasConsumed=true;
    CommCareSession session=CommCareApplication.instance().getCurrentSession();
    if (session.getCommand() != null) {
      isRestoringSession=true;
      sessionNavigator.startNextSessionStep();
      return;
    }
    if (!CommCareApplication.instance().isSyncPending(false)) {
      checkAndStartUnsentFormsTask(false,false);
    }
    if (isDemoUser()) {
      showDemoModeWarning();
      return;
    }
    if (checkForPinLaunchConditions()) {
      return;
    }
  }
}",0.9358638743455496
141984,"/** 
 * Decides if we should actually be on the home screen, or else should redirect elsewhere
 */
private void attemptDispatchHomeScreen(){
  try {
    CommCareApplication.instance().getSession();
  }
 catch (  SessionUnavailableException e) {
    setResult(RESULT_OK);
    this.finish();
    return;
  }
  if (CommCareApplication.instance().isSyncPending(false)) {
    handlePendingSync();
  }
 else {
    refreshUI();
  }
}","/** 
 * Decides if we should actually be on the home screen, or else should redirect elsewhere
 */
private void attemptDispatchHomeScreen(){
  try {
    CommCareApplication.instance().getSession();
  }
 catch (  SessionUnavailableException e) {
    setResult(RESULT_OK);
    this.finish();
    return;
  }
  if (CommCareApplication.instance().isSyncPending(false)) {
    handlePendingSync();
  }
 else   if (UpdatePromptHelper.promptForUpdateIfNeeded(this)) {
    return;
  }
 else {
    refreshUI();
  }
}",0.9141630901287554
141985,"/** 
 * @return - If the user was prompted to update
 */
public static boolean promptForUpdateIfNeeded(Activity context,int requestCode){
  try {
    CommCareSessionService currentSession=CommCareApplication.instance().getSession();
    if (!currentSession.apkUpdatePromptWasShown() && getCurrentUpdateToPrompt(UpdateToPrompt.Type.APK_UPDATE) != null) {
      Intent i=new Intent(context,PromptApkUpdateActivity.class);
      context.startActivityForResult(i,requestCode);
      return true;
    }
 else     if (!currentSession.cczUpdatePromptWasShown() && getCurrentUpdateToPrompt(UpdateToPrompt.Type.CCZ_UPDATE) != null) {
      Intent i=new Intent(context,PromptCczUpdateActivity.class);
      context.startActivityForResult(i,requestCode);
      return true;
    }
  }
 catch (  SessionUnavailableException e) {
  }
  return false;
}","/** 
 * @return - If the user was prompted to update
 */
public static boolean promptForUpdateIfNeeded(Activity context){
  try {
    CommCareSessionService currentSession=CommCareApplication.instance().getSession();
    if (!currentSession.apkUpdatePromptWasShown() && getCurrentUpdateToPrompt(UpdateToPrompt.Type.APK_UPDATE) != null) {
      Intent i=new Intent(context,PromptApkUpdateActivity.class);
      context.startActivity(i);
      return true;
    }
 else     if (!currentSession.cczUpdatePromptWasShown() && getCurrentUpdateToPrompt(UpdateToPrompt.Type.CCZ_UPDATE) != null) {
      Intent i=new Intent(context,PromptCczUpdateActivity.class);
      context.startActivity(i);
      return true;
    }
  }
 catch (  SessionUnavailableException e) {
  }
  return false;
}",0.959158415841584
141986,"public void upgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion == 1) {
    if (upgradeOneTwo(db)) {
      oldVersion=2;
    }
  }
  if (oldVersion == 2) {
    if (upgradeTwoThree(db)) {
      oldVersion=3;
    }
  }
  if (oldVersion == 3) {
    if (upgradeThreeFour(db)) {
      oldVersion=4;
    }
  }
  if (oldVersion == 4) {
    if (upgradeFourFive(db)) {
      oldVersion=5;
    }
  }
  if (oldVersion == 5) {
    if (upgradeFiveSix(db)) {
      oldVersion=6;
    }
  }
  if (oldVersion == 6) {
    if (upgradeSixSeven(db)) {
      oldVersion=7;
    }
  }
  if (oldVersion == 7) {
    if (upgradeSevenEight(db)) {
      oldVersion=8;
    }
  }
  if (oldVersion == 8) {
    if (upgradeEightNine(db)) {
      oldVersion=9;
    }
  }
  if (oldVersion == 9) {
    if (upgradeNineTen(db)) {
      oldVersion=10;
    }
  }
  if (oldVersion == 10) {
    if (upgradeTenEleven(db)) {
      oldVersion=11;
    }
  }
  if (oldVersion == 11) {
    if (upgradeElevenTwelve(db)) {
      oldVersion=12;
    }
  }
  if (oldVersion == 12) {
    if (upgradeTwelveThirteen(db)) {
      oldVersion=13;
    }
  }
  if (oldVersion == 13) {
    if (upgradeThirteenFourteen(db)) {
      oldVersion=14;
    }
  }
  if (oldVersion == 14) {
    if (upgradeFourteenFifteen(db)) {
      oldVersion=15;
    }
  }
  if (oldVersion == 15) {
    if (upgradeFifteenSixteen(db)) {
      oldVersion=16;
    }
  }
  if (oldVersion == 16) {
    if (upgradeSixteenSeventeen(db)) {
      oldVersion=17;
    }
  }
  if (oldVersion == 17) {
    if (upgradeSeventeenEighteen(db)) {
      oldVersion=18;
    }
  }
}","public void upgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion == 1) {
    if (upgradeOneTwo(db)) {
      oldVersion=2;
    }
  }
  if (oldVersion == 2) {
    if (upgradeTwoThree(db)) {
      oldVersion=3;
    }
  }
  if (oldVersion == 3) {
    if (upgradeThreeFour(db)) {
      oldVersion=4;
    }
  }
  if (oldVersion == 4) {
    if (upgradeFourFive(db)) {
      oldVersion=5;
    }
  }
  if (oldVersion == 5) {
    if (upgradeFiveSix(db)) {
      oldVersion=6;
    }
  }
  if (oldVersion == 6) {
    if (upgradeSixSeven(db)) {
      oldVersion=7;
    }
  }
  if (oldVersion == 7) {
    if (upgradeSevenEight(db)) {
      oldVersion=8;
    }
  }
  if (oldVersion == 8) {
    if (upgradeEightNine(db)) {
      oldVersion=9;
    }
  }
  if (oldVersion == 9) {
    if (upgradeNineTen(db)) {
      oldVersion=10;
    }
  }
  if (oldVersion == 10) {
    if (upgradeTenEleven(db)) {
      oldVersion=11;
    }
  }
  if (oldVersion == 11) {
    if (upgradeElevenTwelve(db)) {
      oldVersion=12;
    }
  }
  if (oldVersion == 12) {
    if (upgradeTwelveThirteen(db)) {
      oldVersion=13;
    }
  }
  if (oldVersion == 13) {
    if (upgradeThirteenFourteen(db)) {
      oldVersion=14;
    }
  }
  if (oldVersion == 14) {
    if (upgradeFourteenFifteen(db)) {
      oldVersion=15;
    }
  }
  if (oldVersion == 15) {
    if (upgradeFifteenSixteen(db)) {
      oldVersion=16;
    }
  }
  if (oldVersion == 16) {
    if (upgradeSixteenSeventeen(db)) {
      oldVersion=17;
    }
  }
  if (oldVersion == 17) {
    if (upgradeSeventeenEighteen(db)) {
      oldVersion=18;
    }
  }
  if (oldVersion == 18) {
    if (upgradeEighteenNineteen(db)) {
      oldVersion=19;
    }
  }
}",0.9702489374620522
141987,"private Pair<Integer,String> recover(HttpRequestEndpoints requestor,AndroidTransactionParserFactory factory){
  this.publishProgress(PROGRESS_RECOVERY_NEEDED);
  Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"");
  BitCache cache;
  try {
    RemoteDataPullResponse pullResponse=dataPullRequester.makeDataPullRequest(this,requestor,server,false);
    if (!(pullResponse.responseCode >= 200 && pullResponse.responseCode < 300)) {
      return new Pair<>(PROGRESS_RECOVERY_FAIL_SAFE,""String_Node_Str"");
    }
    cache=pullResponse.writeResponseToCache(context);
  }
 catch (  IOException e) {
    e.printStackTrace();
    Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + e.getMessage());
    return new Pair<>(PROGRESS_RECOVERY_FAIL_SAFE,""String_Node_Str"");
  }
  this.publishProgress(PROGRESS_RECOVERY_STARTED);
  Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"");
  CommCareApplication.instance().getUserStorage(ACase.STORAGE_KEY,ACase.class).removeAll();
  String failureReason=""String_Node_Str"";
  try {
    String syncToken=readInput(cache.retrieveCache(),factory);
    updateUserSyncToken(syncToken);
    Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"");
    return new Pair<>(PROGRESS_DONE,""String_Node_Str"");
  }
 catch (  ActionableInvalidStructureException e) {
    e.printStackTrace();
    failureReason=e.getLocalizedMessage();
  }
catch (  InvalidStructureException|XmlPullParserException|UnfullfilledRequirementsException|SessionUnavailableException|IOException e) {
    e.printStackTrace();
    failureReason=e.getMessage();
  }
 finally {
    cache.release();
  }
  Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + failureReason);
  return new Pair<>(PROGRESS_RECOVERY_FAIL_BAD,failureReason);
}","private Pair<Integer,String> recover(HttpRequestEndpoints requestor,AndroidTransactionParserFactory factory){
  this.publishProgress(PROGRESS_RECOVERY_NEEDED);
  Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"");
  BitCache cache;
  try {
    RemoteDataPullResponse pullResponse=dataPullRequester.makeDataPullRequest(this,requestor,server,false);
    if (!(pullResponse.responseCode >= 200 && pullResponse.responseCode < 300)) {
      return new Pair<>(PROGRESS_RECOVERY_FAIL_SAFE,""String_Node_Str"");
    }
    cache=pullResponse.writeResponseToCache(context);
  }
 catch (  IOException e) {
    e.printStackTrace();
    Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + e.getMessage());
    return new Pair<>(PROGRESS_RECOVERY_FAIL_SAFE,""String_Node_Str"");
  }
  this.publishProgress(PROGRESS_RECOVERY_STARTED);
  Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"");
  wipeStorageForFourTwelveSync();
  String failureReason=""String_Node_Str"";
  try {
    String syncToken=readInput(cache.retrieveCache(),factory);
    updateUserSyncToken(syncToken);
    Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"");
    return new Pair<>(PROGRESS_DONE,""String_Node_Str"");
  }
 catch (  ActionableInvalidStructureException e) {
    e.printStackTrace();
    failureReason=e.getLocalizedMessage();
  }
catch (  InvalidStructureException|XmlPullParserException|UnfullfilledRequirementsException|SessionUnavailableException|IOException e) {
    e.printStackTrace();
    failureReason=e.getMessage();
  }
 finally {
    cache.release();
  }
  Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + failureReason);
  return new Pair<>(PROGRESS_RECOVERY_FAIL_BAD,failureReason);
}",0.9683470105509964
141988,"@Override public void onBackPressed(){
  FragmentManager fm=this.getSupportFragmentManager();
  BreadcrumbBarFragment bar=(BreadcrumbBarFragment)fm.findFragmentByTag(""String_Node_Str"");
  if (bar != null && bar.persistentCaseTileIsExpanded) {
    bar.collapsePersistentCaseTile(this);
  }
 else {
    super.onBackPressed();
    AudioController.INSTANCE.releaseCurrentMediaEntity();
  }
}","@Override public void onBackPressed(){
  FragmentManager fm=this.getSupportFragmentManager();
  BreadcrumbBarFragment bar=(BreadcrumbBarFragment)fm.findFragmentByTag(""String_Node_Str"");
  if (bar != null) {
    if (bar.collapseTileIfExpanded(this)) {
      return;
    }
  }
  super.onBackPressed();
  AudioController.INSTANCE.releaseCurrentMediaEntity();
}",0.8413978494623656
141989,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  FragmentManager fm=this.getSupportFragmentManager();
  stateHolder=(TaskConnectorFragment<R>)fm.findFragmentByTag(""String_Node_Str"");
  if (stateHolder == null) {
    stateHolder=new TaskConnectorFragment<>();
    fm.beginTransaction().add(stateHolder,""String_Node_Str"").commit();
    AudioController.INSTANCE.releaseCurrentMediaEntity();
  }
  if (usesUIController()) {
    ((WithUIController)this).initUIController();
  }
  persistManagedUiState(fm);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && shouldShowBreadcrumbBar()) {
    getActionBar().setDisplayShowCustomEnabled(true);
    BreadcrumbBarFragment bar=(BreadcrumbBarFragment)fm.findFragmentByTag(""String_Node_Str"");
    if (bar == null) {
      bar=new BreadcrumbBarFragment();
      fm.beginTransaction().add(bar,""String_Node_Str"").commit();
    }
 else {
      bar.persistentCaseTileIsExpanded=false;
    }
  }
  mGestureDetector=new GestureDetector(this,this);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  FragmentManager fm=this.getSupportFragmentManager();
  stateHolder=(TaskConnectorFragment<R>)fm.findFragmentByTag(""String_Node_Str"");
  if (stateHolder == null) {
    stateHolder=new TaskConnectorFragment<>();
    fm.beginTransaction().add(stateHolder,""String_Node_Str"").commit();
    AudioController.INSTANCE.releaseCurrentMediaEntity();
  }
  if (usesUIController()) {
    ((WithUIController)this).initUIController();
  }
  persistManagedUiState(fm);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && shouldShowBreadcrumbBar()) {
    getActionBar().setDisplayShowCustomEnabled(true);
    BreadcrumbBarFragment bar=(BreadcrumbBarFragment)fm.findFragmentByTag(""String_Node_Str"");
    if (bar == null) {
      bar=new BreadcrumbBarFragment();
      fm.beginTransaction().add(bar,""String_Node_Str"").commit();
    }
  }
  mGestureDetector=new GestureDetector(this,this);
}",0.9221674876847292
141990,"@Override public void onClick(View v){
  if (!persistentCaseTileIsExpanded) {
    expandPersistentCaseTile(activity,holder,tileData);
  }
 else {
    collapsePersistentCaseTile(activity);
  }
}","@Override public void onClick(View v){
  boolean isCollapsed=INLINE_TILE_COLLAPSED.equals(holder.getTag());
  if (isCollapsed) {
    expandInlineTile(activity,holder,tileData,inlineDetail);
  }
 else {
    collapseTileIfExpanded(activity);
  }
}",0.5662100456621004
141991,"private View findAndLoadCaseTile(final Activity activity){
  final View holder=LayoutInflater.from(activity).inflate(R.layout.com_tile_holder,null);
  final Pair<View,TreeReference> tileData=this.loadTile(activity);
  if (tileData == null || tileData.first == null) {
    return null;
  }
  holder.findViewById(R.id.com_tile_holder_btn_open).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!persistentCaseTileIsExpanded) {
        expandPersistentCaseTile(activity,holder,tileData);
      }
 else {
        collapsePersistentCaseTile(activity);
      }
    }
  }
);
  return holder;
}","private View findAndLoadCaseTile(final Activity activity){
  final View holder=LayoutInflater.from(activity).inflate(R.layout.com_tile_holder,null);
  final Pair<View,TreeReference> tileData=this.loadTile(activity);
  if (tileData == null || tileData.first == null) {
    return null;
  }
  View tile=tileData.first;
  final String inlineDetail=(String)tile.getTag();
  ((ViewGroup)holder.findViewById(R.id.com_tile_holder_frame)).addView(tile,LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  ImageButton infoButton=((ImageButton)holder.findViewById(R.id.com_tile_holder_btn_open));
  if (inlineDetail == null) {
    infoButton.setVisibility(View.GONE);
  }
  holder.setTag(INLINE_TILE_COLLAPSED);
  infoButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      boolean isCollapsed=INLINE_TILE_COLLAPSED.equals(holder.getTag());
      if (isCollapsed) {
        expandInlineTile(activity,holder,tileData,inlineDetail);
      }
 else {
        collapseTileIfExpanded(activity);
      }
    }
  }
);
  return holder;
}",0.5440658049353702
141992,"public static void wipeSandboxForUser(final String username){
  CommCareApplication.instance().getFileBackedUserStorage(""String_Node_Str"",FormInstance.class).removeAll();
  final Set<String> dbIdsToRemove=new HashSet<>();
  CommCareApplication.instance().getAppStorage(UserKeyRecord.class).removeAll(new EntityFilter<UserKeyRecord>(){
    @Override public boolean matches(    UserKeyRecord ukr){
      if (ukr.getUsername().equalsIgnoreCase(username.toLowerCase())) {
        dbIdsToRemove.add(ukr.getUuid());
        return true;
      }
      return false;
    }
  }
);
  for (  String id : dbIdsToRemove) {
    CommCareApplication.instance().getDatabasePath(DatabaseUserOpenHelper.getDbName(id)).delete();
  }
}","public static void wipeSandboxForUser(final String username){
  final Set<String> dbIdsToRemove=new HashSet<>();
  CommCareApplication.instance().getAppStorage(UserKeyRecord.class).removeAll(new EntityFilter<UserKeyRecord>(){
    @Override public boolean matches(    UserKeyRecord ukr){
      if (ukr.getUsername().equalsIgnoreCase(username.toLowerCase())) {
        dbIdsToRemove.add(ukr.getUuid());
        return true;
      }
      return false;
    }
  }
);
  wipeFileBackedFixtureStorage(dbIdsToRemove);
  for (  String id : dbIdsToRemove) {
    CommCareApplication.instance().getDatabasePath(DatabaseUserOpenHelper.getDbName(id)).delete();
  }
}",0.8857979502196194
141993,"@Override public IStorageUtilityIndexed<FormInstance> getUserFixtureStorage(){
  return app.getFileBackedUserStorage(""String_Node_Str"",FormInstance.class);
}","@Override public IStorageUtilityIndexed<FormInstance> getUserFixtureStorage(){
  return app.getFileBackedUserStorage(HybridFileBackedSqlStorage.FIXTURE_STORAGE_TABLE_NAME,FormInstance.class);
}",0.8342857142857143
141994,"/** 
 * Sql object storage layer that stores serialized objects on the filesystem.
 * @param tableName     name of database table
 * @param classType     type of object being stored in this database
 * @param directoryName Name of storage root subdir where entry files are placed
 * @param fsPathBuilder Resolves a db dir path to the correct app dir in external storage
 */
public HybridFileBackedSqlStorage(String tableName,Class<? extends T> classType,AndroidDbHelper dbHelper,String directoryName,AppFilePathBuilder fsPathBuilder){
  super(tableName,classType,dbHelper);
  final String subPath=GlobalConstants.FILE_CC_DB + directoryName + ""String_Node_Str""+ tableName;
  dbDir=new File(fsPathBuilder.fsPath(subPath));
  setupDir();
}","/** 
 * Sql object storage layer that stores serialized objects on the filesystem.
 * @param tableName     name of database table
 * @param classType     type of object being stored in this database
 * @param directoryName Name of storage root subdir where entry files are placed
 * @param fsPathBuilder Resolves a db dir path to the correct app dir in external storage
 */
public HybridFileBackedSqlStorage(String tableName,Class<? extends T> classType,AndroidDbHelper dbHelper,String directoryName,AppFilePathBuilder fsPathBuilder){
  super(tableName,classType,dbHelper);
  dbDir=getStorageFile(directoryName,tableName,fsPathBuilder);
  setupDir();
}",0.8659942363112392
141995,"/** 
 * Ensure parsing doesn't stop at empty fixtures, but continues on, committing subsequent fixtures
 */
@Test public void testEmptyFixtureFollowedByNormalFixture(){
  HybridFileBackedSqlStorage<FormInstance> userFixtureStorage=CommCareApplication.instance().getFileBackedUserStorage(""String_Node_Str"",FormInstance.class);
  boolean didntFindEmptyFixture=false;
  try {
    userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  }
 catch (  NoSuchElementException e) {
    didntFindEmptyFixture=true;
  }
  Assert.assertTrue(didntFindEmptyFixture);
  userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
}","/** 
 * Ensure parsing doesn't stop at empty fixtures, but continues on, committing subsequent fixtures
 */
@Test public void testEmptyFixtureFollowedByNormalFixture(){
  HybridFileBackedSqlStorage<FormInstance> userFixtureStorage=CommCareApplication.instance().getFileBackedUserStorage(HybridFileBackedSqlStorage.FIXTURE_STORAGE_TABLE_NAME,FormInstance.class);
  boolean didntFindEmptyFixture=false;
  try {
    userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  }
 catch (  NoSuchElementException e) {
    didntFindEmptyFixture=true;
  }
  Assert.assertTrue(didntFindEmptyFixture);
  userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
}",0.9550408719346049
141996,"@Test public void moveEncryptedFixtureFromFsToDbAndBack(){
  HybridFileBackedSqlStorageMock.alwaysPutInDatabase();
  HybridFileBackedSqlStorage<FormInstance> userFixtureStorage=CommCareApplication.instance().getFileBackedUserStorage(""String_Node_Str"",FormInstance.class);
  FormInstance form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  File dbDir=userFixtureStorage.getDbDirForTesting();
  int fileCountBefore=dbDir.listFiles().length;
  String newName=""String_Node_Str"";
  form.setName(newName);
  userFixtureStorage.update(form.getID(),form);
  form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(newName,form.getName());
  FormInstance form2=userFixtureStorage.getRecordsForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""}).firstElement();
  Assert.assertEquals(form2.getName(),form.getName());
  clearOrphanedFiles();
  int fileCountAfter=dbDir.listFiles().length;
  Assert.assertTrue(fileCountBefore - fileCountAfter == 1);
  HybridFileBackedSqlStorageMock.alwaysPutInFilesystem();
  newName=""String_Node_Str"";
  form.setName(newName);
  userFixtureStorage.update(form.getID(),form);
  form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(newName,form.getName());
  fileCountAfter=dbDir.listFiles().length;
  Assert.assertTrue(fileCountBefore == fileCountAfter);
  userFixtureStorage.remove(form.getID());
  fileCountAfter=dbDir.listFiles().length;
  Assert.assertTrue(fileCountBefore - fileCountAfter == 1);
}","@Test public void moveEncryptedFixtureFromFsToDbAndBack(){
  HybridFileBackedSqlStorageMock.alwaysPutInDatabase();
  HybridFileBackedSqlStorage<FormInstance> userFixtureStorage=CommCareApplication.instance().getFileBackedUserStorage(HybridFileBackedSqlStorage.FIXTURE_STORAGE_TABLE_NAME,FormInstance.class);
  FormInstance form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  File dbDir=userFixtureStorage.getDbDirForTesting();
  int fileCountBefore=dbDir.listFiles().length;
  String newName=""String_Node_Str"";
  form.setName(newName);
  userFixtureStorage.update(form.getID(),form);
  form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(newName,form.getName());
  FormInstance form2=userFixtureStorage.getRecordsForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""}).firstElement();
  Assert.assertEquals(form2.getName(),form.getName());
  clearOrphanedFiles();
  int fileCountAfter=dbDir.listFiles().length;
  Assert.assertTrue(fileCountBefore - fileCountAfter == 1);
  HybridFileBackedSqlStorageMock.alwaysPutInFilesystem();
  newName=""String_Node_Str"";
  form.setName(newName);
  userFixtureStorage.update(form.getID(),form);
  form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(newName,form.getName());
  fileCountAfter=dbDir.listFiles().length;
  Assert.assertTrue(fileCountBefore == fileCountAfter);
  userFixtureStorage.remove(form.getID());
  fileCountAfter=dbDir.listFiles().length;
  Assert.assertTrue(fileCountBefore - fileCountAfter == 1);
}",0.979240806642942
141997,"@Test public void testDbWriteAndUpdate(){
  HybridFileBackedSqlStorageMock.alwaysPutInDatabase();
  UnencryptedHybridFileBackedSqlStorageMock.alwaysPutInDatabase();
  UnencryptedHybridFileBackedSqlStorage<FormInstance> appFixtureStorage=CommCareApplication.instance().getCurrentApp().getFileBackedStorage(""String_Node_Str"",FormInstance.class);
  FormInstance appLevelFixture=appFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  appLevelFixture.setID(-1);
  appLevelFixture.initialize(null,""String_Node_Str"");
  appFixtureStorage.write(appLevelFixture);
  appFixtureStorage.read(appLevelFixture.getID());
  String newName=""String_Node_Str"";
  appLevelFixture.setName(newName);
  appFixtureStorage.update(appLevelFixture.getID(),appLevelFixture);
  appLevelFixture=appFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(newName,appLevelFixture.getName());
  HybridFileBackedSqlStorage<FormInstance> userFixtureStorage=CommCareApplication.instance().getFileBackedUserStorage(""String_Node_Str"",FormInstance.class);
  FormInstance userLevelFixture=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  userLevelFixture.setID(-1);
  userLevelFixture.initialize(null,""String_Node_Str"");
  userFixtureStorage.write(userLevelFixture);
  userFixtureStorage.read(userLevelFixture.getID());
  userLevelFixture.setName(newName);
  userFixtureStorage.update(userLevelFixture.getID(),userLevelFixture);
  userLevelFixture=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(newName,userLevelFixture.getName());
}","@Test public void testDbWriteAndUpdate(){
  HybridFileBackedSqlStorageMock.alwaysPutInDatabase();
  UnencryptedHybridFileBackedSqlStorageMock.alwaysPutInDatabase();
  UnencryptedHybridFileBackedSqlStorage<FormInstance> appFixtureStorage=CommCareApplication.instance().getCurrentApp().getFileBackedStorage(""String_Node_Str"",FormInstance.class);
  FormInstance appLevelFixture=appFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  appLevelFixture.setID(-1);
  appLevelFixture.initialize(null,""String_Node_Str"");
  appFixtureStorage.write(appLevelFixture);
  appFixtureStorage.read(appLevelFixture.getID());
  String newName=""String_Node_Str"";
  appLevelFixture.setName(newName);
  appFixtureStorage.update(appLevelFixture.getID(),appLevelFixture);
  appLevelFixture=appFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(newName,appLevelFixture.getName());
  HybridFileBackedSqlStorage<FormInstance> userFixtureStorage=CommCareApplication.instance().getFileBackedUserStorage(HybridFileBackedSqlStorage.FIXTURE_STORAGE_TABLE_NAME,FormInstance.class);
  FormInstance userLevelFixture=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  userLevelFixture.setID(-1);
  userLevelFixture.initialize(null,""String_Node_Str"");
  userFixtureStorage.write(userLevelFixture);
  userFixtureStorage.read(userLevelFixture.getID());
  userLevelFixture.setName(newName);
  userFixtureStorage.update(userLevelFixture.getID(),userLevelFixture);
  userLevelFixture=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(newName,userLevelFixture.getName());
}",0.9814084507042252
141998,"/** 
 * Write an object to the filesystem but fail before finializing the transaction. Test that the file is marked as orphan
 */
@Test public void atomicWriteTest(){
  HybridFileBackedSqlStorageMock.alwaysPutInFilesystem();
  HybridFileBackedSqlStorage<FormInstance> userFixtureStorage=CommCareApplication.instance().getFileBackedUserStorage(""String_Node_Str"",FormInstance.class);
  FormInstance form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  form.setID(-1);
  FormInstanceWithFailures failingForm=new FormInstanceWithFailures(form.getRoot());
  FormInstanceWithFailures.setFailOnIdSet(true);
  File dbDir=userFixtureStorage.getDbDirForTesting();
  int fileCountBefore=dbDir.listFiles().length;
  boolean didWriteFail=false;
  try {
    userFixtureStorage.write(failingForm);
  }
 catch (  RuntimeException e) {
    didWriteFail=true;
  }
  Assert.assertTrue(didWriteFail);
  int fileCountAfter=dbDir.listFiles().length;
  Assert.assertTrue(fileCountAfter - fileCountBefore == 1);
  clearOrphanedFiles();
  int fileCountAfterClear=dbDir.listFiles().length;
  Assert.assertTrue(fileCountBefore - fileCountAfterClear == 0);
}","/** 
 * Write an object to the filesystem but fail before finializing the transaction. Test that the file is marked as orphan
 */
@Test public void atomicWriteTest(){
  HybridFileBackedSqlStorageMock.alwaysPutInFilesystem();
  HybridFileBackedSqlStorage<FormInstance> userFixtureStorage=CommCareApplication.instance().getFileBackedUserStorage(HybridFileBackedSqlStorage.FIXTURE_STORAGE_TABLE_NAME,FormInstance.class);
  FormInstance form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  form.setID(-1);
  FormInstanceWithFailures failingForm=new FormInstanceWithFailures(form.getRoot());
  FormInstanceWithFailures.setFailOnIdSet(true);
  File dbDir=userFixtureStorage.getDbDirForTesting();
  int fileCountBefore=dbDir.listFiles().length;
  boolean didWriteFail=false;
  try {
    userFixtureStorage.write(failingForm);
  }
 catch (  RuntimeException e) {
    didWriteFail=true;
  }
  Assert.assertTrue(didWriteFail);
  int fileCountAfter=dbDir.listFiles().length;
  Assert.assertTrue(fileCountAfter - fileCountBefore == 1);
  clearOrphanedFiles();
  int fileCountAfterClear=dbDir.listFiles().length;
  Assert.assertTrue(fileCountBefore - fileCountAfterClear == 0);
}",0.9727047146401984
141999,"@Test public void testRecordLookup(){
  HybridFileBackedSqlStorage<FormInstance> userFixtureStorage=CommCareApplication.instance().getFileBackedUserStorage(""String_Node_Str"",FormInstance.class);
  Vector<FormInstance> forms=userFixtureStorage.getRecordsForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertTrue(forms.size() == 1);
  FormInstance form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(forms.firstElement().getRoot(),form.getRoot());
  form=userFixtureStorage.getRecordForValue(FormInstance.META_ID,""String_Node_Str"");
  Assert.assertEquals(forms.firstElement().getRoot(),form.getRoot());
  UnencryptedHybridFileBackedSqlStorage<FormInstance> appFixtureStorage=CommCareApplication.instance().getCurrentApp().getFileBackedStorage(""String_Node_Str"",FormInstance.class);
  forms=appFixtureStorage.getRecordsForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertTrue(forms.size() == 1);
  form=appFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(forms.firstElement().getRoot(),form.getRoot());
  form=appFixtureStorage.getRecordForValue(FormInstance.META_ID,""String_Node_Str"");
  Assert.assertEquals(forms.firstElement().getRoot(),form.getRoot());
}","@Test public void testRecordLookup(){
  HybridFileBackedSqlStorage<FormInstance> userFixtureStorage=CommCareApplication.instance().getFileBackedUserStorage(HybridFileBackedSqlStorage.FIXTURE_STORAGE_TABLE_NAME,FormInstance.class);
  Vector<FormInstance> forms=userFixtureStorage.getRecordsForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertTrue(forms.size() == 1);
  FormInstance form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(forms.firstElement().getRoot(),form.getRoot());
  form=userFixtureStorage.getRecordForValue(FormInstance.META_ID,""String_Node_Str"");
  Assert.assertEquals(forms.firstElement().getRoot(),form.getRoot());
  UnencryptedHybridFileBackedSqlStorage<FormInstance> appFixtureStorage=CommCareApplication.instance().getCurrentApp().getFileBackedStorage(""String_Node_Str"",FormInstance.class);
  forms=appFixtureStorage.getRecordsForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertTrue(forms.size() == 1);
  form=appFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(forms.firstElement().getRoot(),form.getRoot());
  form=appFixtureStorage.getRecordForValue(FormInstance.META_ID,""String_Node_Str"");
  Assert.assertEquals(forms.firstElement().getRoot(),form.getRoot());
}",0.9766619519094768
142000,"@Test public void testUpdate(){
  HybridFileBackedSqlStorage<FormInstance> userFixtureStorage=CommCareApplication.instance().getFileBackedUserStorage(""String_Node_Str"",FormInstance.class);
  FormInstance form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  String newName=""String_Node_Str"";
  form.setName(newName);
  userFixtureStorage.update(form.getID(),form);
  form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(newName,form.getName());
  UnencryptedHybridFileBackedSqlStorage<FormInstance> appFixtureStorage=CommCareApplication.instance().getCurrentApp().getFileBackedStorage(""String_Node_Str"",FormInstance.class);
  form=appFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  form.setName(newName);
  appFixtureStorage.update(form.getID(),form);
  form=appFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(newName,form.getName());
}","@Test public void testUpdate(){
  HybridFileBackedSqlStorage<FormInstance> userFixtureStorage=CommCareApplication.instance().getFileBackedUserStorage(HybridFileBackedSqlStorage.FIXTURE_STORAGE_TABLE_NAME,FormInstance.class);
  FormInstance form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  String newName=""String_Node_Str"";
  form.setName(newName);
  userFixtureStorage.update(form.getID(),form);
  form=userFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(newName,form.getName());
  UnencryptedHybridFileBackedSqlStorage<FormInstance> appFixtureStorage=CommCareApplication.instance().getCurrentApp().getFileBackedStorage(""String_Node_Str"",FormInstance.class);
  form=appFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  form.setName(newName);
  appFixtureStorage.update(form.getID(),form);
  form=appFixtureStorage.getRecordForValues(new String[]{FormInstance.META_ID},new String[]{""String_Node_Str""});
  Assert.assertEquals(newName,form.getName());
}",0.9689991142604074
