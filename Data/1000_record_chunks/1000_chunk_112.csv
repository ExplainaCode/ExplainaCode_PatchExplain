record_number,buggy_code,fixed_code,code_similarity
111001,"/** 
 * Given a list of   {@link Dependency} objects, returns a multimap from the {@link SkyKey} of thedependency to the  {@link Aspect} instances that should be merged into it.<p>Returns null if the required aspects are not computed yet.
 */
@Nullable private static ListMultimap<SkyKey,Aspect> resolveAspectDependencies(Environment env,Map<SkyKey,ConfiguredTarget> configuredTargetMap,Iterable<Dependency> deps,NestedSetBuilder<Package> transitivePackages) throws DependencyEvaluationException {
  ListMultimap<SkyKey,Aspect> result=ArrayListMultimap.create();
  Set<SkyKey> aspectKeys=new HashSet<>();
  for (  Dependency dep : deps) {
    for (    AspectWithParameters depAspect : dep.getAspects()) {
      aspectKeys.add(createAspectKey(dep.getLabel(),dep.getConfiguration(),depAspect));
    }
  }
  Map<SkyKey,ValueOrException3<AspectCreationException,NoSuchThingException,ConfiguredValueCreationException>> depAspects=env.getValuesOrThrow(aspectKeys,AspectCreationException.class,NoSuchThingException.class,ConfiguredValueCreationException.class);
  for (  Dependency dep : deps) {
    SkyKey depKey=TO_KEYS.apply(dep);
    if (result.containsKey(depKey)) {
      continue;
    }
    ConfiguredTarget depConfiguredTarget=configuredTargetMap.get(depKey);
    for (    AspectWithParameters depAspect : dep.getAspects()) {
      if (!aspectMatchesConfiguredTarget(depConfiguredTarget,depAspect.getAspectFactory())) {
        continue;
      }
      SkyKey aspectKey=createAspectKey(dep.getLabel(),dep.getConfiguration(),depAspect);
      AspectValue aspectValue=null;
      try {
        aspectValue=(AspectValue)depAspects.get(aspectKey).get();
      }
 catch (      ConfiguredValueCreationException e) {
        throw new IllegalStateException(e);
      }
catch (      NoSuchThingException|AspectCreationException e) {
        AspectFactory<?,?,?> depAspectFactory=AspectFactory.Util.create(depAspect.getAspectFactory());
        throw new DependencyEvaluationException(new ConfiguredValueCreationException(String.format(""String_Node_Str"",depAspectFactory.getDefinition().getName(),dep.getLabel(),e.toString())));
      }
      if (aspectValue == null) {
        return null;
      }
      result.put(depKey,aspectValue.getAspect());
      transitivePackages.addTransitive(aspectValue.getTransitivePackages());
    }
  }
  return result;
}","/** 
 * Given a list of   {@link Dependency} objects, returns a multimap from the {@link SkyKey} of thedependency to the  {@link Aspect} instances that should be merged into it.<p>Returns null if the required aspects are not computed yet.
 */
@Nullable private static ListMultimap<SkyKey,Aspect> resolveAspectDependencies(Environment env,Map<SkyKey,ConfiguredTarget> configuredTargetMap,Iterable<Dependency> deps,NestedSetBuilder<Package> transitivePackages) throws AspectCreationException {
  ListMultimap<SkyKey,Aspect> result=ArrayListMultimap.create();
  Set<SkyKey> aspectKeys=new HashSet<>();
  for (  Dependency dep : deps) {
    for (    AspectWithParameters depAspect : dep.getAspects()) {
      aspectKeys.add(createAspectKey(dep.getLabel(),dep.getConfiguration(),depAspect));
    }
  }
  Map<SkyKey,ValueOrException3<AspectCreationException,NoSuchThingException,ConfiguredValueCreationException>> depAspects=env.getValuesOrThrow(aspectKeys,AspectCreationException.class,NoSuchThingException.class,ConfiguredValueCreationException.class);
  for (  Dependency dep : deps) {
    SkyKey depKey=TO_KEYS.apply(dep);
    if (result.containsKey(depKey)) {
      continue;
    }
    ConfiguredTarget depConfiguredTarget=configuredTargetMap.get(depKey);
    for (    AspectWithParameters depAspect : dep.getAspects()) {
      if (!aspectMatchesConfiguredTarget(depConfiguredTarget,depAspect.getAspectFactory())) {
        continue;
      }
      SkyKey aspectKey=createAspectKey(dep.getLabel(),dep.getConfiguration(),depAspect);
      AspectValue aspectValue=null;
      try {
        aspectValue=(AspectValue)depAspects.get(aspectKey).get();
      }
 catch (      ConfiguredValueCreationException e) {
        throw new IllegalStateException(e);
      }
catch (      NoSuchThingException e) {
        AspectFactory<?,?,?> depAspectFactory=AspectFactory.Util.create(depAspect.getAspectFactory());
        throw new AspectCreationException(String.format(""String_Node_Str"",depAspectFactory.getDefinition().getName(),dep.getLabel(),e.toString()));
      }
      if (aspectValue == null) {
        return null;
      }
      result.put(depKey,aspectValue.getAspect());
      transitivePackages.addTransitive(aspectValue.getTransitivePackages());
    }
  }
  return result;
}",0.9250433275563258
111002,"@Override public SkyValue compute(SkyKey key,Environment env) throws ConfiguredTargetFunctionException, InterruptedException {
  SkyframeBuildView view=buildViewProvider.getSkyframeBuildView();
  NestedSetBuilder<Package> transitivePackages=NestedSetBuilder.stableOrder();
  ConfiguredTargetKey configuredTargetKey=(ConfiguredTargetKey)key.argument();
  LabelAndConfiguration lc=LabelAndConfiguration.of(configuredTargetKey.getLabel(),configuredTargetKey.getConfiguration());
  BuildConfiguration configuration=lc.getConfiguration();
  PackageValue packageValue=(PackageValue)env.getValue(PackageValue.key(lc.getLabel().getPackageIdentifier()));
  if (packageValue == null) {
    return null;
  }
  Target target;
  try {
    target=packageValue.getPackage().getTarget(lc.getLabel().getName());
  }
 catch (  NoSuchTargetException e1) {
    throw new ConfiguredTargetFunctionException(new NoSuchTargetException(lc.getLabel(),""String_Node_Str""));
  }
  transitivePackages.add(packageValue.getPackage());
  if (target instanceof InputFile) {
    configuration=null;
  }
 else   if (target instanceof PackageGroup) {
    configuration=null;
  }
  TargetAndConfiguration ctgValue=new TargetAndConfiguration(target,configuration);
  SkyframeDependencyResolver resolver=view.createDependencyResolver(env);
  if (resolver == null) {
    return null;
  }
  try {
    Set<ConfigMatchingProvider> configConditions=getConfigConditions(ctgValue.getTarget(),env,resolver,ctgValue,transitivePackages);
    if (env.valuesMissing()) {
      return null;
    }
    ListMultimap<Attribute,ConfiguredTarget> depValueMap=computeDependencies(env,resolver,ctgValue,null,AspectParameters.EMPTY,configConditions,ruleClassProvider,view.getHostConfiguration(configuration),transitivePackages);
    ConfiguredTargetValue ans=createConfiguredTarget(view,env,target,configuration,depValueMap,configConditions,transitivePackages);
    return ans;
  }
 catch (  DependencyEvaluationException e) {
    throw new ConfiguredTargetFunctionException(e.getRootCauseSkyKey(),e.getCause());
  }
}","@Override public SkyValue compute(SkyKey key,Environment env) throws ConfiguredTargetFunctionException, InterruptedException {
  SkyframeBuildView view=buildViewProvider.getSkyframeBuildView();
  NestedSetBuilder<Package> transitivePackages=NestedSetBuilder.stableOrder();
  ConfiguredTargetKey configuredTargetKey=(ConfiguredTargetKey)key.argument();
  LabelAndConfiguration lc=LabelAndConfiguration.of(configuredTargetKey.getLabel(),configuredTargetKey.getConfiguration());
  BuildConfiguration configuration=lc.getConfiguration();
  PackageValue packageValue=(PackageValue)env.getValue(PackageValue.key(lc.getLabel().getPackageIdentifier()));
  if (packageValue == null) {
    return null;
  }
  Target target;
  try {
    target=packageValue.getPackage().getTarget(lc.getLabel().getName());
  }
 catch (  NoSuchTargetException e1) {
    throw new ConfiguredTargetFunctionException(new NoSuchTargetException(lc.getLabel(),""String_Node_Str""));
  }
  transitivePackages.add(packageValue.getPackage());
  if (target instanceof InputFile) {
    configuration=null;
  }
 else   if (target instanceof PackageGroup) {
    configuration=null;
  }
  TargetAndConfiguration ctgValue=new TargetAndConfiguration(target,configuration);
  SkyframeDependencyResolver resolver=view.createDependencyResolver(env);
  if (resolver == null) {
    return null;
  }
  try {
    Set<ConfigMatchingProvider> configConditions=getConfigConditions(ctgValue.getTarget(),env,resolver,ctgValue,transitivePackages);
    if (env.valuesMissing()) {
      return null;
    }
    ListMultimap<Attribute,ConfiguredTarget> depValueMap=computeDependencies(env,resolver,ctgValue,null,AspectParameters.EMPTY,configConditions,ruleClassProvider,view.getHostConfiguration(configuration),transitivePackages);
    ConfiguredTargetValue ans=createConfiguredTarget(view,env,target,configuration,depValueMap,configConditions,transitivePackages);
    return ans;
  }
 catch (  DependencyEvaluationException e) {
    throw new ConfiguredTargetFunctionException(e.getRootCauseSkyKey(),e.getCause());
  }
catch (  AspectCreationException e) {
    throw new ConfiguredTargetFunctionException(new ConfiguredValueCreationException(e.getMessage()));
  }
}",0.965954449401268
111003,"/** 
 * Computes the direct dependencies of a node in the configured target graph (a configured target or an aspect). <p>Returns null if Skyframe hasn't evaluated the required dependencies yet. In this case, the caller should also return null to Skyframe.
 * @param env the Skyframe environment
 * @param resolver The dependency resolver
 * @param ctgValue The label and the configuration of the node
 * @param aspectDefinition the aspect of the node (if null, the node is a configured target,otherwise it's an aspect)
 * @param aspectParameters additional parameters for aspect construction
 * @param configConditions the configuration conditions for evaluating the attributes of the node
 * @param ruleClassProvider rule class provider for determining the right configuration fragmentsto apply to deps
 * @param hostConfiguration the host configuration. There's a noticeable performance hit frominstantiating this on demand for every dependency that wants it, so it's best to compute the host configuration as early as possible and pass this reference to all consumers without involving Skyframe.
 * @return an attribute -&gt; direct dependency multimap
 */
@Nullable static ListMultimap<Attribute,ConfiguredTarget> computeDependencies(Environment env,SkyframeDependencyResolver resolver,TargetAndConfiguration ctgValue,AspectDefinition aspectDefinition,AspectParameters aspectParameters,Set<ConfigMatchingProvider> configConditions,RuleClassProvider ruleClassProvider,BuildConfiguration hostConfiguration,NestedSetBuilder<Package> transitivePackages) throws DependencyEvaluationException {
  ListMultimap<Attribute,Dependency> depValueNames;
  try {
    depValueNames=resolver.dependentNodeMap(ctgValue,hostConfiguration,aspectDefinition,aspectParameters,configConditions);
  }
 catch (  EvalException e) {
    env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));
    throw new DependencyEvaluationException(new ConfiguredValueCreationException(e.print()));
  }
  if (ctgValue.getConfiguration() != null && ctgValue.getConfiguration().useDynamicConfigurations()) {
    depValueNames=trimConfigurations(env,ctgValue,depValueNames,hostConfiguration,ruleClassProvider);
    if (depValueNames == null) {
      return null;
    }
  }
  Map<SkyKey,ConfiguredTarget> depValues=resolveConfiguredTargetDependencies(env,depValueNames.values(),ctgValue.getTarget(),transitivePackages);
  if (depValues == null) {
    return null;
  }
  ListMultimap<SkyKey,Aspect> depAspects=resolveAspectDependencies(env,depValues,depValueNames.values(),transitivePackages);
  if (depAspects == null) {
    return null;
  }
  return mergeAspects(depValueNames,depValues,depAspects);
}","/** 
 * Computes the direct dependencies of a node in the configured target graph (a configured target or an aspect). <p>Returns null if Skyframe hasn't evaluated the required dependencies yet. In this case, the caller should also return null to Skyframe.
 * @param env the Skyframe environment
 * @param resolver The dependency resolver
 * @param ctgValue The label and the configuration of the node
 * @param aspectDefinition the aspect of the node (if null, the node is a configured target,otherwise it's an aspect)
 * @param aspectParameters additional parameters for aspect construction
 * @param configConditions the configuration conditions for evaluating the attributes of the node
 * @param ruleClassProvider rule class provider for determining the right configuration fragmentsto apply to deps
 * @param hostConfiguration the host configuration. There's a noticeable performance hit frominstantiating this on demand for every dependency that wants it, so it's best to compute the host configuration as early as possible and pass this reference to all consumers without involving Skyframe.
 * @return an attribute -&gt; direct dependency multimap
 */
@Nullable static ListMultimap<Attribute,ConfiguredTarget> computeDependencies(Environment env,SkyframeDependencyResolver resolver,TargetAndConfiguration ctgValue,AspectDefinition aspectDefinition,AspectParameters aspectParameters,Set<ConfigMatchingProvider> configConditions,RuleClassProvider ruleClassProvider,BuildConfiguration hostConfiguration,NestedSetBuilder<Package> transitivePackages) throws DependencyEvaluationException, AspectCreationException {
  ListMultimap<Attribute,Dependency> depValueNames;
  try {
    depValueNames=resolver.dependentNodeMap(ctgValue,hostConfiguration,aspectDefinition,aspectParameters,configConditions);
  }
 catch (  EvalException e) {
    env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));
    throw new DependencyEvaluationException(new ConfiguredValueCreationException(e.print()));
  }
  if (ctgValue.getConfiguration() != null && ctgValue.getConfiguration().useDynamicConfigurations()) {
    depValueNames=trimConfigurations(env,ctgValue,depValueNames,hostConfiguration,ruleClassProvider);
    if (depValueNames == null) {
      return null;
    }
  }
  Map<SkyKey,ConfiguredTarget> depValues=resolveConfiguredTargetDependencies(env,depValueNames.values(),ctgValue.getTarget(),transitivePackages);
  if (depValues == null) {
    return null;
  }
  ListMultimap<SkyKey,Aspect> depAspects=resolveAspectDependencies(env,depValues,depValueNames.values(),transitivePackages);
  if (depAspects == null) {
    return null;
  }
  return mergeAspects(depValueNames,depValues,depAspects);
}",0.995354023415722
111004,"private void parseStatement(List<Statement> list,boolean isTopLevel){
  if (token.kind == TokenKind.DEF && parsingMode == SKYLARK) {
    if (!isTopLevel) {
      reportError(lexer.createLocation(token.left,token.right),""String_Node_Str"");
    }
    parseFunctionDefStatement(list);
  }
 else   if (token.kind == TokenKind.IF && parsingMode == SKYLARK) {
    list.add(parseIfStatement());
  }
 else   if (token.kind == TokenKind.FOR && parsingMode == SKYLARK) {
    if (isTopLevel) {
      reportError(lexer.createLocation(token.left,token.right),""String_Node_Str"");
    }
    parseForStatement(list);
  }
 else   if (token.kind == TokenKind.IF || token.kind == TokenKind.ELSE || token.kind == TokenKind.FOR || token.kind == TokenKind.CLASS || token.kind == TokenKind.DEF || token.kind == TokenKind.TRY) {
    skipBlock();
  }
 else {
    parseSimpleStatement(list);
  }
}","private void parseStatement(List<Statement> list,boolean isTopLevel){
  if (token.kind == TokenKind.DEF && parsingMode == SKYLARK) {
    if (!isTopLevel) {
      reportError(lexer.createLocation(token.left,token.right),""String_Node_Str"");
    }
    parseFunctionDefStatement(list);
  }
 else   if (token.kind == TokenKind.IF && parsingMode == SKYLARK) {
    list.add(parseIfStatement());
  }
 else   if (token.kind == TokenKind.FOR && parsingMode == SKYLARK) {
    if (isTopLevel) {
      reportError(lexer.createLocation(token.left,token.right),""String_Node_Str"");
    }
    parseForStatement(list);
  }
 else   if (BLOCK_STARTING_SET.contains(token.kind)) {
    skipBlock();
  }
 else {
    parseSimpleStatement(list);
  }
}",0.862867877269881
111005,"private void skipBlock(){
  int start=token.left;
  Token blockToken=token;
  syncTo(EnumSet.of(TokenKind.COLON,TokenKind.EOF));
  if (parsingMode == BUILD) {
    reportError(lexer.createLocation(start,token.right),""String_Node_Str"" + blockToken + ""String_Node_Str""+ ""String_Node_Str"");
  }
  expect(TokenKind.COLON);
  skipSuite();
}","private void skipBlock(){
  int start=token.left;
  Token blockToken=token;
  syncTo(EnumSet.of(TokenKind.COLON,TokenKind.EOF));
  if (parsingMode != PYTHON) {
    reportError(lexer.createLocation(start,token.right),""String_Node_Str"" + blockToken + ""String_Node_Str""+ ""String_Node_Str"");
  }
  expect(TokenKind.COLON);
  skipSuite();
}",0.4573991031390134
111006,"private Object invokeJavaMethod(Object obj,Class<?> objClass,String methodName,List<Object> args,boolean hasKwArgs) throws EvalException {
  MethodDescriptor matchingMethod=null;
  List<MethodDescriptor> methods=getMethods(objClass,methodName,args.size(),getLocation());
  if (methods != null) {
    if (hasKwArgs) {
      throw new EvalException(func.getLocation(),String.format(""String_Node_Str"" + ""String_Node_Str"",func.getName(),EvalUtils.getDataTypeNameFromClass(objClass)));
    }
    for (    MethodDescriptor method : methods) {
      Class<?>[] params=method.getMethod().getParameterTypes();
      int i=0;
      boolean matching=true;
      for (      Class<?> param : params) {
        if (!param.isAssignableFrom(args.get(i).getClass())) {
          matching=false;
          break;
        }
        i++;
      }
      if (matching) {
        if (matchingMethod == null) {
          matchingMethod=method;
        }
 else {
          throw new EvalException(func.getLocation(),""String_Node_Str"" + formatMethod(methodName,args) + ""String_Node_Str""+ EvalUtils.getDataTypeNameFromClass(objClass));
        }
      }
    }
  }
  if (matchingMethod != null && !matchingMethod.getAnnotation().structField()) {
    return callMethod(matchingMethod,methodName,obj,args.toArray(),getLocation());
  }
 else {
    throw new EvalException(getLocation(),""String_Node_Str"" + formatMethod(methodName,args) + ""String_Node_Str""+ EvalUtils.getDataTypeNameFromClass(objClass));
  }
}","private Object invokeJavaMethod(Object obj,Class<?> objClass,String methodName,List<Object> args,boolean hasKwArgs) throws EvalException {
  MethodDescriptor matchingMethod=null;
  List<MethodDescriptor> methods=getMethods(objClass,methodName,args.size(),getLocation());
  if (methods != null) {
    if (hasKwArgs) {
      throw new EvalException(func.getLocation(),String.format(""String_Node_Str"" + ""String_Node_Str"",func.getName(),EvalUtils.getDataTypeNameFromClass(objClass)));
    }
    for (    MethodDescriptor method : methods) {
      Class<?>[] params=method.getMethod().getParameterTypes();
      int i=0;
      boolean matching=true;
      for (      Class<?> param : params) {
        if (!param.isAssignableFrom(args.get(i).getClass())) {
          matching=false;
          break;
        }
        i++;
      }
      if (matching) {
        if (matchingMethod == null) {
          matchingMethod=method;
        }
 else {
          throw new EvalException(func.getLocation(),String.format(""String_Node_Str"",EvalUtils.getDataTypeNameFromClass(objClass),formatMethod(args)));
        }
      }
    }
  }
  if (matchingMethod != null && !matchingMethod.getAnnotation().structField()) {
    return callMethod(matchingMethod,methodName,obj,args.toArray(),getLocation());
  }
 else {
    throw new EvalException(getLocation(),String.format(""String_Node_Str"",EvalUtils.getDataTypeNameFromClass(objClass),formatMethod(args)));
  }
}",0.9389574759945132
111007,"private String formatMethod(String methodName,List<Object> args){
  StringBuilder sb=new StringBuilder();
  sb.append(methodName).append(""String_Node_Str"");
  boolean first=true;
  for (  Object obj : args) {
    if (!first) {
      sb.append(""String_Node_Str"");
    }
    sb.append(EvalUtils.getDataTypeName(obj));
    first=false;
  }
  return sb.append(""String_Node_Str"").toString();
}","private String formatMethod(List<Object> args){
  StringBuilder sb=new StringBuilder();
  sb.append(functionName()).append(""String_Node_Str"");
  boolean first=true;
  for (  Object obj : args) {
    if (!first) {
      sb.append(""String_Node_Str"");
    }
    sb.append(EvalUtils.getDataTypeName(obj));
    first=false;
  }
  return sb.append(""String_Node_Str"").toString();
}",0.9501312335958004
111008,"private String functionName(){
  String name=func.getName();
  if (name.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (name.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + name + ""String_Node_Str"";
  }
}","private String functionName(){
  String name=func.getName();
  if (name.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (name.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + name;
  }
}",0.9381818181818182
111009,"/** 
 * Entry-point to parser that parses a build file with comments.  All errors encountered during parsing are reported via ""reporter"".  Enable Skylark extensions that are not part of the core BUILD language.
 */
public static ParseResult parseFileForSkylark(Lexer lexer,EventHandler eventHandler,CachingPackageLocator locator,ValidationEnvironment validationEnvironment){
  Parser parser=new Parser(lexer,eventHandler,locator,SKYLARK);
  List<Statement> statements=parser.parseFileInput();
  boolean hasSemanticalErrors=false;
  try {
    validationEnvironment.validateAst(statements);
  }
 catch (  EvalException e) {
    if (!e.isDueToIncompleteAST()) {
      eventHandler.handle(Event.error(e.getLocation(),e.getMessage()));
    }
    hasSemanticalErrors=true;
  }
  return new ParseResult(statements,parser.comments,parser.errorsCount > 0 || lexer.containsErrors() || hasSemanticalErrors);
}","/** 
 * Entry-point to parser that parses a build file with comments.  All errors encountered during parsing are reported via ""reporter"".  Enable Skylark extensions that are not part of the core BUILD language.
 */
public static ParseResult parseFileForSkylark(Lexer lexer,EventHandler eventHandler,CachingPackageLocator locator,@Nullable ValidationEnvironment validationEnvironment){
  Parser parser=new Parser(lexer,eventHandler,locator,SKYLARK);
  List<Statement> statements=parser.parseFileInput();
  boolean hasSemanticalErrors=false;
  try {
    if (validationEnvironment != null) {
      validationEnvironment.validateAst(statements);
    }
  }
 catch (  EvalException e) {
    if (!e.isDueToIncompleteAST()) {
      eventHandler.handle(Event.error(e.getLocation(),e.getMessage()));
    }
    hasSemanticalErrors=true;
  }
  return new ParseResult(statements,parser.comments,parser.errorsCount > 0 || lexer.containsErrors() || hasSemanticalErrors);
}",0.9681940700808626
111010,"private CommandLine linkCommandLine(ExtraLinkArgs extraLinkArgs,ObjcProvider objcProvider,Artifact linkedBinary,Optional<Artifact> dsymBundle,ImmutableList<Artifact> ccLibraries){
  ObjcConfiguration objcConfiguration=ObjcRuleClasses.objcConfiguration(ruleContext);
  CustomCommandLine.Builder commandLine=CustomCommandLine.builder();
  if (objcProvider.is(USES_CPP)) {
    commandLine.addPath(CLANG_PLUSPLUS).add(""String_Node_Str"");
  }
 else {
    commandLine.addPath(CLANG);
  }
  boolean isTestTarget=TargetUtils.isTestRule(ruleContext.getRule());
  if (objcConfiguration.shouldStripBinary() && !isTestTarget) {
    commandLine.add(""String_Node_Str"").add(""String_Node_Str"");
  }
  commandLine.add(IosSdkCommands.commonLinkAndCompileFlagsForClang(objcProvider,objcConfiguration)).add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(IosSdkCommands.DEFAULT_LINKER_FLAGS).addBeforeEach(""String_Node_Str"",frameworkNames(objcProvider)).addBeforeEach(""String_Node_Str"",SdkFramework.names(objcProvider.get(WEAK_SDK_FRAMEWORK))).addExecPath(""String_Node_Str"",linkedBinary).addExecPaths(objcProvider.get(LIBRARY)).addExecPaths(objcProvider.get(IMPORTED_LIBRARY)).addExecPaths(ccLibraries).add(dylibPaths(objcProvider)).addBeforeEach(""String_Node_Str"",Artifact.toExecPaths(objcProvider.get(FORCE_LOAD_LIBRARY))).add(extraLinkArgs).build();
  if (ruleContext.getConfiguration().isCodeCoverageEnabled()) {
    commandLine.add(LINKER_COVERAGE_FLAGS);
  }
  if (objcProvider.is(USES_SWIFT)) {
    commandLine.add(""String_Node_Str"").add(IosSdkCommands.swiftLibDir(objcConfiguration));
  }
  if (objcProvider.is(USES_SWIFT) || objcProvider.is(USES_FRAMEWORKS)) {
    commandLine.add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"");
  }
  if (dsymBundle.isPresent()) {
    commandLine.add(""String_Node_Str"").addPath(DSYMUTIL).add(linkedBinary.getExecPathString()).addExecPath(""String_Node_Str"",dsymBundle.get());
  }
  return new SingleArgCommandLine(commandLine.build());
}","private CommandLine linkCommandLine(ExtraLinkArgs extraLinkArgs,ObjcProvider objcProvider,Artifact linkedBinary,Optional<Artifact> dsymBundle,ImmutableList<Artifact> ccLibraries){
  ObjcConfiguration objcConfiguration=ObjcRuleClasses.objcConfiguration(ruleContext);
  CustomCommandLine.Builder commandLine=CustomCommandLine.builder();
  if (objcProvider.is(USES_CPP)) {
    commandLine.addPath(CLANG_PLUSPLUS).add(""String_Node_Str"");
  }
 else {
    commandLine.addPath(CLANG);
  }
  boolean isTestTarget=TargetUtils.isTestRule(ruleContext.getRule());
  if (objcConfiguration.shouldStripBinary() && !isTestTarget) {
    commandLine.add(""String_Node_Str"").add(""String_Node_Str"");
  }
  commandLine.add(IosSdkCommands.commonLinkAndCompileFlagsForClang(objcProvider,objcConfiguration)).add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(IosSdkCommands.DEFAULT_LINKER_FLAGS).addBeforeEach(""String_Node_Str"",frameworkNames(objcProvider)).addBeforeEach(""String_Node_Str"",SdkFramework.names(objcProvider.get(WEAK_SDK_FRAMEWORK))).addExecPath(""String_Node_Str"",linkedBinary).addExecPaths(objcProvider.get(LIBRARY)).addExecPaths(objcProvider.get(IMPORTED_LIBRARY)).addExecPaths(ccLibraries).add(dylibPaths(objcProvider)).addBeforeEach(""String_Node_Str"",Artifact.toExecPaths(objcProvider.get(FORCE_LOAD_LIBRARY))).add(extraLinkArgs).build();
  if (ruleContext.getConfiguration().isCodeCoverageEnabled()) {
    commandLine.add(LINKER_COVERAGE_FLAGS);
  }
  if (objcProvider.is(USES_SWIFT)) {
    commandLine.add(""String_Node_Str"").add(IosSdkCommands.swiftLibDir(objcConfiguration));
  }
  if (objcProvider.is(USES_SWIFT) || objcProvider.is(USES_FRAMEWORKS)) {
    commandLine.add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"");
  }
  if (dsymBundle.isPresent()) {
    PathFragment dsymPath=FileSystemUtils.removeExtension(dsymBundle.get().getExecPath());
    commandLine.add(""String_Node_Str"").addPath(DSYMUTIL).add(linkedBinary.getExecPathString()).add(""String_Node_Str"" + dsymPath).add(""String_Node_Str"" + dsymBundle.get().getShellEscapedExecPathString()).add(""String_Node_Str"" + dsymPath).add(""String_Node_Str"");
  }
  return new SingleArgCommandLine(commandLine.build());
}",0.9378166743436204
111011,"/** 
 * The debug symbol bundle file which contains debug symbols generated by dsymutil.
 */
public Artifact dsymBundle(){
  return appendExtension(TMP_DSYM_BUNDLE_SUFFIX);
}","/** 
 * The zipped debug symbol bundle file which contains debug symbols generated by dsymutil.
 */
public Artifact dsymBundle(){
  return appendExtension(TMP_DSYM_BUNDLE_SUFFIX);
}",0.9802816901408452
111012,"/** 
 * Generates a project file. 
 */
public static PBXProject xcodeproj(Path workspaceRoot,Control control,Iterable<PbxReferencesProcessor> postProcessors){
  checkArgument(control.hasPbxproj(),""String_Node_Str"");
  FileSystem fileSystem=workspaceRoot.getFileSystem();
  XcodeprojPath<Path> outputPath=XcodeprojPath.converter().fromPath(RelativePaths.fromString(fileSystem,control.getPbxproj()));
  NSDictionary projBuildConfigMap=new NSDictionary();
  projBuildConfigMap.put(""String_Node_Str"",cpuArchitectures(control.getCpuArchitectureList()));
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  for (  XcodeprojBuildSetting projectSetting : control.getBuildSettingList()) {
    projBuildConfigMap.put(projectSetting.getName(),projectSetting.getValue());
  }
  PBXProject project=new PBXProject(outputPath.getProjectName());
  project.getMainGroup().setPath(workspaceRoot.toString());
  if (workspaceRoot.isAbsolute()) {
    project.getMainGroup().setSourceTree(SourceTree.ABSOLUTE);
  }
  try {
    project.getBuildConfigurationList().getBuildConfigurationsByName().get(DEFAULT_OPTIONS_NAME).setBuildSettings(projBuildConfigMap);
  }
 catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
  Map<String,TargetInfo> targetInfoByLabel=new HashMap<>();
  List<String> usedTargetNames=new ArrayList<>();
  PBXFileReferences fileReferences=new PBXFileReferences();
  LibraryObjects libraryObjects=new LibraryObjects(fileReferences);
  PBXBuildFiles pbxBuildFiles=new PBXBuildFiles(fileReferences);
  Resources resources=Resources.fromTargetControls(fileSystem,pbxBuildFiles,control.getTargetList());
  Xcdatamodels xcdatamodels=Xcdatamodels.fromTargetControls(fileSystem,pbxBuildFiles,control.getTargetList());
  Set<PBXReference> projectNavigatorFiles=new LinkedHashSet<>();
  for (  TargetControl targetControl : control.getTargetList()) {
    checkArgument(targetControl.hasName(),""String_Node_Str"",targetControl);
    checkArgument(targetControl.hasLabel(),""String_Node_Str"",targetControl);
    ProductType productType=productType(targetControl);
    Preconditions.checkArgument((productType != ProductType.APPLICATION) || hasAtLeastOneCompilableSource(targetControl),APP_NEEDS_SOURCE_ERROR);
    PBXSourcesBuildPhase sourcesBuildPhase=new PBXSourcesBuildPhase();
    for (    SourceFile source : SourceFile.allSourceFiles(fileSystem,targetControl)) {
      PBXFileReference fileRef=fileReferences.get(FileReference.of(source.path().toString(),SourceTree.GROUP));
      projectNavigatorFiles.add(fileRef);
      if (Equaling.of(source.buildType(),BuildType.NO_BUILD)) {
        continue;
      }
      PBXBuildFile buildFile=new PBXBuildFile(fileRef);
      if (Equaling.of(source.buildType(),BuildType.NON_ARC_BUILD)) {
        buildFile.setSettings(Optional.of(nonArcCompileSettings()));
      }
      sourcesBuildPhase.getFiles().add(buildFile);
    }
    sourcesBuildPhase.getFiles().addAll(xcdatamodels.buildFiles().get(targetControl));
    PBXFileReference productReference=fileReferences.get(productReference(targetControl));
    projectNavigatorFiles.add(productReference);
    NSDictionary targetBuildConfigMap=new NSDictionary();
    targetBuildConfigMap.put(""String_Node_Str"",headerSearchPaths(plus(targetControl.getUserHeaderSearchPathList(),""String_Node_Str"")));
    targetBuildConfigMap.put(""String_Node_Str"",headerSearchPaths(plus(targetControl.getHeaderSearchPathList(),""String_Node_Str"")));
    targetBuildConfigMap.put(""String_Node_Str"",frameworkSearchPaths(targetControl.getFrameworkList()));
    targetBuildConfigMap.put(""String_Node_Str"",workspaceRoot.toString());
    if (targetControl.hasPchPath()) {
      targetBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"" + targetControl.getPchPath());
    }
    targetBuildConfigMap.put(""String_Node_Str"",productName(targetControl));
    if (targetControl.hasInfoplist()) {
      targetBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"" + targetControl.getInfoplist());
    }
    if (targetControl.getCoptCount() > 0) {
      List<String> escapedCopts=Lists.transform(targetControl.getCoptList(),QUOTE_ESCAPER.asFunction());
      targetBuildConfigMap.put(""String_Node_Str"",NSObject.wrap(escapedCopts));
    }
    targetBuildConfigMap.put(""String_Node_Str"",NSObject.wrap(otherLdflags(targetControl)));
    for (    XcodeprojBuildSetting setting : targetControl.getBuildSettingList()) {
      String name=setting.getName();
      String value=setting.getValue();
      if (name.equals(""String_Node_Str"") && !value.startsWith(""String_Node_Str"")) {
        value=""String_Node_Str"" + value;
      }
      targetBuildConfigMap.put(name,value);
    }
    String targetName=targetControl.getName();
    if (usedTargetNames.contains(targetName)) {
      targetName=targetControl.getLabel();
    }
    checkState(!usedTargetNames.contains(targetName),""String_Node_Str"",targetControl.getLabel(),targetControl.getName(),usedTargetNames);
    usedTargetNames.add(targetName);
    PBXNativeTarget target=new PBXNativeTarget(targetName,productType);
    try {
      target.getBuildConfigurationList().getBuildConfigurationsByName().get(DEFAULT_OPTIONS_NAME).setBuildSettings(targetBuildConfigMap);
    }
 catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
    target.setProductReference(productReference);
    PBXFrameworksBuildPhase frameworksPhase=buildLibraryInfo(libraryObjects,targetControl);
    PBXResourcesBuildPhase resourcesPhase=resources.resourcesBuildPhase(targetControl);
    for (    String importedArchive : targetControl.getImportedLibraryList()) {
      PBXFileReference fileReference=fileReferences.get(FileReference.of(importedArchive,SourceTree.GROUP).withExplicitFileType(FILE_TYPE_ARCHIVE_LIBRARY));
      projectNavigatorFiles.add(fileReference);
    }
    project.getTargets().add(target);
    target.getBuildPhases().add(frameworksPhase);
    target.getBuildPhases().add(sourcesBuildPhase);
    target.getBuildPhases().add(resourcesPhase);
    checkState(!Mapping.of(targetInfoByLabel,targetControl.getLabel()).isPresent(),""String_Node_Str"",targetControl.getLabel(),targetInfoByLabel);
    targetInfoByLabel.put(targetControl.getLabel(),new TargetInfo(targetControl,target,frameworksPhase,resourcesPhase,new PBXBuildFile(productReference),new LocalPBXTargetDependency(new LocalPBXContainerItemProxy(project,target,ProxyType.TARGET_REFERENCE)),targetBuildConfigMap));
  }
  for (  HasProjectNavigatorFiles references : ImmutableList.of(pbxBuildFiles,libraryObjects)) {
    Iterables.addAll(projectNavigatorFiles,references.mainGroupReferences());
  }
  Iterable<PBXReference> processedProjectFiles=projectNavigatorFiles;
  for (  PbxReferencesProcessor postProcessor : postProcessors) {
    processedProjectFiles=postProcessor.process(processedProjectFiles);
  }
  Iterables.addAll(project.getMainGroup().getChildren(),processedProjectFiles);
  for (  TargetInfo targetInfo : targetInfoByLabel.values()) {
    for (    DependencyControl dependency : targetInfo.control.getDependencyList()) {
      targetInfo.addDependencyInfo(dependency,targetInfoByLabel);
    }
  }
  return project;
}","/** 
 * Generates a project file. 
 */
public static PBXProject xcodeproj(Path workspaceRoot,Control control,Iterable<PbxReferencesProcessor> postProcessors){
  checkArgument(control.hasPbxproj(),""String_Node_Str"");
  FileSystem fileSystem=workspaceRoot.getFileSystem();
  XcodeprojPath<Path> outputPath=XcodeprojPath.converter().fromPath(RelativePaths.fromString(fileSystem,control.getPbxproj()));
  NSDictionary projBuildConfigMap=new NSDictionary();
  projBuildConfigMap.put(""String_Node_Str"",cpuArchitectures(control.getCpuArchitectureList()));
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  for (  XcodeprojBuildSetting projectSetting : control.getBuildSettingList()) {
    projBuildConfigMap.put(projectSetting.getName(),projectSetting.getValue());
  }
  PBXProject project=new PBXProject(outputPath.getProjectName());
  project.getMainGroup().setPath(workspaceRoot.toString());
  if (workspaceRoot.isAbsolute()) {
    project.getMainGroup().setSourceTree(SourceTree.ABSOLUTE);
  }
  try {
    project.getBuildConfigurationList().getBuildConfigurationsByName().get(DEFAULT_OPTIONS_NAME).setBuildSettings(projBuildConfigMap);
  }
 catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
  Map<String,TargetInfo> targetInfoByLabel=new HashMap<>();
  List<String> usedTargetNames=new ArrayList<>();
  PBXFileReferences fileReferences=new PBXFileReferences();
  LibraryObjects libraryObjects=new LibraryObjects(fileReferences);
  PBXBuildFiles pbxBuildFiles=new PBXBuildFiles(fileReferences);
  Resources resources=Resources.fromTargetControls(fileSystem,pbxBuildFiles,control.getTargetList());
  Xcdatamodels xcdatamodels=Xcdatamodels.fromTargetControls(fileSystem,pbxBuildFiles,control.getTargetList());
  Set<PBXReference> projectNavigatorFiles=new LinkedHashSet<>();
  for (  TargetControl targetControl : control.getTargetList()) {
    checkArgument(targetControl.hasName(),""String_Node_Str"",targetControl);
    checkArgument(targetControl.hasLabel(),""String_Node_Str"",targetControl);
    ProductType productType=productType(targetControl);
    Preconditions.checkArgument((productType != ProductType.APPLICATION) || hasAtLeastOneCompilableSource(targetControl),APP_NEEDS_SOURCE_ERROR);
    PBXSourcesBuildPhase sourcesBuildPhase=new PBXSourcesBuildPhase();
    for (    SourceFile source : SourceFile.allSourceFiles(fileSystem,targetControl)) {
      PBXFileReference fileRef=fileReferences.get(FileReference.of(source.path().toString(),SourceTree.GROUP));
      projectNavigatorFiles.add(fileRef);
      if (Equaling.of(source.buildType(),BuildType.NO_BUILD)) {
        continue;
      }
      PBXBuildFile buildFile=new PBXBuildFile(fileRef);
      if (Equaling.of(source.buildType(),BuildType.NON_ARC_BUILD)) {
        buildFile.setSettings(Optional.of(nonArcCompileSettings()));
      }
      sourcesBuildPhase.getFiles().add(buildFile);
    }
    sourcesBuildPhase.getFiles().addAll(xcdatamodels.buildFiles().get(targetControl));
    PBXFileReference productReference=fileReferences.get(productReference(targetControl));
    projectNavigatorFiles.add(productReference);
    NSDictionary targetBuildConfigMap=new NSDictionary();
    targetBuildConfigMap.put(""String_Node_Str"",headerSearchPaths(plus(targetControl.getUserHeaderSearchPathList(),""String_Node_Str"")));
    targetBuildConfigMap.put(""String_Node_Str"",headerSearchPaths(plus(targetControl.getHeaderSearchPathList(),""String_Node_Str"")));
    targetBuildConfigMap.put(""String_Node_Str"",frameworkSearchPaths(targetControl.getFrameworkList()));
    targetBuildConfigMap.put(""String_Node_Str"",workspaceRoot.toString());
    if (targetControl.hasPchPath()) {
      targetBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"" + targetControl.getPchPath());
    }
    targetBuildConfigMap.put(""String_Node_Str"",productName(targetControl));
    if (targetControl.hasInfoplist()) {
      targetBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"" + targetControl.getInfoplist());
    }
    if (targetControl.getCoptCount() > 0) {
      List<String> escapedCopts=Lists.transform(targetControl.getCoptList(),QUOTE_ESCAPER.asFunction());
      targetBuildConfigMap.put(""String_Node_Str"",NSObject.wrap(escapedCopts));
    }
    targetBuildConfigMap.put(""String_Node_Str"",NSObject.wrap(otherLdflags(targetControl)));
    for (    XcodeprojBuildSetting setting : targetControl.getBuildSettingList()) {
      String name=setting.getName();
      String value=setting.getValue();
      if (name.equals(""String_Node_Str"") && !value.startsWith(""String_Node_Str"")) {
        value=""String_Node_Str"" + value;
      }
      targetBuildConfigMap.put(name,value);
    }
    String targetName=targetControl.getName();
    String targetNameInLowerCase=targetName.toLowerCase();
    if (usedTargetNames.contains(targetNameInLowerCase)) {
      targetName=targetControl.getLabel();
      targetNameInLowerCase=targetName.toLowerCase();
    }
    checkState(!usedTargetNames.contains(targetNameInLowerCase),""String_Node_Str"",targetControl.getLabel(),targetControl.getName(),usedTargetNames);
    usedTargetNames.add(targetNameInLowerCase);
    PBXNativeTarget target=new PBXNativeTarget(targetName,productType);
    try {
      target.getBuildConfigurationList().getBuildConfigurationsByName().get(DEFAULT_OPTIONS_NAME).setBuildSettings(targetBuildConfigMap);
    }
 catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
    target.setProductReference(productReference);
    PBXFrameworksBuildPhase frameworksPhase=buildLibraryInfo(libraryObjects,targetControl);
    PBXResourcesBuildPhase resourcesPhase=resources.resourcesBuildPhase(targetControl);
    for (    String importedArchive : targetControl.getImportedLibraryList()) {
      PBXFileReference fileReference=fileReferences.get(FileReference.of(importedArchive,SourceTree.GROUP).withExplicitFileType(FILE_TYPE_ARCHIVE_LIBRARY));
      projectNavigatorFiles.add(fileReference);
    }
    project.getTargets().add(target);
    target.getBuildPhases().add(frameworksPhase);
    target.getBuildPhases().add(sourcesBuildPhase);
    target.getBuildPhases().add(resourcesPhase);
    checkState(!Mapping.of(targetInfoByLabel,targetControl.getLabel()).isPresent(),""String_Node_Str"",targetControl.getLabel(),targetInfoByLabel);
    targetInfoByLabel.put(targetControl.getLabel(),new TargetInfo(targetControl,target,frameworksPhase,resourcesPhase,new PBXBuildFile(productReference),new LocalPBXTargetDependency(new LocalPBXContainerItemProxy(project,target,ProxyType.TARGET_REFERENCE)),targetBuildConfigMap));
  }
  for (  HasProjectNavigatorFiles references : ImmutableList.of(pbxBuildFiles,libraryObjects)) {
    Iterables.addAll(projectNavigatorFiles,references.mainGroupReferences());
  }
  Iterable<PBXReference> processedProjectFiles=projectNavigatorFiles;
  for (  PbxReferencesProcessor postProcessor : postProcessors) {
    processedProjectFiles=postProcessor.process(processedProjectFiles);
  }
  Iterables.addAll(project.getMainGroup().getChildren(),processedProjectFiles);
  for (  TargetInfo targetInfo : targetInfoByLabel.values()) {
    for (    DependencyControl dependency : targetInfo.control.getDependencyList()) {
      targetInfo.addDependencyInfo(dependency,targetInfoByLabel);
    }
  }
  return project;
}",0.99021316530366
111013,"private Map<String,BaseFunction> getNamespaceFunctions(Class<?> nameSpace){
  if (disabledNameSpaces.contains(nameSpace) || (parent != null && parent.disabledNameSpaces.contains(nameSpace))) {
    return null;
  }
  Environment topLevel=this;
  while (topLevel.parent != null) {
    topLevel=topLevel.parent;
  }
  return topLevel.functions.get(nameSpace);
}","private Map<String,BaseFunction> getNamespaceFunctions(Class<?> nameSpace){
  nameSpace=getCanonicalRepresentation(nameSpace);
  if (disabledNameSpaces.contains(nameSpace) || (parent != null && parent.disabledNameSpaces.contains(nameSpace))) {
    return null;
  }
  Environment topLevel=this;
  while (topLevel.parent != null) {
    topLevel=topLevel.parent;
  }
  return topLevel.functions.get(nameSpace);
}",0.9335071707953064
111014,"/** 
 * Registers a function with namespace to this global environment.
 */
public void registerFunction(Class<?> nameSpace,String name,BaseFunction function){
  Preconditions.checkArgument(parent == null);
  if (!functions.containsKey(nameSpace)) {
    functions.put(nameSpace,new HashMap<String,BaseFunction>());
  }
  functions.get(nameSpace).put(name,function);
}","/** 
 * Registers a function with namespace to this global environment.
 */
public void registerFunction(Class<?> nameSpace,String name,BaseFunction function){
  nameSpace=getCanonicalRepresentation(nameSpace);
  Preconditions.checkArgument(parent == null);
  if (!functions.containsKey(nameSpace)) {
    functions.put(nameSpace,new HashMap<String,BaseFunction>());
  }
  functions.get(nameSpace).put(name,function);
}",0.935031847133758
111015,"/** 
 * Adds a handler to this reporter.
 */
public synchronized void addHandler(EventHandler handler){
  handlers.add(handler);
}","/** 
 * Adds a handler to this reporter.
 */
public synchronized void addHandler(EventHandler handler){
  Preconditions.checkNotNull(handler);
  handlers.add(handler);
}",0.8695652173913043
111016,"@Override public ExitCode exec(final BlazeRuntime runtime,final OptionsProvider optionsProvider){
  Options infoOptions=optionsProvider.getOptions(Options.class);
  OutErr outErr=runtime.getReporter().getOutErr();
  Supplier<BuildConfiguration> configurationSupplier=new Supplier<BuildConfiguration>(){
    private BuildConfiguration configuration;
    @Override public BuildConfiguration get(){
      if (configuration != null) {
        return configuration;
      }
      try {
        runtime.setupPackageCache(optionsProvider.getOptions(PackageCacheOptions.class),runtime.getDefaultsPackageContent(optionsProvider));
        configuration=runtime.getConfigurations(optionsProvider).getTargetConfigurations().get(0);
        return configuration;
      }
 catch (      InvalidConfigurationException e) {
        runtime.getReporter().handle(Event.error(e.getMessage()));
        throw new ExitCausingRuntimeException(ExitCode.COMMAND_LINE_ERROR);
      }
catch (      AbruptExitException e) {
        throw new ExitCausingRuntimeException(""String_Node_Str"" + e.getMessage(),e.getExitCode());
      }
catch (      InterruptedException e) {
        runtime.getReporter().handle(Event.error(""String_Node_Str""));
        throw new ExitCausingRuntimeException(ExitCode.INTERRUPTED);
      }
    }
  }
;
  Map<String,BlazeModule.InfoItem> items=getInfoItemMap(runtime,optionsProvider);
  try {
    if (infoOptions.showMakeEnvironment) {
      Map<String,String> makeEnv=configurationSupplier.get().getMakeEnvironment();
      for (      Map.Entry<String,String> entry : makeEnv.entrySet()) {
        BlazeModule.InfoItem item=new MakeInfoItem(entry.getKey(),entry.getValue());
        items.put(item.getName(),item);
      }
    }
    List<String> residue=optionsProvider.getResidue();
    if (residue.size() > 1) {
      runtime.getReporter().handle(Event.error(""String_Node_Str""));
      return ExitCode.COMMAND_LINE_ERROR;
    }
    String key=residue.size() == 1 ? residue.get(0) : null;
    if (key != null) {
      byte[] value;
      if (items.containsKey(key)) {
        value=items.get(key).get(configurationSupplier);
      }
 else {
        runtime.getReporter().handle(Event.error(""String_Node_Str"" + key + ""String_Node_Str""));
        return ExitCode.COMMAND_LINE_ERROR;
      }
      try {
        outErr.getOutputStream().write(value);
        outErr.getOutputStream().flush();
      }
 catch (      IOException e) {
        runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
        return ExitCode.ANALYSIS_FAILURE;
      }
    }
 else {
      configurationSupplier.get();
      for (      BlazeModule.InfoItem infoItem : items.values()) {
        if (infoItem.isHidden()) {
          continue;
        }
        outErr.getOutputStream().write((infoItem.getName() + ""String_Node_Str"").getBytes(StandardCharsets.UTF_8));
        outErr.getOutputStream().write(infoItem.get(configurationSupplier));
      }
    }
  }
 catch (  AbruptExitException e) {
    return e.getExitCode();
  }
catch (  ExitCausingRuntimeException e) {
    return e.getExitCode();
  }
catch (  IOException e) {
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
  return ExitCode.SUCCESS;
}","@Override public ExitCode exec(final BlazeRuntime runtime,final OptionsProvider optionsProvider){
  runtime.getReporter().switchToAnsiAllowingHandler();
  Options infoOptions=optionsProvider.getOptions(Options.class);
  OutErr outErr=runtime.getReporter().getOutErr();
  Supplier<BuildConfiguration> configurationSupplier=new Supplier<BuildConfiguration>(){
    private BuildConfiguration configuration;
    @Override public BuildConfiguration get(){
      if (configuration != null) {
        return configuration;
      }
      try {
        runtime.setupPackageCache(optionsProvider.getOptions(PackageCacheOptions.class),runtime.getDefaultsPackageContent(optionsProvider));
        configuration=runtime.getConfigurations(optionsProvider).getTargetConfigurations().get(0);
        return configuration;
      }
 catch (      InvalidConfigurationException e) {
        runtime.getReporter().handle(Event.error(e.getMessage()));
        throw new ExitCausingRuntimeException(ExitCode.COMMAND_LINE_ERROR);
      }
catch (      AbruptExitException e) {
        throw new ExitCausingRuntimeException(""String_Node_Str"" + e.getMessage(),e.getExitCode());
      }
catch (      InterruptedException e) {
        runtime.getReporter().handle(Event.error(""String_Node_Str""));
        throw new ExitCausingRuntimeException(ExitCode.INTERRUPTED);
      }
    }
  }
;
  Map<String,BlazeModule.InfoItem> items=getInfoItemMap(runtime,optionsProvider);
  try {
    if (infoOptions.showMakeEnvironment) {
      Map<String,String> makeEnv=configurationSupplier.get().getMakeEnvironment();
      for (      Map.Entry<String,String> entry : makeEnv.entrySet()) {
        BlazeModule.InfoItem item=new MakeInfoItem(entry.getKey(),entry.getValue());
        items.put(item.getName(),item);
      }
    }
    List<String> residue=optionsProvider.getResidue();
    if (residue.size() > 1) {
      runtime.getReporter().handle(Event.error(""String_Node_Str""));
      return ExitCode.COMMAND_LINE_ERROR;
    }
    String key=residue.size() == 1 ? residue.get(0) : null;
    if (key != null) {
      byte[] value;
      if (items.containsKey(key)) {
        value=items.get(key).get(configurationSupplier);
      }
 else {
        runtime.getReporter().handle(Event.error(""String_Node_Str"" + key + ""String_Node_Str""));
        return ExitCode.COMMAND_LINE_ERROR;
      }
      try {
        outErr.getOutputStream().write(value);
        outErr.getOutputStream().flush();
      }
 catch (      IOException e) {
        runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
        return ExitCode.ANALYSIS_FAILURE;
      }
    }
 else {
      configurationSupplier.get();
      for (      BlazeModule.InfoItem infoItem : items.values()) {
        if (infoItem.isHidden()) {
          continue;
        }
        outErr.getOutputStream().write((infoItem.getName() + ""String_Node_Str"").getBytes(StandardCharsets.UTF_8));
        outErr.getOutputStream().write(infoItem.get(configurationSupplier));
      }
    }
  }
 catch (  AbruptExitException e) {
    return e.getExitCode();
  }
catch (  ExitCausingRuntimeException e) {
    return e.getExitCode();
  }
catch (  IOException e) {
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
  return ExitCode.SUCCESS;
}",0.991490020114498
111017,"/** 
 * Exit codes: 0   on successful evaluation. 1   if query evaluation did not complete. 2   if query parsing failed. 3   if errors were reported but evaluation produced a partial result (only when --keep_going is in effect.)
 */
@Override public ExitCode exec(BlazeRuntime runtime,OptionsProvider options){
  QueryOptions queryOptions=options.getOptions(QueryOptions.class);
  try {
    runtime.setupPackageCache(options.getOptions(PackageCacheOptions.class),runtime.getDefaultsPackageContent());
  }
 catch (  InterruptedException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return ExitCode.INTERRUPTED;
  }
catch (  AbruptExitException e) {
    runtime.getReporter().handle(Event.error(null,""String_Node_Str"" + e.getMessage()));
    return e.getExitCode();
  }
  if (options.getResidue().isEmpty()) {
    runtime.getReporter().handle(Event.error(String.format(""String_Node_Str"",Constants.PRODUCT_NAME)));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  Iterable<OutputFormatter> formatters=runtime.getQueryOutputFormatters();
  OutputFormatter formatter=OutputFormatter.getFormatter(formatters,queryOptions.outputFormat);
  if (formatter == null) {
    runtime.getReporter().handle(Event.error(String.format(""String_Node_Str"",queryOptions.outputFormat,OutputFormatter.formatterNames(formatters))));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  String query=Joiner.on(' ').join(options.getResidue());
  Set<Setting> settings=queryOptions.toSettings();
  AbstractBlazeQueryEnvironment<Target> env=newQueryEnvironment(runtime,queryOptions.keepGoing,QueryOutputUtils.orderResults(queryOptions,formatter),queryOptions.universeScope,queryOptions.loadingPhaseThreads,settings);
  QueryExpression expr;
  try {
    expr=QueryExpression.parse(query,env);
  }
 catch (  QueryException e) {
    runtime.getReporter().handle(Event.error(null,""String_Node_Str"" + query + ""String_Node_Str""+ e.getMessage()));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  QueryEvalResult<Target> result;
  try {
    result=env.evaluateQuery(expr);
  }
 catch (  QueryException|InterruptedException e) {
    runtime.getReporter().handle(Event.error(e.getMessage() == null ? e.toString() : e.getMessage()));
    return ExitCode.ANALYSIS_FAILURE;
  }
  PrintStream output=new PrintStream(runtime.getReporter().getOutErr().getOutputStream());
  try {
    QueryOutputUtils.output(queryOptions,result,formatter,output,queryOptions.aspectDeps.createResolver(runtime.getPackageManager(),runtime.getReporter()));
  }
 catch (  ClosedByInterruptException|InterruptedException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return ExitCode.INTERRUPTED;
  }
catch (  IOException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
 finally {
    output.flush();
  }
  if (result.getResultSet().isEmpty()) {
    runtime.getReporter().handle(Event.info(""String_Node_Str""));
  }
  return result.getSuccess() ? ExitCode.SUCCESS : ExitCode.PARTIAL_ANALYSIS_FAILURE;
}","/** 
 * Exit codes: 0   on successful evaluation. 1   if query evaluation did not complete. 2   if query parsing failed. 3   if errors were reported but evaluation produced a partial result (only when --keep_going is in effect.)
 */
@Override public ExitCode exec(BlazeRuntime runtime,OptionsProvider options){
  QueryOptions queryOptions=options.getOptions(QueryOptions.class);
  try {
    runtime.setupPackageCache(options.getOptions(PackageCacheOptions.class),runtime.getDefaultsPackageContent());
  }
 catch (  InterruptedException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return ExitCode.INTERRUPTED;
  }
catch (  AbruptExitException e) {
    runtime.getReporter().handle(Event.error(null,""String_Node_Str"" + e.getMessage()));
    return e.getExitCode();
  }
  if (options.getResidue().isEmpty()) {
    runtime.getReporter().handle(Event.error(String.format(""String_Node_Str"",Constants.PRODUCT_NAME)));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  Iterable<OutputFormatter> formatters=runtime.getQueryOutputFormatters();
  OutputFormatter formatter=OutputFormatter.getFormatter(formatters,queryOptions.outputFormat);
  if (formatter == null) {
    runtime.getReporter().handle(Event.error(String.format(""String_Node_Str"",queryOptions.outputFormat,OutputFormatter.formatterNames(formatters))));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  String query=Joiner.on(' ').join(options.getResidue());
  Set<Setting> settings=queryOptions.toSettings();
  AbstractBlazeQueryEnvironment<Target> env=newQueryEnvironment(runtime,queryOptions.keepGoing,QueryOutputUtils.orderResults(queryOptions,formatter),queryOptions.universeScope,queryOptions.loadingPhaseThreads,settings);
  QueryExpression expr;
  try {
    expr=QueryExpression.parse(query,env);
  }
 catch (  QueryException e) {
    runtime.getReporter().handle(Event.error(null,""String_Node_Str"" + query + ""String_Node_Str""+ e.getMessage()));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  QueryEvalResult<Target> result;
  try {
    result=env.evaluateQuery(expr);
  }
 catch (  QueryException|InterruptedException e) {
    runtime.getReporter().handle(Event.error(e.getMessage() == null ? e.toString() : e.getMessage()));
    return ExitCode.ANALYSIS_FAILURE;
  }
  runtime.getReporter().switchToAnsiAllowingHandler();
  PrintStream output=new PrintStream(runtime.getReporter().getOutErr().getOutputStream());
  try {
    QueryOutputUtils.output(queryOptions,result,formatter,output,queryOptions.aspectDeps.createResolver(runtime.getPackageManager(),runtime.getReporter()));
  }
 catch (  ClosedByInterruptException|InterruptedException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return ExitCode.INTERRUPTED;
  }
catch (  IOException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
 finally {
    output.flush();
  }
  if (result.getResultSet().isEmpty()) {
    runtime.getReporter().handle(Event.info(""String_Node_Str""));
  }
  return result.getSuccess() ? ExitCode.SUCCESS : ExitCode.PARTIAL_ANALYSIS_FAILURE;
}",0.9911218724778048
111018,"@Override public ExitCode exec(BlazeRuntime runtime,OptionsProvider options){
  RunOptions runOptions=options.getOptions(RunOptions.class);
  List<String> targetAndArgs=options.getResidue();
  if (targetAndArgs.isEmpty()) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  String targetString=targetAndArgs.get(0);
  List<String> runTargetArgs=targetAndArgs.subList(1,targetAndArgs.size());
  RunUnder runUnder=options.getOptions(BuildConfiguration.Options.class).runUnder;
  OutErr outErr=runtime.getReporter().getOutErr();
  List<String> targets=(runUnder != null) && (runUnder.getLabel() != null) ? ImmutableList.of(targetString,runUnder.getLabel().toString()) : ImmutableList.of(targetString);
  BuildRequest request=BuildRequest.create(this.getClass().getAnnotation(Command.class).name(),options,runtime.getStartupOptionsProvider(),targets,outErr,runtime.getCommandId(),runtime.getCommandStartTime());
  currentRunUnder=runUnder;
  BuildResult result;
  try {
    result=processRequest(runtime,request);
  }
  finally {
    currentRunUnder=null;
  }
  if (!result.getSuccess()) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return result.getExitCondition();
  }
  Collection<ConfiguredTarget> targetsBuilt=result.getSuccessfulTargets();
  ConfiguredTarget targetToRun=null;
  ConfiguredTarget runUnderTarget=null;
  if (targetsBuilt != null) {
    int maxTargets=runUnder != null && runUnder.getLabel() != null ? 2 : 1;
    if (targetsBuilt.size() > maxTargets) {
      runtime.getReporter().handle(Event.error(SINGLE_TARGET_MESSAGE));
      return ExitCode.COMMAND_LINE_ERROR;
    }
    for (    ConfiguredTarget target : targetsBuilt) {
      ExitCode targetValidation=fullyValidateTarget(runtime,target);
      if (targetValidation != ExitCode.SUCCESS) {
        return targetValidation;
      }
      if (runUnder != null && target.getLabel().equals(runUnder.getLabel())) {
        if (runUnderTarget != null) {
          runtime.getReporter().handle(Event.error(null,""String_Node_Str""));
          return ExitCode.COMMAND_LINE_ERROR;
        }
        runUnderTarget=target;
      }
 else       if (targetToRun == null) {
        targetToRun=target;
      }
 else {
        runtime.getReporter().handle(Event.error(SINGLE_TARGET_MESSAGE));
        return ExitCode.COMMAND_LINE_ERROR;
      }
    }
  }
  if ((targetToRun == null) && (runUnderTarget != null)) {
    targetToRun=runUnderTarget;
  }
  if (targetToRun == null) {
    runtime.getReporter().handle(Event.error(NO_TARGET_MESSAGE));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  Path executablePath=Preconditions.checkNotNull(targetToRun.getProvider(FilesToRunProvider.class).getExecutable().getPath());
  BuildConfiguration configuration=targetToRun.getConfiguration();
  if (configuration == null) {
    configuration=runtime.getBuildTool().getView().getConfigurationCollection().getTargetConfigurations().get(0);
  }
  Path workingDir;
  try {
    workingDir=ensureRunfilesBuilt(runtime,targetToRun);
  }
 catch (  CommandException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
  List<String> args=runTargetArgs;
  FilesToRunProvider provider=targetToRun.getProvider(FilesToRunProvider.class);
  RunfilesSupport runfilesSupport=provider == null ? null : provider.getRunfilesSupport();
  if (runfilesSupport != null && runfilesSupport.getArgs() != null) {
    List<String> targetArgs=runfilesSupport.getArgs();
    if (!targetArgs.isEmpty()) {
      args=Lists.newArrayListWithCapacity(targetArgs.size() + runTargetArgs.size());
      args.addAll(targetArgs);
      args.addAll(runTargetArgs);
    }
  }
  PathFragment prettyExecutablePath=OutputDirectoryLinksUtils.getPrettyPath(executablePath,runtime.getWorkspaceName(),runtime.getWorkspace(),options.getOptions(BuildRequestOptions.class).symlinkPrefix);
  List<String> cmdLine=new ArrayList<>();
  if (runOptions.scriptPath == null) {
    cmdLine.add(runtime.getDirectories().getExecRoot().getRelative(runtime.getBinTools().getExecPath(PROCESS_WRAPPER)).getPathString());
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(""String_Node_Str"");
  }
  List<String> prettyCmdLine=new ArrayList<>();
  if (runUnder != null) {
    String runUnderValue=runUnder.getValue();
    if (runUnderTarget != null) {
      runUnderValue=runUnderTarget.getProvider(FilesToRunProvider.class).getExecutable().getPath().getPathString();
      List<String> opts=runUnder.getOptions();
      if (!opts.isEmpty()) {
        runUnderValue+=""String_Node_Str"" + ShellEscaper.escapeJoinAll(opts);
      }
    }
    cmdLine.add(configuration.getShExecutable().getPathString());
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(runUnderValue + ""String_Node_Str"" + executablePath.getPathString()+ ""String_Node_Str""+ ShellEscaper.escapeJoinAll(args));
    prettyCmdLine.add(configuration.getShExecutable().getPathString());
    prettyCmdLine.add(""String_Node_Str"");
    prettyCmdLine.add(runUnderValue + ""String_Node_Str"" + prettyExecutablePath.getPathString()+ ""String_Node_Str""+ ShellEscaper.escapeJoinAll(args));
  }
 else {
    cmdLine.add(executablePath.getPathString());
    cmdLine.addAll(args);
    prettyCmdLine.add(prettyExecutablePath.getPathString());
    prettyCmdLine.addAll(args);
  }
  outErr.printErrLn(""String_Node_Str"");
  if (runOptions.scriptPath != null) {
    String unisolatedCommand=CommandFailureUtils.describeCommand(CommandDescriptionForm.COMPLETE_UNISOLATED,cmdLine,null,workingDir.getPathString());
    if (writeScript(runtime,runOptions.scriptPath,unisolatedCommand)) {
      return ExitCode.SUCCESS;
    }
 else {
      return ExitCode.RUN_FAILURE;
    }
  }
  runtime.getReporter().handle(Event.info(null,""String_Node_Str"" + ShellEscaper.escapeJoinAll(prettyCmdLine)));
  com.google.devtools.build.lib.shell.Command command=new CommandBuilder().addArgs(cmdLine).setEnv(runtime.getClientEnv()).setWorkingDir(workingDir).build();
  try {
    command.execute(com.google.devtools.build.lib.shell.Command.NO_INPUT,com.google.devtools.build.lib.shell.Command.NO_OBSERVER,outErr.getOutputStream(),outErr.getErrorStream(),true).getTerminationStatus().getExitCode();
    return ExitCode.SUCCESS;
  }
 catch (  BadExitStatusException e) {
    String message=""String_Node_Str"" + e.getResult().getTerminationStatus().getExitCode() + ""String_Node_Str""+ e.getMessage();
    runtime.getReporter().handle(Event.error(message));
    return ExitCode.RUN_FAILURE;
  }
catch (  AbnormalTerminationException e) {
    return ExitCode.INTERRUPTED;
  }
catch (  CommandException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
    return ExitCode.RUN_FAILURE;
  }
}","@Override public ExitCode exec(BlazeRuntime runtime,OptionsProvider options){
  RunOptions runOptions=options.getOptions(RunOptions.class);
  List<String> targetAndArgs=options.getResidue();
  if (targetAndArgs.isEmpty()) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  String targetString=targetAndArgs.get(0);
  List<String> runTargetArgs=targetAndArgs.subList(1,targetAndArgs.size());
  RunUnder runUnder=options.getOptions(BuildConfiguration.Options.class).runUnder;
  OutErr outErr=runtime.getReporter().getOutErr();
  List<String> targets=(runUnder != null) && (runUnder.getLabel() != null) ? ImmutableList.of(targetString,runUnder.getLabel().toString()) : ImmutableList.of(targetString);
  BuildRequest request=BuildRequest.create(this.getClass().getAnnotation(Command.class).name(),options,runtime.getStartupOptionsProvider(),targets,outErr,runtime.getCommandId(),runtime.getCommandStartTime());
  currentRunUnder=runUnder;
  BuildResult result;
  try {
    result=processRequest(runtime,request);
  }
  finally {
    currentRunUnder=null;
  }
  if (!result.getSuccess()) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return result.getExitCondition();
  }
  Collection<ConfiguredTarget> targetsBuilt=result.getSuccessfulTargets();
  ConfiguredTarget targetToRun=null;
  ConfiguredTarget runUnderTarget=null;
  if (targetsBuilt != null) {
    int maxTargets=runUnder != null && runUnder.getLabel() != null ? 2 : 1;
    if (targetsBuilt.size() > maxTargets) {
      runtime.getReporter().handle(Event.error(SINGLE_TARGET_MESSAGE));
      return ExitCode.COMMAND_LINE_ERROR;
    }
    for (    ConfiguredTarget target : targetsBuilt) {
      ExitCode targetValidation=fullyValidateTarget(runtime,target);
      if (targetValidation != ExitCode.SUCCESS) {
        return targetValidation;
      }
      if (runUnder != null && target.getLabel().equals(runUnder.getLabel())) {
        if (runUnderTarget != null) {
          runtime.getReporter().handle(Event.error(null,""String_Node_Str""));
          return ExitCode.COMMAND_LINE_ERROR;
        }
        runUnderTarget=target;
      }
 else       if (targetToRun == null) {
        targetToRun=target;
      }
 else {
        runtime.getReporter().handle(Event.error(SINGLE_TARGET_MESSAGE));
        return ExitCode.COMMAND_LINE_ERROR;
      }
    }
  }
  if ((targetToRun == null) && (runUnderTarget != null)) {
    targetToRun=runUnderTarget;
  }
  if (targetToRun == null) {
    runtime.getReporter().handle(Event.error(NO_TARGET_MESSAGE));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  Path executablePath=Preconditions.checkNotNull(targetToRun.getProvider(FilesToRunProvider.class).getExecutable().getPath());
  BuildConfiguration configuration=targetToRun.getConfiguration();
  if (configuration == null) {
    configuration=runtime.getBuildTool().getView().getConfigurationCollection().getTargetConfigurations().get(0);
  }
  Path workingDir;
  try {
    workingDir=ensureRunfilesBuilt(runtime,targetToRun);
  }
 catch (  CommandException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
  List<String> args=runTargetArgs;
  FilesToRunProvider provider=targetToRun.getProvider(FilesToRunProvider.class);
  RunfilesSupport runfilesSupport=provider == null ? null : provider.getRunfilesSupport();
  if (runfilesSupport != null && runfilesSupport.getArgs() != null) {
    List<String> targetArgs=runfilesSupport.getArgs();
    if (!targetArgs.isEmpty()) {
      args=Lists.newArrayListWithCapacity(targetArgs.size() + runTargetArgs.size());
      args.addAll(targetArgs);
      args.addAll(runTargetArgs);
    }
  }
  PathFragment prettyExecutablePath=OutputDirectoryLinksUtils.getPrettyPath(executablePath,runtime.getWorkspaceName(),runtime.getWorkspace(),options.getOptions(BuildRequestOptions.class).symlinkPrefix);
  List<String> cmdLine=new ArrayList<>();
  if (runOptions.scriptPath == null) {
    cmdLine.add(runtime.getDirectories().getExecRoot().getRelative(runtime.getBinTools().getExecPath(PROCESS_WRAPPER)).getPathString());
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(""String_Node_Str"");
  }
  List<String> prettyCmdLine=new ArrayList<>();
  if (runUnder != null) {
    String runUnderValue=runUnder.getValue();
    if (runUnderTarget != null) {
      runUnderValue=runUnderTarget.getProvider(FilesToRunProvider.class).getExecutable().getPath().getPathString();
      List<String> opts=runUnder.getOptions();
      if (!opts.isEmpty()) {
        runUnderValue+=""String_Node_Str"" + ShellEscaper.escapeJoinAll(opts);
      }
    }
    cmdLine.add(configuration.getShExecutable().getPathString());
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(runUnderValue + ""String_Node_Str"" + executablePath.getPathString()+ ""String_Node_Str""+ ShellEscaper.escapeJoinAll(args));
    prettyCmdLine.add(configuration.getShExecutable().getPathString());
    prettyCmdLine.add(""String_Node_Str"");
    prettyCmdLine.add(runUnderValue + ""String_Node_Str"" + prettyExecutablePath.getPathString()+ ""String_Node_Str""+ ShellEscaper.escapeJoinAll(args));
  }
 else {
    cmdLine.add(executablePath.getPathString());
    cmdLine.addAll(args);
    prettyCmdLine.add(prettyExecutablePath.getPathString());
    prettyCmdLine.addAll(args);
  }
  outErr.printErrLn(""String_Node_Str"");
  if (runOptions.scriptPath != null) {
    String unisolatedCommand=CommandFailureUtils.describeCommand(CommandDescriptionForm.COMPLETE_UNISOLATED,cmdLine,null,workingDir.getPathString());
    if (writeScript(runtime,runOptions.scriptPath,unisolatedCommand)) {
      return ExitCode.SUCCESS;
    }
 else {
      return ExitCode.RUN_FAILURE;
    }
  }
  runtime.getReporter().handle(Event.info(null,""String_Node_Str"" + ShellEscaper.escapeJoinAll(prettyCmdLine)));
  com.google.devtools.build.lib.shell.Command command=new CommandBuilder().addArgs(cmdLine).setEnv(runtime.getClientEnv()).setWorkingDir(workingDir).build();
  try {
    runtime.getReporter().switchToAnsiAllowingHandler();
    command.execute(com.google.devtools.build.lib.shell.Command.NO_INPUT,com.google.devtools.build.lib.shell.Command.NO_OBSERVER,outErr.getOutputStream(),outErr.getErrorStream(),true).getTerminationStatus().getExitCode();
    return ExitCode.SUCCESS;
  }
 catch (  BadExitStatusException e) {
    String message=""String_Node_Str"" + e.getResult().getTerminationStatus().getExitCode() + ""String_Node_Str""+ e.getMessage();
    runtime.getReporter().handle(Event.error(message));
    return ExitCode.RUN_FAILURE;
  }
catch (  AbnormalTerminationException e) {
    return ExitCode.INTERRUPTED;
  }
catch (  CommandException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
    return ExitCode.RUN_FAILURE;
  }
}",0.9958656705592224
111019,"/** 
 * Returns a map containing entries that should be added to the merged plist. These are usually generated by Xcode automatically during the build process.
 */
public static Map<String,NSObject> automaticEntries(Collection<String> targetedDeviceFamily,Platform platform,String sdkVersion,String minimumOsVersion){
  ImmutableMap.Builder<String,NSObject> result=new ImmutableMap.Builder<>();
  List<Integer> uiDeviceFamily=FluentIterable.from(targetedDeviceFamily).transform(Maps.asConverter(DEVICE_FAMILIES)).toSortedList(Ordering.natural());
  result.put(""String_Node_Str"",NSObject.wrap(uiDeviceFamily.toArray()));
  result.put(""String_Node_Str"",NSObject.wrap(platform.getLowerCaseNameInPlist()));
  result.put(""String_Node_Str"",NSObject.wrap(platform.getLowerCaseNameInPlist() + sdkVersion));
  result.put(""String_Node_Str"",new NSArray(NSObject.wrap(platform.getNameInPlist())));
  result.put(""String_Node_Str"",NSObject.wrap(minimumOsVersion));
  return result.build();
}","/** 
 * Returns a map containing entries that should be added to the merged plist. These are usually generated by Xcode automatically during the build process.
 */
public static Map<String,NSObject> automaticEntries(Collection<String> targetedDeviceFamily,Platform platform,String sdkVersion,String minimumOsVersion){
  ImmutableMap.Builder<String,NSObject> result=new ImmutableMap.Builder<>();
  List<Integer> uiDeviceFamily=FluentIterable.from(targetedDeviceFamily).transform(Maps.asConverter(DEVICE_FAMILIES)).toSortedList(Ordering.natural());
  result.put(""String_Node_Str"",NSObject.wrap(uiDeviceFamily.toArray()));
  result.put(""String_Node_Str"",NSObject.wrap(platform.getLowerCaseNameInPlist()));
  result.put(""String_Node_Str"",NSObject.wrap(platform.getLowerCaseNameInPlist() + sdkVersion));
  result.put(""String_Node_Str"",new NSArray(NSObject.wrap(platform.getNameInPlist())));
  result.put(""String_Node_Str"",NSObject.wrap(minimumOsVersion));
  result.put(""String_Node_Str"",NSObject.wrap(""String_Node_Str""));
  result.put(""String_Node_Str"",NSObject.wrap(""String_Node_Str""));
  result.put(""String_Node_Str"",NSObject.wrap(""String_Node_Str""));
  result.put(""String_Node_Str"",NSObject.wrap(""String_Node_Str""));
  return result.build();
}",0.8647430117222723
111020,"/** 
 * Generates final merged Plist file and PkgInfo file in the specified locations, and includes the ""automatic"" entries in the Plist.
 */
public static PlistMerging from(List<Path> sourceFiles,Map<String,NSObject> automaticEntries,Map<String,String> substitutions,KeysToRemoveIfEmptyString keysToRemoveIfEmptyString) throws IOException {
  NSDictionary merged=PlistMerging.merge(sourceFiles);
  Set<String> conflictingEntries=Sets.intersection(automaticEntries.keySet(),merged.keySet());
  Preconditions.checkArgument(conflictingEntries.isEmpty(),""String_Node_Str"" + ""String_Node_Str"",conflictingEntries);
  merged.putAll(automaticEntries);
  for (  Map.Entry<String,NSObject> entry : merged.entrySet()) {
    if (entry.getValue().toJavaObject() instanceof String) {
      String newValue=substituteEnvironmentVariable(substitutions,(String)entry.getValue().toJavaObject());
      merged.put(entry.getKey(),newValue);
    }
  }
  for (  String key : keysToRemoveIfEmptyString) {
    if (Equaling.of(Mapping.of(merged,key),Optional.<NSObject>of(new NSString(""String_Node_Str"")))) {
      merged.remove(key);
    }
  }
  return new PlistMerging(merged);
}","/** 
 * Generates final merged Plist file and PkgInfo file in the specified locations, and includes the ""automatic"" entries in the Plist.
 */
public static PlistMerging from(List<Path> sourceFiles,Map<String,NSObject> automaticEntries,Map<String,String> substitutions,KeysToRemoveIfEmptyString keysToRemoveIfEmptyString) throws IOException {
  NSDictionary merged=PlistMerging.merge(sourceFiles);
  Set<String> conflictingEntries=Sets.difference(Sets.intersection(automaticEntries.keySet(),merged.keySet()),ImmutableSet.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Preconditions.checkArgument(conflictingEntries.isEmpty(),""String_Node_Str"" + ""String_Node_Str"",conflictingEntries);
  merged.putAll(automaticEntries);
  for (  Map.Entry<String,NSObject> entry : merged.entrySet()) {
    if (entry.getValue().toJavaObject() instanceof String) {
      String newValue=substituteEnvironmentVariable(substitutions,(String)entry.getValue().toJavaObject());
      merged.put(entry.getKey(),newValue);
    }
  }
  for (  String key : keysToRemoveIfEmptyString) {
    if (Equaling.of(Mapping.of(merged,key),Optional.<NSObject>of(new NSString(""String_Node_Str"")))) {
      merged.remove(key);
    }
  }
  return new PlistMerging(merged);
}",0.956198347107438
111021,"@Override public ExitCode exec(final BlazeRuntime runtime,final OptionsProvider optionsProvider){
  Options infoOptions=optionsProvider.getOptions(Options.class);
  OutErr outErr=runtime.getReporter().getOutErr();
  Supplier<BuildConfiguration> configurationSupplier=new Supplier<BuildConfiguration>(){
    private BuildConfiguration configuration;
    @Override public BuildConfiguration get(){
      if (configuration != null) {
        return configuration;
      }
      try {
        runtime.setupPackageCache(optionsProvider.getOptions(PackageCacheOptions.class),runtime.getDefaultsPackageContent(optionsProvider));
        configuration=runtime.getConfigurations(optionsProvider).getTargetConfigurations().get(0);
        return configuration;
      }
 catch (      InvalidConfigurationException e) {
        runtime.getReporter().handle(Event.error(e.getMessage()));
        throw new ExitCausingRuntimeException(ExitCode.COMMAND_LINE_ERROR);
      }
catch (      AbruptExitException e) {
        throw new ExitCausingRuntimeException(""String_Node_Str"" + e.getMessage(),e.getExitCode());
      }
catch (      InterruptedException e) {
        runtime.getReporter().handle(Event.error(""String_Node_Str""));
        throw new ExitCausingRuntimeException(ExitCode.INTERRUPTED);
      }
    }
  }
;
  Map<String,BlazeModule.InfoItem> items=getInfoItemMap(runtime,optionsProvider);
  try {
    if (infoOptions.showMakeEnvironment) {
      Map<String,String> makeEnv=configurationSupplier.get().getMakeEnvironment();
      for (      Map.Entry<String,String> entry : makeEnv.entrySet()) {
        BlazeModule.InfoItem item=new MakeInfoItem(entry.getKey(),entry.getValue());
        items.put(item.getName(),item);
      }
    }
    List<String> residue=optionsProvider.getResidue();
    if (residue.size() > 1) {
      runtime.getReporter().handle(Event.error(""String_Node_Str""));
      return ExitCode.COMMAND_LINE_ERROR;
    }
    String key=residue.size() == 1 ? residue.get(0) : null;
    if (key != null) {
      byte[] value;
      if (items.containsKey(key)) {
        value=items.get(key).get(configurationSupplier);
      }
 else {
        runtime.getReporter().handle(Event.error(""String_Node_Str"" + key + ""String_Node_Str""));
        return ExitCode.COMMAND_LINE_ERROR;
      }
      try {
        outErr.getOutputStream().write(value);
        outErr.getOutputStream().flush();
      }
 catch (      IOException e) {
        runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
        return ExitCode.ANALYSIS_FAILURE;
      }
    }
 else {
      configurationSupplier.get();
      for (      BlazeModule.InfoItem infoItem : items.values()) {
        if (infoItem.isHidden()) {
          continue;
        }
        outErr.getOutputStream().write((infoItem.getName() + ""String_Node_Str"").getBytes(StandardCharsets.UTF_8));
        outErr.getOutputStream().write(infoItem.get(configurationSupplier));
      }
    }
  }
 catch (  AbruptExitException e) {
    return e.getExitCode();
  }
catch (  ExitCausingRuntimeException e) {
    return e.getExitCode();
  }
catch (  IOException e) {
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
  return ExitCode.SUCCESS;
}","@Override public ExitCode exec(final BlazeRuntime runtime,final OptionsProvider optionsProvider){
  runtime.getReporter().switchToAnsiAllowingHandler();
  Options infoOptions=optionsProvider.getOptions(Options.class);
  OutErr outErr=runtime.getReporter().getOutErr();
  Supplier<BuildConfiguration> configurationSupplier=new Supplier<BuildConfiguration>(){
    private BuildConfiguration configuration;
    @Override public BuildConfiguration get(){
      if (configuration != null) {
        return configuration;
      }
      try {
        runtime.setupPackageCache(optionsProvider.getOptions(PackageCacheOptions.class),runtime.getDefaultsPackageContent(optionsProvider));
        configuration=runtime.getConfigurations(optionsProvider).getTargetConfigurations().get(0);
        return configuration;
      }
 catch (      InvalidConfigurationException e) {
        runtime.getReporter().handle(Event.error(e.getMessage()));
        throw new ExitCausingRuntimeException(ExitCode.COMMAND_LINE_ERROR);
      }
catch (      AbruptExitException e) {
        throw new ExitCausingRuntimeException(""String_Node_Str"" + e.getMessage(),e.getExitCode());
      }
catch (      InterruptedException e) {
        runtime.getReporter().handle(Event.error(""String_Node_Str""));
        throw new ExitCausingRuntimeException(ExitCode.INTERRUPTED);
      }
    }
  }
;
  Map<String,BlazeModule.InfoItem> items=getInfoItemMap(runtime,optionsProvider);
  try {
    if (infoOptions.showMakeEnvironment) {
      Map<String,String> makeEnv=configurationSupplier.get().getMakeEnvironment();
      for (      Map.Entry<String,String> entry : makeEnv.entrySet()) {
        BlazeModule.InfoItem item=new MakeInfoItem(entry.getKey(),entry.getValue());
        items.put(item.getName(),item);
      }
    }
    List<String> residue=optionsProvider.getResidue();
    if (residue.size() > 1) {
      runtime.getReporter().handle(Event.error(""String_Node_Str""));
      return ExitCode.COMMAND_LINE_ERROR;
    }
    String key=residue.size() == 1 ? residue.get(0) : null;
    if (key != null) {
      byte[] value;
      if (items.containsKey(key)) {
        value=items.get(key).get(configurationSupplier);
      }
 else {
        runtime.getReporter().handle(Event.error(""String_Node_Str"" + key + ""String_Node_Str""));
        return ExitCode.COMMAND_LINE_ERROR;
      }
      try {
        outErr.getOutputStream().write(value);
        outErr.getOutputStream().flush();
      }
 catch (      IOException e) {
        runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
        return ExitCode.ANALYSIS_FAILURE;
      }
    }
 else {
      configurationSupplier.get();
      for (      BlazeModule.InfoItem infoItem : items.values()) {
        if (infoItem.isHidden()) {
          continue;
        }
        outErr.getOutputStream().write((infoItem.getName() + ""String_Node_Str"").getBytes(StandardCharsets.UTF_8));
        outErr.getOutputStream().write(infoItem.get(configurationSupplier));
      }
    }
  }
 catch (  AbruptExitException e) {
    return e.getExitCode();
  }
catch (  ExitCausingRuntimeException e) {
    return e.getExitCode();
  }
catch (  IOException e) {
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
  return ExitCode.SUCCESS;
}",0.991490020114498
111022,"/** 
 * Exit codes: 0   on successful evaluation. 1   if query evaluation did not complete. 2   if query parsing failed. 3   if errors were reported but evaluation produced a partial result (only when --keep_going is in effect.)
 */
@Override public ExitCode exec(BlazeRuntime runtime,OptionsProvider options){
  QueryOptions queryOptions=options.getOptions(QueryOptions.class);
  try {
    runtime.setupPackageCache(options.getOptions(PackageCacheOptions.class),runtime.getDefaultsPackageContent());
  }
 catch (  InterruptedException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return ExitCode.INTERRUPTED;
  }
catch (  AbruptExitException e) {
    runtime.getReporter().handle(Event.error(null,""String_Node_Str"" + e.getMessage()));
    return e.getExitCode();
  }
  if (options.getResidue().isEmpty()) {
    runtime.getReporter().handle(Event.error(String.format(""String_Node_Str"",Constants.PRODUCT_NAME)));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  Iterable<OutputFormatter> formatters=runtime.getQueryOutputFormatters();
  OutputFormatter formatter=OutputFormatter.getFormatter(formatters,queryOptions.outputFormat);
  if (formatter == null) {
    runtime.getReporter().handle(Event.error(String.format(""String_Node_Str"",queryOptions.outputFormat,OutputFormatter.formatterNames(formatters))));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  String query=Joiner.on(' ').join(options.getResidue());
  Set<Setting> settings=queryOptions.toSettings();
  AbstractBlazeQueryEnvironment<Target> env=newQueryEnvironment(runtime,queryOptions.keepGoing,QueryOutputUtils.orderResults(queryOptions,formatter),queryOptions.universeScope,queryOptions.loadingPhaseThreads,settings);
  QueryExpression expr;
  try {
    expr=QueryExpression.parse(query,env);
  }
 catch (  QueryException e) {
    runtime.getReporter().handle(Event.error(null,""String_Node_Str"" + query + ""String_Node_Str""+ e.getMessage()));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  QueryEvalResult<Target> result;
  try {
    result=env.evaluateQuery(expr);
  }
 catch (  QueryException|InterruptedException e) {
    runtime.getReporter().handle(Event.error(e.getMessage()));
    return ExitCode.ANALYSIS_FAILURE;
  }
  PrintStream output=new PrintStream(runtime.getReporter().getOutErr().getOutputStream());
  try {
    QueryOutputUtils.output(queryOptions,result,formatter,output,queryOptions.aspectDeps.createResolver(runtime.getPackageManager(),runtime.getReporter()));
  }
 catch (  ClosedByInterruptException|InterruptedException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return ExitCode.INTERRUPTED;
  }
catch (  IOException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
 finally {
    output.flush();
  }
  if (result.getResultSet().isEmpty()) {
    runtime.getReporter().handle(Event.info(""String_Node_Str""));
  }
  return result.getSuccess() ? ExitCode.SUCCESS : ExitCode.PARTIAL_ANALYSIS_FAILURE;
}","/** 
 * Exit codes: 0   on successful evaluation. 1   if query evaluation did not complete. 2   if query parsing failed. 3   if errors were reported but evaluation produced a partial result (only when --keep_going is in effect.)
 */
@Override public ExitCode exec(BlazeRuntime runtime,OptionsProvider options){
  QueryOptions queryOptions=options.getOptions(QueryOptions.class);
  try {
    runtime.setupPackageCache(options.getOptions(PackageCacheOptions.class),runtime.getDefaultsPackageContent());
  }
 catch (  InterruptedException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return ExitCode.INTERRUPTED;
  }
catch (  AbruptExitException e) {
    runtime.getReporter().handle(Event.error(null,""String_Node_Str"" + e.getMessage()));
    return e.getExitCode();
  }
  if (options.getResidue().isEmpty()) {
    runtime.getReporter().handle(Event.error(String.format(""String_Node_Str"",Constants.PRODUCT_NAME)));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  Iterable<OutputFormatter> formatters=runtime.getQueryOutputFormatters();
  OutputFormatter formatter=OutputFormatter.getFormatter(formatters,queryOptions.outputFormat);
  if (formatter == null) {
    runtime.getReporter().handle(Event.error(String.format(""String_Node_Str"",queryOptions.outputFormat,OutputFormatter.formatterNames(formatters))));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  String query=Joiner.on(' ').join(options.getResidue());
  Set<Setting> settings=queryOptions.toSettings();
  AbstractBlazeQueryEnvironment<Target> env=newQueryEnvironment(runtime,queryOptions.keepGoing,QueryOutputUtils.orderResults(queryOptions,formatter),queryOptions.universeScope,queryOptions.loadingPhaseThreads,settings);
  QueryExpression expr;
  try {
    expr=QueryExpression.parse(query,env);
  }
 catch (  QueryException e) {
    runtime.getReporter().handle(Event.error(null,""String_Node_Str"" + query + ""String_Node_Str""+ e.getMessage()));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  QueryEvalResult<Target> result;
  try {
    result=env.evaluateQuery(expr);
  }
 catch (  QueryException|InterruptedException e) {
    runtime.getReporter().handle(Event.error(e.getMessage()));
    return ExitCode.ANALYSIS_FAILURE;
  }
  runtime.getReporter().switchToAnsiAllowingHandler();
  PrintStream output=new PrintStream(runtime.getReporter().getOutErr().getOutputStream());
  try {
    QueryOutputUtils.output(queryOptions,result,formatter,output,queryOptions.aspectDeps.createResolver(runtime.getPackageManager(),runtime.getReporter()));
  }
 catch (  ClosedByInterruptException|InterruptedException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return ExitCode.INTERRUPTED;
  }
catch (  IOException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
 finally {
    output.flush();
  }
  if (result.getResultSet().isEmpty()) {
    runtime.getReporter().handle(Event.info(""String_Node_Str""));
  }
  return result.getSuccess() ? ExitCode.SUCCESS : ExitCode.PARTIAL_ANALYSIS_FAILURE;
}",0.9910057236304172
111023,"@Override public ExitCode exec(BlazeRuntime runtime,OptionsProvider options){
  RunOptions runOptions=options.getOptions(RunOptions.class);
  List<String> targetAndArgs=options.getResidue();
  if (targetAndArgs.isEmpty()) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  String targetString=targetAndArgs.get(0);
  List<String> runTargetArgs=targetAndArgs.subList(1,targetAndArgs.size());
  RunUnder runUnder=options.getOptions(BuildConfiguration.Options.class).runUnder;
  OutErr outErr=runtime.getReporter().getOutErr();
  List<String> targets=(runUnder != null) && (runUnder.getLabel() != null) ? ImmutableList.of(targetString,runUnder.getLabel().toString()) : ImmutableList.of(targetString);
  BuildRequest request=BuildRequest.create(this.getClass().getAnnotation(Command.class).name(),options,runtime.getStartupOptionsProvider(),targets,outErr,runtime.getCommandId(),runtime.getCommandStartTime());
  currentRunUnder=runUnder;
  BuildResult result;
  try {
    result=processRequest(runtime,request);
  }
  finally {
    currentRunUnder=null;
  }
  if (!result.getSuccess()) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return result.getExitCondition();
  }
  Collection<ConfiguredTarget> targetsBuilt=result.getSuccessfulTargets();
  ConfiguredTarget targetToRun=null;
  ConfiguredTarget runUnderTarget=null;
  if (targetsBuilt != null) {
    int maxTargets=runUnder != null && runUnder.getLabel() != null ? 2 : 1;
    if (targetsBuilt.size() > maxTargets) {
      runtime.getReporter().handle(Event.error(SINGLE_TARGET_MESSAGE));
      return ExitCode.COMMAND_LINE_ERROR;
    }
    for (    ConfiguredTarget target : targetsBuilt) {
      ExitCode targetValidation=fullyValidateTarget(runtime,target);
      if (targetValidation != ExitCode.SUCCESS) {
        return targetValidation;
      }
      if (runUnder != null && target.getLabel().equals(runUnder.getLabel())) {
        if (runUnderTarget != null) {
          runtime.getReporter().handle(Event.error(null,""String_Node_Str""));
          return ExitCode.COMMAND_LINE_ERROR;
        }
        runUnderTarget=target;
      }
 else       if (targetToRun == null) {
        targetToRun=target;
      }
 else {
        runtime.getReporter().handle(Event.error(SINGLE_TARGET_MESSAGE));
        return ExitCode.COMMAND_LINE_ERROR;
      }
    }
  }
  if ((targetToRun == null) && (runUnderTarget != null)) {
    targetToRun=runUnderTarget;
  }
  if (targetToRun == null) {
    runtime.getReporter().handle(Event.error(NO_TARGET_MESSAGE));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  Path executablePath=Preconditions.checkNotNull(targetToRun.getProvider(FilesToRunProvider.class).getExecutable().getPath());
  BuildConfiguration configuration=targetToRun.getConfiguration();
  if (configuration == null) {
    configuration=runtime.getBuildTool().getView().getConfigurationCollection().getTargetConfigurations().get(0);
  }
  Path workingDir;
  try {
    workingDir=ensureRunfilesBuilt(runtime,targetToRun);
  }
 catch (  CommandException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
  List<String> args=runTargetArgs;
  FilesToRunProvider provider=targetToRun.getProvider(FilesToRunProvider.class);
  RunfilesSupport runfilesSupport=provider == null ? null : provider.getRunfilesSupport();
  if (runfilesSupport != null && runfilesSupport.getArgs() != null) {
    List<String> targetArgs=runfilesSupport.getArgs();
    if (!targetArgs.isEmpty()) {
      args=Lists.newArrayListWithCapacity(targetArgs.size() + runTargetArgs.size());
      args.addAll(targetArgs);
      args.addAll(runTargetArgs);
    }
  }
  PathFragment prettyExecutablePath=OutputDirectoryLinksUtils.getPrettyPath(executablePath,runtime.getWorkspaceName(),runtime.getWorkspace(),options.getOptions(BuildRequestOptions.class).symlinkPrefix);
  List<String> cmdLine=new ArrayList<>();
  if (runOptions.scriptPath == null) {
    cmdLine.add(runtime.getDirectories().getExecRoot().getRelative(runtime.getBinTools().getExecPath(PROCESS_WRAPPER)).getPathString());
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(""String_Node_Str"");
  }
  List<String> prettyCmdLine=new ArrayList<>();
  if (runUnder != null) {
    String runUnderValue=runUnder.getValue();
    if (runUnderTarget != null) {
      runUnderValue=runUnderTarget.getProvider(FilesToRunProvider.class).getExecutable().getPath().getPathString();
      List<String> opts=runUnder.getOptions();
      if (!opts.isEmpty()) {
        runUnderValue+=""String_Node_Str"" + ShellEscaper.escapeJoinAll(opts);
      }
    }
    cmdLine.add(configuration.getShExecutable().getPathString());
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(runUnderValue + ""String_Node_Str"" + executablePath.getPathString()+ ""String_Node_Str""+ ShellEscaper.escapeJoinAll(args));
    prettyCmdLine.add(configuration.getShExecutable().getPathString());
    prettyCmdLine.add(""String_Node_Str"");
    prettyCmdLine.add(runUnderValue + ""String_Node_Str"" + prettyExecutablePath.getPathString()+ ""String_Node_Str""+ ShellEscaper.escapeJoinAll(args));
  }
 else {
    cmdLine.add(executablePath.getPathString());
    cmdLine.addAll(args);
    prettyCmdLine.add(prettyExecutablePath.getPathString());
    prettyCmdLine.addAll(args);
  }
  outErr.printErrLn(""String_Node_Str"");
  if (runOptions.scriptPath != null) {
    String unisolatedCommand=CommandFailureUtils.describeCommand(CommandDescriptionForm.COMPLETE_UNISOLATED,cmdLine,null,workingDir.getPathString());
    if (writeScript(runtime,runOptions.scriptPath,unisolatedCommand)) {
      return ExitCode.SUCCESS;
    }
 else {
      return ExitCode.RUN_FAILURE;
    }
  }
  runtime.getReporter().handle(Event.info(null,""String_Node_Str"" + ShellEscaper.escapeJoinAll(prettyCmdLine)));
  com.google.devtools.build.lib.shell.Command command=new CommandBuilder().addArgs(cmdLine).setEnv(runtime.getClientEnv()).setWorkingDir(workingDir).build();
  try {
    command.execute(com.google.devtools.build.lib.shell.Command.NO_INPUT,com.google.devtools.build.lib.shell.Command.NO_OBSERVER,outErr.getOutputStream(),outErr.getErrorStream(),true).getTerminationStatus().getExitCode();
    return ExitCode.SUCCESS;
  }
 catch (  BadExitStatusException e) {
    String message=""String_Node_Str"" + e.getResult().getTerminationStatus().getExitCode() + ""String_Node_Str""+ e.getMessage();
    runtime.getReporter().handle(Event.error(message));
    return ExitCode.RUN_FAILURE;
  }
catch (  AbnormalTerminationException e) {
    return ExitCode.INTERRUPTED;
  }
catch (  CommandException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
    return ExitCode.RUN_FAILURE;
  }
}","@Override public ExitCode exec(BlazeRuntime runtime,OptionsProvider options){
  RunOptions runOptions=options.getOptions(RunOptions.class);
  List<String> targetAndArgs=options.getResidue();
  if (targetAndArgs.isEmpty()) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  String targetString=targetAndArgs.get(0);
  List<String> runTargetArgs=targetAndArgs.subList(1,targetAndArgs.size());
  RunUnder runUnder=options.getOptions(BuildConfiguration.Options.class).runUnder;
  OutErr outErr=runtime.getReporter().getOutErr();
  List<String> targets=(runUnder != null) && (runUnder.getLabel() != null) ? ImmutableList.of(targetString,runUnder.getLabel().toString()) : ImmutableList.of(targetString);
  BuildRequest request=BuildRequest.create(this.getClass().getAnnotation(Command.class).name(),options,runtime.getStartupOptionsProvider(),targets,outErr,runtime.getCommandId(),runtime.getCommandStartTime());
  currentRunUnder=runUnder;
  BuildResult result;
  try {
    result=processRequest(runtime,request);
  }
  finally {
    currentRunUnder=null;
  }
  if (!result.getSuccess()) {
    runtime.getReporter().handle(Event.error(""String_Node_Str""));
    return result.getExitCondition();
  }
  Collection<ConfiguredTarget> targetsBuilt=result.getSuccessfulTargets();
  ConfiguredTarget targetToRun=null;
  ConfiguredTarget runUnderTarget=null;
  if (targetsBuilt != null) {
    int maxTargets=runUnder != null && runUnder.getLabel() != null ? 2 : 1;
    if (targetsBuilt.size() > maxTargets) {
      runtime.getReporter().handle(Event.error(SINGLE_TARGET_MESSAGE));
      return ExitCode.COMMAND_LINE_ERROR;
    }
    for (    ConfiguredTarget target : targetsBuilt) {
      ExitCode targetValidation=fullyValidateTarget(runtime,target);
      if (targetValidation != ExitCode.SUCCESS) {
        return targetValidation;
      }
      if (runUnder != null && target.getLabel().equals(runUnder.getLabel())) {
        if (runUnderTarget != null) {
          runtime.getReporter().handle(Event.error(null,""String_Node_Str""));
          return ExitCode.COMMAND_LINE_ERROR;
        }
        runUnderTarget=target;
      }
 else       if (targetToRun == null) {
        targetToRun=target;
      }
 else {
        runtime.getReporter().handle(Event.error(SINGLE_TARGET_MESSAGE));
        return ExitCode.COMMAND_LINE_ERROR;
      }
    }
  }
  if ((targetToRun == null) && (runUnderTarget != null)) {
    targetToRun=runUnderTarget;
  }
  if (targetToRun == null) {
    runtime.getReporter().handle(Event.error(NO_TARGET_MESSAGE));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  Path executablePath=Preconditions.checkNotNull(targetToRun.getProvider(FilesToRunProvider.class).getExecutable().getPath());
  BuildConfiguration configuration=targetToRun.getConfiguration();
  if (configuration == null) {
    configuration=runtime.getBuildTool().getView().getConfigurationCollection().getTargetConfigurations().get(0);
  }
  Path workingDir;
  try {
    workingDir=ensureRunfilesBuilt(runtime,targetToRun);
  }
 catch (  CommandException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
  List<String> args=runTargetArgs;
  FilesToRunProvider provider=targetToRun.getProvider(FilesToRunProvider.class);
  RunfilesSupport runfilesSupport=provider == null ? null : provider.getRunfilesSupport();
  if (runfilesSupport != null && runfilesSupport.getArgs() != null) {
    List<String> targetArgs=runfilesSupport.getArgs();
    if (!targetArgs.isEmpty()) {
      args=Lists.newArrayListWithCapacity(targetArgs.size() + runTargetArgs.size());
      args.addAll(targetArgs);
      args.addAll(runTargetArgs);
    }
  }
  PathFragment prettyExecutablePath=OutputDirectoryLinksUtils.getPrettyPath(executablePath,runtime.getWorkspaceName(),runtime.getWorkspace(),options.getOptions(BuildRequestOptions.class).symlinkPrefix);
  List<String> cmdLine=new ArrayList<>();
  if (runOptions.scriptPath == null) {
    cmdLine.add(runtime.getDirectories().getExecRoot().getRelative(runtime.getBinTools().getExecPath(PROCESS_WRAPPER)).getPathString());
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(""String_Node_Str"");
  }
  List<String> prettyCmdLine=new ArrayList<>();
  if (runUnder != null) {
    String runUnderValue=runUnder.getValue();
    if (runUnderTarget != null) {
      runUnderValue=runUnderTarget.getProvider(FilesToRunProvider.class).getExecutable().getPath().getPathString();
      List<String> opts=runUnder.getOptions();
      if (!opts.isEmpty()) {
        runUnderValue+=""String_Node_Str"" + ShellEscaper.escapeJoinAll(opts);
      }
    }
    cmdLine.add(configuration.getShExecutable().getPathString());
    cmdLine.add(""String_Node_Str"");
    cmdLine.add(runUnderValue + ""String_Node_Str"" + executablePath.getPathString()+ ""String_Node_Str""+ ShellEscaper.escapeJoinAll(args));
    prettyCmdLine.add(configuration.getShExecutable().getPathString());
    prettyCmdLine.add(""String_Node_Str"");
    prettyCmdLine.add(runUnderValue + ""String_Node_Str"" + prettyExecutablePath.getPathString()+ ""String_Node_Str""+ ShellEscaper.escapeJoinAll(args));
  }
 else {
    cmdLine.add(executablePath.getPathString());
    cmdLine.addAll(args);
    prettyCmdLine.add(prettyExecutablePath.getPathString());
    prettyCmdLine.addAll(args);
  }
  outErr.printErrLn(""String_Node_Str"");
  if (runOptions.scriptPath != null) {
    String unisolatedCommand=CommandFailureUtils.describeCommand(CommandDescriptionForm.COMPLETE_UNISOLATED,cmdLine,null,workingDir.getPathString());
    if (writeScript(runtime,runOptions.scriptPath,unisolatedCommand)) {
      return ExitCode.SUCCESS;
    }
 else {
      return ExitCode.RUN_FAILURE;
    }
  }
  runtime.getReporter().handle(Event.info(null,""String_Node_Str"" + ShellEscaper.escapeJoinAll(prettyCmdLine)));
  com.google.devtools.build.lib.shell.Command command=new CommandBuilder().addArgs(cmdLine).setEnv(runtime.getClientEnv()).setWorkingDir(workingDir).build();
  try {
    runtime.getReporter().switchToAnsiAllowingHandler();
    command.execute(com.google.devtools.build.lib.shell.Command.NO_INPUT,com.google.devtools.build.lib.shell.Command.NO_OBSERVER,outErr.getOutputStream(),outErr.getErrorStream(),true).getTerminationStatus().getExitCode();
    return ExitCode.SUCCESS;
  }
 catch (  BadExitStatusException e) {
    String message=""String_Node_Str"" + e.getResult().getTerminationStatus().getExitCode() + ""String_Node_Str""+ e.getMessage();
    runtime.getReporter().handle(Event.error(message));
    return ExitCode.RUN_FAILURE;
  }
catch (  AbnormalTerminationException e) {
    return ExitCode.INTERRUPTED;
  }
catch (  CommandException e) {
    runtime.getReporter().handle(Event.error(""String_Node_Str"" + e.getMessage()));
    return ExitCode.RUN_FAILURE;
  }
}",0.9958656705592224
111024,"/** 
 * This test validates that the md5sum() method returns hashes that match the official test vectors specified in RFC 1321, The MD5 Message-Digest Algorithm.
 * @throws Exception
 */
@Test public void testValidateMd5Sum() throws Exception {
  HashMap<String,String> testVectors=new HashMap<>();
  testVectors.put(""String_Node_Str"",""String_Node_Str"");
  testVectors.put(""String_Node_Str"",""String_Node_Str"");
  testVectors.put(""String_Node_Str"",""String_Node_Str"");
  testVectors.put(""String_Node_Str"",""String_Node_Str"");
  testVectors.put(""String_Node_Str"",""String_Node_Str"");
  testVectors.put(""String_Node_Str"",""String_Node_Str"");
  testVectors.put(""String_Node_Str"",""String_Node_Str"");
  for (  String testInput : testVectors.keySet()) {
    FileSystemUtils.writeContentAsLatin1(testFile,testInput);
    HashCode result=FilesystemUtils.md5sum(testFile.getPathString());
    assertThat(testVectors).containsEntry(testInput,result.toString());
  }
}","/** 
 * This test validates that the md5sum() method returns hashes that match the official test vectors specified in RFC 1321, The MD5 Message-Digest Algorithm.
 * @throws Exception
 */
@Test public void testValidateMd5Sum() throws Exception {
  ImmutableMap<String,String> testVectors=ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build();
  for (  String testInput : testVectors.keySet()) {
    FileSystemUtils.writeContentAsLatin1(testFile,testInput);
    HashCode result=FilesystemUtils.md5sum(testFile.getPathString());
    assertThat(testVectors).containsEntry(testInput,result.toString());
  }
}",0.5965103598691385
111025,"@Before public void setUp() throws Exception {
  testFS=new UnixFileSystem();
  workingDir=testFS.getPath(new File(TestUtils.tmpDir()).getCanonicalPath());
  testFile=workingDir.getRelative(""String_Node_Str"");
  FileSystemUtils.createEmptyFile(testFile);
}","@Before public void setUp() throws Exception {
  testFS=new UnixFileSystem();
  workingDir=testFS.getPath(new File(TestUtils.tmpDir()).getCanonicalPath());
  testFile=workingDir.getRelative(""String_Node_Str"");
}",0.9036402569593148
111026,"public void afterExecution(Action action,Token token,MetadataHandler metadataHandler) throws IOException {
  Preconditions.checkArgument(token != null);
  String key=token.cacheKey;
  if (actionCache.get(key) != null) {
    return;
  }
  ActionCache.Entry entry=actionCache.createEntry(action.getKey());
  for (  Artifact output : action.getOutputs()) {
    String execPath=output.getExecPathString();
    if (!key.equals(execPath)) {
      actionCache.remove(key);
    }
    if (!metadataHandler.artifactOmitted(output)) {
      Metadata metadata=metadataHandler.getMetadata(output);
      Preconditions.checkState(metadata != null);
      entry.addFile(output.getExecPath(),metadata);
    }
  }
  for (  Artifact input : action.getInputs()) {
    entry.addFile(input.getExecPath(),metadataHandler.getMetadataMaybe(input));
  }
  entry.getFileDigest();
  actionCache.put(key,entry);
}","public void afterExecution(Action action,Token token,MetadataHandler metadataHandler) throws IOException {
  Preconditions.checkArgument(token != null);
  String key=token.cacheKey;
  if (actionCache.get(key) != null) {
    return;
  }
  ActionCache.Entry entry=actionCache.createEntry(action.getKey());
  for (  Artifact output : action.getOutputs()) {
    String execPath=output.getExecPathString();
    if (!key.equals(execPath)) {
      actionCache.remove(execPath);
    }
    if (!metadataHandler.artifactOmitted(output)) {
      Metadata metadata=metadataHandler.getMetadata(output);
      Preconditions.checkState(metadata != null);
      entry.addFile(output.getExecPath(),metadata);
    }
  }
  for (  Artifact input : action.getInputs()) {
    entry.addFile(input.getExecPath(),metadataHandler.getMetadataMaybe(input));
  }
  entry.getFileDigest();
  actionCache.put(key,entry);
}",0.9938028169014084
111027,"private static Artifact getStubDex(RuleContext ruleContext,JavaSemantics javaSemantics,AndroidSemantics androidSemantics,AndroidTools tools){
  JavaCompilationArgs dep=ruleContext.getPrerequisite(""String_Node_Str"",Mode.TARGET).getProvider(JavaCompilationArgsProvider.class).getJavaCompilationArgs();
  JavaTargetAttributes attributes=new JavaTargetAttributes.Builder(javaSemantics).addRuntimeClassPathEntries(dep.getRuntimeJars()).build();
  Artifact stubDeployJar=getDxArtifact(ruleContext,""String_Node_Str"");
  new DeployArchiveBuilder(javaSemantics,ruleContext).setOutputJar(stubDeployJar).setAttributes(attributes).build();
  Artifact stubDex=getDxArtifact(ruleContext,""String_Node_Str"");
  AndroidCommon.createDexAction(ruleContext,androidSemantics,tools,stubDeployJar,stubDex,ImmutableList.<String>of(),false,null);
  return stubDex;
}","private static Artifact getStubDex(RuleContext ruleContext,JavaSemantics javaSemantics,AndroidSemantics androidSemantics,AndroidTools tools,boolean split){
  JavaCompilationArgs dep=ruleContext.getPrerequisite(split ? ""String_Node_Str"" : ""String_Node_Str"",Mode.TARGET).getProvider(JavaCompilationArgsProvider.class).getJavaCompilationArgs();
  JavaTargetAttributes attributes=new JavaTargetAttributes.Builder(javaSemantics).addRuntimeClassPathEntries(dep.getRuntimeJars()).build();
  Artifact stubDeployJar=getDxArtifact(ruleContext,split ? ""String_Node_Str"" : ""String_Node_Str"");
  new DeployArchiveBuilder(javaSemantics,ruleContext).setOutputJar(stubDeployJar).setAttributes(attributes).build();
  Artifact stubDex=getDxArtifact(ruleContext,split ? ""String_Node_Str"" : ""String_Node_Str"");
  AndroidCommon.createDexAction(ruleContext,androidSemantics,tools,stubDeployJar,stubDex,ImmutableList.<String>of(),false,null);
  return stubDex;
}",0.9449438202247192
111028,"public static RuleConfiguredTargetBuilder createAndroidBinary(RuleContext ruleContext,NestedSetBuilder<Artifact> filesBuilder,Artifact deployJar,JavaCommon javaCommon,AndroidCommon androidCommon,JavaSemantics javaSemantics,AndroidSemantics androidSemantics,AndroidTools tools,NativeLibs nativeLibs,ApplicationManifest applicationManifest,ResourceApk resourceApk,ResourceApk incrementalResourceApk,ResourceApk splitResourceApk,JavaTargetAttributes resourceClasses,ImmutableList<Artifact> apksUnderTest,Artifact proguardMapping){
  ProguardOutput proguardOutput=applyProguard(ruleContext,androidCommon,deployJar,filesBuilder,resourceApk,ruleContext.getPrerequisiteArtifacts(PROGUARD_SPECS,Mode.TARGET).list(),proguardMapping,tools);
  Artifact jarToDex=proguardOutput.outputJar;
  Artifact debugKey=ruleContext.getHostPrerequisiteArtifact(""String_Node_Str"");
  DexingOutput dexingOutput=shouldDexWithJack(ruleContext) ? dexWithJack(ruleContext,androidCommon) : dex(ruleContext,androidSemantics,tools,getMultidexMode(ruleContext),ruleContext.getTokenizedStringListAttr(""String_Node_Str""),deployJar,jarToDex,androidCommon,resourceClasses);
  Artifact unsignedApk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_UNSIGNED_APK);
  Artifact signedApk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_SIGNED_APK);
  ApkActionBuilder apkBuilder=new ApkActionBuilder(ruleContext,tools).classesDex(dexingOutput.classesDexZip).resourceApk(resourceApk.getArtifact()).javaResourceZip(dexingOutput.javaResourceJar).nativeLibs(nativeLibs);
  ruleContext.registerAction(apkBuilder.message(""String_Node_Str"").build(unsignedApk));
  ruleContext.registerAction(apkBuilder.message(""String_Node_Str"").signingKey(debugKey).build(signedApk));
  Artifact zipAlignedApk=zipalignApk(ruleContext,tools,signedApk,ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_APK));
  filesBuilder.add(deployJar);
  filesBuilder.add(unsignedApk);
  filesBuilder.add(zipAlignedApk);
  NestedSet<Artifact> filesToBuild=filesBuilder.build();
  NestedSet<Artifact> coverageMetadata=(androidCommon.getInstrumentedJar() != null) ? NestedSetBuilder.create(Order.STABLE_ORDER,androidCommon.getInstrumentedJar()) : NestedSetBuilder.<Artifact>emptySet(Order.STABLE_ORDER);
  RuleConfiguredTargetBuilder builder=new RuleConfiguredTargetBuilder(ruleContext);
  Artifact incrementalApk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_INCREMENTAL_APK);
  Artifact fullDeployMarker=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.FULL_DEPLOY_MARKER);
  Artifact incrementalDeployMarker=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.INCREMENTAL_DEPLOY_MARKER);
  Artifact splitDeployMarker=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.SPLIT_DEPLOY_MARKER);
  Artifact incrementalDexManifest=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.DEX_MANIFEST);
  ruleContext.registerAction(new SpawnAction.Builder().setMnemonic(""String_Node_Str"").setProgressMessage(""String_Node_Str"" + ruleContext.getLabel()).setExecutable(ruleContext.getExecutablePrerequisite(""String_Node_Str"",Mode.HOST)).addOutputArgument(incrementalDexManifest).addInputArguments(dexingOutput.shardDexZips).useParameterFile(ParameterFileType.UNQUOTED).build(ruleContext));
  Artifact stubData=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.STUB_APPLICATION_DATA);
  Artifact stubDex=getStubDex(ruleContext,javaSemantics,androidSemantics,tools);
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,tools).classesDex(stubDex).resourceApk(incrementalResourceApk.getArtifact()).javaResourceZip(dexingOutput.javaResourceJar).nativeLibs(nativeLibs).signingKey(debugKey).javaResourceFile(stubData).message(""String_Node_Str"").build(incrementalApk));
  Artifact argsArtifact=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.MOBILE_INSTALL_ARGS);
  ruleContext.registerAction(new WriteAdbArgsAction(ruleContext.getActionOwner(),argsArtifact));
  createInstallAction(ruleContext,tools,false,fullDeployMarker,argsArtifact,incrementalDexManifest,incrementalResourceApk.getArtifact(),incrementalApk,stubData);
  createInstallAction(ruleContext,tools,true,incrementalDeployMarker,argsArtifact,incrementalDexManifest,incrementalResourceApk.getArtifact(),incrementalApk,stubData);
  NestedSetBuilder<Artifact> splitApkSetBuilder=NestedSetBuilder.stableOrder();
  for (int i=0; i < dexingOutput.shardDexZips.size(); i++) {
    String splitName=""String_Node_Str"" + (i + 1);
    Artifact splitApkResources=createSplitApkResources(ruleContext,tools,applicationManifest,splitName,true);
    Artifact splitApk=getDxArtifact(ruleContext,splitName + ""String_Node_Str"");
    ruleContext.registerAction(new ApkActionBuilder(ruleContext,tools).classesDex(dexingOutput.shardDexZips.get(i)).resourceApk(splitApkResources).signingKey(debugKey).message(""String_Node_Str"" + (i + 1)).build(splitApk));
    splitApkSetBuilder.add(splitApk);
  }
  Artifact nativeSplitApkResources=createSplitApkResources(ruleContext,tools,applicationManifest,""String_Node_Str"",false);
  Artifact nativeSplitApk=getDxArtifact(ruleContext,""String_Node_Str"");
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,tools).resourceApk(nativeSplitApkResources).signingKey(debugKey).message(""String_Node_Str"").nativeLibs(nativeLibs).build(nativeSplitApk));
  splitApkSetBuilder.add(nativeSplitApk);
  Artifact javaSplitApkResources=createSplitApkResources(ruleContext,tools,applicationManifest,""String_Node_Str"",false);
  Artifact javaSplitApk=getDxArtifact(ruleContext,""String_Node_Str"");
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,tools).resourceApk(javaSplitApkResources).javaResourceZip(dexingOutput.javaResourceJar).signingKey(debugKey).message(""String_Node_Str"").build(javaSplitApk));
  splitApkSetBuilder.add(javaSplitApk);
  Artifact resourceSplitApk=getDxArtifact(ruleContext,""String_Node_Str"");
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,tools).resourceApk(splitResourceApk.getArtifact()).signingKey(debugKey).message(""String_Node_Str"").build(resourceSplitApk));
  splitApkSetBuilder.add(resourceSplitApk);
  Artifact splitMainApkResources=getDxArtifact(ruleContext,""String_Node_Str"");
  ruleContext.registerAction(new SpawnAction.Builder().setMnemonic(""String_Node_Str"").setProgressMessage(""String_Node_Str"").setExecutable(ruleContext.getExecutablePrerequisite(""String_Node_Str"",Mode.HOST)).addArgument(""String_Node_Str"").addInputArgument(resourceApk.getArtifact()).addArgument(""String_Node_Str"").addOutputArgument(splitMainApkResources).build(ruleContext));
  NestedSet<Artifact> splitApks=splitApkSetBuilder.build();
  Artifact splitMainApk=getDxArtifact(ruleContext,""String_Node_Str"");
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,tools).resourceApk(splitMainApkResources).classesDex(stubDex).signingKey(debugKey).message(""String_Node_Str"").build(splitMainApk));
  splitApkSetBuilder.add(splitMainApk);
  NestedSet<Artifact> allSplitApks=splitApkSetBuilder.build();
  createSplitInstallAction(ruleContext,tools,splitDeployMarker,argsArtifact,splitMainApk,splitApks,stubData);
  NestedSet<Artifact> splitOutputGroup=NestedSetBuilder.<Artifact>stableOrder().addTransitive(allSplitApks).add(splitDeployMarker).build();
  androidCommon.addTransitiveInfoProviders(builder,tools);
  androidSemantics.addTransitiveInfoProviders(builder,ruleContext,javaCommon,androidCommon,jarToDex,resourceApk,zipAlignedApk,apksUnderTest);
  if (proguardOutput.mapping != null) {
    builder.add(ProguardMappingProvider.class,new ProguardMappingProvider(proguardOutput.mapping));
  }
  return builder.setFilesToBuild(filesToBuild).add(RunfilesProvider.class,RunfilesProvider.simple(new Runfiles.Builder().addRunfiles(ruleContext,RunfilesProvider.DEFAULT_RUNFILES).addTransitiveArtifacts(filesToBuild).build())).add(ApkProvider.class,new ApkProvider(NestedSetBuilder.create(Order.STABLE_ORDER,zipAlignedApk),coverageMetadata)).add(AndroidPreDexJarProvider.class,new AndroidPreDexJarProvider(jarToDex)).addOutputGroup(""String_Node_Str"",fullDeployMarker).addOutputGroup(""String_Node_Str"",incrementalDeployMarker).addOutputGroup(""String_Node_Str"",splitOutputGroup);
}","public static RuleConfiguredTargetBuilder createAndroidBinary(RuleContext ruleContext,NestedSetBuilder<Artifact> filesBuilder,Artifact deployJar,JavaCommon javaCommon,AndroidCommon androidCommon,JavaSemantics javaSemantics,AndroidSemantics androidSemantics,AndroidTools tools,NativeLibs nativeLibs,ApplicationManifest applicationManifest,ResourceApk resourceApk,ResourceApk incrementalResourceApk,ResourceApk splitResourceApk,JavaTargetAttributes resourceClasses,ImmutableList<Artifact> apksUnderTest,Artifact proguardMapping){
  ProguardOutput proguardOutput=applyProguard(ruleContext,androidCommon,deployJar,filesBuilder,resourceApk,ruleContext.getPrerequisiteArtifacts(PROGUARD_SPECS,Mode.TARGET).list(),proguardMapping,tools);
  Artifact jarToDex=proguardOutput.outputJar;
  Artifact debugKey=ruleContext.getHostPrerequisiteArtifact(""String_Node_Str"");
  DexingOutput dexingOutput=shouldDexWithJack(ruleContext) ? dexWithJack(ruleContext,androidCommon) : dex(ruleContext,androidSemantics,tools,getMultidexMode(ruleContext),ruleContext.getTokenizedStringListAttr(""String_Node_Str""),deployJar,jarToDex,androidCommon,resourceClasses);
  Artifact unsignedApk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_UNSIGNED_APK);
  Artifact signedApk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_SIGNED_APK);
  ApkActionBuilder apkBuilder=new ApkActionBuilder(ruleContext,tools).classesDex(dexingOutput.classesDexZip).resourceApk(resourceApk.getArtifact()).javaResourceZip(dexingOutput.javaResourceJar).nativeLibs(nativeLibs);
  ruleContext.registerAction(apkBuilder.message(""String_Node_Str"").build(unsignedApk));
  ruleContext.registerAction(apkBuilder.message(""String_Node_Str"").signingKey(debugKey).build(signedApk));
  Artifact zipAlignedApk=zipalignApk(ruleContext,tools,signedApk,ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_APK));
  filesBuilder.add(deployJar);
  filesBuilder.add(unsignedApk);
  filesBuilder.add(zipAlignedApk);
  NestedSet<Artifact> filesToBuild=filesBuilder.build();
  NestedSet<Artifact> coverageMetadata=(androidCommon.getInstrumentedJar() != null) ? NestedSetBuilder.create(Order.STABLE_ORDER,androidCommon.getInstrumentedJar()) : NestedSetBuilder.<Artifact>emptySet(Order.STABLE_ORDER);
  RuleConfiguredTargetBuilder builder=new RuleConfiguredTargetBuilder(ruleContext);
  Artifact incrementalApk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_INCREMENTAL_APK);
  Artifact fullDeployMarker=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.FULL_DEPLOY_MARKER);
  Artifact incrementalDeployMarker=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.INCREMENTAL_DEPLOY_MARKER);
  Artifact splitDeployMarker=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.SPLIT_DEPLOY_MARKER);
  Artifact incrementalDexManifest=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.DEX_MANIFEST);
  ruleContext.registerAction(new SpawnAction.Builder().setMnemonic(""String_Node_Str"").setProgressMessage(""String_Node_Str"" + ruleContext.getLabel()).setExecutable(ruleContext.getExecutablePrerequisite(""String_Node_Str"",Mode.HOST)).addOutputArgument(incrementalDexManifest).addInputArguments(dexingOutput.shardDexZips).useParameterFile(ParameterFileType.UNQUOTED).build(ruleContext));
  Artifact stubData=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.STUB_APPLICATION_DATA);
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,tools).classesDex(getStubDex(ruleContext,javaSemantics,androidSemantics,tools,false)).resourceApk(incrementalResourceApk.getArtifact()).javaResourceZip(dexingOutput.javaResourceJar).nativeLibs(nativeLibs).signingKey(debugKey).javaResourceFile(stubData).message(""String_Node_Str"").build(incrementalApk));
  Artifact argsArtifact=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.MOBILE_INSTALL_ARGS);
  ruleContext.registerAction(new WriteAdbArgsAction(ruleContext.getActionOwner(),argsArtifact));
  createInstallAction(ruleContext,tools,false,fullDeployMarker,argsArtifact,incrementalDexManifest,incrementalResourceApk.getArtifact(),incrementalApk,stubData);
  createInstallAction(ruleContext,tools,true,incrementalDeployMarker,argsArtifact,incrementalDexManifest,incrementalResourceApk.getArtifact(),incrementalApk,stubData);
  NestedSetBuilder<Artifact> splitApkSetBuilder=NestedSetBuilder.stableOrder();
  for (int i=0; i < dexingOutput.shardDexZips.size(); i++) {
    String splitName=""String_Node_Str"" + (i + 1);
    Artifact splitApkResources=createSplitApkResources(ruleContext,tools,applicationManifest,splitName,true);
    Artifact splitApk=getDxArtifact(ruleContext,splitName + ""String_Node_Str"");
    ruleContext.registerAction(new ApkActionBuilder(ruleContext,tools).classesDex(dexingOutput.shardDexZips.get(i)).resourceApk(splitApkResources).signingKey(debugKey).message(""String_Node_Str"" + (i + 1)).build(splitApk));
    splitApkSetBuilder.add(splitApk);
  }
  Artifact nativeSplitApkResources=createSplitApkResources(ruleContext,tools,applicationManifest,""String_Node_Str"",false);
  Artifact nativeSplitApk=getDxArtifact(ruleContext,""String_Node_Str"");
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,tools).resourceApk(nativeSplitApkResources).signingKey(debugKey).message(""String_Node_Str"").nativeLibs(nativeLibs).build(nativeSplitApk));
  splitApkSetBuilder.add(nativeSplitApk);
  Artifact javaSplitApkResources=createSplitApkResources(ruleContext,tools,applicationManifest,""String_Node_Str"",false);
  Artifact javaSplitApk=getDxArtifact(ruleContext,""String_Node_Str"");
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,tools).resourceApk(javaSplitApkResources).javaResourceZip(dexingOutput.javaResourceJar).signingKey(debugKey).message(""String_Node_Str"").build(javaSplitApk));
  splitApkSetBuilder.add(javaSplitApk);
  Artifact resourceSplitApk=getDxArtifact(ruleContext,""String_Node_Str"");
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,tools).resourceApk(splitResourceApk.getArtifact()).signingKey(debugKey).message(""String_Node_Str"").build(resourceSplitApk));
  splitApkSetBuilder.add(resourceSplitApk);
  Artifact splitMainApkResources=getDxArtifact(ruleContext,""String_Node_Str"");
  ruleContext.registerAction(new SpawnAction.Builder().setMnemonic(""String_Node_Str"").setProgressMessage(""String_Node_Str"").setExecutable(ruleContext.getExecutablePrerequisite(""String_Node_Str"",Mode.HOST)).addArgument(""String_Node_Str"").addInputArgument(resourceApk.getArtifact()).addArgument(""String_Node_Str"").addOutputArgument(splitMainApkResources).build(ruleContext));
  NestedSet<Artifact> splitApks=splitApkSetBuilder.build();
  Artifact splitMainApk=getDxArtifact(ruleContext,""String_Node_Str"");
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,tools).resourceApk(splitMainApkResources).classesDex(getStubDex(ruleContext,javaSemantics,androidSemantics,tools,true)).signingKey(debugKey).message(""String_Node_Str"").build(splitMainApk));
  splitApkSetBuilder.add(splitMainApk);
  NestedSet<Artifact> allSplitApks=splitApkSetBuilder.build();
  createSplitInstallAction(ruleContext,tools,splitDeployMarker,argsArtifact,splitMainApk,splitApks,stubData);
  NestedSet<Artifact> splitOutputGroup=NestedSetBuilder.<Artifact>stableOrder().addTransitive(allSplitApks).add(splitDeployMarker).build();
  androidCommon.addTransitiveInfoProviders(builder,tools);
  androidSemantics.addTransitiveInfoProviders(builder,ruleContext,javaCommon,androidCommon,jarToDex,resourceApk,zipAlignedApk,apksUnderTest);
  if (proguardOutput.mapping != null) {
    builder.add(ProguardMappingProvider.class,new ProguardMappingProvider(proguardOutput.mapping));
  }
  return builder.setFilesToBuild(filesToBuild).add(RunfilesProvider.class,RunfilesProvider.simple(new Runfiles.Builder().addRunfiles(ruleContext,RunfilesProvider.DEFAULT_RUNFILES).addTransitiveArtifacts(filesToBuild).build())).add(ApkProvider.class,new ApkProvider(NestedSetBuilder.create(Order.STABLE_ORDER,zipAlignedApk),coverageMetadata)).add(AndroidPreDexJarProvider.class,new AndroidPreDexJarProvider(jarToDex)).addOutputGroup(""String_Node_Str"",fullDeployMarker).addOutputGroup(""String_Node_Str"",incrementalDeployMarker).addOutputGroup(""String_Node_Str"",splitOutputGroup);
}",0.9842309558466764
111029,"/** 
 * Prepares a compilation run and sets everything up so that the source files in the build request can be compiled. Invokes compileSources to do the actual compilation.
 * @param build A JavaLibraryBuildRequest request object describing what tocompile
 * @param err PrintWriter for logging any diagnostic output
 */
public void compileJavaLibrary(final JavaLibraryBuildRequest build,final OutputStream err) throws IOException {
  prepareSourceCompilation(build);
  final String[] message={null};
  final JavacRunner javacRunner=new JavacRunnerImpl(build.getPlugins());
  runWithLargeStack(new Runnable(){
    @Override public void run(){
      try {
        internalCompileJavaLibrary(build,javacRunner,err);
      }
 catch (      JavacException e) {
        message[0]=e.getMessage();
      }
catch (      Exception e) {
        e.printStackTrace();
        message[0]=""String_Node_Str"" + e.getMessage();
      }
    }
  }
,4L * 1024 * 1024);
  if (message[0] != null) {
    throw new IOException(""String_Node_Str"" + message[0]);
  }
}","/** 
 * Prepares a compilation run and sets everything up so that the source files in the build request can be compiled. Invokes compileSources to do the actual compilation.
 * @param build A JavaLibraryBuildRequest request object describing what tocompile
 * @param err PrintWriter for logging any diagnostic output
 */
public void compileJavaLibrary(final JavaLibraryBuildRequest build,final OutputStream err) throws IOException {
  prepareSourceCompilation(build);
  final String[] message={null};
  final JavacRunner javacRunner=new JavacRunnerImpl(build.getPlugins());
  runWithLargeStack(new Runnable(){
    @Override public void run(){
      try {
        internalCompileJavaLibrary(build,javacRunner,err);
      }
 catch (      JavacException e) {
        message[0]=e.getMessage();
      }
catch (      Exception e) {
        message[0]=Throwables.getStackTraceAsString(e);
      }
    }
  }
,4L * 1024 * 1024);
  if (message[0] != null) {
    throw new IOException(""String_Node_Str"" + message[0]);
  }
}",0.9581304771178188
111030,"private static int processRequest(List<String> args){
  try {
    JavaLibraryBuildRequest build=parse(args);
    AbstractJavaBuilder builder=build.getDependencyModule().reduceClasspath() ? new ReducedClasspathJavaLibraryBuilder() : new SimpleJavaLibraryBuilder();
    builder.run(build,System.err);
  }
 catch (  IOException|InvalidCommandLineException e) {
    System.err.println(CMDNAME + ""String_Node_Str"" + e.getMessage());
    return 1;
  }
  return 0;
}","private static int processRequest(List<String> args){
  try {
    JavaLibraryBuildRequest build=parse(args);
    AbstractJavaBuilder builder=build.getDependencyModule().reduceClasspath() ? new ReducedClasspathJavaLibraryBuilder() : new SimpleJavaLibraryBuilder();
    builder.run(build,System.err);
  }
 catch (  InvalidCommandLineException e) {
    System.err.println(CMDNAME + ""String_Node_Str"" + e.getMessage());
    return 1;
  }
catch (  IOException e) {
    e.printStackTrace();
    return 1;
  }
  return 0;
}",0.916923076923077
111031,"/** 
 * A simple way to create Jar file using the JarCreator class.
 */
public static void main(String[] args){
  if (args.length < 1) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  String output=args[0];
  JarCreator createJar=new JarCreator(output);
  for (int i=1; i < args.length; i++) {
    createJar.addDirectory(args[i]);
  }
  createJar.setCompression(true);
  createJar.setNormalize(true);
  createJar.setVerbose(true);
  long start=System.currentTimeMillis();
  try {
    createJar.execute();
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.err.println(e.getMessage());
    System.exit(1);
  }
  long stop=System.currentTimeMillis();
  System.err.println((stop - start) + ""String_Node_Str"");
}","/** 
 * A simple way to create Jar file using the JarCreator class.
 */
public static void main(String[] args){
  if (args.length < 1) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  String output=args[0];
  JarCreator createJar=new JarCreator(output);
  for (int i=1; i < args.length; i++) {
    createJar.addDirectory(args[i]);
  }
  createJar.setCompression(true);
  createJar.setNormalize(true);
  createJar.setVerbose(true);
  long start=System.currentTimeMillis();
  try {
    createJar.execute();
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
  long stop=System.currentTimeMillis();
  System.err.println((stop - start) + ""String_Node_Str"");
}",0.9724517906336088
111032,"@Override public ResourceSet estimateResourceConsumption(Executor executor){
  SpawnActionContext context=getContext(executor);
  if (context.isRemotable(getMnemonic(),true)) {
    return ResourceSet.ZERO;
  }
  return LOCAL_RESOURCES;
}","@Override public ResourceSet estimateResourceConsumption(Executor executor){
  if (getContext(executor).isRemotable(getMnemonic(),true)) {
    return ResourceSet.ZERO;
  }
  return LOCAL_RESOURCES;
}",0.9036697247706422
111033,"/** 
 * Gets the name of the target that produced the given jar artifact. When specifying jars directly in the ""srcs"" attribute of a rule (mostly for third_party libraries), there is no generating action, so we just return the jar name in label form.
 */
private static Label getTargetName(Artifact jar){
  return Preconditions.checkNotNull(jar.getOwner(),jar);
}","/** 
 * Gets the name of the target that produced the given jar artifact. <p>When specifying jars directly in the ""srcs"" attribute of a rule (mostly for third_party libraries), there is no generating action, so we just return the jar name in label form.
 */
private static Label getTargetName(Artifact jar){
  return Preconditions.checkNotNull(jar.getOwner(),jar);
}",0.9958847736625516
111034,"@Override @ThreadCompatible public void execute(ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {
  Executor executor=actionExecutionContext.getExecutor();
  try {
    List<ActionInput> outputs=new ArrayList<>();
    outputs.addAll(getOutputs());
    PathFragment classDirectory=getClassDirectory();
    outputs.addAll(semantics.getExtraJavaCompileOutputs(classDirectory));
    outputs.add(ActionInputHelper.fromPath(classDirectory.getChild(""String_Node_Str"").getPathString()));
    try {
      Path classDirectoryPath=executor.getExecRoot().getRelative(getClassDirectory());
      FileSystemUtils.createDirectoryAndParents(classDirectoryPath);
    }
 catch (    IOException e) {
      throw new EnvironmentalExecException(e.getMessage());
    }
    final ImmutableList<ActionInput> finalOutputs=ImmutableList.copyOf(outputs);
    Spawn spawn=new BaseSpawn(getCommand(),ImmutableMap.<String,String>of(),ImmutableMap.<String,String>of(),this,LOCAL_RESOURCES){
      @Override public Collection<? extends ActionInput> getOutputFiles(){
        return finalOutputs;
      }
    }
;
    executor.getSpawnActionContext(getMnemonic()).exec(spawn,actionExecutionContext);
  }
 catch (  ExecException e) {
    throw e.toActionExecutionException(""String_Node_Str"" + getOwner().getLabel() + ""String_Node_Str"",executor.getVerboseFailures(),this);
  }
}","@Override @ThreadCompatible public void execute(ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {
  Executor executor=actionExecutionContext.getExecutor();
  try {
    List<ActionInput> outputs=new ArrayList<>();
    outputs.addAll(getOutputs());
    PathFragment classDirectory=getClassDirectory();
    outputs.addAll(semantics.getExtraJavaCompileOutputs(classDirectory));
    outputs.add(ActionInputHelper.fromPath(classDirectory.getChild(""String_Node_Str"").getPathString()));
    try {
      Path classDirectoryPath=executor.getExecRoot().getRelative(getClassDirectory());
      FileSystemUtils.createDirectoryAndParents(classDirectoryPath);
    }
 catch (    IOException e) {
      throw new EnvironmentalExecException(e.getMessage());
    }
    final ImmutableList<ActionInput> finalOutputs=ImmutableList.copyOf(outputs);
    Spawn spawn=new BaseSpawn(getCommand(),ImmutableMap.<String,String>of(),ImmutableMap.<String,String>of(),this,LOCAL_RESOURCES){
      @Override public Collection<? extends ActionInput> getOutputFiles(){
        return finalOutputs;
      }
    }
;
    getContext(executor).exec(spawn,actionExecutionContext);
  }
 catch (  ExecException e) {
    throw e.toActionExecutionException(""String_Node_Str"" + getOwner().getLabel() + ""String_Node_Str"",executor.getVerboseFailures(),this);
  }
}",0.9829895041621426
111035,"/** 
 * Returns a map from spawn action mnemonics created by this module to the name of the implementation of   {@code SpawnActionContext} that the module wants to use for executingit. <p>If a spawn action is executed whose mnemonic maps to the empty string or is not present in the map at all, the choice of the implementation is left to Blaze.
 */
Map<String,String> getSpawnActionContexts();","/** 
 * Returns a map from spawn action mnemonics created by this module to the name of the implementation of   {@code SpawnActionContext} that the module wants to use for executingit. <p>If a spawn action is executed whose mnemonic maps to the empty string or is not present in the map at all, the choice of the implementation is left to Blaze. <p>Matching on mnemonics is done case-insensitively so it is recommended that any implementation of this method makes sure that no two keys that refer to the same mnemonic are present in the returned map. The easiest way to assure this is to use a map created using {@code new TreeMap<>(String.CASE_INSENSITIVE_ORDER)}.
 */
Map<String,String> getSpawnActionContexts();",0.7111913357400722
111036,"@Override public Map<String,String> getSpawnActionContexts(){
  Map<String,String> contexts=new HashMap<>();
  contexts.put(""String_Node_Str"",options.genruleStrategy);
  for (  Map.Entry<String,String> strategy : options.strategy) {
    String strategyName=strategy.getValue();
    if (strategyName.equals(""String_Node_Str"")) {
      strategyName=""String_Node_Str"";
    }
    contexts.put(strategy.getKey(),strategyName);
  }
  contexts.put(""String_Node_Str"",options.spawnStrategy);
  return ImmutableMap.copyOf(contexts);
}","@Override public Map<String,String> getSpawnActionContexts(){
  Map<String,String> contexts=new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
  contexts.put(""String_Node_Str"",options.genruleStrategy);
  for (  Map.Entry<String,String> strategy : options.strategy) {
    String strategyName=strategy.getValue();
    if (strategyName.equals(""String_Node_Str"")) {
      strategyName=""String_Node_Str"";
    }
    contexts.put(strategy.getKey(),strategyName);
  }
  contexts.put(""String_Node_Str"",options.spawnStrategy);
  return ImmutableMap.copyOf(contexts);
}",0.9656453110492108
111037,"public MavenDownloader(String name,AttributeMap mapper,Path outputDirectory){
  this.name=name;
  this.groupId=mapper.get(""String_Node_Str"",Type.STRING);
  this.artifactId=mapper.get(""String_Node_Str"",Type.STRING);
  this.version=mapper.get(""String_Node_Str"",Type.STRING);
  this.outputDirectory=outputDirectory;
  if (mapper.has(""String_Node_Str"",Type.STRING)) {
    this.sha1=mapper.get(""String_Node_Str"",Type.STRING);
  }
 else {
    this.sha1=null;
  }
  if (mapper.has(""String_Node_Str"",Type.STRING)) {
    this.repositories=ImmutableList.of(new RemoteRepository.Builder(""String_Node_Str"",""String_Node_Str"",mapper.get(""String_Node_Str"",Type.STRING)).build());
  }
 else   if (mapper.has(""String_Node_Str"",Type.STRING_LIST)) {
    this.repositories=Lists.newArrayList();
    for (    String repositoryUrl : mapper.get(""String_Node_Str"",Type.STRING_LIST)) {
      this.repositories.add(new RemoteRepository.Builder(""String_Node_Str"" + repositories.size(),""String_Node_Str"",repositoryUrl).build());
    }
  }
 else {
    this.repositories=Lists.newArrayList();
    this.repositories.add(new RemoteRepository.Builder(""String_Node_Str"",""String_Node_Str"",MAVEN_CENTRAL_URL).build());
  }
}","public MavenDownloader(String name,AttributeMap mapper,Path outputDirectory){
  this.name=name;
  this.groupId=mapper.get(""String_Node_Str"",Type.STRING);
  this.artifactId=mapper.get(""String_Node_Str"",Type.STRING);
  this.version=mapper.get(""String_Node_Str"",Type.STRING);
  this.outputDirectory=outputDirectory;
  if (mapper.has(""String_Node_Str"",Type.STRING)) {
    this.sha1=mapper.get(""String_Node_Str"",Type.STRING);
  }
 else {
    this.sha1=null;
  }
  if (mapper.has(""String_Node_Str"",Type.STRING) && !mapper.get(""String_Node_Str"",Type.STRING).isEmpty()) {
    this.repositories=ImmutableList.of(new RemoteRepository.Builder(""String_Node_Str"",""String_Node_Str"",mapper.get(""String_Node_Str"",Type.STRING)).build());
  }
 else   if (mapper.has(""String_Node_Str"",Type.STRING_LIST) && !mapper.get(""String_Node_Str"",Type.STRING_LIST).isEmpty()) {
    this.repositories=Lists.newArrayList();
    for (    String repositoryUrl : mapper.get(""String_Node_Str"",Type.STRING_LIST)) {
      this.repositories.add(new RemoteRepository.Builder(""String_Node_Str"" + repositories.size(),""String_Node_Str"",repositoryUrl).build());
    }
  }
 else {
    this.repositories=Lists.newArrayList();
    this.repositories.add(new RemoteRepository.Builder(""String_Node_Str"",""String_Node_Str"",MAVEN_CENTRAL_URL).build());
  }
}",0.9530685920577616
111038,"private CommandLine ibActionsCommandLine(String archiveRoot,Artifact zipOutput,Artifact storyboardInput){
  CustomCommandLine.Builder commandLine=CustomCommandLine.builder().addPath(zipOutput.getExecPath()).add(archiveRoot).addPath(ObjcRuleClasses.IBTOOL).add(""String_Node_Str"").add(bundling.getMinimumOsVersion());
  for (  TargetDeviceFamily targetDeviceFamily : attributes.families()) {
    commandLine.add(""String_Node_Str"").add(targetDeviceFamily.name().toLowerCase(Locale.US));
  }
  return commandLine.addPath(storyboardInput.getExecPath()).build();
}","private CommandLine ibActionsCommandLine(String archiveRoot,Artifact zipOutput,Artifact storyboardInput){
  CustomCommandLine.Builder commandLine=CustomCommandLine.builder().addPath(zipOutput.getExecPath()).add(archiveRoot).addPath(ObjcRuleClasses.IBTOOL).add(""String_Node_Str"").add(bundling.getMinimumOsVersion()).add(""String_Node_Str"").add(ruleContext.getLabel().getName());
  for (  TargetDeviceFamily targetDeviceFamily : attributes.families()) {
    commandLine.add(""String_Node_Str"").add(targetDeviceFamily.name().toLowerCase(Locale.US));
  }
  return commandLine.addPath(storyboardInput.getExecPath()).build();
}",0.9481733220050976
111039,"private void registerConvertXibsActions(ObjcProvider objcProvider){
  IntermediateArtifacts intermediateArtifacts=ObjcRuleClasses.intermediateArtifacts(ruleContext);
  for (  Artifact original : objcProvider.get(ObjcProvider.XIB)) {
    Artifact zipOutput=intermediateArtifacts.compiledXibFileZip(original);
    String archiveRoot=BundleableFile.flatBundlePath(FileSystemUtils.replaceExtension(original.getExecPath(),""String_Node_Str""));
    ruleContext.registerAction(ObjcRuleClasses.spawnJavaOnDarwinActionBuilder(attributes.ibtoolzipDeployJar()).setMnemonic(""String_Node_Str"").setCommandLine(CustomCommandLine.builder().addPath(zipOutput.getExecPath()).add(archiveRoot).addPath(ObjcRuleClasses.IBTOOL).add(""String_Node_Str"").add(bundling.getMinimumOsVersion()).addPath(original.getExecPath()).build()).addOutput(zipOutput).addInput(original).build(ruleContext));
  }
}","private void registerConvertXibsActions(ObjcProvider objcProvider){
  IntermediateArtifacts intermediateArtifacts=ObjcRuleClasses.intermediateArtifacts(ruleContext);
  for (  Artifact original : objcProvider.get(ObjcProvider.XIB)) {
    Artifact zipOutput=intermediateArtifacts.compiledXibFileZip(original);
    String archiveRoot=BundleableFile.flatBundlePath(FileSystemUtils.replaceExtension(original.getExecPath(),""String_Node_Str""));
    ruleContext.registerAction(ObjcRuleClasses.spawnJavaOnDarwinActionBuilder(attributes.ibtoolzipDeployJar()).setMnemonic(""String_Node_Str"").setCommandLine(ibActionsCommandLine(archiveRoot,zipOutput,original)).addOutput(zipOutput).addInput(original).build(ruleContext));
  }
}",0.8638083228247163
111040,"@Override public Iterable<String> subCommand(Arguments args,String outputDirectory){
  return new ImmutableList.Builder<String>().add(args.subtoolCmd()).add(""String_Node_Str"").add(outputDirectory).addAll(Iterables.transform(args.subtoolExtraArgs(),CANONICAL_PATH)).build();
}","@Override public Iterable<String> subCommand(Arguments args,String outputDirectory){
  return new ImmutableList.Builder<String>().add(args.subtoolCmd()).add(""String_Node_Str"").add(outputDirectory).addAll(Iterables.transform(args.subtoolExtraArgs(),Wrappers.CANONICALIZE_IF_PATH)).build();
}",0.9734513274336284
111041,"@Override public Iterable<String> subCommand(Arguments args,String outputDirectory){
  return new ImmutableList.Builder<String>().add(args.subtoolCmd()).add(""String_Node_Str"").add(outputDirectory).addAll(args.subtoolExtraArgs()).build();
}","@Override public Iterable<String> subCommand(Arguments args,String outputDirectory){
  return new ImmutableList.Builder<String>().add(args.subtoolCmd()).add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(""String_Node_Str"").add(Wrappers.CANONICALIZE_IF_PATH.apply(outputDirectory)).addAll(Iterables.transform(args.subtoolExtraArgs(),Wrappers.CANONICALIZE_IF_PATH)).build();
}",0.6590909090909091
111042,"/** 
 * Regression test: IllegalStateException in BuildingState.isReady(). The ParallelEvaluator used to assume during cycle-checking that all values had been built as fully as possible -- that evaluation had not been interrupted. However, we also do cycle-checking in nokeep-going mode when a value throws an error (possibly prematurely shutting down evaluation) but that error then bubbles up into a cycle. <p>We want to achieve the following state: we are checking for a cycle; the value we examine has not yet finished checking its children to see if they are dirty; but all children checked so far have been unchanged. This value is ""otherTop"". We first build otherTop, then mark its first child changed (without actually changing it), and then do a second build. On the second build, we also build ""top"", which requests a cycle that depends on an error. We wait to signal otherTop that its first child is done until the error throws and shuts down evaluation. The error then bubbles up to the cycle, and so the bubbling is aborted. Finally, cycle checking happens, and otherTop is examined, as desired.
 */
@Test public void cycleAndErrorAndReady() throws Exception {
  final SkyKey otherTop=GraphTester.toSkyKey(""String_Node_Str"");
  final SkyKey errorKey=GraphTester.toSkyKey(""String_Node_Str"");
  final CountDownLatch valuesReady=new CountDownLatch(3);
  final CountDownLatch errorThrown=new CountDownLatch(1);
  final AtomicBoolean secondBuild=new AtomicBoolean(false);
  final TrackingAwaiter trackingAwaiter=new TrackingAwaiter();
  setGraphForTesting(new DeterministicInMemoryGraph(new Listener(){
    @Override public void accept(    SkyKey key,    EventType type,    Order order,    Object context){
      if (!secondBuild.get()) {
        return;
      }
      if (key.equals(errorKey) && type == EventType.SET_VALUE) {
        trackingAwaiter.awaitLatchAndTrackExceptions(valuesReady,""String_Node_Str"");
        return;
      }
      if (key.equals(otherTop) && type == EventType.SIGNAL) {
        valuesReady.countDown();
        trackingAwaiter.awaitLatchAndTrackExceptions(errorThrown,""String_Node_Str"");
        return;
      }
    }
  }
));
  final SkyKey dep1=GraphTester.toSkyKey(""String_Node_Str"");
  tester.set(dep1,new StringValue(""String_Node_Str""));
  final SkyKey dep2=GraphTester.toSkyKey(""String_Node_Str"");
  tester.set(dep2,new StringValue(""String_Node_Str""));
  tester.getOrCreate(otherTop).setBuilder(new NoExtractorFunction(){
    @Override public SkyValue compute(    SkyKey skyKey,    Environment env){
      env.getValue(dep1);
      if (env.valuesMissing()) {
        return null;
      }
      env.getValue(dep2);
      return env.valuesMissing() ? null : new StringValue(""String_Node_Str"");
    }
  }
);
  assertEquals(new StringValue(""String_Node_Str""),tester.evalAndGet(false,otherTop));
  tester.getOrCreate(dep1,true);
  SkyKey topKey=GraphTester.toSkyKey(""String_Node_Str"");
  final SkyKey cycle1Key=GraphTester.toSkyKey(""String_Node_Str"");
  final SkyKey cycle2Key=GraphTester.toSkyKey(""String_Node_Str"");
  tester.getOrCreate(topKey).addDependency(cycle1Key).setComputedValue(CONCATENATE);
  tester.getOrCreate(cycle1Key).addDependency(errorKey).addDependency(cycle2Key).setComputedValue(CONCATENATE);
  tester.getOrCreate(errorKey).setHasError(true);
  tester.getOrCreate(cycle2Key).setBuilder(new ChainedFunction(valuesReady,null,null,false,new StringValue(""String_Node_Str""),ImmutableList.<SkyKey>of(cycle1Key)));
  final SkyKey exceptionMarker=GraphTester.toSkyKey(""String_Node_Str"");
  tester.getOrCreate(exceptionMarker).setBuilder(new ChainedFunction(valuesReady,new CountDownLatch(0),errorThrown,true,new StringValue(""String_Node_Str""),ImmutableList.<SkyKey>of()));
  tester.invalidate();
  secondBuild.set(true);
  EvaluationResult<StringValue> result=tester.eval(false,otherTop,topKey,exceptionMarker);
  trackingAwaiter.assertNoErrors();
  assertThat(result.errorMap().keySet()).containsExactly(topKey);
  Iterable<CycleInfo> cycleInfos=result.getError(topKey).getCycleInfo();
  assertWithMessage(result.toString()).that(cycleInfos).isNotEmpty();
  CycleInfo cycleInfo=Iterables.getOnlyElement(cycleInfos);
  assertThat(cycleInfo.getPathToCycle()).containsExactly(topKey);
  assertThat(cycleInfo.getCycle()).containsExactly(cycle1Key,cycle2Key);
}","/** 
 * Regression test: IllegalStateException in BuildingState.isReady(). The ParallelEvaluator used to assume during cycle-checking that all values had been built as fully as possible -- that evaluation had not been interrupted. However, we also do cycle-checking in nokeep-going mode when a value throws an error (possibly prematurely shutting down evaluation) but that error then bubbles up into a cycle. <p>We want to achieve the following state: we are checking for a cycle; the value we examine has not yet finished checking its children to see if they are dirty; but all children checked so far have been unchanged. This value is ""otherTop"". We first build otherTop, then mark its first child changed (without actually changing it), and then do a second build. On the second build, we also build ""top"", which requests a cycle that depends on an error. We wait to signal otherTop that its first child is done until the error throws and shuts down evaluation. The error then bubbles up to the cycle, and so the bubbling is aborted. Finally, cycle checking happens, and otherTop is examined, as desired.
 */
@Test public void cycleAndErrorAndReady() throws Exception {
  final SkyKey otherTop=GraphTester.toSkyKey(""String_Node_Str"");
  final SkyKey errorKey=GraphTester.toSkyKey(""String_Node_Str"");
  final CountDownLatch valuesReady=new CountDownLatch(3);
  final CountDownLatch errorThrown=new CountDownLatch(1);
  final AtomicBoolean secondBuild=new AtomicBoolean(false);
  final TrackingAwaiter trackingAwaiter=new TrackingAwaiter();
  setGraphForTesting(new DeterministicInMemoryGraph(new Listener(){
    @Override public void accept(    SkyKey key,    EventType type,    Order order,    Object context){
      if (!secondBuild.get()) {
        return;
      }
      if (key.equals(otherTop) && type == EventType.SIGNAL) {
        valuesReady.countDown();
        trackingAwaiter.awaitLatchAndTrackExceptions(errorThrown,""String_Node_Str"");
        return;
      }
    }
  }
));
  final SkyKey dep1=GraphTester.toSkyKey(""String_Node_Str"");
  tester.set(dep1,new StringValue(""String_Node_Str""));
  final SkyKey dep2=GraphTester.toSkyKey(""String_Node_Str"");
  tester.set(dep2,new StringValue(""String_Node_Str""));
  tester.getOrCreate(otherTop).setBuilder(new NoExtractorFunction(){
    @Override public SkyValue compute(    SkyKey skyKey,    Environment env){
      env.getValue(dep1);
      if (env.valuesMissing()) {
        return null;
      }
      env.getValue(dep2);
      return env.valuesMissing() ? null : new StringValue(""String_Node_Str"");
    }
  }
);
  assertEquals(new StringValue(""String_Node_Str""),tester.evalAndGet(false,otherTop));
  tester.getOrCreate(dep1,true);
  SkyKey topKey=GraphTester.toSkyKey(""String_Node_Str"");
  final SkyKey cycle1Key=GraphTester.toSkyKey(""String_Node_Str"");
  final SkyKey cycle2Key=GraphTester.toSkyKey(""String_Node_Str"");
  tester.getOrCreate(topKey).addDependency(cycle1Key).setComputedValue(CONCATENATE);
  tester.getOrCreate(cycle1Key).addDependency(errorKey).addDependency(cycle2Key).setComputedValue(CONCATENATE);
  tester.getOrCreate(errorKey).setBuilder(new ChainedFunction(null,valuesReady,null,false,null,ImmutableList.<SkyKey>of()));
  tester.getOrCreate(cycle2Key).setBuilder(new ChainedFunction(valuesReady,null,null,false,new StringValue(""String_Node_Str""),ImmutableList.<SkyKey>of(cycle1Key)));
  final SkyKey exceptionMarker=GraphTester.toSkyKey(""String_Node_Str"");
  tester.getOrCreate(exceptionMarker).setBuilder(new ChainedFunction(valuesReady,new CountDownLatch(0),errorThrown,true,new StringValue(""String_Node_Str""),ImmutableList.<SkyKey>of()));
  tester.invalidate();
  secondBuild.set(true);
  EvaluationResult<StringValue> result=tester.eval(false,otherTop,topKey,exceptionMarker);
  trackingAwaiter.assertNoErrors();
  assertThat(result.errorMap().keySet()).containsExactly(topKey);
  Iterable<CycleInfo> cycleInfos=result.getError(topKey).getCycleInfo();
  assertWithMessage(result.toString()).that(cycleInfos).isNotEmpty();
  CycleInfo cycleInfo=Iterables.getOnlyElement(cycleInfos);
  assertThat(cycleInfo.getPathToCycle()).containsExactly(topKey);
  assertThat(cycleInfo.getCycle()).containsExactly(cycle1Key,cycle2Key);
}",0.900317013032758
111043,"/** 
 * Generates a project file. 
 */
public static PBXProject xcodeproj(Path workspaceRoot,Control control,Iterable<PbxReferencesProcessor> postProcessors){
  checkArgument(control.hasPbxproj(),""String_Node_Str"");
  FileSystem fileSystem=workspaceRoot.getFileSystem();
  XcodeprojPath<Path> outputPath=XcodeprojPath.converter().fromPath(RelativePaths.fromString(fileSystem,control.getPbxproj()));
  NSDictionary projBuildConfigMap=new NSDictionary();
  projBuildConfigMap.put(""String_Node_Str"",new NSArray(new NSString(""String_Node_Str""),new NSString(""String_Node_Str""),new NSString(""String_Node_Str"")));
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  for (  XcodeprojBuildSetting projectSetting : control.getBuildSettingList()) {
    projBuildConfigMap.put(projectSetting.getName(),projectSetting.getValue());
  }
  PBXProject project=new PBXProject(outputPath.getProjectName());
  project.getMainGroup().setPath(""String_Node_Str"");
  try {
    project.getBuildConfigurationList().getBuildConfigurationsByName().get(DEFAULT_OPTIONS_NAME).setBuildSettings(projBuildConfigMap);
  }
 catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
  Map<String,TargetInfo> targetInfoByLabel=new HashMap<>();
  PBXFileReferences fileReferences=new PBXFileReferences();
  LibraryObjects libraryObjects=new LibraryObjects(fileReferences);
  PBXBuildFiles pbxBuildFiles=new PBXBuildFiles(fileReferences);
  Resources resources=Resources.fromTargetControls(fileSystem,pbxBuildFiles,control.getTargetList());
  Xcdatamodels xcdatamodels=Xcdatamodels.fromTargetControls(fileSystem,pbxBuildFiles,control.getTargetList());
  Set<PBXReference> projectNavigatorFiles=new LinkedHashSet<>();
  for (  TargetControl targetControl : control.getTargetList()) {
    checkArgument(targetControl.hasName(),""String_Node_Str"",targetControl);
    checkArgument(targetControl.hasLabel(),""String_Node_Str"",targetControl);
    ProductType productType=productType(targetControl);
    Preconditions.checkArgument((productType != ProductType.APPLICATION) || hasAtLeastOneCompilableSource(targetControl),APP_NEEDS_SOURCE_ERROR);
    PBXSourcesBuildPhase sourcesBuildPhase=new PBXSourcesBuildPhase();
    for (    SourceFile source : SourceFile.allSourceFiles(fileSystem,targetControl)) {
      PBXFileReference fileRef=fileReferences.get(FileReference.of(source.path().toString(),SourceTree.GROUP));
      projectNavigatorFiles.add(fileRef);
      if (Equaling.of(source.buildType(),BuildType.NO_BUILD)) {
        continue;
      }
      PBXBuildFile buildFile=new PBXBuildFile(fileRef);
      if (Equaling.of(source.buildType(),BuildType.NON_ARC_BUILD)) {
        buildFile.setSettings(Optional.of(nonArcCompileSettings()));
      }
      sourcesBuildPhase.getFiles().add(buildFile);
    }
    sourcesBuildPhase.getFiles().addAll(xcdatamodels.buildFiles().get(targetControl));
    PBXFileReference productReference=fileReferences.get(productReference(targetControl));
    projectNavigatorFiles.add(productReference);
    NSDictionary targetBuildConfigMap=new NSDictionary();
    targetBuildConfigMap.put(""String_Node_Str"",headerSearchPaths(plus(targetControl.getUserHeaderSearchPathList(),""String_Node_Str"")));
    targetBuildConfigMap.put(""String_Node_Str"",headerSearchPaths(plus(targetControl.getHeaderSearchPathList(),""String_Node_Str"")));
    targetBuildConfigMap.put(""String_Node_Str"",frameworkSearchPaths(targetControl.getFrameworkList()));
    targetBuildConfigMap.put(""String_Node_Str"",workspaceRoot.toString());
    if (targetControl.hasPchPath()) {
      targetBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"" + targetControl.getPchPath());
    }
    targetBuildConfigMap.put(""String_Node_Str"",productName(targetControl));
    if (targetControl.hasInfoplist()) {
      targetBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"" + targetControl.getInfoplist());
    }
    if (targetControl.getCoptCount() > 0) {
      targetBuildConfigMap.put(""String_Node_Str"",NSObject.wrap(targetControl.getCoptList()));
    }
    targetBuildConfigMap.put(""String_Node_Str"",NSObject.wrap(otherLdflags(targetControl)));
    for (    XcodeprojBuildSetting setting : targetControl.getBuildSettingList()) {
      String name=setting.getName();
      String value=setting.getValue();
      if (name.equals(""String_Node_Str"") && !value.startsWith(""String_Node_Str"")) {
        value=""String_Node_Str"" + value;
      }
      targetBuildConfigMap.put(name,value);
    }
    PBXNativeTarget target=new PBXNativeTarget(labelToXcodeTargetName(targetControl.getLabel()),productType);
    try {
      target.getBuildConfigurationList().getBuildConfigurationsByName().get(DEFAULT_OPTIONS_NAME).setBuildSettings(targetBuildConfigMap);
    }
 catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
    target.setProductReference(productReference);
    PBXFrameworksBuildPhase frameworksPhase=buildLibraryInfo(libraryObjects,targetControl);
    PBXResourcesBuildPhase resourcesPhase=resources.resourcesBuildPhase(targetControl);
    for (    String importedArchive : targetControl.getImportedLibraryList()) {
      PBXFileReference fileReference=fileReferences.get(FileReference.of(importedArchive,SourceTree.GROUP).withExplicitFileType(FILE_TYPE_ARCHIVE_LIBRARY));
      projectNavigatorFiles.add(fileReference);
    }
    project.getTargets().add(target);
    target.getBuildPhases().add(frameworksPhase);
    target.getBuildPhases().add(sourcesBuildPhase);
    target.getBuildPhases().add(resourcesPhase);
    checkState(!Mapping.of(targetInfoByLabel,targetControl.getLabel()).isPresent(),""String_Node_Str"",targetControl.getLabel(),targetInfoByLabel);
    targetInfoByLabel.put(targetControl.getLabel(),new TargetInfo(targetControl,target,frameworksPhase,resourcesPhase,new PBXBuildFile(productReference),new LocalPBXTargetDependency(new LocalPBXContainerItemProxy(project,target,ProxyType.TARGET_REFERENCE)),targetBuildConfigMap));
  }
  for (  HasProjectNavigatorFiles references : ImmutableList.of(pbxBuildFiles,libraryObjects)) {
    Iterables.addAll(projectNavigatorFiles,references.mainGroupReferences());
  }
  Iterable<PBXReference> processedProjectFiles=projectNavigatorFiles;
  for (  PbxReferencesProcessor postProcessor : postProcessors) {
    processedProjectFiles=postProcessor.process(processedProjectFiles);
  }
  Iterables.addAll(project.getMainGroup().getChildren(),processedProjectFiles);
  for (  TargetInfo targetInfo : targetInfoByLabel.values()) {
    for (    DependencyControl dependency : targetInfo.control.getDependencyList()) {
      targetInfo.addDependencyInfo(dependency,targetInfoByLabel);
    }
  }
  return project;
}","/** 
 * Generates a project file. 
 */
public static PBXProject xcodeproj(Path workspaceRoot,Control control,Iterable<PbxReferencesProcessor> postProcessors){
  checkArgument(control.hasPbxproj(),""String_Node_Str"");
  FileSystem fileSystem=workspaceRoot.getFileSystem();
  XcodeprojPath<Path> outputPath=XcodeprojPath.converter().fromPath(RelativePaths.fromString(fileSystem,control.getPbxproj()));
  NSDictionary projBuildConfigMap=new NSDictionary();
  projBuildConfigMap.put(""String_Node_Str"",new NSArray(new NSString(""String_Node_Str""),new NSString(""String_Node_Str""),new NSString(""String_Node_Str"")));
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  projBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"");
  for (  XcodeprojBuildSetting projectSetting : control.getBuildSettingList()) {
    projBuildConfigMap.put(projectSetting.getName(),projectSetting.getValue());
  }
  PBXProject project=new PBXProject(outputPath.getProjectName());
  project.getMainGroup().setPath(workspaceRoot.toString());
  try {
    project.getBuildConfigurationList().getBuildConfigurationsByName().get(DEFAULT_OPTIONS_NAME).setBuildSettings(projBuildConfigMap);
  }
 catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
  Map<String,TargetInfo> targetInfoByLabel=new HashMap<>();
  PBXFileReferences fileReferences=new PBXFileReferences();
  LibraryObjects libraryObjects=new LibraryObjects(fileReferences);
  PBXBuildFiles pbxBuildFiles=new PBXBuildFiles(fileReferences);
  Resources resources=Resources.fromTargetControls(fileSystem,pbxBuildFiles,control.getTargetList());
  Xcdatamodels xcdatamodels=Xcdatamodels.fromTargetControls(fileSystem,pbxBuildFiles,control.getTargetList());
  Set<PBXReference> projectNavigatorFiles=new LinkedHashSet<>();
  for (  TargetControl targetControl : control.getTargetList()) {
    checkArgument(targetControl.hasName(),""String_Node_Str"",targetControl);
    checkArgument(targetControl.hasLabel(),""String_Node_Str"",targetControl);
    ProductType productType=productType(targetControl);
    Preconditions.checkArgument((productType != ProductType.APPLICATION) || hasAtLeastOneCompilableSource(targetControl),APP_NEEDS_SOURCE_ERROR);
    PBXSourcesBuildPhase sourcesBuildPhase=new PBXSourcesBuildPhase();
    for (    SourceFile source : SourceFile.allSourceFiles(fileSystem,targetControl)) {
      PBXFileReference fileRef=fileReferences.get(FileReference.of(source.path().toString(),SourceTree.GROUP));
      projectNavigatorFiles.add(fileRef);
      if (Equaling.of(source.buildType(),BuildType.NO_BUILD)) {
        continue;
      }
      PBXBuildFile buildFile=new PBXBuildFile(fileRef);
      if (Equaling.of(source.buildType(),BuildType.NON_ARC_BUILD)) {
        buildFile.setSettings(Optional.of(nonArcCompileSettings()));
      }
      sourcesBuildPhase.getFiles().add(buildFile);
    }
    sourcesBuildPhase.getFiles().addAll(xcdatamodels.buildFiles().get(targetControl));
    PBXFileReference productReference=fileReferences.get(productReference(targetControl));
    projectNavigatorFiles.add(productReference);
    NSDictionary targetBuildConfigMap=new NSDictionary();
    targetBuildConfigMap.put(""String_Node_Str"",headerSearchPaths(plus(targetControl.getUserHeaderSearchPathList(),""String_Node_Str"")));
    targetBuildConfigMap.put(""String_Node_Str"",headerSearchPaths(plus(targetControl.getHeaderSearchPathList(),""String_Node_Str"")));
    targetBuildConfigMap.put(""String_Node_Str"",frameworkSearchPaths(targetControl.getFrameworkList()));
    targetBuildConfigMap.put(""String_Node_Str"",workspaceRoot.toString());
    if (targetControl.hasPchPath()) {
      targetBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"" + targetControl.getPchPath());
    }
    targetBuildConfigMap.put(""String_Node_Str"",productName(targetControl));
    if (targetControl.hasInfoplist()) {
      targetBuildConfigMap.put(""String_Node_Str"",""String_Node_Str"" + targetControl.getInfoplist());
    }
    if (targetControl.getCoptCount() > 0) {
      targetBuildConfigMap.put(""String_Node_Str"",NSObject.wrap(targetControl.getCoptList()));
    }
    targetBuildConfigMap.put(""String_Node_Str"",NSObject.wrap(otherLdflags(targetControl)));
    for (    XcodeprojBuildSetting setting : targetControl.getBuildSettingList()) {
      String name=setting.getName();
      String value=setting.getValue();
      if (name.equals(""String_Node_Str"") && !value.startsWith(""String_Node_Str"")) {
        value=""String_Node_Str"" + value;
      }
      targetBuildConfigMap.put(name,value);
    }
    PBXNativeTarget target=new PBXNativeTarget(labelToXcodeTargetName(targetControl.getLabel()),productType);
    try {
      target.getBuildConfigurationList().getBuildConfigurationsByName().get(DEFAULT_OPTIONS_NAME).setBuildSettings(targetBuildConfigMap);
    }
 catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
    target.setProductReference(productReference);
    PBXFrameworksBuildPhase frameworksPhase=buildLibraryInfo(libraryObjects,targetControl);
    PBXResourcesBuildPhase resourcesPhase=resources.resourcesBuildPhase(targetControl);
    for (    String importedArchive : targetControl.getImportedLibraryList()) {
      PBXFileReference fileReference=fileReferences.get(FileReference.of(importedArchive,SourceTree.GROUP).withExplicitFileType(FILE_TYPE_ARCHIVE_LIBRARY));
      projectNavigatorFiles.add(fileReference);
    }
    project.getTargets().add(target);
    target.getBuildPhases().add(frameworksPhase);
    target.getBuildPhases().add(sourcesBuildPhase);
    target.getBuildPhases().add(resourcesPhase);
    checkState(!Mapping.of(targetInfoByLabel,targetControl.getLabel()).isPresent(),""String_Node_Str"",targetControl.getLabel(),targetInfoByLabel);
    targetInfoByLabel.put(targetControl.getLabel(),new TargetInfo(targetControl,target,frameworksPhase,resourcesPhase,new PBXBuildFile(productReference),new LocalPBXTargetDependency(new LocalPBXContainerItemProxy(project,target,ProxyType.TARGET_REFERENCE)),targetBuildConfigMap));
  }
  for (  HasProjectNavigatorFiles references : ImmutableList.of(pbxBuildFiles,libraryObjects)) {
    Iterables.addAll(projectNavigatorFiles,references.mainGroupReferences());
  }
  Iterable<PBXReference> processedProjectFiles=projectNavigatorFiles;
  for (  PbxReferencesProcessor postProcessor : postProcessors) {
    processedProjectFiles=postProcessor.process(processedProjectFiles);
  }
  Iterables.addAll(project.getMainGroup().getChildren(),processedProjectFiles);
  for (  TargetInfo targetInfo : targetInfoByLabel.values()) {
    for (    DependencyControl dependency : targetInfo.control.getDependencyList()) {
      targetInfo.addDependencyInfo(dependency,targetInfoByLabel);
    }
  }
  return project;
}",0.9970360731583894
111044,"/** 
 * Recalculates this action's live input collection, including sources, middlemen.
 * @throws ActionExecutionException iff any errors happen during update.
 */
@VisibleForTesting @ThreadCompatible public final void updateActionInputs(Path execRoot,ArtifactResolver artifactResolver,CppCompileActionContext.Reply reply) throws ActionExecutionException {
  if (!cppConfiguration.shouldScanIncludes()) {
    return;
  }
  inputsKnown=false;
  NestedSetBuilder<Artifact> inputs=NestedSetBuilder.stableOrder();
  Profiler.instance().startTask(ProfilerTask.ACTION_UPDATE,this);
  try {
    inputs.addTransitive(mandatoryInputs);
    if (optionalSourceFile != null) {
      inputs.add(optionalSourceFile);
    }
    inputs.addAll(context.getCompilationPrerequisites());
    populateActionInputs(execRoot,artifactResolver,reply,inputs);
    inputsKnown=true;
  }
  finally {
    Profiler.instance().completeTask(ProfilerTask.ACTION_UPDATE);
synchronized (this) {
      setInputs(inputs.build());
    }
  }
}","/** 
 * Recalculates this action's live input collection, including sources, middlemen.
 * @throws ActionExecutionException iff any errors happen during update.
 */
@VisibleForTesting @ThreadCompatible public final synchronized void updateActionInputs(Path execRoot,ArtifactResolver artifactResolver,CppCompileActionContext.Reply reply) throws ActionExecutionException {
  if (!cppConfiguration.shouldScanIncludes()) {
    return;
  }
  inputsKnown=false;
  NestedSetBuilder<Artifact> inputs=NestedSetBuilder.stableOrder();
  Profiler.instance().startTask(ProfilerTask.ACTION_UPDATE,this);
  try {
    inputs.addTransitive(mandatoryInputs);
    if (optionalSourceFile != null) {
      inputs.add(optionalSourceFile);
    }
    inputs.addAll(context.getCompilationPrerequisites());
    populateActionInputs(execRoot,artifactResolver,reply,inputs);
    inputsKnown=true;
  }
  finally {
    Profiler.instance().completeTask(ProfilerTask.ACTION_UPDATE);
synchronized (this) {
      setInputs(inputs.build());
    }
  }
}",0.9935675408213755
111045,"@Override public boolean inputsKnown(){
  return inputsKnown;
}","@Override public synchronized boolean inputsKnown(){
  return inputsKnown;
}",0.9064748201438848
111046,"@Override public boolean inputsKnown(){
  return inputsKnown;
}","@Override public synchronized boolean inputsKnown(){
  return inputsKnown;
}",0.9064748201438848
111047,"@Nullable @Override public Collection<Artifact> discoverInputs(ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {
  Preconditions.checkState(discoversInputs(),this);
  if (getContext(actionExecutionContext.getExecutor()).isRemotable(getMnemonic(),isRemotable())) {
    if (shadowedAction.discoversInputs() && shadowedAction instanceof AbstractAction) {
      Iterable<Artifact> additionalInputs=((AbstractAction)shadowedAction).getInputFilesForExtraAction(actionExecutionContext);
      updateInputs(additionalInputs);
      return ImmutableSet.copyOf(additionalInputs);
    }
  }
  return null;
}","@Nullable @Override public Collection<Artifact> discoverInputs(ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {
  Preconditions.checkState(discoversInputs(),this);
  if (getContext(actionExecutionContext.getExecutor()).isRemotable(getMnemonic(),isRemotable())) {
    if (shadowedAction.discoversInputs() && shadowedAction instanceof AbstractAction) {
      Iterable<Artifact> additionalInputs=((AbstractAction)shadowedAction).getInputFilesForExtraAction(actionExecutionContext);
      updateExtraActionInputs(additionalInputs);
      return ImmutableSet.copyOf(additionalInputs);
    }
  }
  return null;
}",0.9915966386554622
111048,"@Override public void updateInputs(Iterable<Artifact> shadowedActionInputs){
  shadowedAction.updateInputs(shadowedActionInputs);
  Preconditions.checkArgument(shadowedAction.inputsKnown(),""String_Node_Str"",this,shadowedAction);
synchronized (this) {
    setInputs(createInputs(shadowedActionInputs,extraActionInputs));
    inputsKnown=true;
  }
}","@Override public void updateInputs(Iterable<Artifact> discoveredInputs){
  shadowedAction.updateInputs(Iterables.filter(discoveredInputs,Predicates.not(Predicates.in(extraActionInputs))));
  Preconditions.checkArgument(shadowedAction.inputsKnown(),""String_Node_Str"",this,shadowedAction);
  updateExtraActionInputs(discoveredInputs);
}",0.631424375917768
111049,"/** 
 * Fetches all the given nodes. Returns a map   {@code m} such that {@code m.get(k).equals(e)} forall  {@code k} such that {@code get(k) == e} and {@code e != null}.
 */
Map<SkyKey,NodeEntry> getBatch(Iterable<SkyKey> keys);","/** 
 * Fetches all the given nodes. Returns a map   {@code m} such that, for all {@code k} in{@code keys},   {@code m.get(k).equals(e)} iff {@code get(k) == e} and {@code e != null}, and  {@code !m.containsKey(k)} iff {@code get(k) == null}.
 */
Map<SkyKey,NodeEntry> getBatch(Iterable<SkyKey> keys);",0.7622641509433963
111050,"private ActionExecutionValue checkCacheAndExecuteIfNeeded(Action action,Map<Artifact,FileArtifactValue> inputArtifactData,Map<Artifact,Collection<Artifact>> expandedMiddlemen,Environment env) throws ActionExecutionException, InterruptedException {
  if (inputArtifactData == null) {
    return skyframeActionExecutor.executeAction(action,null,null,-1,null);
  }
  ContinuationState state;
  if (action.discoversInputs()) {
    state=getState(action);
  }
 else {
    state=new ContinuationState();
  }
  FileAndMetadataCache fileAndMetadataCache=new FileAndMetadataCache(inputArtifactData,expandedMiddlemen,skyframeActionExecutor.getExecRoot(),action.getOutputs(),action.discoversInputs() ? env : null,tsgm);
  MetadataHandler metadataHandler=skyframeActionExecutor.constructMetadataHandler(fileAndMetadataCache);
  long actionStartTime=System.nanoTime();
  if (!state.hasDiscoveredInputs()) {
    Token token=skyframeActionExecutor.checkActionCache(action,metadataHandler,new PackageRootResolverWithEnvironment(env),actionStartTime);
    if (token == Token.NEED_TO_RERUN) {
      return null;
    }
    state.token=token;
  }
  if (state.token == null) {
    return new ActionExecutionValue(fileAndMetadataCache.getOutputData(),fileAndMetadataCache.getAdditionalOutputData());
  }
  ActionExecutionContext actionExecutionContext=skyframeActionExecutor.constructActionExecutionContext(fileAndMetadataCache,metadataHandler);
  boolean inputsDiscoveredDuringActionExecution=false;
  try {
    if (action.discoversInputs()) {
      if (!state.hasDiscoveredInputs()) {
        state.discoveredInputs=skyframeActionExecutor.discoverInputs(action,actionExecutionContext);
        if (state.discoveredInputs == null) {
          inputsDiscoveredDuringActionExecution=true;
        }
      }
      if (state.discoveredInputs != null && !inputArtifactData.keySet().containsAll(state.discoveredInputs)) {
        inputArtifactData=addDiscoveredInputs(inputArtifactData,state.discoveredInputs,env);
        if (env.valuesMissing()) {
          return null;
        }
        fileAndMetadataCache=new FileAndMetadataCache(inputArtifactData,expandedMiddlemen,skyframeActionExecutor.getExecRoot(),action.getOutputs(),null,tsgm);
        actionExecutionContext=skyframeActionExecutor.constructActionExecutionContext(fileAndMetadataCache,fileAndMetadataCache);
      }
    }
    Token token=state.token;
    if (action.discoversInputs()) {
      removeState(action);
    }
    state=null;
    return skyframeActionExecutor.executeAction(action,fileAndMetadataCache,token,actionStartTime,actionExecutionContext);
  }
  finally {
    try {
      actionExecutionContext.getFileOutErr().close();
    }
 catch (    IOException e) {
    }
    if (inputsDiscoveredDuringActionExecution) {
      declareAdditionalDependencies(env,action);
    }
  }
}","private ActionExecutionValue checkCacheAndExecuteIfNeeded(Action action,Map<Artifact,FileArtifactValue> inputArtifactData,Map<Artifact,Collection<Artifact>> expandedMiddlemen,Environment env) throws ActionExecutionException, InterruptedException {
  if (inputArtifactData == null) {
    return skyframeActionExecutor.executeAction(action,null,null,-1,null);
  }
  ContinuationState state;
  if (action.discoversInputs()) {
    state=getState(action);
  }
 else {
    state=new ContinuationState();
  }
  FileAndMetadataCache fileAndMetadataCache=new FileAndMetadataCache(inputArtifactData,expandedMiddlemen,skyframeActionExecutor.getExecRoot(),action.getOutputs(),action.discoversInputs() ? env : null,tsgm);
  MetadataHandler metadataHandler=skyframeActionExecutor.constructMetadataHandler(fileAndMetadataCache);
  long actionStartTime=System.nanoTime();
  if (!state.hasDiscoveredInputs()) {
    Token token=skyframeActionExecutor.checkActionCache(action,metadataHandler,new PackageRootResolverWithEnvironment(env),actionStartTime);
    if (token == Token.NEED_TO_RERUN) {
      return null;
    }
    state.token=token;
  }
  if (state.token == null) {
    if (action.discoversInputs()) {
      declareAdditionalDependencies(env,action);
    }
    return new ActionExecutionValue(fileAndMetadataCache.getOutputData(),fileAndMetadataCache.getAdditionalOutputData());
  }
  ActionExecutionContext actionExecutionContext=skyframeActionExecutor.constructActionExecutionContext(fileAndMetadataCache,metadataHandler);
  boolean inputsDiscoveredDuringActionExecution=false;
  try {
    if (action.discoversInputs()) {
      if (!state.hasDiscoveredInputs()) {
        state.discoveredInputs=skyframeActionExecutor.discoverInputs(action,actionExecutionContext);
        if (state.discoveredInputs == null) {
          inputsDiscoveredDuringActionExecution=true;
        }
      }
      if (state.discoveredInputs != null && !inputArtifactData.keySet().containsAll(state.discoveredInputs)) {
        inputArtifactData=addDiscoveredInputs(inputArtifactData,state.discoveredInputs,env);
        if (env.valuesMissing()) {
          return null;
        }
        fileAndMetadataCache=new FileAndMetadataCache(inputArtifactData,expandedMiddlemen,skyframeActionExecutor.getExecRoot(),action.getOutputs(),null,tsgm);
        actionExecutionContext=skyframeActionExecutor.constructActionExecutionContext(fileAndMetadataCache,fileAndMetadataCache);
      }
    }
    Token token=state.token;
    if (action.discoversInputs()) {
      removeState(action);
    }
    state=null;
    return skyframeActionExecutor.executeAction(action,fileAndMetadataCache,token,actionStartTime,actionExecutionContext);
  }
  finally {
    try {
      actionExecutionContext.getFileOutErr().close();
    }
 catch (    IOException e) {
    }
    if (inputsDiscoveredDuringActionExecution) {
      declareAdditionalDependencies(env,action);
    }
  }
}",0.984154623019328
111051,"/** 
 * Returns the name of the jar file from which the given class symbol was loaded, if available, and null otherwise. Implicitly filters out jars from the compilation bootclasspath.
 * @param platformJars jars on javac's bootclasspath
 */
static String getJarName(JavaFileManager fileManager,ClassSymbol classSymbol,Set<String> platformJars){
  if (classSymbol == null) {
    return null;
  }
  if (haveSourceForSymbol(classSymbol)) {
    return null;
  }
  JavaFileObject classfile=unwrapFileObject(classSymbol.classfile);
  String name=ImplicitDependencyExtractor.getJarName(fileManager,classfile);
  if (name == null) {
    return null;
  }
  if (platformJars.contains(classfile)) {
    return null;
  }
  return name;
}","/** 
 * Returns the name of the jar file from which the given class symbol was loaded, if available, and null otherwise. Implicitly filters out jars from the compilation bootclasspath.
 * @param platformJars jars on javac's bootclasspath
 */
static String getJarName(JavaFileManager fileManager,ClassSymbol classSymbol,Set<String> platformJars){
  if (classSymbol == null) {
    return null;
  }
  if (haveSourceForSymbol(classSymbol)) {
    return null;
  }
  JavaFileObject classfile=unwrapFileObject(classSymbol.classfile);
  String name=ImplicitDependencyExtractor.getJarName(fileManager,classfile);
  if (name == null) {
    return null;
  }
  if (platformJars.contains(name)) {
    return null;
  }
  return name;
}",0.9923980649619903
111052,"protected AnalysisResult update(List<String> targets,boolean keepGoing,int loadingPhaseThreads,boolean doAnalysis,EventBus eventBus) throws Exception {
  LoadingPhaseRunner.Options loadingOptions=Options.getDefaults(LoadingPhaseRunner.Options.class);
  loadingOptions.loadingPhaseThreads=loadingPhaseThreads;
  BuildView.Options viewOptions=Options.getDefaults(BuildView.Options.class);
  viewOptions.keepGoing=keepGoing;
  LoadingPhaseRunner runner=new LoadingPhaseRunner(getPackageManager(),Collections.unmodifiableSet(ruleClassProvider.getRuleClassMap().keySet()));
  LoadingResult loadingResult=runner.execute(reporter,eventBus,targets,loadingOptions,getTargetConfiguration().getAllLabels(),viewOptions.keepGoing,false,null);
  if (!doAnalysis) {
    return null;
  }
  return view.update(loadingResult,masterConfig,viewOptions,TopLevelArtifactContext.DEFAULT,reporter,eventBus);
}","protected AnalysisResult update(List<String> targets,boolean keepGoing,int loadingPhaseThreads,boolean doAnalysis,EventBus eventBus) throws Exception {
  LoadingPhaseRunner.Options loadingOptions=Options.getDefaults(LoadingPhaseRunner.Options.class);
  loadingOptions.loadingPhaseThreads=loadingPhaseThreads;
  BuildView.Options viewOptions=Options.getDefaults(BuildView.Options.class);
  viewOptions.keepGoing=keepGoing;
  LoadingPhaseRunner runner=new LoadingPhaseRunner(getPackageManager(),Collections.unmodifiableSet(ruleClassProvider.getRuleClassMap().keySet()));
  LoadingResult loadingResult=runner.execute(reporter,eventBus,targets,loadingOptions,getTargetConfiguration().getAllLabels(),viewOptions.keepGoing,false,null);
  if (!doAnalysis) {
    return null;
  }
  return view.update(loadingResult,masterConfig,viewOptions,AnalysisTestUtil.TOP_LEVEL_ARTIFACT_CONTEXT,reporter,eventBus);
}",0.9640852974186308
111053,"/** 
 * Creates a builder that is a copy of another builder.
 */
public CppCompileActionBuilder(CppCompileActionBuilder other){
  this.owner=other.owner;
  this.features.addAll(other.features);
  this.featureConfiguration=other.featureConfiguration;
  this.sourceFile=other.sourceFile;
  this.sourceLabel=other.sourceLabel;
  this.mandatoryInputsBuilder=NestedSetBuilder.<Artifact>stableOrder().addTransitive(other.mandatoryInputsBuilder.build());
  this.pluginInputsBuilder=NestedSetBuilder.<Artifact>stableOrder().addTransitive(other.pluginInputsBuilder.build());
  this.optionalSourceFile=other.optionalSourceFile;
  this.outputFile=other.outputFile;
  this.tempOutputFile=other.tempOutputFile;
  this.dotdFile=other.dotdFile;
  this.gcnoFile=other.gcnoFile;
  this.configuration=other.configuration;
  this.context=other.context;
  this.copts.addAll(other.copts);
  this.pluginOpts.addAll(other.pluginOpts);
  this.nocopts.addAll(other.nocopts);
  this.analysisEnvironment=other.analysisEnvironment;
  this.extraSystemIncludePrefixes=ImmutableList.copyOf(other.extraSystemIncludePrefixes);
  this.enableLayeringCheck=other.enableLayeringCheck;
  this.compileHeaderModules=other.compileHeaderModules;
  this.includeResolver=other.includeResolver;
  this.actionClassId=other.actionClassId;
  this.actionContext=other.actionContext;
  this.cppConfiguration=other.cppConfiguration;
  this.lipoScannableMap=other.lipoScannableMap;
}","/** 
 * Creates a builder that is a copy of another builder.
 */
public CppCompileActionBuilder(CppCompileActionBuilder other){
  this.owner=other.owner;
  this.features.addAll(other.features);
  this.featureConfiguration=other.featureConfiguration;
  this.sourceFile=other.sourceFile;
  this.sourceLabel=other.sourceLabel;
  this.mandatoryInputsBuilder=NestedSetBuilder.<Artifact>stableOrder().addTransitive(other.mandatoryInputsBuilder.build());
  this.pluginInputsBuilder=NestedSetBuilder.<Artifact>stableOrder().addTransitive(other.pluginInputsBuilder.build());
  this.optionalSourceFile=other.optionalSourceFile;
  this.outputFile=other.outputFile;
  this.tempOutputFile=other.tempOutputFile;
  this.dotdFile=other.dotdFile;
  this.gcnoFile=other.gcnoFile;
  this.configuration=other.configuration;
  this.context=other.context;
  this.copts.addAll(other.copts);
  this.pluginOpts.addAll(other.pluginOpts);
  this.nocopts.addAll(other.nocopts);
  this.analysisEnvironment=other.analysisEnvironment;
  this.extraSystemIncludePrefixes=ImmutableList.copyOf(other.extraSystemIncludePrefixes);
  this.enableLayeringCheck=other.enableLayeringCheck;
  this.compileHeaderModules=other.compileHeaderModules;
  this.includeResolver=other.includeResolver;
  this.actionClassId=other.actionClassId;
  this.actionContext=other.actionContext;
  this.cppConfiguration=other.cppConfiguration;
  this.fdoBuildStamp=other.fdoBuildStamp;
  this.usePic=other.usePic;
  this.lipoScannableMap=other.lipoScannableMap;
}",0.9733969986357436
111054,"/** 
 * Incrementally updates a TestSummary given an existing summary and a new TestResult. Only call on built targets.
 * @param summaryBuilder Existing unbuilt test summary associated with a target.
 * @param result New test result to aggregate into the summary.
 * @return The updated TestSummary.
 */
public TestSummary.Builder incrementalAnalyze(TestSummary.Builder summaryBuilder,TestResult result){
  Preconditions.checkNotNull(result);
  Preconditions.checkNotNull(summaryBuilder);
  TestSummary existingSummary=Preconditions.checkNotNull(summaryBuilder.peek());
  TransitiveInfoCollection target=existingSummary.getTarget();
  Preconditions.checkNotNull(target,""String_Node_Str"");
  BlazeTestStatus status=existingSummary.getStatus();
  int numCached=existingSummary.numCached();
  int numLocalActionCached=existingSummary.numLocalActionCached();
  if (!existingSummary.actionRan() && !result.isCached()) {
    summaryBuilder.setActionRan(true);
    PathFragment coverageData=result.getCoverageData();
    if (coverageData != null) {
      summaryBuilder.addCoverageFiles(Collections.singletonList(execRoot.getRelative(coverageData)));
    }
  }
  if (result.isCached() || result.getData().getRemotelyCached()) {
    numCached++;
  }
  if (result.isCached()) {
    numLocalActionCached++;
  }
  if (!executionOptions.runsPerTestDetectsFlakes) {
    status=aggregateStatus(status,result.getData().getStatus());
  }
 else {
    int shardNumber=result.getShardNum();
    int runsPerTestForLabel=target.getProvider(TestProvider.class).getTestParams().getRuns();
    List<BlazeTestStatus> singleShardStatuses=summaryBuilder.addShardStatus(shardNumber,result.getData().getStatus());
    if (singleShardStatuses.size() == runsPerTestForLabel) {
      BlazeTestStatus shardStatus=BlazeTestStatus.NO_STATUS;
      int passes=0;
      for (      BlazeTestStatus runStatusForShard : singleShardStatuses) {
        shardStatus=aggregateStatus(shardStatus,runStatusForShard);
        if (TestResult.isBlazeTestStatusPassed(shardStatus)) {
          passes++;
        }
      }
      if (passes == 0 || passes == runsPerTestForLabel) {
        status=aggregateStatus(status,shardStatus);
      }
 else {
        status=aggregateStatus(status,BlazeTestStatus.FLAKY);
      }
    }
  }
  List<String> filtered=new ArrayList<>();
  warningLoop:   for (  String warning : result.getData().getWarningList()) {
    for (    String ignoredPrefix : Constants.IGNORED_TEST_WARNING_PREFIXES) {
      if (warning.startsWith(ignoredPrefix)) {
        continue warningLoop;
      }
    }
    filtered.add(warning);
  }
  List<Path> passed=new ArrayList<>();
  if (result.getData().hasPassedLog()) {
    passed.add(result.getTestAction().getTestLog().getPath().getRelative(result.getData().getPassedLog()));
  }
  List<Path> failed=new ArrayList<>();
  for (  String path : result.getData().getFailedLogsList()) {
    failed.add(result.getTestAction().getTestLog().getPath().getRelative(path));
  }
  summaryBuilder.addTestTimes(result.getData().getTestTimesList()).addPassedLogs(passed).addFailedLogs(failed).addWarnings(filtered).collectFailedTests(result.getData().getTestCase()).setRanRemotely(result.getData().getIsRemoteStrategy());
  List<String> warnings=new ArrayList<>();
  if (status == BlazeTestStatus.PASSED) {
    if (shouldEmitTestSizeWarningInSummary(summaryOptions.testVerboseTimeoutWarnings,warnings,result.getData().getTestProcessTimesList(),target)) {
      summaryBuilder.setWasUnreportedWrongSize(true);
    }
  }
  return summaryBuilder.setStatus(status).setNumCached(numCached).setNumLocalActionCached(numLocalActionCached).addWarnings(warnings);
}","/** 
 * Incrementally updates a TestSummary given an existing summary and a new TestResult. Only call on built targets.
 * @param summaryBuilder Existing unbuilt test summary associated with a target.
 * @param result New test result to aggregate into the summary.
 * @return The updated TestSummary.
 */
public TestSummary.Builder incrementalAnalyze(TestSummary.Builder summaryBuilder,TestResult result){
  Preconditions.checkNotNull(result);
  Preconditions.checkNotNull(summaryBuilder);
  TestSummary existingSummary=Preconditions.checkNotNull(summaryBuilder.peek());
  TransitiveInfoCollection target=existingSummary.getTarget();
  Preconditions.checkNotNull(target,""String_Node_Str"");
  BlazeTestStatus status=existingSummary.getStatus();
  int numCached=existingSummary.numCached();
  int numLocalActionCached=existingSummary.numLocalActionCached();
  if (!existingSummary.actionRan() && !result.isCached()) {
    summaryBuilder.setActionRan(true);
  }
  if (result.isCached() || result.getData().getRemotelyCached()) {
    numCached++;
  }
  if (result.isCached()) {
    numLocalActionCached++;
  }
  PathFragment coverageData=result.getCoverageData();
  if (coverageData != null) {
    summaryBuilder.addCoverageFiles(Collections.singletonList(execRoot.getRelative(coverageData)));
  }
  if (!executionOptions.runsPerTestDetectsFlakes) {
    status=aggregateStatus(status,result.getData().getStatus());
  }
 else {
    int shardNumber=result.getShardNum();
    int runsPerTestForLabel=target.getProvider(TestProvider.class).getTestParams().getRuns();
    List<BlazeTestStatus> singleShardStatuses=summaryBuilder.addShardStatus(shardNumber,result.getData().getStatus());
    if (singleShardStatuses.size() == runsPerTestForLabel) {
      BlazeTestStatus shardStatus=BlazeTestStatus.NO_STATUS;
      int passes=0;
      for (      BlazeTestStatus runStatusForShard : singleShardStatuses) {
        shardStatus=aggregateStatus(shardStatus,runStatusForShard);
        if (TestResult.isBlazeTestStatusPassed(shardStatus)) {
          passes++;
        }
      }
      if (passes == 0 || passes == runsPerTestForLabel) {
        status=aggregateStatus(status,shardStatus);
      }
 else {
        status=aggregateStatus(status,BlazeTestStatus.FLAKY);
      }
    }
  }
  List<String> filtered=new ArrayList<>();
  warningLoop:   for (  String warning : result.getData().getWarningList()) {
    for (    String ignoredPrefix : Constants.IGNORED_TEST_WARNING_PREFIXES) {
      if (warning.startsWith(ignoredPrefix)) {
        continue warningLoop;
      }
    }
    filtered.add(warning);
  }
  List<Path> passed=new ArrayList<>();
  if (result.getData().hasPassedLog()) {
    passed.add(result.getTestAction().getTestLog().getPath().getRelative(result.getData().getPassedLog()));
  }
  List<Path> failed=new ArrayList<>();
  for (  String path : result.getData().getFailedLogsList()) {
    failed.add(result.getTestAction().getTestLog().getPath().getRelative(path));
  }
  summaryBuilder.addTestTimes(result.getData().getTestTimesList()).addPassedLogs(passed).addFailedLogs(failed).addWarnings(filtered).collectFailedTests(result.getData().getTestCase()).setRanRemotely(result.getData().getIsRemoteStrategy());
  List<String> warnings=new ArrayList<>();
  if (status == BlazeTestStatus.PASSED) {
    if (shouldEmitTestSizeWarningInSummary(summaryOptions.testVerboseTimeoutWarnings,warnings,result.getData().getTestProcessTimesList(),target)) {
      summaryBuilder.setWasUnreportedWrongSize(true);
    }
  }
  return summaryBuilder.setStatus(status).setNumCached(numCached).setNumLocalActionCached(numLocalActionCached).addWarnings(warnings);
}",0.947382844614963
111055,"/** 
 * Parses an end-of-line sequence, handling statement indentation correctly. UNIX newlines are assumed (LF). Carriage returns are always ignored. ON ENTRY: 'pos' is the index of the char after '\n'. ON EXIT: 'pos' is the index of the next non-space char after '\n'.
 */
private void newline(){
  if (openParenStackDepth > 0) {
    newlineInsideExpression();
  }
 else {
    newlineOutsideExpression();
  }
}","/** 
 * Parses an end-of-line sequence, handling statement indentation correctly. <p>UNIX newlines are assumed (LF). Carriage returns are always ignored. <p>ON ENTRY: 'pos' is the index of the char after '\n'. ON EXIT: 'pos' is the index of the next non-space char after '\n'.
 */
private void newline(){
  if (openParenStackDepth > 0) {
    newlineInsideExpression();
  }
 else {
    newlineOutsideExpression();
  }
}",0.9927710843373494
111056,"/** 
 * Scans an identifier or keyword. ON ENTRY: 'pos' is 1 + the index of the first char in the identifier. ON EXIT: 'pos' is 1 + the index of the last char in the identifier.
 * @return the identifier or keyword token.
 */
private Token identifierOrKeyword(){
  int oldPos=pos - 1;
  String id=scanIdentifier();
  TokenKind kind=getTokenKindForIdentfier(id);
  return new Token(kind,oldPos,pos,(kind == TokenKind.IDENTIFIER) ? id : null);
}","/** 
 * Scans an identifier or keyword. <p>ON ENTRY: 'pos' is 1 + the index of the first char in the identifier. ON EXIT: 'pos' is 1 + the index of the last char in the identifier.
 * @return the identifier or keyword token.
 */
private Token identifierOrKeyword(){
  int oldPos=pos - 1;
  String id=scanIdentifier();
  TokenKind kind=getTokenKindForIdentfier(id);
  return new Token(kind,oldPos,pos,(kind == TokenKind.IDENTIFIER) ? id : null);
}",0.9966254218222722
111057,"/** 
 * Create an input source from the given input stream, and associate path with this source.  'path' will be used in error messages, etc, but will not (in general) be used to to read the content from path. (The exception is the case in which Python pre-processing is required; the path will be used to provide the input to the Python pre-processor. Arguably, we should just send the content as input to the subprocess instead of using the path, but it's not clear it's worth the effort.)
 */
public static ParserInputSource create(InputStream in,Path path) throws IOException {
  try {
    return create(new String(FileSystemUtils.readContentAsLatin1(in)),path);
  }
  finally {
    in.close();
  }
}","/** 
 * Create an input source from the given input stream, and associate path with this source.  'path' will be used in error messages, etc, but will not (in general) be used to to read the content from path. <p>(The exception is the case in which Python pre-processing is required; the path will be used to provide the input to the Python pre-processor. Arguably, we should just send the content as input to the subprocess instead of using the path, but it's not clear it's worth the effort.)
 */
public static ParserInputSource create(InputStream in,Path path) throws IOException {
  try {
    return create(new String(FileSystemUtils.readContentAsLatin1(in)),path);
  }
  finally {
    in.close();
  }
}",0.9978738483345144
111058,"public float getProgress(){
  return mProgress;
}","public int getProgress(){
  return mProgress;
}",0.9375
111059,"@Override public void writeToParcel(Parcel out,int flags){
  super.writeToParcel(out,flags);
  out.writeFloat(mProgress);
  out.writeInt(mIndeterminateProgressMode ? 1 : 0);
  out.writeInt(mConfigurationChanged ? 1 : 0);
}","@Override public void writeToParcel(Parcel out,int flags){
  super.writeToParcel(out,flags);
  out.writeInt(mProgress);
  out.writeInt(mIndeterminateProgressMode ? 1 : 0);
  out.writeInt(mConfigurationChanged ? 1 : 0);
}",0.986425339366516
111060,"public void setProgress(float progress){
  mProgress=progress;
  if (mMorphingInProgress || getWidth() == 0) {
    return;
  }
  mStateManager.saveProgress(this);
  if (mProgress >= mMaxProgress) {
    if (mState == State.PROGRESS) {
      morphProgressToComplete();
    }
 else     if (mState == State.IDLE) {
      morphIdleToComplete();
    }
  }
 else   if (mProgress > IDLE_STATE_PROGRESS) {
    if (mState == State.IDLE) {
      morphToProgress();
    }
 else     if (mState == State.PROGRESS) {
      invalidate();
    }
  }
 else   if (mProgress == ERROR_STATE_PROGRESS) {
    if (mState == State.PROGRESS) {
      morphProgressToError();
    }
 else     if (mState == State.IDLE) {
      morphIdleToError();
    }
  }
 else   if (mProgress == IDLE_STATE_PROGRESS) {
    if (mState == State.COMPLETE) {
      morphCompleteToIdle();
    }
 else     if (mState == State.PROGRESS) {
      morphProgressToIdle();
    }
 else     if (mState == State.ERROR) {
      morphErrorToIdle();
    }
  }
}","public void setProgress(int progress){
  mProgress=progress;
  if (mMorphingInProgress || getWidth() == 0) {
    return;
  }
  mStateManager.saveProgress(this);
  if (mProgress >= mMaxProgress) {
    if (mState == State.PROGRESS) {
      morphProgressToComplete();
    }
 else     if (mState == State.IDLE) {
      morphIdleToComplete();
    }
  }
 else   if (mProgress > IDLE_STATE_PROGRESS) {
    if (mState == State.IDLE) {
      morphToProgress();
    }
 else     if (mState == State.PROGRESS) {
      invalidate();
    }
  }
 else   if (mProgress == ERROR_STATE_PROGRESS) {
    if (mState == State.PROGRESS) {
      morphProgressToError();
    }
 else     if (mState == State.IDLE) {
      morphIdleToError();
    }
  }
 else   if (mProgress == IDLE_STATE_PROGRESS) {
    if (mState == State.COMPLETE) {
      morphCompleteToIdle();
    }
 else     if (mState == State.PROGRESS) {
      morphProgressToIdle();
    }
 else     if (mState == State.ERROR) {
      morphErrorToIdle();
    }
  }
}",0.996993987975952
111061,"public float getProgress(){
  return mProgress;
}","public int getProgress(){
  return mProgress;
}",0.9375
111062,"private void morphProgressToIdle(){
  background.getGradientDrawable().setStroke(mStrokeWidth,mColorIdle);
  background.getGradientDrawable().setColor(mColorIdle);
  removeIcon();
  setText(mIdleText);
  mMorphingInProgress=false;
  mState=State.IDLE;
}","private void morphProgressToIdle(){
  MorphingAnimation animation=createProgressMorphing(getHeight(),mCornerRadius,getHeight(),getWidth());
  animation.setFromColor(mColorProgress);
  animation.setToColor(mColorIdle);
  animation.setFromStrokeColor(mColorIndicator);
  animation.setToStrokeColor(mColorIdle);
  animation.setListener(new OnAnimationEndListener(){
    @Override public void onAnimationEnd(){
      removeIcon();
      setText(mIdleText);
      mMorphingInProgress=false;
      mState=State.IDLE;
    }
  }
);
  animation.start();
}",0.2853566958698373
111063,"public void setProgress(int progress){
  mProgress=progress;
  if (mMorphingInProgress || getWidth() == 0) {
    return;
  }
  if (mProgress >= mMaxProgress) {
    if (mState == State.PROGRESS) {
      morphProgressToComplete();
    }
 else     if (mState == State.IDLE) {
      morphIdleToComplete();
    }
  }
 else   if (mProgress > IDLE_STATE_PROGRESS) {
    if (mState == State.IDLE) {
      morphToProgress();
    }
 else     if (mState == State.PROGRESS) {
      invalidate();
    }
  }
 else   if (mProgress == ERROR_STATE_PROGRESS) {
    if (mState == State.PROGRESS) {
      morphProgressToError();
    }
 else     if (mState == State.IDLE) {
      morphIdleToError();
    }
  }
 else   if (mProgress == IDLE_STATE_PROGRESS) {
    if (mState == State.COMPLETE) {
      morphCompleteToIdle();
    }
 else     if (mState == State.PROGRESS) {
      morphProgressToIdle();
    }
 else     if (mState == State.ERROR) {
      morphErrorToIdle();
    }
  }
}","public void setProgress(int progress){
  mProgress=progress;
  if (mMorphingInProgress || getWidth() == 0) {
    return;
  }
  mStateManager.saveProgress(this);
  if (mProgress >= mMaxProgress) {
    if (mState == State.PROGRESS) {
      morphProgressToComplete();
    }
 else     if (mState == State.IDLE) {
      morphIdleToComplete();
    }
  }
 else   if (mProgress > IDLE_STATE_PROGRESS) {
    if (mState == State.IDLE) {
      morphToProgress();
    }
 else     if (mState == State.PROGRESS) {
      invalidate();
    }
  }
 else   if (mProgress == ERROR_STATE_PROGRESS) {
    if (mState == State.PROGRESS) {
      morphProgressToError();
    }
 else     if (mState == State.IDLE) {
      morphIdleToError();
    }
  }
 else   if (mProgress == IDLE_STATE_PROGRESS) {
    if (mState == State.COMPLETE) {
      morphCompleteToIdle();
    }
 else     if (mState == State.PROGRESS) {
      morphProgressToIdle();
    }
 else     if (mState == State.ERROR) {
      morphErrorToIdle();
    }
  }
}",0.9816138917262512
111064,"@Override public void onAnimationEnd(){
  removeIcon();
  setText(mIdleText);
  mMorphingInProgress=false;
  mState=State.IDLE;
}","@Override public void onAnimationEnd(){
  removeIcon();
  setText(mIdleText);
  mMorphingInProgress=false;
  mState=State.IDLE;
  mStateManager.checkState(CircularProgressButton.this);
}",0.819047619047619
111065,"private void morphProgressToIdle(){
  MorphingAnimation animation=createProgressMorphing(getHeight(),mCornerRadius,getHeight(),getWidth());
  animation.setFromColor(mColorProgress);
  animation.setToColor(mColorIdle);
  animation.setFromStrokeColor(mColorIndicator);
  animation.setToStrokeColor(mColorIdle);
  animation.setListener(new OnAnimationEndListener(){
    @Override public void onAnimationEnd(){
      removeIcon();
      setText(mIdleText);
      mMorphingInProgress=false;
      mState=State.IDLE;
    }
  }
);
  animation.start();
}","private void morphProgressToIdle(){
  MorphingAnimation animation=createProgressMorphing(getHeight(),mCornerRadius,getHeight(),getWidth());
  animation.setFromColor(mColorProgress);
  animation.setToColor(mColorIdle);
  animation.setFromStrokeColor(mColorIndicator);
  animation.setToStrokeColor(mColorIdle);
  animation.setListener(new OnAnimationEndListener(){
    @Override public void onAnimationEnd(){
      removeIcon();
      setText(mIdleText);
      mMorphingInProgress=false;
      mState=State.IDLE;
      mStateManager.checkState(CircularProgressButton.this);
    }
  }
);
  animation.start();
}",0.9470945359930616
111066,"private void init(Context context,AttributeSet attributeSet){
  mStrokeWidth=(int)getContext().getResources().getDimension(R.dimen.stroke_width);
  initAttributes(context,attributeSet);
  mMaxProgress=100;
  mState=State.IDLE;
  setText(mIdleText);
  GradientDrawable gradientDrawable=(GradientDrawable)context.getResources().getDrawable(R.drawable.background).mutate();
  gradientDrawable.setColor(mColorIdle);
  gradientDrawable.setCornerRadius(mCornerRadius);
  background=new StrokeGradientDrawable(gradientDrawable);
  background.setStrokeColor(mColorIdle);
  background.setStrokeWidth(mStrokeWidth);
  setBackgroundCompat(gradientDrawable);
}","private void init(Context context,AttributeSet attributeSet){
  mStrokeWidth=(int)getContext().getResources().getDimension(R.dimen.stroke_width);
  initAttributes(context,attributeSet);
  mMaxProgress=100;
  mState=State.IDLE;
  mStateManager=new StateManager(this);
  setText(mIdleText);
  GradientDrawable gradientDrawable=(GradientDrawable)context.getResources().getDrawable(R.drawable.background).mutate();
  gradientDrawable.setColor(mColorIdle);
  gradientDrawable.setCornerRadius(mCornerRadius);
  background=new StrokeGradientDrawable(gradientDrawable);
  background.setStrokeColor(mColorIdle);
  background.setStrokeWidth(mStrokeWidth);
  setBackgroundCompat(gradientDrawable);
}",0.9700598802395208
111067,"public void setProgress(int progress){
  mProgress=progress;
  if (mMorphingInProgress) {
    return;
  }
  if (mProgress >= mMaxProgress) {
    if (mState == State.PROGRESS) {
      morphProgressToComplete();
    }
 else     if (mState == State.IDLE) {
      morphIdleToComplete();
    }
  }
 else   if (mProgress > IDLE_STATE_PROGRESS) {
    if (mState == State.IDLE) {
      morphToProgress();
    }
 else     if (mState == State.PROGRESS) {
      invalidate();
    }
  }
 else   if (mProgress == ERROR_STATE_PROGRESS) {
    if (mState == State.PROGRESS) {
      morphProgressToError();
    }
 else     if (mState == State.IDLE) {
      morphIdleToError();
    }
  }
 else   if (mProgress == IDLE_STATE_PROGRESS) {
    if (mState == State.COMPLETE) {
      morphCompleteToIdle();
    }
 else     if (mState == State.PROGRESS) {
      morphProgressToIdle();
    }
 else     if (mState == State.ERROR) {
      morphErrorToIdle();
    }
  }
}","public void setProgress(int progress){
  mProgress=progress;
  if (mMorphingInProgress || getWidth() == 0) {
    return;
  }
  if (mProgress >= mMaxProgress) {
    if (mState == State.PROGRESS) {
      morphProgressToComplete();
    }
 else     if (mState == State.IDLE) {
      morphIdleToComplete();
    }
  }
 else   if (mProgress > IDLE_STATE_PROGRESS) {
    if (mState == State.IDLE) {
      morphToProgress();
    }
 else     if (mState == State.PROGRESS) {
      invalidate();
    }
  }
 else   if (mProgress == ERROR_STATE_PROGRESS) {
    if (mState == State.PROGRESS) {
      morphProgressToError();
    }
 else     if (mState == State.IDLE) {
      morphIdleToError();
    }
  }
 else   if (mProgress == IDLE_STATE_PROGRESS) {
    if (mState == State.COMPLETE) {
      morphCompleteToIdle();
    }
 else     if (mState == State.PROGRESS) {
      morphProgressToIdle();
    }
 else     if (mState == State.ERROR) {
      morphErrorToIdle();
    }
  }
}",0.9900157645822386
111068,"@Override public Float calculate(float t,float b,float c,float d){
  if ((t/=d / 2) < 1)   return c / 2 * (t * t * (((s*=(1.525)) + 1) * t - s)) + b;
  return c / 2 * ((t-=2) * t * (((s*=(1.525)) + 1) * t + s) + 2) + b;
}","@Override public Float calculate(float t,float b,float c,float d){
  if ((t/=d / 2) < 1)   return c / 2 * (t * t * ((s + 1) * t - s)) + b;
  return c / 2 * ((t-=2) * t * ((s + 1) * t + s) + 2) + b;
}",0.9476190476190476
111069,"public BaseUiController(){
  mUis=new HashSet<U>();
  mUnmodifiableUis=Collections.unmodifiableSet(mUis);
}","public BaseUiController(){
  mUis=new CopyOnWriteArraySet<U>();
  mUnmodifiableUis=Collections.unmodifiableSet(mUis);
}",0.9203539823008848
111070,"protected U findUi(final int id){
  for (  U ui : mUis) {
    if (getId(ui) == id) {
      return ui;
    }
  }
  return null;
}","protected synchronized U findUi(final int id){
  for (  U ui : mUis) {
    if (getId(ui) == id) {
      return ui;
    }
  }
  return null;
}",0.9516728624535316
111071,"public final void attachUi(U ui){
  Preconditions.checkArgument(ui != null,""String_Node_Str"");
  Preconditions.checkState(!mUis.contains(ui),""String_Node_Str"");
  mUis.add(ui);
  ui.setCallbacks(createUiCallbacks(ui));
  if (isInited()) {
    if (!ui.isModal() && !(ui instanceof SubUi)) {
      final String uiTitle=ui.getUiTitle();
      if (!TextUtils.isEmpty(uiTitle)) {
        updateDisplayTitle(ui.getUiTitle());
      }
    }
    onUiAttached(ui);
    populateUis();
  }
}","public synchronized final void attachUi(U ui){
  Preconditions.checkArgument(ui != null,""String_Node_Str"");
  Preconditions.checkState(!mUis.contains(ui),""String_Node_Str"");
  mUis.add(ui);
  ui.setCallbacks(createUiCallbacks(ui));
  if (isInited()) {
    if (!ui.isModal() && !(ui instanceof SubUi)) {
      final String uiTitle=ui.getUiTitle();
      if (!TextUtils.isEmpty(uiTitle)) {
        updateDisplayTitle(ui.getUiTitle());
      }
    }
    onUiAttached(ui);
    populateUis();
  }
}",0.986639260020555
111072,"public final void detachUi(U ui){
  Preconditions.checkArgument(ui != null,""String_Node_Str"");
  Preconditions.checkState(mUis.contains(ui),""String_Node_Str"");
  onUiDetached(ui);
  ui.setCallbacks(null);
  mUis.remove(ui);
}","public synchronized final void detachUi(U ui){
  Preconditions.checkArgument(ui != null,""String_Node_Str"");
  Preconditions.checkState(mUis.contains(ui),""String_Node_Str"");
  onUiDetached(ui);
  ui.setCallbacks(null);
  mUis.remove(ui);
}",0.9719222462203024
111073,"protected void populateUis(){
  if (Constants.DEBUG) {
    mLogger.d(getClass().getSimpleName(),""String_Node_Str"");
  }
  for (  U ui : mUis) {
    populateUi(ui);
  }
}","protected synchronized void populateUis(){
  if (Constants.DEBUG) {
    mLogger.d(getClass().getSimpleName(),""String_Node_Str"");
  }
  for (  U ui : mUis) {
    populateUi(ui);
  }
}",0.9629629629629628
111074,"@Subscribe public void onMovieUserRatingChanged(MoviesState.MovieUserRatingChangedEvent event){
  populateUis();
}","@Subscribe public void onMovieUserRatingChanged(MoviesState.MovieUserRatingChangedEvent event){
  MovieUi ui=findUi(event.callingId);
  if (ui != null) {
    populateUi(ui);
  }
 else {
    populateUis();
  }
}",0.6296296296296297
111075,"@Subscribe public void onMovieFlagsChanged(MoviesState.MovieFlagsUpdatedEvent event){
  MovieUi ui=findUi(event.callingId);
  if (ui != null) {
    if (MovieQueryType.RECOMMENDED == ui.getMovieQueryType()) {
      fetchRecommended(event.callingId);
    }
    populateUi(ui);
  }
}","@Subscribe public void onMovieFlagsChanged(MoviesState.MovieFlagsUpdatedEvent event){
  MovieUi ui=findUi(event.callingId);
  if (ui != null) {
    if (MovieQueryType.RECOMMENDED == ui.getMovieQueryType()) {
      fetchRecommended(event.callingId);
    }
    populateUi(ui);
  }
 else {
    populateUis();
  }
}",0.9475465313028764
111076,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (changed) {
    if (mOriginalHeaderViewHeight != mHeaderView.getHeight()) {
      mOriginalHeaderViewHeight=mHeaderView.getHeight();
    }
    final int targetHeaderHeight=mOriginalHeaderViewHeight + mHeaderViewHeightDiff;
    if (mHeaderView.getLayoutParams().height != targetHeaderHeight) {
      mHeaderView.getLayoutParams().height=targetHeaderHeight;
      post(new Runnable(){
        @Override public void run(){
          mHeaderView.requestLayout();
        }
      }
);
    }
    updateContentViewPaddingTop(targetHeaderHeight);
    updateOffset(mContentViewScrollView.getScrollY());
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (mOriginalHeaderViewHeight <= 0) {
    mOriginalHeaderViewHeight=mHeaderView.getHeight();
  }
  final int targetHeaderHeight=mOriginalHeaderViewHeight + mHeaderViewHeightDiff;
  mHeaderView.layout(left,0,right,targetHeaderHeight);
  updateContentViewPaddingTop();
  updateOffset(mContentViewScrollView.getScrollY());
}",0.512863070539419
111077,"void updateOffset(int y){
  if (y <= mHeaderView.getHeight()) {
    mHeaderView.setVisibility(View.VISIBLE);
    int newTop=Math.round(-y * PARALLAX_FRICTION);
    mHeaderView.offsetTopAndBottom(newTop - mHeaderView.getTop());
    if (mContentViewScrollListener != null) {
      mContentViewScrollListener.onContentViewScrolled(y / (float)mHeaderView.getHeight());
    }
  }
 else {
    mHeaderView.setVisibility(View.INVISIBLE);
  }
}","void updateOffset(int y){
  if (y <= mHeaderView.getHeight()) {
    mHeaderView.setVisibility(View.VISIBLE);
    final int newTop=Math.round(-y * PARALLAX_FRICTION);
    mHeaderView.offsetTopAndBottom(newTop - mHeaderView.getTop());
    if (mContentViewScrollListener != null) {
      mContentViewScrollListener.onContentViewScrolled(y / (float)mHeaderView.getHeight());
    }
  }
 else {
    mHeaderView.setVisibility(View.INVISIBLE);
  }
}",0.9931506849315068
111078,"void updateContentViewPaddingTop(int headerHeight){
  final int targetPaddingTop=headerHeight - mContentOverlaySize;
  if (mContentViewWrapper.getPaddingTop() != targetPaddingTop) {
    mContentViewWrapper.post(new Runnable(){
      @Override public void run(){
        mContentViewWrapper.setPadding(0,targetPaddingTop,0,0);
      }
    }
);
  }
}","void updateContentViewPaddingTop(){
  final int targetPaddingTop=mHeaderView.getHeight() - mContentOverlaySize;
  if (mContentViewWrapper.getPaddingTop() != targetPaddingTop) {
    mContentViewWrapper.post(new Runnable(){
      @Override public void run(){
        mContentViewWrapper.setPadding(0,targetPaddingTop,0,0);
      }
    }
);
  }
}",0.8364688856729378
111079,"private void loadUrlImmediate(){
  Preconditions.checkNotNull(mPicassoHandler,""String_Node_Str"");
  final String url=mPicassoHandler.getUrl(mImageHelper,this);
  if (url != null) {
    Picasso.with(getContext()).load(url).into(mPicassoTarget);
    if (Constants.DEBUG) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + url);
    }
  }
}","private void loadUrlImmediate(){
  Preconditions.checkNotNull(mPicassoHandler,""String_Node_Str"");
  final String url=mPicassoHandler.getUrl(mImageHelper,this);
  if (url != null) {
    mPicassoHandler.markAsStarted();
    Picasso.with(getContext()).load(url).into(mPicassoTarget);
    if (Constants.DEBUG) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + url);
    }
  }
}",0.9481065918653576
111080,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (changed && canLoadImage() && mPicassoHandler != null) {
    loadUrlImmediate();
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (changed && canLoadImage() && mPicassoHandler != null && !mPicassoHandler.isStarted()) {
    loadUrlImmediate();
  }
}",0.934959349593496
111081,"void markAsFinished(){
  mIsFinished=true;
}","void markAsFinished(){
  mIsStarted=false;
}",0.7954545454545454
111082,"private String getTitle(){
switch (getMovieQueryType()) {
case POPULAR:
    return getString(R.string.popular_title);
case LIBRARY:
  return getString(R.string.library_title);
case TRENDING:
return getString(R.string.trending_title);
case WATCHLIST:
return getString(R.string.watchlist_title);
}
return null;
}","private String getTitle(){
  MovieController.MovieQueryType queryType=getMovieQueryType();
  if (queryType != null) {
    return getString(StringManager.getStringResId(queryType));
  }
  return null;
}",0.1330724070450097
111083,"public void setFromMovie(Movie movie){
  Preconditions.checkNotNull(movie,""String_Node_Str"");
  _id=Long.parseLong(movie.tmdbId);
  traktId=getTraktId(movie);
  title=movie.title;
  sortTitle=getSortTitle(title);
  if (!TextUtils.isEmpty(movie.overview)) {
    overview=movie.overview;
  }
  year=unbox(year,movie.year);
  inCollection=unbox(inCollection,movie.inCollection);
  inWatchlist=unbox(inWatchlist,movie.inWatchlist);
  watched=unbox(inWatchlist,movie.watched);
  plays=unbox(plays,movie.plays);
  releasedTime=unbox(releasedTime,movie.released);
  Ratings ratings=movie.ratings;
  if (ratings != null) {
    ratingPercent=unbox(ratingPercent,ratings.percentage);
    ratingVotes=unbox(ratingVotes,ratings.votes);
  }
  userRating=unbox(userRating,movie.rating);
  userRatingAdvanced=unbox(userRatingAdvanced,movie.rating_advanced);
  Images images=movie.images;
  if (images != null) {
    fanartUrl=images.fanart;
    posterUrl=images.poster;
  }
  lastFetched=System.currentTimeMillis();
}","public void setFromMovie(Movie movie){
  Preconditions.checkNotNull(movie,""String_Node_Str"");
  tmdbId=movie.tmdbId;
  imdbId=movie.imdb_id;
  traktId=getTraktId(movie);
  if (!TextUtils.isEmpty(imdbId)) {
    _id=new Long(imdbId.hashCode());
    idType=ID_TYPE_IMDB;
  }
 else   if (!TextUtils.isEmpty(tmdbId)) {
    _id=new Long(tmdbId.hashCode());
    idType=ID_TYPE_TMDB;
  }
 else {
    idType=NOT_SET;
  }
  title=movie.title;
  sortTitle=getSortTitle(title);
  if (!TextUtils.isEmpty(movie.overview)) {
    overview=movie.overview;
  }
  year=unbox(year,movie.year);
  inCollection=unbox(inCollection,movie.inCollection);
  inWatchlist=unbox(inWatchlist,movie.inWatchlist);
  watched=unbox(inWatchlist,movie.watched);
  plays=unbox(plays,movie.plays);
  releasedTime=unbox(releasedTime,movie.released);
  Ratings ratings=movie.ratings;
  if (ratings != null) {
    ratingPercent=unbox(ratingPercent,ratings.percentage);
    ratingVotes=unbox(ratingVotes,ratings.votes);
  }
  userRating=unbox(userRating,movie.rating);
  userRatingAdvanced=unbox(userRatingAdvanced,movie.rating_advanced);
  Images images=movie.images;
  if (images != null) {
    fanartUrl=images.fanart;
    posterUrl=images.poster;
  }
  lastFetched=System.currentTimeMillis();
}",0.8506867523260966
111084,"@Override public final void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  cupboard().withDatabase(db).upgradeTables();
}","@Override public final void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  cupboard().withDatabase(db).upgradeTables();
  if (oldVersion <= 9) {
    deleteAllPhilmMovies();
  }
}",0.8267477203647416
111085,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.ultimate_recyclerview_activity);
  toolbar=(Toolbar)findViewById(R.id.tool_bar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayShowTitleEnabled(false);
  ultimateRecyclerView=(UltimateRecyclerView)findViewById(R.id.ultimate_recycler_view);
  ultimateRecyclerView.setHasFixedSize(false);
  List<String> stringList=new ArrayList<>();
  simpleRecyclerViewAdapter=new SimpleAdapter(stringList);
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  linearLayoutManager=new LinearLayoutManager(this);
  ultimateRecyclerView.setLayoutManager(linearLayoutManager);
  ultimateRecyclerView.setAdapter(simpleRecyclerViewAdapter);
  ultimateRecyclerView.enableLoadmore();
  simpleRecyclerViewAdapter.setCustomLoadMoreView(LayoutInflater.from(this).inflate(R.layout.custom_bottom_progressbar,null));
  ultimateRecyclerView.setParallaxHeader(getLayoutInflater().inflate(R.layout.parallax_recyclerview_header,ultimateRecyclerView.mRecyclerView,false));
  ultimateRecyclerView.setOnParallaxScroll(new UltimateRecyclerView.OnParallaxScroll(){
    @Override public void onParallaxScroll(    float percentage,    float offset,    View parallax){
      Drawable c=toolbar.getBackground();
      c.setAlpha(Math.round(127 + percentage * 128));
      toolbar.setBackgroundDrawable(c);
    }
  }
);
  ultimateRecyclerView.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          simpleRecyclerViewAdapter.insert(""String_Node_Str"",0);
          ultimateRecyclerView.setRefreshing(false);
          linearLayoutManager.scrollToPosition(0);
        }
      }
,1000);
    }
  }
);
  ultimateRecyclerView.setOnLoadMoreListener(new UltimateRecyclerView.OnLoadMoreListener(){
    @Override public void loadMore(    int itemsCount,    final int maxLastVisiblePosition){
      Handler handler=new Handler();
      handler.postDelayed(new Runnable(){
        public void run(){
          simpleRecyclerViewAdapter.insert(""String_Node_Str"" + moreNum++,simpleRecyclerViewAdapter.getAdapterItemCount());
          simpleRecyclerViewAdapter.insert(""String_Node_Str"" + moreNum++,simpleRecyclerViewAdapter.getAdapterItemCount());
          simpleRecyclerViewAdapter.insert(""String_Node_Str"" + moreNum++,simpleRecyclerViewAdapter.getAdapterItemCount());
        }
      }
,1000);
    }
  }
);
  ultimateRecyclerView.setScrollViewCallbacks(new ObservableScrollViewCallbacks(){
    @Override public void onScrollChanged(    int scrollY,    boolean firstScroll,    boolean dragging){
    }
    @Override public void onDownMotionEvent(){
    }
    @Override public void onUpOrCancelMotionEvent(    ObservableScrollState observableScrollState){
      if (observableScrollState == ObservableScrollState.DOWN) {
        ultimateRecyclerView.showToolbar(toolbar,ultimateRecyclerView,getScreenHeight());
      }
 else       if (observableScrollState == ObservableScrollState.UP) {
        ultimateRecyclerView.hideToolbar(toolbar,ultimateRecyclerView,getScreenHeight());
      }
 else       if (observableScrollState == ObservableScrollState.STOP) {
      }
    }
  }
);
  itemTouchListenerAdapter=new ItemTouchListenerAdapter(ultimateRecyclerView.mRecyclerView,new ItemTouchListenerAdapter.RecyclerViewOnItemClickListener(){
    @Override public void onItemClick(    RecyclerView parent,    View clickedView,    int position){
      Logs.d(""String_Node_Str"");
      if (actionMode != null && isDrag) {
        toggleSelection(position);
      }
    }
    @Override public void onItemLongClick(    RecyclerView parent,    View clickedView,    int position){
      Logs.d(""String_Node_Str"" + isDrag);
      if (isDrag) {
        Logs.d(""String_Node_Str"" + isDrag);
        toolbar.startActionMode(UltimateRecyclerViewActivity.this);
        toggleSelection(position);
        dragDropTouchListener.startDrag();
        ultimateRecyclerView.enableSwipeRefresh(false);
      }
    }
  }
);
  ultimateRecyclerView.mRecyclerView.addOnItemTouchListener(itemTouchListenerAdapter);
  ultimateRecyclerView.setSwipeToDismissCallback(new SwipeToDismissTouchListener.DismissCallbacks(){
    @Override public SwipeToDismissTouchListener.SwipeDirection dismissDirection(    int position){
      return SwipeToDismissTouchListener.SwipeDirection.BOTH;
    }
    @Override public void onDismiss(    RecyclerView view,    List<SwipeToDismissTouchListener.PendingDismissData> dismissData){
      for (      SwipeToDismissTouchListener.PendingDismissData data : dismissData) {
        simpleRecyclerViewAdapter.remove(data.position);
      }
    }
    @Override public void onResetMotion(){
      isDrag=true;
    }
    @Override public void onTouchDown(){
      isDrag=false;
    }
  }
);
  dragDropTouchListener=new DragDropTouchListener(ultimateRecyclerView.mRecyclerView,this){
    @Override protected void onItemSwitch(    RecyclerView recyclerView,    int from,    int to){
      simpleRecyclerViewAdapter.swapPositions(from,to);
      simpleRecyclerViewAdapter.clearSelection(from);
      simpleRecyclerViewAdapter.notifyItemChanged(to);
      if (actionMode != null)       actionMode.finish();
      Logs.d(""String_Node_Str"");
    }
    @Override protected void onItemDrop(    RecyclerView recyclerView,    int position){
      Logs.d(""String_Node_Str"");
      ultimateRecyclerView.enableSwipeRefresh(true);
    }
  }
;
  dragDropTouchListener.setCustomDragHighlight(getResources().getDrawable(R.drawable.custom_drag_frame));
  ultimateRecyclerView.mRecyclerView.addOnItemTouchListener(dragDropTouchListener);
  Spinner spinner=(Spinner)findViewById(R.id.spinner);
  ArrayAdapter<String> spinnerAdapter=new ArrayAdapter<>(this,android.R.layout.simple_list_item_1);
  for (  Type type : Type.values()) {
    spinnerAdapter.add(type.getTitle());
  }
  spinner.setAdapter(spinnerAdapter);
  spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      Logs.d(""String_Node_Str"" + Type.values()[position].getTitle());
      ultimateRecyclerView.setItemAnimator(Type.values()[position].getAnimator());
      ultimateRecyclerView.getItemAnimator().setAddDuration(300);
      ultimateRecyclerView.getItemAnimator().setRemoveDuration(300);
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  findViewById(R.id.add).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      simpleRecyclerViewAdapter.insert(""String_Node_Str"",1);
    }
  }
);
  findViewById(R.id.del).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      simpleRecyclerViewAdapter.remove(1);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.ultimate_recyclerview_activity);
  toolbar=(Toolbar)findViewById(R.id.tool_bar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayShowTitleEnabled(false);
  ultimateRecyclerView=(UltimateRecyclerView)findViewById(R.id.ultimate_recycler_view);
  ultimateRecyclerView.setHasFixedSize(false);
  List<String> stringList=new ArrayList<>();
  simpleRecyclerViewAdapter=new SimpleAdapter(stringList);
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  stringList.add(""String_Node_Str"");
  linearLayoutManager=new LinearLayoutManager(this);
  ultimateRecyclerView.setLayoutManager(linearLayoutManager);
  ultimateRecyclerView.setAdapter(simpleRecyclerViewAdapter);
  ultimateRecyclerView.enableLoadmore();
  simpleRecyclerViewAdapter.setCustomLoadMoreView(LayoutInflater.from(this).inflate(R.layout.custom_bottom_progressbar,null));
  ultimateRecyclerView.setParallaxHeader(getLayoutInflater().inflate(R.layout.parallax_recyclerview_header,ultimateRecyclerView.mRecyclerView,false));
  ultimateRecyclerView.setOnParallaxScroll(new UltimateRecyclerView.OnParallaxScroll(){
    @Override public void onParallaxScroll(    float percentage,    float offset,    View parallax){
      Drawable c=toolbar.getBackground();
      c.setAlpha(Math.round(127 + percentage * 128));
      toolbar.setBackgroundDrawable(c);
    }
  }
);
  ultimateRecyclerView.setDefaultOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          simpleRecyclerViewAdapter.insert(""String_Node_Str"",0);
          ultimateRecyclerView.setRefreshing(false);
          linearLayoutManager.scrollToPosition(0);
        }
      }
,1000);
    }
  }
);
  ultimateRecyclerView.setOnLoadMoreListener(new UltimateRecyclerView.OnLoadMoreListener(){
    @Override public void loadMore(    int itemsCount,    final int maxLastVisiblePosition){
      Handler handler=new Handler();
      handler.postDelayed(new Runnable(){
        public void run(){
          simpleRecyclerViewAdapter.insert(""String_Node_Str"" + moreNum++,simpleRecyclerViewAdapter.getAdapterItemCount());
          simpleRecyclerViewAdapter.insert(""String_Node_Str"" + moreNum++,simpleRecyclerViewAdapter.getAdapterItemCount());
          simpleRecyclerViewAdapter.insert(""String_Node_Str"" + moreNum++,simpleRecyclerViewAdapter.getAdapterItemCount());
        }
      }
,1000);
    }
  }
);
  ultimateRecyclerView.setScrollViewCallbacks(new ObservableScrollViewCallbacks(){
    @Override public void onScrollChanged(    int scrollY,    boolean firstScroll,    boolean dragging){
    }
    @Override public void onDownMotionEvent(){
    }
    @Override public void onUpOrCancelMotionEvent(    ObservableScrollState observableScrollState){
      if (observableScrollState == ObservableScrollState.DOWN) {
        ultimateRecyclerView.showToolbar(toolbar,ultimateRecyclerView,getScreenHeight());
      }
 else       if (observableScrollState == ObservableScrollState.UP) {
        ultimateRecyclerView.hideToolbar(toolbar,ultimateRecyclerView,getScreenHeight());
      }
 else       if (observableScrollState == ObservableScrollState.STOP) {
      }
    }
  }
);
  itemTouchListenerAdapter=new ItemTouchListenerAdapter(ultimateRecyclerView.mRecyclerView,new ItemTouchListenerAdapter.RecyclerViewOnItemClickListener(){
    @Override public void onItemClick(    RecyclerView parent,    View clickedView,    int position){
      Logs.d(""String_Node_Str"");
      if (actionMode != null && isDrag) {
        toggleSelection(position);
      }
    }
    @Override public void onItemLongClick(    RecyclerView parent,    View clickedView,    int position){
      Logs.d(""String_Node_Str"" + isDrag);
      if (isDrag) {
        Logs.d(""String_Node_Str"" + isDrag);
        toolbar.startActionMode(UltimateRecyclerViewActivity.this);
        toggleSelection(position);
        dragDropTouchListener.startDrag();
        ultimateRecyclerView.enableDefaultSwipeRefresh(false);
      }
    }
  }
);
  ultimateRecyclerView.mRecyclerView.addOnItemTouchListener(itemTouchListenerAdapter);
  ultimateRecyclerView.setSwipeToDismissCallback(new SwipeToDismissTouchListener.DismissCallbacks(){
    @Override public SwipeToDismissTouchListener.SwipeDirection dismissDirection(    int position){
      return SwipeToDismissTouchListener.SwipeDirection.BOTH;
    }
    @Override public void onDismiss(    RecyclerView view,    List<SwipeToDismissTouchListener.PendingDismissData> dismissData){
      for (      SwipeToDismissTouchListener.PendingDismissData data : dismissData) {
        simpleRecyclerViewAdapter.remove(data.position);
      }
    }
    @Override public void onResetMotion(){
      isDrag=true;
    }
    @Override public void onTouchDown(){
      isDrag=false;
    }
  }
);
  dragDropTouchListener=new DragDropTouchListener(ultimateRecyclerView.mRecyclerView,this){
    @Override protected void onItemSwitch(    RecyclerView recyclerView,    int from,    int to){
      simpleRecyclerViewAdapter.swapPositions(from,to);
      simpleRecyclerViewAdapter.clearSelection(from);
      simpleRecyclerViewAdapter.notifyItemChanged(to);
      if (actionMode != null)       actionMode.finish();
      Logs.d(""String_Node_Str"");
    }
    @Override protected void onItemDrop(    RecyclerView recyclerView,    int position){
      Logs.d(""String_Node_Str"");
      ultimateRecyclerView.enableDefaultSwipeRefresh(true);
    }
  }
;
  dragDropTouchListener.setCustomDragHighlight(getResources().getDrawable(R.drawable.custom_drag_frame));
  ultimateRecyclerView.mRecyclerView.addOnItemTouchListener(dragDropTouchListener);
  Spinner spinner=(Spinner)findViewById(R.id.spinner);
  ArrayAdapter<String> spinnerAdapter=new ArrayAdapter<>(this,android.R.layout.simple_list_item_1);
  for (  Type type : Type.values()) {
    spinnerAdapter.add(type.getTitle());
  }
  spinner.setAdapter(spinnerAdapter);
  spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      Logs.d(""String_Node_Str"" + Type.values()[position].getTitle());
      ultimateRecyclerView.setItemAnimator(Type.values()[position].getAnimator());
      ultimateRecyclerView.getItemAnimator().setAddDuration(300);
      ultimateRecyclerView.getItemAnimator().setRemoveDuration(300);
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  findViewById(R.id.add).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      simpleRecyclerViewAdapter.insert(""String_Node_Str"",1);
    }
  }
);
  findViewById(R.id.del).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      simpleRecyclerViewAdapter.remove(1);
    }
  }
);
}",0.9985431841831426
111086,"@Override protected void onItemDrop(RecyclerView recyclerView,int position){
  Logs.d(""String_Node_Str"");
  ultimateRecyclerView.enableSwipeRefresh(true);
}","@Override protected void onItemDrop(RecyclerView recyclerView,int position){
  Logs.d(""String_Node_Str"");
  ultimateRecyclerView.enableDefaultSwipeRefresh(true);
}",0.9780564263322884
111087,"@Override public void onItemLongClick(RecyclerView parent,View clickedView,int position){
  Logs.d(""String_Node_Str"" + isDrag);
  if (isDrag) {
    Logs.d(""String_Node_Str"" + isDrag);
    toolbar.startActionMode(UltimateRecyclerViewActivity.this);
    toggleSelection(position);
    dragDropTouchListener.startDrag();
    ultimateRecyclerView.enableSwipeRefresh(false);
  }
}","@Override public void onItemLongClick(RecyclerView parent,View clickedView,int position){
  Logs.d(""String_Node_Str"" + isDrag);
  if (isDrag) {
    Logs.d(""String_Node_Str"" + isDrag);
    toolbar.startActionMode(UltimateRecyclerViewActivity.this);
    toggleSelection(position);
    dragDropTouchListener.startDrag();
    ultimateRecyclerView.enableDefaultSwipeRefresh(false);
  }
}",0.9907529722589168
111088,"/** 
 * get file name from path, not include suffix <p/> <pre> getFileNameWithoutExtension(null)               =   null getFileNameWithoutExtension("""")                 =   """" getFileNameWithoutExtension(""   "")              =   ""   "" getFileNameWithoutExtension(""abc"")              =   ""abc"" getFileNameWithoutExtension(""a.mp3"")            =   ""a"" getFileNameWithoutExtension(""a.b.rmvb"")         =   ""a.b"" getFileNameWithoutExtension(""c:\\"")              =   """" getFileNameWithoutExtension(""c:\\a"")             =   ""a"" getFileNameWithoutExtension(""c:\\a.b"")           =   ""a"" getFileNameWithoutExtension(""c:a.txt\\a"")        =   ""a"" getFileNameWithoutExtension(""/home/admin"")      =   ""admin"" getFileNameWithoutExtension(""/home/admin/a.txt/b.mp3"")  =   ""b"" </pre>
 * @param filePath
 * @return file name from path, not include suffix
 * @see
 */
public static String getFileNameWithoutExtension(String filePath){
  if (BasicUtils.judgeNotNull(filePath)) {
    return filePath;
  }
  int extenPosi=filePath.lastIndexOf(FILE_EXTENSION_SEPARATOR);
  int filePosi=filePath.lastIndexOf(File.separator);
  if (filePosi == -1) {
    return (extenPosi == -1 ? filePath : filePath.substring(0,extenPosi));
  }
  if (extenPosi == -1) {
    return filePath.substring(filePosi + 1);
  }
  return (filePosi < extenPosi ? filePath.substring(filePosi + 1,extenPosi) : filePath.substring(filePosi + 1));
}","/** 
 * get file name from path, not include suffix <p/> <pre> getFileNameWithoutExtension(null)               =   null getFileNameWithoutExtension("""")                 =   """" getFileNameWithoutExtension(""   "")              =   ""   "" getFileNameWithoutExtension(""abc"")              =   ""abc"" getFileNameWithoutExtension(""a.mp3"")            =   ""a"" getFileNameWithoutExtension(""a.b.rmvb"")         =   ""a.b"" getFileNameWithoutExtension(""c:\\"")              =   """" getFileNameWithoutExtension(""c:\\a"")             =   ""a"" getFileNameWithoutExtension(""c:\\a.b"")           =   ""a"" getFileNameWithoutExtension(""c:a.txt\\a"")        =   ""a"" getFileNameWithoutExtension(""/home/admin"")      =   ""admin"" getFileNameWithoutExtension(""/home/admin/a.txt/b.mp3"")  =   ""b"" </pre>
 * @param filePath
 * @return file name from path, not include suffix
 * @see
 */
public static String getFileNameWithoutExtension(String filePath){
  if (isFileExist(filePath)) {
    return filePath;
  }
  int extenPosi=filePath.lastIndexOf(FILE_EXTENSION_SEPARATOR);
  int filePosi=filePath.lastIndexOf(File.separator);
  if (filePosi == -1) {
    return (extenPosi == -1 ? filePath : filePath.substring(0,extenPosi));
  }
  if (extenPosi == -1) {
    return filePath.substring(filePosi + 1);
  }
  return (filePosi < extenPosi ? filePath.substring(filePosi + 1,extenPosi) : filePath.substring(filePosi + 1));
}",0.987698986975398
111089,"/** 
 * @deprecated
 * @param fileName
 * @param content
 * @throws IOException
 */
public static void writeFileFromStringBuffers(String fileName,String content) throws IOException {
  String s=new String();
  String s1=new String();
  try {
    File f=new File(fileName);
    if (f.exists()) {
      Logs.d(""String_Node_Str"");
    }
 else {
      Logs.d(""String_Node_Str"");
      if (f.createNewFile()) {
        Logs.d(""String_Node_Str"");
      }
 else {
        Logs.d(""String_Node_Str"");
      }
    }
    BufferedReader input=new BufferedReader(new FileReader(f));
    while ((s=input.readLine()) != null) {
      s1+=s + ""String_Node_Str"";
    }
    System.out.println(""String_Node_Str"" + s1);
    input.close();
    s1+=content;
    BufferedWriter output=new BufferedWriter(new FileWriter(f));
    output.write(s1);
    output.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * @param fileName
 * @param content
 * @throws IOException
 * @deprecated
 */
public static void writeFileFromStringBuffers(String fileName,String content) throws IOException {
  String s=new String();
  String s1=new String();
  try {
    File f=new File(fileName);
    if (f.exists()) {
      Logs.d(""String_Node_Str"");
    }
 else {
      Logs.d(""String_Node_Str"");
      if (f.createNewFile()) {
        Logs.d(""String_Node_Str"");
      }
 else {
        Logs.d(""String_Node_Str"");
      }
    }
    BufferedReader input=new BufferedReader(new FileReader(f));
    while ((s=input.readLine()) != null) {
      s1+=s + ""String_Node_Str"";
    }
    System.out.println(""String_Node_Str"" + s1);
    input.close();
    s1+=content;
    BufferedWriter output=new BufferedWriter(new FileWriter(f));
    output.write(s1);
    output.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.983370288248337
111090,"/** 
 * get file name from path, include suffix <p/> <pre> getFileName(null)               =   null getFileName("""")                 =   """" getFileName(""   "")              =   ""   "" getFileName(""a.mp3"")            =   ""a.mp3"" getFileName(""a.b.rmvb"")         =   ""a.b.rmvb"" getFileName(""abc"")              =   ""abc"" getFileName(""c:\\"")              =   """" getFileName(""c:\\a"")             =   ""a"" getFileName(""c:\\a.b"")           =   ""a.b"" getFileName(""c:a.txt\\a"")        =   ""a"" getFileName(""/home/admin"")      =   ""admin"" getFileName(""/home/admin/a.txt/b.mp3"")  =   ""b.mp3"" </pre>
 * @param filePath
 * @return file name from path, include suffix
 */
public static String getFileName(String filePath){
  if (BasicUtils.judgeNotNull(filePath)) {
    return filePath;
  }
  int filePosi=filePath.lastIndexOf(File.separator);
  return (filePosi == -1) ? filePath : filePath.substring(filePosi + 1);
}","/** 
 * get file name from path, include suffix <p/> <pre> getFileName(null)               =   null getFileName("""")                 =   """" getFileName(""   "")              =   ""   "" getFileName(""a.mp3"")            =   ""a.mp3"" getFileName(""a.b.rmvb"")         =   ""a.b.rmvb"" getFileName(""abc"")              =   ""abc"" getFileName(""c:\\"")              =   """" getFileName(""c:\\a"")             =   ""a"" getFileName(""c:\\a.b"")           =   ""a.b"" getFileName(""c:a.txt\\a"")        =   ""a"" getFileName(""/home/admin"")      =   ""admin"" getFileName(""/home/admin/a.txt/b.mp3"")  =   ""b.mp3"" </pre>
 * @param filePath
 * @return file name from path, include suffix
 */
public static String getFileName(String filePath){
  if (isFileExist(filePath)) {
    return filePath;
  }
  int filePosi=filePath.lastIndexOf(File.separator);
  return (filePosi == -1) ? filePath : filePath.substring(filePosi + 1);
}",0.9809417040358744
111091,"/** 
 * @deprecated Copy all the files in folder
 * @param oldPath String
 * @param newPath String
 * @return boolean
 */
public void copyFolder(String oldPath,String newPath) throws IOException {
  try {
    (new File(newPath)).mkdirs();
    File a=new File(oldPath);
    String[] file=a.list();
    File temp=null;
    for (int i=0; i < file.length; i++) {
      if (oldPath.endsWith(File.separator)) {
        temp=new File(oldPath + file[i]);
      }
 else {
        temp=new File(oldPath + File.separator + file[i]);
      }
      if (temp.isFile()) {
        FileInputStream input=new FileInputStream(temp);
        FileOutputStream output=new FileOutputStream(newPath + ""String_Node_Str"" + (temp.getName()).toString());
        byte[] b=new byte[1024 * 5];
        int len;
        while ((len=input.read(b)) != -1) {
          output.write(b,0,len);
        }
        output.flush();
        output.close();
        input.close();
      }
      if (temp.isDirectory()) {
        copyFolder(oldPath + ""String_Node_Str"" + file[i],newPath + ""String_Node_Str"" + file[i]);
      }
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","/** 
 * @param oldPath String
 * @param newPath String
 * @return boolean
 * @deprecated Copy all the files in folder
 */
public void copyFolder(String oldPath,String newPath) throws IOException {
  try {
    (new File(newPath)).mkdirs();
    File a=new File(oldPath);
    String[] file=a.list();
    File temp=null;
    for (int i=0; i < file.length; i++) {
      if (oldPath.endsWith(File.separator)) {
        temp=new File(oldPath + file[i]);
      }
 else {
        temp=new File(oldPath + File.separator + file[i]);
      }
      if (temp.isFile()) {
        FileInputStream input=new FileInputStream(temp);
        FileOutputStream output=new FileOutputStream(newPath + ""String_Node_Str"" + (temp.getName()).toString());
        byte[] b=new byte[1024 * 5];
        int len;
        while ((len=input.read(b)) != -1) {
          output.write(b,0,len);
        }
        output.flush();
        output.close();
        input.close();
      }
      if (temp.isDirectory()) {
        copyFolder(oldPath + ""String_Node_Str"" + file[i],newPath + ""String_Node_Str"" + file[i]);
      }
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}",0.9421140939597316
111092,"/** 
 * get folder name from path <p/> <pre> getFolderName(null)               =   null getFolderName("""")                 =   """" getFolderName(""   "")              =   """" getFolderName(""a.mp3"")            =   """" getFolderName(""a.b.rmvb"")         =   """" getFolderName(""abc"")              =   """" getFolderName(""c:\\"")              =   ""c:"" getFolderName(""c:\\a"")             =   ""c:"" getFolderName(""c:\\a.b"")           =   ""c:"" getFolderName(""c:a.txt\\a"")        =   ""c:a.txt"" getFolderName(""c:a\\b\\c\\d.txt"")    =   ""c:a\\b\\c"" getFolderName(""/home/admin"")      =   ""/home"" getFolderName(""/home/admin/a.txt/b.mp3"")  =   ""/home/admin/a.txt"" </pre>
 * @param filePath
 * @return
 */
public static String getFolderName(String filePath){
  if (BasicUtils.judgeNotNull(filePath)) {
    return filePath;
  }
  int filePosi=filePath.lastIndexOf(File.separator);
  return (filePosi == -1) ? ""String_Node_Str"" : filePath.substring(0,filePosi);
}","/** 
 * get folder name from path <p/> <pre> getFolderName(null)               =   null getFolderName("""")                 =   """" getFolderName(""   "")              =   """" getFolderName(""a.mp3"")            =   """" getFolderName(""a.b.rmvb"")         =   """" getFolderName(""abc"")              =   """" getFolderName(""c:\\"")              =   ""c:"" getFolderName(""c:\\a"")             =   ""c:"" getFolderName(""c:\\a.b"")           =   ""c:"" getFolderName(""c:a.txt\\a"")        =   ""c:a.txt"" getFolderName(""c:a\\b\\c\\d.txt"")    =   ""c:a\\b\\c"" getFolderName(""/home/admin"")      =   ""/home"" getFolderName(""/home/admin/a.txt/b.mp3"")  =   ""/home/admin/a.txt"" </pre>
 * @param filePath
 * @return
 */
public static String getFolderName(String filePath){
  if (isFileExist(filePath)) {
    return filePath;
  }
  int filePosi=filePath.lastIndexOf(File.separator);
  return (filePosi == -1) ? ""String_Node_Str"" : filePath.substring(0,filePosi);
}",0.9838536060279872
111093,"/** 
 * Creates the directory named by the trailing filename of this file, including the complete directory path required to create this directory. <br/> <br/> <ul> <strong>Attentions:</strong> <li>makeDirs(""C:\\Users\\Trinea"") can only create users folder</li> <li>makeFolder(""C:\\Users\\Trinea\\"") can create Trinea folder</li> </ul>
 * @param filePath
 * @return true if the necessary directories have been created or the target directory already exists, false one ofthe directories can not be created. <ul> <li>if  {@link FileUtils#getFolderName(String)} return null, return false</li><li>if target directory already exists, return true</li> <li>return  {@link java.io.File#}</li> </ul>
 */
public static boolean makeDirs(String filePath){
  String folderName=getFolderName(filePath);
  if (BasicUtils.judgeNotNull(folderName)) {
    return false;
  }
  File folder=new File(folderName);
  return (folder.exists() && folder.isDirectory()) ? true : folder.mkdirs();
}","/** 
 * Creates the directory named by the trailing filename of this file, including the complete directory path required to create this directory. <br/> <br/> <ul> <strong>Attentions:</strong> <li>makeDirs(""C:\\Users\\Trinea"") can only create users folder</li> <li>makeFolder(""C:\\Users\\Trinea\\"") can create Trinea folder</li> </ul>
 * @param filePath
 * @return true if the necessary directories have been created or the target directory already exists, false one ofthe directories can not be created. <ul> <li>if  {@link FileUtils#getFolderName(String)} return null, return false</li><li>if target directory already exists, return true</li> <li>return  {@link java.io.File#}</li> </ul>
 */
public static boolean makeDirs(String filePath){
  String folderName=getFolderName(filePath);
  File folder=new File(folderName);
  Logs.d(folder.getAbsolutePath() + ""String_Node_Str"" + folder.exists());
  if (folder.exists()) {
    return false;
  }
  return (folder.exists() && folder.isDirectory()) ? true : folder.mkdirs();
}",0.9027081243731192
111094,"/** 
 * @deprecated
 * @param fileName
 * @param content
 * @throws IOException
 */
public static void writeFileFromString(String fileName,String content) throws IOException {
  FileOutputStream fileOutputStream=new FileOutputStream(new File(fileName));
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(fileOutputStream);
  bufferedOutputStream.write(content.getBytes());
  bufferedOutputStream.flush();
  bufferedOutputStream.close();
  fileOutputStream.close();
}","/** 
 * @param fileName
 * @param content
 * @throws IOException
 * @deprecated
 */
public static void writeFileFromString(String fileName,String content) throws IOException {
  FileOutputStream fileOutputStream=new FileOutputStream(new File(fileName));
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(fileOutputStream);
  bufferedOutputStream.write(content.getBytes());
  bufferedOutputStream.flush();
  bufferedOutputStream.close();
  fileOutputStream.close();
}",0.9690721649484536
111095,"public static void getUseCookie(Context context,String url,HashMap hashMap,AsyncHttpResponseHandler responseHandler){
  PersistentCookieStore myCookieStore=new PersistentCookieStore(context);
  if (BasicUtils.judgeNotNull(hashMap)) {
    Iterator iterator=hashMap.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry entry=(Map.Entry)iterator.next();
      Object key=entry.getKey();
      Object value=entry.getValue();
      Cookie cookie=new BasicClientCookie(key.toString(),value.toString());
      myCookieStore.addCookie(cookie);
    }
  }
  client.setCookieStore(myCookieStore);
  client.get(getAbsoluteUrl(url),responseHandler);
}","public static void getUseCookie(Context context,String url,HashMap hashMap,AsyncHttpResponseHandler responseHandler){
  PersistentCookieStore myCookieStore=new PersistentCookieStore(context);
  if (BasicUtils.judgeNotNull(hashMap)) {
    Iterator iterator=hashMap.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry entry=(Map.Entry)iterator.next();
      Object key=entry.getKey();
      Object value=entry.getValue();
      Cookie cookie=new BasicClientCookie(key.toString(),value.toString());
      myCookieStore.addCookie(cookie);
    }
  }
  AsyncHttpClient client=new AsyncHttpClient();
  client.setCookieStore(myCookieStore);
  client.get(getAbsoluteUrl(url),responseHandler);
}",0.9647577092511012
111096,"public static void post(String url,AsyncHttpResponseHandler responseHandler){
  client.post(getAbsoluteUrl(url),responseHandler);
}","public static void post(String url,AsyncHttpResponseHandler responseHandler){
  AsyncHttpClient client=new AsyncHttpClient();
  client.post(getAbsoluteUrl(url),responseHandler);
}",0.8451612903225807
111097,"public static void get(String url,AsyncHttpResponseHandler responseHandler){
  client.setTimeout(TIME_OUT);
  client.get(getAbsoluteUrl(url),responseHandler);
}","public static void get(String url,AsyncHttpResponseHandler responseHandler){
  AsyncHttpClient client=new AsyncHttpClient();
  client.setTimeout(TIME_OUT);
  client.get(getAbsoluteUrl(url),responseHandler);
}",0.8695652173913043
111098,"public static void getWithCookie(Context context,String url,RequestParams params,AsyncHttpResponseHandler responseHandler){
  PersistentCookieStore myCookieStore=new PersistentCookieStore(context);
  client.setCookieStore(myCookieStore);
  client.get(getAbsoluteUrl(url),params,responseHandler);
}","public static void getWithCookie(Context context,String url,RequestParams params,AsyncHttpResponseHandler responseHandler){
  AsyncHttpClient client=new AsyncHttpClient();
  PersistentCookieStore myCookieStore=new PersistentCookieStore(context);
  client.setCookieStore(myCookieStore);
  client.get(getAbsoluteUrl(url),params,responseHandler);
}",0.9252336448598132
111099,"protected DefaultDockerClient.Builder getBuilder() throws DockerCertificateException {
  return DefaultDockerClient.fromEnv().readTimeoutMillis(NO_TIMEOUT);
}","protected DefaultDockerClient.Builder getBuilder() throws DockerCertificateException {
  return DefaultDockerClient.fromEnv().readTimeoutMillis(0);
}",0.9641693811074918
111100,"private void createDockerFile(final String directory,final List<String> filesToAdd) throws IOException {
  final List<String> commands=newArrayList();
  if (baseImage != null) {
    commands.add(""String_Node_Str"" + baseImage);
  }
  if (maintainer != null) {
    commands.add(""String_Node_Str"" + maintainer);
  }
  if (env != null) {
    final List<String> sortedKeys=Ordering.natural().sortedCopy(env.keySet());
    for (    String key : sortedKeys) {
      final String value=env.get(key);
      commands.add(String.format(""String_Node_Str"",key,value));
    }
  }
  if (workdir != null) {
    commands.add(""String_Node_Str"" + workdir);
  }
  for (  String file : filesToAdd) {
    commands.add(String.format(""String_Node_Str"",file,normalizeDest(file)));
  }
  if (runList != null && !runList.isEmpty()) {
    if (squashRunCommands) {
      commands.add(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(runList));
    }
 else {
      for (      final String run : runList) {
        commands.add(""String_Node_Str"" + run);
      }
    }
  }
  if (exposesSet.size() > 0) {
    commands.add(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(exposesSet));
  }
  if (user != null) {
    commands.add(""String_Node_Str"" + user);
  }
  if (entryPoint != null) {
    commands.add(""String_Node_Str"" + entryPoint);
  }
  if (cmd != null) {
    if (entryPoint != null) {
      if (cmd.startsWith(""String_Node_Str"") && cmd.endsWith(""String_Node_Str"")) {
        commands.add(""String_Node_Str"" + cmd);
      }
 else {
        final List<String> args=ImmutableList.copyOf(Splitter.on(WHITESPACE).omitEmptyStrings().split(cmd));
        final StringBuilder cmdBuilder=new StringBuilder(""String_Node_Str"");
        for (        String arg : args) {
          cmdBuilder.append('""').append(arg).append('""');
        }
        cmdBuilder.append(']');
        final String cmdString=cmdBuilder.toString();
        commands.add(""String_Node_Str"" + cmdString);
        getLog().warn(""String_Node_Str"" + ""String_Node_Str"");
        getLog().warn(""String_Node_Str"" + cmdString);
      }
    }
 else {
      commands.add(""String_Node_Str"" + cmd);
    }
  }
  if (volumes != null) {
    for (    String volume : volumes) {
      commands.add(""String_Node_Str"" + volume);
    }
  }
  if (labels != null) {
    for (    String label : labels) {
      commands.add(""String_Node_Str"" + label);
    }
  }
  getLog().debug(""String_Node_Str"" + System.lineSeparator() + Joiner.on(System.lineSeparator()).join(commands));
  Files.createDirectories(Paths.get(directory));
  Files.write(Paths.get(directory,""String_Node_Str""),commands,UTF_8);
}","private void createDockerFile(final String directory,final List<String> filesToAdd) throws IOException {
  final List<String> commands=newArrayList();
  if (baseImage != null) {
    commands.add(""String_Node_Str"" + baseImage);
  }
  if (maintainer != null) {
    commands.add(""String_Node_Str"" + maintainer);
  }
  if (env != null) {
    final List<String> sortedKeys=Ordering.natural().sortedCopy(env.keySet());
    for (    final String key : sortedKeys) {
      final String value=env.get(key);
      commands.add(String.format(""String_Node_Str"",key,value));
    }
  }
  if (workdir != null) {
    commands.add(""String_Node_Str"" + workdir);
  }
  for (  final String file : filesToAdd) {
    commands.add(String.format(""String_Node_Str"",file,normalizeDest(file)));
  }
  if (runList != null && !runList.isEmpty()) {
    if (squashRunCommands) {
      commands.add(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(runList));
    }
 else {
      for (      final String run : runList) {
        commands.add(""String_Node_Str"" + run);
      }
    }
  }
  if (exposesSet.size() > 0) {
    commands.add(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(exposesSet));
  }
  if (user != null) {
    commands.add(""String_Node_Str"" + user);
  }
  if (entryPoint != null) {
    commands.add(""String_Node_Str"" + entryPoint);
  }
  if (cmd != null) {
    if (entryPoint != null) {
      if (cmd.startsWith(""String_Node_Str"") && cmd.endsWith(""String_Node_Str"")) {
        commands.add(""String_Node_Str"" + cmd);
      }
 else {
        final List<String> args=ImmutableList.copyOf(Splitter.on(WHITESPACE).omitEmptyStrings().split(cmd));
        final StringBuilder cmdBuilder=new StringBuilder(""String_Node_Str"");
        for (        final String arg : args) {
          cmdBuilder.append('""').append(arg).append('""');
        }
        cmdBuilder.append(']');
        final String cmdString=cmdBuilder.toString();
        commands.add(""String_Node_Str"" + cmdString);
        getLog().warn(""String_Node_Str"" + ""String_Node_Str"");
        getLog().warn(""String_Node_Str"" + cmdString);
      }
    }
 else {
      commands.add(""String_Node_Str"" + cmd);
    }
  }
  if (volumes != null) {
    for (    final String volume : volumes) {
      commands.add(""String_Node_Str"" + volume);
    }
  }
  if (labels != null) {
    for (    final String label : labels) {
      commands.add(""String_Node_Str"" + label);
    }
  }
  getLog().debug(""String_Node_Str"" + System.lineSeparator() + Joiner.on(System.lineSeparator()).join(commands));
  Files.createDirectories(Paths.get(directory));
  Files.write(Paths.get(directory,""String_Node_Str""),commands,UTF_8);
}",0.9943009118541032
111101,"private List<String> copyResources(String destination) throws IOException {
  final List<String> allCopiedPaths=newArrayList();
  for (  Resource resource : resources) {
    final File source=new File(resource.getDirectory());
    final List<String> includes=resource.getIncludes();
    final List<String> excludes=resource.getExcludes();
    final DirectoryScanner scanner=new DirectoryScanner();
    scanner.setBasedir(source);
    scanner.setIncludes(includes.isEmpty() ? null : includes.toArray(new String[includes.size()]));
    scanner.setExcludes(excludes.isEmpty() ? null : excludes.toArray(new String[excludes.size()]));
    scanner.scan();
    final String[] includedFiles=scanner.getIncludedFiles();
    if (includedFiles.length == 0) {
      getLog().info(""String_Node_Str"");
    }
    final List<String> copiedPaths=newArrayList();
    boolean copyWholeDir=includes.isEmpty() && excludes.isEmpty() && resource.getTargetPath() != null;
    final String targetPath=resource.getTargetPath() == null ? ""String_Node_Str"" : resource.getTargetPath();
    if (copyWholeDir) {
      final Path destPath=Paths.get(destination,targetPath);
      getLog().info(String.format(""String_Node_Str"",source,destPath));
      Files.createDirectories(destPath);
      FileUtils.copyDirectoryStructure(source,destPath.toFile());
      copiedPaths.add(separatorsToUnix(targetPath));
    }
 else {
      for (      String included : includedFiles) {
        final Path sourcePath=Paths.get(resource.getDirectory()).resolve(included);
        final Path destPath=Paths.get(destination,targetPath).resolve(included);
        getLog().info(String.format(""String_Node_Str"",sourcePath,destPath));
        Files.createDirectories(destPath.getParent());
        Files.copy(sourcePath,destPath,StandardCopyOption.REPLACE_EXISTING,StandardCopyOption.COPY_ATTRIBUTES);
        copiedPaths.add(separatorsToUnix(Paths.get(targetPath).resolve(included).toString()));
      }
    }
    Collections.sort(copiedPaths);
    allCopiedPaths.addAll(copiedPaths);
  }
  return allCopiedPaths;
}","private List<String> copyResources(String destination) throws IOException {
  final List<String> allCopiedPaths=newArrayList();
  for (  final Resource resource : resources) {
    final File source=new File(resource.getDirectory());
    final List<String> includes=resource.getIncludes();
    final List<String> excludes=resource.getExcludes();
    final DirectoryScanner scanner=new DirectoryScanner();
    scanner.setBasedir(source);
    scanner.setIncludes(includes.isEmpty() ? null : includes.toArray(new String[includes.size()]));
    scanner.setExcludes(excludes.isEmpty() ? null : excludes.toArray(new String[excludes.size()]));
    scanner.scan();
    final String[] includedFiles=scanner.getIncludedFiles();
    if (includedFiles.length == 0) {
      getLog().info(""String_Node_Str"");
    }
    final List<String> copiedPaths=newArrayList();
    final boolean copyWholeDir=includes.isEmpty() && excludes.isEmpty() && resource.getTargetPath() != null;
    final String targetPath=resource.getTargetPath() == null ? ""String_Node_Str"" : resource.getTargetPath();
    if (copyWholeDir) {
      final Path destPath=Paths.get(destination,targetPath);
      getLog().info(String.format(""String_Node_Str"",source,destPath));
      Files.createDirectories(destPath);
      FileUtils.copyDirectoryStructure(source,destPath.toFile());
      copiedPaths.add(separatorsToUnix(targetPath));
    }
 else {
      for (      final String included : includedFiles) {
        final Path sourcePath=Paths.get(resource.getDirectory()).resolve(included);
        final Path destPath=Paths.get(destination,targetPath).resolve(included);
        getLog().info(String.format(""String_Node_Str"",sourcePath,destPath));
        Files.createDirectories(destPath.getParent());
        Files.copy(sourcePath,destPath,StandardCopyOption.REPLACE_EXISTING,StandardCopyOption.COPY_ATTRIBUTES);
        copiedPaths.add(separatorsToUnix(Paths.get(targetPath).resolve(included).toString()));
      }
    }
    Collections.sort(copiedPaths);
    allCopiedPaths.addAll(copiedPaths);
  }
  return allCopiedPaths;
}",0.9956542732979236
111102,"private void loadProfile() throws MojoExecutionException {
  final Config config=ConfigFactory.load();
  defaultProfile=get(defaultProfile,config,""String_Node_Str"");
  if (profile == null) {
    if (defaultProfile == null) {
      getLog().debug(""String_Node_Str"");
      return;
    }
 else {
      getLog().info(""String_Node_Str"" + defaultProfile);
      profile=defaultProfile;
    }
  }
 else {
    getLog().info(""String_Node_Str"" + profile);
  }
  Config profiles;
  try {
    profiles=config.getConfig(""String_Node_Str"");
  }
 catch (  ConfigException.Missing e) {
    profiles=ConfigFactory.empty();
  }
  final Config profileConfig;
  try {
    profileConfig=profiles.getConfig(profile);
  }
 catch (  ConfigException.Missing e) {
    getLog().error(""String_Node_Str"" + profile);
    getLog().error(""String_Node_Str"");
    for (    final String name : natural().sortedCopy(profiles.root().keySet())) {
      getLog().error(name);
    }
    throw new MojoExecutionException(""String_Node_Str"" + profile);
  }
  getLog().info(""String_Node_Str"" + profile);
  getLog().info(profileConfig.root().render(concise().setJson(true).setFormatted(true)));
  List<? extends Config> resourceConfigs=emptyList();
  try {
    resourceConfigs=profileConfig.getConfigList(""String_Node_Str"");
  }
 catch (  ConfigException.Missing ignore) {
  }
  for (  final Config resourceConfig : resourceConfigs) {
    final Resource resource=new Resource();
    try {
      resource.setDirectory(expand(resourceConfig.getString(""String_Node_Str"")));
    }
 catch (    ConfigException.Missing e) {
      throw new MojoExecutionException(""String_Node_Str"",e);
    }
    try {
      resource.setTargetPath(expand(resourceConfig.getString(""String_Node_Str"")));
    }
 catch (    ConfigException.Missing ignore) {
    }
    try {
      final List<String> includes=resourceConfig.getStringList(""String_Node_Str"");
      final List<String> expanded=newArrayList();
      for (      final String raw : includes) {
        expanded.add(expand(raw));
      }
      resource.setIncludes(expanded);
    }
 catch (    ConfigException.Missing ignore) {
    }
    resources.add(resource);
  }
  Config envConfig=ConfigFactory.empty();
  try {
    envConfig=profileConfig.getConfig(""String_Node_Str"");
  }
 catch (  ConfigException.Missing ignore) {
  }
  if (env == null) {
    env=Maps.newHashMap();
  }
  for (  Map.Entry<String,ConfigValue> entry : envConfig.root().entrySet()) {
    final String key=expand(entry.getKey());
    if (!env.containsKey(key)) {
      env.put(key,expand(entry.getValue().unwrapped().toString()));
    }
  }
  List<String> exposesList=emptyList();
  try {
    exposesList=profileConfig.getStringList(""String_Node_Str"");
  }
 catch (  ConfigException.Missing ignore) {
  }
  for (  final String raw : exposesList) {
    exposesSet.add(expand(raw));
  }
  try {
    runList.addAll(profileConfig.getStringList(""String_Node_Str""));
  }
 catch (  ConfigException.Missing ignore) {
  }
  imageName=get(imageName,profileConfig,""String_Node_Str"");
  baseImage=get(baseImage,profileConfig,""String_Node_Str"");
  entryPoint=get(entryPoint,profileConfig,""String_Node_Str"");
  cmd=get(cmd,profileConfig,""String_Node_Str"");
  workdir=get(workdir,profileConfig,""String_Node_Str"");
  user=get(user,profileConfig,""String_Node_Str"");
}","private void loadProfile() throws MojoExecutionException {
  final Config config=ConfigFactory.load();
  defaultProfile=get(defaultProfile,config,""String_Node_Str"");
  if (profile == null) {
    if (defaultProfile == null) {
      getLog().debug(""String_Node_Str"");
      return;
    }
 else {
      getLog().info(""String_Node_Str"" + defaultProfile);
      profile=defaultProfile;
    }
  }
 else {
    getLog().info(""String_Node_Str"" + profile);
  }
  Config profiles;
  try {
    profiles=config.getConfig(""String_Node_Str"");
  }
 catch (  ConfigException.Missing e) {
    profiles=ConfigFactory.empty();
  }
  final Config profileConfig;
  try {
    profileConfig=profiles.getConfig(profile);
  }
 catch (  ConfigException.Missing e) {
    getLog().error(""String_Node_Str"" + profile);
    getLog().error(""String_Node_Str"");
    for (    final String name : natural().sortedCopy(profiles.root().keySet())) {
      getLog().error(name);
    }
    throw new MojoExecutionException(""String_Node_Str"" + profile);
  }
  getLog().info(""String_Node_Str"" + profile);
  getLog().info(profileConfig.root().render(concise().setJson(true).setFormatted(true)));
  List<? extends Config> resourceConfigs=emptyList();
  try {
    resourceConfigs=profileConfig.getConfigList(""String_Node_Str"");
  }
 catch (  ConfigException.Missing ignore) {
  }
  for (  final Config resourceConfig : resourceConfigs) {
    final Resource resource=new Resource();
    try {
      resource.setDirectory(expand(resourceConfig.getString(""String_Node_Str"")));
    }
 catch (    ConfigException.Missing e) {
      throw new MojoExecutionException(""String_Node_Str"",e);
    }
    try {
      resource.setTargetPath(expand(resourceConfig.getString(""String_Node_Str"")));
    }
 catch (    ConfigException.Missing ignore) {
    }
    try {
      final List<String> includes=resourceConfig.getStringList(""String_Node_Str"");
      final List<String> expanded=newArrayList();
      for (      final String raw : includes) {
        expanded.add(expand(raw));
      }
      resource.setIncludes(expanded);
    }
 catch (    ConfigException.Missing ignore) {
    }
    resources.add(resource);
  }
  Config envConfig=ConfigFactory.empty();
  try {
    envConfig=profileConfig.getConfig(""String_Node_Str"");
  }
 catch (  ConfigException.Missing ignore) {
  }
  if (env == null) {
    env=Maps.newHashMap();
  }
  for (  final Map.Entry<String,ConfigValue> entry : envConfig.root().entrySet()) {
    final String key=expand(entry.getKey());
    if (!env.containsKey(key)) {
      env.put(key,expand(entry.getValue().unwrapped().toString()));
    }
  }
  List<String> exposesList=emptyList();
  try {
    exposesList=profileConfig.getStringList(""String_Node_Str"");
  }
 catch (  ConfigException.Missing ignore) {
  }
  for (  final String raw : exposesList) {
    exposesSet.add(expand(raw));
  }
  try {
    runList.addAll(profileConfig.getStringList(""String_Node_Str""));
  }
 catch (  ConfigException.Missing ignore) {
  }
  imageName=get(imageName,profileConfig,""String_Node_Str"");
  baseImage=get(baseImage,profileConfig,""String_Node_Str"");
  entryPoint=get(entryPoint,profileConfig,""String_Node_Str"");
  cmd=get(cmd,profileConfig,""String_Node_Str"");
  workdir=get(workdir,profileConfig,""String_Node_Str"");
  user=get(user,profileConfig,""String_Node_Str"");
}",0.9990944763054632
111103,"private void updateGitInformation(Log log){
  try {
    Repository repo=new Git().getRepo();
    if (repo != null) {
      this.repo=repo.getConfig().getString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      final ObjectId head=repo.resolve(""String_Node_Str"");
      if (head != null && !isNullOrEmpty(head.getName())) {
        this.commit=head.getName();
      }
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}","private void updateGitInformation(Log log){
  try {
    final Repository repo=new Git().getRepo();
    if (repo != null) {
      this.repo=repo.getConfig().getString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      final ObjectId head=repo.resolve(""String_Node_Str"");
      if (head != null && !isNullOrEmpty(head.getName())) {
        this.commit=head.getName();
      }
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}",0.9934782608695653
111104,"public String getCommitId() throws GitAPIException, DockerException, IOException, MojoExecutionException {
  if (repo == null) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  final StringBuilder result=new StringBuilder();
  try {
    final ObjectId head=repo.resolve(""String_Node_Str"");
    if (head == null || isNullOrEmpty(head.getName())) {
      return null;
    }
    result.append(head.getName().substring(0,7));
    final org.eclipse.jgit.api.Git git=new org.eclipse.jgit.api.Git(repo);
    for (    Ref gitTag : git.tagList().call()) {
      if (gitTag.getObjectId().equals(head)) {
        final String name=gitTag.getName();
        result.append(""String_Node_Str"");
        result.append(name.substring(name.lastIndexOf('/') + 1));
        break;
      }
    }
    final Status status=git.status().call();
    if (status.hasUncommittedChanges()) {
      result.append(""String_Node_Str"");
    }
  }
  finally {
    repo.close();
  }
  return result.length() == 0 ? null : result.toString();
}","public String getCommitId() throws GitAPIException, DockerException, IOException, MojoExecutionException {
  if (repo == null) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  final StringBuilder result=new StringBuilder();
  try {
    final ObjectId head=repo.resolve(""String_Node_Str"");
    if (head == null || isNullOrEmpty(head.getName())) {
      return null;
    }
    result.append(head.getName().substring(0,7));
    final org.eclipse.jgit.api.Git git=new org.eclipse.jgit.api.Git(repo);
    for (    final Ref gitTag : git.tagList().call()) {
      if (gitTag.getObjectId().equals(head)) {
        final String name=gitTag.getName();
        result.append(""String_Node_Str"");
        result.append(name.substring(name.lastIndexOf('/') + 1));
        break;
      }
    }
    final Status status=git.status().call();
    if (status.hasUncommittedChanges()) {
      result.append(""String_Node_Str"");
    }
  }
  finally {
    repo.close();
  }
  return result.length() == 0 ? null : result.toString();
}",0.997067448680352
111105,"protected void execute(final DockerClient docker) throws MojoExecutionException, DockerException, IOException, InterruptedException {
  final String imageNameWithoutTag=parseImageName(imageName)[0];
  if (imageTags == null) {
    imageTags=Collections.singletonList(""String_Node_Str"");
  }
  for (  final String imageTag : imageTags) {
    String currImageName=imageNameWithoutTag + ((isNullOrEmpty(imageTag)) ? ""String_Node_Str"" : (""String_Node_Str"" + imageTag));
    getLog().info(""String_Node_Str"" + currImageName);
    try {
      for (      RemovedImage removedImage : docker.removeImage(currImageName,true,false)) {
        getLog().info(""String_Node_Str"" + removedImage.imageId());
      }
    }
 catch (    ImageNotFoundException|NotFoundException e) {
      getLog().warn(""String_Node_Str"" + imageName + ""String_Node_Str"");
    }
  }
}","protected void execute(final DockerClient docker) throws MojoExecutionException, DockerException, IOException, InterruptedException {
  final String imageNameWithoutTag=parseImageName(imageName)[0];
  if (imageTags == null) {
    imageTags=Collections.singletonList(""String_Node_Str"");
  }
  for (  final String imageTag : imageTags) {
    final String currImageName=imageNameWithoutTag + ((isNullOrEmpty(imageTag)) ? ""String_Node_Str"" : (""String_Node_Str"" + imageTag));
    getLog().info(""String_Node_Str"" + currImageName);
    try {
      for (      final RemovedImage removedImage : docker.removeImage(currImageName,true,false)) {
        getLog().info(""String_Node_Str"" + removedImage.imageId());
      }
    }
 catch (    ImageNotFoundException|NotFoundException e) {
      getLog().warn(""String_Node_Str"" + imageName + ""String_Node_Str"");
    }
  }
}",0.9929411764705882
111106,"@Test public void testSettingsNoEmail() throws Exception {
  ReflectionTestUtils.setField(sut,""String_Node_Str"",SERVER_ID);
  Server server=mockServer();
  server.setConfiguration(new Xpp3Dom(CONFIGURATION_PROPERTY));
  when(settings.getServer(SERVER_ID)).thenReturn(server);
  Throwable cause=null;
  try {
    sut.execute();
  }
 catch (  MojoExecutionException exception) {
    cause=exception.getCause();
  }
  assertThat(cause).isNotNull().isExactlyInstanceOf(MojoExecutionException.class).hasMessageStartingWith(AUTHORIZATION_EXCEPTION);
}","@Test public void testSettingsNoEmail() throws Exception {
  ReflectionTestUtils.setField(sut,""String_Node_Str"",SERVER_ID);
  final Server server=mockServer();
  server.setConfiguration(new Xpp3Dom(CONFIGURATION_PROPERTY));
  when(settings.getServer(SERVER_ID)).thenReturn(server);
  Throwable cause=null;
  try {
    sut.execute();
  }
 catch (  MojoExecutionException exception) {
    cause=exception.getCause();
  }
  assertThat(cause).isNotNull().isExactlyInstanceOf(MojoExecutionException.class).hasMessageStartingWith(AUTHORIZATION_EXCEPTION);
}",0.9945255474452556
111107,"@Test public void testSettingsNoConfiguration() throws Exception {
  ReflectionTestUtils.setField(sut,""String_Node_Str"",SERVER_ID);
  Server server=mockServer();
  server.setConfiguration(null);
  when(settings.getServer(SERVER_ID)).thenReturn(server);
  Throwable cause=null;
  try {
    sut.execute();
  }
 catch (  MojoExecutionException exception) {
    cause=exception.getCause();
  }
  assertThat(cause).isNotNull().isExactlyInstanceOf(MojoExecutionException.class).hasMessageStartingWith(AUTHORIZATION_EXCEPTION);
}","@Test public void testSettingsNoConfiguration() throws Exception {
  ReflectionTestUtils.setField(sut,""String_Node_Str"",SERVER_ID);
  final Server server=mockServer();
  server.setConfiguration(null);
  when(settings.getServer(SERVER_ID)).thenReturn(server);
  Throwable cause=null;
  try {
    sut.execute();
  }
 catch (  MojoExecutionException exception) {
    cause=exception.getCause();
  }
  assertThat(cause).isNotNull().isExactlyInstanceOf(MojoExecutionException.class).hasMessageStartingWith(AUTHORIZATION_EXCEPTION);
}",0.9942857142857144
111108,"@Test public void testSettingsNoUsername() throws Exception {
  ReflectionTestUtils.setField(sut,""String_Node_Str"",SERVER_ID);
  Server server=mockServer();
  server.setUsername(null);
  when(settings.getServer(SERVER_ID)).thenReturn(server);
  Throwable cause=null;
  try {
    sut.execute();
  }
 catch (  MojoExecutionException exception) {
    cause=exception.getCause();
  }
  assertThat(cause).isNotNull().isExactlyInstanceOf(MojoExecutionException.class).hasMessageStartingWith(AUTHORIZATION_EXCEPTION);
}","@Test public void testSettingsNoUsername() throws Exception {
  ReflectionTestUtils.setField(sut,""String_Node_Str"",SERVER_ID);
  final Server server=mockServer();
  server.setUsername(null);
  when(settings.getServer(SERVER_ID)).thenReturn(server);
  Throwable cause=null;
  try {
    sut.execute();
  }
 catch (  MojoExecutionException exception) {
    cause=exception.getCause();
  }
  assertThat(cause).isNotNull().isExactlyInstanceOf(MojoExecutionException.class).hasMessageStartingWith(AUTHORIZATION_EXCEPTION);
}",0.9941747572815534
111109,"@Test public void testSettingsNoPassword() throws Exception {
  ReflectionTestUtils.setField(sut,""String_Node_Str"",SERVER_ID);
  Server server=mockServer();
  server.setPassword(null);
  when(settings.getServer(SERVER_ID)).thenReturn(server);
  Throwable cause=null;
  try {
    sut.execute();
  }
 catch (  MojoExecutionException exception) {
    cause=exception.getCause();
  }
  assertThat(cause).isNotNull().isExactlyInstanceOf(MojoExecutionException.class).hasMessageStartingWith(AUTHORIZATION_EXCEPTION);
}","@Test public void testSettingsNoPassword() throws Exception {
  ReflectionTestUtils.setField(sut,""String_Node_Str"",SERVER_ID);
  final Server server=mockServer();
  server.setPassword(null);
  when(settings.getServer(SERVER_ID)).thenReturn(server);
  Throwable cause=null;
  try {
    sut.execute();
  }
 catch (  MojoExecutionException exception) {
    cause=exception.getCause();
  }
  assertThat(cause).isNotNull().isExactlyInstanceOf(MojoExecutionException.class).hasMessageStartingWith(AUTHORIZATION_EXCEPTION);
}",0.9941747572815534
111110,"private Server mockServer(){
  Server server=new Server();
  server.setUsername(USERNAME);
  server.setPassword(PASSWORD);
  Xpp3Dom email=new Xpp3Dom(EMAIL_PROPERTY);
  email.setValue(EMAIL);
  Xpp3Dom configuration=new Xpp3Dom(CONFIGURATION_PROPERTY);
  configuration.addChild(email);
  server.setConfiguration(configuration);
  return server;
}","private Server mockServer(){
  final Server server=new Server();
  server.setUsername(USERNAME);
  server.setPassword(PASSWORD);
  final Xpp3Dom email=new Xpp3Dom(EMAIL_PROPERTY);
  email.setValue(EMAIL);
  final Xpp3Dom configuration=new Xpp3Dom(CONFIGURATION_PROPERTY);
  configuration.addChild(email);
  server.setConfiguration(configuration);
  return server;
}",0.9747191011235956
111111,"@Test public void testAuthorizationConfiguration() throws Exception {
  ReflectionTestUtils.setField(sut,""String_Node_Str"",SERVER_ID);
  when(settings.getServer(SERVER_ID)).thenReturn(mockServer());
  when(builder.authConfig(authConfigCaptor.capture())).thenReturn(builder);
  sut.execute();
  AuthConfig authConfig=authConfigCaptor.getValue();
  assertThat(authConfig).isNotNull();
  assertThat(authConfig.email()).isEqualTo(EMAIL);
  assertThat(authConfig.password()).isEqualTo(PASSWORD);
  assertThat(authConfig.username()).isEqualTo(USERNAME);
  assertThat(authConfig.serverAddress()).isEqualTo(DEFAULT_REGISTRY);
}","@Test public void testAuthorizationConfiguration() throws Exception {
  ReflectionTestUtils.setField(sut,""String_Node_Str"",SERVER_ID);
  when(settings.getServer(SERVER_ID)).thenReturn(mockServer());
  when(builder.authConfig(authConfigCaptor.capture())).thenReturn(builder);
  sut.execute();
  final AuthConfig authConfig=authConfigCaptor.getValue();
  assertThat(authConfig).isNotNull();
  assertThat(authConfig.email()).isEqualTo(EMAIL);
  assertThat(authConfig.password()).isEqualTo(PASSWORD);
  assertThat(authConfig.username()).isEqualTo(USERNAME);
  assertThat(authConfig.serverAddress()).isEqualTo(DEFAULT_REGISTRY);
}",0.995176848874598
111112,"@Test public void testAuthorizationConfigurationWithServerAddress() throws Exception {
  ReflectionTestUtils.setField(sut,""String_Node_Str"",SERVER_ID);
  ReflectionTestUtils.setField(sut,""String_Node_Str"",REGISTRY_URL);
  when(settings.getServer(SERVER_ID)).thenReturn(mockServer());
  when(builder.authConfig(authConfigCaptor.capture())).thenReturn(builder);
  sut.execute();
  AuthConfig authConfig=authConfigCaptor.getValue();
  assertThat(authConfig).isNotNull();
  assertThat(authConfig.serverAddress()).isEqualTo(REGISTRY_URL);
}","@Test public void testAuthorizationConfigurationWithServerAddress() throws Exception {
  ReflectionTestUtils.setField(sut,""String_Node_Str"",SERVER_ID);
  ReflectionTestUtils.setField(sut,""String_Node_Str"",REGISTRY_URL);
  when(settings.getServer(SERVER_ID)).thenReturn(mockServer());
  when(builder.authConfig(authConfigCaptor.capture())).thenReturn(builder);
  sut.execute();
  final AuthConfig authConfig=authConfigCaptor.getValue();
  assertThat(authConfig).isNotNull();
  assertThat(authConfig.serverAddress()).isEqualTo(REGISTRY_URL);
}",0.9944237918215614
111113,"public void testBuildGeneratedDockerFile_CopiesEntireDirectory() throws Exception {
  final File pom=getTestFile(""String_Node_Str"");
  final BuildMojo mojo=setupMojo(pom);
  final DockerClient docker=mock(DockerClient.class);
  mojo.execute(docker);
  verify(docker).build(eq(Paths.get(""String_Node_Str"")),eq(""String_Node_Str""),any(AnsiProgressHandler.class));
  List<String> expectedDockerFileContents=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",expectedDockerFileContents,Files.readAllLines(Paths.get(""String_Node_Str""),UTF_8));
  assertFileExists(""String_Node_Str"");
  assertFileExists(""String_Node_Str"");
}","public void testBuildGeneratedDockerFile_CopiesEntireDirectory() throws Exception {
  final File pom=getTestFile(""String_Node_Str"");
  final BuildMojo mojo=setupMojo(pom);
  final DockerClient docker=mock(DockerClient.class);
  mojo.execute(docker);
  verify(docker).build(eq(Paths.get(""String_Node_Str"")),eq(""String_Node_Str""),any(AnsiProgressHandler.class));
  final List<String> expectedDockerFileContents=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",expectedDockerFileContents,Files.readAllLines(Paths.get(""String_Node_Str""),UTF_8));
  assertFileExists(""String_Node_Str"");
  assertFileExists(""String_Node_Str"");
}",0.9955555555555556
111114,"public ProjectStub(File pom){
  MavenXpp3Reader pomReader=new MavenXpp3Reader();
  Model model;
  try {
    model=pomReader.read(ReaderFactory.newXmlReader(pom));
    setModel(model);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  setGroupId(model.getGroupId());
  setArtifactId(model.getArtifactId());
  setVersion(model.getVersion());
  setName(model.getName());
  setUrl(model.getUrl());
  setPackaging(model.getPackaging());
  setBuild(model.getBuild());
  List<String> compileSourceRoots=new ArrayList<>();
  compileSourceRoots.add(getBasedir() + ""String_Node_Str"");
  setCompileSourceRoots(compileSourceRoots);
  List<String> testCompileSourceRoots=new ArrayList<>();
  testCompileSourceRoots.add(getBasedir() + ""String_Node_Str"");
  setTestCompileSourceRoots(testCompileSourceRoots);
  getBuild().setDirectory(""String_Node_Str"");
  getBuild().setTestOutputDirectory(new File(getBasedir(),""String_Node_Str"").getAbsolutePath());
}","public ProjectStub(File pom){
  final MavenXpp3Reader pomReader=new MavenXpp3Reader();
  Model model;
  try {
    model=pomReader.read(ReaderFactory.newXmlReader(pom));
    setModel(model);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  setGroupId(model.getGroupId());
  setArtifactId(model.getArtifactId());
  setVersion(model.getVersion());
  setName(model.getName());
  setUrl(model.getUrl());
  setPackaging(model.getPackaging());
  setBuild(model.getBuild());
  final List<String> compileSourceRoots=new ArrayList<>();
  compileSourceRoots.add(getBasedir() + ""String_Node_Str"");
  setCompileSourceRoots(compileSourceRoots);
  final List<String> testCompileSourceRoots=new ArrayList<>();
  testCompileSourceRoots.add(getBasedir() + ""String_Node_Str"");
  setTestCompileSourceRoots(testCompileSourceRoots);
  getBuild().setDirectory(""String_Node_Str"");
  getBuild().setTestOutputDirectory(new File(getBasedir(),""String_Node_Str"").getAbsolutePath());
}",0.9906928645294726
111115,"public SettingsStub(){
  super();
  Server server=new Server();
  server.setId(""String_Node_Str"");
  server.setUsername(""String_Node_Str"");
  server.setPassword(""String_Node_Str"");
  Xpp3Dom configuration=new Xpp3Dom(""String_Node_Str"");
  Xpp3Dom email=new Xpp3Dom(""String_Node_Str"");
  email.setValue(""String_Node_Str"");
  configuration.addChild(email);
  server.setConfiguration(configuration);
  addServer(server);
}","public SettingsStub(){
  super();
  final Server server=new Server();
  server.setId(""String_Node_Str"");
  server.setUsername(""String_Node_Str"");
  server.setPassword(""String_Node_Str"");
  final Xpp3Dom configuration=new Xpp3Dom(""String_Node_Str"");
  final Xpp3Dom email=new Xpp3Dom(""String_Node_Str"");
  email.setValue(""String_Node_Str"");
  configuration.addChild(email);
  server.setConfiguration(configuration);
  addServer(server);
}",0.9789719626168224
111116,"@Test public void testParseImageNameWithSeperator() throws MojoExecutionException {
  String[] result=Utils.parseImageName(IMAGE_WITH_SEPERATOR);
  assertThat(result).containsExactly(IMAGE,null);
}","@Test public void testParseImageNameWithSeperator() throws MojoExecutionException {
  final String[] result=Utils.parseImageName(IMAGE_WITH_SEPERATOR);
  assertThat(result).containsExactly(IMAGE,null);
}",0.985
111117,"@Test public void testParseImageNameWithLibrary() throws MojoExecutionException {
  String[] result=Utils.parseImageName(IMAGE_WITH_LIBRARY);
  assertThat(result).containsExactly(IMAGE_WITH_LIBRARY,null);
}","@Test public void testParseImageNameWithLibrary() throws MojoExecutionException {
  final String[] result=Utils.parseImageName(IMAGE_WITH_LIBRARY);
  assertThat(result).containsExactly(IMAGE_WITH_LIBRARY,null);
}",0.985645933014354
111118,"@Test public void testParseImageNameFromRegistryAndTag() throws MojoExecutionException {
  String[] result=Utils.parseImageName(IMAGE_FROM_REG_WITH_TAG);
  assertThat(result).containsExactly(IMAGE_FROM_REGISTRY,TAG);
}","@Test public void testParseImageNameFromRegistryAndTag() throws MojoExecutionException {
  final String[] result=Utils.parseImageName(IMAGE_FROM_REG_WITH_TAG);
  assertThat(result).containsExactly(IMAGE_FROM_REGISTRY,TAG);
}",0.986425339366516
111119,"@Test public void testParseImageNameWithLibraryAndTag() throws MojoExecutionException {
  String[] result=Utils.parseImageName(IMAGE_FROM_LIB_WITH_TAG);
  assertThat(result).containsExactly(IMAGE_WITH_LIBRARY,TAG);
}","@Test public void testParseImageNameWithLibraryAndTag() throws MojoExecutionException {
  final String[] result=Utils.parseImageName(IMAGE_FROM_LIB_WITH_TAG);
  assertThat(result).containsExactly(IMAGE_WITH_LIBRARY,TAG);
}",0.9863013698630136
111120,"@Test public void testParseImageName() throws MojoExecutionException {
  String[] result=Utils.parseImageName(IMAGE);
  assertThat(result).containsExactly(IMAGE,null);
}","@Test public void testParseImageName() throws MojoExecutionException {
  final String[] result=Utils.parseImageName(IMAGE);
  assertThat(result).containsExactly(IMAGE,null);
}",0.9825581395348836
111121,"@Test public void testParseImageNameWithTag() throws MojoExecutionException {
  String[] result=Utils.parseImageName(IMAGE_WITH_TAG);
  assertThat(result).containsExactly(IMAGE,TAG);
}","@Test public void testParseImageNameWithTag() throws MojoExecutionException {
  final String[] result=Utils.parseImageName(IMAGE_WITH_TAG);
  assertThat(result).containsExactly(IMAGE,TAG);
}",0.983957219251337
111122,"@Test public void testPushImage() throws Exception {
  DockerClient dockerClient=mock(DockerClient.class);
  Log log=mock(Log.class);
  final DockerBuildInformation buildInfo=mock(DockerBuildInformation.class);
  Utils.pushImage(dockerClient,IMAGE,log,buildInfo,0,1);
  verify(dockerClient).push(eq(IMAGE),any(AnsiProgressHandler.class));
}","@Test public void testPushImage() throws Exception {
  final DockerClient dockerClient=mock(DockerClient.class);
  final Log log=mock(Log.class);
  final DockerBuildInformation buildInfo=mock(DockerBuildInformation.class);
  Utils.pushImage(dockerClient,IMAGE,log,buildInfo,0,1);
  verify(dockerClient).push(eq(IMAGE),any(AnsiProgressHandler.class));
}",0.9826589595375722
111123,"/** 
 * Find out the scrollable child view from a ViewGroup.
 * @param viewGroup
 */
private void findScrollView(ViewGroup viewGroup){
  scrollChild=viewGroup;
  if (viewGroup.getChildCount() > 0) {
    int count=viewGroup.getChildCount();
    View child;
    for (int i=0; i < count; i++) {
      child=viewGroup.getChildAt(i);
      if (child instanceof AbsListView || child instanceof ScrollView || child instanceof ViewPager) {
        scrollChild=child;
        return;
      }
    }
  }
}","/** 
 * Find out the scrollable child view from a ViewGroup.
 * @param viewGroup
 */
private void findScrollView(ViewGroup viewGroup){
  scrollChild=viewGroup;
  if (viewGroup.getChildCount() > 0) {
    int count=viewGroup.getChildCount();
    View child;
    for (int i=0; i < count; i++) {
      child=viewGroup.getChildAt(i);
      if (child instanceof AbsListView || child instanceof ScrollView || child instanceof ViewPager|| child instanceof WebView) {
        scrollChild=child;
        return;
      }
    }
  }
}",0.9733990147783252
111124,"/** 
 * Find out the scrollable child view from a ViewGroup.
 * @param viewGroup
 */
private void findScrollView(ViewGroup viewGroup){
  scrollChild=viewGroup;
  if (viewGroup.getChildCount() > 0) {
    int count=viewGroup.getChildCount();
    View child;
    for (int i=0; i < count; i++) {
      child=viewGroup.getChildAt(i);
      if (child instanceof AbsListView || child instanceof ScrollView) {
        scrollChild=child;
        return;
      }
    }
  }
}","/** 
 * Find out the scrollable child view from a ViewGroup.
 * @param viewGroup
 */
private void findScrollView(ViewGroup viewGroup){
  scrollChild=viewGroup;
  if (viewGroup.getChildCount() > 0) {
    int count=viewGroup.getChildCount();
    View child;
    for (int i=0; i < count; i++) {
      child=viewGroup.getChildAt(i);
      if (child instanceof AbsListView || child instanceof ScrollView || child instanceof ViewPager) {
        scrollChild=child;
        return;
      }
    }
  }
}",0.9686847599164928
111125,"@Override public int clampViewPositionHorizontal(View child,int left,int dx){
  int result=0;
  if (dragEdge == DragEdge.LEFT && left > 0) {
    final int leftBound=getPaddingLeft();
    final int rightBound=horizontalDragRange;
    result=Math.min(Math.max(left,leftBound),rightBound);
  }
 else   if (dragEdge == DragEdge.RIGHT && left < 0) {
    final int leftBound=-horizontalDragRange;
    final int rightBound=getPaddingLeft();
    result=Math.min(Math.max(left,leftBound),rightBound);
  }
  return result;
}","@Override public int clampViewPositionHorizontal(View child,int left,int dx){
  int result=0;
  if (dragEdge == DragEdge.LEFT && !canChildScrollRight() && left > 0) {
    final int leftBound=getPaddingLeft();
    final int rightBound=horizontalDragRange;
    result=Math.min(Math.max(left,leftBound),rightBound);
  }
 else   if (dragEdge == DragEdge.RIGHT && !canChildScrollLeft() && left < 0) {
    final int leftBound=-horizontalDragRange;
    final int rightBound=getPaddingLeft();
    result=Math.min(Math.max(left,leftBound),rightBound);
  }
  return result;
}",0.9527340129749768
111126,"@Override public int clampViewPositionVertical(View child,int top,int dy){
  int result=0;
  if (dragEdge == DragEdge.TOP && !canChildScrollUp() && top > 0) {
    final int topBound=getPaddingTop();
    final int bottomBound=verticalDragRange;
    result=Math.min(Math.max(top,topBound),bottomBound);
  }
  return result;
}","@Override public int clampViewPositionVertical(View child,int top,int dy){
  int result=0;
  if (dragEdge == DragEdge.TOP && !canChildScrollUp() && top > 0) {
    final int topBound=getPaddingTop();
    final int bottomBound=verticalDragRange;
    result=Math.min(Math.max(top,topBound),bottomBound);
  }
 else   if (dragEdge == DragEdge.BOTTOM && !canChildScrollDown() && top < 0) {
    final int topBound=-verticalDragRange;
    final int bottomBound=getPaddingTop();
    result=Math.min(Math.max(top,topBound),bottomBound);
  }
  return result;
}",0.7064220183486238
111127,"@Override public void onViewReleased(View releasedChild,float xvel,float yvel){
  if (draggingOffset == 0)   return;
  if (draggingOffset == getDragRange())   return;
  boolean isBack=false;
  if (enableFlingBack && backBySpeed(xvel,yvel)) {
    isBack=!canChildScrollUp();
  }
 else   if (draggingOffset >= finishAnchor) {
    isBack=true;
  }
 else   if (draggingOffset < finishAnchor) {
    isBack=false;
  }
  int finalLeft;
  int finalTop;
switch (dragEdge) {
case LEFT:
    finalLeft=isBack ? horizontalDragRange : 0;
  smoothScrollToX(finalLeft);
break;
case RIGHT:
finalLeft=isBack ? -horizontalDragRange : 0;
smoothScrollToX(finalLeft);
break;
case TOP:
finalTop=isBack ? verticalDragRange : 0;
smoothScrollToY(finalTop);
break;
case BOTTOM:
break;
}
}","@Override public void onViewReleased(View releasedChild,float xvel,float yvel){
  if (draggingOffset == 0)   return;
  if (draggingOffset == getDragRange())   return;
  boolean isBack=false;
  if (enableFlingBack && backBySpeed(xvel,yvel)) {
    isBack=!canChildScrollUp();
  }
 else   if (draggingOffset >= finishAnchor) {
    isBack=true;
  }
 else   if (draggingOffset < finishAnchor) {
    isBack=false;
  }
  int finalLeft;
  int finalTop;
switch (dragEdge) {
case LEFT:
    finalLeft=isBack ? horizontalDragRange : 0;
  smoothScrollToX(finalLeft);
break;
case RIGHT:
finalLeft=isBack ? -horizontalDragRange : 0;
smoothScrollToX(finalLeft);
break;
case TOP:
finalTop=isBack ? verticalDragRange : 0;
smoothScrollToY(finalTop);
break;
case BOTTOM:
finalTop=isBack ? -verticalDragRange : 0;
smoothScrollToY(finalTop);
break;
}
}",0.9566310496543056
111128,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  ArrayList<GooglePlusPost> posts=new ArrayList<>();
  for (int i=0; i < 23; i++) {
    GooglePlusPost post=new GooglePlusPost();
    post.setAvatarUrl(mAvatarUrls[i]);
    post.setDisplayName(mDisplayNames[i]);
    post.setTimestamp(mTimestamps[i]);
    post.setCommentCount(mCommentCounts[i]);
    post.setPlusOneCount(mPlusOneCounts[i]);
    post.setPostImageUrl(mPostImageUrls[i]);
    post.setComment(mComments[i]);
    int randOne=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterOneDisplayName(mDisplayNames[randOne]);
    post.setCommenterOneAvatarUrl(mAvatarUrls[randOne]);
    int randTwo=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterTwoDisplayName(mDisplayNames[randTwo]);
    post.setCommenterTwoAvatarUrl(mAvatarUrls[randTwo]);
    int randThree=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterThreeDisplayName(mDisplayNames[randThree]);
    post.setCommenterThreeAvatarUrl(mAvatarUrls[randThree]);
    post.setMessage(mMessages[i]);
    posts.add(post);
  }
  GooglePlusAdapter adapter=new GooglePlusAdapter(getActivity(),posts);
  mRecyclerView.setHasFixedSize(true);
  RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(getActivity());
  mRecyclerView.setLayoutManager(layoutManager);
  mRecyclerView.setAdapter(adapter);
  mRecyclerView.addItemDecoration(new SpacesItemDecoration(QuickReturnUtils.dp2px(getActivity(),8)));
  ArrayList<View> headerViews=new ArrayList<>();
  headerViews.add(getActionBarView());
  ArrayList<View> footerViews=new ArrayList<>();
  mQuickReturnFooterTextView.setTag(R.id.scroll_threshold_key,2);
  footerViews.add(mQuickReturnFooterTextView);
  mQuickReturnFooterImageView.setTag(R.id.scroll_threshold_key,4);
  footerViews.add(mQuickReturnFooterImageView);
  SpeedyQuickReturnRecyclerViewOnScrollListener scrollListener=new SpeedyQuickReturnRecyclerViewOnScrollListener.Builder(getActivity(),QuickReturnViewType.GOOGLE_PLUS).footerViews(footerViews).slideHeaderUpAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_header_up)).slideHeaderDownAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_header_down)).slideFooterUpAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_footer_up)).slideFooterDownAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_footer_down)).build();
  mRecyclerView.setOnScrollListener(scrollListener);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  ArrayList<GooglePlusPost> posts=new ArrayList<>();
  for (int i=0; i < 23; i++) {
    GooglePlusPost post=new GooglePlusPost();
    post.setAvatarUrl(mAvatarUrls[i]);
    post.setDisplayName(mDisplayNames[i]);
    post.setTimestamp(mTimestamps[i]);
    post.setCommentCount(mCommentCounts[i]);
    post.setPlusOneCount(mPlusOneCounts[i]);
    post.setPostImageUrl(mPostImageUrls[i]);
    post.setComment(mComments[i]);
    int randOne=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterOneDisplayName(mDisplayNames[randOne]);
    post.setCommenterOneAvatarUrl(mAvatarUrls[randOne]);
    int randTwo=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterTwoDisplayName(mDisplayNames[randTwo]);
    post.setCommenterTwoAvatarUrl(mAvatarUrls[randTwo]);
    int randThree=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterThreeDisplayName(mDisplayNames[randThree]);
    post.setCommenterThreeAvatarUrl(mAvatarUrls[randThree]);
    post.setMessage(mMessages[i]);
    posts.add(post);
  }
  GooglePlusAdapter adapter=new GooglePlusAdapter(getActivity(),posts);
  mRecyclerView.setHasFixedSize(true);
  RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(getActivity());
  mRecyclerView.setLayoutManager(layoutManager);
  mRecyclerView.setAdapter(adapter);
  mRecyclerView.addItemDecoration(new SpacesItemDecoration(QuickReturnUtils.dp2px(getActivity(),8)));
  ArrayList<View> headerViews=new ArrayList<>();
  headerViews.add(getActionBarView());
  ArrayList<View> footerViews=new ArrayList<>();
  mQuickReturnFooterTextView.setTag(R.id.scroll_threshold_key,1);
  footerViews.add(mQuickReturnFooterTextView);
  mQuickReturnFooterImageView.setTag(R.id.scroll_threshold_key,3);
  footerViews.add(mQuickReturnFooterImageView);
  SpeedyQuickReturnRecyclerViewOnScrollListener scrollListener=new SpeedyQuickReturnRecyclerViewOnScrollListener.Builder(getActivity(),QuickReturnViewType.GOOGLE_PLUS).footerViews(footerViews).slideHeaderUpAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_header_up)).slideHeaderDownAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_header_down)).slideFooterUpAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_footer_up)).slideFooterDownAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_footer_down)).build();
  mRecyclerView.setOnScrollListener(scrollListener);
}",0.9992050874403816
111129,"@Override public void getItemOffsets(Rect outRect,View view,RecyclerView parent,RecyclerView.State state){
  if (parent.getChildPosition(view) == 0) {
    outRect.left=space;
    outRect.right=space;
    outRect.top=space;
    outRect.bottom=space / 2;
  }
 else   if (parent.getChildPosition(view) == parent.getChildCount() - 1) {
    outRect.left=space;
    outRect.right=space;
    outRect.top=space / 2;
    outRect.bottom=space;
  }
 else {
    outRect.left=space;
    outRect.right=space;
    outRect.top=space / 2;
    outRect.bottom=space / 2;
  }
}","@Override public void getItemOffsets(Rect outRect,View view,RecyclerView parent,RecyclerView.State state){
  if (parent.getChildPosition(view) == 0) {
    outRect.left=space;
    outRect.right=space;
    outRect.top=space;
    outRect.bottom=space / 2;
  }
 else   if (parent.getChildPosition(view) == parent.getLayoutManager().getItemCount() - 1) {
    outRect.left=space;
    outRect.right=space;
    outRect.top=space / 2;
    outRect.bottom=space;
  }
 else {
    outRect.left=space;
    outRect.right=space;
    outRect.top=space / 2;
    outRect.bottom=space / 2;
  }
}",0.7491166077738516
111130,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  mTabs.setTranslationY(0);
}",0.8761061946902655
111131,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  ArrayList<GooglePlusPost> posts=new ArrayList<GooglePlusPost>();
  for (int i=0; i < 23; i++) {
    GooglePlusPost post=new GooglePlusPost();
    post.setAvatarUrl(mAvatarUrls[i]);
    post.setDisplayName(mDisplayNames[i]);
    post.setTimestamp(mTimestamps[i]);
    post.setPostImageUrl(mPostImageUrls[i]);
    post.setComment(mComments[i]);
    int randOne=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterOneDisplayName(mDisplayNames[randOne]);
    post.setCommenterOneAvatarUrl(mAvatarUrls[randOne]);
    int randTwo=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterTwoDisplayName(mDisplayNames[randTwo]);
    post.setCommenterTwoAvatarUrl(mAvatarUrls[randTwo]);
    int randThree=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterThreeDisplayName(mDisplayNames[randThree]);
    post.setCommenterThreeAvatarUrl(mAvatarUrls[randThree]);
    post.setMessage(mMessages[i]);
    posts.add(post);
  }
  GooglePlusAdapter adapter=new GooglePlusAdapter(getActivity(),posts);
  mListView.setAdapter(adapter);
  mListView.addFooterView(new View(getActivity()),null,false);
  mListView.addHeaderView(new View(getActivity()),null,false);
  ArrayList<View> headerViews=new ArrayList<View>();
  headerViews.add(getActionBarView());
  ArrayList<View> footerViews=new ArrayList<View>();
  mQuickReturnFooterTextView.setTag(R.id.scroll_threshold_key,15);
  footerViews.add(mQuickReturnFooterTextView);
  mQuickReturnFooterImageView.setTag(R.id.scroll_threshold_key,5);
  footerViews.add(mQuickReturnFooterImageView);
  SpeedyQuickReturnListViewOnScrollListener scrollListener=new SpeedyQuickReturnListViewOnScrollListener(getActivity(),QuickReturnType.CUSTOM,null,footerViews);
  scrollListener.setSlideHeaderUpAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_header_up));
  scrollListener.setSlideHeaderDownAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_header_down));
  scrollListener.setSlideFooterUpAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_footer_up));
  scrollListener.setSlideFooterDownAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_footer_down));
  mListView.setOnScrollListener(scrollListener);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  ArrayList<GooglePlusPost> posts=new ArrayList<GooglePlusPost>();
  for (int i=0; i < 23; i++) {
    GooglePlusPost post=new GooglePlusPost();
    post.setAvatarUrl(mAvatarUrls[i]);
    post.setDisplayName(mDisplayNames[i]);
    post.setTimestamp(mTimestamps[i]);
    post.setPostImageUrl(mPostImageUrls[i]);
    post.setComment(mComments[i]);
    int randOne=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterOneDisplayName(mDisplayNames[randOne]);
    post.setCommenterOneAvatarUrl(mAvatarUrls[randOne]);
    int randTwo=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterTwoDisplayName(mDisplayNames[randTwo]);
    post.setCommenterTwoAvatarUrl(mAvatarUrls[randTwo]);
    int randThree=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterThreeDisplayName(mDisplayNames[randThree]);
    post.setCommenterThreeAvatarUrl(mAvatarUrls[randThree]);
    post.setMessage(mMessages[i]);
    posts.add(post);
  }
  GooglePlusAdapter adapter=new GooglePlusAdapter(getActivity(),posts);
  mListView.setAdapter(adapter);
  mListView.addFooterView(new View(getActivity()),null,false);
  mListView.addHeaderView(new View(getActivity()),null,false);
  ArrayList<View> headerViews=new ArrayList<View>();
  headerViews.add(getActionBarView());
  ArrayList<View> footerViews=new ArrayList<View>();
  mQuickReturnFooterTextView.setTag(R.id.scroll_threshold_key,15);
  footerViews.add(mQuickReturnFooterTextView);
  mQuickReturnFooterImageView.setTag(R.id.scroll_threshold_key,5);
  footerViews.add(mQuickReturnFooterImageView);
  SpeedyQuickReturnListViewOnScrollListener scrollListener=new SpeedyQuickReturnListViewOnScrollListener(getActivity(),QuickReturnType.GOOGLE_PLUS,null,footerViews);
  scrollListener.setSlideHeaderUpAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_header_up));
  scrollListener.setSlideHeaderDownAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_header_down));
  scrollListener.setSlideFooterUpAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_footer_up));
  scrollListener.setSlideFooterDownAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_footer_down));
  mListView.setOnScrollListener(scrollListener);
}",0.9972216285531096
111132,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  int headerHeight=getResources().getDimensionPixelSize(R.dimen.header_height);
  int indicatorHeight=QuickReturnUtils.dp2px(getActivity(),5);
  int headerTranslation=-headerHeight + QuickReturnUtils.getActionBarHeight(getActivity()) + indicatorHeight;
  int footerTranslation=-headerHeight + QuickReturnUtils.getActionBarHeight(getActivity());
  QuickReturnListViewOnScrollListener scrollListener=new QuickReturnListViewOnScrollListener(QuickReturnType.BOTH,mCoordinator.getTabs(),headerTranslation,mQuickReturnFooterLinearLayout,-footerTranslation);
  scrollListener.setCanSlideInIdleScrollState(true);
  mListView.setOnScrollListener(scrollListener);
  mPlaceHolderView=getActivity().getLayoutInflater().inflate(R.layout.view_header_placeholder,mListView,false);
  mListView.addHeaderView(mPlaceHolderView);
  ArrayList<Tweet> tweets=new ArrayList<Tweet>();
  for (int i=0; i < 23; i++) {
    Tweet tweet=new Tweet();
    tweet.setAvatarUrl(mAvatarUrls[i]);
    tweet.setDisplayName(mDisplayNames[i]);
    tweet.setUsername(mUsernames[i]);
    tweet.setTimestamp(mTimestamps[i]);
    tweet.setStarCount(mStars[i]);
    tweet.setRetweetCount(mRetweets[i]);
    tweet.setMessage(mMessages[i]);
    tweets.add(tweet);
  }
  TwitterAdapter adapter=new TwitterAdapter(getActivity(),tweets);
  mListView.setAdapter(adapter);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  int headerHeight=getResources().getDimensionPixelSize(R.dimen.twitter_header_height);
  int footerHeight=getResources().getDimensionPixelSize(R.dimen.twitter_footer_height);
  int indicatorHeight=QuickReturnUtils.dp2px(getActivity(),5);
  int headerTranslation=-headerHeight + indicatorHeight;
  int footerTranslation=-footerHeight + indicatorHeight;
  QuickReturnListViewOnScrollListener scrollListener=new QuickReturnListViewOnScrollListener(QuickReturnType.TWITTER,mCoordinator.getTabs(),headerTranslation,mQuickReturnFooterLinearLayout,-footerTranslation);
  scrollListener.setCanSlideInIdleScrollState(true);
  mListView.setOnScrollListener(scrollListener);
  mPlaceHolderView=getActivity().getLayoutInflater().inflate(R.layout.view_header_placeholder,mListView,false);
  mListView.addHeaderView(mPlaceHolderView);
  ArrayList<Tweet> tweets=new ArrayList<Tweet>();
  for (int i=0; i < 23; i++) {
    Tweet tweet=new Tweet();
    tweet.setAvatarUrl(mAvatarUrls[i]);
    tweet.setDisplayName(mDisplayNames[i]);
    tweet.setUsername(mUsernames[i]);
    tweet.setTimestamp(mTimestamps[i]);
    tweet.setStarCount(mStars[i]);
    tweet.setRetweetCount(mRetweets[i]);
    tweet.setMessage(mMessages[i]);
    tweets.add(tweet);
  }
  TwitterAdapter adapter=new TwitterAdapter(getActivity(),tweets);
  mListView.setAdapter(adapter);
}",0.8314374353671148
111133,"@Override public void onScrollStateChanged(AbsListView view,int scrollState){
  if (scrollState == SCROLL_STATE_IDLE && mCanSlideInIdleScrollState) {
    int midHeader=-mMinHeaderTranslation / 2;
    int midFooter=mMinFooterTranslation / 2;
switch (mQuickReturnType) {
case HEADER:
      if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
        mHeader.setTranslationY(0);
        mHeaderDiffTotal=0;
      }
 else       if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
        mHeader.setTranslationY(mMinHeaderTranslation);
        mHeaderDiffTotal=mMinHeaderTranslation;
      }
    break;
case FOOTER:
  if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
    mFooter.setTranslationY(0);
    mFooterDiffTotal=0;
  }
 else   if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
    mFooter.setTranslationY(mMinFooterTranslation);
    mFooterDiffTotal=-mMinFooterTranslation;
  }
break;
case BOTH:
if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
mHeader.setTranslationY(0);
mHeaderDiffTotal=0;
}
 else if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
mHeader.setTranslationY(mMinHeaderTranslation);
mHeaderDiffTotal=mMinHeaderTranslation;
}
if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
mFooter.setTranslationY(0);
mFooterDiffTotal=0;
}
 else if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
mFooter.setTranslationY(mMinFooterTranslation);
mFooterDiffTotal=-mMinFooterTranslation;
}
break;
}
}
}","@Override public void onScrollStateChanged(AbsListView view,int scrollState){
  if (scrollState == SCROLL_STATE_IDLE && mCanSlideInIdleScrollState) {
    int midHeader=-mMinHeaderTranslation / 2;
    int midFooter=mMinFooterTranslation / 2;
switch (mQuickReturnType) {
case HEADER:
      if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
        mHeader.setTranslationY(0);
        mHeaderDiffTotal=0;
      }
 else       if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
        mHeader.setTranslationY(mMinHeaderTranslation);
        mHeaderDiffTotal=mMinHeaderTranslation;
      }
    break;
case FOOTER:
  if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
    mFooter.setTranslationY(0);
    mFooterDiffTotal=0;
  }
 else   if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
    mFooter.setTranslationY(mMinFooterTranslation);
    mFooterDiffTotal=-mMinFooterTranslation;
  }
break;
case BOTH:
if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
mHeader.setTranslationY(0);
mHeaderDiffTotal=0;
}
 else if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
mHeader.setTranslationY(mMinHeaderTranslation);
mHeaderDiffTotal=mMinHeaderTranslation;
}
if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
mFooter.setTranslationY(0);
mFooterDiffTotal=0;
}
 else if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
mFooter.setTranslationY(mMinFooterTranslation);
mFooterDiffTotal=-mMinFooterTranslation;
}
break;
case TWITTER:
if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
mHeader.setTranslationY(0);
mHeaderDiffTotal=0;
}
 else if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
mHeader.setTranslationY(mMinHeaderTranslation);
mHeaderDiffTotal=mMinHeaderTranslation;
}
if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
mFooter.setTranslationY(0);
mFooterDiffTotal=0;
}
 else if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
mFooter.setTranslationY(mMinFooterTranslation);
mFooterDiffTotal=-mMinFooterTranslation;
}
break;
}
}
}",0.8396501457725948
111134,"@Override public void onScroll(AbsListView listview,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(listview);
  int diff=mPrevScrollY - scrollY;
  if (diff != 0) {
switch (mQuickReturnType) {
case HEADER:
      if (diff < 0) {
        mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
      }
 else {
        mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
      }
    mHeader.setTranslationY(mHeaderDiffTotal);
  break;
case FOOTER:
if (diff < 0) {
  mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
  mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mFooter.setTranslationY(-mFooterDiffTotal);
break;
case BOTH:
if (diff < 0) {
mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mHeader.setTranslationY(mHeaderDiffTotal);
mFooter.setTranslationY(-mFooterDiffTotal);
default :
break;
}
}
mPrevScrollY=scrollY;
}","@Override public void onScroll(AbsListView listview,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(listview);
  int diff=mPrevScrollY - scrollY;
  if (diff != 0) {
switch (mQuickReturnType) {
case HEADER:
      if (diff < 0) {
        mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
      }
 else {
        mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
      }
    mHeader.setTranslationY(mHeaderDiffTotal);
  break;
case FOOTER:
if (diff < 0) {
  mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
  mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mFooter.setTranslationY(-mFooterDiffTotal);
break;
case BOTH:
if (diff < 0) {
mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mHeader.setTranslationY(mHeaderDiffTotal);
mFooter.setTranslationY(-mFooterDiffTotal);
break;
case TWITTER:
if (diff < 0) {
if (scrollY > -mMinHeaderTranslation) mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
if (scrollY > mMinFooterTranslation) mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mHeader.setTranslationY(mHeaderDiffTotal);
mFooter.setTranslationY(-mFooterDiffTotal);
default :
break;
}
}
mPrevScrollY=scrollY;
}",0.828892455858748
111135,"@Override public void onScroll(AbsListView listview,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(listview);
  int diff=mPrevScrollY - scrollY;
  if (diff > 0) {
switch (mQuickReturnType) {
case HEADER:
      if (mHeader.getVisibility() == View.GONE) {
        mHeader.setVisibility(View.VISIBLE);
        mHeader.startAnimation(mSlideHeaderDownAnimation);
      }
    break;
case FOOTER:
  if (mFooter.getVisibility() == View.GONE) {
    mFooter.setVisibility(View.VISIBLE);
    mFooter.startAnimation(mSlideFooterUpAnimation);
  }
break;
case BOTH:
if (mHeader.getVisibility() == View.GONE) {
mHeader.setVisibility(View.VISIBLE);
mHeader.startAnimation(mSlideHeaderDownAnimation);
}
if (mFooter.getVisibility() == View.GONE) {
mFooter.setVisibility(View.VISIBLE);
mFooter.startAnimation(mSlideFooterUpAnimation);
}
break;
case CUSTOM:
if (mHeaderViews != null) {
for (View view : mHeaderViews) {
if (view.getVisibility() == View.GONE) {
view.setVisibility(View.VISIBLE);
view.startAnimation(mSlideHeaderDownAnimation);
}
}
}
if (mFooterViews != null) {
for (View view : mFooterViews) {
int scrollThreshold=(Integer)view.getTag(R.id.scroll_threshold_key);
if (diff > scrollThreshold) {
if (view.getVisibility() == View.GONE) {
view.setVisibility(View.VISIBLE);
view.startAnimation(mSlideFooterUpAnimation);
}
}
}
}
break;
}
}
 else if (diff < 0) {
switch (mQuickReturnType) {
case HEADER:
if (mHeader.getVisibility() == View.VISIBLE) {
mHeader.setVisibility(View.GONE);
mHeader.startAnimation(mSlideHeaderUpAnimation);
}
break;
case FOOTER:
if (mFooter.getVisibility() == View.VISIBLE) {
mFooter.setVisibility(View.GONE);
mFooter.startAnimation(mSlideFooterDownAnimation);
}
break;
case BOTH:
if (mHeader.getVisibility() == View.VISIBLE) {
mHeader.setVisibility(View.GONE);
mHeader.startAnimation(mSlideHeaderUpAnimation);
}
if (mFooter.getVisibility() == View.VISIBLE) {
mFooter.setVisibility(View.GONE);
mFooter.startAnimation(mSlideFooterDownAnimation);
}
break;
case CUSTOM:
if (mHeaderViews != null) {
for (View view : mHeaderViews) {
if (view.getVisibility() == View.VISIBLE) {
view.setVisibility(View.GONE);
view.startAnimation(mSlideHeaderUpAnimation);
}
}
}
if (mFooterViews != null) {
for (View view : mFooterViews) {
int scrollThreshold=(Integer)view.getTag(R.id.scroll_threshold_key);
if (diff < -scrollThreshold) {
if (view.getVisibility() == View.VISIBLE) {
view.setVisibility(View.GONE);
view.startAnimation(mSlideFooterDownAnimation);
}
}
}
}
break;
}
}
mPrevScrollY=scrollY;
}","@Override public void onScroll(AbsListView listview,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(listview);
  int diff=mPrevScrollY - scrollY;
  if (diff > 0) {
switch (mQuickReturnType) {
case HEADER:
      if (mHeader.getVisibility() == View.GONE) {
        mHeader.setVisibility(View.VISIBLE);
        mHeader.startAnimation(mSlideHeaderDownAnimation);
      }
    break;
case FOOTER:
  if (mFooter.getVisibility() == View.GONE) {
    mFooter.setVisibility(View.VISIBLE);
    mFooter.startAnimation(mSlideFooterUpAnimation);
  }
break;
case BOTH:
if (mHeader.getVisibility() == View.GONE) {
mHeader.setVisibility(View.VISIBLE);
mHeader.startAnimation(mSlideHeaderDownAnimation);
}
if (mFooter.getVisibility() == View.GONE) {
mFooter.setVisibility(View.VISIBLE);
mFooter.startAnimation(mSlideFooterUpAnimation);
}
break;
case GOOGLE_PLUS:
if (mHeaderViews != null) {
for (View view : mHeaderViews) {
if (view.getVisibility() == View.GONE) {
view.setVisibility(View.VISIBLE);
view.startAnimation(mSlideHeaderDownAnimation);
}
}
}
if (mFooterViews != null) {
for (View view : mFooterViews) {
int scrollThreshold=(Integer)view.getTag(R.id.scroll_threshold_key);
if (diff > scrollThreshold) {
if (view.getVisibility() == View.GONE) {
view.setVisibility(View.VISIBLE);
view.startAnimation(mSlideFooterUpAnimation);
}
}
}
}
break;
}
}
 else if (diff < 0) {
switch (mQuickReturnType) {
case HEADER:
if (mHeader.getVisibility() == View.VISIBLE) {
mHeader.setVisibility(View.GONE);
mHeader.startAnimation(mSlideHeaderUpAnimation);
}
break;
case FOOTER:
if (mFooter.getVisibility() == View.VISIBLE) {
mFooter.setVisibility(View.GONE);
mFooter.startAnimation(mSlideFooterDownAnimation);
}
break;
case BOTH:
if (mHeader.getVisibility() == View.VISIBLE) {
mHeader.setVisibility(View.GONE);
mHeader.startAnimation(mSlideHeaderUpAnimation);
}
if (mFooter.getVisibility() == View.VISIBLE) {
mFooter.setVisibility(View.GONE);
mFooter.startAnimation(mSlideFooterDownAnimation);
}
break;
case GOOGLE_PLUS:
if (mHeaderViews != null) {
for (View view : mHeaderViews) {
if (view.getVisibility() == View.VISIBLE) {
view.setVisibility(View.GONE);
view.startAnimation(mSlideHeaderUpAnimation);
}
}
}
if (mFooterViews != null) {
for (View view : mFooterViews) {
int scrollThreshold=(Integer)view.getTag(R.id.scroll_threshold_key);
if (diff < -scrollThreshold) {
if (view.getVisibility() == View.VISIBLE) {
view.setVisibility(View.GONE);
view.startAnimation(mSlideFooterDownAnimation);
}
}
}
}
break;
}
}
mPrevScrollY=scrollY;
}",0.9949179046129788
111136,"@Override public View getView(final int position,View convertView,ViewGroup parent){
  final ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.google_plus_row,parent,false);
    holder=new ViewHolder(convertView);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  GooglePlusPost post=getItem(position);
  holder.mDisplayNameTextView.setText(post.getDisplayName());
  holder.mTimestampTextView.setText(post.getTimestamp());
  holder.mMessageTextView.setText(post.getMessage());
  Spanned styledText=Html.fromHtml(""String_Node_Str"" + post.getCommenterOneDisplayName() + ""String_Node_Str""+ post.getComment());
  holder.mCommentTextView.setText(styledText);
  Picasso.with(holder.mUserImageView.getContext()).load(post.getAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),50),QuickReturnUtils.dp2px(getContext(),50)).error(android.R.drawable.stat_notify_error).into(holder.mUserImageView);
  Picasso.with(holder.mPostImageView.getContext()).load(post.getPostImageUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),346),QuickReturnUtils.dp2px(getContext(),320)).error(android.R.drawable.stat_notify_error).into(holder.mPostImageView);
  Picasso.with(holder.mCommenterOneImageView.getContext()).load(post.getCommenterOneAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),34),QuickReturnUtils.dp2px(getContext(),34)).error(android.R.drawable.stat_notify_error).into(holder.mCommenterOneImageView);
  Picasso.with(holder.mCommenterTwoImageView.getContext()).load(post.getCommenterTwoAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),34),QuickReturnUtils.dp2px(getContext(),34)).error(android.R.drawable.stat_notify_error).into(holder.mCommenterTwoImageView);
  Picasso.with(holder.mCommenterThreeImageView.getContext()).load(post.getCommenterThreeAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),34),QuickReturnUtils.dp2px(getContext(),34)).error(android.R.drawable.stat_notify_error).into(holder.mCommenterThreeImageView);
  Animation animation=AnimationUtils.loadAnimation(getContext(),(position > lastPosition) ? R.anim.up_from_bottom : R.anim.down_from_top);
  convertView.startAnimation(animation);
  lastPosition=position;
  return convertView;
}","@Override public View getView(final int position,View convertView,ViewGroup parent){
  final ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.google_plus_row,parent,false);
    holder=new ViewHolder(convertView);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  GooglePlusPost post=getItem(position);
  holder.mDisplayNameTextView.setText(post.getDisplayName());
  holder.mTimestampTextView.setText(post.getTimestamp());
  holder.mMessageTextView.setText(post.getMessage());
  Spanned styledText=Html.fromHtml(""String_Node_Str"" + post.getCommenterOneDisplayName() + ""String_Node_Str""+ post.getComment());
  holder.mCommentTextView.setText(styledText);
  Picasso.with(holder.mUserImageView.getContext()).load(post.getAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),50),QuickReturnUtils.dp2px(getContext(),50)).error(android.R.drawable.stat_notify_error).into(holder.mUserImageView);
  Picasso.with(holder.mPostImageView.getContext()).load(post.getPostImageUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),346),QuickReturnUtils.dp2px(getContext(),320)).error(android.R.drawable.stat_notify_error).into(holder.mPostImageView);
  Picasso.with(holder.mCommenterOneImageView.getContext()).load(post.getCommenterOneAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),34),QuickReturnUtils.dp2px(getContext(),34)).error(android.R.drawable.stat_notify_error).into(holder.mCommenterOneImageView);
  Picasso.with(holder.mCommenterTwoImageView.getContext()).load(post.getCommenterTwoAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),34),QuickReturnUtils.dp2px(getContext(),34)).error(android.R.drawable.stat_notify_error).into(holder.mCommenterTwoImageView);
  Picasso.with(holder.mCommenterThreeImageView.getContext()).load(post.getCommenterThreeAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),34),QuickReturnUtils.dp2px(getContext(),34)).error(android.R.drawable.stat_notify_error).into(holder.mCommenterThreeImageView);
  if (position > lastPosition) {
    Animation animation=AnimationUtils.loadAnimation(getContext(),R.anim.up_from_bottom);
    convertView.startAnimation(animation);
  }
  lastPosition=position;
  return convertView;
}",0.9801124081279724
111137,"@Override public void onScrollStateChanged(AbsListView view,int scrollState){
  Log.d(getClass().getSimpleName(),""String_Node_Str"" + scrollState);
  if (scrollState == SCROLL_STATE_IDLE && mCanSlideInIdleScrollState) {
    int midHeader=-mMinHeaderTranslation / 2;
    int midFooter=mMinFooterTranslation / 2;
switch (mQuickReturnType) {
case HEADER:
      if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
        mHeader.setTranslationY(0);
        mHeaderDiffTotal=0;
      }
 else       if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
        mHeader.setTranslationY(mMinHeaderTranslation);
        mHeaderDiffTotal=mMinHeaderTranslation;
      }
    break;
case FOOTER:
  if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
    mFooter.setTranslationY(0);
    mFooterDiffTotal=0;
  }
 else   if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
    mFooter.setTranslationY(mMinFooterTranslation);
    mFooterDiffTotal=-mMinFooterTranslation;
  }
break;
case BOTH:
if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
mHeader.setTranslationY(0);
mHeaderDiffTotal=0;
}
 else if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
mHeader.setTranslationY(mMinHeaderTranslation);
mHeaderDiffTotal=mMinHeaderTranslation;
}
if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
mFooter.setTranslationY(0);
mFooterDiffTotal=0;
}
 else if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
mFooter.setTranslationY(mMinFooterTranslation);
mFooterDiffTotal=-mMinFooterTranslation;
}
break;
}
}
}","@Override public void onScrollStateChanged(AbsListView view,int scrollState){
  if (scrollState == SCROLL_STATE_IDLE && mCanSlideInIdleScrollState) {
    int midHeader=-mMinHeaderTranslation / 2;
    int midFooter=mMinFooterTranslation / 2;
switch (mQuickReturnType) {
case HEADER:
      if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
        mHeader.setTranslationY(0);
        mHeaderDiffTotal=0;
      }
 else       if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
        mHeader.setTranslationY(mMinHeaderTranslation);
        mHeaderDiffTotal=mMinHeaderTranslation;
      }
    break;
case FOOTER:
  if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
    mFooter.setTranslationY(0);
    mFooterDiffTotal=0;
  }
 else   if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
    mFooter.setTranslationY(mMinFooterTranslation);
    mFooterDiffTotal=-mMinFooterTranslation;
  }
break;
case BOTH:
if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
mHeader.setTranslationY(0);
mHeaderDiffTotal=0;
}
 else if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
mHeader.setTranslationY(mMinHeaderTranslation);
mHeaderDiffTotal=mMinHeaderTranslation;
}
if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
mFooter.setTranslationY(0);
mFooterDiffTotal=0;
}
 else if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
mFooter.setTranslationY(mMinFooterTranslation);
mFooterDiffTotal=-mMinFooterTranslation;
}
break;
}
}
}",0.9786839666357738
111138,"@Override public void onScroll(AbsListView listview,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(listview);
  int diff=mPrevScrollY - scrollY;
  Log.d(getClass().getSimpleName(),""String_Node_Str"" + scrollY);
  Log.d(getClass().getSimpleName(),""String_Node_Str"" + diff);
  if (diff != 0) {
switch (mQuickReturnType) {
case HEADER:
      if (diff < 0) {
        mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
      }
 else {
        mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
      }
    mHeader.setTranslationY(mHeaderDiffTotal);
  break;
case FOOTER:
if (diff < 0) {
  mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
  mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mFooter.setTranslationY(-mFooterDiffTotal);
break;
case BOTH:
if (diff < 0) {
mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mHeader.setTranslationY(mHeaderDiffTotal);
mFooter.setTranslationY(-mFooterDiffTotal);
default :
break;
}
}
mPrevScrollY=scrollY;
}","@Override public void onScroll(AbsListView listview,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(listview);
  int diff=mPrevScrollY - scrollY;
  if (diff != 0) {
switch (mQuickReturnType) {
case HEADER:
      if (diff < 0) {
        mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
      }
 else {
        mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
      }
    mHeader.setTranslationY(mHeaderDiffTotal);
  break;
case FOOTER:
if (diff < 0) {
  mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
  mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mFooter.setTranslationY(-mFooterDiffTotal);
break;
case BOTH:
if (diff < 0) {
mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mHeader.setTranslationY(mHeaderDiffTotal);
mFooter.setTranslationY(-mFooterDiffTotal);
default :
break;
}
}
mPrevScrollY=scrollY;
}",0.9531192321889996
111139,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  ArrayList<GooglePlusPost> posts=new ArrayList<GooglePlusPost>();
  for (int i=0; i < 23; i++) {
    GooglePlusPost post=new GooglePlusPost();
    post.setAvatarUrl(mAvatarUrls[i]);
    post.setDisplayName(mDisplayNames[i]);
    post.setTimestamp(mTimestamps[i]);
    post.setCommentCount(mCommentCounts[i]);
    post.setPlusOneCount(mPlusOneCounts[i]);
    post.setPostImageUrl(mPostImageUrls[i]);
    post.setComment(mComments[i]);
    int randOne=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterOneDisplayName(mDisplayNames[randOne]);
    post.setCommenterOneAvatarUrl(mAvatarUrls[randOne]);
    int randTwo=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterTwoDisplayName(mDisplayNames[randTwo]);
    post.setCommenterTwoAvatarUrl(mAvatarUrls[randTwo]);
    int randThree=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterThreeDisplayName(mDisplayNames[randThree]);
    post.setCommenterThreeAvatarUrl(mAvatarUrls[randThree]);
    post.setMessage(mMessages[i]);
    posts.add(post);
  }
  GooglePlusAdapter adapter=new GooglePlusAdapter(getActivity(),posts);
  mListView.setAdapter(adapter);
  mListView.addFooterView(new View(getActivity()),null,false);
  mListView.addHeaderView(new View(getActivity()),null,false);
  ArrayList<View> headerViews=new ArrayList<View>();
  headerViews.add(getActionBarView());
  ArrayList<View> footerViews=new ArrayList<View>();
  mQuickReturnFooterTextView.setTag(R.id.scroll_threshold_key,2);
  footerViews.add(mQuickReturnFooterTextView);
  mQuickReturnFooterImageView.setTag(R.id.scroll_threshold_key,4);
  footerViews.add(mQuickReturnFooterImageView);
  SpeedyQuickReturnListViewOnScrollListener scrollListener=new SpeedyQuickReturnListViewOnScrollListener(getActivity(),QuickReturnType.GOOGLE_PLUS,null,footerViews);
  scrollListener.setSlideHeaderUpAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_header_up));
  scrollListener.setSlideHeaderDownAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_header_down));
  scrollListener.setSlideFooterUpAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_footer_up));
  scrollListener.setSlideFooterDownAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_footer_down));
  mListView.setOnScrollListener(scrollListener);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  ArrayList<GooglePlusPost> posts=new ArrayList<GooglePlusPost>();
  for (int i=0; i < 23; i++) {
    GooglePlusPost post=new GooglePlusPost();
    post.setAvatarUrl(mAvatarUrls[i]);
    post.setDisplayName(mDisplayNames[i]);
    post.setTimestamp(mTimestamps[i]);
    post.setCommentCount(mCommentCounts[i]);
    post.setPlusOneCount(mPlusOneCounts[i]);
    post.setPostImageUrl(mPostImageUrls[i]);
    post.setComment(mComments[i]);
    int randOne=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterOneDisplayName(mDisplayNames[randOne]);
    post.setCommenterOneAvatarUrl(mAvatarUrls[randOne]);
    int randTwo=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterTwoDisplayName(mDisplayNames[randTwo]);
    post.setCommenterTwoAvatarUrl(mAvatarUrls[randTwo]);
    int randThree=new Random().nextInt(mAvatarUrls.length);
    post.setCommenterThreeDisplayName(mDisplayNames[randThree]);
    post.setCommenterThreeAvatarUrl(mAvatarUrls[randThree]);
    post.setMessage(mMessages[i]);
    posts.add(post);
  }
  GooglePlusAdapter adapter=new GooglePlusAdapter(getActivity(),posts);
  mListView.addFooterView(new View(getActivity()),null,false);
  mListView.addHeaderView(new View(getActivity()),null,false);
  mListView.setAdapter(adapter);
  ArrayList<View> headerViews=new ArrayList<View>();
  headerViews.add(getActionBarView());
  ArrayList<View> footerViews=new ArrayList<View>();
  mQuickReturnFooterTextView.setTag(R.id.scroll_threshold_key,2);
  footerViews.add(mQuickReturnFooterTextView);
  mQuickReturnFooterImageView.setTag(R.id.scroll_threshold_key,4);
  footerViews.add(mQuickReturnFooterImageView);
  SpeedyQuickReturnListViewOnScrollListener scrollListener=new SpeedyQuickReturnListViewOnScrollListener(getActivity(),QuickReturnType.GOOGLE_PLUS,null,footerViews);
  scrollListener.setSlideHeaderUpAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_header_up));
  scrollListener.setSlideHeaderDownAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_header_down));
  scrollListener.setSlideFooterUpAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_footer_up));
  scrollListener.setSlideFooterDownAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.slide_footer_down));
  mListView.setOnScrollListener(scrollListener);
}",0.986425339366516
111140,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mValues=getResources().getStringArray(R.array.countries);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),R.layout.list_item,R.id.item_tv,mValues);
  mListView.setAdapter(adapter);
  mListView.setOnScrollListener(mListViewOnScrollListener);
  mPlaceHolderView=getActivity().getLayoutInflater().inflate(R.layout.view_header_placeholder,mListView,false);
  mListView.addHeaderView(mPlaceHolderView);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mListView.setOnScrollListener(mListViewOnScrollListener);
  mPlaceHolderView=getActivity().getLayoutInflater().inflate(R.layout.view_header_placeholder,mListView,false);
  mListView.addHeaderView(mPlaceHolderView);
  mValues=getResources().getStringArray(R.array.countries);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),R.layout.list_item,R.id.item_tv,mValues);
  mListView.setAdapter(adapter);
}",0.6238532110091743
111141,"@Override public void onScrollStateChanged(AbsListView view,int scrollState){
  if (scrollState == SCROLL_STATE_IDLE) {
    int midHeader=-mMinHeaderTranslation / 2;
    int midFooter=mMinFooterTranslation / 2;
switch (mQuickReturnType) {
case HEADER:
      if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
        mHeader.setTranslationY(0);
        mHeaderDiffTotal=0;
      }
 else       if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
        mHeader.setTranslationY(mMinHeaderTranslation);
        mHeaderDiffTotal=mMinHeaderTranslation;
      }
    break;
case FOOTER:
  if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
    mFooter.setTranslationY(0);
    mFooterDiffTotal=0;
  }
 else   if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
    mFooter.setTranslationY(mMinFooterTranslation);
    mFooterDiffTotal=-mMinFooterTranslation;
  }
break;
case BOTH:
if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
mHeader.setTranslationY(0);
mHeaderDiffTotal=0;
}
 else if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
mHeader.setTranslationY(mMinHeaderTranslation);
mHeaderDiffTotal=mMinHeaderTranslation;
}
if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
mFooter.setTranslationY(0);
mFooterDiffTotal=0;
}
 else if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
mFooter.setTranslationY(mMinFooterTranslation);
mFooterDiffTotal=-mMinFooterTranslation;
}
break;
}
}
}","@Override public void onScrollStateChanged(AbsListView view,int scrollState){
  Log.d(getClass().getSimpleName(),""String_Node_Str"" + scrollState);
  if (scrollState == SCROLL_STATE_IDLE) {
    int midHeader=-mMinHeaderTranslation / 2;
    int midFooter=mMinFooterTranslation / 2;
switch (mQuickReturnType) {
case HEADER:
      if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
        mHeader.setTranslationY(0);
        mHeaderDiffTotal=0;
      }
 else       if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
        mHeader.setTranslationY(mMinHeaderTranslation);
        mHeaderDiffTotal=mMinHeaderTranslation;
      }
    break;
case FOOTER:
  if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
    mFooter.setTranslationY(0);
    mFooterDiffTotal=0;
  }
 else   if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
    mFooter.setTranslationY(mMinFooterTranslation);
    mFooterDiffTotal=-mMinFooterTranslation;
  }
break;
case BOTH:
if (-mHeaderDiffTotal > 0 && -mHeaderDiffTotal < midHeader) {
mHeader.setTranslationY(0);
mHeaderDiffTotal=0;
}
 else if (-mHeaderDiffTotal < -mMinHeaderTranslation && -mHeaderDiffTotal >= midHeader) {
mHeader.setTranslationY(mMinHeaderTranslation);
mHeaderDiffTotal=mMinHeaderTranslation;
}
if (-mFooterDiffTotal > 0 && -mFooterDiffTotal < midFooter) {
mFooter.setTranslationY(0);
mFooterDiffTotal=0;
}
 else if (-mFooterDiffTotal < mMinFooterTranslation && -mFooterDiffTotal >= midFooter) {
mFooter.setTranslationY(mMinFooterTranslation);
mFooterDiffTotal=-mMinFooterTranslation;
}
break;
}
}
}",0.9782813975448535
111142,"@Override public void onScroll(AbsListView listview,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(listview);
  int diff=mPrevScrollY - scrollY;
  if (diff != 0) {
switch (mQuickReturnType) {
case HEADER:
      if (diff < 0) {
        mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
      }
 else {
        mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
      }
    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
      mHeaderAnim=new TranslateAnimation(0,0,mHeaderDiffTotal,mHeaderDiffTotal);
      mHeaderAnim.setFillAfter(true);
      mHeaderAnim.setDuration(0);
      mHeader.startAnimation(mHeaderAnim);
    }
 else {
      mHeader.setTranslationY(mHeaderDiffTotal);
    }
  break;
case FOOTER:
if (diff < 0) {
  mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
  mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
mFooterAnim=new TranslateAnimation(0,0,-mFooterDiffTotal,-mFooterDiffTotal);
mFooterAnim.setFillAfter(true);
mFooterAnim.setDuration(0);
mFooter.startAnimation(mFooterAnim);
}
 else {
mFooter.setTranslationY(-mFooterDiffTotal);
}
break;
case BOTH:
if (diff < 0) {
mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
mHeaderAnim=new TranslateAnimation(0,0,mHeaderDiffTotal,mHeaderDiffTotal);
mHeaderAnim.setFillAfter(true);
mHeaderAnim.setDuration(0);
mHeader.startAnimation(mHeaderAnim);
mFooterAnim=new TranslateAnimation(0,0,-mFooterDiffTotal,-mFooterDiffTotal);
mFooterAnim.setFillAfter(true);
mFooterAnim.setDuration(0);
mFooter.startAnimation(mFooterAnim);
}
 else {
mHeader.setTranslationY(mHeaderDiffTotal);
mFooter.setTranslationY(-mFooterDiffTotal);
}
default :
break;
}
}
mPrevScrollY=scrollY;
}","@Override public void onScroll(AbsListView listview,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(listview);
  int diff=mPrevScrollY - scrollY;
  Log.d(getClass().getSimpleName(),""String_Node_Str"" + scrollY);
  Log.d(getClass().getSimpleName(),""String_Node_Str"" + diff);
  if (diff != 0) {
switch (mQuickReturnType) {
case HEADER:
      if (diff < 0) {
        mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
      }
 else {
        mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
      }
    mHeader.setTranslationY(mHeaderDiffTotal);
  break;
case FOOTER:
if (diff < 0) {
  mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
  mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mFooter.setTranslationY(-mFooterDiffTotal);
break;
case BOTH:
if (diff < 0) {
mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mHeader.setTranslationY(mHeaderDiffTotal);
mFooter.setTranslationY(-mFooterDiffTotal);
default :
break;
}
}
mPrevScrollY=scrollY;
}",0.6320677410543567
111143,"@Override public void onScrollChanged(ScrollView who,int l,int t,int oldl,int oldt){
  int diff=oldt - t;
switch (mQuickReturnType) {
case HEADER:
    if (diff <= 0) {
      mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
    }
 else {
      mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
    }
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
    mHeaderAnim=new TranslateAnimation(0,0,mHeaderDiffTotal,mHeaderDiffTotal);
    mHeaderAnim.setFillAfter(true);
    mHeaderAnim.setDuration(0);
    mHeader.startAnimation(mHeaderAnim);
  }
 else {
    mHeader.setTranslationY(mHeaderDiffTotal);
  }
break;
case FOOTER:
if (diff <= 0) {
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
mFooterAnim=new TranslateAnimation(0,0,-mFooterDiffTotal,-mFooterDiffTotal);
mFooterAnim.setFillAfter(true);
mFooterAnim.setDuration(0);
mFooter.startAnimation(mFooterAnim);
}
 else {
mFooter.setTranslationY(-mFooterDiffTotal);
}
break;
case BOTH:
if (diff <= 0) {
mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
mHeaderAnim=new TranslateAnimation(0,0,mHeaderDiffTotal,mHeaderDiffTotal);
mHeaderAnim.setFillAfter(true);
mHeaderAnim.setDuration(0);
mHeader.startAnimation(mHeaderAnim);
mFooterAnim=new TranslateAnimation(0,0,-mFooterDiffTotal,-mFooterDiffTotal);
mFooterAnim.setFillAfter(true);
mFooterAnim.setDuration(0);
mFooter.startAnimation(mFooterAnim);
}
 else {
mHeader.setTranslationY(mHeaderDiffTotal);
mFooter.setTranslationY(-mFooterDiffTotal);
}
break;
}
}","@Override public void onScrollChanged(ScrollView who,int l,int t,int oldl,int oldt){
  int diff=oldt - t;
switch (mQuickReturnType) {
case HEADER:
    if (diff <= 0) {
      mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
    }
 else {
      mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
    }
  mHeader.setTranslationY(mHeaderDiffTotal);
break;
case FOOTER:
if (diff <= 0) {
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mFooter.setTranslationY(-mFooterDiffTotal);
break;
case BOTH:
if (diff <= 0) {
mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
mHeader.setTranslationY(mHeaderDiffTotal);
mFooter.setTranslationY(-mFooterDiffTotal);
break;
}
}",0.3786833855799373
111144,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.google_plus_row,parent,false);
    holder=new ViewHolder(convertView);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  GooglePlusPost post=getItem(position);
  holder.mDisplayNameTextView.setText(post.getDisplayName());
  holder.mTimestampTextView.setText(post.getTimestamp());
  holder.mMessageTextView.setText(post.getMessage());
  Picasso.with(holder.mUserImageView.getContext()).load(post.getAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),50),QuickReturnUtils.dp2px(getContext(),50)).error(android.R.drawable.stat_notify_error).into(holder.mUserImageView);
  Picasso.with(holder.mPostImageView.getContext()).load(post.getPostImageUrl()).error(android.R.drawable.stat_notify_error).into(holder.mPostImageView);
  Picasso.with(holder.mCommenterOneImageView.getContext()).load(post.getCommenterOneAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),34),QuickReturnUtils.dp2px(getContext(),34)).error(android.R.drawable.stat_notify_error).into(holder.mCommenterOneImageView);
  Picasso.with(holder.mCommenterTwoImageView.getContext()).load(post.getCommenterTwoAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),34),QuickReturnUtils.dp2px(getContext(),34)).error(android.R.drawable.stat_notify_error).into(holder.mCommenterTwoImageView);
  Picasso.with(holder.mCommenterThreeImageView.getContext()).load(post.getCommenterThreeAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),34),QuickReturnUtils.dp2px(getContext(),34)).error(android.R.drawable.stat_notify_error).into(holder.mCommenterThreeImageView);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.google_plus_row,parent,false);
    holder=new ViewHolder(convertView);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  GooglePlusPost post=getItem(position);
  holder.mDisplayNameTextView.setText(post.getDisplayName());
  holder.mTimestampTextView.setText(post.getTimestamp());
  holder.mMessageTextView.setText(post.getMessage());
  Picasso.with(holder.mUserImageView.getContext()).load(post.getAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),50),QuickReturnUtils.dp2px(getContext(),50)).error(android.R.drawable.stat_notify_error).into(holder.mUserImageView);
  Picasso.with(holder.mPostImageView.getContext()).load(post.getPostImageUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),346),QuickReturnUtils.dp2px(getContext(),320)).error(android.R.drawable.stat_notify_error).into(holder.mPostImageView);
  Picasso.with(holder.mCommenterOneImageView.getContext()).load(post.getCommenterOneAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),34),QuickReturnUtils.dp2px(getContext(),34)).error(android.R.drawable.stat_notify_error).into(holder.mCommenterOneImageView);
  Picasso.with(holder.mCommenterTwoImageView.getContext()).load(post.getCommenterTwoAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),34),QuickReturnUtils.dp2px(getContext(),34)).error(android.R.drawable.stat_notify_error).into(holder.mCommenterTwoImageView);
  Picasso.with(holder.mCommenterThreeImageView.getContext()).load(post.getCommenterThreeAvatarUrl()).centerCrop().resize(QuickReturnUtils.dp2px(getContext(),34),QuickReturnUtils.dp2px(getContext(),34)).error(android.R.drawable.stat_notify_error).into(holder.mCommenterThreeImageView);
  return convertView;
}",0.9724966622162884
111145,"@Override public void onScroll(AbsListView listview,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(listview);
  int diff=mPrevScrollY - scrollY;
switch (mQuickReturnType) {
case HEADER:
    if (diff <= 0) {
      mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
    }
 else {
      mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
    }
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
    mHeaderAnim=new TranslateAnimation(0,0,mHeaderDiffTotal,mHeaderDiffTotal);
    mHeaderAnim.setFillAfter(true);
    mHeaderAnim.setDuration(0);
    mHeader.startAnimation(mHeaderAnim);
  }
 else {
    mHeader.setTranslationY(mHeaderDiffTotal);
  }
break;
case FOOTER:
if (diff <= 0) {
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
mFooterAnim=new TranslateAnimation(0,0,-mFooterDiffTotal,-mFooterDiffTotal);
mFooterAnim.setFillAfter(true);
mFooterAnim.setDuration(0);
mFooter.startAnimation(mFooterAnim);
}
 else {
mFooter.setTranslationY(-mFooterDiffTotal);
}
break;
case BOTH:
default :
break;
}
mPrevScrollY=scrollY;
}","@Override public void onScroll(AbsListView listview,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(listview);
  int diff=mPrevScrollY - scrollY;
switch (mQuickReturnType) {
case HEADER:
    if (diff <= 0) {
      mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
    }
 else {
      mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
    }
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
    mHeaderAnim=new TranslateAnimation(0,0,mHeaderDiffTotal,mHeaderDiffTotal);
    mHeaderAnim.setFillAfter(true);
    mHeaderAnim.setDuration(0);
    mHeader.startAnimation(mHeaderAnim);
  }
 else {
    mHeader.setTranslationY(mHeaderDiffTotal);
  }
break;
case FOOTER:
if (diff <= 0) {
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
mFooterAnim=new TranslateAnimation(0,0,-mFooterDiffTotal,-mFooterDiffTotal);
mFooterAnim.setFillAfter(true);
mFooterAnim.setDuration(0);
mFooter.startAnimation(mFooterAnim);
}
 else {
mFooter.setTranslationY(-mFooterDiffTotal);
}
break;
case BOTH:
if (diff <= 0) {
mHeaderDiffTotal=Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation);
}
 else {
mHeaderDiffTotal=Math.min(Math.max(mHeaderDiffTotal + diff,mMinHeaderTranslation),0);
}
if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
mHeaderAnim=new TranslateAnimation(0,0,mHeaderDiffTotal,mHeaderDiffTotal);
mHeaderAnim.setFillAfter(true);
mHeaderAnim.setDuration(0);
mHeader.startAnimation(mHeaderAnim);
}
 else {
mHeader.setTranslationY(mHeaderDiffTotal);
}
if (diff <= 0) {
mFooterDiffTotal=Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation);
}
 else {
mFooterDiffTotal=Math.min(Math.max(mFooterDiffTotal + diff,-mMinFooterTranslation),0);
}
if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
mFooterAnim=new TranslateAnimation(0,0,-mFooterDiffTotal,-mFooterDiffTotal);
mFooterAnim.setFillAfter(true);
mFooterAnim.setDuration(0);
mFooter.startAnimation(mFooterAnim);
}
 else {
mFooter.setTranslationY(-mFooterDiffTotal);
}
default :
break;
}
mPrevScrollY=scrollY;
}",0.7353346185623795
111146,"@Override public void onPageSelected(int position){
  Log.d(""String_Node_Str"",""String_Node_Str"" + position);
  for (int i=0; i < mTabsLinearLayout.getChildCount(); i++) {
    TextView tv=(TextView)mTabsLinearLayout.getChildAt(i);
    if (i == position) {
      tv.setTextColor(getResources().getColor(R.color.steel_blue));
    }
 else {
      tv.setTextColor(getResources().getColor(android.R.color.darker_gray));
    }
  }
}","@Override public void onPageSelected(int position){
  for (int i=0; i < mTabsLinearLayout.getChildCount(); i++) {
    TextView tv=(TextView)mTabsLinearLayout.getChildAt(i);
    if (i == position) {
      tv.setTextColor(getResources().getColor(R.color.steel_blue));
    }
 else {
      tv.setTextColor(getResources().getColor(android.R.color.darker_gray));
    }
  }
}",0.9281210592686002
111147,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  Log.d(""String_Node_Str"",""String_Node_Str"" + position);
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
}",0.7764705882352941
111148,"@Override public void onPageSelected(int position){
  Log.d(""String_Node_Str"",""String_Node_Str"" + position);
  for (int i=0; i < mTabsLinearLayout.getChildCount(); i++) {
    TextView tv=(TextView)mTabsLinearLayout.getChildAt(i);
    if (i == position) {
      tv.setTextColor(getResources().getColor(R.color.steel_blue));
    }
 else {
      tv.setTextColor(getResources().getColor(android.R.color.darker_gray));
    }
  }
}","@Override public void onPageSelected(int position){
  for (int i=0; i < mTabsLinearLayout.getChildCount(); i++) {
    TextView tv=(TextView)mTabsLinearLayout.getChildAt(i);
    if (i == position) {
      tv.setTextColor(getResources().getColor(R.color.steel_blue));
    }
 else {
      tv.setTextColor(getResources().getColor(android.R.color.darker_gray));
    }
  }
}",0.9281210592686002
111149,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  Log.d(""String_Node_Str"",""String_Node_Str"" + position);
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
}",0.7764705882352941
111150,"@Override public void onPageSelected(int position){
  Log.d(""String_Node_Str"",""String_Node_Str"" + position);
  for (int i=0; i < mTabsLinearLayout.getChildCount(); i++) {
    TextView tv=(TextView)mTabsLinearLayout.getChildAt(i);
    if (i == position) {
      tv.setTextColor(getResources().getColor(R.color.steel_blue));
    }
 else {
      tv.setTextColor(getResources().getColor(android.R.color.darker_gray));
    }
  }
}","@Override public void onPageSelected(int position){
  for (int i=0; i < mTabsLinearLayout.getChildCount(); i++) {
    TextView tv=(TextView)mTabsLinearLayout.getChildAt(i);
    if (i == position) {
      tv.setTextColor(getResources().getColor(R.color.steel_blue));
    }
 else {
      tv.setTextColor(getResources().getColor(android.R.color.darker_gray));
    }
  }
}",0.9281210592686002
111151,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  Log.d(""String_Node_Str"",""String_Node_Str"" + position);
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
}",0.7764705882352941
111152,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_quick_return_twitter);
  bindUIElements();
  mSectionsPagerAdapter=new SectionsPagerAdapter(getFragmentManager());
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mTabs.setAllCaps(false);
  mTabs.setShouldExpand(true);
  mTabs.setTextSize(QuickReturnUtils.dp2px(this,16));
  mTabs.setTabBackground(R.drawable.selector_bg_tab);
  mTabs.setIndicatorColorResource(R.color.steel_blue);
  mTabs.setOnPageChangeListener(mTabsOnPageChangeListener);
  mTabs.setViewPager(mViewPager);
  mTabsLinearLayout=((LinearLayout)mTabs.getChildAt(0));
  TextView tv=(TextView)mTabsLinearLayout.getChildAt(0);
  tv.setTextColor(getResources().getColor(R.color.steel_blue));
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_quick_return_twitter);
  bindUIElements();
  mSectionsPagerAdapter=new SectionsPagerAdapter(getFragmentManager());
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mTabs.setAllCaps(false);
  mTabs.setShouldExpand(true);
  mTabs.setTextSize(QuickReturnUtils.dp2px(this,16));
  mTabs.setTabBackground(R.drawable.selector_bg_tab);
  mTabs.setIndicatorColorResource(R.color.steel_blue);
  mTabs.setIndicatorHeight(QuickReturnUtils.dp2px(this,5));
  mTabs.setOnPageChangeListener(mTabsOnPageChangeListener);
  mTabs.setViewPager(mViewPager);
  mTabsLinearLayout=((LinearLayout)mTabs.getChildAt(0));
  TextView tv=(TextView)mTabsLinearLayout.getChildAt(0);
  tv.setTextColor(getResources().getColor(R.color.steel_blue));
}",0.9635036496350364
111153,"@Override public void onPageSelected(int position){
  Log.d(""String_Node_Str"",""String_Node_Str"" + position);
  for (int i=0; i < mTabsLinearLayout.getChildCount(); i++) {
    TextView tv=(TextView)mTabsLinearLayout.getChildAt(i);
    if (i == position) {
      tv.setTextColor(getResources().getColor(R.color.steel_blue));
    }
 else {
      tv.setTextColor(getResources().getColor(android.R.color.darker_gray));
    }
  }
}","@Override public void onPageSelected(int position){
  for (int i=0; i < mTabsLinearLayout.getChildCount(); i++) {
    TextView tv=(TextView)mTabsLinearLayout.getChildAt(i);
    if (i == position) {
      tv.setTextColor(getResources().getColor(R.color.steel_blue));
    }
 else {
      tv.setTextColor(getResources().getColor(android.R.color.darker_gray));
    }
  }
}",0.9281210592686002
111154,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  Log.d(""String_Node_Str"",""String_Node_Str"" + position);
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
}",0.7764705882352941
111155,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mHeaderHeight=getResources().getDimensionPixelSize(R.dimen.header_height);
  mMinHeaderTranslation=-(mHeaderHeight * 2) + getActionBarHeight();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mHeaderHeight=getResources().getDimensionPixelSize(R.dimen.header_height);
  mMinHeaderTranslation=-(mHeaderHeight * 2) + QuickReturnUtils.getActionBarHeight(getActivity());
}",0.942084942084942
111156,"@SuppressLint(""String_Node_Str"") @Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=getScrollY();
  int diff=mPrevScrollY - scrollY;
  if (diff <= 0) {
    mDiffTotal=Math.max(mDiffTotal + diff,mMinHeaderTranslation);
  }
 else {
    mDiffTotal=Math.min(Math.max(mDiffTotal + diff,mMinHeaderTranslation),0);
  }
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
    mFooterAnim=new TranslateAnimation(0,0,-mDiffTotal,-mDiffTotal);
    mFooterAnim.setFillAfter(true);
    mFooterAnim.setDuration(0);
    mQuickReturnFooterLinearLayout.startAnimation(mFooterAnim);
    mHeaderAnim=new TranslateAnimation(0,0,mDiffTotal,mDiffTotal);
    mHeaderAnim.setFillAfter(true);
    mHeaderAnim.setDuration(0);
    mQuickReturnHeaderTextView.startAnimation(mHeaderAnim);
  }
 else {
    mQuickReturnFooterLinearLayout.setTranslationY(-mDiffTotal);
    mQuickReturnHeaderTextView.setTranslationY(mDiffTotal);
  }
  mPrevScrollY=scrollY;
}","@SuppressLint(""String_Node_Str"") @Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(mListView);
  int diff=mPrevScrollY - scrollY;
  if (diff <= 0) {
    mDiffTotal=Math.max(mDiffTotal + diff,mMinHeaderTranslation);
  }
 else {
    mDiffTotal=Math.min(Math.max(mDiffTotal + diff,mMinHeaderTranslation),0);
  }
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
    mFooterAnim=new TranslateAnimation(0,0,-mDiffTotal,-mDiffTotal);
    mFooterAnim.setFillAfter(true);
    mFooterAnim.setDuration(0);
    mQuickReturnFooterLinearLayout.startAnimation(mFooterAnim);
    mHeaderAnim=new TranslateAnimation(0,0,mDiffTotal,mDiffTotal);
    mHeaderAnim.setFillAfter(true);
    mHeaderAnim.setDuration(0);
    mQuickReturnHeaderTextView.startAnimation(mHeaderAnim);
  }
 else {
    mQuickReturnFooterLinearLayout.setTranslationY(-mDiffTotal);
    mQuickReturnHeaderTextView.setTranslationY(mDiffTotal);
  }
  mPrevScrollY=scrollY;
}",0.9873170731707316
111157,"@SuppressLint(""String_Node_Str"") @Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=getScrollY();
  int diff=mPrevScrollY - scrollY;
  if (diff <= 0) {
    mDiffTotal=Math.max(mDiffTotal + diff,-mMinFooterTranslation);
  }
 else {
    mDiffTotal=Math.min(Math.max(mDiffTotal + diff,-mMinFooterTranslation),0);
  }
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
    mAnim=new TranslateAnimation(0,0,-mDiffTotal,-mDiffTotal);
    mAnim.setFillAfter(true);
    mAnim.setDuration(0);
    mQuickReturnTextView.startAnimation(mAnim);
  }
 else {
    mQuickReturnTextView.setTranslationY(-mDiffTotal);
  }
  mPrevScrollY=scrollY;
}","@SuppressLint(""String_Node_Str"") @Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(mListView);
  int diff=mPrevScrollY - scrollY;
  if (diff <= 0) {
    mDiffTotal=Math.max(mDiffTotal + diff,-mMinFooterTranslation);
  }
 else {
    mDiffTotal=Math.min(Math.max(mDiffTotal + diff,-mMinFooterTranslation),0);
  }
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
    mAnim=new TranslateAnimation(0,0,-mDiffTotal,-mDiffTotal);
    mAnim.setFillAfter(true);
    mAnim.setDuration(0);
    mQuickReturnTextView.startAnimation(mAnim);
  }
 else {
    mQuickReturnTextView.setTranslationY(-mDiffTotal);
  }
  mPrevScrollY=scrollY;
}",0.9821428571428572
111158,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mHeaderHeight=getResources().getDimensionPixelSize(R.dimen.header_height2);
  mMinHeaderTranslation=-(mHeaderHeight) + getActionBarHeight();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mHeaderHeight=getResources().getDimensionPixelSize(R.dimen.header_height2);
  mMinHeaderTranslation=-(mHeaderHeight) + QuickReturnUtils.getActionBarHeight(getActivity());
}",0.94140625
111159,"@SuppressLint(""String_Node_Str"") @Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=getScrollY();
  int diff=mPrevScrollY - scrollY;
  if (diff <= 0) {
    mDiffTotal=Math.max(mDiffTotal + diff,mMinHeaderTranslation);
  }
 else {
    mDiffTotal=Math.min(Math.max(mDiffTotal + diff,mMinHeaderTranslation),0);
  }
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
    mAnim=new TranslateAnimation(0,0,mDiffTotal,mDiffTotal);
    mAnim.setFillAfter(true);
    mAnim.setDuration(0);
    mQuickReturnTextView.startAnimation(mAnim);
  }
 else {
    mQuickReturnTextView.setTranslationY(mDiffTotal);
  }
  mPrevScrollY=scrollY;
}","@SuppressLint(""String_Node_Str"") @Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  int scrollY=QuickReturnUtils.getScrollY(mListView);
  int diff=mPrevScrollY - scrollY;
  if (diff <= 0) {
    mDiffTotal=Math.max(mDiffTotal + diff,mMinHeaderTranslation);
  }
 else {
    mDiffTotal=Math.min(Math.max(mDiffTotal + diff,mMinHeaderTranslation),0);
  }
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
    mAnim=new TranslateAnimation(0,0,mDiffTotal,mDiffTotal);
    mAnim.setFillAfter(true);
    mAnim.setDuration(0);
    mQuickReturnTextView.startAnimation(mAnim);
  }
 else {
    mQuickReturnTextView.setTranslationY(mDiffTotal);
  }
  mPrevScrollY=scrollY;
}",0.9820193637621024
111160,"@Override protected void onDestroy(){
  super.onDestroy();
  Crouton.cancelAllCroutons();
}","@Override protected void onDestroy(){
  super.onDestroy();
  if (mService != null) {
    unbindService(mServiceConn);
  }
  Crouton.cancelAllCroutons();
}",0.7428571428571429
111161,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  bindUIElements(view);
  mValues=getResources().getStringArray(R.array.languages);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),R.layout.list_item,R.id.item_tv,mValues);
  mQuickReturnListView.setAdapter(adapter);
  mQuickReturnListView.getViewTreeObserver().addOnGlobalLayoutListener(mQuickReturnListViewOnGlobalLayoutListener);
  mQuickReturnListView.setOnScrollListener(mQuickReturnListViewOnScrollListener);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  bindUIElements(view);
  mValues=getResources().getStringArray(R.array.countries);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),R.layout.list_item,R.id.item_tv,mValues);
  mQuickReturnListView.setAdapter(adapter);
  mQuickReturnListView.getViewTreeObserver().addOnGlobalLayoutListener(mQuickReturnListViewOnGlobalLayoutListener);
  mQuickReturnListView.setOnScrollListener(mQuickReturnListViewOnScrollListener);
}",0.9875222816399288
111162,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  bindUIElements(view);
  mValues=getResources().getStringArray(R.array.languages);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),R.layout.list_item,R.id.item_tv,mValues);
  mQuickReturnListView.setAdapter(adapter);
  mQuickReturnListView.getViewTreeObserver().addOnGlobalLayoutListener(mQuickReturnListViewOnGlobalLayoutListener);
  mQuickReturnListView.setOnScrollListener(mQuickReturnListViewOnScrollListener);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  bindUIElements(view);
  mValues=getResources().getStringArray(R.array.countries);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),R.layout.list_item,R.id.item_tv,mValues);
  mQuickReturnListView.setAdapter(adapter);
  mQuickReturnListView.getViewTreeObserver().addOnGlobalLayoutListener(mQuickReturnListViewOnGlobalLayoutListener);
  mQuickReturnListView.setOnScrollListener(mQuickReturnListViewOnScrollListener);
}",0.9875222816399288
111163,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  bindUIElements(view);
  mValues=getResources().getStringArray(R.array.languages);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),R.layout.list_item,R.id.item_tv,mValues);
  mQuickReturnListView.setAdapter(adapter);
  mQuickReturnListView.getViewTreeObserver().addOnGlobalLayoutListener(mQuickReturnListViewOnGlobalLayoutListener);
  mQuickReturnListView.setOnScrollListener(mQuickReturnListViewOnScrollListener);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  bindUIElements(view);
  mValues=getResources().getStringArray(R.array.countries);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),R.layout.list_item,R.id.item_tv,mValues);
  mQuickReturnListView.setAdapter(adapter);
  mQuickReturnListView.getViewTreeObserver().addOnGlobalLayoutListener(mQuickReturnListViewOnGlobalLayoutListener);
  mQuickReturnListView.setOnScrollListener(mQuickReturnListViewOnScrollListener);
}",0.9875222816399288
111164,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  bindUIElements(view);
  mValues=getResources().getStringArray(R.array.languages);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),R.layout.list_item,R.id.item_tv,mValues);
  mQuickReturnListView.setAdapter(adapter);
  mQuickReturnListView.getViewTreeObserver().addOnGlobalLayoutListener(mQuickReturnListViewOnGlobalLayoutListener);
  mQuickReturnListView.setOnScrollListener(mQuickReturnListViewOnScrollListener);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  bindUIElements(view);
  mValues=getResources().getStringArray(R.array.countries);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),R.layout.list_item,R.id.item_tv,mValues);
  mQuickReturnListView.setAdapter(adapter);
  mQuickReturnListView.getViewTreeObserver().addOnGlobalLayoutListener(mQuickReturnListViewOnGlobalLayoutListener);
  mQuickReturnListView.setOnScrollListener(mQuickReturnListViewOnScrollListener);
}",0.9875222816399288
111165,"@SuppressLint(""String_Node_Str"") @Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  mScrollY=0;
  int translationY=0;
  if (mQuickReturnListView.scrollYIsComputed()) {
    mScrollY=mQuickReturnListView.getComputedScrollY();
  }
  int rawY=mScrollY;
switch (mState) {
case STATE_OFFSCREEN:
    if (rawY >= mMinRawY) {
      mMinRawY=rawY;
    }
 else {
      mState=STATE_RETURNING;
    }
  translationY=rawY;
break;
case STATE_ONSCREEN:
if (rawY > mQuickReturnHeight) {
mState=STATE_OFFSCREEN;
mMinRawY=rawY;
}
translationY=rawY;
break;
case STATE_RETURNING:
translationY=(rawY - mMinRawY) + mQuickReturnHeight;
System.out.println(translationY);
if (translationY < 0) {
translationY=0;
mMinRawY=rawY + mQuickReturnHeight;
}
if (rawY == 0) {
mState=STATE_ONSCREEN;
translationY=0;
}
if (translationY > mQuickReturnHeight) {
mState=STATE_OFFSCREEN;
mMinRawY=rawY;
}
break;
}
if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
mAnim=new TranslateAnimation(0,0,translationY,translationY);
mAnim.setFillAfter(true);
mAnim.setDuration(0);
mQuickReturnTextView.startAnimation(mAnim);
}
 else {
mQuickReturnTextView.setTranslationY(translationY);
}
}","@SuppressLint(""String_Node_Str"") @Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  mScrollY=0;
  int translationY=0;
  if (mQuickReturnListView.scrollYIsComputed()) {
    mScrollY=mQuickReturnListView.getComputedScrollY();
  }
  int rawY=mScrollY;
switch (mState) {
case STATE_OFFSCREEN:
    if (rawY >= mMinRawY) {
      mMinRawY=rawY;
    }
 else {
      mState=STATE_RETURNING;
    }
  translationY=rawY;
break;
case STATE_ONSCREEN:
if (rawY > mQuickReturnHeight) {
mState=STATE_OFFSCREEN;
mMinRawY=rawY;
}
translationY=rawY;
break;
case STATE_RETURNING:
translationY=(rawY - mMinRawY) + mQuickReturnHeight;
if (translationY < 0) {
translationY=0;
mMinRawY=rawY + mQuickReturnHeight;
}
if (rawY == 0) {
mState=STATE_ONSCREEN;
translationY=0;
}
if (translationY > mQuickReturnHeight) {
mState=STATE_OFFSCREEN;
mMinRawY=rawY;
}
break;
}
if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
mAnim=new TranslateAnimation(0,0,translationY,translationY);
mAnim.setFillAfter(true);
mAnim.setDuration(0);
mQuickReturnTextView.startAnimation(mAnim);
}
 else {
mQuickReturnTextView.setTranslationY(translationY);
}
}",0.9858096828046744
111166,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    mQuickReturnType=QuickReturnType.valueOf(getArguments().getString(""String_Node_Str""));
  }
switch (mQuickReturnType) {
case HEADER:
    mQuickReturnHeaderViewVisible=false;
  break;
case FOOTER:
mQuickReturnFooterViewVisible=true;
break;
case BOTH:
mQuickReturnHeaderViewVisible=false;
mQuickReturnFooterViewVisible=true;
break;
}
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    mQuickReturnType=QuickReturnType.valueOf(getArguments().getString(""String_Node_Str""));
  }
}",0.6521739130434783
111167,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  bindUIElements(view);
  mNotifyingScrollView.setOnScrollChangedListener(mOnScrollChangedListener);
  mNotifyingScrollView.setOverScrollEnabled(false);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  bindUIElements(view);
switch (mQuickReturnType) {
case HEADER:
    mQuickReturnHeaderViewVisible=false;
  break;
case FOOTER:
mQuickReturnFooterViewVisible=true;
mQuickReturnFooterTextView.setVisibility(View.VISIBLE);
break;
case BOTH:
mQuickReturnHeaderViewVisible=false;
mQuickReturnFooterViewVisible=true;
mQuickReturnFooterTextView.setVisibility(View.VISIBLE);
break;
}
mNotifyingScrollView.setOnScrollChangedListener(mOnScrollChangedListener);
mNotifyingScrollView.setOverScrollEnabled(false);
}",0.6044444444444445
111168,"/** 
 * Calculates the legend bounds for a custom list of legends.
 */
protected void onLegendDataChanged(){
  int legendCount=mLegendList.size();
  float margin=(mLegendWidth / legendCount);
  float currentOffset=0;
  for (  LegendModel model : mLegendList) {
    model.setLegendBounds(new RectF(currentOffset,0,currentOffset + margin,mLegendHeight));
    Rect textBounds=new Rect();
    mLegendPaint.getTextBounds(model.getLegendLabel(),0,model.getLegendLabel().length(),textBounds);
    model.setTextBounds(textBounds);
    currentOffset+=margin;
  }
  invalidateGlobal();
}","/** 
 * Calculates the legend bounds for a custom list of legends.
 */
protected void onLegendDataChanged(){
  int legendCount=mLegendList.size();
  float margin=(mGraphWidth / legendCount);
  float currentOffset=0;
  for (  LegendModel model : mLegendList) {
    model.setLegendBounds(new RectF(currentOffset,0,currentOffset + margin,mLegendHeight));
    currentOffset+=margin;
  }
  Utils.calculateLegendInformation(mLegendList,0,mGraphWidth,mLegendPaint);
  invalidateGlobal();
}",0.7573182247403211
111169,"@Override protected boolean onGraphOverlayTouchEvent(MotionEvent _Event){
  super.onGraphOverlayTouchEvent(_Event);
  if (!mStartedAnimation && !mSeries.isEmpty()) {
    mScaleGestureDetector.onTouchEvent(_Event);
    mGestureDetector.onTouchEvent(_Event);
    float newX=getScaledXCoordinate(_Event.getX());
    float newY=_Event.getY();
switch (_Event.getAction()) {
case MotionEvent.ACTION_UP:
      if (!mIsInteracting) {
        findNearestPoint(newX,newY);
      }
 else {
        mIsInteracting=false;
      }
    return true;
}
}
return true;
}","@Override protected boolean onGraphOverlayTouchEvent(MotionEvent _Event){
  super.onGraphOverlayTouchEvent(_Event);
  if (!mStartedAnimation && containsPoints()) {
    mScaleGestureDetector.onTouchEvent(_Event);
    mGestureDetector.onTouchEvent(_Event);
    float newX=getScaledXCoordinate(_Event.getX());
    float newY=_Event.getY();
switch (_Event.getAction()) {
case MotionEvent.ACTION_UP:
      if (!mIsInteracting) {
        findNearestPoint(newX,newY);
      }
 else {
        mIsInteracting=false;
      }
    return true;
}
}
return true;
}",0.9727767695099818
111170,"public void setUseCustomLegend(boolean _useCustomLegend){
  mUseCustomLegend=_useCustomLegend;
  invalidateGlobal();
}","public void setUseCustomLegend(boolean _useCustomLegend){
  mUseCustomLegend=_useCustomLegend;
  onLegendDataChanged();
}",0.895397489539749
111171,"@Override protected void onLegendDraw(Canvas _Canvas){
  super.onLegendDraw(_Canvas);
  mLegendPaint.setColor(mLegendColor);
  mLegendPaint.setStrokeWidth(DEF_LEGEND_STROKE);
  if (!mSeries.isEmpty()) {
    _Canvas.translate(Utils.getTranslationX(mDrawMatrixValues),0);
    if (mUseCustomLegend) {
      for (      LegendModel model : mLegendList) {
        Rect textBounds=model.getTextBounds();
        RectF bounds=model.getLegendBounds();
        _Canvas.drawText(model.getLegendLabel(),bounds.centerX() - (textBounds.width() / 2),bounds.centerY(),mLegendPaint);
        _Canvas.drawLine(bounds.centerX(),bounds.centerY() - textBounds.height() - mLegendTopPadding,bounds.centerX(),mLegendTopPadding,mLegendPaint);
      }
    }
 else {
      List<? extends BaseModel> list=mSeries.get(0).getSeries();
      for (      BaseModel model : list) {
        if (model.canShowLabel()) {
          RectF bounds=model.getLegendBounds();
          _Canvas.drawText(model.getLegendLabel(),model.getLegendLabelPosition(),bounds.bottom - mMaxFontHeight,mLegendPaint);
          _Canvas.drawLine(bounds.centerX(),bounds.bottom - mMaxFontHeight * 2 - mLegendTopPadding,bounds.centerX(),mLegendTopPadding,mLegendPaint);
        }
      }
    }
  }
}","@Override protected void onLegendDraw(Canvas _Canvas){
  super.onLegendDraw(_Canvas);
  mLegendPaint.setColor(mLegendColor);
  mLegendPaint.setStrokeWidth(DEF_LEGEND_STROKE);
  if (!mSeries.isEmpty()) {
    _Canvas.translate(Utils.getTranslationX(mDrawMatrixValues),0);
    if (mUseCustomLegend) {
      for (      LegendModel model : mLegendList) {
        RectF bounds=model.getLegendBounds();
        _Canvas.drawText(model.getLegendLabel(),model.getLegendLabelPosition(),bounds.bottom - mMaxFontHeight,mLegendPaint);
        _Canvas.drawLine(bounds.centerX(),bounds.bottom - mMaxFontHeight * 2 - mLegendTopPadding,bounds.centerX(),mLegendTopPadding,mLegendPaint);
      }
    }
 else {
      List<? extends BaseModel> list=mSeries.get(0).getSeries();
      for (      BaseModel model : list) {
        if (model.canShowLabel()) {
          RectF bounds=model.getLegendBounds();
          _Canvas.drawText(model.getLegendLabel(),model.getLegendLabelPosition(),bounds.bottom - mMaxFontHeight,mLegendPaint);
          _Canvas.drawLine(bounds.centerX(),bounds.bottom - mMaxFontHeight * 2 - mLegendTopPadding,bounds.centerX(),mLegendTopPadding,mLegendPaint);
        }
      }
    }
  }
}",0.915016501650165
111172,"/** 
 * Should be called after new data is inserted. Will be automatically called, when the view dimensions changed. Calculates various offsets and positions for different overlay features based on the graph settings. After the calculation the Path is generated as a normal path or cubic path (Based on 'egUseCubic' attribute).
 */
@Override protected void onDataChanged(){
  if (!mSeries.isEmpty()) {
    int seriesCount=mSeries.size();
    float maxValue=0.f;
    float minValue=Float.MAX_VALUE;
    mNegativeValue=0.f;
    mNegativeOffset=0.f;
    mHasNegativeValues=false;
    for (    ValueLineSeries series : mSeries) {
      for (      ValueLinePoint point : series.getSeries()) {
        if (point.getValue() > maxValue)         maxValue=point.getValue();
        if (point.getValue() < mNegativeValue)         mNegativeValue=point.getValue();
        if (point.getValue() < minValue)         minValue=point.getValue();
      }
    }
    if (mShowStandardValues) {
      for (      StandardValue value : mStandardValues) {
        if (value.getValue() > maxValue)         maxValue=value.getValue();
        if (value.getValue() < mNegativeValue)         mNegativeValue=value.getValue();
        if (value.getValue() < minValue)         minValue=value.getValue();
      }
    }
    if (!mUseDynamicScaling) {
      minValue=0;
    }
 else {
      minValue*=mScalingFactor;
    }
    if (mNegativeValue < 0) {
      mHasNegativeValues=true;
      maxValue+=(mNegativeValue * -1);
      minValue=0;
    }
    float heightMultiplier=mUsableGraphHeight / (maxValue - minValue);
    if (mHasNegativeValues) {
      mNegativeOffset=(mNegativeValue * -1) * heightMultiplier;
    }
    if (mShowStandardValues) {
      for (      StandardValue value : mStandardValues) {
        value.setY((int)(mGraphHeight - mNegativeOffset - ((value.getValue() - minValue) * heightMultiplier)));
      }
    }
    for (    ValueLineSeries series : mSeries) {
      int seriesPointCount=series.getSeries().size();
      if (seriesPointCount <= 1) {
        Log.w(LOG_TAG,""String_Node_Str"");
      }
 else {
        float widthOffset=(float)mGraphWidth / (float)seriesPointCount;
        widthOffset+=widthOffset / seriesPointCount;
        float currentOffset=0;
        series.setWidthOffset(widthOffset);
        float firstX=currentOffset;
        float firstY=mGraphHeight - ((series.getSeries().get(0).getValue() - minValue) * heightMultiplier);
        Path path=new Path();
        path.moveTo(firstX,firstY);
        series.getSeries().get(0).setCoordinates(new Point2D(firstX,firstY));
        if (mUseCubic) {
          Point2D P1=new Point2D();
          Point2D P2=new Point2D();
          Point2D P3=new Point2D();
          for (int i=0; i < seriesPointCount - 1; i++) {
            int i3=(seriesPointCount - i) < 3 ? i + 1 : i + 2;
            float offset2=(seriesPointCount - i) < 3 ? mGraphWidth : currentOffset + widthOffset;
            float offset3=(seriesPointCount - i) < 3 ? mGraphWidth : currentOffset + (2 * widthOffset);
            P1.setX(currentOffset);
            P1.setY(mGraphHeight - ((series.getSeries().get(i).getValue() - minValue) * heightMultiplier));
            P2.setX(offset2);
            P2.setY(mGraphHeight - ((series.getSeries().get(i + 1).getValue() - minValue) * heightMultiplier));
            Utils.calculatePointDiff(P1,P2,P1,mSecondMultiplier);
            P3.setX(offset3);
            P3.setY(mGraphHeight - ((series.getSeries().get(i3).getValue() - minValue) * heightMultiplier));
            Utils.calculatePointDiff(P2,P3,P3,mFirstMultiplier);
            currentOffset+=widthOffset;
            series.getSeries().get(i + 1).setCoordinates(new Point2D(P2.getX(),P2.getY()));
            path.cubicTo(P1.getX(),P1.getY(),P2.getX(),P2.getY(),P3.getX(),P3.getY());
          }
        }
 else {
          boolean first=true;
          int count=1;
          for (          ValueLinePoint point : series.getSeries()) {
            if (first) {
              first=false;
              continue;
            }
            currentOffset+=widthOffset;
            if (count == seriesPointCount - 1) {
              if (currentOffset < mGraphWidth) {
                currentOffset=mGraphWidth;
              }
            }
            point.setCoordinates(new Point2D(currentOffset,mGraphHeight - ((point.getValue() - minValue) * heightMultiplier)));
            path.lineTo(point.getCoordinates().getX(),point.getCoordinates().getY());
            count++;
          }
        }
        if (mUseOverlapFill || seriesCount == 1) {
          path.lineTo(mGraphWidth,mGraphHeight);
          path.lineTo(0,mGraphHeight);
          path.lineTo(firstX,firstY);
        }
        series.setPath(path);
      }
    }
    if (!mUseCustomLegend) {
      if (calculateLegendBounds())       Utils.calculateLegendInformation(mSeries.get(0).getSeries(),0,mGraphWidth,mLegendPaint);
    }
    if (mShowIndicator && mSeries.size() == 1) {
      int size=mSeries.get(0).getSeries().size();
      int index;
      if (size > 1) {
        if (size == 3) {
          index=size / 2;
        }
 else {
          index=(size / 2) - 1;
        }
        mFocusedPoint=mSeries.get(0).getSeries().get(index);
        mTouchedArea=mFocusedPoint.getCoordinates();
        calculateValueTextHeight();
      }
    }
    resetZoom();
  }
  super.onDataChanged();
}","/** 
 * Should be called after new data is inserted. Will be automatically called, when the view dimensions changed. Calculates various offsets and positions for different overlay features based on the graph settings. After the calculation the Path is generated as a normal path or cubic path (Based on 'egUseCubic' attribute).
 */
@Override protected void onDataChanged(){
  if (!mSeries.isEmpty()) {
    int seriesCount=mSeries.size();
    float maxValue=0.f;
    float minValue=Float.MAX_VALUE;
    mNegativeValue=0.f;
    mNegativeOffset=0.f;
    mHasNegativeValues=false;
    for (    ValueLineSeries series : mSeries) {
      for (      ValueLinePoint point : series.getSeries()) {
        if (point.getValue() > maxValue)         maxValue=point.getValue();
        if (point.getValue() < mNegativeValue)         mNegativeValue=point.getValue();
        if (point.getValue() < minValue)         minValue=point.getValue();
      }
    }
    if (mShowStandardValues) {
      for (      StandardValue value : mStandardValues) {
        if (value.getValue() > maxValue)         maxValue=value.getValue();
        if (value.getValue() < mNegativeValue)         mNegativeValue=value.getValue();
        if (value.getValue() < minValue)         minValue=value.getValue();
      }
    }
    if (!mUseDynamicScaling) {
      minValue=0;
    }
 else {
      minValue*=mScalingFactor;
    }
    if (mNegativeValue < 0) {
      mHasNegativeValues=true;
      maxValue+=(mNegativeValue * -1);
      minValue=0;
    }
    float heightMultiplier=mUsableGraphHeight / (maxValue - minValue);
    if (mHasNegativeValues) {
      mNegativeOffset=(mNegativeValue * -1) * heightMultiplier;
    }
    if (mShowStandardValues) {
      for (      StandardValue value : mStandardValues) {
        value.setY((int)(mGraphHeight - mNegativeOffset - ((value.getValue() - minValue) * heightMultiplier)));
      }
    }
    for (    ValueLineSeries series : mSeries) {
      int seriesPointCount=series.getSeries().size();
      if (seriesPointCount <= 1) {
        Log.w(LOG_TAG,""String_Node_Str"");
      }
 else {
        float widthOffset=(float)mGraphWidth / (float)seriesPointCount;
        widthOffset+=widthOffset / seriesPointCount;
        float currentOffset=0;
        series.setWidthOffset(widthOffset);
        float firstX=currentOffset;
        float firstY=mGraphHeight - ((series.getSeries().get(0).getValue() - minValue) * heightMultiplier);
        Path path=new Path();
        path.moveTo(firstX,firstY);
        series.getSeries().get(0).setCoordinates(new Point2D(firstX,firstY));
        if (mUseCubic) {
          Point2D P1=new Point2D();
          Point2D P2=new Point2D();
          Point2D P3=new Point2D();
          for (int i=0; i < seriesPointCount - 1; i++) {
            int i3=(seriesPointCount - i) < 3 ? i + 1 : i + 2;
            float offset2=(seriesPointCount - i) < 3 ? mGraphWidth : currentOffset + widthOffset;
            float offset3=(seriesPointCount - i) < 3 ? mGraphWidth : currentOffset + (2 * widthOffset);
            P1.setX(currentOffset);
            P1.setY(mGraphHeight - ((series.getSeries().get(i).getValue() - minValue) * heightMultiplier));
            P2.setX(offset2);
            P2.setY(mGraphHeight - ((series.getSeries().get(i + 1).getValue() - minValue) * heightMultiplier));
            Utils.calculatePointDiff(P1,P2,P1,mSecondMultiplier);
            P3.setX(offset3);
            P3.setY(mGraphHeight - ((series.getSeries().get(i3).getValue() - minValue) * heightMultiplier));
            Utils.calculatePointDiff(P2,P3,P3,mFirstMultiplier);
            currentOffset+=widthOffset;
            series.getSeries().get(i + 1).setCoordinates(new Point2D(P2.getX(),P2.getY()));
            path.cubicTo(P1.getX(),P1.getY(),P2.getX(),P2.getY(),P3.getX(),P3.getY());
          }
        }
 else {
          boolean first=true;
          int count=1;
          for (          ValueLinePoint point : series.getSeries()) {
            if (first) {
              first=false;
              continue;
            }
            currentOffset+=widthOffset;
            if (count == seriesPointCount - 1) {
              if (currentOffset < mGraphWidth) {
                currentOffset=mGraphWidth;
              }
            }
            point.setCoordinates(new Point2D(currentOffset,mGraphHeight - ((point.getValue() - minValue) * heightMultiplier)));
            path.lineTo(point.getCoordinates().getX(),point.getCoordinates().getY());
            count++;
          }
        }
        if (mUseOverlapFill || seriesCount == 1) {
          path.lineTo(mGraphWidth,mGraphHeight);
          path.lineTo(0,mGraphHeight);
          path.lineTo(firstX,firstY);
        }
        series.setPath(path);
      }
    }
    if (!mUseCustomLegend) {
      if (calculateLegendBounds())       Utils.calculateLegendInformation(mSeries.get(0).getSeries(),0,mGraphWidth,mLegendPaint);
    }
    if (mShowIndicator && mSeries.size() == 1) {
      int size=mSeries.get(0).getSeries().size();
      int index;
      if (size > 1) {
        if (size == 3) {
          index=size / 2;
        }
 else {
          index=(size / 2) - 1;
        }
        mFocusedPoint=mSeries.get(0).getSeries().get(index);
        mTouchedArea=mFocusedPoint.getCoordinates();
        calculateValueTextHeight();
      }
    }
    resetZoom(false);
  }
  super.onDataChanged();
}",0.9995352727948694
111173,"public void resetZoom(){
  mDrawMatrixValues=new float[]{1f,0f,0f,0f,1f,0f,0f,0f,1f};
  mDrawMatrix.setValues(mDrawMatrixValues);
  if (!mSeries.isEmpty()) {
    recalculateXCoordinates(mGraphWidth * mDrawMatrixValues[0]);
    if (calculateLegendBounds())     Utils.calculateLegendInformation(mSeries.get(0).getSeries(),0,mGraphWidth * mDrawMatrixValues[0],mLegendPaint);
    calculateValueTextHeight();
  }
  invalidateGlobal();
}","public void resetZoom(boolean _recalculate){
  mDrawMatrixValues=new float[]{1f,0f,0f,0f,1f,0f,0f,0f,1f};
  mDrawMatrix.setValues(mDrawMatrixValues);
  if (!mSeries.isEmpty() && _recalculate) {
    recalculateXCoordinates(mGraphWidth * mDrawMatrixValues[0]);
    if (calculateLegendBounds())     Utils.calculateLegendInformation(mSeries.get(0).getSeries(),0,mGraphWidth * mDrawMatrixValues[0],mLegendPaint);
    calculateValueTextHeight();
  }
  invalidateGlobal();
}",0.959910913140312
111174,"public void setMaxZoomY(float _maxZoomY){
  mMaxZoomY=_maxZoomY;
  resetZoom();
}","public void setMaxZoomY(float _maxZoomY){
  mMaxZoomY=_maxZoomY;
  resetZoom(true);
}",0.9759036144578314
111175,"public void setMaxZoomX(float _maxZoomX){
  mMaxZoomX=_maxZoomX;
  resetZoom();
}","public void setMaxZoomX(float _maxZoomX){
  mMaxZoomX=_maxZoomX;
  resetZoom(true);
}",0.9759036144578314
111176,"@Override public void onReset(){
  mCubicValueLineChart.resetZoom();
}","@Override public void onReset(){
  mCubicValueLineChart.resetZoom(true);
}",0.9722222222222222
111177,"@Override public void onReset(){
  mValueLineChart.resetZoom();
}","@Override public void onReset(){
  mValueLineChart.resetZoom(true);
}",0.9701492537313432
111178,"/** 
 * Constructor that is called when inflating a view from XML. This is called when a view is being constructed from an XML file, supplying attributes that were specified in the XML file. This version uses a default style of 0, so the only attribute values applied are those in the Context's Theme and the given AttributeSet. <p/> <p/> The method onFinishInflate() will be called after all children have been added.
 * @param context The Context the view is running in, through which it canaccess the current theme, resources, etc.
 * @param attrs   The attributes of the XML tag that is inflating the view.
 * @see #View(android.content.Context,android.util.AttributeSet,int)
 */
public BaseChart(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.BaseChart,0,0);
  try {
    mLegendHeight=a.getDimension(R.styleable.BaseChart_egLegendHeight,Utils.dpToPx(DEF_LEGEND_HEIGHT));
    mLegendTextSize=a.getDimension(R.styleable.BaseChart_egLegendTextSize,Utils.dpToPx(DEF_LEGEND_TEXT_SIZE));
    mAnimationTime=a.getInt(R.styleable.BaseChart_egAnimationTime,DEF_ANIMATION_TIME);
    mShowDecimal=a.getBoolean(R.styleable.BaseChart_egShowDecimal,DEF_SHOW_DECIMAL);
    mLegendColor=a.getColor(R.styleable.BaseChart_egLegendColor,DEF_LEGEND_COLOR);
  }
  finally {
    a.recycle();
  }
}","/** 
 * Constructor that is called when inflating a view from XML. This is called when a view is being constructed from an XML file, supplying attributes that were specified in the XML file. This version uses a default style of 0, so the only attribute values applied are those in the Context's Theme and the given AttributeSet. <p/> <p/> The method onFinishInflate() will be called after all children have been added.
 * @param context The Context the view is running in, through which it canaccess the current theme, resources, etc.
 * @param attrs   The attributes of the XML tag that is inflating the view.
 * @see #View(android.content.Context,android.util.AttributeSet,int)
 */
public BaseChart(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.BaseChart,0,0);
  try {
    mLegendHeight=a.getDimension(R.styleable.BaseChart_egLegendHeight,Utils.dpToPx(DEF_LEGEND_HEIGHT));
    mLegendTextSize=a.getDimension(R.styleable.BaseChart_egLegendTextSize,Utils.dpToPx(DEF_LEGEND_TEXT_SIZE));
    mAnimationTime=a.getInt(R.styleable.BaseChart_egAnimationTime,DEF_ANIMATION_TIME);
    mShowDecimal=a.getBoolean(R.styleable.BaseChart_egShowDecimal,DEF_SHOW_DECIMAL);
    mLegendColor=a.getColor(R.styleable.BaseChart_egLegendColor,DEF_LEGEND_COLOR);
    mEmptyDataText=a.getString(R.styleable.BaseChart_egEmptyDataText);
  }
  finally {
    a.recycle();
  }
  if (mEmptyDataText == null) {
    mEmptyDataText=DEF_EMPTY_DATA_TEXT;
  }
}",0.949046793760832
111179,"@Override protected void onGraphDraw(Canvas _Canvas){
  super.onGraphDraw(_Canvas);
  if (!mPieData.isEmpty()) {
    float innerStartAngle=0;
    float innerSweepAngle=0;
    int amountOfPieSlices=mPieData.size();
    for (int pieIndex=0; pieIndex < amountOfPieSlices; pieIndex++) {
      PieModel model=mPieData.get(pieIndex);
      mGraphPaint.setColor(model.getColor());
      float startAngle;
      float sweepAngle=(model.getEndAngle() - model.getStartAngle()) * mRevealValue;
      if (mOpenClockwise) {
        startAngle=model.getStartAngle() * mRevealValue;
      }
 else {
        startAngle=360 - model.getEndAngle() * mRevealValue;
      }
      if (pieIndex == 0) {
        innerStartAngle=startAngle + (mOpenClockwise ? 0 : (float)Math.ceil(sweepAngle));
      }
      if (mOpenClockwise)       innerSweepAngle+=sweepAngle;
 else       innerSweepAngle-=(float)Math.ceil(sweepAngle);
      _Canvas.drawArc(mGraphBounds,startAngle,sweepAngle,true,mGraphPaint);
      if (mUseInnerPadding) {
        mGraphPaint.setColor(model.getHighlightedColor());
        _Canvas.drawArc(mInnerBounds,startAngle,sweepAngle,true,mGraphPaint);
      }
    }
    if (mUseInnerPadding) {
      mGraphPaint.setColor(mInnerPaddingColor);
      _Canvas.drawArc(mInnerOutlineBounds,innerStartAngle,innerSweepAngle,true,mGraphPaint);
    }
  }
 else {
  }
}","@Override protected void onGraphDraw(Canvas _Canvas){
  super.onGraphDraw(_Canvas);
  if (!mPieData.isEmpty()) {
    float innerStartAngle=0;
    float innerSweepAngle=0;
    int amountOfPieSlices=mPieData.size();
    for (int pieIndex=0; pieIndex < amountOfPieSlices; pieIndex++) {
      PieModel model=mPieData.get(pieIndex);
      mGraphPaint.setColor(model.getColor());
      float startAngle;
      float sweepAngle=(model.getEndAngle() - model.getStartAngle()) * mRevealValue;
      if (mOpenClockwise) {
        startAngle=model.getStartAngle() * mRevealValue;
      }
 else {
        startAngle=360 - model.getEndAngle() * mRevealValue;
      }
      if (pieIndex == 0) {
        innerStartAngle=startAngle + (mOpenClockwise ? 0 : (float)Math.ceil(sweepAngle));
      }
      if (mOpenClockwise)       innerSweepAngle+=sweepAngle;
 else       innerSweepAngle-=(float)Math.ceil(sweepAngle);
      _Canvas.drawArc(mGraphBounds,startAngle,sweepAngle,true,mGraphPaint);
      if (mUseInnerPadding) {
        mGraphPaint.setColor(model.getHighlightedColor());
        _Canvas.drawArc(mInnerBounds,startAngle,sweepAngle,true,mGraphPaint);
      }
    }
    if (mUseInnerPadding) {
      mGraphPaint.setColor(mInnerPaddingColor);
      _Canvas.drawArc(mInnerOutlineBounds,innerStartAngle,innerSweepAngle,true,mGraphPaint);
    }
  }
 else {
    mGraphPaint.setColor(0xFFB6B6B6);
    _Canvas.drawArc(mGraphBounds,0,360,true,mGraphPaint);
    if (mUseInnerPadding) {
      mGraphPaint.setColor(0xFFC6C6C6);
      _Canvas.drawArc(mInnerBounds,0,360,true,mGraphPaint);
      mGraphPaint.setColor(mInnerPaddingColor);
      _Canvas.drawArc(mInnerOutlineBounds,0,360,true,mGraphPaint);
    }
  }
}",0.8864758144126358
111180,"@Override protected void onLegendDraw(Canvas _Canvas){
  super.onLegendDraw(_Canvas);
  _Canvas.drawPath(mTriangle,mLegendPaint);
  float height=mMaxFontHeight=Utils.calculateMaxTextHeight(mLegendPaint);
  if (!mPieData.isEmpty()) {
    PieModel model=mPieData.get(mCurrentItem);
    mLegendPaint.getTextBounds(model.getLegendLabel(),0,model.getLegendLabel().length(),mTextBounds);
    _Canvas.drawText(model.getLegendLabel(),(mLegendWidth / 2) - (mTextBounds.width() / 2),mIndicatorSize * 2 + mIndicatorBottomMargin + mIndicatorTopMargin + height,mLegendPaint);
  }
 else {
    String str=""String_Node_Str"";
    mLegendPaint.getTextBounds(str,0,str.length(),mTextBounds);
    _Canvas.drawText(str,(mLegendWidth / 2) - (mTextBounds.width() / 2),mIndicatorSize * 2 + mIndicatorBottomMargin + mIndicatorTopMargin + height,mLegendPaint);
  }
}","@Override protected void onLegendDraw(Canvas _Canvas){
  super.onLegendDraw(_Canvas);
  _Canvas.drawPath(mTriangle,mLegendPaint);
  float height=mMaxFontHeight=Utils.calculateMaxTextHeight(mLegendPaint);
  if (!mPieData.isEmpty()) {
    PieModel model=mPieData.get(mCurrentItem);
    mLegendPaint.getTextBounds(model.getLegendLabel(),0,model.getLegendLabel().length(),mTextBounds);
    _Canvas.drawText(model.getLegendLabel(),(mLegendWidth / 2) - (mTextBounds.width() / 2),mIndicatorSize * 2 + mIndicatorBottomMargin + mIndicatorTopMargin + height,mLegendPaint);
  }
 else {
    mLegendPaint.getTextBounds(mEmptyDataText,0,mEmptyDataText.length(),mTextBounds);
    _Canvas.drawText(mEmptyDataText,(mLegendWidth / 2) - (mTextBounds.width() / 2),mIndicatorSize * 2 + mIndicatorBottomMargin + mIndicatorTopMargin + height,mLegendPaint);
  }
}",0.949374627754616
111181,"@Override protected void onGraphOverlayDraw(Canvas _Canvas){
  super.onGraphOverlayDraw(_Canvas);
  mLegendPaint.setStrokeWidth(mXAxisStroke);
  _Canvas.drawLine(0,(mGraphHeight - mNegativeOffset) * Utils.getScaleY(mDrawMatrixValues) + Utils.getTranslationY(mDrawMatrixValues),mGraphWidth,(mGraphHeight - mNegativeOffset) * Utils.getScaleY(mDrawMatrixValues) + Utils.getTranslationY(mDrawMatrixValues),mLegendPaint);
  if (mShowStandardValues) {
    for (    StandardValue value : mStandardValues) {
      mIndicatorPaint.setColor(value.getColor());
      mIndicatorPaint.setStrokeWidth(value.getStroke());
      _Canvas.drawLine(0,value.getY() * Utils.getScaleY(mDrawMatrixValues) + Utils.getTranslationY(mDrawMatrixValues),mGraphWidth,value.getY() * Utils.getScaleY(mDrawMatrixValues) + Utils.getTranslationY(mDrawMatrixValues),mIndicatorPaint);
    }
  }
  if (mShowIndicator && mSeries.size() == 1) {
    mIndicatorPaint.setColor(mIndicatorLineColor);
    mIndicatorPaint.setStrokeWidth(mIndicatorWidth);
    _Canvas.translate(Utils.getTranslationX(mDrawMatrixValues),0);
    _Canvas.drawLine(mTouchedArea.getX(),0,mTouchedArea.getX(),mGraphHeight,mIndicatorPaint);
    if (mFocusedPoint != null) {
      if (mActivateIndicatorShadow) {
        mIndicatorPaint.setShadowLayer(mIndicatorShadowStrength,0,0,mIndicatorShadowColor);
      }
      mIndicatorPaint.setColor(mIndicatorTextColor);
      _Canvas.drawText(Utils.getFloatString(mFocusedPoint.getValue(),mShowDecimal) + (!mIndicatorTextUnit.isEmpty() ? ""String_Node_Str"" + mIndicatorTextUnit : ""String_Node_Str""),mValueLabelX,mValueLabelY,mIndicatorPaint);
      if (mShowLegendBeneathIndicator) {
        mLegendPaint.setColor(mIndicatorTextColor);
        _Canvas.drawText(mFocusedPoint.getLegendLabel(),mLegendLabelX,mLegendLabelY,mLegendPaint);
      }
      if (mActivateIndicatorShadow) {
        mIndicatorPaint.setShadowLayer(0,0,0,0x00000000);
      }
    }
  }
}","@Override protected void onGraphOverlayDraw(Canvas _Canvas){
  super.onGraphOverlayDraw(_Canvas);
  mLegendPaint.setStrokeWidth(mXAxisStroke);
  _Canvas.drawLine(0,(mGraphHeight - mNegativeOffset) * Utils.getScaleY(mDrawMatrixValues) + Utils.getTranslationY(mDrawMatrixValues),mGraphWidth,(mGraphHeight - mNegativeOffset) * Utils.getScaleY(mDrawMatrixValues) + Utils.getTranslationY(mDrawMatrixValues),mLegendPaint);
  if (!mSeries.isEmpty()) {
    if (mShowStandardValues) {
      for (      StandardValue value : mStandardValues) {
        mIndicatorPaint.setColor(value.getColor());
        mIndicatorPaint.setStrokeWidth(value.getStroke());
        _Canvas.drawLine(0,value.getY() * Utils.getScaleY(mDrawMatrixValues) + Utils.getTranslationY(mDrawMatrixValues),mGraphWidth,value.getY() * Utils.getScaleY(mDrawMatrixValues) + Utils.getTranslationY(mDrawMatrixValues),mIndicatorPaint);
      }
    }
    if (mShowIndicator && mSeries.size() == 1) {
      mIndicatorPaint.setColor(mIndicatorLineColor);
      mIndicatorPaint.setStrokeWidth(mIndicatorWidth);
      _Canvas.translate(Utils.getTranslationX(mDrawMatrixValues),0);
      _Canvas.drawLine(mTouchedArea.getX(),0,mTouchedArea.getX(),mGraphHeight,mIndicatorPaint);
      if (mFocusedPoint != null) {
        if (mActivateIndicatorShadow) {
          mIndicatorPaint.setShadowLayer(mIndicatorShadowStrength,0,0,mIndicatorShadowColor);
        }
        mIndicatorPaint.setColor(mIndicatorTextColor);
        _Canvas.drawText(Utils.getFloatString(mFocusedPoint.getValue(),mShowDecimal) + (!mIndicatorTextUnit.isEmpty() ? ""String_Node_Str"" + mIndicatorTextUnit : ""String_Node_Str""),mValueLabelX,mValueLabelY,mIndicatorPaint);
        if (mShowLegendBeneathIndicator) {
          mLegendPaint.setColor(mIndicatorTextColor);
          _Canvas.drawText(mFocusedPoint.getLegendLabel(),mLegendLabelX,mLegendLabelY,mLegendPaint);
        }
        if (mActivateIndicatorShadow) {
          mIndicatorPaint.setShadowLayer(0,0,0,0x00000000);
        }
      }
    }
  }
}",0.9777215189873416
111182,"/** 
 * Should be called after new data is inserted. Will be automatically called, when the view dimensions changed. Calculates various offsets and positions for different overlay features based on the graph settings. After the calculation the Path is generated as a normal path or cubic path (Based on 'egUseCubic' attribute).
 */
@Override protected void onDataChanged(){
  if (!mSeries.isEmpty()) {
    int usableGraphHeight=(int)(mGraphHeight - Utils.dpToPx(1.f));
    int seriesCount=mSeries.size();
    float maxValue=0.f;
    float minValue=Float.MAX_VALUE;
    mNegativeValue=0.f;
    mNegativeOffset=0.f;
    mHasNegativeValues=false;
    for (    ValueLineSeries series : mSeries) {
      for (      ValueLinePoint point : series.getSeries()) {
        if (point.getValue() > maxValue)         maxValue=point.getValue();
        if (point.getValue() < mNegativeValue)         mNegativeValue=point.getValue();
        if (point.getValue() < minValue)         minValue=point.getValue();
      }
    }
    if (mShowStandardValues) {
      for (      StandardValue value : mStandardValues) {
        if (value.getValue() > maxValue)         maxValue=value.getValue();
        if (value.getValue() < mNegativeValue)         mNegativeValue=value.getValue();
        if (value.getValue() < minValue)         minValue=value.getValue();
      }
    }
    if (!mUseDynamicScaling) {
      minValue=0;
    }
 else {
      minValue*=mScalingFactor;
    }
    if (mNegativeValue < 0) {
      mHasNegativeValues=true;
      maxValue+=(mNegativeValue * -1);
      minValue=0;
    }
    float heightMultiplier=usableGraphHeight / (maxValue - minValue);
    if (mHasNegativeValues) {
      mNegativeOffset=(mNegativeValue * -1) * heightMultiplier;
    }
    if (mShowStandardValues) {
      for (      StandardValue value : mStandardValues) {
        value.setY((int)(usableGraphHeight - mNegativeOffset - ((value.getValue() - minValue) * heightMultiplier)));
      }
    }
    for (    ValueLineSeries series : mSeries) {
      int seriesPointCount=series.getSeries().size();
      if (seriesPointCount <= 1) {
        Log.w(LOG_TAG,""String_Node_Str"");
      }
 else {
        float widthOffset=(float)mGraphWidth / (float)seriesPointCount;
        widthOffset+=widthOffset / seriesPointCount;
        float currentOffset=0;
        series.setWidthOffset(widthOffset);
        float firstX=currentOffset;
        float firstY=usableGraphHeight - ((series.getSeries().get(0).getValue() - minValue) * heightMultiplier);
        Path path=new Path();
        path.moveTo(firstX,firstY);
        series.getSeries().get(0).setCoordinates(new Point2D(firstX,firstY));
        if (mUseCubic) {
          Point2D P1=new Point2D();
          Point2D P2=new Point2D();
          Point2D P3=new Point2D();
          for (int i=0; i < seriesPointCount - 1; i++) {
            int i3=(seriesPointCount - i) < 3 ? i + 1 : i + 2;
            float offset2=(seriesPointCount - i) < 3 ? mGraphWidth : currentOffset + widthOffset;
            float offset3=(seriesPointCount - i) < 3 ? mGraphWidth : currentOffset + (2 * widthOffset);
            P1.setX(currentOffset);
            P1.setY(usableGraphHeight - ((series.getSeries().get(i).getValue() - minValue) * heightMultiplier));
            P2.setX(offset2);
            P2.setY(usableGraphHeight - ((series.getSeries().get(i + 1).getValue() - minValue) * heightMultiplier));
            Utils.calculatePointDiff(P1,P2,P1,mSecondMultiplier);
            P3.setX(offset3);
            P3.setY(usableGraphHeight - ((series.getSeries().get(i3).getValue() - minValue) * heightMultiplier));
            Utils.calculatePointDiff(P2,P3,P3,mFirstMultiplier);
            currentOffset+=widthOffset;
            series.getSeries().get(i + 1).setCoordinates(new Point2D(P2.getX(),P2.getY()));
            path.cubicTo(P1.getX(),P1.getY(),P2.getX(),P2.getY(),P3.getX(),P3.getY());
          }
        }
 else {
          boolean first=true;
          int count=1;
          for (          ValueLinePoint point : series.getSeries()) {
            if (first) {
              first=false;
              continue;
            }
            currentOffset+=widthOffset;
            if (count == seriesPointCount - 1) {
              if (currentOffset < mGraphWidth) {
                currentOffset=mGraphWidth;
              }
            }
            point.setCoordinates(new Point2D(currentOffset,usableGraphHeight - ((point.getValue() - minValue) * heightMultiplier)));
            path.lineTo(point.getCoordinates().getX(),point.getCoordinates().getY());
            count++;
          }
        }
        if (mUseOverlapFill || seriesCount == 1) {
          path.lineTo(mGraphWidth,usableGraphHeight);
          path.lineTo(0,usableGraphHeight);
          path.lineTo(firstX,firstY);
        }
        series.setPath(path);
      }
    }
    if (!mUseCustomLegend) {
      if (calculateLegendBounds())       Utils.calculateLegendInformation(mSeries.get(0).getSeries(),0,mGraphWidth,mLegendPaint);
    }
    if (mShowIndicator && mSeries.size() == 1) {
      int size=mSeries.get(0).getSeries().size();
      int index;
      if (size > 1) {
        if (size == 3) {
          index=size / 2;
        }
 else {
          index=(size / 2) - 1;
        }
        mFocusedPoint=mSeries.get(0).getSeries().get(index);
        mTouchedArea=mFocusedPoint.getCoordinates();
        calculateValueTextHeight();
      }
    }
  }
  super.onDataChanged();
}","/** 
 * Should be called after new data is inserted. Will be automatically called, when the view dimensions changed. Calculates various offsets and positions for different overlay features based on the graph settings. After the calculation the Path is generated as a normal path or cubic path (Based on 'egUseCubic' attribute).
 */
@Override protected void onDataChanged(){
  if (!mSeries.isEmpty()) {
    int seriesCount=mSeries.size();
    float maxValue=0.f;
    float minValue=Float.MAX_VALUE;
    mNegativeValue=0.f;
    mNegativeOffset=0.f;
    mHasNegativeValues=false;
    for (    ValueLineSeries series : mSeries) {
      for (      ValueLinePoint point : series.getSeries()) {
        if (point.getValue() > maxValue)         maxValue=point.getValue();
        if (point.getValue() < mNegativeValue)         mNegativeValue=point.getValue();
        if (point.getValue() < minValue)         minValue=point.getValue();
      }
    }
    if (mShowStandardValues) {
      for (      StandardValue value : mStandardValues) {
        if (value.getValue() > maxValue)         maxValue=value.getValue();
        if (value.getValue() < mNegativeValue)         mNegativeValue=value.getValue();
        if (value.getValue() < minValue)         minValue=value.getValue();
      }
    }
    if (!mUseDynamicScaling) {
      minValue=0;
    }
 else {
      minValue*=mScalingFactor;
    }
    if (mNegativeValue < 0) {
      mHasNegativeValues=true;
      maxValue+=(mNegativeValue * -1);
      minValue=0;
    }
    float heightMultiplier=mUsableGraphHeight / (maxValue - minValue);
    if (mHasNegativeValues) {
      mNegativeOffset=(mNegativeValue * -1) * heightMultiplier;
    }
    if (mShowStandardValues) {
      for (      StandardValue value : mStandardValues) {
        value.setY((int)(mGraphHeight - mNegativeOffset - ((value.getValue() - minValue) * heightMultiplier)));
      }
    }
    for (    ValueLineSeries series : mSeries) {
      int seriesPointCount=series.getSeries().size();
      if (seriesPointCount <= 1) {
        Log.w(LOG_TAG,""String_Node_Str"");
      }
 else {
        float widthOffset=(float)mGraphWidth / (float)seriesPointCount;
        widthOffset+=widthOffset / seriesPointCount;
        float currentOffset=0;
        series.setWidthOffset(widthOffset);
        float firstX=currentOffset;
        float firstY=mGraphHeight - ((series.getSeries().get(0).getValue() - minValue) * heightMultiplier);
        Path path=new Path();
        path.moveTo(firstX,firstY);
        series.getSeries().get(0).setCoordinates(new Point2D(firstX,firstY));
        if (mUseCubic) {
          Point2D P1=new Point2D();
          Point2D P2=new Point2D();
          Point2D P3=new Point2D();
          for (int i=0; i < seriesPointCount - 1; i++) {
            int i3=(seriesPointCount - i) < 3 ? i + 1 : i + 2;
            float offset2=(seriesPointCount - i) < 3 ? mGraphWidth : currentOffset + widthOffset;
            float offset3=(seriesPointCount - i) < 3 ? mGraphWidth : currentOffset + (2 * widthOffset);
            P1.setX(currentOffset);
            P1.setY(mGraphHeight - ((series.getSeries().get(i).getValue() - minValue) * heightMultiplier));
            P2.setX(offset2);
            P2.setY(mGraphHeight - ((series.getSeries().get(i + 1).getValue() - minValue) * heightMultiplier));
            Utils.calculatePointDiff(P1,P2,P1,mSecondMultiplier);
            P3.setX(offset3);
            P3.setY(mGraphHeight - ((series.getSeries().get(i3).getValue() - minValue) * heightMultiplier));
            Utils.calculatePointDiff(P2,P3,P3,mFirstMultiplier);
            currentOffset+=widthOffset;
            series.getSeries().get(i + 1).setCoordinates(new Point2D(P2.getX(),P2.getY()));
            path.cubicTo(P1.getX(),P1.getY(),P2.getX(),P2.getY(),P3.getX(),P3.getY());
          }
        }
 else {
          boolean first=true;
          int count=1;
          for (          ValueLinePoint point : series.getSeries()) {
            if (first) {
              first=false;
              continue;
            }
            currentOffset+=widthOffset;
            if (count == seriesPointCount - 1) {
              if (currentOffset < mGraphWidth) {
                currentOffset=mGraphWidth;
              }
            }
            point.setCoordinates(new Point2D(currentOffset,mGraphHeight - ((point.getValue() - minValue) * heightMultiplier)));
            path.lineTo(point.getCoordinates().getX(),point.getCoordinates().getY());
            count++;
          }
        }
        if (mUseOverlapFill || seriesCount == 1) {
          path.lineTo(mGraphWidth,mGraphHeight);
          path.lineTo(0,mGraphHeight);
          path.lineTo(firstX,firstY);
        }
        series.setPath(path);
      }
    }
    if (!mUseCustomLegend) {
      if (calculateLegendBounds())       Utils.calculateLegendInformation(mSeries.get(0).getSeries(),0,mGraphWidth,mLegendPaint);
    }
    if (mShowIndicator && mSeries.size() == 1) {
      int size=mSeries.get(0).getSeries().size();
      int index;
      if (size > 1) {
        if (size == 3) {
          index=size / 2;
        }
 else {
          index=(size / 2) - 1;
        }
        mFocusedPoint=mSeries.get(0).getSeries().get(index);
        mTouchedArea=mFocusedPoint.getCoordinates();
        calculateValueTextHeight();
      }
    }
    resetZoom();
  }
  super.onDataChanged();
}",0.9868117679608964
111183,"/** 
 * This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.
 * @param w    Current width of this view.
 * @param h    Current height of this view.
 * @param oldw Old width of this view.
 * @param oldh Old height of this view.
 */
@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  onDataChanged();
  if (mUseCustomLegend) {
    onLegendDataChanged();
  }
}","/** 
 * This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.
 * @param w    Current width of this view.
 * @param h    Current height of this view.
 * @param oldw Old width of this view.
 * @param oldh Old height of this view.
 */
@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  mUsableGraphHeight=(int)(mGraphHeight - mGraphHeightPadding);
  onDataChanged();
  if (mUseCustomLegend) {
    onLegendDataChanged();
  }
}",0.941923774954628
111184,"public void resetZoom(){
  Log.d(LOG_TAG,""String_Node_Str"" + mDrawMatrix.toShortString());
  mDrawMatrixValues=new float[]{1f,0f,0f,0f,1f,0f,0f,0f,1f};
  mDrawMatrix.setValues(mDrawMatrixValues);
  recalculateXCoordinates(mGraphWidth * mDrawMatrixValues[0]);
  if (calculateLegendBounds())   Utils.calculateLegendInformation(mSeries.get(0).getSeries(),0,mGraphWidth * mDrawMatrixValues[0],mLegendPaint);
  calculateValueTextHeight();
  invalidateGlobal();
}","public void resetZoom(){
  mDrawMatrixValues=new float[]{1f,0f,0f,0f,1f,0f,0f,0f,1f};
  mDrawMatrix.setValues(mDrawMatrixValues);
  if (!mSeries.isEmpty()) {
    recalculateXCoordinates(mGraphWidth * mDrawMatrixValues[0]);
    if (calculateLegendBounds())     Utils.calculateLegendInformation(mSeries.get(0).getSeries(),0,mGraphWidth * mDrawMatrixValues[0],mLegendPaint);
    calculateValueTextHeight();
  }
  invalidateGlobal();
}",0.8806306306306306
111185,"@Override protected boolean onGraphOverlayTouchEvent(MotionEvent _Event){
  boolean result=mGestureDetector.onTouchEvent(_Event);
switch (_Event.getAction()) {
case MotionEvent.ACTION_DOWN:
    performClick();
  result=true;
if (mListener == null) {
  BaseBarChart.this.onTouchEvent(_Event);
}
 else {
  float newX=_Event.getX() + mCurrentViewport.left;
  float newY=_Event.getY();
  int counter=0;
  for (  RectF rectF : getBarBounds()) {
    if (Utils.intersectsPointWithRectF(rectF,newX,newY)) {
      mListener.onBarClicked(counter);
      break;
    }
    counter++;
  }
}
break;
}
return result;
}","@Override protected boolean onGraphOverlayTouchEvent(MotionEvent _Event){
  boolean result=mGestureDetector.onTouchEvent(_Event);
switch (_Event.getAction()) {
case MotionEvent.ACTION_DOWN:
    result=true;
  if (mListener == null) {
    BaseBarChart.this.onTouchEvent(_Event);
  }
 else {
    float newX=_Event.getX() + mCurrentViewport.left;
    float newY=_Event.getY();
    int counter=0;
    for (    RectF rectF : getBarBounds()) {
      if (Utils.intersectsPointWithRectF(rectF,newX,newY)) {
        mListener.onBarClicked(counter);
        break;
      }
      counter++;
    }
  }
break;
}
return result;
}",0.9605911330049262
111186,"@Override protected boolean onGraphOverlayTouchEvent(MotionEvent _Event){
  performClick();
  float newX=_Event.getX();
  float newY=_Event.getY();
switch (_Event.getAction()) {
case MotionEvent.ACTION_DOWN:
    return true;
case MotionEvent.ACTION_MOVE:
  break;
case MotionEvent.ACTION_UP:
break;
}
if (mShowIndicator && mSeries.size() == 1) {
int size=mSeries.get(0).getSeries().size();
for (int i=0; i < size; i++) {
if (mSeries.get(0).getSeries().get(i).getCoordinates().getX() == newX) {
  mFocusedPoint=mSeries.get(0).getSeries().get(i);
  break;
}
 else {
  if (i == size - 1) {
    mFocusedPoint=mSeries.get(0).getSeries().get(i);
    break;
  }
 else {
    float x=mSeries.get(0).getSeries().get(i).getCoordinates().getX();
    float nextX=mSeries.get(0).getSeries().get(i + 1).getCoordinates().getX();
    if (newX > x && newX < nextX) {
      if (newX - x > nextX - newX) {
        mFocusedPoint=mSeries.get(0).getSeries().get(i + 1);
        break;
      }
 else {
        mFocusedPoint=mSeries.get(0).getSeries().get(i);
        break;
      }
    }
 else     if (newX > x && newX < nextX) {
      mFocusedPoint=mSeries.get(0).getSeries().get(i);
      break;
    }
  }
}
}
if (mFocusedPoint != null) {
mTouchedArea=mFocusedPoint.getCoordinates();
}
 else {
mTouchedArea.setX(newX);
mTouchedArea.setY(newY);
}
if (mLastPoint != mFocusedPoint) {
mLastPoint=mFocusedPoint;
calculateValueTextHeight();
if (mListener != null) {
  mListener.onPointFocused(mSeries.get(0).getSeries().indexOf(mFocusedPoint));
}
}
invalidateGlobal();
}
return true;
}","@Override protected boolean onGraphOverlayTouchEvent(MotionEvent _Event){
  super.onGraphOverlayTouchEvent(_Event);
  float newX=_Event.getX();
  float newY=_Event.getY();
switch (_Event.getAction()) {
case MotionEvent.ACTION_DOWN:
    return true;
}
if (mShowIndicator && mSeries.size() == 1) {
  int size=mSeries.get(0).getSeries().size();
  for (int i=0; i < size; i++) {
    if (mSeries.get(0).getSeries().get(i).getCoordinates().getX() == newX) {
      mFocusedPoint=mSeries.get(0).getSeries().get(i);
      break;
    }
 else {
      if (i == size - 1) {
        mFocusedPoint=mSeries.get(0).getSeries().get(i);
        break;
      }
 else {
        float x=mSeries.get(0).getSeries().get(i).getCoordinates().getX();
        float nextX=mSeries.get(0).getSeries().get(i + 1).getCoordinates().getX();
        if (newX > x && newX < nextX) {
          if (newX - x > nextX - newX) {
            mFocusedPoint=mSeries.get(0).getSeries().get(i + 1);
            break;
          }
 else {
            mFocusedPoint=mSeries.get(0).getSeries().get(i);
            break;
          }
        }
 else         if (newX > x && newX < nextX) {
          mFocusedPoint=mSeries.get(0).getSeries().get(i);
          break;
        }
      }
    }
  }
  if (mFocusedPoint != null) {
    mTouchedArea=mFocusedPoint.getCoordinates();
  }
 else {
    mTouchedArea.setX(newX);
    mTouchedArea.setY(newY);
  }
  if (mLastPoint != mFocusedPoint) {
    mLastPoint=mFocusedPoint;
    calculateValueTextHeight();
    if (mListener != null) {
      mListener.onPointFocused(mSeries.get(0).getSeries().indexOf(mFocusedPoint));
    }
  }
  invalidateGlobal();
}
return true;
}",0.9166148102053516
111187,"@Override public boolean onDown(MotionEvent e){
  mGraph.accelerate();
  if (isAnimationRunning()) {
    stopScrolling();
  }
  return true;
}","@Override public boolean onDown(MotionEvent e){
  if (isAnimationRunning()) {
    stopScrolling();
  }
  return true;
}",0.9118773946360154
111188,"@Override protected void onGraphDraw(Canvas _Canvas){
  super.onGraphDraw(_Canvas);
  if (!mPieData.isEmpty()) {
    for (    PieModel model : mPieData) {
      mGraphPaint.setColor(model.getColor());
      float startAngle;
      if (mOpenClockwise) {
        startAngle=model.getStartAngle() * mRevealValue;
      }
 else {
        startAngle=360 - model.getEndAngle() * mRevealValue;
      }
      float sweepAngle=(model.getEndAngle() - model.getStartAngle()) * mRevealValue;
      _Canvas.drawArc(mGraphBounds,startAngle,sweepAngle,true,mGraphPaint);
      if (mUseInnerPadding) {
        mGraphPaint.setColor(model.getHighlightedColor());
        _Canvas.drawArc(mInnerBounds,startAngle,sweepAngle,true,mGraphPaint);
      }
    }
    if (mUseInnerPadding) {
      mGraphPaint.setColor(mInnerPaddingColor);
      if (mOpenClockwise) {
        _Canvas.drawArc(mInnerOutlineBounds,0,(360 * mRevealValue),true,mGraphPaint);
      }
 else {
        _Canvas.drawArc(mInnerOutlineBounds,0,(360 * -mRevealValue),true,mGraphPaint);
      }
    }
  }
 else {
  }
}","@Override protected void onGraphDraw(Canvas _Canvas){
  super.onGraphDraw(_Canvas);
  if (!mPieData.isEmpty()) {
    float innerStartAngle=0;
    float innerSweepAngle=0;
    int amountOfPieSlices=mPieData.size();
    for (int pieIndex=0; pieIndex < amountOfPieSlices; pieIndex++) {
      PieModel model=mPieData.get(pieIndex);
      mGraphPaint.setColor(model.getColor());
      float startAngle;
      float sweepAngle=(model.getEndAngle() - model.getStartAngle()) * mRevealValue;
      if (mOpenClockwise) {
        startAngle=model.getStartAngle() * mRevealValue;
      }
 else {
        startAngle=360 - model.getEndAngle() * mRevealValue;
      }
      if (pieIndex == 0) {
        innerStartAngle=startAngle + (mOpenClockwise ? 0 : (float)Math.ceil(sweepAngle));
      }
      if (mOpenClockwise)       innerSweepAngle+=sweepAngle;
 else       innerSweepAngle-=(float)Math.ceil(sweepAngle);
      _Canvas.drawArc(mGraphBounds,startAngle,sweepAngle,true,mGraphPaint);
      if (mUseInnerPadding) {
        mGraphPaint.setColor(model.getHighlightedColor());
        _Canvas.drawArc(mInnerBounds,startAngle,sweepAngle,true,mGraphPaint);
      }
    }
    if (mUseInnerPadding) {
      mGraphPaint.setColor(mInnerPaddingColor);
      _Canvas.drawArc(mInnerOutlineBounds,innerStartAngle,innerSweepAngle,true,mGraphPaint);
    }
  }
 else {
  }
}",0.670265780730897
111189,"/** 
 * Constructor that is called when inflating a view from XML. This is called when a view is being constructed from an XML file, supplying attributes that were specified in the XML file. This version uses a default style of 0, so the only attribute values applied are those in the Context's Theme and the given AttributeSet. <p/> <p/> The method onFinishInflate() will be called after all children have been added.
 * @param context The Context the view is running in, through which it canaccess the current theme, resources, etc.
 * @param attrs   The attributes of the XML tag that is inflating the view.
 * @see #View(android.content.Context,android.util.AttributeSet,int)
 */
public BaseChart(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.BaseChart,0,0);
  try {
    mLegendHeight=a.getDimension(R.styleable.BaseChart_egLegendHeight,Utils.dpToPx(DEF_LEGEND_HEIGHT));
    mLegendTextSize=a.getDimension(R.styleable.BaseChart_egLegendTextSize,Utils.dpToPx(DEF_LEGEND_TEXT_SIZE));
    mAnimationTime=a.getInt(R.styleable.BaseChart_egAnimationTime,DEF_ANIMATION_TIME);
    mShowDecimal=a.getBoolean(R.styleable.BaseChart_egShowDecimal,DEF_SHOW_DECIMAL);
  }
  finally {
    a.recycle();
  }
}","/** 
 * Constructor that is called when inflating a view from XML. This is called when a view is being constructed from an XML file, supplying attributes that were specified in the XML file. This version uses a default style of 0, so the only attribute values applied are those in the Context's Theme and the given AttributeSet. <p/> <p/> The method onFinishInflate() will be called after all children have been added.
 * @param context The Context the view is running in, through which it canaccess the current theme, resources, etc.
 * @param attrs   The attributes of the XML tag that is inflating the view.
 * @see #View(android.content.Context,android.util.AttributeSet,int)
 */
public BaseChart(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.BaseChart,0,0);
  try {
    mLegendHeight=a.getDimension(R.styleable.BaseChart_egLegendHeight,Utils.dpToPx(DEF_LEGEND_HEIGHT));
    mLegendTextSize=a.getDimension(R.styleable.BaseChart_egLegendTextSize,Utils.dpToPx(DEF_LEGEND_TEXT_SIZE));
    mAnimationTime=a.getInt(R.styleable.BaseChart_egAnimationTime,DEF_ANIMATION_TIME);
    mShowDecimal=a.getBoolean(R.styleable.BaseChart_egShowDecimal,DEF_SHOW_DECIMAL);
    mLegendColor=a.getColor(R.styleable.BaseChart_egLegendColor,DEF_LEGEND_COLOR);
  }
  finally {
    a.recycle();
  }
}",0.9687382297551788
111190,"/** 
 * This is the main entry point after the graph has been inflated. Used to initialize the graph and its corresponding members.
 */
@Override protected void initializeGraph(){
  mSeries=new ArrayList<ValueLineSeries>();
  mLegendList=new ArrayList<LegendModel>();
  mLinePaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mLinePaint.setStrokeWidth(mLineStroke);
  mLegendPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mLegendPaint.setColor(DEF_LEGEND_COLOR);
  mLegendPaint.setTextSize(mLegendTextSize);
  mLegendPaint.setStrokeWidth(2);
  mLegendPaint.setStyle(Paint.Style.FILL);
  mMaxFontHeight=Utils.calculateMaxTextHeight(mLegendPaint);
  mIndicatorPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mIndicatorPaint.setColor(mIndicatorLineColor);
  mIndicatorPaint.setTextSize(mIndicatorTextSize);
  mIndicatorPaint.setStrokeWidth(mIndicatorWidth);
  mIndicatorPaint.setStyle(Paint.Style.FILL);
  mGraph=new Graph(getContext());
  addView(mGraph);
  mGraphOverlay=new GraphOverlay(getContext());
  addView(mGraphOverlay);
  mLegend=new Legend(getContext());
  addView(mLegend);
  mRevealAnimator=ValueAnimator.ofFloat(0,1);
  mRevealAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      mRevealValue=animation.getAnimatedFraction();
      mScale.reset();
      mScale.setScale(1,1.f * mRevealValue,0,mUsableGraphHeight + mTopPadding - mNegativeOffset);
      mGraph.invalidate();
    }
  }
);
  mRevealAnimator.addListener(new Animator.AnimatorListener(){
    @Override public void onAnimationStart(    Animator animation){
    }
    @Override public void onAnimationEnd(    Animator animation){
      mStartedAnimation=false;
    }
    @Override public void onAnimationCancel(    Animator animation){
    }
    @Override public void onAnimationRepeat(    Animator animation){
    }
  }
);
  if (this.isInEditMode()) {
    ValueLineSeries series1=new ValueLineSeries();
    series1.setColor(0xFF63CBB0);
    series1.addPoint(new ValueLinePoint(1.4f));
    series1.addPoint(new ValueLinePoint(4.4f));
    series1.addPoint(new ValueLinePoint(2.4f));
    series1.addPoint(new ValueLinePoint(3.2f));
    series1.addPoint(new ValueLinePoint(2.6f));
    series1.addPoint(new ValueLinePoint(5.0f));
    series1.addPoint(new ValueLinePoint(3.5f));
    series1.addPoint(new ValueLinePoint(2.4f));
    series1.addPoint(new ValueLinePoint(0.4f));
    series1.addPoint(new ValueLinePoint(3.4f));
    series1.addPoint(new ValueLinePoint(2.5f));
    series1.addPoint(new ValueLinePoint(1.0f));
    series1.addPoint(new ValueLinePoint(4.2f));
    series1.addPoint(new ValueLinePoint(2.4f));
    series1.addPoint(new ValueLinePoint(3.6f));
    series1.addPoint(new ValueLinePoint(1.0f));
    series1.addPoint(new ValueLinePoint(2.5f));
    series1.addPoint(new ValueLinePoint(1.4f));
    addSeries(series1);
  }
}","/** 
 * This is the main entry point after the graph has been inflated. Used to initialize the graph and its corresponding members.
 */
@Override protected void initializeGraph(){
  mSeries=new ArrayList<ValueLineSeries>();
  mLegendList=new ArrayList<LegendModel>();
  mLinePaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mLinePaint.setStrokeWidth(mLineStroke);
  mLegendPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mLegendPaint.setColor(mLegendColor);
  mLegendPaint.setTextSize(mLegendTextSize);
  mLegendPaint.setStrokeWidth(2);
  mLegendPaint.setStyle(Paint.Style.FILL);
  mMaxFontHeight=Utils.calculateMaxTextHeight(mLegendPaint);
  mIndicatorPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mIndicatorPaint.setColor(mIndicatorLineColor);
  mIndicatorPaint.setTextSize(mIndicatorTextSize);
  mIndicatorPaint.setStrokeWidth(mIndicatorWidth);
  mIndicatorPaint.setStyle(Paint.Style.FILL);
  mGraph=new Graph(getContext());
  addView(mGraph);
  mGraphOverlay=new GraphOverlay(getContext());
  addView(mGraphOverlay);
  mLegend=new Legend(getContext());
  addView(mLegend);
  mRevealAnimator=ValueAnimator.ofFloat(0,1);
  mRevealAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      mRevealValue=animation.getAnimatedFraction();
      mScale.reset();
      mScale.setScale(1,1.f * mRevealValue,0,mUsableGraphHeight + mTopPadding - mNegativeOffset);
      mGraph.invalidate();
    }
  }
);
  mRevealAnimator.addListener(new Animator.AnimatorListener(){
    @Override public void onAnimationStart(    Animator animation){
    }
    @Override public void onAnimationEnd(    Animator animation){
      mStartedAnimation=false;
    }
    @Override public void onAnimationCancel(    Animator animation){
    }
    @Override public void onAnimationRepeat(    Animator animation){
    }
  }
);
  if (this.isInEditMode()) {
    ValueLineSeries series1=new ValueLineSeries();
    series1.setColor(0xFF63CBB0);
    series1.addPoint(new ValueLinePoint(1.4f));
    series1.addPoint(new ValueLinePoint(4.4f));
    series1.addPoint(new ValueLinePoint(2.4f));
    series1.addPoint(new ValueLinePoint(3.2f));
    series1.addPoint(new ValueLinePoint(2.6f));
    series1.addPoint(new ValueLinePoint(5.0f));
    series1.addPoint(new ValueLinePoint(3.5f));
    series1.addPoint(new ValueLinePoint(2.4f));
    series1.addPoint(new ValueLinePoint(0.4f));
    series1.addPoint(new ValueLinePoint(3.4f));
    series1.addPoint(new ValueLinePoint(2.5f));
    series1.addPoint(new ValueLinePoint(1.0f));
    series1.addPoint(new ValueLinePoint(4.2f));
    series1.addPoint(new ValueLinePoint(2.4f));
    series1.addPoint(new ValueLinePoint(3.6f));
    series1.addPoint(new ValueLinePoint(1.0f));
    series1.addPoint(new ValueLinePoint(2.5f));
    series1.addPoint(new ValueLinePoint(1.4f));
    addSeries(series1);
  }
}",0.9954829742876998
111191,"/** 
 * Constructor that is called when inflating a view from XML. This is called when a view is being constructed from an XML file, supplying attributes that were specified in the XML file. This version uses a default style of 0, so the only attribute values applied are those in the Context's Theme and the given AttributeSet. <p/> <p/> The method onFinishInflate() will be called after all children have been added.
 * @param context The Context the view is running in, through which it canaccess the current theme, resources, etc.
 * @param attrs   The attributes of the XML tag that is inflating the view.
 * @see #View(android.content.Context,android.util.AttributeSet,int)
 */
public ValueLineChart(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.ValueLineChart,0,0);
  try {
    mUseCubic=a.getBoolean(R.styleable.ValueLineChart_egUseCubic,DEF_USE_CUBIC);
    mUseOverlapFill=a.getBoolean(R.styleable.ValueLineChart_egUseOverlapFill,DEF_USE_OVERLAP_FILL);
    mLineStroke=a.getDimension(R.styleable.ValueLineChart_egLineStroke,Utils.dpToPx(DEF_LINE_STROKE));
    mFirstMultiplier=a.getFloat(R.styleable.ValueLineChart_egCurveSmoothness,DEF_FIRST_MULTIPLIER);
    mSecondMultiplier=1.0f - mFirstMultiplier;
    mShowIndicator=a.getBoolean(R.styleable.ValueLineChart_egShowValueIndicator,DEF_SHOW_INDICATOR);
    mIndicatorWidth=a.getDimension(R.styleable.ValueLineChart_egIndicatorWidth,Utils.dpToPx(DEF_INDICATOR_WIDTH));
    mIndicatorLineColor=a.getColor(R.styleable.ValueLineChart_egIndicatorLineColor,DEF_INDICATOR_COLOR);
    mIndicatorTextColor=a.getColor(R.styleable.ValueLineChart_egIndicatorTextColor,DEF_INDICATOR_COLOR);
    mIndicatorTextSize=a.getDimension(R.styleable.ValueLineChart_egIndicatorWidth,Utils.dpToPx(DEF_INDICATOR_TEXT_SIZE));
    mIndicatorLeftPadding=a.getDimension(R.styleable.ValueLineChart_egIndicatorLeftPadding,Utils.dpToPx(DEF_INDICATOR_LEFT_PADDING));
    mIndicatorTopPadding=a.getDimension(R.styleable.ValueLineChart_egIndicatorTopPadding,Utils.dpToPx(DEF_INDICATOR_TOP_PADDING));
    mShowStandardValue=a.getBoolean(R.styleable.ValueLineChart_egShowStandardValue,DEF_SHOW_STANDARD_VALUE);
    mStandardValueIndicatorStroke=a.getDimension(R.styleable.ValueLineChart_egStandardValueIndicatorStroke,Utils.dpToPx(DEF_STANDARD_VALUE_INDICATOR_STROKE));
    mStandardValueColor=a.getColor(R.styleable.ValueLineChart_egStandardValueColor,DEF_STANDARD_VALUE_COLOR);
    mXAxisStroke=a.getDimension(R.styleable.ValueLineChart_egXAxisStroke,Utils.dpToPx(DEF_X_AXIS_STROKE));
    mActivateIndicatorShadow=a.getBoolean(R.styleable.ValueLineChart_egActivateIndicatorShadow,DEF_ACTIVATE_INDICATOR_SHADOW);
    mIndicatorShadowStrength=a.getDimension(R.styleable.ValueLineChart_egActivateIndicatorShadow,Utils.dpToPx(DEF_INDICATOR_SHADOW_STRENGTH));
    mIndicatorShadowColor=a.getColor(R.styleable.ValueLineChart_egIndicatorShadowColor,DEF_INDICATOR_SHADOW_COLOR);
    mIndicatorTextUnit=a.getString(R.styleable.ValueLineChart_egIndicatorTextUnit);
  }
  finally {
    a.recycle();
  }
  if (mIndicatorTextUnit == null) {
    mIndicatorTextUnit=""String_Node_Str"";
  }
  initializeGraph();
}","/** 
 * Constructor that is called when inflating a view from XML. This is called when a view is being constructed from an XML file, supplying attributes that were specified in the XML file. This version uses a default style of 0, so the only attribute values applied are those in the Context's Theme and the given AttributeSet. <p/> <p/> The method onFinishInflate() will be called after all children have been added.
 * @param context The Context the view is running in, through which it canaccess the current theme, resources, etc.
 * @param attrs   The attributes of the XML tag that is inflating the view.
 * @see #View(android.content.Context,android.util.AttributeSet,int)
 */
public ValueLineChart(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.ValueLineChart,0,0);
  try {
    mUseCubic=a.getBoolean(R.styleable.ValueLineChart_egUseCubic,DEF_USE_CUBIC);
    mUseOverlapFill=a.getBoolean(R.styleable.ValueLineChart_egUseOverlapFill,DEF_USE_OVERLAP_FILL);
    mLineStroke=a.getDimension(R.styleable.ValueLineChart_egLineStroke,Utils.dpToPx(DEF_LINE_STROKE));
    mFirstMultiplier=a.getFloat(R.styleable.ValueLineChart_egCurveSmoothness,DEF_FIRST_MULTIPLIER);
    mSecondMultiplier=1.0f - mFirstMultiplier;
    mShowIndicator=a.getBoolean(R.styleable.ValueLineChart_egShowValueIndicator,DEF_SHOW_INDICATOR);
    mIndicatorWidth=a.getDimension(R.styleable.ValueLineChart_egIndicatorWidth,Utils.dpToPx(DEF_INDICATOR_WIDTH));
    mIndicatorLineColor=a.getColor(R.styleable.ValueLineChart_egIndicatorLineColor,DEF_INDICATOR_COLOR);
    mIndicatorTextColor=a.getColor(R.styleable.ValueLineChart_egIndicatorTextColor,DEF_INDICATOR_COLOR);
    mIndicatorTextSize=a.getDimension(R.styleable.ValueLineChart_egIndicatorWidth,Utils.dpToPx(DEF_INDICATOR_TEXT_SIZE));
    mIndicatorLeftPadding=a.getDimension(R.styleable.ValueLineChart_egIndicatorLeftPadding,Utils.dpToPx(DEF_INDICATOR_LEFT_PADDING));
    mIndicatorTopPadding=a.getDimension(R.styleable.ValueLineChart_egIndicatorTopPadding,Utils.dpToPx(DEF_INDICATOR_TOP_PADDING));
    mShowStandardValue=a.getBoolean(R.styleable.ValueLineChart_egShowStandardValue,DEF_SHOW_STANDARD_VALUE);
    mStandardValueIndicatorStroke=a.getDimension(R.styleable.ValueLineChart_egStandardValueIndicatorStroke,Utils.dpToPx(DEF_STANDARD_VALUE_INDICATOR_STROKE));
    mStandardValueColor=a.getColor(R.styleable.ValueLineChart_egStandardValueColor,DEF_STANDARD_VALUE_COLOR);
    mXAxisStroke=a.getDimension(R.styleable.ValueLineChart_egXAxisStroke,Utils.dpToPx(DEF_X_AXIS_STROKE));
    mActivateIndicatorShadow=a.getBoolean(R.styleable.ValueLineChart_egActivateIndicatorShadow,DEF_ACTIVATE_INDICATOR_SHADOW);
    mIndicatorShadowStrength=a.getDimension(R.styleable.ValueLineChart_egIndicatorShadowStrength,Utils.dpToPx(DEF_INDICATOR_SHADOW_STRENGTH));
    mIndicatorShadowColor=a.getColor(R.styleable.ValueLineChart_egIndicatorShadowColor,DEF_INDICATOR_SHADOW_COLOR);
    mIndicatorTextUnit=a.getString(R.styleable.ValueLineChart_egIndicatorTextUnit);
    mShowLegendBeneathIndicator=a.getBoolean(R.styleable.ValueLineChart_egShowLegendBeneathIndicator,DEF_SHOW_LEGEND_BENEATH_INDICATOR);
  }
  finally {
    a.recycle();
  }
  if (mIndicatorTextUnit == null) {
    mIndicatorTextUnit=""String_Node_Str"";
  }
  initializeGraph();
}",0.9766732733648422
111192,"/** 
 * Calculates the text height for the indicator value and sets its x-coordinate.
 */
private void calculateValueTextHeight(){
  Rect rect=new Rect();
  String str=Utils.getFloatString(mFocusedPoint.getValue(),mShowDecimal) + (!mIndicatorTextUnit.isEmpty() ? ""String_Node_Str"" + mIndicatorTextUnit : ""String_Node_Str"");
  mIndicatorPaint.getTextBounds(str,0,str.length(),rect);
  mValueTextHeight=rect.height();
  if (mFocusedPoint.getCoordinates().getX() + rect.width() + mIndicatorLeftPadding > mGraphWidth + mLeftPadding) {
    mGraphOverlay.mValueLabelX=(int)(mFocusedPoint.getCoordinates().getX() - (rect.width() + mIndicatorLeftPadding));
  }
 else {
    mGraphOverlay.mValueLabelX=(int)(mFocusedPoint.getCoordinates().getX() + mIndicatorLeftPadding);
  }
}","/** 
 * Calculates the text height for the indicator value and sets its x-coordinate.
 */
private void calculateValueTextHeight(){
  Rect valueRect=new Rect();
  Rect legendRect=new Rect();
  String str=Utils.getFloatString(mFocusedPoint.getValue(),mShowDecimal) + (!mIndicatorTextUnit.isEmpty() ? ""String_Node_Str"" + mIndicatorTextUnit : ""String_Node_Str"");
  mIndicatorPaint.getTextBounds(str,0,str.length(),valueRect);
  mLegendPaint.getTextBounds(mFocusedPoint.getLegendLabel(),0,mFocusedPoint.getLegendLabel().length(),legendRect);
  mValueTextHeight=valueRect.height();
  mGraphOverlay.mValueLabelY=(int)(mValueTextHeight + mIndicatorTopPadding);
  mGraphOverlay.mLegendLabelY=(int)(mValueTextHeight + mIndicatorTopPadding + legendRect.height()+ Utils.dpToPx(7.f));
  int chosenWidth=valueRect.width() > legendRect.width() ? valueRect.width() : legendRect.width();
  if (mFocusedPoint.getCoordinates().getX() + chosenWidth + mIndicatorLeftPadding > mGraphWidth + mLeftPadding) {
    mGraphOverlay.mValueLabelX=(int)(mFocusedPoint.getCoordinates().getX() - (valueRect.width() + mIndicatorLeftPadding));
    mGraphOverlay.mLegendLabelX=(int)(mFocusedPoint.getCoordinates().getX() - (legendRect.width() + mIndicatorLeftPadding));
  }
 else {
    mGraphOverlay.mValueLabelX=mGraphOverlay.mLegendLabelX=(int)(mFocusedPoint.getCoordinates().getX() + mIndicatorLeftPadding);
  }
}",0.6831314072693383
111193,"/** 
 * Implement this to do your drawing.
 * @param canvas the canvas on which the background will be drawn
 */
@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  mLegendPaint.setStrokeWidth(DEF_LEGEND_STROKE);
  if (!mSeries.isEmpty()) {
    if (mUseCustomLegend) {
      for (      LegendModel model : mLegendList) {
        Rect textBounds=model.getTextBounds();
        RectF bounds=model.getLegendBounds();
        canvas.drawText(model.getLegendLabel(),bounds.centerX() - (textBounds.width() / 2),bounds.centerY(),mLegendPaint);
        canvas.drawLine(bounds.centerX(),bounds.centerY() - textBounds.height() - mLegendTopPadding,bounds.centerX(),mLegendTopPadding,mLegendPaint);
      }
    }
 else {
      List<? extends BaseModel> list=mSeries.get(0).getSeries();
      for (      BaseModel model : list) {
        if (model.canShowLabel()) {
          RectF bounds=model.getLegendBounds();
          canvas.drawText(model.getLegendLabel(),model.getLegendLabelPosition(),bounds.bottom - mMaxFontHeight,mLegendPaint);
          canvas.drawLine(bounds.centerX(),bounds.bottom - mMaxFontHeight * 2 - mLegendTopPadding,bounds.centerX(),mLegendTopPadding,mLegendPaint);
        }
      }
    }
  }
}","/** 
 * Implement this to do your drawing.
 * @param canvas the canvas on which the background will be drawn
 */
@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  mLegendPaint.setColor(mLegendColor);
  mLegendPaint.setStrokeWidth(DEF_LEGEND_STROKE);
  if (!mSeries.isEmpty()) {
    if (mUseCustomLegend) {
      for (      LegendModel model : mLegendList) {
        Rect textBounds=model.getTextBounds();
        RectF bounds=model.getLegendBounds();
        canvas.drawText(model.getLegendLabel(),bounds.centerX() - (textBounds.width() / 2),bounds.centerY(),mLegendPaint);
        canvas.drawLine(bounds.centerX(),bounds.centerY() - textBounds.height() - mLegendTopPadding,bounds.centerX(),mLegendTopPadding,mLegendPaint);
      }
    }
 else {
      List<? extends BaseModel> list=mSeries.get(0).getSeries();
      for (      BaseModel model : list) {
        if (model.canShowLabel()) {
          RectF bounds=model.getLegendBounds();
          canvas.drawText(model.getLegendLabel(),model.getLegendLabelPosition(),bounds.bottom - mMaxFontHeight,mLegendPaint);
          canvas.drawLine(bounds.centerX(),bounds.bottom - mMaxFontHeight * 2 - mLegendTopPadding,bounds.centerX(),mLegendTopPadding,mLegendPaint);
        }
      }
    }
  }
}",0.9843436370935368
111194,"/** 
 * Calculates the legend positions and which legend title should be displayed or not. Important: the LegendBounds in the _Models should be set and correctly calculated before this function is called!
 * @param _Models The graph data which should have the BaseModel class as parent class.
 * @param _StartX Left starting point on the screen. Should be the absolute pixel value!
 * @param _Paint  The correctly set Paint which will be used for the text painting in the later process
 */
public static void calculateLegendInformation(List<? extends BaseModel> _Models,float _StartX,float _EndX,Paint _Paint){
  float lastX=_StartX;
  float textMargin=Utils.dpToPx(10.f);
  for (  BaseModel model : _Models) {
    if (!model.isIgnore()) {
      Rect textBounds=new Rect();
      RectF legendBounds=model.getLegendBounds();
      _Paint.getTextBounds(model.getLegendLabel(),0,model.getLegendLabel().length(),textBounds);
      model.setTextBounds(textBounds);
      float centerX=legendBounds.centerX();
      float centeredTextPos=centerX - (textBounds.width() / 2);
      float textStartPos=centeredTextPos - textMargin;
      if (lastX == _StartX) {
        model.setShowLabel(true);
        if (textStartPos + textMargin < _StartX) {
          model.setLegendLabelPosition((int)_StartX);
          lastX=textBounds.width();
        }
 else {
          model.setLegendLabelPosition((int)centeredTextPos);
          lastX=centerX + (textBounds.width() / 2);
        }
      }
 else       if (centeredTextPos + textBounds.width() > _EndX) {
        model.setShowLabel(false);
      }
 else {
        if (textStartPos < lastX) {
          if (lastX + textMargin < legendBounds.left) {
            model.setLegendLabelPosition((int)(lastX + textMargin));
            model.setShowLabel(true);
            lastX=lastX + textMargin + textBounds.width();
          }
 else {
            model.setShowLabel(false);
          }
        }
 else {
          model.setShowLabel(true);
          model.setLegendLabelPosition((int)centeredTextPos);
          lastX=centerX + (textBounds.width() / 2);
        }
      }
    }
  }
}","/** 
 * Calculates the legend positions and which legend title should be displayed or not. Important: the LegendBounds in the _Models should be set and correctly calculated before this function is called!
 * @param _Models The graph data which should have the BaseModel class as parent class.
 * @param _StartX Left starting point on the screen. Should be the absolute pixel value!
 * @param _Paint  The correctly set Paint which will be used for the text painting in the later process
 */
public static void calculateLegendInformation(List<? extends BaseModel> _Models,float _StartX,float _EndX,Paint _Paint){
  float textMargin=Utils.dpToPx(10.f);
  float lastX=_StartX;
  for (  BaseModel model : _Models) {
    if (!model.isIgnore()) {
      Rect textBounds=new Rect();
      RectF legendBounds=model.getLegendBounds();
      _Paint.getTextBounds(model.getLegendLabel(),0,model.getLegendLabel().length(),textBounds);
      model.setTextBounds(textBounds);
      float centerX=legendBounds.centerX();
      float centeredTextPos=centerX - (textBounds.width() / 2);
      float textStartPos=centeredTextPos - textMargin;
      if (lastX == _StartX) {
        model.setShowLabel(true);
        if (textStartPos + textMargin < _StartX) {
          model.setLegendLabelPosition((int)_StartX);
          lastX=textBounds.width();
        }
 else {
          model.setLegendLabelPosition((int)centeredTextPos);
          lastX=centerX + (textBounds.width() / 2);
        }
      }
 else       if (centeredTextPos + textBounds.width() > _EndX) {
        model.setShowLabel(false);
      }
 else {
        if (textStartPos < lastX) {
          if (lastX + textMargin < legendBounds.left) {
            model.setLegendLabelPosition((int)(lastX + textMargin));
            model.setShowLabel(true);
            lastX=lastX + textMargin + textBounds.width();
          }
 else {
            model.setShowLabel(false);
          }
        }
 else {
          model.setShowLabel(true);
          model.setLegendLabelPosition((int)centeredTextPos);
          lastX=centerX + (textBounds.width() / 2);
        }
      }
    }
  }
}",0.98159509202454
111195,"protected void calculateBarPositions(int _DataSize){
  float barWidth=mBarWidth;
  float margin=mBarMargin;
  if (!mFixedBarWidth) {
    barWidth=(mGraphWidth / _DataSize) - margin;
  }
  if (mFixedBarWidth) {
    float cumulatedBarWidths=barWidth * _DataSize;
    float remainingWidth=mGraphWidth - cumulatedBarWidths;
    margin=remainingWidth / _DataSize;
  }
  calculateBounds(barWidth,margin);
}","protected void calculateBarPositions(int _DataSize){
  float barWidth=mBarWidth;
  float margin=mBarMargin;
  if (!mFixedBarWidth) {
    barWidth=(mGraphWidth / _DataSize) - margin;
  }
 else {
    float cumulatedBarWidths=barWidth * _DataSize;
    float remainingWidth=mGraphWidth - cumulatedBarWidths;
    margin=remainingWidth / _DataSize;
  }
  calculateBounds(barWidth,margin);
}",0.9693877551020408
111196,"@Override protected void initializeGraph(){
  mSeries=new ArrayList<ValueLineSeries>();
  mLegendList=new ArrayList<LegendModel>();
  mLinePaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mLinePaint.setStrokeWidth(mLineStroke);
  mLegendPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mLegendPaint.setColor(DEF_LEGEND_COLOR);
  mLegendPaint.setTextSize(mLegendTextSize);
  mLegendPaint.setStrokeWidth(2);
  mLegendPaint.setStyle(Paint.Style.FILL);
  calculateMaxTextHeight(mLegendPaint);
  mIndicatorPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mIndicatorPaint.setColor(mIndicatorColor);
  mIndicatorPaint.setTextSize(mIndicatorTextSize);
  mIndicatorPaint.setStrokeWidth(mIndicatorWidth);
  mIndicatorPaint.setStyle(Paint.Style.FILL);
  mGraph=new Graph(getContext());
  addView(mGraph);
  mLegend=new Legend(getContext());
  addView(mLegend);
  mRevealAnimator=ValueAnimator.ofFloat(0,1);
  mRevealAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      mRevealValue=(animation.getAnimatedFraction());
      mScale.reset();
      mScale.setScale(1,1.f * mRevealValue,0,mUseableGraphHeight + mTopPadding);
      mGraph.invalidate();
    }
  }
);
  mRevealAnimator.addListener(new Animator.AnimatorListener(){
    @Override public void onAnimationStart(    Animator animation){
    }
    @Override public void onAnimationEnd(    Animator animation){
      mStartedAnimation=false;
    }
    @Override public void onAnimationCancel(    Animator animation){
    }
    @Override public void onAnimationRepeat(    Animator animation){
    }
  }
);
  if (this.isInEditMode()) {
    ValueLineSeries series1=new ValueLineSeries();
    series1.setColor(0xFF63CBB0);
    series1.addPoint(new ValueLinePoint(1.4f));
    series1.addPoint(new ValueLinePoint(4.4f));
    series1.addPoint(new ValueLinePoint(2.4f));
    series1.addPoint(new ValueLinePoint(3.2f));
    series1.addPoint(new ValueLinePoint(2.6f));
    series1.addPoint(new ValueLinePoint(5.0f));
    series1.addPoint(new ValueLinePoint(3.5f));
    series1.addPoint(new ValueLinePoint(2.4f));
    series1.addPoint(new ValueLinePoint(0.4f));
    series1.addPoint(new ValueLinePoint(3.4f));
    series1.addPoint(new ValueLinePoint(2.5f));
    series1.addPoint(new ValueLinePoint(1.0f));
    series1.addPoint(new ValueLinePoint(4.2f));
    series1.addPoint(new ValueLinePoint(2.4f));
    series1.addPoint(new ValueLinePoint(3.6f));
    series1.addPoint(new ValueLinePoint(1.0f));
    series1.addPoint(new ValueLinePoint(2.5f));
    series1.addPoint(new ValueLinePoint(1.4f));
    addSeries(series1);
  }
}","@Override protected void initializeGraph(){
  mSeries=new ArrayList<ValueLineSeries>();
  mLegendList=new ArrayList<LegendModel>();
  mLinePaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mLinePaint.setStrokeWidth(mLineStroke);
  mLegendPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mLegendPaint.setColor(DEF_LEGEND_COLOR);
  mLegendPaint.setTextSize(mLegendTextSize);
  mLegendPaint.setStrokeWidth(2);
  mLegendPaint.setStyle(Paint.Style.FILL);
  calculateMaxTextHeight(mLegendPaint);
  mIndicatorPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mIndicatorPaint.setColor(mIndicatorColor);
  mIndicatorPaint.setTextSize(mIndicatorTextSize);
  mIndicatorPaint.setStrokeWidth(mIndicatorWidth);
  mIndicatorPaint.setStyle(Paint.Style.FILL);
  mGraph=new Graph(getContext());
  addView(mGraph);
  mLegend=new Legend(getContext());
  addView(mLegend);
  mRevealAnimator=ValueAnimator.ofFloat(0,1);
  mRevealAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      mRevealValue=animation.getAnimatedFraction();
      mScale.reset();
      mScale.setScale(1,1.f * mRevealValue,0,mUseableGraphHeight + mTopPadding);
      mGraph.invalidate();
    }
  }
);
  mRevealAnimator.addListener(new Animator.AnimatorListener(){
    @Override public void onAnimationStart(    Animator animation){
    }
    @Override public void onAnimationEnd(    Animator animation){
      mStartedAnimation=false;
    }
    @Override public void onAnimationCancel(    Animator animation){
    }
    @Override public void onAnimationRepeat(    Animator animation){
    }
  }
);
  if (this.isInEditMode()) {
    ValueLineSeries series1=new ValueLineSeries();
    series1.setColor(0xFF63CBB0);
    series1.addPoint(new ValueLinePoint(1.4f));
    series1.addPoint(new ValueLinePoint(4.4f));
    series1.addPoint(new ValueLinePoint(2.4f));
    series1.addPoint(new ValueLinePoint(3.2f));
    series1.addPoint(new ValueLinePoint(2.6f));
    series1.addPoint(new ValueLinePoint(5.0f));
    series1.addPoint(new ValueLinePoint(3.5f));
    series1.addPoint(new ValueLinePoint(2.4f));
    series1.addPoint(new ValueLinePoint(0.4f));
    series1.addPoint(new ValueLinePoint(3.4f));
    series1.addPoint(new ValueLinePoint(2.5f));
    series1.addPoint(new ValueLinePoint(1.0f));
    series1.addPoint(new ValueLinePoint(4.2f));
    series1.addPoint(new ValueLinePoint(2.4f));
    series1.addPoint(new ValueLinePoint(3.6f));
    series1.addPoint(new ValueLinePoint(1.0f));
    series1.addPoint(new ValueLinePoint(2.5f));
    series1.addPoint(new ValueLinePoint(1.4f));
    addSeries(series1);
  }
}",0.99961962723469
111197,"/** 
 * Implement this to do your drawing.
 * @param canvas the canvas on which the background will be drawn
 */
@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (mUseCustomLegend) {
    for (    LegendModel model : mLegendList) {
      Rect textBounds=model.getTextBounds();
      RectF bounds=model.getLegendBounds();
      canvas.drawText(model.getLegendLabel(),bounds.centerX() - (textBounds.width() / 2),bounds.centerY(),mLegendPaint);
      canvas.drawLine(bounds.centerX(),bounds.centerY() - textBounds.height() - mLegendTopPadding,bounds.centerX(),mLegendTopPadding,mLegendPaint);
    }
  }
 else {
    List<? extends BaseModel> list=mSeries.get(0).getSeries();
    for (    BaseModel model : list) {
      if (model.canShowLabel()) {
        RectF bounds=model.getLegendBounds();
        canvas.drawText(model.getLegendLabel(),model.getLegendLabelPosition(),bounds.bottom - mMaxFontHeight,mLegendPaint);
        canvas.drawLine(bounds.centerX(),bounds.bottom - mMaxFontHeight * 2 - mLegendTopPadding,bounds.centerX(),mLegendTopPadding,mLegendPaint);
      }
    }
  }
}","/** 
 * Implement this to do your drawing.
 * @param canvas the canvas on which the background will be drawn
 */
@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (!mSeries.isEmpty()) {
    if (mUseCustomLegend) {
      for (      LegendModel model : mLegendList) {
        Rect textBounds=model.getTextBounds();
        RectF bounds=model.getLegendBounds();
        canvas.drawText(model.getLegendLabel(),bounds.centerX() - (textBounds.width() / 2),bounds.centerY(),mLegendPaint);
        canvas.drawLine(bounds.centerX(),bounds.centerY() - textBounds.height() - mLegendTopPadding,bounds.centerX(),mLegendTopPadding,mLegendPaint);
      }
    }
 else {
      List<? extends BaseModel> list=mSeries.get(0).getSeries();
      for (      BaseModel model : list) {
        if (model.canShowLabel()) {
          RectF bounds=model.getLegendBounds();
          canvas.drawText(model.getLegendLabel(),model.getLegendLabelPosition(),bounds.bottom - mMaxFontHeight,mLegendPaint);
          canvas.drawLine(bounds.centerX(),bounds.bottom - mMaxFontHeight * 2 - mLegendTopPadding,bounds.centerX(),mLegendTopPadding,mLegendPaint);
        }
      }
    }
  }
}",0.9693251533742332
111198,"@Override protected void onDataChanged(){
  super.onDataChanged();
  if (!mSeries.isEmpty()) {
    int seriesCount=mSeries.size();
    float maxValue=0;
    for (    ValueLineSeries series : mSeries) {
      for (      ValueLinePoint point : series.getSeries()) {
        if (point.getValue() > maxValue)         maxValue=point.getValue();
      }
    }
    float heightMultiplier=mUseableGraphHeight / maxValue;
    for (    ValueLineSeries series : mSeries) {
      int seriesPointCount=series.getSeries().size();
      if (seriesPointCount == 1) {
        Log.w(LOG_TAG,""String_Node_Str"");
      }
 else {
        float widthOffset=mGraphWidth / seriesPointCount;
        widthOffset+=widthOffset / seriesPointCount;
        float currentOffset=0;
        series.setWidthOffset(widthOffset);
        if (mUseCubic) {
          widthOffset=mWidth / (seriesPointCount - 1);
        }
        float firstX=currentOffset;
        float firstY=(mUseableGraphHeight + mTopPadding) - (series.getSeries().get(0).getValue() * heightMultiplier);
        Path path=new Path();
        path.moveTo(firstX,firstY);
        series.getSeries().get(0).setCoordinates(new Point2D(firstX,firstY));
        if (mUseCubic) {
          Point2D P1=new Point2D();
          Point2D P2=new Point2D();
          Point2D P3=new Point2D();
          for (int i=0; i < seriesPointCount; i++) {
            if ((seriesPointCount - i) < 3) {
              P1.setX(currentOffset);
              P1.setY((mUseableGraphHeight + mTopPadding) - (series.getSeries().get(i).getValue() * heightMultiplier));
              P2.setX(mGraphWidth);
              P2.setY((mUseableGraphHeight + mTopPadding) - (series.getSeries().get(i + 1).getValue() * heightMultiplier));
              calculatePointDiff(P1,P2,P1,mSecondMultiplier);
              P3.setX(mGraphWidth);
              P3.setY((mUseableGraphHeight + mTopPadding) - (series.getSeries().get(i + 1).getValue() * heightMultiplier));
              calculatePointDiff(P2,P3,P3,mFirstMultiplier);
              path.cubicTo(P1.getX(),P1.getY(),P2.getX(),P2.getY(),P3.getX(),P3.getY());
              series.getSeries().get(i + 1).setCoordinates(new Point2D(P2.getX(),P2.getY()));
              break;
            }
 else {
              P1.setX(currentOffset);
              P1.setY((mUseableGraphHeight + mTopPadding) - (series.getSeries().get(i).getValue() * heightMultiplier));
              P2.setX(currentOffset + widthOffset);
              P2.setY((mUseableGraphHeight + mTopPadding) - (series.getSeries().get(i + 1).getValue() * heightMultiplier));
              calculatePointDiff(P1,P2,P1,mSecondMultiplier);
              P3.setX(currentOffset + (2 * widthOffset));
              P3.setY((mUseableGraphHeight + mTopPadding) - (series.getSeries().get(i + 2).getValue() * heightMultiplier));
              calculatePointDiff(P2,P3,P3,mFirstMultiplier);
              series.getSeries().get(i + 1).setCoordinates(new Point2D(P2.getX(),P2.getY()));
            }
            currentOffset+=widthOffset;
            path.cubicTo(P1.getX(),P1.getY(),P2.getX(),P2.getY(),P3.getX(),P3.getY());
          }
        }
 else {
          boolean first=true;
          int count=1;
          for (          ValueLinePoint point : series.getSeries()) {
            if (first) {
              first=false;
              continue;
            }
            currentOffset+=widthOffset;
            if (count == seriesPointCount - 1) {
              if (currentOffset < mGraphWidth) {
                currentOffset=mGraphWidth;
              }
            }
            point.setCoordinates(new Point2D(currentOffset,(mUseableGraphHeight + mTopPadding) - (point.getValue() * heightMultiplier)));
            path.lineTo(point.getCoordinates().getX(),point.getCoordinates().getY());
            count++;
          }
        }
        if (mUseOverlapFill || seriesCount == 1) {
          path.lineTo(mGraphWidth,mGraphHeight);
          path.lineTo(0,mGraphHeight);
          path.lineTo(firstX,firstY);
        }
        series.setPath(path);
      }
    }
    if (!mUseCustomLegend) {
      int index=0;
      int size=mSeries.get(0).getSeries().size();
      if (size > 1) {
        for (        ValueLinePoint valueLinePoint : mSeries.get(0).getSeries()) {
          if (!(index == 0 || index == size - 1)) {
            valueLinePoint.setLegendBounds(new RectF(valueLinePoint.getCoordinates().getX() - mSeries.get(0).getWidthOffset() / 2,0,valueLinePoint.getCoordinates().getX() + mSeries.get(0).getWidthOffset() / 2,mLegendHeight));
          }
 else {
            valueLinePoint.setIgnore(true);
          }
          index++;
        }
        Utils.calculateLegendInformation(mSeries.get(0).getSeries(),0,mLegendPaint);
      }
    }
    if (mShowIndicator && mSeries.size() == 1) {
      int size=mSeries.get(0).getSeries().size();
      int index;
      if (size > 1) {
        if (size == 3) {
          index=size / 2;
        }
 else {
          index=(size / 2) - 1;
        }
        mFocusedPoint=mSeries.get(0).getSeries().get(index);
        mTouchedArea.setX(mFocusedPoint.getCoordinates().getX());
        mTouchedArea.setY(mFocusedPoint.getCoordinates().getY());
        calculateValueTextHeight();
      }
    }
  }
}","@Override protected void onDataChanged(){
  if (!mSeries.isEmpty()) {
    int seriesCount=mSeries.size();
    float maxValue=0;
    for (    ValueLineSeries series : mSeries) {
      for (      ValueLinePoint point : series.getSeries()) {
        if (point.getValue() > maxValue)         maxValue=point.getValue();
      }
    }
    float heightMultiplier=mUseableGraphHeight / maxValue;
    for (    ValueLineSeries series : mSeries) {
      int seriesPointCount=series.getSeries().size();
      if (seriesPointCount <= 1) {
        Log.w(LOG_TAG,""String_Node_Str"");
      }
 else {
        float widthOffset=mGraphWidth / seriesPointCount;
        widthOffset+=widthOffset / seriesPointCount;
        float currentOffset=0;
        series.setWidthOffset(widthOffset);
        if (mUseCubic) {
          widthOffset=mWidth / (seriesPointCount - 1);
        }
        float firstX=currentOffset;
        float firstY=(mUseableGraphHeight + mTopPadding) - (series.getSeries().get(0).getValue() * heightMultiplier);
        Path path=new Path();
        path.moveTo(firstX,firstY);
        series.getSeries().get(0).setCoordinates(new Point2D(firstX,firstY));
        if (mUseCubic) {
          Point2D P1=new Point2D();
          Point2D P2=new Point2D();
          Point2D P3=new Point2D();
          for (int i=0; i < seriesPointCount; i++) {
            if ((seriesPointCount - i) < 3) {
              P1.setX(currentOffset);
              P1.setY((mUseableGraphHeight + mTopPadding) - (series.getSeries().get(i).getValue() * heightMultiplier));
              P2.setX(mGraphWidth);
              P2.setY((mUseableGraphHeight + mTopPadding) - (series.getSeries().get(i + 1).getValue() * heightMultiplier));
              calculatePointDiff(P1,P2,P1,mSecondMultiplier);
              P3.setX(mGraphWidth);
              P3.setY((mUseableGraphHeight + mTopPadding) - (series.getSeries().get(i + 1).getValue() * heightMultiplier));
              calculatePointDiff(P2,P3,P3,mFirstMultiplier);
              path.cubicTo(P1.getX(),P1.getY(),P2.getX(),P2.getY(),P3.getX(),P3.getY());
              series.getSeries().get(i + 1).setCoordinates(new Point2D(P2.getX(),P2.getY()));
              break;
            }
 else {
              P1.setX(currentOffset);
              P1.setY((mUseableGraphHeight + mTopPadding) - (series.getSeries().get(i).getValue() * heightMultiplier));
              P2.setX(currentOffset + widthOffset);
              P2.setY((mUseableGraphHeight + mTopPadding) - (series.getSeries().get(i + 1).getValue() * heightMultiplier));
              calculatePointDiff(P1,P2,P1,mSecondMultiplier);
              P3.setX(currentOffset + (2 * widthOffset));
              P3.setY((mUseableGraphHeight + mTopPadding) - (series.getSeries().get(i + 2).getValue() * heightMultiplier));
              calculatePointDiff(P2,P3,P3,mFirstMultiplier);
              series.getSeries().get(i + 1).setCoordinates(new Point2D(P2.getX(),P2.getY()));
            }
            currentOffset+=widthOffset;
            path.cubicTo(P1.getX(),P1.getY(),P2.getX(),P2.getY(),P3.getX(),P3.getY());
          }
        }
 else {
          boolean first=true;
          int count=1;
          for (          ValueLinePoint point : series.getSeries()) {
            if (first) {
              first=false;
              continue;
            }
            currentOffset+=widthOffset;
            if (count == seriesPointCount - 1) {
              if (currentOffset < mGraphWidth) {
                currentOffset=mGraphWidth;
              }
            }
            point.setCoordinates(new Point2D(currentOffset,(mUseableGraphHeight + mTopPadding) - (point.getValue() * heightMultiplier)));
            path.lineTo(point.getCoordinates().getX(),point.getCoordinates().getY());
            count++;
          }
        }
        if (mUseOverlapFill || seriesCount == 1) {
          path.lineTo(mGraphWidth,mGraphHeight);
          path.lineTo(0,mGraphHeight);
          path.lineTo(firstX,firstY);
        }
        series.setPath(path);
      }
    }
    if (!mUseCustomLegend) {
      int index=0;
      int size=mSeries.get(0).getSeries().size();
      if (size > 1) {
        for (        ValueLinePoint valueLinePoint : mSeries.get(0).getSeries()) {
          if (!(index == 0 || index == size - 1)) {
            valueLinePoint.setLegendBounds(new RectF(valueLinePoint.getCoordinates().getX() - mSeries.get(0).getWidthOffset() / 2,0,valueLinePoint.getCoordinates().getX() + mSeries.get(0).getWidthOffset() / 2,mLegendHeight));
          }
 else {
            valueLinePoint.setIgnore(true);
          }
          index++;
        }
        Utils.calculateLegendInformation(mSeries.get(0).getSeries(),0,mLegendPaint);
      }
    }
    if (mShowIndicator && mSeries.size() == 1) {
      int size=mSeries.get(0).getSeries().size();
      int index;
      if (size > 1) {
        if (size == 3) {
          index=size / 2;
        }
 else {
          index=(size / 2) - 1;
        }
        mFocusedPoint=mSeries.get(0).getSeries().get(index);
        mTouchedArea.setX(mFocusedPoint.getCoordinates().getX());
        mTouchedArea.setY(mFocusedPoint.getCoordinates().getY());
        calculateValueTextHeight();
      }
    }
  }
  super.onDataChanged();
  mLegend.invalidate();
}",0.9927784112504752
111199,"@Override public void onAnimationUpdate(ValueAnimator animation){
  mRevealValue=(animation.getAnimatedFraction());
  mScale.reset();
  mScale.setScale(1,1.f * mRevealValue,0,mUseableGraphHeight + mTopPadding);
  mGraph.invalidate();
}","@Override public void onAnimationUpdate(ValueAnimator animation){
  mRevealValue=animation.getAnimatedFraction();
  mScale.reset();
  mScale.setScale(1,1.f * mRevealValue,0,mUseableGraphHeight + mTopPadding);
  mGraph.invalidate();
}",0.9957264957264956
111200,"private void loadData(){
  ValueLineSeries series=new ValueLineSeries();
  series.setColor(0xFF56B7F1);
  series.addPoint(new ValueLinePoint(""String_Node_Str"",2.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",3.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",1.2f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",2.6f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",1.0f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",3.5f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",2.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",2.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",3.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",1.0f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",1.2f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",3.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",2.6f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",1.0f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",3.5f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",2.4f));
  mCubicValueLineChart.addSeries(series);
  mCubicValueLineChart.setOnPointFocusedListener(new IOnPointFocusedListener(){
    @Override public void onPointFocused(    int _PointPos){
      Log.d(""String_Node_Str"",""String_Node_Str"" + _PointPos);
    }
  }
);
}","private void loadData(){
  ValueLineSeries series=new ValueLineSeries();
  series.setColor(0xFF56B7F1);
  series.addPoint(new ValueLinePoint(""String_Node_Str"",2.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",3.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",1.2f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",2.6f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",1.0f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",3.5f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",2.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",2.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",3.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",1.0f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",1.2f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",3.4f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",2.6f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",1.0f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",3.5f));
  series.addPoint(new ValueLinePoint(""String_Node_Str"",2.4f));
  ValueLineSeries series1=new ValueLineSeries();
  series1.setColor(0xFFFFB7F1);
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",1.4f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",4.4f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",2.4f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",5.2f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",2.6f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",5.0f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",7.5f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",1.4f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",5.4f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",2.4f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",7.4f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",5.0f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",2.2f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",6.4f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",3.6f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",6.0f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",1.5f));
  series1.addPoint(new ValueLinePoint(""String_Node_Str"",7.4f));
  mCubicValueLineChart.addSeries(series1);
  mCubicValueLineChart.addSeries(series);
  mCubicValueLineChart.setOnPointFocusedListener(new IOnPointFocusedListener(){
    @Override public void onPointFocused(    int _PointPos){
      Log.d(""String_Node_Str"",""String_Node_Str"" + _PointPos);
    }
  }
);
}",0.7008907641819034
111201,"public void clearChart(){
  mData.clear();
  onDataChanged();
}","public void clearChart(){
  mData.clear();
}",0.822429906542056
111202,"protected void calculateBarPositions(int _DataSize){
  float barWidth=mBarWidth;
  float margin=mBarMargin;
  if (!mFixedBarWidth) {
    barWidth=(mGraphWidth / _DataSize) - margin;
  }
 else {
    float cumulatedBarWidths=barWidth * _DataSize;
    float remainingWidth=mGraphWidth - cumulatedBarWidths;
    margin=remainingWidth / _DataSize;
  }
  calculateBounds(barWidth,margin);
}","protected void calculateBarPositions(int _DataSize){
  float barWidth=mBarWidth;
  float margin=mBarMargin;
  if (!mFixedBarWidth) {
    barWidth=(mGraphWidth / _DataSize) - margin;
  }
 else {
    float cumulatedBarWidths=barWidth * _DataSize;
    float remainingWidth=mGraphWidth - cumulatedBarWidths;
    margin=remainingWidth / _DataSize;
  }
  calculateBounds(barWidth,margin);
  mLegend.invalidate();
  mGraph.invalidate();
}",0.9423312883435584
111203,"public void clearChart(){
  mPieData.clear();
  mTotalValue=0;
  onDataChanged();
}","public void clearChart(){
  mPieData.clear();
  mTotalValue=0;
}",0.8707482993197279
111204,"public void clearChart(){
  mData.clear();
  onDataChanged();
}","public void clearChart(){
  mData.clear();
}",0.822429906542056
111205,"@Override public String getJavaCode(final Messager messager){
  StringWriter sw=new StringWriter();
  JavaWriter writer=new JavaWriter(sw);
  try {
    writer.emitPackage(mClassPackage);
    writer.emitImports(IOException.class,StringWriter.class,ArrayList.class,ArrayDeque.class,HashSet.class,HashMap.class,List.class,Map.class,Queue.class,Set.class,JsonGenerator.class,JsonParser.class,JsonToken.class,JsonFactoryHolder.class,JsonHelper.class);
    Set<String> typeImports=new HashSet<String>();
    for (    Map.Entry<String,TypeData> entry : getIterator()) {
      TypeData typeData=entry.getValue();
      if (typeData.getCollectionType() != TypeUtils.CollectionType.NOT_A_COLLECTION) {
        if (typeData.needsImportFrom(mClassPackage)) {
          typeImports.add(typeData.getPackageName() + ""String_Node_Str"" + typeData.getParsableType());
          typeImports.add(typeData.getPackageName() + ""String_Node_Str"" + typeData.getParsableTypeParserClass()+ JsonAnnotationProcessorConstants.HELPER_CLASS_SUFFIX);
        }
      }
 else       if (typeData.needsImportFrom(mClassPackage)) {
        typeImports.add(typeData.getPackageName() + ""String_Node_Str"" + typeData.getParsableTypeParserClass()+ JsonAnnotationProcessorConstants.HELPER_CLASS_SUFFIX);
        typeImports.add(typeData.getPackageName() + ""String_Node_Str"" + typeData.getParsableType());
      }
    }
    writer.emitImports(typeImports);
    writer.emitEmptyLine();
    writer.beginType(mInjectedClassName,""String_Node_Str"",EnumSet.of(PUBLIC,FINAL),null,""String_Node_Str"" + mSimpleClassName + ""String_Node_Str"");
    writer.emitEmptyLine();
    String returnValue=mAnnotation.postprocessingEnabled() ? (""String_Node_Str"" + JsonType.POSTPROCESSING_METHOD_NAME + ""String_Node_Str"") : ""String_Node_Str"";
    if (!mAbstractClass) {
      writer.beginMethod(mSimpleClassName,""String_Node_Str"",EnumSet.of(getParseMethodVisibility(),STATIC),Arrays.asList(""String_Node_Str"",""String_Node_Str""),Arrays.asList(""String_Node_Str"")).emitStatement(""String_Node_Str"",mSimpleClassName,mSimpleClassName).emitEmptyLine().emitSingleLineComment(""String_Node_Str"").beginControlFlow(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").endControlFlow().emitEmptyLine().beginControlFlow(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").endControlFlow().emitEmptyLine().emitStatement(""String_Node_Str"",returnValue).endMethod().emitEmptyLine();
    }
    writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(getParseMethodVisibility(),STATIC),Arrays.asList(mSimpleClassName,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),Arrays.asList(""String_Node_Str"")).emitWithGenerator(new JavaWriter.JavaGenerator(){
      @Override public void emitJava(      JavaWriter writer) throws IOException {
        JsonParserClassData.this.writeFields(messager,writer);
        if (mParentInjectedClassName != null) {
          writer.emitStatement(""String_Node_Str"",mParentInjectedClassName);
        }
 else {
          writer.emitStatement(""String_Node_Str"");
        }
      }
    }
).endMethod().emitEmptyLine();
    if (!mAbstractClass) {
      writer.beginMethod(mSimpleClassName,""String_Node_Str"",EnumSet.of(getParseMethodVisibility(),STATIC),Arrays.asList(""String_Node_Str"",""String_Node_Str""),Arrays.asList(""String_Node_Str"")).emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").endMethod().emitEmptyLine();
    }
    if (mGenerateSerializer) {
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(PUBLIC,STATIC),Arrays.asList(""String_Node_Str"",""String_Node_Str"",mSimpleClassName,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),Arrays.asList(""String_Node_Str"")).beginControlFlow(""String_Node_Str"").emitStatement(""String_Node_Str"").endControlFlow().emitWithGenerator(new JavaWriter.JavaGenerator(){
        @Override public void emitJava(        JavaWriter writer) throws IOException {
          JsonParserClassData.this.writeSerializeCalls(messager,writer);
          if (mParentInjectedClassName != null) {
            writer.emitStatement(mParentInjectedClassName + ""String_Node_Str"");
          }
        }
      }
).beginControlFlow(""String_Node_Str"").emitStatement(""String_Node_Str"").endControlFlow().endMethod().emitEmptyLine();
    }
    if (mGenerateSerializer && !mAbstractClass) {
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(PUBLIC,STATIC),Arrays.asList(mSimpleClassName,""String_Node_Str""),Arrays.asList(""String_Node_Str"")).emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"" + ""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").endMethod().emitEmptyLine();
    }
    writer.endType();
  }
 catch (  IOException ex) {
    Console.error(messager,""String_Node_Str"",mInjectedClassName,ex.toString());
  }
  return sw.toString();
}","@Override public String getJavaCode(final Messager messager){
  StringWriter sw=new StringWriter();
  JavaWriter writer=new JavaWriter(sw);
  try {
    writer.emitPackage(mClassPackage);
    writer.emitImports(IOException.class,StringWriter.class,ArrayList.class,ArrayDeque.class,HashSet.class,HashMap.class,List.class,Map.class,Queue.class,Set.class,JsonGenerator.class,JsonParser.class,JsonToken.class,JsonFactoryHolder.class,JsonHelper.class);
    Set<String> typeImports=new HashSet<String>();
    for (    Map.Entry<String,TypeData> entry : getIterator()) {
      TypeData typeData=entry.getValue();
      if (typeData.needsImportFrom(mClassPackage)) {
        typeImports.add(typeData.getPackageName() + ""String_Node_Str"" + typeData.getParsableType());
        if (typeData.hasParserHelperClass()) {
          typeImports.add(typeData.getPackageName() + ""String_Node_Str"" + typeData.getParsableTypeParserClass()+ JsonAnnotationProcessorConstants.HELPER_CLASS_SUFFIX);
        }
      }
    }
    writer.emitImports(typeImports);
    writer.emitEmptyLine();
    writer.beginType(mInjectedClassName,""String_Node_Str"",EnumSet.of(PUBLIC,FINAL),null,""String_Node_Str"" + mSimpleClassName + ""String_Node_Str"");
    writer.emitEmptyLine();
    String returnValue=mAnnotation.postprocessingEnabled() ? (""String_Node_Str"" + JsonType.POSTPROCESSING_METHOD_NAME + ""String_Node_Str"") : ""String_Node_Str"";
    if (!mAbstractClass) {
      writer.beginMethod(mSimpleClassName,""String_Node_Str"",EnumSet.of(getParseMethodVisibility(),STATIC),Arrays.asList(""String_Node_Str"",""String_Node_Str""),Arrays.asList(""String_Node_Str"")).emitStatement(""String_Node_Str"",mSimpleClassName,mSimpleClassName).emitEmptyLine().emitSingleLineComment(""String_Node_Str"").beginControlFlow(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").endControlFlow().emitEmptyLine().beginControlFlow(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").endControlFlow().emitEmptyLine().emitStatement(""String_Node_Str"",returnValue).endMethod().emitEmptyLine();
    }
    writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(getParseMethodVisibility(),STATIC),Arrays.asList(mSimpleClassName,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),Arrays.asList(""String_Node_Str"")).emitWithGenerator(new JavaWriter.JavaGenerator(){
      @Override public void emitJava(      JavaWriter writer) throws IOException {
        JsonParserClassData.this.writeFields(messager,writer);
        if (mParentInjectedClassName != null) {
          writer.emitStatement(""String_Node_Str"",mParentInjectedClassName);
        }
 else {
          writer.emitStatement(""String_Node_Str"");
        }
      }
    }
).endMethod().emitEmptyLine();
    if (!mAbstractClass) {
      writer.beginMethod(mSimpleClassName,""String_Node_Str"",EnumSet.of(getParseMethodVisibility(),STATIC),Arrays.asList(""String_Node_Str"",""String_Node_Str""),Arrays.asList(""String_Node_Str"")).emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").endMethod().emitEmptyLine();
    }
    if (mGenerateSerializer) {
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(PUBLIC,STATIC),Arrays.asList(""String_Node_Str"",""String_Node_Str"",mSimpleClassName,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),Arrays.asList(""String_Node_Str"")).beginControlFlow(""String_Node_Str"").emitStatement(""String_Node_Str"").endControlFlow().emitWithGenerator(new JavaWriter.JavaGenerator(){
        @Override public void emitJava(        JavaWriter writer) throws IOException {
          JsonParserClassData.this.writeSerializeCalls(messager,writer);
          if (mParentInjectedClassName != null) {
            writer.emitStatement(mParentInjectedClassName + ""String_Node_Str"");
          }
        }
      }
).beginControlFlow(""String_Node_Str"").emitStatement(""String_Node_Str"").endControlFlow().endMethod().emitEmptyLine();
    }
    if (mGenerateSerializer && !mAbstractClass) {
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(PUBLIC,STATIC),Arrays.asList(mSimpleClassName,""String_Node_Str""),Arrays.asList(""String_Node_Str"")).emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"" + ""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").endMethod().emitEmptyLine();
    }
    writer.endType();
  }
 catch (  IOException ex) {
    Console.error(messager,""String_Node_Str"",mInjectedClassName,ex.toString());
  }
  return sw.toString();
}",0.9514303354599712
111206,"public boolean needsImportFrom(String packageName){
  return getParseType() == TypeUtils.ParseType.PARSABLE_OBJECT && !getPackageName().equals(packageName) && !StringUtil.isNullOrEmpty(getParsableTypeParserClass());
}","public boolean needsImportFrom(String packageName){
  return getParseType() == TypeUtils.ParseType.PARSABLE_OBJECT && !getPackageName().equals(packageName);
}",0.8426666666666667
111207,"@Override protected void onWindowVisibilityChanged(int visibility){
  super.onWindowVisibilityChanged(visibility);
  if (View.GONE == visibility) {
    removeCallbacks(mRefreshProgressRunnable);
  }
}","@Override protected void onWindowVisibilityChanged(int visibility){
  super.onWindowVisibilityChanged(visibility);
  if (View.GONE == visibility) {
    removeCallbacks(mRefreshProgressRunnable);
  }
 else {
    removeCallbacks(mRefreshProgressRunnable);
    mRefreshProgressRunnable=new RefreshProgressRunnable();
    post(mRefreshProgressRunnable);
  }
}",0.7207207207207207
111208,"private void startWave(){
  if (getWidth() != 0) {
    int width=getWidth();
    mXZoom=width + width / 2;
    left=getLeft();
    top=getTop();
    right=getRight();
    bottom=getBottom();
    mMaxRight=right + mXOffset;
    omega=PI2 / mXZoom;
  }
  mRefreshProgressRunnable=new RefreshProgressRunnable();
  post(mRefreshProgressRunnable);
}","private void startWave(){
  if (getWidth() != 0) {
    int width=getWidth();
    mXZoom=width + width / 2;
    left=getLeft();
    top=getTop();
    right=getRight();
    bottom=getBottom();
    mMaxRight=right + mXOffset;
    omega=PI2 / mXZoom;
  }
}",0.8456375838926175
111209,"public void setProgress(int progress){
  this.progress=progress > 100 ? 100 : progress;
  invalidate();
}","public void setProgress(int progress){
  this.progress=progress > 100 ? 100 : progress;
}",0.9175257731958762
111210,"/** 
 * Creates a new instance from the provided   {@link MapSession}.
 * @param cached the {@link MapSession} that represents the persisted session thatwas retrieved. Cannot be null.
 */
RedisSession(MapSession cached){
  Assert.notNull(""String_Node_Str"");
  this.cached=cached;
  this.originalPrincipalName=PRINCIPAL_NAME_RESOLVER.resolvePrincipal(this);
}","/** 
 * Creates a new instance from the provided   {@link MapSession}.
 * @param cached the {@link MapSession} that represents the persisted session thatwas retrieved. Cannot be null.
 */
RedisSession(MapSession cached){
  Assert.notNull(cached,""String_Node_Str"");
  this.cached=cached;
  this.originalPrincipalName=PRINCIPAL_NAME_RESOLVER.resolvePrincipal(this);
}",0.9903181189488244
111211,"JdbcSession(ExpiringSession delegate){
  Assert.notNull(""String_Node_Str"");
  this.delegate=delegate;
}","JdbcSession(ExpiringSession delegate){
  Assert.notNull(delegate,""String_Node_Str"");
  this.delegate=delegate;
}",0.958139534883721
111212,"/** 
 * Callback method during Spring bean initialization that will capture the fully-qualified name of the GemFire cache   {@link Region} used to manage Sessionstate and register this SessionRepository as a GemFire {@link com.gemstone.gemfire.cache.CacheListener}.
 * @throws Exception if an error occurs during the initialization process.
 */
public void afterPropertiesSet() throws Exception {
  GemfireOperations template=getTemplate();
  Assert.isInstanceOf(GemfireAccessor.class,template);
  Region<Object,ExpiringSession> region=((GemfireAccessor)template).getRegion();
  this.fullyQualifiedRegionName=region.getFullPath();
  region.getAttributesMutator().addCacheListener(this);
}","/** 
 * Callback method during Spring bean initialization that will capture the fully-qualified name of the GemFire cache   {@link Region} used to manage Session state and register this SessionRepositoryas a GemFire  {@link com.gemstone.gemfire.cache.CacheListener}. Additionally, this method registers GemFire   {@link Instantiator}s for the   {@link GemFireSession}and   {@link GemFireSessionAttributes} types to optimize GemFire's instantiation logic on deserializationusing the data serialization framework when accessing the  {@link Session}'s state stored in GemFire.
 * @throws Exception if an error occurs during the initialization process.
 */
public void afterPropertiesSet() throws Exception {
  GemfireOperations template=getTemplate();
  Assert.isInstanceOf(GemfireAccessor.class,template);
  Region<Object,ExpiringSession> region=((GemfireAccessor)template).getRegion();
  this.fullyQualifiedRegionName=region.getFullPath();
  region.getAttributesMutator().addCacheListener(this);
  Instantiator.register(new Instantiator(GemFireSession.class,800813552){
    @Override public DataSerializable newInstance(){
      return new GemFireSession();
    }
  }
);
  Instantiator.register(new Instantiator(GemFireSessionAttributes.class,800828008){
    @Override public DataSerializable newInstance(){
      return new GemFireSessionAttributes();
    }
  }
);
}",0.6689386562804285
111213,"/** 
 * Gets the current session's alias from the   {@link HttpServletRequest}.
 * @param request the  {@link HttpServletRequest} to obtain the current session'salias from.
 * @return the current sessions' alias. Cannot be null.
 */
String getCurrentSessionAlias(HttpServletRequest request);","/** 
 * Gets the current session's alias from the   {@link HttpServletRequest}.
 * @param request the {@link HttpServletRequest} to obtain the current session's alias from.
 * @return the current sessions' alias. Cannot be null.
 */
String getCurrentSessionAlias(HttpServletRequest request);",0.9965635738831616
111214,"/** 
 * Gets a mapping of the session alias to the session id from the  {@link HttpServletRequest}
 * @param request the  {@link HttpServletRequest} to obtain the mapping from.Cannot be null.
 * @return a mapping of the session alias to the session id from the{@link HttpServletRequest}. Cannot be null.
 */
Map<String,String> getSessionIds(HttpServletRequest request);","/** 
 * Gets a mapping of the session alias to the session id from the  {@link HttpServletRequest}
 * @param request the {@link HttpServletRequest} to obtain the mapping from. Cannot be null.
 * @return a mapping of the session alias to the session id from the{@link HttpServletRequest}. Cannot be null.
 */
Map<String,String> getSessionIds(HttpServletRequest request);",0.997289972899729
111215,"/** 
 * Gets a new and unique Session alias. Typically this will be called to pass into  {@code HttpSessionManager#encodeURL(java.lang.String)}. For example: <code> String newAlias = httpSessionManager.getNewSessionAlias(request); String addAccountUrl = httpSessionManager.encodeURL(""./"", newAlias); </code>
 * @param request
 * @return
 */
String getNewSessionAlias(HttpServletRequest request);","/** 
 * Gets a new and unique Session alias. Typically this will be called to pass into  {@code HttpSessionManager#encodeURL(java.lang.String)}. For example: <code> String newAlias = httpSessionManager.getNewSessionAlias(request); String addAccountUrl = httpSessionManager.encodeURL(""./"", newAlias); </code>
 * @param request the {@link HttpServletRequest} to get a new alias from
 * @return
 */
String getNewSessionAlias(HttpServletRequest request);",0.9349112426035504
111216,"/** 
 * Same contract as for   {@code doFilter}, but guaranteed to be just invoked once per request within a single request thread. <p>Provides HttpServletRequest and HttpServletResponse arguments instead of the default ServletRequest and ServletResponse ones.
 */
protected abstract void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException ;","/** 
 * Same contract as for   {@code doFilter}, but guaranteed to be just invoked once per request within a single request thread. <p>Provides HttpServletRequest and HttpServletResponse arguments instead of the default ServletRequest and ServletResponse ones.
 * @see Filter#doFilter
 */
protected abstract void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException ;",0.9725400457665904
111217,"@Test public void testComputeSharedSecretWithWycheproofTestVectors() throws Exception {
  JSONObject json=WycheproofTestUtil.readJson(""String_Node_Str"");
  int errors=0;
  JSONArray testGroups=json.getJSONArray(""String_Node_Str"");
  for (int i=0; i < testGroups.length(); i++) {
    JSONObject group=testGroups.getJSONObject(i);
    JSONArray tests=group.getJSONArray(""String_Node_Str"");
    for (int j=0; j < tests.length(); j++) {
      JSONObject testcase=tests.getJSONObject(j);
      if (WycheproofTestUtil.checkFlags(testcase,""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        continue;
      }
      String tcId=String.format(""String_Node_Str"",testcase.getInt(""String_Node_Str""),testcase.getString(""String_Node_Str""));
      String result=testcase.getString(""String_Node_Str"");
      String hexPubKey=testcase.getString(""String_Node_Str"");
      String expectedSharedSecret=testcase.getString(""String_Node_Str"");
      String curve=testcase.getString(""String_Node_Str"");
      String hexPrivKey=testcase.getString(""String_Node_Str"");
      if (hexPrivKey.length() % 2 == 1) {
        hexPrivKey=""String_Node_Str"" + hexPrivKey;
      }
      KeyFactory kf=EngineFactory.KEY_FACTORY.getInstance(""String_Node_Str"");
      try {
        EllipticCurves.CurveType curveType=WycheproofTestUtil.getCurveType(curve);
        ECPrivateKey privKey=EllipticCurves.getEcPrivateKey(curveType,Hex.decode(hexPrivKey));
        ECPublicKey pubKey;
        try {
          X509EncodedKeySpec x509keySpec=new X509EncodedKeySpec(Hex.decode(hexPubKey));
          pubKey=(ECPublicKey)kf.generatePublic(x509keySpec);
        }
 catch (        java.lang.RuntimeException ex) {
          continue;
        }
        String sharedSecret=Hex.encode(EllipticCurves.computeSharedSecret(privKey,pubKey));
        if (result.equals(""String_Node_Str"")) {
          if (expectedSharedSecret.equals(sharedSecret) && WycheproofTestUtil.checkFlags(testcase,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
            System.out.println(tcId + ""String_Node_Str"");
          }
 else {
            System.out.println(""String_Node_Str"" + tcId + ""String_Node_Str""+ sharedSecret);
            errors++;
          }
        }
 else         if (!expectedSharedSecret.equals(sharedSecret)) {
          System.out.println(""String_Node_Str"" + tcId + ""String_Node_Str""+ sharedSecret+ ""String_Node_Str""+ expectedSharedSecret);
          errors++;
        }
      }
 catch (      NoSuchAlgorithmException ex) {
        if (result.equals(""String_Node_Str"")) {
          continue;
        }
      }
catch (      GeneralSecurityException ex) {
        if (result.equals(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"" + tcId + ""String_Node_Str""+ ex.toString());
          ex.printStackTrace();
          errors++;
        }
      }
catch (      Exception ex) {
        System.out.println(""String_Node_Str"" + tcId + ""String_Node_Str""+ ex.toString());
        ex.printStackTrace();
        errors++;
      }
    }
  }
  assertEquals(0,errors);
}","@Test public void testComputeSharedSecretWithWycheproofTestVectors() throws Exception {
  JSONObject json=WycheproofTestUtil.readJson(""String_Node_Str"");
  int errors=0;
  JSONArray testGroups=json.getJSONArray(""String_Node_Str"");
  for (int i=0; i < testGroups.length(); i++) {
    JSONObject group=testGroups.getJSONObject(i);
    JSONArray tests=group.getJSONArray(""String_Node_Str"");
    for (int j=0; j < tests.length(); j++) {
      JSONObject testcase=tests.getJSONObject(j);
      if (WycheproofTestUtil.checkFlags(testcase,""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        continue;
      }
      String tcId=String.format(""String_Node_Str"",testcase.getInt(""String_Node_Str""),testcase.getString(""String_Node_Str""));
      String result=testcase.getString(""String_Node_Str"");
      String hexPubKey=testcase.getString(""String_Node_Str"");
      String expectedSharedSecret=testcase.getString(""String_Node_Str"");
      String curve=testcase.getString(""String_Node_Str"");
      String hexPrivKey=testcase.getString(""String_Node_Str"");
      if (hexPrivKey.length() % 2 == 1) {
        hexPrivKey=""String_Node_Str"" + hexPrivKey;
      }
      KeyFactory kf=EngineFactory.KEY_FACTORY.getInstance(""String_Node_Str"");
      try {
        EllipticCurves.CurveType curveType=WycheproofTestUtil.getCurveType(curve);
        ECPrivateKey privKey=EllipticCurves.getEcPrivateKey(curveType,Hex.decode(hexPrivKey));
        ECPublicKey pubKey;
        try {
          X509EncodedKeySpec x509keySpec=new X509EncodedKeySpec(Hex.decode(hexPubKey));
          pubKey=(ECPublicKey)kf.generatePublic(x509keySpec);
          System.out.println(""String_Node_Str"" + hexPubKey);
          System.out.println(""String_Node_Str"" + Hex.encode(pubKey.getEncoded()));
        }
 catch (        java.lang.RuntimeException ex) {
          System.out.println(""String_Node_Str"" + ex);
          continue;
        }
        String sharedSecret=Hex.encode(EllipticCurves.computeSharedSecret(privKey,pubKey));
        if (result.equals(""String_Node_Str"")) {
          if (expectedSharedSecret.equals(sharedSecret) && WycheproofTestUtil.checkFlags(testcase,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
            System.out.println(tcId + ""String_Node_Str"");
          }
 else {
            System.out.println(""String_Node_Str"" + tcId + ""String_Node_Str""+ sharedSecret);
            errors++;
          }
        }
 else         if (!expectedSharedSecret.equals(sharedSecret)) {
          System.out.println(""String_Node_Str"" + tcId + ""String_Node_Str""+ sharedSecret+ ""String_Node_Str""+ expectedSharedSecret);
          errors++;
        }
      }
 catch (      NoSuchAlgorithmException ex) {
        System.out.println(tcId + ""String_Node_Str"" + ex);
        if (result.equals(""String_Node_Str"")) {
          continue;
        }
      }
catch (      GeneralSecurityException ex) {
        System.out.println(tcId + ""String_Node_Str"" + ex.toString());
        if (result.equals(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"" + tcId + ""String_Node_Str""+ ex.toString());
          ex.printStackTrace();
          errors++;
        }
      }
catch (      Exception ex) {
        System.out.println(""String_Node_Str"" + tcId + ""String_Node_Str""+ ex.toString());
        ex.printStackTrace();
        errors++;
      }
    }
  }
  assertEquals(0,errors);
}",0.9491999378592512
111218,"public Builder addRecipientPrivateKey(ECPrivateKey val) throws GeneralSecurityException {
  recipientPrivateKeys.add(val);
  return this;
}","/** 
 * Adds the decryption private key of the recipient. 
 */
public Builder addRecipientPrivateKey(ECPrivateKey val) throws GeneralSecurityException {
  recipientPrivateKeys.add(val);
  return this;
}",0.8152492668621701
111219,"/** 
 * Adds a custom   {@link PaymentMethodTokenRecipientKem}. <p>This is useful for clients that store keys in an HSM and need a more control on how the key is used. If you are not using an HSM, you probably should just use   {@link #addRecipientPrivateKey}.
 */
public Builder addRecipientKem(PaymentMethodTokenRecipientKem kem){
  recipientKems.add(kem);
  return this;
}","/** 
 * Adds a custom   {@link PaymentMethodTokenRecipientKem}. <p>This is useful for clients that store keys in an HSM and need a more control on how the key is used. If you are not using an HSM, you probably should just use   {@link #addRecipientPrivateKey}.
 * @since 1.1.0
 */
public Builder addRecipientKem(PaymentMethodTokenRecipientKem kem){
  recipientKems.add(kem);
  return this;
}",0.97911227154047
111220,"/** 
 * JSON containing sender intermediate signing key and a signature of it by the sender signing key. <p>This can be generated by   {@link SenderIntermediateCertFactory}.
 */
public Builder senderIntermediateCert(String val) throws GeneralSecurityException {
  this.senderIntermediateCert=val;
  return this;
}","/** 
 * JSON containing sender intermediate signing key and a signature of it by the sender signing key. <p>This can be generated by   {@link SenderIntermediateCertFactory}.
 * @since 1.1.0
 */
public Builder senderIntermediateCert(String val) throws GeneralSecurityException {
  this.senderIntermediateCert=val;
  return this;
}",0.9750778816199376
111221,"public Builder senderIntermediateSigningKey(ECPrivateKey val) throws GeneralSecurityException {
  senderIntermediateSigningKey=val;
  return this;
}","/** 
 * Sets the intermediate signing key of the sender.
 * @since 1.1.0
 */
public Builder senderIntermediateSigningKey(ECPrivateKey val) throws GeneralSecurityException {
  senderIntermediateSigningKey=val;
  return this;
}",0.7935656836461126
111222,"/** 
 * Checks that test vector has the expected algorithm and version. 
 */
public static void checkAlgAndVersion(JSONObject testvector,String expectedAlgorithm,String expectedVersion) throws Exception {
  String algorithm=testvector.getString(""String_Node_Str"");
  if (!expectedAlgorithm.equals(algorithm)) {
    fail(""String_Node_Str"" + expectedAlgorithm + ""String_Node_Str""+ algorithm);
  }
  String generatorVersion=testvector.getString(""String_Node_Str"");
  if (!generatorVersion.equals(expectedVersion)) {
    fail(""String_Node_Str"" + expectedVersion + ""String_Node_Str""+ generatorVersion);
  }
}","/** 
 * Checks that test vector has the expected algorithm and version. 
 */
public static void checkAlgAndVersion(JSONObject testvector,String expectedAlgorithm,String expectedVersion) throws Exception {
  String algorithm=testvector.getString(""String_Node_Str"");
  if (!expectedAlgorithm.equals(algorithm)) {
    System.out.println(""String_Node_Str"" + expectedAlgorithm + ""String_Node_Str""+ algorithm+ ""String_Node_Str"");
  }
  String generatorVersion=testvector.getString(""String_Node_Str"");
  if (!generatorVersion.equals(expectedVersion)) {
    System.out.println(""String_Node_Str"" + expectedVersion + ""String_Node_Str""+ generatorVersion+ ""String_Node_Str""+ expectedAlgorithm+ ""String_Node_Str"");
  }
}",0.9083969465648856
111223,"/** 
 * Adds a verifying public key of the sender. <p><b>IMPORTANT</b>: Instead of using this method to set the verifying public keys of the sender, prefer calling   {@link #fetchVerifyingPublicKeysWith} passing it an instance of {@link KeysDownloader}. It will take care of fetching fresh keys and caching in memory. Only use this method if you can't use   {@link #fetchVerifyingPublicKeysWith} and be aware you will needto handle Google key rotations yourself.
 */
public Builder addVerifyingPublicKey(int keyId,final ECPublicKey val) throws GeneralSecurityException {
  this.verifyingPublicKeysProviders.add(new VerifyingPublicKeysProvider(){
    @Override public Map<Integer,ECPublicKey> get() throws GeneralSecurityException {
      return Collections.singletonMap(keyId,val);
    }
  }
);
  return this;
}","/** 
 * Adds a verifying public key of the sender. <p><b>IMPORTANT</b>: Instead of using this method to set the verifying public keys of the sender, prefer calling   {@link #fetchVerifyingPublicKeysWith} passing it an instance of {@link KeysDownloader}. It will take care of fetching fresh keys and caching in memory. Only use this method if you can't use   {@link #fetchVerifyingPublicKeysWith} and be aware you will needto handle Google key rotations yourself.
 */
public Builder addVerifyingPublicKey(final int keyId,final ECPublicKey val) throws GeneralSecurityException {
  this.verifyingPublicKeysProviders.add(new VerifyingPublicKeysProvider(){
    @Override public Map<Integer,ECPublicKey> get() throws GeneralSecurityException {
      return Collections.singletonMap(keyId,val);
    }
  }
);
  return this;
}",0.9963144963144964
111224,"@Test public void testAesSiv192() throws Exception {
  byte[] key=Random.randBytes(48);
  AesSiv siv;
  try {
    siv=new AesSiv(key);
  }
 catch (  GeneralSecurityException ex) {
    System.out.println(""String_Node_Str"");
    return;
  }
  testEncryptionDecryption(siv,5,128,20);
}","@Test public void testAesSiv192() throws Exception {
  byte[] key=Random.randBytes(48);
  AesSiv siv;
  try {
    siv=new AesSiv(key);
  }
 catch (  GeneralSecurityException ex) {
    System.out.println(""String_Node_Str"" + ex.toString());
    return;
  }
  testEncryptionDecryption(siv,5,128,20);
}",0.9724137931034482
111225,"@Test public void testAesSiv256() throws Exception {
  byte[] key=Random.randBytes(64);
  AesSiv siv;
  try {
    siv=new AesSiv(key);
  }
 catch (  GeneralSecurityException ex) {
    System.out.println(""String_Node_Str"");
    return;
  }
  testEncryptionDecryption(siv,5,128,20);
}","@Test public void testAesSiv256() throws Exception {
  byte[] key=Random.randBytes(64);
  AesSiv siv;
  try {
    siv=new AesSiv(key);
  }
 catch (  GeneralSecurityException ex) {
    System.out.println(""String_Node_Str"" + ex.toString());
    return;
  }
  testEncryptionDecryption(siv,5,128,20);
}",0.9724137931034482
111226,"@Test public void testNonNullContextInfo() throws Exception {
  KeyPair uaKeyPair=EllipticCurves.generateKeyPair(WebPushConstants.NIST_P256_CURVE_TYPE);
  ECPrivateKey uaPrivateKey=(ECPrivateKey)uaKeyPair.getPrivate();
  ECPublicKey uaPublicKey=(ECPublicKey)uaKeyPair.getPublic();
  byte[] authSecret=Random.randBytes(16);
  HybridEncrypt hybridEncrypt=new WebPushHybridEncrypt.Builder().withAuthSecret(authSecret).withRecipientPublicKey(uaPublicKey).build();
  byte[] plaintext=Random.randBytes(20);
  byte[] contextInfo=new byte[0];
  try {
    byte[] ciphertext=hybridEncrypt.encrypt(plaintext,contextInfo);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException ex) {
  }
}","@Test public void testNonNullContextInfo() throws Exception {
  KeyPair uaKeyPair=EllipticCurves.generateKeyPair(WebPushConstants.NIST_P256_CURVE_TYPE);
  ECPublicKey uaPublicKey=(ECPublicKey)uaKeyPair.getPublic();
  byte[] authSecret=Random.randBytes(16);
  HybridEncrypt hybridEncrypt=new WebPushHybridEncrypt.Builder().withAuthSecret(authSecret).withRecipientPublicKey(uaPublicKey).build();
  byte[] plaintext=Random.randBytes(20);
  byte[] contextInfo=new byte[0];
  try {
    byte[] unusedCiphertext=hybridEncrypt.encrypt(plaintext,contextInfo);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException ex) {
  }
}",0.943939393939394
111227,"/** 
 * @param jsonKey JSON formated {@code AesCtrHmacAeadKey}-proto
 * @return {@code AesCtrHmacAeadKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    KeyManager<IndCpaCipher> aesCtrKeyManager=Registry.getKeyManager(AesCtrKeyManager.TYPE_URL);
    KeyManager<Mac> hmacKeyManager=Registry.getKeyManager(MacConfig.HMAC_TYPE_URL);
    return AesCtrHmacAeadKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setAesCtrKey((AesCtrKey)aesCtrKeyManager.jsonToKey(json.getJSONObject(""String_Node_Str"").toString(4).getBytes(Util.UTF_8))).setHmacKey((HmacKey)hmacKeyManager.jsonToKey(json.getJSONObject(""String_Node_Str"").toString(4).getBytes(Util.UTF_8))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code AesCtrHmacAeadKey}-proto
 * @return {@code AesCtrHmacAeadKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    KeyManager<IndCpaCipher> aesCtrKeyManager=Registry.getKeyManager(AesCtrKeyManager.TYPE_URL);
    KeyManager<Mac> hmacKeyManager=Registry.getKeyManager(MacConfig.HMAC_TYPE_URL);
    return AesCtrHmacAeadKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setAesCtrKey((AesCtrKey)aesCtrKeyManager.jsonToKey(json.getJSONObject(""String_Node_Str"").toString(4).getBytes(Util.UTF_8))).setHmacKey((HmacKey)hmacKeyManager.jsonToKey(json.getJSONObject(""String_Node_Str"").toString(4).getBytes(Util.UTF_8))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.999449642267474
111228,"/** 
 * @param jsonKeyFormat JSON formated {@code AesCtrHmacAeadKeyFromat}-proto
 * @return {@code AesCtrHmacAeadKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    KeyManager<IndCpaCipher> aesCtrKeyManager=Registry.getKeyManager(AesCtrKeyManager.TYPE_URL);
    KeyManager<Mac> hmacKeyManager=Registry.getKeyManager(MacConfig.HMAC_TYPE_URL);
    return AesCtrHmacAeadKeyFormat.newBuilder().setAesCtrKeyFormat((AesCtrKeyFormat)aesCtrKeyManager.jsonToKeyFormat(json.getJSONObject(""String_Node_Str"").toString(4).getBytes(Util.UTF_8))).setHmacKeyFormat((HmacKeyFormat)hmacKeyManager.jsonToKeyFormat(json.getJSONObject(""String_Node_Str"").toString(4).getBytes(Util.UTF_8))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKeyFormat JSON formatted {@code AesCtrHmacAeadKeyFromat}-proto
 * @return {@code AesCtrHmacAeadKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    KeyManager<IndCpaCipher> aesCtrKeyManager=Registry.getKeyManager(AesCtrKeyManager.TYPE_URL);
    KeyManager<Mac> hmacKeyManager=Registry.getKeyManager(MacConfig.HMAC_TYPE_URL);
    return AesCtrHmacAeadKeyFormat.newBuilder().setAesCtrKeyFormat((AesCtrKeyFormat)aesCtrKeyManager.jsonToKeyFormat(json.getJSONObject(""String_Node_Str"").toString(4).getBytes(Util.UTF_8))).setHmacKeyFormat((HmacKeyFormat)hmacKeyManager.jsonToKeyFormat(json.getJSONObject(""String_Node_Str"").toString(4).getBytes(Util.UTF_8))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9994734070563456
111229,"/** 
 * @param jsonKey JSON formated {@code AesCtrKey}-proto
 * @return {@code AesCtrKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return AesCtrKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code AesCtrKey}-proto
 * @return {@code AesCtrKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return AesCtrKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9992181391712276
111230,"/** 
 * @param jsonKeyFormat JSON formated {@code AesCtrKeyFromat}-proto
 * @return {@code AesCtrKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return AesCtrKeyFormat.newBuilder().setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKeyFormat JSON formatted {@code AesCtrKeyFromat}-proto
 * @return {@code AesCtrKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return AesCtrKeyFormat.newBuilder().setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.999129677980853
111231,"/** 
 * @param jsonKey JSON formated {@code AesEaxKey}-proto
 * @return {@code AesEaxKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return AesEaxKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code AesEaxKey}-proto
 * @return {@code AesEaxKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return AesEaxKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9992181391712276
111232,"/** 
 * @param jsonKeyFormat JSON formated {@code AesEaxKeyFromat}-proto
 * @return {@code AesEaxKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return AesEaxKeyFormat.newBuilder().setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKeyFormat JSON formatted {@code AesEaxKeyFromat}-proto
 * @return {@code AesEaxKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return AesEaxKeyFormat.newBuilder().setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.999129677980853
111233,"/** 
 * @param jsonKey JSON formated {@code AesGcmKey}-proto
 * @return {@code AesGcmKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return AesGcmKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code AesGcmKey}-proto
 * @return {@code AesGcmKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return AesGcmKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.999129677980853
111234,"/** 
 * @param jsonKeyFormat JSON formated {@code AesGcmKeyFromat}-proto
 * @return {@code AesGcmKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return AesGcmKeyFormat.newBuilder().setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKeyFormat JSON formatted {@code AesGcmKeyFromat}-proto
 * @return {@code AesGcmKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return AesGcmKeyFormat.newBuilder().setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9990186457311088
111235,"/** 
 * @param jsonKey JSON formated {@code ChaCha20Poly1305Key}-proto
 * @return {@code ChaCha20Poly1305Key}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return ChaCha20Poly1305Key.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code ChaCha20Poly1305Key}-proto
 * @return {@code ChaCha20Poly1305Key}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return ChaCha20Poly1305Key.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.999172870140612
111236,"/** 
 * @param jsonKey JSON formated {@code KmsAeadKey}-proto
 * @return {@code KmsAeadKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    return KmsAeadKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code KmsAeadKey}-proto
 * @return {@code KmsAeadKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    return KmsAeadKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9990557129367328
111237,"/** 
 * @param jsonKeyFormat JSON formated {@code KmsAeadKeyFromat}-proto
 * @return {@code KmsAeadKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return KmsAeadKeyFormat.newBuilder().setKeyUri(json.getString(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKeyFormat JSON formatted {@code KmsAeadKeyFromat}-proto
 * @return {@code KmsAeadKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return KmsAeadKeyFormat.newBuilder().setKeyUri(json.getString(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.999028182701652
111238,"/** 
 * @param jsonKey JSON formated {@code KmsEnvelopeAeadKey}-proto
 * @return {@code KmsEnvelopeAeadKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    return KmsEnvelopeAeadKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code KmsEnvelopeAeadKey}-proto
 * @return {@code KmsEnvelopeAeadKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    return KmsEnvelopeAeadKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.999096657633243
111239,"/** 
 * @param jsonKeyFormat JSON formated {@code KmsEnvelopeAeadKeyFromat}-proto
 * @return {@code KmsEnvelopeAeadKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return keyFormatFromJson(json);
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKeyFormat JSON formatted {@code KmsEnvelopeAeadKeyFromat}-proto
 * @return {@code KmsEnvelopeAeadKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return keyFormatFromJson(json);
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9989395546129376
111240,"/** 
 * @param jsonKey JSON formated {@code AesSivKey}-proto
 * @return {@code AesSivKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return AesSivKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code AesSivKey}-proto
 * @return {@code AesSivKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return AesSivKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.999129677980853
111241,"/** 
 * @param jsonKeyFormat JSON formated {@code AesSivKeyFromat}-proto
 * @return {@code AesSivKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return AesSivKeyFormat.newBuilder().setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKeyFormat JSON formatted {@code AesSivKeyFromat}-proto
 * @return {@code AesSivKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return AesSivKeyFormat.newBuilder().setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9990186457311088
111242,"/** 
 * @param jsonKey JSON formated {@code EciesAeadHkdfPublicKey}-proto
 * @return {@code EciesAeadHkdfPublicKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    return EciesAeadHkdfPublicKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setX(ByteString.copyFrom(Base64.decode(json.getString(""String_Node_Str"")))).setY(ByteString.copyFrom(Base64.decode(json.getString(""String_Node_Str"")))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code EciesAeadHkdfPublicKey}-proto
 * @return {@code EciesAeadHkdfPublicKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    return EciesAeadHkdfPublicKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setX(ByteString.copyFrom(Base64.decode(json.getString(""String_Node_Str"")))).setY(ByteString.copyFrom(Base64.decode(json.getString(""String_Node_Str"")))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9993031358885016
111243,"/** 
 * @param jsonKeyFormat JSON formated {@code EciesAeadHkdfPublicKeyFromat}-proto
 * @return {@code EciesAeadHkdfKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return EciesAeadHkdfKeyFormat.newBuilder().setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKeyFormat JSON formatted {@code EciesAeadHkdfPublicKeyFromat}-proto
 * @return {@code EciesAeadHkdfKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return EciesAeadHkdfKeyFormat.newBuilder().setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.999104744852283
111244,"/** 
 * @param jsonKey JSON formated {@code HmacKey}-proto
 * @return {@code HmacKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return HmacKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code HmacKey}-proto
 * @return {@code HmacKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return HmacKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9992107340173638
111245,"/** 
 * @param jsonKeyFormat JSON formated {@code HmacKeyFromat}-proto
 * @return {@code HmacKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return HmacKeyFormat.newBuilder().setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKeyFormat JSON formatted {@code HmacKeyFromat}-proto
 * @return {@code HmacKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return HmacKeyFormat.newBuilder().setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9991204925241864
111246,"/** 
 * @param jsonKey JSON formated {@code EcdsaPrivateKey}-proto
 * @return {@code EcdsaPrivateKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    EcdsaVerifyKeyManager publicKeyManager=new EcdsaVerifyKeyManager();
    return EcdsaPrivateKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setPublicKey((EcdsaPublicKey)publicKeyManager.jsonToKey(json.getJSONObject(""String_Node_Str"").toString(4).getBytes(Util.UTF_8))).setKeyValue(ByteString.copyFrom(Base64.decode(json.getString(""String_Node_Str"")))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code EcdsaPrivateKey}-proto
 * @return {@code EcdsaPrivateKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    EcdsaVerifyKeyManager publicKeyManager=new EcdsaVerifyKeyManager();
    return EcdsaPrivateKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setPublicKey((EcdsaPublicKey)publicKeyManager.jsonToKey(json.getJSONObject(""String_Node_Str"").toString(4).getBytes(Util.UTF_8))).setKeyValue(ByteString.copyFrom(Base64.decode(json.getString(""String_Node_Str"")))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9993451211525868
111247,"/** 
 * @param jsonKeyFormat JSON formated {@code EcdsaPrivateKeyFromat}-proto
 * @return {@code EcdsaKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  return new EcdsaVerifyKeyManager().jsonToKeyFormat(jsonKeyFormat);
}","/** 
 * @param jsonKeyFormat JSON formatted {@code EcdsaPrivateKeyFromat}-proto
 * @return {@code EcdsaKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  return new EcdsaVerifyKeyManager().jsonToKeyFormat(jsonKeyFormat);
}",0.9983361064891848
111248,"/** 
 * @param jsonKey JSON formated {@code Ed25519PrivateKey}-proto
 * @return {@code Ed25519PrivateKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    Ed25519PublicKeyManager publicKeyManager=new Ed25519PublicKeyManager();
    return Ed25519PrivateKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setKeyValue(ByteString.copyFrom(Base64.decode(json.getString(""String_Node_Str"")))).setPublicKey((Ed25519PublicKey)publicKeyManager.jsonToKey(json.getJSONObject(""String_Node_Str"").toString(4).getBytes(Util.UTF_8))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code Ed25519PrivateKey}-proto
 * @return {@code Ed25519PrivateKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    Ed25519PublicKeyManager publicKeyManager=new Ed25519PublicKeyManager();
    return Ed25519PrivateKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setKeyValue(ByteString.copyFrom(Base64.decode(json.getString(""String_Node_Str"")))).setPublicKey((Ed25519PublicKey)publicKeyManager.jsonToKey(json.getJSONObject(""String_Node_Str"").toString(4).getBytes(Util.UTF_8))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9993552546744036
111249,"/** 
 * @param jsonKey JSON formated {@code Ed25519PublicKey}-proto
 * @return {@code Ed25519PublicKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    return Ed25519PublicKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setKeyValue(ByteString.copyFrom(Base64.decode(json.getString(""String_Node_Str"")))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code Ed25519PublicKey}-proto
 * @return {@code Ed25519PublicKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    return Ed25519PublicKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setKeyValue(ByteString.copyFrom(Base64.decode(json.getString(""String_Node_Str"")))).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9991158267020336
111250,"/** 
 * @param jsonKey JSON formated {@code AesCtrHmacStreamingKey}-proto
 * @return {@code AesCtrHmacStreamingKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return AesCtrHmacStreamingKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code AesCtrHmacStreamingKey}-proto
 * @return {@code AesCtrHmacStreamingKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return AesCtrHmacStreamingKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9992630803242448
111251,"/** 
 * @param jsonKeyFormat JSON formated {@code AesCtrHmacStreamingKeyFromat}-proto
 * @return {@code AesCtrHmacStreamingKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return AesCtrHmacStreamingKeyFormat.newBuilder().setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKeyFormat JSON formatted {@code AesCtrHmacStreamingKeyFromat}-proto
 * @return {@code AesCtrHmacStreamingKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return AesCtrHmacStreamingKeyFormat.newBuilder().setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9991850040749796
111252,"/** 
 * @param jsonKey JSON formated {@code AesGcmHkdfStreamingKey}-proto
 * @return {@code AesGcmHkdfStreamingKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return AesGcmHkdfStreamingKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKey JSON formatted {@code AesGcmHkdfStreamingKey}-proto
 * @return {@code AesGcmHkdfStreamingKey}-proto
 */
@Override public MessageLite jsonToKey(final byte[] jsonKey) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKey,Util.UTF_8));
    validateKey(json);
    byte[] keyValue=Base64.decode(json.getString(""String_Node_Str""));
    return AesGcmHkdfStreamingKey.newBuilder().setVersion(json.getInt(""String_Node_Str"")).setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeyValue(ByteString.copyFrom(keyValue)).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9992630803242448
111253,"/** 
 * @param jsonKeyFormat JSON formated {@code AesGcmHkdfStreamingKeyFromat}-proto
 * @return {@code AesGcmHkdfStreamingKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return AesGcmHkdfStreamingKeyFormat.newBuilder().setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}","/** 
 * @param jsonKeyFormat JSON formatted {@code AesGcmHkdfStreamingKeyFromat}-proto
 * @return {@code AesGcmHkdfStreamingKeyFormat}-proto
 */
@Override public MessageLite jsonToKeyFormat(final byte[] jsonKeyFormat) throws GeneralSecurityException {
  try {
    JSONObject json=new JSONObject(new String(jsonKeyFormat,Util.UTF_8));
    validateKeyFormat(json);
    return AesGcmHkdfStreamingKeyFormat.newBuilder().setParams(paramsFromJson(json.getJSONObject(""String_Node_Str""))).setKeySize(json.getInt(""String_Node_Str"")).build();
  }
 catch (  JSONException e) {
    throw new GeneralSecurityException(e);
  }
}",0.9991850040749796
111254,"@Test public void testJsonExportAndImportErrors() throws Exception {
  AesCtrHmacAeadKeyManager keyManager=new AesCtrHmacAeadKeyManager();
  try {
    byte[] json=""String_Node_Str"".getBytes();
    AesCtrHmacAeadKey key=(AesCtrHmacAeadKey)keyManager.jsonToKey(json);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    byte[] json=""String_Node_Str"".getBytes();
    AesCtrHmacAeadKeyFormat format=(AesCtrHmacAeadKeyFormat)keyManager.jsonToKeyFormat(json);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    byte[] json=(""String_Node_Str"").getBytes();
    AesCtrHmacAeadKey key=(AesCtrHmacAeadKey)keyManager.jsonToKey(json);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    byte[] json=(""String_Node_Str"").getBytes();
    AesCtrHmacAeadKeyFormat format=(AesCtrHmacAeadKeyFormat)keyManager.jsonToKeyFormat(json);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    byte[] json=(""String_Node_Str"" + ""String_Node_Str"").getBytes();
    AesCtrHmacAeadKey key=(AesCtrHmacAeadKey)keyManager.jsonToKey(json);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    byte[] json=(""String_Node_Str"" + ""String_Node_Str"").getBytes();
    AesCtrHmacAeadKeyFormat format=(AesCtrHmacAeadKeyFormat)keyManager.jsonToKeyFormat(json);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    AesCtrHmacAeadKey key=AesCtrHmacAeadKey.newBuilder().setVersion(42).build();
    byte[] json=keyManager.keyToJson(key.toByteString());
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
  }
  try {
    AesCtrHmacAeadKeyFormat format=AesCtrHmacAeadKeyFormat.newBuilder().setAesCtrKeyFormat(AesCtrKeyFormat.newBuilder().setKeySize(42).build()).build();
    byte[] json=keyManager.keyFormatToJson(format.toByteString());
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
  }
  try {
    KeyData key=KeyData.newBuilder().setTypeUrl(""String_Node_Str"").setValue(ByteString.copyFromUtf8(""String_Node_Str"")).build();
    byte[] json=keyManager.keyToJson(key.toByteString());
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    KeyData format=KeyData.newBuilder().setTypeUrl(""String_Node_Str"").setValue(ByteString.copyFromUtf8(""String_Node_Str"")).build();
    byte[] json=keyManager.keyFormatToJson(format.toByteString());
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
  }
}","@Test @SuppressWarnings(""String_Node_Str"") public void testJsonExportAndImportErrors() throws Exception {
  AesCtrHmacAeadKeyManager keyManager=new AesCtrHmacAeadKeyManager();
  try {
    byte[] json=""String_Node_Str"".getBytes(Util.UTF_8);
    AesCtrHmacAeadKey key=(AesCtrHmacAeadKey)keyManager.jsonToKey(json);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    byte[] json=""String_Node_Str"".getBytes(Util.UTF_8);
    AesCtrHmacAeadKeyFormat format=(AesCtrHmacAeadKeyFormat)keyManager.jsonToKeyFormat(json);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    byte[] json=(""String_Node_Str"").getBytes(Util.UTF_8);
    AesCtrHmacAeadKey key=(AesCtrHmacAeadKey)keyManager.jsonToKey(json);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    byte[] json=(""String_Node_Str"").getBytes(Util.UTF_8);
    AesCtrHmacAeadKeyFormat format=(AesCtrHmacAeadKeyFormat)keyManager.jsonToKeyFormat(json);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    byte[] json=(""String_Node_Str"" + ""String_Node_Str"").getBytes(Util.UTF_8);
    AesCtrHmacAeadKey key=(AesCtrHmacAeadKey)keyManager.jsonToKey(json);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    byte[] json=(""String_Node_Str"" + ""String_Node_Str"").getBytes(Util.UTF_8);
    AesCtrHmacAeadKeyFormat format=(AesCtrHmacAeadKeyFormat)keyManager.jsonToKeyFormat(json);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    AesCtrHmacAeadKey key=AesCtrHmacAeadKey.newBuilder().setVersion(42).build();
    byte[] json=keyManager.keyToJson(key.toByteString());
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
  }
  try {
    AesCtrHmacAeadKeyFormat format=AesCtrHmacAeadKeyFormat.newBuilder().setAesCtrKeyFormat(AesCtrKeyFormat.newBuilder().setKeySize(42).build()).build();
    byte[] json=keyManager.keyFormatToJson(format.toByteString());
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
  }
  try {
    KeyData key=KeyData.newBuilder().setTypeUrl(""String_Node_Str"").setValue(ByteString.copyFromUtf8(""String_Node_Str"")).build();
    byte[] json=keyManager.keyToJson(key.toByteString());
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
  }
  try {
    KeyData format=KeyData.newBuilder().setTypeUrl(""String_Node_Str"").setValue(ByteString.copyFromUtf8(""String_Node_Str"")).build();
    byte[] json=keyManager.keyFormatToJson(format.toByteString());
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertExceptionContains(e,""String_Node_Str"");
  }
}",0.9853407888771346
111255,"@Test public void testShouldFailIfSignatureWasChanged() throws Exception {
  EcdsaSignJce signer=new EcdsaSignJce(EllipticCurves.getEcPrivateKey(Base64.decode(GOOGLE_SIGNING_PRIVATE_KEY_PKCS8_BASE64)),""String_Node_Str"");
  RewardedAdsVerifier verifier=new RewardedAdsVerifier.Builder().setVerifyingPublicKeys(GOOGLE_VERIFYING_PUBLIC_KEYS_JSON).build();
  byte[] validSig=signer.sign(REWARD_URL.getBytes(UTF_8));
  for (int i=0; i < validSig.length; i++) {
    byte[] modifiedSig=Arrays.copyOf(validSig,validSig.length);
    modifiedSig[i]^=0xff;
    String modifiedUrl=buildUrl(REWARD_URL,modifiedSig,KEY_ID);
    try {
      verifier.verify(modifiedUrl);
      fail(""String_Node_Str"");
    }
 catch (    GeneralSecurityException e) {
      System.out.println(e);
    }
  }
}","@Test public void testShouldFailIfSignatureWasChanged() throws Exception {
  EcdsaSignJce signer=new EcdsaSignJce(EllipticCurves.getEcPrivateKey(Base64.decode(GOOGLE_SIGNING_PRIVATE_KEY_PKCS8_BASE64)),""String_Node_Str"");
  RewardedAdsVerifier verifier=new RewardedAdsVerifier.Builder().setVerifyingPublicKeys(GOOGLE_VERIFYING_PUBLIC_KEYS_JSON).build();
  byte[] validSig=signer.sign(REWARD_URL.getBytes(UTF_8));
  for (int i=0; i < validSig.length; i++) {
    byte[] modifiedSig=Arrays.copyOf(validSig,validSig.length);
    modifiedSig[i]=(byte)(modifiedSig[i] ^ 0xff);
    String modifiedUrl=buildUrl(REWARD_URL,modifiedSig,KEY_ID);
    try {
      verifier.verify(modifiedUrl);
      fail(""String_Node_Str"");
    }
 catch (    GeneralSecurityException e) {
      System.out.println(e);
    }
  }
}",0.983481575603558
111256,"@Test public void testShouldFailIfSignedMessageWasChanged() throws Exception {
  RewardedAdsVerifier verifier=new RewardedAdsVerifier.Builder().setVerifyingPublicKeys(GOOGLE_VERIFYING_PUBLIC_KEYS_JSON).build();
  byte[] validSignedUrl=signUrl(REWARD_URL,GOOGLE_SIGNING_PRIVATE_KEY_PKCS8_BASE64,KEY_ID).getBytes(UTF_8);
  for (int i=REWARD_HOST_AND_PATH.length(); i < REWARD_URL.length(); i++) {
    byte[] modifiedUrl=Arrays.copyOf(validSignedUrl,validSignedUrl.length);
    modifiedUrl[i]^=0xff;
    try {
      verifier.verify(new String(modifiedUrl,UTF_8));
      fail(""String_Node_Str"");
    }
 catch (    GeneralSecurityException e) {
      assertEquals(""String_Node_Str"",e.getMessage());
    }
  }
}","@Test public void testShouldFailIfSignedMessageWasChanged() throws Exception {
  RewardedAdsVerifier verifier=new RewardedAdsVerifier.Builder().setVerifyingPublicKeys(GOOGLE_VERIFYING_PUBLIC_KEYS_JSON).build();
  byte[] validSignedUrl=signUrl(REWARD_URL,GOOGLE_SIGNING_PRIVATE_KEY_PKCS8_BASE64,KEY_ID).getBytes(UTF_8);
  for (int i=REWARD_HOST_AND_PATH.length(); i < REWARD_URL.length(); i++) {
    byte[] modifiedUrl=Arrays.copyOf(validSignedUrl,validSignedUrl.length);
    modifiedUrl[i]=(byte)(modifiedUrl[i] ^ 0xff);
    try {
      verifier.verify(new String(modifiedUrl,UTF_8));
      fail(""String_Node_Str"");
    }
 catch (    GeneralSecurityException e) {
      assertEquals(""String_Node_Str"",e.getMessage());
    }
  }
}",0.9818688981868898
111257,"@Test public void testErrors() throws Exception {
  HybridDecryptCatalogue catalogue=new HybridDecryptCatalogue();
  String keyType=""String_Node_Str"";
  try {
    KeyManager<HybridDecrypt> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertThat(e.toString()).contains(""String_Node_Str"");
  }
  try {
    KeyManager<HybridDecrypt> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",1);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertThat(e.toString()).contains(""String_Node_Str"");
    assertThat(e.toString()).contains(""String_Node_Str"");
  }
  try {
    KeyManager<HybridDecrypt> manager=catalogue.getKeyManager(""String_Node_Str"",""String_Node_Str"",0);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertThat(e.toString()).contains(""String_Node_Str"");
    assertThat(e.toString()).contains(""String_Node_Str"");
  }
}","@Test public void testErrors() throws Exception {
  HybridDecryptCatalogue catalogue=new HybridDecryptCatalogue();
  String keyType=""String_Node_Str"";
  try {
    catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertThat(e.toString()).contains(""String_Node_Str"");
  }
  try {
    catalogue.getKeyManager(keyType,""String_Node_Str"",1);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertThat(e.toString()).contains(""String_Node_Str"");
    assertThat(e.toString()).contains(""String_Node_Str"");
  }
  try {
    catalogue.getKeyManager(""String_Node_Str"",""String_Node_Str"",0);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertThat(e.toString()).contains(""String_Node_Str"");
    assertThat(e.toString()).contains(""String_Node_Str"");
  }
}",0.9452789699570816
111258,"@Test public void testBasic() throws Exception {
  HybridDecryptCatalogue catalogue=new HybridDecryptCatalogue();
  String keyType=""String_Node_Str"";
{
    KeyManager<HybridDecrypt> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    assertThat(manager.doesSupport(keyType)).isTrue();
  }
{
    KeyManager<HybridDecrypt> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    assertThat(manager.doesSupport(keyType)).isTrue();
  }
{
    KeyManager<HybridDecrypt> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    assertThat(manager.doesSupport(keyType)).isTrue();
  }
  RegistryConfig config=HybridConfig.TINK_1_0_0;
  int count=0;
  for (  KeyTypeEntry entry : config.getEntryList()) {
    if (entry.getPrimitiveName() == ""String_Node_Str"") {
      count=count + 1;
      KeyManager<HybridDecrypt> manager=catalogue.getKeyManager(entry.getTypeUrl(),""String_Node_Str"",entry.getKeyManagerVersion());
      assertThat(manager.doesSupport(entry.getTypeUrl())).isTrue();
    }
  }
  assertEquals(1,count);
}","@Test public void testBasic() throws Exception {
  HybridDecryptCatalogue catalogue=new HybridDecryptCatalogue();
  String keyType=""String_Node_Str"";
{
    KeyManager<HybridDecrypt> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    assertThat(manager.doesSupport(keyType)).isTrue();
  }
{
    KeyManager<HybridDecrypt> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    assertThat(manager.doesSupport(keyType)).isTrue();
  }
{
    KeyManager<HybridDecrypt> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    assertThat(manager.doesSupport(keyType)).isTrue();
  }
  RegistryConfig config=HybridConfig.TINK_1_0_0;
  int count=0;
  for (  KeyTypeEntry entry : config.getEntryList()) {
    if (""String_Node_Str"".equals(entry.getPrimitiveName())) {
      count=count + 1;
      KeyManager<HybridDecrypt> manager=catalogue.getKeyManager(entry.getTypeUrl(),""String_Node_Str"",entry.getKeyManagerVersion());
      assertThat(manager.doesSupport(entry.getTypeUrl())).isTrue();
    }
  }
  assertEquals(1,count);
}",0.9775441949354992
111259,"@Test public void testErrors() throws Exception {
  PublicKeyVerifyCatalogue catalogue=new PublicKeyVerifyCatalogue();
  String keyType=""String_Node_Str"";
  try {
    KeyManager<PublicKeyVerify> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertThat(e.toString()).contains(""String_Node_Str"");
  }
  try {
    KeyManager<PublicKeyVerify> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",1);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertThat(e.toString()).contains(""String_Node_Str"");
    assertThat(e.toString()).contains(""String_Node_Str"");
  }
  try {
    KeyManager<PublicKeyVerify> manager=catalogue.getKeyManager(""String_Node_Str"",""String_Node_Str"",0);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertThat(e.toString()).contains(""String_Node_Str"");
    assertThat(e.toString()).contains(""String_Node_Str"");
  }
}","@Test public void testErrors() throws Exception {
  PublicKeyVerifyCatalogue catalogue=new PublicKeyVerifyCatalogue();
  String keyType=""String_Node_Str"";
  try {
    catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertThat(e.toString()).contains(""String_Node_Str"");
  }
  try {
    catalogue.getKeyManager(keyType,""String_Node_Str"",1);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertThat(e.toString()).contains(""String_Node_Str"");
    assertThat(e.toString()).contains(""String_Node_Str"");
  }
  try {
    catalogue.getKeyManager(""String_Node_Str"",""String_Node_Str"",0);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertThat(e.toString()).contains(""String_Node_Str"");
    assertThat(e.toString()).contains(""String_Node_Str"");
  }
}",0.9424920127795527
111260,"@Test public void testBasic() throws Exception {
  PublicKeyVerifyCatalogue catalogue=new PublicKeyVerifyCatalogue();
  String keyType=""String_Node_Str"";
{
    KeyManager<PublicKeyVerify> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    assertThat(manager.doesSupport(keyType)).isTrue();
  }
{
    KeyManager<PublicKeyVerify> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    assertThat(manager.doesSupport(keyType)).isTrue();
  }
{
    KeyManager<PublicKeyVerify> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    assertThat(manager.doesSupport(keyType)).isTrue();
  }
  RegistryConfig config=SignatureConfig.TINK_1_0_0;
  int count=0;
  for (  KeyTypeEntry entry : config.getEntryList()) {
    if (entry.getPrimitiveName() == ""String_Node_Str"") {
      count=count + 1;
      KeyManager<PublicKeyVerify> manager=catalogue.getKeyManager(entry.getTypeUrl(),""String_Node_Str"",entry.getKeyManagerVersion());
      assertThat(manager.doesSupport(entry.getTypeUrl())).isTrue();
    }
  }
  assertEquals(2,count);
}","@Test public void testBasic() throws Exception {
  PublicKeyVerifyCatalogue catalogue=new PublicKeyVerifyCatalogue();
  String keyType=""String_Node_Str"";
{
    KeyManager<PublicKeyVerify> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    assertThat(manager.doesSupport(keyType)).isTrue();
  }
{
    KeyManager<PublicKeyVerify> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    assertThat(manager.doesSupport(keyType)).isTrue();
  }
{
    KeyManager<PublicKeyVerify> manager=catalogue.getKeyManager(keyType,""String_Node_Str"",0);
    assertThat(manager.doesSupport(keyType)).isTrue();
  }
  RegistryConfig config=SignatureConfig.TINK_1_0_0;
  int count=0;
  for (  KeyTypeEntry entry : config.getEntryList()) {
    if (""String_Node_Str"".equals(entry.getPrimitiveName())) {
      count=count + 1;
      KeyManager<PublicKeyVerify> manager=catalogue.getKeyManager(entry.getTypeUrl(),""String_Node_Str"",entry.getKeyManagerVersion());
      assertThat(manager.doesSupport(entry.getTypeUrl())).isTrue();
    }
  }
  assertEquals(2,count);
}",0.9778615167216204
111261,"@Test(expected=IllegalArgumentException.class) public void xorByteBufferLengthLargerThanFirstInput(){
  ByteBuffer output=ByteBuffer.allocate(10);
  ByteBuffer x=ByteBuffer.allocate(9);
  ByteBuffer y=ByteBuffer.allocate(10);
  Bytes.xor(output,x,y,10);
}","@Test public void xorByteBufferLengthLargerThanFirstInput(){
  ByteBuffer output=ByteBuffer.allocate(10);
  ByteBuffer x=ByteBuffer.allocate(9);
  ByteBuffer y=ByteBuffer.allocate(10);
  try {
    Bytes.xor(output,x,y,10);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
}",0.7684021543985637
111262,"@Test(expected=IllegalArgumentException.class) public void xorByteBufferLengthLargerThanSecondInput(){
  ByteBuffer output=ByteBuffer.allocate(10);
  ByteBuffer x=ByteBuffer.allocate(10);
  ByteBuffer y=ByteBuffer.allocate(9);
  Bytes.xor(output,x,y,10);
}","@Test public void xorByteBufferLengthLargerThanSecondInput(){
  ByteBuffer output=ByteBuffer.allocate(10);
  ByteBuffer x=ByteBuffer.allocate(10);
  ByteBuffer y=ByteBuffer.allocate(9);
  try {
    Bytes.xor(output,x,y,10);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
}",0.7692307692307693
111263,"@Test(expected=IllegalArgumentException.class) public void xorByteBufferLengthLargerThanOutput(){
  ByteBuffer output=ByteBuffer.allocate(9);
  ByteBuffer x=ByteBuffer.allocate(10);
  ByteBuffer y=ByteBuffer.allocate(10);
  Bytes.xor(output,x,y,10);
}","@Test public void xorByteBufferLengthLargerThanOutput(){
  ByteBuffer output=ByteBuffer.allocate(9);
  ByteBuffer x=ByteBuffer.allocate(10);
  ByteBuffer y=ByteBuffer.allocate(10);
  try {
    Bytes.xor(output,x,y,10);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
}",0.7650273224043715
111264,"@Test(expected=IllegalArgumentException.class) public void xorByteBufferNegativeLength(){
  ByteBuffer output=ByteBuffer.allocate(10);
  ByteBuffer x=ByteBuffer.allocate(10);
  ByteBuffer y=ByteBuffer.allocate(10);
  Bytes.xor(output,x,y,-1);
}","@Test public void xorByteBufferNegativeLength(){
  ByteBuffer output=ByteBuffer.allocate(10);
  ByteBuffer x=ByteBuffer.allocate(10);
  ByteBuffer y=ByteBuffer.allocate(10);
  try {
    Bytes.xor(output,x,y,-1);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
}",0.1495327102803738
111265,"@Test public void testWycheproofVectors() throws Exception {
  JSONObject json=WycheproofTestUtil.readJson(""String_Node_Str"");
  WycheproofTestUtil.checkAlgAndVersion(json,""String_Node_Str"",""String_Node_Str"");
  int numTests=json.getInt(""String_Node_Str"");
  int cntTests=0;
  int cntSkippedTests=0;
  int errors=0;
  JSONArray testGroups=json.getJSONArray(""String_Node_Str"");
  for (int i=0; i < testGroups.length(); i++) {
    JSONObject group=testGroups.getJSONObject(i);
    int keySize=group.getInt(""String_Node_Str"");
    JSONArray tests=group.getJSONArray(""String_Node_Str"");
    for (int j=0; j < tests.length(); j++) {
      cntTests++;
      JSONObject testcase=tests.getJSONObject(j);
      int tcid=testcase.getInt(""String_Node_Str"");
      String tc=""String_Node_Str"" + tcid + ""String_Node_Str""+ testcase.getString(""String_Node_Str"");
      byte[] iv=Hex.decode(testcase.getString(""String_Node_Str""));
      byte[] key=Hex.decode(testcase.getString(""String_Node_Str""));
      byte[] msg=Hex.decode(testcase.getString(""String_Node_Str""));
      byte[] aad=Hex.decode(testcase.getString(""String_Node_Str""));
      byte[] ct=Hex.decode(testcase.getString(""String_Node_Str""));
      byte[] tag=Hex.decode(testcase.getString(""String_Node_Str""));
      byte[] ciphertext=Bytes.concat(iv,ct,tag);
      String result=testcase.getString(""String_Node_Str"");
      try {
        Aead aead=createInstance(key);
        byte[] decrypted=aead.decrypt(ciphertext,aad);
        boolean eq=TestUtil.arrayEquals(decrypted,msg);
        if (result.equals(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"" + tc + ""String_Node_Str""+ eq);
          errors++;
        }
 else {
          if (!eq) {
            System.out.println(""String_Node_Str"" + tc + ""String_Node_Str""+ TestUtil.hexEncode(decrypted));
          }
        }
      }
 catch (      GeneralSecurityException ex) {
        if (result.equals(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"" + tc);
          errors++;
        }
      }
    }
  }
  assertEquals(0,errors);
  assertEquals(numTests,cntTests + cntSkippedTests);
}","@Test public void testWycheproofVectors() throws Exception {
  JSONObject json=WycheproofTestUtil.readJson(""String_Node_Str"");
  WycheproofTestUtil.checkAlgAndVersion(json,""String_Node_Str"",""String_Node_Str"");
  int numTests=json.getInt(""String_Node_Str"");
  int cntTests=0;
  int cntSkippedTests=0;
  int errors=0;
  JSONArray testGroups=json.getJSONArray(""String_Node_Str"");
  for (int i=0; i < testGroups.length(); i++) {
    JSONObject group=testGroups.getJSONObject(i);
    JSONArray tests=group.getJSONArray(""String_Node_Str"");
    for (int j=0; j < tests.length(); j++) {
      cntTests++;
      JSONObject testcase=tests.getJSONObject(j);
      int tcid=testcase.getInt(""String_Node_Str"");
      String tc=""String_Node_Str"" + tcid + ""String_Node_Str""+ testcase.getString(""String_Node_Str"");
      byte[] iv=Hex.decode(testcase.getString(""String_Node_Str""));
      byte[] key=Hex.decode(testcase.getString(""String_Node_Str""));
      byte[] msg=Hex.decode(testcase.getString(""String_Node_Str""));
      byte[] aad=Hex.decode(testcase.getString(""String_Node_Str""));
      byte[] ct=Hex.decode(testcase.getString(""String_Node_Str""));
      byte[] tag=Hex.decode(testcase.getString(""String_Node_Str""));
      byte[] ciphertext=Bytes.concat(iv,ct,tag);
      String result=testcase.getString(""String_Node_Str"");
      try {
        Aead aead=createInstance(key);
        byte[] decrypted=aead.decrypt(ciphertext,aad);
        boolean eq=TestUtil.arrayEquals(decrypted,msg);
        if (result.equals(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"" + tc + ""String_Node_Str""+ eq);
          errors++;
        }
 else {
          if (!eq) {
            System.out.println(""String_Node_Str"" + tc + ""String_Node_Str""+ TestUtil.hexEncode(decrypted));
          }
        }
      }
 catch (      GeneralSecurityException ex) {
        if (result.equals(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"" + tc);
          errors++;
        }
      }
    }
  }
  assertEquals(0,errors);
  assertEquals(numTests,cntTests + cntSkippedTests);
}",0.988313856427379
111266,"/** 
 * Tests encryption and decryption functionalities using   {@code encryptionStreamingAead} forencryption and  {@code decryptionStreamingAead} for decryption on inputs {@code plaintext} and{@code aad}.
 */
public static void testEncryptionAndDecryption(StreamingAead encryptionStreamingAead,StreamingAead decryptionStreamingAead,byte[] plaintext,byte[] aad) throws Exception {
  ByteArrayOutputStream ciphertext=new ByteArrayOutputStream();
  WritableByteChannel encChannel=encryptionStreamingAead.newEncryptingChannel(Channels.newChannel(ciphertext),aad);
  encChannel.write(ByteBuffer.wrap(plaintext));
  encChannel.close();
{
    ByteBufferChannel ciphertextChannel=new ByteBufferChannel(ciphertext.toByteArray());
    ReadableByteChannel decChannel=decryptionStreamingAead.newDecryptingChannel(ciphertextChannel,aad);
    ByteBuffer decrypted=ByteBuffer.allocate(plaintext.length);
    int readCount=decChannel.read(decrypted);
    TestUtil.assertByteArrayEquals(plaintext,decrypted.array());
  }
{
    ByteBufferChannel ciphertextChannel=new ByteBufferChannel(ciphertext.toByteArray());
    SeekableByteChannel decChannel=decryptionStreamingAead.newSeekableDecryptingChannel(ciphertextChannel,aad);
    ByteBuffer decrypted=ByteBuffer.allocate(plaintext.length);
    int readCount=decChannel.read(decrypted);
    TestUtil.assertByteArrayEquals(plaintext,decrypted.array());
  }
}","/** 
 * Tests encryption and decryption functionalities using   {@code encryptionStreamingAead} forencryption and  {@code decryptionStreamingAead} for decryption on inputs {@code plaintext} and{@code aad}.
 */
public static void testEncryptionAndDecryption(StreamingAead encryptionStreamingAead,StreamingAead decryptionStreamingAead,byte[] plaintext,byte[] aad) throws Exception {
  ByteArrayOutputStream ciphertext=new ByteArrayOutputStream();
  WritableByteChannel encChannel=encryptionStreamingAead.newEncryptingChannel(Channels.newChannel(ciphertext),aad);
  encChannel.write(ByteBuffer.wrap(plaintext));
  encChannel.close();
{
    ByteBufferChannel ciphertextChannel=new ByteBufferChannel(ciphertext.toByteArray());
    ReadableByteChannel decChannel=decryptionStreamingAead.newDecryptingChannel(ciphertextChannel,aad);
    ByteBuffer decrypted=ByteBuffer.allocate(plaintext.length);
    int unused=decChannel.read(decrypted);
    TestUtil.assertByteArrayEquals(plaintext,decrypted.array());
  }
{
    ByteBufferChannel ciphertextChannel=new ByteBufferChannel(ciphertext.toByteArray());
    SeekableByteChannel decChannel=decryptionStreamingAead.newSeekableDecryptingChannel(ciphertextChannel,aad);
    ByteBuffer decrypted=ByteBuffer.allocate(plaintext.length);
    int unused=decChannel.read(decrypted);
    TestUtil.assertByteArrayEquals(plaintext,decrypted.array());
  }
}",0.9891696750902528
111267,"@Test public void testModifiedCiphertext() throws Exception {
  byte[] ikm=TestUtil.hexDecode(""String_Node_Str"");
  int keySize=16;
  int tagSize=12;
  int segmentSize=256;
  int offset=8;
  int plaintextSize=512;
  AesCtrHmacStreaming ags=new AesCtrHmacStreaming(ikm,keySize,tagSize,segmentSize,offset);
  StreamingTestUtil.testModifiedCiphertext(ags,segmentSize,offset);
}","@Test public void testModifiedCiphertext() throws Exception {
  byte[] ikm=TestUtil.hexDecode(""String_Node_Str"");
  int keySize=16;
  int tagSize=12;
  int segmentSize=256;
  int offset=8;
  AesCtrHmacStreaming ags=new AesCtrHmacStreaming(ikm,keySize,tagSize,segmentSize,offset);
  StreamingTestUtil.testModifiedCiphertext(ags,segmentSize,offset);
}",0.9654218533886584
111268,"public static KeyTypeEntry getTinkKeyTypeEntry(String catalogueName,String primitiveName,String keyProtoName,int keyManagerVersion,boolean newKeyAllowed){
  return KeyTypeEntry.newBuilder().setPrimitiveName(primitiveName).setTypeUrl(""String_Node_Str"" + keyProtoName).setKeyManagerVersion(keyManagerVersion).setNewKeyAllowed(newKeyAllowed).setCatalogueName(catalogueName).build();
}","/** 
 * Returns a   {@link KeyTypeEntry} for Tink key types with the specified properties.
 */
public static KeyTypeEntry getTinkKeyTypeEntry(String catalogueName,String primitiveName,String keyProtoName,int keyManagerVersion,boolean newKeyAllowed){
  return KeyTypeEntry.newBuilder().setPrimitiveName(primitiveName).setTypeUrl(""String_Node_Str"" + keyProtoName).setKeyManagerVersion(keyManagerVersion).setNewKeyAllowed(newKeyAllowed).setCatalogueName(catalogueName).build();
}",0.8891481913652275
111269,"/** 
 * Registers a key manager according to the specification in   {@code entry}.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void registerKeyType(KeyTypeEntry entry) throws GeneralSecurityException {
  validate(entry);
  Catalogue catalogue=Registry.getCatalogue(entry.getCatalogueName());
  KeyManager keyManager=catalogue.getKeyManager(entry.getTypeUrl(),entry.getPrimitiveName(),entry.getKeyManagerVersion());
  Registry.registerKeyManager(entry.getTypeUrl(),keyManager,entry.getNewKeyAllowed());
}","/** 
 * Tries to register a key manager according to the specification in   {@code entry}.
 * @throws GeneralSecurityException if cannot register this config with the {@link Registry}. This usually happens when   {@code entry} is already registered or the Registry cannot findany  {@link com.google.crypto.tink.KeyManager} or {@link com.google.crypto.tink.Catalogue}that can handle the entry. In both cases the error message should show how to resolve it.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void registerKeyType(KeyTypeEntry entry) throws GeneralSecurityException {
  validate(entry);
  Catalogue catalogue=Registry.getCatalogue(entry.getCatalogueName());
  KeyManager keyManager=catalogue.getKeyManager(entry.getTypeUrl(),entry.getPrimitiveName(),entry.getKeyManagerVersion());
  Registry.registerKeyManager(entry.getTypeUrl(),keyManager,entry.getNewKeyAllowed());
}",0.7286606523247745
111270,"/** 
 * Registers key managers according to the specification in   {@code config}.
 */
public static void register(RegistryConfig config) throws GeneralSecurityException {
  logger.info(""String_Node_Str"" + config.getConfigName() + ""String_Node_Str"");
  for (  KeyTypeEntry entry : config.getEntryList()) {
    registerKeyType(entry);
  }
  logger.info(""String_Node_Str"" + config.getConfigName() + ""String_Node_Str"");
}","/** 
 * Tries to register key managers according to the specification in   {@code config}.
 * @throws GeneralSecurityException if cannot register this config with the {@link Registry}. This usually happens when either   {@code config} contains any {@link KeyTypeEntry} that isalready registered or the Registry cannot find any  {@link com.google.crypto.tink.KeyManager}or   {@link com.google.crypto.tink.Catalogue} that can handle the entry. In both cases theerror message should show how to resolve it.
 */
public static void register(RegistryConfig config) throws GeneralSecurityException {
  for (  KeyTypeEntry entry : config.getEntryList()) {
    registerKeyType(entry);
  }
}",0.362147406733394
111271,"private JsonKeysetReader(String input){
  this(new JSONObject(input));
}","private JsonKeysetReader(String input){
  try {
    json=new JSONObject(input);
  }
 catch (  JSONException e) {
    throw new IllegalArgumentException(e);
  }
}",0.592274678111588
111272,"/** 
 * Resets the registry.  After reset the registry is empty, i.e. it contains no key managers. This method is intended for testing.
 */
public static synchronized void reset(){
  keyManagerMap.clear();
  newKeyAllowedMap.clear();
  catalogueMap.clear();
}","/** 
 * Resets the registry. <p>After reset the registry is empty, i.e. it contains no key managers. Thus one might need to call   {@code XyzConfig.init()} to re-install the catalogues.<p>This method is intended for testing.
 */
static synchronized void reset(){
  keyManagerMap.clear();
  newKeyAllowedMap.clear();
  catalogueMap.clear();
}",0.8366666666666667
111273,"/** 
 * Registers   {@code manager} for the given {@code typeUrl}. If   {@code newKeyAllowed} is true,users can generate new keys with this manager using the  {@link Registry#newKey} methods.<p>If there is an existing key manager, throw exception if  {@code manager} and the existingkey manager aren't instances of the same class, and do nothing if they are.
 * @throws IllegalArgumentException if {@code manager} is null.
 * @throws GeneralSecurityException if there's an existing key manager is not an instance ofthe same class as  {@code manager}.
 */
@SuppressWarnings(""String_Node_Str"") public static synchronized <P>void registerKeyManager(String typeUrl,final KeyManager<P> manager,boolean newKeyAllowed) throws GeneralSecurityException {
  if (manager == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (keyManagerMap.containsKey(typeUrl)) {
    KeyManager<P> existingManager=getKeyManager(typeUrl);
    boolean existingNewKeyAllowed=newKeyAllowedMap.get(typeUrl).booleanValue();
    if (!manager.getClass().equals(existingManager.getClass()) || (!existingNewKeyAllowed && newKeyAllowed)) {
      logger.warning(""String_Node_Str"" + typeUrl);
      throw new GeneralSecurityException(String.format(""String_Node_Str"",typeUrl,existingManager.getClass().getName(),manager.getClass().getName()));
    }
  }
  keyManagerMap.put(typeUrl,manager);
  newKeyAllowedMap.put(typeUrl,Boolean.valueOf(newKeyAllowed));
  logger.info(""String_Node_Str"" + manager.getClass().getName() + ""String_Node_Str""+ typeUrl);
}","/** 
 * Registers   {@code manager} for the given {@code typeUrl}. If   {@code newKeyAllowed} is true,users can generate new keys with this manager using the  {@link Registry#newKey} methods.<p>If there is an existing key manager, throw exception if  {@code manager} and the existingkey manager aren't instances of the same class, and do nothing if they are.
 * @throws IllegalArgumentException if {@code manager} is null.
 * @throws GeneralSecurityException if there's an existing key manager is not an instance ofthe same class as  {@code manager}.
 */
@SuppressWarnings(""String_Node_Str"") public static synchronized <P>void registerKeyManager(String typeUrl,final KeyManager<P> manager,boolean newKeyAllowed) throws GeneralSecurityException {
  if (manager == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (keyManagerMap.containsKey(typeUrl)) {
    KeyManager<P> existingManager=getKeyManager(typeUrl);
    boolean existingNewKeyAllowed=newKeyAllowedMap.get(typeUrl).booleanValue();
    if (!manager.getClass().equals(existingManager.getClass()) || (!existingNewKeyAllowed && newKeyAllowed)) {
      logger.warning(""String_Node_Str"" + typeUrl);
      throw new GeneralSecurityException(String.format(""String_Node_Str"",typeUrl,existingManager.getClass().getName(),manager.getClass().getName()));
    }
  }
  keyManagerMap.put(typeUrl,manager);
  newKeyAllowedMap.put(typeUrl,Boolean.valueOf(newKeyAllowed));
}",0.9684139784946236
111274,"/** 
 * Registers   {@link Aead} catalogues with the {@link Registry}. <p>Because Aead key types depend on   {@link Mac} key types, this method alsoregisters all  {@link Mac} catalogues.
 */
public static void init() throws GeneralSecurityException {
  Registry.addCatalogue(CATALOGUE_NAME,new AeadCatalogue());
  MacConfig.init();
}","/** 
 * Tries to register with the   {@link Registry} all instances of{@link com.google.crypto.tink.Catalogue} needed to handle Aead key types supported in Tink.<p>Because Aead key types depend on  {@link com.google.crypto.tink.Mac} key types, this methodalso registers all Mac catalogues.
 */
public static void init() throws GeneralSecurityException {
  Registry.addCatalogue(CATALOGUE_NAME,new AeadCatalogue());
  MacConfig.init();
}",0.6814044213263979
111275,"/** 
 * Registers standard (for the current release) Aead key types and their managers with the   {@code Registry}. Deprecated-yet-still-supported key types are registered in so-called ""no new key""-mode, which allows for usage of existing keys forbids generation of new key material.
 * @throws GeneralSecurityException
 * @deprecated
 */
@Deprecated public static void registerStandardKeyTypes() throws GeneralSecurityException {
  Config.register(TINK_1_0_0);
}","/** 
 * Registers with the   {@code Registry} all Aead key types released with the latest versionof Tink. Deprecated-yet-still-supported key types are registered in so-called ""no new key""-mode, which allows for usage of existing keys forbids generation of new key material.
 * @deprecated
 */
@Deprecated public static void registerStandardKeyTypes() throws GeneralSecurityException {
  Config.register(TINK_1_0_0);
}",0.8136363636363636
111276,"/** 
 * Registers all catalogues with the   {@link Registry}.
 */
public static void init() throws GeneralSecurityException {
  HybridConfig.init();
  SignatureConfig.init();
}","/** 
 * Tries to register with the   {@link com.google.crypto.tink.Registry} all instances of{@link com.google.crypto.tink.Catalogue} needed to handle all key types supported in Tink.
 */
public static void init() throws GeneralSecurityException {
  HybridConfig.init();
  SignatureConfig.init();
}",0.6413502109704642
111277,"/** 
 * Registers all   {@link HybridEncrypt} and {@link HybridDecrypt} catalogues with the{@link Registry}. <p>Because hybrid key types depend on   {@link Aead} and {@link Mac} key types, this methodalso registers all  {@link Aead} and {@link Mac} catalogues.
 */
public static void init() throws GeneralSecurityException {
  Registry.addCatalogue(CATALOGUE_NAME,new HybridCatalogue());
  AeadConfig.init();
}","/** 
 * Tries to register with the   {@link Registry} all instances of{@link com.google.crypto.tink.Catalogue} needed to handle HybridDecrypt and HybridEncryptkey types supported in Tink. <p>Because HybridDecrypt and HybridEncrypt key types depend on {@link com.google.crypto.tink.Aead} and {@link com.google.crypto.tink.Mac} key types, thismethod also registers all Aead and Mac catalogues.
 */
public static void init() throws GeneralSecurityException {
  Registry.addCatalogue(CATALOGUE_NAME,new HybridCatalogue());
  AeadConfig.init();
}",0.4773922187171398
111278,"/** 
 * Registers all   {@link Mac} catalogues with the {@link Registry}.
 */
public static void init() throws GeneralSecurityException {
  Registry.addCatalogue(CATALOGUE_NAME,new MacCatalogue());
}","/** 
 * Tries to register with the   {@link Registry} all instances of{@link com.google.crypto.tink.Catalogue} needed to handle Mac key types supported in Tink.
 */
public static void init() throws GeneralSecurityException {
  Registry.addCatalogue(CATALOGUE_NAME,new MacCatalogue());
}",0.6391752577319587
111279,"/** 
 * Registers standard (for the current release) Mac key types and their managers with the   {@code Registry}. Deprecated-yet-still-supported key types are registered in so-called ""no new key""-mode, which allows for usage of existing keys forbids generation of new key material.
 * @throws GeneralSecurityException
 * @deprecated
 */
@Deprecated public static void registerStandardKeyTypes() throws GeneralSecurityException {
  Config.register(TINK_1_0_0);
}","/** 
 * Registers with the   {@code Registry} all Mac key types released with the latestversion of Tink. Deprecated-yet-still-supported key types are registered in so-called ""no new key""-mode, which allows for usage of existing keys forbids generation of new key material.
 * @deprecated
 */
@Deprecated public static void registerStandardKeyTypes() throws GeneralSecurityException {
  Config.register(TINK_1_0_0);
}",0.8154897494305239
111280,"/** 
 * Registers all   {@link PublicKeyVerify} and {@link PublicKeySign} catalogues with the{@link Registry}.
 */
public static void init() throws GeneralSecurityException {
  Registry.addCatalogue(CATALOGUE_NAME,new SignatureCatalogue());
}","/** 
 * Tries to register with the   {@link Registry} all instances of{@link com.google.crypto.tink.Catalogue} needed to handle PublicKeySign and PublicKeyVerifykey types supported in Tink.
 */
public static void init() throws GeneralSecurityException {
  Registry.addCatalogue(CATALOGUE_NAME,new SignatureCatalogue());
}",0.61101243339254
111281,"/** 
 * @return a KeyManager for the given {@code typeUrl},   {@code primitiveName}, and version at least   {@code minVersion} (if it exists in the catalogue).
 */
@SuppressWarnings(""String_Node_Str"") public KeyManager getKeyManager(String typeUrl,String primitiveName,int minVersion) throws GeneralSecurityException ;","/** 
 * @return a {@link KeyManager} for the given {@code typeUrl},   {@code primitiveName}, and version at least   {@code minVersion} (if it exists in the catalogue).
 */
@SuppressWarnings(""String_Node_Str"") public KeyManager getKeyManager(String typeUrl,String primitiveName,int minVersion) throws GeneralSecurityException ;",0.9875776397515528
111282,"/** 
 * @return a new keyset handle from a keyset obtained from {@code reader}.
 * @throws GeneralSecurityException
 */
public static KeysetHandle read(KeysetReader reader) throws GeneralSecurityException, IOException {
  return KeysetHandle.fromKeyset(reader.read());
}","/** 
 * @return a new {@link KeysetHandle} from a keyset obtained from {@code reader}.
 * @throws GeneralSecurityException
 */
public static KeysetHandle read(KeysetReader reader) throws GeneralSecurityException, IOException {
  return KeysetHandle.fromKeyset(reader.read());
}",0.943327239488117
111283,"/** 
 * @return a new keyset handle from {@code serialized} which is a serialized {@code Keyset}.
 * @throws GeneralSecurityException
 * @deprecated use {@link CleartextKeysetHandle#read} instead
 */
@Deprecated public static final KeysetHandle parseFrom(final byte[] serialized) throws GeneralSecurityException {
  try {
    Keyset keyset=Keyset.parseFrom(serialized);
    return KeysetHandle.fromKeyset(keyset);
  }
 catch (  InvalidProtocolBufferException e) {
    throw new GeneralSecurityException(""String_Node_Str"");
  }
}","/** 
 * @return a new {@link KeysetHandle} from {@code serialized} that is a serialized {@link Keyset}
 * @throws GeneralSecurityException
 * @deprecated use {@link CleartextKeysetHandle#read} instead
 */
@Deprecated public static final KeysetHandle parseFrom(final byte[] serialized) throws GeneralSecurityException {
  try {
    Keyset keyset=Keyset.parseFrom(serialized);
    return KeysetHandle.fromKeyset(keyset);
  }
 catch (  InvalidProtocolBufferException e) {
    throw new GeneralSecurityException(""String_Node_Str"");
  }
}",0.8803016022620169
111284,"/** 
 * Serializes and writes the keyset to   {@code keysetWriter}.
 */
public static void write(KeysetHandle handle,KeysetWriter keysetWriter) throws IOException {
  keysetWriter.write(handle.getKeyset());
  return;
}","/** 
 * Serializes and writes the keyset managed by   {@code handle} to {@code keysetWriter}.
 * @throws IOException
 */
public static void write(KeysetHandle handle,KeysetWriter keysetWriter) throws IOException {
  keysetWriter.write(handle.getKeyset());
}",0.5557894736842105
111285,"/** 
 * Constructs an instance of P for the key given in   {@code key}.
 * @return the new constructed P.
 * @throws GeneralSecurityException if the key given in {@code key} is corruptedor not supported.
 */
P getPrimitive(MessageLite key) throws GeneralSecurityException ;","/** 
 * Constructs an instance of P for the key given in   {@code key}.
 * @return the new constructed P
 * @throws GeneralSecurityException if the key given in {@code key} is corruptedor not supported
 */
P getPrimitive(MessageLite key) throws GeneralSecurityException ;",0.9963235294117648
111286,"/** 
 * Generates a new key according to specification in   {@code keyFormat}.
 * @return the new generated key.
 * @throws GeneralSecurityException if the specified format is wrong or not supported.
 */
MessageLite newKey(MessageLite keyFormat) throws GeneralSecurityException ;","/** 
 * Generates a new key according to specification in   {@code keyFormat}.
 * @return the new generated key
 * @throws GeneralSecurityException if the specified format is wrong or not supported
 */
MessageLite newKey(MessageLite keyFormat) throws GeneralSecurityException ;",0.9964028776978416
111287,"/** 
 * Generates a new   {@code KeyData} according to specification in {@code serializedkeyFormat}. This should be used solely by the key management API.
 * @return the new generated key.
 * @throws GeneralSecurityException if the specified format is wrong or not supported.
 */
KeyData newKeyData(ByteString serializedKeyFormat) throws GeneralSecurityException ;","/** 
 * Generates a new   {@code KeyData} according to specification in {@code serializedkeyFormat}. <p>This should be used solely by   {@link KeysetManager}.
 * @return the new generated key
 * @throws GeneralSecurityException if the specified format is wrong or not supported
 */
KeyData newKeyData(ByteString serializedKeyFormat) throws GeneralSecurityException ;",0.9342465753424658
111288,"/** 
 * Creates keyset handles from an encrypted keyset obtained via   {@code reader}. Users that need to load cleartext keysets can use   {@code CleartextKeysetHandle}.
 * @return a new {@code KeysetHandle} from {@code encryptedKeysetProto} that was encryptedwith  {@code masterKey}.
 * @throws GeneralSecurityException
 */
public static final KeysetHandle read(KeysetReader reader,Aead masterKey) throws GeneralSecurityException, IOException {
  EncryptedKeyset encryptedKeyset=reader.readEncrypted();
  assertEnoughEncryptedKeyMaterial(encryptedKeyset);
  return new KeysetHandle(decrypt(encryptedKeyset,masterKey));
}","/** 
 * Tries to create a   {@link KeysetHandle} from an encrypted keyset obtained via {@code reader}. <p>Users that need to load cleartext keysets can use   {@link CleartextKeysetHandle}.
 * @return a new {@link KeysetHandle} from {@code encryptedKeysetProto} that was encryptedwith  {@code masterKey}
 * @throws GeneralSecurityException if cannot decrypt the keyset or it doesn't containencrypted key material
 */
public static final KeysetHandle read(KeysetReader reader,Aead masterKey) throws GeneralSecurityException, IOException {
  EncryptedKeyset encryptedKeyset=reader.readEncrypted();
  assertEnoughEncryptedKeyMaterial(encryptedKeyset);
  return new KeysetHandle(decrypt(encryptedKeyset,masterKey));
}",0.8297074268567142
111289,"/** 
 * @return a new {@code KeysetHandle} from a {@code keyset}.
 * @throws GeneralSecurityException
 */
static final KeysetHandle fromKeyset(Keyset keyset) throws GeneralSecurityException {
  assertEnoughKeyMaterial(keyset);
  return new KeysetHandle(keyset);
}","/** 
 * @return a new {@link KeysetHandle} from a {@code keyset}.
 * @throws GeneralSecurityException
 */
static final KeysetHandle fromKeyset(Keyset keyset) throws GeneralSecurityException {
  assertEnoughKeyMaterial(keyset);
  return new KeysetHandle(keyset);
}",0.9847908745247148
111290,"/** 
 * @return the {@code KeysetInfo} that doesn't contain actual key material.
 */
public KeysetInfo getKeysetInfo(){
  return Util.getKeysetInfo(keyset);
}","/** 
 * @return the {@link com.google.crypto.tink.proto.KeysetInfo} that doesn't contain actual keymaterial.
 */
public KeysetInfo getKeysetInfo(){
  return Util.getKeysetInfo(keyset);
}",0.9011627906976744
111291,"/** 
 * If the managed keyset contains private keys, returns a   {@code KeysetHandle}of the public keys.
 */
public KeysetHandle getPublicKeysetHandle() throws GeneralSecurityException {
  if (keyset == null) {
    throw new GeneralSecurityException(""String_Node_Str"");
  }
  Keyset.Builder keysetBuilder=Keyset.newBuilder();
  for (  Keyset.Key key : keyset.getKeyList()) {
    KeyData keyData=createPublicKeyData(key.getKeyData());
    keysetBuilder.addKey(Keyset.Key.newBuilder().mergeFrom(key).setKeyData(keyData).build());
  }
  keysetBuilder.setPrimaryKeyId(keyset.getPrimaryKeyId());
  return new KeysetHandle(keysetBuilder.build());
}","/** 
 * If the managed keyset contains private keys, returns a   {@link KeysetHandle}of the public keys.
 * @throws GenernalSecurityException if the managed keyset is null or if it contains anynon-private keys.
 */
public KeysetHandle getPublicKeysetHandle() throws GeneralSecurityException {
  if (keyset == null) {
    throw new GeneralSecurityException(""String_Node_Str"");
  }
  Keyset.Builder keysetBuilder=Keyset.newBuilder();
  for (  Keyset.Key key : keyset.getKeyList()) {
    KeyData keyData=createPublicKeyData(key.getKeyData());
    keysetBuilder.addKey(Keyset.Key.newBuilder().mergeFrom(key).setKeyData(keyData).build());
  }
  keysetBuilder.setPrimaryKeyId(keyset.getPrimaryKeyId());
  return new KeysetHandle(keysetBuilder.build());
}",0.9179856115107914
111292,"/** 
 * @return a new keyset handle that contains a single fresh key generatedaccording to the  {@code keyTemplate}.
 * @throws GeneralSecurityException
 */
public static final KeysetHandle generateNew(KeyTemplate keyTemplate) throws GeneralSecurityException {
  return KeysetManager.withEmptyKeyset().rotate(keyTemplate).getKeysetHandle();
}","/** 
 * @return a new {@link KeysetHandle} that contains a single fresh key generated according to{@code keyTemplate}.
 * @throws GeneralSecurityException
 */
public static final KeysetHandle generateNew(KeyTemplate keyTemplate) throws GeneralSecurityException {
  return KeysetManager.withEmptyKeyset().rotate(keyTemplate).getKeysetHandle();
}",0.9067055393586004
111293,"/** 
 * Validate that an keyset handle contains enough key material to build a keyset on, and throws otherwise.
 * @throws GeneralSecurityException
 */
public static void assertEnoughKeyMaterial(Keyset keyset) throws GeneralSecurityException {
  if (keyset == null || keyset.getKeyCount() <= 0) {
    throw new GeneralSecurityException(""String_Node_Str"");
  }
}","/** 
 * Validates that an keyset handle contains enough key material to build a keyset on.
 * @throws GeneralSecurityException
 */
public static void assertEnoughKeyMaterial(Keyset keyset) throws GeneralSecurityException {
  if (keyset == null || keyset.getKeyCount() <= 0) {
    throw new GeneralSecurityException(""String_Node_Str"");
  }
}",0.9671897289586304
111294,"/** 
 * Validates that an encrypted keyset contains enough key material to build a keyset on, and throws otherwise.
 * @throws GeneralSecurityException
 */
public static void assertEnoughEncryptedKeyMaterial(EncryptedKeyset keyset) throws GeneralSecurityException {
  if (keyset == null || keyset.getEncryptedKeyset().size() == 0) {
    throw new GeneralSecurityException(""String_Node_Str"");
  }
}","/** 
 * Validates that an encrypted keyset contains enough key material to build a keyset on.
 * @throws GeneralSecurityException
 */
public static void assertEnoughEncryptedKeyMaterial(EncryptedKeyset keyset) throws GeneralSecurityException {
  if (keyset == null || keyset.getEncryptedKeyset().size() == 0) {
    throw new GeneralSecurityException(""String_Node_Str"");
  }
}",0.9715025906735753
111295,"/** 
 * Encrypts the keyset with the   {@code Aead} master key.
 */
private static EncryptedKeyset encrypt(Keyset keyset,Aead masterKey) throws GeneralSecurityException {
  byte[] encryptedKeyset=masterKey.encrypt(keyset.toByteArray(),new byte[0]);
  try {
    final Keyset keyset2=Keyset.parseFrom(masterKey.decrypt(encryptedKeyset,new byte[0]));
    if (!keyset2.equals(keyset)) {
      throw new GeneralSecurityException(""String_Node_Str"");
    }
  }
 catch (  InvalidProtocolBufferException e) {
    throw new GeneralSecurityException(""String_Node_Str"");
  }
  return EncryptedKeyset.newBuilder().setEncryptedKeyset(ByteString.copyFrom(encryptedKeyset)).setKeysetInfo(Util.getKeysetInfo(keyset)).build();
}","/** 
 * Encrypts the keyset with the   {@link Aead} master key.
 */
private static EncryptedKeyset encrypt(Keyset keyset,Aead masterKey) throws GeneralSecurityException {
  byte[] encryptedKeyset=masterKey.encrypt(keyset.toByteArray(),new byte[0]);
  try {
    final Keyset keyset2=Keyset.parseFrom(masterKey.decrypt(encryptedKeyset,new byte[0]));
    if (!keyset2.equals(keyset)) {
      throw new GeneralSecurityException(""String_Node_Str"");
    }
  }
 catch (  InvalidProtocolBufferException e) {
    throw new GeneralSecurityException(""String_Node_Str"");
  }
  return EncryptedKeyset.newBuilder().setEncryptedKeyset(ByteString.copyFrom(encryptedKeyset)).setKeysetInfo(Util.getKeysetInfo(keyset)).build();
}",0.9943661971830986
111296,"/** 
 * Prints out the   {@code KeysetInfo}.
 */
@Override public String toString(){
  return getKeysetInfo().toString();
}","/** 
 * Extracts and returns the string representation of the  {@link com.google.crypto.tink.proto.KeysetInfo} of the managed keyset.
 */
@Override public String toString(){
  return getKeysetInfo().toString();
}",0.591044776119403
111297,"/** 
 * Decrypts the encrypted keyset with the   {@code Aead} master key.
 */
private static Keyset decrypt(EncryptedKeyset encryptedKeyset,Aead masterKey) throws GeneralSecurityException {
  try {
    Keyset keyset=Keyset.parseFrom(masterKey.decrypt(encryptedKeyset.getEncryptedKeyset().toByteArray(),new byte[0]));
    assertEnoughKeyMaterial(keyset);
    return keyset;
  }
 catch (  InvalidProtocolBufferException e) {
    throw new GeneralSecurityException(""String_Node_Str"");
  }
}","/** 
 * Decrypts the encrypted keyset with the   {@link Aead} master key.
 */
private static Keyset decrypt(EncryptedKeyset encryptedKeyset,Aead masterKey) throws GeneralSecurityException {
  try {
    Keyset keyset=Keyset.parseFrom(masterKey.decrypt(encryptedKeyset.getEncryptedKeyset().toByteArray(),new byte[0]));
    assertEnoughKeyMaterial(keyset);
    return keyset;
  }
 catch (  InvalidProtocolBufferException e) {
    throw new GeneralSecurityException(""String_Node_Str"");
  }
}",0.9917864476386036
111298,"/** 
 * Constructs a ReadableByteChannel with ciphertext from a ReadableByteChannel. The method constructs a new thread that is used to encrypt the plaintext. TODO(bleichen): Using PipedInputStream may have performance problems.
 */
private ReadableByteChannel ciphertextChannel(AesGcmHkdfStreaming ags,ReadableByteChannel plaintext,byte[] aad,int chunkSize) throws Exception {
  PipedOutputStream output=new PipedOutputStream();
  PipedInputStream result=new PipedInputStream(output);
  WritableByteChannel ciphertext=Channels.newChannel(output);
  new Thread(new Runnable(){
    public void run(){
      encryptChannel(ags,plaintext,ciphertext,aad,chunkSize);
    }
  }
).start();
  return Channels.newChannel(result);
}","/** 
 * Constructs a ReadableByteChannel with ciphertext from a ReadableByteChannel. The method constructs a new thread that is used to encrypt the plaintext. TODO(bleichen): Using PipedInputStream may have performance problems.
 */
private ReadableByteChannel ciphertextChannel(final AesGcmHkdfStreaming ags,final ReadableByteChannel plaintext,final byte[] aad,final int chunkSize) throws Exception {
  PipedOutputStream output=new PipedOutputStream();
  PipedInputStream result=new PipedInputStream(output);
  final WritableByteChannel ciphertext=Channels.newChannel(output);
  new Thread(new Runnable(){
    public void run(){
      encryptChannel(ags,plaintext,ciphertext,aad,chunkSize);
    }
  }
).start();
  return Channels.newChannel(result);
}",0.9796472184531886
111299,"/** 
 * Returns a SeekableByteChannel that allows to access the plaintext.
 * @param ciphertextSource the ciphertext
 * @param associatedData the data associated with the ciphertext.
 * @return a SeekableByteChannel that allows random read access to the plaintext.The following methods of SeekableByteChannel are implemented: <ul> <li> <code>long position()</code> Returns the channel's position in the plaintext. <li> <code>SeekableByteChannel  position(long newPosition)</code> Sets the channel's position. Setting the position to a value greater than the plaintext size is legal. A later attempt to read byte will immediately return an end-of-file indication. <li> <code>int read(ByteBuffer dst)</code> Bytes are read starting at the channel's position, and then the position is updated with the number of bytes actually read. All bytes returned have been authenticated. If the end of the stream has been reached -1 is returned. A result of -1 is authenticated (e.g. by checking the MAC of the last ciphertext chunk.) Throws java.io.IOException if a MAC verification failed. read attempt to fill dst, but may return less bytes than requested if reads to ciphertextSource do not return the requested number of bytes or if the plaintext ended. TODO(bleichen): Should we extend the interface with read(ByteBuffer dst, long position) to avoid race conditions? <li> <code>long size()</code> Returns the size of the plaintext. (TODO: Decide whether the result should be authenticated) <li> <code>SeekableByteChannel truncate(long size)</code> throws NonWritableChannelException because the channel is read-only. <li> <code>int write(ByteBuffer src)</code> throws NonWritableChannelException because the channel is read-only. <li> <code>close()</code> closes the channel <li> <code>isOpen()</code> </ul>
 * @throws GeneralSecurityException if the header of the ciphertext is corrupt or if theassociatedData is not correct.
 * @throws IOException if an IOException occured while reading from ciphertextDestination.
 */
SeekableByteChannel newSeekableDecryptingChannel(SeekableByteChannel ciphertextSource,byte[] associatedData) throws GeneralSecurityException, IOException ;","/** 
 * Returns a SeekableByteChannel that allows to access the plaintext.
 * @param ciphertextSource the ciphertext
 * @param associatedData the data associated with the ciphertext.
 * @return a SeekableByteChannel that allows random read access to the plaintext.The following methods of SeekableByteChannel are implemented: <ul> <li> <code>long position()</code> Returns the channel's position in the plaintext. <li> <code>SeekableByteChannel  position(long newPosition)</code> Sets the channel's position. Setting the position to a value greater than the plaintext size is legal. A later attempt to read byte will immediately return an end-of-file indication. <li> <code>int read(ByteBuffer dst)</code> Bytes are read starting at the channel's position, and then the position is updated with the number of bytes actually read. All bytes returned have been authenticated. If the end of the stream has been reached -1 is returned. A result of -1 is authenticated (e.g. by checking the MAC of the last ciphertext chunk.) Throws java.io.IOException if a MAC verification failed. read attempt to fill dst, but may return less bytes than requested if reads to ciphertextSource do not return the requested number of bytes or if the plaintext ended. TODO(bleichen): Should we extend the interface with read(ByteBuffer dst, long position) to avoid race conditions? <li> <code>long size()</code> Returns the size of the plaintext. (TODO: Decide whether the result should be authenticated) <li> <code>SeekableByteChannel truncate(long size)</code> throws NonWritableChannelException because the channel is read-only. <li> <code>int write(ByteBuffer src)</code> throws NonWritableChannelException because the channel is read-only. <li> <code>close()</code> closes the channel <li> <code>isOpen()</code> </ul>
 * @throws GeneralSecurityException if the header of the ciphertext is corrupt or if theassociatedData is not correct.
 * @throws IOException if an IOException occurred while reading from ciphertextDestination.
 */
SeekableByteChannel newSeekableDecryptingChannel(SeekableByteChannel ciphertextSource,byte[] associatedData) throws GeneralSecurityException, IOException ;",0.999769532150265
111300,"/** 
 * Assertion that an exception's message contains the right message. When this fails, the exception's message and the expected value will be in the failure log.
 */
public static void assertExceptionContains(Throwable e,String contains){
  String message=""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ contains+ ""String_Node_Str"";
  assertTrue(message,e.getMessage().contains(contains));
}","/** 
 * Assertion that an exception's message contains the right message. When this fails, the exception's message and the expected value will be in the failure log.
 */
public static void assertExceptionContains(Throwable e,String contains){
  String message=String.format(""String_Node_Str"",e.getMessage(),contains);
  assertTrue(message,e.getMessage().contains(contains));
}",0.9011553273427472
111301,"EciesAeadHkdfHybridEncrypt(final ECPublicKey recipientPublicKey,final byte[] hkdfSalt,String hkdfHmacAlgo,KeyTemplate aeadDemTemplate,EcPointFormat ecPointFormat) throws GeneralSecurityException {
  EcUtil.checkPublicKey(recipientPublicKey);
  this.recipientPublicKey=recipientPublicKey;
  this.senderKem=new EciesHkdfSenderKem(recipientPublicKey);
  this.hkdfSalt=hkdfSalt;
  this.hkdfHmacAlgo=hkdfHmacAlgo;
  this.ecPointFormat=Util.getPointFormat(ecPointFormat);
  this.aeadFactory=new EciesAeadHkdfAeadFactory(aeadDemTemplate);
}","EciesAeadHkdfHybridEncrypt(final ECPublicKey recipientPublicKey,final byte[] hkdfSalt,String hkdfHmacAlgo,KeyTemplate aeadDemTemplate,EcPointFormat ecPointFormat) throws GeneralSecurityException {
  EcUtil.checkPublicKey(recipientPublicKey);
  this.senderKem=new EciesHkdfSenderKem(recipientPublicKey);
  this.hkdfSalt=hkdfSalt;
  this.hkdfHmacAlgo=hkdfHmacAlgo;
  this.ecPointFormat=Util.getPointFormat(ecPointFormat);
  this.aeadFactory=new EciesAeadHkdfAeadFactory(aeadDemTemplate);
}",0.9549019607843138
111302,"void validate(){
  try {
    SubtleUtil.validateNotExist(outFile);
    SubtleUtil.validateExists(configFile);
    SubtleUtil.validateExists(credentialFile);
    SubtleUtil.validateExists(inFile);
  }
 catch (  Exception e) {
    SubtleUtil.die(e.toString());
  }
}","void validate(){
  try {
    SubtleUtil.validateNotExists(outFile);
    SubtleUtil.validateExists(configFile);
    SubtleUtil.validateExists(credentialFile);
    SubtleUtil.validateExists(inFile);
  }
 catch (  Exception e) {
    SubtleUtil.die(e.toString());
  }
}",0.998109640831758
111303,"@Override public final int parseArguments(final Parameters params) throws CmdLineException {
  final String token=params.getParameter(0);
  try {
    File inFile=Paths.get(token).toFile();
    SubtleUtil.validateNotExist(inFile);
    setter.addValue(new FileInputStream(inFile));
  }
 catch (  IOException e) {
    throw new CmdLineException(owner,e.getMessage(),e);
  }
  return 1;
}","@Override public final int parseArguments(final Parameters params) throws CmdLineException {
  final String token=params.getParameter(0);
  try {
    File inFile=Paths.get(token).toFile();
    SubtleUtil.validateExists(inFile);
    setter.addValue(new FileInputStream(inFile));
  }
 catch (  IOException e) {
    throw new CmdLineException(owner,e.getMessage(),e);
  }
  return 1;
}",0.9947780678851176
111304,"@Override public final int parseArguments(final Parameters params) throws CmdLineException {
  final String token=params.getParameter(0);
  try {
    File outFile=Paths.get(token).toFile();
    SubtleUtil.validateNotExist(outFile);
    setter.addValue(new FileOutputStream(outFile));
  }
 catch (  IOException e) {
    throw new CmdLineException(owner,e.getMessage(),e);
  }
  return 1;
}","@Override public final int parseArguments(final Parameters params) throws CmdLineException {
  final String token=params.getParameter(0);
  try {
    File outFile=Paths.get(token).toFile();
    SubtleUtil.validateNotExists(outFile);
    setter.addValue(new FileOutputStream(outFile));
  }
 catch (  IOException e) {
    throw new CmdLineException(owner,e.getMessage(),e);
  }
  return 1;
}",0.9987129987129988
111305,"private static BigInteger recoverX(BigInteger y){
  BigInteger xx=y.pow(2).subtract(BigInteger.ONE).multiply(D.multiply(y.pow(2)).add(BigInteger.ONE).modInverse(P));
  BigInteger x=xx.modPow(P.add(BigInteger.valueOf(3)).divide(BigInteger.valueOf(8)),P);
  if (x.pow(2).subtract(xx).mod(P) != BigInteger.ZERO) {
    x=x.multiply(SQRTM1).mod(P);
  }
  if (x.testBit(0)) {
    x=P.subtract(x);
  }
  return x;
}","private static BigInteger recoverX(BigInteger y){
  BigInteger xx=y.pow(2).subtract(BigInteger.ONE).multiply(D.multiply(y.pow(2)).add(BigInteger.ONE).modInverse(P));
  BigInteger x=xx.modPow(P.add(BigInteger.valueOf(3)).divide(BigInteger.valueOf(8)),P);
  if (!x.pow(2).subtract(xx).mod(P).equals(BigInteger.ZERO)) {
    x=x.multiply(SQRTM1).mod(P);
  }
  if (x.testBit(0)) {
    x=P.subtract(x);
  }
  return x;
}",0.9829683698296836
111306,"/** 
 * Tests with EciesAesCtrHmacAead keys generated by Tinkey.
 */
@Test public void testWithTinkeyEciesAesCtrHmacAead() throws Exception {
  final String PRIVATE_KEYSET=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  final String PUBLIC_KEYSET=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HybridDecrypt hybridDecrypt=HybridDecryptFactory.getPrimitive(CleartextKeysetHandle.parseFrom(base64().decode(PRIVATE_KEYSET)));
  HybridEncrypt hybridEncrypt=HybridEncryptFactory.getPrimitive(CleartextKeysetHandle.parseFrom(base64().decode(PUBLIC_KEYSET)));
  byte[] plaintext=Random.randBytes(20);
  byte[] contextInfo=Random.randBytes(20);
  byte[] ciphertext=hybridEncrypt.encrypt(plaintext,contextInfo);
  assertArrayEquals(plaintext,hybridDecrypt.decrypt(ciphertext,contextInfo));
}","/** 
 * Tests with EciesAesCtrHmacAead keys generated by Tinkey.
 */
@Test public void testWithTinkeyEciesAesCtrHmacAead() throws Exception {
  final String privateKeyset=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  final String publicKeyset=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HybridDecrypt hybridDecrypt=HybridDecryptFactory.getPrimitive(CleartextKeysetHandle.parseFrom(base64().decode(privateKeyset)));
  HybridEncrypt hybridEncrypt=HybridEncryptFactory.getPrimitive(CleartextKeysetHandle.parseFrom(base64().decode(publicKeyset)));
  byte[] plaintext=Random.randBytes(20);
  byte[] contextInfo=Random.randBytes(20);
  byte[] ciphertext=hybridEncrypt.encrypt(plaintext,contextInfo);
  assertArrayEquals(plaintext,hybridDecrypt.decrypt(ciphertext,contextInfo));
}",0.948936170212766
111307,"/** 
 * Tests with EciesAesGcmHkdf keys generated by Tinkey.
 */
@Test public void testWithTinkeyEciesAesGcmHkdf() throws Exception {
  final String PRIVATE_KEYSET=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  final String PUBLIC_KEYSET=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HybridDecrypt hybridDecrypt=HybridDecryptFactory.getPrimitive(CleartextKeysetHandle.parseFrom(base64().decode(PRIVATE_KEYSET)));
  HybridEncrypt hybridEncrypt=HybridEncryptFactory.getPrimitive(CleartextKeysetHandle.parseFrom(base64().decode(PUBLIC_KEYSET)));
  byte[] plaintext=Random.randBytes(20);
  byte[] contextInfo=Random.randBytes(20);
  byte[] ciphertext=hybridEncrypt.encrypt(plaintext,contextInfo);
  assertArrayEquals(plaintext,hybridDecrypt.decrypt(ciphertext,contextInfo));
}","/** 
 * Tests with EciesAesGcmHkdf keys generated by Tinkey.
 */
@Test public void testWithTinkeyEciesAesGcmHkdf() throws Exception {
  final String privateKeyset=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  final String publicKeyset=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HybridDecrypt hybridDecrypt=HybridDecryptFactory.getPrimitive(CleartextKeysetHandle.parseFrom(base64().decode(privateKeyset)));
  HybridEncrypt hybridEncrypt=HybridEncryptFactory.getPrimitive(CleartextKeysetHandle.parseFrom(base64().decode(publicKeyset)));
  byte[] plaintext=Random.randBytes(20);
  byte[] contextInfo=Random.randBytes(20);
  byte[] ciphertext=hybridEncrypt.encrypt(plaintext,contextInfo);
  assertArrayEquals(plaintext,hybridDecrypt.decrypt(ciphertext,contextInfo));
}",0.9463087248322148
111308,"@Test public void testInvalidKeyset() throws Exception {
  KeyFormat format=KeyFormat.newBuilder().setTypeUrl(macTypeUrl).build();
  KeysetManager manager=new KeysetManager.Builder().setKeyFormat(format).build();
  manager.rotate();
  Keyset keyset=manager.getKeysetHandle().getKeyset();
  byte[] proto=keyset.toByteArray();
  proto[0]=(byte)~proto[0];
  try {
    KeysetHandle handle=CleartextKeysetHandle.fromBinaryFormat(proto);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
  String str=TextFormat.printToUnicodeString(keyset);
  try {
    KeysetHandle handle=CleartextKeysetHandle.fromTextFormat(str + ""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
}","@Test public void testInvalidKeyset() throws Exception {
  KeyFormat format=KeyFormat.newBuilder().setTypeUrl(macTypeUrl).build();
  KeysetManager manager=new KeysetManager.Builder().setKeyFormat(format).build();
  manager.rotate();
  Keyset keyset=manager.getKeysetHandle().getKeyset();
  byte[] proto=keyset.toByteArray();
  proto[0]=(byte)~proto[0];
  try {
    KeysetHandle unused=CleartextKeysetHandle.fromBinaryFormat(proto);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
  String str=TextFormat.printToUnicodeString(keyset);
  try {
    KeysetHandle unused=CleartextKeysetHandle.fromTextFormat(str + ""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
}",0.9859154929577464
111309,"/** 
 * Tests that when encryption with KMS failed, an exception is thrown.
 */
@Test public void testFaultyKms() throws Exception {
  KeyFormat format=KeyFormat.newBuilder().setTypeUrl(macTypeUrl).build();
  KeysetManager manager=new KeysetManager.Builder().setKeyFormat(format).build();
  manager.rotate();
  FaultyAead faultyAead=Registry.INSTANCE.getPrimitive(Registry.INSTANCE.newKey(KeyFormat.newBuilder().setTypeUrl(faultyAeadTypeUrl).build()));
  try {
    KeysetHandle keysetHandle=manager.getKeysetHandle(faultyAead);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
}","/** 
 * Tests that when encryption with KMS failed, an exception is thrown.
 */
@Test public void testFaultyKms() throws Exception {
  KeyFormat format=KeyFormat.newBuilder().setTypeUrl(macTypeUrl).build();
  KeysetManager manager=new KeysetManager.Builder().setKeyFormat(format).build();
  manager.rotate();
  FaultyAead faultyAead=Registry.INSTANCE.getPrimitive(Registry.INSTANCE.newKey(KeyFormat.newBuilder().setTypeUrl(faultyAeadTypeUrl).build()));
  try {
    KeysetHandle unused=manager.getKeysetHandle(faultyAead);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
}",0.9863842662632376
111310,"@Test public void testExistingKeyset() throws Exception {
  KeyFormat format=KeyFormat.newBuilder().setTypeUrl(macTypeUrl).build();
  KeysetManager manager1=new KeysetManager.Builder().setKeyFormat(format).build();
  manager1.rotate();
  Keyset keyset1=manager1.getKeysetHandle().getKeyset();
  KeysetManager manager2=new KeysetManager.Builder().setKeysetHandle(manager1.getKeysetHandle()).build();
  manager2.rotate(format);
  Keyset keyset2=manager2.getKeysetHandle().getKeyset();
  assertEquals(2,keyset2.getKeyCount());
  assertEquals(keyset2.getPrimaryKeyId(),keyset2.getKey(1).getKeyId());
}","@Test public void testExistingKeyset() throws Exception {
  KeyFormat format=KeyFormat.newBuilder().setTypeUrl(macTypeUrl).build();
  KeysetManager manager1=new KeysetManager.Builder().setKeyFormat(format).build();
  manager1.rotate();
  Keyset keyset1=manager1.getKeysetHandle().getKeyset();
  KeysetManager manager2=new KeysetManager.Builder().setKeysetHandle(manager1.getKeysetHandle()).build();
  manager2.rotate(format);
  Keyset keyset2=manager2.getKeysetHandle().getKeyset();
  assertEquals(2,keyset2.getKeyCount());
  assertEquals(keyset1.getKey(0),keyset2.getKey(0));
  assertEquals(keyset2.getPrimaryKeyId(),keyset2.getKey(1).getKeyId());
}",0.9286287089013632
111311,"@Test public void testInvalidKeyset() throws Exception {
  KeyFormat format=KeyFormat.newBuilder().setTypeUrl(macTypeUrl).build();
  KeysetManager manager=new KeysetManager.Builder().setKeyFormat(format).build();
  manager.rotate();
  Keyset keyset=manager.getKeysetHandle().getKeyset();
  KeyData echoAeadKey=Registry.INSTANCE.newKey(KeyFormat.newBuilder().setTypeUrl(echoAeadTypeUrl).build());
  EchoAead echoAead=Registry.INSTANCE.getPrimitive(echoAeadKey);
  KeysetHandle keysetHandle=manager.getKeysetHandle(echoAead);
  assertNotNull(keysetHandle.getEncryptedKeyset());
  KmsEncryptedKeyset encryptedKeyset=KmsEncryptedKeyset.newBuilder().setEncryptedKeyset(ByteString.copyFrom(keysetHandle.getEncryptedKeyset())).setKmsKey(echoAeadKey).setKeysetInfo(keysetHandle.getKeysetInfo()).build();
  byte[] proto=encryptedKeyset.toByteArray();
  proto[0]=(byte)~proto[0];
  try {
    KeysetHandle handle=KmsEncryptedKeysetHandle.fromBinaryFormat(proto);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
  String str=TextFormat.printToUnicodeString(encryptedKeyset);
  try {
    KeysetHandle handle=KmsEncryptedKeysetHandle.fromTextFormat(str + ""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
  KmsEncryptedKeyset encryptedKeySet2=encryptedKeyset.toBuilder().clearEncryptedKeyset().build();
  try {
    KeysetHandle handle=KmsEncryptedKeysetHandle.fromBinaryFormat(proto);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
  KmsEncryptedKeyset encryptedKeySet3=encryptedKeyset.toBuilder().clearKmsKey().build();
  try {
    KeysetHandle handle=KmsEncryptedKeysetHandle.fromBinaryFormat(proto);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
}","@Test public void testInvalidKeyset() throws Exception {
  KeyFormat format=KeyFormat.newBuilder().setTypeUrl(macTypeUrl).build();
  KeysetManager manager=new KeysetManager.Builder().setKeyFormat(format).build();
  manager.rotate();
  KeyData echoAeadKey=Registry.INSTANCE.newKey(KeyFormat.newBuilder().setTypeUrl(echoAeadTypeUrl).build());
  EchoAead echoAead=Registry.INSTANCE.getPrimitive(echoAeadKey);
  KeysetHandle keysetHandle=manager.getKeysetHandle(echoAead);
  assertNotNull(keysetHandle.getEncryptedKeyset());
  KmsEncryptedKeyset encryptedKeyset=KmsEncryptedKeyset.newBuilder().setEncryptedKeyset(ByteString.copyFrom(keysetHandle.getEncryptedKeyset())).setKmsKey(echoAeadKey).setKeysetInfo(keysetHandle.getKeysetInfo()).build();
  byte[] proto=encryptedKeyset.toByteArray();
  proto[0]=(byte)~proto[0];
  try {
    KeysetHandle unused=KmsEncryptedKeysetHandle.fromBinaryFormat(proto);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
  String str=TextFormat.printToUnicodeString(encryptedKeyset);
  try {
    KeysetHandle unused=KmsEncryptedKeysetHandle.fromTextFormat(str + ""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
  KmsEncryptedKeyset encryptedKeySet2=encryptedKeyset.toBuilder().clearEncryptedKeyset().build();
  try {
    KeysetHandle unused=KmsEncryptedKeysetHandle.fromProto(encryptedKeySet2);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
  KmsEncryptedKeyset encryptedKeySet3=encryptedKeyset.toBuilder().clearKmsKey().build();
  try {
    KeysetHandle unused=KmsEncryptedKeysetHandle.fromProto(encryptedKeySet3);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
  }
}",0.9538228614685844
111312,"@Test public void testKeyManagerRegistration() throws Exception {
  Registry registry=new Registry();
  String mac1TypeUrl=Mac1KeyManager.class.getSimpleName();
  String mac2TypeUrl=Mac2KeyManager.class.getSimpleName();
  String aeadTypeUrl=AeadKeyManager.class.getSimpleName();
  registry.registerKeyManager(mac1TypeUrl,new Mac1KeyManager());
  registry.registerKeyManager(mac2TypeUrl,new Mac2KeyManager());
  registry.registerKeyManager(aeadTypeUrl,new AeadKeyManager());
  KeyManager<Mac,Message,Message> mac1Manager=registry.getKeyManager(mac1TypeUrl);
  KeyManager<Mac,Message,Message> mac2Manager=registry.getKeyManager(mac2TypeUrl);
  assertEquals(Mac1KeyManager.class,mac1Manager.getClass());
  assertEquals(Mac2KeyManager.class,mac2Manager.getClass());
  String computedMac=new String(mac1Manager.getPrimitive(ByteString.copyFrom(new byte[0])).computeMac(null));
  assertEquals(Mac1KeyManager.class.getSimpleName(),computedMac);
  computedMac=new String(mac2Manager.getPrimitive(ByteString.copyFrom(new byte[0])).computeMac(null));
  assertEquals(Mac2KeyManager.class.getSimpleName(),computedMac);
  KeyManager<Aead,Message,Message> aeadManager=registry.getKeyManager(aeadTypeUrl);
  assertEquals(AeadKeyManager.class,aeadManager.getClass());
  Aead aead=aeadManager.getPrimitive(ByteString.copyFrom(new byte[0]));
  String ciphertext=new String(aead.encrypt(""String_Node_Str"".getBytes(),null));
  assertEquals(AeadKeyManager.class.getSimpleName(),ciphertext);
  String badTypeUrl=""String_Node_Str"";
  try {
    KeyManager<Mac,Message,Message> macManager=registry.getKeyManager(badTypeUrl);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
    assertTrue(e.toString().contains(badTypeUrl));
  }
}","@Test public void testKeyManagerRegistration() throws Exception {
  Registry registry=new Registry();
  String mac1TypeUrl=Mac1KeyManager.class.getSimpleName();
  String mac2TypeUrl=Mac2KeyManager.class.getSimpleName();
  String aeadTypeUrl=AeadKeyManager.class.getSimpleName();
  registry.registerKeyManager(mac1TypeUrl,new Mac1KeyManager());
  registry.registerKeyManager(mac2TypeUrl,new Mac2KeyManager());
  registry.registerKeyManager(aeadTypeUrl,new AeadKeyManager());
  KeyManager<Mac,Message,Message> mac1Manager=registry.getKeyManager(mac1TypeUrl);
  KeyManager<Mac,Message,Message> mac2Manager=registry.getKeyManager(mac2TypeUrl);
  assertEquals(Mac1KeyManager.class,mac1Manager.getClass());
  assertEquals(Mac2KeyManager.class,mac2Manager.getClass());
  String computedMac=new String(mac1Manager.getPrimitive(ByteString.copyFrom(new byte[0])).computeMac(null));
  assertEquals(Mac1KeyManager.class.getSimpleName(),computedMac);
  computedMac=new String(mac2Manager.getPrimitive(ByteString.copyFrom(new byte[0])).computeMac(null));
  assertEquals(Mac2KeyManager.class.getSimpleName(),computedMac);
  KeyManager<Aead,Message,Message> aeadManager=registry.getKeyManager(aeadTypeUrl);
  assertEquals(AeadKeyManager.class,aeadManager.getClass());
  Aead aead=aeadManager.getPrimitive(ByteString.copyFrom(new byte[0]));
  String ciphertext=new String(aead.encrypt(""String_Node_Str"".getBytes(""String_Node_Str""),null));
  assertEquals(AeadKeyManager.class.getSimpleName(),ciphertext);
  String badTypeUrl=""String_Node_Str"";
  try {
    KeyManager<Mac,Message,Message> unused=registry.getKeyManager(badTypeUrl);
    fail(""String_Node_Str"");
  }
 catch (  GeneralSecurityException e) {
    assertTrue(e.toString().contains(""String_Node_Str""));
    assertTrue(e.toString().contains(badTypeUrl));
  }
}",0.9908001115138
111313,"@Override public byte[] encrypt(byte[] plaintext,byte[] aad) throws GeneralSecurityException {
  return label.getBytes();
}","@Override public byte[] encrypt(byte[] plaintext,byte[] aad) throws GeneralSecurityException {
  try {
    return label.getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    return null;
  }
}",0.7192982456140351
111314,"@Override public byte[] decrypt(byte[] ciphertext,byte[] aad) throws GeneralSecurityException {
  return label.getBytes();
}","@Override public byte[] decrypt(byte[] ciphertext,byte[] aad) throws GeneralSecurityException {
  try {
    return label.getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    return null;
  }
}",0.7209302325581395
111315,"@Override public byte[] computeMac(byte[] data) throws GeneralSecurityException {
  return label.getBytes();
}","@Override public byte[] computeMac(byte[] data) throws GeneralSecurityException {
  try {
    return label.getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    return null;
  }
}",0.6962025316455697
111316,"@Test public void testBasicAesGcm() throws Exception {
  ECParameterSpec spec=Util.getCurveSpec(EllipticCurveType.NIST_P256);
  KeyPairGenerator keyGen=KeyPairGenerator.getInstance(""String_Node_Str"");
  keyGen.initialize(spec);
  KeyPair recipientKey=keyGen.generateKeyPair();
  ECPublicKey recipientPublicKey=(ECPublicKey)recipientKey.getPublic();
  ECPrivateKey recipientPrivateKey=(ECPrivateKey)recipientKey.getPrivate();
  byte[] salt=""String_Node_Str"".getBytes(""String_Node_Str"");
  String hmacAlgo=""String_Node_Str"";
  KeyFormat keyFormat=KeyFormat.newBuilder().setTypeUrl(""String_Node_Str"").setValue(AesGcmKeyFormat.newBuilder().setKeySize(AES_GCM_KEY_SIZE).build().toByteString()).build();
  HybridEncrypt hybridEncrypt=new EciesAeadHkdfHybridEncrypt(recipientPublicKey,salt,hmacAlgo,keyFormat,EcPointFormat.UNCOMPRESSED);
  HybridDecrypt hybridDecrypt=new EciesAeadHkdfHybridDecrypt(recipientPrivateKey,salt,hmacAlgo,keyFormat,EcPointFormat.UNCOMPRESSED);
  byte[] ciphertext=hybridEncrypt.encrypt(PLAINTEXT.getBytes(""String_Node_Str""),CONTEXT.getBytes(""String_Node_Str""));
  byte[] decrypted=hybridDecrypt.decrypt(ciphertext,CONTEXT.getBytes(""String_Node_Str""));
  assertFalse(PLAINTEXT.equals(new String(ciphertext)));
  assertEquals(PLAINTEXT,new String(decrypted));
}","@Test public void testBasicAesGcm() throws Exception {
  ECParameterSpec spec=Util.getCurveSpec(EllipticCurveType.NIST_P256);
  KeyPairGenerator keyGen=KeyPairGenerator.getInstance(""String_Node_Str"");
  keyGen.initialize(spec);
  KeyPair recipientKey=keyGen.generateKeyPair();
  ECPublicKey recipientPublicKey=(ECPublicKey)recipientKey.getPublic();
  ECPrivateKey recipientPrivateKey=(ECPrivateKey)recipientKey.getPrivate();
  byte[] salt=""String_Node_Str"".getBytes(""String_Node_Str"");
  String hmacAlgo=""String_Node_Str"";
  KeyFormat keyFormat=KeyFormat.newBuilder().setTypeUrl(""String_Node_Str"").setValue(AesGcmKeyFormat.newBuilder().setKeySize(AES_GCM_KEY_SIZE).build().toByteString()).build();
  HybridEncrypt hybridEncrypt=new EciesAeadHkdfHybridEncrypt(recipientPublicKey,salt,hmacAlgo,keyFormat,EcPointFormat.UNCOMPRESSED);
  HybridDecrypt hybridDecrypt=new EciesAeadHkdfHybridDecrypt(recipientPrivateKey,salt,hmacAlgo,keyFormat,EcPointFormat.UNCOMPRESSED);
  byte[] ciphertext=hybridEncrypt.encrypt(PLAINTEXT.getBytes(""String_Node_Str""),CONTEXT.getBytes(""String_Node_Str""));
  byte[] decrypted=hybridDecrypt.decrypt(ciphertext,CONTEXT.getBytes(""String_Node_Str""));
  assertFalse(PLAINTEXT.equals(new String(ciphertext,""String_Node_Str"")));
  assertEquals(PLAINTEXT,new String(decrypted,""String_Node_Str""));
}",0.9861325115562404
111317,"public MacJce(String algorithm,java.security.Key key,int digestSize) throws GeneralSecurityException {
  this.mac=javax.crypto.Mac.getInstance(algorithm);
  this.digestSize=digestSize;
  mac.init(key);
}","public MacJce(String algorithm,java.security.Key key,int digestSize) throws GeneralSecurityException {
  this.mac=javax.crypto.Mac.getInstance(algorithm);
  this.algorithm=algorithm;
  this.digestSize=digestSize;
  mac.init(key);
  this.key=key;
}",0.9022222222222224
111318,"@Override public byte[] computeMac(final byte[] data) throws GeneralSecurityException {
  javax.crypto.Mac tmp=instance();
  tmp.update(data);
  byte[] digest=new byte[digestSize];
  System.arraycopy(tmp.doFinal(),0,digest,0,digestSize);
  return digest;
}","@Override public byte[] computeMac(final byte[] data) throws GeneralSecurityException {
  javax.crypto.Mac tmp=javax.crypto.Mac.getInstance(this.algorithm);
  tmp.init(this.key);
  tmp.update(data);
  byte[] digest=new byte[digestSize];
  System.arraycopy(tmp.doFinal(),0,digest,0,digestSize);
  return digest;
}",0.8697183098591549
111319,"/** 
 * Recursively tar file
 * @param inputPath file path can be directory
 * @param outputPath where to put the archived file
 * @param childrenOnly if inputPath is directory and if childrenOnly is true, the archive will contain all of its children, else the archive contains unique entry which is the inputPath itself
 * @param gZipped compress with gzip algorithm
 */
public static void tar(Path inputPath,Path outputPath,boolean gZipped,boolean childrenOnly) throws IOException {
  if (!Files.exists(inputPath)) {
    throw new FileNotFoundException(""String_Node_Str"" + inputPath);
  }
  FileUtils.touch(outputPath.toFile());
  try (TarArchiveOutputStream tarArchiveOutputStream=buildTarStream(outputPath,gZipped)){
    if (!Files.isDirectory(inputPath)) {
      TarArchiveEntry tarEntry=new TarArchiveEntry(inputPath.getFileName().toString());
      if (inputPath.toFile().canExecute()) {
        tarEntry.setMode(tarEntry.getMode() | 0755);
      }
      putTarEntry(tarArchiveOutputStream,tarEntry,inputPath);
    }
 else {
      Path sourcePath=inputPath;
      if (!childrenOnly) {
        sourcePath=inputPath.getParent();
      }
      Files.walkFileTree(inputPath,new TarDirWalker(sourcePath,tarArchiveOutputStream));
    }
    tarArchiveOutputStream.flush();
  }
 }","/** 
 * Recursively tar file
 * @param inputPath file path can be directory
 * @param outputPath where to put the archived file
 * @param childrenOnly if inputPath is directory and if childrenOnly is true, the archive will contain all of its children, else the archive contains unique entry which is the inputPath itself
 * @param gZipped compress with gzip algorithm
 */
public static void tar(Path inputPath,Path outputPath,boolean gZipped,boolean childrenOnly) throws IOException {
  if (!Files.exists(inputPath)) {
    throw new FileNotFoundException(""String_Node_Str"" + inputPath);
  }
  FileUtils.touch(outputPath.toFile());
  try (TarArchiveOutputStream tarArchiveOutputStream=buildTarStream(outputPath,gZipped)){
    if (!Files.isDirectory(inputPath)) {
      TarArchiveEntry tarEntry=new TarArchiveEntry(inputPath.getFileName().toString());
      if (inputPath.toFile().canExecute()) {
        tarEntry.setMode(tarEntry.getMode() | 0755);
      }
      putTarEntry(tarArchiveOutputStream,tarEntry,inputPath);
    }
 else {
      Path sourcePath=inputPath;
      if (!childrenOnly) {
        sourcePath=inputPath.getParent();
      }
      Files.walkFileTree(inputPath,EnumSet.of(FOLLOW_LINKS),Integer.MAX_VALUE,new TarDirWalker(sourcePath,tarArchiveOutputStream));
    }
    tarArchiveOutputStream.flush();
  }
 }",0.9834678969627066
111320,"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  TarArchiveEntry tarEntry=new TarArchiveEntry(FilePathUtil.relativize(basePath,file));
  if (file.toFile().canExecute()) {
    tarEntry.setMode(tarEntry.getMode() | 0755);
  }
  CompressArchiveUtil.putTarEntry(tarArchiveOutputStream,tarEntry,file);
  return FileVisitResult.CONTINUE;
}","@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  if (attrs.isSymbolicLink()) {
    return FileVisitResult.CONTINUE;
  }
  TarArchiveEntry tarEntry=new TarArchiveEntry(FilePathUtil.relativize(basePath,file));
  if (file.toFile().canExecute()) {
    tarEntry.setMode(tarEntry.getMode() | 0755);
  }
  CompressArchiveUtil.putTarEntry(tarArchiveOutputStream,tarEntry,file);
  return FileVisitResult.CONTINUE;
}",0.3494687131050767
111321,"@Test public void testExecutableFlagIsPreserved() throws Exception {
  File executableFile=createExecutableFile();
  File archive=CompressArchiveUtil.archiveTARFiles(executableFile.getParentFile(),asList(executableFile),""String_Node_Str"");
  File expectedFile=extractFileByName(archive,""String_Node_Str"");
  assertThat(""String_Node_Str"",expectedFile.canExecute());
}","@Test public void testExecutableFlagIsPreserved() throws Exception {
  File executableFile=createExecutableFile();
  File archive=CompressArchiveUtil.archiveTARFiles(executableFile.getParentFile(),asList(executableFile),""String_Node_Str"");
  File expectedFile=extractFileByName(archive,""String_Node_Str"",""String_Node_Str"");
  assertThat(""String_Node_Str"",expectedFile.canExecute());
  expectedFile.delete();
  archive.delete();
}",0.920754716981132
111322,"private File extractFileByName(File archive,String filenameToExtract) throws IOException {
  File baseDir=new File(FileUtils.getTempDirectoryPath());
  File expectedFile=new File(baseDir,filenameToExtract);
  expectedFile.delete();
  assertThat(expectedFile.exists(),is(false));
  TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(new GZIPInputStream(new BufferedInputStream(new FileInputStream(archive))));
  TarArchiveEntry entry;
  while ((entry=tarArchiveInputStream.getNextTarEntry()) != null) {
    String individualFiles=entry.getName();
    assertThat(individualFiles,equalTo(""String_Node_Str""));
    IOUtils.copy(tarArchiveInputStream,new FileOutputStream(expectedFile));
    if ((entry.getMode() & 0755) == 0755) {
      expectedFile.setExecutable(true);
    }
  }
  tarArchiveInputStream.close();
  return expectedFile;
}","private File extractFileByName(File archive,String filenameToExtract,String outputName) throws IOException {
  File baseDir=new File(FileUtils.getTempDirectoryPath());
  File expectedFile=new File(baseDir,outputName);
  expectedFile.delete();
  assertThat(expectedFile.exists(),is(false));
  TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(new GZIPInputStream(new BufferedInputStream(new FileInputStream(archive))));
  TarArchiveEntry entry;
  boolean found=false;
  while ((entry=tarArchiveInputStream.getNextTarEntry()) != null) {
    String individualFiles=entry.getName();
    if (individualFiles.equals(filenameToExtract) || individualFiles.endsWith(""String_Node_Str"" + filenameToExtract)) {
      found=true;
      IOUtils.copy(tarArchiveInputStream,new FileOutputStream(expectedFile));
      if ((entry.getMode() & 0755) == 0755) {
        expectedFile.setExecutable(true);
      }
      break;
    }
  }
  assertThat(""String_Node_Str"",found);
  tarArchiveInputStream.close();
  return expectedFile;
}",0.8480340063761955
111323,"/** 
 * @throws com.github.dockerjava.api.exception.NotFoundException No such container
 */
@Override public Void exec() throws NotFoundException {
  if (StringUtils.isNotEmpty(this.hostResource)) {
    if (this.tarInputStream != null) {
      throw new DockerClientException(""String_Node_Str"");
    }
    Path toUpload=null;
    try {
      toUpload=Files.createTempFile(""String_Node_Str"",""String_Node_Str"");
      CompressArchiveUtil.tar(Paths.get(hostResource),toUpload,true,dirChildrenOnly);
    }
 catch (    IOException createFileIOException) {
      if (toUpload != null) {
        toUpload.toFile().delete();
      }
      throw new DockerClientException(""String_Node_Str"" + this.hostResource,createFileIOException);
    }
    try (InputStream uploadStream=Files.newInputStream(toUpload)){
      this.tarInputStream=uploadStream;
      return super.exec();
    }
 catch (    IOException e) {
      throw new DockerClientException(""String_Node_Str"" + toUpload.toFile().getAbsolutePath(),e);
    }
 finally {
      toUpload.toFile().delete();
    }
  }
 else   if (this.tarInputStream == null) {
    throw new DockerClientException(""String_Node_Str"");
  }
  return super.exec();
}","/** 
 * @throws com.github.dockerjava.api.exception.NotFoundException No such container
 */
@Override public Void exec() throws NotFoundException {
  if (StringUtils.isNotEmpty(this.hostResource)) {
    if (this.tarInputStream != null) {
      throw new DockerClientException(""String_Node_Str"");
    }
    Path toUpload=null;
    try {
      toUpload=Files.createTempFile(""String_Node_Str"",""String_Node_Str"");
      CompressArchiveUtil.tar(Paths.get(hostResource),toUpload,true,dirChildrenOnly);
    }
 catch (    IOException createFileIOException) {
      if (toUpload != null) {
        toUpload.toFile().delete();
      }
      throw new DockerClientException(""String_Node_Str"" + this.hostResource,createFileIOException);
    }
    try (InputStream uploadStream=Files.newInputStream(toUpload)){
      this.tarInputStream=uploadStream;
      return super.exec();
    }
 catch (    IOException e) {
      throw new DockerClientException(""String_Node_Str"" + toUpload.toFile().getAbsolutePath(),e);
    }
 finally {
      this.tarInputStream=null;
      toUpload.toFile().delete();
    }
  }
 else   if (this.tarInputStream == null) {
    throw new DockerClientException(""String_Node_Str"");
  }
  return super.exec();
}",0.9866888519134775
111324,"/** 
 * @see #ioMergedRecursive
 */
@CheckForNull public List<Long> getIoMergedRecursive(){
  return ioMergedRecursive;
}","/** 
 * @see #ioMergedRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoMergedRecursive(){
  return ioMergedRecursive;
}",0.9444444444444444
111325,"/** 
 * @see #sectorsRecursive
 */
@CheckForNull public List<Long> getSectorsRecursive(){
  return sectorsRecursive;
}","/** 
 * @see #sectorsRecursive
 */
@CheckForNull public List<BlkioStatEntry> getSectorsRecursive(){
  return sectorsRecursive;
}",0.943089430894309
111326,"/** 
 * @see #ioWaitTimeRecursive
 */
@CheckForNull public List<Long> getIoWaitTimeRecursive(){
  return ioWaitTimeRecursive;
}","/** 
 * @see #ioWaitTimeRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoWaitTimeRecursive(){
  return ioWaitTimeRecursive;
}",0.946969696969697
111327,"/** 
 * @see #ioTimeRecursive
 */
@CheckForNull public List<Long> getIoTimeRecursive(){
  return ioTimeRecursive;
}","/** 
 * @see #ioTimeRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoTimeRecursive(){
  return ioTimeRecursive;
}",0.9416666666666668
111328,"/** 
 * @see #ioServiceBytesRecursive
 */
@CheckForNull public List<Long> getIoServiceBytesRecursive(){
  return ioServiceBytesRecursive;
}","/** 
 * @see #ioServiceBytesRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoServiceBytesRecursive(){
  return ioServiceBytesRecursive;
}",0.9513888888888888
111329,"/** 
 * @see #ioServicedRecursive
 */
@CheckForNull public List<Long> getIoServicedRecursive(){
  return ioServicedRecursive;
}","/** 
 * @see #ioServicedRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoServicedRecursive(){
  return ioServicedRecursive;
}",0.946969696969697
111330,"/** 
 * @see #ioServiceTimeRecursive
 */
@CheckForNull public List<Long> getIoServiceTimeRecursive(){
  return ioServiceTimeRecursive;
}","/** 
 * @see #ioServiceTimeRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoServiceTimeRecursive(){
  return ioServiceTimeRecursive;
}",0.950354609929078
111331,"/** 
 * @see #ioQueueRecursive
 */
@CheckForNull public List<Long> getIoQueueRecursive(){
  return ioQueueRecursive;
}","/** 
 * @see #ioQueueRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoQueueRecursive(){
  return ioQueueRecursive;
}",0.943089430894309
111332,"@Test public void serderJson1() throws IOException {
  final ObjectMapper mapper=new ObjectMapper();
  final JavaType type=mapper.getTypeFactory().uncheckedSimpleType(Statistics.class);
  final Statistics statistics=testRoundTrip(RemoteApiVersion.VERSION_1_27,""String_Node_Str"",type);
  assertThat(statistics.getRead(),equalTo(""String_Node_Str""));
  final StatisticNetworksConfig network=statistics.getNetworks().get(""String_Node_Str"");
  assertThat(network.getRxBytes(),is(1230L));
  assertThat(network.getRxPackets(),is(19L));
  assertThat(network.getRxErrors(),is(0L));
  assertThat(network.getRxDropped(),is(0L));
  assertThat(network.getTxBytes(),is(0L));
  assertThat(network.getTxPackets(),is(0L));
  assertThat(network.getTxErrors(),is(0L));
  assertThat(network.getTxDropped(),is(0L));
  final MemoryStatsConfig memoryStats=statistics.getMemoryStats();
  assertThat(memoryStats.getUsage(),is(647168L));
  assertThat(memoryStats.getMaxUsage(),is(1703936L));
  final StatsConfig stats=memoryStats.getStats();
  assertThat(stats.getActiveAnon(),is(102400L));
  assertThat(stats.getActiveFile(),is(0L));
  assertThat(stats.getCache(),is(0L));
  assertThat(stats.getDirty(),is(0L));
  assertThat(stats.getHierarchicalMemoryLimit(),is(9223372036854771712L));
  assertThat(stats.getHierarchicalMemswLimit(),is(9223372036854771712L));
  assertThat(stats.getInactiveAnon(),is(0L));
  assertThat(stats.getInactiveFile(),is(0L));
  assertThat(stats.getMappedFile(),is(0L));
  assertThat(stats.getPgfault(),is(9656L));
  assertThat(stats.getPgmajfault(),is(0L));
  assertThat(stats.getPgpgin(),is(3425L));
  assertThat(stats.getPgpgout(),is(3400L));
  assertThat(stats.getRss(),is(102400L));
  assertThat(stats.getRssHuge(),is(0L));
  assertThat(stats.getSwap(),is(0L));
  assertThat(stats.getTotalActiveAnon(),is(102400L));
  assertThat(stats.getTotalActiveFile(),is(0L));
  assertThat(stats.getTotalCache(),is(0L));
  assertThat(stats.getTotalDirty(),is(0L));
  assertThat(stats.getTotalInactiveAnon(),is(0L));
  assertThat(stats.getTotalInactiveFile(),is(0L));
  assertThat(stats.getTotalMappedFile(),is(0L));
  assertThat(stats.getTotalPgfault(),is(9656L));
  assertThat(stats.getTotalPgmajfault(),is(0L));
  assertThat(stats.getTotalPgpgin(),is(3425L));
  assertThat(stats.getTotalPgpgout(),is(3400L));
  assertThat(stats.getTotalRss(),is(102400L));
  assertThat(stats.getTotalRssHuge(),is(0L));
  assertThat(stats.getTotalSwap(),is(0L));
  assertThat(stats.getTotalUnevictable(),is(0L));
  assertThat(stats.getTotalWriteback(),is(0L));
  assertThat(stats.getUnevictable(),is(0L));
  assertThat(stats.getWriteback(),is(0L));
  assertThat(memoryStats.getLimit(),is(2095874048L));
  final BlkioStatsConfig blkioStats=statistics.getBlkioStats();
  assertThat(blkioStats.getIoServiceBytesRecursive(),is(empty()));
  assertThat(blkioStats.getIoServicedRecursive(),is(empty()));
  assertThat(blkioStats.getIoQueueRecursive(),is(empty()));
  assertThat(blkioStats.getIoServiceTimeRecursive(),is(empty()));
  assertThat(blkioStats.getIoWaitTimeRecursive(),is(empty()));
  assertThat(blkioStats.getIoMergedRecursive(),is(empty()));
  assertThat(blkioStats.getIoTimeRecursive(),is(empty()));
  assertThat(blkioStats.getSectorsRecursive(),is(empty()));
  final CpuStatsConfig cpuStats=statistics.getCpuStats();
  final CpuUsageConfig cpuUsage=cpuStats.getCpuUsage();
  assertThat(cpuUsage.getTotalUsage(),is(212198028L));
  assertThat(cpuUsage.getPercpuUsage(),equalTo(Arrays.asList(71592953L,42494761L,59298344L,38811970L)));
  assertThat(cpuUsage.getUsageInKernelmode(),is(170000000L));
  assertThat(cpuUsage.getUsageInUsermode(),is(20000000L));
  assertThat(cpuStats.getSystemCpuUsage(),is(545941980000000L));
  assertThat(cpuStats.getOnlineCpus(),is(4L));
  final ThrottlingDataConfig throttlingData=cpuStats.getThrottlingData();
  assertThat(throttlingData.getPeriods(),is(0L));
  assertThat(throttlingData.getThrottledPeriods(),is(0L));
  assertThat(throttlingData.getThrottledTime(),is(0L));
  final CpuStatsConfig preCpuStats=statistics.getPreCpuStats();
  final CpuUsageConfig preCpuUsage=preCpuStats.getCpuUsage();
  assertThat(preCpuUsage.getTotalUsage(),is(211307214L));
  assertThat(preCpuUsage.getPercpuUsage(),equalTo(Arrays.asList(71451389L,42097782L,59298344L,38459699L)));
  assertThat(preCpuUsage.getUsageInKernelmode(),is(170000000L));
  assertThat(preCpuUsage.getUsageInUsermode(),is(20000000L));
  assertThat(preCpuStats.getSystemCpuUsage(),is(545937990000000L));
  assertThat(preCpuStats.getOnlineCpus(),is(4L));
  final ThrottlingDataConfig preThrottlingData=preCpuStats.getThrottlingData();
  assertThat(preThrottlingData.getPeriods(),is(0L));
  assertThat(preThrottlingData.getThrottledPeriods(),is(0L));
  assertThat(preThrottlingData.getThrottledTime(),is(0L));
  final PidsStatsConfig pidsStats=statistics.getPidsStats();
  assertThat(pidsStats.getCurrent(),is(2L));
}","@Test public void serderJson1() throws IOException {
  final ObjectMapper mapper=new ObjectMapper();
  final JavaType type=mapper.getTypeFactory().uncheckedSimpleType(Statistics.class);
  final Statistics statistics=testRoundTrip(RemoteApiVersion.VERSION_1_27,""String_Node_Str"",type);
  assertThat(statistics.getRead(),equalTo(""String_Node_Str""));
  final StatisticNetworksConfig network=statistics.getNetworks().get(""String_Node_Str"");
  assertThat(network.getRxBytes(),is(1230L));
  assertThat(network.getRxPackets(),is(19L));
  assertThat(network.getRxErrors(),is(0L));
  assertThat(network.getRxDropped(),is(0L));
  assertThat(network.getTxBytes(),is(0L));
  assertThat(network.getTxPackets(),is(0L));
  assertThat(network.getTxErrors(),is(0L));
  assertThat(network.getTxDropped(),is(0L));
  final MemoryStatsConfig memoryStats=statistics.getMemoryStats();
  assertThat(memoryStats.getUsage(),is(647168L));
  assertThat(memoryStats.getMaxUsage(),is(1703936L));
  final StatsConfig stats=memoryStats.getStats();
  assertThat(stats.getActiveAnon(),is(102400L));
  assertThat(stats.getActiveFile(),is(0L));
  assertThat(stats.getCache(),is(0L));
  assertThat(stats.getDirty(),is(0L));
  assertThat(stats.getHierarchicalMemoryLimit(),is(9223372036854771712L));
  assertThat(stats.getHierarchicalMemswLimit(),is(9223372036854771712L));
  assertThat(stats.getInactiveAnon(),is(0L));
  assertThat(stats.getInactiveFile(),is(0L));
  assertThat(stats.getMappedFile(),is(0L));
  assertThat(stats.getPgfault(),is(9656L));
  assertThat(stats.getPgmajfault(),is(0L));
  assertThat(stats.getPgpgin(),is(3425L));
  assertThat(stats.getPgpgout(),is(3400L));
  assertThat(stats.getRss(),is(102400L));
  assertThat(stats.getRssHuge(),is(0L));
  assertThat(stats.getSwap(),is(0L));
  assertThat(stats.getTotalActiveAnon(),is(102400L));
  assertThat(stats.getTotalActiveFile(),is(0L));
  assertThat(stats.getTotalCache(),is(0L));
  assertThat(stats.getTotalDirty(),is(0L));
  assertThat(stats.getTotalInactiveAnon(),is(0L));
  assertThat(stats.getTotalInactiveFile(),is(0L));
  assertThat(stats.getTotalMappedFile(),is(0L));
  assertThat(stats.getTotalPgfault(),is(9656L));
  assertThat(stats.getTotalPgmajfault(),is(0L));
  assertThat(stats.getTotalPgpgin(),is(3425L));
  assertThat(stats.getTotalPgpgout(),is(3400L));
  assertThat(stats.getTotalRss(),is(102400L));
  assertThat(stats.getTotalRssHuge(),is(0L));
  assertThat(stats.getTotalSwap(),is(0L));
  assertThat(stats.getTotalUnevictable(),is(0L));
  assertThat(stats.getTotalWriteback(),is(0L));
  assertThat(stats.getUnevictable(),is(0L));
  assertThat(stats.getWriteback(),is(0L));
  assertThat(memoryStats.getLimit(),is(2095874048L));
  final BlkioStatsConfig blkioStats=statistics.getBlkioStats();
  assertThat(blkioStats.getIoServiceBytesRecursive().size(),is(2));
  assertThat(blkioStats.getIoServiceBytesRecursive().get(0).getValue(),is(26214L));
  assertThat(blkioStats.getIoServicedRecursive().size(),is(2));
  assertThat(blkioStats.getIoQueueRecursive(),is(empty()));
  assertThat(blkioStats.getIoServiceTimeRecursive(),is(empty()));
  assertThat(blkioStats.getIoWaitTimeRecursive(),is(empty()));
  assertThat(blkioStats.getIoMergedRecursive(),is(empty()));
  assertThat(blkioStats.getIoTimeRecursive(),is(empty()));
  assertThat(blkioStats.getSectorsRecursive(),is(empty()));
  final CpuStatsConfig cpuStats=statistics.getCpuStats();
  final CpuUsageConfig cpuUsage=cpuStats.getCpuUsage();
  assertThat(cpuUsage.getTotalUsage(),is(212198028L));
  assertThat(cpuUsage.getPercpuUsage(),equalTo(Arrays.asList(71592953L,42494761L,59298344L,38811970L)));
  assertThat(cpuUsage.getUsageInKernelmode(),is(170000000L));
  assertThat(cpuUsage.getUsageInUsermode(),is(20000000L));
  assertThat(cpuStats.getSystemCpuUsage(),is(545941980000000L));
  assertThat(cpuStats.getOnlineCpus(),is(4L));
  final ThrottlingDataConfig throttlingData=cpuStats.getThrottlingData();
  assertThat(throttlingData.getPeriods(),is(0L));
  assertThat(throttlingData.getThrottledPeriods(),is(0L));
  assertThat(throttlingData.getThrottledTime(),is(0L));
  final CpuStatsConfig preCpuStats=statistics.getPreCpuStats();
  final CpuUsageConfig preCpuUsage=preCpuStats.getCpuUsage();
  assertThat(preCpuUsage.getTotalUsage(),is(211307214L));
  assertThat(preCpuUsage.getPercpuUsage(),equalTo(Arrays.asList(71451389L,42097782L,59298344L,38459699L)));
  assertThat(preCpuUsage.getUsageInKernelmode(),is(170000000L));
  assertThat(preCpuUsage.getUsageInUsermode(),is(20000000L));
  assertThat(preCpuStats.getSystemCpuUsage(),is(545937990000000L));
  assertThat(preCpuStats.getOnlineCpus(),is(4L));
  final ThrottlingDataConfig preThrottlingData=preCpuStats.getThrottlingData();
  assertThat(preThrottlingData.getPeriods(),is(0L));
  assertThat(preThrottlingData.getThrottledPeriods(),is(0L));
  assertThat(preThrottlingData.getThrottledTime(),is(0L));
  final PidsStatsConfig pidsStats=statistics.getPidsStats();
  assertThat(pidsStats.getCurrent(),is(2L));
}",0.98702088825796
111333,"@Override public ListServicesCmd withIdFilter(List<String> ids){
  checkNotNull(ids,""String_Node_Str"");
  this.filters.withIds(ids);
  return this;
}","@Override public ListServicesCmd withIdFilter(List<String> ids){
  checkNotNull(ids,""String_Node_Str"");
  this.filters.withFilter(""String_Node_Str"",ids);
  return this;
}",0.915360501567398
111334,"@Override public ListServicesCmd withNameFilter(List<String> names){
  checkNotNull(names,""String_Node_Str"");
  this.filters.withNames(names);
  return this;
}","@Override public ListServicesCmd withNameFilter(List<String> names){
  checkNotNull(names,""String_Node_Str"");
  this.filters.withFilter(""String_Node_Str"",names);
  return this;
}",0.9198813056379822
111335,"@Test public void testListTasks() throws DockerException {
  dockerRule.getClient().initializeSwarmCmd(new SwarmSpec()).withListenAddr(""String_Node_Str"").withAdvertiseAddr(""String_Node_Str"").exec();
  CreateServiceResponse response=dockerRule.getClient().createServiceCmd(new ServiceSpec().withName(SERVICE_NAME).withMode(new ServiceModeConfig().withReplicated(new ServiceReplicatedModeOptions().withReplicas(2))).withTaskTemplate(new TaskSpec().withContainerSpec(new ContainerSpec().withImage(DEFAULT_IMAGE)))).exec();
  String serviceId=response.getId();
  List<Task> tasks=dockerRule.getClient().listTasksCmd().withServiceFilter(serviceId).exec();
  assertThat(tasks,hasSize(2));
  String taskId=tasks.get(0).getId(), secondId=tasks.get(1).getId();
  tasks=dockerRule.getClient().listTasksCmd().withIdFilter(taskId).exec();
  assertThat(tasks,hasSize(1));
  assertThat(tasks.get(0).getId(),is(taskId));
  tasks=dockerRule.getClient().listTasksCmd().withIdFilter(secondId,taskId).exec();
  String nodeId=tasks.get(0).getNodeId();
  tasks=dockerRule.getClient().listTasksCmd().withNodeFilter(nodeId).exec();
  assertThat(tasks.get(0).getNodeId(),is(nodeId));
  tasks=dockerRule.getClient().listTasksCmd().withStateFilter(TaskState.RUNNING).exec();
  assertThat(tasks,hasSize(2));
  dockerRule.getClient().removeServiceCmd(SERVICE_NAME).exec();
}","@Test public void testListTasks() throws DockerException {
  dockerRule.getClient().initializeSwarmCmd(new SwarmSpec()).withListenAddr(""String_Node_Str"").withAdvertiseAddr(""String_Node_Str"").exec();
  Map<String,String> taskLabels=Collections.singletonMap(TASK_LABEL_KEY,TASK_LABEL_VALUE);
  CreateServiceResponse response=dockerRule.getClient().createServiceCmd(new ServiceSpec().withName(SERVICE_NAME).withMode(new ServiceModeConfig().withReplicated(new ServiceReplicatedModeOptions().withReplicas(2))).withTaskTemplate(new TaskSpec().withContainerSpec(new ContainerSpec().withImage(DEFAULT_IMAGE))).withLabels(taskLabels)).exec();
  String serviceId=response.getId();
  List<Task> tasks=dockerRule.getClient().listTasksCmd().withServiceFilter(serviceId).exec();
  assertThat(tasks,hasSize(2));
  String taskId=tasks.get(0).getId(), secondId=tasks.get(1).getId();
  tasks=dockerRule.getClient().listTasksCmd().withIdFilter(taskId).exec();
  assertThat(tasks,hasSize(1));
  assertThat(tasks.get(0).getId(),is(taskId));
  tasks=dockerRule.getClient().listTasksCmd().withIdFilter(secondId,taskId).exec();
  String nodeId=tasks.get(0).getNodeId();
  tasks=dockerRule.getClient().listTasksCmd().withNodeFilter(nodeId).exec();
  assertThat(tasks.get(0).getNodeId(),is(nodeId));
  tasks=dockerRule.getClient().listTasksCmd().withStateFilter(TaskState.RUNNING).exec();
  assertThat(tasks,hasSize(2));
  tasks=dockerRule.getClient().listTasksCmd().withLabelFilter(taskLabels).exec();
  assertThat(tasks,hasSize(2));
  tasks=dockerRule.getClient().listTasksCmd().withLabelFilter(TASK_LABEL_KEY + ""String_Node_Str"" + TASK_LABEL_VALUE).exec();
  assertThat(tasks,hasSize(2));
  dockerRule.getClient().removeServiceCmd(SERVICE_NAME).exec();
}",0.8748781280467989
111336,"private String getBodyAsMessage(ClientResponseContext responseContext) throws IOException {
  if (responseContext.hasEntity()) {
    int contentLength=responseContext.getLength();
    if (contentLength != -1) {
      byte[] buffer=new byte[contentLength];
      try {
        InputStream entityStream=responseContext.getEntityStream();
        IOUtils.readFully(entityStream,buffer);
        entityStream.close();
      }
 catch (      EOFException e) {
        return null;
      }
      Charset charset=null;
      MediaType mediaType=responseContext.getMediaType();
      if (mediaType != null) {
        String charsetName=mediaType.getParameters().get(""String_Node_Str"");
        if (charsetName != null) {
          try {
            charset=Charset.forName(charsetName);
          }
 catch (          Exception e) {
          }
        }
      }
      if (charset == null) {
        charset=Charset.defaultCharset();
      }
      return new String(buffer,charset);
    }
  }
  return null;
}","private String getBodyAsMessage(ClientResponseContext responseContext) throws IOException {
  if (responseContext.hasEntity()) {
    try (InputStream entityStream=responseContext.getEntityStream()){
      Charset charset=null;
      MediaType mediaType=responseContext.getMediaType();
      if (mediaType != null) {
        String charsetName=mediaType.getParameters().get(""String_Node_Str"");
        if (charsetName != null) {
          try {
            charset=Charset.forName(charsetName);
          }
 catch (          Exception ignored) {
          }
        }
      }
      if (charset == null) {
        charset=Charset.defaultCharset();
      }
      return IOUtils.toString(entityStream,charset);
    }
 catch (    Exception ignored) {
    }
  }
  return null;
}",0.2766798418972332
111337,"@Override protected List<Service> execute(ListServicesCmd command){
  WebTarget webTarget=getBaseResource().path(""String_Node_Str"");
  if (command.getFilters() != null && !command.getFilters().isEmpty()) {
    webTarget=webTarget.queryParam(""String_Node_Str"",urlPathSegmentEscaper().escape(FiltersEncoder.jsonEncode(command.getFilters())));
  }
  LOGGER.trace(""String_Node_Str"",webTarget);
  List<Service> services=webTarget.request().accept(MediaType.APPLICATION_JSON).get(new TypeReference<List<Service>>(){
  }
);
  LOGGER.trace(""String_Node_Str"",services);
  return services;
}","@Override protected List<Service> execute(ListServicesCmd command){
  WebTarget webTarget=getBaseResource().path(""String_Node_Str"");
  if (command.getFilters() != null && !command.getFilters().isEmpty()) {
    webTarget=webTarget.queryParam(""String_Node_Str"",FiltersEncoder.jsonEncode(command.getFilters()));
  }
  LOGGER.trace(""String_Node_Str"",webTarget);
  List<Service> services=webTarget.request().accept(MediaType.APPLICATION_JSON).get(new TypeReference<List<Service>>(){
  }
);
  LOGGER.trace(""String_Node_Str"",services);
  return services;
}",0.9079646017699116
111338,"@Override protected List<SwarmNode> execute(ListSwarmNodesCmd command){
  WebTarget webTarget=getBaseResource().path(""String_Node_Str"");
  if (command.getFilters() != null && !command.getFilters().isEmpty()) {
    webTarget=webTarget.queryParam(""String_Node_Str"",urlPathSegmentEscaper().escape(FiltersEncoder.jsonEncode(command.getFilters())));
  }
  LOGGER.trace(""String_Node_Str"",webTarget);
  List<SwarmNode> nodes=webTarget.request().accept(MediaType.APPLICATION_JSON).get(new TypeReference<List<SwarmNode>>(){
  }
);
  LOGGER.trace(""String_Node_Str"",nodes);
  return nodes;
}","@Override protected List<SwarmNode> execute(ListSwarmNodesCmd command){
  WebTarget webTarget=getBaseResource().path(""String_Node_Str"");
  if (command.getFilters() != null && !command.getFilters().isEmpty()) {
    webTarget=webTarget.queryParam(""String_Node_Str"",FiltersEncoder.jsonEncode(command.getFilters()));
  }
  LOGGER.trace(""String_Node_Str"",webTarget);
  List<SwarmNode> nodes=webTarget.request().accept(MediaType.APPLICATION_JSON).get(new TypeReference<List<SwarmNode>>(){
  }
);
  LOGGER.trace(""String_Node_Str"",nodes);
  return nodes;
}",0.9078014184397164
111339,"@Override protected List<Task> execute(ListTasksCmd command){
  WebTarget webTarget=getBaseResource().path(""String_Node_Str"");
  if (command.getFilters() != null && !command.getFilters().isEmpty()) {
    webTarget=webTarget.queryParam(""String_Node_Str"",urlPathSegmentEscaper().escape(FiltersEncoder.jsonEncode(command.getFilters())));
  }
  LOGGER.trace(""String_Node_Str"",webTarget);
  List<Task> tasks=webTarget.request().accept(MediaType.APPLICATION_JSON).get(new TypeReference<List<Task>>(){
  }
);
  LOGGER.trace(""String_Node_Str"",tasks);
  return tasks;
}","@Override protected List<Task> execute(ListTasksCmd command){
  WebTarget webTarget=getBaseResource().path(""String_Node_Str"");
  if (command.getFilters() != null && !command.getFilters().isEmpty()) {
    webTarget=webTarget.queryParam(""String_Node_Str"",FiltersEncoder.jsonEncode(command.getFilters()));
  }
  LOGGER.trace(""String_Node_Str"",webTarget);
  List<Task> tasks=webTarget.request().accept(MediaType.APPLICATION_JSON).get(new TypeReference<List<Task>>(){
  }
);
  LOGGER.trace(""String_Node_Str"",tasks);
  return tasks;
}",0.9044117647058824
111340,@CheckForNull Integer getVersion();,@CheckForNull Long getVersion();,0.8955223880597015
111341,UpdateSwarmNodeCmd withVersion(@Nonnull Integer versionId);,UpdateSwarmNodeCmd withVersion(@Nonnull Long versionId);,0.9391304347826088
111342,"public ObjectVersion withIndex(Integer index){
  this.index=index;
  return this;
}","public ObjectVersion withIndex(Long index){
  this.index=index;
  return this;
}",0.9570552147239264
111343,"public Integer getIndex(){
  return index;
}","public Long getIndex(){
  return index;
}",0.9176470588235294
111344,"@CheckForNull @Override public Integer getVersion(){
  return version;
}","@CheckForNull @Override public Long getVersion(){
  return version;
}",0.950354609929078
111345,"@Override public UpdateSwarmNodeCmd withVersion(@Nonnull Integer versionId){
  this.version=versionId;
  return this;
}","@Override public UpdateSwarmNodeCmd withVersion(@Nonnull Long versionId){
  this.version=versionId;
  return this;
}",0.9702127659574468
111346,"@Test public void testUpdateSwarmNode(){
  DockerClient docker1=startDockerInDocker();
  docker1.initializeSwarmCmd(new SwarmSpec()).exec();
  List<SwarmNode> nodes=docker1.listSwarmNodesCmd().exec();
  assertThat(1,is(nodes.size()));
  SwarmNode node=nodes.get(0);
  assertThat(SwarmNodeState.READY,is(node.getStatus().getState()));
  SwarmNodeSpec nodeSpec=node.getSpec().withAvailability(SwarmNodeAvailability.PAUSE);
  docker1.updateSwarmNodeCmd().withSwarmNodeId(node.getId()).withVersion(node.getVersion().getIndex()).withSwarmNodeSpec(nodeSpec).exec();
  nodes=docker1.listSwarmNodesCmd().exec();
  assertThat(1,is(nodes.size()));
  assertThat(SwarmNodeAvailability.PAUSE,is(nodes.get(0).getSpec().getAvailability()));
}","@Test public void testUpdateSwarmNode(){
  DockerClient docker1=startDockerInDocker();
  docker1.initializeSwarmCmd(new SwarmSpec()).exec();
  List<SwarmNode> nodes=docker1.listSwarmNodesCmd().exec();
  assertThat(1,is(nodes.size()));
  SwarmNode node=nodes.get(0);
  assertThat(SwarmNodeState.READY,is(node.getStatus().getState()));
  SwarmNodeSpec nodeSpec=node.getSpec().withAvailability(SwarmNodeAvailability.PAUSE);
  docker1.updateSwarmNodeCmd().withSwarmNodeId(node.getId()).withVersion(node.getVersion().getIndex()).withSwarmNodeSpec(nodeSpec).exec();
  nodes=docker1.listSwarmNodesCmd().exec();
  assertThat(nodes.size(),is(1));
  assertThat(nodes.get(0).getSpec().getAvailability(),is(SwarmNodeAvailability.PAUSE));
}",0.9174690508940851
111347,"/** 
 * @see #ioMergedRecursive
 */
@CheckForNull public List<Long> getIoMergedRecursive(){
  return ioMergedRecursive;
}","/** 
 * @see #ioMergedRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoMergedRecursive(){
  return ioMergedRecursive;
}",0.9444444444444444
111348,"/** 
 * @see #sectorsRecursive
 */
@CheckForNull public List<Long> getSectorsRecursive(){
  return sectorsRecursive;
}","/** 
 * @see #sectorsRecursive
 */
@CheckForNull public List<BlkioStatEntry> getSectorsRecursive(){
  return sectorsRecursive;
}",0.943089430894309
111349,"/** 
 * @see #ioWaitTimeRecursive
 */
@CheckForNull public List<Long> getIoWaitTimeRecursive(){
  return ioWaitTimeRecursive;
}","/** 
 * @see #ioWaitTimeRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoWaitTimeRecursive(){
  return ioWaitTimeRecursive;
}",0.946969696969697
111350,"/** 
 * @see #ioTimeRecursive
 */
@CheckForNull public List<Long> getIoTimeRecursive(){
  return ioTimeRecursive;
}","/** 
 * @see #ioTimeRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoTimeRecursive(){
  return ioTimeRecursive;
}",0.9416666666666668
111351,"/** 
 * @see #ioServiceBytesRecursive
 */
@CheckForNull public List<Long> getIoServiceBytesRecursive(){
  return ioServiceBytesRecursive;
}","/** 
 * @see #ioServiceBytesRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoServiceBytesRecursive(){
  return ioServiceBytesRecursive;
}",0.9513888888888888
111352,"/** 
 * @see #ioServicedRecursive
 */
@CheckForNull public List<Long> getIoServicedRecursive(){
  return ioServicedRecursive;
}","/** 
 * @see #ioServicedRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoServicedRecursive(){
  return ioServicedRecursive;
}",0.946969696969697
111353,"/** 
 * @see #ioServiceTimeRecursive
 */
@CheckForNull public List<Long> getIoServiceTimeRecursive(){
  return ioServiceTimeRecursive;
}","/** 
 * @see #ioServiceTimeRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoServiceTimeRecursive(){
  return ioServiceTimeRecursive;
}",0.950354609929078
111354,"/** 
 * @see #ioQueueRecursive
 */
@CheckForNull public List<Long> getIoQueueRecursive(){
  return ioQueueRecursive;
}","/** 
 * @see #ioQueueRecursive
 */
@CheckForNull public List<BlkioStatEntry> getIoQueueRecursive(){
  return ioQueueRecursive;
}",0.943089430894309
111355,"@Test public void serderJson1() throws IOException {
  final ObjectMapper mapper=new ObjectMapper();
  final JavaType type=mapper.getTypeFactory().uncheckedSimpleType(Statistics.class);
  final Statistics statistics=testRoundTrip(RemoteApiVersion.VERSION_1_27,""String_Node_Str"",type);
  assertThat(statistics.getRead(),equalTo(""String_Node_Str""));
  final StatisticNetworksConfig network=statistics.getNetworks().get(""String_Node_Str"");
  assertThat(network.getRxBytes(),is(1230L));
  assertThat(network.getRxPackets(),is(19L));
  assertThat(network.getRxErrors(),is(0L));
  assertThat(network.getRxDropped(),is(0L));
  assertThat(network.getTxBytes(),is(0L));
  assertThat(network.getTxPackets(),is(0L));
  assertThat(network.getTxErrors(),is(0L));
  assertThat(network.getTxDropped(),is(0L));
  final MemoryStatsConfig memoryStats=statistics.getMemoryStats();
  assertThat(memoryStats.getUsage(),is(647168L));
  assertThat(memoryStats.getMaxUsage(),is(1703936L));
  final StatsConfig stats=memoryStats.getStats();
  assertThat(stats.getActiveAnon(),is(102400L));
  assertThat(stats.getActiveFile(),is(0L));
  assertThat(stats.getCache(),is(0L));
  assertThat(stats.getDirty(),is(0L));
  assertThat(stats.getHierarchicalMemoryLimit(),is(9223372036854771712L));
  assertThat(stats.getHierarchicalMemswLimit(),is(9223372036854771712L));
  assertThat(stats.getInactiveAnon(),is(0L));
  assertThat(stats.getInactiveFile(),is(0L));
  assertThat(stats.getMappedFile(),is(0L));
  assertThat(stats.getPgfault(),is(9656L));
  assertThat(stats.getPgmajfault(),is(0L));
  assertThat(stats.getPgpgin(),is(3425L));
  assertThat(stats.getPgpgout(),is(3400L));
  assertThat(stats.getRss(),is(102400L));
  assertThat(stats.getRssHuge(),is(0L));
  assertThat(stats.getSwap(),is(0L));
  assertThat(stats.getTotalActiveAnon(),is(102400L));
  assertThat(stats.getTotalActiveFile(),is(0L));
  assertThat(stats.getTotalCache(),is(0L));
  assertThat(stats.getTotalDirty(),is(0L));
  assertThat(stats.getTotalInactiveAnon(),is(0L));
  assertThat(stats.getTotalInactiveFile(),is(0L));
  assertThat(stats.getTotalMappedFile(),is(0L));
  assertThat(stats.getTotalPgfault(),is(9656L));
  assertThat(stats.getTotalPgmajfault(),is(0L));
  assertThat(stats.getTotalPgpgin(),is(3425L));
  assertThat(stats.getTotalPgpgout(),is(3400L));
  assertThat(stats.getTotalRss(),is(102400L));
  assertThat(stats.getTotalRssHuge(),is(0L));
  assertThat(stats.getTotalSwap(),is(0L));
  assertThat(stats.getTotalUnevictable(),is(0L));
  assertThat(stats.getTotalWriteback(),is(0L));
  assertThat(stats.getUnevictable(),is(0L));
  assertThat(stats.getWriteback(),is(0L));
  assertThat(memoryStats.getLimit(),is(2095874048L));
  final BlkioStatsConfig blkioStats=statistics.getBlkioStats();
  assertThat(blkioStats.getIoServiceBytesRecursive(),is(empty()));
  assertThat(blkioStats.getIoServicedRecursive(),is(empty()));
  assertThat(blkioStats.getIoQueueRecursive(),is(empty()));
  assertThat(blkioStats.getIoServiceTimeRecursive(),is(empty()));
  assertThat(blkioStats.getIoWaitTimeRecursive(),is(empty()));
  assertThat(blkioStats.getIoMergedRecursive(),is(empty()));
  assertThat(blkioStats.getIoTimeRecursive(),is(empty()));
  assertThat(blkioStats.getSectorsRecursive(),is(empty()));
  final CpuStatsConfig cpuStats=statistics.getCpuStats();
  final CpuUsageConfig cpuUsage=cpuStats.getCpuUsage();
  assertThat(cpuUsage.getTotalUsage(),is(212198028L));
  assertThat(cpuUsage.getPercpuUsage(),equalTo(Arrays.asList(71592953L,42494761L,59298344L,38811970L)));
  assertThat(cpuUsage.getUsageInKernelmode(),is(170000000L));
  assertThat(cpuUsage.getUsageInUsermode(),is(20000000L));
  assertThat(cpuStats.getSystemCpuUsage(),is(545941980000000L));
  assertThat(cpuStats.getOnlineCpus(),is(4L));
  final ThrottlingDataConfig throttlingData=cpuStats.getThrottlingData();
  assertThat(throttlingData.getPeriods(),is(0L));
  assertThat(throttlingData.getThrottledPeriods(),is(0L));
  assertThat(throttlingData.getThrottledTime(),is(0L));
  final CpuStatsConfig preCpuStats=statistics.getPreCpuStats();
  final CpuUsageConfig preCpuUsage=preCpuStats.getCpuUsage();
  assertThat(preCpuUsage.getTotalUsage(),is(211307214L));
  assertThat(preCpuUsage.getPercpuUsage(),equalTo(Arrays.asList(71451389L,42097782L,59298344L,38459699L)));
  assertThat(preCpuUsage.getUsageInKernelmode(),is(170000000L));
  assertThat(preCpuUsage.getUsageInUsermode(),is(20000000L));
  assertThat(preCpuStats.getSystemCpuUsage(),is(545937990000000L));
  assertThat(preCpuStats.getOnlineCpus(),is(4L));
  final ThrottlingDataConfig preThrottlingData=preCpuStats.getThrottlingData();
  assertThat(preThrottlingData.getPeriods(),is(0L));
  assertThat(preThrottlingData.getThrottledPeriods(),is(0L));
  assertThat(preThrottlingData.getThrottledTime(),is(0L));
  final PidsStatsConfig pidsStats=statistics.getPidsStats();
  assertThat(pidsStats.getCurrent(),is(2L));
}","@Test public void serderJson1() throws IOException {
  final ObjectMapper mapper=new ObjectMapper();
  final JavaType type=mapper.getTypeFactory().uncheckedSimpleType(Statistics.class);
  final Statistics statistics=testRoundTrip(RemoteApiVersion.VERSION_1_27,""String_Node_Str"",type);
  assertThat(statistics.getRead(),equalTo(""String_Node_Str""));
  final StatisticNetworksConfig network=statistics.getNetworks().get(""String_Node_Str"");
  assertThat(network.getRxBytes(),is(1230L));
  assertThat(network.getRxPackets(),is(19L));
  assertThat(network.getRxErrors(),is(0L));
  assertThat(network.getRxDropped(),is(0L));
  assertThat(network.getTxBytes(),is(0L));
  assertThat(network.getTxPackets(),is(0L));
  assertThat(network.getTxErrors(),is(0L));
  assertThat(network.getTxDropped(),is(0L));
  final MemoryStatsConfig memoryStats=statistics.getMemoryStats();
  assertThat(memoryStats.getUsage(),is(647168L));
  assertThat(memoryStats.getMaxUsage(),is(1703936L));
  final StatsConfig stats=memoryStats.getStats();
  assertThat(stats.getActiveAnon(),is(102400L));
  assertThat(stats.getActiveFile(),is(0L));
  assertThat(stats.getCache(),is(0L));
  assertThat(stats.getDirty(),is(0L));
  assertThat(stats.getHierarchicalMemoryLimit(),is(9223372036854771712L));
  assertThat(stats.getHierarchicalMemswLimit(),is(9223372036854771712L));
  assertThat(stats.getInactiveAnon(),is(0L));
  assertThat(stats.getInactiveFile(),is(0L));
  assertThat(stats.getMappedFile(),is(0L));
  assertThat(stats.getPgfault(),is(9656L));
  assertThat(stats.getPgmajfault(),is(0L));
  assertThat(stats.getPgpgin(),is(3425L));
  assertThat(stats.getPgpgout(),is(3400L));
  assertThat(stats.getRss(),is(102400L));
  assertThat(stats.getRssHuge(),is(0L));
  assertThat(stats.getSwap(),is(0L));
  assertThat(stats.getTotalActiveAnon(),is(102400L));
  assertThat(stats.getTotalActiveFile(),is(0L));
  assertThat(stats.getTotalCache(),is(0L));
  assertThat(stats.getTotalDirty(),is(0L));
  assertThat(stats.getTotalInactiveAnon(),is(0L));
  assertThat(stats.getTotalInactiveFile(),is(0L));
  assertThat(stats.getTotalMappedFile(),is(0L));
  assertThat(stats.getTotalPgfault(),is(9656L));
  assertThat(stats.getTotalPgmajfault(),is(0L));
  assertThat(stats.getTotalPgpgin(),is(3425L));
  assertThat(stats.getTotalPgpgout(),is(3400L));
  assertThat(stats.getTotalRss(),is(102400L));
  assertThat(stats.getTotalRssHuge(),is(0L));
  assertThat(stats.getTotalSwap(),is(0L));
  assertThat(stats.getTotalUnevictable(),is(0L));
  assertThat(stats.getTotalWriteback(),is(0L));
  assertThat(stats.getUnevictable(),is(0L));
  assertThat(stats.getWriteback(),is(0L));
  assertThat(memoryStats.getLimit(),is(2095874048L));
  final BlkioStatsConfig blkioStats=statistics.getBlkioStats();
  assertThat(blkioStats.getIoServiceBytesRecursive().size(),is(2));
  assertThat(blkioStats.getIoServiceBytesRecursive().get(0).getValue(),is(26214L));
  assertThat(blkioStats.getIoServicedRecursive().size(),is(2));
  assertThat(blkioStats.getIoQueueRecursive(),is(empty()));
  assertThat(blkioStats.getIoServiceTimeRecursive(),is(empty()));
  assertThat(blkioStats.getIoWaitTimeRecursive(),is(empty()));
  assertThat(blkioStats.getIoMergedRecursive(),is(empty()));
  assertThat(blkioStats.getIoTimeRecursive(),is(empty()));
  assertThat(blkioStats.getSectorsRecursive(),is(empty()));
  final CpuStatsConfig cpuStats=statistics.getCpuStats();
  final CpuUsageConfig cpuUsage=cpuStats.getCpuUsage();
  assertThat(cpuUsage.getTotalUsage(),is(212198028L));
  assertThat(cpuUsage.getPercpuUsage(),equalTo(Arrays.asList(71592953L,42494761L,59298344L,38811970L)));
  assertThat(cpuUsage.getUsageInKernelmode(),is(170000000L));
  assertThat(cpuUsage.getUsageInUsermode(),is(20000000L));
  assertThat(cpuStats.getSystemCpuUsage(),is(545941980000000L));
  assertThat(cpuStats.getOnlineCpus(),is(4L));
  final ThrottlingDataConfig throttlingData=cpuStats.getThrottlingData();
  assertThat(throttlingData.getPeriods(),is(0L));
  assertThat(throttlingData.getThrottledPeriods(),is(0L));
  assertThat(throttlingData.getThrottledTime(),is(0L));
  final CpuStatsConfig preCpuStats=statistics.getPreCpuStats();
  final CpuUsageConfig preCpuUsage=preCpuStats.getCpuUsage();
  assertThat(preCpuUsage.getTotalUsage(),is(211307214L));
  assertThat(preCpuUsage.getPercpuUsage(),equalTo(Arrays.asList(71451389L,42097782L,59298344L,38459699L)));
  assertThat(preCpuUsage.getUsageInKernelmode(),is(170000000L));
  assertThat(preCpuUsage.getUsageInUsermode(),is(20000000L));
  assertThat(preCpuStats.getSystemCpuUsage(),is(545937990000000L));
  assertThat(preCpuStats.getOnlineCpus(),is(4L));
  final ThrottlingDataConfig preThrottlingData=preCpuStats.getThrottlingData();
  assertThat(preThrottlingData.getPeriods(),is(0L));
  assertThat(preThrottlingData.getThrottledPeriods(),is(0L));
  assertThat(preThrottlingData.getThrottledTime(),is(0L));
  final PidsStatsConfig pidsStats=statistics.getPidsStats();
  assertThat(pidsStats.getCurrent(),is(2L));
}",0.98702088825796
111356,"/** 
 * Blocks until   {@link ResultCallback#onComplete()} was called or the given timeout occurs
 * @return {@code true} if completed and {@code false} if the waiting time elapsedbefore  {@link ResultCallback#onComplete()} was called.
 */
public boolean awaitCompletion(long timeout,TimeUnit timeUnit) throws InterruptedException {
  return completed.await(timeout,timeUnit);
}","/** 
 * Blocks until   {@link ResultCallback#onComplete()} was called or the given timeout occurs
 * @return {@code true} if completed and {@code false} if the waiting time elapsedbefore  {@link ResultCallback#onComplete()} was called.
 */
public boolean awaitCompletion(long timeout,TimeUnit timeUnit) throws InterruptedException {
  boolean result=completed.await(timeout,timeUnit);
  getFirstError();
  return result;
}",0.9275
111357,"@Test public void attachContainerWithTTY() throws Exception {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  String imageId=buildImage(baseDir);
  CreateContainerResponse container=dockerClient.createContainerCmd(imageId).withTty(true).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  AttachContainerTestCallback callback=new AttachContainerTestCallback(){
    @Override public void onNext(    Frame frame){
      assertEquals(frame.getStreamType(),StreamType.RAW);
      super.onNext(frame);
    }
  }
;
  dockerClient.attachContainerCmd(container.getId()).withStdErr(true).withStdOut(true).withFollowStream(true).exec(callback).awaitCompletion(10,TimeUnit.SECONDS);
  callback.close();
  assertThat(callback.toString(),containsString(""String_Node_Str""));
}","@Test public void attachContainerWithTTY() throws Exception {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  String imageId=buildImage(baseDir);
  CreateContainerResponse container=dockerClient.createContainerCmd(imageId).withTty(true).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  AttachContainerTestCallback callback=new AttachContainerTestCallback(){
    @Override public void onNext(    Frame frame){
      assertEquals(frame.getStreamType(),StreamType.RAW);
      super.onNext(frame);
    }
  }
;
  dockerClient.attachContainerCmd(container.getId()).withStdErr(true).withStdOut(true).withFollowStream(true).exec(callback).awaitCompletion(10,SECONDS);
  callback.close();
  assertThat(callback.toString(),containsString(""String_Node_Str""));
}",0.995260663507109
111358,"@Test public void attachContainerWithStdin() throws Exception {
  String snippet=""String_Node_Str"";
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").withTty(false).withStdinOpen(true).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  InspectContainerResponse inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertTrue(inspectContainerResponse.getState().getRunning());
  AttachContainerTestCallback callback=new AttachContainerTestCallback(){
    @Override public void onNext(    Frame frame){
      assertEquals(frame.getStreamType(),StreamType.STDOUT);
      super.onNext(frame);
    }
  }
;
  InputStream stdin=new ByteArrayInputStream((snippet + ""String_Node_Str"").getBytes());
  dockerClient.attachContainerCmd(container.getId()).withStdErr(true).withStdOut(true).withFollowStream(true).withStdIn(stdin).exec(callback).awaitCompletion(5,TimeUnit.SECONDS);
  callback.close();
  assertThat(callback.toString(),containsString(snippet));
}","@Test public void attachContainerWithStdin() throws Exception {
  String snippet=""String_Node_Str"";
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").withTty(false).withStdinOpen(true).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  Thread.sleep(SECONDS.toMillis(3));
  InspectContainerResponse inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertTrue(inspectContainerResponse.getState().getRunning());
  AttachContainerTestCallback callback=new AttachContainerTestCallback(){
    @Override public void onNext(    Frame frame){
      assertEquals(frame.getStreamType(),StreamType.STDOUT);
      super.onNext(frame);
    }
  }
;
  InputStream stdin=new ByteArrayInputStream((snippet + ""String_Node_Str"").getBytes());
  dockerClient.attachContainerCmd(container.getId()).withStdErr(true).withStdOut(true).withFollowStream(true).withStdIn(stdin).exec(callback).awaitCompletion(15,SECONDS);
  callback.close();
  assertThat(callback.toString(),containsString(snippet));
}",0.9807613589848548
111359,"@Test public void attachContainerWithoutTTY() throws Exception {
  String snippet=""String_Node_Str"";
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",snippet).withTty(false).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  AttachContainerTestCallback callback=new AttachContainerTestCallback(){
    @Override public void onNext(    Frame frame){
      assertEquals(frame.getStreamType(),StreamType.STDOUT);
      super.onNext(frame);
    }
  }
;
  dockerClient.attachContainerCmd(container.getId()).withStdErr(true).withStdOut(true).withFollowStream(true).withLogs(true).exec(callback).awaitCompletion(10,TimeUnit.SECONDS);
  callback.close();
  assertThat(callback.toString(),containsString(snippet));
}","@Test public void attachContainerWithoutTTY() throws Exception {
  String snippet=""String_Node_Str"";
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",snippet).withTty(false).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  AttachContainerTestCallback callback=new AttachContainerTestCallback(){
    @Override public void onNext(    Frame frame){
      assertEquals(frame.getStreamType(),StreamType.STDOUT);
      super.onNext(frame);
    }
  }
;
  dockerClient.attachContainerCmd(container.getId()).withStdErr(true).withStdOut(true).withFollowStream(true).withLogs(true).exec(callback).awaitCompletion(10,SECONDS);
  callback.close();
  assertThat(callback.toString(),containsString(snippet));
}",0.9949466591802358
111360,"@Override public BuildImageCmdImpl withDockerfile(File dockerfile){
  checkNotNull(dockerfile);
  if (!dockerfile.exists()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!dockerfile.isFile()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (baseDirectory == null) {
    withBaseDirectory(dockerfile.getParentFile());
  }
  this.dockerFile=dockerfile;
  try {
    withTarInputStream(new Dockerfile(dockerfile).parse().buildDockerFolderTar(baseDirectory));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return this;
}","@Override public BuildImageCmdImpl withDockerfile(File dockerfile){
  checkNotNull(dockerfile);
  if (!dockerfile.exists()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!dockerfile.isFile()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (baseDirectory == null) {
    withBaseDirectory(dockerfile.getParentFile());
  }
  this.dockerFile=dockerfile;
  try {
    withTarInputStream(new Dockerfile(dockerfile,baseDirectory).parse().buildDockerFolderTar());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return this;
}",0.9770603228547152
111361,"public ScannedResult() throws IOException {
  ignores=getIgnores();
  String matchingIgnorePattern=effectiveMatchingIgnorePattern(dockerFile);
  if (matchingIgnorePattern != null) {
    throw new DockerClientException(String.format(""String_Node_Str"",matchingIgnorePattern));
  }
  Collection<File> filesInBuildContext=FileUtils.listFiles(getDockerFolder(),TrueFileFilter.INSTANCE,TrueFileFilter.INSTANCE);
  for (  File f : filesInBuildContext) {
    if (effectiveMatchingIgnorePattern(f) == null) {
      filesToAdd.add(f);
    }
  }
}","public ScannedResult() throws IOException {
  ignores=getIgnores();
  String matchingIgnorePattern=effectiveMatchingIgnorePattern(dockerFile);
  if (matchingIgnorePattern != null) {
    throw new DockerClientException(String.format(""String_Node_Str"",matchingIgnorePattern));
  }
  Collection<File> filesInBuildContext=FileUtils.listFiles(baseDirectory,TrueFileFilter.INSTANCE,TrueFileFilter.INSTANCE);
  for (  File f : filesInBuildContext) {
    if (effectiveMatchingIgnorePattern(f) == null) {
      filesToAdd.add(f);
    }
  }
}",0.9737827715355806
111362,"public List<String> getIgnores() throws IOException {
  List<String> ignores=new ArrayList<String>();
  File dockerIgnoreFile=new File(getDockerFolder(),""String_Node_Str"");
  if (dockerIgnoreFile.exists()) {
    int lineNumber=0;
    List<String> dockerIgnoreFileContent=FileUtils.readLines(dockerIgnoreFile);
    for (    String pattern : dockerIgnoreFileContent) {
      lineNumber++;
      pattern=pattern.trim();
      if (pattern.isEmpty()) {
        continue;
      }
      pattern=FilenameUtils.normalize(pattern);
      try {
        ignores.add(pattern);
      }
 catch (      GoLangFileMatchException e) {
        throw new DockerClientException(String.format(""String_Node_Str"",pattern,lineNumber));
      }
    }
  }
  return ignores;
}","public List<String> getIgnores() throws IOException {
  List<String> ignores=new ArrayList<String>();
  File dockerIgnoreFile=new File(baseDirectory,""String_Node_Str"");
  if (dockerIgnoreFile.exists()) {
    int lineNumber=0;
    List<String> dockerIgnoreFileContent=FileUtils.readLines(dockerIgnoreFile);
    for (    String pattern : dockerIgnoreFileContent) {
      lineNumber++;
      pattern=pattern.trim();
      if (pattern.isEmpty()) {
        continue;
      }
      pattern=FilenameUtils.normalize(pattern);
      try {
        ignores.add(pattern);
      }
 catch (      GoLangFileMatchException e) {
        throw new DockerClientException(String.format(""String_Node_Str"",pattern,lineNumber));
      }
    }
  }
  return ignores;
}",0.9812080536912752
111363,"public Dockerfile(File dockerFile){
  if (!dockerFile.exists()) {
    throw new IllegalStateException(String.format(""String_Node_Str"",dockerFile.getAbsolutePath()));
  }
  if (!dockerFile.isFile()) {
    throw new IllegalStateException(String.format(""String_Node_Str"",dockerFile.getAbsolutePath()));
  }
  this.dockerFile=dockerFile;
}","public Dockerfile(File dockerFile,File baseDirectory){
  if (!dockerFile.exists()) {
    throw new IllegalStateException(String.format(""String_Node_Str"",dockerFile.getAbsolutePath()));
  }
  if (!dockerFile.isFile()) {
    throw new IllegalStateException(String.format(""String_Node_Str"",dockerFile.getAbsolutePath()));
  }
  this.dockerFile=dockerFile;
  if (!baseDirectory.exists()) {
    throw new IllegalStateException(String.format(""String_Node_Str"",baseDirectory.getAbsolutePath()));
  }
  if (!baseDirectory.isDirectory()) {
    throw new IllegalStateException(String.format(""String_Node_Str"",baseDirectory.getAbsolutePath()));
  }
  this.baseDirectory=baseDirectory;
}",0.6633663366336634
111364,"/** 
 * Returns the matching ignore pattern for the given file or null if it should NOT be ignored. Exception rules like ""!Dockerfile"" will be respected.
 */
private String effectiveMatchingIgnorePattern(File file){
  String relativeFilename=FilePathUtil.relativize(getDockerFolder(),file);
  List<String> matchingPattern=matchingIgnorePatterns(relativeFilename);
  if (matchingPattern.isEmpty()) {
    return null;
  }
  String lastMatchingPattern=matchingPattern.get(matchingPattern.size() - 1);
  int lastMatchingPatternIndex=ignores.lastIndexOf(lastMatchingPattern);
  if (lastMatchingPatternIndex == ignores.size() - 1) {
    return lastMatchingPattern;
  }
  List<String> remainingIgnorePattern=ignores.subList(lastMatchingPatternIndex + 1,ignores.size());
  for (  String ignorePattern : remainingIgnorePattern) {
    if (ignorePattern.equals(""String_Node_Str"" + relativeFilename)) {
      return null;
    }
  }
  return lastMatchingPattern;
}","/** 
 * Returns the matching ignore pattern for the given file or null if it should NOT be ignored. Exception rules like ""!Dockerfile"" will be respected.
 */
private String effectiveMatchingIgnorePattern(File file){
  String relativeFilename=FilePathUtil.relativize(baseDirectory,file);
  List<String> matchingPattern=matchingIgnorePatterns(relativeFilename);
  if (matchingPattern.isEmpty()) {
    return null;
  }
  String lastMatchingPattern=matchingPattern.get(matchingPattern.size() - 1);
  int lastMatchingPatternIndex=ignores.lastIndexOf(lastMatchingPattern);
  if (lastMatchingPatternIndex == ignores.size() - 1) {
    return lastMatchingPattern;
  }
  List<String> remainingIgnorePattern=ignores.subList(lastMatchingPatternIndex + 1,ignores.size());
  for (  String ignorePattern : remainingIgnorePattern) {
    if (ignorePattern.equals(""String_Node_Str"" + relativeFilename)) {
      return null;
    }
  }
  return lastMatchingPattern;
}",0.9852476290832456
111365,"@Test public void testAddMultipleFiles() throws IOException {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  Dockerfile dockerfile=new Dockerfile(new File(baseDir,""String_Node_Str""));
  Dockerfile.ScannedResult result=dockerfile.parse();
  Collection<String> filesToAdd=transform(result.filesToAdd,TO_FILE_NAMES);
  assertThat(filesToAdd,containsInAnyOrder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
}","@Test public void testAddMultipleFiles() throws IOException {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  Dockerfile dockerfile=new Dockerfile(new File(baseDir,""String_Node_Str""),baseDir);
  Dockerfile.ScannedResult result=dockerfile.parse();
  Collection<String> filesToAdd=transform(result.filesToAdd,TO_FILE_NAMES);
  assertThat(filesToAdd,containsInAnyOrder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
}",0.9918032786885246
111366,"@Test public void testAllItems() throws IOException {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  File root=baseDir.getParentFile();
  Map<String,Dockerfile> dockerfiles=new HashMap<String,Dockerfile>();
  Map<String,Dockerfile.ScannedResult> results=new HashMap<String,Dockerfile.ScannedResult>();
  for (  File child : root.listFiles()) {
    if (new File(child,""String_Node_Str"").exists()) {
      Dockerfile dockerfile=new Dockerfile(new File(child,""String_Node_Str""));
      dockerfiles.put(child.getName(),dockerfile);
    }
  }
  for (  String name : dockerfiles.keySet()) {
    log.info(""String_Node_Str"",name);
    try {
      results.put(name,dockerfiles.get(name).parse());
    }
 catch (    Exception ex) {
      log.error(""String_Node_Str"",name,ex);
    }
  }
  for (  String name : results.keySet()) {
    log.info(""String_Node_Str"",name,results.get(name));
  }
}","@Test public void testAllItems() throws IOException {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  File root=baseDir.getParentFile();
  Map<String,Dockerfile> dockerfiles=new HashMap<String,Dockerfile>();
  Map<String,Dockerfile.ScannedResult> results=new HashMap<String,Dockerfile.ScannedResult>();
  for (  File child : root.listFiles()) {
    if (new File(child,""String_Node_Str"").exists()) {
      Dockerfile dockerfile=new Dockerfile(new File(child,""String_Node_Str""),baseDir);
      dockerfiles.put(child.getName(),dockerfile);
    }
  }
  for (  String name : dockerfiles.keySet()) {
    log.info(""String_Node_Str"",name);
    try {
      results.put(name,dockerfiles.get(name).parse());
    }
 catch (    Exception ex) {
      log.error(""String_Node_Str"",name,ex);
    }
  }
  for (  String name : results.keySet()) {
    log.info(""String_Node_Str"",name,results.get(name));
  }
}",0.9958027282266528
111367,"@Test public void serder1_22Json() throws IOException {
  final ObjectMapper mapper=new ObjectMapper();
  final JavaType type=mapper.getTypeFactory().constructType(InspectImageResponse.class);
  final InspectImageResponse inspectImage=testRoundTrip(VERSION_1_22,""String_Node_Str"",type);
  final ContainerConfig config=new ContainerConfig().withAttachStderr(false).withAttachStdin(false).withAttachStdout(false).withCmd(null).withDomainName(""String_Node_Str"").withEntrypoint(null).withEnv(new String[]{""String_Node_Str"",""String_Node_Str""}).withExposedPorts(null).withHostName(""String_Node_Str"").withImage(""String_Node_Str"").withLabels(null).withMacAddress(null).withNetworkDisabled(null).withOnBuild(new String[]{}).withStdinOpen(false).withPortSpecs(null).withStdInOnce(false).withTty(false).withUser(""String_Node_Str"").withVolumes(null).withWorkingDir(""String_Node_Str"");
  final ContainerConfig containerConfig=new ContainerConfig().withAttachStderr(false).withAttachStdin(false).withAttachStdout(false).withCmd(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}).withDomainName(""String_Node_Str"").withEntrypoint(null).withEnv(new String[]{""String_Node_Str"",""String_Node_Str""}).withExposedPorts(null).withHostName(""String_Node_Str"").withImage(""String_Node_Str"").withLabels(null).withMacAddress(null).withNetworkDisabled(null).withOnBuild(new String[]{}).withStdinOpen(false).withPortSpecs(null).withStdInOnce(false).withTty(false).withUser(""String_Node_Str"").withVolumes(null).withWorkingDir(""String_Node_Str"");
  assertThat(inspectImage,notNullValue());
  assertThat(inspectImage.getArch(),is(""String_Node_Str""));
  assertThat(inspectImage.getAuthor(),is(""String_Node_Str""));
  assertThat(inspectImage.getComment(),isEmptyString());
  assertThat(inspectImage.getConfig(),notNullValue());
  assertThat(inspectImage.getConfig(),equalTo(config));
  assertThat(inspectImage.getCreated(),is(""String_Node_Str""));
  assertThat(inspectImage.getContainer(),is(""String_Node_Str""));
  assertThat(inspectImage.getContainerConfig(),notNullValue());
  assertThat(inspectImage.getContainerConfig(),equalTo(containerConfig));
  assertThat(inspectImage.getDockerVersion(),is(""String_Node_Str""));
  assertThat(inspectImage.getId(),is(""String_Node_Str""));
  assertThat(inspectImage.getOs(),is(""String_Node_Str""));
  assertThat(inspectImage.getParent(),isEmptyString());
  assertThat(inspectImage.getSize(),is(0L));
  assertThat(inspectImage.getRepoTags(),hasSize(1));
  assertThat(inspectImage.getRepoTags(),hasItem(""String_Node_Str""));
  final GraphDriver aufsGraphDriver=new GraphDriver().withName(""String_Node_Str"");
  final GraphDriver graphDriver=inspectImage.getGraphDriver();
  assertThat(graphDriver,notNullValue());
  assertThat(graphDriver,equalTo(aufsGraphDriver));
  assertThat(graphDriver.getName(),is(""String_Node_Str""));
  assertThat(graphDriver.getData(),nullValue());
  assertThat(inspectImage.getVirtualSize(),is(0L));
  final InspectImageResponse inspectImageResponse=new InspectImageResponse().withArch(""String_Node_Str"").withAuthor(""String_Node_Str"").withComment(""String_Node_Str"").withConfig(config).withContainer(""String_Node_Str"").withContainerConfig(containerConfig).withCreated(""String_Node_Str"").withDockerVersion(""String_Node_Str"").withId(""String_Node_Str"").withOs(""String_Node_Str"").withParent(""String_Node_Str"").withSize(0L).withRepoTags(Collections.singletonList(""String_Node_Str"")).withRepoDigests(Collections.<String>emptyList()).withVirtualSize(0L).withGraphDriver(aufsGraphDriver);
  assertThat(inspectImage,equalTo(inspectImageResponse));
}","@Test public void serder1_22Json() throws IOException {
  final ObjectMapper mapper=new ObjectMapper();
  final JavaType type=mapper.getTypeFactory().constructType(InspectImageResponse.class);
  final InspectImageResponse inspectImage=testRoundTrip(VERSION_1_22,""String_Node_Str"",type);
  final ContainerConfig config=new ContainerConfig().withAttachStdout(false).withCmd(null).withDomainName(""String_Node_Str"").withEntrypoint(null).withEnv(new String[]{""String_Node_Str"",""String_Node_Str""}).withExposedPorts(null).withHostName(""String_Node_Str"").withImage(""String_Node_Str"").withLabels(null).withMacAddress(null).withNetworkDisabled(null).withOnBuild(new String[]{}).withStdinOpen(false).withPortSpecs(null).withStdInOnce(false).withTty(false).withUser(""String_Node_Str"").withVolumes(null).withWorkingDir(""String_Node_Str"");
  final ContainerConfig containerConfig=new ContainerConfig().withAttachStderr(false).withAttachStdin(false).withAttachStdout(false).withCmd(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}).withDomainName(""String_Node_Str"").withEntrypoint(null).withEnv(new String[]{""String_Node_Str"",""String_Node_Str""}).withExposedPorts(null).withHostName(""String_Node_Str"").withImage(""String_Node_Str"").withLabels(null).withMacAddress(null).withNetworkDisabled(null).withOnBuild(new String[]{}).withStdinOpen(false).withPortSpecs(null).withStdInOnce(false).withTty(false).withUser(""String_Node_Str"").withVolumes(null).withWorkingDir(""String_Node_Str"");
  assertThat(inspectImage,notNullValue());
  assertThat(inspectImage.getArch(),is(""String_Node_Str""));
  assertThat(inspectImage.getAuthor(),is(""String_Node_Str""));
  assertThat(inspectImage.getComment(),isEmptyString());
  assertThat(inspectImage.getConfig(),notNullValue());
  assertThat(inspectImage.getConfig(),equalTo(config));
  assertThat(inspectImage.getCreated(),is(""String_Node_Str""));
  assertThat(inspectImage.getContainer(),is(""String_Node_Str""));
  assertThat(inspectImage.getContainerConfig(),notNullValue());
  assertThat(inspectImage.getContainerConfig(),equalTo(containerConfig));
  assertThat(inspectImage.getDockerVersion(),is(""String_Node_Str""));
  assertThat(inspectImage.getId(),is(""String_Node_Str""));
  assertThat(inspectImage.getOs(),is(""String_Node_Str""));
  assertThat(inspectImage.getParent(),isEmptyString());
  assertThat(inspectImage.getSize(),is(0L));
  assertThat(inspectImage.getRepoTags(),hasSize(1));
  assertThat(inspectImage.getRepoTags(),hasItem(""String_Node_Str""));
  final GraphDriver aufsGraphDriver=new GraphDriver().withName(""String_Node_Str"");
  final GraphDriver graphDriver=inspectImage.getGraphDriver();
  assertThat(graphDriver,notNullValue());
  assertThat(graphDriver,equalTo(aufsGraphDriver));
  assertThat(graphDriver.getName(),is(""String_Node_Str""));
  assertThat(graphDriver.getData(),nullValue());
  assertThat(inspectImage.getVirtualSize(),is(0L));
  final InspectImageResponse inspectImageResponse=new InspectImageResponse().withArch(""String_Node_Str"").withAuthor(""String_Node_Str"").withComment(""String_Node_Str"").withConfig(config).withContainer(""String_Node_Str"").withContainerConfig(containerConfig).withCreated(""String_Node_Str"").withDockerVersion(""String_Node_Str"").withId(""String_Node_Str"").withOs(""String_Node_Str"").withParent(""String_Node_Str"").withSize(0L).withRepoTags(Collections.singletonList(""String_Node_Str"")).withRepoDigests(Collections.<String>emptyList()).withVirtualSize(0L).withGraphDriver(aufsGraphDriver);
  assertThat(inspectImage,equalTo(inspectImageResponse));
}",0.9933868017447588
111368,"/** 
 * @see #deviceId
 */
public GraphData withRootDir(String rootDir){
  this.rootDir=rootDir;
  return this;
}","/** 
 * @see #rootDir
 */
public GraphData withRootDir(String rootDir){
  this.rootDir=rootDir;
  return this;
}",0.9422222222222222
111369,"@Test public void serder1_22Json() throws IOException {
  final ObjectMapper mapper=new ObjectMapper();
  final JavaType type=mapper.getTypeFactory().constructType(InspectImageResponse.class);
  final InspectImageResponse inspectImage=testRoundTrip(VERSION_1_22,""String_Node_Str"",type);
  final ContainerConfig config=new ContainerConfig().withAttachStdout(false).withCmd(null).withDomainName(""String_Node_Str"").withEntrypoint(null).withEnv(new String[]{""String_Node_Str"",""String_Node_Str""}).withExposedPorts(null).withHostName(""String_Node_Str"").withImage(""String_Node_Str"").withLabels(null).withMacAddress(null).withNetworkDisabled(null).withOnBuild(new String[]{}).withStdinOpen(false).withPortSpecs(null).withStdInOnce(false).withTty(false).withUser(""String_Node_Str"").withVolumes(null).withWorkingDir(""String_Node_Str"");
  final ContainerConfig containerConfig=new ContainerConfig().withAttachStderr(false).withAttachStdin(false).withAttachStdout(false).withCmd(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}).withDomainName(""String_Node_Str"").withEntrypoint(null).withEnv(new String[]{""String_Node_Str"",""String_Node_Str""}).withExposedPorts(null).withHostName(""String_Node_Str"").withImage(""String_Node_Str"").withLabels(null).withMacAddress(null).withNetworkDisabled(null).withOnBuild(new String[]{}).withStdinOpen(false).withPortSpecs(null).withStdInOnce(false).withTty(false).withUser(""String_Node_Str"").withVolumes(null).withWorkingDir(""String_Node_Str"");
  assertThat(inspectImage,notNullValue());
  assertThat(inspectImage.getArch(),is(""String_Node_Str""));
  assertThat(inspectImage.getAuthor(),is(""String_Node_Str""));
  assertThat(inspectImage.getComment(),isEmptyString());
  assertThat(inspectImage.getConfig(),notNullValue());
  assertThat(inspectImage.getConfig(),equalTo(config));
  assertThat(inspectImage.getCreated(),is(""String_Node_Str""));
  assertThat(inspectImage.getContainer(),is(""String_Node_Str""));
  assertThat(inspectImage.getContainerConfig(),notNullValue());
  assertThat(inspectImage.getContainerConfig(),equalTo(containerConfig));
  assertThat(inspectImage.getDockerVersion(),is(""String_Node_Str""));
  assertThat(inspectImage.getId(),is(""String_Node_Str""));
  assertThat(inspectImage.getOs(),is(""String_Node_Str""));
  assertThat(inspectImage.getParent(),isEmptyString());
  assertThat(inspectImage.getSize(),is(0L));
  assertThat(inspectImage.getRepoTags(),hasSize(1));
  assertThat(inspectImage.getRepoTags(),hasItem(""String_Node_Str""));
  final GraphDriver aufsGraphDriver=new GraphDriver().withName(""String_Node_Str"");
  final GraphDriver graphDriver=inspectImage.getGraphDriver();
  assertThat(graphDriver,notNullValue());
  assertThat(graphDriver,equalTo(aufsGraphDriver));
  assertThat(graphDriver.getName(),is(""String_Node_Str""));
  assertThat(graphDriver.getData(),nullValue());
  assertThat(inspectImage.getVirtualSize(),is(0L));
  final InspectImageResponse inspectImageResponse=new InspectImageResponse().withArch(""String_Node_Str"").withAuthor(""String_Node_Str"").withComment(""String_Node_Str"").withConfig(config).withContainer(""String_Node_Str"").withContainerConfig(containerConfig).withCreated(""String_Node_Str"").withDockerVersion(""String_Node_Str"").withId(""String_Node_Str"").withOs(""String_Node_Str"").withParent(""String_Node_Str"").withSize(0L).withRepoTags(Collections.singletonList(""String_Node_Str"")).withRepoDigests(Collections.<String>emptyList()).withVirtualSize(0L).withGraphDriver(aufsGraphDriver);
  assertThat(inspectImage,equalTo(inspectImageResponse));
}","@Test public void serder1_22Json() throws IOException {
  final ObjectMapper mapper=new ObjectMapper();
  final JavaType type=mapper.getTypeFactory().constructType(InspectImageResponse.class);
  final InspectImageResponse inspectImage=testRoundTrip(VERSION_1_22,""String_Node_Str"",type);
  final ContainerConfig config=new ContainerConfig().withAttachStderr(false).withAttachStdin(false).withAttachStdout(false).withCmd(null).withDomainName(""String_Node_Str"").withEntrypoint(null).withEnv(new String[]{""String_Node_Str"",""String_Node_Str""}).withExposedPorts(null).withHostName(""String_Node_Str"").withImage(""String_Node_Str"").withLabels(null).withMacAddress(null).withNetworkDisabled(null).withOnBuild(new String[]{}).withStdinOpen(false).withPortSpecs(null).withStdInOnce(false).withTty(false).withUser(""String_Node_Str"").withVolumes(null).withWorkingDir(""String_Node_Str"");
  final ContainerConfig containerConfig=new ContainerConfig().withAttachStderr(false).withAttachStdin(false).withAttachStdout(false).withCmd(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}).withDomainName(""String_Node_Str"").withEntrypoint(null).withEnv(new String[]{""String_Node_Str"",""String_Node_Str""}).withExposedPorts(null).withHostName(""String_Node_Str"").withImage(""String_Node_Str"").withLabels(null).withMacAddress(null).withNetworkDisabled(null).withOnBuild(new String[]{}).withStdinOpen(false).withPortSpecs(null).withStdInOnce(false).withTty(false).withUser(""String_Node_Str"").withVolumes(null).withWorkingDir(""String_Node_Str"");
  assertThat(inspectImage,notNullValue());
  assertThat(inspectImage.getArch(),is(""String_Node_Str""));
  assertThat(inspectImage.getAuthor(),is(""String_Node_Str""));
  assertThat(inspectImage.getComment(),isEmptyString());
  assertThat(inspectImage.getConfig(),notNullValue());
  assertThat(inspectImage.getConfig(),equalTo(config));
  assertThat(inspectImage.getCreated(),is(""String_Node_Str""));
  assertThat(inspectImage.getContainer(),is(""String_Node_Str""));
  assertThat(inspectImage.getContainerConfig(),notNullValue());
  assertThat(inspectImage.getContainerConfig(),equalTo(containerConfig));
  assertThat(inspectImage.getDockerVersion(),is(""String_Node_Str""));
  assertThat(inspectImage.getId(),is(""String_Node_Str""));
  assertThat(inspectImage.getOs(),is(""String_Node_Str""));
  assertThat(inspectImage.getParent(),isEmptyString());
  assertThat(inspectImage.getSize(),is(0L));
  assertThat(inspectImage.getRepoTags(),hasSize(1));
  assertThat(inspectImage.getRepoTags(),hasItem(""String_Node_Str""));
  final GraphDriver aufsGraphDriver=new GraphDriver().withName(""String_Node_Str"");
  final GraphDriver graphDriver=inspectImage.getGraphDriver();
  assertThat(graphDriver,notNullValue());
  assertThat(graphDriver,equalTo(aufsGraphDriver));
  assertThat(graphDriver.getName(),is(""String_Node_Str""));
  assertThat(graphDriver.getData(),nullValue());
  assertThat(inspectImage.getVirtualSize(),is(0L));
  final InspectImageResponse inspectImageResponse=new InspectImageResponse().withArch(""String_Node_Str"").withAuthor(""String_Node_Str"").withComment(""String_Node_Str"").withConfig(config).withContainer(""String_Node_Str"").withContainerConfig(containerConfig).withCreated(""String_Node_Str"").withDockerVersion(""String_Node_Str"").withId(""String_Node_Str"").withOs(""String_Node_Str"").withParent(""String_Node_Str"").withSize(0L).withRepoTags(Collections.singletonList(""String_Node_Str"")).withRepoDigests(Collections.<String>emptyList()).withVirtualSize(0L).withGraphDriver(aufsGraphDriver);
  assertThat(inspectImage,equalTo(inspectImageResponse));
}",0.9933868017447588
111370,"@Override protected void channelRead0(ChannelHandlerContext ctx,ByteBuf msg) throws Exception {
  rawBuffer.writeBytes(msg.copy(),0,msg.readableBytes());
  Frame frame=null;
  do {
    frame=decode();
    if (frame != null) {
      resultCallback.onNext(frame);
    }
  }
 while (frame != null);
}","@Override protected void channelRead0(ChannelHandlerContext ctx,ByteBuf msg) throws Exception {
  rawBuffer.writeBytes(msg,0,msg.readableBytes());
  Frame frame=null;
  do {
    frame=decode();
    if (frame != null) {
      resultCallback.onNext(frame);
    }
  }
 while (frame != null);
}",0.9880749574105622
111371,"private String getBodyAsMessage(ByteBuf body){
  return body.readBytes(body.readableBytes()).toString(Charset.forName(""String_Node_Str""));
}","private String getBodyAsMessage(ByteBuf body){
  String result=body.readBytes(body.readableBytes()).toString(Charset.forName(""String_Node_Str""));
  body.discardReadBytes();
  body.release();
  return result;
}",0.7621776504297995
111372,"@Override protected void channelRead0(ChannelHandlerContext ctx,ByteBuf msg) throws Exception {
  byte[] buffer=new byte[msg.readableBytes()];
  msg.readBytes(buffer);
  T object=null;
  try {
    object=objectMapper.readValue(buffer,typeReference);
  }
 catch (  Exception e) {
    callback.onError(e);
    throw new RuntimeException(e);
  }
  callback.onNext(object);
}","@Override protected void channelRead0(ChannelHandlerContext ctx,ByteBuf msg) throws Exception {
  byte[] buffer=new byte[msg.readableBytes()];
  msg.readBytes(buffer);
  msg.discardReadBytes();
  T object=null;
  try {
    object=objectMapper.readValue(buffer,typeReference);
  }
 catch (  Exception e) {
    callback.onError(e);
    throw new RuntimeException(e);
  }
  callback.onNext(object);
}",0.9661458333333334
111373,"private int read(byte[] buf,int offset,int length){
  length=Math.min(rawBuffer.readableBytes(),length);
  rawBuffer.readBytes(buf,offset,length);
  return length;
}","private int read(byte[] buf,int offset,int length){
  length=Math.min(rawBuffer.readableBytes(),length);
  rawBuffer.readBytes(buf,offset,length);
  rawBuffer.discardReadBytes();
  return length;
}",0.9116022099447514
111374,"protected String registryConfigs(AuthConfigurations authConfigs){
  try {
    final String json;
    if (dockerClientConfig.getApiVersion().isGreaterOrEqual(RemoteApiVersion.VERSION_1_19)) {
      json=new ObjectMapper().writeValueAsString(authConfigs.getConfigs());
    }
 else {
      json=new ObjectMapper().writeValueAsString(authConfigs);
    }
    return Base64.encodeBase64String(json.getBytes());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","protected String registryConfigs(AuthConfigurations authConfigs){
  try {
    final String json;
    final ObjectMapper objectMapper=new ObjectMapper();
    final RemoteApiVersion apiVersion=dockerClientConfig.getApiVersion();
    if (apiVersion.equals(UNKNOWN_VERSION)) {
      ObjectNode rootNode=objectMapper.valueToTree(authConfigs.getConfigs());
      final ObjectNode authNodes=objectMapper.valueToTree(authConfigs);
      rootNode.setAll(authNodes);
      json=rootNode.toString();
    }
 else     if (apiVersion.isGreaterOrEqual(VERSION_1_19)) {
      json=objectMapper.writeValueAsString(authConfigs.getConfigs());
    }
 else {
      json=objectMapper.writeValueAsString(authConfigs);
    }
    return Base64.encodeBase64String(json.getBytes());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.5249424405218726
111375,"@Override public void processResponseStream(InputStream response,ResultCallback<T> resultCallback){
  resultCallback.onStart(response);
  OBJECT_MAPPER.configure(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE,true);
  try {
    JsonParser jp=JSON_FACTORY.createParser(response);
    Boolean closed=jp.isClosed();
    JsonToken nextToken=jp.nextToken();
    while (!closed && nextToken != null && nextToken != JsonToken.END_OBJECT) {
      try {
        T next=OBJECT_MAPPER.readValue(jp,clazz);
        resultCallback.onNext(next);
      }
 catch (      Exception e) {
        resultCallback.onError(e);
      }
      closed=jp.isClosed();
      nextToken=jp.nextToken();
    }
  }
 catch (  Throwable t) {
    resultCallback.onError(t);
  }
 finally {
    try {
      response.close();
    }
 catch (    IOException e) {
      resultCallback.onError(e);
    }
 finally {
      resultCallback.onComplete();
    }
  }
}","@Override public void processResponseStream(InputStream response,ResultCallback<T> resultCallback){
  resultCallback.onStart(response);
  OBJECT_MAPPER.configure(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE,true);
  try {
    JsonParser jp=JSON_FACTORY.createParser(response);
    Boolean closed=jp.isClosed();
    JsonToken nextToken=jp.nextToken();
    while (!closed && nextToken != null && nextToken != JsonToken.END_OBJECT) {
      try {
        ObjectNode objectNode=OBJECT_MAPPER.readTree(jp);
        if (!objectNode.isEmpty(null)) {
          T next=OBJECT_MAPPER.treeToValue(objectNode,clazz);
          resultCallback.onNext(next);
        }
      }
 catch (      Exception e) {
        resultCallback.onError(e);
      }
      closed=jp.isClosed();
      nextToken=jp.nextToken();
    }
  }
 catch (  Throwable t) {
    resultCallback.onError(t);
  }
 finally {
    try {
      response.close();
    }
 catch (    IOException e) {
      resultCallback.onError(e);
    }
 finally {
      resultCallback.onComplete();
    }
  }
}",0.9312594079277472
111376,"/** 
 * Called when the async processing starts. The passed   {@link Closeable} can be used to close/interrupt theprocessing
 */
void onStart(Closeable closeable);","/** 
 * Called when the async processing starts respectively when the response arrives from the server. The passed  {@link Closeable} can be used to close/interrupt the processing.
 */
void onStart(Closeable closeable);",0.8481675392670157
111377,"@Override public void onStart(Closeable stream){
  this.stream=stream;
  this.closed=false;
}","@Override public void onStart(Closeable stream){
  this.stream=stream;
  this.closed=false;
  started.countDown();
}",0.8899521531100478
111378,"@Override public void onNext(Frame frame){
  if (frame != null) {
    try {
switch (frame.getStreamType()) {
case STDOUT:
case RAW:
        if (stdout != null) {
          stdout.write(frame.getPayload());
          stdout.flush();
        }
      break;
case STDERR:
    if (stderr != null) {
      stderr.write(frame.getPayload());
      stderr.flush();
    }
  break;
default :
LOGGER.error(""String_Node_Str"" + frame.getStreamType());
}
}
 catch (IOException e) {
onError(e);
}
}
LOGGER.debug(frame.toString());
}","@Override public void onNext(Frame frame){
  if (frame != null) {
    try {
switch (frame.getStreamType()) {
case STDOUT:
case RAW:
        if (stdout != null) {
          stdout.write(frame.getPayload());
          stdout.flush();
        }
      break;
case STDERR:
    if (stderr != null) {
      stderr.write(frame.getPayload());
      stderr.flush();
    }
  break;
default :
LOGGER.error(""String_Node_Str"" + frame.getStreamType());
}
}
 catch (IOException e) {
onError(e);
}
LOGGER.debug(frame.toString());
}
}",0.996124031007752
111379,"public <T>void post(TypeReference<T> typeReference,ResultCallback<T> resultCallback,InputStream body){
  HttpRequestProvider requestProvider=httpPostRequestProvider(null);
  Channel channel=getChannel();
  initCallback(channel,resultCallback);
  JsonResponseCallbackHandler<T> jsonResponseHandler=new JsonResponseCallbackHandler<T>(typeReference,resultCallback);
  HttpResponseHandler responseHandler=new HttpResponseHandler(requestProvider,resultCallback);
  channel.pipeline().addLast(new ChunkedWriteHandler());
  channel.pipeline().addLast(responseHandler);
  channel.pipeline().addLast(new JsonObjectDecoder());
  channel.pipeline().addLast(jsonResponseHandler);
  HttpRequest request=requestProvider.getHttpRequest(resource);
  if (request instanceof FullHttpRequest) {
    throw new DockerClientException(""String_Node_Str"");
  }
  request.headers().set(HttpHeaderNames.TRANSFER_ENCODING,HttpHeaderValues.CHUNKED);
  request.headers().remove(HttpHeaderNames.CONTENT_LENGTH);
  channel.write(request);
  channel.write(new ChunkedStream(new BufferedInputStream(body,1024 * 1024),1024 * 1024));
  channel.write(LastHttpContent.EMPTY_LAST_CONTENT);
  channel.flush();
}","public <T>void post(TypeReference<T> typeReference,ResultCallback<T> resultCallback,InputStream body){
  HttpRequestProvider requestProvider=httpPostRequestProvider(null);
  Channel channel=getChannel();
  JsonResponseCallbackHandler<T> jsonResponseHandler=new JsonResponseCallbackHandler<T>(typeReference,resultCallback);
  HttpResponseHandler responseHandler=new HttpResponseHandler(requestProvider,resultCallback);
  channel.pipeline().addLast(new ChunkedWriteHandler());
  channel.pipeline().addLast(responseHandler);
  channel.pipeline().addLast(new JsonObjectDecoder());
  channel.pipeline().addLast(jsonResponseHandler);
  HttpRequest request=requestProvider.getHttpRequest(resource);
  if (request instanceof FullHttpRequest) {
    throw new DockerClientException(""String_Node_Str"");
  }
  request.headers().set(HttpHeaderNames.TRANSFER_ENCODING,HttpHeaderValues.CHUNKED);
  request.headers().remove(HttpHeaderNames.CONTENT_LENGTH);
  channel.write(request);
  channel.write(new ChunkedStream(new BufferedInputStream(body,1024 * 1024),1024 * 1024));
  channel.write(LastHttpContent.EMPTY_LAST_CONTENT);
  channel.flush();
}",0.9826238053866204
111380,"public InputStream get(){
  HttpRequestProvider requestProvider=httpGetRequestProvider();
  Channel channel=getChannel();
  ResponseCallback<InputStream> resultCallback=new ResponseCallback<InputStream>();
  initCallback(channel,resultCallback);
  HttpResponseHandler responseHandler=new HttpResponseHandler(requestProvider,resultCallback);
  HttpResponseStreamHandler streamHandler=new HttpResponseStreamHandler(resultCallback);
  channel.pipeline().addLast(responseHandler);
  channel.pipeline().addLast(streamHandler);
  sendRequest(requestProvider,channel);
  return resultCallback.awaitResult();
}","public InputStream get(){
  HttpRequestProvider requestProvider=httpGetRequestProvider();
  Channel channel=getChannel();
  ResponseCallback<InputStream> resultCallback=new ResponseCallback<InputStream>();
  HttpResponseHandler responseHandler=new HttpResponseHandler(requestProvider,resultCallback);
  HttpResponseStreamHandler streamHandler=new HttpResponseStreamHandler(resultCallback);
  channel.pipeline().addLast(responseHandler);
  channel.pipeline().addLast(streamHandler);
  sendRequest(requestProvider,channel);
  return resultCallback.awaitResult();
}",0.9656357388316152
111381,"@Override protected void channelRead0(ChannelHandlerContext ctx,HttpObject msg) throws Exception {
  if (msg instanceof HttpResponse) {
    response=(HttpResponse)msg;
  }
 else   if (msg instanceof HttpContent) {
    HttpContent content=(HttpContent)msg;
    ByteBuf byteBuf=content.content();
switch (response.status().code()) {
case 200:
case 201:
case 204:
      ctx.fireChannelRead(byteBuf);
    break;
default :
  errorBody.writeBytes(byteBuf);
}
if (content instanceof LastHttpContent) {
try {
switch (response.status().code()) {
case 101:
case 200:
case 201:
case 204:
    break;
case 301:
case 302:
  if (response.headers().contains(HttpHeaderNames.LOCATION)) {
    String location=response.headers().get(HttpHeaderNames.LOCATION);
    HttpRequest redirected=requestProvider.getHttpRequest(location);
    ctx.channel().writeAndFlush(redirected);
  }
break;
case 304:
throw new NotModifiedException(getBodyAsMessage(errorBody));
case 400:
throw new BadRequestException(getBodyAsMessage(errorBody));
case 401:
throw new UnauthorizedException(getBodyAsMessage(errorBody));
case 404:
throw new NotFoundException(getBodyAsMessage(errorBody));
case 406:
throw new NotAcceptableException(getBodyAsMessage(errorBody));
case 409:
throw new ConflictException(getBodyAsMessage(errorBody));
case 500:
throw new InternalServerErrorException(getBodyAsMessage(errorBody));
default :
throw new DockerException(getBodyAsMessage(errorBody),response.status().code());
}
}
 catch (Throwable e) {
resultCallback.onError(e);
}
 finally {
resultCallback.onComplete();
}
}
}
}","@Override protected void channelRead0(final ChannelHandlerContext ctx,HttpObject msg) throws Exception {
  if (msg instanceof HttpResponse) {
    response=(HttpResponse)msg;
    resultCallback.onStart(new Closeable(){
      @Override public void close(){
        ctx.channel().close();
      }
    }
);
  }
 else   if (msg instanceof HttpContent) {
    HttpContent content=(HttpContent)msg;
    ByteBuf byteBuf=content.content();
switch (response.status().code()) {
case 200:
case 201:
case 204:
      ctx.fireChannelRead(byteBuf);
    break;
default :
  errorBody.writeBytes(byteBuf);
}
if (content instanceof LastHttpContent) {
try {
switch (response.status().code()) {
case 101:
case 200:
case 201:
case 204:
    break;
case 301:
case 302:
  if (response.headers().contains(HttpHeaderNames.LOCATION)) {
    String location=response.headers().get(HttpHeaderNames.LOCATION);
    HttpRequest redirected=requestProvider.getHttpRequest(location);
    ctx.channel().writeAndFlush(redirected);
  }
break;
case 304:
throw new NotModifiedException(getBodyAsMessage(errorBody));
case 400:
throw new BadRequestException(getBodyAsMessage(errorBody));
case 401:
throw new UnauthorizedException(getBodyAsMessage(errorBody));
case 404:
throw new NotFoundException(getBodyAsMessage(errorBody));
case 406:
throw new NotAcceptableException(getBodyAsMessage(errorBody));
case 409:
throw new ConflictException(getBodyAsMessage(errorBody));
case 500:
throw new InternalServerErrorException(getBodyAsMessage(errorBody));
default :
throw new DockerException(getBodyAsMessage(errorBody),response.status().code());
}
}
 catch (Throwable e) {
resultCallback.onError(e);
}
 finally {
resultCallback.onComplete();
}
}
}
}",0.9585508136321768
111382,"@Test(groups=""String_Node_Str"") public void execStartAttached() throws Exception {
  String containerName=""String_Node_Str"" + new SecureRandom().nextInt();
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").withName(containerName).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  ExecCreateCmdResponse execCreateCmdResponse=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  dockerClient.execStartCmd(execCreateCmdResponse.getId()).withDetach(false).withTty(true).exec(new ExecStartResultCallback(System.out,System.err));
  InputStream response=dockerClient.copyArchiveFromContainerCmd(container.getId(),""String_Node_Str"").exec();
  Boolean bytesAvailable=response.available() > 0;
  assertTrue(bytesAvailable,""String_Node_Str"");
  String responseAsString=asString(response);
  assertNotNull(responseAsString);
  assertTrue(responseAsString.length() > 0);
}","@Test(groups=""String_Node_Str"") public void execStartAttached() throws Exception {
  String containerName=""String_Node_Str"" + new SecureRandom().nextInt();
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").withName(containerName).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  ExecCreateCmdResponse execCreateCmdResponse=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  dockerClient.execStartCmd(execCreateCmdResponse.getId()).withDetach(false).withTty(true).exec(new ExecStartResultCallback(System.out,System.err)).awaitCompletion();
  InputStream response=dockerClient.copyArchiveFromContainerCmd(container.getId(),""String_Node_Str"").exec();
  Boolean bytesAvailable=response.available() > 0;
  assertTrue(bytesAvailable,""String_Node_Str"");
  String responseAsString=asString(response);
  assertNotNull(responseAsString);
  assertTrue(responseAsString.length() > 0);
}",0.992153443766347
111383,"@Test(groups=""String_Node_Str"") public void inspectExec() throws Exception {
  String containerName=""String_Node_Str"" + new SecureRandom().nextInt();
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").withName(containerName).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  ExecCreateCmdResponse checkFileExec1=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",checkFileExec1.toString());
  assertThat(checkFileExec1.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(checkFileExec1.getId()).exec(new ExecStartResultCallback(System.out,System.err)).awaitCompletion();
  InspectExecResponse first=dockerClient.inspectExecCmd(checkFileExec1.getId()).exec();
  assertThat(first.getExitCode(),is(1));
  ExecCreateCmdResponse touchFileExec=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",touchFileExec.toString());
  assertThat(touchFileExec.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(container.getId()).withExecId(touchFileExec.getId()).exec(new ExecStartResultCallback(System.out,System.err));
  InspectExecResponse second=dockerClient.inspectExecCmd(touchFileExec.getId()).exec();
  assertThat(second.getExitCode(),is(0));
  ExecCreateCmdResponse checkFileExec2=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",checkFileExec2.toString());
  assertThat(checkFileExec2.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(container.getId()).withExecId(checkFileExec2.getId()).exec(new ExecStartResultCallback(System.out,System.err));
  InspectExecResponse third=dockerClient.inspectExecCmd(checkFileExec2.getId()).exec();
  assertThat(third.getExitCode(),is(0));
  InspectContainerResponse containerInfo=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertEquals(containerInfo.getId(),container.getId());
  JSONTestHelper.testRoundTrip(containerInfo);
}","@Test(groups=""String_Node_Str"") public void inspectExec() throws Exception {
  String containerName=""String_Node_Str"" + new SecureRandom().nextInt();
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").withName(containerName).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  ExecCreateCmdResponse checkFileExec1=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",checkFileExec1.toString());
  assertThat(checkFileExec1.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(checkFileExec1.getId()).withDetach(false).exec(new ExecStartResultCallback(System.out,System.err)).awaitCompletion();
  InspectExecResponse first=dockerClient.inspectExecCmd(checkFileExec1.getId()).exec();
  assertThat(first.isRunning(),is(false));
  assertThat(first.getExitCode(),is(1));
  ExecCreateCmdResponse touchFileExec=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",touchFileExec.toString());
  assertThat(touchFileExec.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(touchFileExec.getId()).withDetach(false).exec(new ExecStartResultCallback(System.out,System.err)).awaitCompletion();
  InspectExecResponse second=dockerClient.inspectExecCmd(touchFileExec.getId()).exec();
  assertThat(second.isRunning(),is(false));
  assertThat(second.getExitCode(),is(0));
  ExecCreateCmdResponse checkFileExec2=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",checkFileExec2.toString());
  assertThat(checkFileExec2.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(checkFileExec2.getId()).withDetach(false).exec(new ExecStartResultCallback(System.out,System.err)).awaitCompletion();
  InspectExecResponse third=dockerClient.inspectExecCmd(checkFileExec2.getId()).exec();
  assertThat(third.isRunning(),is(false));
  assertThat(third.getExitCode(),is(0));
  InspectContainerResponse containerInfo=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertEquals(containerInfo.getId(),container.getId());
  JSONTestHelper.testRoundTrip(containerInfo);
}",0.8933440256615878
111384,"@Test(groups=""String_Node_Str"") public void inspectExec() throws Exception {
  String containerName=""String_Node_Str"" + new SecureRandom().nextInt();
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").withName(containerName).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  ExecCreateCmdResponse checkFileExec1=dockerClient.execCreateCmd(container.getId()).withAttachStdout(false).withAttachStderr(false).withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",checkFileExec1.toString());
  assertThat(checkFileExec1.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(checkFileExec1.getId()).exec(new ExecStartResultCallback(System.out,System.err));
  InspectExecResponse first=dockerClient.inspectExecCmd(checkFileExec1.getId()).exec();
  assertThat(first.getExitCode(),is(1));
  ExecCreateCmdResponse touchFileExec=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",touchFileExec.toString());
  assertThat(touchFileExec.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(container.getId()).withExecId(touchFileExec.getId()).exec(new ExecStartResultCallback(System.out,System.err));
  InspectExecResponse second=dockerClient.inspectExecCmd(touchFileExec.getId()).exec();
  assertThat(second.getExitCode(),is(0));
  ExecCreateCmdResponse checkFileExec2=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",checkFileExec2.toString());
  assertThat(checkFileExec2.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(container.getId()).withExecId(checkFileExec2.getId()).exec(new ExecStartResultCallback(System.out,System.err));
  InspectExecResponse third=dockerClient.inspectExecCmd(checkFileExec2.getId()).exec();
  assertThat(third.getExitCode(),is(0));
  InspectContainerResponse containerInfo=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertEquals(containerInfo.getId(),container.getId());
  JSONTestHelper.testRoundTrip(containerInfo);
}","@Test(groups=""String_Node_Str"") public void inspectExec() throws Exception {
  String containerName=""String_Node_Str"" + new SecureRandom().nextInt();
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").withName(containerName).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  ExecCreateCmdResponse checkFileExec1=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",checkFileExec1.toString());
  assertThat(checkFileExec1.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(checkFileExec1.getId()).withDetach(false).exec(new ExecStartResultCallback(System.out,System.err)).awaitCompletion();
  InspectExecResponse first=dockerClient.inspectExecCmd(checkFileExec1.getId()).exec();
  assertThat(first.isRunning(),is(false));
  assertThat(first.getExitCode(),is(1));
  ExecCreateCmdResponse touchFileExec=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",touchFileExec.toString());
  assertThat(touchFileExec.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(touchFileExec.getId()).withDetach(false).exec(new ExecStartResultCallback(System.out,System.err)).awaitCompletion();
  InspectExecResponse second=dockerClient.inspectExecCmd(touchFileExec.getId()).exec();
  assertThat(second.isRunning(),is(false));
  assertThat(second.getExitCode(),is(0));
  ExecCreateCmdResponse checkFileExec2=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",checkFileExec2.toString());
  assertThat(checkFileExec2.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(checkFileExec2.getId()).withDetach(false).exec(new ExecStartResultCallback(System.out,System.err)).awaitCompletion();
  InspectExecResponse third=dockerClient.inspectExecCmd(checkFileExec2.getId()).exec();
  assertThat(third.isRunning(),is(false));
  assertThat(third.getExitCode(),is(0));
  InspectContainerResponse containerInfo=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertEquals(containerInfo.getId(),container.getId());
  JSONTestHelper.testRoundTrip(containerInfo);
}",0.8837489943684634
111385,"@Override public void onNext(Frame frame){
  if (frame != null) {
    try {
switch (frame.getStreamType()) {
case STDOUT:
        if (stdout != null) {
          stdout.write(frame.getPayload());
          stdout.flush();
        }
      break;
case STDERR:
    if (stderr != null) {
      stderr.write(frame.getPayload());
      stderr.flush();
    }
  break;
default :
LOGGER.error(""String_Node_Str"" + frame.getStreamType());
}
}
 catch (IOException e) {
onError(e);
}
}
LOGGER.debug(frame.toString());
}","@Override public void onNext(Frame frame){
  if (frame != null) {
    try {
switch (frame.getStreamType()) {
case STDOUT:
case RAW:
        if (stdout != null) {
          System.err.println(new String(frame.getPayload()));
          stdout.write(frame.getPayload());
          stdout.flush();
        }
      break;
case STDERR:
    if (stderr != null) {
      stderr.write(frame.getPayload());
      stderr.flush();
    }
  break;
default :
LOGGER.error(""String_Node_Str"" + frame.getStreamType());
}
}
 catch (IOException e) {
onError(e);
}
}
LOGGER.debug(frame.toString());
}",0.933579335793358
111386,"@Override protected AbstractCallbackNotifier<Frame> callbackNotifier(ExecStartCmd command,ResultCallback<Frame> resultCallback){
  WebTarget webTarget=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getExecId());
  LOGGER.trace(""String_Node_Str"",webTarget);
  return new POSTCallbackNotifier<Frame>(new FrameStreamProcessor(),resultCallback,webTarget.request().accept(MediaType.APPLICATION_JSON),null);
}","@Override protected AbstractCallbackNotifier<Frame> callbackNotifier(ExecStartCmd command,ResultCallback<Frame> resultCallback){
  WebTarget webTarget=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getExecId());
  LOGGER.trace(""String_Node_Str"",webTarget);
  return new POSTCallbackNotifier<Frame>(new FrameStreamProcessor(),resultCallback,webTarget.request().accept(MediaType.APPLICATION_JSON),entity(command,MediaType.APPLICATION_JSON));
}",0.9498910675381264
111387,"private Frame decode(){
  if (headerCnt < HEADER_SIZE) {
    int headerCount=read(header,headerCnt,HEADER_SIZE - headerCnt);
    if (headerCount == 0) {
      return null;
    }
    headerCnt+=headerCount;
    if (headerCnt < HEADER_SIZE) {
      return null;
    }
    streamType=streamType(header[0]);
    if (streamType.equals(StreamType.RAW)) {
      return new Frame(streamType,header);
    }
  }
  if (streamType.equals(StreamType.RAW)) {
    if (payloadCnt == 0)     payload=new byte[rawBuffer.readableBytes()];
    int count=read(payload,payloadCnt,rawBuffer.readableBytes());
    if (count == 0) {
      return null;
    }
    payloadCnt=0;
    return new Frame(StreamType.RAW,payload);
  }
 else {
    int payloadSize=((header[4] & 0xff) << 24) + ((header[5] & 0xff) << 16) + ((header[6] & 0xff) << 8)+ (header[7] & 0xff);
    if (payloadCnt == 0) {
      payload=new byte[payloadSize];
    }
    int count=read(payload,payloadCnt,payloadSize - payloadCnt);
    if (count == 0) {
      return null;
    }
    payloadCnt+=count;
    if (payloadCnt < payloadSize) {
      return null;
    }
    headerCnt=0;
    payloadCnt=0;
    return new Frame(streamType,payload);
  }
}","private Frame decode(){
  if (headerCnt < HEADER_SIZE) {
    int headerCount=read(header,headerCnt,HEADER_SIZE - headerCnt);
    if (headerCount == 0) {
      return null;
    }
    headerCnt+=headerCount;
    streamType=streamType(header[0]);
    if (streamType.equals(StreamType.RAW)) {
      return new Frame(streamType,Arrays.copyOf(header,headerCount));
    }
    if (headerCnt < HEADER_SIZE) {
      return null;
    }
  }
  if (streamType.equals(StreamType.RAW)) {
    if (payloadCnt == 0)     payload=new byte[rawBuffer.readableBytes()];
    int count=read(payload,payloadCnt,rawBuffer.readableBytes());
    if (count == 0) {
      return null;
    }
    payloadCnt=0;
    return new Frame(StreamType.RAW,payload);
  }
 else {
    int payloadSize=((header[4] & 0xff) << 24) + ((header[5] & 0xff) << 16) + ((header[6] & 0xff) << 8)+ (header[7] & 0xff);
    if (payloadCnt == 0) {
      payload=new byte[payloadSize];
    }
    int count=read(payload,payloadCnt,payloadSize - payloadCnt);
    if (count == 0) {
      return null;
    }
    payloadCnt+=count;
    if (payloadCnt < payloadSize) {
      return null;
    }
    headerCnt=0;
    payloadCnt=0;
    return new Frame(streamType,payload);
  }
}",0.8781917120133947
111388,"@Test(groups=""String_Node_Str"") public void execStart() throws Exception {
  String containerName=""String_Node_Str"" + new SecureRandom().nextInt();
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"").withName(containerName).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  ExecCreateCmdResponse execCreateCmdResponse=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  dockerClient.execStartCmd(execCreateCmdResponse.getId()).exec(new ExecStartResultCallback(System.out,System.err));
  InputStream response=dockerClient.copyArchiveFromContainerCmd(container.getId(),""String_Node_Str"").exec();
  Boolean bytesAvailable=response.available() > 0;
  assertTrue(bytesAvailable,""String_Node_Str"");
  String responseAsString=asString(response);
  assertNotNull(responseAsString);
  assertTrue(responseAsString.length() > 0);
}","@Test(groups=""String_Node_Str"") public void execStart() throws Exception {
  String containerName=""String_Node_Str"" + new SecureRandom().nextInt();
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"").withName(containerName).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  ExecCreateCmdResponse execCreateCmdResponse=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  dockerClient.execStartCmd(execCreateCmdResponse.getId()).exec(new ExecStartResultCallback(System.out,System.err)).awaitCompletion();
  InputStream response=dockerClient.copyArchiveFromContainerCmd(container.getId(),""String_Node_Str"").exec();
  Boolean bytesAvailable=response.available() > 0;
  assertTrue(bytesAvailable,""String_Node_Str"");
  String responseAsString=asString(response);
  assertNotNull(responseAsString);
  assertTrue(responseAsString.length() > 0);
}",0.9917355371900828
111389,"@Test(groups=""String_Node_Str"") public void inspectExec() throws IOException {
  String containerName=""String_Node_Str"" + new SecureRandom().nextInt();
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").withName(containerName).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  ExecCreateCmdResponse touchFileCmdCreateResponse=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",touchFileCmdCreateResponse.toString());
  assertThat(touchFileCmdCreateResponse.getId(),not(isEmptyString()));
  ExecCreateCmdResponse checkFileCmdCreateResponse=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",checkFileCmdCreateResponse.toString());
  assertThat(checkFileCmdCreateResponse.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(container.getId()).withExecId(checkFileCmdCreateResponse.getId()).exec(new ExecStartResultCallback(System.out,System.err));
  InspectExecResponse first=dockerClient.inspectExecCmd(checkFileCmdCreateResponse.getId()).exec();
  assertThat(first.getExitCode(),is(0));
  dockerClient.execStartCmd(container.getId()).withExecId(touchFileCmdCreateResponse.getId()).exec(new ExecStartResultCallback(System.out,System.err));
  InspectExecResponse second=dockerClient.inspectExecCmd(touchFileCmdCreateResponse.getId()).exec();
  assertThat(second.getExitCode(),is(0));
  dockerClient.execStartCmd(container.getId()).withExecId(checkFileCmdCreateResponse.getId()).exec(new ExecStartResultCallback(System.out,System.err));
  InspectExecResponse third=dockerClient.inspectExecCmd(checkFileCmdCreateResponse.getId()).exec();
  assertThat(third.getExitCode(),is(0));
  InspectContainerResponse containerInfo=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertEquals(containerInfo.getId(),container.getId());
  JSONTestHelper.testRoundTrip(containerInfo);
}","@Test(groups=""String_Node_Str"") public void inspectExec() throws Exception {
  String containerName=""String_Node_Str"" + new SecureRandom().nextInt();
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").withName(containerName).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  ExecCreateCmdResponse checkFileExec1=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",checkFileExec1.toString());
  assertThat(checkFileExec1.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(checkFileExec1.getId()).exec(new ExecStartResultCallback(System.out,System.err)).awaitCompletion();
  InspectExecResponse first=dockerClient.inspectExecCmd(checkFileExec1.getId()).exec();
  assertThat(first.getExitCode(),is(1));
  ExecCreateCmdResponse touchFileExec=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",touchFileExec.toString());
  assertThat(touchFileExec.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(container.getId()).withExecId(touchFileExec.getId()).exec(new ExecStartResultCallback(System.out,System.err));
  InspectExecResponse second=dockerClient.inspectExecCmd(touchFileExec.getId()).exec();
  assertThat(second.getExitCode(),is(0));
  ExecCreateCmdResponse checkFileExec2=dockerClient.execCreateCmd(container.getId()).withAttachStdout(true).withAttachStderr(true).withCmd(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",checkFileExec2.toString());
  assertThat(checkFileExec2.getId(),not(isEmptyString()));
  dockerClient.execStartCmd(container.getId()).withExecId(checkFileExec2.getId()).exec(new ExecStartResultCallback(System.out,System.err));
  InspectExecResponse third=dockerClient.inspectExecCmd(checkFileExec2.getId()).exec();
  assertThat(third.getExitCode(),is(0));
  InspectContainerResponse containerInfo=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertEquals(containerInfo.getId(),container.getId());
  JSONTestHelper.testRoundTrip(containerInfo);
}",0.4806334260646265
111390,"@Override public void init(DockerClientConfig dockerClientConfig){
  checkNotNull(dockerClientConfig,""String_Node_Str"");
  this.dockerClientConfig=dockerClientConfig;
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.connectorProvider(new ApacheConnectorProvider());
  clientConfig.property(CommonProperties.FEATURE_AUTO_DISCOVERY_DISABLE,true);
  clientConfig.register(ResponseStatusExceptionFilter.class);
  clientConfig.register(JsonClientFilter.class);
  clientConfig.register(JacksonJsonProvider.class);
  clientConfig.register(new SelectiveLoggingFilter(LOGGER,true));
  if (readTimeout != null) {
    clientConfig.property(ClientProperties.READ_TIMEOUT,readTimeout);
  }
  if (connectTimeout != null) {
    clientConfig.property(ClientProperties.CONNECT_TIMEOUT,connectTimeout);
  }
  if (clientResponseFilters != null) {
    for (    ClientResponseFilter clientResponseFilter : clientResponseFilters) {
      if (clientResponseFilter != null)       clientConfig.register(clientResponseFilter);
    }
  }
  if (clientRequestFilters != null) {
    for (    ClientRequestFilter clientRequestFilter : clientRequestFilters) {
      if (clientRequestFilter != null)       clientConfig.register(clientRequestFilter);
    }
  }
  URI originalUri=dockerClientConfig.getUri();
  SSLContext sslContext=null;
  if (dockerClientConfig.getSslConfig() != null) {
    configureProxy(clientConfig,""String_Node_Str"");
    try {
      sslContext=dockerClientConfig.getSslConfig().getSSLContext();
    }
 catch (    Exception ex) {
      throw new DockerClientException(""String_Node_Str"",ex);
    }
  }
 else {
    configureProxy(clientConfig,""String_Node_Str"");
  }
  PoolingHttpClientConnectionManager connManager=new PoolingHttpClientConnectionManager(getSchemeRegistry(originalUri,sslContext));
  if (maxTotalConnections != null)   connManager.setMaxTotal(maxTotalConnections);
  if (maxPerRouteConnections != null)   connManager.setDefaultMaxPerRoute(maxPerRouteConnections);
  clientConfig.property(ApacheClientProperties.CONNECTION_MANAGER,connManager);
  ClientBuilder clientBuilder=ClientBuilder.newBuilder().withConfig(clientConfig);
  if (sslContext != null) {
    clientBuilder.sslContext(sslContext);
  }
  client=clientBuilder.build();
  if (originalUri.getScheme().equals(""String_Node_Str"")) {
    dockerClientConfig.setUri(UnixConnectionSocketFactory.sanitizeUri(originalUri));
  }
  baseResource=client.target(dockerClientConfig.getUri()).path(dockerClientConfig.getVersion().asWebPathPart());
}","@Override public void init(DockerClientConfig dockerClientConfig){
  checkNotNull(dockerClientConfig,""String_Node_Str"");
  this.dockerClientConfig=dockerClientConfig;
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.connectorProvider(new ApacheConnectorProvider());
  clientConfig.property(CommonProperties.FEATURE_AUTO_DISCOVERY_DISABLE,true);
  clientConfig.register(ResponseStatusExceptionFilter.class);
  clientConfig.register(JsonClientFilter.class);
  clientConfig.register(JacksonJsonProvider.class);
  clientConfig.register(new SelectiveLoggingFilter(LOGGER,true));
  if (readTimeout != null) {
    clientConfig.property(ClientProperties.READ_TIMEOUT,readTimeout);
  }
  if (connectTimeout != null) {
    clientConfig.property(ClientProperties.CONNECT_TIMEOUT,connectTimeout);
  }
  if (clientResponseFilters != null) {
    for (    ClientResponseFilter clientResponseFilter : clientResponseFilters) {
      if (clientResponseFilter != null)       clientConfig.register(clientResponseFilter);
    }
  }
  if (clientRequestFilters != null) {
    for (    ClientRequestFilter clientRequestFilter : clientRequestFilters) {
      if (clientRequestFilter != null)       clientConfig.register(clientRequestFilter);
    }
  }
  URI originalUri=dockerClientConfig.getUri();
  SSLContext sslContext=null;
  String protocol=null;
  if (dockerClientConfig.getSslConfig() != null) {
    protocol=""String_Node_Str"";
    try {
      sslContext=dockerClientConfig.getSslConfig().getSSLContext();
    }
 catch (    Exception ex) {
      throw new DockerClientException(""String_Node_Str"",ex);
    }
  }
 else {
    protocol=""String_Node_Str"";
  }
  if (originalUri.getScheme().equals(""String_Node_Str"")) {
    dockerClientConfig.setUri(UnixConnectionSocketFactory.sanitizeUri(originalUri));
  }
 else {
    configureProxy(clientConfig,protocol);
  }
  PoolingHttpClientConnectionManager connManager=new PoolingHttpClientConnectionManager(getSchemeRegistry(originalUri,sslContext));
  if (maxTotalConnections != null)   connManager.setMaxTotal(maxTotalConnections);
  if (maxPerRouteConnections != null)   connManager.setDefaultMaxPerRoute(maxPerRouteConnections);
  clientConfig.property(ApacheClientProperties.CONNECTION_MANAGER,connManager);
  ClientBuilder clientBuilder=ClientBuilder.newBuilder().withConfig(clientConfig);
  if (sslContext != null) {
    clientBuilder.sslContext(sslContext);
  }
  client=clientBuilder.build();
  baseResource=client.target(dockerClientConfig.getUri()).path(dockerClientConfig.getVersion().asWebPathPart());
}",0.915695952615992
111391,"public String getName(){
  return name;
}","@CheckForNull public String getName(){
  return name;
}",0.8541666666666666
111392,"public String getDriver(){
  return driver;
}","@CheckForNull public String getDriver(){
  return driver;
}",0.8653846153846154
111393,"@JsonIgnore public VolumeRW[] getVolumesRW(){
  return volumesRW == null ? null : volumesRW.getVolumesRW();
}","/** 
 * @deprecated As of {@link RemoteApiVersion#VERSION_1_20}use   {@link #getMounts()} instead
 */
@JsonIgnore @Deprecated public VolumeRW[] getVolumesRW(){
  return volumesRW == null ? null : volumesRW.getVolumesRW();
}",0.6566265060240963
111394,"@Override public Binds deserialize(JsonParser jsonParser,DeserializationContext deserializationContext) throws IOException, JsonProcessingException {
  List<Bind> binds=new ArrayList<Bind>();
  ObjectCodec oc=jsonParser.getCodec();
  JsonNode node=oc.readTree(jsonParser);
  for (Iterator<Map.Entry<String,JsonNode>> it=node.fields(); it.hasNext(); ) {
    Map.Entry<String,JsonNode> field=it.next();
    if (!field.getValue().equals(NullNode.getInstance())) {
      binds.add(Bind.parse(field.getKey()));
    }
  }
  return new Binds(binds.toArray(new Bind[0]));
}","@Override public Binds deserialize(JsonParser jsonParser,DeserializationContext deserializationContext) throws IOException, JsonProcessingException {
  List<Bind> binds=new ArrayList<Bind>();
  ObjectCodec oc=jsonParser.getCodec();
  JsonNode node=oc.readTree(jsonParser);
  for (Iterator<JsonNode> it=node.elements(); it.hasNext(); ) {
    JsonNode field=it.next();
    binds.add(Bind.parse(field.asText()));
  }
  return new Binds(binds.toArray(new Bind[0]));
}",0.6789883268482491
111395,"/** 
 * Asserts that   {@link InspectContainerResponse#getVolumes()} (<code>.Volumes</code>) has {@link VolumeBind}s for the given   {@link Volume}s
 */
public static void assertContainerHasVolumes(InspectContainerResponse inspectContainerResponse,Volume... expectedVolumes){
  List<Volume> volumes=new ArrayList<Volume>();
  VolumeBind[] volumeBinds=inspectContainerResponse.getVolumes();
  if (volumeBinds != null) {
    for (    VolumeBind bind : volumeBinds) {
      volumes.add(new Volume(bind.getContainerPath()));
    }
  }
  assertThat(volumes,contains(expectedVolumes));
}","/** 
 * Asserts that   {@link InspectContainerResponse#getVolumes()} (<code>.Volumes</code>) has {@link VolumeBind}s for the given   {@link Volume}s
 */
public static void assertContainerHasVolumes(InspectContainerResponse inspectContainerResponse,Volume... expectedVolumes){
  List<Volume> volumes=new ArrayList<Volume>();
  List<Mount> mounts=inspectContainerResponse.getMounts();
  if (mounts != null) {
    for (    Mount mount : mounts) {
      volumes.add(mount.getDestination());
    }
  }
  assertThat(volumes,containsInAnyOrder(expectedVolumes));
}",0.8260105448154658
111396,"@Test public void createContainerWithReadOnlyVolume() throws DockerException {
  Volume volume=new Volume(""String_Node_Str"");
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withVolumes(volume).withCmd(""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  InspectContainerResponse inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  LOG.info(""String_Node_Str"",inspectContainerResponse.getConfig().getVolumes());
  assertThat(inspectContainerResponse.getConfig().getVolumes().keySet(),contains(""String_Node_Str""));
  assertThat(Arrays.asList(inspectContainerResponse.getVolumesRW()),contains(new VolumeRW(volume)));
}","@Test public void createContainerWithReadOnlyVolume() throws DockerException {
  Volume volume=new Volume(""String_Node_Str"");
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withVolumes(volume).withCmd(""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  InspectContainerResponse inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  LOG.info(""String_Node_Str"",inspectContainerResponse.getConfig().getVolumes());
  assertThat(inspectContainerResponse.getConfig().getVolumes().keySet(),contains(""String_Node_Str""));
  assertEquals(inspectContainerResponse.getMounts().get(0).getDestination(),volume);
}",0.9410222804718218
111397,"@Test public void createContainerWithVolume() throws DockerException {
  Volume volume=new Volume(""String_Node_Str"");
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withVolumes(volume).withCmd(""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  InspectContainerResponse inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  LOG.info(""String_Node_Str"",inspectContainerResponse.getConfig().getVolumes());
  assertThat(inspectContainerResponse.getConfig().getVolumes().keySet(),contains(""String_Node_Str""));
  assertThat(inspectContainerResponse.getVolumesRW(),hasItemInArray(new VolumeRW(volume,AccessMode.rw)));
}","@Test public void createContainerWithVolume() throws DockerException {
  Volume volume=new Volume(""String_Node_Str"");
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withVolumes(volume).withCmd(""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  InspectContainerResponse inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  LOG.info(""String_Node_Str"",inspectContainerResponse.getConfig().getVolumes());
  assertThat(inspectContainerResponse.getConfig().getVolumes().keySet(),contains(""String_Node_Str""));
  assertEquals(inspectContainerResponse.getMounts().get(0).getDestination(),volume);
  assertEquals(inspectContainerResponse.getMounts().get(0).getMode(),AccessMode.rw);
  assertTrue(inspectContainerResponse.getMounts().get(0).getRW());
}",0.8482303539292142
111398,"@Test public void startContainerWithVolumes() throws DockerException {
  Volume volume1=new Volume(""String_Node_Str"");
  Volume volume2=new Volume(""String_Node_Str"");
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withVolumes(volume1,volume2).withCmd(""String_Node_Str"").withBinds(new Bind(""String_Node_Str"",volume1,ro),new Bind(""String_Node_Str"",volume2)).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  InspectContainerResponse inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertThat(inspectContainerResponse.getConfig().getVolumes().keySet(),contains(""String_Node_Str"",""String_Node_Str""));
  dockerClient.startContainerCmd(container.getId()).exec();
  dockerClient.waitContainerCmd(container.getId()).exec(new WaitContainerResultCallback()).awaitStatusCode();
  inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertContainerHasVolumes(inspectContainerResponse,volume1,volume2);
  assertThat(Arrays.asList(inspectContainerResponse.getVolumesRW()),contains(new VolumeRW(volume1,AccessMode.ro),new VolumeRW(volume2)));
}","@Test public void startContainerWithVolumes() throws DockerException {
  Volume volume1=new Volume(""String_Node_Str"");
  Volume volume2=new Volume(""String_Node_Str"");
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withVolumes(volume1,volume2).withCmd(""String_Node_Str"").withBinds(new Bind(""String_Node_Str"",volume1,ro),new Bind(""String_Node_Str"",volume2)).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  InspectContainerResponse inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertThat(inspectContainerResponse.getConfig().getVolumes().keySet(),contains(""String_Node_Str"",""String_Node_Str""));
  dockerClient.startContainerCmd(container.getId()).exec();
  dockerClient.waitContainerCmd(container.getId()).exec(new WaitContainerResultCallback()).awaitStatusCode();
  inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertContainerHasVolumes(inspectContainerResponse,volume1,volume2);
  assertEquals(inspectContainerResponse.getMounts().size(),2);
  assertEquals(inspectContainerResponse.getMounts().get(0).getDestination(),volume1);
  assertEquals(inspectContainerResponse.getMounts().get(0).getMode(),""String_Node_Str"");
  assertEquals(inspectContainerResponse.getMounts().get(0).getRW(),Boolean.FALSE);
  assertEquals(inspectContainerResponse.getMounts().get(1).getDestination(),volume2);
  assertEquals(inspectContainerResponse.getMounts().get(1).getMode(),""String_Node_Str"");
  assertEquals(inspectContainerResponse.getMounts().get(1).getRW(),Boolean.TRUE);
}",0.7830650804758572
111399,"/** 
 * @throws NotFoundException container not found
 */
@Override public Integer exec() throws NotFoundException ;","/** 
 * @throws NotFoundException container not found
 */
@Override public <T extends ResultCallback<WaitResponse>>T exec(T resultCallback);",0.671875
111400,"@Override public void onError(Throwable throwable){
  if (closed)   return;
  try {
    LOGGER.error(""String_Node_Str"",throwable);
    throw new RuntimeException(throwable);
  }
  finally {
    try {
      close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}","@Override public void onError(Throwable throwable){
  if (closed)   return;
  if (this.firstError == null)   this.firstError=throwable;
  try {
    LOGGER.error(""String_Node_Str"",throwable);
  }
  finally {
    try {
      close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}",0.5285481239804242
111401,"@Test public void testRunShlex() throws DockerException {
  String[] commands=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String command : commands) {
    LOG.info(""String_Node_Str"",command);
    CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(commands).exec();
    dockerClient.startContainerCmd(container.getId());
    int exitcode=dockerClient.waitContainerCmd(container.getId()).exec();
    assertThat(exitcode,equalTo(0));
  }
}","@Test public void testRunShlex() throws DockerException {
  String[] commands=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String command : commands) {
    LOG.info(""String_Node_Str"",command);
    CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(commands).exec();
    dockerClient.startContainerCmd(container.getId());
    int exitcode=dockerClient.waitContainerCmd(container.getId()).exec(new WaitContainerResultCallback()).awaitStatusCode();
    assertThat(exitcode,equalTo(0));
  }
}",0.9581624282198524
111402,"private String execBuild(BuildImageCmd buildImageCmd) throws Exception {
  String imageId=buildImageCmd.withNoCache().exec(new BuildImageResultCallback()).awaitImageId();
  CreateContainerResponse container=dockerClient.createContainerCmd(imageId).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  dockerClient.waitContainerCmd(container.getId()).exec();
  return containerLog(container.getId());
}","private String execBuild(BuildImageCmd buildImageCmd) throws Exception {
  String imageId=buildImageCmd.withNoCache().exec(new BuildImageResultCallback()).awaitImageId();
  CreateContainerResponse container=dockerClient.createContainerCmd(imageId).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  dockerClient.waitContainerCmd(container.getId()).exec(new WaitContainerResultCallback()).awaitStatusCode();
  return containerLog(container.getId());
}",0.9535941765241128
111403,"@Test(groups=""String_Node_Str"") public void testContainerDiff() throws DockerException {
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  int exitCode=dockerClient.waitContainerCmd(container.getId()).exec();
  assertThat(exitCode,equalTo(0));
  List<ChangeLog> filesystemDiff=dockerClient.containerDiffCmd(container.getId()).exec();
  LOG.info(""String_Node_Str"",filesystemDiff.toString());
  assertThat(filesystemDiff.size(),equalTo(1));
  ChangeLog testChangeLog=selectUnique(filesystemDiff,hasField(""String_Node_Str"",equalTo(""String_Node_Str"")));
  assertThat(testChangeLog,hasField(""String_Node_Str"",equalTo(""String_Node_Str"")));
  assertThat(testChangeLog,hasField(""String_Node_Str"",equalTo(1)));
}","@Test(groups=""String_Node_Str"") public void testContainerDiff() throws DockerException {
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  int exitCode=dockerClient.waitContainerCmd(container.getId()).exec(new WaitContainerResultCallback()).awaitStatusCode();
  assertThat(exitCode,equalTo(0));
  List<ChangeLog> filesystemDiff=dockerClient.containerDiffCmd(container.getId()).exec();
  LOG.info(""String_Node_Str"",filesystemDiff.toString());
  assertThat(filesystemDiff.size(),equalTo(1));
  ChangeLog testChangeLog=selectUnique(filesystemDiff,hasField(""String_Node_Str"",equalTo(""String_Node_Str"")));
  assertThat(testChangeLog,hasField(""String_Node_Str"",equalTo(""String_Node_Str"")));
  assertThat(testChangeLog,hasField(""String_Node_Str"",equalTo(1)));
}",0.9741510390268626
111404,"@Test public void canCloseFrameReaderAndReadExpectedLines() throws Exception {
  int exitCode=dockerClient.waitContainerCmd(dockerfileFixture.getContainerId()).exec();
  assertEquals(0,exitCode);
  Iterator<Frame> response=getLoggingFrames().iterator();
  assertEquals(response.next(),new Frame(StreamType.STDOUT,""String_Node_Str"".getBytes()));
  assertEquals(response.next(),new Frame(StreamType.STDERR,""String_Node_Str"".getBytes()));
  assertFalse(response.hasNext());
}","@Test public void canCloseFrameReaderAndReadExpectedLines() throws Exception {
  int exitCode=dockerClient.waitContainerCmd(dockerfileFixture.getContainerId()).exec(new WaitContainerResultCallback()).awaitStatusCode();
  assertEquals(0,exitCode);
  Iterator<Frame> response=getLoggingFrames().iterator();
  assertEquals(response.next(),new Frame(StreamType.STDOUT,""String_Node_Str"".getBytes()));
  assertEquals(response.next(),new Frame(StreamType.STDERR,""String_Node_Str"".getBytes()));
  assertFalse(response.hasNext());
}",0.9487437185929648
111405,"@Test public void asyncMultipleLogContainer() throws Exception {
  String snippet=""String_Node_Str"";
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",snippet).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  int exitCode=dockerClient.waitContainerCmd(container.getId()).exec();
  assertThat(exitCode,equalTo(0));
  LogContainerTestCallback loggingCallback=new LogContainerTestCallback();
  dockerClient.logContainerCmd(container.getId()).withStdErr().withStdOut().exec(loggingCallback);
  loggingCallback.close();
  loggingCallback=new LogContainerTestCallback();
  dockerClient.logContainerCmd(container.getId()).withStdErr().withStdOut().exec(loggingCallback);
  loggingCallback.close();
  loggingCallback=new LogContainerTestCallback();
  dockerClient.logContainerCmd(container.getId()).withStdErr().withStdOut().exec(loggingCallback);
  loggingCallback.awaitCompletion();
  assertTrue(loggingCallback.toString().contains(snippet));
}","@Test public void asyncMultipleLogContainer() throws Exception {
  String snippet=""String_Node_Str"";
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",snippet).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  int exitCode=dockerClient.waitContainerCmd(container.getId()).exec(new WaitContainerResultCallback()).awaitStatusCode();
  assertThat(exitCode,equalTo(0));
  LogContainerTestCallback loggingCallback=new LogContainerTestCallback();
  dockerClient.logContainerCmd(container.getId()).withStdErr().withStdOut().exec(loggingCallback);
  loggingCallback.close();
  loggingCallback=new LogContainerTestCallback();
  dockerClient.logContainerCmd(container.getId()).withStdErr().withStdOut().exec(loggingCallback);
  loggingCallback.close();
  loggingCallback=new LogContainerTestCallback();
  dockerClient.logContainerCmd(container.getId()).withStdErr().withStdOut().exec(loggingCallback);
  loggingCallback.awaitCompletion();
  assertTrue(loggingCallback.toString().contains(snippet));
}",0.9778933680104032
111406,"@Test public void asyncLogContainer() throws Exception {
  String snippet=""String_Node_Str"";
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",snippet).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  int exitCode=dockerClient.waitContainerCmd(container.getId()).exec();
  assertThat(exitCode,equalTo(0));
  LogContainerTestCallback loggingCallback=new LogContainerTestCallback();
  dockerClient.logContainerCmd(container.getId()).withStdErr().withStdOut().exec(loggingCallback);
  loggingCallback.awaitCompletion();
  assertTrue(loggingCallback.toString().contains(snippet));
}","@Test public void asyncLogContainer() throws Exception {
  String snippet=""String_Node_Str"";
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",snippet).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  int exitCode=dockerClient.waitContainerCmd(container.getId()).exec(new WaitContainerResultCallback()).awaitStatusCode();
  assertThat(exitCode,equalTo(0));
  LogContainerTestCallback loggingCallback=new LogContainerTestCallback();
  dockerClient.logContainerCmd(container.getId()).withStdErr().withStdOut().exec(loggingCallback);
  loggingCallback.awaitCompletion();
  assertTrue(loggingCallback.toString().contains(snippet));
}",0.9678638941398866
111407,"@Test public void asyncLogContainerWithSince() throws Exception {
  String snippet=""String_Node_Str"";
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",snippet).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  int timestamp=(int)(System.currentTimeMillis() / 1000);
  dockerClient.startContainerCmd(container.getId()).exec();
  int exitCode=dockerClient.waitContainerCmd(container.getId()).exec();
  assertThat(exitCode,equalTo(0));
  LogContainerTestCallback loggingCallback=new LogContainerTestCallback();
  dockerClient.logContainerCmd(container.getId()).withStdErr().withStdOut().withSince(timestamp).exec(loggingCallback);
  loggingCallback.awaitCompletion();
  assertFalse(loggingCallback.toString().contains(snippet));
}","@Test public void asyncLogContainerWithSince() throws Exception {
  String snippet=""String_Node_Str"";
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",snippet).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  int timestamp=(int)(System.currentTimeMillis() / 1000);
  dockerClient.startContainerCmd(container.getId()).exec();
  int exitCode=dockerClient.waitContainerCmd(container.getId()).exec(new WaitContainerResultCallback()).awaitStatusCode();
  assertThat(exitCode,equalTo(0));
  LogContainerTestCallback loggingCallback=new LogContainerTestCallback();
  dockerClient.logContainerCmd(container.getId()).withStdErr().withStdOut().withSince(timestamp).exec(loggingCallback);
  loggingCallback.awaitCompletion();
  assertFalse(loggingCallback.toString().contains(snippet));
}",0.9711048158640226
111408,"@Test(groups=""String_Node_Str"") public void removeContainer() throws DockerException {
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"").exec();
  dockerClient.startContainerCmd(container.getId()).exec();
  dockerClient.waitContainerCmd(container.getId()).exec();
  LOG.info(""String_Node_Str"",container.getId());
  dockerClient.removeContainerCmd(container.getId()).exec();
  List<Container> containers2=dockerClient.listContainersCmd().withShowAll(true).exec();
  Matcher matcher=not(hasItem(hasField(""String_Node_Str"",startsWith(container.getId()))));
  assertThat(containers2,matcher);
}","@Test(groups=""String_Node_Str"") public void removeContainer() throws DockerException {
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"").exec();
  dockerClient.startContainerCmd(container.getId()).exec();
  dockerClient.waitContainerCmd(container.getId()).exec(new WaitContainerResultCallback()).awaitStatusCode();
  LOG.info(""String_Node_Str"",container.getId());
  dockerClient.removeContainerCmd(container.getId()).exec();
  List<Container> containers2=dockerClient.listContainersCmd().withShowAll(true).exec();
  Matcher matcher=not(hasItem(hasField(""String_Node_Str"",startsWith(container.getId()))));
  assertThat(containers2,matcher);
}",0.9624724061810156
111409,"@Test public void startContainerWithVolumes() throws DockerException {
  Volume volume1=new Volume(""String_Node_Str"");
  Volume volume2=new Volume(""String_Node_Str"");
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withVolumes(volume1,volume2).withCmd(""String_Node_Str"").withBinds(new Bind(""String_Node_Str"",volume1,ro),new Bind(""String_Node_Str"",volume2)).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  InspectContainerResponse inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertThat(inspectContainerResponse.getConfig().getVolumes().keySet(),contains(""String_Node_Str"",""String_Node_Str""));
  dockerClient.startContainerCmd(container.getId()).exec();
  dockerClient.waitContainerCmd(container.getId()).exec();
  inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertContainerHasVolumes(inspectContainerResponse,volume1,volume2);
  assertThat(Arrays.asList(inspectContainerResponse.getVolumesRW()),contains(new VolumeRW(volume1,AccessMode.ro),new VolumeRW(volume2)));
}","@Test public void startContainerWithVolumes() throws DockerException {
  Volume volume1=new Volume(""String_Node_Str"");
  Volume volume2=new Volume(""String_Node_Str"");
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withVolumes(volume1,volume2).withCmd(""String_Node_Str"").withBinds(new Bind(""String_Node_Str"",volume1,ro),new Bind(""String_Node_Str"",volume2)).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  InspectContainerResponse inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertThat(inspectContainerResponse.getConfig().getVolumes().keySet(),contains(""String_Node_Str"",""String_Node_Str""));
  dockerClient.startContainerCmd(container.getId()).exec();
  dockerClient.waitContainerCmd(container.getId()).exec(new WaitContainerResultCallback()).awaitStatusCode();
  inspectContainerResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertContainerHasVolumes(inspectContainerResponse,volume1,volume2);
  assertThat(Arrays.asList(inspectContainerResponse.getVolumesRW()),contains(new VolumeRW(volume1,AccessMode.ro),new VolumeRW(volume2)));
}",0.9784537389100126
111410,"@Override public void close() throws IOException {
}","@Override public void close(){
}",0.7619047619047619
111411,"@Override public void close() throws IOException {
}","@Override public void close(){
}",0.7619047619047619
111412,"@Override public void close() throws IOException {
  super.close();
  tarInputStream.close();
}","@Override public void close(){
  super.close();
  try {
    tarInputStream.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.6
111413,"@Override public void onComplete(){
  resultCallback.onComplete();
  try {
    command.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public void onComplete(){
  resultCallback.onComplete();
  command.close();
}",0.6850393700787402
111414,"protected final Void execute(final CMD_T command,final ResultCallback<A_RES_T> resultCallback){
  ResultCallback<A_RES_T> delegatingResultCallback=new ResultCallback<A_RES_T>(){
    @Override public void close() throws IOException {
      resultCallback.close();
      command.close();
    }
    @Override public void onStart(    Closeable closeable){
      resultCallback.onStart(closeable);
    }
    @Override public void onNext(    A_RES_T object){
      resultCallback.onNext(object);
    }
    @Override public void onError(    Throwable throwable){
      resultCallback.onError(throwable);
    }
    @Override public void onComplete(){
      resultCallback.onComplete();
      try {
        command.close();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  AbstractCallbackNotifier<A_RES_T> callbackNotifier=callbackNotifier(command,delegatingResultCallback);
  AbstractCallbackNotifier.startAsyncProcessing(callbackNotifier);
  return null;
}","protected final Void execute(final CMD_T command,final ResultCallback<A_RES_T> resultCallback){
  ResultCallback<A_RES_T> delegatingResultCallback=new ResultCallback<A_RES_T>(){
    @Override public void close() throws IOException {
      resultCallback.close();
      command.close();
    }
    @Override public void onStart(    Closeable closeable){
      resultCallback.onStart(closeable);
    }
    @Override public void onNext(    A_RES_T object){
      resultCallback.onNext(object);
    }
    @Override public void onError(    Throwable throwable){
      resultCallback.onError(throwable);
    }
    @Override public void onComplete(){
      resultCallback.onComplete();
      command.close();
    }
  }
;
  AbstractCallbackNotifier<A_RES_T> callbackNotifier=callbackNotifier(command,delegatingResultCallback);
  AbstractCallbackNotifier.startAsyncProcessing(callbackNotifier);
  return null;
}",0.9474237644584648
111415,"@Override public RES_T exec(CMD_T command){
  RES_T result;
  try {
    result=execute(command);
  }
 catch (  ProcessingException e) {
    if (e.getCause() instanceof DockerException) {
      throw (DockerException)e.getCause();
    }
 else {
      throw e;
    }
  }
 finally {
    try {
      command.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  return result;
}","@Override public RES_T exec(CMD_T command){
  try (CMD_T cmd=command){
    try {
      return execute(cmd);
    }
 catch (    ProcessingException e) {
      if (e.getCause() instanceof DockerException) {
        throw (DockerException)e.getCause();
      }
 else {
        throw e;
      }
    }
  }
 }",0.6125874125874126
111416,"@Override public boolean accept(File file){
  String relativePath=FilePathUtil.relativize(base,file);
  boolean match=GoLangFileMatch.match(patterns,relativePath);
  return !match;
}","@Override public boolean accept(File file){
  String relativePath=FilePathUtil.relativize(base,file);
  return GoLangFileMatch.match(patterns,relativePath).isEmpty();
}",0.8857142857142857
111417,"public ScannedResult() throws IOException {
  ignores=getIgnores();
  filesToAdd.add(dockerFile);
  for (  DockerfileStatement statement : getStatements()) {
    if (statement instanceof DockerfileStatement.Env) {
      processEnvStatement((DockerfileStatement.Env)statement);
    }
 else     if (statement instanceof DockerfileStatement.Add) {
      processAddStatement((DockerfileStatement.Add)statement);
    }
  }
}","public ScannedResult() throws IOException {
  ignores=getIgnores();
  String matchingIgnorePattern=effectiveMatchingIgnorePattern(dockerFile);
  if (matchingIgnorePattern == null) {
    filesToAdd.add(dockerFile);
  }
 else {
    throw new DockerClientException(String.format(""String_Node_Str"",matchingIgnorePattern));
  }
  for (  DockerfileStatement statement : getStatements()) {
    if (statement instanceof DockerfileStatement.Env) {
      processEnvStatement((DockerfileStatement.Env)statement);
    }
 else     if (statement instanceof DockerfileStatement.Add) {
      processAddStatement((DockerfileStatement.Add)statement);
    }
  }
}",0.7883349012229539
111418,"public List<String> getIgnores() throws IOException {
  List<String> ignores=new ArrayList<String>();
  File dockerIgnoreFile=new File(getDockerFolder(),""String_Node_Str"");
  if (dockerIgnoreFile.exists()) {
    int lineNumber=0;
    List<String> dockerIgnoreFileContent=FileUtils.readLines(dockerIgnoreFile);
    for (    String pattern : dockerIgnoreFileContent) {
      lineNumber++;
      pattern=pattern.trim();
      if (pattern.isEmpty()) {
        continue;
      }
      pattern=FilenameUtils.normalize(pattern);
      try {
        if (GoLangFileMatch.match(pattern,""String_Node_Str"")) {
          throw new DockerClientException(String.format(""String_Node_Str"",pattern,lineNumber));
        }
        ignores.add(pattern);
      }
 catch (      GoLangFileMatchException e) {
        throw new DockerClientException(String.format(""String_Node_Str"",pattern,lineNumber));
      }
    }
  }
  return ignores;
}","public List<String> getIgnores() throws IOException {
  List<String> ignores=new ArrayList<String>();
  File dockerIgnoreFile=new File(getDockerFolder(),""String_Node_Str"");
  if (dockerIgnoreFile.exists()) {
    int lineNumber=0;
    List<String> dockerIgnoreFileContent=FileUtils.readLines(dockerIgnoreFile);
    for (    String pattern : dockerIgnoreFileContent) {
      lineNumber++;
      pattern=pattern.trim();
      if (pattern.isEmpty()) {
        continue;
      }
      pattern=FilenameUtils.normalize(pattern);
      try {
        ignores.add(pattern);
      }
 catch (      GoLangFileMatchException e) {
        throw new DockerClientException(String.format(""String_Node_Str"",pattern,lineNumber));
      }
    }
  }
  return ignores;
}",0.8088942307692307
111419,"private void processAddStatement(DockerfileStatement.Add add) throws IOException {
  add=add.transform(environmentMap);
  for (  String resource : add.getFileResources()) {
    File dockerFolder=getDockerFolder();
    File src=new File(resource);
    if (!src.isAbsolute()) {
      src=new File(dockerFolder,resource);
    }
 else {
      throw new DockerClientException(String.format(""String_Node_Str"",src,dockerFolder));
    }
    if (src.exists()) {
      src=src.getCanonicalFile();
      if (src.isDirectory()) {
        Collection<File> files=FileUtils.listFiles(src,new GoLangMatchFileFilter(src,ignores),TrueFileFilter.INSTANCE);
        filesToAdd.addAll(files);
      }
 else       if (!GoLangFileMatch.match(ignores,FilePathUtil.relativize(dockerFolder,src))) {
        filesToAdd.add(src);
      }
 else {
        throw new DockerClientException(String.format(""String_Node_Str"",src));
      }
    }
 else {
      filesToAdd.addAll(resolveWildcards(src,ignores));
    }
  }
}","private void processAddStatement(DockerfileStatement.Add add) throws IOException {
  add=add.transform(environmentMap);
  for (  String resource : add.getFileResources()) {
    File dockerFolder=getDockerFolder();
    File src=new File(resource);
    if (!src.isAbsolute()) {
      src=new File(dockerFolder,resource);
    }
 else {
      throw new DockerClientException(String.format(""String_Node_Str"",src,dockerFolder));
    }
    if (src.exists()) {
      src=src.getCanonicalFile();
      if (src.isDirectory()) {
        Collection<File> files=FileUtils.listFiles(src,new GoLangMatchFileFilter(src,ignores),TrueFileFilter.INSTANCE);
        filesToAdd.addAll(files);
      }
 else       if (effectiveMatchingIgnorePattern(src) == null) {
        filesToAdd.add(src);
      }
 else {
        throw new DockerClientException(String.format(""String_Node_Str"",src));
      }
    }
 else {
      filesToAdd.addAll(resolveWildcards(src,ignores));
    }
  }
}",0.9505664263645726
111420,"public static HostnameReposName resolveRepositoryName(String reposName){
  if (reposName.contains(""String_Node_Str"")) {
    throw new InvalidRepositoryNameException();
  }
  String[] nameParts=reposName.split(""String_Node_Str"",2);
  if (nameParts.length == 1 || (!nameParts[0].contains(""String_Node_Str"") && !nameParts[0].contains(""String_Node_Str"") && !nameParts[0].equals(""String_Node_Str""))) {
    return new HostnameReposName(AuthConfig.DEFAULT_SERVER_ADDRESS,reposName);
  }
  String hostname=nameParts[0];
  reposName=nameParts[1];
  if (hostname.contains(""String_Node_Str"")) {
    throw new InvalidRepositoryNameException(String.format(""String_Node_Str"",reposName));
  }
  validateRepositoryName(reposName);
  return new HostnameReposName(hostname,reposName);
}","public static HostnameReposName resolveRepositoryName(String reposName){
  if (reposName.contains(""String_Node_Str"")) {
    throw new InvalidRepositoryNameException();
  }
  String[] nameParts=reposName.split(""String_Node_Str"",2);
  if (nameParts.length == 1 || (!nameParts[0].contains(""String_Node_Str"") && !nameParts[0].contains(""String_Node_Str"") && !nameParts[0].equals(""String_Node_Str""))) {
    return new HostnameReposName(AuthConfig.DEFAULT_SERVER_ADDRESS,reposName);
  }
  String hostname=nameParts[0];
  reposName=nameParts[1];
  if (hostname.contains(""String_Node_Str"")) {
    throw new InvalidRepositoryNameException(String.format(""String_Node_Str"",reposName));
  }
  validateRepoName(reposName);
  return new HostnameReposName(hostname,reposName);
}",0.996078431372549
111421,"@Override public boolean accept(File file){
  String relativePath=FilePathUtil.relativize(base,file);
  boolean match=GoLangFileMatch.match(patterns,relativePath);
  return !match;
}","@Override public boolean accept(File file){
  String relativePath=FilePathUtil.relativize(base,file);
  return GoLangFileMatch.match(patterns,relativePath).isEmpty();
}",0.8857142857142857
111422,"public ScannedResult() throws IOException {
  ignores=getIgnores();
  filesToAdd.add(dockerFile);
  for (  DockerfileStatement statement : getStatements()) {
    if (statement instanceof DockerfileStatement.Env) {
      processEnvStatement((DockerfileStatement.Env)statement);
    }
 else     if (statement instanceof DockerfileStatement.Add) {
      processAddStatement((DockerfileStatement.Add)statement);
    }
  }
}","public ScannedResult() throws IOException {
  ignores=getIgnores();
  String matchingIgnorePattern=effectiveMatchingIgnorePattern(dockerFile);
  if (matchingIgnorePattern == null) {
    filesToAdd.add(dockerFile);
  }
 else {
    throw new DockerClientException(String.format(""String_Node_Str"",matchingIgnorePattern));
  }
  for (  DockerfileStatement statement : getStatements()) {
    if (statement instanceof DockerfileStatement.Env) {
      processEnvStatement((DockerfileStatement.Env)statement);
    }
 else     if (statement instanceof DockerfileStatement.Add) {
      processAddStatement((DockerfileStatement.Add)statement);
    }
  }
}",0.7883349012229539
111423,"public List<String> getIgnores() throws IOException {
  List<String> ignores=new ArrayList<String>();
  File dockerIgnoreFile=new File(getDockerFolder(),""String_Node_Str"");
  if (dockerIgnoreFile.exists()) {
    int lineNumber=0;
    List<String> dockerIgnoreFileContent=FileUtils.readLines(dockerIgnoreFile);
    for (    String pattern : dockerIgnoreFileContent) {
      lineNumber++;
      pattern=pattern.trim();
      if (pattern.isEmpty()) {
        continue;
      }
      pattern=FilenameUtils.normalize(pattern);
      try {
        if (GoLangFileMatch.match(pattern,""String_Node_Str"")) {
          throw new DockerClientException(String.format(""String_Node_Str"",pattern,lineNumber));
        }
        ignores.add(pattern);
      }
 catch (      GoLangFileMatchException e) {
        throw new DockerClientException(String.format(""String_Node_Str"",pattern,lineNumber));
      }
    }
  }
  return ignores;
}","public List<String> getIgnores() throws IOException {
  List<String> ignores=new ArrayList<String>();
  File dockerIgnoreFile=new File(getDockerFolder(),""String_Node_Str"");
  if (dockerIgnoreFile.exists()) {
    int lineNumber=0;
    List<String> dockerIgnoreFileContent=FileUtils.readLines(dockerIgnoreFile);
    for (    String pattern : dockerIgnoreFileContent) {
      lineNumber++;
      pattern=pattern.trim();
      if (pattern.isEmpty()) {
        continue;
      }
      pattern=FilenameUtils.normalize(pattern);
      try {
        ignores.add(pattern);
      }
 catch (      GoLangFileMatchException e) {
        throw new DockerClientException(String.format(""String_Node_Str"",pattern,lineNumber));
      }
    }
  }
  return ignores;
}",0.8088942307692307
111424,"private void processAddStatement(DockerfileStatement.Add add) throws IOException {
  add=add.transform(environmentMap);
  for (  String resource : add.getFileResources()) {
    File dockerFolder=getDockerFolder();
    File src=new File(resource);
    if (!src.isAbsolute()) {
      src=new File(dockerFolder,resource);
    }
 else {
      throw new DockerClientException(String.format(""String_Node_Str"",src,dockerFolder));
    }
    if (src.exists()) {
      src=src.getCanonicalFile();
      if (src.isDirectory()) {
        Collection<File> files=FileUtils.listFiles(src,new GoLangMatchFileFilter(src,ignores),TrueFileFilter.INSTANCE);
        filesToAdd.addAll(files);
      }
 else       if (!GoLangFileMatch.match(ignores,FilePathUtil.relativize(dockerFolder,src))) {
        filesToAdd.add(src);
      }
 else {
        throw new DockerClientException(String.format(""String_Node_Str"",src));
      }
    }
 else {
      filesToAdd.addAll(resolveWildcards(src,ignores));
    }
  }
}","private void processAddStatement(DockerfileStatement.Add add) throws IOException {
  add=add.transform(environmentMap);
  for (  String resource : add.getFileResources()) {
    File dockerFolder=getDockerFolder();
    File src=new File(resource);
    if (!src.isAbsolute()) {
      src=new File(dockerFolder,resource);
    }
 else {
      throw new DockerClientException(String.format(""String_Node_Str"",src,dockerFolder));
    }
    if (src.exists()) {
      src=src.getCanonicalFile();
      if (src.isDirectory()) {
        Collection<File> files=FileUtils.listFiles(src,new GoLangMatchFileFilter(src,ignores),TrueFileFilter.INSTANCE);
        filesToAdd.addAll(files);
      }
 else       if (effectiveMatchingIgnorePattern(src) == null) {
        filesToAdd.add(src);
      }
 else {
        throw new DockerClientException(String.format(""String_Node_Str"",src));
      }
    }
 else {
      filesToAdd.addAll(resolveWildcards(src,ignores));
    }
  }
}",0.9505664263645726
111425,"private String name(PushImageCmd command){
  String name=command.getName();
  AuthConfig authConfig=command.getAuthConfig();
  return name.contains(""String_Node_Str"") ? name : authConfig.getUsername();
}","private String name(PushImageCmd command){
  String name=command.getName();
  AuthConfig authConfig=command.getAuthConfig();
  return (name.contains(""String_Node_Str"") || authConfig == null) ? name : authConfig.getUsername();
}",0.944186046511628
111426,"@Override public Void call() throws Exception {
  int numEvents=0;
  Response response=null;
  try {
    response=webTarget.request().get(Response.class);
    InputStream inputStream=new WrappedResponseInputStream(response);
    JsonParser jp=JSON_FACTORY.createParser(inputStream);
    while (jp.nextToken() != JsonToken.END_OBJECT && !jp.isClosed() && eventCallback.isReceiving()) {
      eventCallback.onEvent(OBJECT_MAPPER.readValue(jp,Event.class));
      numEvents++;
    }
  }
 catch (  Exception e) {
    eventCallback.onException(e);
  }
 finally {
    if (response != null) {
      response.close();
    }
  }
  eventCallback.onCompletion(numEvents);
  return null;
}","@Override public Void call() throws Exception {
  int numEvents=0;
  Response response=null;
  try {
    response=webTarget.request().get(Response.class);
    InputStream inputStream=new WrappedResponseInputStream(response);
    JsonParser jp=JSON_FACTORY.createParser(inputStream);
    while (jp.nextToken() != JsonToken.END_OBJECT && !jp.isClosed() && eventCallback.isReceiving()) {
      try {
        eventCallback.onEvent(OBJECT_MAPPER.readValue(jp,Event.class));
      }
 catch (      Exception e) {
        eventCallback.onException(e);
      }
      numEvents++;
    }
  }
 catch (  Exception e) {
    eventCallback.onException(e);
  }
 finally {
    if (response != null) {
      response.close();
    }
  }
  eventCallback.onCompletion(numEvents);
  return null;
}",0.9331495520330806
111427,"public int[] getOnBuild(){
  return onBuild;
}","public String[] getOnBuild(){
  return onBuild;
}",0.9473684210526316
111428,"@JsonIgnore public Volume[] getVolumesRW(){
  return volumesRW.getVolumes();
}","@JsonIgnore public VolumeRW[] getVolumesRW(){
  return volumesRW.getVolumesRW();
}",0.975
111429,"/** 
 * Returns a string representation of this   {@link Bind} suitablefor inclusion in a JSON message. The format is <code>&lt;host path&gt;:&lt;container path&gt;:&lt;access mode&gt;</code>, like the argument in  {@link #parse(String)}.
 * @return a string representation of this {@link Bind}
 */
@Override public String toString(){
  return path + ""String_Node_Str"" + volume.toString()+ ""String_Node_Str""+ accessMode.toString();
}","/** 
 * Returns a string representation of this   {@link Bind} suitablefor inclusion in a JSON message. The format is <code>&lt;host path&gt;:&lt;container path&gt;:&lt;access mode&gt;</code>, like the argument in  {@link #parse(String)}.
 * @return a string representation of this {@link Bind}
 */
@Override public String toString(){
  return path + ""String_Node_Str"" + volume.getPath()+ ""String_Node_Str""+ accessMode.toString();
}",0.9826589595375722
111430,"/** 
 * Parses a bind mount specification to a   {@link Bind}.
 * @param serialized the specification, e.g. <code>/host:/container:ro</code>
 * @return a {@link Bind} matching the specification
 * @throws IllegalArgumentException if the specification cannot be parsed
 */
public static Bind parse(String serialized){
  try {
    String[] parts=serialized.split(""String_Node_Str"");
switch (parts.length) {
case 2:
{
        return new Bind(parts[0],Volume.parse(parts[1]));
      }
case 3:
{
      AccessMode accessMode=AccessMode.valueOf(parts[2].toLowerCase());
      return new Bind(parts[0],Volume.parse(parts[1]),accessMode);
    }
default :
{
    throw new IllegalArgumentException();
  }
}
}
 catch (Exception e) {
throw new IllegalArgumentException(""String_Node_Str"" + serialized + ""String_Node_Str"");
}
}","/** 
 * Parses a bind mount specification to a   {@link Bind}.
 * @param serialized the specification, e.g. <code>/host:/container:ro</code>
 * @return a {@link Bind} matching the specification
 * @throws IllegalArgumentException if the specification cannot be parsed
 */
public static Bind parse(String serialized){
  try {
    String[] parts=serialized.split(""String_Node_Str"");
switch (parts.length) {
case 2:
{
        return new Bind(parts[0],new Volume(parts[1]));
      }
case 3:
{
      AccessMode accessMode=AccessMode.valueOf(parts[2].toLowerCase());
      return new Bind(parts[0],new Volume(parts[1]),accessMode);
    }
default :
{
    throw new IllegalArgumentException();
  }
}
}
 catch (Exception e) {
throw new IllegalArgumentException(""String_Node_Str"" + serialized + ""String_Node_Str"");
}
}",0.9876543209876544
111431,"public Volume(String path,AccessMode accessMode){
  this.path=path;
  this.accessMode=accessMode;
}","public Volume(String path){
  this.path=path;
}",0.6438356164383562
111432,"@Override public int hashCode(){
  return new HashCodeBuilder().append(path).append(accessMode).toHashCode();
}","@Override public int hashCode(){
  return new HashCodeBuilder().append(path).toHashCode();
}",0.9064039408866996
111433,"@Override public boolean equals(Object obj){
  if (obj instanceof Volume) {
    Volume other=(Volume)obj;
    return new EqualsBuilder().append(path,other.getPath()).append(accessMode,other.getAccessMode()).isEquals();
  }
 else   return super.equals(obj);
}","@Override public boolean equals(Object obj){
  if (obj instanceof Volume) {
    Volume other=(Volume)obj;
    return new EqualsBuilder().append(path,other.getPath()).isEquals();
  }
 else   return super.equals(obj);
}",0.9136842105263158
111434,"/** 
 * Returns a string representation of this   {@link Volume} suitablefor inclusion in a JSON message. The returned String is simply the container path,  {@link #getPath()}. 
 * @return a string representation of this {@link Volume}
 */
@Override public String toString(){
  return getPath();
}","@Override public String toString(){
  return getPath();
}",0.3220338983050847
111435,"@Override public void serialize(Volumes volumes,JsonGenerator jsonGen,SerializerProvider serProvider) throws IOException, JsonProcessingException {
  jsonGen.writeStartObject();
  for (  Volume volume : volumes.getVolumes()) {
    jsonGen.writeFieldName(volume.getPath());
    jsonGen.writeString(Boolean.toString(volume.getAccessMode().equals(AccessMode.rw) ? true : false));
  }
  jsonGen.writeEndObject();
}","@Override public void serialize(Volumes volumes,JsonGenerator jsonGen,SerializerProvider serProvider) throws IOException, JsonProcessingException {
  jsonGen.writeStartObject();
  for (  Volume volume : volumes.getVolumes()) {
    jsonGen.writeFieldName(volume.getPath());
    jsonGen.writeStartObject();
    jsonGen.writeEndObject();
  }
  jsonGen.writeEndObject();
}",0.8431876606683805
111436,"@Override public Volumes deserialize(JsonParser jsonParser,DeserializationContext deserializationContext) throws IOException, JsonProcessingException {
  List<Volume> volumes=new ArrayList<Volume>();
  ObjectCodec oc=jsonParser.getCodec();
  JsonNode node=oc.readTree(jsonParser);
  for (Iterator<Map.Entry<String,JsonNode>> it=node.fields(); it.hasNext(); ) {
    Map.Entry<String,JsonNode> field=it.next();
    if (!field.getValue().equals(NullNode.getInstance())) {
      Volume volume=Volume.parse(field.getKey());
      volumes.add(volume);
    }
  }
  return new Volumes(volumes.toArray(new Volume[0]));
}","@Override public Volumes deserialize(JsonParser jsonParser,DeserializationContext deserializationContext) throws IOException, JsonProcessingException {
  List<Volume> volumes=new ArrayList<Volume>();
  ObjectCodec oc=jsonParser.getCodec();
  JsonNode node=oc.readTree(jsonParser);
  for (Iterator<Map.Entry<String,JsonNode>> it=node.fields(); it.hasNext(); ) {
    Map.Entry<String,JsonNode> field=it.next();
    if (!field.getValue().equals(NullNode.getInstance())) {
      String path=field.getKey();
      Volume volume=new Volume(path);
      volumes.add(volume);
    }
  }
  return new Volumes(volumes.toArray(new Volume[0]));
}",0.9421221864951768
111437,"/** 
 * @return A frame, or null if no more frames.
 */
public Frame readFrame() throws IOException {
  byte[] header=new byte[HEADER_SIZE];
  int headerSize=inputStream.read(header);
  if (headerSize == -1) {
    return null;
  }
  if (headerSize != HEADER_SIZE) {
    throw new IOException(String.format(""String_Node_Str"",HEADER_SIZE,headerSize));
  }
  int frameSize=(header[4] << 24) + (header[5] << 16) + (header[6] << 8)+ header[7];
  int payloadSize=frameSize - header.length;
  byte[] payload=new byte[payloadSize];
  int actualPayloadSize=inputStream.read(payload);
  if (actualPayloadSize != payloadSize) {
    throw new IOException(String.format(""String_Node_Str"",payloadSize,actualPayloadSize));
  }
  return new Frame(streamType(header[0]),payload);
}","/** 
 * @return A frame, or null if no more frames.
 */
public Frame readFrame() throws IOException {
  byte[] header=new byte[HEADER_SIZE];
  int headerSize=inputStream.read(header);
  if (headerSize == -1) {
    return null;
  }
  if (headerSize != HEADER_SIZE) {
    throw new IOException(String.format(""String_Node_Str"",HEADER_SIZE,headerSize));
  }
  int payloadSize=((header[4] & 0xff) << 24) + ((header[5] & 0xff) << 16) + ((header[6] & 0xff) << 8)+ (header[7] & 0xff);
  byte[] payload=new byte[payloadSize];
  int actualPayloadSize=inputStream.read(payload);
  if (actualPayloadSize != payloadSize) {
    throw new IOException(String.format(""String_Node_Str"",payloadSize,actualPayloadSize));
  }
  return new Frame(streamType(header[0]),payload);
}",0.9322813938198552
111438,"public static DockerCmdExecFactory getDefaultDockerCmdExecFactory(){
  if (!serviceLoader.iterator().hasNext()) {
    throw new RuntimeException(""String_Node_Str"" + DockerCmdExecFactory.class.getName() + ""String_Node_Str"");
  }
  return serviceLoader.iterator().next();
}","public static DockerCmdExecFactory getDefaultDockerCmdExecFactory(){
  serviceLoader.reload();
  if (!serviceLoader.iterator().hasNext()) {
    throw new RuntimeException(""String_Node_Str"" + DockerCmdExecFactory.class.getName() + ""String_Node_Str"");
  }
  return serviceLoader.iterator().next();
}",0.954225352112676
111439,"@Override protected ResponseImpl execute(BuildImageCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"");
  String dockerFilePath=command.getPathToDockerfile();
  if (command.getTag() != null) {
    webResource=webResource.queryParam(""String_Node_Str"",command.getTag());
  }
  if (command.hasNoCacheEnabled()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (command.hasRemoveEnabled()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (command.isQuiet()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (command.hasPullEnabled()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (dockerFilePath != null && !""String_Node_Str"".equals(dockerFilePath)) {
    webResource=webResource.queryParam(""String_Node_Str"",dockerFilePath);
  }
  webResource.property(ClientProperties.REQUEST_ENTITY_PROCESSING,RequestEntityProcessing.CHUNKED);
  webResource.property(ClientProperties.CHUNKED_ENCODING_SIZE,1024 * 1024);
  LOGGER.debug(""String_Node_Str"",webResource);
  Response response=resourceWithOptionalAuthConfig(command,webResource.request()).accept(MediaType.TEXT_PLAIN).post(entity(command.getTarInputStream(),""String_Node_Str""),Response.class);
  return new ResponseImpl(new WrappedResponseInputStream(response));
}","@Override protected ResponseImpl execute(BuildImageCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"");
  String dockerFilePath=command.getPathToDockerfile();
  if (command.getTag() != null) {
    webResource=webResource.queryParam(""String_Node_Str"",command.getTag());
  }
  if (command.hasNoCacheEnabled()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (!command.hasRemoveEnabled()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (command.isQuiet()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (command.hasPullEnabled()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (dockerFilePath != null && !""String_Node_Str"".equals(dockerFilePath)) {
    webResource=webResource.queryParam(""String_Node_Str"",dockerFilePath);
  }
  webResource.property(ClientProperties.REQUEST_ENTITY_PROCESSING,RequestEntityProcessing.CHUNKED);
  webResource.property(ClientProperties.CHUNKED_ENCODING_SIZE,1024 * 1024);
  LOGGER.debug(""String_Node_Str"",webResource);
  Response response=resourceWithOptionalAuthConfig(command,webResource.request()).accept(MediaType.TEXT_PLAIN).post(entity(command.getTarInputStream(),""String_Node_Str""),Response.class);
  return new ResponseImpl(new WrappedResponseInputStream(response));
}",0.9996414485478666
111440,"@Override protected ResponseImpl execute(BuildImageCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"");
  String dockerFilePath=command.getPathToDockerfile();
  if (command.getTag() != null) {
    webResource=webResource.queryParam(""String_Node_Str"",command.getTag());
  }
  if (command.hasNoCacheEnabled()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (command.hasRemoveEnabled()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (command.isQuiet()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (command.hasPullEnabled()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (dockerFilePath != null && !""String_Node_Str"".equals(dockerFilePath)) {
    webResource=webResource.queryParam(""String_Node_Str"",dockerFilePath);
  }
  webResource.property(ClientProperties.REQUEST_ENTITY_PROCESSING,RequestEntityProcessing.CHUNKED);
  webResource.property(ClientProperties.CHUNKED_ENCODING_SIZE,1024 * 1024);
  LOGGER.debug(""String_Node_Str"",webResource);
  Response response=resourceWithOptionalAuthConfig(command,webResource.request()).accept(MediaType.TEXT_PLAIN).post(entity(command.getTarInputStream(),""String_Node_Str""),Response.class);
  return new ResponseImpl(new WrappedResponseInputStream(response));
}","@Override protected ResponseImpl execute(BuildImageCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"");
  String dockerFilePath=command.getPathToDockerfile();
  if (command.getTag() != null) {
    webResource=webResource.queryParam(""String_Node_Str"",command.getTag());
  }
  if (command.hasNoCacheEnabled()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (!command.hasRemoveEnabled()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (command.isQuiet()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (command.hasPullEnabled()) {
    webResource=webResource.queryParam(""String_Node_Str"",""String_Node_Str"");
  }
  if (dockerFilePath != null && !""String_Node_Str"".equals(dockerFilePath)) {
    webResource=webResource.queryParam(""String_Node_Str"",dockerFilePath);
  }
  webResource.property(ClientProperties.REQUEST_ENTITY_PROCESSING,RequestEntityProcessing.CHUNKED);
  webResource.property(ClientProperties.CHUNKED_ENCODING_SIZE,1024 * 1024);
  LOGGER.debug(""String_Node_Str"",webResource);
  Response response=resourceWithOptionalAuthConfig(command,webResource.request()).accept(MediaType.TEXT_PLAIN).post(entity(command.getTarInputStream(),""String_Node_Str""),Response.class);
  return new ResponseImpl(new WrappedResponseInputStream(response));
}",0.9996414485478666
111441,public CreateContainerCmd withDns(String... dns);,"/** 
 * Set custom DNS servers
 */
public CreateContainerCmd withDns(String... dns);",0.7368421052631579
111442,"public final DockerClientConfigBuilder withDockerCertPath(String dockerCertPath){
  this.sslConfig=new LocalDirectorySSLConfig(dockerCertPath);
  return this;
}","public final DockerClientConfigBuilder withDockerCertPath(String dockerCertPath){
  if (dockerCertPath != null) {
    this.sslConfig=new LocalDirectorySSLConfig(dockerCertPath);
  }
  return this;
}",0.8938547486033519
111443,"protected String filterForEnvironmentVars(Map<String,String> environmentMap,String extractedResource){
  if (environmentMap.size() > 0) {
    String currentResourceContent=extractedResource;
    for (    Map.Entry<String,String> entry : environmentMap.entrySet()) {
      String variable=entry.getKey();
      String replacementValue=entry.getValue();
      currentResourceContent=currentResourceContent.replaceAll(""String_Node_Str"" + variable,replacementValue);
      currentResourceContent=currentResourceContent.replaceAll(""String_Node_Str"" + variable + ""String_Node_Str"",replacementValue);
    }
    return currentResourceContent;
  }
 else {
    return extractedResource;
  }
}","protected String filterForEnvironmentVars(Map<String,String> environmentMap,String extractedResource){
  if (environmentMap.size() > 0) {
    String currentResourceContent=extractedResource;
    for (    Map.Entry<String,String> entry : environmentMap.entrySet()) {
      String variable=entry.getKey();
      String replacementValue=entry.getValue();
      currentResourceContent=currentResourceContent.replaceAll(""String_Node_Str"" + variable,Matcher.quoteReplacement(replacementValue));
      currentResourceContent=currentResourceContent.replaceAll(""String_Node_Str"" + variable + ""String_Node_Str"",Matcher.quoteReplacement(replacementValue));
    }
    return currentResourceContent;
  }
 else {
    return extractedResource;
  }
}",0.963276836158192
111444,"public int getSwapLimit(){
  return swapLimit;
}","public boolean getSwapLimit(){
  return swapLimit;
}",0.92
111445,"public String getIPv4Forwarding(){
  return IPv4Forwarding;
}","public boolean getIPv4Forwarding(){
  return IPv4Forwarding;
}",0.9105691056910568
111446,"@Test public void info() throws DockerException {
  if (dockerClient.listContainersCmd().withShowAll(true).exec().size() == 0) {
    CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withName(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").exec();
    LOG.info(""String_Node_Str"",container);
    assertThat(container.getId(),not(isEmptyOrNullString()));
    dockerClient.startContainerCmd(container.getId()).exec();
  }
  Info dockerInfo=dockerClient.infoCmd().exec();
  LOG.info(dockerInfo.toString());
  assertTrue(dockerInfo.toString().contains(""String_Node_Str""));
  assertTrue(dockerInfo.toString().contains(""String_Node_Str""));
  assertTrue(dockerInfo.toString().contains(""String_Node_Str""));
  assertTrue(dockerInfo.getContainers() > 0);
  assertTrue(dockerInfo.getImages() > 0);
  assertTrue(dockerInfo.getNFd() > 0);
  assertTrue(dockerInfo.getNGoroutines() > 0);
}","@Test public void info() throws DockerException {
  if (dockerClient.listContainersCmd().withShowAll(true).exec().size() == 0) {
    CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withName(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").exec();
    LOG.info(""String_Node_Str"",container);
    assertThat(container.getId(),not(isEmptyOrNullString()));
    dockerClient.startContainerCmd(container.getId()).exec();
  }
  Info dockerInfo=dockerClient.infoCmd().exec();
  LOG.info(dockerInfo.toString());
  assertTrue(dockerInfo.toString().contains(""String_Node_Str""));
  assertTrue(dockerInfo.toString().contains(""String_Node_Str""));
  assertTrue(dockerInfo.toString().contains(""String_Node_Str""));
  assertTrue(dockerInfo.getContainers() > 0);
  assertTrue(dockerInfo.getImages() > 0);
  assertTrue(dockerInfo.getNFd() > 0);
  assertTrue(dockerInfo.getNGoroutines() > 0);
  assertTrue(dockerInfo.getNCPU() > 0);
}",0.9788135593220338
111447,"/** 
 * This will set all fields in the builder to those contained in the Properties object. The Properties object should contain the following docker.io.* keys: url, version, username, password, email, dockerCertPath, and dockerCfgPath. If docker.io.readTimeout or docker.io.enableLoggingFilter are not contained, they will be set to 1000 and true, respectively.
 */
public DockerClientConfigBuilder withProperties(Properties p){
  return withUri(p.getProperty(DOCKER_IO_URL_PROPERTY)).withVersion(p.getProperty(DOCKER_IO_VERSION_PROPERTY)).withUsername(p.getProperty(DOCKER_IO_USERNAME_PROPERTY)).withPassword(p.getProperty(DOCKER_IO_PASSWORD_PROPERTY)).withEmail(p.getProperty(DOCKER_IO_EMAIL_PROPERTY)).withServerAddress(p.getProperty(DOCKER_IO_SERVER_ADDRESS_PROPERTY)).withReadTimeout(Integer.valueOf(p.getProperty(DOCKER_IO_READ_TIMEOUT_PROPERTY,""String_Node_Str""))).withLoggingFilter(Boolean.valueOf(p.getProperty(DOCKER_IO_ENABLE_LOGGING_FILTER_PROPERTY,""String_Node_Str""))).withDockerCertPath(p.getProperty(DOCKER_IO_DOCKER_CERT_PATH_PROPERTY)).withDockerCfgPath(p.getProperty(DOCKER_IO_DOCKER_CFG_PATH_PROPERTY)).withMaxPerRouteConnections(Integer.valueOf(p.getProperty(DOCKER_IO_MAX_PER_ROUTE_PROPERTY,""String_Node_Str""))).withMaxTotalConnections(Integer.valueOf(p.getProperty(DOCKER_IO_MAX_TOTAL_PROPERTY,""String_Node_Str"")));
}","/** 
 * This will set all fields in the builder to those contained in the Properties object. The Properties object should contain the following docker.io.* keys: url, version, username, password, email, dockerCertPath, and dockerCfgPath. If docker.io.readTimeout or docker.io.enableLoggingFilter are not contained, they will be set to 1000 and true, respectively.
 */
public DockerClientConfigBuilder withProperties(Properties p){
  return withUri(p.getProperty(DOCKER_IO_URL_PROPERTY)).withVersion(p.getProperty(DOCKER_IO_VERSION_PROPERTY)).withUsername(p.getProperty(DOCKER_IO_USERNAME_PROPERTY)).withPassword(p.getProperty(DOCKER_IO_PASSWORD_PROPERTY)).withEmail(p.getProperty(DOCKER_IO_EMAIL_PROPERTY)).withServerAddress(p.getProperty(DOCKER_IO_SERVER_ADDRESS_PROPERTY)).withReadTimeout(Integer.valueOf(p.getProperty(DOCKER_IO_READ_TIMEOUT_PROPERTY,""String_Node_Str""))).withLoggingFilter(Boolean.valueOf(p.getProperty(DOCKER_IO_ENABLE_LOGGING_FILTER_PROPERTY,""String_Node_Str""))).withDockerCertPath(p.getProperty(DOCKER_IO_DOCKER_CERT_PATH_PROPERTY)).withDockerCfgPath(p.getProperty(DOCKER_IO_DOCKER_CFG_PATH_PROPERTY)).withMaxPerRouteConnections(integerValue(p.getProperty(DOCKER_IO_MAX_PER_ROUTE_PROPERTY))).withMaxTotalConnections(integerValue(p.getProperty(DOCKER_IO_MAX_TOTAL_PROPERTY)));
}",0.9659090909090908
111448,"public int getMaxTotalConnections(){
  return maxTotalConnections;
}","public Integer getMaxTotalConnections(){
  return maxTotalConnections;
}",0.9571428571428572
111449,"public int getMaxPerRoutConnections(){
  return maxPerRouteConnections;
}","public Integer getMaxPerRoutConnections(){
  return maxPerRouteConnections;
}",0.96
111450,"DockerClientConfig(URI uri,String version,String username,String password,String email,String serverAddress,String dockerCfgPath,Integer readTimeout,boolean loggingFilterEnabled,SSLConfig sslConfig,int maxTotalConns,int maxPerRouteConns){
  this.uri=uri;
  this.version=version;
  this.username=username;
  this.password=password;
  this.email=email;
  this.serverAddress=serverAddress;
  this.dockerCfgPath=dockerCfgPath;
  this.readTimeout=readTimeout;
  this.loggingFilterEnabled=loggingFilterEnabled;
  this.sslConfig=sslConfig;
  this.maxTotalConnections=maxTotalConns;
  this.maxPerRouteConnections=maxPerRouteConns;
}","DockerClientConfig(URI uri,String version,String username,String password,String email,String serverAddress,String dockerCfgPath,Integer readTimeout,boolean loggingFilterEnabled,SSLConfig sslConfig,Integer maxTotalConns,Integer maxPerRouteConns){
  this.uri=uri;
  this.version=version;
  this.username=username;
  this.password=password;
  this.email=email;
  this.serverAddress=serverAddress;
  this.dockerCfgPath=dockerCfgPath;
  this.readTimeout=readTimeout;
  this.loggingFilterEnabled=loggingFilterEnabled;
  this.sslConfig=sslConfig;
  this.maxTotalConnections=maxTotalConns;
  this.maxPerRouteConnections=maxPerRouteConns;
}",0.9840764331210192
111451,"@Override public void filter(ClientRequestContext requestContext,ClientResponseContext responseContext) throws IOException {
  int status=responseContext.getStatus();
switch (status) {
case 200:
case 201:
case 204:
    return;
case 304:
  throw new NotModifiedException(getBodyAsMessage(responseContext));
case 400:
throw new BadRequestException(getBodyAsMessage(responseContext));
case 401:
throw new UnauthorizedException(getBodyAsMessage(responseContext));
case 404:
throw new NotFoundException(getBodyAsMessage(responseContext));
case 406:
throw new NotAcceptableException(getBodyAsMessage(responseContext));
case 409:
throw new ConflictException(getBodyAsMessage(responseContext));
case 500:
throw new InternalServerErrorException(getBodyAsMessage(responseContext));
default :
throw new DockerException(getBodyAsMessage(responseContext),status);
}
}","@Override public void filter(ClientRequestContext requestContext,ClientResponseContext responseContext) throws IOException {
  int status=responseContext.getStatus();
switch (status) {
case 200:
case 201:
case 204:
case 301:
    return;
case 304:
  throw new NotModifiedException(getBodyAsMessage(responseContext));
case 400:
throw new BadRequestException(getBodyAsMessage(responseContext));
case 401:
throw new UnauthorizedException(getBodyAsMessage(responseContext));
case 404:
throw new NotFoundException(getBodyAsMessage(responseContext));
case 406:
throw new NotAcceptableException(getBodyAsMessage(responseContext));
case 409:
throw new ConflictException(getBodyAsMessage(responseContext));
case 500:
throw new InternalServerErrorException(getBodyAsMessage(responseContext));
default :
throw new DockerException(getBodyAsMessage(responseContext),status);
}
}",0.9941792782305006
111452,"@Override public Iterable<EventStreamItem> getItems() throws IOException {
  ObjectMapper mapper=new ObjectMapper();
  ObjectReader reader=mapper.reader(EventStreamItem.class);
  Iterator<EventStreamItem> items=reader.readValues(proxy);
  return ImmutableList.copyOf(items);
}","@Override public Iterable<EventStreamItem> getItems() throws IOException {
  ObjectMapper mapper=new ObjectMapper();
  ObjectReader reader=mapper.reader(EventStreamItem.class);
  Iterator<EventStreamItem> items=reader.readValues(proxy);
  proxy.close();
  return ImmutableList.copyOf(items);
}",0.9701230228471002
111453,"@Override protected InputStream execute(CopyFileFromContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  LOGGER.trace(""String_Node_Str"" + webResource.toString());
  return webResource.request().accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(entity(command,MediaType.APPLICATION_JSON),Response.class).readEntity(InputStream.class);
}","@Override protected InputStream execute(CopyFileFromContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  LOGGER.trace(""String_Node_Str"" + webResource.toString());
  return webResource.request().accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(entity(command,MediaType.APPLICATION_JSON)).readEntity(InputStream.class);
}",0.9825378346915018
111454,"@Override protected Void execute(KillContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  if (command.getSignal() != null) {
    webResource=webResource.queryParam(""String_Node_Str"",command.getSignal());
  }
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null);
  return null;
}","@Override protected Void execute(KillContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  if (command.getSignal() != null) {
    webResource=webResource.queryParam(""String_Node_Str"",command.getSignal());
  }
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();
  return null;
}",0.991011235955056
111455,"@Override protected InputStream execute(LogContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId()).queryParam(""String_Node_Str"",command.hasTimestampsEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.hasStdoutEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.hasStderrEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.hasFollowStreamEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.getTail() < 0 ? ""String_Node_Str"" : ""String_Node_Str"" + command.getTail());
  LOGGER.trace(""String_Node_Str"",webResource);
  return webResource.request().get(Response.class).readEntity(InputStream.class);
}","@Override protected InputStream execute(LogContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId()).queryParam(""String_Node_Str"",command.hasTimestampsEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.hasStdoutEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.hasStderrEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.hasFollowStreamEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.getTail() < 0 ? ""String_Node_Str"" : ""String_Node_Str"" + command.getTail());
  LOGGER.trace(""String_Node_Str"",webResource);
  return webResource.request().get().readEntity(InputStream.class);
}",0.9915254237288136
111456,"@Override protected Void execute(PauseContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null);
  return null;
}","@Override protected Void execute(PauseContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();
  return null;
}",0.9877300613496932
111457,"@Override protected Void execute(PingCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"");
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().get(Response.class);
  return null;
}","@Override protected Void execute(PingCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"");
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().get().close();
  return null;
}",0.9641255605381166
111458,"@Override public Iterable<PushEventStreamItem> getItems() throws IOException {
  ObjectMapper mapper=new ObjectMapper();
  ObjectReader reader=mapper.reader(PushEventStreamItem.class);
  Iterator<PushEventStreamItem> items=reader.readValues(proxy);
  return ImmutableList.copyOf(items);
}","@Override public Iterable<PushEventStreamItem> getItems() throws IOException {
  ObjectMapper mapper=new ObjectMapper();
  ObjectReader reader=mapper.reader(PushEventStreamItem.class);
  Iterator<PushEventStreamItem> items=reader.readValues(proxy);
  proxy.close();
  return ImmutableList.copyOf(items);
}",0.9713322091062394
111459,"@Override protected Void execute(RestartContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId()).queryParam(""String_Node_Str"",String.valueOf(command.getTimeout()));
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null);
  return null;
}","@Override protected Void execute(RestartContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId()).queryParam(""String_Node_Str"",String.valueOf(command.getTimeout()));
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();
  return null;
}",0.9898734177215188
111460,"@Override protected Void execute(StartContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(entity(command,MediaType.APPLICATION_JSON));
  return null;
}","@Override protected Void execute(StartContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(entity(command,MediaType.APPLICATION_JSON)).close();
  return null;
}",0.989010989010989
111461,"@Override protected Void execute(StopContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId()).queryParam(""String_Node_Str"",String.valueOf(command.getTimeout()));
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null);
  return null;
}","@Override protected Void execute(StopContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId()).queryParam(""String_Node_Str"",String.valueOf(command.getTimeout()));
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();
  return null;
}",0.9897959183673468
111462,"@Override protected Void execute(TagImageCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"" + command.getImageId() + ""String_Node_Str"").queryParam(""String_Node_Str"",command.getRepository()).queryParam(""String_Node_Str"",command.getTag()).queryParam(""String_Node_Str"",command.hasForceEnabled() ? ""String_Node_Str"" : ""String_Node_Str"");
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().post(null);
  return null;
}","@Override protected Void execute(TagImageCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"" + command.getImageId() + ""String_Node_Str"").queryParam(""String_Node_Str"",command.getRepository()).queryParam(""String_Node_Str"",command.getTag()).queryParam(""String_Node_Str"",command.hasForceEnabled() ? ""String_Node_Str"" : ""String_Node_Str"");
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().post(null).close();
  return null;
}",0.9913978494623656
111463,"@Override protected Void execute(UnpauseContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(Entity.entity(Response.class,MediaType.APPLICATION_JSON));
  return null;
}","@Override protected Void execute(UnpauseContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null).close();
  return null;
}",0.903954802259887
111464,"@Test public void nullAuthConfig() throws Exception {
  PullImageCmdImpl pullImageCmd=new PullImageCmdImpl(NOP_EXEC,""String_Node_Str"");
  try {
    pullImageCmd.withAuthConfig(null);
    fail();
  }
 catch (  Exception e) {
    assertEquals(e.getMessage(),""String_Node_Str"");
  }
}","@Test public void nullAuthConfig() throws Exception {
  PullImageCmdImpl pullImageCmd=new PullImageCmdImpl(NOP_EXEC,null,""String_Node_Str"");
  try {
    pullImageCmd.withAuthConfig(null);
    fail();
  }
 catch (  Exception e) {
    assertEquals(e.getMessage(),""String_Node_Str"");
  }
}",0.9911816578483243
111465,"protected File buildDockerFolderTar(File dockerFolder){
  Preconditions.checkArgument(dockerFolder.exists(),""String_Node_Str"",dockerFolder);
  Preconditions.checkArgument(dockerFolder.isDirectory(),""String_Node_Str"",dockerFolder);
  Preconditions.checkState(new File(dockerFolder,""String_Node_Str"").exists(),""String_Node_Str"" + dockerFolder);
  String archiveNameWithOutExtension=UUID.randomUUID().toString();
  File dockerFolderTar=null;
  try {
    File dockerFile=new File(dockerFolder,""String_Node_Str"");
    List<String> dockerFileContent=FileUtils.readLines(dockerFile);
    if (dockerFileContent.size() <= 0) {
      throw new DockerClientException(String.format(""String_Node_Str"",dockerFile));
    }
    List<String> ignores=new ArrayList<String>();
    File dockerIgnoreFile=new File(dockerFolder,""String_Node_Str"");
    if (dockerIgnoreFile.exists()) {
      int lineNumber=0;
      List<String> dockerIgnoreFileContent=FileUtils.readLines(dockerIgnoreFile);
      for (      String pattern : dockerIgnoreFileContent) {
        lineNumber++;
        pattern=pattern.trim();
        if (pattern.isEmpty()) {
          continue;
        }
        pattern=FilenameUtils.normalize(pattern);
        try {
          if (GoLangFileMatch.match(pattern,""String_Node_Str"")) {
            throw new DockerClientException(String.format(""String_Node_Str"",pattern,lineNumber));
          }
          ignores.add(pattern);
        }
 catch (        GoLangFileMatchException e) {
          throw new DockerClientException(String.format(""String_Node_Str"",pattern,lineNumber));
        }
      }
    }
    List<File> filesToAdd=new ArrayList<File>();
    filesToAdd.add(dockerFile);
    Map<String,String> environmentMap=new HashMap<String,String>();
    int lineNumber=0;
    for (    String cmd : dockerFileContent) {
      lineNumber++;
      if (cmd.trim().isEmpty() || cmd.startsWith(""String_Node_Str""))       continue;
      final Matcher envMatcher=ENV_PATTERN.matcher(cmd.trim());
      if (envMatcher.find()) {
        if (envMatcher.groupCount() != 2)         throw new DockerClientException(String.format(""String_Node_Str"",lineNumber));
        String variable=envMatcher.group(1).trim();
        String value=envMatcher.group(2).trim();
        environmentMap.put(variable,value);
      }
      final Matcher matcher=ADD_OR_COPY_PATTERN.matcher(cmd.trim());
      if (matcher.find()) {
        if (matcher.groupCount() != 3) {
          throw new DockerClientException(String.format(""String_Node_Str"",lineNumber));
        }
        String extractedResource=matcher.group(2);
        String resource=filterForEnvironmentVars(extractedResource,environmentMap).trim();
        if (isFileResource(resource)) {
          File src=new File(resource);
          if (!src.isAbsolute()) {
            src=new File(dockerFolder,resource).getCanonicalFile();
          }
 else {
            throw new DockerClientException(String.format(""String_Node_Str"",src,dockerFolder));
          }
          if (!src.exists()) {
            throw new DockerClientException(String.format(""String_Node_Str"",src));
          }
          if (src.isDirectory()) {
            Collection<File> files=FileUtils.listFiles(src,new GoLangMatchFileFilter(src,ignores),TrueFileFilter.INSTANCE);
            filesToAdd.addAll(files);
          }
 else           if (!GoLangFileMatch.match(ignores,CompressArchiveUtil.relativize(dockerFolder,src))) {
            filesToAdd.add(src);
          }
 else {
            throw new DockerClientException(String.format(""String_Node_Str"",src));
          }
        }
      }
    }
    return CompressArchiveUtil.archiveTARFiles(dockerFolder,filesToAdd,archiveNameWithOutExtension);
  }
 catch (  IOException ex) {
    FileUtils.deleteQuietly(dockerFolderTar);
    throw new DockerClientException(""String_Node_Str"",ex);
  }
}","protected File buildDockerFolderTar(File dockerFolder){
  Preconditions.checkArgument(dockerFolder.exists(),""String_Node_Str"",dockerFolder);
  Preconditions.checkArgument(dockerFolder.isDirectory(),""String_Node_Str"",dockerFolder);
  Preconditions.checkState(new File(dockerFolder,""String_Node_Str"").exists(),""String_Node_Str"" + dockerFolder);
  String archiveNameWithOutExtension=UUID.randomUUID().toString();
  File dockerFolderTar=null;
  try {
    File dockerFile=new File(dockerFolder,""String_Node_Str"");
    List<String> dockerFileContent=FileUtils.readLines(dockerFile);
    if (dockerFileContent.size() <= 0) {
      throw new DockerClientException(String.format(""String_Node_Str"",dockerFile));
    }
    List<String> ignores=new ArrayList<String>();
    File dockerIgnoreFile=new File(dockerFolder,""String_Node_Str"");
    if (dockerIgnoreFile.exists()) {
      int lineNumber=0;
      List<String> dockerIgnoreFileContent=FileUtils.readLines(dockerIgnoreFile);
      for (      String pattern : dockerIgnoreFileContent) {
        lineNumber++;
        pattern=pattern.trim();
        if (pattern.isEmpty()) {
          continue;
        }
        pattern=FilenameUtils.normalize(pattern);
        try {
          if (GoLangFileMatch.match(pattern,""String_Node_Str"")) {
            throw new DockerClientException(String.format(""String_Node_Str"",pattern,lineNumber));
          }
          ignores.add(pattern);
        }
 catch (        GoLangFileMatchException e) {
          throw new DockerClientException(String.format(""String_Node_Str"",pattern,lineNumber));
        }
      }
    }
    List<File> filesToAdd=new ArrayList<File>();
    filesToAdd.add(dockerFile);
    Map<String,String> environmentMap=new HashMap<String,String>();
    int lineNumber=0;
    for (    String cmd : dockerFileContent) {
      lineNumber++;
      if (cmd.trim().isEmpty() || cmd.startsWith(""String_Node_Str""))       continue;
      final Matcher envMatcher=ENV_PATTERN.matcher(cmd.trim());
      if (envMatcher.find()) {
        if (envMatcher.groupCount() != 2)         throw new DockerClientException(String.format(""String_Node_Str"",lineNumber));
        String variable=envMatcher.group(1).trim();
        String value=envMatcher.group(2).trim();
        environmentMap.put(variable,value);
      }
      final Matcher matcher=ADD_OR_COPY_PATTERN.matcher(cmd.trim());
      if (matcher.find()) {
        if (matcher.groupCount() != 3) {
          throw new DockerClientException(String.format(""String_Node_Str"",lineNumber));
        }
        String extractedResource=matcher.group(2);
        String resource=filterForEnvironmentVars(extractedResource,environmentMap).trim();
        if (isFileResource(resource)) {
          File src=new File(resource);
          if (!src.isAbsolute()) {
            src=new File(dockerFolder,resource).getCanonicalFile();
          }
 else {
            throw new DockerClientException(String.format(""String_Node_Str"",src,dockerFolder));
          }
          if (src.isDirectory()) {
            Collection<File> files=FileUtils.listFiles(src,new GoLangMatchFileFilter(src,ignores),TrueFileFilter.INSTANCE);
            filesToAdd.addAll(files);
          }
 else           if (!src.exists()) {
            filesToAdd.addAll(resolveWildcards(src,ignores));
          }
 else           if (!GoLangFileMatch.match(ignores,CompressArchiveUtil.relativize(dockerFolder,src))) {
            filesToAdd.add(src);
          }
 else {
            throw new DockerClientException(String.format(""String_Node_Str"",src));
          }
        }
      }
    }
    return CompressArchiveUtil.archiveTARFiles(dockerFolder,filesToAdd,archiveNameWithOutExtension);
  }
 catch (  IOException ex) {
    FileUtils.deleteQuietly(dockerFolderTar);
    throw new DockerClientException(""String_Node_Str"",ex);
  }
}",0.969047929998694
111466,"@Test public void testDockerBuilderAddFileInSubfolder() throws DockerException, IOException {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  dockerfileBuild(baseDir,""String_Node_Str"");
}","@Test public void testDockerBuilderAddFileInSubfolder() throws DockerException, IOException {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  String response=dockerfileBuild(baseDir);
  assertThat(response,containsString(""String_Node_Str""));
}",0.901060070671378
111467,"@Test public void testAddAndCopySubstitution() throws DockerException, IOException {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  dockerfileBuild(baseDir,""String_Node_Str"");
}","@Test public void testAddAndCopySubstitution() throws DockerException, IOException {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  String response=dockerfileBuild(baseDir);
  assertThat(response,containsString(""String_Node_Str""));
}",0.8978102189781022
111468,"@Test public void testDockerBuilderAddUrl(){
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  dockerfileBuild(baseDir,""String_Node_Str"");
}","@Test public void testDockerBuilderAddUrl(){
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  String response=dockerfileBuild(baseDir);
  assertThat(response,containsString(""String_Node_Str""));
}",0.8803418803418803
111469,"@Test public void testDockerBuilderAddFolder() throws DockerException, IOException {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  dockerfileBuild(baseDir,""String_Node_Str"");
}","@Test public void testDockerBuilderAddFolder() throws DockerException, IOException {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  String response=dockerfileBuild(baseDir);
  assertThat(response,containsString(""String_Node_Str""));
}",0.8978102189781022
111470,"@Test public void testDockerIgnore() throws DockerException, IOException {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  dockerfileBuild(baseDir,""String_Node_Str"");
}","@Test public void testDockerIgnore() throws DockerException, IOException {
  File baseDir=new File(Thread.currentThread().getContextClassLoader().getResource(""String_Node_Str"").getFile());
  String response=dockerfileBuild(baseDir);
  assertThat(response,containsString(""String_Node_Str""));
}",0.8939393939393939
111471,"private String dockerfileBuild(File baseDir,String expectedText){
  InputStream response=dockerClient.buildImageCmd(baseDir).withNoCache().exec();
  String fullLog=asString(response);
  assertThat(fullLog,containsString(""String_Node_Str""));
  String imageId=StringUtils.substringBetween(fullLog,""String_Node_Str"",""String_Node_Str"").trim();
  CreateContainerResponse container=dockerClient.createContainerCmd(imageId).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  dockerClient.waitContainerCmd(container.getId()).exec();
  InputStream logResponse=logContainer(container.getId());
  assertThat(asString(logResponse),containsString(expectedText));
  return container.getId();
}","private String dockerfileBuild(File baseDir){
  InputStream response=dockerClient.buildImageCmd(baseDir).withNoCache().exec();
  String fullLog=asString(response);
  assertThat(fullLog,containsString(""String_Node_Str""));
  String imageId=StringUtils.substringBetween(fullLog,""String_Node_Str"",""String_Node_Str"").trim();
  CreateContainerResponse container=dockerClient.createContainerCmd(imageId).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  dockerClient.waitContainerCmd(container.getId()).exec();
  InputStream logResponse=logContainer(container.getId());
  return asString(logResponse);
}",0.9370904325032764
111472,"public ExposedPorts(ExposedPort... exposedPorts){
  this.exposedPorts=exposedPorts;
}","public ExposedPorts(List<ExposedPort> exposedPorts){
  this.exposedPorts=exposedPorts.toArray(new ExposedPort[exposedPorts.size()]);
}",0.7488584474885844
111473,"public Volumes(Volume... volumes){
  this.volumes=volumes;
}","public Volumes(List<Volume> volumes){
  this.volumes=volumes.toArray(new Volume[volumes.size()]);
}",0.7169811320754716
111474,"@Override protected InputStream execute(AttachContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId()).queryParam(""String_Node_Str"",command.hasLogsEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.hasStdoutEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.hasStderrEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.hasFollowStreamEnabled() ? ""String_Node_Str"" : ""String_Node_Str"");
  LOGGER.trace(""String_Node_Str"",webResource);
  return webResource.request().accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(entity(null,MediaType.APPLICATION_JSON),Response.class).readEntity(InputStream.class);
}","@Override protected InputStream execute(AttachContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId()).queryParam(""String_Node_Str"",command.hasLogsEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.hasStdoutEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.hasStderrEnabled() ? ""String_Node_Str"" : ""String_Node_Str"").queryParam(""String_Node_Str"",command.hasFollowStreamEnabled() ? ""String_Node_Str"" : ""String_Node_Str"");
  LOGGER.trace(""String_Node_Str"",webResource);
  return webResource.request().accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(null,Response.class).readEntity(InputStream.class);
}",0.9727675744141862
111475,"@Override protected Void execute(KillContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  if (command.getSignal() != null) {
    webResource=webResource.queryParam(""String_Node_Str"",command.getSignal());
  }
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(entity(null,MediaType.APPLICATION_JSON));
  return null;
}","@Override protected Void execute(KillContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  if (command.getSignal() != null) {
    webResource=webResource.queryParam(""String_Node_Str"",command.getSignal());
  }
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null);
  return null;
}",0.9531079607415486
111476,"@Override protected Void execute(PauseContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(entity(null,MediaType.APPLICATION_JSON),Response.class);
  return null;
}","@Override protected Void execute(PauseContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId());
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null);
  return null;
}",0.9164265129682996
111477,"@Override protected InputStream execute(PullImageCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").queryParam(""String_Node_Str"",command.getTag()).queryParam(""String_Node_Str"",command.getRepository()).queryParam(""String_Node_Str"",command.getRegistry());
  LOGGER.trace(""String_Node_Str"",webResource);
  return resourceWithOptionalAuthConfig(command,webResource.request()).accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(entity(Response.class,MediaType.APPLICATION_JSON)).readEntity(InputStream.class);
}","@Override protected InputStream execute(PullImageCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").queryParam(""String_Node_Str"",command.getTag()).queryParam(""String_Node_Str"",command.getRepository()).queryParam(""String_Node_Str"",command.getRegistry());
  LOGGER.trace(""String_Node_Str"",webResource);
  return resourceWithOptionalAuthConfig(command,webResource.request()).accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(null).readEntity(InputStream.class);
}",0.9484936831875608
111478,"@Override protected InputStream execute(PushImageCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"" + name(command) + ""String_Node_Str"").queryParam(""String_Node_Str"",command.getTag());
  final String registryAuth=registryAuth(command.getAuthConfig());
  LOGGER.trace(""String_Node_Str"",webResource);
  return webResource.request().header(""String_Node_Str"",registryAuth).accept(MediaType.APPLICATION_JSON).post(entity(Response.class,MediaType.APPLICATION_JSON)).readEntity(InputStream.class);
}","@Override protected InputStream execute(PushImageCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"" + name(command) + ""String_Node_Str"").queryParam(""String_Node_Str"",command.getTag());
  final String registryAuth=registryAuth(command.getAuthConfig());
  LOGGER.trace(""String_Node_Str"",webResource);
  return webResource.request().header(""String_Node_Str"",registryAuth).accept(MediaType.APPLICATION_JSON).post(null).readEntity(InputStream.class);
}",0.9487437185929648
111479,"@Override protected Void execute(RestartContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId()).queryParam(""String_Node_Str"",String.valueOf(command.getTimeout()));
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(entity(null,MediaType.APPLICATION_JSON_TYPE));
  return null;
}","@Override protected Void execute(RestartContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId()).queryParam(""String_Node_Str"",String.valueOf(command.getTimeout()));
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null);
  return null;
}",0.9416058394160584
111480,"@Override protected Void execute(StopContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId()).queryParam(""String_Node_Str"",String.valueOf(command.getTimeout()));
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(entity(null,MediaType.APPLICATION_JSON));
  return null;
}","@Override protected Void execute(StopContainerCmd command){
  WebTarget webResource=getBaseResource().path(""String_Node_Str"").resolveTemplate(""String_Node_Str"",command.getContainerId()).queryParam(""String_Node_Str"",String.valueOf(command.getTimeout()));
  LOGGER.trace(""String_Node_Str"",webResource);
  webResource.request().accept(MediaType.APPLICATION_JSON).post(null);
  return null;
}",0.9469790382244144
111481,public StartContainerCmd withRestartPolicy(RestartPolicy restartPolicy);,"/** 
 * Set custom   {@link RestartPolicy} for the container. Defaults to{@link RestartPolicy#noRestart()}
 */
public StartContainerCmd withRestartPolicy(RestartPolicy restartPolicy);",0.5647058823529412
111482,public StartContainerCmd withLinks(Link... links);,"/** 
 * Add link to another container.
 */
public StartContainerCmd withLinks(Link... links);",0.6993006993006993
111483,public StartContainerCmd withDns(String... dns);,"/** 
 * Set custom DNS servers
 */
public StartContainerCmd withDns(String... dns);",0.732824427480916
111484,public StartContainerCmd withCapDrop(String... capDrop);,"/** 
 * Drop linux <a href=""http://man7.org/linux/man-pages/man7/capabilities.7.html"">kernel capability</a> from the container. For example: dropping capability ""CHOWN"" prevents the container from changing the owner of any files.
 */
public StartContainerCmd withCapDrop(String... capDrop);",0.3236994219653179
111485,public StartContainerCmd withDevices(Device... devices);,"/** 
 * Add host devices to the container
 */
public StartContainerCmd withDevices(Device... devices);",0.7088607594936709
111486,public StartContainerCmd withNetworkMode(String networkMode);,"/** 
 * Set the Network mode for the container <ul> <li>'bridge': creates a new network stack for the container on the docker bridge</li> <li>'none': no networking for this container</li> <li>'container:<name|id>': reuses another container network stack</li> <li>'host': use the host network stack inside the container. Note: the host mode gives the container full access to local system services such as D-bus and is therefore considered insecure.</li> </ul>
 */
public StartContainerCmd withNetworkMode(String networkMode);",0.2081911262798634
111487,public StartContainerCmd withCapAdd(String... capAdd);,"/** 
 * Add linux <a href=""http://man7.org/linux/man-pages/man7/capabilities.7.html"">kernel capability</a> to the container. For example: adding capability ""MKNOD"" allows the container to create special files using the 'mknod' command.
 */
public StartContainerCmd withCapAdd(String... capAdd);",0.3103448275862069
111488,public StartContainerCmd withDnsSearch(String... dnsSearch);,"/** 
 * Set custom DNS search domains
 */
public StartContainerCmd withDnsSearch(String... dnsSearch);",0.7407407407407407
111489,"/** 
 * @throws DockerException If something gets wrong
 */
@Override public RES_T exec() throws DockerException {
  LOGGER.debug(""String_Node_Str"",this);
  try {
    return execution.exec((CMD_T)this);
  }
 catch (  ClientErrorException exception) {
    int status=exception.getResponse().getStatus();
switch (status) {
case 204:
      return null;
case 304:
    throw new NotModifiedException(exception);
case 400:
  throw new BadRequestException(exception);
case 404:
throw new NotFoundException(exception);
case 406:
throw new NotAcceptableException(exception);
case 409:
throw new ConflictException(exception);
case 500:
throw new InternalServerErrorException(exception);
default :
throw toDockerException(exception);
}
}
}","@Override public RES_T exec() throws DockerException {
  LOGGER.debug(""String_Node_Str"",this);
  return execution.exec((CMD_T)this);
}",0.3109048723897912
111490,"@Override public void init(DockerClientConfig dockerClientConfig){
  Preconditions.checkNotNull(dockerClientConfig,""String_Node_Str"");
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.register(JsonClientFilter.class);
  clientConfig.register(JacksonJsonProvider.class);
  if (dockerClientConfig.isLoggingFilterEnabled()) {
    clientConfig.register(new SelectiveLoggingFilter(LOGGER,true));
  }
  if (dockerClientConfig.getReadTimeout() != null) {
    int readTimeout=dockerClientConfig.getReadTimeout();
    clientConfig.property(ClientProperties.READ_TIMEOUT,readTimeout);
  }
  client=ClientBuilder.newClient(clientConfig);
  WebTarget webResource=client.target(dockerClientConfig.getUri());
  if (dockerClientConfig.getVersion() != null) {
    baseResource=webResource.path(""String_Node_Str"" + dockerClientConfig.getVersion());
  }
 else {
    baseResource=webResource;
  }
}","@Override public void init(DockerClientConfig dockerClientConfig){
  Preconditions.checkNotNull(dockerClientConfig,""String_Node_Str"");
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.register(ResponseStatusExceptionFilter.class);
  clientConfig.register(JsonClientFilter.class);
  clientConfig.register(JacksonJsonProvider.class);
  if (dockerClientConfig.isLoggingFilterEnabled()) {
    clientConfig.register(new SelectiveLoggingFilter(LOGGER,true));
  }
  if (dockerClientConfig.getReadTimeout() != null) {
    int readTimeout=dockerClientConfig.getReadTimeout();
    clientConfig.property(ClientProperties.READ_TIMEOUT,readTimeout);
  }
  client=ClientBuilder.newClient(clientConfig);
  WebTarget webResource=client.target(dockerClientConfig.getUri());
  if (dockerClientConfig.getVersion() != null) {
    baseResource=webResource.path(""String_Node_Str"" + dockerClientConfig.getVersion());
  }
 else {
    baseResource=webResource;
  }
}",0.9664502164502164
111491,"public String getDnsSearch(){
  return dnsSearch;
}","public String[] getDnsSearch(){
  return dnsSearch;
}",0.9807692307692308
111492,"public DockerClient(Config config,CommandFactory cmdFactory){
  this.cmdFactory=cmdFactory;
  HttpClient httpClient=getPoolingHttpClient(config);
  ClientConfig clientConfig=new DefaultClientConfig();
  client=new ApacheHttpClient4(new ApacheHttpClient4Handler(httpClient,null,false),clientConfig);
  client.setReadTimeout(config.getReadTimeout());
  client.addFilter(new JsonClientFilter());
  if (config.isLoggingFilterEnabled())   client.addFilter(new SelectiveLoggingFilter());
  baseResource=client.resource(config.getUri() + ""String_Node_Str"" + config.getVersion());
}","public DockerClient(Config config,CommandFactory cmdFactory){
  this.cmdFactory=cmdFactory;
  HttpClient httpClient=getPoolingHttpClient(config);
  ClientConfig clientConfig=new DefaultClientConfig();
  client=new ApacheHttpClient4(new ApacheHttpClient4Handler(httpClient,null,false),clientConfig);
  if (config.getReadTimeout() != null) {
    client.setReadTimeout(config.getReadTimeout());
  }
  client.addFilter(new JsonClientFilter());
  if (config.isLoggingFilterEnabled())   client.addFilter(new SelectiveLoggingFilter());
  WebResource webResource=client.resource(config.getUri());
  if (config.getVersion() != null) {
    baseResource=webResource.path(""String_Node_Str"" + config.getVersion());
  }
 else {
    baseResource=webResource;
  }
}",0.8299319727891157
111493,"@Test public void info() throws DockerException {
  Info dockerInfo=dockerClient.infoCmd().exec();
  LOG.info(dockerInfo.toString());
  assertTrue(dockerInfo.toString().contains(""String_Node_Str""));
  assertTrue(dockerInfo.toString().contains(""String_Node_Str""));
  assertTrue(dockerInfo.toString().contains(""String_Node_Str""));
  assertTrue(dockerInfo.getContainers() > 0);
  assertTrue(dockerInfo.getImages() > 0);
  assertTrue(dockerInfo.getNFd() > 0);
  assertTrue(dockerInfo.getNGoroutines() > 0);
  assertTrue(dockerInfo.isMemoryLimit());
}","@Test public void info() throws DockerException {
  CreateContainerResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withName(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",container);
  assertThat(container.getId(),not(isEmptyOrNullString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  tmpContainers.add(container.getId());
  Info dockerInfo=dockerClient.infoCmd().exec();
  LOG.info(dockerInfo.toString());
  assertTrue(dockerInfo.toString().contains(""String_Node_Str""));
  assertTrue(dockerInfo.toString().contains(""String_Node_Str""));
  assertTrue(dockerInfo.toString().contains(""String_Node_Str""));
  assertTrue(dockerInfo.getContainers() > 0);
  assertTrue(dockerInfo.getImages() > 0);
  assertTrue(dockerInfo.getNFd() > 0);
  assertTrue(dockerInfo.getNGoroutines() > 0);
  assertTrue(dockerInfo.isMemoryLimit());
}",0.7214236824093087
111494,"protected ClientResponse impl() throws DockerException {
  MultivaluedMap<String,String> params=new MultivaluedMapImpl();
  params.add(""String_Node_Str"",logs ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",timestamps ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",stdout ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",stderr ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",followStream ? ""String_Node_Str"" : ""String_Node_Str"");
  WebResource webResource=baseResource.path(String.format(""String_Node_Str"",containerId)).queryParams(params);
  try {
    LOGGER.trace(""String_Node_Str"",webResource);
    return webResource.accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(ClientResponse.class,params);
  }
 catch (  UniformInterfaceException exception) {
    if (exception.getResponse().getStatus() == 400) {
      throw new DockerException(""String_Node_Str"");
    }
 else     if (exception.getResponse().getStatus() == 404) {
      throw new NotFoundException(String.format(""String_Node_Str"",containerId));
    }
 else     if (exception.getResponse().getStatus() == 500) {
      throw new DockerException(""String_Node_Str"",exception);
    }
 else {
      throw new DockerException(exception);
    }
  }
}","protected ClientResponse impl() throws DockerException {
  MultivaluedMap<String,String> params=new MultivaluedMapImpl();
  params.add(""String_Node_Str"",logs ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",timestamps ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",stdout ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",stderr ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",followStream ? ""String_Node_Str"" : ""String_Node_Str"");
  WebResource webResource=baseResource.path(String.format(""String_Node_Str"",containerId)).queryParams(params);
  try {
    LOGGER.trace(""String_Node_Str"",webResource);
    return webResource.accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(ClientResponse.class);
  }
 catch (  UniformInterfaceException exception) {
    if (exception.getResponse().getStatus() == 400) {
      throw new DockerException(""String_Node_Str"");
    }
 else     if (exception.getResponse().getStatus() == 404) {
      throw new NotFoundException(String.format(""String_Node_Str"",containerId));
    }
 else     if (exception.getResponse().getStatus() == 500) {
      throw new DockerException(""String_Node_Str"",exception);
    }
 else {
      throw new DockerException(exception);
    }
  }
}",0.9973149213655544
111495,"protected String impl() throws DockerException {
  checkCommitConfig(commitConfig);
  MultivaluedMap<String,String> params=new MultivaluedMapImpl();
  params.add(""String_Node_Str"",containerId);
  params.add(""String_Node_Str"",repository);
  params.add(""String_Node_Str"",tag);
  params.add(""String_Node_Str"",message);
  params.add(""String_Node_Str"",author);
  params.add(""String_Node_Str"",pause ? ""String_Node_Str"" : ""String_Node_Str"");
  WebResource webResource=baseResource.path(""String_Node_Str"").queryParams(params);
  try {
    LOGGER.trace(""String_Node_Str"",webResource);
    ObjectNode ObjectNode=webResource.accept(""String_Node_Str"").post(ObjectNode.class,params);
    return ObjectNode.get(""String_Node_Str"").asText();
  }
 catch (  UniformInterfaceException exception) {
    if (exception.getResponse().getStatus() == 404) {
      throw new NotFoundException(String.format(""String_Node_Str"",containerId));
    }
 else     if (exception.getResponse().getStatus() == 500) {
      throw new DockerException(""String_Node_Str"",exception);
    }
 else {
      throw new DockerException(exception);
    }
  }
catch (  Exception e) {
    throw new DockerException(e);
  }
}","protected String impl() throws DockerException {
  checkCommitConfig(commitConfig);
  MultivaluedMap<String,String> params=new MultivaluedMapImpl();
  params.add(""String_Node_Str"",containerId);
  params.add(""String_Node_Str"",repository);
  params.add(""String_Node_Str"",tag);
  params.add(""String_Node_Str"",message);
  params.add(""String_Node_Str"",author);
  params.add(""String_Node_Str"",pause ? ""String_Node_Str"" : ""String_Node_Str"");
  WebResource webResource=baseResource.path(""String_Node_Str"").queryParams(params);
  try {
    LOGGER.trace(""String_Node_Str"",webResource);
    ObjectNode objectNode=webResource.queryParams(params).accept(""String_Node_Str"").type(MediaType.APPLICATION_JSON).post(ObjectNode.class,commitConfig);
    return objectNode.get(""String_Node_Str"").asText();
  }
 catch (  UniformInterfaceException exception) {
    if (exception.getResponse().getStatus() == 404) {
      throw new NotFoundException(String.format(""String_Node_Str"",containerId));
    }
 else     if (exception.getResponse().getStatus() == 500) {
      throw new DockerException(""String_Node_Str"",exception);
    }
 else {
      throw new DockerException(exception);
    }
  }
catch (  Exception e) {
    throw new DockerException(e);
  }
}",0.9130977130977131
111496,"@Test public void commit() throws DockerException {
  ContainerCreateResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(new String[]{""String_Node_Str"",""String_Node_Str""}).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  tmpContainers.add(container.getId());
  LOG.info(""String_Node_Str"",container.toString());
  String imageId=dockerClient.commitCmd(container.getId()).exec();
  tmpImgs.add(imageId);
  ImageInspectResponse imageInspectResponse=dockerClient.inspectImageCmd(imageId).exec();
  LOG.info(""String_Node_Str"",imageInspectResponse.toString());
  assertThat(imageInspectResponse,hasField(""String_Node_Str"",startsWith(container.getId())));
  assertThat(imageInspectResponse.getContainerConfig().getImage(),equalTo(""String_Node_Str""));
  ImageInspectResponse busyboxImg=dockerClient.inspectImageCmd(""String_Node_Str"").exec();
  assertThat(imageInspectResponse.getParent(),equalTo(busyboxImg.getId()));
}","@Test public void commit() throws DockerException {
  ContainerCreateResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"",""String_Node_Str"").exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  dockerClient.startContainerCmd(container.getId()).exec();
  tmpContainers.add(container.getId());
  LOG.info(""String_Node_Str"",container.toString());
  String imageId=dockerClient.commitCmd(container.getId()).exec();
  tmpImgs.add(imageId);
  ImageInspectResponse imageInspectResponse=dockerClient.inspectImageCmd(imageId).exec();
  LOG.info(""String_Node_Str"",imageInspectResponse.toString());
  assertThat(imageInspectResponse,hasField(""String_Node_Str"",startsWith(container.getId())));
  assertThat(imageInspectResponse.getContainerConfig().getImage(),equalTo(""String_Node_Str""));
  ImageInspectResponse busyboxImg=dockerClient.inspectImageCmd(""String_Node_Str"").exec();
  assertThat(imageInspectResponse.getParent(),equalTo(busyboxImg.getId()));
}",0.9933774834437086
111497,"protected Void impl() throws DockerException {
  WebResource webResource=baseResource.path(String.format(""String_Node_Str"",containerId));
  try {
    LOGGER.trace(""String_Node_Str"",webResource);
    Builder builder=webResource.accept(MediaType.TEXT_PLAIN);
    if (startContainerConfig != null) {
      builder.type(MediaType.APPLICATION_JSON).post(startContainerConfig);
    }
 else {
      builder.post((StartContainerConfig)null);
    }
  }
 catch (  UniformInterfaceException exception) {
    if (exception.getResponse().getStatus() == 404) {
      throw new NotFoundException(String.format(""String_Node_Str"",containerId));
    }
 else     if (exception.getResponse().getStatus() == 304) {
      LOGGER.warn(""String_Node_Str"",containerId);
    }
 else     if (exception.getResponse().getStatus() == 204) {
      LOGGER.trace(""String_Node_Str"",containerId);
    }
 else     if (exception.getResponse().getStatus() == 500) {
      LOGGER.error(""String_Node_Str"",exception);
      throw new DockerException(""String_Node_Str"",exception);
    }
 else {
      throw new DockerException(exception);
    }
  }
  return null;
}","protected Void impl() throws DockerException {
  WebResource webResource=baseResource.path(String.format(""String_Node_Str"",containerId));
  try {
    LOGGER.trace(""String_Node_Str"",webResource);
    Builder builder=webResource.accept(MediaType.APPLICATION_JSON);
    if (startContainerConfig != null) {
      builder.type(MediaType.APPLICATION_JSON).post(startContainerConfig);
    }
 else {
      builder.post((StartContainerConfig)null);
    }
  }
 catch (  UniformInterfaceException exception) {
    if (exception.getResponse().getStatus() == 404) {
      throw new NotFoundException(String.format(""String_Node_Str"",containerId));
    }
 else     if (exception.getResponse().getStatus() == 304) {
      LOGGER.warn(""String_Node_Str"",containerId);
    }
 else     if (exception.getResponse().getStatus() == 204) {
      LOGGER.trace(""String_Node_Str"",containerId);
    }
 else     if (exception.getResponse().getStatus() == 500) {
      LOGGER.error(""String_Node_Str"",exception);
      throw new DockerException(""String_Node_Str"",exception);
    }
 else {
      throw new DockerException(exception);
    }
  }
  return null;
}",0.9244444444444444
111498,"@Test public void startContainerWithPortBindings() throws DockerException {
  ExposedPort tcp22=ExposedPort.tcp(22);
  ExposedPort tcp23=ExposedPort.tcp(23);
  ContainerCreateResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"").withExposedPorts(tcp22,tcp23).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  ContainerInspectResponse containerInspectResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  Ports portBindings=new Ports();
  portBindings.bind(tcp22,Ports.Binding(11022));
  portBindings.bind(tcp23,Ports.Binding(11023));
  dockerClient.startContainerCmd(container.getId()).withPortBindings(portBindings).exec();
  containerInspectResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertThat(containerInspectResponse.getState().isRunning(),is(true));
  assertThat(Arrays.asList(containerInspectResponse.getConfig().getExposedPorts()),contains(tcp22,tcp23));
  assertThat(containerInspectResponse.getHostConfig().getPortBindings().getBindings().get(tcp22),is(equalTo(Ports.Binding(""String_Node_Str"",11022))));
  assertThat(containerInspectResponse.getHostConfig().getPortBindings().getBindings().get(tcp23),is(equalTo(Ports.Binding(""String_Node_Str"",11023))));
  tmpContainers.add(container.getId());
}","@Test public void startContainerWithPortBindings() throws DockerException {
  ExposedPort tcp22=ExposedPort.tcp(22);
  ExposedPort tcp23=ExposedPort.tcp(23);
  ContainerCreateResponse container=dockerClient.createContainerCmd(""String_Node_Str"").withCmd(""String_Node_Str"").withExposedPorts(tcp22,tcp23).exec();
  LOG.info(""String_Node_Str"",container.toString());
  assertThat(container.getId(),not(isEmptyString()));
  ContainerInspectResponse containerInspectResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  Ports portBindings=new Ports();
  portBindings.bind(tcp22,Ports.Binding(11022));
  portBindings.bind(tcp23,Ports.Binding(11023));
  dockerClient.startContainerCmd(container.getId()).withPortBindings(portBindings).exec();
  containerInspectResponse=dockerClient.inspectContainerCmd(container.getId()).exec();
  assertThat(Arrays.asList(containerInspectResponse.getConfig().getExposedPorts()),contains(tcp22,tcp23));
  assertThat(containerInspectResponse.getHostConfig().getPortBindings().getBindings().get(tcp22),is(equalTo(Ports.Binding(""String_Node_Str"",11022))));
  assertThat(containerInspectResponse.getHostConfig().getPortBindings().getBindings().get(tcp23),is(equalTo(Ports.Binding(""String_Node_Str"",11023))));
  tmpContainers.add(container.getId());
}",0.972809667673716
111499,"protected Void impl() throws DockerException {
  WebResource webResource=baseResource.path(String.format(""String_Node_Str"",containerId));
  try {
    LOGGER.trace(""String_Node_Str"",webResource);
    Builder builder=webResource.accept(MediaType.TEXT_PLAIN);
    if (startContainerConfig != null) {
      builder.type(MediaType.APPLICATION_JSON).post(startContainerConfig);
    }
 else {
      builder.post((StartContainerConfig)null);
    }
  }
 catch (  UniformInterfaceException exception) {
    if (exception.getResponse().getStatus() == 404) {
      throw new NotFoundException(String.format(""String_Node_Str"",containerId));
    }
 else     if (exception.getResponse().getStatus() == 204) {
      LOGGER.trace(""String_Node_Str"",containerId);
    }
 else     if (exception.getResponse().getStatus() == 500) {
      LOGGER.error(""String_Node_Str"",exception);
      throw new DockerException(""String_Node_Str"",exception);
    }
 else {
      throw new DockerException(exception);
    }
  }
  return null;
}","protected Void impl() throws DockerException {
  WebResource webResource=baseResource.path(String.format(""String_Node_Str"",containerId));
  try {
    LOGGER.trace(""String_Node_Str"",webResource);
    Builder builder=webResource.accept(MediaType.APPLICATION_JSON);
    if (startContainerConfig != null) {
      builder.type(MediaType.APPLICATION_JSON).post(startContainerConfig);
    }
 else {
      builder.post((StartContainerConfig)null);
    }
  }
 catch (  UniformInterfaceException exception) {
    if (exception.getResponse().getStatus() == 404) {
      throw new NotFoundException(String.format(""String_Node_Str"",containerId));
    }
 else     if (exception.getResponse().getStatus() == 204) {
      LOGGER.trace(""String_Node_Str"",containerId);
    }
 else     if (exception.getResponse().getStatus() == 500) {
      LOGGER.error(""String_Node_Str"",exception);
      throw new DockerException(""String_Node_Str"",exception);
    }
 else {
      throw new DockerException(exception);
    }
  }
  return null;
}",0.9157581764122894
111500,"public ClientResponse handle(ClientRequest cr){
  ClientResponse resp=getNext().handle(cr);
  String respContentType=resp.getHeaders().getFirst(""String_Node_Str"");
  if (respContentType.startsWith(""String_Node_Str"")) {
    String newContentType=""String_Node_Str"" + respContentType.substring(10);
    resp.getHeaders().putSingle(""String_Node_Str"",newContentType);
  }
  return resp;
}","public ClientResponse handle(ClientRequest cr){
  ClientResponse resp=getNext().handle(cr);
  String respContentType=resp.getHeaders().getFirst(""String_Node_Str"");
  if (respContentType != null && respContentType.startsWith(""String_Node_Str"")) {
    String newContentType=""String_Node_Str"" + respContentType.substring(10);
    resp.getHeaders().putSingle(""String_Node_Str"",newContentType);
  }
  return resp;
}",0.9659520807061792
111501,"protected ClientResponse impl() throws DockerException {
  MultivaluedMap<String,String> params=new MultivaluedMapImpl();
  params.add(""String_Node_Str"",""String_Node_Str"");
  params.add(""String_Node_Str"",timestamps ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",stdout ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",stderr ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",followStream ? ""String_Node_Str"" : ""String_Node_Str"");
  WebResource webResource=baseResource.path(String.format(""String_Node_Str"",containerId)).queryParams(params);
  try {
    LOGGER.trace(""String_Node_Str"",webResource);
    return webResource.accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(ClientResponse.class,params);
  }
 catch (  UniformInterfaceException exception) {
    if (exception.getResponse().getStatus() == 400) {
      throw new DockerException(""String_Node_Str"");
    }
 else     if (exception.getResponse().getStatus() == 404) {
      throw new NotFoundException(String.format(""String_Node_Str"",containerId));
    }
 else     if (exception.getResponse().getStatus() == 500) {
      throw new DockerException(""String_Node_Str"",exception);
    }
 else {
      throw new DockerException(exception);
    }
  }
}","protected ClientResponse impl() throws DockerException {
  MultivaluedMap<String,String> params=new MultivaluedMapImpl();
  params.add(""String_Node_Str"",timestamps ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",stdout ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",stderr ? ""String_Node_Str"" : ""String_Node_Str"");
  params.add(""String_Node_Str"",followStream ? ""String_Node_Str"" : ""String_Node_Str"");
  WebResource webResource=baseResource.path(String.format(""String_Node_Str"",containerId)).queryParams(params);
  try {
    LOGGER.trace(""String_Node_Str"",webResource);
    return webResource.accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).get(ClientResponse.class);
  }
 catch (  UniformInterfaceException exception) {
    if (exception.getResponse().getStatus() == 400) {
      throw new DockerException(""String_Node_Str"");
    }
 else     if (exception.getResponse().getStatus() == 404) {
      throw new NotFoundException(String.format(""String_Node_Str"",containerId));
    }
 else     if (exception.getResponse().getStatus() == 500) {
      throw new DockerException(""String_Node_Str"",exception);
    }
 else {
      throw new DockerException(exception);
    }
  }
}",0.974810075969612
111502,"public Ports getPorts(){
  return ports;
}","public Port[] getPorts(){
  return ports;
}",0.9647058823529412
111503,"public void setPorts(Ports ports){
  this.ports=ports;
}","public void setPorts(Port[] ports){
  this.ports=ports;
}",0.9734513274336284
111504,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + id + '\''+ ""String_Node_Str""+ command+ '\''+ ""String_Node_Str""+ image+ '\''+ ""String_Node_Str""+ created+ ""String_Node_Str""+ status+ '\''+ ""String_Node_Str""+ ports+ ""String_Node_Str""+ size+ ""String_Node_Str""+ sizeRootFs+ ""String_Node_Str""+ Arrays.toString(names)+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + ip + '\''+ ""String_Node_Str""+ privatePort+ '\''+ ""String_Node_Str""+ publicPort+ '\''+ ""String_Node_Str""+ type+ '\''+ '}';
}",0.3416370106761566
111505,"@Test public void removeContainer() throws DockerClientException {
  ContainerConfig containerConfig=new ContainerConfig.Builder(""String_Node_Str"").cmd(new String[]{""String_Node_Str""}).build();
  ContainerCreateResponse container=dockerClient.createContainer(containerConfig);
  dockerClient.startContainer(container.id);
  dockerClient.waitContainer(container.id);
  tmpContainers.add(container.id);
  LOG.info(""String_Node_Str"" + container.id);
  dockerClient.removeContainer(container.id);
  List containers2=dockerClient.listContainers(true);
  assertThat(containers2,not(hasItem(hasField(""String_Node_Str"",startsWith(container.id)))));
}","@Test public void removeContainer() throws DockerClientException {
  ContainerConfig containerConfig=new ContainerConfig.Builder(""String_Node_Str"").cmd(new String[]{""String_Node_Str""}).build();
  ContainerCreateResponse container=dockerClient.createContainer(containerConfig);
  dockerClient.startContainer(container.id);
  dockerClient.waitContainer(container.id);
  tmpContainers.add(container.id);
  LOG.info(""String_Node_Str"" + container.id);
  dockerClient.removeContainer(container.id);
  List containers2=dockerClient.listContainers(true);
  Matcher matcher=not(hasItem(hasField(""String_Node_Str"",startsWith(container.id))));
  assertThat(containers2,matcher);
}",0.8802440884820748
111506,"@Test public void testListContainers() throws DockerClientException {
  List<Container> containers=dockerClient.listContainers(true);
  assertThat(containers,notNullValue());
  LOG.info(""String_Node_Str"" + containers);
  int size=containers.size();
  ContainerConfig containerConfig=new ContainerConfig.Builder(""String_Node_Str"").cmd(new String[]{""String_Node_Str""}).build();
  ContainerCreateResponse container1=dockerClient.createContainer(containerConfig);
  assertThat(container1.id,not(isEmptyString()));
  dockerClient.startContainer(container1.id);
  tmpContainers.add(container1.id);
  List containers2=dockerClient.listContainers(true);
  assertThat(size + 1,is(equalTo(containers2.size())));
  assertThat(containers2,hasItem(hasField(""String_Node_Str"",startsWith(container1.id))));
  List<Container> filteredContainers=filter(hasField(""String_Node_Str"",startsWith(container1.id)),containers2);
  assertThat(filteredContainers.size(),is(equalTo(1)));
  Container container2=filteredContainers.get(0);
  assertThat(container2.command,not(isEmptyString()));
  assertThat(container2.image,equalTo(""String_Node_Str""));
}","@Test public void testListContainers() throws DockerClientException {
  List<Container> containers=dockerClient.listContainers(true);
  assertThat(containers,notNullValue());
  LOG.info(""String_Node_Str"" + containers);
  int size=containers.size();
  ContainerConfig containerConfig=new ContainerConfig.Builder(""String_Node_Str"").cmd(new String[]{""String_Node_Str""}).build();
  ContainerCreateResponse container1=dockerClient.createContainer(containerConfig);
  assertThat(container1.id,not(isEmptyString()));
  dockerClient.startContainer(container1.id);
  tmpContainers.add(container1.id);
  List containers2=dockerClient.listContainers(true);
  assertThat(size + 1,is(equalTo(containers2.size())));
  Matcher matcher=hasItem(hasField(""String_Node_Str"",startsWith(container1.id)));
  assertThat(containers2,matcher);
  List<Container> filteredContainers=filter(hasField(""String_Node_Str"",startsWith(container1.id)),containers2);
  assertThat(filteredContainers.size(),is(equalTo(1)));
  Container container2=filteredContainers.get(0);
  assertThat(container2.command,not(isEmptyString()));
  assertThat(container2.image,equalTo(""String_Node_Str""));
}",0.9345630215195432
111507,"@Test public void testDockerSearch() throws DockerClientException {
  List dockerSearch=dockerClient.search(""String_Node_Str"");
  LOG.info(""String_Node_Str"" + dockerSearch.toString());
  assertThat(dockerSearch,hasItem(hasField(""String_Node_Str"",equalTo(""String_Node_Str""))));
  assertThat(filter(hasField(""String_Node_Str"",is(""String_Node_Str"")),dockerSearch).size(),equalTo(1));
}","@Test public void testDockerSearch() throws DockerClientException {
  List<SearchItem> dockerSearch=dockerClient.search(""String_Node_Str"");
  LOG.info(""String_Node_Str"" + dockerSearch.toString());
  Matcher matcher=hasItem(hasField(""String_Node_Str"",equalTo(""String_Node_Str"")));
  assertThat(dockerSearch,matcher);
  assertThat(filter(hasField(""String_Node_Str"",is(""String_Node_Str"")),dockerSearch).size(),equalTo(1));
}",0.8916562889165629
111508,"@Test public void testRemoveImage() throws DockerClientException {
  ContainerConfig containerConfig=new ContainerConfig.Builder(""String_Node_Str"").cmd(new String[]{""String_Node_Str"",""String_Node_Str""}).build();
  ContainerCreateResponse container=dockerClient.createContainer(containerConfig);
  LOG.info(""String_Node_Str"" + container.toString());
  assertThat(container.id,not(isEmptyString()));
  dockerClient.startContainer(container.id);
  tmpContainers.add(container.id);
  LOG.info(""String_Node_Str"" + container.toString());
  String imageId=dockerClient.commit(new CommitConfig.Builder(container.id).build());
  tmpImgs.add(imageId);
  LOG.info(""String_Node_Str"" + imageId);
  dockerClient.removeImage(imageId);
  List containers=dockerClient.listContainers(true);
  assertThat(containers,not(hasItem(hasField(""String_Node_Str"",startsWith(imageId)))));
}","@Test public void testRemoveImage() throws DockerClientException {
  ContainerConfig containerConfig=new ContainerConfig.Builder(""String_Node_Str"").cmd(new String[]{""String_Node_Str"",""String_Node_Str""}).build();
  ContainerCreateResponse container=dockerClient.createContainer(containerConfig);
  LOG.info(""String_Node_Str"" + container.toString());
  assertThat(container.id,not(isEmptyString()));
  dockerClient.startContainer(container.id);
  tmpContainers.add(container.id);
  LOG.info(""String_Node_Str"" + container.toString());
  String imageId=dockerClient.commit(new CommitConfig.Builder(container.id).build());
  tmpImgs.add(imageId);
  LOG.info(""String_Node_Str"" + imageId);
  dockerClient.removeImage(imageId);
  List containers=dockerClient.listContainers(true);
  Matcher matcher=not(hasItem(hasField(""String_Node_Str"",startsWith(imageId))));
  assertThat(containers,matcher);
}",0.9160479725870933
111509,"public VncViewer(String[] argv){
  SecurityClient.setDefaults();
  getTimestamp();
  System.err.format(""String_Node_Str"");
  System.err.format(aboutText,version,build,buildDate,buildTime);
  System.err.format(""String_Node_Str"");
  Configuration.enableViewerParams();
  try {
    defaultServerName=loadViewerParameters(null);
  }
 catch (  com.tigervnc.rfb.Exception e) {
    defaultServerName=""String_Node_Str"";
    vlog.info(e.getMessage());
  }
  for (int i=0; i < argv.length; i++) {
    if (argv[i].length() == 0)     continue;
    if (argv[i].equalsIgnoreCase(""String_Node_Str"")) {
      if (++i >= argv.length)       usage();
      defaultServerName=loadViewerParameters(argv[i]);
      continue;
    }
    if (argv[i].equalsIgnoreCase(""String_Node_Str"")) {
      if (++i >= argv.length)       usage();
      System.err.println(""String_Node_Str"" + argv[i]);
      LogWriter.setLogParams(argv[i]);
      continue;
    }
    if (Configuration.setParam(argv[i]))     continue;
    if (argv[i].charAt(0) == '-') {
      if (i + 1 < argv.length) {
        if (Configuration.setParam(argv[i].substring(1),argv[i + 1])) {
          i++;
          continue;
        }
      }
      usage();
    }
    vncServerName.put(argv[i].toCharArray()).flip();
  }
}","public VncViewer(String[] argv){
  SecurityClient.setDefaults();
  getTimestamp();
  System.err.format(""String_Node_Str"");
  System.err.format(aboutText,version,build,buildDate,buildTime);
  System.err.format(""String_Node_Str"");
  Configuration.enableViewerParams();
  try {
    defaultServerName=loadViewerParameters(null);
  }
 catch (  com.tigervnc.rfb.Exception e) {
    defaultServerName=""String_Node_Str"";
    vlog.info(e.getMessage());
  }
  int i=0;
  for (; i < argv.length; i++) {
    if (argv[i].length() == 0)     continue;
    if (argv[i].equalsIgnoreCase(""String_Node_Str"")) {
      if (++i >= argv.length)       usage();
      defaultServerName=loadViewerParameters(argv[i]);
      continue;
    }
    if (argv[i].equalsIgnoreCase(""String_Node_Str"")) {
      if (++i >= argv.length)       usage();
      System.err.println(""String_Node_Str"" + argv[i]);
      LogWriter.setLogParams(argv[i]);
      continue;
    }
    if (argv[i].charAt(0) == '-') {
      if (i + 1 < argv.length) {
        if (Configuration.setParam(argv[i].substring(1),argv[i + 1])) {
          i++;
          continue;
        }
      }
      if (Configuration.setParam(argv[i]))       continue;
      usage();
    }
    vncServerName.put(argv[i].toCharArray()).flip();
  }
}",0.949085123309467
111510,"private void storeOptions(){
  autoSelect.setParam(autoselectCheckbox.isSelected());
  if (tightButton.isSelected())   preferredEncoding.setParam(Encodings.encodingName(Encodings.encodingTight));
 else   if (zrleButton.isSelected())   preferredEncoding.setParam(Encodings.encodingName(Encodings.encodingZRLE));
 else   if (hextileButton.isSelected())   preferredEncoding.setParam(Encodings.encodingName(Encodings.encodingHextile));
 else   if (rawButton.isSelected())   preferredEncoding.setParam(Encodings.encodingName(Encodings.encodingRaw));
  fullColor.setParam(fullcolorButton.isSelected());
  if (verylowcolorButton.isSelected())   lowColorLevel.setParam(0);
 else   if (lowcolorButton.isSelected())   lowColorLevel.setParam(1);
 else   if (mediumcolorButton.isSelected())   lowColorLevel.setParam(2);
  customCompressLevel.setParam(compressionCheckbox.isSelected());
  noJpeg.setParam(!jpegCheckbox.isSelected());
  compressLevel.setParam((Integer)compressionInput.getSelectedItem());
  qualityLevel.setParam((Integer)jpegInput.getSelectedItem());
  Security security=new Security();
  if (encNoneCheckbox.isSelected()) {
    if (authNoneCheckbox.isSelected())     security.EnableSecType(Security.secTypeNone);
    if (authVncCheckbox.isSelected())     security.EnableSecType(Security.secTypeVncAuth);
    if (authPlainCheckbox.isSelected())     security.EnableSecType(Security.secTypePlain);
    if (authIdentCheckbox.isSelected())     security.EnableSecType(Security.secTypeIdent);
  }
  if (encTLSCheckbox.isSelected()) {
    if (authNoneCheckbox.isSelected())     security.EnableSecType(Security.secTypeTLSNone);
    if (authVncCheckbox.isSelected())     security.EnableSecType(Security.secTypeTLSVnc);
    if (authPlainCheckbox.isSelected())     security.EnableSecType(Security.secTypeTLSPlain);
    if (authIdentCheckbox.isSelected())     security.EnableSecType(Security.secTypeTLSIdent);
  }
  if (encX509Checkbox.isSelected()) {
    if (authNoneCheckbox.isSelected())     security.EnableSecType(Security.secTypeX509None);
    if (authVncCheckbox.isSelected())     security.EnableSecType(Security.secTypeX509Vnc);
    if (authPlainCheckbox.isSelected())     security.EnableSecType(Security.secTypeX509Plain);
    if (authIdentCheckbox.isSelected())     security.EnableSecType(Security.secTypeX509Ident);
  }
  if (authIdentCheckbox.isSelected() || authPlainCheckbox.isSelected()) {
    sendLocalUsername.setParam(sendLocalUsernameCheckbox.isSelected());
  }
  SecurityClient.secTypes.setParam(security.ToString());
  File caFile=new File(caInput.getText());
  if (caFile.exists() && caFile.canRead())   CSecurityTLS.X509CA.setParam(caFile.getAbsolutePath());
  File crlFile=new File(crlInput.getText());
  if (crlFile.exists() && crlFile.canRead())   CSecurityTLS.X509CRL.setParam(crlFile.getAbsolutePath());
  viewOnly.setParam(viewOnlyCheckbox.isSelected());
  acceptClipboard.setParam(acceptClipboardCheckbox.isSelected());
  sendClipboard.setParam(sendClipboardCheckbox.isSelected());
  String menuKeyStr=MenuKey.getMenuKeySymbols()[menuKeyChoice.getSelectedIndex()].name;
  menuKey.setParam(menuKeyStr);
  if (desktopSizeCheckbox.isSelected() && !desktopWidthInput.getText().isEmpty() && !desktopHeightInput.getText().isEmpty()) {
    String width=desktopWidthInput.getText();
    String height=desktopHeightInput.getText();
    desktopSize.setParam(width.concat(""String_Node_Str"").concat(height));
  }
 else {
    desktopSize.setParam(""String_Node_Str"");
  }
  remoteResize.setParam(remoteResizeButton.isSelected());
  fullScreen.setParam(fullScreenCheckbox.isSelected());
  fullScreenAllMonitors.setParam(fullScreenAllMonitorsCheckbox.isSelected());
  String scaleStr=((String)scalingFactorInput.getSelectedItem()).replace(""String_Node_Str"",""String_Node_Str"");
  scaleStr.replace(""String_Node_Str"",""String_Node_Str"");
  scalingFactor.setParam(scaleStr);
  shared.setParam(sharedCheckbox.isSelected());
  dotWhenNoCursor.setParam(dotWhenNoCursorCheckbox.isSelected());
  acceptBell.setParam(acceptBellCheckbox.isSelected());
  tunnel.setParam(tunnelCheckbox.isSelected());
  if (viaCheckbox.isSelected() && !viaUserInput.getText().isEmpty() && !viaHostInput.getText().isEmpty()&& !viaPortInput.getText().isEmpty()) {
    String sshUser=viaUserInput.getText();
    String sshHost=viaHostInput.getText();
    String sshPort=viaPortInput.getText();
    String viaStr=sshUser.concat(""String_Node_Str"").concat(sshHost).concat(""String_Node_Str"").concat(sshPort);
    via.setParam(viaStr);
  }
  extSSH.setParam(extSSHCheckbox.isSelected());
  if (!sshClientInput.getText().isEmpty())   extSSHClient.setParam(sshClientInput.getText());
  if (sshArgsDefaultButton.isSelected())   if (!sshArgsInput.getText().isEmpty())   extSSHArgs.setParam(sshArgsInput.getText());
  if (!sshConfigInput.getText().isEmpty())   sshConfig.setParam(sshConfigInput.getText());
  if (!sshKeyFileInput.getText().isEmpty())   sshKeyFile.setParam(sshKeyFileInput.getText());
  try {
    for (    Map.Entry<Object,String> iter : callbacks.entrySet()) {
      Object obj=iter.getKey();
      Method cb=obj.getClass().getMethod(iter.getValue(),new Class[]{});
      if (cb == null)       vlog.info(obj.getClass().getName());
      cb.invoke(obj);
    }
  }
 catch (  NoSuchMethodException e) {
    vlog.error(""String_Node_Str"" + e.getMessage());
  }
catch (  IllegalAccessException e) {
    vlog.error(""String_Node_Str"" + e.getMessage());
  }
catch (  InvocationTargetException e) {
    vlog.error(""String_Node_Str"" + e.getMessage());
  }
}","private void storeOptions(){
  autoSelect.setParam(autoselectCheckbox.isSelected());
  if (tightButton.isSelected())   preferredEncoding.setParam(Encodings.encodingName(Encodings.encodingTight));
 else   if (zrleButton.isSelected())   preferredEncoding.setParam(Encodings.encodingName(Encodings.encodingZRLE));
 else   if (hextileButton.isSelected())   preferredEncoding.setParam(Encodings.encodingName(Encodings.encodingHextile));
 else   if (rawButton.isSelected())   preferredEncoding.setParam(Encodings.encodingName(Encodings.encodingRaw));
  fullColor.setParam(fullcolorButton.isSelected());
  if (verylowcolorButton.isSelected())   lowColorLevel.setParam(0);
 else   if (lowcolorButton.isSelected())   lowColorLevel.setParam(1);
 else   if (mediumcolorButton.isSelected())   lowColorLevel.setParam(2);
  customCompressLevel.setParam(compressionCheckbox.isSelected());
  noJpeg.setParam(!jpegCheckbox.isSelected());
  compressLevel.setParam((Integer)compressionInput.getSelectedItem());
  qualityLevel.setParam((Integer)jpegInput.getSelectedItem());
  Security security=new Security();
  if (encNoneCheckbox.isSelected()) {
    if (authNoneCheckbox.isSelected())     security.EnableSecType(Security.secTypeNone);
    if (authVncCheckbox.isSelected())     security.EnableSecType(Security.secTypeVncAuth);
    if (authPlainCheckbox.isSelected())     security.EnableSecType(Security.secTypePlain);
    if (authIdentCheckbox.isSelected())     security.EnableSecType(Security.secTypeIdent);
  }
  if (encTLSCheckbox.isSelected()) {
    if (authNoneCheckbox.isSelected())     security.EnableSecType(Security.secTypeTLSNone);
    if (authVncCheckbox.isSelected())     security.EnableSecType(Security.secTypeTLSVnc);
    if (authPlainCheckbox.isSelected())     security.EnableSecType(Security.secTypeTLSPlain);
    if (authIdentCheckbox.isSelected())     security.EnableSecType(Security.secTypeTLSIdent);
  }
  if (encX509Checkbox.isSelected()) {
    if (authNoneCheckbox.isSelected())     security.EnableSecType(Security.secTypeX509None);
    if (authVncCheckbox.isSelected())     security.EnableSecType(Security.secTypeX509Vnc);
    if (authPlainCheckbox.isSelected())     security.EnableSecType(Security.secTypeX509Plain);
    if (authIdentCheckbox.isSelected())     security.EnableSecType(Security.secTypeX509Ident);
  }
  if (authIdentCheckbox.isSelected() || authPlainCheckbox.isSelected()) {
    sendLocalUsername.setParam(sendLocalUsernameCheckbox.isSelected());
  }
  SecurityClient.secTypes.setParam(security.ToString());
  File caFile=new File(caInput.getText());
  if (caFile.exists() && caFile.canRead())   CSecurityTLS.X509CA.setParam(caFile.getAbsolutePath());
  File crlFile=new File(crlInput.getText());
  if (crlFile.exists() && crlFile.canRead())   CSecurityTLS.X509CRL.setParam(crlFile.getAbsolutePath());
  viewOnly.setParam(viewOnlyCheckbox.isSelected());
  acceptClipboard.setParam(acceptClipboardCheckbox.isSelected());
  sendClipboard.setParam(sendClipboardCheckbox.isSelected());
  String menuKeyStr=MenuKey.getMenuKeySymbols()[menuKeyChoice.getSelectedIndex()].name;
  menuKey.setParam(menuKeyStr);
  if (desktopSizeCheckbox.isSelected() && !desktopWidthInput.getText().isEmpty() && !desktopHeightInput.getText().isEmpty()) {
    String width=desktopWidthInput.getText();
    String height=desktopHeightInput.getText();
    desktopSize.setParam(width.concat(""String_Node_Str"").concat(height));
  }
 else {
    desktopSize.setParam(""String_Node_Str"");
  }
  remoteResize.setParam(remoteResizeButton.isSelected());
  fullScreen.setParam(fullScreenCheckbox.isSelected());
  fullScreenAllMonitors.setParam(fullScreenAllMonitorsCheckbox.isSelected());
  String scaleStr=((String)scalingFactorInput.getSelectedItem()).replace(""String_Node_Str"",""String_Node_Str"");
  scaleStr.replace(""String_Node_Str"",""String_Node_Str"");
  scalingFactor.setParam(scaleStr);
  shared.setParam(sharedCheckbox.isSelected());
  dotWhenNoCursor.setParam(dotWhenNoCursorCheckbox.isSelected());
  acceptBell.setParam(acceptBellCheckbox.isSelected());
  tunnel.setParam(tunnelCheckbox.isSelected());
  if (viaCheckbox.isSelected() && !viaUserInput.getText().isEmpty() && !viaHostInput.getText().isEmpty()&& !viaPortInput.getText().isEmpty()) {
    String sshUser=viaUserInput.getText();
    String sshHost=viaHostInput.getText();
    String sshPort=viaPortInput.getText();
    String viaStr=sshUser.concat(""String_Node_Str"").concat(sshHost).concat(""String_Node_Str"").concat(sshPort);
    via.setParam(viaStr);
  }
 else {
    via.setParam(""String_Node_Str"");
  }
  extSSH.setParam(extSSHCheckbox.isSelected());
  if (!sshClientInput.getText().isEmpty())   extSSHClient.setParam(sshClientInput.getText());
  if (sshArgsDefaultButton.isSelected())   if (!sshArgsInput.getText().isEmpty())   extSSHArgs.setParam(sshArgsInput.getText());
  if (!sshConfigInput.getText().isEmpty())   sshConfig.setParam(sshConfigInput.getText());
  if (!sshKeyFileInput.getText().isEmpty())   sshKeyFile.setParam(sshKeyFileInput.getText());
  try {
    for (    Map.Entry<Object,String> iter : callbacks.entrySet()) {
      Object obj=iter.getKey();
      Method cb=obj.getClass().getMethod(iter.getValue(),new Class[]{});
      if (cb == null)       vlog.info(obj.getClass().getName());
      cb.invoke(obj);
    }
  }
 catch (  NoSuchMethodException e) {
    vlog.error(""String_Node_Str"" + e.getMessage());
  }
catch (  IllegalAccessException e) {
    vlog.error(""String_Node_Str"" + e.getMessage());
  }
catch (  InvocationTargetException e) {
    vlog.error(""String_Node_Str"" + e.getMessage());
  }
}",0.9955851878547616
111511,"private static String fillCmdPattern(String pattern,String gatewayHost,String remoteHost,int remotePort,int localPort){
  boolean H_found=false, G_found=false, R_found=false, L_found=false;
  boolean P_found=false;
  String cmd=extSSHClient.getValue() + ""String_Node_Str"";
  pattern.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String user=getSshUser();
  int sshPort=getSshPort();
  gatewayHost=user + ""String_Node_Str"" + gatewayHost;
  for (int i=0; i < pattern.length(); i++) {
    if (pattern.charAt(i) == '%') {
switch (pattern.charAt(++i)) {
case 'H':
        cmd+=(tunnel.getValue() ? gatewayHost : remoteHost);
      H_found=true;
    continue;
case 'G':
  cmd+=gatewayHost;
G_found=true;
continue;
case 'R':
cmd+=remotePort;
R_found=true;
continue;
case 'L':
cmd+=localPort;
L_found=true;
continue;
case 'P':
cmd+=sshPort;
P_found=true;
continue;
}
}
cmd+=pattern.charAt(i);
}
if (pattern.length() > 1024) throw new Exception(""String_Node_Str"");
if (!H_found || !R_found || !L_found) throw new Exception(""String_Node_Str"");
if (!tunnel.getValue() && !G_found) throw new Exception(""String_Node_Str"");
vlog.info(""String_Node_Str"" + cmd);
if (VncViewer.os.startsWith(""String_Node_Str"")) cmd.replaceAll(""String_Node_Str"",""String_Node_Str"");
return cmd;
}","private static String fillCmdPattern(String pattern,String gatewayHost,String remoteHost,int remotePort,int localPort){
  boolean H_found=false, G_found=false, R_found=false, L_found=false;
  boolean P_found=false;
  String cmd=extSSHClient.getValue() + ""String_Node_Str"";
  pattern.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String user=getSshUser();
  int sshPort=getSshPort();
  gatewayHost=user + ""String_Node_Str"" + gatewayHost;
  for (int i=0; i < pattern.length(); i++) {
    if (pattern.charAt(i) == '%') {
switch (pattern.charAt(++i)) {
case 'H':
        cmd+=remoteHost;
      H_found=true;
    continue;
case 'G':
  cmd+=gatewayHost;
G_found=true;
continue;
case 'R':
cmd+=remotePort;
R_found=true;
continue;
case 'L':
cmd+=localPort;
L_found=true;
continue;
case 'P':
cmd+=sshPort;
P_found=true;
continue;
}
}
cmd+=pattern.charAt(i);
}
if (pattern.length() > 1024) throw new Exception(""String_Node_Str"");
if (!H_found || !R_found || !L_found) throw new Exception(""String_Node_Str"");
if (!tunnel.getValue() && !G_found) throw new Exception(""String_Node_Str"");
vlog.info(""String_Node_Str"" + cmd);
if (VncViewer.os.startsWith(""String_Node_Str"")) cmd.replaceAll(""String_Node_Str"",""String_Node_Str"");
return cmd;
}",0.9807538091419408
111512,"private static void createTunnelExt(String gatewayHost,String remoteHost,int remotePort,int localPort,String pattern) throws Exception {
  if (pattern == null || pattern.length() < 1) {
    if (tunnel.getValue())     pattern=DEFAULT_TUNNEL_TEMPLATE;
 else     pattern=DEFAULT_VIA_TEMPLATE;
  }
  String cmd=fillCmdPattern(pattern,gatewayHost,remoteHost,remotePort,localPort);
  try {
    Thread t=new Thread(new ExtProcess(cmd,vlog,true));
    t.start();
    Thread.sleep(1000);
  }
 catch (  java.lang.Exception e) {
    throw new Exception(e.getMessage());
  }
}","private static void createTunnelExt(String gatewayHost,String remoteHost,int remotePort,int localPort,String pattern) throws Exception {
  if (pattern == null || pattern.length() < 1) {
    if (tunnel.getValue() && via.getValue().isEmpty())     pattern=DEFAULT_TUNNEL_TEMPLATE;
 else     pattern=DEFAULT_VIA_TEMPLATE;
  }
  String cmd=fillCmdPattern(pattern,gatewayHost,remoteHost,remotePort,localPort);
  try {
    Thread t=new Thread(new ExtProcess(cmd,vlog,true));
    t.start();
    Thread.sleep(1000);
  }
 catch (  java.lang.Exception e) {
    throw new Exception(e.getMessage());
  }
}",0.9757785467128028
111513,"public static void createTunnel(CConn cc,int localPort) throws Exception {
  int remotePort;
  String gatewayHost;
  String remoteHost;
  remotePort=cc.getServerPort();
  if (tunnel.getValue() && via.getValue().isEmpty()) {
    gatewayHost=cc.getServerName();
    remoteHost=""String_Node_Str"";
  }
 else {
    gatewayHost=getSshHost();
    remoteHost=cc.getServerName();
  }
  String pattern=extSSHArgs.getValue();
  if (pattern == null || pattern.isEmpty()) {
    if (tunnel.getValue())     pattern=System.getProperty(""String_Node_Str"");
 else     pattern=System.getProperty(""String_Node_Str"");
  }
  if (extSSH.getValue() || (pattern != null && pattern.length() > 0)) {
    createTunnelExt(gatewayHost,remoteHost,remotePort,localPort,pattern);
  }
 else {
    createTunnelJSch(gatewayHost,remoteHost,remotePort,localPort);
  }
}","public static void createTunnel(CConn cc,int localPort) throws Exception {
  int remotePort;
  String gatewayHost;
  String remoteHost;
  remotePort=cc.getServerPort();
  gatewayHost=cc.getServerName();
  remoteHost=""String_Node_Str"";
  if (!via.getValue().isEmpty()) {
    gatewayHost=getSshHost();
    remoteHost=cc.getServerName();
  }
  String pattern=extSSHArgs.getValue();
  if (pattern == null || pattern.isEmpty()) {
    if (tunnel.getValue() && via.getValue().isEmpty())     pattern=System.getProperty(""String_Node_Str"");
 else     pattern=System.getProperty(""String_Node_Str"");
  }
  if (extSSH.getValue() || (pattern != null && pattern.length() > 0)) {
    createTunnelExt(gatewayHost,remoteHost,remotePort,localPort,pattern);
  }
 else {
    createTunnelJSch(gatewayHost,remoteHost,remotePort,localPort);
  }
}",0.5690072639225182
111514,"public Rectangle getScreenBounds(){
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  Rectangle r=new Rectangle();
  setMaximizedBounds(null);
  if (cc.viewer.fullScreenAllMonitors.getValue()) {
    for (    GraphicsDevice gd : ge.getScreenDevices())     for (    GraphicsConfiguration gc : gd.getConfigurations())     r=r.union(gc.getBounds());
    if (!cc.fullScreen)     pack();
    Rectangle mb=new Rectangle(r);
    mb.grow(getInsets().left,getInsets().bottom);
    setMaximizedBounds(mb);
  }
 else {
    GraphicsDevice gd=ge.getDefaultScreenDevice();
    GraphicsConfiguration gc=gd.getDefaultConfiguration();
    r=gc.getBounds();
  }
  return r;
}","public Rectangle getScreenBounds(){
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  Rectangle r=new Rectangle();
  setMaximizedBounds(null);
  if (cc.viewer.fullScreenAllMonitors.getValue()) {
    for (    GraphicsDevice gd : ge.getScreenDevices())     for (    GraphicsConfiguration gc : gd.getConfigurations())     r=r.union(gc.getBounds());
    Dimension d=getPreferredSize();
    if (!cc.fullScreen)     if ((d.width > 0) && (d.height > 0))     pack();
    Rectangle mb=new Rectangle(r);
    mb.grow(getInsets().left,getInsets().bottom);
    setMaximizedBounds(mb);
  }
 else {
    GraphicsDevice gd=ge.getDefaultScreenDevice();
    GraphicsConfiguration gc=gd.getDefaultConfiguration();
    r=gc.getBounds();
  }
  return r;
}",0.946712802768166
111515,"public void checkServerTrusted(X509Certificate[] chain,String authType) throws CertificateException {
  MessageDigest md=null;
  try {
    md=MessageDigest.getInstance(""String_Node_Str"");
    tm.checkServerTrusted(chain,authType);
  }
 catch (  CertificateException e) {
    if (e.getCause() instanceof CertPathBuilderException) {
      Object[] answer={""String_Node_Str"",""String_Node_Str""};
      X509Certificate cert=chain[0];
      md.update(cert.getEncoded());
      String thumbprint=DatatypeConverter.printHexBinary(md.digest());
      thumbprint=thumbprint.replaceAll(""String_Node_Str"",""String_Node_Str"");
      int ret=JOptionPane.showOptionDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + cert.getSubjectX500Principal().getName() + ""String_Node_Str""+ ""String_Node_Str""+ cert.getIssuerX500Principal().getName()+ ""String_Node_Str""+ ""String_Node_Str""+ cert.getSerialNumber()+ ""String_Node_Str""+ ""String_Node_Str""+ cert.getVersion()+ ""String_Node_Str""+ ""String_Node_Str""+ cert.getPublicKey().getAlgorithm()+ ""String_Node_Str""+ ""String_Node_Str""+ cert.getNotBefore()+ ""String_Node_Str""+ ""String_Node_Str""+ cert.getNotAfter()+ ""String_Node_Str""+ ""String_Node_Str""+ thumbprint+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,answer,answer[0]);
      if (ret == JOptionPane.YES_OPTION) {
        File vncDir=new File(FileUtils.getVncHomeDir());
        if (!vncDir.exists() && !vncDir.mkdir()) {
          vlog.info(""String_Node_Str"");
          return;
        }
        Collection<? extends X509Certificate> cacerts=null;
        String castore=FileUtils.getVncHomeDir() + ""String_Node_Str"";
        File caFile=new File(castore);
        try {
          caFile.createNewFile();
        }
 catch (        IOException ioe) {
          vlog.error(ioe.getCause().getMessage());
          return;
        }
        InputStream caStream=new MyFileInputStream(caFile);
        CertificateFactory cf=CertificateFactory.getInstance(""String_Node_Str"");
        cacerts=(Collection<? extends X509Certificate>)cf.generateCertificates(caStream);
        for (int i=0; i < chain.length; i++) {
          if (cacerts == null || !cacerts.contains(chain[i])) {
            byte[] der=chain[i].getEncoded();
            String pem=DatatypeConverter.printBase64Binary(der);
            pem=pem.replaceAll(""String_Node_Str"",""String_Node_Str"");
            FileWriter fw=null;
            try {
              fw=new FileWriter(castore,true);
              fw.write(""String_Node_Str"");
              fw.write(pem + ""String_Node_Str"");
              fw.write(""String_Node_Str"");
            }
 catch (            IOException ioe) {
              throw new Exception(ioe.getCause().getMessage());
            }
 finally {
              try {
                if (fw != null)                 fw.close();
              }
 catch (              IOException ioe2) {
                throw new Exception(ioe2.getCause().getMessage());
              }
            }
          }
        }
      }
 else {
        System.exit(1);
      }
    }
 else {
      throw new Exception(e.getCause().getMessage());
    }
  }
catch (  java.lang.Exception e) {
    throw new Exception(e.getCause().getMessage());
  }
}","public void checkServerTrusted(X509Certificate[] chain,String authType) throws CertificateException {
  MessageDigest md=null;
  try {
    md=MessageDigest.getInstance(""String_Node_Str"");
    tm.checkServerTrusted(chain,authType);
  }
 catch (  CertificateException e) {
    if (e.getCause() instanceof CertPathBuilderException) {
      Object[] answer={""String_Node_Str"",""String_Node_Str""};
      X509Certificate cert=chain[0];
      md.update(cert.getEncoded());
      String thumbprint=DatatypeConverter.printHexBinary(md.digest());
      thumbprint=thumbprint.replaceAll(""String_Node_Str"",""String_Node_Str"");
      int ret=JOptionPane.showOptionDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + cert.getSubjectX500Principal().getName() + ""String_Node_Str""+ ""String_Node_Str""+ cert.getIssuerX500Principal().getName()+ ""String_Node_Str""+ ""String_Node_Str""+ cert.getSerialNumber()+ ""String_Node_Str""+ ""String_Node_Str""+ cert.getVersion()+ ""String_Node_Str""+ ""String_Node_Str""+ cert.getPublicKey().getAlgorithm()+ ""String_Node_Str""+ ""String_Node_Str""+ cert.getNotBefore()+ ""String_Node_Str""+ ""String_Node_Str""+ cert.getNotAfter()+ ""String_Node_Str""+ ""String_Node_Str""+ thumbprint+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,answer,answer[0]);
      if (ret == JOptionPane.YES_OPTION) {
        File vncDir=new File(FileUtils.getVncHomeDir());
        if (!vncDir.exists() && !vncDir.mkdir()) {
          vlog.info(""String_Node_Str"");
          return;
        }
        Collection<? extends X509Certificate> cacerts=null;
        String castore=FileUtils.getVncHomeDir() + ""String_Node_Str"";
        File caFile=new File(castore);
        try {
          caFile.createNewFile();
        }
 catch (        IOException ioe) {
          vlog.error(ioe.getCause().getMessage());
          return;
        }
        InputStream caStream=new MyFileInputStream(caFile);
        CertificateFactory cf=CertificateFactory.getInstance(""String_Node_Str"");
        cacerts=(Collection<? extends X509Certificate>)cf.generateCertificates(caStream);
        for (int i=0; i < chain.length; i++) {
          if (cacerts == null || !cacerts.contains(chain[i])) {
            byte[] der=chain[i].getEncoded();
            String pem=DatatypeConverter.printBase64Binary(der);
            pem=pem.replaceAll(""String_Node_Str"",""String_Node_Str"");
            FileWriter fw=null;
            try {
              fw=new FileWriter(castore,true);
              fw.write(""String_Node_Str"");
              fw.write(pem + ""String_Node_Str"");
              fw.write(""String_Node_Str"");
            }
 catch (            IOException ioe) {
              throw new Exception(ioe.getCause().getMessage());
            }
 finally {
              try {
                if (fw != null)                 fw.close();
              }
 catch (              IOException ioe2) {
                throw new Exception(ioe2.getCause().getMessage());
              }
            }
          }
        }
      }
 else {
        throw new WarningException(""String_Node_Str"");
      }
    }
 else {
      throw new SystemException(e.getCause().getMessage());
    }
  }
catch (  java.lang.Exception e) {
    throw new Exception(e.getCause().getMessage());
  }
}",0.9614045709096412
111516,"public boolean processMsg(CConnection cc){
  is=(FdInStream)cc.getInStream();
  os=(FdOutStream)cc.getOutStream();
  client=cc;
  initGlobal();
  if (session == null) {
    if (!is.checkNoWait(1))     return false;
    if (is.readU8() == 0) {
      int result=is.readU32();
      String reason;
      if (result == Security.secResultFailed || result == Security.secResultTooMany)       reason=is.readString();
 else       reason=new String(""String_Node_Str"");
      throw new AuthFailureException(reason);
    }
    setParam();
  }
  try {
    manager=new SSLEngineManager(engine,is,os);
    manager.doHandshake();
  }
 catch (  java.lang.Exception e) {
    throw new Exception(e.getMessage());
  }
  cc.setStreams(new TLSInStream(is,manager),new TLSOutStream(os,manager));
  return true;
}","public boolean processMsg(CConnection cc){
  is=(FdInStream)cc.getInStream();
  os=(FdOutStream)cc.getOutStream();
  client=cc;
  initGlobal();
  if (session == null) {
    if (!is.checkNoWait(1))     return false;
    if (is.readU8() == 0) {
      int result=is.readU32();
      String reason;
      if (result == Security.secResultFailed || result == Security.secResultTooMany)       reason=is.readString();
 else       reason=new String(""String_Node_Str"");
      throw new AuthFailureException(reason);
    }
    setParam();
  }
  try {
    manager=new SSLEngineManager(engine,is,os);
    manager.doHandshake();
  }
 catch (  java.lang.Exception e) {
    if (e.getMessage().equals(""String_Node_Str""))     throw new WarningException(e.getMessage());
 else     throw new SystemException(e.toString());
  }
  cc.setStreams(new TLSInStream(is,manager),new TLSOutStream(os,manager));
  return true;
}",0.9360189573459716
111517,"public void getOptions(){
  autoSelect=options.autoSelect.isSelected();
  if (fullColour != options.fullColour.isSelected()) {
    formatChange=true;
    forceNonincremental=true;
  }
  fullColour=options.fullColour.isSelected();
  if (!fullColour) {
    int newLowColourLevel=(options.veryLowColour.isSelected() ? 0 : options.lowColour.isSelected() ? 1 : 2);
    if (newLowColourLevel != lowColourLevel) {
      lowColourLevel=newLowColourLevel;
      formatChange=true;
      forceNonincremental=true;
    }
  }
  int newEncoding=(options.zrle.isSelected() ? Encodings.encodingZRLE : options.hextile.isSelected() ? Encodings.encodingHextile : options.tight.isSelected() ? Encodings.encodingTight : Encodings.encodingRaw);
  if (newEncoding != currentEncoding) {
    currentEncoding=newEncoding;
    encodingChange=true;
  }
  viewer.customCompressLevel.setParam(options.customCompressLevel.isSelected());
  if (cp.customCompressLevel != viewer.customCompressLevel.getValue()) {
    cp.customCompressLevel=viewer.customCompressLevel.getValue();
    encodingChange=true;
  }
  if (Integer.parseInt(options.compressLevel.getSelectedItem().toString()) >= 0 && Integer.parseInt(options.compressLevel.getSelectedItem().toString()) <= 9) {
    viewer.compressLevel.setParam(options.compressLevel.getSelectedItem().toString());
  }
 else {
    viewer.compressLevel.setParam(viewer.compressLevel.getDefaultStr());
  }
  if (cp.compressLevel != viewer.compressLevel.getValue()) {
    cp.compressLevel=viewer.compressLevel.getValue();
    encodingChange=true;
  }
  viewer.noJpeg.setParam(!options.noJpeg.isSelected());
  if (cp.noJpeg != viewer.noJpeg.getValue()) {
    cp.noJpeg=viewer.noJpeg.getValue();
    encodingChange=true;
  }
  viewer.qualityLevel.setParam(options.qualityLevel.getSelectedItem().toString());
  if (cp.qualityLevel != viewer.qualityLevel.getValue()) {
    cp.qualityLevel=viewer.qualityLevel.getValue();
    encodingChange=true;
  }
  viewer.sendLocalUsername.setParam(options.sendLocalUsername.isSelected());
  viewer.viewOnly.setParam(options.viewOnly.isSelected());
  viewer.acceptClipboard.setParam(options.acceptClipboard.isSelected());
  viewer.sendClipboard.setParam(options.sendClipboard.isSelected());
  viewer.acceptBell.setParam(options.acceptBell.isSelected());
  String scaleString=options.scalingFactor.getSelectedItem().toString();
  String oldScaleFactor=viewer.scalingFactor.getValue();
  if (scaleString.equalsIgnoreCase(""String_Node_Str"")) {
    scaleString=new String(""String_Node_Str"");
  }
 else   if (scaleString.equalsIgnoreCase(""String_Node_Str"")) {
    scaleString=new String(""String_Node_Str"");
  }
 else {
    scaleString=scaleString.substring(0,scaleString.length() - 1);
  }
  if (!oldScaleFactor.equals(scaleString)) {
    viewer.scalingFactor.setParam(scaleString);
    if ((options.fullScreen.isSelected() == fullScreen) && (desktop != null))     recreateViewport();
  }
  clipboardDialog.setSendingEnabled(viewer.sendClipboard.getValue());
  viewer.menuKey.setParam(MenuKey.getMenuKeySymbols()[options.menuKey.getSelectedIndex()].name);
  F8Menu.f8.setText(""String_Node_Str"" + KeyEvent.getKeyText(MenuKey.getMenuKeyCode()));
  setShared(options.shared.isSelected());
  viewer.useLocalCursor.setParam(options.useLocalCursor.isSelected());
  if (cp.supportsLocalCursor != viewer.useLocalCursor.getValue()) {
    cp.supportsLocalCursor=viewer.useLocalCursor.getValue();
    encodingChange=true;
    if (desktop != null)     desktop.resetLocalCursor();
  }
  checkEncodings();
  if (state() != RFBSTATE_NORMAL) {
    if (options.encNone.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeIdent);
    }
    if (options.encTLS.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeTLSIdent);
    }
    if (options.encX509.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeX509None);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeX509None);
      Security.DisableSecType(Security.secTypeX509Vnc);
      Security.DisableSecType(Security.secTypeX509Plain);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
    if (options.secNone.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509None);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeX509None);
    }
    if (options.secVnc.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
    }
 else {
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeX509Vnc);
    }
    if (options.secPlain.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
    }
 else {
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeX509Plain);
    }
    if (options.secIdent.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeIdent);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeIdent);
      Security.DisableSecType(Security.secTypeTLSIdent);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
  }
  if (options.desktopSize.isSelected()) {
    String desktopSize=options.desktopWidth.getText() + ""String_Node_Str"" + options.desktopHeight.getText();
    viewer.desktopSize.setParam(desktopSize);
  }
  if (options.fullScreen.isSelected() ^ fullScreen)   toggleFullScreen();
}","public void getOptions(){
  autoSelect=options.autoSelect.isSelected();
  if (fullColour != options.fullColour.isSelected()) {
    formatChange=true;
    forceNonincremental=true;
  }
  fullColour=options.fullColour.isSelected();
  if (!fullColour) {
    int newLowColourLevel=(options.veryLowColour.isSelected() ? 0 : options.lowColour.isSelected() ? 1 : 2);
    if (newLowColourLevel != lowColourLevel) {
      lowColourLevel=newLowColourLevel;
      formatChange=true;
      forceNonincremental=true;
    }
  }
  int newEncoding=(options.zrle.isSelected() ? Encodings.encodingZRLE : options.hextile.isSelected() ? Encodings.encodingHextile : options.tight.isSelected() ? Encodings.encodingTight : Encodings.encodingRaw);
  if (newEncoding != currentEncoding) {
    currentEncoding=newEncoding;
    encodingChange=true;
  }
  viewer.customCompressLevel.setParam(options.customCompressLevel.isSelected());
  if (cp.customCompressLevel != viewer.customCompressLevel.getValue()) {
    cp.customCompressLevel=viewer.customCompressLevel.getValue();
    encodingChange=true;
  }
  if (Integer.parseInt(options.compressLevel.getSelectedItem().toString()) >= 0 && Integer.parseInt(options.compressLevel.getSelectedItem().toString()) <= 9) {
    viewer.compressLevel.setParam(options.compressLevel.getSelectedItem().toString());
  }
 else {
    viewer.compressLevel.setParam(viewer.compressLevel.getDefaultStr());
  }
  if (cp.compressLevel != viewer.compressLevel.getValue()) {
    cp.compressLevel=viewer.compressLevel.getValue();
    encodingChange=true;
  }
  viewer.noJpeg.setParam(!options.noJpeg.isSelected());
  if (cp.noJpeg != viewer.noJpeg.getValue()) {
    cp.noJpeg=viewer.noJpeg.getValue();
    encodingChange=true;
  }
  viewer.qualityLevel.setParam(options.qualityLevel.getSelectedItem().toString());
  if (cp.qualityLevel != viewer.qualityLevel.getValue()) {
    cp.qualityLevel=viewer.qualityLevel.getValue();
    encodingChange=true;
  }
  viewer.sendLocalUsername.setParam(options.sendLocalUsername.isSelected());
  viewer.viewOnly.setParam(options.viewOnly.isSelected());
  viewer.acceptClipboard.setParam(options.acceptClipboard.isSelected());
  viewer.sendClipboard.setParam(options.sendClipboard.isSelected());
  viewer.acceptBell.setParam(options.acceptBell.isSelected());
  String scaleString=options.scalingFactor.getSelectedItem().toString();
  String oldScaleFactor=viewer.scalingFactor.getValue();
  if (scaleString.equalsIgnoreCase(""String_Node_Str"")) {
    scaleString=new String(""String_Node_Str"");
  }
 else   if (scaleString.equalsIgnoreCase(""String_Node_Str"")) {
    scaleString=new String(""String_Node_Str"");
  }
 else {
    scaleString=scaleString.substring(0,scaleString.length() - 1);
  }
  if (!oldScaleFactor.equals(scaleString)) {
    viewer.scalingFactor.setParam(scaleString);
    if ((options.fullScreen.isSelected() == fullScreen) && (desktop != null))     recreateViewport();
  }
  clipboardDialog.setSendingEnabled(viewer.sendClipboard.getValue());
  viewer.menuKey.setParam(MenuKey.getMenuKeySymbols()[options.menuKey.getSelectedIndex()].name);
  F8Menu.f8.setText(""String_Node_Str"" + KeyEvent.getKeyText(MenuKey.getMenuKeyCode()));
  setShared(options.shared.isSelected());
  viewer.useLocalCursor.setParam(options.useLocalCursor.isSelected());
  if (cp.supportsLocalCursor != viewer.useLocalCursor.getValue()) {
    cp.supportsLocalCursor=viewer.useLocalCursor.getValue();
    encodingChange=true;
    if (desktop != null)     desktop.resetLocalCursor();
  }
  checkEncodings();
  if (state() != RFBSTATE_NORMAL) {
    if (options.encNone.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeIdent);
    }
    if (options.encTLS.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeTLSIdent);
    }
    if (options.encX509.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeX509None);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeX509None);
      Security.DisableSecType(Security.secTypeX509Vnc);
      Security.DisableSecType(Security.secTypeX509Plain);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
    if (options.secNone.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509None);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeX509None);
    }
    if (options.secVnc.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
    }
 else {
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeX509Vnc);
    }
    if (options.secPlain.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
    }
 else {
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeX509Plain);
    }
    if (options.secIdent.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeIdent);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeIdent);
      Security.DisableSecType(Security.secTypeTLSIdent);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
  }
  String desktopSize=(options.desktopSize.isSelected()) ? options.desktopWidth.getText() + ""String_Node_Str"" + options.desktopHeight.getText() : ""String_Node_Str"";
  viewer.desktopSize.setParam(desktopSize);
  if (options.fullScreen.isSelected() ^ fullScreen)   toggleFullScreen();
}",0.9842055185537584
111518,"public void run(){
  cc=null;
  if (listenMode.getValue()) {
    int port=5500;
    if (vncServerName.getValue() != null && Character.isDigit(vncServerName.getValue().charAt(0)))     port=Integer.parseInt(vncServerName.getValue());
    TcpListener listener=null;
    try {
      listener=new TcpListener(null,port);
    }
 catch (    java.lang.Exception e) {
      reportException(e);
      exit(1);
    }
    vlog.info(""String_Node_Str"" + port);
    while (true) {
      Socket new_sock=listener.accept();
      if (new_sock != null)       newViewer(this,new_sock);
    }
  }
  try {
    cc=new CConn(this,sock,vncServerName.getValue());
    while (!cc.shuttingDown)     cc.processMsg();
  }
 catch (  java.lang.Exception e) {
    if (cc == null || !cc.shuttingDown) {
      reportException(e);
      if (cc != null)       cc.deleteWindow();
      exit(1);
    }
 else     if (embed.getValue()) {
      reportException(new java.lang.Exception(""String_Node_Str""));
    }
 else {
      cc=null;
    }
  }
  exit(0);
}","public void run(){
  cc=null;
  if (listenMode.getValue()) {
    int port=5500;
    if (vncServerName.getValue() != null && Character.isDigit(vncServerName.getValue().charAt(0)))     port=Integer.parseInt(vncServerName.getValue());
    TcpListener listener=null;
    try {
      listener=new TcpListener(null,port);
    }
 catch (    java.lang.Exception e) {
      reportException(e);
      exit(1);
    }
    vlog.info(""String_Node_Str"" + port);
    while (true) {
      Socket new_sock=listener.accept();
      if (new_sock != null)       newViewer(this,new_sock,true);
    }
  }
  try {
    cc=new CConn(this,sock,vncServerName.getValue());
    while (!cc.shuttingDown)     cc.processMsg();
  }
 catch (  java.lang.Exception e) {
    if (cc == null || !cc.shuttingDown) {
      reportException(e);
      if (cc != null)       cc.deleteWindow();
      exit(1);
    }
 else     if (embed.getValue()) {
      reportException(new java.lang.Exception(""String_Node_Str""));
    }
 else {
      cc=null;
    }
  }
  exit(0);
}",0.997545409916544
111519,"void showInfo(){
  Window fullScreenWindow=Viewport.getFullScreenWindow();
  if (fullScreenWindow != null)   Viewport.setFullScreenWindow(null);
  String info=new String(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  String msg=String.format(info,cp.name(),sock.getPeerName(),sock.getPeerPort(),cp.width,cp.height,desktop.getPF().print(),serverPF.print(),Encodings.encodingName(currentEncoding),Encodings.encodingName(lastServerEncoding),sock.inStream().kbitsPerSecond(),cp.majorVersion,cp.minorVersion,Security.secTypeName(csecurity.getType()),csecurity.description());
  JOptionPane op=new JOptionPane(msg,JOptionPane.PLAIN_MESSAGE,JOptionPane.DEFAULT_OPTION);
  JDialog dlg=op.createDialog(desktop,""String_Node_Str"");
  dlg.setIconImage(VncViewer.frameIcon);
  dlg.setVisible(true);
  if (fullScreenWindow != null)   Viewport.setFullScreenWindow(fullScreenWindow);
}","void showInfo(){
  Window fullScreenWindow=Viewport.getFullScreenWindow();
  if (fullScreenWindow != null)   Viewport.setFullScreenWindow(null);
  String info=new String(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  String msg=String.format(info,cp.name(),sock.getPeerName(),sock.getPeerPort(),cp.width,cp.height,desktop.getPF().print(),serverPF.print(),Encodings.encodingName(currentEncoding),Encodings.encodingName(lastServerEncoding),sock.inStream().kbitsPerSecond(),cp.majorVersion,cp.minorVersion,Security.secTypeName(csecurity.getType()),csecurity.description());
  JOptionPane op=new JOptionPane(msg,JOptionPane.PLAIN_MESSAGE,JOptionPane.DEFAULT_OPTION);
  JDialog dlg=op.createDialog(desktop,""String_Node_Str"");
  dlg.setIconImage(VncViewer.frameIcon);
  dlg.setAlwaysOnTop(true);
  dlg.setVisible(true);
  if (fullScreenWindow != null)   Viewport.setFullScreenWindow(fullScreenWindow);
}",0.9864209505334628
111520,"void showAbout(){
  String pkgDate=""String_Node_Str"";
  String pkgTime=""String_Node_Str"";
  try {
    Manifest manifest=new Manifest(VncViewer.timestamp);
    Attributes attributes=manifest.getMainAttributes();
    pkgDate=attributes.getValue(""String_Node_Str"");
    pkgTime=attributes.getValue(""String_Node_Str"");
  }
 catch (  IOException e) {
  }
  Window fullScreenWindow=Viewport.getFullScreenWindow();
  if (fullScreenWindow != null)   Viewport.setFullScreenWindow(null);
  String msg=String.format(VncViewer.aboutText,VncViewer.version,VncViewer.build,VncViewer.buildDate,VncViewer.buildTime);
  JOptionPane op=new JOptionPane(msg,JOptionPane.INFORMATION_MESSAGE,JOptionPane.DEFAULT_OPTION,VncViewer.logoIcon);
  JDialog dlg=op.createDialog(desktop,""String_Node_Str"");
  dlg.setIconImage(VncViewer.frameIcon);
  dlg.setVisible(true);
  if (fullScreenWindow != null)   Viewport.setFullScreenWindow(fullScreenWindow);
}","void showAbout(){
  String pkgDate=""String_Node_Str"";
  String pkgTime=""String_Node_Str"";
  try {
    Manifest manifest=new Manifest(VncViewer.timestamp);
    Attributes attributes=manifest.getMainAttributes();
    pkgDate=attributes.getValue(""String_Node_Str"");
    pkgTime=attributes.getValue(""String_Node_Str"");
  }
 catch (  IOException e) {
  }
  Window fullScreenWindow=Viewport.getFullScreenWindow();
  if (fullScreenWindow != null)   Viewport.setFullScreenWindow(null);
  String msg=String.format(VncViewer.aboutText,VncViewer.version,VncViewer.build,VncViewer.buildDate,VncViewer.buildTime);
  JOptionPane op=new JOptionPane(msg,JOptionPane.INFORMATION_MESSAGE,JOptionPane.DEFAULT_OPTION,VncViewer.logoIcon);
  JDialog dlg=op.createDialog(desktop,""String_Node_Str"");
  dlg.setIconImage(VncViewer.frameIcon);
  dlg.setAlwaysOnTop(true);
  dlg.setVisible(true);
  if (fullScreenWindow != null)   Viewport.setFullScreenWindow(fullScreenWindow);
}",0.9850746268656716
111521,"public void endDialog(){
  setVisible(false);
  setFocusable(false);
  setAlwaysOnTop(false);
  fullScreenWindow=Viewport.getFullScreenWindow();
  if (fullScreenWindow != null)   Viewport.setFullScreenWindow(fullScreenWindow);
}","public void endDialog(){
  setVisible(false);
  setAlwaysOnTop(false);
  fullScreenWindow=Viewport.getFullScreenWindow();
  if (fullScreenWindow != null)   Viewport.setFullScreenWindow(fullScreenWindow);
}",0.9468822170900691
111522,"public synchronized void checkClipboard(){
  SecurityManager sm=System.getSecurityManager();
  try {
    if (sm != null)     sm.checkSystemClipboardAccess();
    Clipboard cb=Toolkit.getDefaultToolkit().getSystemClipboard();
    if (cb == null)     return;
    Transferable t=cb.getContents(null);
    if ((t != null) && t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
      try {
        String newContents=new String(""String_Node_Str"");
        if (t.getTransferData(DataFlavor.stringFlavor) != null) {
          int len=Math.min(cc.viewer.maxCutText.getValue(),((String)t.getTransferData(DataFlavor.stringFlavor)).length());
          newContents=((String)t.getTransferData(DataFlavor.stringFlavor)).substring(0,len);
        }
        if (!newContents.equals(cc.clipboardDialog.getContents())) {
          if (cc.viewer.sendClipboard.getValue())           cc.writeClientCutText(newContents,newContents.length());
          cc.clipboardDialog.setContents(newContents);
        }
      }
 catch (      java.lang.Exception e) {
        vlog.debug(""String_Node_Str"" + e.getMessage());
      }
    }
  }
 catch (  SecurityException e) {
    vlog.debug(""String_Node_Str"");
  }
}","public synchronized void checkClipboard(){
  SecurityManager sm=System.getSecurityManager();
  try {
    if (sm != null)     sm.checkSystemClipboardAccess();
    Clipboard cb=Toolkit.getDefaultToolkit().getSystemClipboard();
    if (cb != null) {
      Transferable t=cb.getContents(null);
      if (t == null)       return;
      DataFlavor flavor=DataFlavor.selectBestTextFlavor(t.getTransferDataFlavors());
      if (flavor == null)       return;
      BufferedReader br=new BufferedReader(flavor.getReaderForText(t));
      CharBuffer cbuf=CharBuffer.allocate(VncViewer.maxCutText.getValue());
      br.read(cbuf);
      cbuf.flip();
      String newContents=cbuf.toString();
      if (!cc.clipboardDialog.compareContentsTo(newContents)) {
        cc.clipboardDialog.setContents(newContents);
        if (cc.viewer.sendClipboard.getValue())         cc.writeClientCutText(newContents,newContents.length());
      }
      br.close();
      System.gc();
    }
  }
 catch (  java.lang.Exception e) {
    vlog.debug(""String_Node_Str"" + e.getMessage());
  }
}",0.2789450156459544
111523,"synchronized void releaseModifiers(){
  if ((modifiers & Event.SHIFT_MASK) != 0)   writeKeyEvent(Keysyms.Shift_L,false);
  if ((modifiers & Event.CTRL_MASK) != 0)   writeKeyEvent(Keysyms.Control_L,false);
  if ((modifiers & Event.ALT_MASK) != 0)   writeKeyEvent(Keysyms.Alt_L,false);
  if ((modifiers & Event.META_MASK) != 0)   writeKeyEvent(Keysyms.Meta_L,false);
  modifiers=0;
}","synchronized void releaseModifiers(){
  if ((modifiers & Event.SHIFT_MASK) == Event.SHIFT_MASK)   writeKeyEvent(Keysyms.Shift_R,false);
  if (((modifiers >> KEY_LOC_SHIFT_L) & Event.SHIFT_MASK) == Event.SHIFT_MASK)   writeKeyEvent(Keysyms.Shift_L,false);
  if ((modifiers & Event.CTRL_MASK) == Event.CTRL_MASK)   writeKeyEvent(Keysyms.Control_R,false);
  if (((modifiers >> KEY_LOC_SHIFT_L) & Event.CTRL_MASK) == Event.CTRL_MASK)   writeKeyEvent(Keysyms.Control_L,false);
  if ((modifiers & Event.ALT_MASK) == Event.ALT_MASK)   writeKeyEvent(Keysyms.Alt_R,false);
  if (((modifiers >> KEY_LOC_SHIFT_L) & Event.ALT_MASK) == Event.ALT_MASK)   writeKeyEvent(Keysyms.Alt_L,false);
  if ((modifiers & Event.META_MASK) == Event.META_MASK)   writeKeyEvent(Keysyms.Meta_R,false);
  if (((modifiers >> KEY_LOC_SHIFT_L) & Event.META_MASK) == Event.META_MASK)   writeKeyEvent(Keysyms.Meta_L,false);
  if ((modifiers & SUPER_MASK) == SUPER_MASK)   writeKeyEvent(Keysyms.Super_L,false);
  modifiers=0;
}",0.462436177972283
111524,"public void writeKeyEvent(KeyEvent ev){
  int keysym=0, keycode, key, location;
  if (shuttingDown)   return;
  boolean down=(ev.getID() == KeyEvent.KEY_PRESSED);
  keycode=ev.getKeyCode();
  key=ev.getKeyChar();
  location=ev.getKeyLocation();
  String fmt=ev.paramString().replaceAll(""String_Node_Str"",""String_Node_Str"");
  vlog.debug(String.format(fmt.replaceAll(""String_Node_Str"",""String_Node_Str"")));
  if (!ev.isActionKey()) {
    if (keycode >= KeyEvent.VK_0 && keycode <= KeyEvent.VK_9 && location == KeyEvent.KEY_LOCATION_NUMPAD)     keysym=Keysyms.KP_0 + keycode - KeyEvent.VK_0;
switch (keycode) {
case KeyEvent.VK_BACK_SPACE:
      keysym=Keysyms.BackSpace;
    break;
case KeyEvent.VK_TAB:
  keysym=Keysyms.Tab;
break;
case KeyEvent.VK_ENTER:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Enter;
 else keysym=Keysyms.Return;
break;
case KeyEvent.VK_ESCAPE:
keysym=Keysyms.Escape;
break;
case KeyEvent.VK_NUMPAD0:
keysym=Keysyms.KP_0;
break;
case KeyEvent.VK_NUMPAD1:
keysym=Keysyms.KP_1;
break;
case KeyEvent.VK_NUMPAD2:
keysym=Keysyms.KP_2;
break;
case KeyEvent.VK_NUMPAD3:
keysym=Keysyms.KP_3;
break;
case KeyEvent.VK_NUMPAD4:
keysym=Keysyms.KP_4;
break;
case KeyEvent.VK_NUMPAD5:
keysym=Keysyms.KP_5;
break;
case KeyEvent.VK_NUMPAD6:
keysym=Keysyms.KP_6;
break;
case KeyEvent.VK_NUMPAD7:
keysym=Keysyms.KP_7;
break;
case KeyEvent.VK_NUMPAD8:
keysym=Keysyms.KP_8;
break;
case KeyEvent.VK_NUMPAD9:
keysym=Keysyms.KP_9;
break;
case KeyEvent.VK_DECIMAL:
keysym=Keysyms.KP_Decimal;
break;
case KeyEvent.VK_ADD:
keysym=Keysyms.KP_Add;
break;
case KeyEvent.VK_SUBTRACT:
keysym=Keysyms.KP_Subtract;
break;
case KeyEvent.VK_MULTIPLY:
keysym=Keysyms.KP_Multiply;
break;
case KeyEvent.VK_DIVIDE:
keysym=Keysyms.KP_Divide;
break;
case KeyEvent.VK_DELETE:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Delete;
 else keysym=Keysyms.Delete;
break;
case KeyEvent.VK_CLEAR:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Begin;
 else keysym=Keysyms.Clear;
break;
case KeyEvent.VK_CONTROL:
if (ev.isAltGraphDown()) return;
if (down) modifiers|=Event.CTRL_MASK;
 else modifiers&=~Event.CTRL_MASK;
if (location == KeyEvent.KEY_LOCATION_RIGHT) keysym=Keysyms.Control_R;
 else keysym=Keysyms.Control_L;
break;
case KeyEvent.VK_ALT:
if (ev.isAltGraphDown()) return;
if (down) modifiers|=Event.ALT_MASK;
 else modifiers&=~Event.ALT_MASK;
if (location == KeyEvent.KEY_LOCATION_RIGHT) keysym=Keysyms.Alt_R;
 else keysym=Keysyms.Alt_L;
break;
case KeyEvent.VK_SHIFT:
if (down) modifiers|=Event.SHIFT_MASK;
 else modifiers&=~Event.SHIFT_MASK;
if (location == KeyEvent.KEY_LOCATION_RIGHT) keysym=Keysyms.Shift_R;
 else keysym=Keysyms.Shift_L;
break;
case KeyEvent.VK_META:
if (down) modifiers|=Event.META_MASK;
 else modifiers&=~Event.META_MASK;
if (location == KeyEvent.KEY_LOCATION_RIGHT) keysym=Keysyms.Meta_R;
 else keysym=Keysyms.Meta_L;
break;
default :
if (ev.isControlDown()) {
if ((key >= 1 && key <= 26 && !ev.isShiftDown()) || (key >= 27 && key <= 29 && ev.isShiftDown())) key+=96;
 else if (key < 32) key+=64;
 else if (key == KeyEvent.CHAR_UNDEFINED && keycode >= 0 && keycode <= 127) key=keycode;
}
keysym=UnicodeToKeysym.translate(key);
if (keysym == -1) return;
}
}
 else {
switch (keycode) {
case KeyEvent.VK_HOME:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Home;
 else keysym=Keysyms.Home;
break;
case KeyEvent.VK_END:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_End;
 else keysym=Keysyms.End;
break;
case KeyEvent.VK_PAGE_UP:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Page_Up;
 else keysym=Keysyms.Page_Up;
break;
case KeyEvent.VK_PAGE_DOWN:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Page_Down;
 else keysym=Keysyms.Page_Down;
break;
case KeyEvent.VK_UP:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Up;
 else keysym=Keysyms.Up;
break;
case KeyEvent.VK_DOWN:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Down;
 else keysym=Keysyms.Down;
break;
case KeyEvent.VK_LEFT:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Left;
 else keysym=Keysyms.Left;
break;
case KeyEvent.VK_RIGHT:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Right;
 else keysym=Keysyms.Right;
break;
case KeyEvent.VK_F1:
keysym=Keysyms.F1;
break;
case KeyEvent.VK_F2:
keysym=Keysyms.F2;
break;
case KeyEvent.VK_F3:
keysym=Keysyms.F3;
break;
case KeyEvent.VK_F4:
keysym=Keysyms.F4;
break;
case KeyEvent.VK_F5:
keysym=Keysyms.F5;
break;
case KeyEvent.VK_F6:
keysym=Keysyms.F6;
break;
case KeyEvent.VK_F7:
keysym=Keysyms.F7;
break;
case KeyEvent.VK_F8:
keysym=Keysyms.F8;
break;
case KeyEvent.VK_F9:
keysym=Keysyms.F9;
break;
case KeyEvent.VK_F10:
keysym=Keysyms.F10;
break;
case KeyEvent.VK_F11:
keysym=Keysyms.F11;
break;
case KeyEvent.VK_F12:
keysym=Keysyms.F12;
break;
case KeyEvent.VK_F13:
keysym=Keysyms.F13;
break;
case KeyEvent.VK_PRINTSCREEN:
keysym=Keysyms.Print;
break;
case KeyEvent.VK_PAUSE:
if (ev.isControlDown()) keysym=Keysyms.Break;
 else keysym=Keysyms.Pause;
break;
case KeyEvent.VK_INSERT:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Insert;
 else keysym=Keysyms.Insert;
break;
case KeyEvent.VK_KP_DOWN:
keysym=Keysyms.KP_Down;
break;
case KeyEvent.VK_KP_LEFT:
keysym=Keysyms.KP_Left;
break;
case KeyEvent.VK_KP_RIGHT:
keysym=Keysyms.KP_Right;
break;
case KeyEvent.VK_KP_UP:
keysym=Keysyms.KP_Up;
break;
case KeyEvent.VK_NUM_LOCK:
keysym=Keysyms.Num_Lock;
break;
case KeyEvent.VK_WINDOWS:
keysym=Keysyms.Super_L;
break;
case KeyEvent.VK_CONTEXT_MENU:
keysym=Keysyms.Menu;
break;
case KeyEvent.VK_SCROLL_LOCK:
keysym=Keysyms.Scroll_Lock;
break;
case KeyEvent.VK_CAPS_LOCK:
keysym=Keysyms.Caps_Lock;
break;
case KeyEvent.VK_BEGIN:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Begin;
 else keysym=Keysyms.Begin;
break;
default :
return;
}
}
writeKeyEvent(keysym,down);
}","public void writeKeyEvent(KeyEvent ev){
  int keysym=0, keycode, key, location, locationShift;
  if (shuttingDown)   return;
  boolean down=(ev.getID() == KeyEvent.KEY_PRESSED);
  keycode=ev.getKeyCode();
  if (keycode == KeyEvent.VK_UNDEFINED)   return;
  key=ev.getKeyChar();
  location=ev.getKeyLocation();
  if (location == KeyEvent.KEY_LOCATION_RIGHT)   locationShift=KEY_LOC_SHIFT_R;
 else   locationShift=KEY_LOC_SHIFT_L;
  if (!ev.isActionKey()) {
    if (keycode >= KeyEvent.VK_0 && keycode <= KeyEvent.VK_9 && location == KeyEvent.KEY_LOCATION_NUMPAD)     keysym=Keysyms.KP_0 + keycode - KeyEvent.VK_0;
switch (keycode) {
case KeyEvent.VK_BACK_SPACE:
      keysym=Keysyms.BackSpace;
    break;
case KeyEvent.VK_TAB:
  keysym=Keysyms.Tab;
break;
case KeyEvent.VK_ENTER:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Enter;
 else keysym=Keysyms.Return;
break;
case KeyEvent.VK_ESCAPE:
keysym=Keysyms.Escape;
break;
case KeyEvent.VK_NUMPAD0:
keysym=Keysyms.KP_0;
break;
case KeyEvent.VK_NUMPAD1:
keysym=Keysyms.KP_1;
break;
case KeyEvent.VK_NUMPAD2:
keysym=Keysyms.KP_2;
break;
case KeyEvent.VK_NUMPAD3:
keysym=Keysyms.KP_3;
break;
case KeyEvent.VK_NUMPAD4:
keysym=Keysyms.KP_4;
break;
case KeyEvent.VK_NUMPAD5:
keysym=Keysyms.KP_5;
break;
case KeyEvent.VK_NUMPAD6:
keysym=Keysyms.KP_6;
break;
case KeyEvent.VK_NUMPAD7:
keysym=Keysyms.KP_7;
break;
case KeyEvent.VK_NUMPAD8:
keysym=Keysyms.KP_8;
break;
case KeyEvent.VK_NUMPAD9:
keysym=Keysyms.KP_9;
break;
case KeyEvent.VK_DECIMAL:
keysym=Keysyms.KP_Decimal;
break;
case KeyEvent.VK_ADD:
keysym=Keysyms.KP_Add;
break;
case KeyEvent.VK_SUBTRACT:
keysym=Keysyms.KP_Subtract;
break;
case KeyEvent.VK_MULTIPLY:
keysym=Keysyms.KP_Multiply;
break;
case KeyEvent.VK_DIVIDE:
keysym=Keysyms.KP_Divide;
break;
case KeyEvent.VK_DELETE:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Delete;
 else keysym=Keysyms.Delete;
break;
case KeyEvent.VK_CLEAR:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Begin;
 else keysym=Keysyms.Clear;
break;
case KeyEvent.VK_CONTROL:
if (down) modifiers|=(Event.CTRL_MASK << locationShift);
 else modifiers&=~(Event.CTRL_MASK << locationShift);
if (location == KeyEvent.KEY_LOCATION_RIGHT) keysym=Keysyms.Control_R;
 else keysym=Keysyms.Control_L;
break;
case KeyEvent.VK_ALT:
if (down) modifiers|=(Event.ALT_MASK << locationShift);
 else modifiers&=~(Event.ALT_MASK << locationShift);
if (location == KeyEvent.KEY_LOCATION_RIGHT) keysym=Keysyms.Alt_R;
 else keysym=Keysyms.Alt_L;
break;
case KeyEvent.VK_SHIFT:
if (down) modifiers|=(Event.SHIFT_MASK << locationShift);
 else modifiers&=~(Event.SHIFT_MASK << locationShift);
if (location == KeyEvent.KEY_LOCATION_RIGHT) keysym=Keysyms.Shift_R;
 else keysym=Keysyms.Shift_L;
break;
case KeyEvent.VK_META:
if (down) modifiers|=(Event.META_MASK << locationShift);
 else modifiers&=~(Event.META_MASK << locationShift);
if (location == KeyEvent.KEY_LOCATION_RIGHT) keysym=Keysyms.Meta_R;
 else keysym=Keysyms.Meta_L;
break;
default :
if (ev.isControlDown()) {
if ((key >= 1 && key <= 26 && !ev.isShiftDown()) || (key >= 27 && key <= 29 && ev.isShiftDown())) key+=96;
 else if (key < 32) key+=64;
 else if (key == KeyEvent.CHAR_UNDEFINED && keycode >= 0 && keycode <= 127) key=keycode;
}
keysym=UnicodeToKeysym.translate(key);
if (keysym == -1) return;
}
}
 else {
switch (keycode) {
case KeyEvent.VK_HOME:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Home;
 else keysym=Keysyms.Home;
break;
case KeyEvent.VK_END:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_End;
 else keysym=Keysyms.End;
break;
case KeyEvent.VK_PAGE_UP:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Page_Up;
 else keysym=Keysyms.Page_Up;
break;
case KeyEvent.VK_PAGE_DOWN:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Page_Down;
 else keysym=Keysyms.Page_Down;
break;
case KeyEvent.VK_UP:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Up;
 else keysym=Keysyms.Up;
break;
case KeyEvent.VK_DOWN:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Down;
 else keysym=Keysyms.Down;
break;
case KeyEvent.VK_LEFT:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Left;
 else keysym=Keysyms.Left;
break;
case KeyEvent.VK_RIGHT:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Right;
 else keysym=Keysyms.Right;
break;
case KeyEvent.VK_BEGIN:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Begin;
 else keysym=Keysyms.Begin;
break;
case KeyEvent.VK_KP_LEFT:
keysym=Keysyms.KP_Left;
break;
case KeyEvent.VK_KP_UP:
keysym=Keysyms.KP_Up;
break;
case KeyEvent.VK_KP_RIGHT:
keysym=Keysyms.KP_Right;
break;
case KeyEvent.VK_KP_DOWN:
keysym=Keysyms.KP_Down;
break;
case KeyEvent.VK_F1:
keysym=Keysyms.F1;
break;
case KeyEvent.VK_F2:
keysym=Keysyms.F2;
break;
case KeyEvent.VK_F3:
keysym=Keysyms.F3;
break;
case KeyEvent.VK_F4:
keysym=Keysyms.F4;
break;
case KeyEvent.VK_F5:
keysym=Keysyms.F5;
break;
case KeyEvent.VK_F6:
keysym=Keysyms.F6;
break;
case KeyEvent.VK_F7:
keysym=Keysyms.F7;
break;
case KeyEvent.VK_F8:
keysym=Keysyms.F8;
break;
case KeyEvent.VK_F9:
keysym=Keysyms.F9;
break;
case KeyEvent.VK_F10:
keysym=Keysyms.F10;
break;
case KeyEvent.VK_F11:
keysym=Keysyms.F11;
break;
case KeyEvent.VK_F12:
keysym=Keysyms.F12;
break;
case KeyEvent.VK_F13:
keysym=Keysyms.F13;
break;
case KeyEvent.VK_F14:
keysym=Keysyms.F14;
break;
case KeyEvent.VK_F15:
keysym=Keysyms.F15;
break;
case KeyEvent.VK_F16:
keysym=Keysyms.F16;
break;
case KeyEvent.VK_F17:
keysym=Keysyms.F17;
break;
case KeyEvent.VK_F18:
keysym=Keysyms.F18;
break;
case KeyEvent.VK_F19:
keysym=Keysyms.F19;
break;
case KeyEvent.VK_F20:
keysym=Keysyms.F20;
break;
case KeyEvent.VK_F21:
keysym=Keysyms.F21;
break;
case KeyEvent.VK_F22:
keysym=Keysyms.F22;
break;
case KeyEvent.VK_F23:
keysym=Keysyms.F23;
break;
case KeyEvent.VK_F24:
keysym=Keysyms.F24;
break;
case KeyEvent.VK_PRINTSCREEN:
keysym=Keysyms.Print;
break;
case KeyEvent.VK_SCROLL_LOCK:
keysym=Keysyms.Scroll_Lock;
break;
case KeyEvent.VK_CAPS_LOCK:
keysym=Keysyms.Caps_Lock;
break;
case KeyEvent.VK_NUM_LOCK:
keysym=Keysyms.Num_Lock;
break;
case KeyEvent.VK_PAUSE:
if (ev.isControlDown()) keysym=Keysyms.Break;
 else keysym=Keysyms.Pause;
break;
case KeyEvent.VK_INSERT:
if (location == KeyEvent.KEY_LOCATION_NUMPAD) keysym=Keysyms.KP_Insert;
 else keysym=Keysyms.Insert;
break;
case KeyEvent.VK_KANJI:
keysym=Keysyms.Kanji;
break;
case KeyEvent.VK_KATAKANA:
keysym=Keysyms.Katakana;
break;
case KeyEvent.VK_HIRAGANA:
keysym=Keysyms.Hiragana;
break;
case KeyEvent.VK_PREVIOUS_CANDIDATE:
keysym=Keysyms.PreviousCandidate;
break;
case KeyEvent.VK_CODE_INPUT:
keysym=Keysyms.Codeinput;
break;
case KeyEvent.VK_JAPANESE_ROMAN:
keysym=Keysyms.Romaji;
break;
case KeyEvent.VK_KANA_LOCK:
keysym=Keysyms.Kana_Lock;
break;
case KeyEvent.VK_AGAIN:
keysym=Keysyms.Redo;
break;
case KeyEvent.VK_UNDO:
keysym=Keysyms.Undo;
break;
case KeyEvent.VK_FIND:
keysym=Keysyms.Find;
break;
case KeyEvent.VK_STOP:
keysym=Keysyms.Cancel;
break;
case KeyEvent.VK_HELP:
keysym=Keysyms.Help;
break;
case KeyEvent.VK_WINDOWS:
if (down) modifiers|=SUPER_MASK;
 else modifiers&=~SUPER_MASK;
keysym=Keysyms.Super_L;
break;
case KeyEvent.VK_CONTEXT_MENU:
keysym=Keysyms.Menu;
break;
default :
return;
}
}
if (keysym > 0) {
String fmt=ev.paramString().replaceAll(""String_Node_Str"",""String_Node_Str"");
vlog.debug(String.format(fmt.replaceAll(""String_Node_Str"",""String_Node_Str"")));
writeKeyEvent(keysym,down);
}
}",0.1642403882045539
111525,"public void keyTyped(KeyEvent e){
}","public void keyTyped(KeyEvent e){
  int keysym=UnicodeToKeysym.translate(e.getKeyChar());
  if (!cc.viewer.viewOnly.getValue())   if (!e.isActionKey() && keysym > 0)   cc.writeKeyEvent(e,keysym);
}",0.3017241379310345
111526,"public void keyReleased(KeyEvent e){
  if (!cc.viewer.viewOnly.getValue())   cc.writeKeyEvent(e);
}","public void keyReleased(KeyEvent e){
  int keysym=UnicodeToKeysym.translate(e.getKeyChar());
  if (!cc.viewer.viewOnly.getValue())   if (e.isActionKey() || keysym < 0)   cc.writeKeyEvent(e);
}",0.6804123711340206
111527,"public void keyPressed(KeyEvent e){
  if (e.getKeyCode() == MenuKey.getMenuKeyCode()) {
    int sx=(scaleWidthRatio == 1.00) ? lastX : (int)Math.floor(lastX * scaleWidthRatio);
    int sy=(scaleHeightRatio == 1.00) ? lastY : (int)Math.floor(lastY * scaleHeightRatio);
    java.awt.Point ev=new java.awt.Point(lastX,lastY);
    ev.translate(sx - lastX,sy - lastY);
    cc.showMenu((int)ev.getX(),(int)ev.getY());
    return;
  }
  int ctrlAltShiftMask=Event.SHIFT_MASK | Event.CTRL_MASK | Event.ALT_MASK;
  if ((e.getModifiers() & ctrlAltShiftMask) == ctrlAltShiftMask) {
switch (e.getKeyCode()) {
case KeyEvent.VK_A:
      cc.showAbout();
    return;
case KeyEvent.VK_F:
  cc.toggleFullScreen();
return;
case KeyEvent.VK_H:
cc.refresh();
return;
case KeyEvent.VK_I:
cc.showInfo();
return;
case KeyEvent.VK_O:
cc.options.showDialog(cc.viewport);
return;
case KeyEvent.VK_W:
VncViewer.newViewer(cc.viewer);
return;
case KeyEvent.VK_LEFT:
case KeyEvent.VK_RIGHT:
case KeyEvent.VK_UP:
case KeyEvent.VK_DOWN:
return;
}
}
if ((e.getModifiers() & Event.META_MASK) == Event.META_MASK) {
switch (e.getKeyCode()) {
case KeyEvent.VK_COMMA:
case KeyEvent.VK_N:
case KeyEvent.VK_W:
case KeyEvent.VK_I:
case KeyEvent.VK_R:
case KeyEvent.VK_L:
case KeyEvent.VK_F:
case KeyEvent.VK_Z:
case KeyEvent.VK_T:
return;
}
}
if (!cc.viewer.viewOnly.getValue()) cc.writeKeyEvent(e);
}","public void keyPressed(KeyEvent e){
  if (e.getKeyCode() == MenuKey.getMenuKeyCode()) {
    int sx=(scaleWidthRatio == 1.00) ? lastX : (int)Math.floor(lastX * scaleWidthRatio);
    int sy=(scaleHeightRatio == 1.00) ? lastY : (int)Math.floor(lastY * scaleHeightRatio);
    java.awt.Point ev=new java.awt.Point(lastX,lastY);
    ev.translate(sx - lastX,sy - lastY);
    cc.showMenu((int)ev.getX(),(int)ev.getY());
    return;
  }
  int ctrlAltShiftMask=Event.SHIFT_MASK | Event.CTRL_MASK | Event.ALT_MASK;
  if ((e.getModifiers() & ctrlAltShiftMask) == ctrlAltShiftMask) {
switch (e.getKeyCode()) {
case KeyEvent.VK_A:
      cc.showAbout();
    return;
case KeyEvent.VK_F:
  cc.toggleFullScreen();
return;
case KeyEvent.VK_H:
cc.refresh();
return;
case KeyEvent.VK_I:
cc.showInfo();
return;
case KeyEvent.VK_O:
cc.options.showDialog(cc.viewport);
return;
case KeyEvent.VK_W:
VncViewer.newViewer(cc.viewer);
return;
case KeyEvent.VK_LEFT:
case KeyEvent.VK_RIGHT:
case KeyEvent.VK_UP:
case KeyEvent.VK_DOWN:
return;
}
}
if ((e.getModifiers() & Event.META_MASK) == Event.META_MASK) {
switch (e.getKeyCode()) {
case KeyEvent.VK_COMMA:
case KeyEvent.VK_N:
case KeyEvent.VK_W:
case KeyEvent.VK_I:
case KeyEvent.VK_R:
case KeyEvent.VK_L:
case KeyEvent.VK_F:
case KeyEvent.VK_Z:
case KeyEvent.VK_T:
return;
}
}
int keysym=UnicodeToKeysym.translate(e.getKeyChar());
if (!cc.viewer.viewOnly.getValue()) if (e.isActionKey() || keysym < 0) cc.writeKeyEvent(e);
}",0.968293551834699
111528,"public void toggleFullScreen(){
  fullScreen=!fullScreen;
  if (!fullScreen)   menu.fullScreen.setSelected(false);
  if (viewport != null)   recreateViewport();
}","public void toggleFullScreen(){
  fullScreen=!fullScreen;
  menu.fullScreen.setSelected(fullScreen);
  if (viewport != null)   recreateViewport();
}",0.9096774193548388
111529,"public void getOptions(){
  autoSelect=options.autoSelect.isSelected();
  if (fullColour != options.fullColour.isSelected()) {
    formatChange=true;
    forceNonincremental=true;
  }
  fullColour=options.fullColour.isSelected();
  if (!fullColour) {
    int newLowColourLevel=(options.veryLowColour.isSelected() ? 0 : options.lowColour.isSelected() ? 1 : 2);
    if (newLowColourLevel != lowColourLevel) {
      lowColourLevel=newLowColourLevel;
      formatChange=true;
      forceNonincremental=true;
    }
  }
  int newEncoding=(options.zrle.isSelected() ? Encodings.encodingZRLE : options.hextile.isSelected() ? Encodings.encodingHextile : options.tight.isSelected() ? Encodings.encodingTight : Encodings.encodingRaw);
  if (newEncoding != currentEncoding) {
    currentEncoding=newEncoding;
    encodingChange=true;
  }
  viewer.customCompressLevel.setParam(options.customCompressLevel.isSelected());
  if (cp.customCompressLevel != viewer.customCompressLevel.getValue()) {
    cp.customCompressLevel=viewer.customCompressLevel.getValue();
    encodingChange=true;
  }
  if (Integer.parseInt(options.compressLevel.getSelectedItem().toString()) >= 0 && Integer.parseInt(options.compressLevel.getSelectedItem().toString()) <= 9) {
    viewer.compressLevel.setParam(options.compressLevel.getSelectedItem().toString());
  }
 else {
    viewer.compressLevel.setParam(viewer.compressLevel.getDefaultStr());
  }
  if (cp.compressLevel != viewer.compressLevel.getValue()) {
    cp.compressLevel=viewer.compressLevel.getValue();
    encodingChange=true;
  }
  viewer.noJpeg.setParam(!options.noJpeg.isSelected());
  if (cp.noJpeg != viewer.noJpeg.getValue()) {
    cp.noJpeg=viewer.noJpeg.getValue();
    encodingChange=true;
  }
  viewer.qualityLevel.setParam(options.qualityLevel.getSelectedItem().toString());
  if (cp.qualityLevel != viewer.qualityLevel.getValue()) {
    cp.qualityLevel=viewer.qualityLevel.getValue();
    encodingChange=true;
  }
  viewer.sendLocalUsername.setParam(options.sendLocalUsername.isSelected());
  viewer.viewOnly.setParam(options.viewOnly.isSelected());
  viewer.acceptClipboard.setParam(options.acceptClipboard.isSelected());
  viewer.sendClipboard.setParam(options.sendClipboard.isSelected());
  viewer.acceptBell.setParam(options.acceptBell.isSelected());
  String scaleString=options.scalingFactor.getSelectedItem().toString();
  String oldScaleFactor=viewer.scalingFactor.getValue();
  if (scaleString.equalsIgnoreCase(""String_Node_Str"")) {
    if (!oldScaleFactor.equals(scaleString)) {
      viewer.scalingFactor.setParam(""String_Node_Str"");
      if (desktop != null && !(options.fullScreen.isSelected() && fullScreen))       reconfigureViewport();
    }
  }
 else   if (scaleString.equalsIgnoreCase(""String_Node_Str"")) {
    if (!oldScaleFactor.equalsIgnoreCase(""String_Node_Str"")) {
      viewer.scalingFactor.setParam(""String_Node_Str"");
      if (desktop != null && !(options.fullScreen.isSelected() && fullScreen))       reconfigureViewport();
    }
  }
 else {
    scaleString=scaleString.substring(0,scaleString.length() - 1);
    if (!oldScaleFactor.equals(scaleString)) {
      viewer.scalingFactor.setParam(scaleString);
      if ((desktop != null) && (!oldScaleFactor.equalsIgnoreCase(""String_Node_Str"") || !oldScaleFactor.equalsIgnoreCase(""String_Node_Str""))) {
        if (!(options.fullScreen.isSelected() && fullScreen))         reconfigureViewport();
      }
    }
  }
  clipboardDialog.setSendingEnabled(viewer.sendClipboard.getValue());
  viewer.menuKey.setParam(MenuKey.getMenuKeySymbols()[options.menuKey.getSelectedIndex()].name);
  F8Menu.f8.setText(""String_Node_Str"" + KeyEvent.getKeyText(MenuKey.getMenuKeyCode()));
  setShared(options.shared.isSelected());
  viewer.useLocalCursor.setParam(options.useLocalCursor.isSelected());
  if (cp.supportsLocalCursor != viewer.useLocalCursor.getValue()) {
    cp.supportsLocalCursor=viewer.useLocalCursor.getValue();
    encodingChange=true;
    if (desktop != null)     desktop.resetLocalCursor();
  }
  checkEncodings();
  if (state() != RFBSTATE_NORMAL) {
    if (options.encNone.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeIdent);
    }
    if (options.encTLS.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeTLSIdent);
    }
    if (options.encX509.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeX509None);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeX509None);
      Security.DisableSecType(Security.secTypeX509Vnc);
      Security.DisableSecType(Security.secTypeX509Plain);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
    if (options.secNone.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509None);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeX509None);
    }
    if (options.secVnc.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
    }
 else {
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeX509Vnc);
    }
    if (options.secPlain.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
    }
 else {
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeX509Plain);
    }
    if (options.secIdent.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeIdent);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeIdent);
      Security.DisableSecType(Security.secTypeTLSIdent);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
  }
  if (options.fullScreen.isSelected() ^ fullScreen)   toggleFullScreen();
}","public void getOptions(){
  autoSelect=options.autoSelect.isSelected();
  if (fullColour != options.fullColour.isSelected()) {
    formatChange=true;
    forceNonincremental=true;
  }
  fullColour=options.fullColour.isSelected();
  if (!fullColour) {
    int newLowColourLevel=(options.veryLowColour.isSelected() ? 0 : options.lowColour.isSelected() ? 1 : 2);
    if (newLowColourLevel != lowColourLevel) {
      lowColourLevel=newLowColourLevel;
      formatChange=true;
      forceNonincremental=true;
    }
  }
  int newEncoding=(options.zrle.isSelected() ? Encodings.encodingZRLE : options.hextile.isSelected() ? Encodings.encodingHextile : options.tight.isSelected() ? Encodings.encodingTight : Encodings.encodingRaw);
  if (newEncoding != currentEncoding) {
    currentEncoding=newEncoding;
    encodingChange=true;
  }
  viewer.customCompressLevel.setParam(options.customCompressLevel.isSelected());
  if (cp.customCompressLevel != viewer.customCompressLevel.getValue()) {
    cp.customCompressLevel=viewer.customCompressLevel.getValue();
    encodingChange=true;
  }
  if (Integer.parseInt(options.compressLevel.getSelectedItem().toString()) >= 0 && Integer.parseInt(options.compressLevel.getSelectedItem().toString()) <= 9) {
    viewer.compressLevel.setParam(options.compressLevel.getSelectedItem().toString());
  }
 else {
    viewer.compressLevel.setParam(viewer.compressLevel.getDefaultStr());
  }
  if (cp.compressLevel != viewer.compressLevel.getValue()) {
    cp.compressLevel=viewer.compressLevel.getValue();
    encodingChange=true;
  }
  viewer.noJpeg.setParam(!options.noJpeg.isSelected());
  if (cp.noJpeg != viewer.noJpeg.getValue()) {
    cp.noJpeg=viewer.noJpeg.getValue();
    encodingChange=true;
  }
  viewer.qualityLevel.setParam(options.qualityLevel.getSelectedItem().toString());
  if (cp.qualityLevel != viewer.qualityLevel.getValue()) {
    cp.qualityLevel=viewer.qualityLevel.getValue();
    encodingChange=true;
  }
  viewer.sendLocalUsername.setParam(options.sendLocalUsername.isSelected());
  viewer.viewOnly.setParam(options.viewOnly.isSelected());
  viewer.acceptClipboard.setParam(options.acceptClipboard.isSelected());
  viewer.sendClipboard.setParam(options.sendClipboard.isSelected());
  viewer.acceptBell.setParam(options.acceptBell.isSelected());
  String scaleString=options.scalingFactor.getSelectedItem().toString();
  String oldScaleFactor=viewer.scalingFactor.getValue();
  if (scaleString.equalsIgnoreCase(""String_Node_Str"")) {
    scaleString=new String(""String_Node_Str"");
  }
 else   if (scaleString.equalsIgnoreCase(""String_Node_Str"")) {
    scaleString=new String(""String_Node_Str"");
  }
 else {
    scaleString=scaleString.substring(0,scaleString.length() - 1);
  }
  if (oldScaleFactor != scaleString) {
    viewer.scalingFactor.setParam(scaleString);
    if ((options.fullScreen.isSelected() == fullScreen) && (desktop != null))     recreateViewport();
  }
  clipboardDialog.setSendingEnabled(viewer.sendClipboard.getValue());
  viewer.menuKey.setParam(MenuKey.getMenuKeySymbols()[options.menuKey.getSelectedIndex()].name);
  F8Menu.f8.setText(""String_Node_Str"" + KeyEvent.getKeyText(MenuKey.getMenuKeyCode()));
  setShared(options.shared.isSelected());
  viewer.useLocalCursor.setParam(options.useLocalCursor.isSelected());
  if (cp.supportsLocalCursor != viewer.useLocalCursor.getValue()) {
    cp.supportsLocalCursor=viewer.useLocalCursor.getValue();
    encodingChange=true;
    if (desktop != null)     desktop.resetLocalCursor();
  }
  checkEncodings();
  if (state() != RFBSTATE_NORMAL) {
    if (options.encNone.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeIdent);
    }
    if (options.encTLS.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeTLSIdent);
    }
    if (options.encX509.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeX509None);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeX509None);
      Security.DisableSecType(Security.secTypeX509Vnc);
      Security.DisableSecType(Security.secTypeX509Plain);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
    if (options.secNone.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509None);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeX509None);
    }
    if (options.secVnc.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
    }
 else {
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeX509Vnc);
    }
    if (options.secPlain.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
    }
 else {
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeX509Plain);
    }
    if (options.secIdent.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeIdent);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeIdent);
      Security.DisableSecType(Security.secTypeTLSIdent);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
  }
  if (options.fullScreen.isSelected() ^ fullScreen)   toggleFullScreen();
}",0.922417055632648
111530,"public void setCursor(int w,int h,Point hotspot,int[] data,byte[] mask){
synchronized (cc.viewer.useLocalCursor) {
    if (!cc.viewer.useLocalCursor.getValue())     return;
  }
  hideLocalCursor();
  cursor.hotspot=hotspot;
  cursor.setSize(w,h);
  cursor.setPF(getPF());
  cursorBacking.setSize(cursor.width(),cursor.height());
  cursorBacking.setPF(getPF());
  cursor.data=new int[cursor.width() * cursor.height()];
  cursor.mask=new byte[cursor.maskLen()];
  int maskBytesPerRow=(w + 7) / 8;
  for (int y=0; y < h; y++) {
    for (int x=0; x < w; x++) {
      int byte_=y * maskBytesPerRow + x / 8;
      int bit=7 - x % 8;
      if ((mask[byte_] & (1 << bit)) > 0) {
        cursor.data[y * cursor.width() + x]=(0xff << 24) | (im.cm.getRed(data[y * w + x]) << 16) | (im.cm.getGreen(data[y * w + x]) << 8)| (im.cm.getBlue(data[y * w + x]));
      }
    }
    System.arraycopy(mask,y * maskBytesPerRow,cursor.mask,y * ((cursor.width() + 7) / 8),maskBytesPerRow);
  }
  int cw=(int)Math.floor((float)cursor.width() * scaleWidthRatio);
  int ch=(int)Math.floor((float)cursor.height() * scaleHeightRatio);
  Dimension bestSize=tk.getBestCursorSize(cw,ch);
  MemoryImageSource cursorSrc;
  cursorSrc=new MemoryImageSource(cursor.width(),cursor.height(),ColorModel.getRGBdefault(),cursor.data,0,cursor.width());
  Image srcImage=tk.createImage(cursorSrc);
  BufferedImage cursorImage;
  cursorImage=new BufferedImage(bestSize.width,bestSize.height,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g2=cursorImage.createGraphics();
  g2.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_SPEED);
  g2.drawImage(srcImage,0,0,(int)Math.min(cw,bestSize.width),(int)Math.min(ch,bestSize.height),0,0,cursor.width(),cursor.height(),null);
  g2.dispose();
  srcImage.flush();
  int x=(int)Math.floor((float)hotspot.x * scaleWidthRatio);
  int y=(int)Math.floor((float)hotspot.y * scaleHeightRatio);
  x=(int)Math.min(x,Math.max(bestSize.width - 1,0));
  y=(int)Math.min(y,Math.max(bestSize.height - 1,0));
  java.awt.Point hs=new java.awt.Point(x,y);
  if (!bestSize.equals(new Dimension(0,0)))   softCursor=tk.createCustomCursor(cursorImage,hs,""String_Node_Str"");
  cursorImage.flush();
  if (softCursor != null) {
    setCursor(softCursor);
    cursorAvailable=false;
    return;
  }
  if (!cursorAvailable) {
    cursorAvailable=true;
  }
  showLocalCursor();
}","public void setCursor(int w,int h,Point hotspot,int[] data,byte[] mask){
synchronized (cc.viewer.useLocalCursor) {
    if (!cc.viewer.useLocalCursor.getValue())     return;
  }
  hideLocalCursor();
  cursor.hotspot=(hotspot != null) ? hotspot : new Point(0,0);
  cursor.setSize(w,h);
  cursor.setPF(getPF());
  cursorBacking.setSize(cursor.width(),cursor.height());
  cursorBacking.setPF(getPF());
  cursor.data=new int[cursor.width() * cursor.height()];
  cursor.mask=new byte[cursor.maskLen()];
  int maskBytesPerRow=(w + 7) / 8;
  for (int y=0; y < h; y++) {
    for (int x=0; x < w; x++) {
      int byte_=y * maskBytesPerRow + x / 8;
      int bit=7 - x % 8;
      if ((mask[byte_] & (1 << bit)) > 0) {
        cursor.data[y * cursor.width() + x]=(0xff << 24) | (im.cm.getRed(data[y * w + x]) << 16) | (im.cm.getGreen(data[y * w + x]) << 8)| (im.cm.getBlue(data[y * w + x]));
      }
    }
    System.arraycopy(mask,y * maskBytesPerRow,cursor.mask,y * ((cursor.width() + 7) / 8),maskBytesPerRow);
  }
  int cw=(int)Math.floor((float)cursor.width() * scaleWidthRatio);
  int ch=(int)Math.floor((float)cursor.height() * scaleHeightRatio);
  Dimension bestSize=tk.getBestCursorSize(cw,ch);
  MemoryImageSource cursorSrc;
  cursorSrc=new MemoryImageSource(cursor.width(),cursor.height(),ColorModel.getRGBdefault(),cursor.data,0,cursor.width());
  Image srcImage=tk.createImage(cursorSrc);
  BufferedImage cursorImage;
  cursorImage=new BufferedImage(bestSize.width,bestSize.height,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g2=cursorImage.createGraphics();
  g2.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_SPEED);
  g2.drawImage(srcImage,0,0,(int)Math.min(cw,bestSize.width),(int)Math.min(ch,bestSize.height),0,0,cursor.width(),cursor.height(),null);
  g2.dispose();
  srcImage.flush();
  int x=(int)Math.floor((float)cursor.hotspot.x * scaleWidthRatio);
  int y=(int)Math.floor((float)cursor.hotspot.y * scaleHeightRatio);
  x=(int)Math.min(x,Math.max(bestSize.width - 1,0));
  y=(int)Math.min(y,Math.max(bestSize.height - 1,0));
  java.awt.Point hs=new java.awt.Point(x,y);
  if (!bestSize.equals(new Dimension(0,0)))   softCursor=tk.createCustomCursor(cursorImage,hs,""String_Node_Str"");
  cursorImage.flush();
  if (softCursor != null) {
    setCursor(softCursor);
    cursorAvailable=false;
    return;
  }
  if (!cursorAvailable) {
    cursorAvailable=true;
  }
  showLocalCursor();
}",0.9893505951138024
111531,"public void endDialog(){
  setVisible(false);
  setFocusable(false);
  setAlwaysOnTop(false);
  if (fullScreenWindow != null)   Viewport.setFullScreenWindow(fullScreenWindow);
}","public void endDialog(){
  setVisible(false);
  setFocusable(false);
  setAlwaysOnTop(false);
  fullScreenWindow=Viewport.getFullScreenWindow();
  if (fullScreenWindow != null)   Viewport.setFullScreenWindow(fullScreenWindow);
}",0.8740740740740741
111532,"public void componentResized(ComponentEvent e){
  if ((getExtendedState() != JFrame.MAXIMIZED_BOTH) && cc.fullScreen) {
    cc.toggleFullScreen();
  }
  String scaleString=cc.viewer.scalingFactor.getValue();
  if (scaleString.equalsIgnoreCase(""String_Node_Str"") || scaleString.equalsIgnoreCase(""String_Node_Str"")) {
    if ((sp.getSize().width != cc.desktop.scaledWidth) || (sp.getSize().height != cc.desktop.scaledHeight)) {
      int policy=ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER;
      sp.setHorizontalScrollBarPolicy(policy);
      cc.desktop.setScaledSize();
      sp.setSize(new Dimension(cc.desktop.scaledWidth,cc.desktop.scaledHeight));
      sp.validate();
      if (getExtendedState() != JFrame.MAXIMIZED_BOTH && scaleString.equalsIgnoreCase(""String_Node_Str"")) {
        int w=cc.desktop.scaledWidth + getInsets().left + getInsets().right;
        int h=cc.desktop.scaledHeight + getInsets().top + getInsets().bottom;
        setSize(w,h);
      }
      if (cc.desktop.cursor != null) {
        Cursor cursor=cc.desktop.cursor;
        cc.setCursor(cursor.width(),cursor.height(),cursor.hotspot,cursor.data,cursor.mask);
      }
    }
  }
 else {
    int policy=ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED;
    sp.setHorizontalScrollBarPolicy(policy);
    sp.validate();
  }
}","public void componentResized(ComponentEvent e){
  String scaleString=cc.viewer.scalingFactor.getValue();
  if (scaleString.equalsIgnoreCase(""String_Node_Str"") || scaleString.equalsIgnoreCase(""String_Node_Str"")) {
    if ((sp.getSize().width != cc.desktop.scaledWidth) || (sp.getSize().height != cc.desktop.scaledHeight)) {
      int policy=ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER;
      sp.setHorizontalScrollBarPolicy(policy);
      cc.desktop.setScaledSize();
      sp.setSize(new Dimension(cc.desktop.scaledWidth,cc.desktop.scaledHeight));
      sp.validate();
      if (getExtendedState() != JFrame.MAXIMIZED_BOTH && scaleString.equalsIgnoreCase(""String_Node_Str"") && !cc.fullScreen) {
        int w=cc.desktop.scaledWidth + getInsets().left + getInsets().right;
        int h=cc.desktop.scaledHeight + getInsets().top + getInsets().bottom;
        setSize(w,h);
      }
    }
  }
 else {
    int policy=ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED;
    sp.setHorizontalScrollBarPolicy(policy);
    sp.validate();
  }
  if (cc.desktop.cursor != null) {
    Cursor cursor=cc.desktop.cursor;
    cc.setCursor(cursor.width(),cursor.height(),cursor.hotspot,cursor.data,cursor.mask);
  }
}",0.2317219336795845
111533,"public Viewport(String name,CConn cc_){
  cc=cc_;
  setTitle(name + ""String_Node_Str"");
  setFocusable(false);
  setFocusTraversalKeysEnabled(false);
  UIManager.getDefaults().put(""String_Node_Str"",new UIDefaults.LazyInputMap(new Object[]{}));
  sp=new JScrollPane();
  sp.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));
  getContentPane().add(sp);
  addWindowFocusListener(new WindowAdapter(){
    public void windowGainedFocus(    WindowEvent e){
      if (isVisible())       sp.getViewport().getView().requestFocusInWindow();
    }
  }
);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      if (VncViewer.nViewers == 1) {
        cc.viewer.exit(1);
      }
 else {
        cc.close();
      }
    }
  }
);
  addComponentListener(new ComponentAdapter(){
    public void componentResized(    ComponentEvent e){
      if ((getExtendedState() != JFrame.MAXIMIZED_BOTH) && cc.fullScreen) {
        cc.toggleFullScreen();
      }
      String scaleString=cc.viewer.scalingFactor.getValue();
      if (scaleString.equalsIgnoreCase(""String_Node_Str"") || scaleString.equalsIgnoreCase(""String_Node_Str"")) {
        if ((sp.getSize().width != cc.desktop.scaledWidth) || (sp.getSize().height != cc.desktop.scaledHeight)) {
          int policy=ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER;
          sp.setHorizontalScrollBarPolicy(policy);
          cc.desktop.setScaledSize();
          sp.setSize(new Dimension(cc.desktop.scaledWidth,cc.desktop.scaledHeight));
          sp.validate();
          if (getExtendedState() != JFrame.MAXIMIZED_BOTH && scaleString.equalsIgnoreCase(""String_Node_Str"")) {
            int w=cc.desktop.scaledWidth + getInsets().left + getInsets().right;
            int h=cc.desktop.scaledHeight + getInsets().top + getInsets().bottom;
            setSize(w,h);
          }
          if (cc.desktop.cursor != null) {
            Cursor cursor=cc.desktop.cursor;
            cc.setCursor(cursor.width(),cursor.height(),cursor.hotspot,cursor.data,cursor.mask);
          }
        }
      }
 else {
        int policy=ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED;
        sp.setHorizontalScrollBarPolicy(policy);
        sp.validate();
      }
    }
  }
);
}","public Viewport(String name,CConn cc_){
  cc=cc_;
  setTitle(name + ""String_Node_Str"");
  setFocusable(false);
  setFocusTraversalKeysEnabled(false);
  UIManager.getDefaults().put(""String_Node_Str"",new UIDefaults.LazyInputMap(new Object[]{}));
  sp=new JScrollPane();
  sp.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));
  getContentPane().add(sp);
  addWindowFocusListener(new WindowAdapter(){
    public void windowGainedFocus(    WindowEvent e){
      if (isVisible())       sp.getViewport().getView().requestFocusInWindow();
    }
  }
);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      if (VncViewer.nViewers == 1) {
        cc.viewer.exit(1);
      }
 else {
        cc.close();
      }
    }
  }
);
  addComponentListener(new ComponentAdapter(){
    public void componentResized(    ComponentEvent e){
      String scaleString=cc.viewer.scalingFactor.getValue();
      if (scaleString.equalsIgnoreCase(""String_Node_Str"") || scaleString.equalsIgnoreCase(""String_Node_Str"")) {
        if ((sp.getSize().width != cc.desktop.scaledWidth) || (sp.getSize().height != cc.desktop.scaledHeight)) {
          int policy=ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER;
          sp.setHorizontalScrollBarPolicy(policy);
          cc.desktop.setScaledSize();
          sp.setSize(new Dimension(cc.desktop.scaledWidth,cc.desktop.scaledHeight));
          sp.validate();
          if (getExtendedState() != JFrame.MAXIMIZED_BOTH && scaleString.equalsIgnoreCase(""String_Node_Str"") && !cc.fullScreen) {
            int w=cc.desktop.scaledWidth + getInsets().left + getInsets().right;
            int h=cc.desktop.scaledHeight + getInsets().top + getInsets().bottom;
            setSize(w,h);
          }
        }
      }
 else {
        int policy=ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED;
        sp.setHorizontalScrollBarPolicy(policy);
        sp.validate();
      }
      if (cc.desktop.cursor != null) {
        Cursor cursor=cc.desktop.cursor;
        cc.setCursor(cursor.width(),cursor.height(),cursor.hotspot,cursor.data,cursor.mask);
      }
    }
  }
);
}",0.5210199862164024
111534,"public void setPF(PixelFormat pf){
  if (!(pf.bpp == 32) && !(pf.bpp == 16) && !(pf.bpp == 8))   throw new Exception(""String_Node_Str"" + pf.bpp + ""String_Node_Str"");
  format=pf;
switch (pf.depth) {
case 3:
case 6:
case 8:
    int rmask=pf.redMax << pf.redShift;
  int gmask=pf.greenMax << pf.greenShift;
int bmask=pf.blueMax << pf.blueShift;
if (pf.trueColour) cm=new DirectColorModel(8,rmask,gmask,bmask);
 else cm=new IndexColorModel(8,256,new byte[256],new byte[256],new byte[256]);
break;
case 16:
cm=new DirectColorModel(32,0xF800,0x07C0,0x003E,(0xff << 24));
break;
case 24:
cm=new DirectColorModel(32,(0xff << 16),(0xff << 8),0xff,(0xff << 24));
break;
case 32:
cm=new DirectColorModel(32,(0xff << pf.redShift),(0xff << pf.greenShift),(0xff << pf.blueShift),(0xff << 24));
break;
default :
throw new Exception(""String_Node_Str"" + pf.depth + ""String_Node_Str"");
}
}","public void setPF(PixelFormat pf){
  if (!(pf.bpp == 32) && !(pf.bpp == 16) && !(pf.bpp == 8))   throw new Exception(""String_Node_Str"" + pf.bpp + ""String_Node_Str"");
  format=pf;
switch (pf.depth) {
case 3:
case 6:
case 8:
    if (cm != null && cm instanceof IndexColorModel)     break;
  int rmask=pf.redMax << pf.redShift;
int gmask=pf.greenMax << pf.greenShift;
int bmask=pf.blueMax << pf.blueShift;
cm=new DirectColorModel(8,rmask,gmask,bmask);
break;
case 16:
cm=new DirectColorModel(32,0xF800,0x07C0,0x003E,(0xff << 24));
break;
case 24:
cm=new DirectColorModel(32,(0xff << 16),(0xff << 8),0xff,(0xff << 24));
break;
case 32:
cm=new DirectColorModel(32,(0xff << pf.redShift),(0xff << pf.greenShift),(0xff << pf.blueShift),(0xff << 24));
break;
default :
throw new Exception(""String_Node_Str"" + pf.depth + ""String_Node_Str"");
}
}",0.8499413833528722
111535,"public void updateColourMap(){
  cm=new IndexColorModel(8,nColours,reds,greens,blues);
  createImage(width_,height_);
}","public void updateColourMap(){
  super.updateColourMap();
  createImage(width_,height_);
}",0.7368421052631579
111536,"final public void fillRect(int x,int y,int w,int h,int pix){
  if (overlapsCursor(x,y,w,h))   hideLocalCursor();
  im.fillRect(x,y,w,h,pix);
  damageRect(new Rect(x,y,x + w,y + h));
  if (softCursor == null)   showLocalCursor();
}","final public void fillRect(int x,int y,int w,int h,int pix){
  if (overlapsCursor(x,y,w,h))   hideLocalCursor();
  im.fillRect(x,y,w,h,pix);
  damageRect(new Rect(x,y,x + w,y + h));
  if (!cc.cp.supportsLocalCursor)   showLocalCursor();
}",0.8717948717948718
111537,"synchronized private void showLocalCursor(){
  if (cursorAvailable && !cursorVisible) {
    if (!im.getPF().equal(cursor.getPF()) || cursor.width() == 0 || cursor.height() == 0) {
      vlog.debug(""String_Node_Str"");
      cursorAvailable=false;
      return;
    }
    cursorVisible=true;
    if (softCursor != null)     return;
    int cursorLeft=cursor.hotspot.x;
    int cursorTop=cursor.hotspot.y;
    int cursorRight=cursorLeft + cursor.width();
    int cursorBottom=cursorTop + cursor.height();
    int x=(cursorLeft >= 0 ? cursorLeft : 0);
    int y=(cursorTop >= 0 ? cursorTop : 0);
    int w=((cursorRight < im.width() ? cursorRight : im.width()) - x);
    int h=((cursorBottom < im.height() ? cursorBottom : im.height()) - y);
    cursorBackingX=x;
    cursorBackingY=y;
    cursorBacking.setSize(w,h);
    for (int j=0; j < h; j++)     System.arraycopy(im.data,(y + j) * im.width() + x,cursorBacking.data,j * w,w);
    im.maskRect(cursorLeft,cursorTop,cursor.width(),cursor.height(),cursor.data,cursor.mask);
  }
}","synchronized private void showLocalCursor(){
  if (cursorAvailable && !cursorVisible) {
    if (!im.getPF().equal(cursor.getPF()) || cursor.width() == 0 || cursor.height() == 0) {
      vlog.debug(""String_Node_Str"");
      cursorAvailable=false;
      return;
    }
    cursorVisible=true;
    if (cc.cp.supportsLocalCursor)     return;
    int cursorLeft=cursor.hotspot.x;
    int cursorTop=cursor.hotspot.y;
    int cursorRight=cursorLeft + cursor.width();
    int cursorBottom=cursorTop + cursor.height();
    int x=(cursorLeft >= 0 ? cursorLeft : 0);
    int y=(cursorTop >= 0 ? cursorTop : 0);
    int w=((cursorRight < im.width() ? cursorRight : im.width()) - x);
    int h=((cursorBottom < im.height() ? cursorBottom : im.height()) - y);
    cursorBackingX=x;
    cursorBackingY=y;
    cursorBacking.setSize(w,h);
    for (int j=0; j < h; j++)     System.arraycopy(im.data,(y + j) * im.width() + x,cursorBacking.data,j * w,w);
    im.maskRect(cursorLeft,cursorTop,cursor.width(),cursor.height(),cursor.data,cursor.mask);
  }
}",0.9849441476444876
111538,"/** 
 * Mouse-Motion callback function 
 */
private void mouseMotionCB(MouseEvent e){
  if (!cc.viewer.viewOnly.getValue())   cc.writePointerEvent(e);
  if (cursorAvailable) {
    if (e.getX() != cursorPosX || e.getY() != cursorPosY) {
      hideLocalCursor();
      if (e.getX() >= 0 && e.getX() < im.width() && e.getY() >= 0 && e.getY() < im.height()) {
        cursorPosX=e.getX();
        cursorPosY=e.getY();
        if (softCursor == null)         showLocalCursor();
      }
    }
  }
  lastX=e.getX();
  lastY=e.getY();
}","/** 
 * Mouse-Motion callback function 
 */
private void mouseMotionCB(MouseEvent e){
  if (!cc.viewer.viewOnly.getValue())   cc.writePointerEvent(e);
  if (cursorAvailable) {
    if (e.getX() != cursorPosX || e.getY() != cursorPosY) {
      hideLocalCursor();
      if (e.getX() >= 0 && e.getX() < im.width() && e.getY() >= 0 && e.getY() < im.height()) {
        cursorPosX=e.getX();
        cursorPosY=e.getY();
        if (!cc.cp.supportsLocalCursor)         showLocalCursor();
      }
    }
  }
  lastX=e.getX();
  lastY=e.getY();
}",0.9699248120300752
111539,"public void paintComponent(Graphics g){
  Graphics2D g2=(Graphics2D)g;
  if (cc.cp.width != scaledWidth || cc.cp.height != scaledHeight) {
    g2.drawImage(im.getImage(),0,0,scaledWidth,scaledHeight,null);
  }
 else {
    g2.drawImage(im.getImage(),0,0,null);
  }
  g2.dispose();
}","public void paintComponent(Graphics g){
  Graphics2D g2=(Graphics2D)g;
  if (cc.cp.width != scaledWidth || cc.cp.height != scaledHeight) {
    g2.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
    g2.drawImage(im.getImage(),0,0,scaledWidth,scaledHeight,null);
  }
 else {
    g2.drawImage(im.getImage(),0,0,null);
  }
  g2.dispose();
}",0.8606431852986217
111540,"void resetLocalCursor(){
  hideLocalCursor();
  cursorAvailable=false;
}","void resetLocalCursor(){
  if (cc.cp.supportsLocalCursor) {
    if (softCursor != null)     setCursor(softCursor);
  }
 else {
    setCursor(nullCursor);
  }
  hideLocalCursor();
  cursorAvailable=false;
}",0.51985559566787
111541,"public DesktopWindow(int width,int height,PixelFormat serverPF,CConn cc_){
  cc=cc_;
  setSize(width,height);
  setBackground(Color.BLACK);
  setOpaque(true);
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsDevice gd=ge.getDefaultScreenDevice();
  GraphicsConfiguration gc=gd.getDefaultConfiguration();
  BufferCapabilities bufCaps=gc.getBufferCapabilities();
  ImageCapabilities imgCaps=gc.getImageCapabilities();
  if (bufCaps.isPageFlipping() || bufCaps.isMultiBufferAvailable() || imgCaps.isAccelerated()) {
    vlog.debug(""String_Node_Str"");
  }
 else {
    vlog.debug(""String_Node_Str"");
  }
  im=new BIPixelBuffer(width,height,cc,this);
  cursor=new Cursor();
  cursorBacking=new ManagedPixelBuffer();
  addMouseListener(this);
  addMouseWheelListener(this);
  addMouseMotionListener(this);
  addKeyListener(this);
  addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      checkClipboard();
    }
  }
);
  setFocusTraversalKeysEnabled(false);
  setFocusable(true);
}","public DesktopWindow(int width,int height,PixelFormat serverPF,CConn cc_){
  cc=cc_;
  setSize(width,height);
  setBackground(Color.BLACK);
  setOpaque(true);
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsDevice gd=ge.getDefaultScreenDevice();
  GraphicsConfiguration gc=gd.getDefaultConfiguration();
  BufferCapabilities bufCaps=gc.getBufferCapabilities();
  ImageCapabilities imgCaps=gc.getImageCapabilities();
  if (bufCaps.isPageFlipping() || bufCaps.isMultiBufferAvailable() || imgCaps.isAccelerated()) {
    vlog.debug(""String_Node_Str"");
  }
 else {
    vlog.debug(""String_Node_Str"");
  }
  im=new BIPixelBuffer(width,height,cc,this);
  cursor=new Cursor();
  cursorBacking=new ManagedPixelBuffer();
  Dimension bestSize=tk.getBestCursorSize(16,16);
  BufferedImage cursorImage;
  cursorImage=new BufferedImage(bestSize.width,bestSize.height,BufferedImage.TYPE_INT_ARGB);
  java.awt.Point hotspot=new java.awt.Point(0,0);
  nullCursor=tk.createCustomCursor(cursorImage,hotspot,""String_Node_Str"");
  if (!cc.cp.supportsLocalCursor && !bestSize.equals(new Dimension(0,0)))   setCursor(nullCursor);
  addMouseListener(this);
  addMouseWheelListener(this);
  addMouseMotionListener(this);
  addKeyListener(this);
  addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      checkClipboard();
    }
  }
);
  setFocusTraversalKeysEnabled(false);
  setFocusable(true);
}",0.8407079646017699
111542,"public void updateWindow(){
  Rect r=damage;
  if (!r.is_empty()) {
    paintImmediately(r.tl.x,r.tl.y,r.width(),r.height());
    damage.clear();
  }
}","public void updateWindow(){
  Rect r=damage;
  if (!r.is_empty()) {
    if (cc.cp.width != scaledWidth || cc.cp.height != scaledHeight) {
      int x=(int)Math.floor(r.tl.x * scaleWidthRatio);
      int y=(int)Math.floor(r.tl.y * scaleHeightRatio);
      int width=(int)Math.ceil(r.width() * scaleWidthRatio) + 1;
      int height=(int)Math.ceil(r.height() * scaleHeightRatio) + 1;
      paintImmediately(x,y,width,height);
    }
 else {
      paintImmediately(r.tl.x,r.tl.y,r.width(),r.height());
    }
    damage.clear();
  }
}",0.3058823529411765
111543,"final public void imageRect(int x,int y,int w,int h,Object pix){
  if (overlapsCursor(x,y,w,h))   hideLocalCursor();
  im.imageRect(x,y,w,h,pix);
  damageRect(new Rect(x,y,x + w,y + h));
  if (softCursor == null)   showLocalCursor();
}","final public void imageRect(int x,int y,int w,int h,Object pix){
  if (overlapsCursor(x,y,w,h))   hideLocalCursor();
  im.imageRect(x,y,w,h,pix);
  damageRect(new Rect(x,y,x + w,y + h));
  if (!cc.cp.supportsLocalCursor)   showLocalCursor();
}",0.8744769874476988
111544,"public void setCursor(int w,int h,Point hotspot,int[] data,byte[] mask){
synchronized (cc.viewer.useLocalCursor) {
    if (!cc.viewer.useLocalCursor.getValue())     return;
  }
  hideLocalCursor();
  if (hotspot == null)   hotspot=new Point(0,0);
  cursor.hotspot=hotspot;
  Dimension bsc=tk.getBestCursorSize(w,h);
  cursor.setSize(((int)bsc.getWidth() > w ? (int)bsc.getWidth() : w),((int)bsc.getHeight() > h ? (int)bsc.getHeight() : h));
  cursor.setPF(getPF());
  cursorBacking.setSize(cursor.width(),cursor.height());
  cursorBacking.setPF(getPF());
  cursor.data=new int[cursor.width() * cursor.height()];
  cursor.mask=new byte[cursor.maskLen()];
  int maskBytesPerRow=(w + 7) / 8;
  for (int y=0; y < h; y++) {
    for (int x=0; x < w; x++) {
      int byte_=y * maskBytesPerRow + x / 8;
      int bit=7 - x % 8;
      if ((mask[byte_] & (1 << bit)) > 0) {
        cursor.data[y * cursor.width() + x]=(0xff << 24) | (im.cm.getRed(data[y * w + x]) << 16) | (im.cm.getGreen(data[y * w + x]) << 8)| (im.cm.getBlue(data[y * w + x]));
      }
    }
    System.arraycopy(mask,y * maskBytesPerRow,cursor.mask,y * ((cursor.width() + 7) / 8),maskBytesPerRow);
  }
  MemoryImageSource bitmap=new MemoryImageSource(cursor.width(),cursor.height(),ColorModel.getRGBdefault(),cursor.data,0,cursor.width());
  int cw=(int)Math.floor((float)cursor.width() * scaleWidthRatio);
  int ch=(int)Math.floor((float)cursor.height() * scaleHeightRatio);
  int hint=java.awt.Image.SCALE_DEFAULT;
  hotspot=new Point((int)Math.floor((float)hotspot.x * scaleWidthRatio),(int)Math.floor((float)hotspot.y * scaleHeightRatio));
  Image cursorImage=(cw <= 0 || ch <= 0) ? tk.createImage(bitmap) : tk.createImage(bitmap).getScaledInstance(cw,ch,hint);
  softCursor=tk.createCustomCursor(cursorImage,new java.awt.Point(hotspot.x,hotspot.y),""String_Node_Str"");
  cursorImage.flush();
  if (softCursor != null) {
    setCursor(softCursor);
    cursorAvailable=true;
    return;
  }
  if (!cursorAvailable) {
    cursorAvailable=true;
  }
  showLocalCursor();
  return;
}","public void setCursor(int w,int h,Point hotspot,int[] data,byte[] mask){
synchronized (cc.viewer.useLocalCursor) {
    if (!cc.viewer.useLocalCursor.getValue())     return;
  }
  hideLocalCursor();
  cursor.hotspot=hotspot;
  cursor.setSize(w,h);
  cursor.setPF(getPF());
  cursorBacking.setSize(cursor.width(),cursor.height());
  cursorBacking.setPF(getPF());
  cursor.data=new int[cursor.width() * cursor.height()];
  cursor.mask=new byte[cursor.maskLen()];
  int maskBytesPerRow=(w + 7) / 8;
  for (int y=0; y < h; y++) {
    for (int x=0; x < w; x++) {
      int byte_=y * maskBytesPerRow + x / 8;
      int bit=7 - x % 8;
      if ((mask[byte_] & (1 << bit)) > 0) {
        cursor.data[y * cursor.width() + x]=(0xff << 24) | (im.cm.getRed(data[y * w + x]) << 16) | (im.cm.getGreen(data[y * w + x]) << 8)| (im.cm.getBlue(data[y * w + x]));
      }
    }
    System.arraycopy(mask,y * maskBytesPerRow,cursor.mask,y * ((cursor.width() + 7) / 8),maskBytesPerRow);
  }
  int cw=(int)Math.floor((float)cursor.width() * scaleWidthRatio);
  int ch=(int)Math.floor((float)cursor.height() * scaleHeightRatio);
  Dimension bestSize=tk.getBestCursorSize(cw,ch);
  MemoryImageSource cursorSrc;
  cursorSrc=new MemoryImageSource(cursor.width(),cursor.height(),ColorModel.getRGBdefault(),cursor.data,0,cursor.width());
  Image srcImage=tk.createImage(cursorSrc);
  BufferedImage cursorImage;
  cursorImage=new BufferedImage(bestSize.width,bestSize.height,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g2=cursorImage.createGraphics();
  g2.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_SPEED);
  g2.drawImage(srcImage,0,0,(int)Math.min(cw,bestSize.width),(int)Math.min(ch,bestSize.height),0,0,cursor.width(),cursor.height(),this);
  g2.dispose();
  srcImage.flush();
  int x=(int)Math.floor((float)hotspot.x * scaleWidthRatio);
  int y=(int)Math.floor((float)hotspot.y * scaleHeightRatio);
  x=(int)Math.min(x,Math.max(bestSize.width - 1,0));
  y=(int)Math.min(y,Math.max(bestSize.height - 1,0));
  java.awt.Point hs=new java.awt.Point(x,y);
  if (!bestSize.equals(new Dimension(0,0)))   softCursor=tk.createCustomCursor(cursorImage,hs,""String_Node_Str"");
  cursorImage.flush();
  if (softCursor != null) {
    setCursor(softCursor);
    cursorAvailable=true;
    return;
  }
  if (!cursorAvailable) {
    cursorAvailable=true;
  }
  showLocalCursor();
  return;
}",0.6036199095022624
111545,"private static Boolean runCommand(String cmd){
  try {
    JSch jsch=new JSch();
    String homeDir=new String(""String_Node_Str"");
    try {
      homeDir=System.getProperty(""String_Node_Str"");
    }
 catch (    java.security.AccessControlException e) {
      System.out.println(""String_Node_Str"");
    }
    File knownHosts=new File(homeDir + ""String_Node_Str"");
    if (knownHosts.exists() && knownHosts.canRead())     jsch.setKnownHosts(knownHosts.getAbsolutePath());
    ArrayList<File> privateKeys=new ArrayList<File>();
    privateKeys.add(new File(homeDir + ""String_Node_Str""));
    privateKeys.add(new File(homeDir + ""String_Node_Str""));
    for (Iterator i=privateKeys.iterator(); i.hasNext(); ) {
      File privateKey=(File)i.next();
      if (privateKey.exists() && privateKey.canRead())       jsch.addIdentity(privateKey.getAbsolutePath());
    }
    PasswdDialog dlg=new PasswdDialog(new String(""String_Node_Str""),false,false);
    dlg.userEntry.setText((String)System.getProperties().get(""String_Node_Str""));
    Session session=jsch.getSession(dlg.userEntry.getText(),tunnelEndpoint,22);
    session.setUserInfo(dlg);
    session.connect();
    String[] tokens=cmd.split(""String_Node_Str"");
    for (int i=0; i < tokens.length; i++) {
      if (tokens[i].equals(""String_Node_Str"")) {
        String[] par=tokens[++i].split(""String_Node_Str"");
        int localPort=Integer.parseInt(par[0].trim());
        String remoteHost=par[1].trim();
        int remotePort=Integer.parseInt(par[2].trim());
        session.setPortForwardingL(localPort,remoteHost,remotePort);
      }
 else       if (tokens[i].equals(""String_Node_Str"")) {
        String[] par=tokens[++i].split(""String_Node_Str"");
        int remotePort=Integer.parseInt(par[0].trim());
        String localHost=par[1].trim();
        int localPort=Integer.parseInt(par[2].trim());
        session.setPortForwardingR(remotePort,localHost,localPort);
      }
    }
  }
 catch (  java.lang.Exception e) {
    System.out.println(""String_Node_Str"" + e.toString());
    return false;
  }
  return true;
}","private static Boolean runCommand(String cmd){
  try {
    JSch jsch=new JSch();
    String homeDir=new String(""String_Node_Str"");
    try {
      homeDir=System.getProperty(""String_Node_Str"");
    }
 catch (    java.security.AccessControlException e) {
      System.out.println(""String_Node_Str"");
    }
    File knownHosts=new File(homeDir + ""String_Node_Str"");
    if (knownHosts.exists() && knownHosts.canRead())     jsch.setKnownHosts(knownHosts.getAbsolutePath());
    ArrayList<File> privateKeys=new ArrayList<File>();
    privateKeys.add(new File(homeDir + ""String_Node_Str""));
    privateKeys.add(new File(homeDir + ""String_Node_Str""));
    for (Iterator i=privateKeys.iterator(); i.hasNext(); ) {
      File privateKey=(File)i.next();
      if (privateKey.exists() && privateKey.canRead())       jsch.addIdentity(privateKey.getAbsolutePath());
    }
    PasswdDialog dlg=new PasswdDialog(new String(""String_Node_Str""),false,false);
    dlg.promptPassword(new String(""String_Node_Str""));
    Session session=jsch.getSession(dlg.userEntry.getText(),tunnelEndpoint,22);
    session.setPassword(new String(dlg.passwdEntry.getPassword()));
    session.connect();
    String[] tokens=cmd.split(""String_Node_Str"");
    for (int i=0; i < tokens.length; i++) {
      if (tokens[i].equals(""String_Node_Str"")) {
        String[] par=tokens[++i].split(""String_Node_Str"");
        int localPort=Integer.parseInt(par[0].trim());
        String remoteHost=par[1].trim();
        int remotePort=Integer.parseInt(par[2].trim());
        session.setPortForwardingL(localPort,remoteHost,remotePort);
      }
 else       if (tokens[i].equals(""String_Node_Str"")) {
        String[] par=tokens[++i].split(""String_Node_Str"");
        int remotePort=Integer.parseInt(par[0].trim());
        String localHost=par[1].trim();
        int localPort=Integer.parseInt(par[2].trim());
        session.setPortForwardingR(remotePort,localHost,localPort);
      }
    }
  }
 catch (  java.lang.Exception e) {
    System.out.println(""String_Node_Str"" + e.toString());
    return false;
  }
  return true;
}",0.9674777162129607
111546,"public void resize(int w,int h){
  if (w == width() && h == height())   return;
  width_=w;
  height_=h;
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsDevice gd=ge.getDefaultScreenDevice();
  GraphicsConfiguration gc=gd.getDefaultConfiguration();
  image=gc.createCompatibleImage(w,h,Transparency.OPAQUE);
  image.setAccelerationPriority(1);
  image.createGraphics();
}","public void resize(int w,int h){
  if (w == width() && h == height())   return;
  width_=w;
  height_=h;
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsDevice gd=ge.getDefaultScreenDevice();
  GraphicsConfiguration gc=gd.getDefaultConfiguration();
  image=gc.createCompatibleImage(w,h,Transparency.TRANSLUCENT);
  image.setAccelerationPriority(1);
  image.createGraphics();
}",0.9161603888213852
111547,"public OptionsDialog(OptionsDialogCallback cb_){
  super(false);
  cb=cb_;
  setResizable(false);
  setTitle(""String_Node_Str"");
  defaults=new UserPrefs(""String_Node_Str"");
  getContentPane().setLayout(new BoxLayout(getContentPane(),BoxLayout.PAGE_AXIS));
  JTabbedPane tabPane=new JTabbedPane();
  ButtonGroup encodingGroup=new ButtonGroup();
  ButtonGroup colourGroup=new ButtonGroup();
  FormatPanel=new JPanel(new GridBagLayout());
  autoSelect=new JCheckBox(""String_Node_Str"");
  autoSelect.addItemListener(this);
  JPanel encodingPanel=new JPanel(new GridBagLayout());
  encodingPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  zrle=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  hextile=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  tight=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  raw=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  JPanel tightPanel=new JPanel(new GridBagLayout());
  customCompressLevel=new JCheckBox(""String_Node_Str"");
  customCompressLevel.addItemListener(this);
  Object[] compressionLevels={1,2,3,4,5,6};
  compressLevel=new JComboBox(compressionLevels);
  JLabel compressionLabel=new JLabel(""String_Node_Str"");
  noJpeg=new JCheckBox(""String_Node_Str"");
  noJpeg.addItemListener(this);
  Object[] qualityLevels={0,1,2,3,4,5,6,7,8,9};
  qualityLevel=new JComboBox(qualityLevels);
  JLabel qualityLabel=new JLabel(""String_Node_Str"");
  if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    compressLevel.setBorder(BorderFactory.createCompoundBorder(compressLevel.getBorder(),BorderFactory.createEmptyBorder(0,1,0,0)));
  }
 else   if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    ComboBoxEditor editor=compressLevel.getEditor();
    JTextField jtf=(JTextField)editor.getEditorComponent();
    jtf.setBorder(new CompoundBorder(jtf.getBorder(),new EmptyBorder(0,2,0,0)));
  }
  Dimension size=compressLevel.getPreferredSize();
  compressLevel.setEditable(true);
  compressLevel.setPreferredSize(size);
  addGBComponent(customCompressLevel,tightPanel,0,0,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,0,0,0));
  addGBComponent(compressLevel,tightPanel,0,1,1,1,2,2,0,0,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(0,20,0,0));
  addGBComponent(compressionLabel,tightPanel,1,1,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,5,0,0));
  addGBComponent(noJpeg,tightPanel,0,2,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(4,0,0,0));
  addGBComponent(qualityLevel,tightPanel,0,3,1,1,2,2,0,0,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(0,20,0,0));
  addGBComponent(qualityLabel,tightPanel,1,3,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,5,0,0));
  JPanel colourPanel=new JPanel(new GridBagLayout());
  colourPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  fullColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  mediumColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  lowColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  veryLowColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  addGBComponent(autoSelect,FormatPanel,0,0,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(4,5,0,5));
  addGBComponent(encodingPanel,FormatPanel,0,1,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,10,0,5));
  addGBComponent(colourPanel,FormatPanel,1,1,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_END,new Insets(0,0,0,5));
  addGBComponent(tightPanel,FormatPanel,0,2,2,GridBagConstraints.REMAINDER,2,2,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,5,0,5));
  InputsPanel=new JPanel(new GridBagLayout());
  viewOnly=new JCheckBox(""String_Node_Str"");
  viewOnly.addItemListener(this);
  acceptClipboard=new JCheckBox(""String_Node_Str"");
  acceptClipboard.addItemListener(this);
  sendClipboard=new JCheckBox(""String_Node_Str"");
  sendClipboard.addItemListener(this);
  JLabel menuKeyLabel=new JLabel(""String_Node_Str"");
  String[] menuKeys={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  menuKey=new JComboBox(menuKeys);
  menuKey.addItemListener(this);
  addGBComponent(viewOnly,InputsPanel,0,0,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,5,0,5));
  addGBComponent(acceptClipboard,InputsPanel,0,1,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,5,0,5));
  addGBComponent(sendClipboard,InputsPanel,0,2,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,5,0,5));
  addGBComponent(menuKeyLabel,InputsPanel,0,3,1,GridBagConstraints.REMAINDER,2,2,1,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(8,8,0,5));
  addGBComponent(menuKey,InputsPanel,1,3,1,GridBagConstraints.REMAINDER,2,2,25,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(4,5,0,5));
  MiscPanel=new JPanel(new GridBagLayout());
  fullScreen=new JCheckBox(""String_Node_Str"");
  fullScreen.addItemListener(this);
  shared=new JCheckBox(""String_Node_Str"");
  shared.addItemListener(this);
  useLocalCursor=new JCheckBox(""String_Node_Str"");
  useLocalCursor.addItemListener(this);
  acceptBell=new JCheckBox(""String_Node_Str"");
  acceptBell.addItemListener(this);
  JLabel scalingFactorLabel=new JLabel(""String_Node_Str"");
  Object[] scalingFactors={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  scalingFactor=new JComboBox(scalingFactors);
  if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    scalingFactor.setBorder(BorderFactory.createCompoundBorder(compressLevel.getBorder(),BorderFactory.createEmptyBorder(0,1,0,0)));
  }
 else   if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    ComboBoxEditor sfe=scalingFactor.getEditor();
    JTextField sfeTextField=(JTextField)sfe.getEditorComponent();
    sfeTextField.setBorder(new CompoundBorder(sfeTextField.getBorder(),new EmptyBorder(0,2,0,0)));
  }
  scalingFactor.setEditable(true);
  scalingFactor.addItemListener(this);
  addGBComponent(fullScreen,MiscPanel,0,0,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,5,0,5));
  addGBComponent(shared,MiscPanel,0,1,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,5,0,5));
  addGBComponent(useLocalCursor,MiscPanel,0,2,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,5,0,5));
  addGBComponent(acceptBell,MiscPanel,0,3,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(4,5,0,5));
  addGBComponent(scalingFactorLabel,MiscPanel,0,4,1,GridBagConstraints.REMAINDER,2,2,1,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(8,8,0,5));
  addGBComponent(scalingFactor,MiscPanel,1,4,1,GridBagConstraints.REMAINDER,2,2,25,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(4,5,0,5));
  DefaultsPanel=new JPanel(new GridBagLayout());
  JPanel configPanel=new JPanel(new GridBagLayout());
  configPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  JButton cfReloadButton=new JButton(""String_Node_Str"");
  cfReloadButton.addActionListener(this);
  addGBComponent(cfReloadButton,configPanel,0,0,1,1,0,0,0,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  JButton cfSaveButton=new JButton(""String_Node_Str"");
  cfSaveButton.addActionListener(this);
  addGBComponent(cfSaveButton,configPanel,0,1,1,1,0,0,0,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  JButton cfSaveAsButton=new JButton(""String_Node_Str"");
  cfSaveAsButton.addActionListener(this);
  addGBComponent(cfSaveAsButton,configPanel,0,2,1,1,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  cfReloadButton.setEnabled(false);
  cfSaveButton.setEnabled(false);
  JPanel defaultsPanel=new JPanel(new GridBagLayout());
  defaultsPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  JButton defReloadButton=new JButton(""String_Node_Str"");
  defReloadButton.addActionListener(this);
  addGBComponent(defReloadButton,defaultsPanel,0,0,1,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  defSaveButton=new JButton(""String_Node_Str"");
  defSaveButton.addActionListener(this);
  addGBComponent(defSaveButton,defaultsPanel,0,1,1,1,0,0,0,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  addGBComponent(configPanel,DefaultsPanel,0,0,1,GridBagConstraints.REMAINDER,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.PAGE_START,new Insets(4,5,4,5));
  addGBComponent(defaultsPanel,DefaultsPanel,1,0,1,GridBagConstraints.REMAINDER,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.PAGE_START,new Insets(4,0,4,5));
  SecPanel=new JPanel(new GridBagLayout());
  JPanel encryptionPanel=new JPanel(new GridBagLayout());
  encryptionPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  encNone=addCheckbox(""String_Node_Str"",null,encryptionPanel);
  encTLS=addCheckbox(""String_Node_Str"",null,encryptionPanel);
  encX509=addJCheckBox(""String_Node_Str"",null,encryptionPanel,new GridBagConstraints(0,2,1,1,1,1,GridBagConstraints.LINE_START,GridBagConstraints.REMAINDER,new Insets(0,0,0,60),0,0));
  JPanel x509Panel=new JPanel(new GridBagLayout());
  x509Panel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  ca=new JButton(""String_Node_Str"");
  ca.addActionListener(this);
  crl=new JButton(""String_Node_Str"");
  crl.addActionListener(this);
  addGBComponent(ca,x509Panel,0,0,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(2,2,2,2));
  addGBComponent(crl,x509Panel,1,0,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(2,2,2,2));
  JPanel authPanel=new JPanel(new GridBagLayout());
  authPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  secNone=addCheckbox(""String_Node_Str"",null,authPanel);
  secVnc=addCheckbox(""String_Node_Str"",null,authPanel);
  secPlain=addJCheckBox(""String_Node_Str"",null,authPanel,new GridBagConstraints(0,2,1,1,1,1,GridBagConstraints.LINE_START,GridBagConstraints.NONE,new Insets(0,0,0,5),0,0));
  secIdent=addJCheckBox(""String_Node_Str"",null,authPanel,new GridBagConstraints(0,3,1,1,1,1,GridBagConstraints.LINE_START,GridBagConstraints.NONE,new Insets(0,0,0,5),0,0));
  sendLocalUsername=new JCheckBox(""String_Node_Str"");
  sendLocalUsername.addItemListener(this);
  addGBComponent(sendLocalUsername,authPanel,1,2,1,2,0,0,2,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,20,0,0));
  secVeNCrypt=new JCheckBox(""String_Node_Str"");
  secVeNCrypt.addItemListener(this);
  addGBComponent(secVeNCrypt,SecPanel,0,0,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(4,5,0,30));
  addGBComponent(encryptionPanel,SecPanel,0,1,1,1,2,2,1,0,GridBagConstraints.NONE,GridBagConstraints.LINE_START,new Insets(0,10,2,5));
  addGBComponent(x509Panel,SecPanel,0,2,1,1,2,2,1,0,GridBagConstraints.NONE,GridBagConstraints.LINE_START,new Insets(2,10,2,5));
  addGBComponent(authPanel,SecPanel,0,3,1,1,2,2,1,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(2,10,2,5));
  tabPane.add(FormatPanel);
  tabPane.add(InputsPanel);
  tabPane.add(MiscPanel);
  tabPane.add(DefaultsPanel);
  tabPane.add(SecPanel);
  tabPane.addTab(""String_Node_Str"",FormatPanel);
  tabPane.addTab(""String_Node_Str"",InputsPanel);
  tabPane.addTab(""String_Node_Str"",MiscPanel);
  tabPane.addTab(""String_Node_Str"",DefaultsPanel);
  tabPane.addTab(""String_Node_Str"",SecPanel);
  tabPane.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));
  okButton=new JButton(""String_Node_Str"");
  okButton.setPreferredSize(new Dimension(90,30));
  okButton.addActionListener(this);
  cancelButton=new JButton(""String_Node_Str"");
  cancelButton.setPreferredSize(new Dimension(90,30));
  cancelButton.addActionListener(this);
  JPanel buttonPane=new JPanel();
  buttonPane.setLayout(new BoxLayout(buttonPane,BoxLayout.LINE_AXIS));
  buttonPane.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  buttonPane.add(Box.createHorizontalGlue());
  buttonPane.add(okButton);
  buttonPane.add(Box.createRigidArea(new Dimension(5,0)));
  buttonPane.add(cancelButton);
  buttonPane.add(Box.createRigidArea(new Dimension(5,0)));
  this.getContentPane().add(tabPane);
  this.getContentPane().add(buttonPane);
  pack();
}","public OptionsDialog(OptionsDialogCallback cb_){
  super(false);
  cb=cb_;
  setResizable(false);
  setTitle(""String_Node_Str"");
  defaults=new UserPrefs(""String_Node_Str"");
  getContentPane().setLayout(new BoxLayout(getContentPane(),BoxLayout.PAGE_AXIS));
  JTabbedPane tabPane=new JTabbedPane();
  ButtonGroup encodingGroup=new ButtonGroup();
  ButtonGroup colourGroup=new ButtonGroup();
  FormatPanel=new JPanel(new GridBagLayout());
  autoSelect=new JCheckBox(""String_Node_Str"");
  autoSelect.addItemListener(this);
  JPanel encodingPanel=new JPanel(new GridBagLayout());
  encodingPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  zrle=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  hextile=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  tight=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  raw=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  JPanel tightPanel=new JPanel(new GridBagLayout());
  customCompressLevel=new JCheckBox(""String_Node_Str"");
  customCompressLevel.addItemListener(this);
  Object[] compressionLevels={1,2,3,4,5,6};
  compressLevel=new JComboBox(compressionLevels);
  JLabel compressionLabel=new JLabel(""String_Node_Str"");
  noJpeg=new JCheckBox(""String_Node_Str"");
  noJpeg.addItemListener(this);
  Object[] qualityLevels={0,1,2,3,4,5,6,7,8,9};
  qualityLevel=new JComboBox(qualityLevels);
  JLabel qualityLabel=new JLabel(""String_Node_Str"");
  if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    compressLevel.setBorder(BorderFactory.createCompoundBorder(compressLevel.getBorder(),BorderFactory.createEmptyBorder(0,1,0,0)));
  }
 else   if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    ComboBoxEditor editor=compressLevel.getEditor();
    JTextField jtf=(JTextField)editor.getEditorComponent();
    jtf.setBorder(new CompoundBorder(jtf.getBorder(),new EmptyBorder(0,2,0,0)));
  }
  Dimension size=compressLevel.getPreferredSize();
  compressLevel.setEditable(true);
  compressLevel.setPreferredSize(size);
  addGBComponent(customCompressLevel,tightPanel,0,0,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,0,0,0));
  addGBComponent(compressLevel,tightPanel,0,1,1,1,2,2,0,0,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(0,20,0,0));
  addGBComponent(compressionLabel,tightPanel,1,1,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,5,0,0));
  addGBComponent(noJpeg,tightPanel,0,2,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(4,0,0,0));
  addGBComponent(qualityLevel,tightPanel,0,3,1,1,2,2,0,0,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(0,20,0,0));
  addGBComponent(qualityLabel,tightPanel,1,3,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,5,0,0));
  JPanel colourPanel=new JPanel(new GridBagLayout());
  colourPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  fullColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  mediumColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  lowColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  veryLowColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  addGBComponent(autoSelect,FormatPanel,0,0,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(4,5,0,5));
  addGBComponent(encodingPanel,FormatPanel,0,1,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,10,0,5));
  addGBComponent(colourPanel,FormatPanel,1,1,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_END,new Insets(0,0,0,5));
  addGBComponent(tightPanel,FormatPanel,0,2,2,GridBagConstraints.REMAINDER,2,2,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,5,0,5));
  InputsPanel=new JPanel(new GridBagLayout());
  viewOnly=new JCheckBox(""String_Node_Str"");
  viewOnly.addItemListener(this);
  acceptClipboard=new JCheckBox(""String_Node_Str"");
  acceptClipboard.addItemListener(this);
  sendClipboard=new JCheckBox(""String_Node_Str"");
  sendClipboard.addItemListener(this);
  JLabel menuKeyLabel=new JLabel(""String_Node_Str"");
  String[] menuKeys={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  menuKey=new JComboBox(menuKeys);
  menuKey.addItemListener(this);
  addGBComponent(viewOnly,InputsPanel,0,0,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,5,0,5));
  addGBComponent(acceptClipboard,InputsPanel,0,1,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,5,0,5));
  addGBComponent(sendClipboard,InputsPanel,0,2,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,5,0,5));
  addGBComponent(menuKeyLabel,InputsPanel,0,3,1,GridBagConstraints.REMAINDER,2,2,1,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(8,8,0,5));
  addGBComponent(menuKey,InputsPanel,1,3,1,GridBagConstraints.REMAINDER,2,2,25,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(4,5,0,5));
  MiscPanel=new JPanel(new GridBagLayout());
  fullScreen=new JCheckBox(""String_Node_Str"");
  fullScreen.addItemListener(this);
  shared=new JCheckBox(""String_Node_Str"");
  shared.addItemListener(this);
  useLocalCursor=new JCheckBox(""String_Node_Str"");
  useLocalCursor.addItemListener(this);
  acceptBell=new JCheckBox(""String_Node_Str"");
  acceptBell.addItemListener(this);
  JLabel scalingFactorLabel=new JLabel(""String_Node_Str"");
  Object[] scalingFactors={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  scalingFactor=new JComboBox(scalingFactors);
  if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    scalingFactor.setBorder(BorderFactory.createCompoundBorder(scalingFactor.getBorder(),BorderFactory.createEmptyBorder(0,1,0,0)));
  }
 else   if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    ComboBoxEditor sfe=scalingFactor.getEditor();
    JTextField sfeTextField=(JTextField)sfe.getEditorComponent();
    sfeTextField.setBorder(new CompoundBorder(sfeTextField.getBorder(),new EmptyBorder(0,2,0,0)));
  }
  scalingFactor.setEditable(true);
  scalingFactor.addItemListener(this);
  addGBComponent(fullScreen,MiscPanel,0,0,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,5,0,5));
  addGBComponent(shared,MiscPanel,0,1,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,5,0,5));
  addGBComponent(useLocalCursor,MiscPanel,0,2,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,5,0,5));
  addGBComponent(acceptBell,MiscPanel,0,3,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(4,5,0,5));
  addGBComponent(scalingFactorLabel,MiscPanel,0,4,1,GridBagConstraints.REMAINDER,2,2,1,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(8,8,0,5));
  addGBComponent(scalingFactor,MiscPanel,1,4,1,GridBagConstraints.REMAINDER,2,2,25,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(4,5,0,5));
  DefaultsPanel=new JPanel(new GridBagLayout());
  JPanel configPanel=new JPanel(new GridBagLayout());
  configPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  JButton cfReloadButton=new JButton(""String_Node_Str"");
  cfReloadButton.addActionListener(this);
  addGBComponent(cfReloadButton,configPanel,0,0,1,1,0,0,0,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  JButton cfSaveButton=new JButton(""String_Node_Str"");
  cfSaveButton.addActionListener(this);
  addGBComponent(cfSaveButton,configPanel,0,1,1,1,0,0,0,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  JButton cfSaveAsButton=new JButton(""String_Node_Str"");
  cfSaveAsButton.addActionListener(this);
  addGBComponent(cfSaveAsButton,configPanel,0,2,1,1,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  cfReloadButton.setEnabled(false);
  cfSaveButton.setEnabled(false);
  JPanel defaultsPanel=new JPanel(new GridBagLayout());
  defaultsPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  JButton defReloadButton=new JButton(""String_Node_Str"");
  defReloadButton.addActionListener(this);
  addGBComponent(defReloadButton,defaultsPanel,0,0,1,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  defSaveButton=new JButton(""String_Node_Str"");
  defSaveButton.addActionListener(this);
  addGBComponent(defSaveButton,defaultsPanel,0,1,1,1,0,0,0,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  addGBComponent(configPanel,DefaultsPanel,0,0,1,GridBagConstraints.REMAINDER,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.PAGE_START,new Insets(4,5,4,5));
  addGBComponent(defaultsPanel,DefaultsPanel,1,0,1,GridBagConstraints.REMAINDER,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.PAGE_START,new Insets(4,0,4,5));
  SecPanel=new JPanel(new GridBagLayout());
  JPanel encryptionPanel=new JPanel(new GridBagLayout());
  encryptionPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  encNone=addCheckbox(""String_Node_Str"",null,encryptionPanel);
  encTLS=addCheckbox(""String_Node_Str"",null,encryptionPanel);
  encX509=addJCheckBox(""String_Node_Str"",null,encryptionPanel,new GridBagConstraints(0,2,1,1,1,1,GridBagConstraints.LINE_START,GridBagConstraints.REMAINDER,new Insets(0,0,0,60),0,0));
  JPanel x509Panel=new JPanel(new GridBagLayout());
  x509Panel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  ca=new JButton(""String_Node_Str"");
  ca.addActionListener(this);
  crl=new JButton(""String_Node_Str"");
  crl.addActionListener(this);
  addGBComponent(ca,x509Panel,0,0,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(2,2,2,2));
  addGBComponent(crl,x509Panel,1,0,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(2,2,2,2));
  JPanel authPanel=new JPanel(new GridBagLayout());
  authPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  secNone=addCheckbox(""String_Node_Str"",null,authPanel);
  secVnc=addCheckbox(""String_Node_Str"",null,authPanel);
  secPlain=addJCheckBox(""String_Node_Str"",null,authPanel,new GridBagConstraints(0,2,1,1,1,1,GridBagConstraints.LINE_START,GridBagConstraints.NONE,new Insets(0,0,0,5),0,0));
  secIdent=addJCheckBox(""String_Node_Str"",null,authPanel,new GridBagConstraints(0,3,1,1,1,1,GridBagConstraints.LINE_START,GridBagConstraints.NONE,new Insets(0,0,0,5),0,0));
  sendLocalUsername=new JCheckBox(""String_Node_Str"");
  sendLocalUsername.addItemListener(this);
  addGBComponent(sendLocalUsername,authPanel,1,2,1,2,0,0,2,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,20,0,0));
  secVeNCrypt=new JCheckBox(""String_Node_Str"");
  secVeNCrypt.addItemListener(this);
  addGBComponent(secVeNCrypt,SecPanel,0,0,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(4,5,0,30));
  addGBComponent(encryptionPanel,SecPanel,0,1,1,1,2,2,1,0,GridBagConstraints.NONE,GridBagConstraints.LINE_START,new Insets(0,10,2,5));
  addGBComponent(x509Panel,SecPanel,0,2,1,1,2,2,1,0,GridBagConstraints.NONE,GridBagConstraints.LINE_START,new Insets(2,10,2,5));
  addGBComponent(authPanel,SecPanel,0,3,1,1,2,2,1,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(2,10,2,5));
  tabPane.add(FormatPanel);
  tabPane.add(InputsPanel);
  tabPane.add(MiscPanel);
  tabPane.add(DefaultsPanel);
  tabPane.add(SecPanel);
  tabPane.addTab(""String_Node_Str"",FormatPanel);
  tabPane.addTab(""String_Node_Str"",InputsPanel);
  tabPane.addTab(""String_Node_Str"",MiscPanel);
  tabPane.addTab(""String_Node_Str"",DefaultsPanel);
  tabPane.addTab(""String_Node_Str"",SecPanel);
  tabPane.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));
  okButton=new JButton(""String_Node_Str"");
  okButton.setPreferredSize(new Dimension(90,30));
  okButton.addActionListener(this);
  cancelButton=new JButton(""String_Node_Str"");
  cancelButton.setPreferredSize(new Dimension(90,30));
  cancelButton.addActionListener(this);
  JPanel buttonPane=new JPanel();
  buttonPane.setLayout(new BoxLayout(buttonPane,BoxLayout.LINE_AXIS));
  buttonPane.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  buttonPane.add(Box.createHorizontalGlue());
  buttonPane.add(okButton);
  buttonPane.add(Box.createRigidArea(new Dimension(5,0)));
  buttonPane.add(cancelButton);
  buttonPane.add(Box.createRigidArea(new Dimension(5,0)));
  this.getContentPane().add(tabPane);
  this.getContentPane().add(buttonPane);
  pack();
}",0.9990135073607528
111548,"public SocketDescriptor() throws Exception {
  super(SelectorProvider.provider());
  try {
    channel=SocketChannel.open();
    channel.configureBlocking(false);
    selector=Selector.open();
  }
 catch (  IOException e) {
    throw new Exception(e.toString());
  }
  try {
    channel.register(selector,SelectionKey.OP_READ | SelectionKey.OP_WRITE);
  }
 catch (  java.nio.channels.ClosedChannelException e) {
    throw new Exception(e.toString());
  }
}","public SocketDescriptor() throws Exception {
  super(DefaultSelectorProvider());
  try {
    channel=SocketChannel.open();
    channel.configureBlocking(false);
    selector=Selector.open();
  }
 catch (  IOException e) {
    throw new Exception(e.toString());
  }
  try {
    channel.register(selector,SelectionKey.OP_READ | SelectionKey.OP_WRITE);
  }
 catch (  java.nio.channels.ClosedChannelException e) {
    throw new Exception(e.toString());
  }
}",0.9824175824175824
111549,"public ServerDialog(OptionsDialog options_,String defaultServerName,CConn cc_){
  super(true);
  cc=cc_;
  setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
  setResizable(false);
  setSize(new Dimension(340,135));
  setTitle(""String_Node_Str"");
  options=options_;
  getContentPane().setLayout(new GridBagLayout());
  JLabel serverLabel=new JLabel(""String_Node_Str"",JLabel.RIGHT);
  if (options.defaults.getString(""String_Node_Str"") != null) {
    server=new JComboBox(options.defaults.getString(""String_Node_Str"").split(""String_Node_Str""));
  }
 else {
    server=new JComboBox();
  }
  if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    server.setBorder(BorderFactory.createCompoundBorder(server.getBorder(),BorderFactory.createEmptyBorder(0,2,0,0)));
  }
 else {
    ComboBoxEditor editor=server.getEditor();
    JTextField jtf=(JTextField)editor.getEditorComponent();
    jtf.setBorder(new CompoundBorder(jtf.getBorder(),new EmptyBorder(0,2,0,0)));
  }
  server.setEditable(true);
  editor=server.getEditor();
  JPanel topPanel=new JPanel(new GridBagLayout());
  addGBComponent(new JLabel(cc.logo),topPanel,0,0,1,1,0,0,0,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(5,5,5,15));
  addGBComponent(serverLabel,topPanel,1,0,1,1,0,0,0,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_END,new Insets(10,0,5,5));
  addGBComponent(server,topPanel,2,0,1,1,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(10,0,5,40));
  optionsButton=new JButton(""String_Node_Str"");
  aboutButton=new JButton(""String_Node_Str"");
  okButton=new JButton(""String_Node_Str"");
  cancelButton=new JButton(""String_Node_Str"");
  JPanel buttonPanel=new JPanel(new GridBagLayout());
  buttonPanel.setPreferredSize(new Dimension(340,40));
  addGBComponent(aboutButton,buttonPanel,0,3,1,1,0,0,0.2,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(0,5,0,5));
  addGBComponent(optionsButton,buttonPanel,1,3,1,1,0,0,0,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(0,5,0,5));
  addGBComponent(okButton,buttonPanel,2,3,1,1,0,0,0.8,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(0,5,0,5));
  addGBComponent(cancelButton,buttonPanel,3,3,1,1,0,0,0.5,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(0,5,0,5));
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.anchor=GridBagConstraints.LINE_START;
  gbc.fill=GridBagConstraints.BOTH;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  gbc.gridheight=1;
  gbc.insets=new Insets(0,0,0,0);
  gbc.ipadx=0;
  gbc.ipady=0;
  gbc.weightx=1;
  gbc.weighty=1;
  getContentPane().add(topPanel,gbc);
  getContentPane().add(buttonPanel);
  server.addActionListener(this);
  optionsButton.addActionListener(this);
  aboutButton.addActionListener(this);
  okButton.addActionListener(this);
  cancelButton.addActionListener(this);
  pack();
}","public ServerDialog(OptionsDialog options_,String defaultServerName,CConn cc_){
  super(true);
  cc=cc_;
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  setResizable(false);
  setSize(new Dimension(340,135));
  setTitle(""String_Node_Str"");
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      if (cc.viewer.firstApplet && cc.viewport == null) {
        System.exit(1);
      }
 else {
        ok=false;
        endDialog();
      }
    }
  }
);
  options=options_;
  getContentPane().setLayout(new GridBagLayout());
  JLabel serverLabel=new JLabel(""String_Node_Str"",JLabel.RIGHT);
  if (options.defaults.getString(""String_Node_Str"") != null) {
    server=new JComboBox(options.defaults.getString(""String_Node_Str"").split(""String_Node_Str""));
  }
 else {
    server=new JComboBox();
  }
  if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    server.setBorder(BorderFactory.createCompoundBorder(server.getBorder(),BorderFactory.createEmptyBorder(0,2,0,0)));
  }
 else {
    ComboBoxEditor editor=server.getEditor();
    JTextField jtf=(JTextField)editor.getEditorComponent();
    jtf.setBorder(new CompoundBorder(jtf.getBorder(),new EmptyBorder(0,2,0,0)));
  }
  server.setEditable(true);
  editor=server.getEditor();
  JPanel topPanel=new JPanel(new GridBagLayout());
  addGBComponent(new JLabel(cc.logo),topPanel,0,0,1,1,0,0,0,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(5,5,5,15));
  addGBComponent(serverLabel,topPanel,1,0,1,1,0,0,0,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_END,new Insets(10,0,5,5));
  addGBComponent(server,topPanel,2,0,1,1,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(10,0,5,40));
  optionsButton=new JButton(""String_Node_Str"");
  aboutButton=new JButton(""String_Node_Str"");
  okButton=new JButton(""String_Node_Str"");
  cancelButton=new JButton(""String_Node_Str"");
  JPanel buttonPanel=new JPanel(new GridBagLayout());
  buttonPanel.setPreferredSize(new Dimension(340,40));
  addGBComponent(aboutButton,buttonPanel,0,3,1,1,0,0,0.2,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(0,5,0,5));
  addGBComponent(optionsButton,buttonPanel,1,3,1,1,0,0,0,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(0,5,0,5));
  addGBComponent(okButton,buttonPanel,2,3,1,1,0,0,0.8,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(0,5,0,5));
  addGBComponent(cancelButton,buttonPanel,3,3,1,1,0,0,0.5,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(0,5,0,5));
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.anchor=GridBagConstraints.LINE_START;
  gbc.fill=GridBagConstraints.BOTH;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  gbc.gridheight=1;
  gbc.insets=new Insets(0,0,0,0);
  gbc.ipadx=0;
  gbc.ipady=0;
  gbc.weightx=1;
  gbc.weighty=1;
  getContentPane().add(topPanel,gbc);
  getContentPane().add(buttonPanel);
  server.addActionListener(this);
  optionsButton.addActionListener(this);
  aboutButton.addActionListener(this);
  okButton.addActionListener(this);
  cancelButton.addActionListener(this);
  pack();
}",0.9522240527182868
111550,"public void start(){
  vlog.debug(""String_Node_Str"");
  if (version == null || build == null) {
    ClassLoader cl=this.getClass().getClassLoader();
    InputStream stream=cl.getResourceAsStream(""String_Node_Str"");
    try {
      Manifest manifest=new Manifest(stream);
      Attributes attributes=manifest.getMainAttributes();
      version=attributes.getValue(""String_Node_Str"");
      build=attributes.getValue(""String_Node_Str"");
    }
 catch (    java.io.IOException e) {
    }
  }
  nViewers++;
  if (firstApplet) {
    alwaysShowServerDialog.setParam(true);
    Configuration.readAppletParams(this);
    String host=getCodeBase().getHost();
    if (vncServerName.getValue() == null && vncServerPort.getValue() != 0) {
      int port=vncServerPort.getValue();
      vncServerName.setParam(host + ((port >= 5900 && port <= 5999) ? (""String_Node_Str"" + (port - 5900)) : (""String_Node_Str"" + port)));
    }
  }
  thread=new Thread(this);
  thread.start();
}","public void start(){
  vlog.debug(""String_Node_Str"");
  if (version == null || build == null) {
    ClassLoader cl=this.getClass().getClassLoader();
    InputStream stream=cl.getResourceAsStream(""String_Node_Str"");
    try {
      Manifest manifest=new Manifest(stream);
      Attributes attributes=manifest.getMainAttributes();
      version=attributes.getValue(""String_Node_Str"");
      build=attributes.getValue(""String_Node_Str"");
    }
 catch (    java.io.IOException e) {
    }
  }
  nViewers++;
  if (applet && firstApplet) {
    alwaysShowServerDialog.setParam(true);
    Configuration.readAppletParams(this);
    String host=getCodeBase().getHost();
    if (vncServerName.getValue() == null && vncServerPort.getValue() != 0) {
      int port=vncServerPort.getValue();
      vncServerName.setParam(host + ((port >= 5900 && port <= 5999) ? (""String_Node_Str"" + (port - 5900)) : (""String_Node_Str"" + port)));
    }
  }
  thread=new Thread(this);
  thread.start();
}",0.994824016563147
111551,"public static void main(String[] argv){
  try {
    String os=System.getProperty(""String_Node_Str"");
    if (os.startsWith(""String_Node_Str"")) {
      String laf=""String_Node_Str"";
      UIManager.setLookAndFeel(laf);
    }
 else {
      UIManager.put(""String_Node_Str"",Boolean.FALSE);
      javax.swing.plaf.FontUIResource f=new javax.swing.plaf.FontUIResource(""String_Node_Str"",Font.PLAIN,11);
      java.util.Enumeration keys=UIManager.getDefaults().keys();
      while (keys.hasMoreElements()) {
        Object key=keys.nextElement();
        Object value=UIManager.get(key);
        if (value instanceof javax.swing.plaf.FontUIResource)         UIManager.put(key,f);
      }
    }
    UIManager.put(""String_Node_Str"",Color.blue);
  }
 catch (  java.lang.Exception exc) {
  }
  VncViewer viewer=new VncViewer(argv);
  viewer.start();
}","public static void main(String[] argv){
  try {
    String os=System.getProperty(""String_Node_Str"");
    if (os.startsWith(""String_Node_Str"")) {
      String laf=""String_Node_Str"";
      UIManager.setLookAndFeel(laf);
    }
 else {
      UIManager.put(""String_Node_Str"",Boolean.FALSE);
      javax.swing.plaf.FontUIResource f=new javax.swing.plaf.FontUIResource(""String_Node_Str"",Font.PLAIN,11);
      java.util.Enumeration keys=UIManager.getDefaults().keys();
      while (keys.hasMoreElements()) {
        Object key=keys.nextElement();
        Object value=UIManager.get(key);
        if (value instanceof javax.swing.plaf.FontUIResource)         UIManager.put(key,f);
      }
    }
    UIManager.put(""String_Node_Str"",Color.blue);
  }
 catch (  java.lang.Exception exc) {
  }
  VncViewer viewer=new VncViewer(argv);
  viewer.firstApplet=true;
  viewer.stop=false;
  viewer.start();
}",0.9721900347624566
111552,"public void run(){
  CConn cc=null;
  Socket sock=null;
  if (via.getValueStr() != null) {
    StringParameter gatewayHost=new StringParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    StringParameter remoteHost=new StringParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    IntParameter localPort=new IntParameter(""String_Node_Str"",""String_Node_Str"",TcpSocket.findFreeTcpPort());
    IntParameter remotePort=new IntParameter(""String_Node_Str"",""String_Node_Str"",5900);
    if (vncServerName.getValueStr() == null)     usage();
    interpretViaParam(gatewayHost,remoteHost,remotePort,vncServerName,localPort);
    createTunnel(gatewayHost.getValueStr(),remoteHost.getValueStr(),remotePort.getValue(),localPort.getValue());
  }
  if (listenMode.getValue()) {
    int port=5500;
    if (vncServerName.getValue() != null && Character.isDigit(vncServerName.getValue().charAt(0)))     port=Integer.parseInt(vncServerName.getValue());
    TcpListener listener=null;
    try {
      listener=new TcpListener(null,port);
    }
 catch (    java.lang.Exception e) {
      System.out.println(e.toString());
      System.exit(1);
    }
    vlog.info(""String_Node_Str"" + port);
    while (true) {
      sock=listener.accept();
      if (sock != null)       break;
    }
  }
  try {
    cc=new CConn(this,sock,vncServerName.getValue());
    while (true)     cc.processMsg();
  }
 catch (  EndOfStream e) {
    vlog.info(e.toString());
  }
catch (  java.lang.Exception e) {
    if (cc != null)     cc.deleteWindow();
    if (cc == null || !cc.shuttingDown) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,e.toString(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
  if (cc != null)   cc.deleteWindow();
  nViewers--;
  if (!applet && nViewers == 0) {
    System.exit(0);
  }
}","public void run(){
  CConn cc=null;
  Socket sock=null;
  if (via.getValueStr() != null) {
    StringParameter gatewayHost=new StringParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    StringParameter remoteHost=new StringParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    IntParameter localPort=new IntParameter(""String_Node_Str"",""String_Node_Str"",TcpSocket.findFreeTcpPort());
    IntParameter remotePort=new IntParameter(""String_Node_Str"",""String_Node_Str"",5900);
    if (vncServerName.getValueStr() == null)     usage();
    interpretViaParam(gatewayHost,remoteHost,remotePort,vncServerName,localPort);
    createTunnel(gatewayHost.getValueStr(),remoteHost.getValueStr(),remotePort.getValue(),localPort.getValue());
  }
  if (listenMode.getValue()) {
    int port=5500;
    if (vncServerName.getValue() != null && Character.isDigit(vncServerName.getValue().charAt(0)))     port=Integer.parseInt(vncServerName.getValue());
    TcpListener listener=null;
    try {
      listener=new TcpListener(null,port);
    }
 catch (    java.lang.Exception e) {
      System.out.println(e.toString());
      System.exit(1);
    }
    vlog.info(""String_Node_Str"" + port);
    while (true) {
      sock=listener.accept();
      if (sock != null)       break;
    }
  }
  try {
    cc=new CConn(this,sock,vncServerName.getValue());
    while (!stop)     cc.processMsg();
    if (nViewers > 1) {
      cc=null;
      return;
    }
  }
 catch (  EndOfStream e) {
    vlog.info(e.toString());
  }
catch (  java.lang.Exception e) {
    if (cc != null)     cc.deleteWindow();
    if (cc == null || !cc.shuttingDown) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,e.toString(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
  if (cc != null)   cc.deleteWindow();
  nViewers--;
  if (!applet && nViewers == 0) {
    System.exit(0);
  }
}",0.981690899299946
111553,"public void readRect(Rect r,CMsgHandler handler){
  int x=r.tl.x;
  int y=r.tl.y;
  int w=r.width();
  int h=r.height();
  int[] imageBuf=reader.getImageBuf(w * h);
  int nPixels=imageBuf.length / (reader.bpp() / 8);
  while (h > 0) {
    int nRows=nPixels / w;
    if (nRows > h)     nRows=h;
    reader.is.readPixels(imageBuf,w * h,(reader.bpp() / 8),handler.cp.pf().bigEndian);
    handler.imageRect(new Rect(x,y,x + w,y + nRows),imageBuf);
    h-=nRows;
    y+=nRows;
  }
}","public void readRect(Rect r,CMsgHandler handler){
  int x=r.tl.x;
  int y=r.tl.y;
  int w=r.width();
  int h=r.height();
  int[] imageBuf=new int[w * h];
  int nPixels=imageBuf.length;
  int bytesPerRow=w * (reader.bpp() / 8);
  while (h > 0) {
    int nRows=nPixels / w;
    if (nRows > h)     nRows=h;
    reader.getInStream().readPixels(imageBuf,nPixels,(reader.bpp() / 8),handler.cp.pf().bigEndian);
    handler.imageRect(new Rect(x,y,x + w,y + nRows),imageBuf);
    h-=nRows;
    y+=nRows;
  }
}",0.436028659160696
111554,"synchronized public void writeKeyEvent(KeyEvent ev){
  if (ev.getID() != KeyEvent.KEY_PRESSED && !ev.isActionKey())   return;
  int keysym;
  if (!ev.isActionKey()) {
    vlog.debug(""String_Node_Str"" + ev.getKeyChar());
    if (ev.getKeyChar() < 32) {
      if ((ev.getModifiers() & KeyEvent.CTRL_MASK) != 0) {
        if ((ev.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {
          keysym=ev.getKeyChar() + 64;
          if (keysym == -1)           return;
        }
 else {
          keysym=ev.getKeyChar() + 96;
          if (keysym == 127)           keysym=95;
        }
      }
 else {
switch (ev.getKeyCode()) {
case KeyEvent.VK_BACK_SPACE:
          keysym=Keysyms.BackSpace;
        break;
case KeyEvent.VK_TAB:
      keysym=Keysyms.Tab;
    break;
case KeyEvent.VK_ENTER:
  keysym=Keysyms.Return;
break;
case KeyEvent.VK_ESCAPE:
keysym=Keysyms.Escape;
break;
default :
return;
}
}
}
 else if (ev.getKeyChar() == 127) {
keysym=Keysyms.Delete;
}
 else {
keysym=UnicodeToKeysym.translate(ev.getKeyChar());
if (keysym == -1) return;
}
}
 else {
vlog.debug(""String_Node_Str"" + ev.getKeyCode());
switch (ev.getKeyCode()) {
case KeyEvent.VK_HOME:
keysym=Keysyms.Home;
break;
case KeyEvent.VK_END:
keysym=Keysyms.End;
break;
case KeyEvent.VK_PAGE_UP:
keysym=Keysyms.Page_Up;
break;
case KeyEvent.VK_PAGE_DOWN:
keysym=Keysyms.Page_Down;
break;
case KeyEvent.VK_UP:
keysym=Keysyms.Up;
break;
case KeyEvent.VK_DOWN:
keysym=Keysyms.Down;
break;
case KeyEvent.VK_LEFT:
keysym=Keysyms.Left;
break;
case KeyEvent.VK_RIGHT:
keysym=Keysyms.Right;
break;
case KeyEvent.VK_F1:
keysym=Keysyms.F1;
break;
case KeyEvent.VK_F2:
keysym=Keysyms.F2;
break;
case KeyEvent.VK_F3:
keysym=Keysyms.F3;
break;
case KeyEvent.VK_F4:
keysym=Keysyms.F4;
break;
case KeyEvent.VK_F5:
keysym=Keysyms.F5;
break;
case KeyEvent.VK_F6:
keysym=Keysyms.F6;
break;
case KeyEvent.VK_F7:
keysym=Keysyms.F7;
break;
case KeyEvent.VK_F8:
keysym=Keysyms.F8;
break;
case KeyEvent.VK_F9:
keysym=Keysyms.F9;
break;
case KeyEvent.VK_F10:
keysym=Keysyms.F10;
break;
case KeyEvent.VK_F11:
keysym=Keysyms.F11;
break;
case KeyEvent.VK_F12:
keysym=Keysyms.F12;
break;
case KeyEvent.VK_PRINTSCREEN:
keysym=Keysyms.Print;
break;
case KeyEvent.VK_PAUSE:
keysym=Keysyms.Pause;
break;
case KeyEvent.VK_INSERT:
keysym=Keysyms.Insert;
break;
default :
return;
}
}
writeModifiers(ev.getModifiers());
writeKeyEvent(keysym,true);
writeKeyEvent(keysym,false);
writeModifiers(0);
}","synchronized public void writeKeyEvent(KeyEvent ev){
  if (ev.getID() != KeyEvent.KEY_PRESSED && !ev.isActionKey())   return;
  int keysym, keycode, currentModifiers;
  currentModifiers=ev.getModifiers();
  keycode=ev.getKeyCode();
  if (!ev.isActionKey()) {
    vlog.debug(""String_Node_Str"" + ev.getKeyChar());
    if (ev.getKeyChar() < 32) {
      if ((currentModifiers & KeyEvent.CTRL_MASK) != 0) {
        if ((currentModifiers & KeyEvent.SHIFT_MASK) != 0) {
          keysym=ev.getKeyChar() + 64;
          if (keysym == -1)           return;
        }
 else {
          keysym=ev.getKeyChar() + 96;
          if (keysym == 127)           keysym=95;
        }
      }
 else {
switch (keycode) {
case KeyEvent.VK_BACK_SPACE:
          keysym=Keysyms.BackSpace;
        break;
case KeyEvent.VK_TAB:
      keysym=Keysyms.Tab;
    break;
case KeyEvent.VK_ENTER:
  keysym=Keysyms.Return;
break;
case KeyEvent.VK_ESCAPE:
keysym=Keysyms.Escape;
break;
default :
return;
}
}
}
 else if (ev.getKeyChar() == 127) {
keysym=Keysyms.Delete;
}
 else {
keysym=UnicodeToKeysym.translate(ev.getKeyChar());
if (keysym == -1) return;
if ((currentModifiers & KeyEvent.CTRL_MASK) != 0 && (currentModifiers & KeyEvent.ALT_MASK) != 0 && ((keysym == 0x5c) || (keysym == 0x7c) || (keysym == 0x5b)|| (keysym == 0x5d)|| (keysym == 0x7b)|| (keysym == 0x7d)|| (keysym == 0x7e)|| (keysym == 0x40)|| (keysym == 0x20ac)|| (keysym == 0xb5)|| (keysym == 0xb2)|| (keysym == 0xb3))) currentModifiers&=(~KeyEvent.CTRL_MASK) & (~KeyEvent.ALT_MASK);
}
}
 else {
vlog.debug(""String_Node_Str"" + keycode);
switch (keycode) {
case KeyEvent.VK_HOME:
keysym=Keysyms.Home;
break;
case KeyEvent.VK_END:
keysym=Keysyms.End;
break;
case KeyEvent.VK_PAGE_UP:
keysym=Keysyms.Page_Up;
break;
case KeyEvent.VK_PAGE_DOWN:
keysym=Keysyms.Page_Down;
break;
case KeyEvent.VK_UP:
keysym=Keysyms.Up;
break;
case KeyEvent.VK_DOWN:
keysym=Keysyms.Down;
break;
case KeyEvent.VK_LEFT:
keysym=Keysyms.Left;
break;
case KeyEvent.VK_RIGHT:
keysym=Keysyms.Right;
break;
case KeyEvent.VK_F1:
keysym=Keysyms.F1;
break;
case KeyEvent.VK_F2:
keysym=Keysyms.F2;
break;
case KeyEvent.VK_F3:
keysym=Keysyms.F3;
break;
case KeyEvent.VK_F4:
keysym=Keysyms.F4;
break;
case KeyEvent.VK_F5:
keysym=Keysyms.F5;
break;
case KeyEvent.VK_F6:
keysym=Keysyms.F6;
break;
case KeyEvent.VK_F7:
keysym=Keysyms.F7;
break;
case KeyEvent.VK_F8:
keysym=Keysyms.F8;
break;
case KeyEvent.VK_F9:
keysym=Keysyms.F9;
break;
case KeyEvent.VK_F10:
keysym=Keysyms.F10;
break;
case KeyEvent.VK_F11:
keysym=Keysyms.F11;
break;
case KeyEvent.VK_F12:
keysym=Keysyms.F12;
break;
case KeyEvent.VK_PRINTSCREEN:
keysym=Keysyms.Print;
break;
case KeyEvent.VK_PAUSE:
keysym=Keysyms.Pause;
break;
case KeyEvent.VK_INSERT:
keysym=Keysyms.Insert;
break;
default :
return;
}
}
writeModifiers(currentModifiers);
writeKeyEvent(keysym,true);
writeKeyEvent(keysym,false);
writeModifiers(0);
}",0.8914069877242682
111555,"public int[] getImageBuf(int required,int requested,int nPixels){
  int requiredBytes=required * (handler.cp.pf().bpp / 8);
  int requestedBytes=requested * (handler.cp.pf().bpp / 8);
  int size=requestedBytes;
  if (size > imageBufIdealSize)   size=imageBufIdealSize;
  if (size < requiredBytes)   size=requiredBytes;
  if (imageBufSize < size) {
    imageBufSize=size;
    imageBuf=new int[imageBufSize];
  }
  if (nPixels != 0)   nPixels=imageBufSize / (handler.cp.pf().bpp / 8);
  return imageBuf;
}","public int[] getImageBuf(int required,int requested,int nPixels){
  int requiredBytes=required;
  int requestedBytes=requested;
  int size=requestedBytes;
  if (size > imageBufIdealSize)   size=imageBufIdealSize;
  if (size < requiredBytes)   size=requiredBytes;
  if (imageBufSize < size) {
    imageBufSize=size;
    imageBuf=new int[imageBufSize];
  }
  if (nPixels != 0)   nPixels=imageBufSize / (handler.cp.pf().bpp / 8);
  return imageBuf;
}",0.2631578947368421
111556,"public void readRect(Rect r,CMsgHandler handler){
  InStream is=reader.getInStream();
  boolean cutZeros=false;
  clientpf=handler.getPreferredPF();
  serverpf=handler.cp.pf();
  int bpp=serverpf.bpp;
  cutZeros=false;
  if (bpp == 32) {
    if (serverpf.is888()) {
      cutZeros=true;
    }
  }
  int comp_ctl=is.readU8();
  boolean bigEndian=handler.cp.pf().bigEndian;
  for (int i=0; i < 4; i++) {
    if ((comp_ctl & 1) != 0) {
      zis[i].reset();
    }
    comp_ctl>>=1;
  }
  if (comp_ctl == rfbTightFill) {
    int[] pix=new int[1];
    if (cutZeros) {
      byte[] bytebuf=new byte[3];
      is.readBytes(bytebuf,0,3);
      serverpf.bufferFromRGB(pix,0,bytebuf,0,1);
    }
 else {
      pix[0]=is.readPixel(serverpf.bpp / 8,serverpf.bigEndian);
    }
    handler.fillRect(r,pix[0]);
    return;
  }
  if (comp_ctl == rfbTightJpeg) {
    DECOMPRESS_JPEG_RECT(r,is,handler);
    return;
  }
  if (comp_ctl > rfbTightMaxSubencoding) {
    throw new Exception(""String_Node_Str"");
  }
  int palSize=0;
  int[] palette=new int[256];
  boolean useGradient=false;
  if ((comp_ctl & rfbTightExplicitFilter) != 0) {
    int filterId=is.readU8();
switch (filterId) {
case rfbTightFilterPalette:
      palSize=is.readU8() + 1;
    byte[] tightPalette;
  if (cutZeros) {
    tightPalette=new byte[256 * 3];
    is.readBytes(tightPalette,0,palSize * 3);
    serverpf.bufferFromRGB(palette,0,tightPalette,0,palSize);
  }
 else {
    is.readPixels(palette,palSize,serverpf.bpp / 8,serverpf.bigEndian);
  }
break;
case rfbTightFilterGradient:
useGradient=true;
break;
case rfbTightFilterCopy:
break;
default :
throw new Exception(""String_Node_Str"");
}
}
int bppp=bpp;
if (palSize != 0) {
bppp=(palSize <= 2) ? 1 : 8;
}
 else if (cutZeros) {
bppp=24;
}
int rowSize=(r.width() * bppp + 7) / 8;
int dataSize=r.height() * rowSize;
int streamId=-1;
InStream input;
if (dataSize < rfbTightMinToCompress) {
input=is;
}
 else {
int length=is.readCompactLength();
streamId=comp_ctl & 0x03;
zis[streamId].setUnderlying(is,length);
input=(ZlibInStream)zis[streamId];
}
byte[] netbuf=new byte[dataSize];
input.readBytes(netbuf,0,dataSize);
int stride=r.width();
int[] buf=reader.getImageBuf(r.area());
if (palSize == 0) {
if (useGradient) {
if (bpp == 32 && cutZeros) {
FilterGradient24(netbuf,buf,stride,r);
}
 else {
FilterGradient(netbuf,buf,stride,r);
}
}
 else {
int h=r.height();
int w=r.width();
if (cutZeros) {
serverpf.bufferFromRGB(buf,0,netbuf,0,w * h);
}
 else {
for (int i=0; i < dataSize; i++) buf[i]=netbuf[i] & 0xff;
}
}
}
 else {
int x, h=r.height(), w=r.width(), b, pad=stride - w;
int ptr=0;
int srcPtr=0, bits;
if (palSize <= 2) {
while (h > 0) {
for (x=0; x < w / 8; x++) {
bits=netbuf[srcPtr++];
for (b=7; b >= 0; b--) {
buf[ptr++]=palette[bits >> b & 1];
}
}
if (w % 8 != 0) {
bits=netbuf[srcPtr++];
for (b=7; b >= 8 - w % 8; b--) {
buf[ptr++]=palette[bits >> b & 1];
}
}
ptr+=pad;
h--;
}
}
 else {
while (h > 0) {
int endOfRow=ptr + w;
while (ptr < endOfRow) {
buf[ptr++]=palette[netbuf[srcPtr++] & 0xff];
}
ptr+=pad;
h--;
}
}
}
handler.imageRect(r,buf);
if (streamId != -1) {
zis[streamId].reset();
}
}","public void readRect(Rect r,CMsgHandler handler){
  InStream is=reader.getInStream();
  boolean cutZeros=false;
  clientpf=handler.getPreferredPF();
  serverpf=handler.cp.pf();
  int bpp=serverpf.bpp;
  cutZeros=false;
  if (bpp == 32) {
    if (serverpf.is888()) {
      cutZeros=true;
    }
  }
  int comp_ctl=is.readU8();
  boolean bigEndian=handler.cp.pf().bigEndian;
  for (int i=0; i < 4; i++) {
    if ((comp_ctl & 1) != 0) {
      zis[i].reset();
    }
    comp_ctl>>=1;
  }
  if (comp_ctl == rfbTightFill) {
    int[] pix=new int[1];
    if (cutZeros) {
      byte[] bytebuf=new byte[3];
      is.readBytes(bytebuf,0,3);
      serverpf.bufferFromRGB(pix,0,bytebuf,0,1);
    }
 else {
      pix[0]=is.readPixel(serverpf.bpp / 8,serverpf.bigEndian);
    }
    handler.fillRect(r,pix[0]);
    return;
  }
  if (comp_ctl == rfbTightJpeg) {
    DECOMPRESS_JPEG_RECT(r,is,handler);
    return;
  }
  if (comp_ctl > rfbTightMaxSubencoding) {
    throw new Exception(""String_Node_Str"");
  }
  int palSize=0;
  int[] palette=new int[256];
  boolean useGradient=false;
  if ((comp_ctl & rfbTightExplicitFilter) != 0) {
    int filterId=is.readU8();
switch (filterId) {
case rfbTightFilterPalette:
      palSize=is.readU8() + 1;
    byte[] tightPalette;
  if (cutZeros) {
    tightPalette=new byte[256 * 3];
    is.readBytes(tightPalette,0,palSize * 3);
    serverpf.bufferFromRGB(palette,0,tightPalette,0,palSize);
  }
 else {
    is.readPixels(palette,palSize,serverpf.bpp / 8,serverpf.bigEndian);
  }
break;
case rfbTightFilterGradient:
useGradient=true;
break;
case rfbTightFilterCopy:
break;
default :
throw new Exception(""String_Node_Str"");
}
}
int bppp=bpp;
if (palSize != 0) {
bppp=(palSize <= 2) ? 1 : 8;
}
 else if (cutZeros) {
bppp=24;
}
int rowSize=(r.width() * bppp + 7) / 8;
int dataSize=r.height() * rowSize;
int streamId=-1;
InStream input;
if (dataSize < rfbTightMinToCompress) {
input=is;
}
 else {
int length=is.readCompactLength();
streamId=comp_ctl & 0x03;
zis[streamId].setUnderlying(is,length);
input=(ZlibInStream)zis[streamId];
}
byte[] netbuf=new byte[dataSize];
input.readBytes(netbuf,0,dataSize);
int stride=r.width();
int[] buf=reader.getImageBuf(r.area());
if (palSize == 0) {
if (useGradient) {
if (bpp == 32 && cutZeros) {
FilterGradient24(netbuf,buf,stride,r);
}
 else {
FilterGradient(netbuf,buf,stride,r);
}
}
 else {
int h=r.height();
int ptr=0;
int srcPtr=0;
int w=r.width();
if (cutZeros) {
serverpf.bufferFromRGB(buf,ptr,netbuf,srcPtr,w * h);
}
 else {
int pixelSize=(bpp >= 24) ? 3 : bpp / 8;
while (h > 0) {
for (int i=0; i < w; i++) {
if (bpp == 8) {
buf[ptr + i]=netbuf[srcPtr + i] & 0xff;
}
 else {
for (int j=pixelSize - 1; j >= 0; j--) buf[ptr + i]|=((netbuf[srcPtr + i + j] & 0xff) << j * 8);
}
}
ptr+=stride;
srcPtr+=w * pixelSize;
h--;
}
}
}
}
 else {
int x, h=r.height(), w=r.width(), b, pad=stride - w;
int ptr=0;
int srcPtr=0, bits;
if (palSize <= 2) {
while (h > 0) {
for (x=0; x < w / 8; x++) {
bits=netbuf[srcPtr++];
for (b=7; b >= 0; b--) {
buf[ptr++]=palette[bits >> b & 1];
}
}
if (w % 8 != 0) {
bits=netbuf[srcPtr++];
for (b=7; b >= 8 - w % 8; b--) {
buf[ptr++]=palette[bits >> b & 1];
}
}
ptr+=pad;
h--;
}
}
 else {
while (h > 0) {
int endOfRow=ptr + w;
while (ptr < endOfRow) {
buf[ptr++]=palette[netbuf[srcPtr++] & 0xff];
}
ptr+=pad;
h--;
}
}
}
handler.imageRect(r,buf);
if (streamId != -1) {
zis[streamId].reset();
}
}",0.9425181075666512
111557,"final private void DECOMPRESS_JPEG_RECT(Rect r,InStream is,CMsgHandler handler){
  int compressedLen=is.readCompactLength();
  if (compressedLen <= 0)   vlog.info(""String_Node_Str"");
  byte[] netbuf=new byte[compressedLen];
  is.readBytes(netbuf,0,compressedLen);
  int imageType=BufferedImage.TYPE_4BYTE_ABGR_PRE;
  BufferedImage jpeg=new BufferedImage(r.width(),r.height(),imageType);
  jpeg.setAccelerationPriority(1);
  try {
    jpeg=ImageIO.read(new ByteArrayInputStream(netbuf));
  }
 catch (  java.io.IOException e) {
    e.printStackTrace();
  }
  int[] buf=reader.getImageBuf(r.area());
  jpeg.getRGB(0,0,r.width(),r.height(),buf,0,r.width());
  jpeg=null;
  handler.imageRect(r,buf);
}","final private void DECOMPRESS_JPEG_RECT(Rect r,InStream is,CMsgHandler handler){
  int compressedLen=is.readCompactLength();
  if (compressedLen <= 0)   vlog.info(""String_Node_Str"");
  byte[] netbuf=new byte[compressedLen];
  is.readBytes(netbuf,0,compressedLen);
  int imageType=BufferedImage.TYPE_4BYTE_ABGR_PRE;
  int w=r.width();
  int h=r.height();
  BufferedImage jpeg=new BufferedImage(w,h,imageType);
  jpeg.setAccelerationPriority(1);
  try {
    jpeg=ImageIO.read(new ByteArrayInputStream(netbuf));
  }
 catch (  java.io.IOException e) {
    e.printStackTrace();
  }
  int[] buf=reader.getImageBuf(w * h);
  jpeg.getRGB(0,0,w,h,buf,0,w);
  jpeg=null;
  handler.imageRect(r,buf);
}",0.922077922077922
111558,"private void initGlobal(){
  try {
    SSLSocketFactory sslfactory;
    SSLContext ctx=SSLContext.getInstance(""String_Node_Str"");
    if (anon) {
      ctx.init(null,null,null);
    }
 else {
      TrustManager[] myTM=new TrustManager[]{new MyX509TrustManager()};
      ctx.init(null,myTM,null);
    }
    sslfactory=ctx.getSocketFactory();
    try {
      ssl=(SSLSocket)sslfactory.createSocket(cc.sock,cc.sock.getInetAddress().getHostName(),cc.sock.getPort(),true);
    }
 catch (    java.io.IOException e) {
      throw new Exception(e.toString());
    }
    if (anon) {
      String[] supported;
      ArrayList enabled=new ArrayList();
      supported=ssl.getSupportedCipherSuites();
      for (int i=0; i < supported.length; i++)       if (supported[i].matches(""String_Node_Str""))       enabled.add(supported[i]);
      ssl.setEnabledCipherSuites((String[])enabled.toArray(new String[0]));
    }
 else {
      ssl.setEnabledCipherSuites(ssl.getSupportedCipherSuites());
    }
    ssl.setEnabledProtocols(new String[]{""String_Node_Str"",""String_Node_Str""});
    ssl.addHandshakeCompletedListener(new MyHandshakeListener());
  }
 catch (  java.security.GeneralSecurityException e) {
    vlog.error(""String_Node_Str"" + e.toString());
    return;
  }
}","private void initGlobal(){
  try {
    SSLSocketFactory sslfactory;
    SSLContext ctx=SSLContext.getInstance(""String_Node_Str"");
    if (anon) {
      ctx.init(null,null,null);
    }
 else {
      TrustManager[] myTM=new TrustManager[]{new MyX509TrustManager()};
      ctx.init(null,myTM,null);
    }
    sslfactory=ctx.getSocketFactory();
    try {
      ssl=(SSLSocket)sslfactory.createSocket(cc.sock,cc.sock.getInetAddress().getHostName(),cc.sock.getPort(),true);
    }
 catch (    java.io.IOException e) {
      throw new Exception(e.toString());
    }
    if (anon) {
      String[] supported;
      ArrayList<String> enabled=new ArrayList<String>();
      supported=ssl.getSupportedCipherSuites();
      for (int i=0; i < supported.length; i++)       if (supported[i].matches(""String_Node_Str""))       enabled.add(supported[i]);
      ssl.setEnabledCipherSuites(enabled.toArray(new String[0]));
    }
 else {
      ssl.setEnabledCipherSuites(ssl.getSupportedCipherSuites());
    }
    ssl.setEnabledProtocols(new String[]{""String_Node_Str"",""String_Node_Str""});
    ssl.addHandshakeCompletedListener(new MyHandshakeListener());
  }
 catch (  java.security.GeneralSecurityException e) {
    vlog.error(""String_Node_Str"" + e.toString());
    return;
  }
}",0.9896496815286624
111559,"public void getOptions(){
  autoSelect=options.autoSelect.isSelected();
  if (fullColour != options.fullColour.isSelected())   formatChange=true;
  fullColour=options.fullColour.isSelected();
  if (!fullColour) {
    int newLowColourLevel=(options.veryLowColour.isSelected() ? 0 : options.lowColour.isSelected() ? 1 : 2);
    if (newLowColourLevel != lowColourLevel) {
      lowColourLevel=newLowColourLevel;
      formatChange=true;
    }
  }
  int newEncoding=(options.zrle.isSelected() ? Encodings.encodingZRLE : options.hextile.isSelected() ? Encodings.encodingHextile : options.tight.isSelected() ? Encodings.encodingTight : Encodings.encodingRaw);
  if (newEncoding != currentEncoding) {
    currentEncoding=newEncoding;
    encodingChange=true;
  }
  viewer.customCompressLevel.setParam(options.customCompressLevel.isSelected());
  if (cp.customCompressLevel != viewer.customCompressLevel.getValue()) {
    cp.customCompressLevel=viewer.customCompressLevel.getValue();
    encodingChange=true;
  }
  if (Integer.parseInt(options.compressLevel.getSelectedItem().toString()) >= 0 && Integer.parseInt(options.compressLevel.getSelectedItem().toString()) <= 9) {
    viewer.compressLevel.setParam(options.compressLevel.getSelectedItem().toString());
  }
 else {
    viewer.compressLevel.setParam(viewer.compressLevel.getDefaultStr());
  }
  if (cp.compressLevel != viewer.compressLevel.getValue()) {
    cp.compressLevel=viewer.compressLevel.getValue();
    encodingChange=true;
  }
  viewer.noJpeg.setParam(!options.noJpeg.isSelected());
  if (cp.noJpeg != viewer.noJpeg.getValue()) {
    cp.noJpeg=viewer.noJpeg.getValue();
    encodingChange=true;
  }
  viewer.qualityLevel.setParam(options.qualityLevel.getSelectedItem().toString());
  if (cp.qualityLevel != viewer.qualityLevel.getValue()) {
    cp.qualityLevel=viewer.qualityLevel.getValue();
    encodingChange=true;
  }
  viewer.sendLocalUsername.setParam(options.sendLocalUsername.isSelected());
  viewer.viewOnly.setParam(options.viewOnly.isSelected());
  viewer.acceptClipboard.setParam(options.acceptClipboard.isSelected());
  viewer.sendClipboard.setParam(options.sendClipboard.isSelected());
  viewer.fastCopyRect.setParam(options.fastCopyRect.isSelected());
  viewer.acceptBell.setParam(options.acceptBell.isSelected());
  if (options.autoScale) {
    viewer.scalingFactor.setParam(""String_Node_Str"");
    scaleFactor=-1;
    if (desktop != null) {
      reconfigureViewport();
      viewport.update(viewport.g);
    }
  }
 else   if (options.fixedRatioScale) {
    viewer.scalingFactor.setParam(""String_Node_Str"");
    scaleFactor=-1;
    if (desktop != null) {
      reconfigureViewport();
      viewport.update(viewport.g);
    }
  }
 else {
    String scaleString=options.scalingFactor.getSelectedItem().toString();
    viewer.scalingFactor.setParam(scaleString.substring(0,scaleString.length() - 1));
    int oldScaleFactor=scaleFactor;
    scaleFactor=Integer.parseInt(scaleString.substring(0,scaleString.length() - 1));
    if (oldScaleFactor != scaleFactor && desktop != null) {
      reconfigureViewport();
      viewport.update(viewport.g);
    }
  }
  clipboardDialog.setSendingEnabled(viewer.sendClipboard.getValue());
  menuKey=(int)(options.menuKey.getSelectedIndex() + 0xFFBE);
  F8Menu.f8.setLabel(""String_Node_Str"" + (menuKey - Keysyms.F1 + 1));
  shared=options.shared.isSelected();
  setShared(shared);
  viewer.useLocalCursor.setParam(options.useLocalCursor.isSelected());
  if (cp.supportsLocalCursor != viewer.useLocalCursor.getValue()) {
    cp.supportsLocalCursor=viewer.useLocalCursor.getValue();
    encodingChange=true;
    if (desktop != null)     desktop.resetLocalCursor();
  }
  checkEncodings();
  if (state() != RFBSTATE_NORMAL) {
    if (options.encNone.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeIdent);
    }
    if (options.encTLS.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeTLSIdent);
    }
    if (options.encX509.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeX509None);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeX509None);
      Security.DisableSecType(Security.secTypeX509Vnc);
      Security.DisableSecType(Security.secTypeX509Plain);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
    if (options.secNone.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509None);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeX509None);
    }
    if (options.secVnc.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
    }
 else {
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeX509Vnc);
    }
    if (options.secPlain.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
    }
 else {
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeX509Plain);
    }
    if (options.secIdent.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeIdent);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeIdent);
      Security.DisableSecType(Security.secTypeTLSIdent);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
    CSecurityTLS.x509ca.setParam(options.ca.getText());
    CSecurityTLS.x509crl.setParam(options.crl.getText());
  }
}","public void getOptions(){
  autoSelect=options.autoSelect.isSelected();
  if (fullColour != options.fullColour.isSelected())   formatChange=true;
  fullColour=options.fullColour.isSelected();
  if (!fullColour) {
    int newLowColourLevel=(options.veryLowColour.isSelected() ? 0 : options.lowColour.isSelected() ? 1 : 2);
    if (newLowColourLevel != lowColourLevel) {
      lowColourLevel=newLowColourLevel;
      formatChange=true;
    }
  }
  int newEncoding=(options.zrle.isSelected() ? Encodings.encodingZRLE : options.hextile.isSelected() ? Encodings.encodingHextile : options.tight.isSelected() ? Encodings.encodingTight : Encodings.encodingRaw);
  if (newEncoding != currentEncoding) {
    currentEncoding=newEncoding;
    encodingChange=true;
  }
  viewer.customCompressLevel.setParam(options.customCompressLevel.isSelected());
  if (cp.customCompressLevel != viewer.customCompressLevel.getValue()) {
    cp.customCompressLevel=viewer.customCompressLevel.getValue();
    encodingChange=true;
  }
  if (Integer.parseInt(options.compressLevel.getSelectedItem().toString()) >= 0 && Integer.parseInt(options.compressLevel.getSelectedItem().toString()) <= 9) {
    viewer.compressLevel.setParam(options.compressLevel.getSelectedItem().toString());
  }
 else {
    viewer.compressLevel.setParam(viewer.compressLevel.getDefaultStr());
  }
  if (cp.compressLevel != viewer.compressLevel.getValue()) {
    cp.compressLevel=viewer.compressLevel.getValue();
    encodingChange=true;
  }
  viewer.noJpeg.setParam(!options.noJpeg.isSelected());
  if (cp.noJpeg != viewer.noJpeg.getValue()) {
    cp.noJpeg=viewer.noJpeg.getValue();
    encodingChange=true;
  }
  viewer.qualityLevel.setParam(options.qualityLevel.getSelectedItem().toString());
  if (cp.qualityLevel != viewer.qualityLevel.getValue()) {
    cp.qualityLevel=viewer.qualityLevel.getValue();
    encodingChange=true;
  }
  viewer.sendLocalUsername.setParam(options.sendLocalUsername.isSelected());
  viewer.viewOnly.setParam(options.viewOnly.isSelected());
  viewer.acceptClipboard.setParam(options.acceptClipboard.isSelected());
  viewer.sendClipboard.setParam(options.sendClipboard.isSelected());
  viewer.fastCopyRect.setParam(options.fastCopyRect.isSelected());
  viewer.acceptBell.setParam(options.acceptBell.isSelected());
  if (options.autoScale) {
    viewer.scalingFactor.setParam(""String_Node_Str"");
    scaleFactor=-1;
    if (desktop != null) {
      reconfigureViewport();
      viewport.update(viewport.g);
    }
  }
 else   if (options.fixedRatioScale) {
    viewer.scalingFactor.setParam(""String_Node_Str"");
    scaleFactor=-1;
    if (desktop != null) {
      reconfigureViewport();
      viewport.update(viewport.g);
    }
  }
 else {
    String scaleString=options.scalingFactor.getSelectedItem().toString();
    viewer.scalingFactor.setParam(scaleString.substring(0,scaleString.length() - 1));
    int oldScaleFactor=scaleFactor;
    scaleFactor=Integer.parseInt(scaleString.substring(0,scaleString.length() - 1));
    if (oldScaleFactor != scaleFactor && desktop != null) {
      reconfigureViewport();
      viewport.update(viewport.g);
    }
  }
  clipboardDialog.setSendingEnabled(viewer.sendClipboard.getValue());
  menuKey=(options.menuKey.getSelectedIndex() + 0xFFBE);
  F8Menu.f8.setText(""String_Node_Str"" + (menuKey - Keysyms.F1 + 1));
  shared=options.shared.isSelected();
  setShared(shared);
  viewer.useLocalCursor.setParam(options.useLocalCursor.isSelected());
  if (cp.supportsLocalCursor != viewer.useLocalCursor.getValue()) {
    cp.supportsLocalCursor=viewer.useLocalCursor.getValue();
    encodingChange=true;
    if (desktop != null)     desktop.resetLocalCursor();
  }
  checkEncodings();
  if (state() != RFBSTATE_NORMAL) {
    if (options.encNone.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeIdent);
    }
    if (options.encTLS.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeTLSIdent);
    }
    if (options.encX509.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeX509None);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeX509None);
      Security.DisableSecType(Security.secTypeX509Vnc);
      Security.DisableSecType(Security.secTypeX509Plain);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
    if (options.secNone.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509None);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeX509None);
    }
    if (options.secVnc.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
    }
 else {
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeX509Vnc);
    }
    if (options.secPlain.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
    }
 else {
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeX509Plain);
    }
    if (options.secIdent.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeIdent);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeIdent);
      Security.DisableSecType(Security.secTypeTLSIdent);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
    CSecurityTLS.x509ca.setParam(options.ca.getText());
    CSecurityTLS.x509crl.setParam(options.crl.getText());
  }
}",0.9991123510017752
111560,"synchronized public void writePointerEvent(MouseEvent ev){
  if (state() != RFBSTATE_NORMAL)   return;
  int x, y;
switch (ev.getID()) {
case MouseEvent.MOUSE_PRESSED:
    buttonMask=1;
  if ((ev.getModifiers() & KeyEvent.ALT_MASK) != 0)   buttonMask=2;
if ((ev.getModifiers() & KeyEvent.META_MASK) != 0) buttonMask=4;
break;
case MouseEvent.MOUSE_RELEASED:
buttonMask=0;
break;
}
writeModifiers(ev.getModifiers() & ~KeyEvent.ALT_MASK & ~KeyEvent.META_MASK);
if (cp.width != desktop.scaledWidth || cp.height != desktop.scaledHeight) {
int sx=(desktop.scaleWidthRatio == 1.00) ? ev.getX() : (int)Math.floor(ev.getX() / (float)desktop.scaleWidthRatio);
int sy=(desktop.scaleHeightRatio == 1.00) ? ev.getY() : (int)Math.floor(ev.getY() / (float)desktop.scaleHeightRatio);
ev.translatePoint(sx - ev.getX(),sy - ev.getY());
writer().writePointerEvent(new Point(ev.getX(),ev.getY()),buttonMask);
}
 else {
writer().writePointerEvent(new Point(ev.getX(),ev.getY()),buttonMask);
}
if (buttonMask == 0) writeModifiers(0);
}","synchronized public void writePointerEvent(MouseEvent ev){
  if (state() != RFBSTATE_NORMAL)   return;
  int x, y;
switch (ev.getID()) {
case MouseEvent.MOUSE_PRESSED:
    buttonMask=1;
  if ((ev.getModifiers() & KeyEvent.ALT_MASK) != 0)   buttonMask=2;
if ((ev.getModifiers() & KeyEvent.META_MASK) != 0) buttonMask=4;
break;
case MouseEvent.MOUSE_RELEASED:
buttonMask=0;
break;
}
writeModifiers(ev.getModifiers() & ~KeyEvent.ALT_MASK & ~KeyEvent.META_MASK);
if (cp.width != desktop.scaledWidth || cp.height != desktop.scaledHeight) {
int sx=(desktop.scaleWidthRatio == 1.00) ? ev.getX() : (int)Math.floor(ev.getX() / desktop.scaleWidthRatio);
int sy=(desktop.scaleHeightRatio == 1.00) ? ev.getY() : (int)Math.floor(ev.getY() / desktop.scaleHeightRatio);
ev.translatePoint(sx - ev.getX(),sy - ev.getY());
writer().writePointerEvent(new Point(ev.getX(),ev.getY()),buttonMask);
}
 else {
writer().writePointerEvent(new Point(ev.getX(),ev.getY()),buttonMask);
}
if (buttonMask == 0) writeModifiers(0);
}",0.99304865938431
111561,"private void showLocalCursor(){
  if (cursorAvailable && !cursorVisible) {
    if (!im.getPF().equal(cursor.getPF()) || cursor.width() == 0 || cursor.height() == 0) {
      vlog.debug(""String_Node_Str"");
      cursorAvailable=false;
      return;
    }
    cursorVisible=true;
    if (softCursor != null)     return;
    int cursorLeft=(int)cursor.hotspot.x;
    int cursorTop=(int)cursor.hotspot.y;
    int cursorRight=cursorLeft + cursor.width();
    int cursorBottom=cursorTop + cursor.height();
    int x=(cursorLeft >= 0 ? cursorLeft : 0);
    int y=(cursorTop >= 0 ? cursorTop : 0);
    int w=((cursorRight < im.width() ? cursorRight : im.width()) - x);
    int h=((cursorBottom < im.height() ? cursorBottom : im.height()) - y);
    cursorBackingX=x;
    cursorBackingY=y;
    cursorBacking.setSize(w,h);
    for (int j=0; j < h; j++)     System.arraycopy(im.data,(y + j) * im.width() + x,cursorBacking.data,j * w,w);
    im.maskRect(cursorLeft,cursorTop,cursor.width(),cursor.height(),cursor.data,cursor.mask);
    im.put(x,y,w,h,graphics);
  }
}","private void showLocalCursor(){
  if (cursorAvailable && !cursorVisible) {
    if (!im.getPF().equal(cursor.getPF()) || cursor.width() == 0 || cursor.height() == 0) {
      vlog.debug(""String_Node_Str"");
      cursorAvailable=false;
      return;
    }
    cursorVisible=true;
    if (softCursor != null)     return;
    int cursorLeft=cursor.hotspot.x;
    int cursorTop=cursor.hotspot.y;
    int cursorRight=cursorLeft + cursor.width();
    int cursorBottom=cursorTop + cursor.height();
    int x=(cursorLeft >= 0 ? cursorLeft : 0);
    int y=(cursorTop >= 0 ? cursorTop : 0);
    int w=((cursorRight < im.width() ? cursorRight : im.width()) - x);
    int h=((cursorBottom < im.height() ? cursorBottom : im.height()) - y);
    cursorBackingX=x;
    cursorBackingY=y;
    cursorBacking.setSize(w,h);
    for (int j=0; j < h; j++)     System.arraycopy(im.data,(y + j) * im.width() + x,cursorBacking.data,j * w,w);
    im.maskRect(cursorLeft,cursorTop,cursor.width(),cursor.height(),cursor.data,cursor.mask);
    im.put(x,y,w,h,graphics);
  }
}",0.9952290076335878
111562,"public void setScaledSize(){
  if (!cc.options.autoScale && !cc.options.fixedRatioScale) {
    scaledWidth=(int)Math.floor((float)cc.cp.width * (float)cc.scaleFactor / 100.0);
    scaledHeight=(int)Math.floor((float)cc.cp.height * (float)cc.scaleFactor / 100.0);
  }
 else {
    if (cc.viewport == null) {
      scaledWidth=cc.cp.width;
      scaledHeight=cc.cp.height;
    }
 else {
      Dimension availableSize=cc.viewport.sp.getSize();
      if (availableSize.width == 0 || availableSize.height == 0)       availableSize=new Dimension(cc.cp.width,cc.cp.height);
      if (cc.options.fixedRatioScale) {
        float widthRatio=(float)availableSize.width / (float)cc.cp.width;
        float heightRatio=(float)availableSize.height / (float)cc.cp.height;
        float ratio=Math.min(widthRatio,heightRatio);
        scaledWidth=(int)Math.floor(cc.cp.width * ratio);
        scaledHeight=(int)Math.floor(cc.cp.height * ratio);
      }
 else {
        scaledWidth=availableSize.width;
        scaledHeight=availableSize.height;
      }
    }
  }
  scaleWidthRatio=(float)((float)scaledWidth / (float)cc.cp.width);
  scaleHeightRatio=(float)((float)scaledHeight / (float)cc.cp.height);
}","public void setScaledSize(){
  if (!cc.options.autoScale && !cc.options.fixedRatioScale) {
    scaledWidth=(int)Math.floor((float)cc.cp.width * (float)cc.scaleFactor / 100.0);
    scaledHeight=(int)Math.floor((float)cc.cp.height * (float)cc.scaleFactor / 100.0);
  }
 else {
    if (cc.viewport == null) {
      scaledWidth=cc.cp.width;
      scaledHeight=cc.cp.height;
    }
 else {
      Dimension availableSize=cc.viewport.sp.getSize();
      if (availableSize.width == 0 || availableSize.height == 0)       availableSize=new Dimension(cc.cp.width,cc.cp.height);
      if (cc.options.fixedRatioScale) {
        float widthRatio=(float)availableSize.width / (float)cc.cp.width;
        float heightRatio=(float)availableSize.height / (float)cc.cp.height;
        float ratio=Math.min(widthRatio,heightRatio);
        scaledWidth=(int)Math.floor(cc.cp.width * ratio);
        scaledHeight=(int)Math.floor(cc.cp.height * ratio);
      }
 else {
        scaledWidth=availableSize.width;
        scaledHeight=availableSize.height;
      }
    }
  }
  scaleWidthRatio=(float)scaledWidth / (float)cc.cp.width;
  scaleHeightRatio=(float)scaledHeight / (float)cc.cp.height;
}",0.9923599320882852
111563,"public CConn(VncViewer viewer_,java.net.Socket sock_,String vncServerName,boolean reverse){
  serverHost=null;
  serverPort=0;
  sock=sock_;
  viewer=viewer_;
  currentEncoding=Encodings.encodingTight;
  lastServerEncoding=-1;
  fullColour=viewer.fullColour.getValue();
  lowColourLevel=2;
  autoSelect=viewer.autoSelect.getValue();
  shared=viewer.shared.getValue();
  formatChange=false;
  encodingChange=false;
  sameMachine=false;
  fullScreen=viewer.fullScreen.getValue();
  menuKey=Keysyms.F8;
  options=new OptionsDialog(this);
  options.initDialog();
  clipboardDialog=new ClipboardDialog(this);
  firstUpdate=true;
  pendingUpdate=false;
  setShared(shared);
  upg=this;
  msg=this;
  String encStr=viewer.preferredEncoding.getValue();
  int encNum=Encodings.encodingNum(encStr);
  if (encNum != -1) {
    currentEncoding=encNum;
  }
  cp.supportsDesktopResize=true;
  cp.supportsExtendedDesktopSize=true;
  cp.supportsClientRedirect=true;
  cp.supportsDesktopRename=true;
  cp.supportsLocalCursor=viewer.useLocalCursor.getValue();
  cp.customCompressLevel=viewer.customCompressLevel.getValue();
  cp.compressLevel=viewer.compressLevel.getValue();
  cp.noJpeg=viewer.noJpeg.getValue();
  cp.qualityLevel=viewer.qualityLevel.getValue();
  initMenu();
  if (sock != null) {
    String name=sock.getRemoteSocketAddress() + ""String_Node_Str"" + sock.getPort();
    vlog.info(""String_Node_Str"" + name);
  }
 else {
    if (vncServerName != null) {
      serverHost=Hostname.getHost(vncServerName);
      serverPort=Hostname.getPort(vncServerName);
    }
 else {
      ServerDialog dlg=new ServerDialog(options,vncServerName,this);
      if (!dlg.showDialog() || dlg.server.getSelectedItem().equals(""String_Node_Str"")) {
        System.exit(1);
      }
      vncServerName=(String)dlg.server.getSelectedItem();
      serverHost=Hostname.getHost(vncServerName);
      serverPort=Hostname.getPort(vncServerName);
    }
    try {
      sock=new java.net.Socket(serverHost,serverPort);
    }
 catch (    java.io.IOException e) {
      throw new Exception(e.toString());
    }
    vlog.info(""String_Node_Str"" + serverHost + ""String_Node_Str""+ serverPort);
  }
  sameMachine=(sock.getLocalSocketAddress() == sock.getRemoteSocketAddress());
  try {
    sock.setTcpNoDelay(true);
    sock.setTrafficClass(0x10);
    setServerName(serverHost);
    jis=new JavaInStream(sock.getInputStream());
    jos=new JavaOutStream(sock.getOutputStream());
  }
 catch (  java.net.SocketException e) {
    throw new Exception(e.toString());
  }
catch (  java.io.IOException e) {
    throw new Exception(e.toString());
  }
  setStreams(jis,jos);
  initialiseProtocol();
}","public CConn(VncViewer viewer_,java.net.Socket sock_,String vncServerName,boolean reverse){
  serverHost=null;
  serverPort=0;
  sock=sock_;
  viewer=viewer_;
  currentEncoding=Encodings.encodingTight;
  lastServerEncoding=-1;
  fullColour=viewer.fullColour.getValue();
  lowColourLevel=2;
  autoSelect=viewer.autoSelect.getValue();
  shared=viewer.shared.getValue();
  formatChange=false;
  encodingChange=false;
  sameMachine=false;
  fullScreen=viewer.fullScreen.getValue();
  menuKey=Keysyms.F8;
  options=new OptionsDialog(this,this);
  options.initDialog();
  clipboardDialog=new ClipboardDialog(this);
  firstUpdate=true;
  pendingUpdate=false;
  setShared(shared);
  upg=this;
  msg=this;
  String encStr=viewer.preferredEncoding.getValue();
  int encNum=Encodings.encodingNum(encStr);
  if (encNum != -1) {
    currentEncoding=encNum;
  }
  cp.supportsDesktopResize=true;
  cp.supportsExtendedDesktopSize=true;
  cp.supportsClientRedirect=true;
  cp.supportsDesktopRename=true;
  cp.supportsLocalCursor=viewer.useLocalCursor.getValue();
  cp.customCompressLevel=viewer.customCompressLevel.getValue();
  cp.compressLevel=viewer.compressLevel.getValue();
  cp.noJpeg=viewer.noJpeg.getValue();
  cp.qualityLevel=viewer.qualityLevel.getValue();
  initMenu();
  if (sock != null) {
    String name=sock.getRemoteSocketAddress() + ""String_Node_Str"" + sock.getPort();
    vlog.info(""String_Node_Str"" + name);
  }
 else {
    if (vncServerName != null) {
      serverHost=Hostname.getHost(vncServerName);
      serverPort=Hostname.getPort(vncServerName);
    }
 else {
      ServerDialog dlg=new ServerDialog(options,vncServerName,this);
      if (!dlg.showDialog() || dlg.server.getSelectedItem().equals(""String_Node_Str"")) {
        System.exit(1);
      }
      vncServerName=(String)dlg.server.getSelectedItem();
      serverHost=Hostname.getHost(vncServerName);
      serverPort=Hostname.getPort(vncServerName);
    }
    try {
      sock=new java.net.Socket(serverHost,serverPort);
    }
 catch (    java.io.IOException e) {
      throw new Exception(e.toString());
    }
    vlog.info(""String_Node_Str"" + serverHost + ""String_Node_Str""+ serverPort);
  }
  sameMachine=(sock.getLocalSocketAddress() == sock.getRemoteSocketAddress());
  try {
    sock.setTcpNoDelay(true);
    sock.setTrafficClass(0x10);
    setServerName(serverHost);
    jis=new JavaInStream(sock.getInputStream());
    jos=new JavaOutStream(sock.getOutputStream());
  }
 catch (  java.net.SocketException e) {
    throw new Exception(e.toString());
  }
catch (  java.io.IOException e) {
    throw new Exception(e.toString());
  }
  setStreams(jis,jos);
  initialiseProtocol();
}",0.999057137469357
111564,"public void serverCutText(String str,int len){
  setContents(str);
  Clipboard cb=Toolkit.getDefaultToolkit().getSystemClipboard();
  if (cb != null) {
    StringSelection ss=new StringSelection(str);
    try {
      cb.setContents(ss,ss);
    }
 catch (    Exception e) {
      vlog.debug(e.toString());
    }
  }
}","public void serverCutText(String str,int len){
  setContents(str);
  Clipboard cb=null;
  if (!cc.viewer.applet)   cb=Toolkit.getDefaultToolkit().getSystemClipboard();
  if (cb != null) {
    StringSelection ss=new StringSelection(str);
    try {
      cb.setContents(ss,ss);
    }
 catch (    Exception e) {
      vlog.debug(e.toString());
    }
  }
}",0.9461077844311376
111565,"public void actionPerformed(ActionEvent e){
  Object s=e.getSource();
  if (s instanceof JButton && (JButton)s == okButton) {
    ok=true;
    if (cb != null)     cb.getOptions();
    endDialog();
  }
 else   if (s instanceof JButton && (JButton)s == cancelButton) {
    ok=false;
    endDialog();
  }
 else   if (s instanceof JButton && (JButton)s == defSaveButton) {
    try {
      defaults.Save();
    }
 catch (    java.lang.Exception x) {
    }
  }
 else   if (s instanceof JButton && (JButton)s == ca) {
    JFileChooser fc=new JFileChooser();
    fc.setDialogTitle(""String_Node_Str"");
    int ret=fc.showOpenDialog(this);
    if (ret == JFileChooser.APPROVE_OPTION)     CSecurityTLS.x509ca.setParam(fc.getSelectedFile().toString());
  }
 else   if (s instanceof JButton && (JButton)s == crl) {
    JFileChooser fc=new JFileChooser();
    fc.setDialogTitle(""String_Node_Str"");
    int ret=fc.showOpenDialog(this);
    if (ret == JFileChooser.APPROVE_OPTION)     CSecurityTLS.x509crl.setParam(fc.getSelectedFile().toString());
  }
}","public void actionPerformed(ActionEvent e){
  Object s=e.getSource();
  if (s instanceof JButton && (JButton)s == okButton) {
    ok=true;
    if (cb != null)     cb.getOptions();
    endDialog();
  }
 else   if (s instanceof JButton && (JButton)s == cancelButton) {
    ok=false;
    endDialog();
  }
 else   if (s instanceof JButton && (JButton)s == defSaveButton) {
    try {
      if (!applet)       defaults.Save();
    }
 catch (    java.lang.Exception x) {
    }
  }
 else   if (s instanceof JButton && (JButton)s == ca) {
    JFileChooser fc=new JFileChooser();
    fc.setDialogTitle(""String_Node_Str"");
    int ret=fc.showOpenDialog(this);
    if (ret == JFileChooser.APPROVE_OPTION)     CSecurityTLS.x509ca.setParam(fc.getSelectedFile().toString());
  }
 else   if (s instanceof JButton && (JButton)s == crl) {
    JFileChooser fc=new JFileChooser();
    fc.setDialogTitle(""String_Node_Str"");
    int ret=fc.showOpenDialog(this);
    if (ret == JFileChooser.APPROVE_OPTION)     CSecurityTLS.x509crl.setParam(fc.getSelectedFile().toString());
  }
}",0.9909307875894988
111566,"public void itemStateChanged(ItemEvent e){
  Object s=e.getSource();
  if (s instanceof JCheckBox && (JCheckBox)s == autoSelect) {
    zrle.setEnabled(!autoSelect.isSelected());
    hextile.setEnabled(!autoSelect.isSelected());
    tight.setEnabled(!autoSelect.isSelected());
    raw.setEnabled(!autoSelect.isSelected());
    fullColour.setEnabled(!autoSelect.isSelected());
    mediumColour.setEnabled(!autoSelect.isSelected());
    lowColour.setEnabled(!autoSelect.isSelected());
    veryLowColour.setEnabled(!autoSelect.isSelected());
    defaults.setPref(""String_Node_Str"",(autoSelect.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == customCompressLevel) {
    compressLevel.setEnabled(customCompressLevel.isSelected());
    defaults.setPref(""String_Node_Str"",(customCompressLevel.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == noJpeg) {
    qualityLevel.setEnabled(noJpeg.isSelected());
    defaults.setPref(""String_Node_Str"",(noJpeg.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JComboBox && (JComboBox)s == scalingFactor) {
    autoScale=fixedRatioScale=false;
    if (scalingFactor.getSelectedItem().equals(""String_Node_Str"")) {
      autoScale=true;
    }
 else     if (scalingFactor.getSelectedItem().equals(""String_Node_Str"")) {
      fixedRatioScale=true;
    }
  }
  if (s instanceof JCheckBox && (JCheckBox)s == sendLocalUsername) {
    defaults.setPref(""String_Node_Str"",(sendLocalUsername.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == secVeNCrypt) {
    encNone.setEnabled(secVeNCrypt.isSelected());
    encTLS.setEnabled(secVeNCrypt.isSelected());
    encX509.setEnabled(secVeNCrypt.isSelected());
    ca.setEnabled(secVeNCrypt.isSelected());
    crl.setEnabled(secVeNCrypt.isSelected());
    secIdent.setEnabled(secVeNCrypt.isSelected());
    secNone.setEnabled(secVeNCrypt.isSelected());
    secVnc.setEnabled(secVeNCrypt.isSelected());
    secPlain.setEnabled(secVeNCrypt.isSelected());
    sendLocalUsername.setEnabled(secVeNCrypt.isSelected());
  }
  if (s instanceof JCheckBox && (JCheckBox)s == secIdent || s instanceof JCheckBox && (JCheckBox)s == secPlain) {
    sendLocalUsername.setEnabled(secIdent.isSelected() || secPlain.isSelected());
  }
}","public void itemStateChanged(ItemEvent e){
  Object s=e.getSource();
  if (s instanceof JCheckBox && (JCheckBox)s == autoSelect) {
    zrle.setEnabled(!autoSelect.isSelected());
    hextile.setEnabled(!autoSelect.isSelected());
    tight.setEnabled(!autoSelect.isSelected());
    raw.setEnabled(!autoSelect.isSelected());
    fullColour.setEnabled(!autoSelect.isSelected());
    mediumColour.setEnabled(!autoSelect.isSelected());
    lowColour.setEnabled(!autoSelect.isSelected());
    veryLowColour.setEnabled(!autoSelect.isSelected());
    if (!applet)     defaults.setPref(""String_Node_Str"",(autoSelect.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == customCompressLevel) {
    compressLevel.setEnabled(customCompressLevel.isSelected());
    if (!applet)     defaults.setPref(""String_Node_Str"",(customCompressLevel.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == noJpeg) {
    qualityLevel.setEnabled(noJpeg.isSelected());
    if (!applet)     defaults.setPref(""String_Node_Str"",(noJpeg.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JComboBox && (JComboBox)s == scalingFactor) {
    autoScale=fixedRatioScale=false;
    if (scalingFactor.getSelectedItem().equals(""String_Node_Str"")) {
      autoScale=true;
    }
 else     if (scalingFactor.getSelectedItem().equals(""String_Node_Str"")) {
      fixedRatioScale=true;
    }
  }
  if (s instanceof JCheckBox && (JCheckBox)s == sendLocalUsername) {
    if (!applet)     defaults.setPref(""String_Node_Str"",(sendLocalUsername.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == secVeNCrypt) {
    encNone.setEnabled(secVeNCrypt.isSelected());
    encTLS.setEnabled(secVeNCrypt.isSelected());
    encX509.setEnabled(secVeNCrypt.isSelected());
    ca.setEnabled(secVeNCrypt.isSelected());
    crl.setEnabled(secVeNCrypt.isSelected());
    secIdent.setEnabled(secVeNCrypt.isSelected());
    secNone.setEnabled(secVeNCrypt.isSelected());
    secVnc.setEnabled(secVeNCrypt.isSelected());
    secPlain.setEnabled(secVeNCrypt.isSelected());
    sendLocalUsername.setEnabled(secVeNCrypt.isSelected());
  }
  if (s instanceof JCheckBox && (JCheckBox)s == secIdent || s instanceof JCheckBox && (JCheckBox)s == secPlain) {
    sendLocalUsername.setEnabled(secIdent.isSelected() || secPlain.isSelected());
  }
}",0.9859562164394878
111567,"public OptionsDialog(OptionsDialogCallback cb_){
  super(false);
  cb=cb_;
  setResizable(false);
  setTitle(""String_Node_Str"");
  defaults=new UserPrefs(""String_Node_Str"");
  getContentPane().setLayout(new BoxLayout(getContentPane(),BoxLayout.PAGE_AXIS));
  JTabbedPane tabPane=new JTabbedPane();
  ButtonGroup encodingGroup=new ButtonGroup();
  ButtonGroup colourGroup=new ButtonGroup();
  FormatPanel=new JPanel(new GridBagLayout());
  autoSelect=new JCheckBox(""String_Node_Str"");
  autoSelect.addItemListener(this);
  JPanel encodingPanel=new JPanel(new GridBagLayout());
  encodingPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  zrle=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  hextile=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  tight=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  raw=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  JPanel tightPanel=new JPanel(new GridBagLayout());
  customCompressLevel=new JCheckBox(""String_Node_Str"");
  customCompressLevel.addItemListener(this);
  Object[] compressionLevels={1,2,3,4,5,6};
  compressLevel=new JComboBox(compressionLevels);
  compressLevel.setEditable(true);
  JLabel compressionLabel=new JLabel(""String_Node_Str"");
  noJpeg=new JCheckBox(""String_Node_Str"");
  noJpeg.addItemListener(this);
  Object[] qualityLevels={0,1,2,3,4,5,6,7,8,9};
  qualityLevel=new JComboBox(qualityLevels);
  JLabel qualityLabel=new JLabel(""String_Node_Str"");
  compressLevel.setPreferredSize(qualityLevel.getPreferredSize());
  if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    compressLevel.setBorder(BorderFactory.createCompoundBorder(compressLevel.getBorder(),BorderFactory.createEmptyBorder(0,1,0,0)));
  }
 else {
    ComboBoxEditor editor=compressLevel.getEditor();
    JTextField jtf=(JTextField)editor.getEditorComponent();
    jtf.setBorder(new CompoundBorder(jtf.getBorder(),new EmptyBorder(0,1,0,0)));
  }
  addGBComponent(customCompressLevel,tightPanel,0,0,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,2,0,0));
  addGBComponent(compressLevel,tightPanel,0,1,1,1,2,2,0,0,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(0,20,0,0));
  addGBComponent(compressionLabel,tightPanel,1,1,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,5,0,0));
  addGBComponent(noJpeg,tightPanel,0,2,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,2,0,0));
  addGBComponent(qualityLevel,tightPanel,0,3,1,1,2,2,0,0,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(0,20,0,0));
  addGBComponent(qualityLabel,tightPanel,1,3,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,5,0,0));
  JPanel colourPanel=new JPanel(new GridBagLayout());
  colourPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  fullColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  mediumColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  lowColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  veryLowColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  addGBComponent(autoSelect,FormatPanel,0,0,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,2,0,0));
  addGBComponent(encodingPanel,FormatPanel,0,1,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,2,0,0));
  addGBComponent(colourPanel,FormatPanel,1,1,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_END,new Insets(0,2,0,0));
  addGBComponent(tightPanel,FormatPanel,0,2,2,GridBagConstraints.REMAINDER,2,2,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,2,0,0));
  InputsPanel=new JPanel(new GridBagLayout());
  viewOnly=new JCheckBox(""String_Node_Str"");
  viewOnly.addItemListener(this);
  acceptClipboard=new JCheckBox(""String_Node_Str"");
  acceptClipboard.addItemListener(this);
  sendClipboard=new JCheckBox(""String_Node_Str"");
  sendClipboard.addItemListener(this);
  JLabel menuKeyLabel=new JLabel(""String_Node_Str"");
  String[] menuKeys={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  menuKey=new JComboBox(menuKeys);
  menuKey.addItemListener(this);
  addGBComponent(viewOnly,InputsPanel,0,0,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(acceptClipboard,InputsPanel,0,1,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(sendClipboard,InputsPanel,0,2,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(menuKeyLabel,InputsPanel,0,3,1,GridBagConstraints.REMAINDER,0,0,1,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(8,8,0,4));
  addGBComponent(menuKey,InputsPanel,1,3,1,GridBagConstraints.REMAINDER,0,0,25,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(4,4,0,4));
  MiscPanel=new JPanel(new GridBagLayout());
  fullScreen=new JCheckBox(""String_Node_Str"");
  fullScreen.addItemListener(this);
  shared=new JCheckBox(""String_Node_Str"");
  shared.addItemListener(this);
  useLocalCursor=new JCheckBox(""String_Node_Str"");
  useLocalCursor.addItemListener(this);
  fastCopyRect=new JCheckBox(""String_Node_Str"");
  fastCopyRect.addItemListener(this);
  acceptBell=new JCheckBox(""String_Node_Str"");
  acceptBell.addItemListener(this);
  JLabel scalingFactorLabel=new JLabel(""String_Node_Str"");
  Object[] scalingFactors={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  scalingFactor=new JComboBox(scalingFactors);
  scalingFactor.setEditable(true);
  scalingFactor.addItemListener(this);
  addGBComponent(fullScreen,MiscPanel,0,0,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(shared,MiscPanel,0,1,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(useLocalCursor,MiscPanel,0,2,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(fastCopyRect,MiscPanel,0,3,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(acceptBell,MiscPanel,0,4,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(4,4,0,4));
  addGBComponent(scalingFactorLabel,MiscPanel,0,5,1,GridBagConstraints.REMAINDER,0,0,1,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(8,8,0,4));
  addGBComponent(scalingFactor,MiscPanel,1,5,1,GridBagConstraints.REMAINDER,0,0,25,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(4,4,0,4));
  DefaultsPanel=new JPanel(new GridBagLayout());
  JPanel configPanel=new JPanel(new GridBagLayout());
  configPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  JButton cfReloadButton=new JButton(""String_Node_Str"");
  cfReloadButton.addActionListener(this);
  addGBComponent(cfReloadButton,configPanel,0,0,1,1,0,0,0,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  JButton cfSaveButton=new JButton(""String_Node_Str"");
  cfSaveButton.addActionListener(this);
  addGBComponent(cfSaveButton,configPanel,0,1,1,1,0,0,0,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  JButton cfSaveAsButton=new JButton(""String_Node_Str"");
  cfSaveAsButton.addActionListener(this);
  addGBComponent(cfSaveAsButton,configPanel,0,2,1,1,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  cfReloadButton.setEnabled(false);
  cfSaveButton.setEnabled(false);
  JPanel defaultsPanel=new JPanel(new GridBagLayout());
  defaultsPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  JButton defReloadButton=new JButton(""String_Node_Str"");
  defReloadButton.addActionListener(this);
  addGBComponent(defReloadButton,defaultsPanel,0,0,1,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  defSaveButton=new JButton(""String_Node_Str"");
  defSaveButton.addActionListener(this);
  addGBComponent(defSaveButton,defaultsPanel,0,1,1,1,0,0,0,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  addGBComponent(configPanel,DefaultsPanel,0,0,1,GridBagConstraints.REMAINDER,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.PAGE_START,new Insets(4,4,4,4));
  addGBComponent(defaultsPanel,DefaultsPanel,1,0,1,GridBagConstraints.REMAINDER,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.PAGE_START,new Insets(4,4,4,4));
  SecPanel=new JPanel(new GridBagLayout());
  JPanel encryptionPanel=new JPanel(new GridBagLayout());
  encryptionPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  encNone=addCheckbox(""String_Node_Str"",null,encryptionPanel);
  encTLS=addCheckbox(""String_Node_Str"",null,encryptionPanel);
  encX509=addJCheckBox(""String_Node_Str"",null,encryptionPanel,new GridBagConstraints(0,2,1,1,1,1,GridBagConstraints.LINE_START,GridBagConstraints.REMAINDER,new Insets(0,0,0,60),0,0));
  JPanel x509Panel=new JPanel(new GridBagLayout());
  x509Panel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  ca=new JButton(""String_Node_Str"");
  ca.setPreferredSize(new Dimension(145,25));
  ca.addActionListener(this);
  crl=new JButton(""String_Node_Str"");
  crl.setPreferredSize(new Dimension(145,25));
  crl.addActionListener(this);
  addGBComponent(ca,x509Panel,0,0,1,1,2,2,0,1,GridBagConstraints.NONE,GridBagConstraints.LINE_START,new Insets(2,2,2,2));
  addGBComponent(crl,x509Panel,1,0,1,1,2,2,1,1,GridBagConstraints.NONE,GridBagConstraints.LINE_START,new Insets(2,2,2,2));
  JPanel authPanel=new JPanel(new GridBagLayout());
  authPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  secNone=addCheckbox(""String_Node_Str"",null,authPanel);
  secVnc=addCheckbox(""String_Node_Str"",null,authPanel);
  secPlain=addJCheckBox(""String_Node_Str"",null,authPanel,new GridBagConstraints(0,2,1,1,1,1,GridBagConstraints.LINE_START,GridBagConstraints.NONE,new Insets(0,0,0,5),0,0));
  secIdent=addJCheckBox(""String_Node_Str"",null,authPanel,new GridBagConstraints(0,3,1,1,1,1,GridBagConstraints.LINE_START,GridBagConstraints.NONE,new Insets(0,0,0,5),0,0));
  sendLocalUsername=new JCheckBox(""String_Node_Str"");
  sendLocalUsername.addItemListener(this);
  addGBComponent(sendLocalUsername,authPanel,1,2,1,2,0,0,2,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,20,0,0));
  secVeNCrypt=new JCheckBox(""String_Node_Str"");
  secVeNCrypt.addItemListener(this);
  addGBComponent(secVeNCrypt,SecPanel,0,0,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,2,0,20));
  addGBComponent(encryptionPanel,SecPanel,0,1,1,1,2,2,1,0,GridBagConstraints.NONE,GridBagConstraints.LINE_START,new Insets(0,4,2,4));
  addGBComponent(x509Panel,SecPanel,0,2,1,1,2,2,1,0,GridBagConstraints.NONE,GridBagConstraints.LINE_START,new Insets(2,4,2,4));
  addGBComponent(authPanel,SecPanel,0,3,1,1,2,2,1,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(2,4,2,4));
  tabPane.add(FormatPanel);
  tabPane.add(InputsPanel);
  tabPane.add(MiscPanel);
  tabPane.add(DefaultsPanel);
  tabPane.add(SecPanel);
  tabPane.addTab(""String_Node_Str"",FormatPanel);
  tabPane.addTab(""String_Node_Str"",InputsPanel);
  tabPane.addTab(""String_Node_Str"",MiscPanel);
  tabPane.addTab(""String_Node_Str"",DefaultsPanel);
  tabPane.addTab(""String_Node_Str"",SecPanel);
  tabPane.setBorder(BorderFactory.createEmptyBorder(4,4,0,4));
  okButton=new JButton(""String_Node_Str"");
  okButton.setPreferredSize(new Dimension(90,30));
  okButton.addActionListener(this);
  cancelButton=new JButton(""String_Node_Str"");
  cancelButton.setPreferredSize(new Dimension(90,30));
  cancelButton.addActionListener(this);
  JPanel buttonPane=new JPanel();
  buttonPane.setLayout(new BoxLayout(buttonPane,BoxLayout.LINE_AXIS));
  buttonPane.setBorder(BorderFactory.createEmptyBorder(4,0,0,0));
  buttonPane.add(Box.createHorizontalGlue());
  buttonPane.add(okButton);
  buttonPane.add(Box.createRigidArea(new Dimension(4,0)));
  buttonPane.add(cancelButton);
  buttonPane.add(Box.createRigidArea(new Dimension(4,0)));
  this.getContentPane().add(tabPane);
  this.getContentPane().add(buttonPane);
  pack();
}","public OptionsDialog(OptionsDialogCallback cb_,CConn cc_){
  super(false);
  cb=cb_;
  CConn cc=cc_;
  applet=cc.viewer.applet;
  setResizable(false);
  setTitle(""String_Node_Str"");
  if (!applet)   defaults=new UserPrefs(""String_Node_Str"");
  getContentPane().setLayout(new BoxLayout(getContentPane(),BoxLayout.PAGE_AXIS));
  JTabbedPane tabPane=new JTabbedPane();
  ButtonGroup encodingGroup=new ButtonGroup();
  ButtonGroup colourGroup=new ButtonGroup();
  FormatPanel=new JPanel(new GridBagLayout());
  autoSelect=new JCheckBox(""String_Node_Str"");
  autoSelect.addItemListener(this);
  JPanel encodingPanel=new JPanel(new GridBagLayout());
  encodingPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  zrle=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  hextile=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  tight=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  raw=addRadioCheckbox(""String_Node_Str"",encodingGroup,encodingPanel);
  JPanel tightPanel=new JPanel(new GridBagLayout());
  customCompressLevel=new JCheckBox(""String_Node_Str"");
  customCompressLevel.addItemListener(this);
  Object[] compressionLevels={1,2,3,4,5,6};
  compressLevel=new JComboBox(compressionLevels);
  compressLevel.setEditable(true);
  JLabel compressionLabel=new JLabel(""String_Node_Str"");
  noJpeg=new JCheckBox(""String_Node_Str"");
  noJpeg.addItemListener(this);
  Object[] qualityLevels={0,1,2,3,4,5,6,7,8,9};
  qualityLevel=new JComboBox(qualityLevels);
  JLabel qualityLabel=new JLabel(""String_Node_Str"");
  compressLevel.setPreferredSize(qualityLevel.getPreferredSize());
  if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    compressLevel.setBorder(BorderFactory.createCompoundBorder(compressLevel.getBorder(),BorderFactory.createEmptyBorder(0,1,0,0)));
  }
 else {
    ComboBoxEditor editor=compressLevel.getEditor();
    JTextField jtf=(JTextField)editor.getEditorComponent();
    jtf.setBorder(new CompoundBorder(jtf.getBorder(),new EmptyBorder(0,1,0,0)));
  }
  addGBComponent(customCompressLevel,tightPanel,0,0,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,2,0,0));
  addGBComponent(compressLevel,tightPanel,0,1,1,1,2,2,0,0,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(0,20,0,0));
  addGBComponent(compressionLabel,tightPanel,1,1,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,5,0,0));
  addGBComponent(noJpeg,tightPanel,0,2,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,2,0,0));
  addGBComponent(qualityLevel,tightPanel,0,3,1,1,2,2,0,0,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(0,20,0,0));
  addGBComponent(qualityLabel,tightPanel,1,3,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,5,0,0));
  JPanel colourPanel=new JPanel(new GridBagLayout());
  colourPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  fullColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  mediumColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  lowColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  veryLowColour=addRadioCheckbox(""String_Node_Str"",colourGroup,colourPanel);
  addGBComponent(autoSelect,FormatPanel,0,0,2,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,2,0,0));
  addGBComponent(encodingPanel,FormatPanel,0,1,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,2,0,0));
  addGBComponent(colourPanel,FormatPanel,1,1,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_END,new Insets(0,2,0,0));
  addGBComponent(tightPanel,FormatPanel,0,2,2,GridBagConstraints.REMAINDER,2,2,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,2,0,0));
  InputsPanel=new JPanel(new GridBagLayout());
  viewOnly=new JCheckBox(""String_Node_Str"");
  viewOnly.addItemListener(this);
  acceptClipboard=new JCheckBox(""String_Node_Str"");
  acceptClipboard.addItemListener(this);
  sendClipboard=new JCheckBox(""String_Node_Str"");
  sendClipboard.addItemListener(this);
  JLabel menuKeyLabel=new JLabel(""String_Node_Str"");
  String[] menuKeys={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  menuKey=new JComboBox(menuKeys);
  menuKey.addItemListener(this);
  addGBComponent(viewOnly,InputsPanel,0,0,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(acceptClipboard,InputsPanel,0,1,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(sendClipboard,InputsPanel,0,2,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(menuKeyLabel,InputsPanel,0,3,1,GridBagConstraints.REMAINDER,0,0,1,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(8,8,0,4));
  addGBComponent(menuKey,InputsPanel,1,3,1,GridBagConstraints.REMAINDER,0,0,25,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(4,4,0,4));
  MiscPanel=new JPanel(new GridBagLayout());
  fullScreen=new JCheckBox(""String_Node_Str"");
  fullScreen.addItemListener(this);
  shared=new JCheckBox(""String_Node_Str"");
  shared.addItemListener(this);
  useLocalCursor=new JCheckBox(""String_Node_Str"");
  useLocalCursor.addItemListener(this);
  fastCopyRect=new JCheckBox(""String_Node_Str"");
  fastCopyRect.addItemListener(this);
  acceptBell=new JCheckBox(""String_Node_Str"");
  acceptBell.addItemListener(this);
  JLabel scalingFactorLabel=new JLabel(""String_Node_Str"");
  Object[] scalingFactors={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  scalingFactor=new JComboBox(scalingFactors);
  scalingFactor.setEditable(true);
  scalingFactor.addItemListener(this);
  addGBComponent(fullScreen,MiscPanel,0,0,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(shared,MiscPanel,0,1,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(useLocalCursor,MiscPanel,0,2,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(fastCopyRect,MiscPanel,0,3,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(4,4,0,4));
  addGBComponent(acceptBell,MiscPanel,0,4,2,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(4,4,0,4));
  addGBComponent(scalingFactorLabel,MiscPanel,0,5,1,GridBagConstraints.REMAINDER,0,0,1,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(8,8,0,4));
  addGBComponent(scalingFactor,MiscPanel,1,5,1,GridBagConstraints.REMAINDER,0,0,25,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(4,4,0,4));
  DefaultsPanel=new JPanel(new GridBagLayout());
  JPanel configPanel=new JPanel(new GridBagLayout());
  configPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  JButton cfReloadButton=new JButton(""String_Node_Str"");
  cfReloadButton.addActionListener(this);
  addGBComponent(cfReloadButton,configPanel,0,0,1,1,0,0,0,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  JButton cfSaveButton=new JButton(""String_Node_Str"");
  cfSaveButton.addActionListener(this);
  addGBComponent(cfSaveButton,configPanel,0,1,1,1,0,0,0,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  JButton cfSaveAsButton=new JButton(""String_Node_Str"");
  cfSaveAsButton.addActionListener(this);
  addGBComponent(cfSaveAsButton,configPanel,0,2,1,1,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  cfReloadButton.setEnabled(false);
  cfSaveButton.setEnabled(false);
  cfSaveAsButton.setEnabled(!applet);
  JPanel defaultsPanel=new JPanel(new GridBagLayout());
  defaultsPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  JButton defReloadButton=new JButton(""String_Node_Str"");
  defReloadButton.addActionListener(this);
  addGBComponent(defReloadButton,defaultsPanel,0,0,1,1,0,0,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  defSaveButton=new JButton(""String_Node_Str"");
  defSaveButton.addActionListener(this);
  addGBComponent(defSaveButton,defaultsPanel,0,1,1,1,0,0,0,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.CENTER,new Insets(4,8,4,8));
  addGBComponent(configPanel,DefaultsPanel,0,0,1,GridBagConstraints.REMAINDER,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.PAGE_START,new Insets(4,4,4,4));
  addGBComponent(defaultsPanel,DefaultsPanel,1,0,1,GridBagConstraints.REMAINDER,0,0,1,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.PAGE_START,new Insets(4,4,4,4));
  defReloadButton.setEnabled(!applet);
  defSaveButton.setEnabled(!applet);
  SecPanel=new JPanel(new GridBagLayout());
  JPanel encryptionPanel=new JPanel(new GridBagLayout());
  encryptionPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  encNone=addCheckbox(""String_Node_Str"",null,encryptionPanel);
  encTLS=addCheckbox(""String_Node_Str"",null,encryptionPanel);
  encX509=addJCheckBox(""String_Node_Str"",null,encryptionPanel,new GridBagConstraints(0,2,1,1,1,1,GridBagConstraints.LINE_START,GridBagConstraints.REMAINDER,new Insets(0,0,0,60),0,0));
  JPanel x509Panel=new JPanel(new GridBagLayout());
  x509Panel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  ca=new JButton(""String_Node_Str"");
  ca.setPreferredSize(new Dimension(145,25));
  ca.addActionListener(this);
  crl=new JButton(""String_Node_Str"");
  crl.setPreferredSize(new Dimension(145,25));
  crl.addActionListener(this);
  addGBComponent(ca,x509Panel,0,0,1,1,2,2,0,1,GridBagConstraints.NONE,GridBagConstraints.LINE_START,new Insets(2,2,2,2));
  addGBComponent(crl,x509Panel,1,0,1,1,2,2,1,1,GridBagConstraints.NONE,GridBagConstraints.LINE_START,new Insets(2,2,2,2));
  JPanel authPanel=new JPanel(new GridBagLayout());
  authPanel.setBorder(BorderFactory.createTitledBorder(""String_Node_Str""));
  secNone=addCheckbox(""String_Node_Str"",null,authPanel);
  secVnc=addCheckbox(""String_Node_Str"",null,authPanel);
  secPlain=addJCheckBox(""String_Node_Str"",null,authPanel,new GridBagConstraints(0,2,1,1,1,1,GridBagConstraints.LINE_START,GridBagConstraints.NONE,new Insets(0,0,0,5),0,0));
  secIdent=addJCheckBox(""String_Node_Str"",null,authPanel,new GridBagConstraints(0,3,1,1,1,1,GridBagConstraints.LINE_START,GridBagConstraints.NONE,new Insets(0,0,0,5),0,0));
  sendLocalUsername=new JCheckBox(""String_Node_Str"");
  sendLocalUsername.addItemListener(this);
  addGBComponent(sendLocalUsername,authPanel,1,2,1,2,0,0,2,1,GridBagConstraints.HORIZONTAL,GridBagConstraints.LINE_START,new Insets(0,20,0,0));
  secVeNCrypt=new JCheckBox(""String_Node_Str"");
  secVeNCrypt.addItemListener(this);
  addGBComponent(secVeNCrypt,SecPanel,0,0,1,1,2,2,1,0,GridBagConstraints.HORIZONTAL,GridBagConstraints.FIRST_LINE_START,new Insets(0,2,0,20));
  addGBComponent(encryptionPanel,SecPanel,0,1,1,1,2,2,1,0,GridBagConstraints.NONE,GridBagConstraints.LINE_START,new Insets(0,4,2,4));
  addGBComponent(x509Panel,SecPanel,0,2,1,1,2,2,1,0,GridBagConstraints.NONE,GridBagConstraints.LINE_START,new Insets(2,4,2,4));
  addGBComponent(authPanel,SecPanel,0,3,1,1,2,2,1,1,GridBagConstraints.NONE,GridBagConstraints.FIRST_LINE_START,new Insets(2,4,2,4));
  tabPane.add(FormatPanel);
  tabPane.add(InputsPanel);
  tabPane.add(MiscPanel);
  tabPane.add(DefaultsPanel);
  tabPane.add(SecPanel);
  tabPane.addTab(""String_Node_Str"",FormatPanel);
  tabPane.addTab(""String_Node_Str"",InputsPanel);
  tabPane.addTab(""String_Node_Str"",MiscPanel);
  tabPane.addTab(""String_Node_Str"",DefaultsPanel);
  tabPane.addTab(""String_Node_Str"",SecPanel);
  tabPane.setBorder(BorderFactory.createEmptyBorder(4,4,0,4));
  okButton=new JButton(""String_Node_Str"");
  okButton.setPreferredSize(new Dimension(90,30));
  okButton.addActionListener(this);
  cancelButton=new JButton(""String_Node_Str"");
  cancelButton.setPreferredSize(new Dimension(90,30));
  cancelButton.addActionListener(this);
  JPanel buttonPane=new JPanel();
  buttonPane.setLayout(new BoxLayout(buttonPane,BoxLayout.LINE_AXIS));
  buttonPane.setBorder(BorderFactory.createEmptyBorder(4,0,0,0));
  buttonPane.add(Box.createHorizontalGlue());
  buttonPane.add(okButton);
  buttonPane.add(Box.createRigidArea(new Dimension(4,0)));
  buttonPane.add(cancelButton);
  buttonPane.add(Box.createRigidArea(new Dimension(4,0)));
  this.getContentPane().add(tabPane);
  this.getContentPane().add(buttonPane);
  pack();
}",0.992992453411366
111568,"public void endDialog(){
  if (ok) {
    options.defaults.setPref(""String_Node_Str"",(encryption.getSelectedIndex() == 1) ? ""String_Node_Str"" : ""String_Node_Str"");
    if (!server.getSelectedItem().toString().equals(""String_Node_Str"")) {
      String t=(options.defaults.getString(""String_Node_Str"") == null) ? ""String_Node_Str"" : options.defaults.getString(""String_Node_Str"");
      StringTokenizer st=new StringTokenizer(t,""String_Node_Str"");
      StringBuffer sb=new StringBuffer().append((String)server.getSelectedItem());
      while (st.hasMoreTokens()) {
        String s=st.nextToken();
        if (!s.equals((String)server.getSelectedItem()) && !s.equals(""String_Node_Str"")) {
          sb.append(',');
          sb.append(s);
        }
      }
      options.defaults.setPref(""String_Node_Str"",sb.toString());
    }
    try {
      options.defaults.Save();
    }
 catch (    java.lang.Exception x) {
    }
  }
  done=true;
  if (modal) {
synchronized (this) {
      notify();
    }
  }
  this.dispose();
}","public void endDialog(){
  if (ok && !cc.viewer.applet) {
    options.defaults.setPref(""String_Node_Str"",(encryption.getSelectedIndex() == 1) ? ""String_Node_Str"" : ""String_Node_Str"");
    if (!server.getSelectedItem().toString().equals(""String_Node_Str"")) {
      String t=(options.defaults.getString(""String_Node_Str"") == null) ? ""String_Node_Str"" : options.defaults.getString(""String_Node_Str"");
      StringTokenizer st=new StringTokenizer(t,""String_Node_Str"");
      StringBuffer sb=new StringBuffer().append((String)server.getSelectedItem());
      while (st.hasMoreTokens()) {
        String s=st.nextToken();
        if (!s.equals((String)server.getSelectedItem()) && !s.equals(""String_Node_Str"")) {
          sb.append(',');
          sb.append(s);
        }
      }
      options.defaults.setPref(""String_Node_Str"",sb.toString());
    }
    try {
      options.defaults.Save();
    }
 catch (    java.lang.Exception x) {
    }
  }
  done=true;
  if (modal) {
synchronized (this) {
      notify();
    }
  }
  this.dispose();
}",0.9897510980966324
111569,"public void init(){
  vlog.debug(""String_Node_Str"");
  setBackground(Color.white);
  logo=getImage(getDocumentBase(),""String_Node_Str"");
}","public void init(){
  vlog.debug(""String_Node_Str"");
  setBackground(Color.white);
  ClassLoader cl=this.getClass().getClassLoader();
  ImageIcon icon=new ImageIcon(cl.getResource(""String_Node_Str""));
  logo=icon.getImage();
}",0.6208791208791209
111570,"public static void setDefaults(){
  String homeDir=null;
  if ((homeDir=UserPrefs.getHomeDir()) == null) {
    vlog.error(""String_Node_Str"");
    return;
  }
  String vnchomedir=homeDir + UserPrefs.getFileSeperator() + ""String_Node_Str""+ UserPrefs.getFileSeperator();
  String caDefault=new String(vnchomedir + ""String_Node_Str"");
  String crlDefault=new String(vnchomedir + ""String_Node_Str"");
  if (new File(caDefault).exists())   x509ca.setDefaultStr(caDefault);
  if (new File(crlDefault).exists())   x509crl.setDefaultStr(crlDefault);
}","public static void setDefaults(){
  String homeDir=null;
  if ((homeDir=UserPrefs.getHomeDir()) == null) {
    vlog.error(""String_Node_Str"");
    return;
  }
  String vnchomedir=homeDir + UserPrefs.getFileSeparator() + ""String_Node_Str""+ UserPrefs.getFileSeparator();
  String caDefault=new String(vnchomedir + ""String_Node_Str"");
  String crlDefault=new String(vnchomedir + ""String_Node_Str"");
  if (new File(caDefault).exists())   x509ca.setDefaultStr(caDefault);
  if (new File(crlDefault).exists())   x509crl.setDefaultStr(crlDefault);
}",0.9963031423290204
111571,"/** 
 * We try to read in a preferences file, from the user's ""HOME"" directory. We base the name of the file, on the name of the application we are in. Use the getHomeDir() call if you want to know what directory this is in.
 * @param appName_ name of application calling this class
 */
public UserPrefs(String appName_){
  appName=appName_;
  try {
    systemprops=System.getProperties();
  }
 catch (  java.security.AccessControlException e) {
    System.out.println(""String_Node_Str"");
  }
  prefFile=getHomeDir() + getFileSeperator() + ""String_Node_Str""+ appName;
  try {
    load(new java.io.FileInputStream(prefFile));
  }
 catch (  java.security.AccessControlException e) {
    System.out.println(""String_Node_Str"");
  }
catch (  Exception err) {
    if (err instanceof java.io.FileNotFoundException) {
      try {
        store(new FileOutputStream(prefFile),appName + ""String_Node_Str"");
      }
 catch (      Exception e) {
      }
    }
 else {
      System.out.println(""String_Node_Str"" + err.getMessage());
    }
  }
}","/** 
 * We try to read in a preferences file, from the user's ""HOME"" directory. We base the name of the file, on the name of the application we are in. Use the getHomeDir() call if you want to know what directory this is in.
 * @param appName_ name of application calling this class
 */
public UserPrefs(String appName_){
  appName=appName_;
  try {
    systemprops=System.getProperties();
  }
 catch (  java.security.AccessControlException e) {
    System.out.println(""String_Node_Str"");
  }
  prefFile=getHomeDir() + getFileSeparator() + ""String_Node_Str""+ appName;
  try {
    load(new java.io.FileInputStream(prefFile));
  }
 catch (  java.security.AccessControlException e) {
    System.out.println(""String_Node_Str"");
  }
catch (  Exception err) {
    if (err instanceof java.io.FileNotFoundException) {
      try {
        store(new FileOutputStream(prefFile),appName + ""String_Node_Str"");
      }
 catch (      Exception e) {
      }
    }
 else {
      System.out.println(""String_Node_Str"" + err.getMessage());
    }
  }
}",0.9990300678952472
111572,"final public static String getFileSeperator(){
  String seperator=null;
  try {
    seperator=System.getProperties().get(""String_Node_Str"").toString();
  }
 catch (  java.security.AccessControlException e) {
    System.out.println(""String_Node_Str"");
  }
  return seperator;
}","final public static String getFileSeperator(){
  String seperator=null;
  try {
    seperator=(String)System.getProperties().get(""String_Node_Str"");
  }
 catch (  java.security.AccessControlException e) {
    System.out.println(""String_Node_Str"");
  }
  return seperator;
}",0.965391621129326
111573,"public CConn(VncViewer viewer_,java.net.Socket sock_,String vncServerName,boolean reverse){
  serverHost=null;
  serverPort=0;
  sock=sock_;
  viewer=viewer_;
  currentEncoding=Encodings.encodingTight;
  lastServerEncoding=-1;
  fullColour=viewer.fullColour.getValue();
  lowColourLevel=2;
  autoSelect=viewer.autoSelect.getValue();
  shared=viewer.shared.getValue();
  formatChange=false;
  encodingChange=false;
  sameMachine=false;
  fullScreen=viewer.fullScreen.getValue();
  menuKey=Keysyms.F8;
  options=new OptionsDialog(this,this);
  options.initDialog();
  clipboardDialog=new ClipboardDialog(this);
  firstUpdate=true;
  pendingUpdate=false;
  setShared(shared);
  upg=this;
  msg=this;
  String encStr=viewer.preferredEncoding.getValue();
  int encNum=Encodings.encodingNum(encStr);
  if (encNum != -1) {
    currentEncoding=encNum;
  }
  cp.supportsDesktopResize=true;
  cp.supportsExtendedDesktopSize=true;
  cp.supportsClientRedirect=true;
  cp.supportsDesktopRename=true;
  cp.supportsLocalCursor=viewer.useLocalCursor.getValue();
  cp.customCompressLevel=viewer.customCompressLevel.getValue();
  cp.compressLevel=viewer.compressLevel.getValue();
  cp.noJpeg=viewer.noJpeg.getValue();
  cp.qualityLevel=viewer.qualityLevel.getValue();
  initMenu();
  if (sock != null) {
    String name=sock.getRemoteSocketAddress() + ""String_Node_Str"" + sock.getPort();
    vlog.info(""String_Node_Str"" + name);
  }
 else {
    if (vncServerName != null) {
      serverHost=Hostname.getHost(vncServerName);
      serverPort=Hostname.getPort(vncServerName);
    }
 else {
      ServerDialog dlg=new ServerDialog(options,vncServerName,this);
      if (!dlg.showDialog() || dlg.server.getSelectedItem().equals(""String_Node_Str"")) {
        System.exit(1);
      }
      vncServerName=(String)dlg.server.getSelectedItem();
      serverHost=Hostname.getHost(vncServerName);
      serverPort=Hostname.getPort(vncServerName);
    }
    try {
      sock=new java.net.Socket(serverHost,serverPort);
    }
 catch (    java.io.IOException e) {
      throw new Exception(e.toString());
    }
    vlog.info(""String_Node_Str"" + serverHost + ""String_Node_Str""+ serverPort);
  }
  sameMachine=(sock.getLocalSocketAddress() == sock.getRemoteSocketAddress());
  try {
    sock.setTcpNoDelay(true);
    sock.setTrafficClass(0x10);
    setServerName(serverHost);
    jis=new JavaInStream(sock.getInputStream());
    jos=new JavaOutStream(sock.getOutputStream());
  }
 catch (  java.net.SocketException e) {
    throw new Exception(e.toString());
  }
catch (  java.io.IOException e) {
    throw new Exception(e.toString());
  }
  setStreams(jis,jos);
  initialiseProtocol();
}","public CConn(VncViewer viewer_,java.net.Socket sock_,String vncServerName,boolean reverse){
  serverHost=null;
  serverPort=0;
  sock=sock_;
  viewer=viewer_;
  currentEncoding=Encodings.encodingTight;
  lastServerEncoding=-1;
  fullColour=viewer.fullColour.getValue();
  lowColourLevel=2;
  autoSelect=viewer.autoSelect.getValue();
  shared=viewer.shared.getValue();
  formatChange=false;
  encodingChange=false;
  sameMachine=false;
  fullScreen=viewer.fullScreen.getValue();
  menuKey=Keysyms.F8;
  options=new OptionsDialog(this);
  options.initDialog();
  clipboardDialog=new ClipboardDialog(this);
  firstUpdate=true;
  pendingUpdate=false;
  setShared(shared);
  upg=this;
  msg=this;
  String encStr=viewer.preferredEncoding.getValue();
  int encNum=Encodings.encodingNum(encStr);
  if (encNum != -1) {
    currentEncoding=encNum;
  }
  cp.supportsDesktopResize=true;
  cp.supportsExtendedDesktopSize=true;
  cp.supportsClientRedirect=true;
  cp.supportsDesktopRename=true;
  cp.supportsLocalCursor=viewer.useLocalCursor.getValue();
  cp.customCompressLevel=viewer.customCompressLevel.getValue();
  cp.compressLevel=viewer.compressLevel.getValue();
  cp.noJpeg=viewer.noJpeg.getValue();
  cp.qualityLevel=viewer.qualityLevel.getValue();
  initMenu();
  if (sock != null) {
    String name=sock.getRemoteSocketAddress() + ""String_Node_Str"" + sock.getPort();
    vlog.info(""String_Node_Str"" + name);
  }
 else {
    if (vncServerName != null) {
      serverHost=Hostname.getHost(vncServerName);
      serverPort=Hostname.getPort(vncServerName);
    }
 else {
      ServerDialog dlg=new ServerDialog(options,vncServerName,this);
      if (!dlg.showDialog() || dlg.server.getSelectedItem().equals(""String_Node_Str"")) {
        System.exit(1);
      }
      vncServerName=(String)dlg.server.getSelectedItem();
      serverHost=Hostname.getHost(vncServerName);
      serverPort=Hostname.getPort(vncServerName);
    }
    try {
      sock=new java.net.Socket(serverHost,serverPort);
    }
 catch (    java.io.IOException e) {
      throw new Exception(e.toString());
    }
    vlog.info(""String_Node_Str"" + serverHost + ""String_Node_Str""+ serverPort);
  }
  sameMachine=(sock.getLocalSocketAddress() == sock.getRemoteSocketAddress());
  try {
    sock.setTcpNoDelay(true);
    sock.setTrafficClass(0x10);
    setServerName(serverHost);
    jis=new JavaInStream(sock.getInputStream());
    jos=new JavaOutStream(sock.getOutputStream());
  }
 catch (  java.net.SocketException e) {
    throw new Exception(e.toString());
  }
catch (  java.io.IOException e) {
    throw new Exception(e.toString());
  }
  setStreams(jis,jos);
  initialiseProtocol();
}",0.999057137469357
111574,"public void serverCutText(String str,int len){
  setContents(str);
  Clipboard cb=null;
  if (!cc.viewer.applet)   cb=Toolkit.getDefaultToolkit().getSystemClipboard();
  if (cb != null) {
    StringSelection ss=new StringSelection(str);
    try {
      cb.setContents(ss,ss);
    }
 catch (    Exception e) {
      vlog.debug(e.toString());
    }
  }
}","public void serverCutText(String str,int len){
  setContents(str);
  SecurityManager sm=System.getSecurityManager();
  try {
    if (sm != null)     sm.checkSystemClipboardAccess();
    Clipboard cb=Toolkit.getDefaultToolkit().getSystemClipboard();
    if (cb != null) {
      StringSelection ss=new StringSelection(str);
      try {
        cb.setContents(ss,ss);
      }
 catch (      Exception e) {
        vlog.debug(e.toString());
      }
    }
  }
 catch (  SecurityException e) {
    System.err.println(""String_Node_Str"");
  }
}",0.7125140924464487
111575,"public void actionPerformed(ActionEvent e){
  Object s=e.getSource();
  if (s instanceof JButton && (JButton)s == okButton) {
    ok=true;
    if (cb != null)     cb.getOptions();
    endDialog();
  }
 else   if (s instanceof JButton && (JButton)s == cancelButton) {
    ok=false;
    endDialog();
  }
 else   if (s instanceof JButton && (JButton)s == defSaveButton) {
    try {
      defaults.Save();
    }
 catch (    java.lang.Exception x) {
    }
  }
 else   if (s instanceof JButton && (JButton)s == ca) {
    JFileChooser fc=new JFileChooser();
    fc.setDialogTitle(""String_Node_Str"");
    int ret=fc.showOpenDialog(this);
    if (ret == JFileChooser.APPROVE_OPTION)     CSecurityTLS.x509ca.setParam(fc.getSelectedFile().toString());
  }
 else   if (s instanceof JButton && (JButton)s == crl) {
    JFileChooser fc=new JFileChooser();
    fc.setDialogTitle(""String_Node_Str"");
    int ret=fc.showOpenDialog(this);
    if (ret == JFileChooser.APPROVE_OPTION)     CSecurityTLS.x509crl.setParam(fc.getSelectedFile().toString());
  }
}","public void actionPerformed(ActionEvent e){
  Object s=e.getSource();
  if (s instanceof JButton && (JButton)s == okButton) {
    autoScale=(scalingFactor.getSelectedItem().equals(""String_Node_Str""));
    fixedRatioScale=(scalingFactor.getSelectedItem().equals(""String_Node_Str""));
    ok=true;
    if (cb != null)     cb.getOptions();
    endDialog();
  }
 else   if (s instanceof JButton && (JButton)s == cancelButton) {
    ok=false;
    endDialog();
  }
 else   if (s instanceof JButton && (JButton)s == defSaveButton) {
    try {
      defaults.Save();
    }
 catch (    java.lang.Exception x) {
    }
  }
 else   if (s instanceof JButton && (JButton)s == ca) {
    JFileChooser fc=new JFileChooser();
    fc.setDialogTitle(""String_Node_Str"");
    int ret=fc.showOpenDialog(this);
    if (ret == JFileChooser.APPROVE_OPTION)     CSecurityTLS.x509ca.setParam(fc.getSelectedFile().toString());
  }
 else   if (s instanceof JButton && (JButton)s == crl) {
    JFileChooser fc=new JFileChooser();
    fc.setDialogTitle(""String_Node_Str"");
    int ret=fc.showOpenDialog(this);
    if (ret == JFileChooser.APPROVE_OPTION)     CSecurityTLS.x509crl.setParam(fc.getSelectedFile().toString());
  }
}",0.9301075268817204
111576,"public void itemStateChanged(ItemEvent e){
  Object s=e.getSource();
  if (s instanceof JCheckBox && (JCheckBox)s == autoSelect) {
    zrle.setEnabled(!autoSelect.isSelected());
    hextile.setEnabled(!autoSelect.isSelected());
    tight.setEnabled(!autoSelect.isSelected());
    raw.setEnabled(!autoSelect.isSelected());
    fullColour.setEnabled(!autoSelect.isSelected());
    mediumColour.setEnabled(!autoSelect.isSelected());
    lowColour.setEnabled(!autoSelect.isSelected());
    veryLowColour.setEnabled(!autoSelect.isSelected());
    defaults.setPref(""String_Node_Str"",(autoSelect.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == customCompressLevel) {
    compressLevel.setEnabled(customCompressLevel.isSelected());
    defaults.setPref(""String_Node_Str"",(customCompressLevel.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == noJpeg) {
    qualityLevel.setEnabled(noJpeg.isSelected());
    defaults.setPref(""String_Node_Str"",(noJpeg.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JComboBox && (JComboBox)s == scalingFactor) {
    autoScale=fixedRatioScale=false;
    if (scalingFactor.getSelectedItem().equals(""String_Node_Str"")) {
      autoScale=true;
    }
 else     if (scalingFactor.getSelectedItem().equals(""String_Node_Str"")) {
      fixedRatioScale=true;
    }
  }
  if (s instanceof JCheckBox && (JCheckBox)s == sendLocalUsername) {
    defaults.setPref(""String_Node_Str"",(sendLocalUsername.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == secVeNCrypt) {
    encNone.setEnabled(secVeNCrypt.isSelected());
    encTLS.setEnabled(secVeNCrypt.isSelected());
    encX509.setEnabled(secVeNCrypt.isSelected());
    ca.setEnabled(secVeNCrypt.isSelected());
    crl.setEnabled(secVeNCrypt.isSelected());
    secIdent.setEnabled(secVeNCrypt.isSelected());
    secNone.setEnabled(secVeNCrypt.isSelected());
    secVnc.setEnabled(secVeNCrypt.isSelected());
    secPlain.setEnabled(secVeNCrypt.isSelected());
    sendLocalUsername.setEnabled(secVeNCrypt.isSelected());
  }
  if (s instanceof JCheckBox && (JCheckBox)s == secIdent || s instanceof JCheckBox && (JCheckBox)s == secPlain) {
    sendLocalUsername.setEnabled(secIdent.isSelected() || secPlain.isSelected());
  }
}","public void itemStateChanged(ItemEvent e){
  Object s=e.getSource();
  if (s instanceof JCheckBox && (JCheckBox)s == autoSelect) {
    zrle.setEnabled(!autoSelect.isSelected());
    hextile.setEnabled(!autoSelect.isSelected());
    tight.setEnabled(!autoSelect.isSelected());
    raw.setEnabled(!autoSelect.isSelected());
    fullColour.setEnabled(!autoSelect.isSelected());
    mediumColour.setEnabled(!autoSelect.isSelected());
    lowColour.setEnabled(!autoSelect.isSelected());
    veryLowColour.setEnabled(!autoSelect.isSelected());
    defaults.setPref(""String_Node_Str"",(autoSelect.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == customCompressLevel) {
    compressLevel.setEnabled(customCompressLevel.isSelected());
    defaults.setPref(""String_Node_Str"",(customCompressLevel.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == noJpeg) {
    qualityLevel.setEnabled(noJpeg.isSelected());
    defaults.setPref(""String_Node_Str"",(noJpeg.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == sendLocalUsername) {
    defaults.setPref(""String_Node_Str"",(sendLocalUsername.isSelected()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (s instanceof JCheckBox && (JCheckBox)s == secVeNCrypt) {
    encNone.setEnabled(secVeNCrypt.isSelected());
    encTLS.setEnabled(secVeNCrypt.isSelected());
    encX509.setEnabled(secVeNCrypt.isSelected());
    ca.setEnabled(secVeNCrypt.isSelected());
    crl.setEnabled(secVeNCrypt.isSelected());
    secIdent.setEnabled(secVeNCrypt.isSelected());
    secNone.setEnabled(secVeNCrypt.isSelected());
    secVnc.setEnabled(secVeNCrypt.isSelected());
    secPlain.setEnabled(secVeNCrypt.isSelected());
    sendLocalUsername.setEnabled(secVeNCrypt.isSelected());
  }
  if (s instanceof JCheckBox && (JCheckBox)s == secIdent || s instanceof JCheckBox && (JCheckBox)s == secPlain) {
    sendLocalUsername.setEnabled(secIdent.isSelected() || secPlain.isSelected());
  }
}",0.9300761990138952
111577,"public void initDialog(){
  if (cb != null)   cb.setOptions();
  zrle.setEnabled(!autoSelect.isSelected());
  hextile.setEnabled(!autoSelect.isSelected());
  tight.setEnabled(!autoSelect.isSelected());
  raw.setEnabled(!autoSelect.isSelected());
  fullColour.setEnabled(!autoSelect.isSelected());
  mediumColour.setEnabled(!autoSelect.isSelected());
  lowColour.setEnabled(!autoSelect.isSelected());
  veryLowColour.setEnabled(!autoSelect.isSelected());
  compressLevel.setEnabled(customCompressLevel.isSelected());
  qualityLevel.setEnabled(noJpeg.isSelected());
  sendLocalUsername.setEnabled(secVeNCrypt.isEnabled() && (secPlain.isSelected() || secIdent.isSelected()));
}","public void initDialog(){
  if (cb != null)   cb.setOptions();
  zrle.setEnabled(!autoSelect.isSelected());
  hextile.setEnabled(!autoSelect.isSelected());
  tight.setEnabled(!autoSelect.isSelected());
  raw.setEnabled(!autoSelect.isSelected());
  fullColour.setEnabled(!autoSelect.isSelected());
  mediumColour.setEnabled(!autoSelect.isSelected());
  lowColour.setEnabled(!autoSelect.isSelected());
  veryLowColour.setEnabled(!autoSelect.isSelected());
  compressLevel.setEnabled(customCompressLevel.isSelected());
  qualityLevel.setEnabled(noJpeg.isSelected());
  autoScale=(scalingFactor.getSelectedItem().equals(""String_Node_Str""));
  fixedRatioScale=(scalingFactor.getSelectedItem().equals(""String_Node_Str""));
  sendLocalUsername.setEnabled(secVeNCrypt.isEnabled() && (secPlain.isSelected() || secIdent.isSelected()));
}",0.8986666666666666
111578,"private void processSecurityTypesMsg(){
  vlog.info(""String_Node_Str"");
  int secType=Security.secTypeInvalid;
  List<Integer> secTypes=new ArrayList<Integer>();
  secTypes=security.GetEnabledSecTypes();
  if (cp.isVersion(3,3)) {
    secType=is.readU32();
    if (secType == Security.secTypeInvalid) {
      throwConnFailedException();
    }
 else     if (secType == Security.secTypeNone || secType == Security.secTypeVncAuth) {
      Iterator i;
      for (i=secTypes.iterator(); i.hasNext(); ) {
        int refType=(Integer)i.next();
        if (refType == secType) {
          secType=refType;
          break;
        }
      }
      if (!i.hasNext())       secType=Security.secTypeInvalid;
    }
 else {
      vlog.error(""String_Node_Str"" + secType);
      throw new Exception(""String_Node_Str"");
    }
  }
 else {
    int nServerSecTypes=is.readU8();
    if (nServerSecTypes == 0)     throwConnFailedException();
    for (int i=0; i < nServerSecTypes; i++) {
      int serverSecType=is.readU8();
      vlog.info(""String_Node_Str"" + Security.secTypeName(serverSecType) + ""String_Node_Str""+ serverSecType+ ""String_Node_Str"");
      if (secType == Security.secTypeInvalid) {
        for (Iterator j=secTypes.iterator(); j.hasNext(); ) {
          int refType=(Integer)j.next();
          if (refType == serverSecType) {
            secType=refType;
            break;
          }
        }
      }
    }
    if (secType != Security.secTypeInvalid) {
      os.writeU8(secType);
      os.flush();
      vlog.info(""String_Node_Str"" + Security.secTypeName(secType) + ""String_Node_Str""+ secType+ ""String_Node_Str"");
    }
  }
  if (secType == Security.secTypeInvalid) {
    state_=RFBSTATE_INVALID;
    vlog.error(""String_Node_Str"");
    throw new Exception(""String_Node_Str"");
  }
  state_=RFBSTATE_SECURITY;
  csecurity=security.GetCSecurity(secType);
  processSecurityMsg();
}","private void processSecurityTypesMsg(){
  vlog.info(""String_Node_Str"");
  int secType=Security.secTypeInvalid;
  List<Integer> secTypes=new ArrayList<Integer>();
  secTypes=security.GetEnabledSecTypes();
  if (cp.isVersion(3,3)) {
    secType=is.readU32();
    if (secType == Security.secTypeInvalid) {
      throwConnFailedException();
    }
 else     if (secType == Security.secTypeNone || secType == Security.secTypeVncAuth) {
      Iterator i;
      for (i=secTypes.iterator(); i.hasNext(); ) {
        int refType=(Integer)i.next();
        if (refType == secType) {
          secType=refType;
          break;
        }
        if (!i.hasNext())         secType=Security.secTypeInvalid;
      }
    }
 else {
      vlog.error(""String_Node_Str"" + secType);
      throw new Exception(""String_Node_Str"");
    }
  }
 else {
    int nServerSecTypes=is.readU8();
    if (nServerSecTypes == 0)     throwConnFailedException();
    for (int i=0; i < nServerSecTypes; i++) {
      int serverSecType=is.readU8();
      vlog.info(""String_Node_Str"" + Security.secTypeName(serverSecType) + ""String_Node_Str""+ serverSecType+ ""String_Node_Str"");
      if (secType == Security.secTypeInvalid) {
        for (Iterator j=secTypes.iterator(); j.hasNext(); ) {
          int refType=(Integer)j.next();
          if (refType == serverSecType) {
            secType=refType;
            break;
          }
        }
      }
    }
    if (secType != Security.secTypeInvalid) {
      os.writeU8(secType);
      os.flush();
      vlog.info(""String_Node_Str"" + Security.secTypeName(secType) + ""String_Node_Str""+ secType+ ""String_Node_Str"");
    }
  }
  if (secType == Security.secTypeInvalid) {
    state_=RFBSTATE_INVALID;
    vlog.error(""String_Node_Str"");
    throw new Exception(""String_Node_Str"");
  }
  state_=RFBSTATE_SECURITY;
  csecurity=security.GetCSecurity(secType);
  processSecurityMsg();
}",0.965443912812334
111579,"public void getOptions(){
  autoSelect=options.autoSelect.isSelected();
  if (fullColour != options.fullColour.isSelected())   formatChange=true;
  fullColour=options.fullColour.isSelected();
  if (!fullColour) {
    int newLowColourLevel=(options.veryLowColour.isSelected() ? 0 : options.lowColour.isSelected() ? 1 : 2);
    if (newLowColourLevel != lowColourLevel) {
      lowColourLevel=newLowColourLevel;
      formatChange=true;
    }
  }
  int newEncoding=(options.zrle.isSelected() ? Encodings.encodingZRLE : options.hextile.isSelected() ? Encodings.encodingHextile : options.tight.isSelected() ? Encodings.encodingTight : Encodings.encodingRaw);
  if (newEncoding != currentEncoding) {
    currentEncoding=newEncoding;
    encodingChange=true;
  }
  viewer.customCompressLevel.setParam(options.customCompressLevel.isSelected());
  if (cp.customCompressLevel != viewer.customCompressLevel.getValue()) {
    cp.customCompressLevel=viewer.customCompressLevel.getValue();
    encodingChange=true;
  }
  if (Integer.parseInt(options.compressLevel.getSelectedItem().toString()) >= 0 && Integer.parseInt(options.compressLevel.getSelectedItem().toString()) <= 9) {
    viewer.compressLevel.setParam(options.compressLevel.getSelectedItem().toString());
  }
 else {
    viewer.compressLevel.setParam(viewer.compressLevel.getDefaultStr());
  }
  if (cp.compressLevel != viewer.compressLevel.getValue()) {
    cp.compressLevel=viewer.compressLevel.getValue();
    encodingChange=true;
  }
  viewer.noJpeg.setParam(!options.noJpeg.isSelected());
  if (cp.noJpeg != viewer.noJpeg.getValue()) {
    cp.noJpeg=viewer.noJpeg.getValue();
    encodingChange=true;
  }
  viewer.qualityLevel.setParam(options.qualityLevel.getSelectedItem().toString());
  if (cp.qualityLevel != viewer.qualityLevel.getValue()) {
    cp.qualityLevel=viewer.qualityLevel.getValue();
    encodingChange=true;
  }
  viewer.sendLocalUsername.setParam(options.sendLocalUsername.isSelected());
  viewer.viewOnly.setParam(options.viewOnly.isSelected());
  viewer.acceptClipboard.setParam(options.acceptClipboard.isSelected());
  viewer.sendClipboard.setParam(options.sendClipboard.isSelected());
  viewer.fastCopyRect.setParam(options.fastCopyRect.isSelected());
  viewer.acceptBell.setParam(options.acceptBell.isSelected());
  if (options.autoScale) {
    viewer.scalingFactor.setParam(""String_Node_Str"");
    scaleFactor=-1;
    if (desktop != null) {
      reconfigureViewport();
      viewport.update(viewport.g);
      if (desktop.cursor != null)       setCursor(desktop.cursor.width(),desktop.cursor.height(),desktop.cursor.hotspot,desktop.cursor.data,desktop.cursor.mask);
    }
  }
 else   if (options.fixedRatioScale) {
    viewer.scalingFactor.setParam(""String_Node_Str"");
    scaleFactor=-1;
    if (desktop != null) {
      reconfigureViewport();
      viewport.update(viewport.g);
      if (desktop.cursor != null)       setCursor(desktop.cursor.width(),desktop.cursor.height(),desktop.cursor.hotspot,desktop.cursor.data,desktop.cursor.mask);
    }
  }
 else {
    String scaleString=options.scalingFactor.getSelectedItem().toString();
    viewer.scalingFactor.setParam(scaleString.substring(0,scaleString.length() - 1));
    int oldScaleFactor=scaleFactor;
    scaleFactor=Integer.parseInt(scaleString.substring(0,scaleString.length() - 1));
    if (oldScaleFactor != scaleFactor && desktop != null) {
      reconfigureViewport();
      viewport.update(viewport.g);
      if (desktop.cursor != null)       setCursor(desktop.cursor.width(),desktop.cursor.height(),desktop.cursor.hotspot,desktop.cursor.data,desktop.cursor.mask);
    }
  }
  clipboardDialog.setSendingEnabled(viewer.sendClipboard.getValue());
  menuKey=(int)(options.menuKey.getSelectedIndex() + 0xFFBE);
  F8Menu.f8.setLabel(""String_Node_Str"" + (menuKey - Keysyms.F1 + 1));
  shared=options.shared.isSelected();
  setShared(shared);
  viewer.useLocalCursor.setParam(options.useLocalCursor.isSelected());
  if (cp.supportsLocalCursor != viewer.useLocalCursor.getValue()) {
    cp.supportsLocalCursor=viewer.useLocalCursor.getValue();
    encodingChange=true;
    if (desktop != null)     desktop.resetLocalCursor();
  }
  checkEncodings();
  if (state() != RFBSTATE_NORMAL) {
    if (options.encNone.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeIdent);
    }
    if (options.encTLS.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeTLSIdent);
    }
    if (options.encX509.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeX509None);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeX509None);
      Security.DisableSecType(Security.secTypeX509Vnc);
      Security.DisableSecType(Security.secTypeX509Plain);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
    if (options.secNone.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509None);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeX509None);
    }
    if (options.secVnc.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
    }
 else {
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeX509Vnc);
    }
    if (options.secPlain.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
    }
 else {
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeX509Plain);
    }
    if (options.secIdent.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeIdent);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeIdent);
      Security.DisableSecType(Security.secTypeTLSIdent);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
    CSecurityTLS.x509ca.setParam(options.ca.getText());
    CSecurityTLS.x509crl.setParam(options.crl.getText());
  }
}","public void getOptions(){
  autoSelect=options.autoSelect.isSelected();
  if (fullColour != options.fullColour.isSelected())   formatChange=true;
  fullColour=options.fullColour.isSelected();
  if (!fullColour) {
    int newLowColourLevel=(options.veryLowColour.isSelected() ? 0 : options.lowColour.isSelected() ? 1 : 2);
    if (newLowColourLevel != lowColourLevel) {
      lowColourLevel=newLowColourLevel;
      formatChange=true;
    }
  }
  int newEncoding=(options.zrle.isSelected() ? Encodings.encodingZRLE : options.hextile.isSelected() ? Encodings.encodingHextile : options.tight.isSelected() ? Encodings.encodingTight : Encodings.encodingRaw);
  if (newEncoding != currentEncoding) {
    currentEncoding=newEncoding;
    encodingChange=true;
  }
  viewer.customCompressLevel.setParam(options.customCompressLevel.isSelected());
  if (cp.customCompressLevel != viewer.customCompressLevel.getValue()) {
    cp.customCompressLevel=viewer.customCompressLevel.getValue();
    encodingChange=true;
  }
  if (Integer.parseInt(options.compressLevel.getSelectedItem().toString()) >= 0 && Integer.parseInt(options.compressLevel.getSelectedItem().toString()) <= 9) {
    viewer.compressLevel.setParam(options.compressLevel.getSelectedItem().toString());
  }
 else {
    viewer.compressLevel.setParam(viewer.compressLevel.getDefaultStr());
  }
  if (cp.compressLevel != viewer.compressLevel.getValue()) {
    cp.compressLevel=viewer.compressLevel.getValue();
    encodingChange=true;
  }
  viewer.noJpeg.setParam(!options.noJpeg.isSelected());
  if (cp.noJpeg != viewer.noJpeg.getValue()) {
    cp.noJpeg=viewer.noJpeg.getValue();
    encodingChange=true;
  }
  viewer.qualityLevel.setParam(options.qualityLevel.getSelectedItem().toString());
  if (cp.qualityLevel != viewer.qualityLevel.getValue()) {
    cp.qualityLevel=viewer.qualityLevel.getValue();
    encodingChange=true;
  }
  viewer.sendLocalUsername.setParam(options.sendLocalUsername.isSelected());
  viewer.viewOnly.setParam(options.viewOnly.isSelected());
  viewer.acceptClipboard.setParam(options.acceptClipboard.isSelected());
  viewer.sendClipboard.setParam(options.sendClipboard.isSelected());
  viewer.fastCopyRect.setParam(options.fastCopyRect.isSelected());
  viewer.acceptBell.setParam(options.acceptBell.isSelected());
  if (options.autoScale) {
    viewer.scalingFactor.setParam(""String_Node_Str"");
    scaleFactor=-1;
    if (desktop != null) {
      reconfigureViewport();
      viewport.update(viewport.g);
    }
  }
 else   if (options.fixedRatioScale) {
    viewer.scalingFactor.setParam(""String_Node_Str"");
    scaleFactor=-1;
    if (desktop != null) {
      reconfigureViewport();
      viewport.update(viewport.g);
    }
  }
 else {
    String scaleString=options.scalingFactor.getSelectedItem().toString();
    viewer.scalingFactor.setParam(scaleString.substring(0,scaleString.length() - 1));
    int oldScaleFactor=scaleFactor;
    scaleFactor=Integer.parseInt(scaleString.substring(0,scaleString.length() - 1));
    if (oldScaleFactor != scaleFactor && desktop != null) {
      reconfigureViewport();
      viewport.update(viewport.g);
    }
  }
  clipboardDialog.setSendingEnabled(viewer.sendClipboard.getValue());
  menuKey=(int)(options.menuKey.getSelectedIndex() + 0xFFBE);
  F8Menu.f8.setLabel(""String_Node_Str"" + (menuKey - Keysyms.F1 + 1));
  shared=options.shared.isSelected();
  setShared(shared);
  viewer.useLocalCursor.setParam(options.useLocalCursor.isSelected());
  if (cp.supportsLocalCursor != viewer.useLocalCursor.getValue()) {
    cp.supportsLocalCursor=viewer.useLocalCursor.getValue();
    encodingChange=true;
    if (desktop != null)     desktop.resetLocalCursor();
  }
  checkEncodings();
  if (state() != RFBSTATE_NORMAL) {
    if (options.encNone.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeIdent);
    }
    if (options.encTLS.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
    }
 else {
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeTLSIdent);
    }
    if (options.encX509.isSelected()) {
      if (options.secNone.isSelected())       Security.EnableSecType(Security.secTypeX509None);
      if (options.secVnc.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
      if (options.secPlain.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
      if (options.secIdent.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeX509None);
      Security.DisableSecType(Security.secTypeX509Vnc);
      Security.DisableSecType(Security.secTypeX509Plain);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
    if (options.secNone.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeNone);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSNone);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509None);
    }
 else {
      Security.DisableSecType(Security.secTypeNone);
      Security.DisableSecType(Security.secTypeTLSNone);
      Security.DisableSecType(Security.secTypeX509None);
    }
    if (options.secVnc.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeVncAuth);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSVnc);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Vnc);
    }
 else {
      Security.DisableSecType(Security.secTypeVncAuth);
      Security.DisableSecType(Security.secTypeTLSVnc);
      Security.DisableSecType(Security.secTypeX509Vnc);
    }
    if (options.secPlain.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypePlain);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSPlain);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Plain);
    }
 else {
      Security.DisableSecType(Security.secTypePlain);
      Security.DisableSecType(Security.secTypeTLSPlain);
      Security.DisableSecType(Security.secTypeX509Plain);
    }
    if (options.secIdent.isSelected()) {
      if (options.encNone.isSelected())       Security.EnableSecType(Security.secTypeIdent);
      if (options.encTLS.isSelected())       Security.EnableSecType(Security.secTypeTLSIdent);
      if (options.encX509.isSelected())       Security.EnableSecType(Security.secTypeX509Ident);
    }
 else {
      Security.DisableSecType(Security.secTypeIdent);
      Security.DisableSecType(Security.secTypeTLSIdent);
      Security.DisableSecType(Security.secTypeX509Ident);
    }
    CSecurityTLS.x509ca.setParam(options.ca.getText());
    CSecurityTLS.x509crl.setParam(options.crl.getText());
  }
}",0.9301524840137728
111580,"public void componentResized(ComponentEvent e){
  if (cc.options.autoScale || cc.options.fixedRatioScale) {
    if (sp.getSize().width != cc.desktop.scaledWidth || sp.getSize().height != cc.desktop.scaledHeight) {
      cc.reconfigureViewport();
      if (cc.desktop.cursor != null) {
        cc.setCursor(cc.desktop.cursor.width(),cc.desktop.cursor.height(),cc.desktop.cursor.hotspot,cc.desktop.cursor.data,cc.desktop.cursor.mask);
      }
    }
  }
}","public void componentResized(ComponentEvent e){
  if (cc.options.autoScale || cc.options.fixedRatioScale) {
    if (sp.getSize().width != cc.desktop.scaledWidth || sp.getSize().height != cc.desktop.scaledHeight) {
      cc.reconfigureViewport();
      if (cc.desktop.cursor != null) {
        Cursor cursor=cc.desktop.cursor;
        cc.setCursor(cursor.width(),cursor.height(),cursor.hotspot,cursor.data,cursor.mask);
      }
    }
  }
}",0.7865168539325843
111581,"public void setCursor(int w,int h,Point hotspot,int[] data,byte[] mask){
synchronized (this) {
    if (!cc.viewer.useLocalCursor.getValue())     return;
    hideLocalCursor();
    cursor.hotspot=hotspot;
    Dimension bsc=tk.getBestCursorSize(w,h);
    cursor.setSize(((int)bsc.getWidth() > w ? (int)bsc.getWidth() : w),((int)bsc.getHeight() > h ? (int)bsc.getHeight() : h));
    cursor.setPF(getPF());
    cursorBacking.setSize(cursor.width(),cursor.height());
    cursorBacking.setPF(getPF());
    cursor.data=new int[cursor.width() * cursor.height()];
    cursor.mask=new byte[cursor.maskLen()];
    if (cursor.getPF().bpp == 8) {
      cursor.cm=new DirectColorModel(9,7,(7 << 3),(3 << 6),(1 << 8));
    }
    int maskBytesPerRow=(w + 7) / 8;
    for (int y=0; y < h; y++) {
      for (int x=0; x < w; x++) {
        int byte_=y * maskBytesPerRow + x / 8;
        int bit=7 - x % 8;
        if ((mask[byte_] & (1 << bit)) > 0) {
          cursor.data[y * cursor.width() + x]=(cursor.getPF().bpp == 8) ? data[y * w + x] | (1 << 8) : data[y * w + x];
        }
      }
      System.arraycopy(mask,y * maskBytesPerRow,cursor.mask,y * ((cursor.width() + 7) / 8),maskBytesPerRow);
    }
    MemoryImageSource bitmap=new MemoryImageSource(cursor.width(),cursor.height(),cursor.cm,cursor.data,0,cursor.width());
    int cw=(int)Math.floor((float)cursor.width() * scaleWidthRatio);
    int ch=(int)Math.floor((float)cursor.height() * scaleHeightRatio);
    int hint=java.awt.Image.SCALE_DEFAULT;
    Image cursorImage=(cw <= 0 || ch <= 0) ? tk.createImage(bitmap) : tk.createImage(bitmap).getScaledInstance(cw,ch,hint);
    softCursor=(tk.createCustomCursor(cursorImage,new java.awt.Point(hotspot.x,hotspot.y),""String_Node_Str""));
  }
  if (softCursor != null) {
    setCursor(softCursor);
    cursorAvailable=true;
    return;
  }
  if (!cursorAvailable) {
    cursorAvailable=true;
  }
  showLocalCursor();
  return;
}","public void setCursor(int w,int h,Point hotspot,int[] data,byte[] mask){
synchronized (this) {
    if (!cc.viewer.useLocalCursor.getValue())     return;
    hideLocalCursor();
    cursor.hotspot=hotspot;
    Dimension bsc=tk.getBestCursorSize(w,h);
    cursor.setSize(((int)bsc.getWidth() > w ? (int)bsc.getWidth() : w),((int)bsc.getHeight() > h ? (int)bsc.getHeight() : h));
    cursor.setPF(getPF());
    cursorBacking.setSize(cursor.width(),cursor.height());
    cursorBacking.setPF(getPF());
    cursor.data=new int[cursor.width() * cursor.height()];
    cursor.mask=new byte[cursor.maskLen()];
    if (cursor.getPF().bpp == 8) {
      cursor.cm=new DirectColorModel(9,7,(7 << 3),(3 << 6),(1 << 8));
    }
    int maskBytesPerRow=(w + 7) / 8;
    for (int y=0; y < h; y++) {
      for (int x=0; x < w; x++) {
        int byte_=y * maskBytesPerRow + x / 8;
        int bit=7 - x % 8;
        if ((mask[byte_] & (1 << bit)) > 0) {
          cursor.data[y * cursor.width() + x]=(cursor.getPF().bpp == 8) ? data[y * w + x] | (1 << 8) : data[y * w + x];
        }
      }
      System.arraycopy(mask,y * maskBytesPerRow,cursor.mask,y * ((cursor.width() + 7) / 8),maskBytesPerRow);
    }
    MemoryImageSource bitmap=new MemoryImageSource(cursor.width(),cursor.height(),cursor.cm,cursor.data,0,cursor.width());
    int cw=(int)Math.floor((float)cursor.width() * scaleWidthRatio);
    int ch=(int)Math.floor((float)cursor.height() * scaleHeightRatio);
    int hint=java.awt.Image.SCALE_DEFAULT;
    hotspot=new Point((int)Math.floor((float)hotspot.x * scaleWidthRatio),(int)Math.floor((float)hotspot.y * scaleHeightRatio));
    Image cursorImage=(cw <= 0 || ch <= 0) ? tk.createImage(bitmap) : tk.createImage(bitmap).getScaledInstance(cw,ch,hint);
    softCursor=tk.createCustomCursor(cursorImage,new java.awt.Point(hotspot.x,hotspot.y),""String_Node_Str"");
  }
  if (softCursor != null) {
    setCursor(softCursor);
    cursorAvailable=true;
    return;
  }
  if (!cursorAvailable) {
    cursorAvailable=true;
  }
  showLocalCursor();
  return;
}",0.9669108360697146
111582,"public static void DisableSecType(int secType){
  enabledSecTypes.remove(secType);
}","public static void DisableSecType(int secType){
  enabledSecTypes.remove((Object)secType);
}",0.9545454545454546
111583,"int selectSecurityType() throws Exception {
  int secType=SecTypeInvalid;
  int nSecTypes=readU8();
  if (nSecTypes == 0) {
    readConnFailedReason();
    return SecTypeInvalid;
  }
  byte[] secTypes=new byte[nSecTypes];
  readFully(secTypes);
  for (int i=0; i < nSecTypes; i++) {
    if (secTypes[i] == SecTypeTight) {
      protocolTightVNC=true;
      os.write(SecTypeTight);
      return SecTypeTight;
    }
  }
  for (int i=0; i < nSecTypes; i++) {
    if (secTypes[i] == SecTypeNone || secTypes[i] == SecTypeVncAuth || secTypes[i] == SecTypeVeNCrypt) {
      secType=secTypes[i];
      break;
    }
  }
  if (secType == SecTypeInvalid) {
    throw new Exception(""String_Node_Str"");
  }
 else {
    os.write(secType);
  }
  return secType;
}","int selectSecurityType() throws Exception {
  int secType=SecTypeInvalid;
  int nSecTypes=readU8();
  if (nSecTypes == 0) {
    readConnFailedReason();
    return SecTypeInvalid;
  }
  byte[] secTypes=new byte[nSecTypes];
  readFully(secTypes);
  for (int i=0; i < nSecTypes; i++) {
    if (secTypes[i] == SecTypeNone || secTypes[i] == SecTypeVncAuth || secTypes[i] == SecTypeVeNCrypt) {
      secType=secTypes[i];
      break;
    }
  }
  if (secType == SecTypeInvalid) {
    throw new Exception(""String_Node_Str"");
  }
 else {
    os.write(secType);
  }
  return secType;
}",0.8692365835222978
111584,"private void processLocalMouseEvent(MouseEvent evt,boolean moved){
  if (viewer.rfb != null && rfb.inNormalProtocol) {
    if (!inSelectionMode) {
      if (inputEnabled) {
        if (System.currentTimeMillis() - lastMouseEventSendTime >= (1000 / mouseMaxFreq)) {
          sendMouseEvent(evt,moved);
        }
      }
    }
 else {
      handleSelectionMouseEvent(evt);
    }
  }
}","private void processLocalMouseEvent(MouseEvent evt,boolean moved){
  if (viewer.rfb != null && rfb.inNormalProtocol) {
    if (!inSelectionMode) {
      if (inputEnabled) {
        if (!moved) {
          sendMouseEvent(evt,moved);
        }
 else {
          mouseEvent=evt;
          needToSendMouseEvent=true;
        }
      }
    }
 else {
      handleSelectionMouseEvent(evt);
    }
  }
}",0.5019305019305019
111585,"void readFramebufferUpdateRectHdr() throws Exception {
  updateRectX=readU16();
  updateRectY=readU16();
  updateRectW=readU16();
  updateRectH=readU16();
  updateRectEncoding=readU32();
  if (updateRectEncoding == EncodingZlib || updateRectEncoding == EncodingZRLE || updateRectEncoding == EncodingTight)   wereZlibUpdates=true;
  if (rec != null) {
    if (numUpdatesInSession > 1)     rec.flush();
    rec.writeShortBE(updateRectX);
    rec.writeShortBE(updateRectY);
    rec.writeShortBE(updateRectW);
    rec.writeShortBE(updateRectH);
    if (((updateRectEncoding == EncodingCopyRect) || (!isRealDecoderEncoding(updateRectEncoding))) && (rec != null)) {
      rec.writeIntBE(updateRectEncoding);
    }
  }
  if (updateRectEncoding < 0 || updateRectEncoding > MaxNormalEncoding)   return;
  if (updateRectX + updateRectW > framebufferWidth || updateRectY + updateRectH > framebufferHeight) {
    throw new Exception(""String_Node_Str"" + updateRectW + ""String_Node_Str""+ updateRectH+ ""String_Node_Str""+ updateRectX+ ""String_Node_Str""+ updateRectY+ ""String_Node_Str"");
  }
}","void readFramebufferUpdateRectHdr() throws Exception {
  updateRectX=readU16();
  updateRectY=readU16();
  updateRectW=readU16();
  updateRectH=readU16();
  updateRectEncoding=readU32();
  if (updateRectEncoding == EncodingZlib || updateRectEncoding == EncodingZRLE || updateRectEncoding == EncodingTight)   wereZlibUpdates=true;
  if (rec != null) {
    if (numUpdatesInSession > 1)     rec.flush();
    rec.writeShortBE(updateRectX);
    rec.writeShortBE(updateRectY);
    rec.writeShortBE(updateRectW);
    rec.writeShortBE(updateRectH);
    if (((!isRealDecoderEncoding(updateRectEncoding))) && (rec != null)) {
      rec.writeIntBE(updateRectEncoding);
    }
  }
  if (updateRectEncoding < 0 || updateRectEncoding > MaxNormalEncoding)   return;
  if (updateRectX + updateRectW > framebufferWidth || updateRectY + updateRectH > framebufferHeight) {
    throw new Exception(""String_Node_Str"" + updateRectW + ""String_Node_Str""+ updateRectH+ ""String_Node_Str""+ updateRectX+ ""String_Node_Str""+ updateRectY+ ""String_Node_Str"");
  }
}",0.7485768500948766
111586,"public int getNumJPEGRects(){
  return statNumRectsTightJPEG;
}","public long getNumJPEGRects(){
  return statNumRectsTightJPEG;
}",0.9606299212598424
111587,"public int getNumTightRects(){
  return statNumRectsTight;
}","public long getNumTightRects(){
  return statNumRectsTight;
}",0.9586776859504132
111588,"synchronized public void disconnect(){
  System.out.println(""String_Node_Str"");
  if (vc != null) {
    double sec=(System.currentTimeMillis() - vc.statStartTime) / 1000.0;
    double rate=Math.round(vc.statNumUpdates / sec * 100) / 100.0;
    int nRealRects=vc.statNumPixelRects;
    int nPseudoRects=vc.statNumTotalRects - vc.statNumPixelRects;
    System.out.println(""String_Node_Str"" + vc.statNumUpdates + ""String_Node_Str""+ nRealRects+ ""String_Node_Str""+ nPseudoRects+ ""String_Node_Str""+ rate+ ""String_Node_Str"");
    int numRectsOther=nRealRects - vc.statNumRectsTight - vc.statNumRectsZRLE- vc.statNumRectsHextile- vc.statNumRectsRaw- vc.statNumRectsCopy;
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + vc.statNumRectsTight + ""String_Node_Str""+ vc.statNumRectsTightJPEG+ ""String_Node_Str""+ vc.statNumRectsZRLE+ ""String_Node_Str""+ vc.statNumRectsHextile+ ""String_Node_Str""+ vc.statNumRectsRaw+ ""String_Node_Str""+ vc.statNumRectsCopy+ ""String_Node_Str""+ numRectsOther);
    int raw=vc.statNumBytesDecoded;
    int compressed=vc.statNumBytesEncoded;
    if (compressed > 0) {
      double ratio=Math.round((double)raw / compressed * 1000) / 1000.0;
      System.out.println(""String_Node_Str"" + vc.statNumBytesDecoded + ""String_Node_Str""+ vc.statNumBytesEncoded+ ""String_Node_Str""+ ratio);
    }
  }
  if (rfb != null && !rfb.closed())   rfb.close();
  options.dispose();
  clipboard.dispose();
  if (rec != null)   rec.dispose();
  if (inAnApplet) {
    showMessage(""String_Node_Str"");
  }
 else {
    System.exit(0);
  }
}","synchronized public void disconnect(){
  System.out.println(""String_Node_Str"");
  if (vc != null) {
    double sec=(System.currentTimeMillis() - vc.statStartTime) / 1000.0;
    double rate=Math.round(vc.statNumUpdates / sec * 100) / 100.0;
    long nRealRects=vc.statNumPixelRects;
    long nPseudoRects=vc.statNumTotalRects - vc.statNumPixelRects;
    System.out.println(""String_Node_Str"" + vc.statNumUpdates + ""String_Node_Str""+ nRealRects+ ""String_Node_Str""+ nPseudoRects+ ""String_Node_Str""+ rate+ ""String_Node_Str"");
    long numRectsOther=nRealRects - vc.statNumRectsTight - vc.statNumRectsZRLE- vc.statNumRectsHextile- vc.statNumRectsRaw- vc.statNumRectsCopy;
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + vc.statNumRectsTight + ""String_Node_Str""+ vc.statNumRectsTightJPEG+ ""String_Node_Str""+ vc.statNumRectsZRLE+ ""String_Node_Str""+ vc.statNumRectsHextile+ ""String_Node_Str""+ vc.statNumRectsRaw+ ""String_Node_Str""+ vc.statNumRectsCopy+ ""String_Node_Str""+ numRectsOther);
    long raw=vc.statNumBytesDecoded;
    long compressed=vc.statNumBytesEncoded;
    if (compressed > 0) {
      double ratio=Math.round((double)raw / compressed * 1000) / 1000.0;
      System.out.println(""String_Node_Str"" + vc.statNumBytesDecoded + ""String_Node_Str""+ vc.statNumBytesEncoded+ ""String_Node_Str""+ ratio);
    }
  }
  if (rfb != null && !rfb.closed())   rfb.close();
  options.dispose();
  clipboard.dispose();
  if (rec != null)   rec.dispose();
  if (inAnApplet) {
    showMessage(""String_Node_Str"");
  }
 else {
    System.exit(0);
  }
}",0.9886768036234228
111589,"public void writeByte(int v) throws IOException {
  if (recordInterface.canWrite()) {
    recordInterface.writeByte((byte)v);
  }
}","public void writeByte(int v) throws IOException {
  if (recordInterface.canWrite()) {
    recordInterface.writeByte(v);
  }
}",0.9765625
111590,"public void handleRect(int x,int y,int w,int h) throws Exception {
  if (dos != null) {
    dos.writeInt(TightDecoder.EncodingTight);
  }
  int comp_ctl=rfbis.readU8();
  if (rec.canWrite()) {
    if (rec.isRecordFromBeginning() || comp_ctl == (TightFill << 4) || comp_ctl == (TightJpeg << 4)) {
      rec.writeByte(comp_ctl);
    }
 else {
      rec.writeByte(comp_ctl | 0x0F);
    }
  }
  for (int stream_id=0; stream_id < 4; stream_id++) {
    if ((comp_ctl & 1) != 0 && tightInflaters[stream_id] != null) {
      tightInflaters[stream_id]=null;
    }
    comp_ctl>>=1;
  }
  if (comp_ctl > TightDecoder.TightMaxSubencoding) {
    throw new Exception(""String_Node_Str"" + comp_ctl);
  }
  if (comp_ctl == TightDecoder.TightFill) {
    if (bytesPerPixel == 1) {
      int idx=rfbis.readU8();
      graphics.setColor(getColor256()[idx]);
      if (rec.canWrite()) {
        rec.writeByte(idx);
      }
    }
 else {
      byte[] buf=new byte[3];
      rfbis.readFully(buf);
      if (rec.canWrite()) {
        rec.write(buf);
      }
      Color bg=new Color(0xFF000000 | (buf[0] & 0xFF) << 16 | (buf[1] & 0xFF) << 8 | (buf[2] & 0xFF));
      graphics.setColor(bg);
    }
    graphics.fillRect(x,y,w,h);
    repainatableControl.scheduleRepaint(x,y,w,h);
    return;
  }
  if (comp_ctl == TightDecoder.TightJpeg) {
    statNumRectsTightJPEG++;
    byte[] jpegData=new byte[rfbis.readCompactLen()];
    rfbis.readFully(jpegData);
    if (rec.canWrite()) {
      if (!rec.isRecordFromBeginning()) {
        rec.recordCompactLen(jpegData.length);
      }
      rec.write(jpegData);
    }
    Image jpegImage=Toolkit.getDefaultToolkit().createImage(jpegData);
    jpegRect=new Rectangle(x,y,w,h);
synchronized (jpegRect) {
      Toolkit.getDefaultToolkit().prepareImage(jpegImage,-1,-1,this);
      try {
        jpegRect.wait(3000);
      }
 catch (      InterruptedException e) {
        throw new Exception(""String_Node_Str"");
      }
    }
    jpegRect=null;
    return;
  }
  int numColors=0, rowSize=w;
  byte[] palette8=new byte[2];
  int[] palette24=new int[256];
  boolean useGradient=false;
  if ((comp_ctl & TightDecoder.TightExplicitFilter) != 0) {
    int filter_id=rfbis.readU8();
    if (rec.canWrite()) {
      rec.writeByte(filter_id);
    }
    if (filter_id == TightDecoder.TightFilterPalette) {
      numColors=rfbis.readU8() + 1;
      if (rec.canWrite()) {
        rec.writeByte((numColors - 1));
      }
      if (bytesPerPixel == 1) {
        if (numColors != 2) {
          throw new Exception(""String_Node_Str"" + numColors);
        }
        rfbis.readFully(palette8);
        if (rec.canWrite()) {
          rec.write(palette8);
        }
      }
 else {
        byte[] buf=new byte[numColors * 3];
        rfbis.readFully(buf);
        if (rec.canWrite()) {
          rec.write(buf);
        }
        for (int i=0; i < numColors; i++) {
          palette24[i]=((buf[i * 3] & 0xFF) << 16 | (buf[i * 3 + 1] & 0xFF) << 8 | (buf[i * 3 + 2] & 0xFF));
        }
      }
      if (numColors == 2) {
        rowSize=(w + 7) / 8;
      }
    }
 else     if (filter_id == TightDecoder.TightFilterGradient) {
      useGradient=true;
    }
 else     if (filter_id != TightDecoder.TightFilterCopy) {
      throw new Exception(""String_Node_Str"" + filter_id);
    }
  }
  if (numColors == 0 && bytesPerPixel == 4)   rowSize*=3;
  int dataSize=h * rowSize;
  if (dataSize < TightDecoder.TightMinToCompress) {
    if (numColors != 0) {
      byte[] indexedData=new byte[dataSize];
      rfbis.readFully(indexedData);
      if (rec.canWrite()) {
        rec.write(indexedData);
      }
      if (numColors == 2) {
        if (bytesPerPixel == 1) {
          decodeMonoData(x,y,w,h,indexedData,palette8);
        }
 else {
          decodeMonoData(x,y,w,h,indexedData,palette24);
        }
      }
 else {
        int i=0;
        for (int dy=y; dy < y + h; dy++) {
          for (int dx=x; dx < x + w; dx++) {
            pixels24[dy * framebufferWidth + dx]=palette24[indexedData[i++] & 0xFF];
          }
        }
      }
    }
 else     if (useGradient) {
      byte[] buf=new byte[w * h * 3];
      rfbis.readFully(buf);
      if (rec.canWrite()) {
        rec.write(buf);
      }
      decodeGradientData(x,y,w,h,buf);
    }
 else {
      if (bytesPerPixel == 1) {
        for (int dy=y; dy < y + h; dy++) {
          rfbis.readFully(pixels8,dy * framebufferWidth + x,w);
          if (rec.canWrite()) {
            rec.write(pixels8,dy * framebufferWidth + x,w);
          }
        }
      }
 else {
        byte[] buf=new byte[w * 3];
        int i, offset;
        for (int dy=y; dy < y + h; dy++) {
          rfbis.readFully(buf);
          if (rec.canWrite()) {
            rec.write(buf);
          }
          offset=dy * framebufferWidth + x;
          for (i=0; i < w; i++) {
            pixels24[offset + i]=(buf[i * 3] & 0xFF) << 16 | (buf[i * 3 + 1] & 0xFF) << 8 | (buf[i * 3 + 2] & 0xFF);
          }
        }
      }
    }
  }
 else {
    int zlibDataLen=rfbis.readCompactLen();
    byte[] zlibData=new byte[zlibDataLen];
    rfbis.readFully(zlibData);
    if ((rec.canWrite()) && (rec.isRecordFromBeginning())) {
      rec.write(zlibData);
    }
    int stream_id=comp_ctl & 0x03;
    if (tightInflaters[stream_id] == null) {
      tightInflaters[stream_id]=new Inflater();
    }
    Inflater myInflater=tightInflaters[stream_id];
    myInflater.setInput(zlibData);
    byte[] buf=new byte[dataSize];
    myInflater.inflate(buf);
    if ((rec.canWrite()) && (!rec.isRecordFromBeginning())) {
      rec.recordCompressedData(buf);
    }
    if (numColors != 0) {
      if (numColors == 2) {
        if (bytesPerPixel == 1) {
          decodeMonoData(x,y,w,h,buf,palette8);
        }
 else {
          decodeMonoData(x,y,w,h,buf,palette24);
        }
      }
 else {
        int i=0;
        for (int dy=y; dy < y + h; dy++) {
          for (int dx=x; dx < x + w; dx++) {
            pixels24[dy * framebufferWidth + dx]=palette24[buf[i++] & 0xFF];
          }
        }
      }
    }
 else     if (useGradient) {
      decodeGradientData(x,y,w,h,buf);
    }
 else {
      if (bytesPerPixel == 1) {
        int destOffset=y * framebufferWidth + x;
        for (int dy=0; dy < h; dy++) {
          System.arraycopy(buf,dy * w,pixels8,destOffset,w);
          destOffset+=framebufferWidth;
        }
      }
 else {
        int srcOffset=0;
        int destOffset, i;
        for (int dy=0; dy < h; dy++) {
          myInflater.inflate(buf);
          destOffset=(y + dy) * framebufferWidth + x;
          for (i=0; i < w; i++) {
            RawDecoder.pixels24[destOffset + i]=(buf[srcOffset] & 0xFF) << 16 | (buf[srcOffset + 1] & 0xFF) << 8 | (buf[srcOffset + 2] & 0xFF);
            srcOffset+=3;
          }
        }
      }
    }
  }
  handleUpdatedPixels(x,y,w,h);
}","public void handleRect(int x,int y,int w,int h) throws Exception {
  if (dos != null) {
    dos.writeInt(TightDecoder.EncodingTight);
  }
  int comp_ctl=rfbis.readU8();
  if (rec.canWrite()) {
    if (rec.isRecordFromBeginning() || comp_ctl == (TightFill << 4) || comp_ctl == (TightJpeg << 4)) {
      rec.writeByte(comp_ctl);
    }
 else {
      rec.writeByte(comp_ctl | 0x0F);
    }
  }
  for (int stream_id=0; stream_id < 4; stream_id++) {
    if ((comp_ctl & 1) != 0 && tightInflaters[stream_id] != null) {
      tightInflaters[stream_id]=null;
    }
    comp_ctl>>=1;
  }
  if (comp_ctl > TightDecoder.TightMaxSubencoding) {
    throw new Exception(""String_Node_Str"" + comp_ctl);
  }
  if (comp_ctl == TightDecoder.TightFill) {
    if (bytesPerPixel == 1) {
      int idx=rfbis.readU8();
      graphics.setColor(getColor256()[idx]);
      if (rec.canWrite()) {
        rec.writeByte(idx);
      }
    }
 else {
      byte[] buf=new byte[3];
      rfbis.readFully(buf);
      if (rec.canWrite()) {
        rec.write(buf);
      }
      Color bg=new Color(0xFF000000 | (buf[0] & 0xFF) << 16 | (buf[1] & 0xFF) << 8 | (buf[2] & 0xFF));
      graphics.setColor(bg);
    }
    graphics.fillRect(x,y,w,h);
    repainatableControl.scheduleRepaint(x,y,w,h);
    return;
  }
  if (comp_ctl == TightDecoder.TightJpeg) {
    statNumRectsTightJPEG++;
    byte[] jpegData=new byte[rfbis.readCompactLen()];
    rfbis.readFully(jpegData);
    if (rec.canWrite()) {
      if (!rec.isRecordFromBeginning()) {
        rec.recordCompactLen(jpegData.length);
      }
      rec.write(jpegData);
    }
    Image jpegImage=Toolkit.getDefaultToolkit().createImage(jpegData);
    jpegRect=new Rectangle(x,y,w,h);
synchronized (jpegRect) {
      Toolkit.getDefaultToolkit().prepareImage(jpegImage,-1,-1,this);
      try {
        jpegRect.wait(3000);
      }
 catch (      InterruptedException e) {
        throw new Exception(""String_Node_Str"");
      }
    }
    jpegRect=null;
    return;
  }
 else {
    statNumRectsTight++;
  }
  int numColors=0, rowSize=w;
  byte[] palette8=new byte[2];
  int[] palette24=new int[256];
  boolean useGradient=false;
  if ((comp_ctl & TightDecoder.TightExplicitFilter) != 0) {
    int filter_id=rfbis.readU8();
    if (rec.canWrite()) {
      rec.writeByte(filter_id);
    }
    if (filter_id == TightDecoder.TightFilterPalette) {
      numColors=rfbis.readU8() + 1;
      if (rec.canWrite()) {
        rec.writeByte((numColors - 1));
      }
      if (bytesPerPixel == 1) {
        if (numColors != 2) {
          throw new Exception(""String_Node_Str"" + numColors);
        }
        rfbis.readFully(palette8);
        if (rec.canWrite()) {
          rec.write(palette8);
        }
      }
 else {
        byte[] buf=new byte[numColors * 3];
        rfbis.readFully(buf);
        if (rec.canWrite()) {
          rec.write(buf);
        }
        for (int i=0; i < numColors; i++) {
          palette24[i]=((buf[i * 3] & 0xFF) << 16 | (buf[i * 3 + 1] & 0xFF) << 8 | (buf[i * 3 + 2] & 0xFF));
        }
      }
      if (numColors == 2) {
        rowSize=(w + 7) / 8;
      }
    }
 else     if (filter_id == TightDecoder.TightFilterGradient) {
      useGradient=true;
    }
 else     if (filter_id != TightDecoder.TightFilterCopy) {
      throw new Exception(""String_Node_Str"" + filter_id);
    }
  }
  if (numColors == 0 && bytesPerPixel == 4)   rowSize*=3;
  int dataSize=h * rowSize;
  if (dataSize < TightDecoder.TightMinToCompress) {
    if (numColors != 0) {
      byte[] indexedData=new byte[dataSize];
      rfbis.readFully(indexedData);
      if (rec.canWrite()) {
        rec.write(indexedData);
      }
      if (numColors == 2) {
        if (bytesPerPixel == 1) {
          decodeMonoData(x,y,w,h,indexedData,palette8);
        }
 else {
          decodeMonoData(x,y,w,h,indexedData,palette24);
        }
      }
 else {
        int i=0;
        for (int dy=y; dy < y + h; dy++) {
          for (int dx=x; dx < x + w; dx++) {
            pixels24[dy * framebufferWidth + dx]=palette24[indexedData[i++] & 0xFF];
          }
        }
      }
    }
 else     if (useGradient) {
      byte[] buf=new byte[w * h * 3];
      rfbis.readFully(buf);
      if (rec.canWrite()) {
        rec.write(buf);
      }
      decodeGradientData(x,y,w,h,buf);
    }
 else {
      if (bytesPerPixel == 1) {
        for (int dy=y; dy < y + h; dy++) {
          rfbis.readFully(pixels8,dy * framebufferWidth + x,w);
          if (rec.canWrite()) {
            rec.write(pixels8,dy * framebufferWidth + x,w);
          }
        }
      }
 else {
        byte[] buf=new byte[w * 3];
        int i, offset;
        for (int dy=y; dy < y + h; dy++) {
          rfbis.readFully(buf);
          if (rec.canWrite()) {
            rec.write(buf);
          }
          offset=dy * framebufferWidth + x;
          for (i=0; i < w; i++) {
            pixels24[offset + i]=(buf[i * 3] & 0xFF) << 16 | (buf[i * 3 + 1] & 0xFF) << 8 | (buf[i * 3 + 2] & 0xFF);
          }
        }
      }
    }
  }
 else {
    int zlibDataLen=rfbis.readCompactLen();
    byte[] zlibData=new byte[zlibDataLen];
    rfbis.readFully(zlibData);
    if ((rec.canWrite()) && (rec.isRecordFromBeginning())) {
      rec.write(zlibData);
    }
    int stream_id=comp_ctl & 0x03;
    if (tightInflaters[stream_id] == null) {
      tightInflaters[stream_id]=new Inflater();
    }
    Inflater myInflater=tightInflaters[stream_id];
    myInflater.setInput(zlibData);
    byte[] buf=new byte[dataSize];
    myInflater.inflate(buf);
    if ((rec.canWrite()) && (!rec.isRecordFromBeginning())) {
      rec.recordCompressedData(buf);
    }
    if (numColors != 0) {
      if (numColors == 2) {
        if (bytesPerPixel == 1) {
          decodeMonoData(x,y,w,h,buf,palette8);
        }
 else {
          decodeMonoData(x,y,w,h,buf,palette24);
        }
      }
 else {
        int i=0;
        for (int dy=y; dy < y + h; dy++) {
          for (int dx=x; dx < x + w; dx++) {
            pixels24[dy * framebufferWidth + dx]=palette24[buf[i++] & 0xFF];
          }
        }
      }
    }
 else     if (useGradient) {
      decodeGradientData(x,y,w,h,buf);
    }
 else {
      if (bytesPerPixel == 1) {
        int destOffset=y * framebufferWidth + x;
        for (int dy=0; dy < h; dy++) {
          System.arraycopy(buf,dy * w,pixels8,destOffset,w);
          destOffset+=framebufferWidth;
        }
      }
 else {
        int srcOffset=0;
        int destOffset, i;
        for (int dy=0; dy < h; dy++) {
          myInflater.inflate(buf);
          destOffset=(y + dy) * framebufferWidth + x;
          for (i=0; i < w; i++) {
            RawDecoder.pixels24[destOffset + i]=(buf[srcOffset] & 0xFF) << 16 | (buf[srcOffset + 1] & 0xFF) << 8 | (buf[srcOffset + 2] & 0xFF);
            srcOffset+=3;
          }
        }
      }
    }
  }
  handleUpdatedPixels(x,y,w,h);
}",0.9972859972126458
111591,"public void processNormalProtocol() throws Exception {
  viewer.checkRecordingStatus();
  rfb.writeFramebufferUpdateRequest(0,0,rfb.framebufferWidth,rfb.framebufferHeight,false);
  if (viewer.options.continuousUpdates) {
    rfb.tryEnableContinuousUpdates(0,0,rfb.framebufferWidth,rfb.framebufferHeight);
  }
  resetStats();
  boolean statsRestarted=false;
  while (true) {
    int msgType=rfb.readServerMessageType();
switch (msgType) {
case RfbProto.FramebufferUpdate:
      if (statNumUpdates == viewer.debugStatsExcludeUpdates && !statsRestarted) {
        resetStats();
        statsRestarted=true;
      }
 else       if (statNumUpdates == viewer.debugStatsMeasureUpdates && statsRestarted) {
        viewer.disconnect();
      }
    rfb.readFramebufferUpdate();
  statNumUpdates++;
boolean cursorPosReceived=false;
for (int i=0; i < rfb.updateNRects; i++) {
rfb.readFramebufferUpdateRectHdr();
statNumTotalRects++;
int rx=rfb.updateRectX, ry=rfb.updateRectY;
int rw=rfb.updateRectW, rh=rfb.updateRectH;
if (rfb.updateRectEncoding == rfb.EncodingLastRect) break;
if (rfb.updateRectEncoding == rfb.EncodingNewFBSize) {
  rfb.setFramebufferSize(rw,rh);
  updateFramebufferSize();
  break;
}
if (rfb.updateRectEncoding == rfb.EncodingXCursor || rfb.updateRectEncoding == rfb.EncodingRichCursor) {
  handleCursorShapeUpdate(rfb.updateRectEncoding,rx,ry,rw,rh);
  continue;
}
if (rfb.updateRectEncoding == rfb.EncodingPointerPos) {
  softCursorMove(rx,ry);
  cursorPosReceived=true;
  continue;
}
long numBytesReadBefore=rfb.getNumBytesRead();
rfb.startTiming();
switch (rfb.updateRectEncoding) {
case RfbProto.EncodingRaw:
  statNumRectsRaw++;
handleRawRect(rx,ry,rw,rh);
break;
case RfbProto.EncodingCopyRect:
statNumRectsCopy++;
handleCopyRect(rx,ry,rw,rh);
break;
case RfbProto.EncodingRRE:
handleRRERect(rx,ry,rw,rh);
break;
case RfbProto.EncodingCoRRE:
handleCoRRERect(rx,ry,rw,rh);
break;
case RfbProto.EncodingHextile:
statNumRectsHextile++;
handleHextileRect(rx,ry,rw,rh);
break;
case RfbProto.EncodingZRLE:
statNumRectsZRLE++;
handleZRLERect(rx,ry,rw,rh);
break;
case RfbProto.EncodingZlib:
handleZlibRect(rx,ry,rw,rh);
break;
case RfbProto.EncodingTight:
if (tightDecoder != null) {
statNumRectsTightJPEG=tightDecoder.getNumJPEGRects();
}
handleTightRect(rx,ry,rw,rh);
break;
default :
throw new Exception(""String_Node_Str"" + rfb.updateRectEncoding);
}
rfb.stopTiming();
statNumPixelRects++;
statNumBytesDecoded+=rw * rh * bytesPixel;
statNumBytesEncoded+=(int)(rfb.getNumBytesRead() - numBytesReadBefore);
}
boolean fullUpdateNeeded=false;
if (viewer.checkRecordingStatus()) fullUpdateNeeded=true;
if (viewer.deferUpdateRequests > 0 && rfb.available() == 0 && !cursorPosReceived) {
synchronized (rfb) {
try {
rfb.wait(viewer.deferUpdateRequests);
}
 catch (InterruptedException e) {
}
}
}
viewer.autoSelectEncodings();
if (viewer.options.eightBitColors != (bytesPixel == 1)) {
if (!rfb.continuousUpdatesAreActive()) {
setPixelFormat();
fullUpdateNeeded=true;
}
 else {
rfb.tryDisableContinuousUpdates();
break;
}
}
boolean enable=viewer.options.continuousUpdates;
if (enable != rfb.continuousUpdatesAreActive()) {
if (enable) {
rfb.tryEnableContinuousUpdates(0,0,rfb.framebufferWidth,rfb.framebufferHeight);
}
 else {
rfb.tryDisableContinuousUpdates();
}
}
if (fullUpdateNeeded) {
rfb.writeFramebufferUpdateRequest(0,0,rfb.framebufferWidth,rfb.framebufferHeight,false);
}
 else if (!rfb.continuousUpdatesAreActive()) {
rfb.writeFramebufferUpdateRequest(0,0,rfb.framebufferWidth,rfb.framebufferHeight,true);
}
break;
case RfbProto.SetColourMapEntries:
throw new Exception(""String_Node_Str"");
case RfbProto.Bell:
Toolkit.getDefaultToolkit().beep();
break;
case RfbProto.ServerCutText:
String s=rfb.readServerCutText();
viewer.clipboard.setCutText(s);
break;
case RfbProto.EndOfContinuousUpdates:
if (rfb.continuousUpdatesAreActive()) {
rfb.endOfContinuousUpdates();
boolean incremental=true;
if (viewer.options.eightBitColors != (bytesPixel == 1)) {
setPixelFormat();
incremental=false;
}
rfb.writeFramebufferUpdateRequest(0,0,rfb.framebufferWidth,rfb.framebufferHeight,incremental);
}
break;
default :
throw new Exception(""String_Node_Str"" + msgType);
}
}
}","public void processNormalProtocol() throws Exception {
  viewer.checkRecordingStatus();
  rfb.writeFramebufferUpdateRequest(0,0,rfb.framebufferWidth,rfb.framebufferHeight,false);
  if (viewer.options.continuousUpdates) {
    rfb.tryEnableContinuousUpdates(0,0,rfb.framebufferWidth,rfb.framebufferHeight);
  }
  resetStats();
  boolean statsRestarted=false;
  while (true) {
    int msgType=rfb.readServerMessageType();
switch (msgType) {
case RfbProto.FramebufferUpdate:
      if (statNumUpdates == viewer.debugStatsExcludeUpdates && !statsRestarted) {
        resetStats();
        statsRestarted=true;
      }
 else       if (statNumUpdates == viewer.debugStatsMeasureUpdates && statsRestarted) {
        viewer.disconnect();
      }
    rfb.readFramebufferUpdate();
  statNumUpdates++;
boolean cursorPosReceived=false;
for (int i=0; i < rfb.updateNRects; i++) {
rfb.readFramebufferUpdateRectHdr();
statNumTotalRects++;
int rx=rfb.updateRectX, ry=rfb.updateRectY;
int rw=rfb.updateRectW, rh=rfb.updateRectH;
if (rfb.updateRectEncoding == rfb.EncodingLastRect) break;
if (rfb.updateRectEncoding == rfb.EncodingNewFBSize) {
  rfb.setFramebufferSize(rw,rh);
  updateFramebufferSize();
  break;
}
if (rfb.updateRectEncoding == rfb.EncodingXCursor || rfb.updateRectEncoding == rfb.EncodingRichCursor) {
  handleCursorShapeUpdate(rfb.updateRectEncoding,rx,ry,rw,rh);
  continue;
}
if (rfb.updateRectEncoding == rfb.EncodingPointerPos) {
  softCursorMove(rx,ry);
  cursorPosReceived=true;
  continue;
}
long numBytesReadBefore=rfb.getNumBytesRead();
rfb.startTiming();
switch (rfb.updateRectEncoding) {
case RfbProto.EncodingRaw:
  statNumRectsRaw++;
handleRawRect(rx,ry,rw,rh);
break;
case RfbProto.EncodingCopyRect:
statNumRectsCopy++;
handleCopyRect(rx,ry,rw,rh);
break;
case RfbProto.EncodingRRE:
handleRRERect(rx,ry,rw,rh);
break;
case RfbProto.EncodingCoRRE:
handleCoRRERect(rx,ry,rw,rh);
break;
case RfbProto.EncodingHextile:
statNumRectsHextile++;
handleHextileRect(rx,ry,rw,rh);
break;
case RfbProto.EncodingZRLE:
statNumRectsZRLE++;
handleZRLERect(rx,ry,rw,rh);
break;
case RfbProto.EncodingZlib:
handleZlibRect(rx,ry,rw,rh);
break;
case RfbProto.EncodingTight:
if (tightDecoder != null) {
statNumRectsTightJPEG=tightDecoder.getNumJPEGRects();
}
statNumRectsTight++;
handleTightRect(rx,ry,rw,rh);
break;
default :
throw new Exception(""String_Node_Str"" + rfb.updateRectEncoding);
}
rfb.stopTiming();
statNumPixelRects++;
statNumBytesDecoded+=rw * rh * bytesPixel;
statNumBytesEncoded+=(int)(rfb.getNumBytesRead() - numBytesReadBefore);
}
boolean fullUpdateNeeded=false;
if (viewer.checkRecordingStatus()) fullUpdateNeeded=true;
if (viewer.deferUpdateRequests > 0 && rfb.available() == 0 && !cursorPosReceived) {
synchronized (rfb) {
try {
rfb.wait(viewer.deferUpdateRequests);
}
 catch (InterruptedException e) {
}
}
}
viewer.autoSelectEncodings();
if (viewer.options.eightBitColors != (bytesPixel == 1)) {
if (!rfb.continuousUpdatesAreActive()) {
setPixelFormat();
fullUpdateNeeded=true;
}
 else {
rfb.tryDisableContinuousUpdates();
break;
}
}
boolean enable=viewer.options.continuousUpdates;
if (enable != rfb.continuousUpdatesAreActive()) {
if (enable) {
rfb.tryEnableContinuousUpdates(0,0,rfb.framebufferWidth,rfb.framebufferHeight);
}
 else {
rfb.tryDisableContinuousUpdates();
}
}
if (fullUpdateNeeded) {
rfb.writeFramebufferUpdateRequest(0,0,rfb.framebufferWidth,rfb.framebufferHeight,false);
}
 else if (!rfb.continuousUpdatesAreActive()) {
rfb.writeFramebufferUpdateRequest(0,0,rfb.framebufferWidth,rfb.framebufferHeight,true);
}
break;
case RfbProto.SetColourMapEntries:
throw new Exception(""String_Node_Str"");
case RfbProto.Bell:
Toolkit.getDefaultToolkit().beep();
break;
case RfbProto.ServerCutText:
String s=rfb.readServerCutText();
viewer.clipboard.setCutText(s);
break;
case RfbProto.EndOfContinuousUpdates:
if (rfb.continuousUpdatesAreActive()) {
rfb.endOfContinuousUpdates();
boolean incremental=true;
if (viewer.options.eightBitColors != (bytesPixel == 1)) {
setPixelFormat();
incremental=false;
}
rfb.writeFramebufferUpdateRequest(0,0,rfb.framebufferWidth,rfb.framebufferHeight,incremental);
}
break;
default :
throw new Exception(""String_Node_Str"" + msgType);
}
}
}",0.9974877377676756
111592,"void resetStats(){
  statStartTime=System.currentTimeMillis();
  statNumUpdates=0;
  statNumTotalRects=0;
  statNumPixelRects=0;
  statNumRectsTight=0;
  statNumRectsTightJPEG=0;
  statNumRectsZRLE=0;
  statNumRectsHextile=0;
  statNumRectsRaw=0;
  statNumRectsCopy=0;
  statNumBytesEncoded=0;
  statNumBytesDecoded=0;
  if (tightDecoder != null)   tightDecoder.setNumJPEGRects(0);
}","void resetStats(){
  statStartTime=System.currentTimeMillis();
  statNumUpdates=0;
  statNumTotalRects=0;
  statNumPixelRects=0;
  statNumRectsTight=0;
  statNumRectsTightJPEG=0;
  statNumRectsZRLE=0;
  statNumRectsHextile=0;
  statNumRectsRaw=0;
  statNumRectsCopy=0;
  statNumBytesEncoded=0;
  statNumBytesDecoded=0;
  if (tightDecoder != null) {
    tightDecoder.setNumJPEGRects(0);
    tightDecoder.setNumTightRects(0);
  }
}",0.9433497536945812
111593,"public void setDataOutputStream(DataOutputStream os){
  dos=os;
}","public void setDataOutputStream(DataOutput os){
  dos=os;
}",0.9516129032258064
111594,"RfbProto(String h,int p,VncViewer v) throws IOException {
  viewer=v;
  host=h;
  port=p;
  if (viewer.socketFactory == null) {
    sock=new Socket(host,port);
  }
 else {
    try {
      Class factoryClass=Class.forName(viewer.socketFactory);
      SocketFactory factory=(SocketFactory)factoryClass.newInstance();
      if (viewer.inAnApplet)       sock=factory.createSocket(host,port,viewer);
 else       sock=factory.createSocket(host,port,viewer.mainArgs);
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new IOException(e.getMessage());
    }
  }
  is=new DataInputStream(new BufferedInputStream(sock.getInputStream(),16384));
  os=sock.getOutputStream();
  timing=false;
  timeWaitedIn100us=5;
  timedKbits=0;
}","RfbProto(String h,int p,VncViewer v) throws IOException {
  viewer=v;
  host=h;
  port=p;
  if (viewer.socketFactory == null) {
    sock=new Socket(host,port);
    sock.setTcpNoDelay(true);
  }
 else {
    try {
      Class factoryClass=Class.forName(viewer.socketFactory);
      SocketFactory factory=(SocketFactory)factoryClass.newInstance();
      if (viewer.inAnApplet)       sock=factory.createSocket(host,port,viewer);
 else       sock=factory.createSocket(host,port,viewer.mainArgs);
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new IOException(e.getMessage());
    }
  }
  is=new DataInputStream(new BufferedInputStream(sock.getInputStream(),16384));
  os=sock.getOutputStream();
  timing=false;
  timeWaitedIn100us=5;
  timedKbits=0;
}",0.98015873015873
111595,"public void write(int b) throws IOException {
  recordInterface.writeIntBE(b);
}","public void write(int b) throws IOException {
  if (recordInterface.canWrite())   recordInterface.writeIntBE(b);
}",0.8247422680412371
111596,"/** 
 * Get current selection.
 * @param useScreenCoords use screen coordinates if true, or framebuffercoordinates if false. This makes difference when scaling factor is not 100.
 * @return The selection as a {@link Rectangle}.
 */
private synchronized Rectangle getSelection(boolean useScreenCoords){
  int x=selectionStart.x;
  int y=selectionStart.y;
  int w=selectionEnd.x - selectionStart.x;
  int h=selectionEnd.y - selectionStart.y;
  boolean horizSwap=false;
  boolean vertSwap=false;
  if (w < 0) {
    w=-w;
    x=x - w;
    horizSwap=true;
  }
  if (h < 0) {
    h=-h;
    y=y - h;
    vertSwap=true;
  }
  if (w > 0 && h > 0) {
    w+=1;
    h+=1;
  }
  if (rfb.framebufferWidth != scaledWidth) {
    x=(x * 100 + scalingFactor / 2) / scalingFactor;
    y=(y * 100 + scalingFactor / 2) / scalingFactor;
    w=(w * 100 + scalingFactor / 2) / scalingFactor;
    h=(h * 100 + scalingFactor / 2) / scalingFactor;
  }
  int widthCorrection=w % 16;
  if (widthCorrection >= 8) {
    widthCorrection-=16;
  }
  w-=widthCorrection;
  if (horizSwap) {
    x+=widthCorrection;
  }
  int heightCorrection=h % 8;
  if (heightCorrection >= 4) {
    heightCorrection-=8;
  }
  h-=heightCorrection;
  if (vertSwap) {
    y+=heightCorrection;
  }
  int clipWidth=rfb.framebufferWidth;
  int clipHeight=rfb.framebufferHeight;
  if (useScreenCoords && rfb.framebufferWidth != scaledWidth) {
    x=(x * scalingFactor + 50) / 100;
    y=(y * scalingFactor + 50) / 100;
    w=(w * scalingFactor + 50) / 100;
    h=(h * scalingFactor + 50) / 100;
    clipWidth=scaledWidth;
    clipHeight=scaledHeight;
  }
  Rectangle selection=new Rectangle(x,y,w,h);
  Rectangle clip=new Rectangle(0,0,clipWidth,clipHeight);
  return selection.intersection(clip);
}","/** 
 * Get current selection.
 * @param useScreenCoords use screen coordinates if true, or framebuffercoordinates if false. This makes difference when scaling factor is not 100.
 * @return The selection as a {@link Rectangle}.
 */
private synchronized Rectangle getSelection(boolean useScreenCoords){
  int x=selectionStart.x;
  int y=selectionStart.y;
  int w=selectionEnd.x - selectionStart.x;
  int h=selectionEnd.y - selectionStart.y;
  boolean horizSwap=false;
  boolean vertSwap=false;
  if (w < 0) {
    w=-w;
    x=x - w;
    horizSwap=true;
  }
  if (h < 0) {
    h=-h;
    y=y - h;
    vertSwap=true;
  }
  if (w > 0 && h > 0) {
    w+=1;
    h+=1;
  }
  if (rfb.framebufferWidth != scaledWidth) {
    x=(x * 100 + scalingFactor / 2) / scalingFactor;
    y=(y * 100 + scalingFactor / 2) / scalingFactor;
    w=(w * 100 + scalingFactor / 2) / scalingFactor;
    h=(h * 100 + scalingFactor / 2) / scalingFactor;
  }
  if (x < 0)   x=0;
  if (y < 0)   y=0;
  if (x + w > rfb.framebufferWidth)   w=rfb.framebufferWidth - x;
  if (y + h > rfb.framebufferHeight)   h=rfb.framebufferHeight - y;
  int widthCorrection=w % 16;
  if (widthCorrection >= 8 && x + (w / 16 + 1) * 16 <= rfb.framebufferWidth) {
    widthCorrection-=16;
  }
  w-=widthCorrection;
  if (horizSwap) {
    x+=widthCorrection;
  }
  int heightCorrection=h % 8;
  if (heightCorrection >= 4 && y + (h / 8 + 1) * 8 <= rfb.framebufferHeight) {
    heightCorrection-=8;
  }
  h-=heightCorrection;
  if (vertSwap) {
    y+=heightCorrection;
  }
  if (useScreenCoords && rfb.framebufferWidth != scaledWidth) {
    x=(x * scalingFactor + 50) / 100;
    y=(y * scalingFactor + 50) / 100;
    w=(w * scalingFactor + 50) / 100;
    h=(h * scalingFactor + 50) / 100;
  }
  return new Rectangle(x,y,w,h);
}",0.8349957252778569
111597,"/** 
 * Get current selection.
 * @param useScreenCoords use screen coordinates if true, or framebuffercoordinates if false. This makes difference when scaling factor is not 100.
 * @return The selection as a {@link Rectangle}.
 */
private synchronized Rectangle getSelection(boolean useScreenCoords){
  int x=selectionStart.x;
  int y=selectionStart.y;
  int w=selectionEnd.x - selectionStart.x;
  int h=selectionEnd.y - selectionStart.y;
  boolean horizSwap=false;
  boolean vertSwap=false;
  if (w < 0) {
    w=-w;
    x=x - w;
    horizSwap=true;
  }
  if (h < 0) {
    h=-h;
    y=y - h;
    vertSwap=true;
  }
  if (w > 0 && h > 0) {
    w+=1;
    h+=1;
  }
  if (rfb.framebufferWidth != scaledWidth) {
    x=(x * 100 + scalingFactor / 2) / scalingFactor;
    y=(y * 100 + scalingFactor / 2) / scalingFactor;
    w=(w * 100 + scalingFactor / 2) / scalingFactor;
    h=(h * 100 + scalingFactor / 2) / scalingFactor;
  }
  if (x < 0)   x=0;
  if (y < 0)   y=0;
  if (x + w > rfb.framebufferWidth)   w=rfb.framebufferWidth - x;
  if (y + h > rfb.framebufferHeight)   h=rfb.framebufferHeight - y;
  int widthCorrection=w % 16;
  if (widthCorrection >= 8 && x + (w / 16 + 1) * 16 <= rfb.framebufferWidth) {
    widthCorrection-=16;
  }
  w-=widthCorrection;
  if (horizSwap) {
    x+=widthCorrection;
  }
  int heightCorrection=h % 8;
  if (heightCorrection >= 4 && y + (h / 8 + 1) * 8 <= rfb.framebufferHeight) {
    heightCorrection-=8;
  }
  h-=heightCorrection;
  if (vertSwap) {
    y+=heightCorrection;
  }
  if (useScreenCoords && rfb.framebufferWidth != scaledWidth) {
    x=(x * scalingFactor + 50) / 100;
    y=(y * scalingFactor + 50) / 100;
    w=(w * scalingFactor + 50) / 100;
    h=(h * scalingFactor + 50) / 100;
  }
  return new Rectangle(x,y,w,h);
}","/** 
 * Get current selection.
 * @param useScreenCoords use screen coordinates if true, or framebuffercoordinates if false. This makes difference when scaling factor is not 100.
 * @return The selection as a {@link Rectangle}.
 */
private synchronized Rectangle getSelection(boolean useScreenCoords){
  int x=selectionStart.x;
  int y=selectionStart.y;
  int w=selectionEnd.x - selectionStart.x;
  int h=selectionEnd.y - selectionStart.y;
  boolean horizSwap=false;
  boolean vertSwap=false;
  if (w < 0) {
    w=-w;
    x=x - w;
    horizSwap=true;
  }
  if (h < 0) {
    h=-h;
    y=y - h;
    vertSwap=true;
  }
  if (w > 0 && h > 0) {
    w+=1;
    h+=1;
  }
  if (rfb.framebufferWidth != scaledWidth) {
    x=(x * 100 + scalingFactor / 2) / scalingFactor;
    y=(y * 100 + scalingFactor / 2) / scalingFactor;
    w=(w * 100 + scalingFactor / 2) / scalingFactor;
    h=(h * 100 + scalingFactor / 2) / scalingFactor;
  }
  if (x < 0) {
    if (horizSwap) {
      w+=x;
    }
    x=0;
  }
  if (y < 0) {
    if (vertSwap) {
      h+=y;
    }
    y=0;
  }
  if (x + w > rfb.framebufferWidth)   w=rfb.framebufferWidth - x;
  if (y + h > rfb.framebufferHeight)   h=rfb.framebufferHeight - y;
  int widthCorrection=w % 16;
  if (widthCorrection >= 8 && x + (w / 16 + 1) * 16 <= rfb.framebufferWidth) {
    widthCorrection-=16;
  }
  w-=widthCorrection;
  if (horizSwap) {
    x+=widthCorrection;
  }
  int heightCorrection=h % 8;
  if (heightCorrection >= 4 && y + (h / 8 + 1) * 8 <= rfb.framebufferHeight) {
    heightCorrection-=8;
  }
  h-=heightCorrection;
  if (vertSwap) {
    y+=heightCorrection;
  }
  if (useScreenCoords && rfb.framebufferWidth != scaledWidth) {
    x=(x * scalingFactor + 50) / 100;
    y=(y * scalingFactor + 50) / 100;
    w=(w * scalingFactor + 50) / 100;
    h=(h * scalingFactor + 50) / 100;
  }
  return new Rectangle(x,y,w,h);
}",0.968861945439515
111598,"/** 
 * Get current selection.
 * @param useScreenCoords use screen coordinates if true, or framebuffercoordinates if false. This makes difference when scaling factor is not 100.
 * @return The selection as a {@link Rectangle}.
 */
private synchronized Rectangle getSelection(boolean useScreenCoords){
  int x=selectionStart.x;
  int y=selectionStart.y;
  int w=selectionEnd.x - selectionStart.x;
  int h=selectionEnd.y - selectionStart.y;
  boolean horizSwap=false;
  boolean vertSwap=false;
  if (w < 0) {
    w=-w;
    x=x - w;
    horizSwap=true;
  }
  if (h < 0) {
    h=-h;
    y=y - h;
    vertSwap=true;
  }
  if (w > 0 && h > 0) {
    w+=1;
    h+=1;
  }
  if (rfb.framebufferWidth != scaledWidth) {
    x=(x * 100 + scalingFactor / 2) / scalingFactor;
    y=(y * 100 + scalingFactor / 2) / scalingFactor;
    w=(w * 100 + scalingFactor / 2) / scalingFactor;
    h=(h * 100 + scalingFactor / 2) / scalingFactor;
  }
  if (x < 0) {
    if (horizSwap) {
      w+=x;
    }
    x=0;
  }
  if (y < 0) {
    if (vertSwap) {
      h+=y;
    }
    y=0;
  }
  if (x + w > rfb.framebufferWidth)   w=rfb.framebufferWidth - x;
  if (y + h > rfb.framebufferHeight)   h=rfb.framebufferHeight - y;
  int widthCorrection=w % 16;
  if (widthCorrection >= 8 && x + (w / 16 + 1) * 16 <= rfb.framebufferWidth) {
    widthCorrection-=16;
  }
  w-=widthCorrection;
  if (horizSwap) {
    x+=widthCorrection;
  }
  int heightCorrection=h % 8;
  if (heightCorrection >= 4 && y + (h / 8 + 1) * 8 <= rfb.framebufferHeight) {
    heightCorrection-=8;
  }
  h-=heightCorrection;
  if (vertSwap) {
    y+=heightCorrection;
  }
  if (useScreenCoords && rfb.framebufferWidth != scaledWidth) {
    x=(x * scalingFactor + 50) / 100;
    y=(y * scalingFactor + 50) / 100;
    w=(w * scalingFactor + 50) / 100;
    h=(h * scalingFactor + 50) / 100;
  }
  return new Rectangle(x,y,w,h);
}","/** 
 * Get current selection.
 * @param useScreenCoords use screen coordinates if true, or framebuffercoordinates if false. This makes difference when scaling factor is not 100.
 * @return The selection as a {@link Rectangle}.
 */
private synchronized Rectangle getSelection(boolean useScreenCoords){
  int x0=selectionStart.x;
  int x1=selectionEnd.x;
  int y0=selectionStart.y;
  int y1=selectionEnd.y;
  if (x1 < x0) {
    int t=x0;
    x0=x1;
    x1=t;
  }
  if (y1 < y0) {
    int t=y0;
    y0=y1;
    y1=t;
  }
  if (x0 != x1 && y0 != y1) {
    x1+=1;
    y1+=1;
  }
  if (rfb.framebufferWidth != scaledWidth) {
    x0=(x0 * 100 + scalingFactor / 2) / scalingFactor;
    y0=(y0 * 100 + scalingFactor / 2) / scalingFactor;
    x1=(x1 * 100 + scalingFactor / 2) / scalingFactor;
    y1=(y1 * 100 + scalingFactor / 2) / scalingFactor;
  }
  if (x0 < 0)   x0=0;
  if (y0 < 0)   y0=0;
  if (x1 > rfb.framebufferWidth)   x1=rfb.framebufferWidth;
  if (y1 > rfb.framebufferHeight)   y1=rfb.framebufferHeight;
  int widthBlocks=(x1 - x0 + 8) / 16;
  if (selectionStart.x <= selectionEnd.x) {
    x1=x0 + widthBlocks * 16;
    if (x1 > rfb.framebufferWidth) {
      x1-=16;
    }
  }
 else {
    x0=x1 - widthBlocks * 16;
    if (x0 < 0) {
      x0+=16;
    }
  }
  int heightBlocks=(y1 - y0 + 4) / 8;
  if (selectionStart.y <= selectionEnd.y) {
    y1=y0 + heightBlocks * 8;
    if (y1 > rfb.framebufferHeight) {
      y1-=8;
    }
  }
 else {
    y0=y1 - heightBlocks * 8;
    if (y0 < 0) {
      y0+=8;
    }
  }
  if (useScreenCoords && rfb.framebufferWidth != scaledWidth) {
    x0=(x0 * scalingFactor + 50) / 100;
    y0=(y0 * scalingFactor + 50) / 100;
    x1=(x1 * scalingFactor + 50) / 100;
    y1=(y1 * scalingFactor + 50) / 100;
  }
  return new Rectangle(x0,y0,x1 - x0,y1 - y0);
}",0.4716516023007395
111599,"FbsConnection(String fbsLocation,String indexLocationPrefix,Applet applet) throws MalformedURLException {
  URL base=null;
  if (applet != null) {
    base=applet.getCodeBase();
  }
  fbsURL=new URL(base,fbsLocation);
  fbiURL=fbkURL=null;
  if (indexLocationPrefix != null) {
    try {
      fbiURL=new URL(base,indexLocationPrefix + ""String_Node_Str"");
      fbkURL=new URL(base,indexLocationPrefix + ""String_Node_Str"");
    }
 catch (    MalformedURLException e) {
      fbiURL=fbkURL=null;
    }
  }
  idx=null;
  loadIndex();
}","FbsConnection(String fbsLocation,String indexLocationPrefix,Applet applet) throws MalformedURLException {
  URL base=null;
  if (applet != null) {
    base=applet.getCodeBase();
  }
  fbsURL=new URL(base,fbsLocation);
  fbiURL=fbkURL=null;
  if (indexLocationPrefix != null) {
    try {
      fbiURL=new URL(base,indexLocationPrefix + ""String_Node_Str"");
      fbkURL=new URL(base,indexLocationPrefix + ""String_Node_Str"");
    }
 catch (    MalformedURLException e) {
      fbiURL=fbkURL=null;
    }
  }
  idx=null;
  numIndexRecords=0;
  loadIndex();
}",0.9732718894009216
111600,"/** 
 * Load index data from .fbi file to   {@link #idx idx}.
 */
private void loadIndex(){
  if (fbiURL != null && fbkURL != null) {
    FbsEntryPoint[] newIndex;
    int numRecordsRead=0;
    try {
      URLConnection connection=fbiURL.openConnection();
      connection.connect();
      DataInputStream is=new DataInputStream(connection.getInputStream());
      byte[] b=new byte[12];
      is.readFully(b);
      if (b[0] != 'F' || b[1] != 'B' || b[2] != 'I' || b[3] != ' ' || b[4] != '0' || b[5] != '0' || b[6] != '1' || b[7] != '.' || b[8] < '0' || b[8] > '9' || b[9] < '0' || b[9] > '9' || b[10] < '0' || b[10] > '9' || b[11] != '\n') {
        System.err.println(""String_Node_Str"");
        return;
      }
      int numRecords=is.readInt();
      if (numRecords <= 0) {
        System.err.println(""String_Node_Str"");
        return;
      }
      newIndex=new FbsEntryPoint[numRecords];
      try {
        for (int i=0; i < numRecords; i++) {
          FbsEntryPoint record=new FbsEntryPoint();
          record.timestamp=(long)is.readInt() & 0xFFFFFFFFL;
          record.key_fpos=(long)is.readInt() & 0xFFFFFFFFL;
          record.key_size=(long)is.readInt() & 0xFFFFFFFFL;
          record.fbs_fpos=(long)is.readInt() & 0xFFFFFFFFL;
          record.fbs_skip=(long)is.readInt() & 0xFFFFFFFFL;
          newIndex[i]=record;
          numRecordsRead++;
        }
      }
 catch (      EOFException e) {
        System.err.println(""String_Node_Str"");
      }
catch (      IOException e) {
        System.err.println(""String_Node_Str"" + e);
      }
      if (numRecordsRead == 0) {
        System.err.println(""String_Node_Str"");
        return;
      }
 else       if (numRecordsRead != numRecords) {
        System.err.println(""String_Node_Str"");
      }
    }
 catch (    FileNotFoundException e) {
      System.err.println(""String_Node_Str"" + e.getMessage());
      return;
    }
catch (    IOException e) {
      System.err.println(e);
      System.err.println(""String_Node_Str"");
      return;
    }
    idx=newIndex;
    System.err.println(""String_Node_Str"" + numRecordsRead + ""String_Node_Str"");
  }
}","/** 
 * Load index data from .fbi file to   {@link #idx idx}.
 */
private void loadIndex(){
  if (fbiURL != null && fbkURL != null) {
    FbsEntryPoint[] newIndex;
    int numRecordsRead=0;
    try {
      URLConnection connection=fbiURL.openConnection();
      connection.connect();
      DataInputStream is=new DataInputStream(connection.getInputStream());
      byte[] b=new byte[12];
      is.readFully(b);
      if (b[0] != 'F' || b[1] != 'B' || b[2] != 'I' || b[3] != ' ' || b[4] != '0' || b[5] != '0' || b[6] != '1' || b[7] != '.' || b[8] < '0' || b[8] > '9' || b[9] < '0' || b[9] > '9' || b[10] < '0' || b[10] > '9' || b[11] != '\n') {
        System.err.println(""String_Node_Str"");
        return;
      }
      int numRecords=is.readInt();
      if (numRecords <= 0) {
        System.err.println(""String_Node_Str"");
        return;
      }
      newIndex=new FbsEntryPoint[numRecords];
      try {
        for (int i=0; i < numRecords; i++) {
          FbsEntryPoint record=new FbsEntryPoint();
          record.timestamp=(long)is.readInt() & 0xFFFFFFFFL;
          record.key_fpos=(long)is.readInt() & 0xFFFFFFFFL;
          record.key_size=(long)is.readInt() & 0xFFFFFFFFL;
          record.fbs_fpos=(long)is.readInt() & 0xFFFFFFFFL;
          record.fbs_skip=(long)is.readInt() & 0xFFFFFFFFL;
          newIndex[i]=record;
          numRecordsRead++;
        }
      }
 catch (      EOFException e) {
        System.err.println(""String_Node_Str"");
      }
catch (      IOException e) {
        System.err.println(""String_Node_Str"" + e);
      }
      if (numRecordsRead == 0) {
        System.err.println(""String_Node_Str"");
        return;
      }
 else       if (numRecordsRead != numRecords) {
        System.err.println(""String_Node_Str"");
      }
    }
 catch (    FileNotFoundException e) {
      System.err.println(""String_Node_Str"" + e.getMessage());
      return;
    }
catch (    IOException e) {
      System.err.println(e);
      System.err.println(""String_Node_Str"");
      return;
    }
    idx=newIndex;
    numIndexRecords=numRecordsRead;
    System.err.println(""String_Node_Str"" + numRecordsRead + ""String_Node_Str"");
  }
}",0.9915690866510538
111601,"private void loadIndex(){
  if (fbiURL != null && fbkURL != null) {
    try {
      URLConnection connection=fbiURL.openConnection();
      connection.connect();
      DataInputStream is=new DataInputStream(connection.getInputStream());
      byte[] b=new byte[12];
      is.readFully(b);
      if (b[0] != 'F' || b[1] != 'B' || b[2] != 'I' || b[3] != ' ' || b[4] != '0' || b[5] != '0' || b[6] != '1' || b[7] != '.' || b[8] < '0' || b[8] > '9' || b[9] < '0' || b[9] > '9' || b[10] < '0' || b[10] > '9' || b[11] != '\n') {
        System.err.println(""String_Node_Str"");
        fbiURL=null;
      }
      Vector newIndex=new Vector();
      FbsEntryPoint record=new FbsEntryPoint();
      try {
        while (true) {
          record.timestamp=is.readInt();
          record.key_fpos=is.readInt();
          record.key_size=is.readInt();
          record.fbs_fpos=is.readInt();
          record.fbs_skip=is.readInt();
          newIndex.add(record);
        }
      }
 catch (      EOFException e) {
      }
catch (      IOException e) {
        System.err.println(""String_Node_Str"");
      }
      idx=newIndex;
      System.err.println(""String_Node_Str"" + idx.size() + ""String_Node_Str"");
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
      System.err.println(""String_Node_Str"");
    }
  }
}","/** 
 * Load index data from .fbi file to   {@link #idx idx}.
 */
private void loadIndex(){
  if (fbiURL != null && fbkURL != null) {
    FbsEntryPoint[] newIndex;
    int numRecordsRead=0;
    try {
      URLConnection connection=fbiURL.openConnection();
      connection.connect();
      DataInputStream is=new DataInputStream(connection.getInputStream());
      byte[] b=new byte[12];
      is.readFully(b);
      if (b[0] != 'F' || b[1] != 'B' || b[2] != 'I' || b[3] != ' ' || b[4] != '0' || b[5] != '0' || b[6] != '1' || b[7] != '.' || b[8] < '0' || b[8] > '9' || b[9] < '0' || b[9] > '9' || b[10] < '0' || b[10] > '9' || b[11] != '\n') {
        System.err.println(""String_Node_Str"");
        return;
      }
      int numRecords=is.readInt();
      if (numRecords <= 0) {
        System.err.println(""String_Node_Str"");
        return;
      }
      newIndex=new FbsEntryPoint[numRecords];
      try {
        for (int i=0; i < numRecords; i++) {
          FbsEntryPoint record=new FbsEntryPoint();
          record.timestamp=(long)is.readInt() & 0xFFFFFFFFL;
          record.key_fpos=(long)is.readInt() & 0xFFFFFFFFL;
          record.key_size=(long)is.readInt() & 0xFFFFFFFFL;
          record.fbs_fpos=(long)is.readInt() & 0xFFFFFFFFL;
          record.fbs_skip=(long)is.readInt() & 0xFFFFFFFFL;
          newIndex[i]=record;
          numRecordsRead++;
        }
      }
 catch (      EOFException e) {
        System.err.println(""String_Node_Str"");
      }
catch (      IOException e) {
        System.err.println(""String_Node_Str"" + e);
      }
      if (numRecordsRead == 0) {
        System.err.println(""String_Node_Str"");
        return;
      }
 else       if (numRecordsRead != numRecords) {
        System.err.println(""String_Node_Str"");
      }
    }
 catch (    FileNotFoundException e) {
      System.err.println(""String_Node_Str"" + e.getMessage());
      return;
    }
catch (    IOException e) {
      System.err.println(e);
      System.err.println(""String_Node_Str"");
      return;
    }
    idx=newIndex;
    System.err.println(""String_Node_Str"" + numRecordsRead + ""String_Node_Str"");
  }
}",0.6595127610208816
111602,"public void init(){
  Applet receiver=null;
  receiver=RfbSharedStatic.refApplet;
  long time=Long.valueOf(getParameter(""String_Node_Str"")).longValue();
  boolean pause=(Integer.parseInt(getParameter(""String_Node_Str"")) != 0);
  boolean unpause=(Integer.parseInt(getParameter(""String_Node_Str"")) != 0);
  if (receiver != null) {
    if (pause) {
      ((RfbPlayer)receiver).setPaused(true);
    }
 else     if (unpause) {
      ((RfbPlayer)receiver).setPaused(false);
    }
 else {
      ((RfbPlayer)receiver).jumpTo(time);
    }
  }
 else   System.out.println(""String_Node_Str"" + time + ""String_Node_Str"");
}","public void init(){
  Applet receiver=null;
  receiver=RfbSharedStatic.refApplet;
  long time=Long.valueOf(getParameter(""String_Node_Str"")).longValue();
  boolean pause=(Integer.parseInt(getParameter(""String_Node_Str"")) != 0);
  boolean unpause=(Integer.parseInt(getParameter(""String_Node_Str"")) != 0);
  if (receiver != null) {
    if (pause) {
      ((RfbPlayer)receiver).setPaused(true);
    }
 else     if (unpause) {
      ((RfbPlayer)receiver).setPaused(false);
    }
 else {
      ((RfbPlayer)receiver).jumpTo(time);
    }
  }
 else   System.err.println(""String_Node_Str"" + time + ""String_Node_Str"");
}",0.9950738916256158
111603,"public void fatalError(String str){
  System.out.println(str);
  if (inAnApplet) {
    vncContainer.removeAll();
    if (rfb != null) {
      rfb=null;
    }
    Label errLabel=new Label(str);
    errLabel.setFont(new Font(""String_Node_Str"",Font.PLAIN,12));
    vncContainer.setLayout(new FlowLayout(FlowLayout.LEFT,30,30));
    vncContainer.add(errLabel);
    if (inSeparateFrame) {
      vncFrame.pack();
    }
 else {
      validate();
    }
    Thread.currentThread().stop();
  }
 else {
    System.exit(1);
  }
}","public void fatalError(String str){
  System.err.println(str);
  if (inAnApplet) {
    vncContainer.removeAll();
    if (rfb != null) {
      rfb=null;
    }
    Label errLabel=new Label(str);
    errLabel.setFont(new Font(""String_Node_Str"",Font.PLAIN,12));
    vncContainer.setLayout(new FlowLayout(FlowLayout.LEFT,30,30));
    vncContainer.add(errLabel);
    if (inSeparateFrame) {
      vncFrame.pack();
    }
 else {
      validate();
    }
    Thread.currentThread().stop();
  }
 else {
    System.exit(1);
  }
}",0.9941972920696324
111604,"public void init(){
  Applet receiver=null;
  receiver=RfbSharedStatic.refApplet;
  int width=Integer.valueOf(getParameter(""String_Node_Str"")).intValue();
  int height=Integer.valueOf(getParameter(""String_Node_Str"")).intValue();
  if (receiver != null) {
    ((RfbPlayer)receiver).displaySize(width,height);
  }
 else   System.out.println(""String_Node_Str"");
}","public void init(){
  Applet receiver=null;
  receiver=RfbSharedStatic.refApplet;
  int width=Integer.valueOf(getParameter(""String_Node_Str"")).intValue();
  int height=Integer.valueOf(getParameter(""String_Node_Str"")).intValue();
  if (receiver != null) {
    ((RfbPlayer)receiver).displaySize(width,height);
  }
 else   System.err.println(""String_Node_Str"");
}",0.9916666666666668
111605,"FbsInputStream connect(long timeOffset) throws IOException {
  FbsInputStream fbs=null;
  int i=indexForTimeOffset(timeOffset);
  if (i >= 0) {
    FbsEntryPoint entryPoint=indexData[i];
    if (entryPoint.key_size < entryPoint.fbs_fpos) {
      try {
        fbs=openFbsFile(entryPoint);
      }
 catch (      IOException e) {
        System.err.println(e);
      }
      if (fbs == null) {
        System.err.println(""String_Node_Str"" + entryPoint.timestamp + ""String_Node_Str"");
      }
    }
  }
  if (fbs == null) {
    fbs=openFbsFile();
  }
  fbs.setTimeOffset(timeOffset);
  return fbs;
}","FbsInputStream connect(long timeOffset) throws IOException {
  FbsInputStream fbs=null;
  int i=indexForTimeOffset(timeOffset);
  if (i >= 0) {
    FbsEntryPoint entryPoint=indexData[i];
    if (entryPoint.key_size < entryPoint.fbs_fpos) {
      try {
        fbs=openFbsFile(entryPoint);
      }
 catch (      IOException e) {
        System.err.println(e);
      }
      if (fbs == null) {
        System.err.println(""String_Node_Str"" + entryPoint.timestamp + ""String_Node_Str"");
      }
    }
  }
  if (fbs == null) {
    fbs=openFbsFile();
  }
  fbs.setTimeOffset(timeOffset,false);
  return fbs;
}",0.994991652754591
111606,"public synchronized void setTimeOffset(long pos){
  seekOffset=(long)(pos / playbackSpeed);
  long minJumpForwardOffset=timeOffset + (long)(10000 / playbackSpeed);
  if (seekOffset < timeOffset || seekOffset > minJumpForwardOffset) {
    farSeeking=true;
  }
  notify();
}","public synchronized void setTimeOffset(long pos,boolean allowJump){
  seekOffset=(long)(pos / playbackSpeed);
  if (allowJump) {
    long minJumpForwardOffset=timeOffset + (long)(10000 / playbackSpeed);
    if (seekOffset < timeOffset || seekOffset > minJumpForwardOffset) {
      farSeeking=true;
    }
  }
  notify();
}",0.9173693086003372
111607,"public void setPos(long pos){
  fbs.setTimeOffset(pos);
}","public void setPos(long pos){
  fbs.setTimeOffset(pos,true);
}",0.957983193277311
111608,"public void run(){
  gridbag=new GridBagLayout();
  vncContainer.setLayout(gridbag);
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  gbc.anchor=GridBagConstraints.NORTHWEST;
  if (showControls) {
    buttonPanel=new ButtonPanel(this);
    buttonPanel.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
    gridbag.setConstraints(buttonPanel,gbc);
    vncContainer.add(buttonPanel);
  }
  if (inSeparateFrame) {
    vncFrame.pack();
    vncFrame.show();
  }
 else {
    validate();
  }
  try {
    if (inAnApplet) {
      url=new URL(getCodeBase(),sessionURL);
    }
 else {
      url=new URL(sessionURL);
    }
    rfb=new RfbProto(url);
    vc=new VncCanvas(this);
    gbc.weightx=1.0;
    gbc.weighty=1.0;
    if (inSeparateFrame) {
      Panel canvasPanel=new Panel();
      canvasPanel.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
      canvasPanel.add(vc);
      desktopScrollPane=new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);
      gbc.fill=GridBagConstraints.BOTH;
      gridbag.setConstraints(desktopScrollPane,gbc);
      desktopScrollPane.add(canvasPanel);
      vncFrame.add(desktopScrollPane);
      vncFrame.setTitle(rfb.desktopName);
      vncFrame.pack();
      vc.resizeDesktopFrame();
    }
 else {
      gridbag.setConstraints(vc,gbc);
      add(vc);
      validate();
    }
    while (true) {
      try {
        setPaused(!autoPlay);
        rfb.fbs.setSpeed(playbackSpeed);
        if (initialTimeOffset > rfb.fbs.getTimeOffset())         setPos(initialTimeOffset);
        vc.processNormalProtocol();
      }
 catch (      EOFException e) {
        if (e.getMessage() != null && e.getMessage().equals(""String_Node_Str"")) {
          initialTimeOffset=rfb.fbs.getSeekOffset();
          autoPlay=!rfb.fbs.isPaused();
          rfb.newSession(url);
        }
 else {
          initialTimeOffset=0;
          autoPlay=false;
          rfb.newSession(url);
        }
      }
    }
  }
 catch (  FileNotFoundException e) {
    fatalError(e.toString());
  }
catch (  Exception e) {
    e.printStackTrace();
    fatalError(e.toString());
  }
}","public void run(){
  gridbag=new GridBagLayout();
  vncContainer.setLayout(gridbag);
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  gbc.anchor=GridBagConstraints.NORTHWEST;
  if (showControls) {
    buttonPanel=new ButtonPanel(this);
    buttonPanel.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
    gridbag.setConstraints(buttonPanel,gbc);
    vncContainer.add(buttonPanel);
  }
  if (inSeparateFrame) {
    vncFrame.pack();
    vncFrame.show();
  }
 else {
    validate();
  }
  try {
    if (inAnApplet) {
      url=new URL(getCodeBase(),sessionURL);
    }
 else {
      url=new URL(sessionURL);
    }
    rfb=new RfbProto(url);
    vc=new VncCanvas(this);
    gbc.weightx=1.0;
    gbc.weighty=1.0;
    if (inSeparateFrame) {
      Panel canvasPanel=new Panel();
      canvasPanel.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
      canvasPanel.add(vc);
      desktopScrollPane=new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);
      gbc.fill=GridBagConstraints.BOTH;
      gridbag.setConstraints(desktopScrollPane,gbc);
      desktopScrollPane.add(canvasPanel);
      vncFrame.add(desktopScrollPane);
      vncFrame.setTitle(rfb.desktopName);
      vncFrame.pack();
      vc.resizeDesktopFrame();
    }
 else {
      gridbag.setConstraints(vc,gbc);
      add(vc);
      validate();
    }
    while (true) {
      try {
        setPaused(!autoPlay);
        rfb.fbs.setSpeed(playbackSpeed);
        if (initialTimeOffset > rfb.fbs.getTimeOffset())         setPos(initialTimeOffset);
        vc.processNormalProtocol();
      }
 catch (      EOFException e) {
        if (e.getMessage() != null && e.getMessage().equals(""String_Node_Str"")) {
          initialTimeOffset=rfb.fbs.getSeekOffset();
          autoPlay=!rfb.fbs.isPaused();
          rfb.newSession(url);
        }
 else {
          initialTimeOffset=0;
          autoPlay=false;
          rfb.newSession(url);
          vc.updateFramebufferSize();
        }
      }
    }
  }
 catch (  FileNotFoundException e) {
    fatalError(e.toString());
  }
catch (  Exception e) {
    e.printStackTrace();
    fatalError(e.toString());
  }
}",0.991083998122947
111609,"public long getSeekOffset(){
  return seekOffset;
}","public long getSeekOffset(){
  return (long)(seekOffset * playbackSpeed);
}",0.8095238095238095
111610,"public void run(){
  gridbag=new GridBagLayout();
  vncContainer.setLayout(gridbag);
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  gbc.anchor=GridBagConstraints.NORTHWEST;
  if (showControls) {
    buttonPanel=new ButtonPanel(this);
    buttonPanel.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
    gridbag.setConstraints(buttonPanel,gbc);
    vncContainer.add(buttonPanel);
  }
  if (inSeparateFrame) {
    vncFrame.pack();
    vncFrame.show();
  }
 else {
    validate();
  }
  try {
    if (inAnApplet) {
      url=new URL(getCodeBase(),sessionURL);
    }
 else {
      url=new URL(sessionURL);
    }
    rfb=new RfbProto(url);
    vc=new VncCanvas(this);
    gbc.weightx=1.0;
    gbc.weighty=1.0;
    if (inSeparateFrame) {
      Panel canvasPanel=new Panel();
      canvasPanel.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
      canvasPanel.add(vc);
      desktopScrollPane=new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);
      gbc.fill=GridBagConstraints.BOTH;
      gridbag.setConstraints(desktopScrollPane,gbc);
      desktopScrollPane.add(canvasPanel);
      vncFrame.add(desktopScrollPane);
      vncFrame.setTitle(rfb.desktopName);
      vncFrame.pack();
      vc.resizeDesktopFrame();
    }
 else {
      gridbag.setConstraints(vc,gbc);
      add(vc);
      validate();
    }
    while (true) {
      try {
        setPaused(!autoPlay);
        rfb.fbs.setSpeed(playbackSpeed);
        if (initialTimeOffset > rfb.fbs.getTimeOffset())         setPos(initialTimeOffset);
        vc.processNormalProtocol();
      }
 catch (      EOFException e) {
        if (e.getMessage() != null && e.getMessage().equals(""String_Node_Str"")) {
          initialTimeOffset=rfb.fbs.getSeekOffset();
          autoPlay=!rfb.fbs.isPaused();
          rfb.newSession(url);
        }
 else {
          initialTimeOffset=0;
          autoPlay=false;
          rfb.newSession(url);
          vc.updateFramebufferSize();
        }
      }
    }
  }
 catch (  FileNotFoundException e) {
    fatalError(e.toString());
  }
catch (  Exception e) {
    e.printStackTrace();
    fatalError(e.toString());
  }
}","public void run(){
  gridbag=new GridBagLayout();
  vncContainer.setLayout(gridbag);
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  gbc.anchor=GridBagConstraints.NORTHWEST;
  if (showControls) {
    buttonPanel=new ButtonPanel(this);
    buttonPanel.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
    gridbag.setConstraints(buttonPanel,gbc);
    vncContainer.add(buttonPanel);
  }
  if (inSeparateFrame) {
    vncFrame.pack();
    vncFrame.show();
  }
 else {
    validate();
  }
  try {
    if (inAnApplet) {
      url=new URL(getCodeBase(),sessionURL);
    }
 else {
      url=new URL(sessionURL);
    }
    rfb=new RfbProto(url);
    vc=new VncCanvas(this);
    gbc.weightx=1.0;
    gbc.weighty=1.0;
    if (inSeparateFrame) {
      Panel canvasPanel=new Panel();
      canvasPanel.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
      canvasPanel.add(vc);
      desktopScrollPane=new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);
      gbc.fill=GridBagConstraints.BOTH;
      gridbag.setConstraints(desktopScrollPane,gbc);
      desktopScrollPane.add(canvasPanel);
      vncFrame.add(desktopScrollPane);
      vncFrame.setTitle(rfb.desktopName);
      vncFrame.pack();
      vc.resizeDesktopFrame();
    }
 else {
      gridbag.setConstraints(vc,gbc);
      add(vc);
      validate();
    }
    while (true) {
      try {
        setPaused(!autoPlay);
        rfb.fbs.setSpeed(playbackSpeed);
        if (initialTimeOffset > rfb.fbs.getTimeOffset())         setPos(initialTimeOffset);
        vc.processNormalProtocol();
      }
 catch (      EOFException e) {
        if (e.getMessage() != null && e.getMessage().equals(""String_Node_Str"")) {
          initialTimeOffset=rfb.fbs.getSeekOffset();
          autoPlay=!rfb.fbs.isPaused();
        }
 else {
          initialTimeOffset=0;
          autoPlay=false;
        }
        rfb.newSession(url);
        vc.updateFramebufferSize();
      }
    }
  }
 catch (  FileNotFoundException e) {
    fatalError(e.toString());
  }
catch (  Exception e) {
    e.printStackTrace();
    fatalError(e.toString());
  }
}",0.9444314185228604
111611,"@Override public LogStream attachContainer(final String containerId,final AttachParameter... params) throws DockerException, InterruptedException {
  final ContainerInfo containerInfo=inspectContainer(containerId);
  if (!containerInfo.state().running()) {
    throw new IllegalStateException(""String_Node_Str"" + containerId + ""String_Node_Str"");
  }
  WebTarget resource=noTimeoutResource().path(""String_Node_Str"").path(containerId).path(""String_Node_Str"");
  for (  final AttachParameter param : params) {
    resource=resource.queryParam(param.name().toLowerCase(Locale.ROOT),String.valueOf(true));
  }
  return getLogStream(POST,resource,containerId);
}","@Override public LogStream attachContainer(final String containerId,final AttachParameter... params) throws DockerException, InterruptedException {
  checkNotNull(containerId,""String_Node_Str"");
  WebTarget resource=noTimeoutResource().path(""String_Node_Str"").path(containerId).path(""String_Node_Str"");
  for (  final AttachParameter param : params) {
    resource=resource.queryParam(param.name().toLowerCase(Locale.ROOT),String.valueOf(true));
  }
  return getLogStream(POST,resource,containerId);
}",0.8376511226252159
111612,"private String authHeader(final RegistryAuth registryAuth) throws DockerException {
  if (registryAuth == null) {
    return ""String_Node_Str"";
  }
  try {
    return Base64.encodeBase64String(ObjectMapperProvider.objectMapper().writeValueAsString(registryAuth).getBytes());
  }
 catch (  JsonProcessingException ex) {
    throw new DockerException(""String_Node_Str"",ex);
  }
}","private String authHeader(final RegistryAuth registryAuth) throws DockerException {
  if (registryAuth == null) {
    return ""String_Node_Str"";
  }
  try {
    return Base64.encodeBase64String(ObjectMapperProvider.objectMapper().writeValueAsBytes(registryAuth));
  }
 catch (  JsonProcessingException ex) {
    throw new DockerException(""String_Node_Str"",ex);
  }
}",0.9514824797843666
111613,"private String authRegistryHeader(final RegistryConfigs registryConfigs) throws DockerException {
  if (registryConfigs == null) {
    return null;
  }
  try {
    String authRegistryJson=ObjectMapperProvider.objectMapper().writeValueAsString(registryConfigs.configs());
    final String apiVersion=version().apiVersion();
    final int versionComparison=compareVersion(apiVersion,""String_Node_Str"");
    if (versionComparison < 0) {
      authRegistryJson=""String_Node_Str"" + authRegistryJson + ""String_Node_Str"";
    }
 else     if (versionComparison == 0) {
      authRegistryJson=""String_Node_Str"" + authRegistryJson + ""String_Node_Str"";
    }
    return Base64.encodeBase64String(authRegistryJson.getBytes());
  }
 catch (  JsonProcessingException|InterruptedException ex) {
    throw new DockerException(""String_Node_Str"",ex);
  }
}","private String authRegistryHeader(final RegistryConfigs registryConfigs) throws DockerException {
  if (registryConfigs == null) {
    return null;
  }
  try {
    String authRegistryJson=ObjectMapperProvider.objectMapper().writeValueAsString(registryConfigs.configs());
    final String apiVersion=version().apiVersion();
    final int versionComparison=compareVersion(apiVersion,""String_Node_Str"");
    if (versionComparison < 0) {
      authRegistryJson=""String_Node_Str"" + authRegistryJson + ""String_Node_Str"";
    }
 else     if (versionComparison == 0) {
      authRegistryJson=""String_Node_Str"" + authRegistryJson + ""String_Node_Str"";
    }
    return Base64.encodeBase64String(authRegistryJson.getBytes(""String_Node_Str""));
  }
 catch (  JsonProcessingException|InterruptedException|UnsupportedEncodingException ex) {
    throw new DockerException(""String_Node_Str"",ex);
  }
}",0.9419279907084784
111614,"private String authHeader(final RegistryAuth registryAuth) throws DockerException {
  if (registryAuth == null) {
    return ""String_Node_Str"";
  }
  try {
    return Base64.encodeAsString(ObjectMapperProvider.objectMapper().writeValueAsString(registryAuth));
  }
 catch (  JsonProcessingException ex) {
    throw new DockerException(""String_Node_Str"",ex);
  }
}","private String authHeader(final RegistryAuth registryAuth) throws DockerException {
  if (registryAuth == null) {
    return ""String_Node_Str"";
  }
  try {
    return Base64.encodeBase64String(ObjectMapperProvider.objectMapper().writeValueAsString(registryAuth).getBytes());
  }
 catch (  JsonProcessingException ex) {
    throw new DockerException(""String_Node_Str"",ex);
  }
}",0.9742895805142084
111615,"private String authRegistryHeader(final RegistryConfigs registryConfigs) throws DockerException {
  if (registryConfigs == null) {
    return null;
  }
  try {
    String authRegistryJson=ObjectMapperProvider.objectMapper().writeValueAsString(registryConfigs.configs());
    final String apiVersion=version().apiVersion();
    final int versionComparison=compareVersion(apiVersion,""String_Node_Str"");
    if (versionComparison < 0) {
      authRegistryJson=""String_Node_Str"" + authRegistryJson + ""String_Node_Str"";
    }
 else     if (versionComparison == 0) {
      authRegistryJson=""String_Node_Str"" + authRegistryJson + ""String_Node_Str"";
    }
    return Base64.encodeAsString(authRegistryJson);
  }
 catch (  JsonProcessingException|InterruptedException ex) {
    throw new DockerException(""String_Node_Str"",ex);
  }
}","private String authRegistryHeader(final RegistryConfigs registryConfigs) throws DockerException {
  if (registryConfigs == null) {
    return null;
  }
  try {
    String authRegistryJson=ObjectMapperProvider.objectMapper().writeValueAsString(registryConfigs.configs());
    final String apiVersion=version().apiVersion();
    final int versionComparison=compareVersion(apiVersion,""String_Node_Str"");
    if (versionComparison < 0) {
      authRegistryJson=""String_Node_Str"" + authRegistryJson + ""String_Node_Str"";
    }
 else     if (versionComparison == 0) {
      authRegistryJson=""String_Node_Str"" + authRegistryJson + ""String_Node_Str"";
    }
    return Base64.encodeBase64String(authRegistryJson.getBytes());
  }
 catch (  JsonProcessingException|InterruptedException ex) {
    throw new DockerException(""String_Node_Str"",ex);
  }
}",0.9885611077664058
111616,"private RegistryConfigs parseDockerConfig(final Path configPath) throws IOException {
  checkNotNull(configPath);
  ObjectNode authJson=extractAuthJson(configPath);
  if (authJson.has(CREDS_STORE) && authJson.has(AUTHS_ENTRY)) {
    String credsStore=authJson.get(CREDS_STORE).textValue();
    Map<String,RegistryAuth> registryAuthMap=new HashMap<>();
    ObjectNode auths=(ObjectNode)authJson.get(AUTHS_ENTRY);
    Iterator<String> serverIterator=auths.fieldNames();
    while (serverIterator.hasNext()) {
      String serverAddress=serverIterator.next();
      Process process=Runtime.getRuntime().exec(""String_Node_Str"" + credsStore + ""String_Node_Str"");
      Writer outStreamWriter=new OutputStreamWriter(process.getOutputStream());
      BufferedWriter writer=new BufferedWriter(outStreamWriter);
      writer.write(serverAddress + ""String_Node_Str"");
      writer.flush();
      writer.close();
      outStreamWriter.close();
      BufferedReader input=new BufferedReader(new InputStreamReader(process.getInputStream()));
      String serverAuthDetails=input.readLine();
      JsonNode serverAuthNode=MAPPER.readTree(serverAuthDetails);
      RegistryAuthV2 serverAuth=new RegistryAuthV2(serverAuthNode.get(""String_Node_Str"").textValue(),serverAuthNode.get(""String_Node_Str"").textValue(),serverAuthNode.get(""String_Node_Str"").textValue());
      registryAuthMap.put(serverAddress,serverAuth);
    }
    return RegistryConfigs.create(registryAuthMap);
  }
 else   if (authJson.has(AUTHS_ENTRY)) {
    authJson=(ObjectNode)authJson.get(AUTHS_ENTRY);
  }
  return MAPPER.treeToValue(authJson,RegistryConfigs.class);
}","private RegistryConfigs parseDockerConfig(final Path configPath) throws IOException {
  checkNotNull(configPath);
  ObjectNode authJson=extractAuthJson(configPath);
  if (authJson.has(CREDS_STORE) && authJson.has(AUTHS_ENTRY)) {
    String credsStore=authJson.get(CREDS_STORE).textValue();
    Map<String,RegistryAuth> registryAuthMap=new HashMap<>();
    ObjectNode auths=(ObjectNode)authJson.get(AUTHS_ENTRY);
    Iterator<String> serverIterator=auths.fieldNames();
    while (serverIterator.hasNext()) {
      String serverAddress=serverIterator.next();
      Process process=Runtime.getRuntime().exec(""String_Node_Str"" + credsStore + ""String_Node_Str"");
      try (Writer outStreamWriter=new OutputStreamWriter(process.getOutputStream(),StandardCharsets.UTF_8)){
        try (BufferedWriter writer=new BufferedWriter(outStreamWriter)){
          writer.write(serverAddress + ""String_Node_Str"");
          writer.flush();
        }
       }
       try (InputStreamReader reader=new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8)){
        try (BufferedReader input=new BufferedReader(reader)){
          String serverAuthDetails=input.readLine();
          JsonNode serverAuthNode=MAPPER.readTree(serverAuthDetails);
          RegistryAuthV2 serverAuth=new RegistryAuthV2(serverAuthNode.get(""String_Node_Str"").textValue(),serverAuthNode.get(""String_Node_Str"").textValue(),serverAuthNode.get(""String_Node_Str"").textValue());
          registryAuthMap.put(serverAddress,serverAuth);
        }
       }
     }
    return RegistryConfigs.create(registryAuthMap);
  }
 else   if (authJson.has(AUTHS_ENTRY)) {
    authJson=(ObjectNode)authJson.get(AUTHS_ENTRY);
  }
  return MAPPER.treeToValue(authJson,RegistryConfigs.class);
}",0.8110516934046346
111617,"@Override public String identityToken(){
  return identityToken;
}","@Override public String identityToken(){
  return null;
}",0.8780487804878049
111618,"@Override public String email(){
  return email;
}","@Override public String email(){
  return null;
}",0.9292929292929292
111619,"private void storeAuthCredential(String testAuth1) throws IOException, InterruptedException {
  Process process=Runtime.getRuntime().exec(reader.getCredsStore() + ""String_Node_Str"");
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(process.getOutputStream()));
  writer.write(testAuth1 + ""String_Node_Str"");
  writer.flush();
  writer.close();
  process.waitFor();
}","private void storeAuthCredential(String testAuth1) throws IOException, InterruptedException {
  Process process=Runtime.getRuntime().exec(credStore + ""String_Node_Str"");
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(process.getOutputStream()));
  writer.write(testAuth1 + ""String_Node_Str"");
  writer.flush();
  writer.close();
  process.waitFor();
}",0.9588313413014607
111620,"@Test public void testFromDockerConfig_CredsStore() throws IOException, InterruptedException {
  String domain1=""String_Node_Str"";
  String domain2=""String_Node_Str"";
  String testAuth1=""String_Node_Str"" + ""String_Node_Str"" + domain1 + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String testAuth2=""String_Node_Str"" + ""String_Node_Str"" + domain2 + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  storeAuthCredential(testAuth1);
  storeAuthCredential(testAuth2);
  final Path path=getTestFilePath(""String_Node_Str"");
  final RegistryConfigs configs=reader.fromConfig(path);
  for (  RegistryAuth authConfigs : configs.configs().values()) {
    if (domain1.equals(authConfigs.serverAddress())) {
      assertThat(authConfigs.username(),equalTo(""String_Node_Str""));
      assertThat(authConfigs.password(),equalTo(""String_Node_Str""));
    }
 else     if (domain2.equals(authConfigs.serverAddress())) {
      assertThat(authConfigs.username(),equalTo(""String_Node_Str""));
      assertThat(authConfigs.password(),equalTo(""String_Node_Str""));
    }
  }
  eraseAuthCredential(domain1);
  eraseAuthCredential(domain2);
}","@Test public void testFromDockerConfig_CredsStore() throws IOException, InterruptedException {
  String credStoreType=reader.getSystemCredsStoreType();
  assumeTrue(""String_Node_Str"",credStoreType != null);
  credStore=""String_Node_Str"" + credStoreType;
  String domain1=""String_Node_Str"";
  String domain2=""String_Node_Str"";
  String testAuth1=""String_Node_Str"" + ""String_Node_Str"" + domain1 + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String testAuth2=""String_Node_Str"" + ""String_Node_Str"" + domain2 + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  storeAuthCredential(testAuth1);
  storeAuthCredential(testAuth2);
  final Path path=getTestFilePath(""String_Node_Str"");
  final RegistryConfigs configs=reader.fromConfig(path);
  for (  RegistryAuth authConfigs : configs.configs().values()) {
    if (domain1.equals(authConfigs.serverAddress())) {
      assertThat(authConfigs.username(),equalTo(""String_Node_Str""));
      assertThat(authConfigs.password(),equalTo(""String_Node_Str""));
    }
 else     if (domain2.equals(authConfigs.serverAddress())) {
      assertThat(authConfigs.username(),equalTo(""String_Node_Str""));
      assertThat(authConfigs.password(),equalTo(""String_Node_Str""));
    }
  }
  eraseAuthCredential(domain1);
  eraseAuthCredential(domain2);
}",0.9366281387006776
111621,"private void eraseAuthCredential(String domain1) throws IOException, InterruptedException {
  Process process=Runtime.getRuntime().exec(reader.getCredsStore() + ""String_Node_Str"");
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(process.getOutputStream()));
  writer.write(domain1 + ""String_Node_Str"");
  writer.flush();
  writer.close();
  process.waitFor();
}","private void eraseAuthCredential(String domain1) throws IOException, InterruptedException {
  Process process=Runtime.getRuntime().exec(credStore + ""String_Node_Str"");
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(process.getOutputStream()));
  writer.write(domain1 + ""String_Node_Str"");
  writer.flush();
  writer.close();
  process.waitFor();
}",0.9583892617449664
111622,"/** 
 * Returns the RegistryAuth for the config file for the given registry server name.
 * @throws IllegalArgumentException if the config file does not contain registry auth info for theregistry
 */
public RegistryAuth fromConfig(Path configPath,String serverAddress) throws IOException {
  return parseDockerConfig(configPath,serverAddress);
}","/** 
 * Returns the RegistryAuth for the config file for the given registry server name.
 * @throws IllegalArgumentException if the config file does not contain registry auth info for theregistry
 */
public RegistryAuth fromConfig(final Path configPath,final String serverAddress) throws IOException {
  return parseDockerConfig(configPath,serverAddress);
}",0.9829059829059827
111623,"public ImageRef(final String image){
  final int lastAt=image.lastIndexOf('@');
  final int lastColon=image.lastIndexOf(':');
  if (lastAt >= 0) {
    this.image=image;
    this.tag=null;
  }
 else   if (lastColon < 0) {
    this.image=image;
    this.tag=null;
  }
 else {
    final String tag=image.substring(lastColon + 1);
    if (tag.indexOf('/') < 0) {
      this.image=image.substring(0,lastColon);
      this.tag=tag;
    }
 else {
      this.image=image;
      this.tag=null;
    }
  }
  final String[] parts=image.split(""String_Node_Str"",2);
  if (parts.length > 1 && isRegistry(parts[0])) {
    this.registry=parts[0];
  }
 else {
    this.registry=DEFAULT_REGISTRY;
  }
}","public ImageRef(final String image){
  final int lastAt=image.lastIndexOf('@');
  final int lastColon=image.lastIndexOf(':');
  if (lastAt >= 0) {
    this.image=image;
    this.tag=null;
  }
 else   if (lastColon < 0) {
    this.image=image;
    this.tag=null;
  }
 else {
    final String tag=image.substring(lastColon + 1);
    if (tag.indexOf('/') < 0) {
      this.image=image.substring(0,lastColon);
      this.tag=tag;
    }
 else {
      this.image=image;
      this.tag=null;
    }
  }
  final String[] parts=image.split(""String_Node_Str"",2);
  if (parts.length > 1 && isRegistry(parts[0])) {
    this.registry=parts[0];
    this.registryUrl=parseRegistryUrl(parts[0]);
  }
 else {
    this.registry=DEFAULT_REGISTRY;
    this.registryUrl=DEFAULT_REGISTRY_URL;
  }
}",0.9368998628257889
111624,"@Override public RegistryAuth authFor(final String imageName) throws DockerException {
  if (!configFileExists()) {
    return null;
  }
  final ImageRef ref=new ImageRef(imageName);
  try {
    return reader.fromConfig(path,ref.getRegistryName());
  }
 catch (  IllegalArgumentException e) {
    return null;
  }
catch (  IOException e) {
    throw new DockerException(e);
  }
}","@Override public RegistryAuth authFor(final String imageName) throws DockerException {
  if (!configFileExists()) {
    return null;
  }
  final ImageRef ref=new ImageRef(imageName);
  try {
    final RegistryAuth registryAuth=reader.fromConfig(path,ref.getRegistryUrl());
    if (registryAuth != null) {
      return registryAuth;
    }
    return reader.fromConfig(path,ref.getRegistryName());
  }
 catch (  IllegalArgumentException e) {
    return null;
  }
catch (  IOException e) {
    throw new DockerException(e);
  }
}",0.8375690607734807
111625,"@Override protected String featureValueOf(final ImageRef actual){
  return actual.getRegistryName();
}","@Override protected String featureValueOf(final ImageRef actual){
  return actual.getRegistryUrl();
}",0.9655172413793104
111626,"@Test public void testRegistry(){
  final String defaultRegistry=""String_Node_Str"";
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(defaultRegistry));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(defaultRegistry));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(defaultRegistry));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
}","@Test public void testRegistry(){
  final String defaultRegistry=""String_Node_Str"";
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(defaultRegistry));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(defaultRegistry));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(defaultRegistry));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
  assertThat(new ImageRef(""String_Node_Str""),hasRegistry(""String_Node_Str""));
}",0.7621951219512195
111627,"@Override public RegistryAuth transformEntry(final String key,final RegistryAuth value){
  if (value.serverAddress() == null) {
    return value.toBuilder().serverAddress(key).build();
  }
  return value;
}","@Override public RegistryAuth transformEntry(final String key,final RegistryAuth value){
  if (value == null) {
    return null;
  }
  if (value.serverAddress() == null) {
    return value.toBuilder().serverAddress(key).build();
  }
  return value;
}",0.9035087719298246
111628,"@JsonCreator public static RegistryConfigs create(final Map<String,RegistryAuth> configs){
  if (configs == null) {
    return new AutoValue_RegistryConfigs(ImmutableMap.<String,RegistryAuth>of());
  }
  final Map<String,RegistryAuth> transformedMap=Maps.transformEntries(configs,new Maps.EntryTransformer<String,RegistryAuth,RegistryAuth>(){
    @Override public RegistryAuth transformEntry(    final String key,    final RegistryAuth value){
      if (value.serverAddress() == null) {
        return value.toBuilder().serverAddress(key).build();
      }
      return value;
    }
  }
);
  return new AutoValue_RegistryConfigs(ImmutableMap.copyOf(transformedMap));
}","@JsonCreator public static RegistryConfigs create(final Map<String,RegistryAuth> configs){
  if (configs == null) {
    return new AutoValue_RegistryConfigs(ImmutableMap.<String,RegistryAuth>of());
  }
  final Map<String,RegistryAuth> transformedMap=Maps.transformEntries(configs,new Maps.EntryTransformer<String,RegistryAuth,RegistryAuth>(){
    @Override public RegistryAuth transformEntry(    final String key,    final RegistryAuth value){
      if (value == null) {
        return null;
      }
      if (value.serverAddress() == null) {
        return value.toBuilder().serverAddress(key).build();
      }
      return value;
    }
  }
);
  return new AutoValue_RegistryConfigs(ImmutableMap.copyOf(transformedMap));
}",0.9366906474820144
111629,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  ListVolumesParam that=(ListVolumesParam)o;
  return Objects.equals(name,that.name) && Objects.equals(value,that.value);
}","@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  ListVolumesParam that=(ListVolumesParam)obj;
  return Objects.equals(name,that.name) && Objects.equals(value,that.value);
}",0.7725631768953068
111630,"private String message(final Response response){
  final Readable reader=new InputStreamReader(response.readEntity(InputStream.class),UTF_8);
  try {
    return CharStreams.toString(reader);
  }
 catch (  IOException ignore) {
    return null;
  }
}","private String message(final Response response){
  final Readable reader;
  try {
    reader=new InputStreamReader(response.readEntity(InputStream.class),UTF_8);
  }
 catch (  IllegalStateException e) {
    return null;
  }
  try {
    return CharStreams.toString(reader);
  }
 catch (  IOException ignore) {
    return null;
  }
}",0.8586206896551725
111631,"private DefaultLogStream(final InputStream stream){
  this.reader=new LogReader(stream);
}","@VisibleForTesting DefaultLogStream(final LogReader reader){
  this.reader=reader;
}",0.632183908045977
111632,"public void attach(final OutputStream stdout,final OutputStream stderr,boolean closeAtEOF) throws IOException {
}","public void attach(final OutputStream stdout,final OutputStream stderr,boolean closeAtEOF) throws IOException {
  final Closer closer=Closer.create();
  try {
    if (closeAtEOF) {
      closer.register(stdout);
      closer.register(stderr);
    }
    while (this.hasNext()) {
      final LogMessage message=this.next();
      final ByteBuffer content=message.content();
switch (message.stream()) {
case STDOUT:
        writeAndFlush(content,stdout);
      break;
case STDERR:
    writeAndFlush(content,stderr);
  break;
case STDIN:
default :
break;
}
}
}
 catch (Throwable t) {
throw closer.rethrow(t);
}
 finally {
closer.close();
}
}",0.3013333333333333
111633,"@Override public void load(final String image,final InputStream imagePayload,final ProgressHandler handler) throws DockerException, InterruptedException {
  WebTarget resource=resource().path(""String_Node_Str"").path(""String_Node_Str"");
  resource=resource.queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",image);
  final LoadProgressHandler loadProgressHandler=new LoadProgressHandler(handler);
  final Entity<InputStream> entity=Entity.entity(imagePayload,MediaType.APPLICATION_OCTET_STREAM);
  try (final ProgressStream load=request(POST,ProgressStream.class,resource,resource.request(APPLICATION_JSON_TYPE).header(""String_Node_Str"",authHeader(authConfig)),entity)){
    load.tail(loadProgressHandler,POST,resource.getUri());
    tag(loadProgressHandler.getImageId(),image,true);
  }
 catch (  IOException e) {
    throw new DockerException(e);
  }
 finally {
    IOUtils.closeQuietly(imagePayload);
  }
}","@Override public void load(final String image,final InputStream imagePayload,final AuthConfig authConfig,final ProgressHandler handler) throws DockerException, InterruptedException {
  WebTarget resource=resource().path(""String_Node_Str"").path(""String_Node_Str"");
  resource=resource.queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",image);
  final LoadProgressHandler loadProgressHandler=new LoadProgressHandler(handler);
  final Entity<InputStream> entity=Entity.entity(imagePayload,MediaType.APPLICATION_OCTET_STREAM);
  try (final ProgressStream load=request(POST,ProgressStream.class,resource,resource.request(APPLICATION_JSON_TYPE).header(""String_Node_Str"",authHeader(authConfig)),entity)){
    load.tail(loadProgressHandler,POST,resource.getUri());
    tag(loadProgressHandler.getImageId(),image,true);
  }
 catch (  IOException e) {
    throw new DockerException(e);
  }
 finally {
    IOUtils.closeQuietly(imagePayload);
  }
}",0.9852476290832456
111634,"private void setAllSocketOptions() throws SocketException {
  for (  SocketOptionSetter s : optionsToSet) {
    s.run();
  }
}","private void setAllSocketOptions() throws SocketException {
  for (  final SocketOptionSetter s : optionsToSet) {
    s.run();
  }
}",0.9767441860465116
111635,"private static String createPattern(String line){
  String pattern=line.trim();
  if (pattern.startsWith(""String_Node_Str"")) {
    return null;
  }
  if (OSUtils.isLinux()) {
    return pattern;
  }
  return pattern.replace(""String_Node_Str"",""String_Node_Str"");
}","private static String createPattern(String line){
  final String pattern=line.trim();
  if (pattern.startsWith(""String_Node_Str"")) {
    return null;
  }
  if (OSUtils.isLinux()) {
    return pattern;
  }
  return pattern.replace(""String_Node_Str"",""String_Node_Str"");
}",0.9887218045112782
111636,"/** 
 * Checks if any of the given   {@link DockerIgnorePathMatcher} matches the given {@code path}
 * @param matchers the {@link DockerIgnorePathMatcher} to use
 * @param path     the path to match
 * @return <code>true</code> if the given path should be excluded, <code>false</code> otherwise
 */
private static boolean exclude(ImmutableList<DockerIgnorePathMatcher> matchers,Path path){
  for (  DockerIgnorePathMatcher matcher : matchers) {
    if (matcher.matches(path)) {
      if (matcher.isExclude()) {
        return true;
      }
      return false;
    }
  }
  return false;
}","/** 
 * Checks if any of the given   {@link DockerIgnorePathMatcher} matches the given {@code path}
 * @param matchers the {@link DockerIgnorePathMatcher} to use
 * @param path     the path to match
 * @return <code>true</code> if the given path should be excluded, <code>false</code> otherwise
 */
private static boolean exclude(ImmutableList<DockerIgnorePathMatcher> matchers,Path path){
  for (  final DockerIgnorePathMatcher matcher : matchers) {
    if (matcher.matches(path)) {
      return matcher.isExclude();
    }
  }
  return false;
}",0.9363957597173144
111637,"private void manageNetworkConnection(String containerId,String methodname,String networkId) throws DockerException, InterruptedException {
  final WebTarget resource=resource().path(""String_Node_Str"").path(networkId).path(methodname);
  Map<String,String> request=new HashMap<>();
  request.put(""String_Node_Str"",containerId);
  Response response=request(POST,Response.class,resource,resource.request(APPLICATION_JSON_TYPE),Entity.json(request));
switch (response.getStatus()) {
case 200:
    return;
case 404:
  throw new ContainerNotFoundException(containerId);
case 500:
throw new DockerException(response.readEntity(String.class));
}
}","private void manageNetworkConnection(String containerId,String methodname,String networkId) throws DockerException, InterruptedException {
  final WebTarget resource=resource().path(""String_Node_Str"").path(networkId).path(methodname);
  final Map<String,String> request=new HashMap<>();
  request.put(""String_Node_Str"",containerId);
  final Response response=request(POST,Response.class,resource,resource.request(APPLICATION_JSON_TYPE),Entity.json(request));
switch (response.getStatus()) {
case 200:
    return;
case 404:
  throw new ContainerNotFoundException(containerId);
case 500:
throw new DockerException(response.readEntity(String.class));
}
}",0.9906976744186048
111638,"@Override public LogStream logs(final String containerId,final LogsParam... params) throws DockerException, InterruptedException {
  WebTarget resource=noTimeoutResource().path(""String_Node_Str"").path(containerId).path(""String_Node_Str"");
  for (  LogsParam param : params) {
    resource=resource.queryParam(param.name(),param.value());
  }
  return getLogStream(GET,resource,containerId);
}","@Override public LogStream logs(final String containerId,final LogsParam... params) throws DockerException, InterruptedException {
  WebTarget resource=noTimeoutResource().path(""String_Node_Str"").path(containerId).path(""String_Node_Str"");
  for (  final LogsParam param : params) {
    resource=resource.queryParam(param.name(),param.value());
  }
  return getLogStream(GET,resource,containerId);
}",0.9924050632911392
111639,"@Override public EventStream events(EventsParam... params) throws DockerException, InterruptedException {
  WebTarget resource=noTimeoutResource().path(""String_Node_Str"");
  final Map<String,String> filters=newHashMap();
  for (  EventsParam param : params) {
    if (param instanceof EventsFilterParam) {
      filters.put(param.name(),param.value());
    }
 else {
      resource=resource.queryParam(param.name(),param.value());
    }
  }
  try {
    if (!filters.isEmpty()) {
      final StringWriter writer=new StringWriter();
      final JsonGenerator generator=objectMapper().getFactory().createGenerator(writer);
      generator.writeStartObject();
      for (      Map.Entry<String,String> entry : filters.entrySet()) {
        generator.writeArrayFieldStart(entry.getKey());
        generator.writeString(entry.getValue());
        generator.writeEndArray();
      }
      generator.writeEndObject();
      generator.close();
      final String encoded=URLEncoder.encode(writer.toString(),UTF_8.name());
      resource=resource.queryParam(""String_Node_Str"",encoded);
    }
  }
 catch (  IOException exception) {
    throw new DockerException(exception);
  }
  try {
    CloseableHttpClient client=(CloseableHttpClient)ApacheConnectorProvider.getHttpClient(noTimeoutClient);
    CloseableHttpResponse response=client.execute(new HttpGet(resource.getUri()));
    return new EventStream(response,objectMapper());
  }
 catch (  IOException exception) {
    throw new DockerException(exception);
  }
}","@Override public EventStream events(EventsParam... params) throws DockerException, InterruptedException {
  WebTarget resource=noTimeoutResource().path(""String_Node_Str"");
  final Map<String,String> filters=newHashMap();
  for (  final EventsParam param : params) {
    if (param instanceof EventsFilterParam) {
      filters.put(param.name(),param.value());
    }
 else {
      resource=resource.queryParam(param.name(),param.value());
    }
  }
  try {
    if (!filters.isEmpty()) {
      final StringWriter writer=new StringWriter();
      final JsonGenerator generator=objectMapper().getFactory().createGenerator(writer);
      generator.writeStartObject();
      for (      final Map.Entry<String,String> entry : filters.entrySet()) {
        generator.writeArrayFieldStart(entry.getKey());
        generator.writeString(entry.getValue());
        generator.writeEndArray();
      }
      generator.writeEndObject();
      generator.close();
      final String encoded=URLEncoder.encode(writer.toString(),UTF_8.name());
      resource=resource.queryParam(""String_Node_Str"",encoded);
    }
  }
 catch (  IOException exception) {
    throw new DockerException(exception);
  }
  try {
    final CloseableHttpClient client=(CloseableHttpClient)ApacheConnectorProvider.getHttpClient(noTimeoutClient);
    final CloseableHttpResponse response=client.execute(new HttpGet(resource.getUri()));
    return new EventStream(response,objectMapper());
  }
 catch (  IOException exception) {
    throw new DockerException(exception);
  }
}",0.992089650626236
111640,"private String authRegistryHeader(final AuthRegistryConfig authRegistryConfig) throws DockerException {
  if (authRegistryConfig == null) {
    return ""String_Node_Str"";
  }
  try {
    String authRegistryJson=ObjectMapperProvider.objectMapper().writeValueAsString(authRegistryConfig);
    final String apiVersion=version().apiVersion();
    final int versionComparison=compareVersion(apiVersion,""String_Node_Str"");
    if (versionComparison < 0) {
      authRegistryJson=""String_Node_Str"" + authRegistryJson + ""String_Node_Str"";
    }
 else     if (versionComparison == 0) {
      authRegistryJson=""String_Node_Str"" + authRegistryJson + ""String_Node_Str"";
    }
    log.debug(""String_Node_Str"",authRegistryJson);
    String authRegistryEncoded=Base64.encodeAsString(authRegistryJson);
    log.debug(""String_Node_Str"",authRegistryEncoded);
    return authRegistryEncoded;
  }
 catch (  JsonProcessingException|InterruptedException ex) {
    throw new DockerException(""String_Node_Str"",ex);
  }
}","private String authRegistryHeader(final AuthRegistryConfig authRegistryConfig) throws DockerException {
  if (authRegistryConfig == null) {
    return ""String_Node_Str"";
  }
  try {
    String authRegistryJson=ObjectMapperProvider.objectMapper().writeValueAsString(authRegistryConfig);
    final String apiVersion=version().apiVersion();
    final int versionComparison=compareVersion(apiVersion,""String_Node_Str"");
    if (versionComparison < 0) {
      authRegistryJson=""String_Node_Str"" + authRegistryJson + ""String_Node_Str"";
    }
 else     if (versionComparison == 0) {
      authRegistryJson=""String_Node_Str"" + authRegistryJson + ""String_Node_Str"";
    }
    log.debug(""String_Node_Str"",authRegistryJson);
    final String authRegistryEncoded=Base64.encodeAsString(authRegistryJson);
    log.debug(""String_Node_Str"",authRegistryEncoded);
    return authRegistryEncoded;
  }
 catch (  JsonProcessingException|InterruptedException ex) {
    throw new DockerException(""String_Node_Str"",ex);
  }
}",0.996993987975952
111641,"@Override public void copyToContainer(final Path directory,String containerId,String path) throws DockerException, InterruptedException, IOException {
  final WebTarget resource=resource().path(""String_Node_Str"").path(containerId).path(""String_Node_Str"").queryParam(""String_Node_Str"",true).queryParam(""String_Node_Str"",path);
  CompressedDirectory compressedDirectory=CompressedDirectory.create(directory);
  final InputStream fileStream=Files.newInputStream(compressedDirectory.file());
  request(PUT,String.class,resource,resource.request(APPLICATION_OCTET_STREAM_TYPE),Entity.entity(fileStream,""String_Node_Str""));
}","@Override public void copyToContainer(final Path directory,String containerId,String path) throws DockerException, InterruptedException, IOException {
  final WebTarget resource=resource().path(""String_Node_Str"").path(containerId).path(""String_Node_Str"").queryParam(""String_Node_Str"",true).queryParam(""String_Node_Str"",path);
  final CompressedDirectory compressedDirectory=CompressedDirectory.create(directory);
  final InputStream fileStream=Files.newInputStream(compressedDirectory.file());
  request(PUT,String.class,resource,resource.request(APPLICATION_OCTET_STREAM_TYPE),Entity.entity(fileStream,""String_Node_Str""));
}",0.995176848874598
111642,"@Override public InputStream save(final String image,final AuthConfig authConfig) throws DockerException, IOException, InterruptedException {
  WebTarget resource=resource().path(""String_Node_Str"").path(image).path(""String_Node_Str"");
  return request(GET,InputStream.class,resource,resource.request(APPLICATION_JSON_TYPE).header(""String_Node_Str"",authHeader(authConfig)));
}","@Override public InputStream save(final String image,final AuthConfig authConfig) throws DockerException, IOException, InterruptedException {
  final WebTarget resource=resource().path(""String_Node_Str"").path(image).path(""String_Node_Str"");
  return request(GET,InputStream.class,resource,resource.request(APPLICATION_JSON_TYPE).header(""String_Node_Str"",authHeader(authConfig)));
}",0.992063492063492
111643,"@Override public LogStream execStart(final String execId,final ExecStartParameter... params) throws DockerException, InterruptedException {
  WebTarget resource=resource().path(""String_Node_Str"").path(execId).path(""String_Node_Str"");
  final StringWriter writer=new StringWriter();
  try {
    final JsonGenerator generator=objectMapper().getFactory().createGenerator(writer);
    generator.writeStartObject();
    for (    ExecStartParameter param : params) {
      generator.writeBooleanField(param.getName(),true);
    }
    generator.writeEndObject();
    generator.close();
  }
 catch (  IOException e) {
    throw new DockerException(e);
  }
  try {
    return request(POST,LogStream.class,resource,resource.request(""String_Node_Str""),Entity.json(writer.toString()));
  }
 catch (  DockerRequestException e) {
switch (e.status()) {
case 404:
      throw new ExecNotFoundException(execId);
default :
    throw e;
}
}
}","@Override public LogStream execStart(final String execId,final ExecStartParameter... params) throws DockerException, InterruptedException {
  final WebTarget resource=resource().path(""String_Node_Str"").path(execId).path(""String_Node_Str"");
  final StringWriter writer=new StringWriter();
  try {
    final JsonGenerator generator=objectMapper().getFactory().createGenerator(writer);
    generator.writeStartObject();
    for (    final ExecStartParameter param : params) {
      generator.writeBooleanField(param.getName(),true);
    }
    generator.writeEndObject();
    generator.close();
  }
 catch (  IOException e) {
    throw new DockerException(e);
  }
  try {
    return request(POST,LogStream.class,resource,resource.request(""String_Node_Str""),Entity.json(writer.toString()));
  }
 catch (  DockerRequestException e) {
switch (e.status()) {
case 404:
      throw new ExecNotFoundException(execId);
default :
    throw e;
}
}
}",0.9935414424111948
111644,"@Override public void load(final String image,final InputStream imagePayload,final ProgressHandler handler) throws DockerException, InterruptedException {
  WebTarget resource=resource().path(""String_Node_Str"").path(""String_Node_Str"");
  resource=resource.queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",image);
  LoadProgressHandler loadProgressHandler=new LoadProgressHandler(handler);
  Entity<InputStream> entity=Entity.entity(imagePayload,MediaType.APPLICATION_OCTET_STREAM);
  try (ProgressStream load=request(POST,ProgressStream.class,resource,resource.request(APPLICATION_JSON_TYPE).header(""String_Node_Str"",authHeader(authConfig)),entity)){
    load.tail(loadProgressHandler,POST,resource.getUri());
    tag(loadProgressHandler.getImageId(),image,true);
  }
 catch (  IOException e) {
    throw new DockerException(e);
  }
 finally {
    IOUtils.closeQuietly(imagePayload);
  }
}","@Override public void load(final String image,final InputStream imagePayload,final ProgressHandler handler) throws DockerException, InterruptedException {
  WebTarget resource=resource().path(""String_Node_Str"").path(""String_Node_Str"");
  resource=resource.queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",image);
  final LoadProgressHandler loadProgressHandler=new LoadProgressHandler(handler);
  final Entity<InputStream> entity=Entity.entity(imagePayload,MediaType.APPLICATION_OCTET_STREAM);
  try (final ProgressStream load=request(POST,ProgressStream.class,resource,resource.request(APPLICATION_JSON_TYPE).header(""String_Node_Str"",authHeader(authConfig)),entity)){
    load.tail(loadProgressHandler,POST,resource.getUri());
    tag(loadProgressHandler.getImageId(),image,true);
  }
 catch (  IOException e) {
    throw new DockerException(e);
  }
 finally {
    IOUtils.closeQuietly(imagePayload);
  }
}",0.990280777537797
111645,"@Override public String execCreate(final String containerId,final String[] cmd,final ExecCreateParam... params) throws DockerException, InterruptedException {
  WebTarget resource=resource().path(""String_Node_Str"").path(containerId).path(""String_Node_Str"");
  final StringWriter writer=new StringWriter();
  try {
    final JsonGenerator generator=objectMapper().getFactory().createGenerator(writer);
    generator.writeStartObject();
    for (    final ExecCreateParam param : params) {
      if (param.value().equals(""String_Node_Str"") || param.value().equals(""String_Node_Str"")) {
        generator.writeBooleanField(param.name(),Boolean.valueOf(param.value()));
      }
 else {
        generator.writeStringField(param.name(),param.value());
      }
    }
    generator.writeArrayFieldStart(""String_Node_Str"");
    for (    final String s : cmd) {
      generator.writeString(s);
    }
    generator.writeEndArray();
    generator.writeEndObject();
    generator.close();
  }
 catch (  IOException e) {
    throw new DockerException(e);
  }
  final String response;
  try {
    response=request(POST,String.class,resource,resource.request(APPLICATION_JSON_TYPE),Entity.json(writer.toString()));
  }
 catch (  DockerRequestException e) {
switch (e.status()) {
case 404:
      throw new ContainerNotFoundException(containerId);
default :
    throw e;
}
}
try {
JsonNode json=objectMapper().readTree(response);
return json.findValue(""String_Node_Str"").textValue();
}
 catch (IOException e) {
throw new DockerException(e);
}
}","@Override public String execCreate(final String containerId,final String[] cmd,final ExecCreateParam... params) throws DockerException, InterruptedException {
  final WebTarget resource=resource().path(""String_Node_Str"").path(containerId).path(""String_Node_Str"");
  final StringWriter writer=new StringWriter();
  try {
    final JsonGenerator generator=objectMapper().getFactory().createGenerator(writer);
    generator.writeStartObject();
    for (    final ExecCreateParam param : params) {
      if (param.value().equals(""String_Node_Str"") || param.value().equals(""String_Node_Str"")) {
        generator.writeBooleanField(param.name(),Boolean.valueOf(param.value()));
      }
 else {
        generator.writeStringField(param.name(),param.value());
      }
    }
    generator.writeArrayFieldStart(""String_Node_Str"");
    for (    final String s : cmd) {
      generator.writeString(s);
    }
    generator.writeEndArray();
    generator.writeEndObject();
    generator.close();
  }
 catch (  IOException e) {
    throw new DockerException(e);
  }
  final String response;
  try {
    response=request(POST,String.class,resource,resource.request(APPLICATION_JSON_TYPE),Entity.json(writer.toString()));
  }
 catch (  DockerRequestException e) {
switch (e.status()) {
case 404:
      throw new ContainerNotFoundException(containerId);
default :
    throw e;
}
}
try {
final JsonNode json=objectMapper().readTree(response);
return json.findValue(""String_Node_Str"").textValue();
}
 catch (IOException e) {
throw new DockerException(e);
}
}",0.9960835509138382
111646,"@Override public ExecState execInspect(final String execId) throws DockerException, InterruptedException {
  WebTarget resource=resource().path(""String_Node_Str"").path(execId).path(""String_Node_Str"");
  try {
    return request(GET,ExecState.class,resource,resource.request(APPLICATION_JSON_TYPE));
  }
 catch (  DockerRequestException e) {
switch (e.status()) {
case 404:
      throw new ExecNotFoundException(execId);
default :
    throw e;
}
}
}","@Override public ExecState execInspect(final String execId) throws DockerException, InterruptedException {
  final WebTarget resource=resource().path(""String_Node_Str"").path(execId).path(""String_Node_Str"");
  try {
    return request(GET,ExecState.class,resource,resource.request(APPLICATION_JSON_TYPE));
  }
 catch (  DockerRequestException e) {
switch (e.status()) {
case 404:
      throw new ExecNotFoundException(execId);
default :
    throw e;
}
}
}",0.9933481152993348
111647,"@VisibleForTesting DefaultDockerClient(final Builder builder,Supplier<ClientBuilder> clientBuilderSupplier){
  URI originalUri=checkNotNull(builder.uri,""String_Node_Str"");
  this.apiVersion=builder.apiVersion();
  if ((builder.dockerCertificates != null) && !originalUri.getScheme().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (originalUri.getScheme().equals(UNIX_SCHEME)) {
    this.uri=UnixConnectionSocketFactory.sanitizeUri(originalUri);
  }
 else {
    this.uri=originalUri;
  }
  final PoolingHttpClientConnectionManager cm=getConnectionManager(builder);
  final PoolingHttpClientConnectionManager noTimeoutCm=getConnectionManager(builder);
  final RequestConfig requestConfig=RequestConfig.custom().setConnectionRequestTimeout((int)builder.connectTimeoutMillis).setConnectTimeout((int)builder.connectTimeoutMillis).setSocketTimeout((int)builder.readTimeoutMillis).build();
  final ClientConfig config=DEFAULT_CONFIG.connectorProvider(new ApacheConnectorProvider()).property(ApacheClientProperties.CONNECTION_MANAGER,cm).property(ApacheClientProperties.REQUEST_CONFIG,requestConfig);
  this.authConfig=builder.authConfig;
  this.client=clientBuilderSupplier.get().withConfig(config).build();
  final RequestConfig noReadTimeoutRequestConfig=RequestConfig.copy(requestConfig).setSocketTimeout((int)NO_TIMEOUT).build();
  this.noTimeoutClient=clientBuilderSupplier.get().withConfig(config).property(ApacheClientProperties.CONNECTION_MANAGER,noTimeoutCm).property(ApacheClientProperties.REQUEST_CONFIG,noReadTimeoutRequestConfig).build();
  this.headers=new HashMap<>(builder.headers());
}","@VisibleForTesting DefaultDockerClient(final Builder builder,Supplier<ClientBuilder> clientBuilderSupplier){
  final URI originalUri=checkNotNull(builder.uri,""String_Node_Str"");
  this.apiVersion=builder.apiVersion();
  if ((builder.dockerCertificates != null) && !originalUri.getScheme().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (originalUri.getScheme().equals(UNIX_SCHEME)) {
    this.uri=UnixConnectionSocketFactory.sanitizeUri(originalUri);
  }
 else {
    this.uri=originalUri;
  }
  final PoolingHttpClientConnectionManager cm=getConnectionManager(builder);
  final PoolingHttpClientConnectionManager noTimeoutCm=getConnectionManager(builder);
  final RequestConfig requestConfig=RequestConfig.custom().setConnectionRequestTimeout((int)builder.connectTimeoutMillis).setConnectTimeout((int)builder.connectTimeoutMillis).setSocketTimeout((int)builder.readTimeoutMillis).build();
  final ClientConfig config=DEFAULT_CONFIG.connectorProvider(new ApacheConnectorProvider()).property(ApacheClientProperties.CONNECTION_MANAGER,cm).property(ApacheClientProperties.REQUEST_CONFIG,requestConfig);
  this.authConfig=builder.authConfig;
  this.client=clientBuilderSupplier.get().withConfig(config).build();
  final RequestConfig noReadTimeoutRequestConfig=RequestConfig.copy(requestConfig).setSocketTimeout((int)NO_TIMEOUT).build();
  this.noTimeoutClient=clientBuilderSupplier.get().withConfig(config).property(ApacheClientProperties.CONNECTION_MANAGER,noTimeoutCm).property(ApacheClientProperties.REQUEST_CONFIG,noReadTimeoutRequestConfig).build();
  this.headers=new HashMap<>(builder.headers());
}",0.9981796116504854
111648,"@Override public InputStream copyContainer(String containerId,String path) throws DockerException, InterruptedException {
  final WebTarget resource=resource().path(""String_Node_Str"").path(containerId).path(""String_Node_Str"");
  JsonNodeFactory nf=JsonNodeFactory.instance;
  final JsonNode params=nf.objectNode().set(""String_Node_Str"",nf.textNode(path));
  return request(POST,InputStream.class,resource,resource.request(APPLICATION_OCTET_STREAM_TYPE),Entity.json(params));
}","@Override public InputStream copyContainer(String containerId,String path) throws DockerException, InterruptedException {
  final WebTarget resource=resource().path(""String_Node_Str"").path(containerId).path(""String_Node_Str"");
  final JsonNodeFactory nf=JsonNodeFactory.instance;
  final JsonNode params=nf.objectNode().set(""String_Node_Str"",nf.textNode(path));
  return request(POST,InputStream.class,resource,resource.request(APPLICATION_OCTET_STREAM_TYPE),Entity.json(params));
}",0.9937369519832986
111649,"@Override public List<Container> listContainers(final ListContainersParam... params) throws DockerException, InterruptedException {
  WebTarget resource=resource().path(""String_Node_Str"").path(""String_Node_Str"");
  final Map<String,List<String>> filters=newHashMap();
  for (  ListContainersParam param : params) {
    if (param instanceof ListContainersFilterParam) {
      List<String> filterValueList;
      if (filters.containsKey(param.name())) {
        filterValueList=filters.get(param.name());
      }
 else {
        filterValueList=Lists.newArrayList();
      }
      filterValueList.add(param.value());
      filters.put(param.name(),filterValueList);
    }
 else {
      resource=resource.queryParam(urlEncode(param.name()),urlEncode(param.value()));
    }
  }
  if (!filters.isEmpty()) {
    resource=resource.queryParam(""String_Node_Str"",urlEncodeFilters(filters));
  }
  return request(GET,CONTAINER_LIST,resource,resource.request(APPLICATION_JSON_TYPE));
}","@Override public List<Container> listContainers(final ListContainersParam... params) throws DockerException, InterruptedException {
  WebTarget resource=resource().path(""String_Node_Str"").path(""String_Node_Str"");
  final Map<String,List<String>> filters=newHashMap();
  for (  final ListContainersParam param : params) {
    if (param instanceof ListContainersFilterParam) {
      List<String> filterValueList;
      if (filters.containsKey(param.name())) {
        filterValueList=filters.get(param.name());
      }
 else {
        filterValueList=Lists.newArrayList();
      }
      filterValueList.add(param.value());
      filters.put(param.name(),filterValueList);
    }
 else {
      resource=resource.queryParam(urlEncode(param.name()),urlEncode(param.value()));
    }
  }
  if (!filters.isEmpty()) {
    resource=resource.queryParam(""String_Node_Str"",urlEncodeFilters(filters));
  }
  return request(GET,CONTAINER_LIST,resource,resource.request(APPLICATION_JSON_TYPE));
}",0.9969262295081968
111650,"@Override public List<Image> listImages(final ListImagesParam... params) throws DockerException, InterruptedException {
  WebTarget resource=resource().path(""String_Node_Str"").path(""String_Node_Str"");
  final Map<String,List<String>> filters=newHashMap();
  for (  ListImagesParam param : params) {
    if (param instanceof ListImagesFilterParam) {
      List<String> filterValueList;
      if (filters.containsKey(param.name())) {
        filterValueList=filters.get(param.name());
      }
 else {
        filterValueList=Lists.newArrayList();
      }
      filterValueList.add(param.value());
      filters.put(param.name(),filterValueList);
    }
 else {
      resource=resource.queryParam(urlEncode(param.name()),urlEncode(param.value()));
    }
  }
  if (!filters.isEmpty()) {
    resource=resource.queryParam(""String_Node_Str"",urlEncodeFilters(filters));
  }
  return request(GET,IMAGE_LIST,resource,resource.request(APPLICATION_JSON_TYPE));
}","@Override public List<Image> listImages(final ListImagesParam... params) throws DockerException, InterruptedException {
  WebTarget resource=resource().path(""String_Node_Str"").path(""String_Node_Str"");
  final Map<String,List<String>> filters=newHashMap();
  for (  final ListImagesParam param : params) {
    if (param instanceof ListImagesFilterParam) {
      final List<String> filterValueList;
      if (filters.containsKey(param.name())) {
        filterValueList=filters.get(param.name());
      }
 else {
        filterValueList=Lists.newArrayList();
      }
      filterValueList.add(param.value());
      filters.put(param.name(),filterValueList);
    }
 else {
      resource=resource.queryParam(urlEncode(param.name()),urlEncode(param.value()));
    }
  }
  if (!filters.isEmpty()) {
    resource=resource.queryParam(""String_Node_Str"",urlEncodeFilters(filters));
  }
  return request(GET,IMAGE_LIST,resource,resource.request(APPLICATION_JSON_TYPE));
}",0.993717277486911
111651,"public String readFully(){
  StringBuilder stringBuilder=new StringBuilder();
  while (hasNext()) {
    stringBuilder.append(UTF_8.decode(next().content()));
  }
  return stringBuilder.toString();
}","public String readFully(){
  final StringBuilder stringBuilder=new StringBuilder();
  while (hasNext()) {
    stringBuilder.append(UTF_8.decode(next().content()));
  }
  return stringBuilder.toString();
}",0.9850746268656716
111652,"/** 
 * Compares two version strings. <p> https://stackoverflow.com/questions/6701948/efficient-way-to-compare-version-strings-in-java </p> Use this instead of String.compareTo() for a non-lexicographical comparison that works for version strings. e.g. ""1.10"".compareTo(""1.6"").
 * @param str1 a string of ordinal numbers separated by decimal points.
 * @param str2 a string of ordinal numbers separated by decimal points.
 * @return The result is a negative integer if str1 is _numerically_ less than str2. The result isa positive integer if str1 is _numerically_ greater than str2. The result is zero if the strings are _numerically_ equal. N.B. It does not work if ""1.10"" is supposed to be equal to ""1.10.0"".
 */
public static int compareVersion(String str1,String str2){
  String[] vals1=str1.split(""String_Node_Str"");
  String[] vals2=str2.split(""String_Node_Str"");
  int i=0;
  while (i < vals1.length && i < vals2.length && vals1[i].equals(vals2[i])) {
    i++;
  }
  if (i < vals1.length && i < vals2.length) {
    int diff=Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));
    return Integer.signum(diff);
  }
 else {
    return Integer.signum(vals1.length - vals2.length);
  }
}","/** 
 * Compares two version strings. <p> https://stackoverflow.com/questions/6701948/efficient-way-to-compare-version-strings-in-java </p> Use this instead of String.compareTo() for a non-lexicographical comparison that works for version strings. e.g. ""1.10"".compareTo(""1.6"").
 * @param str1 a string of ordinal numbers separated by decimal points.
 * @param str2 a string of ordinal numbers separated by decimal points.
 * @return The result is a negative integer if str1 is _numerically_ less than str2. The result isa positive integer if str1 is _numerically_ greater than str2. The result is zero if the strings are _numerically_ equal. N.B. It does not work if ""1.10"" is supposed to be equal to ""1.10.0"".
 */
public static int compareVersion(String str1,String str2){
  final String[] vals1=str1.split(""String_Node_Str"");
  final String[] vals2=str2.split(""String_Node_Str"");
  int i=0;
  while (i < vals1.length && i < vals2.length && vals1[i].equals(vals2[i])) {
    i++;
  }
  if (i < vals1.length && i < vals2.length) {
    final int diff=Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));
    return Integer.signum(diff);
  }
 else {
    return Integer.signum(vals1.length - vals2.length);
  }
}",0.9925619834710744
111653,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  AttachedNetwork that=(AttachedNetwork)o;
  return Objects.equals(this.endpointId,that.endpointId) && Objects.equals(this.gateway,that.gateway) && Objects.equals(this.ipAddress,that.ipAddress)&& Objects.equals(this.ipPrefixLen,that.ipPrefixLen)&& Objects.equals(this.ipv6Gateway,that.ipv6Gateway)&& Objects.equals(this.globalIPv6Address,that.globalIPv6Address)&& Objects.equals(this.globalIPv6PrefixLen,that.globalIPv6PrefixLen)&& Objects.equals(this.macAddress,that.macAddress);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  final AttachedNetwork that=(AttachedNetwork)o;
  return Objects.equals(this.endpointId,that.endpointId) && Objects.equals(this.gateway,that.gateway) && Objects.equals(this.ipAddress,that.ipAddress)&& Objects.equals(this.ipPrefixLen,that.ipPrefixLen)&& Objects.equals(this.ipv6Gateway,that.ipv6Gateway)&& Objects.equals(this.globalIPv6Address,that.globalIPv6Address)&& Objects.equals(this.globalIPv6PrefixLen,that.globalIPv6PrefixLen)&& Objects.equals(this.macAddress,that.macAddress);
}",0.9953051643192488
111654,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  Node node=(Node)o;
  return Objects.equals(id,node.id) && Objects.equals(ip,node.ip) && Objects.equals(addr,node.addr)&& Objects.equals(name,node.name);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  final Node node=(Node)o;
  return Objects.equals(id,node.id) && Objects.equals(ip,node.ip) && Objects.equals(addr,node.addr)&& Objects.equals(name,node.name);
}",0.9904153354632588
111655,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  ContainerStats other=(ContainerStats)obj;
  if (cpuStats == null) {
    if (other.cpuStats != null) {
      return false;
    }
  }
 else   if (!cpuStats.equals(other.cpuStats)) {
    return false;
  }
  if (memoryStats == null) {
    if (other.memoryStats != null) {
      return false;
    }
  }
 else   if (!memoryStats.equals(other.memoryStats)) {
    return false;
  }
  if (network == null) {
    if (other.network != null) {
      return false;
    }
  }
 else   if (!network.equals(other.network)) {
    return false;
  }
  if (precpuStats == null) {
    if (other.precpuStats != null) {
      return false;
    }
  }
 else   if (!precpuStats.equals(other.precpuStats)) {
    return false;
  }
  if (read == null) {
    if (other.read != null) {
      return false;
    }
  }
 else   if (!read.equals(other.read)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final ContainerStats other=(ContainerStats)obj;
  if (cpuStats == null) {
    if (other.cpuStats != null) {
      return false;
    }
  }
 else   if (!cpuStats.equals(other.cpuStats)) {
    return false;
  }
  if (memoryStats == null) {
    if (other.memoryStats != null) {
      return false;
    }
  }
 else   if (!memoryStats.equals(other.memoryStats)) {
    return false;
  }
  if (network == null) {
    if (other.network != null) {
      return false;
    }
  }
 else   if (!network.equals(other.network)) {
    return false;
  }
  if (precpuStats == null) {
    if (other.precpuStats != null) {
      return false;
    }
  }
 else   if (!precpuStats.equals(other.precpuStats)) {
    return false;
  }
  if (read == null) {
    if (other.read != null) {
      return false;
    }
  }
 else   if (!read.equals(other.read)) {
    return false;
  }
  return true;
}",0.9971617786187322
111656,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  CpuStats other=(CpuStats)obj;
  if (cpuUsage == null) {
    if (other.cpuUsage != null) {
      return false;
    }
  }
 else   if (!cpuUsage.equals(other.cpuUsage)) {
    return false;
  }
  if (systemCpuUsage == null) {
    if (other.systemCpuUsage != null) {
      return false;
    }
  }
 else   if (!systemCpuUsage.equals(other.systemCpuUsage)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final CpuStats other=(CpuStats)obj;
  if (cpuUsage == null) {
    if (other.cpuUsage != null) {
      return false;
    }
  }
 else   if (!cpuUsage.equals(other.cpuUsage)) {
    return false;
  }
  if (systemCpuUsage == null) {
    if (other.systemCpuUsage != null) {
      return false;
    }
  }
 else   if (!systemCpuUsage.equals(other.systemCpuUsage)) {
    return false;
  }
  return true;
}",0.9948717948717948
111657,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  CpuUsage other=(CpuUsage)obj;
  if (percpuUsage == null) {
    if (other.percpuUsage != null) {
      return false;
    }
  }
 else   if (!percpuUsage.equals(other.percpuUsage)) {
    return false;
  }
  if (totalUsage == null) {
    if (other.totalUsage != null) {
      return false;
    }
  }
 else   if (!totalUsage.equals(other.totalUsage)) {
    return false;
  }
  if (usageInKernelmode == null) {
    if (other.usageInKernelmode != null) {
      return false;
    }
  }
 else   if (!usageInKernelmode.equals(other.usageInKernelmode)) {
    return false;
  }
  if (usageInUsermode == null) {
    if (other.usageInUsermode != null) {
      return false;
    }
  }
 else   if (!usageInUsermode.equals(other.usageInUsermode)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final CpuUsage other=(CpuUsage)obj;
  if (percpuUsage == null) {
    if (other.percpuUsage != null) {
      return false;
    }
  }
 else   if (!percpuUsage.equals(other.percpuUsage)) {
    return false;
  }
  if (totalUsage == null) {
    if (other.totalUsage != null) {
      return false;
    }
  }
 else   if (!totalUsage.equals(other.totalUsage)) {
    return false;
  }
  if (usageInKernelmode == null) {
    if (other.usageInKernelmode != null) {
      return false;
    }
  }
 else   if (!usageInKernelmode.equals(other.usageInKernelmode)) {
    return false;
  }
  if (usageInUsermode == null) {
    if (other.usageInUsermode != null) {
      return false;
    }
  }
 else   if (!usageInUsermode.equals(other.usageInUsermode)) {
    return false;
  }
  return true;
}",0.9968911917098444
111658,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  RestartPolicy that=(RestartPolicy)o;
  if (name != null ? !name.equals(that.name) : that.name != null) {
    return false;
  }
  return maxRetryCount != null ? maxRetryCount.equals(that.maxRetryCount) : that.maxRetryCount == null;
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  final RestartPolicy that=(RestartPolicy)o;
  if (name != null ? !name.equals(that.name) : that.name != null) {
    return false;
  }
  return maxRetryCount != null ? maxRetryCount.equals(that.maxRetryCount) : that.maxRetryCount == null;
}",0.9923273657289002
111659,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  Image that=(Image)o;
  return Objects.equals(this.created,that.created) && Objects.equals(this.id,that.id) && Objects.equals(this.parentId,that.parentId)&& Objects.equals(this.repoTags,that.repoTags)&& Objects.equals(this.size,that.size)&& Objects.equals(this.virtualSize,that.virtualSize)&& Objects.equals(this.labels,that.labels);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  final Image that=(Image)o;
  return Objects.equals(this.created,that.created) && Objects.equals(this.id,that.id) && Objects.equals(this.parentId,that.parentId)&& Objects.equals(this.repoTags,that.repoTags)&& Objects.equals(this.size,that.size)&& Objects.equals(this.virtualSize,that.virtualSize)&& Objects.equals(this.labels,that.labels);
}",0.9939148073022313
111660,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  Info info=(Info)o;
  if (containers != info.containers) {
    return false;
  }
  if (debug != null ? !debug.equals(info.debug) : info.debug != null) {
    return false;
  }
  if (eventsListener != info.eventsListener) {
    return false;
  }
  if (fileDescriptors != info.fileDescriptors) {
    return false;
  }
  if (goroutines != info.goroutines) {
    return false;
  }
  if (images != info.images) {
    return false;
  }
  if (executionDriver != null ? !executionDriver.equals(info.executionDriver) : info.executionDriver != null) {
    return false;
  }
  if (initPath != null ? !initPath.equals(info.initPath) : info.initPath != null) {
    return false;
  }
  if (kernelVersion != null ? !kernelVersion.equals(info.kernelVersion) : info.kernelVersion != null) {
    return false;
  }
  if (storageDriver != null ? !storageDriver.equals(info.storageDriver) : info.storageDriver != null) {
    return false;
  }
  if (memoryLimit != null ? !memoryLimit.equals(info.memoryLimit) : info.memoryLimit != null) {
    return false;
  }
  if (swapLimit != null ? !swapLimit.equals(info.swapLimit) : info.swapLimit != null) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  final Info info=(Info)o;
  if (containers != info.containers) {
    return false;
  }
  if (debug != null ? !debug.equals(info.debug) : info.debug != null) {
    return false;
  }
  if (eventsListener != info.eventsListener) {
    return false;
  }
  if (fileDescriptors != info.fileDescriptors) {
    return false;
  }
  if (goroutines != info.goroutines) {
    return false;
  }
  if (images != info.images) {
    return false;
  }
  if (executionDriver != null ? !executionDriver.equals(info.executionDriver) : info.executionDriver != null) {
    return false;
  }
  if (initPath != null ? !initPath.equals(info.initPath) : info.initPath != null) {
    return false;
  }
  if (kernelVersion != null ? !kernelVersion.equals(info.kernelVersion) : info.kernelVersion != null) {
    return false;
  }
  if (storageDriver != null ? !storageDriver.equals(info.storageDriver) : info.storageDriver != null) {
    return false;
  }
  if (memoryLimit != null ? !memoryLimit.equals(info.memoryLimit) : info.memoryLimit != null) {
    return false;
  }
  if (swapLimit != null ? !swapLimit.equals(info.swapLimit) : info.swapLimit != null) {
    return false;
  }
  return true;
}",0.9977324263038548
111661,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  Ipam that=(Ipam)o;
  return Objects.equals(this.driver,that.driver) && Objects.equals(this.config,that.config);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  final Ipam that=(Ipam)o;
  return Objects.equals(this.driver,that.driver) && Objects.equals(this.config,that.config);
}",0.9889705882352942
111662,"public Builder config(final String subnet,final String ipRange,final String gateway){
  IpamConfig config=new IpamConfig();
  config.subnet(subnet);
  config.ipRange(ipRange);
  config.gateway(gateway);
  configs.add(config);
  return this;
}","public Builder config(final String subnet,final String ipRange,final String gateway){
  final IpamConfig config=new IpamConfig();
  config.subnet(subnet);
  config.ipRange(ipRange);
  config.gateway(gateway);
  configs.add(config);
  return this;
}",0.9877551020408164
111663,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  IpamConfig that=(IpamConfig)o;
  return Objects.equals(this.subnet,that.subnet) && Objects.equals(this.ipRange,that.ipRange) && Objects.equals(this.gateway,that.gateway);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  final IpamConfig that=(IpamConfig)o;
  return Objects.equals(this.subnet,that.subnet) && Objects.equals(this.ipRange,that.ipRange) && Objects.equals(this.gateway,that.gateway);
}",0.9909365558912386
111664,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  MemoryStats other=(MemoryStats)obj;
  if (failcnt == null) {
    if (other.failcnt != null) {
      return false;
    }
  }
 else   if (!failcnt.equals(other.failcnt)) {
    return false;
  }
  if (limit == null) {
    if (other.limit != null) {
      return false;
    }
  }
 else   if (!limit.equals(other.limit)) {
    return false;
  }
  if (maxUsage == null) {
    if (other.maxUsage != null) {
      return false;
    }
  }
 else   if (!maxUsage.equals(other.maxUsage)) {
    return false;
  }
  if (usage == null) {
    if (other.usage != null) {
      return false;
    }
  }
 else   if (!usage.equals(other.usage)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final MemoryStats other=(MemoryStats)obj;
  if (failcnt == null) {
    if (other.failcnt != null) {
      return false;
    }
  }
 else   if (!failcnt.equals(other.failcnt)) {
    return false;
  }
  if (limit == null) {
    if (other.limit != null) {
      return false;
    }
  }
 else   if (!limit.equals(other.limit)) {
    return false;
  }
  if (maxUsage == null) {
    if (other.maxUsage != null) {
      return false;
    }
  }
 else   if (!maxUsage.equals(other.maxUsage)) {
    return false;
  }
  if (usage == null) {
    if (other.usage != null) {
      return false;
    }
  }
 else   if (!usage.equals(other.usage)) {
    return false;
  }
  return true;
}",0.9965075669383004
111665,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  Network that=(Network)o;
  return Objects.equals(this.name,that.name) && Objects.equals(this.id,that.id) && Objects.equals(this.scope,that.scope)&& Objects.equals(this.driver,that.driver)&& Objects.equals(this.options,that.options);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  final Network that=(Network)o;
  return Objects.equals(this.name,that.name) && Objects.equals(this.id,that.id) && Objects.equals(this.scope,that.scope)&& Objects.equals(this.driver,that.driver)&& Objects.equals(this.options,that.options);
}",0.9923664122137404
111666,"private static String startAuthedRegistry(final DockerClient client) throws Exception {
  final Map<String,List<PortBinding>> ports=Collections.singletonMap(""String_Node_Str"",Collections.singletonList(PortBinding.of(""String_Node_Str"",5000)));
  final HostConfig hostConfig=HostConfig.builder().portBindings(ports).binds(ImmutableList.of(Resources.getResource(""String_Node_Str"").getPath() + ""String_Node_Str"",Resources.getResource(""String_Node_Str"").getPath() + ""String_Node_Str"")).build();
  final ContainerConfig containerConfig=ContainerConfig.builder().image(REGISTRY_IMAGE).hostConfig(hostConfig).env(ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).build();
  return startAndAwaitContainer(client,containerConfig,REGISTRY_NAME);
}","private static String startAuthedRegistry(final DockerClient client) throws Exception {
  final Map<String,List<PortBinding>> ports=Collections.singletonMap(""String_Node_Str"",Collections.singletonList(PortBinding.of(""String_Node_Str"",5000)));
  final HostConfig hostConfig=HostConfig.builder().portBindings(ports).binds(ImmutableList.of(Resources.getResource(""String_Node_Str"").getPath() + ""String_Node_Str"",Resources.getResource(""String_Node_Str"").getPath() + ""String_Node_Str"")).build();
  final ContainerConfig containerConfig=ContainerConfig.builder().image(REGISTRY_IMAGE).hostConfig(hostConfig).env(ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).build();
  return startAndAwaitContainer(client,containerConfig,REGISTRY_NAME);
}",0.9888059701492538
111667,"public X509HostnameVerifier hostnameVerifier(){
  return SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;
}","public HostnameVerifier hostnameVerifier(){
  return NoopHostnameVerifier.INSTANCE;
}",0.6733668341708543
111668,"@Test public void testContainerWithCpuQuota() throws Exception {
  assumeTrue(""String_Node_Str"" + ""String_Node_Str"" + sut.version().apiVersion(),versionCompare(sut.version().apiVersion(),""String_Node_Str"") >= 0);
  assumeFalse(CIRCLECI);
  sut.pull(BUSYBOX_LATEST);
  final boolean privileged=true;
  final boolean publishAllPorts=true;
  final String dns=""String_Node_Str"";
  final HostConfig expected=HostConfig.builder().privileged(privileged).publishAllPorts(publishAllPorts).dns(dns).cpuQuota((long)50000).build();
  final ContainerConfig config=ContainerConfig.builder().image(BUSYBOX_LATEST).hostConfig(expected).build();
  final String name=randomName();
  final ContainerCreation creation=sut.createContainer(config,name);
  final String id=creation.id();
  sut.startContainer(id);
  final HostConfig actual=sut.inspectContainer(id).hostConfig();
  assertThat(actual.privileged(),equalTo(expected.privileged()));
  assertThat(actual.publishAllPorts(),equalTo(expected.publishAllPorts()));
  assertThat(actual.dns(),equalTo(expected.dns()));
  assertThat(actual.cpuQuota(),equalTo(expected.cpuQuota()));
}","@Test public void testContainerWithCpuQuota() throws Exception {
  assumeTrue(""String_Node_Str"" + ""String_Node_Str"" + sut.version().apiVersion(),compareVersion(sut.version().apiVersion(),""String_Node_Str"") >= 0);
  assumeFalse(CIRCLECI);
  sut.pull(BUSYBOX_LATEST);
  final boolean privileged=true;
  final boolean publishAllPorts=true;
  final String dns=""String_Node_Str"";
  final HostConfig expected=HostConfig.builder().privileged(privileged).publishAllPorts(publishAllPorts).dns(dns).cpuQuota((long)50000).build();
  final ContainerConfig config=ContainerConfig.builder().image(BUSYBOX_LATEST).hostConfig(expected).build();
  final String name=randomName();
  final ContainerCreation creation=sut.createContainer(config,name);
  final String id=creation.id();
  sut.startContainer(id);
  final HostConfig actual=sut.inspectContainer(id).hostConfig();
  assertThat(actual.privileged(),equalTo(expected.privileged()));
  assertThat(actual.publishAllPorts(),equalTo(expected.publishAllPorts()));
  assertThat(actual.dns(),equalTo(expected.dns()));
  assertThat(actual.cpuQuota(),equalTo(expected.cpuQuota()));
}",0.9928122192273136
111669,"/** 
 * Show exited containers.
 * @return ListContainersParam
 */
public static ListContainersParam exitedContainers() throws UnsupportedEncodingException {
  return create(""String_Node_Str"",URLEncoder.encode(""String_Node_Str"",""String_Node_Str""));
}","/** 
 * Show exited containers.
 * @return ListContainersParam
 */
public static ListContainersParam exitedContainers(){
  try {
    return create(""String_Node_Str"",URLEncoder.encode(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
    throw Throwables.propagate(e);
  }
}",0.7607142857142857
111670,"/** 
 * Returns the specified credential from the specified path to the docker file. This method is package-local so we can test it.
 * @return a {@link Builder}
 * @throws IOException
 */
@VisibleForTesting static Builder fromDockerConfig(final Path configPath,final String serverAddress) throws IOException {
  return parseDockerConfig(configPath,serverAddress);
}","/** 
 * Returns the specified credential from the specified path to the docker file. This method is package-local so we can test it.
 * @param configPath The path to the config file
 * @param serverAddress A string representing the server address
 * @return a {@link Builder}
 * @throws IOException
 */
@VisibleForTesting static Builder fromDockerConfig(final Path configPath,final String serverAddress) throws IOException {
  return parseDockerConfig(configPath,serverAddress);
}",0.8652482269503546
111671,"/** 
 * Provide certificates to secure the connection to Docker.
 */
public Builder dockerCertificates(final DockerCertificates dockerCertificates){
  this.dockerCertificates=dockerCertificates;
  return this;
}","/** 
 * Provide certificates to secure the connection to Docker.
 * @param dockerCertificates DockerCertificates object
 * @return Builder
 */
public Builder dockerCertificates(final DockerCertificates dockerCertificates){
  this.dockerCertificates=dockerCertificates;
  return this;
}",0.8508064516129032
111672,"/** 
 * Set the timeout in milliseconds until a connection to Docker is established. A timeout value of zero is interpreted as an infinite timeout.
 */
public Builder connectTimeoutMillis(final long connectTimeoutMillis){
  this.connectTimeoutMillis=connectTimeoutMillis;
  return this;
}","/** 
 * Set the timeout in milliseconds until a connection to Docker is established. A timeout value of zero is interpreted as an infinite timeout.
 * @param connectTimeoutMillis connection timeout to Docker daemon in milliseconds
 * @return Builder
 */
public Builder connectTimeoutMillis(final long connectTimeoutMillis){
  this.connectTimeoutMillis=connectTimeoutMillis;
  return this;
}",0.8495575221238938
111673,"/** 
 * Set the auth parameters for pull/push requests from/to private repositories.
 */
public Builder authConfig(AuthConfig authConfig){
  this.authConfig=authConfig;
  return this;
}","/** 
 * Set the auth parameters for pull/push requests from/to private repositories.
 * @param authConfig AuthConfig object
 * @return Builder
 */
public Builder authConfig(final AuthConfig authConfig){
  this.authConfig=authConfig;
  return this;
}",0.8248847926267281
111674,"/** 
 * Set the size of the connection pool for connections to Docker. Note that due to a known issue, DefaultDockerClient maintains two separate connection pools, each of which is capped at this size. Therefore, the maximum number of concurrent connections to Docker may be up to 2 * connectionPoolSize.
 */
public Builder connectionPoolSize(int connectionPoolSize){
  this.connectionPoolSize=connectionPoolSize;
  return this;
}","/** 
 * Set the size of the connection pool for connections to Docker. Note that due to a known issue, DefaultDockerClient maintains two separate connection pools, each of which is capped at this size. Therefore, the maximum number of concurrent connections to Docker may be up to 2 * connectionPoolSize.
 * @param connectionPoolSize connection pool size
 * @return Builder
 */
public Builder connectionPoolSize(final int connectionPoolSize){
  this.connectionPoolSize=connectionPoolSize;
  return this;
}",0.9197860962566844
111675,"/** 
 * Create a new   {@link DefaultDockerClient} builder.
 */
public static Builder builder(){
  return new Builder();
}","/** 
 * Create a new   {@link DefaultDockerClient} builder.
 * @return Returns a builder that can be used to further customize and then build the client.
 */
public static Builder builder(){
  return new Builder();
}",0.7218934911242604
111676,"/** 
 * Set the SO_TIMEOUT in milliseconds. This is the maximum period of inactivity between receiving two consecutive data packets from Docker.
 */
public Builder readTimeoutMillis(final long readTimeoutMillis){
  this.readTimeoutMillis=readTimeoutMillis;
  return this;
}","/** 
 * Set the SO_TIMEOUT in milliseconds. This is the maximum period of inactivity between receiving two consecutive data packets from Docker.
 * @param readTimeoutMillis read timeout to Docker daemon in milliseconds
 * @return Builder
 */
public Builder readTimeoutMillis(final long readTimeoutMillis){
  this.readTimeoutMillis=readTimeoutMillis;
  return this;
}",0.8544600938967136
111677,"/** 
 * Create a new client using the configuration of the builder.
 */
protected DefaultDockerClient(final Builder builder){
  URI originalUri=checkNotNull(builder.uri,""String_Node_Str"");
  this.apiVersion=builder.apiVersion();
  if ((builder.dockerCertificates != null) && !originalUri.getScheme().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (originalUri.getScheme().equals(UNIX_SCHEME)) {
    this.uri=UnixConnectionSocketFactory.sanitizeUri(originalUri);
  }
 else {
    this.uri=originalUri;
  }
  final PoolingHttpClientConnectionManager cm=getConnectionManager(builder);
  final PoolingHttpClientConnectionManager noTimeoutCm=getConnectionManager(builder);
  final RequestConfig requestConfig=RequestConfig.custom().setConnectionRequestTimeout((int)builder.connectTimeoutMillis).setConnectTimeout((int)builder.connectTimeoutMillis).setSocketTimeout((int)builder.readTimeoutMillis).build();
  final ClientConfig config=DEFAULT_CONFIG.connectorProvider(new ApacheConnectorProvider()).property(ApacheClientProperties.CONNECTION_MANAGER,cm).property(ApacheClientProperties.REQUEST_CONFIG,requestConfig);
  this.authConfig=builder.authConfig;
  this.client=ClientBuilder.newClient(config);
  final RequestConfig noReadTimeoutRequestConfig=RequestConfig.copy(requestConfig).setSocketTimeout((int)NO_TIMEOUT).build();
  this.noTimeoutClient=ClientBuilder.newBuilder().withConfig(config).property(ApacheClientProperties.CONNECTION_MANAGER,noTimeoutCm).property(ApacheClientProperties.REQUEST_CONFIG,noReadTimeoutRequestConfig).build();
}","/** 
 * Create a new client using the configuration of the builder.
 * @param builder DefaultDockerClient builder
 */
protected DefaultDockerClient(final Builder builder){
  URI originalUri=checkNotNull(builder.uri,""String_Node_Str"");
  this.apiVersion=builder.apiVersion();
  if ((builder.dockerCertificates != null) && !originalUri.getScheme().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (originalUri.getScheme().equals(UNIX_SCHEME)) {
    this.uri=UnixConnectionSocketFactory.sanitizeUri(originalUri);
  }
 else {
    this.uri=originalUri;
  }
  final PoolingHttpClientConnectionManager cm=getConnectionManager(builder);
  final PoolingHttpClientConnectionManager noTimeoutCm=getConnectionManager(builder);
  final RequestConfig requestConfig=RequestConfig.custom().setConnectionRequestTimeout((int)builder.connectTimeoutMillis).setConnectTimeout((int)builder.connectTimeoutMillis).setSocketTimeout((int)builder.readTimeoutMillis).build();
  final ClientConfig config=DEFAULT_CONFIG.connectorProvider(new ApacheConnectorProvider()).property(ApacheClientProperties.CONNECTION_MANAGER,cm).property(ApacheClientProperties.REQUEST_CONFIG,requestConfig);
  this.authConfig=builder.authConfig;
  this.client=ClientBuilder.newClient(config);
  final RequestConfig noReadTimeoutRequestConfig=RequestConfig.copy(requestConfig).setSocketTimeout((int)NO_TIMEOUT).build();
  this.noTimeoutClient=ClientBuilder.newBuilder().withConfig(config).property(ApacheClientProperties.CONNECTION_MANAGER,noTimeoutCm).property(ApacheClientProperties.REQUEST_CONFIG,noReadTimeoutRequestConfig).build();
}",0.9857320099255584
111678,"/** 
 * Set the URI for connections to Docker.
 */
public Builder uri(final String uri){
  return uri(URI.create(uri));
}","/** 
 * Set the URI for connections to Docker.
 * @param uri URI String for connections to Docker
 * @return Builder
 */
public Builder uri(final String uri){
  return uri(URI.create(uri));
}",0.7756410256410257
111679,"/** 
 * Create a new   {@link DefaultDockerClient} builder prepopulated with values loadedfrom the DOCKER_HOST and DOCKER_CERT_PATH environment variables.
 * @return Returns a builder that can be used to further customize and then build the client.
 * @throws DockerCertificateException
 */
public static Builder fromEnv() throws DockerCertificateException {
  final String endpoint=fromNullable(getenv(""String_Node_Str"")).or(defaultEndpoint());
  final String dockerCertPath=getenv(""String_Node_Str"");
  final Builder builder=new Builder();
  if (endpoint.startsWith(UNIX_SCHEME + ""String_Node_Str"")) {
    builder.uri(endpoint);
  }
 else {
    final String stripped=endpoint.replaceAll(""String_Node_Str"",""String_Node_Str"");
    final HostAndPort hostAndPort=HostAndPort.fromString(stripped);
    final String hostText=hostAndPort.getHostText();
    final String scheme=isNullOrEmpty(dockerCertPath) ? ""String_Node_Str"" : ""String_Node_Str"";
    final int port=hostAndPort.getPortOrDefault(DEFAULT_PORT);
    final String address=isNullOrEmpty(hostText) ? DEFAULT_HOST : hostText;
    builder.uri(scheme + ""String_Node_Str"" + address+ ""String_Node_Str""+ port);
  }
  if (!isNullOrEmpty(dockerCertPath)) {
    builder.dockerCertificates(new DockerCertificates(Paths.get(dockerCertPath)));
  }
  return builder;
}","/** 
 * Create a new   {@link DefaultDockerClient} builder prepopulated with values loadedfrom the DOCKER_HOST and DOCKER_CERT_PATH environment variables.
 * @return Returns a builder that can be used to further customize and then build the client.
 * @throws DockerCertificateException if we could not build a DockerCertificates object
 */
public static Builder fromEnv() throws DockerCertificateException {
  final String endpoint=fromNullable(getenv(""String_Node_Str"")).or(defaultEndpoint());
  final String dockerCertPath=getenv(""String_Node_Str"");
  final Builder builder=new Builder();
  if (endpoint.startsWith(UNIX_SCHEME + ""String_Node_Str"")) {
    builder.uri(endpoint);
  }
 else {
    final String stripped=endpoint.replaceAll(""String_Node_Str"",""String_Node_Str"");
    final HostAndPort hostAndPort=HostAndPort.fromString(stripped);
    final String hostText=hostAndPort.getHostText();
    final String scheme=isNullOrEmpty(dockerCertPath) ? ""String_Node_Str"" : ""String_Node_Str"";
    final int port=hostAndPort.getPortOrDefault(DEFAULT_PORT);
    final String address=isNullOrEmpty(hostText) ? DEFAULT_HOST : hostText;
    builder.uri(scheme + ""String_Node_Str"" + address+ ""String_Node_Str""+ port);
  }
  if (!isNullOrEmpty(dockerCertPath)) {
    builder.dockerCertificates(new DockerCertificates(Paths.get(dockerCertPath)));
  }
  return builder;
}",0.981301421091997
111680,"/** 
 * The file for the created compressed directory archive.
 */
public Path file(){
  return file;
}","/** 
 * The file for the created compressed directory archive.
 * @return a Path object representing the compressed directory
 */
public Path file(){
  return file;
}",0.7657992565055762
111681,"/** 
 * Provide certificates to secure the connection to Docker.
 */
public Builder dockerCertificates(final DockerCertificates dockerCertificates){
  this.dockerCertificates=dockerCertificates;
  return this;
}","/** 
 * Provide certificates to secure the connection to Docker.
 * @param dockerCertificates DockerCertificates object
 * @return Builder
 */
public Builder dockerCertificates(final DockerCertificates dockerCertificates){
  this.dockerCertificates=dockerCertificates;
  return this;
}",0.8508064516129032
111682,"/** 
 * Set the timeout in milliseconds until a connection to Docker is established. A timeout value of zero is interpreted as an infinite timeout.
 */
public Builder connectTimeoutMillis(final long connectTimeoutMillis){
  this.connectTimeoutMillis=connectTimeoutMillis;
  return this;
}","/** 
 * Set the timeout in milliseconds until a connection to Docker is established. A timeout value of zero is interpreted as an infinite timeout.
 * @param connectTimeoutMillis connection timeout to Docker daemon in milliseconds
 * @return Builder
 */
public Builder connectTimeoutMillis(final long connectTimeoutMillis){
  this.connectTimeoutMillis=connectTimeoutMillis;
  return this;
}",0.8495575221238938
111683,"/** 
 * Set the auth parameters for pull/push requests from/to private repositories.
 */
public Builder authConfig(AuthConfig authConfig){
  this.authConfig=authConfig;
  return this;
}","/** 
 * Set the auth parameters for pull/push requests from/to private repositories.
 * @param authConfig AuthConfig object
 * @return Builder
 */
public Builder authConfig(final AuthConfig authConfig){
  this.authConfig=authConfig;
  return this;
}",0.8248847926267281
111684,"/** 
 * Set the size of the connection pool for connections to Docker. Note that due to a known issue, DefaultDockerClient maintains two separate connection pools, each of which is capped at this size. Therefore, the maximum number of concurrent connections to Docker may be up to 2 * connectionPoolSize.
 */
public Builder connectionPoolSize(int connectionPoolSize){
  this.connectionPoolSize=connectionPoolSize;
  return this;
}","/** 
 * Set the size of the connection pool for connections to Docker. Note that due to a known issue, DefaultDockerClient maintains two separate connection pools, each of which is capped at this size. Therefore, the maximum number of concurrent connections to Docker may be up to 2 * connectionPoolSize.
 * @param connectionPoolSize connection pool size
 * @return Builder
 */
public Builder connectionPoolSize(final int connectionPoolSize){
  this.connectionPoolSize=connectionPoolSize;
  return this;
}",0.9197860962566844
111685,"/** 
 * Create a new   {@link DefaultDockerClient} builder.
 */
public static Builder builder(){
  return new Builder();
}","/** 
 * Create a new   {@link DefaultDockerClient} builder.
 * @return Returns a builder that can be used to further customize and then build the client.
 */
public static Builder builder(){
  return new Builder();
}",0.7218934911242604
111686,"/** 
 * Set the SO_TIMEOUT in milliseconds. This is the maximum period of inactivity between receiving two consecutive data packets from Docker.
 */
public Builder readTimeoutMillis(final long readTimeoutMillis){
  this.readTimeoutMillis=readTimeoutMillis;
  return this;
}","/** 
 * Set the SO_TIMEOUT in milliseconds. This is the maximum period of inactivity between receiving two consecutive data packets from Docker.
 * @param readTimeoutMillis read timeout to Docker daemon in milliseconds
 * @return Builder
 */
public Builder readTimeoutMillis(final long readTimeoutMillis){
  this.readTimeoutMillis=readTimeoutMillis;
  return this;
}",0.8544600938967136
111687,"/** 
 * Create a new client using the configuration of the builder.
 */
protected DefaultDockerClient(final Builder builder){
  URI originalUri=checkNotNull(builder.uri,""String_Node_Str"");
  this.apiVersion=builder.apiVersion();
  if ((builder.dockerCertificates != null) && !originalUri.getScheme().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (originalUri.getScheme().equals(UNIX_SCHEME)) {
    this.uri=UnixConnectionSocketFactory.sanitizeUri(originalUri);
  }
 else {
    this.uri=originalUri;
  }
  final PoolingHttpClientConnectionManager cm=getConnectionManager(builder);
  final PoolingHttpClientConnectionManager noTimeoutCm=getConnectionManager(builder);
  final RequestConfig requestConfig=RequestConfig.custom().setConnectionRequestTimeout((int)builder.connectTimeoutMillis).setConnectTimeout((int)builder.connectTimeoutMillis).setSocketTimeout((int)builder.readTimeoutMillis).build();
  final ClientConfig config=DEFAULT_CONFIG.connectorProvider(new ApacheConnectorProvider()).property(ApacheClientProperties.CONNECTION_MANAGER,cm).property(ApacheClientProperties.REQUEST_CONFIG,requestConfig);
  this.authConfig=builder.authConfig;
  this.client=ClientBuilder.newClient(config);
  final RequestConfig noReadTimeoutRequestConfig=RequestConfig.copy(requestConfig).setSocketTimeout((int)NO_TIMEOUT).build();
  this.noTimeoutClient=ClientBuilder.newBuilder().withConfig(config).property(ApacheClientProperties.CONNECTION_MANAGER,noTimeoutCm).property(ApacheClientProperties.REQUEST_CONFIG,noReadTimeoutRequestConfig).build();
}","/** 
 * Create a new client using the configuration of the builder.
 * @param builder DefaultDockerClient builder
 */
protected DefaultDockerClient(final Builder builder){
  URI originalUri=checkNotNull(builder.uri,""String_Node_Str"");
  this.apiVersion=builder.apiVersion();
  if ((builder.dockerCertificates != null) && !originalUri.getScheme().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (originalUri.getScheme().equals(UNIX_SCHEME)) {
    this.uri=UnixConnectionSocketFactory.sanitizeUri(originalUri);
  }
 else {
    this.uri=originalUri;
  }
  final PoolingHttpClientConnectionManager cm=getConnectionManager(builder);
  final PoolingHttpClientConnectionManager noTimeoutCm=getConnectionManager(builder);
  final RequestConfig requestConfig=RequestConfig.custom().setConnectionRequestTimeout((int)builder.connectTimeoutMillis).setConnectTimeout((int)builder.connectTimeoutMillis).setSocketTimeout((int)builder.readTimeoutMillis).build();
  final ClientConfig config=DEFAULT_CONFIG.connectorProvider(new ApacheConnectorProvider()).property(ApacheClientProperties.CONNECTION_MANAGER,cm).property(ApacheClientProperties.REQUEST_CONFIG,requestConfig);
  this.authConfig=builder.authConfig;
  this.client=ClientBuilder.newClient(config);
  final RequestConfig noReadTimeoutRequestConfig=RequestConfig.copy(requestConfig).setSocketTimeout((int)NO_TIMEOUT).build();
  this.noTimeoutClient=ClientBuilder.newBuilder().withConfig(config).property(ApacheClientProperties.CONNECTION_MANAGER,noTimeoutCm).property(ApacheClientProperties.REQUEST_CONFIG,noReadTimeoutRequestConfig).build();
}",0.9857320099255584
111688,"/** 
 * Set the URI for connections to Docker.
 */
public Builder uri(final String uri){
  return uri(URI.create(uri));
}","/** 
 * Set the URI for connections to Docker.
 * @param uri URI String for connections to Docker
 * @return Builder
 */
public Builder uri(final String uri){
  return uri(URI.create(uri));
}",0.7756410256410257
111689,"/** 
 * Create a new   {@link DefaultDockerClient} builder prepopulated with values loadedfrom the DOCKER_HOST and DOCKER_CERT_PATH environment variables.
 * @return Returns a builder that can be used to further customize and then build the client.
 * @throws DockerCertificateException
 */
public static Builder fromEnv() throws DockerCertificateException {
  final String endpoint=fromNullable(getenv(""String_Node_Str"")).or(defaultEndpoint());
  final String dockerCertPath=getenv(""String_Node_Str"");
  final Builder builder=new Builder();
  if (endpoint.startsWith(UNIX_SCHEME + ""String_Node_Str"")) {
    builder.uri(endpoint);
  }
 else {
    final String stripped=endpoint.replaceAll(""String_Node_Str"",""String_Node_Str"");
    final HostAndPort hostAndPort=HostAndPort.fromString(stripped);
    final String hostText=hostAndPort.getHostText();
    final String scheme=isNullOrEmpty(dockerCertPath) ? ""String_Node_Str"" : ""String_Node_Str"";
    final int port=hostAndPort.getPortOrDefault(DEFAULT_PORT);
    final String address=isNullOrEmpty(hostText) ? DEFAULT_HOST : hostText;
    builder.uri(scheme + ""String_Node_Str"" + address+ ""String_Node_Str""+ port);
  }
  if (!isNullOrEmpty(dockerCertPath)) {
    builder.dockerCertificates(new DockerCertificates(Paths.get(dockerCertPath)));
  }
  return builder;
}","/** 
 * Create a new   {@link DefaultDockerClient} builder prepopulated with values loadedfrom the DOCKER_HOST and DOCKER_CERT_PATH environment variables.
 * @return Returns a builder that can be used to further customize and then build the client.
 * @throws DockerCertificateException if we could not build a DockerCertificates object
 */
public static Builder fromEnv() throws DockerCertificateException {
  final String endpoint=fromNullable(getenv(""String_Node_Str"")).or(defaultEndpoint());
  final String dockerCertPath=getenv(""String_Node_Str"");
  final Builder builder=new Builder();
  if (endpoint.startsWith(UNIX_SCHEME + ""String_Node_Str"")) {
    builder.uri(endpoint);
  }
 else {
    final String stripped=endpoint.replaceAll(""String_Node_Str"",""String_Node_Str"");
    final HostAndPort hostAndPort=HostAndPort.fromString(stripped);
    final String hostText=hostAndPort.getHostText();
    final String scheme=isNullOrEmpty(dockerCertPath) ? ""String_Node_Str"" : ""String_Node_Str"";
    final int port=hostAndPort.getPortOrDefault(DEFAULT_PORT);
    final String address=isNullOrEmpty(hostText) ? DEFAULT_HOST : hostText;
    builder.uri(scheme + ""String_Node_Str"" + address+ ""String_Node_Str""+ port);
  }
  if (!isNullOrEmpty(dockerCertPath)) {
    builder.dockerCertificates(new DockerCertificates(Paths.get(dockerCertPath)));
  }
  return builder;
}",0.981301421091997
111690,"@Test public void mappingRepoWithRefreshRate() throws IOException {
  String defaultRepoUri=ConfigServerTestUtils.prepareLocalRepo(""String_Node_Str"");
  String test1RepoUri=ConfigServerTestUtils.prepareLocalRepo(""String_Node_Str"");
  Map<String,Object> repoMapping=new LinkedHashMap<String,Object>();
  repoMapping.put(""String_Node_Str"",""String_Node_Str"");
  repoMapping.put(""String_Node_Str"",test1RepoUri);
  repoMapping.put(""String_Node_Str"",""String_Node_Str"");
  this.context=new SpringApplicationBuilder(TestConfiguration.class).web(false).properties(""String_Node_Str"" + defaultRepoUri).properties(repoMapping).run();
  EnvironmentRepository repository=this.context.getBean(EnvironmentRepository.class);
  repository.findOne(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Environment environment=repository.findOne(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(2,environment.getPropertySources().size());
  assertEquals(((MultipleJGitEnvironmentRepository)repository).getRepos().get(""String_Node_Str"").getRefreshRate(),30);
}","@Test public void mappingRepoWithRefreshRate() throws IOException {
  String defaultRepoUri=ConfigServerTestUtils.prepareLocalRepo(""String_Node_Str"");
  String test1RepoUri=ConfigServerTestUtils.prepareLocalRepo(""String_Node_Str"");
  Map<String,Object> repoMapping=new LinkedHashMap<String,Object>();
  repoMapping.put(""String_Node_Str"",""String_Node_Str"");
  repoMapping.put(""String_Node_Str"",test1RepoUri);
  repoMapping.put(""String_Node_Str"",""String_Node_Str"");
  this.context=new SpringApplicationBuilder(TestConfiguration.class).web(WebApplicationType.NONE).properties(""String_Node_Str"" + defaultRepoUri).properties(repoMapping).run();
  EnvironmentRepository repository=this.context.getBean(EnvironmentRepository.class);
  repository.findOne(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Environment environment=repository.findOne(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(2,environment.getPropertySources().size());
  assertEquals(((MultipleJGitEnvironmentRepository)repository).getRepos().get(""String_Node_Str"").getRefreshRate(),30);
}",0.9869646182495344
111691,"private void setMapValue(Map<String,Object> map,Object value){
  String key=getKey();
  if (NodeType.MAP.equals(valueType)) {
    Map<String,Object> nestedMap=(Map<String,Object>)map.get(key);
    if (nestedMap == null) {
      nestedMap=new LinkedHashMap<>();
      map.put(key,nestedMap);
    }
    setMapValue(nestedMap,value);
  }
 else   if (NodeType.ARRAY.equals(valueType)) {
    List<Object> list=(List<Object>)map.get(key);
    if (list == null) {
      list=new ArrayList<>();
      map.put(key,list);
    }
    setListValue(list,value);
  }
 else {
    map.put(key,value);
  }
}","private void setMapValue(Map<String,Object> map,Object value){
  String key=getKey();
  if (NodeType.MAP.equals(valueType)) {
    @SuppressWarnings(""String_Node_Str"") Map<String,Object> nestedMap=(Map<String,Object>)map.get(key);
    if (nestedMap == null) {
      nestedMap=new LinkedHashMap<>();
      map.put(key,nestedMap);
    }
    setMapValue(nestedMap,value);
  }
 else   if (NodeType.ARRAY.equals(valueType)) {
    @SuppressWarnings(""String_Node_Str"") List<Object> list=(List<Object>)map.get(key);
    if (list == null) {
      list=new ArrayList<>();
      map.put(key,list);
    }
    setListValue(list,value);
  }
 else {
    map.put(key,value);
  }
}",0.9408945686900958
111692,"private void setListValue(List<Object> list,Object value){
  int index=getIndex();
  while (list.size() <= index) {
    list.add(null);
  }
  if (NodeType.MAP.equals(valueType)) {
    Map<String,Object> map=(Map<String,Object>)list.get(index);
    if (map == null) {
      map=new LinkedHashMap<>();
      list.set(index,map);
    }
    setMapValue(map,value);
  }
 else   if (NodeType.ARRAY.equals(valueType)) {
    List<Object> nestedList=(List<Object>)list.get(index);
    if (nestedList == null) {
      nestedList=new ArrayList<>();
      list.set(index,nestedList);
    }
    setListValue(nestedList,value);
  }
 else {
    list.set(index,value);
  }
}","private void setListValue(List<Object> list,Object value){
  int index=getIndex();
  while (list.size() <= index) {
    list.add(null);
  }
  if (NodeType.MAP.equals(valueType)) {
    @SuppressWarnings(""String_Node_Str"") Map<String,Object> map=(Map<String,Object>)list.get(index);
    if (map == null) {
      map=new LinkedHashMap<>();
      list.set(index,map);
    }
    setMapValue(map,value);
  }
 else   if (NodeType.ARRAY.equals(valueType)) {
    @SuppressWarnings(""String_Node_Str"") List<Object> nestedList=(List<Object>)list.get(index);
    if (nestedList == null) {
      nestedList=new ArrayList<>();
      list.set(index,nestedList);
    }
    setListValue(nestedList,value);
  }
 else {
    list.set(index,value);
  }
}",0.9467625899280576
111693,"public static JGitConfigServerTestData prepareClonedGitRepository(Object... sources) throws Exception {
  String remoteUri=ConfigServerTestUtils.prepareLocalRepo();
  File remoteRepoDir=ResourceUtils.getFile(remoteUri);
  Git remoteGit=Git.open(remoteRepoDir.getAbsoluteFile());
  remoteGit.checkout().setName(""String_Node_Str"").call();
  File clonedRepoDir=new File(""String_Node_Str"");
  if (clonedRepoDir.exists()) {
    FileSystemUtils.deleteRecursively(clonedRepoDir);
  }
 else {
    clonedRepoDir.mkdirs();
  }
  Git clonedGit=Git.cloneRepository().setURI(""String_Node_Str"" + remoteRepoDir.getAbsolutePath()).setDirectory(clonedRepoDir).setBranch(""String_Node_Str"").setCloneAllBranches(true).call();
  ConfigurableApplicationContext context=new SpringApplicationBuilder(sources).web(WebApplicationType.NONE).properties(""String_Node_Str"" + ""String_Node_Str"" + clonedRepoDir.getAbsolutePath()).run();
  JGitEnvironmentRepository repository=context.getBean(JGitEnvironmentRepository.class);
  return new JGitConfigServerTestData(new JGitConfigServerTestData.LocalGit(remoteGit,remoteRepoDir),new JGitConfigServerTestData.LocalGit(clonedGit,clonedRepoDir),repository,context);
}","public static JGitConfigServerTestData prepareClonedGitRepository(Class... sources) throws Exception {
  String remoteUri=ConfigServerTestUtils.prepareLocalRepo();
  File remoteRepoDir=ResourceUtils.getFile(remoteUri);
  Git remoteGit=Git.open(remoteRepoDir.getAbsoluteFile());
  remoteGit.checkout().setName(""String_Node_Str"").call();
  File clonedRepoDir=new File(""String_Node_Str"");
  if (clonedRepoDir.exists()) {
    FileSystemUtils.deleteRecursively(clonedRepoDir);
  }
 else {
    clonedRepoDir.mkdirs();
  }
  Git clonedGit=Git.cloneRepository().setURI(""String_Node_Str"" + remoteRepoDir.getAbsolutePath()).setDirectory(clonedRepoDir).setBranch(""String_Node_Str"").setCloneAllBranches(true).call();
  ConfigurableApplicationContext context=new SpringApplicationBuilder(sources).web(WebApplicationType.NONE).properties(""String_Node_Str"" + ""String_Node_Str"" + clonedRepoDir.getAbsolutePath()).run();
  JGitEnvironmentRepository repository=context.getBean(JGitEnvironmentRepository.class);
  return new JGitConfigServerTestData(new JGitConfigServerTestData.LocalGit(remoteGit,remoteRepoDir),new JGitConfigServerTestData.LocalGit(clonedGit,clonedRepoDir),repository,context);
}",0.9953370072064434
111694,"private Environment decrypt(Environment environment,TextEncryptorLocator encryptor){
  Environment result=new Environment(environment);
  for (  PropertySource source : environment.getPropertySources()) {
    Map<Object,Object> map=new LinkedHashMap<Object,Object>(source.getSource());
    for (    Map.Entry<Object,Object> entry : new LinkedHashSet<>(map.entrySet())) {
      Object key=entry.getKey();
      String name=key.toString();
      String value=entry.getValue().toString();
      if (value.startsWith(""String_Node_Str"")) {
        map.remove(key);
        try {
          value=value.substring(""String_Node_Str"".length());
          value=encryptor.locate(this.helper.getEncryptorKeys(name,StringUtils.arrayToCommaDelimitedString(environment.getProfiles()),value)).decrypt(this.helper.stripPrefix(value));
        }
 catch (        Exception e) {
          value=""String_Node_Str"";
          name=""String_Node_Str"" + name;
          logger.warn(""String_Node_Str"" + key + ""String_Node_Str""+ e.getClass()+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
        }
        map.put(name,value);
      }
    }
    result.add(new PropertySource(source.getName(),map));
  }
  return result;
}","private Environment decrypt(Environment environment,TextEncryptorLocator encryptor){
  Environment result=new Environment(environment);
  for (  PropertySource source : environment.getPropertySources()) {
    Map<Object,Object> map=new LinkedHashMap<Object,Object>(source.getSource());
    for (    Map.Entry<Object,Object> entry : new LinkedHashSet<>(map.entrySet())) {
      Object key=entry.getKey();
      String name=key.toString();
      String value=entry.getValue().toString();
      if (value.startsWith(""String_Node_Str"")) {
        map.remove(key);
        try {
          value=value.substring(""String_Node_Str"".length());
          value=encryptor.locate(this.helper.getEncryptorKeys(name,StringUtils.arrayToCommaDelimitedString(environment.getProfiles()),value)).decrypt(this.helper.stripPrefix(value));
        }
 catch (        Exception e) {
          value=""String_Node_Str"";
          name=""String_Node_Str"" + name;
          String message=""String_Node_Str"" + key + ""String_Node_Str""+ e.getClass()+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"";
          if (logger.isDebugEnabled()) {
            logger.debug(message,e);
          }
 else           if (logger.isWarnEnabled()) {
            logger.warn(message);
          }
        }
        map.put(name,value);
      }
    }
    result.add(new PropertySource(source.getName(),map));
  }
  return result;
}",0.7445987654320988
111695,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String encrypt(@PathVariable String name,@PathVariable String profiles,@RequestBody String data,@RequestHeader(""String_Node_Str"") MediaType type){
  checkEncryptorInstalled(name,profiles);
  try {
    String input=stripFormData(data,type,false);
    Map<String,String> keys=this.helper.getEncryptorKeys(name,profiles,input);
    String textToEncrypt=this.helper.stripPrefix(input);
    String encrypted=this.helper.addPrefix(keys,this.encryptor.locate(keys).encrypt(textToEncrypt));
    logger.info(""String_Node_Str"");
    return encrypted;
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidCipherException();
  }
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String encrypt(@PathVariable String name,@PathVariable String profiles,@RequestBody String data,@RequestHeader(""String_Node_Str"") MediaType type){
  checkEncryptorInstalled(name,profiles);
  String input=stripFormData(data,type,false);
  Map<String,String> keys=this.helper.getEncryptorKeys(name,profiles,input);
  String textToEncrypt=this.helper.stripPrefix(input);
  String encrypted=this.helper.addPrefix(keys,this.encryptor.locate(keys).encrypt(textToEncrypt));
  logger.info(""String_Node_Str"");
  return encrypted;
}",0.8892307692307693
111696,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String decrypt(@PathVariable String name,@PathVariable String profiles,@RequestBody String data,@RequestHeader(""String_Node_Str"") MediaType type){
  checkEncryptorInstalled(name,profiles);
  try {
    String input=stripFormData(data,type,true);
    Map<String,String> encryptorKeys=this.helper.getEncryptorKeys(name,profiles,input);
    TextEncryptor encryptor=this.encryptor.locate(encryptorKeys);
    String encryptedText=this.helper.stripPrefix(input);
    String decrypted=encryptor.decrypt(encryptedText);
    logger.info(""String_Node_Str"");
    return decrypted;
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidCipherException();
  }
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String decrypt(@PathVariable String name,@PathVariable String profiles,@RequestBody String data,@RequestHeader(""String_Node_Str"") MediaType type){
  checkEncryptorInstalled(name,profiles);
  try {
    String input=stripFormData(data,type,true);
    Map<String,String> encryptorKeys=this.helper.getEncryptorKeys(name,profiles,input);
    TextEncryptor encryptor=this.encryptor.locate(encryptorKeys);
    String encryptedText=this.helper.stripPrefix(input);
    String decrypted=encryptor.decrypt(encryptedText);
    logger.info(""String_Node_Str"");
    return decrypted;
  }
 catch (  IllegalArgumentException|IllegalStateException e) {
    logger.error(""String_Node_Str"" + name + ""String_Node_Str""+ data,e);
    throw new InvalidCipherException();
  }
}",0.8985879332477535
111697,"private Ref resetHard(Git git,String label,String ref){
  ResetCommand reset=git.reset();
  reset.setRef(ref);
  reset.setMode(ResetType.HARD);
  try {
    Ref resetRef=reset.call();
    if (resetRef != null) {
      this.logger.info(""String_Node_Str"" + label + ""String_Node_Str""+ resetRef.getObjectId());
    }
    return resetRef;
  }
 catch (  Exception ex) {
    this.logger.warn(""String_Node_Str"" + label + ""String_Node_Str""+ ref+ ""String_Node_Str""+ git.getRepository().getConfig().getString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    return null;
  }
}","private Ref resetHard(Git git,String label,String ref){
  ResetCommand reset=git.reset();
  reset.setRef(ref);
  reset.setMode(ResetType.HARD);
  try {
    Ref resetRef=reset.call();
    if (resetRef != null) {
      this.logger.info(""String_Node_Str"" + label + ""String_Node_Str""+ resetRef.getObjectId());
    }
    return resetRef;
  }
 catch (  Exception ex) {
    String message=""String_Node_Str"" + label + ""String_Node_Str""+ ref+ ""String_Node_Str""+ git.getRepository().getConfig().getString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    warn(message,ex);
    return null;
  }
}",0.6797608881298036
111698,"private MergeResult merge(Git git,String label){
  try {
    MergeCommand merge=git.merge();
    merge.include(git.getRepository().getRef(""String_Node_Str"" + label));
    MergeResult result=merge.call();
    if (!result.getMergeStatus().isSuccessful()) {
      this.logger.warn(""String_Node_Str"" + label + ""String_Node_Str""+ result.getMergeStatus());
    }
    return result;
  }
 catch (  Exception ex) {
    this.logger.warn(""String_Node_Str"" + label + ""String_Node_Str""+ git.getRepository().getConfig().getString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    return null;
  }
}","private MergeResult merge(Git git,String label){
  try {
    MergeCommand merge=git.merge();
    merge.include(git.getRepository().getRef(""String_Node_Str"" + label));
    MergeResult result=merge.call();
    if (!result.getMergeStatus().isSuccessful()) {
      this.logger.warn(""String_Node_Str"" + label + ""String_Node_Str""+ result.getMergeStatus());
    }
    return result;
  }
 catch (  Exception ex) {
    String message=""String_Node_Str"" + label + ""String_Node_Str""+ git.getRepository().getConfig().getString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    warn(message,ex);
    return null;
  }
}",0.7295285359801489
111699,"/** 
 * Get the working directory ready.
 */
private String refresh(String label){
  initialize();
  Git git=null;
  try {
    git=createGitClient();
    if (shouldPull(git)) {
      fetch(git,label);
      checkout(git,label);
      if (isBranch(git,label)) {
        merge(git,label);
        if (!isClean(git)) {
          logger.warn(""String_Node_Str"" + label + ""String_Node_Str"");
          resetHard(git,label,""String_Node_Str"" + label);
        }
      }
    }
 else {
      checkout(git,label);
    }
    return git.getRepository().getRef(""String_Node_Str"").getObjectId().getName();
  }
 catch (  RefNotFoundException e) {
    throw new NoSuchLabelException(""String_Node_Str"" + label);
  }
catch (  GitAPIException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (git != null) {
        git.close();
      }
    }
 catch (    Exception e) {
      this.logger.warn(""String_Node_Str"",e);
    }
  }
}","/** 
 * Get the working directory ready.
 */
private String refresh(String label){
  initialize();
  Git git=null;
  try {
    git=createGitClient();
    if (shouldPull(git)) {
      fetch(git,label);
      checkout(git,label);
      if (isBranch(git,label)) {
        merge(git,label);
        if (!isClean(git)) {
          logger.warn(""String_Node_Str"" + label + ""String_Node_Str"");
          resetHard(git,label,""String_Node_Str"" + label);
        }
      }
    }
 else {
      checkout(git,label);
    }
    return git.getRepository().getRef(""String_Node_Str"").getObjectId().getName();
  }
 catch (  RefNotFoundException e) {
    throw new NoSuchLabelException(""String_Node_Str"" + label,e);
  }
catch (  GitAPIException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (git != null) {
        git.close();
      }
    }
 catch (    Exception e) {
      this.logger.warn(""String_Node_Str"",e);
    }
  }
}",0.999039385206532
111700,"private boolean isClean(Git git){
  StatusCommand status=git.status();
  try {
    return status.call().isClean();
  }
 catch (  Exception e) {
    this.logger.warn(""String_Node_Str"" + e.getClass().getSimpleName() + ""String_Node_Str""+ e.getMessage());
    return false;
  }
}","private boolean isClean(Git git){
  StatusCommand status=git.status();
  try {
    return status.call().isClean();
  }
 catch (  Exception e) {
    String message=""String_Node_Str"" + e.getClass().getSimpleName() + ""String_Node_Str""+ e.getMessage();
    warn(message,e);
    return false;
  }
}",0.6302816901408451
111701,"private FetchResult fetch(Git git,String label){
  FetchCommand fetch=git.fetch();
  fetch.setRemote(""String_Node_Str"");
  fetch.setTagOpt(TagOpt.FETCH_TAGS);
  setTimeout(fetch);
  try {
    setCredentialsProvider(fetch);
    FetchResult result=fetch.call();
    if (result.getTrackingRefUpdates() != null && result.getTrackingRefUpdates().size() > 0) {
      this.logger.info(""String_Node_Str"" + label + ""String_Node_Str""+ result.getTrackingRefUpdates().size()+ ""String_Node_Str"");
    }
    return result;
  }
 catch (  Exception ex) {
    this.logger.warn(""String_Node_Str"" + label + ""String_Node_Str""+ git.getRepository().getConfig().getString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    return null;
  }
}","private FetchResult fetch(Git git,String label){
  FetchCommand fetch=git.fetch();
  fetch.setRemote(""String_Node_Str"");
  fetch.setTagOpt(TagOpt.FETCH_TAGS);
  setTimeout(fetch);
  try {
    setCredentialsProvider(fetch);
    FetchResult result=fetch.call();
    if (result.getTrackingRefUpdates() != null && result.getTrackingRefUpdates().size() > 0) {
      logger.info(""String_Node_Str"" + label + ""String_Node_Str""+ result.getTrackingRefUpdates().size()+ ""String_Node_Str"");
    }
    return result;
  }
 catch (  Exception ex) {
    String message=""String_Node_Str"" + label + ""String_Node_Str""+ git.getRepository().getConfig().getString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    warn(message,ex);
    return null;
  }
}",0.7741496598639456
111702,"@Override public Locations getLocations(String application,String profile,String label){
  for (  PatternMatchingJGitEnvironmentRepository repository : this.repos.values()) {
    if (repository.matches(application,profile,label)) {
      for (      JGitEnvironmentRepository candidate : getRepositories(repository,application,profile,label)) {
        try {
          Environment source=candidate.findOne(application,profile,label);
          if (source != null) {
            return candidate.getLocations(application,profile,label);
          }
        }
 catch (        Exception e) {
          if (logger.isDebugEnabled()) {
            this.logger.debug(""String_Node_Str"" + candidate.getUri() + ""String_Node_Str""+ e.getClass().getSimpleName()+ ""String_Node_Str""+ e.getMessage());
          }
          continue;
        }
      }
    }
  }
  JGitEnvironmentRepository candidate=getRepository(this,application,profile,label);
  if (candidate == this) {
    return super.getLocations(application,profile,label);
  }
  return candidate.getLocations(application,profile,label);
}","@Override public Locations getLocations(String application,String profile,String label){
  for (  PatternMatchingJGitEnvironmentRepository repository : this.repos.values()) {
    if (repository.matches(application,profile,label)) {
      for (      JGitEnvironmentRepository candidate : getRepositories(repository,application,profile,label)) {
        try {
          Environment source=candidate.findOne(application,profile,label);
          if (source != null) {
            return candidate.getLocations(application,profile,label);
          }
        }
 catch (        Exception e) {
          if (logger.isDebugEnabled()) {
            this.logger.debug(""String_Node_Str"" + candidate.getUri() + ""String_Node_Str""+ e.getClass().getSimpleName()+ ""String_Node_Str""+ e.getMessage(),e);
          }
          continue;
        }
      }
    }
  }
  JGitEnvironmentRepository candidate=getRepository(this,application,profile,label);
  if (candidate == this) {
    return super.getLocations(application,profile,label);
  }
  return candidate.getLocations(application,profile,label);
}",0.9990749306197964
111703,"public NoSuchLabelException(String string){
  super(string);
}","public NoSuchLabelException(String string,Exception e){
  super(string,e);
}",0.8985507246376812
111704,"public RepositoryException(String string){
  super(string);
}","public RepositoryException(String message,Throwable cause){
  super(message,cause);
}",0.726027397260274
111705,"private String update(SvnOperationFactory svnOperationFactory,String label) throws SVNException {
  logger.debug(""String_Node_Str"");
  try {
    final SvnUpdate update=svnOperationFactory.createUpdate();
    update.setSingleTarget(SvnTarget.fromFile(getWorkingDirectory()));
    long[] ids=update.run();
    StringBuilder version=new StringBuilder();
    for (    long id : ids) {
      if (version.length() > 0) {
        version.append(""String_Node_Str"");
      }
      version.append(id);
    }
    return version.toString();
  }
 catch (  Exception e) {
    this.logger.warn(""String_Node_Str"" + label + ""String_Node_Str""+ getWorkingDirectory().getPath()+ ""String_Node_Str""+ this.getUri()+ ""String_Node_Str"");
  }
  final SVNStatus status=SVNClientManager.newInstance().getStatusClient().doStatus(getWorkingDirectory(),false);
  return status != null ? status.getRevision().toString() : null;
}","private String update(SvnOperationFactory svnOperationFactory,String label) throws SVNException {
  logger.debug(""String_Node_Str"");
  try {
    final SvnUpdate update=svnOperationFactory.createUpdate();
    update.setSingleTarget(SvnTarget.fromFile(getWorkingDirectory()));
    long[] ids=update.run();
    StringBuilder version=new StringBuilder();
    for (    long id : ids) {
      if (version.length() > 0) {
        version.append(""String_Node_Str"");
      }
      version.append(id);
    }
    return version.toString();
  }
 catch (  Exception e) {
    String message=""String_Node_Str"" + label + ""String_Node_Str""+ getWorkingDirectory().getPath()+ ""String_Node_Str""+ this.getUri()+ ""String_Node_Str"";
    if (logger.isDebugEnabled()) {
      logger.debug(message,e);
    }
 else     if (logger.isWarnEnabled()) {
      logger.warn(message);
    }
  }
  final SVNStatus status=SVNClientManager.newInstance().getStatusClient().doStatus(getWorkingDirectory(),false);
  return status != null ? status.getRevision().toString() : null;
}",0.7857511615900877
111706,"@Test public void testFetchException() throws Exception {
  Git git=mock(Git.class);
  CloneCommand cloneCommand=mock(CloneCommand.class);
  MockGitFactory factory=new MockGitFactory(git,cloneCommand);
  JGitEnvironmentRepository repo=new JGitEnvironmentRepository(this.environment);
  this.repository.setGitFactory(factory);
  StatusCommand statusCommand=mock(StatusCommand.class);
  Status status=mock(Status.class);
  when(git.status()).thenReturn(statusCommand);
  Repository repository=mock(Repository.class);
  when(git.getRepository()).thenReturn(repository);
  StoredConfig storedConfig=mock(StoredConfig.class);
  when(repository.getConfig()).thenReturn(storedConfig);
  when(storedConfig.getString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(statusCommand.call()).thenReturn(status);
  when(status.isClean()).thenReturn(true);
  FetchCommand fetchCommand=mock(FetchCommand.class);
  FetchResult fetchResult=mock(FetchResult.class);
  when(git.fetch()).thenReturn(fetchCommand);
  when(fetchCommand.setRemote(anyString())).thenReturn(fetchCommand);
  when(fetchCommand.call()).thenThrow(new InvalidRemoteException(""String_Node_Str""));
  CheckoutCommand checkoutCommand=mock(CheckoutCommand.class);
  ListBranchCommand listBranchCommand=mock(ListBranchCommand.class);
  when(git.checkout()).thenReturn(checkoutCommand);
  when(git.branchList()).thenReturn(listBranchCommand);
  List<Ref> refs=new ArrayList<>();
  Ref ref=mock(Ref.class);
  refs.add(ref);
  when(ref.getName()).thenReturn(""String_Node_Str"");
  when(listBranchCommand.call()).thenReturn(refs);
  MergeCommand mergeCommand=mock(MergeCommand.class);
  when(git.merge()).thenReturn(mergeCommand);
  when(mergeCommand.call()).thenThrow(new NotMergedException());
  Ref headRef=mock(Ref.class);
  when(repository.getRef(anyString())).thenReturn(headRef);
  ObjectId newObjectId=ObjectId.fromRaw(new int[]{1,2,3,4,5});
  when(headRef.getObjectId()).thenReturn(newObjectId);
  SearchPathLocator.Locations locations=this.repository.getLocations(""String_Node_Str"",""String_Node_Str"",null);
  assertEquals(locations.getVersion(),newObjectId.getName());
}","@Test public void testFetchException() throws Exception {
  Git git=mock(Git.class);
  CloneCommand cloneCommand=mock(CloneCommand.class);
  MockGitFactory factory=new MockGitFactory(git,cloneCommand);
  JGitEnvironmentRepository repo=new JGitEnvironmentRepository(this.environment);
  this.repository.setGitFactory(factory);
  StatusCommand statusCommand=mock(StatusCommand.class);
  Status status=mock(Status.class);
  when(git.status()).thenReturn(statusCommand);
  Repository repository=mock(Repository.class);
  when(git.getRepository()).thenReturn(repository);
  StoredConfig storedConfig=mock(StoredConfig.class);
  when(repository.getConfig()).thenReturn(storedConfig);
  when(storedConfig.getString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(statusCommand.call()).thenReturn(status);
  when(status.isClean()).thenReturn(true);
  FetchCommand fetchCommand=mock(FetchCommand.class);
  when(git.fetch()).thenReturn(fetchCommand);
  when(fetchCommand.setRemote(anyString())).thenReturn(fetchCommand);
  when(fetchCommand.call()).thenThrow(new InvalidRemoteException(""String_Node_Str""));
  CheckoutCommand checkoutCommand=mock(CheckoutCommand.class);
  ListBranchCommand listBranchCommand=mock(ListBranchCommand.class);
  when(git.checkout()).thenReturn(checkoutCommand);
  when(git.branchList()).thenReturn(listBranchCommand);
  List<Ref> refs=new ArrayList<>();
  Ref ref=mock(Ref.class);
  refs.add(ref);
  when(ref.getName()).thenReturn(""String_Node_Str"");
  when(listBranchCommand.call()).thenReturn(refs);
  MergeCommand mergeCommand=mock(MergeCommand.class);
  when(git.merge()).thenReturn(mergeCommand);
  when(mergeCommand.call()).thenThrow(new NotMergedException());
  Ref headRef=mock(Ref.class);
  when(repository.getRef(anyString())).thenReturn(headRef);
  ObjectId newObjectId=ObjectId.fromRaw(new int[]{1,2,3,4,5});
  when(headRef.getObjectId()).thenReturn(newObjectId);
  SearchPathLocator.Locations locations=this.repository.getLocations(""String_Node_Str"",""String_Node_Str"",null);
  assertEquals(locations.getVersion(),newObjectId.getName());
}",0.9880924585570862
111707,"/** 
 * Get the working directory ready.
 */
private String refresh(String label){
  initialize();
  Git git=null;
  try {
    git=createGitClient();
    if (shouldPull(git)) {
      fetch(git,label);
      checkout(git,label);
      if (isBranch(git,label)) {
        merge(git,label);
        if (!isClean(git)) {
          logger.warn(""String_Node_Str"" + label + ""String_Node_Str"");
          resetHard(git,label,""String_Node_Str"" + label);
        }
      }
    }
 else {
      checkout(git,label);
    }
    return git.getRepository().getRef(""String_Node_Str"").getObjectId().getName();
  }
 catch (  RefNotFoundException e) {
    throw new NoSuchLabelException(""String_Node_Str"" + label);
  }
catch (  GitAPIException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (git != null) {
        git.close();
      }
    }
 catch (    Exception e) {
      this.logger.warn(""String_Node_Str"",e);
    }
  }
}","/** 
 * Get the working directory ready.
 */
private String refresh(String label){
}",0.1494661921708185
111708,"@Test public void testVersionUpdate() throws Exception {
  ConfigServerTestUtils.prepareLocalRepo();
  String uri=ConfigServerTestUtils.copyLocalRepo(""String_Node_Str"");
  File localRepoFile=ResourceUtils.getFile(uri);
  Git localGit=Git.open(localRepoFile.getAbsoluteFile());
  File remoteDir=new File(""String_Node_Str"");
  if (remoteDir.exists()) {
    FileSystemUtils.deleteRecursively(remoteDir);
  }
 else {
    remoteDir.mkdirs();
  }
  Git remoteGit=Git.cloneRepository().setURI(""String_Node_Str"" + localRepoFile.getAbsolutePath()).setDirectory(remoteDir).setBranch(""String_Node_Str"").setCloneAllBranches(true).call();
  StoredConfig config=localGit.getRepository().getConfig();
  config.setString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",remoteDir.getAbsolutePath());
  config.setString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  config.save();
  CheckoutCommand checkout=localGit.checkout();
  checkout.setName(""String_Node_Str"");
  Ref localRef=checkout.call();
  String localVersion=localRef.getObjectId().getName();
  checkout=remoteGit.checkout();
  checkout.setName(""String_Node_Str"");
  Ref remoteRef=checkout.call();
  String remoteVersion=remoteRef.getObjectId().getName();
  assertEquals(remoteVersion,localVersion);
  this.context=new SpringApplicationBuilder(TestConfiguration.class).web(false).properties(""String_Node_Str"" + ""String_Node_Str"" + localRepoFile.getAbsolutePath()).run();
  EnvironmentRepository repository=this.context.getBean(EnvironmentRepository.class);
  Environment environment=repository.findOne(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(environment.getVersion(),remoteVersion);
  FileOutputStream out=new FileOutputStream(remoteDir.getAbsolutePath() + ""String_Node_Str"");
  StreamUtils.copy(""String_Node_Str"",Charset.defaultCharset(),out);
  remoteGit.add().addFilepattern(""String_Node_Str"").call();
  remoteGit.commit().setMessage(""String_Node_Str"").call();
  environment=repository.findOne(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  checkout=localGit.checkout();
  checkout.setName(""String_Node_Str"");
  localRef=checkout.call();
  String updatedLocalVersion=localRef.getObjectId().getName();
  checkout=remoteGit.checkout();
  checkout.setName(""String_Node_Str"");
  remoteRef=checkout.call();
  String updatedRemoteVersion=remoteRef.getObjectId().getName();
  Assert.assertEquals(updatedRemoteVersion,updatedLocalVersion);
  Assert.assertNotEquals(updatedRemoteVersion,remoteVersion);
  Assert.assertNotEquals(updatedLocalVersion,localVersion);
  Assert.assertEquals(environment.getVersion(),updatedRemoteVersion);
}","@Test public void testVersionUpdate() throws Exception {
  ConfigServerTestUtils.prepareLocalRepo();
  String uri=ConfigServerTestUtils.copyLocalRepo(""String_Node_Str"");
  File localRepoFile=ResourceUtils.getFile(uri);
  Git localGit=Git.open(localRepoFile.getAbsoluteFile());
  File remoteDir=new File(""String_Node_Str"");
  if (remoteDir.exists()) {
    FileSystemUtils.deleteRecursively(remoteDir);
  }
 else {
    remoteDir.mkdirs();
  }
  Git remoteGit=Git.cloneRepository().setURI(""String_Node_Str"" + localRepoFile.getAbsolutePath()).setDirectory(remoteDir).setBranch(""String_Node_Str"").setCloneAllBranches(true).call();
  StoredConfig config=localGit.getRepository().getConfig();
  config.setString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",remoteDir.getAbsolutePath());
  config.setString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  config.save();
  CheckoutCommand checkout=localGit.checkout();
  checkout.setName(""String_Node_Str"");
  Ref localRef=checkout.call();
  String localVersion=localRef.getObjectId().getName();
  checkout=remoteGit.checkout();
  checkout.setName(""String_Node_Str"");
  Ref remoteRef=checkout.call();
  String remoteVersion=remoteRef.getObjectId().getName();
  assertEquals(remoteVersion,localVersion);
  this.context=new SpringApplicationBuilder(TestConfiguration.class).web(false).properties(""String_Node_Str"" + ""String_Node_Str"" + localRepoFile.getAbsolutePath()).run();
  EnvironmentRepository repository=this.context.getBean(EnvironmentRepository.class);
  Environment environment=repository.findOne(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(environment.getVersion(),remoteVersion);
  FileOutputStream out=new FileOutputStream(remoteDir.getAbsolutePath() + ""String_Node_Str"");
  StreamUtils.copy(""String_Node_Str"",Charset.defaultCharset(),out);
  remoteGit.add().addFilepattern(""String_Node_Str"").call();
  remoteGit.commit().setMessage(""String_Node_Str"").call();
  environment=repository.findOne(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  checkout=localGit.checkout();
  checkout.setName(""String_Node_Str"");
  localRef=checkout.call();
  String updatedLocalVersion=localRef.getObjectId().getName();
  checkout=remoteGit.checkout();
  checkout.setName(""String_Node_Str"");
  remoteRef=checkout.call();
  String updatedRemoteVersion=remoteRef.getObjectId().getName();
  assertEquals(updatedRemoteVersion,updatedLocalVersion);
  assertNotEquals(updatedRemoteVersion,remoteVersion);
  assertNotEquals(updatedLocalVersion,localVersion);
  assertEquals(environment.getVersion(),updatedRemoteVersion);
}",0.9946909366704588
111709,"boolean shouldPull(Git git) throws GitAPIException {
  boolean shouldPull;
  Status gitStatus=git.status().call();
  boolean isWorkingTreeClean=gitStatus.isClean();
  String originUrl=git.getRepository().getConfig().getString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (this.forcePull && !isWorkingTreeClean) {
    shouldPull=true;
    logDirty(gitStatus);
  }
 else {
    shouldPull=isWorkingTreeClean && originUrl != null;
  }
  if (!isWorkingTreeClean && !this.forcePull) {
    this.logger.info(""String_Node_Str"" + originUrl + ""String_Node_Str"");
  }
  return shouldPull;
}","public boolean shouldPull(Git git) throws GitAPIException {
  boolean shouldPull;
  Status gitStatus=git.status().call();
  boolean isWorkingTreeClean=gitStatus.isClean();
  String originUrl=git.getRepository().getConfig().getString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (this.forcePull && !isWorkingTreeClean) {
    shouldPull=true;
    logDirty(gitStatus);
  }
 else {
    shouldPull=isWorkingTreeClean && originUrl != null;
  }
  if (!isWorkingTreeClean && !this.forcePull) {
    this.logger.info(""String_Node_Str"" + originUrl + ""String_Node_Str"");
  }
  return shouldPull;
}",0.994142259414226
111710,"/** 
 * Get the working directory ready.
 */
private String refresh(String application,String label){
  initialize();
  Git git=null;
  try {
    git=createGitClient();
    if (shouldPull(git)) {
      FetchResult fetchResult=fetch(git,label);
      checkout(git,label);
      if (isBranch(git,label)) {
        MergeResult mergeResult=merge(git,label);
        if (!isClean(git)) {
          logger.warn(""String_Node_Str"" + label + ""String_Node_Str"");
          resetHard(git,label,""String_Node_Str"" + label);
        }
      }
    }
 else {
      checkout(git,label);
    }
    return git.getRepository().getRef(""String_Node_Str"").getObjectId().getName();
  }
 catch (  RefNotFoundException e) {
    throw new NoSuchLabelException(""String_Node_Str"" + label);
  }
catch (  GitAPIException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (git != null) {
        git.close();
      }
    }
 catch (    Exception e) {
      this.logger.warn(""String_Node_Str"",e);
    }
  }
}","/** 
 * Get the working directory ready.
 */
private String refresh(String label){
  initialize();
  Git git=null;
  try {
    git=createGitClient();
    if (shouldPull(git)) {
      fetch(git,label);
      checkout(git,label);
      if (isBranch(git,label)) {
        merge(git,label);
        if (!isClean(git)) {
          logger.warn(""String_Node_Str"" + label + ""String_Node_Str"");
          resetHard(git,label,""String_Node_Str"" + label);
        }
      }
    }
 else {
      checkout(git,label);
    }
    return git.getRepository().getRef(""String_Node_Str"").getObjectId().getName();
  }
 catch (  RefNotFoundException e) {
    throw new NoSuchLabelException(""String_Node_Str"" + label);
  }
catch (  GitAPIException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (git != null) {
        git.close();
      }
    }
 catch (    Exception e) {
      this.logger.warn(""String_Node_Str"",e);
    }
  }
}",0.9687936655798788
111711,"@Override public synchronized Locations getLocations(String application,String profile,String label){
  if (label == null) {
    label=this.defaultLabel;
  }
  String version=refresh(application,label);
  return new Locations(application,profile,label,version,getSearchLocations(getWorkingDirectory(),application,profile,label));
}","@Override public synchronized Locations getLocations(String application,String profile,String label){
  if (label == null) {
    label=this.defaultLabel;
  }
  String version=refresh(label);
  return new Locations(application,profile,label,version,getSearchLocations(getWorkingDirectory(),application,profile,label));
}",0.9815384615384616
111712,"/** 
 * Get the working directory ready.
 */
private Ref refresh(String application,String label){
  initialize();
  Git git=null;
  try {
    git=createGitClient();
    git.getRepository().getConfig().setString(""String_Node_Str"",label,""String_Node_Str"",label);
    Ref ref=checkout(git,label);
    if (shouldPull(git,ref)) {
      pull(git,label,ref);
      if (!isClean(git)) {
        logger.warn(""String_Node_Str"" + label + ""String_Node_Str"");
        fetch(git,label,""String_Node_Str"");
        resetHard(git,label,""String_Node_Str"" + label);
      }
    }
    return ref;
  }
 catch (  RefNotFoundException e) {
    throw new NoSuchLabelException(""String_Node_Str"" + label);
  }
catch (  GitAPIException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (git != null) {
        git.close();
      }
    }
 catch (    Exception e) {
      this.logger.warn(""String_Node_Str"",e);
    }
  }
}","/** 
 * Get the working directory ready.
 */
private Ref refresh(String application,String label){
  initialize();
  Git git=null;
  try {
    git=createGitClient();
    git.getRepository().getConfig().setString(""String_Node_Str"",label,""String_Node_Str"",label);
    Ref ref=checkout(git,label);
    if (shouldPull(git,ref)) {
      pull(git,label,ref);
      ref=git.getRepository().getRef(ref.getName());
      if (!isClean(git)) {
        logger.warn(""String_Node_Str"" + label + ""String_Node_Str"");
        fetch(git,label,""String_Node_Str"");
        resetHard(git,label,""String_Node_Str"" + label);
      }
    }
    return ref;
  }
 catch (  RefNotFoundException e) {
    throw new NoSuchLabelException(""String_Node_Str"" + label);
  }
catch (  GitAPIException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (git != null) {
        git.close();
      }
    }
 catch (    Exception e) {
      this.logger.warn(""String_Node_Str"",e);
    }
  }
}",0.97484575225439
111713,"@Test public void testVersionUpdate() throws Exception {
  ConfigServerTestUtils.prepareLocalRepo();
  String uri=ConfigServerTestUtils.copyLocalRepo(""String_Node_Str"");
  File localRepoFile=ResourceUtils.getFile(uri);
  Git localGit=Git.open(localRepoFile.getAbsoluteFile());
  File remoteDir=new File(""String_Node_Str"");
  if (remoteDir.exists()) {
    FileSystemUtils.deleteRecursively(remoteDir);
  }
 else {
    remoteDir.mkdirs();
  }
  Git remoteGit=Git.cloneRepository().setURI(""String_Node_Str"" + localRepoFile.getAbsolutePath()).setDirectory(remoteDir).setBranch(""String_Node_Str"").setCloneAllBranches(true).call();
  StoredConfig config=localGit.getRepository().getConfig();
  config.setString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",remoteDir.getAbsolutePath());
  config.setString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  config.save();
  CheckoutCommand checkout=localGit.checkout();
  checkout.setName(""String_Node_Str"");
  Ref localRef=checkout.call();
  String localVersion=localRef.getObjectId().getName();
  checkout=remoteGit.checkout();
  checkout.setName(""String_Node_Str"");
  Ref remoteRef=checkout.call();
  String remoteVersion=remoteRef.getObjectId().getName();
  assertEquals(remoteVersion,localVersion);
  this.context=new SpringApplicationBuilder(TestConfiguration.class).web(false).properties(""String_Node_Str"" + ""String_Node_Str"" + localRepoFile.getAbsolutePath()).run();
  EnvironmentRepository repository=this.context.getBean(EnvironmentRepository.class);
  Environment environment=repository.findOne(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(environment.getVersion(),remoteVersion);
  FileOutputStream out=new FileOutputStream(remoteDir.getAbsolutePath() + ""String_Node_Str"");
  StreamUtils.copy(""String_Node_Str"",Charset.defaultCharset(),out);
  remoteGit.add().addFilepattern(""String_Node_Str"").call();
  remoteGit.commit().setMessage(""String_Node_Str"").call();
  environment=repository.findOne(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  checkout=localGit.checkout();
  checkout.setName(""String_Node_Str"");
  localRef=checkout.call();
  String updatedLocalVersion=localRef.getObjectId().getName();
  checkout=remoteGit.checkout();
  checkout.setName(""String_Node_Str"");
  remoteRef=checkout.call();
  String updatedRemoteVersion=remoteRef.getObjectId().getName();
  assertEquals(updatedRemoteVersion,updatedLocalVersion);
  assertNotEquals(updatedRemoteVersion,remoteVersion);
  assertNotEquals(updatedLocalVersion,localVersion);
  assertEquals(environment.getVersion(),updatedRemoteVersion);
}","@Test public void testVersionUpdate() throws Exception {
  ConfigServerTestUtils.prepareLocalRepo();
  String uri=ConfigServerTestUtils.copyLocalRepo(""String_Node_Str"");
  File localRepoFile=ResourceUtils.getFile(uri);
  Git localGit=Git.open(localRepoFile.getAbsoluteFile());
  File remoteDir=new File(""String_Node_Str"");
  if (remoteDir.exists()) {
    FileSystemUtils.deleteRecursively(remoteDir);
  }
 else {
    remoteDir.mkdirs();
  }
  Git remoteGit=Git.cloneRepository().setURI(""String_Node_Str"" + localRepoFile.getAbsolutePath()).setDirectory(remoteDir).setBranch(""String_Node_Str"").setCloneAllBranches(true).call();
  StoredConfig config=localGit.getRepository().getConfig();
  config.setString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",remoteDir.getAbsolutePath());
  config.setString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  config.save();
  CheckoutCommand checkout=localGit.checkout();
  checkout.setName(""String_Node_Str"");
  Ref localRef=checkout.call();
  String localVersion=localRef.getObjectId().getName();
  checkout=remoteGit.checkout();
  checkout.setName(""String_Node_Str"");
  Ref remoteRef=checkout.call();
  String remoteVersion=remoteRef.getObjectId().getName();
  assertEquals(remoteVersion,localVersion);
  this.context=new SpringApplicationBuilder(TestConfiguration.class).web(false).properties(""String_Node_Str"" + ""String_Node_Str"" + localRepoFile.getAbsolutePath()).run();
  EnvironmentRepository repository=this.context.getBean(EnvironmentRepository.class);
  Environment environment=repository.findOne(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(environment.getVersion(),remoteVersion);
  FileOutputStream out=new FileOutputStream(remoteDir.getAbsolutePath() + ""String_Node_Str"");
  StreamUtils.copy(""String_Node_Str"",Charset.defaultCharset(),out);
  remoteGit.add().addFilepattern(""String_Node_Str"").call();
  remoteGit.commit().setMessage(""String_Node_Str"").call();
  environment=repository.findOne(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  checkout=localGit.checkout();
  checkout.setName(""String_Node_Str"");
  localRef=checkout.call();
  String updatedLocalVersion=localRef.getObjectId().getName();
  checkout=remoteGit.checkout();
  checkout.setName(""String_Node_Str"");
  remoteRef=checkout.call();
  String updatedRemoteVersion=remoteRef.getObjectId().getName();
  Assert.assertEquals(updatedRemoteVersion,updatedLocalVersion);
  Assert.assertNotEquals(updatedRemoteVersion,remoteVersion);
  Assert.assertNotEquals(updatedLocalVersion,localVersion);
  Assert.assertEquals(environment.getVersion(),updatedRemoteVersion);
}",0.9946909366704588
111714,"public ResourceController(ResourceRepository resourceRepository,EnvironmentRepository environmentRepository){
  this.resourceRepository=resourceRepository;
  this.environmentRepository=environmentRepository;
}","public ResourceController(ResourceRepository resourceRepository,EnvironmentRepository environmentRepository){
  this.resourceRepository=resourceRepository;
  this.environmentRepository=environmentRepository;
  this.helper.setAlwaysUseFullPath(true);
}",0.908695652173913
111715,"@Test public void resourceWithSlashRequest() throws Exception {
  this.environmentRepository.setSearchLocations(""String_Node_Str"");
  MockHttpServletRequest request=new MockHttpServletRequest();
  request.setPathInfo(""String_Node_Str"" + ""String_Node_Str"");
  String resource=this.controller.resolve(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",request);
  assertEquals(""String_Node_Str"",resource);
}","@Test public void resourceWithSlashRequest() throws Exception {
  this.environmentRepository.setSearchLocations(""String_Node_Str"");
  MockHttpServletRequest request=new MockHttpServletRequest();
  request.setRequestURI(""String_Node_Str"" + ""String_Node_Str"");
  String resource=this.controller.resolve(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",request);
  assertEquals(""String_Node_Str"",resource);
}",0.5207823960880196
111716,"@Test public void resourceWithSlashForBinaryRequest() throws Exception {
  this.environmentRepository.setSearchLocations(""String_Node_Str"");
  MockHttpServletRequest request=new MockHttpServletRequest();
  request.setPathInfo(""String_Node_Str"" + ""String_Node_Str"");
  byte[] resource=this.controller.binary(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",request);
  assertEquals(""String_Node_Str"",new String(resource));
}","@Test public void resourceWithSlashForBinaryRequest() throws Exception {
  this.environmentRepository.setSearchLocations(""String_Node_Str"");
  MockHttpServletRequest request=new MockHttpServletRequest();
  request.setRequestURI(""String_Node_Str"" + ""String_Node_Str"");
  byte[] resource=this.controller.binary(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",request);
  assertEquals(""String_Node_Str"",new String(resource));
}",0.9813519813519812
111717,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String encrypt(@PathVariable String name,@PathVariable String profiles,@RequestBody String data,@RequestHeader(""String_Node_Str"") MediaType type){
  checkEncryptorInstalled(name,profiles);
  try {
    String input=stripFormData(data,type,false);
    Map<String,String> keys=this.helper.getEncryptorKeys(name,profiles,input);
    String encrypted=this.helper.addPrefix(keys,this.encryptor.locate(keys).encrypt(input));
    logger.info(""String_Node_Str"");
    return encrypted;
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidCipherException();
  }
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String encrypt(@PathVariable String name,@PathVariable String profiles,@RequestBody String data,@RequestHeader(""String_Node_Str"") MediaType type){
  checkEncryptorInstalled(name,profiles);
  try {
    String input=stripFormData(data,type,false);
    Map<String,String> keys=this.helper.getEncryptorKeys(name,profiles,input);
    String textToEncrypt=this.helper.stripPrefix(input);
    String encrypted=this.helper.addPrefix(keys,this.encryptor.locate(keys).encrypt(textToEncrypt));
    logger.info(""String_Node_Str"");
    return encrypted;
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidCipherException();
  }
}",0.9277736411020104
111718,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String decrypt(@PathVariable String name,@PathVariable String profiles,@RequestBody String data,@RequestHeader(""String_Node_Str"") MediaType type){
  checkEncryptorInstalled(name,profiles);
  try {
    String input=stripFormData(data,type,true);
    String decrypted=this.helper.stripPrefix(this.encryptor.locate(this.helper.getEncryptorKeys(name,profiles,input)).decrypt(this.helper.stripPrefix(input)));
    logger.info(""String_Node_Str"");
    return decrypted;
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidCipherException();
  }
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String decrypt(@PathVariable String name,@PathVariable String profiles,@RequestBody String data,@RequestHeader(""String_Node_Str"") MediaType type){
  checkEncryptorInstalled(name,profiles);
  try {
    String input=stripFormData(data,type,true);
    Map<String,String> encryptorKeys=this.helper.getEncryptorKeys(name,profiles,input);
    TextEncryptor encryptor=this.encryptor.locate(encryptorKeys);
    String encryptedText=this.helper.stripPrefix(input);
    String decrypted=encryptor.decrypt(encryptedText);
    logger.info(""String_Node_Str"");
    return decrypted;
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidCipherException();
  }
}",0.7349042709867453
111719,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String encrypt(@PathVariable String name,@PathVariable String profiles,@RequestBody String data,@RequestHeader(""String_Node_Str"") MediaType type){
  checkEncryptorInstalled(name,profiles);
  try {
    String input=stripFormData(data,type,false);
    Map<String,String> keys=this.helper.getEncryptorKeys(name,profiles,input);
    String encrypted=this.helper.addPrefix(keys,this.encryptor.locate(keys).encrypt(input));
    logger.info(""String_Node_Str"");
    return encrypted;
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidCipherException();
  }
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String encrypt(@PathVariable String name,@PathVariable String profiles,@RequestBody String data,@RequestHeader(""String_Node_Str"") MediaType type){
  checkEncryptorInstalled(name,profiles);
  try {
    String input=stripFormData(data,type,false);
    Map<String,String> keys=this.helper.getEncryptorKeys(name,profiles,input);
    String textToEncrypt=this.helper.stripPrefix(input);
    String encrypted=this.helper.addPrefix(keys,this.encryptor.locate(keys).encrypt(textToEncrypt));
    logger.info(""String_Node_Str"");
    return encrypted;
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidCipherException();
  }
}",0.9277736411020104
111720,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String decrypt(@PathVariable String name,@PathVariable String profiles,@RequestBody String data,@RequestHeader(""String_Node_Str"") MediaType type){
  checkEncryptorInstalled(name,profiles);
  try {
    String input=stripFormData(data,type,true);
    Map<String,String> encryptorKeys=this.helper.getEncryptorKeys(name,profiles,input);
    TextEncryptor encryptor=this.encryptor.locate(encryptorKeys);
    String encryptedText=this.helper.stripPrefix(input);
    String decrypted=this.helper.stripPrefix(encryptor.decrypt(encryptedText));
    logger.info(""String_Node_Str"");
    return decrypted;
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidCipherException();
  }
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String decrypt(@PathVariable String name,@PathVariable String profiles,@RequestBody String data,@RequestHeader(""String_Node_Str"") MediaType type){
  checkEncryptorInstalled(name,profiles);
  try {
    String input=stripFormData(data,type,true);
    Map<String,String> encryptorKeys=this.helper.getEncryptorKeys(name,profiles,input);
    TextEncryptor encryptor=this.encryptor.locate(encryptorKeys);
    String encryptedText=this.helper.stripPrefix(input);
    String decrypted=encryptor.decrypt(encryptedText);
    logger.info(""String_Node_Str"");
    return decrypted;
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidCipherException();
  }
}",0.9429147078576224
111721,"@RequestMapping(method=RequestMethod.POST) public Set<String> notifyByPath(@RequestHeader MultiValueMap<String,String> headers,@RequestBody Map<String,Object> request){
  PropertyPathNotification notification=this.extractor.extract(headers,request);
  if (notification != null) {
    Set<String> services=new HashSet<>();
    for (    String path : notification.getPaths()) {
      services.addAll(guessServiceName(path));
    }
    if (this.applicationEventPublisher != null) {
      for (      String service : services) {
        log.info(""String_Node_Str"" + service);
        this.applicationEventPublisher.publishEvent(new RefreshRemoteApplicationEvent(this,this.contextId,service));
      }
      return services;
    }
  }
  return Collections.emptySet();
}","@RequestMapping(method=RequestMethod.POST) public Set<String> notifyByPath(@RequestHeader MultiValueMap<String,String> headers,@RequestBody Map<String,Object> request){
  PropertyPathNotification notification=this.extractor.extract(headers,request);
  if (notification != null) {
    Set<String> services=new LinkedHashSet<>();
    for (    String path : notification.getPaths()) {
      services.addAll(guessServiceName(path));
    }
    if (this.applicationEventPublisher != null) {
      for (      String service : services) {
        log.info(""String_Node_Str"" + service);
        this.applicationEventPublisher.publishEvent(new RefreshRemoteApplicationEvent(this,this.contextId,service));
      }
      return services;
    }
  }
  return Collections.emptySet();
}",0.9960886571056062
111722,"private void postProcessProperties(Map<String,Object> propertiesMap){
  for (  String key : propertiesMap.keySet()) {
    if (key.equals(""String_Node_Str"")) {
      propertiesMap.remove(key);
    }
  }
}","private void postProcessProperties(Map<String,Object> propertiesMap){
  for (Iterator<String> iter=propertiesMap.keySet().iterator(); iter.hasNext(); ) {
    String key=iter.next();
    if (key.equals(""String_Node_Str"")) {
      iter.remove();
    }
  }
}",0.6681222707423581
111723,"protected Environment clean(Environment value){
  Environment result=new Environment(value.getName(),value.getProfiles(),value.getLabel());
  for (  PropertySource source : value.getPropertySources()) {
    String name=source.getName();
    if (environment.getPropertySources().contains(name)) {
      continue;
    }
    name=name.replace(""String_Node_Str"",""String_Node_Str"");
    name=name.replace(""String_Node_Str"",""String_Node_Str"");
    if (searchLocations != null) {
      boolean matches=false;
      String normal=name;
      if (normal.startsWith(""String_Node_Str"")) {
        normal=new File(normal.substring(""String_Node_Str"".length())).getAbsolutePath();
      }
      for (      String pattern : StringUtils.commaDelimitedListToStringArray(getLocations(searchLocations,result.getLabel()))) {
        if (!pattern.contains(""String_Node_Str"")) {
          pattern=""String_Node_Str"" + pattern;
        }
        if (pattern.startsWith(""String_Node_Str"")) {
          pattern=StringUtils.cleanPath(new File(pattern.substring(""String_Node_Str"".length())).getAbsolutePath()) + ""String_Node_Str"";
        }
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + pattern + ""String_Node_Str""+ name);
        }
        if (normal.startsWith(pattern) && !normal.substring(pattern.length()).contains(""String_Node_Str"")) {
          matches=true;
          break;
        }
      }
      if (!matches) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + name);
        }
        continue;
      }
    }
    logger.info(""String_Node_Str"" + name);
    result.add(new PropertySource(name,source.getSource()));
  }
  return result;
}","protected Environment clean(Environment value){
  Environment result=new Environment(value.getName(),value.getProfiles(),value.getLabel());
  for (  PropertySource source : value.getPropertySources()) {
    String name=source.getName();
    if (environment.getPropertySources().contains(name)) {
      continue;
    }
    name=name.replace(""String_Node_Str"",""String_Node_Str"");
    name=name.replace(""String_Node_Str"",""String_Node_Str"");
    if (searchLocations != null) {
      boolean matches=false;
      String normal=name;
      if (normal.startsWith(""String_Node_Str"")) {
        normal=StringUtils.cleanPath(new File(normal.substring(""String_Node_Str"".length())).getAbsolutePath());
      }
      for (      String pattern : StringUtils.commaDelimitedListToStringArray(getLocations(searchLocations,result.getLabel()))) {
        if (!pattern.contains(""String_Node_Str"")) {
          pattern=""String_Node_Str"" + pattern;
        }
        if (pattern.startsWith(""String_Node_Str"")) {
          pattern=StringUtils.cleanPath(new File(pattern.substring(""String_Node_Str"".length())).getAbsolutePath()) + ""String_Node_Str"";
        }
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + pattern + ""String_Node_Str""+ name);
        }
        if (normal.startsWith(pattern) && !normal.substring(pattern.length()).contains(""String_Node_Str"")) {
          matches=true;
          break;
        }
      }
      if (!matches) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + name);
        }
        continue;
      }
    }
    logger.info(""String_Node_Str"" + name);
    result.add(new PropertySource(name,source.getSource()));
  }
  return result;
}",0.9932333039129156
111724,"public Environment decrypt(Environment environment){
  Environment result=new Environment(environment.getName(),environment.getLabel());
  for (  PropertySource source : environment.getPropertySources()) {
    Map<Object,Object> map=new LinkedHashMap<Object,Object>(source.getSource());
    for (    Entry<Object,Object> entry : map.entrySet()) {
      Object key=entry.getKey();
      String name=key.toString();
      String value=entry.getValue().toString();
      if (value.startsWith(""String_Node_Str"")) {
        map.remove(key);
        if (encryptor == null) {
          map.put(name,value);
        }
 else {
          try {
            value=value == null ? null : encryptor.decrypt(value.substring(""String_Node_Str"".length()));
          }
 catch (          Exception e) {
            value=""String_Node_Str"";
            name=""String_Node_Str"" + name;
            logger.warn(""String_Node_Str"" + key + ""String_Node_Str""+ e.getClass()+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
          }
          map.put(name,value);
        }
      }
    }
    result.add(new PropertySource(source.getName(),map));
  }
  return result;
}","public Environment decrypt(Environment environment){
  Environment result=new Environment(environment.getName(),environment.getLabel());
  for (  PropertySource source : environment.getPropertySources()) {
    Map<Object,Object> map=new LinkedHashMap<Object,Object>(source.getSource());
    for (    Entry<Object,Object> entry : new LinkedHashSet<>(map.entrySet())) {
      Object key=entry.getKey();
      String name=key.toString();
      String value=entry.getValue().toString();
      if (value.startsWith(""String_Node_Str"")) {
        map.remove(key);
        if (encryptor == null) {
          map.put(name,value);
        }
 else {
          try {
            value=value == null ? null : encryptor.decrypt(value.substring(""String_Node_Str"".length()));
          }
 catch (          Exception e) {
            value=""String_Node_Str"";
            name=""String_Node_Str"" + name;
            logger.warn(""String_Node_Str"" + key + ""String_Node_Str""+ e.getClass()+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
          }
          map.put(name,value);
        }
      }
    }
    result.add(new PropertySource(source.getName(),map));
  }
  return result;
}",0.9797326433807676
111725,"@Override public org.springframework.core.env.PropertySource<?> locate(org.springframework.core.env.Environment environment){
  ConfigClientProperties client=defaults.override(environment);
  CompositePropertySource composite=new CompositePropertySource(""String_Node_Str"");
  RestTemplate restTemplate=this.restTemplate == null ? getSecureRestTemplate(client) : this.restTemplate;
  RuntimeException error=null;
  String errorBody=null;
  try {
    Environment result=restTemplate.exchange(client.getRawUri() + ""String_Node_Str"",HttpMethod.GET,new HttpEntity<Void>((Void)null),Environment.class,client.getName(),client.getProfile(),client.getLabel()).getBody();
    for (    PropertySource source : result.getPropertySources()) {
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> map=(Map<String,Object>)source.getSource();
      composite.addPropertySource(new MapPropertySource(source.getName(),map));
    }
    return composite;
  }
 catch (  HttpServerErrorException e) {
    error=e;
    if (MediaType.APPLICATION_JSON.includes(e.getResponseHeaders().getContentType())) {
      errorBody=e.getResponseBodyAsString();
    }
  }
catch (  Exception e) {
    error=new IllegalStateException(""String_Node_Str"",e);
  }
  if (client != null && client.isFailFast()) {
    throw error;
  }
  logger.error(""String_Node_Str"" + (errorBody == null ? error.getMessage() : errorBody));
  return null;
}","@Override public org.springframework.core.env.PropertySource<?> locate(org.springframework.core.env.Environment environment){
  ConfigClientProperties client=defaults.override(environment);
  CompositePropertySource composite=new CompositePropertySource(""String_Node_Str"");
  RestTemplate restTemplate=this.restTemplate == null ? getSecureRestTemplate(client) : this.restTemplate;
  Exception error=null;
  String errorBody=null;
  try {
    Environment result=restTemplate.exchange(client.getRawUri() + ""String_Node_Str"",HttpMethod.GET,new HttpEntity<Void>((Void)null),Environment.class,client.getName(),client.getProfile(),client.getLabel()).getBody();
    for (    PropertySource source : result.getPropertySources()) {
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> map=(Map<String,Object>)source.getSource();
      composite.addPropertySource(new MapPropertySource(source.getName(),map));
    }
    return composite;
  }
 catch (  HttpServerErrorException e) {
    error=e;
    if (MediaType.APPLICATION_JSON.includes(e.getResponseHeaders().getContentType())) {
      errorBody=e.getResponseBodyAsString();
    }
  }
catch (  Exception e) {
    error=e;
  }
  if (client != null && client.isFailFast()) {
    throw new IllegalStateException(""String_Node_Str"",error);
  }
  logger.error(""String_Node_Str"" + (errorBody == null ? error.getMessage() : errorBody));
  return null;
}",0.9482327740092824
111726,"@Test public void failFast() throws Exception {
  ClientHttpRequestFactory requestFactory=Mockito.mock(ClientHttpRequestFactory.class);
  ClientHttpRequest request=Mockito.mock(ClientHttpRequest.class);
  ClientHttpResponse response=Mockito.mock(ClientHttpResponse.class);
  Mockito.when(requestFactory.createRequest(Mockito.any(URI.class),Mockito.any(HttpMethod.class))).thenReturn(request);
  RestTemplate restTemplate=new RestTemplate(requestFactory);
  ConfigClientProperties defaults=new ConfigClientProperties(environment);
  defaults.setFailFast(true);
  locator=new ConfigServicePropertySourceLocator(defaults);
  Mockito.when(request.getHeaders()).thenReturn(new HttpHeaders());
  Mockito.when(request.execute()).thenReturn(response);
  HttpHeaders headers=new HttpHeaders();
  headers.setContentType(MediaType.APPLICATION_JSON);
  Mockito.when(response.getHeaders()).thenReturn(headers);
  Mockito.when(response.getStatusCode()).thenReturn(HttpStatus.INTERNAL_SERVER_ERROR);
  Mockito.when(response.getBody()).thenReturn(new ByteArrayInputStream(""String_Node_Str"".getBytes()));
  locator.setRestTemplate(restTemplate);
  expected.expect(HttpServerErrorException.class);
  expected.expectMessage(""String_Node_Str"");
  assertNull(locator.locate(environment));
}","@Test public void failFast() throws Exception {
  ClientHttpRequestFactory requestFactory=Mockito.mock(ClientHttpRequestFactory.class);
  ClientHttpRequest request=Mockito.mock(ClientHttpRequest.class);
  ClientHttpResponse response=Mockito.mock(ClientHttpResponse.class);
  Mockito.when(requestFactory.createRequest(Mockito.any(URI.class),Mockito.any(HttpMethod.class))).thenReturn(request);
  RestTemplate restTemplate=new RestTemplate(requestFactory);
  ConfigClientProperties defaults=new ConfigClientProperties(environment);
  defaults.setFailFast(true);
  locator=new ConfigServicePropertySourceLocator(defaults);
  Mockito.when(request.getHeaders()).thenReturn(new HttpHeaders());
  Mockito.when(request.execute()).thenReturn(response);
  HttpHeaders headers=new HttpHeaders();
  headers.setContentType(MediaType.APPLICATION_JSON);
  Mockito.when(response.getHeaders()).thenReturn(headers);
  Mockito.when(response.getStatusCode()).thenReturn(HttpStatus.INTERNAL_SERVER_ERROR);
  Mockito.when(response.getBody()).thenReturn(new ByteArrayInputStream(""String_Node_Str"".getBytes()));
  locator.setRestTemplate(restTemplate);
  expected.expectCause(IsInstanceOf.<Throwable>instanceOf(HttpServerErrorException.class));
  expected.expectMessage(""String_Node_Str"");
  assertNull(locator.locate(environment));
}",0.984102365257852
111727,"private ConfigurableApplicationContext bootstrapServiceContext(ConfigurableEnvironment environment,final SpringApplication application){
  StandardEnvironment bootstrapEnvironment=new StandardEnvironment();
  MutablePropertySources bootstrapProperties=bootstrapEnvironment.getPropertySources();
  for (  PropertySource<?> source : bootstrapProperties) {
    bootstrapProperties.remove(source.getName());
  }
  String configName=environment.resolvePlaceholders(""String_Node_Str"");
  String configLocation=environment.resolvePlaceholders(""String_Node_Str"");
  Map<String,Object> bootstrapMap=new HashMap<>();
  bootstrapMap.put(""String_Node_Str"",configName);
  if (StringUtils.hasText(configLocation)) {
    bootstrapMap.put(""String_Node_Str"",configName);
  }
  bootstrapProperties.addFirst(new MapPropertySource(BOOTSTRAP_PROPERTY_SOURCE_NAME,bootstrapMap));
  bootstrapProperties.addFirst(new MapPropertySource(""String_Node_Str"",Collections.<String,Object>emptyMap()));
  for (  PropertySource<?> source : environment.getPropertySources()) {
    bootstrapProperties.addLast(source);
  }
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  List<String> names=SpringFactoriesLoader.loadFactoryNames(BootstrapConfiguration.class,classLoader);
  SpringApplicationBuilder builder=new SpringApplicationBuilder().profiles(environment.getActiveProfiles()).showBanner(false).environment(bootstrapEnvironment).properties(""String_Node_Str"" + configName).web(false);
  List<Class<?>> sources=new ArrayList<>();
  for (  String name : names) {
    Class<?> cls=ClassUtils.resolveClassName(name,null);
    try {
      cls.getDeclaredAnnotations();
    }
 catch (    Exception e) {
      continue;
    }
    sources.add(cls);
  }
  builder.sources(sources.toArray(new Class[sources.size()]));
  final ConfigurableApplicationContext context=builder.run();
  addAncestorInitializer(application,context);
  bootstrapProperties.remove(""String_Node_Str"");
  return context;
}","private ConfigurableApplicationContext bootstrapServiceContext(ConfigurableEnvironment environment,final SpringApplication application){
  StandardEnvironment bootstrapEnvironment=new StandardEnvironment();
  MutablePropertySources bootstrapProperties=bootstrapEnvironment.getPropertySources();
  for (  PropertySource<?> source : bootstrapProperties) {
    bootstrapProperties.remove(source.getName());
  }
  String configName=environment.resolvePlaceholders(""String_Node_Str"");
  String configLocation=environment.resolvePlaceholders(""String_Node_Str"");
  Map<String,Object> bootstrapMap=new HashMap<>();
  bootstrapMap.put(""String_Node_Str"",configName);
  if (StringUtils.hasText(configLocation)) {
    bootstrapMap.put(""String_Node_Str"",configLocation);
  }
  bootstrapProperties.addFirst(new MapPropertySource(BOOTSTRAP_PROPERTY_SOURCE_NAME,bootstrapMap));
  bootstrapProperties.addFirst(new MapPropertySource(""String_Node_Str"",Collections.<String,Object>emptyMap()));
  for (  PropertySource<?> source : environment.getPropertySources()) {
    bootstrapProperties.addLast(source);
  }
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  List<String> names=SpringFactoriesLoader.loadFactoryNames(BootstrapConfiguration.class,classLoader);
  SpringApplicationBuilder builder=new SpringApplicationBuilder().profiles(environment.getActiveProfiles()).showBanner(false).environment(bootstrapEnvironment).properties(""String_Node_Str"" + configName).web(false);
  List<Class<?>> sources=new ArrayList<>();
  for (  String name : names) {
    Class<?> cls=ClassUtils.resolveClassName(name,null);
    try {
      cls.getDeclaredAnnotations();
    }
 catch (    Exception e) {
      continue;
    }
    sources.add(cls);
  }
  builder.sources(sources.toArray(new Class[sources.size()]));
  final ConfigurableApplicationContext context=builder.run();
  addAncestorInitializer(application,context);
  bootstrapProperties.remove(""String_Node_Str"");
  return context;
}",0.9969712266532056
111728,"public String call() throws Exception {
  logger.debug(""String_Node_Str"");
  try {
    latch.countDown();
    return service.getMessage();
  }
  finally {
    logger.debug(""String_Node_Str"");
  }
}","public String call() throws Exception {
  logger.debug(""String_Node_Str"");
  try {
    return service.getMessage();
  }
  finally {
    latch.countDown();
    logger.debug(""String_Node_Str"");
  }
}",0.883248730964467
111729,"@Test @Repeat(10) @DirtiesContext public void testConcurrentRefresh() throws Exception {
  assertEquals(""String_Node_Str"",service.getMessage());
  properties.setMessage(""String_Node_Str"");
  properties.setDelay(500);
  final CountDownLatch latch=new CountDownLatch(1);
  Future<String> result=executor.submit(new Callable<String>(){
    public String call() throws Exception {
      logger.debug(""String_Node_Str"");
      try {
        latch.countDown();
        return service.getMessage();
      }
  finally {
        logger.debug(""String_Node_Str"");
      }
    }
  }
);
  assertTrue(latch.await(1500,TimeUnit.MILLISECONDS));
  logger.info(""String_Node_Str"");
  scope.refreshAll();
  assertEquals(""String_Node_Str"",service.getMessage());
  assertNotNull(result.get());
  assertEquals(""String_Node_Str"",result.get());
}","@Test @Repeat(10) @DirtiesContext public void testConcurrentRefresh() throws Exception {
  assertEquals(""String_Node_Str"",service.getMessage());
  properties.setMessage(""String_Node_Str"");
  properties.setDelay(500);
  final CountDownLatch latch=new CountDownLatch(1);
  Future<String> result=executor.submit(new Callable<String>(){
    public String call() throws Exception {
      logger.debug(""String_Node_Str"");
      try {
        return service.getMessage();
      }
  finally {
        latch.countDown();
        logger.debug(""String_Node_Str"");
      }
    }
  }
);
  assertTrue(latch.await(1500,TimeUnit.MILLISECONDS));
  logger.info(""String_Node_Str"");
  scope.refreshAll();
  assertEquals(""String_Node_Str"",service.getMessage());
  assertNotNull(result.get());
  assertEquals(""String_Node_Str"",result.get());
}",0.9305724725943972
111730,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case REQUEST_SPEECH:
switch (resultCode) {
case Activity.RESULT_OK:
      setSearchQuery(data,true);
    break;
case Activity.RESULT_CANCELED:
  if (FINISH_ON_RECOGNIZER_CANCELED) {
    if (!hasResults()) {
      if (DEBUG)       Log.v(TAG,""String_Node_Str"");
      getActivity().onBackPressed();
    }
  }
break;
}
break;
}
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case REQUEST_SPEECH:
switch (resultCode) {
case Activity.RESULT_OK:
      setSearchQuery(data,true);
    break;
default :
  if (FINISH_ON_RECOGNIZER_CANCELED) {
    if (!hasResults()) {
      if (DEBUG)       Log.v(TAG,""String_Node_Str"");
      getView().findViewById(R.id.lb_search_bar_speech_orb).requestFocus();
    }
  }
break;
}
break;
}
}",0.8009049773755657
111731,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case REQUEST_SPEECH:
switch (resultCode) {
case Activity.RESULT_OK:
      setSearchQuery(data,true);
    break;
case Activity.RESULT_CANCELED:
  if (FINISH_ON_RECOGNIZER_CANCELED) {
    if (!hasResults()) {
      if (DEBUG)       Log.v(TAG,""String_Node_Str"");
      getActivity().onBackPressed();
    }
  }
break;
}
break;
}
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case REQUEST_SPEECH:
switch (resultCode) {
case Activity.RESULT_OK:
      setSearchQuery(data,true);
    break;
default :
  if (FINISH_ON_RECOGNIZER_CANCELED) {
    if (!hasResults()) {
      if (DEBUG)       Log.v(TAG,""String_Node_Str"");
      getView().findViewById(R.id.lb_search_bar_speech_orb).requestFocus();
    }
  }
break;
}
break;
}
}",0.8009049773755657
111732,"public boolean hasResults(){
  return mRowsAdapter.size() > 0;
}","public boolean hasResults(){
  return mRowsAdapter.size() > 0 && mResultsFound;
}",0.8827586206896552
111733,"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  if (cursor != null && cursor.moveToFirst()) {
    mVideoCursorAdapter.changeCursor(cursor);
    mRowsAdapter.clear();
    HeaderItem header=new HeaderItem(getString(R.string.search_results,mQuery));
    ListRow row=new ListRow(header,mVideoCursorAdapter);
    mRowsAdapter.add(row);
  }
 else {
    mRowsAdapter.clear();
    HeaderItem header=new HeaderItem(getString(R.string.no_search_results,mQuery));
    ListRow row=new ListRow(header,new ArrayObjectAdapter());
    mRowsAdapter.add(row);
  }
}","@Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  int titleRes;
  if (cursor != null && cursor.moveToFirst()) {
    mResultsFound=true;
    titleRes=R.string.search_results;
  }
 else {
    mResultsFound=false;
    titleRes=R.string.no_search_results;
  }
  mVideoCursorAdapter.changeCursor(cursor);
  HeaderItem header=new HeaderItem(getString(titleRes,mQuery));
  mRowsAdapter.clear();
  ListRow row=new ListRow(header,mVideoCursorAdapter);
  mRowsAdapter.add(row);
}",0.458955223880597
111734,"/** 
 * Handles all the video searches and suggestion queries from the Search Manager. When requesting a specific word, the uri alone is required. When searching all of the video for matches, the selectionArgs argument must carry the search query as the first element. All other arguments are ignored.
 */
@Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){
switch (URI_MATCHER.match(uri)) {
case SEARCH_SUGGEST:
    Log.d(TAG,""String_Node_Str"" + selectionArgs[0] + ""String_Node_Str""+ uri);
  if (selectionArgs == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
return getSuggestions(selectionArgs[0]);
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}","/** 
 * Handles all the video searches and suggestion queries from the Search Manager. When requesting a specific word, the uri alone is required. When searching all of the video for matches, the selectionArgs argument must carry the search query as the first element. All other arguments are ignored.
 */
@Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){
switch (URI_MATCHER.match(uri)) {
case SEARCH_SUGGEST:
    Log.d(TAG,""String_Node_Str"" + Arrays.toString(selectionArgs) + ""String_Node_Str""+ uri);
  if (selectionArgs == null || 0 == selectionArgs.length) {
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
return getSuggestions(selectionArgs[0]);
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}",0.9526813880126184
111735,"@Override public void onDestroy(){
  super.onDestroy();
  if (null != mBackgroundTimer) {
    Log.d(TAG,""String_Node_Str"" + mBackgroundTimer.toString());
    mBackgroundTimer.cancel();
  }
}","@Override public void onDestroy(){
  if (null != mBackgroundTimer) {
    Log.d(TAG,""String_Node_Str"" + mBackgroundTimer.toString());
    mBackgroundTimer.cancel();
    mBackgroundTimer=null;
  }
  mBackgroundManager=null;
  super.onDestroy();
}",0.7788018433179723
111736,"@Override public void onResourceReady(GlideDrawable resource,GlideAnimation<? super GlideDrawable> glideAnimation){
  mBackgroundManager.setDrawable(resource);
}","@Override public void onResourceReady(Bitmap resource,GlideAnimation<? super Bitmap> glideAnimation){
  mBackgroundManager.setBitmap(resource);
}",0.8627450980392157
111737,"protected void updateBackground(Drawable drawable){
  BackgroundManager.getInstance(getActivity()).setDrawable(drawable);
}","protected void updateBackground(String uri){
  int width=mMetrics.widthPixels;
  int height=mMetrics.heightPixels;
  Glide.with(getActivity()).load(uri).asBitmap().centerCrop().error(mDefaultBackground).into(new SimpleTarget<Bitmap>(width,height){
    @Override public void onResourceReady(    Bitmap resource,    GlideAnimation<? super Bitmap> glideAnimation){
      mBackgroundManager.setBitmap(resource);
    }
  }
);
  mBackgroundTimer.cancel();
}",0.2229965156794425
111738,"protected void updateBackground(String uri){
  Glide.with(getActivity()).load(uri).centerCrop().error(mDefaultBackground).into(new SimpleTarget<GlideDrawable>(mMetrics.widthPixels,mMetrics.heightPixels){
    @Override public void onResourceReady(    GlideDrawable resource,    GlideAnimation<? super GlideDrawable> glideAnimation){
      mBackgroundManager.setDrawable(resource);
    }
  }
);
}","protected void updateBackground(String uri){
  Glide.with(getActivity()).load(uri).asBitmap().centerCrop().error(mDefaultBackground).into(new SimpleTarget<Bitmap>(mMetrics.widthPixels,mMetrics.heightPixels){
    @Override public void onResourceReady(    Bitmap resource,    GlideAnimation<? super Bitmap> glideAnimation){
      mBackgroundManager.setBitmap(resource);
    }
  }
);
}",0.8943298969072165
111739,"private void setupDetailsOverviewRow(){
  Log.d(TAG,""String_Node_Str"" + mSelectedMovie.toString());
  final DetailsOverviewRow row=new DetailsOverviewRow(mSelectedMovie);
  row.setImageDrawable(getResources().getDrawable(R.drawable.default_background));
  int width=Utils.convertDpToPixel(getActivity().getApplicationContext(),DETAIL_THUMB_WIDTH);
  int height=Utils.convertDpToPixel(getActivity().getApplicationContext(),DETAIL_THUMB_HEIGHT);
  Glide.with(getActivity()).load(mSelectedMovie.getCardImageUrl()).centerCrop().error(R.drawable.default_background).into(new SimpleTarget<GlideDrawable>(width,height){
    @Override public void onResourceReady(    GlideDrawable resource,    GlideAnimation<? super GlideDrawable> glideAnimation){
      Log.d(TAG,""String_Node_Str"" + resource);
      row.setImageDrawable(resource);
      mAdapter.notifyArrayItemRangeChanged(0,mAdapter.size());
    }
  }
);
  row.addAction(new Action(ACTION_WATCH_TRAILER,getResources().getString(R.string.watch_trailer_1),getResources().getString(R.string.watch_trailer_2)));
  row.addAction(new Action(ACTION_RENT,getResources().getString(R.string.rent_1),getResources().getString(R.string.rent_2)));
  row.addAction(new Action(ACTION_BUY,getResources().getString(R.string.buy_1),getResources().getString(R.string.buy_2)));
  mAdapter.add(row);
}","private void setupDetailsOverviewRow(){
  Log.d(TAG,""String_Node_Str"" + mSelectedMovie.toString());
  final DetailsOverviewRow row=new DetailsOverviewRow(mSelectedMovie);
  row.setImageDrawable(getResources().getDrawable(R.drawable.default_background));
  int width=Utils.convertDpToPixel(getActivity().getApplicationContext(),DETAIL_THUMB_WIDTH);
  int height=Utils.convertDpToPixel(getActivity().getApplicationContext(),DETAIL_THUMB_HEIGHT);
  Glide.with(getActivity()).load(mSelectedMovie.getCardImageUrl()).centerCrop().error(R.drawable.default_background).into(new SimpleTarget<GlideDrawable>(width,height){
    @Override public void onResourceReady(    GlideDrawable resource,    GlideAnimation<? super GlideDrawable> glideAnimation){
      Log.d(TAG,""String_Node_Str"" + resource);
      row.setImageDrawable(resource);
      mAdapter.notifyArrayItemRangeChanged(0,mAdapter.size());
    }
  }
);
  SparseArrayObjectAdapter adapter=new SparseArrayObjectAdapter();
  adapter.set(ACTION_WATCH_TRAILER,new Action(ACTION_WATCH_TRAILER,getResources().getString(R.string.watch_trailer_1),getResources().getString(R.string.watch_trailer_2)));
  adapter.set(ACTION_RENT,new Action(ACTION_RENT,getResources().getString(R.string.rent_1),getResources().getString(R.string.rent_2)));
  adapter.set(ACTION_BUY,new Action(ACTION_BUY,getResources().getString(R.string.buy_1),getResources().getString(R.string.buy_2)));
  row.setActionsAdapter(adapter);
  mAdapter.add(row);
}",0.8290935148692224
111740,"@Override public void onStop(){
  super.onStop();
}","@Override public void onStop(){
  mBackgroundManager.release();
  super.onStop();
}",0.7611940298507462
111741,"@Override public void onDestroy(){
  super.onDestroy();
  stopPlayback();
  mVideoView.suspend();
  mSession.release();
}","@Override public void onDestroy(){
  super.onDestroy();
  stopPlayback();
  mVideoView.suspend();
  mVideoView.setVideoPath(null);
  mSession.release();
}",0.88
111742,"@Override public void onStop(){
  stopProgressAutomation();
  super.onStop();
}","@Override public void onStop(){
  stopProgressAutomation();
  mRowsAdapter=null;
  super.onStop();
}",0.88268156424581
111743,"public ThirdStepFragment(int option){
  mOption=option;
}","public ThirdStepFragment(){
}",0.6744186046511628
111744,"@Override public void onDestroy(){
  super.onDestroy();
  if (null != mBackgroundTimer) {
    Log.d(TAG,""String_Node_Str"" + mBackgroundTimer.toString());
    mBackgroundTimer.cancel();
  }
}","@Override public void onDestroy(){
  if (null != mBackgroundTimer) {
    Log.d(TAG,""String_Node_Str"" + mBackgroundTimer.toString());
    mBackgroundTimer.cancel();
    mBackgroundTimer=null;
  }
  mBackgroundManager=null;
  super.onDestroy();
}",0.7788018433179723
111745,"@Override public void onResourceReady(GlideDrawable resource,GlideAnimation<? super GlideDrawable> glideAnimation){
  mBackgroundManager.setDrawable(resource);
}","@Override public void onResourceReady(Bitmap resource,GlideAnimation<? super Bitmap> glideAnimation){
  mBackgroundManager.setBitmap(resource);
}",0.8627450980392157
111746,"protected void updateBackground(Drawable drawable){
  BackgroundManager.getInstance(getActivity()).setDrawable(drawable);
}","protected void updateBackground(String uri){
  int width=mMetrics.widthPixels;
  int height=mMetrics.heightPixels;
  Glide.with(getActivity()).load(uri).asBitmap().centerCrop().error(mDefaultBackground).into(new SimpleTarget<Bitmap>(width,height){
    @Override public void onResourceReady(    Bitmap resource,    GlideAnimation<? super Bitmap> glideAnimation){
      mBackgroundManager.setBitmap(resource);
    }
  }
);
  mBackgroundTimer.cancel();
}",0.2229965156794425
111747,"protected void updateBackground(String uri){
  Glide.with(getActivity()).load(uri).centerCrop().error(mDefaultBackground).into(new SimpleTarget<GlideDrawable>(mMetrics.widthPixels,mMetrics.heightPixels){
    @Override public void onResourceReady(    GlideDrawable resource,    GlideAnimation<? super GlideDrawable> glideAnimation){
      mBackgroundManager.setDrawable(resource);
    }
  }
);
}","protected void updateBackground(String uri){
  Glide.with(getActivity()).load(uri).asBitmap().centerCrop().error(mDefaultBackground).into(new SimpleTarget<Bitmap>(mMetrics.widthPixels,mMetrics.heightPixels){
    @Override public void onResourceReady(    Bitmap resource,    GlideAnimation<? super Bitmap> glideAnimation){
      mBackgroundManager.setBitmap(resource);
    }
  }
);
}",0.8943298969072165
111748,"private void setupDetailsOverviewRow(){
  Log.d(TAG,""String_Node_Str"" + mSelectedMovie.toString());
  final DetailsOverviewRow row=new DetailsOverviewRow(mSelectedMovie);
  row.setImageDrawable(getResources().getDrawable(R.drawable.default_background));
  int width=Utils.convertDpToPixel(getActivity().getApplicationContext(),DETAIL_THUMB_WIDTH);
  int height=Utils.convertDpToPixel(getActivity().getApplicationContext(),DETAIL_THUMB_HEIGHT);
  Glide.with(getActivity()).load(mSelectedMovie.getCardImageUrl()).centerCrop().error(R.drawable.default_background).into(new SimpleTarget<GlideDrawable>(width,height){
    @Override public void onResourceReady(    GlideDrawable resource,    GlideAnimation<? super GlideDrawable> glideAnimation){
      Log.d(TAG,""String_Node_Str"" + resource);
      row.setImageDrawable(resource);
      mAdapter.notifyArrayItemRangeChanged(0,mAdapter.size());
    }
  }
);
  row.addAction(new Action(ACTION_WATCH_TRAILER,getResources().getString(R.string.watch_trailer_1),getResources().getString(R.string.watch_trailer_2)));
  row.addAction(new Action(ACTION_RENT,getResources().getString(R.string.rent_1),getResources().getString(R.string.rent_2)));
  row.addAction(new Action(ACTION_BUY,getResources().getString(R.string.buy_1),getResources().getString(R.string.buy_2)));
  mAdapter.add(row);
}","private void setupDetailsOverviewRow(){
  Log.d(TAG,""String_Node_Str"" + mSelectedMovie.toString());
  final DetailsOverviewRow row=new DetailsOverviewRow(mSelectedMovie);
  row.setImageDrawable(getResources().getDrawable(R.drawable.default_background));
  int width=Utils.convertDpToPixel(getActivity().getApplicationContext(),DETAIL_THUMB_WIDTH);
  int height=Utils.convertDpToPixel(getActivity().getApplicationContext(),DETAIL_THUMB_HEIGHT);
  Glide.with(getActivity()).load(mSelectedMovie.getCardImageUrl()).centerCrop().error(R.drawable.default_background).into(new SimpleTarget<GlideDrawable>(width,height){
    @Override public void onResourceReady(    GlideDrawable resource,    GlideAnimation<? super GlideDrawable> glideAnimation){
      Log.d(TAG,""String_Node_Str"" + resource);
      row.setImageDrawable(resource);
      mAdapter.notifyArrayItemRangeChanged(0,mAdapter.size());
    }
  }
);
  SparseArrayObjectAdapter adapter=new SparseArrayObjectAdapter();
  adapter.set(ACTION_WATCH_TRAILER,new Action(ACTION_WATCH_TRAILER,getResources().getString(R.string.watch_trailer_1),getResources().getString(R.string.watch_trailer_2)));
  adapter.set(ACTION_RENT,new Action(ACTION_RENT,getResources().getString(R.string.rent_1),getResources().getString(R.string.rent_2)));
  adapter.set(ACTION_BUY,new Action(ACTION_BUY,getResources().getString(R.string.buy_1),getResources().getString(R.string.buy_2)));
  row.setActionsAdapter(adapter);
  mAdapter.add(row);
}",0.8290935148692224
111749,"@Override public void onStop(){
  super.onStop();
}","@Override public void onStop(){
  mBackgroundManager.release();
  super.onStop();
}",0.7611940298507462
111750,"@Override public void onDestroy(){
  super.onDestroy();
  stopPlayback();
  mVideoView.suspend();
  mSession.release();
}","@Override public void onDestroy(){
  super.onDestroy();
  stopPlayback();
  mVideoView.suspend();
  mVideoView.setVideoPath(null);
  mSession.release();
}",0.88
111751,"@Override public void onStop(){
  stopProgressAutomation();
  super.onStop();
}","@Override public void onStop(){
  stopProgressAutomation();
  mRowsAdapter=null;
  super.onStop();
}",0.88268156424581
111752,"@Override public void onCreate(Bundle savedInstanceState){
  Log.i(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  sContext=getActivity();
  mItems=new ArrayList<Movie>();
  mSelectedMovie=(Movie)getActivity().getIntent().getSerializableExtra(MovieDetailsActivity.MOVIE);
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(new CardPresenter());
  for (  Map.Entry<String,List<Movie>> entry : movies.entrySet()) {
    if (mSelectedMovie.getCategory().contains(entry.getKey())) {
      List<Movie> list=entry.getValue();
      for (int j=0; j < list.size(); j++) {
        mItems.add(list.get(j));
        if (mSelectedMovie.getTitle().contentEquals(list.get(j).getTitle())) {
          mCurrentItem=j;
        }
      }
    }
  }
  mHandler=new Handler();
  setBackgroundType(BACKGROUND_TYPE);
  setFadingEnabled(false);
  setupRows();
  setOnItemViewSelectedListener(new OnItemViewSelectedListener(){
    @Override public void onItemSelected(    Presenter.ViewHolder itemViewHolder,    Object item,    RowPresenter.ViewHolder rowViewHolder,    Row row){
      Log.i(TAG,""String_Node_Str"" + item + ""String_Node_Str""+ row);
    }
  }
);
  setOnItemViewClickedListener(new OnItemViewClickedListener(){
    @Override public void onItemClicked(    Presenter.ViewHolder itemViewHolder,    Object item,    RowPresenter.ViewHolder rowViewHolder,    Row row){
      Log.i(TAG,""String_Node_Str"" + item + ""String_Node_Str""+ row);
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  Log.i(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  sContext=getActivity();
  mItems=new ArrayList<Movie>();
  mSelectedMovie=(Movie)getActivity().getIntent().getSerializableExtra(MovieDetailsActivity.MOVIE);
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(new CardPresenter());
  for (  Map.Entry<String,List<Movie>> entry : movies.entrySet()) {
    if (mSelectedMovie.getCategory().contains(entry.getKey())) {
      List<Movie> list=entry.getValue();
      for (int j=0; j < list.size(); j++) {
        mItems.add(list.get(j));
        if (mSelectedMovie.getTitle().contentEquals(list.get(j).getTitle())) {
          mCurrentItem=j;
        }
      }
    }
  }
  mHandler=new Handler();
  setBackgroundType(BACKGROUND_TYPE);
  setFadingEnabled(false);
  setupRows();
  setOnItemViewSelectedListener(new OnItemViewSelectedListener(){
    @Override public void onItemSelected(    Presenter.ViewHolder itemViewHolder,    Object item,    RowPresenter.ViewHolder rowViewHolder,    Row row){
      Log.i(TAG,""String_Node_Str"" + item + ""String_Node_Str""+ row);
    }
  }
);
  setOnItemViewClickedListener(new ItemViewClickedListener());
}",0.9147121535181236
111753,"@Override public void onItemClicked(Presenter.ViewHolder itemViewHolder,Object item,RowPresenter.ViewHolder rowViewHolder,Row row){
  Log.i(TAG,""String_Node_Str"" + item + ""String_Node_Str""+ row);
}","@Override public void onItemClicked(Presenter.ViewHolder itemViewHolder,Object item,RowPresenter.ViewHolder rowViewHolder,Row row){
  if (item instanceof Movie) {
    Movie movie=(Movie)item;
    Log.d(TAG,""String_Node_Str"" + item.toString());
    Intent intent=new Intent(getActivity(),PlaybackOverlayActivity.class);
    intent.putExtra(MovieDetailsActivity.MOVIE,movie);
    Bundle bundle=ActivityOptionsCompat.makeSceneTransitionAnimation(getActivity(),((ImageCardView)itemViewHolder.view).getMainImageView(),MovieDetailsActivity.SHARED_ELEMENT_NAME).toBundle();
    getActivity().startActivity(intent,bundle);
  }
}",0.438188494492044
111754,"@Override public void setSelected(boolean selected){
  int color1=mContext.getResources().getColor(R.color.detail_background);
  int color2=mContext.getResources().getColor(R.color.default_background);
  int color=selected ? color1 : color2;
  findViewById(R.id.info_field).setBackgroundColor(color);
  super.setSelected(selected);
}","@Override public void setSelected(boolean selected){
  int selected_background=mContext.getResources().getColor(R.color.detail_background);
  int default_background=mContext.getResources().getColor(R.color.default_background);
  int color=selected ? selected_background : default_background;
  findViewById(R.id.info_field).setBackgroundColor(color);
  super.setSelected(selected);
}",0.8631284916201117
111755,"@Override public ViewHolder onCreateViewHolder(ViewGroup parent){
  Log.d(TAG,""String_Node_Str"");
  mContext=parent.getContext();
  ImageCardView cardView=new ImageCardView(mContext){
    @Override public void setSelected(    boolean selected){
      int color1=mContext.getResources().getColor(R.color.detail_background);
      int color2=mContext.getResources().getColor(R.color.default_background);
      int color=selected ? color1 : color2;
      findViewById(R.id.info_field).setBackgroundColor(color);
      super.setSelected(selected);
    }
  }
;
  cardView.setFocusable(true);
  cardView.setFocusableInTouchMode(true);
  return new ViewHolder(cardView);
}","@Override public ViewHolder onCreateViewHolder(ViewGroup parent){
  Log.d(TAG,""String_Node_Str"");
  mContext=parent.getContext();
  ImageCardView cardView=new ImageCardView(mContext){
    @Override public void setSelected(    boolean selected){
      int selected_background=mContext.getResources().getColor(R.color.detail_background);
      int default_background=mContext.getResources().getColor(R.color.default_background);
      int color=selected ? selected_background : default_background;
      findViewById(R.id.info_field).setBackgroundColor(color);
      super.setSelected(selected);
    }
  }
;
  cardView.setFocusable(true);
  cardView.setFocusableInTouchMode(true);
  return new ViewHolder(cardView);
}",0.9289855072463769
111756,"public URI getCardImageURI(){
  try {
    return new URI(getCardImageUrl());
  }
 catch (  URISyntaxException e) {
    return null;
  }
}","public URI getCardImageURI(){
  try {
    String cardImageUrl=getCardImageUrl();
    return new URI(cardImageUrl);
  }
 catch (  URISyntaxException e) {
    return null;
  }
}",0.8012820512820513
111757,"private void loadViews(){
  mVideoView=(VideoView)findViewById(R.id.videoView);
}","private void loadViews(){
  mVideoView=(VideoView)findViewById(R.id.videoView);
  mPlaybackOverlayFragment=(PlaybackOverlayFragment)getFragmentManager().findFragmentById(R.id.playback_controls_fragment);
  mPlaybackOverlayFragment.pressPlay();
}",0.4969325153374233
111758,"protected void updateVideoImage(URI uri){
  Picasso.with(sContext).load(uri.toString()).resize(Utils.convertDpToPixel(sContext,CARD_WIDTH),Utils.convertDpToPixel(sContext,CARD_HEIGHT)).into(mPlaybackControlsRowTarget);
}","protected void updateVideoImage(URI uri){
  String uriStr=uri.toString();
  Picasso.with(sContext).load(uriStr).resize(Utils.convertDpToPixel(sContext,CARD_WIDTH),Utils.convertDpToPixel(sContext,CARD_HEIGHT)).into(mPlaybackControlsRowTarget);
}",0.9008620689655172
111759,"private void updatePlaybackRow(int index){
  if (mPlaybackControlsRow.getItem() != null) {
    Movie item=(Movie)mPlaybackControlsRow.getItem();
    item.setTitle(mItems.get(mCurrentItem).getTitle());
    item.setStudio(mItems.get(mCurrentItem).getStudio());
  }
  if (SHOW_IMAGE) {
    mPlaybackControlsRowTarget=new PicassoPlaybackControlsRowTarget(mPlaybackControlsRow);
    updateVideoImage(mItems.get(mCurrentItem).getCardImageURI());
  }
  mRowsAdapter.notifyArrayItemRangeChanged(0,1);
  mPlaybackControlsRow.setTotalTime(getDuration());
  mPlaybackControlsRow.setCurrentTime(0);
  mPlaybackControlsRow.setBufferedProgress(0);
}","private void updatePlaybackRow(int index){
  if (mPlaybackControlsRow.getItem() != null) {
    Movie item=(Movie)mPlaybackControlsRow.getItem();
    item.setTitle(mItems.get(mCurrentItem).getTitle());
    item.setStudio(mItems.get(mCurrentItem).getStudio());
  }
  if (SHOW_IMAGE) {
    mPlaybackControlsRowTarget=new PicassoPlaybackControlsRowTarget(mPlaybackControlsRow);
    Movie movie=mItems.get(mCurrentItem);
    updateVideoImage(movie.getCardImageURI());
  }
  mRowsAdapter.notifyArrayItemRangeChanged(0,1);
  mPlaybackControlsRow.setTotalTime(getDuration());
  mPlaybackControlsRow.setCurrentTime(0);
  mPlaybackControlsRow.setBufferedProgress(0);
}",0.9466357308584686
111760,"@Override public void onCreate(Bundle savedInstanceState){
  Log.i(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  BackgroundManager backgroundManager=BackgroundManager.getInstance(getActivity());
  backgroundManager.attach(getActivity().getWindow());
  mBackgroundTarget=new PicassoBackgroundManagerTarget(backgroundManager);
  mDefaultBackground=getResources().getDrawable(R.drawable.default_background);
  mMetrics=new DisplayMetrics();
  getActivity().getWindowManager().getDefaultDisplay().getMetrics(mMetrics);
  selectedMovie=(Movie)getActivity().getIntent().getSerializableExtra(""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + selectedMovie.toString());
  new DetailRowBuilderTask().execute(selectedMovie);
  setOnItemClickedListener(getDefaultItemClickedListener());
}","@Override public void onCreate(Bundle savedInstanceState){
  Log.i(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  BackgroundManager backgroundManager=BackgroundManager.getInstance(getActivity());
  backgroundManager.attach(getActivity().getWindow());
  mBackgroundTarget=new PicassoBackgroundManagerTarget(backgroundManager);
  mDefaultBackground=getResources().getDrawable(R.drawable.default_background);
  mMetrics=new DisplayMetrics();
  getActivity().getWindowManager().getDefaultDisplay().getMetrics(mMetrics);
  selectedMovie=(Movie)getActivity().getIntent().getSerializableExtra(""String_Node_Str"");
  Log.d(TAG,""String_Node_Str"" + selectedMovie.toString());
  new DetailRowBuilderTask().execute(selectedMovie);
  setOnItemClickedListener(getDefaultItemClickedListener());
  updateBackground(selectedMovie.getBackgroundImageURI());
}",0.9643073200241984
111761,"@Override protected DetailsOverviewRow doInBackground(Movie... movies){
  selectedMovie=movies[0];
  Log.d(TAG,""String_Node_Str"" + selectedMovie.toString());
  DetailsOverviewRow row=new DetailsOverviewRow(selectedMovie);
  try {
    Bitmap poster=Picasso.with(getActivity()).load(selectedMovie.getCardImageUrl()).resize(Utils.dpToPx(DETAIL_THUMB_WIDTH,getActivity().getApplicationContext()),Utils.dpToPx(DETAIL_THUMB_HEIGHT,getActivity().getApplicationContext())).centerCrop().get();
    row.setImageBitmap(getActivity(),poster);
    updateBackground(selectedMovie.getBackgroundImageURI());
  }
 catch (  IOException e) {
  }
  row.addAction(new Action(ACTION_WATCH_TRAILER,getResources().getString(R.string.watch_trailer_1),getResources().getString(R.string.watch_trailer_2)));
  row.addAction(new Action(ACTION_RENT,getResources().getString(R.string.rent_1),getResources().getString(R.string.rent_2)));
  row.addAction(new Action(ACTION_BUY,getResources().getString(R.string.buy_1),getResources().getString(R.string.buy_2)));
  return row;
}","@Override protected DetailsOverviewRow doInBackground(Movie... movies){
  selectedMovie=movies[0];
  Log.d(TAG,""String_Node_Str"" + selectedMovie.toString());
  DetailsOverviewRow row=new DetailsOverviewRow(selectedMovie);
  try {
    Bitmap poster=Picasso.with(getActivity()).load(selectedMovie.getCardImageUrl()).resize(Utils.dpToPx(DETAIL_THUMB_WIDTH,getActivity().getApplicationContext()),Utils.dpToPx(DETAIL_THUMB_HEIGHT,getActivity().getApplicationContext())).centerCrop().get();
    row.setImageBitmap(getActivity(),poster);
  }
 catch (  IOException e) {
  }
  row.addAction(new Action(ACTION_WATCH_TRAILER,getResources().getString(R.string.watch_trailer_1),getResources().getString(R.string.watch_trailer_2)));
  row.addAction(new Action(ACTION_RENT,getResources().getString(R.string.rent_1),getResources().getString(R.string.rent_2)));
  row.addAction(new Action(ACTION_BUY,getResources().getString(R.string.buy_1),getResources().getString(R.string.buy_2)));
  return row;
}",0.9699062654168722
111762,"@Override protected void onPostExecute(DetailsOverviewRow detailRow){
  ClassPresenterSelector ps=new ClassPresenterSelector();
  DetailsOverviewRowPresenter dorPresenter=new DetailsOverviewRowPresenter(new DetailsDescriptionPresenter());
  dorPresenter.setBackgroundColor(getResources().getColor(R.color.detail_background));
  dorPresenter.setStyleLarge(true);
  dorPresenter.setOnActionClickedListener(new OnActionClickedListener(){
    @Override public void onActionClicked(    Action action){
      if (action.getId() == ACTION_WATCH_TRAILER) {
        Intent intent=new Intent(getActivity(),PlayerActivity.class);
        intent.putExtra(getResources().getString(R.string.movie),selectedMovie);
        intent.putExtra(getResources().getString(R.string.should_start),true);
        startActivity(intent);
      }
 else {
        Toast.makeText(getActivity(),action.toString(),Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  ps.addClassPresenter(DetailsOverviewRow.class,dorPresenter);
  ps.addClassPresenter(ListRow.class,new ListRowPresenter());
  ArrayObjectAdapter adapter=new ArrayObjectAdapter(ps);
  adapter.add(detailRow);
  String subcategories[]={getString(R.string.related_movies)};
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(new CardPresenter());
  for (  HashMap.Entry<String,List<Movie>> entry : movies.entrySet()) {
    if (selectedMovie.getCategory().indexOf(entry.getKey()) >= 0) {
      List<Movie> list=entry.getValue();
      for (int j=0; j < list.size(); j++) {
        listRowAdapter.add(list.get(j));
      }
    }
  }
  HeaderItem header=new HeaderItem(0,subcategories[0],null);
  adapter.add(new ListRow(header,listRowAdapter));
  setAdapter(adapter);
}","@Override protected void onPostExecute(DetailsOverviewRow detailRow){
  ClassPresenterSelector ps=new ClassPresenterSelector();
  DetailsOverviewRowPresenter dorPresenter=new DetailsOverviewRowPresenter(new DetailsDescriptionPresenter());
  dorPresenter.setBackgroundColor(getResources().getColor(R.color.detail_background));
  dorPresenter.setStyleLarge(true);
  dorPresenter.setOnActionClickedListener(new OnActionClickedListener(){
    @Override public void onActionClicked(    Action action){
      if (action.getId() == ACTION_WATCH_TRAILER) {
        Intent intent=new Intent(getActivity(),PlayerActivity.class);
        intent.putExtra(getResources().getString(R.string.movie),selectedMovie);
        intent.putExtra(getResources().getString(R.string.should_start),true);
        startActivity(intent);
      }
 else {
        Toast.makeText(getActivity(),action.toString(),Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  ps.addClassPresenter(DetailsOverviewRow.class,dorPresenter);
  ps.addClassPresenter(ListRow.class,new ListRowPresenter());
  ArrayObjectAdapter adapter=new ArrayObjectAdapter(ps);
  adapter.add(detailRow);
  String subcategories[]={getString(R.string.related_movies)};
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(new CardPresenter());
  for (  Map.Entry<String,List<Movie>> entry : movies.entrySet()) {
    if (selectedMovie.getCategory().indexOf(entry.getKey()) >= 0) {
      List<Movie> list=entry.getValue();
      for (int j=0; j < list.size(); j++) {
        listRowAdapter.add(list.get(j));
      }
    }
  }
  HeaderItem header=new HeaderItem(0,subcategories[0],null);
  adapter.add(new ListRow(header,listRowAdapter));
  setAdapter(adapter);
}",0.9988681380871534
111763,"private void loadRows(String query){
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(new CardPresenter());
  for (  HashMap.Entry<String,List<Movie>> entry : movies.entrySet()) {
    for (int i=0; i < entry.getValue().size(); i++) {
      Movie movie=entry.getValue().get(i);
      if (movie.getTitle().toLowerCase(Locale.ENGLISH).indexOf(query.toLowerCase(Locale.ENGLISH)) >= 0 || movie.getDescription().toLowerCase(Locale.ENGLISH).indexOf(query.toLowerCase(Locale.ENGLISH)) >= 0) {
        listRowAdapter.add(movie);
      }
    }
  }
  HeaderItem header=new HeaderItem(0,getResources().getString(R.string.search_results),null);
  mRowsAdapter.add(new ListRow(header,listRowAdapter));
}","private void loadRows(String query){
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(new CardPresenter());
  for (  Map.Entry<String,List<Movie>> entry : movies.entrySet()) {
    for (int i=0; i < entry.getValue().size(); i++) {
      Movie movie=entry.getValue().get(i);
      if (movie.getTitle().toLowerCase(Locale.ENGLISH).indexOf(query.toLowerCase(Locale.ENGLISH)) >= 0 || movie.getDescription().toLowerCase(Locale.ENGLISH).indexOf(query.toLowerCase(Locale.ENGLISH)) >= 0) {
        listRowAdapter.add(movie);
      }
    }
  }
  HeaderItem header=new HeaderItem(0,getResources().getString(R.string.search_results),null);
  mRowsAdapter.add(new ListRow(header,listRowAdapter));
}",0.9973821989528796
111764,"@Override protected void onHandleIntent(Intent intent){
  Log.d(TAG,""String_Node_Str"");
  HashMap<String,List<Movie>> recommendations=VideoProvider.getMovieList();
  int count=0;
  try {
    RecommendationBuilder builder=new RecommendationBuilder().setContext(getApplicationContext()).setSmallIcon(R.drawable.videos_by_google_icon);
    for (    HashMap.Entry<String,List<Movie>> entry : recommendations.entrySet()) {
      for (int i=0; i < entry.getValue().size(); i++) {
        Movie movie=entry.getValue().get(i);
        Log.d(TAG,""String_Node_Str"" + movie.getTitle());
        builder.setBackground(movie.getCardImageUrl()).setId(count + 1).setPriority(MAX_RECOMMENDATIONS - count).setTitle(movie.getTitle()).setDescription(getString(R.string.popular_header)).setImage(movie.getCardImageUrl()).setIntent(buildPendingIntent(movie)).build();
        if (++count >= MAX_RECOMMENDATIONS) {
          break;
        }
      }
      if (++count >= MAX_RECOMMENDATIONS) {
        break;
      }
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","@Override protected void onHandleIntent(Intent intent){
  Log.d(TAG,""String_Node_Str"");
  HashMap<String,List<Movie>> recommendations=VideoProvider.getMovieList();
  int count=0;
  try {
    RecommendationBuilder builder=new RecommendationBuilder().setContext(getApplicationContext()).setSmallIcon(R.drawable.videos_by_google_icon);
    for (    Map.Entry<String,List<Movie>> entry : recommendations.entrySet()) {
      for (int i=0; i < entry.getValue().size(); i++) {
        Movie movie=entry.getValue().get(i);
        Log.d(TAG,""String_Node_Str"" + movie.getTitle());
        builder.setBackground(movie.getCardImageUrl()).setId(count + 1).setPriority(MAX_RECOMMENDATIONS - count).setTitle(movie.getTitle()).setDescription(getString(R.string.popular_header)).setImage(movie.getCardImageUrl()).setIntent(buildPendingIntent(movie)).build();
        if (++count >= MAX_RECOMMENDATIONS) {
          break;
        }
      }
      if (++count >= MAX_RECOMMENDATIONS) {
        break;
      }
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.9981325863678804
111765,"private void setupFragment(){
  VerticalGridPresenter gridPresenter=new VerticalGridPresenter();
  gridPresenter.setNumberOfColumns(NUM_COLUMNS);
  setGridPresenter(gridPresenter);
  mAdapter=new ArrayObjectAdapter(new CardPresenter());
  long seed=System.nanoTime();
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  for (  HashMap.Entry<String,List<Movie>> entry : movies.entrySet()) {
    List<Movie> list=entry.getValue();
    Collections.shuffle(list,new Random(seed));
    for (int j=0; j < list.size(); j++) {
      mAdapter.add(list.get(j));
    }
  }
  setAdapter(mAdapter);
  setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    Object item,    Row row){
    }
  }
);
  setOnItemClickedListener(new OnItemClickedListener(){
    @Override public void onItemClicked(    Object item,    Row row){
      if (item instanceof Movie) {
        Movie movie=(Movie)item;
        Intent intent=new Intent(getActivity(),DetailsActivity.class);
        intent.putExtra(getString(R.string.movie),movie);
        startActivity(intent);
      }
    }
  }
);
}","private void setupFragment(){
  VerticalGridPresenter gridPresenter=new VerticalGridPresenter();
  gridPresenter.setNumberOfColumns(NUM_COLUMNS);
  setGridPresenter(gridPresenter);
  mAdapter=new ArrayObjectAdapter(new CardPresenter());
  long seed=System.nanoTime();
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  for (  Map.Entry<String,List<Movie>> entry : movies.entrySet()) {
    List<Movie> list=entry.getValue();
    Collections.shuffle(list,new Random(seed));
    for (int j=0; j < list.size(); j++) {
      mAdapter.add(list.get(j));
    }
  }
  setAdapter(mAdapter);
  setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    Object item,    Row row){
    }
  }
);
  setOnItemClickedListener(new OnItemClickedListener(){
    @Override public void onItemClicked(    Object item,    Row row){
      if (item instanceof Movie) {
        Movie movie=(Movie)item;
        Intent intent=new Intent(getActivity(),DetailsActivity.class);
        intent.putExtra(getString(R.string.movie),movie);
        startActivity(intent);
      }
    }
  }
);
}",0.998212689901698
111766,"@Override protected void onPostExecute(DetailsOverviewRow detailRow){
  ClassPresenterSelector ps=new ClassPresenterSelector();
  DetailsOverviewRowPresenter dorPresenter=new DetailsOverviewRowPresenter(new DetailsDescriptionPresenter());
  dorPresenter.setBackgroundColor(getResources().getColor(R.color.detail_background));
  dorPresenter.setStyleLarge(true);
  dorPresenter.setOnActionClickedListener(new OnActionClickedListener(){
    @Override public void onActionClicked(    Action action){
      if (action.getId() == ACTION_WATCH_TRAILER) {
        Intent intent=new Intent(getActivity(),PlayerActivity.class);
        intent.putExtra(getResources().getString(R.string.movie),selectedMovie);
        intent.putExtra(getResources().getString(R.string.should_start),true);
        startActivity(intent);
      }
 else {
        Toast.makeText(getActivity(),action.toString(),Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  ps.addClassPresenter(DetailsOverviewRow.class,dorPresenter);
  ps.addClassPresenter(ListRow.class,new ListRowPresenter());
  ArrayObjectAdapter adapter=new ArrayObjectAdapter(ps);
  adapter.add(detailRow);
  String subcategories[]={getString(R.string.related_movies)};
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(new CardPresenter());
  for (  HashMap.Entry<String,List<Movie>> entry : movies.entrySet()) {
    if (selectedMovie.getCategory().indexOf(entry.getKey()) >= 0) {
      List<Movie> list=entry.getValue();
      for (int j=0; j < list.size(); j++) {
        listRowAdapter.add(list.get(j));
      }
    }
  }
  HeaderItem header=new HeaderItem(0,subcategories[0],null);
  adapter.add(new ListRow(header,listRowAdapter));
  setAdapter(adapter);
}","@Override protected void onPostExecute(DetailsOverviewRow detailRow){
  ClassPresenterSelector ps=new ClassPresenterSelector();
  DetailsOverviewRowPresenter dorPresenter=new DetailsOverviewRowPresenter(new DetailsDescriptionPresenter());
  dorPresenter.setBackgroundColor(getResources().getColor(R.color.detail_background));
  dorPresenter.setStyleLarge(true);
  dorPresenter.setOnActionClickedListener(new OnActionClickedListener(){
    @Override public void onActionClicked(    Action action){
      if (action.getId() == ACTION_WATCH_TRAILER) {
        Intent intent=new Intent(getActivity(),PlayerActivity.class);
        intent.putExtra(getResources().getString(R.string.movie),selectedMovie);
        intent.putExtra(getResources().getString(R.string.should_start),true);
        startActivity(intent);
      }
 else {
        Toast.makeText(getActivity(),action.toString(),Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  ps.addClassPresenter(DetailsOverviewRow.class,dorPresenter);
  ps.addClassPresenter(ListRow.class,new ListRowPresenter());
  ArrayObjectAdapter adapter=new ArrayObjectAdapter(ps);
  adapter.add(detailRow);
  String subcategories[]={getString(R.string.related_movies)};
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(new CardPresenter());
  for (  Map.Entry<String,List<Movie>> entry : movies.entrySet()) {
    if (selectedMovie.getCategory().indexOf(entry.getKey()) >= 0) {
      List<Movie> list=entry.getValue();
      for (int j=0; j < list.size(); j++) {
        listRowAdapter.add(list.get(j));
      }
    }
  }
  HeaderItem header=new HeaderItem(0,subcategories[0],null);
  adapter.add(new ListRow(header,listRowAdapter));
  setAdapter(adapter);
}",0.9988681380871534
111767,"@Override public void onLoadFinished(Loader<HashMap<String,List<Movie>>> arg0,HashMap<String,List<Movie>> data){
  mRowsAdapter=new ArrayObjectAdapter(new ListRowPresenter());
  CardPresenter cardPresenter=new CardPresenter();
  int i=0;
  for (  HashMap.Entry<String,List<Movie>> entry : data.entrySet()) {
    ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(cardPresenter);
    List<Movie> list=entry.getValue();
    for (int j=0; j < list.size(); j++) {
      listRowAdapter.add(list.get(j));
    }
    HeaderItem header=new HeaderItem(i,entry.getKey(),null);
    i++;
    mRowsAdapter.add(new ListRow(header,listRowAdapter));
  }
  HeaderItem gridHeader=new HeaderItem(i,getResources().getString(R.string.preferences),null);
  GridItemPresenter gridPresenter=new GridItemPresenter();
  ArrayObjectAdapter gridRowAdapter=new ArrayObjectAdapter(gridPresenter);
  gridRowAdapter.add(getResources().getString(R.string.grid_view));
  gridRowAdapter.add(getResources().getString(R.string.send_feeback));
  gridRowAdapter.add(getResources().getString(R.string.personal_settings));
  mRowsAdapter.add(new ListRow(gridHeader,gridRowAdapter));
  setAdapter(mRowsAdapter);
  updateRecommendations();
}","@Override public void onLoadFinished(Loader<HashMap<String,List<Movie>>> arg0,HashMap<String,List<Movie>> data){
  mRowsAdapter=new ArrayObjectAdapter(new ListRowPresenter());
  CardPresenter cardPresenter=new CardPresenter();
  int i=0;
  for (  Map.Entry<String,List<Movie>> entry : data.entrySet()) {
    ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(cardPresenter);
    List<Movie> list=entry.getValue();
    for (int j=0; j < list.size(); j++) {
      listRowAdapter.add(list.get(j));
    }
    HeaderItem header=new HeaderItem(i,entry.getKey(),null);
    i++;
    mRowsAdapter.add(new ListRow(header,listRowAdapter));
  }
  HeaderItem gridHeader=new HeaderItem(i,getResources().getString(R.string.preferences),null);
  GridItemPresenter gridPresenter=new GridItemPresenter();
  ArrayObjectAdapter gridRowAdapter=new ArrayObjectAdapter(gridPresenter);
  gridRowAdapter.add(getResources().getString(R.string.grid_view));
  gridRowAdapter.add(getResources().getString(R.string.send_feeback));
  gridRowAdapter.add(getResources().getString(R.string.personal_settings));
  mRowsAdapter.add(new ListRow(gridHeader,gridRowAdapter));
  setAdapter(mRowsAdapter);
  updateRecommendations();
}",0.9983347210657784
111768,"private void loadRows(String query){
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(new CardPresenter());
  for (  HashMap.Entry<String,List<Movie>> entry : movies.entrySet()) {
    for (int i=0; i < entry.getValue().size(); i++) {
      Movie movie=entry.getValue().get(i);
      if (movie.getTitle().toLowerCase(Locale.ENGLISH).indexOf(query.toLowerCase(Locale.ENGLISH)) >= 0 || movie.getDescription().toLowerCase(Locale.ENGLISH).indexOf(query.toLowerCase(Locale.ENGLISH)) >= 0) {
        listRowAdapter.add(movie);
      }
    }
  }
  HeaderItem header=new HeaderItem(0,getResources().getString(R.string.search_results),null);
  mRowsAdapter.add(new ListRow(header,listRowAdapter));
}","private void loadRows(String query){
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  ArrayObjectAdapter listRowAdapter=new ArrayObjectAdapter(new CardPresenter());
  for (  Map.Entry<String,List<Movie>> entry : movies.entrySet()) {
    for (int i=0; i < entry.getValue().size(); i++) {
      Movie movie=entry.getValue().get(i);
      if (movie.getTitle().toLowerCase(Locale.ENGLISH).indexOf(query.toLowerCase(Locale.ENGLISH)) >= 0 || movie.getDescription().toLowerCase(Locale.ENGLISH).indexOf(query.toLowerCase(Locale.ENGLISH)) >= 0) {
        listRowAdapter.add(movie);
      }
    }
  }
  HeaderItem header=new HeaderItem(0,getResources().getString(R.string.search_results),null);
  mRowsAdapter.add(new ListRow(header,listRowAdapter));
}",0.9973821989528796
111769,"@Override protected void onHandleIntent(Intent intent){
  Log.d(TAG,""String_Node_Str"");
  HashMap<String,List<Movie>> recommendations=VideoProvider.getMovieList();
  int count=0;
  try {
    RecommendationBuilder builder=new RecommendationBuilder().setContext(getApplicationContext()).setSmallIcon(R.drawable.videos_by_google_icon);
    for (    HashMap.Entry<String,List<Movie>> entry : recommendations.entrySet()) {
      for (int i=0; i < entry.getValue().size(); i++) {
        Movie movie=entry.getValue().get(i);
        Log.d(TAG,""String_Node_Str"" + movie.getTitle());
        builder.setBackground(movie.getCardImageUrl()).setId(count + 1).setPriority(MAX_RECOMMENDATIONS - count).setTitle(movie.getTitle()).setDescription(getString(R.string.popular_header)).setImage(movie.getCardImageUrl()).setIntent(buildPendingIntent(movie)).build();
        if (++count >= MAX_RECOMMENDATIONS) {
          break;
        }
      }
      if (++count >= MAX_RECOMMENDATIONS) {
        break;
      }
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","@Override protected void onHandleIntent(Intent intent){
  Log.d(TAG,""String_Node_Str"");
  HashMap<String,List<Movie>> recommendations=VideoProvider.getMovieList();
  int count=0;
  try {
    RecommendationBuilder builder=new RecommendationBuilder().setContext(getApplicationContext()).setSmallIcon(R.drawable.videos_by_google_icon);
    for (    Map.Entry<String,List<Movie>> entry : recommendations.entrySet()) {
      for (int i=0; i < entry.getValue().size(); i++) {
        Movie movie=entry.getValue().get(i);
        Log.d(TAG,""String_Node_Str"" + movie.getTitle());
        builder.setBackground(movie.getCardImageUrl()).setId(count + 1).setPriority(MAX_RECOMMENDATIONS - count).setTitle(movie.getTitle()).setDescription(getString(R.string.popular_header)).setImage(movie.getCardImageUrl()).setIntent(buildPendingIntent(movie)).build();
        if (++count >= MAX_RECOMMENDATIONS) {
          break;
        }
      }
      if (++count >= MAX_RECOMMENDATIONS) {
        break;
      }
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.9981325863678804
111770,"private void setupFragment(){
  VerticalGridPresenter gridPresenter=new VerticalGridPresenter();
  gridPresenter.setNumberOfColumns(NUM_COLUMNS);
  setGridPresenter(gridPresenter);
  mAdapter=new ArrayObjectAdapter(new CardPresenter());
  long seed=System.nanoTime();
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  for (  HashMap.Entry<String,List<Movie>> entry : movies.entrySet()) {
    List<Movie> list=entry.getValue();
    Collections.shuffle(list,new Random(seed));
    for (int j=0; j < list.size(); j++) {
      mAdapter.add(list.get(j));
    }
  }
  setAdapter(mAdapter);
  setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    Object item,    Row row){
    }
  }
);
  setOnItemClickedListener(new OnItemClickedListener(){
    @Override public void onItemClicked(    Object item,    Row row){
      if (item instanceof Movie) {
        Movie movie=(Movie)item;
        Intent intent=new Intent(getActivity(),DetailsActivity.class);
        intent.putExtra(getString(R.string.movie),movie);
        startActivity(intent);
      }
    }
  }
);
}","private void setupFragment(){
  VerticalGridPresenter gridPresenter=new VerticalGridPresenter();
  gridPresenter.setNumberOfColumns(NUM_COLUMNS);
  setGridPresenter(gridPresenter);
  mAdapter=new ArrayObjectAdapter(new CardPresenter());
  long seed=System.nanoTime();
  HashMap<String,List<Movie>> movies=VideoProvider.getMovieList();
  for (  Map.Entry<String,List<Movie>> entry : movies.entrySet()) {
    List<Movie> list=entry.getValue();
    Collections.shuffle(list,new Random(seed));
    for (int j=0; j < list.size(); j++) {
      mAdapter.add(list.get(j));
    }
  }
  setAdapter(mAdapter);
  setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    Object item,    Row row){
    }
  }
);
  setOnItemClickedListener(new OnItemClickedListener(){
    @Override public void onItemClicked(    Object item,    Row row){
      if (item instanceof Movie) {
        Movie movie=(Movie)item;
        Intent intent=new Intent(getActivity(),DetailsActivity.class);
        intent.putExtra(getString(R.string.movie),movie);
        startActivity(intent);
      }
    }
  }
);
}",0.998212689901698
111771,"/** 
 * Finds   {@link VirtualFile} instances for the specific {@link Pattern} and caches them.
 * @param project current project
 * @param pattern to handle
 * @return matched files list
 */
@NotNull public Collection<VirtualFile> getFilesForPattern(@NotNull final Project project,@NotNull Pattern pattern){
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final String[] parts=MatcherUtil.getParts(pattern);
  if (parts.length > 0) {
    final String key=StringUtil.join(parts,Constants.DOLLAR);
    if (cacheMap.get(key) == null) {
      final THashSet<VirtualFile> files=new THashSet<VirtualFile>(1000);
      ProjectRootManager.getInstance(project).getFileIndex().iterateContent(new ContentIterator(){
        @Override public boolean processFile(        VirtualFile fileOrDir){
          final String name=fileOrDir.getName();
          if (MatcherUtil.matchAnyPart(parts,name)) {
            for (            VirtualFile file : FilenameIndex.getVirtualFilesByName(project,name,scope)) {
              if (file.isValid() && MatcherUtil.matchAllParts(parts,file.getPath())) {
                files.add(file);
              }
            }
          }
          return true;
        }
      }
);
      cacheMap.put(key,files);
    }
    return cacheMap.get(key);
  }
  return ContainerUtil.newArrayList();
}","/** 
 * Finds   {@link VirtualFile} instances for the specific {@link Pattern} and caches them.
 * @param project current project
 * @param pattern to handle
 * @return matched files list
 */
@NotNull public Collection<VirtualFile> getFilesForPattern(@NotNull final Project project,@NotNull Pattern pattern){
  final GlobalSearchScope scope=IgnoreSearchScope.get(project);
  final String[] parts=MatcherUtil.getParts(pattern);
  if (parts.length > 0) {
    final String key=StringUtil.join(parts,Constants.DOLLAR);
    if (cacheMap.get(key) == null) {
      final THashSet<VirtualFile> files=new THashSet<VirtualFile>(1000);
      ProjectRootManager.getInstance(project).getFileIndex().iterateContent(new ContentIterator(){
        @Override public boolean processFile(        VirtualFile fileOrDir){
          final String name=fileOrDir.getName();
          if (MatcherUtil.matchAnyPart(parts,name)) {
            for (            VirtualFile file : FilenameIndex.getVirtualFilesByName(project,name,scope)) {
              if (file.isValid() && MatcherUtil.matchAllParts(parts,file.getPath())) {
                files.add(file);
              }
            }
          }
          return true;
        }
      }
);
      cacheMap.put(key,files);
    }
    return cacheMap.get(key);
  }
  return ContainerUtil.newArrayList();
}",0.9913566328447952
111772,"/** 
 * Checks if file is ignored.
 * @param file current file
 * @return file is ignored
 */
public boolean isFileIgnored(@NotNull final VirtualFile file){
  if (DumbService.isDumb(myProject) || !isEnabled() || !Utils.isUnder(file,myProject.getBaseDir())) {
    return false;
  }
  boolean ignored=false;
  boolean matched=false;
  int valuesCount=0;
  for (  IgnoreFileType fileType : IgnoreFilesIndex.getKeys(myProject)) {
    if (!fileType.getIgnoreLanguage().isEnabled()) {
      continue;
    }
    Collection<IgnoreEntryOccurrence> values=IgnoreFilesIndex.getEntries(myProject,fileType);
    valuesCount+=values.size();
    for (    IgnoreEntryOccurrence value : values) {
      String relativePath;
      if (fileType instanceof GitExcludeFileType) {
        VirtualFile workingDirectory=GitExcludeFileType.getWorkingDirectory(myProject,value.getFile());
        if (workingDirectory == null || !Utils.isUnder(file,workingDirectory)) {
          continue;
        }
        relativePath=StringUtil.trimStart(file.getPath(),workingDirectory.getPath());
      }
 else {
        String parentPath=value.getFile().getParent().getPath();
        if (!StringUtil.startsWith(file.getPath(),parentPath)) {
          if (!ExternalIndexableSetContributor.getAdditionalFiles(myProject).contains(value.getFile())) {
            continue;
          }
        }
        relativePath=StringUtil.trimStart(file.getPath(),parentPath);
      }
      relativePath=StringUtil.trimEnd(StringUtil.trimStart(relativePath,""String_Node_Str""),""String_Node_Str"");
      if (StringUtil.isEmpty(relativePath)) {
        continue;
      }
      if (file.isDirectory()) {
        relativePath+=""String_Node_Str"";
      }
      for (      Pair<Pattern,Boolean> item : value.getItems()) {
        if (item.first.matcher(relativePath).matches()) {
          ignored=!item.second;
          matched=true;
        }
      }
    }
  }
  if (valuesCount > 0 && !ignored && !matched) {
    VirtualFile directory=file.getParent();
    if (directory != null && !directory.equals(myProject.getBaseDir())) {
      return isFileIgnored(directory);
    }
  }
  statusesChangedScheduledFeature.cancel();
  return ignored;
}","/** 
 * Checks if file is ignored.
 * @param file current file
 * @return file is ignored
 */
public boolean isFileIgnored(@NotNull final VirtualFile file){
  if (DumbService.isDumb(myProject) || !isEnabled() || !Utils.isUnder(file,myProject.getBaseDir())) {
    return false;
  }
  boolean ignored=false;
  boolean matched=false;
  int valuesCount=0;
  for (  IgnoreFileType fileType : IgnoreFilesIndex.getKeys(myProject)) {
    if (!fileType.getIgnoreLanguage().isEnabled()) {
      continue;
    }
    Collection<IgnoreEntryOccurrence> values=IgnoreFilesIndex.getEntries(myProject,fileType);
    valuesCount+=values.size();
    for (    IgnoreEntryOccurrence value : values) {
      String relativePath;
      if (fileType instanceof GitExcludeFileType) {
        VirtualFile workingDirectory=GitExcludeFileType.getWorkingDirectory(myProject,value.getFile());
        if (workingDirectory == null || !Utils.isUnder(file,workingDirectory)) {
          continue;
        }
        relativePath=StringUtil.trimStart(file.getPath(),workingDirectory.getPath());
      }
 else {
        String parentPath=value.getFile().getParent().getPath();
        if (!StringUtil.startsWith(file.getPath(),parentPath)) {
          if (!ExternalIndexableSetContributor.getAdditionalFiles(myProject).contains(value.getFile())) {
            continue;
          }
        }
        relativePath=StringUtil.trimStart(file.getPath(),parentPath);
      }
      relativePath=StringUtil.trimEnd(StringUtil.trimStart(relativePath,""String_Node_Str""),""String_Node_Str"");
      if (StringUtil.isEmpty(relativePath)) {
        continue;
      }
      if (file.isDirectory()) {
        relativePath+=""String_Node_Str"";
      }
      for (      Pair<Pattern,Boolean> item : value.getItems()) {
        if (item.first.matcher(relativePath).matches()) {
          ignored=!item.second;
          matched=true;
        }
      }
    }
  }
  if (valuesCount > 0 && !ignored && !matched) {
    VirtualFile directory=file.getParent();
    if (directory != null && !directory.equals(myProject.getBaseDir())) {
      return isFileIgnored(directory);
    }
  }
  if (ignored) {
    statusesChangedScheduledFeature.cancel();
  }
  return ignored;
}",0.9947643979057592
111773,"/** 
 * Returns collection of indexed   {@link IgnoreEntryOccurrence} for given {@link Project} and {@link IgnoreFileType}.
 * @param project  current project
 * @param fileType filetype
 * @return {@link IgnoreEntryOccurrence} collection
 */
@NotNull public static List<IgnoreEntryOccurrence> getEntries(@NotNull Project project,@NotNull IgnoreFileType fileType){
  try {
    final GlobalSearchScope scope=IgnoreSearchScope.projectScope(project);
    return FileBasedIndex.getInstance().getValues(IgnoreFilesIndex.KEY,new IgnoreFileTypeKey(fileType),scope);
  }
 catch (  RuntimeException e) {
    return ContainerUtil.emptyList();
  }
}","/** 
 * Returns collection of indexed   {@link IgnoreEntryOccurrence} for given {@link Project} and {@link IgnoreFileType}.
 * @param project  current project
 * @param fileType filetype
 * @return {@link IgnoreEntryOccurrence} collection
 */
@NotNull public static List<IgnoreEntryOccurrence> getEntries(@NotNull Project project,@NotNull IgnoreFileType fileType){
  try {
    final GlobalSearchScope scope=IgnoreSearchScope.get(project);
    return FileBasedIndex.getInstance().getValues(IgnoreFilesIndex.KEY,new IgnoreFileTypeKey(fileType),scope);
  }
 catch (  RuntimeException e) {
    return ContainerUtil.emptyList();
  }
}",0.9881610102604578
111774,"/** 
 * Get the settings state as a DOM element.
 * @return an ready to serialize DOM {@link Element}.
 * @see {@link #loadState(Element)}
 */
@Nullable @Override public Element getState(){
  final Element element=new Element(KEY.ROOT.toString());
  element.setAttribute(KEY.MISSING_GITIGNORE.toString(),Boolean.toString(missingGitignore));
  element.setAttribute(KEY.IGNORED_FILE_STATUS.toString(),Boolean.toString(ignoredFileStatus));
  element.setAttribute(KEY.OUTER_IGNORE_RULES.toString(),Boolean.toString(outerIgnoreRules));
  element.setAttribute(KEY.OUTER_IGNORE_WRAPPER_HEIGHT.toString(),Integer.toString(outerIgnoreWrapperHeight));
  element.setAttribute(KEY.VERSION.toString(),version);
  element.setAttribute(KEY.STARRED_TEMPLATES.toString(),StringUtil.join(starredTemplates,Constants.DOLLAR));
  element.setAttribute(KEY.UNIGNORE_ACTIONS.toString(),Boolean.toString(unignoreActions));
  element.setAttribute(KEY.HIDE_IGNORED_FILES_ON_PROJECT_VIEW.toString(),Boolean.toString(unignoreActions));
  Element languagesElement=new Element(KEY.LANGUAGES.toString());
  for (  Map.Entry<IgnoreLanguage,TreeMap<IgnoreLanguagesSettings.KEY,Object>> entry : languagesSettings.entrySet()) {
    Element languageElement=new Element(KEY.LANGUAGES_LANGUAGE.toString());
    languageElement.setAttribute(KEY.LANGUAGES_ID.toString(),entry.getKey().getID());
    for (    Map.Entry<IgnoreLanguagesSettings.KEY,Object> data : entry.getValue().entrySet()) {
      languageElement.setAttribute(data.getKey().name(),data.getValue().toString());
    }
    languagesElement.addContent(languageElement);
  }
  element.addContent(languagesElement);
  element.addContent(createTemplatesElement(userTemplates));
  element.setAttribute(""String_Node_Str"",""String_Node_Str"");
  return element;
}","/** 
 * Get the settings state as a DOM element.
 * @return an ready to serialize DOM {@link Element}.
 * @see {@link #loadState(Element)}
 */
@Nullable @Override public Element getState(){
  final Element element=new Element(KEY.ROOT.toString());
  element.setAttribute(KEY.MISSING_GITIGNORE.toString(),Boolean.toString(missingGitignore));
  element.setAttribute(KEY.IGNORED_FILE_STATUS.toString(),Boolean.toString(ignoredFileStatus));
  element.setAttribute(KEY.OUTER_IGNORE_RULES.toString(),Boolean.toString(outerIgnoreRules));
  element.setAttribute(KEY.OUTER_IGNORE_WRAPPER_HEIGHT.toString(),Integer.toString(outerIgnoreWrapperHeight));
  element.setAttribute(KEY.VERSION.toString(),version);
  element.setAttribute(KEY.STARRED_TEMPLATES.toString(),StringUtil.join(starredTemplates,Constants.DOLLAR));
  element.setAttribute(KEY.UNIGNORE_ACTIONS.toString(),Boolean.toString(unignoreActions));
  element.setAttribute(KEY.HIDE_IGNORED_FILES_ON_PROJECT_VIEW.toString(),Boolean.toString(hideIgnoredFiles));
  Element languagesElement=new Element(KEY.LANGUAGES.toString());
  for (  Map.Entry<IgnoreLanguage,TreeMap<IgnoreLanguagesSettings.KEY,Object>> entry : languagesSettings.entrySet()) {
    Element languageElement=new Element(KEY.LANGUAGES_LANGUAGE.toString());
    languageElement.setAttribute(KEY.LANGUAGES_ID.toString(),entry.getKey().getID());
    for (    Map.Entry<IgnoreLanguagesSettings.KEY,Object> data : entry.getValue().entrySet()) {
      languageElement.setAttribute(data.getKey().name(),data.getValue().toString());
    }
    languagesElement.addContent(languageElement);
  }
  element.addContent(languagesElement);
  element.addContent(createTemplatesElement(userTemplates));
  element.setAttribute(""String_Node_Str"",""String_Node_Str"");
  return element;
}",0.9918424753867792
111775,"/** 
 * Returns gitignore templates directory
 * @return Resources directory
 */
public static File getResource(String path){
}","/** 
 * Returns gitignore templates directory
 * @return Resources directory
 */
@Nullable public static File getResource(@NotNull String path){
  URL resource=Resources.class.getResource(path);
  if (resource == null) {
    return null;
  }
  return new File(resource.getPath());
}",0.6112469437652812
111776,"/** 
 * Reads resource file and returns its content as a String
 * @param path Resource path
 * @return Content
 */
public static String getResourceContent(String path){
  return convertStreamToString(Resources.class.getResourceAsStream(path));
}","/** 
 * Reads resource file and returns its content as a String
 * @param path Resource path
 * @return Content
 */
@Nullable public static String getResourceContent(@NotNull String path){
  return convertStreamToString(Resources.class.getResourceAsStream(path));
}",0.9549902152641878
111777,"/** 
 * Returns list of gitignore templates
 * @return Gitignore templates list
 */
public static List<Template> getGitignoreTemplates(){
  if (resourceTemplates == null) {
    resourceTemplates=ContainerUtil.newArrayList();
    try {
      String list=getResourceContent(GITIGNORE_TEMPLATES_PATH);
      BufferedReader br=new BufferedReader(new StringReader(list));
      for (String line; (line=br.readLine()) != null; ) {
        line=""String_Node_Str"" + line;
        File file=getResource(line);
        String content=getResourceContent(line);
        resourceTemplates.add(new Template(file,content));
      }
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  final List<Template> templates=ContainerUtil.newArrayList();
  templates.addAll(resourceTemplates);
  IgnoreSettings settings=IgnoreSettings.getInstance();
  for (  IgnoreSettings.UserTemplate userTemplate : settings.getUserTemplates()) {
    templates.add(new Template(userTemplate));
  }
  return templates;
}","/** 
 * Returns list of gitignore templates
 * @return Gitignore templates list
 */
@NotNull public static List<Template> getGitignoreTemplates(){
  final List<Template> templates=ContainerUtil.newArrayList();
  if (resourceTemplates == null) {
    resourceTemplates=ContainerUtil.newArrayList();
    try {
      String list=getResourceContent(GITIGNORE_TEMPLATES_PATH);
      if (list == null) {
        return templates;
      }
      BufferedReader br=new BufferedReader(new StringReader(list));
      for (String line; (line=br.readLine()) != null; ) {
        line=""String_Node_Str"" + line;
        File file=getResource(line);
        String content=getResourceContent(line);
        resourceTemplates.add(new Template(file,content));
      }
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  templates.addAll(resourceTemplates);
  IgnoreSettings settings=IgnoreSettings.getInstance();
  for (  IgnoreSettings.UserTemplate userTemplate : settings.getUserTemplates()) {
    templates.add(new Template(userTemplate));
  }
  return templates;
}",0.91196388261851
111778,"/** 
 * Converts InputStream resource to String
 * @param inputStream Input stream
 * @return Content
 */
protected static String convertStreamToString(InputStream inputStream){
  Scanner s=new Scanner(inputStream).useDelimiter(""String_Node_Str"");
  return s.hasNext() ? s.next() : ""String_Node_Str"";
}","/** 
 * Converts InputStream resource to String
 * @param inputStream Input stream
 * @return Content
 */
@Nullable protected static String convertStreamToString(@Nullable InputStream inputStream){
  if (inputStream == null) {
    return null;
  }
  Scanner s=new Scanner(inputStream).useDelimiter(""String_Node_Str"");
  return s.hasNext() ? s.next() : ""String_Node_Str"";
}",0.8961424332344213
111779,"/** 
 * Returns list of gitignore templates
 * @return Gitignore templates list
 */
@NotNull public static List<Template> getGitignoreTemplates(){
  final List<Template> templates=ContainerUtil.newArrayList();
  if (resourceTemplates == null) {
    resourceTemplates=ContainerUtil.newArrayList();
    try {
      String list=getResourceContent(GITIGNORE_TEMPLATES_PATH);
      if (list == null) {
        return templates;
      }
      BufferedReader br=new BufferedReader(new StringReader(list));
      for (String line; (line=br.readLine()) != null; ) {
        line=""String_Node_Str"" + line;
        File file=getResource(line);
        String content=getResourceContent(line);
        resourceTemplates.add(new Template(file,content));
      }
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  templates.addAll(resourceTemplates);
  IgnoreSettings settings=IgnoreSettings.getInstance();
  for (  IgnoreSettings.UserTemplate userTemplate : settings.getUserTemplates()) {
    templates.add(new Template(userTemplate));
  }
  return templates;
}","/** 
 * Returns list of gitignore templates
 * @return Gitignore templates list
 */
@NotNull public static List<Template> getGitignoreTemplates(){
  final List<Template> templates=ContainerUtil.newArrayList();
  if (resourceTemplates == null) {
    resourceTemplates=ContainerUtil.newArrayList();
    try {
      String list=getResourceContent(GITIGNORE_TEMPLATES_PATH);
      if (list != null) {
        BufferedReader br=new BufferedReader(new StringReader(list));
        for (String line; (line=br.readLine()) != null; ) {
          line=""String_Node_Str"" + line;
          File file=getResource(line);
          if (file != null) {
            String content=getResourceContent(line);
            resourceTemplates.add(new Template(file,content));
          }
        }
      }
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  templates.addAll(resourceTemplates);
  IgnoreSettings settings=IgnoreSettings.getInstance();
  for (  IgnoreSettings.UserTemplate userTemplate : settings.getUserTemplates()) {
    templates.add(new Template(userTemplate));
  }
  return templates;
}",0.9568593615185504
111780,"@Override public FileReference createFileReference(TextRange range,int index,String text){
  return new GitReference(this,range,index,text);
}","@Override public FileReference createFileReference(TextRange range,int index,String text){
  return new GitignoreReference(this,range,index,text);
}",0.9793103448275862
111781,"private void walk(Collection<ResolveResult> result,Pattern pattern,VirtualFile directory){
  PsiManager psiManager=getElement().getManager();
  for (  VirtualFile file : directory.getChildren()) {
    if (pattern.matcher(file.getName()).matches()) {
      PsiFileSystemItem psiFileSystemItem=FileReferenceHelper.getPsiFileSystemItem(psiManager,file);
      if (psiFileSystemItem != null) {
        result.add(new PsiElementResolveResult(psiFileSystemItem));
      }
    }
    if (file.isDirectory() && !file.is(VFileProperty.SYMLINK)) {
      walk(result,pattern,file);
    }
  }
}","private void walk(Collection<ResolveResult> result,Pattern pattern,VirtualFile directory){
  PsiManager manager=getElement().getManager();
  for (  VirtualFile file : directory.getChildren()) {
    if (pattern.matcher(file.getName()).matches()) {
      PsiFileSystemItem psiFileSystemItem=getPsiFileSystemItem(manager,file);
      if (psiFileSystemItem != null) {
        result.add(new PsiElementResolveResult(psiFileSystemItem));
      }
    }
    if (file.isDirectory() && !file.is(VFileProperty.SYMLINK)) {
      walk(result,pattern,file);
    }
  }
}",0.9735915492957746
111782,"@Override public void invoke(@NotNull Project project,@NotNull PsiFile psiFile,@NotNull PsiElement startElement,@NotNull PsiElement endElement){
  if (startElement instanceof GitignoreEntry) {
    LeafPsiElement crlf=(LeafPsiElement)startElement.getNextSibling();
    if (crlf == null || !crlf.getElementType().equals(GitignoreTypes.CRLF)) {
      crlf=(LeafPsiElement)startElement.getPrevSibling();
    }
    if (crlf != null && crlf.getElementType().equals(GitignoreTypes.CRLF)) {
      crlf.delete();
    }
    startElement.delete();
  }
}","@Override public void invoke(@NotNull Project project,@NotNull PsiFile psiFile,@NotNull PsiElement startElement,@NotNull PsiElement endElement){
  if (startElement instanceof GitignoreEntry) {
    ASTNode crlf=TreeUtil.findSibling(startElement.getNode(),GitignoreTypes.CRLF);
    if (crlf == null) {
      crlf=TreeUtil.findSiblingBackward(startElement.getNode(),GitignoreTypes.CRLF);
    }
    if (crlf != null) {
      crlf.getPsi().delete();
    }
    startElement.delete();
  }
}",0.655609756097561
111783,"/** 
 * Ensures that extended columns that have the same name as a base column also have the same data-type.
 */
private void checkExtendedColumnTypes(SqlNodeList extendList){
  final List<RelDataTypeField> extendedFields=SqlValidatorUtil.getExtendedColumns(validator.getTypeFactory(),table,extendList);
  final List<RelDataTypeField> baseFields=getBaseRowType().getFieldList();
  final Map<String,Integer> nameToIndex=SqlValidatorUtil.mapNameToIndex(baseFields);
  for (  final RelDataTypeField extendedField : extendedFields) {
    final String extFieldName=extendedField.getName();
    if (nameToIndex.containsKey(extFieldName)) {
      final Integer baseIndex=nameToIndex.get(extFieldName);
      final RelDataType baseType=baseFields.get(baseIndex).getType();
      final RelDataType extType=extendedField.getType();
      if (!extType.equals(baseType)) {
        final Predicate<SqlNode> nameMatches=new Predicate<SqlNode>(){
          @Override public boolean apply(          SqlNode sqlNode){
            if (sqlNode instanceof SqlIdentifier) {
              final SqlIdentifier identifier=(SqlIdentifier)sqlNode;
              return Util.last(identifier.names).equals(extendedField.getName());
            }
            return false;
          }
        }
;
        final SqlNode extColNode=Iterables.find(extendList.getList(),nameMatches);
        throw validator.getValidationErrorFunction().apply(extColNode,RESOURCE.typeNotAssignable(baseFields.get(baseIndex).getName(),baseType.getFullTypeString(),extendedField.getName(),extType.getFullTypeString()));
      }
    }
  }
}","/** 
 * Ensures that extended columns that have the same name as a base column also have the same data-type.
 */
private void checkExtendedColumnTypes(SqlNodeList extendList){
  final List<RelDataTypeField> extendedFields=SqlValidatorUtil.getExtendedColumns(validator.getTypeFactory(),table,extendList);
  final List<RelDataTypeField> baseFields=getBaseRowType().getFieldList();
  final Map<String,Integer> nameToIndex=SqlValidatorUtil.mapNameToIndex(baseFields);
  for (  final RelDataTypeField extendedField : extendedFields) {
    final String extFieldName=extendedField.getName();
    if (nameToIndex.containsKey(extFieldName)) {
      final Integer baseIndex=nameToIndex.get(extFieldName);
      final RelDataType baseType=baseFields.get(baseIndex).getType();
      final RelDataType extType=extendedField.getType();
      if (!extType.equals(baseType)) {
        final Predicate<SqlNode> nameMatches=new PredicateImpl<SqlNode>(){
          @Override public boolean test(          SqlNode sqlNode){
            if (sqlNode instanceof SqlIdentifier) {
              final SqlIdentifier identifier=(SqlIdentifier)sqlNode;
              return Util.last(identifier.names).equals(extendedField.getName());
            }
            return false;
          }
        }
;
        final SqlNode extColNode=Iterables.find(extendList.getList(),nameMatches);
        throw validator.getValidationErrorFunction().apply(extColNode,RESOURCE.typeNotAssignable(baseFields.get(baseIndex).getName(),baseType.getFullTypeString(),extendedField.getName(),extType.getFullTypeString()));
      }
    }
  }
}",0.9959080893925086
111784,"/** 
 * As   {@link #testFilterSortDesc} but with a filter that cannot be pusheddown to Druid. 
 */
@Test public void testNonPushableFilterSortDesc(){
  final String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  final String druidQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  sql(sql).limit(4).returns(new Function<ResultSet,Void>(){
    public Void apply(    ResultSet resultSet){
      try {
        for (int i=0; i < 4; i++) {
          assertTrue(resultSet.next());
          assertThat(resultSet.getString(""String_Node_Str""),is(""String_Node_Str""));
        }
        assertFalse(resultSet.next());
        return null;
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
).queryContains(druidChecker(druidQuery));
}","/** 
 * As   {@link #testFilterSortDescNumeric()} but with a filter that cannotbe pushed down to Druid. 
 */
@Test public void testNonPushableFilterSortDesc(){
  final String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  final String druidQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  sql(sql).limit(4).returns(new Function<ResultSet,Void>(){
    public Void apply(    ResultSet resultSet){
      try {
        for (int i=0; i < 4; i++) {
          assertTrue(resultSet.next());
          assertThat(resultSet.getString(""String_Node_Str""),is(""String_Node_Str""));
        }
        assertFalse(resultSet.next());
        return null;
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
).queryContains(druidChecker(druidQuery));
}",0.9949748743718592
111785,"@Override protected RelDataType deriveRowType(){
  return getCluster().getTypeFactory().leastRestrictive(new AbstractList<RelDataType>(){
    @Override public RelDataType get(    int index){
      return inputs.get(index).getRowType();
    }
    @Override public int size(){
      return inputs.size();
    }
  }
);
}","@Override protected RelDataType deriveRowType(){
  final List<RelDataType> inputRowTypes=Lists.transform(inputs,new Function<RelNode,RelDataType>(){
    public RelDataType apply(    RelNode input){
      return input.getRowType();
    }
  }
);
  final RelDataType rowType=getCluster().getTypeFactory().leastRestrictive(inputRowTypes);
  if (rowType == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + Util.sepList(inputRowTypes,""String_Node_Str""));
  }
  return rowType;
}",0.2805320435308343
111786,"/** 
 * Creates a relational expression for a table scan, aggregate, filter. It is equivalent to <pre> SELECT deptno, count(*) AS c, sum(sal) AS s FROM emp GROUP BY deptno HAVING count(*) > 10</pre>
 */
private RelBuilder example3(RelBuilder builder){
  return builder.scan(""String_Node_Str"").aggregate(builder.groupKey(""String_Node_Str""),builder.count(false,""String_Node_Str""),builder.sum(false,""String_Node_Str"",builder.field(""String_Node_Str""))).filter(builder.call(SqlStdOperatorTable.GREATER_THAN,builder.field(""String_Node_Str""),builder.literal(10)));
}","/** 
 * Creates a relational expression for a table scan, aggregate, filter. It is equivalent to <pre> SELECT deptno, count(*) AS c, sum(sal) AS s FROM emp GROUP BY deptno HAVING count(*) &gt; 10</pre>
 */
private RelBuilder example3(RelBuilder builder){
  return builder.scan(""String_Node_Str"").aggregate(builder.groupKey(""String_Node_Str""),builder.count(false,""String_Node_Str""),builder.sum(false,""String_Node_Str"",builder.field(""String_Node_Str""))).filter(builder.call(SqlStdOperatorTable.GREATER_THAN,builder.field(""String_Node_Str""),builder.literal(10)));
}",0.9955396966993756
111787,"/** 
 * Creates a program, depending on variant: <ol> <li><code>select (x + y) + (x + 1) as a, (x + x) as b from t(x, y)</code> <li><code>select (x + y) + (x + 1) as a, (x + (x + 1)) as b from t(x, y)</code> <li><code>select (x + y) + (x + 1) as a, (x + x) as b from t(x, y) where ((x + y) > 1) and ((x + y) > 1)</code> <li><code>select (x + y) + (x + 1) as a, (x + x) as b from t(x, y) where not case when x + 1 > 5 then true when y is null then null else false end</code> </ol>
 */
private RexProgramBuilder createProg(int variant){
}","/** 
 * Creates a program, depending on variant: <ol> <li><code>select (x + y) + (x + 1) as a, (x + x) as b from t(x, y)</code> <li><code>select (x + y) + (x + 1) as a, (x + (x + 1)) as b from t(x, y)</code> <li><code>select (x + y) + (x + 1) as a, (x + x) as b from t(x, y) where ((x + y) &gt; 1) and ((x + y) &gt; 1)</code> <li><code>select (x + y) + (x + 1) as a, (x + x) as b from t(x, y) where not case when x + 1 &gt; 5 then true when y is null then null else false end</code> </ol>
 */
private RexProgramBuilder createProg(int variant){
}",0.9546716003700276
111788,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || !(obj instanceof RpcMetadataResponse)) {
    return false;
  }
  RpcMetadataResponse other=(RpcMetadataResponse)obj;
  if (serverAddress == null) {
    if (other.serverAddress != null) {
      return false;
    }
  }
  return serverAddress.equals(other.serverAddress);
}","@Override public boolean equals(Object obj){
  return this == obj || (obj instanceof RpcMetadataResponse && Objects.equals(serverAddress,((RpcMetadataResponse)obj).serverAddress));
}",0.5535714285714286
111789,"@Test public void testFilter(){
  final PigRelBuilder builder=PigRelBuilder.create(config().build());
  final RelNode root=builder.load(""String_Node_Str"",null,null).filter(builder.isNotNull(builder.field(""String_Node_Str""))).build();
  assertThat(RelOptUtil.toString(root),is(""String_Node_Str"" + ""String_Node_Str""));
}","@Test public void testFilter(){
  final PigRelBuilder builder=PigRelBuilder.create(config().build());
  final RelNode root=builder.load(""String_Node_Str"",null,null).filter(builder.isNotNull(builder.field(""String_Node_Str""))).build();
  final String plan=""String_Node_Str"" + ""String_Node_Str"";
  assertThat(str(root),is(plan));
}",0.7832817337461301
111790,"@Test public void testGroup2(){
  final PigRelBuilder builder=PigRelBuilder.create(config().build());
  final RelNode root=builder.scan(""String_Node_Str"").scan(""String_Node_Str"").group(null,null,-1,builder.groupKey(""String_Node_Str"").alias(""String_Node_Str""),builder.groupKey(""String_Node_Str"").alias(""String_Node_Str"")).build();
  final String plan=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertThat(RelOptUtil.toString(root),is(plan));
}","@Test public void testGroup2(){
  final PigRelBuilder builder=PigRelBuilder.create(config().build());
  final RelNode root=builder.scan(""String_Node_Str"").scan(""String_Node_Str"").group(null,null,-1,builder.groupKey(""String_Node_Str"").alias(""String_Node_Str""),builder.groupKey(""String_Node_Str"").alias(""String_Node_Str"")).build();
  final String plan=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertThat(str(root),is(plan));
}",0.9775510204081632
111791,"@Test public void testDistinct(){
  final PigRelBuilder builder=PigRelBuilder.create(config().build());
  final RelNode root=builder.scan(""String_Node_Str"").distinct().build();
  final String plan=""String_Node_Str"" + ""String_Node_Str"";
  assertThat(RelOptUtil.toString(root),is(plan));
}","@Test public void testDistinct(){
  final PigRelBuilder builder=PigRelBuilder.create(config().build());
  final RelNode root=builder.scan(""String_Node_Str"").distinct().build();
  final String plan=""String_Node_Str"" + ""String_Node_Str"";
  assertThat(str(root),is(plan));
}",0.9247311827956988
111792,"@Test public void testScan(){
  final PigRelBuilder builder=PigRelBuilder.create(config().build());
  final RelNode root=builder.scan(""String_Node_Str"").build();
  assertThat(RelOptUtil.toString(root),is(""String_Node_Str""));
}","@Test public void testScan(){
  final PigRelBuilder builder=PigRelBuilder.create(config().build());
  final RelNode root=builder.scan(""String_Node_Str"").build();
  assertThat(str(root),is(""String_Node_Str""));
}",0.9495412844036696
111793,"@Test public void testGroup(){
  final PigRelBuilder builder=PigRelBuilder.create(config().build());
  final RelNode root=builder.scan(""String_Node_Str"").group(null,null,-1,builder.groupKey(""String_Node_Str"",""String_Node_Str"").alias(""String_Node_Str"")).build();
  final String plan=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  assertThat(RelOptUtil.toString(root),is(plan));
}","@Test public void testGroup(){
  final PigRelBuilder builder=PigRelBuilder.create(config().build());
  final RelNode root=builder.scan(""String_Node_Str"").group(null,null,-1,builder.groupKey(""String_Node_Str"",""String_Node_Str"").alias(""String_Node_Str"")).build();
  final String plan=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  assertThat(str(root),is(plan));
}",0.9727047146401984
111794,"@Test public void testLoad(){
  final PigRelBuilder builder=PigRelBuilder.create(config().build());
  final RelNode root=builder.load(""String_Node_Str"",null,null).build();
  assertThat(RelOptUtil.toString(root),is(""String_Node_Str""));
}","@Test public void testLoad(){
  final PigRelBuilder builder=PigRelBuilder.create(config().build());
  final RelNode root=builder.load(""String_Node_Str"",null,null).build();
  assertThat(str(root),is(""String_Node_Str""));
}",0.9517543859649122
111795,"public Fluent explainContains(String expected) throws ParseException {
  final Ast.Program program=parseProgram(pig);
  final PigRelBuilder builder=PigRelBuilder.create(PigRelBuilderTest.config().build());
  new Handler(builder).handle(program);
  assertThat(RelOptUtil.toString(builder.peek()),is(expected));
  return this;
}","public Fluent explainContains(String expected) throws ParseException {
  final Ast.Program program=parseProgram(pig);
  final PigRelBuilder builder=PigRelBuilder.create(PigRelBuilderTest.config().build());
  new Handler(builder).handle(program);
  assertThat(Util.toLinux(RelOptUtil.toString(builder.peek())),is(expected));
  return this;
}",0.978978978978979
111796,"public Fluent returns(Function<String,Void> checker) throws ParseException {
  final Ast.Program program=parseProgram(pig);
  final PigRelBuilder builder=PigRelBuilder.create(PigRelBuilderTest.config().build());
  final StringWriter sw=new StringWriter();
  new CalciteHandler(builder,sw).handle(program);
  checker.apply(sw.toString());
  return this;
}","public Fluent returns(Function<String,Void> checker) throws ParseException {
  final Ast.Program program=parseProgram(pig);
  final PigRelBuilder builder=PigRelBuilder.create(PigRelBuilderTest.config().build());
  final StringWriter sw=new StringWriter();
  new CalciteHandler(builder,sw).handle(program);
  checker.apply(Util.toLinux(sw.toString()));
  return this;
}",0.9806094182825484
111797,"public Fluent parseContains(String expected) throws ParseException {
  final Ast.Program program=parseProgram(pig);
  assertThat(Ast.toString(program),is(expected));
  return this;
}","public Fluent parseContains(String expected) throws ParseException {
  final Ast.Program program=parseProgram(pig);
  assertThat(Util.toLinux(Ast.toString(program)),is(expected));
  return this;
}",0.9629629629629628
111798,"/** 
 * Returns a  {@link org.apache.calcite.adapter.enumerable.RexToLixTranslator}suitable to transform the arguments.
 */
RexToLixTranslator rowTranslator();","/** 
 * Returns a  {@link org.apache.calcite.adapter.enumerable.RexToLixTranslator}suitable to transform the arguments.
 * @return {@link RexToLixTranslator} suitable to transform the arguments
 */
RexToLixTranslator rowTranslator();",0.8112244897959183
111799,"/** 
 * Returns the parameter types of the aggregate as  {@link java.lang.reflect.Type}.
 */
List<? extends Type> parameterTypes();","/** 
 * Returns the parameter types of the aggregate as  {@link java.lang.reflect.Type}.
 * @return Parameter types of the aggregate
 */
List<? extends Type> parameterTypes();",0.8562091503267973
111800,"/** 
 * Returns the parameter types of the aggregate as  {@link org.apache.calcite.rel.type.RelDataType}. This can be helpful to test  {@link org.apache.calcite.rel.type.RelDataType#isNullable()}.
 */
List<? extends RelDataType> parameterRelTypes();","/** 
 * Returns the parameter types of the aggregate as  {@link org.apache.calcite.rel.type.RelDataType}. This can be helpful to test  {@link org.apache.calcite.rel.type.RelDataType#isNullable()}.
 * @return Parameter types of the aggregate
 */
List<? extends RelDataType> parameterRelTypes();",0.918819188191882
111801,"/** 
 * Updates intermediate values to account for the newly added value.  {@link AggResetContext#accumulator()} should be used to referencethe state variables.
 * @param info aggregate context
 * @param add add context
 */
void implementAdd(AggContext info,AggAddContext add);","/** 
 * Updates intermediate values to account for the newly added value.  {@link AggResetContext#accumulator()} should be used to referencethe state variables.
 * @param info Aggregate context
 * @param add Add context
 */
void implementAdd(AggContext info,AggAddContext add);",0.9927797833935018
111802,"/** 
 * Implements reset of the intermediate variables to the initial state.  {@link AggResetContext#accumulator()} should be used to referencethe state variables. For instance, to zero the count use the following code: {@code reset.currentBlock().add(Expressions.statement(Expressions.assign(reset.accumulator().get(0), Expressions.constant(0)));}
 * @param info aggregate context
 * @param reset reset context
 */
void implementReset(AggContext info,AggResetContext reset);","/** 
 * Implements reset of the intermediate variables to the initial state.  {@link AggResetContext#accumulator()} should be used to referencethe state variables. For instance, to zero the count use the following code: {@code reset.currentBlock().add(Expressions.statement(Expressions.assign(reset.accumulator().get(0), Expressions.constant(0)));}
 * @param info Aggregate context
 * @param reset Reset context
 */
void implementReset(AggContext info,AggResetContext reset);",0.9957894736842106
111803,"/** 
 * Calculates the resulting value based on the intermediate variables. Note: this method must NOT destroy the intermediate variables as calcite might reuse the state when calculating sliding aggregates.  {@link AggResetContext#accumulator()} should be used to referencethe state variables.
 * @param info aggregate context
 * @param result result context
 */
Expression implementResult(AggContext info,AggResultContext result);","/** 
 * Calculates the resulting value based on the intermediate variables. Note: this method must NOT destroy the intermediate variables as calcite might reuse the state when calculating sliding aggregates.  {@link AggResetContext#accumulator()} should be used to referencethe state variables.
 * @param info Aggregate context
 * @param result Result context
 * @return Expression that is a result of calculating final value ofthe aggregate being implemented
 */
Expression implementResult(AggContext info,AggResultContext result);",0.8651452282157677
111804,"/** 
 * Returns the types of the intermediate variables used by the aggregate implementation. <p>For instance, for ""concatenate to string"" this can be  {@link java.lang.StringBuilder}. Calcite calls this method before all other   {@code implement*} methods.
 * @param info aggregate context
 * @return types of the intermediate variables used by the aggregateimplementation
 */
List<Type> getStateType(AggContext info);","/** 
 * Returns the types of the intermediate variables used by the aggregate implementation. <p>For instance, for ""concatenate to string"" this can be  {@link java.lang.StringBuilder}. Calcite calls this method before all other   {@code implement*} methods.
 * @param info Aggregate context
 * @return Types of the intermediate variables used by the aggregateimplementation
 */
List<Type> getStateType(AggContext info);",0.9952267303102624
111805,"/** 
 * Implements a call. 
 */
Expression implement(RexToLixTranslator translator,RexCall call,RexImpTable.NullAs nullAs);","/** 
 * Implements a call.
 * @param translator Translator for the call
 * @param call Call that should be implemented
 * @param nullAs The desired mode of {@code null} translation
 * @return Translated call
 */
Expression implement(RexToLixTranslator translator,RexCall call,RexImpTable.NullAs nullAs);",0.5727699530516432
111806,"/** 
 * Creates an EnumerableInterpreterRel. 
 */
public EnumerableInterpreter(RelOptCluster cluster,RelTraitSet traitSet,RelNode input,double factor){
  super(cluster,traitSet,input);
  this.factor=factor;
}","/** 
 * Creates an EnumerableInterpreter.
 * @param cluster Cluster
 * @param traitSet Traits
 * @param input Input relation
 * @param factor Cost multiply factor
 */
public EnumerableInterpreter(RelOptCluster cluster,RelTraitSet traitSet,RelNode input,double factor){
  super(cluster,traitSet,input);
  this.factor=factor;
}",0.7654784240150094
111807,"/** 
 * Creates a plan for this expression according to a calling convention.
 * @param implementor Implementor
 * @param pref Preferred representation for rows in result expression
 */
Result implement(EnumerableRelImplementor implementor,Prefer pref);","/** 
 * Creates a plan for this expression according to a calling convention.
 * @param implementor Implementor
 * @param pref Preferred representation for rows in result expression
 * @return Plan for this expression according to a calling convention
 */
Result implement(EnumerableRelImplementor implementor,Prefer pref);",0.8784722222222222
111808,"/** 
 * Returns the expression with which to access the  {@link org.apache.calcite.DataContext}. 
 */
public ParameterExpression getRootExpression(){
  return DataContext.ROOT;
}","/** 
 * Returns the expression used to access  {@link org.apache.calcite.DataContext}.
 * @return expression used to access {@link org.apache.calcite.DataContext}.
 */
public ParameterExpression getRootExpression(){
  return DataContext.ROOT;
}",0.7251184834123223
111809,"/** 
 * Returns a string which concisely describes the definition of this relational expression. Two relational expressions are equivalent if and only if their digests are the same. <p>The digest does not contain the relational expression's identity -- that would prevent similar relational expressions from ever comparing equal -- but does include the identity of children (on the assumption that children have already been normalized). <p>If you want a descriptive string which contains the identity, call  {@link Object#toString()}, which always returns ""rel#{id}:{digest}"".
 */
String getDigest();","/** 
 * Returns a string which concisely describes the definition of this relational expression. Two relational expressions are equivalent if and only if their digests are the same. <p>The digest does not contain the relational expression's identity -- that would prevent similar relational expressions from ever comparing equal -- but does include the identity of children (on the assumption that children have already been normalized). <p>If you want a descriptive string which contains the identity, call  {@link Object#toString()}, which always returns ""rel#{id}:{digest}"".
 * @return Digest of this {@code RelNode}
 */
String getDigest();",0.9662379421221864
111810,List<? extends RelOptNode> getInputs();,"/** 
 * Returns an array of this relational expression's inputs. If there are no inputs, returns an empty list, not   {@code null}.
 * @return Array of this relational expression's inputs
 */
List<? extends RelOptNode> getInputs();",0.2888888888888888
111811,"/** 
 * Returns a string which describes the relational expression and, unlike  {@link #getDigest()}, also includes the identity. Typically returns ""rel#{id}:{digest}"".
 */
String getDescription();","/** 
 * Returns a string which describes the relational expression and, unlike  {@link #getDigest()}, also includes the identity. Typically returns ""rel#{id}:{digest}"".
 * @return String which describes the relational expression and, unlike{@link #getDigest()}, also includes the identity
 */
String getDescription();",0.7665369649805448
111812,"/** 
 * Creates a list of child operands that matches child relational expressions in any order. <p>This is useful when matching a relational expression which can have a variable number of children. For example, the rule to eliminate empty children of a Union would have operands</p> <blockquote>Operand(Union, true, Operand(Empty))</blockquote> <p>and given the relational expressions</p> <blockquote>Union(LogicalFilter, Empty, LogicalProject)</blockquote> <p>would fire the rule with arguments</p> <blockquote>{Union, Empty}</blockquote> <p>It is up to the rule to deduce the other children, or indeed the position of the matched child.</p>
 * @param first First child operand
 * @param rest  Remaining child operands (may be empty)
 */
public static RelOptRuleOperandChildren unordered(RelOptRuleOperand first,RelOptRuleOperand... rest){
  return new RelOptRuleOperandChildren(RelOptRuleOperandChildPolicy.UNORDERED,ImmutableList.<RelOptRuleOperand>builder().add(first).add(rest).build());
}","/** 
 * Creates a list of child operands that matches child relational expressions in any order. <p>This is useful when matching a relational expression which can have a variable number of children. For example, the rule to eliminate empty children of a Union would have operands</p> <blockquote>Operand(Union, true, Operand(Empty))</blockquote> <p>and given the relational expressions</p> <blockquote>Union(LogicalFilter, Empty, LogicalProject)</blockquote> <p>would fire the rule with arguments</p> <blockquote>{Union, Empty}</blockquote> <p>It is up to the rule to deduce the other children, or indeed the position of the matched child.</p>
 * @param first First child operand
 * @param rest  Remaining child operands (may be empty)
 * @return List of child operands that matches child relationalexpressions in any order
 */
public static RelOptRuleOperandChildren unordered(RelOptRuleOperand first,RelOptRuleOperand... rest){
  return new RelOptRuleOperandChildren(RelOptRuleOperandChildPolicy.UNORDERED,ImmutableList.<RelOptRuleOperand>builder().add(first).add(rest).build());
}",0.9576515880654476
111813,"/** 
 * Creates a list of child operands that matches child relational expressions in the order they appear.
 * @param first First child operand
 * @param rest  Remaining child operands (may be empty)
 */
public static RelOptRuleOperandChildren some(RelOptRuleOperand first,RelOptRuleOperand... rest){
  return new RelOptRuleOperandChildren(RelOptRuleOperandChildPolicy.SOME,ImmutableList.<RelOptRuleOperand>builder().add(first).add(rest).build());
}","/** 
 * Creates a list of child operands that matches child relational expressions in the order they appear.
 * @param first First child operand
 * @param rest  Remaining child operands (may be empty)
 * @return List of child operands that matches child relationalexpressions in the order
 */
public static RelOptRuleOperandChildren some(RelOptRuleOperand first,RelOptRuleOperand... rest){
  return new RelOptRuleOperandChildren(RelOptRuleOperandChildPolicy.SOME,ImmutableList.<RelOptRuleOperand>builder().add(first).add(rest).build());
}",0.9109311740890688
111814,"/** 
 * Returns the trait which will be modified as a result of firing this rule, or null if the rule is not a converter rule.
 */
public RelTrait getOutTrait(){
  return null;
}","/** 
 * Returns the trait which will be modified as a result of firing this rule, or null if the rule is not a converter rule.
 * @return Trait which will be modified as a result of firing this rule,or null if the rule is not a converter rule
 */
public RelTrait getOutTrait(){
  return null;
}",0.7542372881355932
111815,"/** 
 * Creates an empty list of child operands.
 */
public static RelOptRuleOperandChildren none(){
  return RelOptRuleOperandChildren.LEAF_CHILDREN;
}","/** 
 * Creates an empty list of child operands.
 * @return Empty list of child operands
 */
public static RelOptRuleOperandChildren none(){
  return RelOptRuleOperandChildren.LEAF_CHILDREN;
}",0.8837209302325582
111816,"/** 
 * Creates a list of child operands that signifies that the operand matches any number of child relational expressions.
 */
public static RelOptRuleOperandChildren any(){
  return RelOptRuleOperandChildren.ANY_CHILDREN;
}","/** 
 * Creates a list of child operands that signifies that the operand matches any number of child relational expressions.
 * @return List of child operands that signifies that the operand matchesany number of child relational expressions
 */
public static RelOptRuleOperandChildren any(){
  return RelOptRuleOperandChildren.ANY_CHILDREN;
}",0.795774647887324
111817,"/** 
 * Returns the convention of the result of firing this rule, null if not known.
 */
public Convention getOutConvention(){
  return null;
}","/** 
 * Returns the convention of the result of firing this rule, null if not known.
 * @return Convention of the result of firing this rule, null ifnot known
 */
public Convention getOutConvention(){
  return null;
}",0.7944444444444444
111818,"/** 
 * Returns whether this rule is equal to another rule. <p>The base implementation checks that the rules have the same class and that the operands are equal; derived classes can override.
 */
protected boolean equals(RelOptRule that){
  return this.description.equals(that.description) && (this.getClass() == that.getClass()) && this.operand.equals(that.operand);
}","/** 
 * Returns whether this rule is equal to another rule. <p>The base implementation checks that the rules have the same class and that the operands are equal; derived classes can override.
 * @param that Another rule
 * @return Whether this rule is equal to another rule
 */
protected boolean equals(RelOptRule that){
  return this.description.equals(that.description) && (this.getClass() == that.getClass()) && this.operand.equals(that.operand);
}",0.9
111819,"/** 
 * Creates an operand that matches a relational expression with a given list of children. <p>Shorthand for <code>operand(clazz, some(...))</code>. <p>If you wish to match a relational expression that has no children (that is, a leaf node), write <code>operand(clazz, none())</code></p>. <p>If you wish to match a relational expression that has any number of children, write <code>operand(clazz, any())</code></p>.
 * @param clazz Class of relational expression to match (must not be null)
 * @return Operand
 */
public static <R extends RelNode>RelOptRuleOperand operand(Class<R> clazz,RelOptRuleOperand first,RelOptRuleOperand... rest){
  return operand(clazz,some(first,rest));
}","/** 
 * Creates an operand that matches a relational expression with a given list of children. <p>Shorthand for <code>operand(clazz, some(...))</code>. <p>If you wish to match a relational expression that has no children (that is, a leaf node), write <code>operand(clazz, none())</code></p>. <p>If you wish to match a relational expression that has any number of children, write <code>operand(clazz, any())</code></p>.
 * @param clazz Class of relational expression to match (must not be null)
 * @param first First operand
 * @param rest Rest operands
 * @param < R > Class of relational expression to match
 * @return Operand that matches a relational expression with a givenlist of children
 */
public static <R extends RelNode>RelOptRuleOperand operand(Class<R> clazz,RelOptRuleOperand first,RelOptRuleOperand... rest){
  return operand(clazz,some(first,rest));
}",0.8834513844172569
111820,"/** 
 * Returns whether this trait subsumes a given trait. <p>Must form a partial order: must be reflective (t subsumes t), anti-symmetric (if t1 subsumes t2 and t1 != t2 then t2 does not subsume t1), and transitive (if t1 subsumes t2 and t2 subsumes t3, then t1 subsumes t3)</p> <p>Many traits cannot be substituted, in which case, this method should return   {@code equals(trait)}.</p>
 */
boolean subsumes(RelTrait trait);","/** 
 * Returns whether this trait subsumes a given trait. <p>Must form a partial order: must be reflective (t subsumes t), anti-symmetric (if t1 subsumes t2 and t1 != t2 then t2 does not subsume t1), and transitive (if t1 subsumes t2 and t2 subsumes t3, then t1 subsumes t3)</p> <p>Many traits cannot be substituted, in which case, this method should return   {@code equals(trait)}.</p>
 * @param trait Given trait
 * @return Whether this trait subsumes a given trait
 */
boolean subsumes(RelTrait trait);",0.9129967776584318
111821,"/** 
 * Computes the digest. Does not modify this object.
 */
protected String computeDigest(){
  StringWriter sw=new StringWriter();
  RelWriter pw=new RelWriterImpl(new PrintWriter(sw),SqlExplainLevel.DIGEST_ATTRIBUTES,false){
    protected void explain_(    RelNode rel,    List<Pair<String,Object>> values){
      pw.write(getRelTypeName());
      for (      RelTrait trait : traitSet) {
        pw.write(""String_Node_Str"");
        pw.write(trait.toString());
      }
      pw.write(""String_Node_Str"");
      int j=0;
      for (      Pair<String,Object> value : values) {
        if (j++ > 0) {
          pw.write(""String_Node_Str"");
        }
        pw.write(value.left + ""String_Node_Str"" + value.right);
      }
      pw.write(""String_Node_Str"");
    }
  }
;
  explain(pw);
  return sw.toString();
}","/** 
 * Computes the digest. Does not modify this object.
 * @return Digest
 */
protected String computeDigest(){
  StringWriter sw=new StringWriter();
  RelWriter pw=new RelWriterImpl(new PrintWriter(sw),SqlExplainLevel.DIGEST_ATTRIBUTES,false){
    protected void explain_(    RelNode rel,    List<Pair<String,Object>> values){
      pw.write(getRelTypeName());
      for (      RelTrait trait : traitSet) {
        pw.write(""String_Node_Str"");
        pw.write(trait.toString());
      }
      pw.write(""String_Node_Str"");
      int j=0;
      for (      Pair<String,Object> value : values) {
        if (j++ > 0) {
          pw.write(""String_Node_Str"");
        }
        pw.write(value.left + ""String_Node_Str"" + value.right);
      }
      pw.write(""String_Node_Str"");
    }
  }
;
  explain(pw);
  return sw.toString();
}",0.988997555012225
111822,"/** 
 * Describes the inputs and attributes of this relational expression. Each node should call   {@code super.explainTerms}, then call the  {@link org.apache.calcite.rel.externalize.RelWriterImpl#input(String,RelNode)}and  {@link org.apache.calcite.rel.externalize.RelWriterImpl#item(String,Object)}methods for each input and attribute.
 * @param pw Plan writer
 */
public RelWriter explainTerms(RelWriter pw){
  return pw;
}","/** 
 * Describes the inputs and attributes of this relational expression. Each node should call   {@code super.explainTerms}, then call the  {@link org.apache.calcite.rel.externalize.RelWriterImpl#input(String,RelNode)}and  {@link org.apache.calcite.rel.externalize.RelWriterImpl#item(String,Object)}methods for each input and attribute.
 * @param pw Plan writer
 * @return Plan writer for fluent-explain pattern
 */
public RelWriter explainTerms(RelWriter pw){
  return pw;
}",0.9446902654867256
111823,"/** 
 * Pushes down parts of a join condition. For example, given ""emp JOIN dept ON emp.deptno + 1 = dept.deptno"", adds a project above ""emp"" that computes the expression ""emp.deptno + 1"". The resulting join condition is a simple combination of AND, equals, and input fields.
 */
private RexNode pushDownJoinConditions(RexNode node,int leftCount,int rightCount,List<RexNode> extraLeftExprs,List<RexNode> extraRightExprs){
switch (node.getKind()) {
case AND:
case OR:
case EQUALS:
    RexCall call=(RexCall)node;
  List<RexNode> list=new ArrayList<RexNode>();
List<RexNode> operands=Lists.newArrayList(call.getOperands());
for (int i=0; i < operands.size(); i++) {
RexNode operand=operands.get(i);
final int left2=leftCount + extraLeftExprs.size();
final int right2=rightCount + extraRightExprs.size();
final RexNode e=pushDownJoinConditions(operand,leftCount,rightCount,extraLeftExprs,extraRightExprs);
final List<RexNode> remainingOperands=Util.skip(operands,i + 1);
final int left3=leftCount + extraLeftExprs.size();
final int right3=rightCount + extraRightExprs.size();
fix(remainingOperands,left2,left3);
fix(remainingOperands,left3 + right2,left3 + right3);
fix(list,left2,left3);
fix(list,left3 + right2,left3 + right3);
list.add(e);
}
if (!list.equals(call.getOperands())) {
return call.clone(call.getType(),list);
}
return call;
case INPUT_REF:
case LITERAL:
return node;
default :
BitSet bits=RelOptUtil.InputFinder.bits(node);
final int mid=leftCount + extraLeftExprs.size();
switch (Side.of(bits,mid)) {
case LEFT:
extraLeftExprs.add(node);
return new RexInputRef(mid,node.getType());
case RIGHT:
final int index2=mid + rightCount + extraRightExprs.size();
extraRightExprs.add(node);
return new RexInputRef(index2,node.getType());
case BOTH:
case EMPTY:
default :
return node;
}
}
}","/** 
 * Pushes down parts of a join condition. For example, given ""emp JOIN dept ON emp.deptno + 1 = dept.deptno"", adds a project above ""emp"" that computes the expression ""emp.deptno + 1"". The resulting join condition is a simple combination of AND, equals, and input fields.
 */
private RexNode pushDownJoinConditions(RexNode node,int leftCount,int rightCount,List<RexNode> extraLeftExprs,List<RexNode> extraRightExprs){
switch (node.getKind()) {
case AND:
case OR:
case EQUALS:
    RexCall call=(RexCall)node;
  List<RexNode> list=new ArrayList<RexNode>();
List<RexNode> operands=Lists.newArrayList(call.getOperands());
for (int i=0; i < operands.size(); i++) {
RexNode operand=operands.get(i);
final int left2=leftCount + extraLeftExprs.size();
final int right2=rightCount + extraRightExprs.size();
final RexNode e=pushDownJoinConditions(operand,leftCount,rightCount,extraLeftExprs,extraRightExprs);
final List<RexNode> remainingOperands=Util.skip(operands,i + 1);
final int left3=leftCount + extraLeftExprs.size();
final int right3=rightCount + extraRightExprs.size();
fix(remainingOperands,left2,left3);
fix(list,left2,left3);
list.add(e);
}
if (!list.equals(call.getOperands())) {
return call.clone(call.getType(),list);
}
return call;
case INPUT_REF:
case LITERAL:
return node;
default :
BitSet bits=RelOptUtil.InputFinder.bits(node);
final int mid=leftCount + extraLeftExprs.size();
switch (Side.of(bits,mid)) {
case LEFT:
fix(extraRightExprs,mid,mid + 1);
extraLeftExprs.add(node);
return new RexInputRef(mid,node.getType());
case RIGHT:
final int index2=mid + rightCount + extraRightExprs.size();
extraRightExprs.add(node);
return new RexInputRef(index2,node.getType());
case BOTH:
case EMPTY:
default :
return node;
}
}
}",0.9588652482269504
111824,"protected Object convert(CsvFieldType fieldType,String string){
  if (fieldType == null) {
    return string;
  }
switch (fieldType) {
default :
case STRING:
    return string;
case BOOLEAN:
  if (string.length() == 0) {
    return null;
  }
return Boolean.parseBoolean(string);
case BYTE:
if (string.length() == 0) {
return null;
}
return Byte.parseByte(string);
case SHORT:
if (string.length() == 0) {
return null;
}
return Short.parseShort(string);
case INT:
if (string.length() == 0) {
return null;
}
return Integer.parseInt(string);
case LONG:
if (string.length() == 0) {
return null;
}
return Long.parseLong(string);
case FLOAT:
if (string.length() == 0) {
return null;
}
return Float.parseFloat(string);
case DOUBLE:
if (string.length() == 0) {
return null;
}
return Double.parseDouble(string);
case DATE:
if (string.length() == 0) {
return null;
}
try {
Date date=TIME_FORMAT_DATE.parse(string);
return new java.sql.Date(date.getTime());
}
 catch (ParseException e) {
return null;
}
case TIME:
if (string.length() == 0) {
return null;
}
try {
Date date=TIME_FORMAT_TIME.parse(string);
return new java.sql.Time(date.getTime());
}
 catch (ParseException e) {
return null;
}
case TIMESTAMP:
if (string.length() == 0) {
return null;
}
try {
Date date=TIME_FORMAT_TIMESTAMP.parse(string);
return new java.sql.Timestamp(date.getTime());
}
 catch (ParseException e) {
return null;
}
}
}","protected Object convert(CsvFieldType fieldType,String string){
  if (fieldType == null) {
    return string;
  }
switch (fieldType) {
case BOOLEAN:
    if (string.length() == 0) {
      return null;
    }
  return Boolean.parseBoolean(string);
case BYTE:
if (string.length() == 0) {
  return null;
}
return Byte.parseByte(string);
case SHORT:
if (string.length() == 0) {
return null;
}
return Short.parseShort(string);
case INT:
if (string.length() == 0) {
return null;
}
return Integer.parseInt(string);
case LONG:
if (string.length() == 0) {
return null;
}
return Long.parseLong(string);
case FLOAT:
if (string.length() == 0) {
return null;
}
return Float.parseFloat(string);
case DOUBLE:
if (string.length() == 0) {
return null;
}
return Double.parseDouble(string);
case DATE:
if (string.length() == 0) {
return null;
}
try {
Date date=TIME_FORMAT_DATE.parse(string);
return new java.sql.Date(date.getTime());
}
 catch (ParseException e) {
return null;
}
case TIME:
if (string.length() == 0) {
return null;
}
try {
Date date=TIME_FORMAT_TIME.parse(string);
return new java.sql.Time(date.getTime());
}
 catch (ParseException e) {
return null;
}
case TIMESTAMP:
if (string.length() == 0) {
return null;
}
try {
Date date=TIME_FORMAT_TIMESTAMP.parse(string);
return new java.sql.Timestamp(date.getTime());
}
 catch (ParseException e) {
return null;
}
case STRING:
default :
return string;
}
}",0.9532374100719424
111825,"private static void collect(List<String> result,ResultSet resultSet) throws SQLException {
  final StringBuilder buf=new StringBuilder();
  while (resultSet.next()) {
    buf.setLength(0);
    int n=resultSet.getMetaData().getColumnCount();
    String sep=""String_Node_Str"";
    for (int i=1; i <= n; i++) {
      buf.append(sep).append(resultSet.getMetaData().getColumnLabel(i)).append(""String_Node_Str"").append(resultSet.getObject(i));
      sep=""String_Node_Str"";
    }
    result.add(toLinux(buf.toString()));
  }
}","private static void collect(List<String> result,ResultSet resultSet) throws SQLException {
  final StringBuilder buf=new StringBuilder();
  while (resultSet.next()) {
    buf.setLength(0);
    int n=resultSet.getMetaData().getColumnCount();
    String sep=""String_Node_Str"";
    for (int i=1; i <= n; i++) {
      buf.append(sep).append(resultSet.getMetaData().getColumnLabel(i)).append(""String_Node_Str"").append(resultSet.getString(i));
      sep=""String_Node_Str"";
    }
    result.add(toLinux(buf.toString()));
  }
}",0.9884393063583816
111826,"public NamedFieldGetter(Class clazz,String... names){
  final List<ColumnMetaData> columns=new ArrayList<ColumnMetaData>();
  for (  String name : names) {
    final int index=fields.size();
    final String fieldName=Util.toCamelCase(name);
    final Field field;
    try {
      field=clazz.getField(fieldName);
    }
 catch (    NoSuchFieldException e) {
      throw new RuntimeException(e);
    }
    columns.add(columnMetaData(name,index,field.getType()));
    fields.add(field);
  }
  structType=ColumnMetaData.struct(columns);
}","public NamedFieldGetter(Class clazz,String... names){
  final List<ColumnMetaData> columns=new ArrayList<ColumnMetaData>();
  init(clazz,names,columns,fields);
  structType=ColumnMetaData.struct(columns);
}",0.3832658569500675
111827,"private SubSchemaCache(final OptiqSchema optiqSchema,ImmutableSortedSet<String> names){
  this.names=names;
  this.cache=CacheBuilder.<String,OptiqSchema>newBuilder().build(new CacheLoader<String,OptiqSchema>(){
    @SuppressWarnings(""String_Node_Str"") @Override public OptiqSchema load(    String schemaName){
      final Schema subSchema=optiqSchema.schema.getSubSchema(schemaName);
      if (subSchema == null) {
        throw new RuntimeException(""String_Node_Str"" + schemaName + ""String_Node_Str"");
      }
      return new OptiqSchema(optiqSchema,subSchema,schemaName);
    }
  }
);
}","private SubSchemaCache(final OptiqSchema optiqSchema,ImmutableSortedSet<String> names){
  this.names=names;
  this.cache=CacheBuilder.newBuilder().build(new CacheLoader<String,OptiqSchema>(){
    @SuppressWarnings(""String_Node_Str"") @Override public OptiqSchema load(    String schemaName){
      final Schema subSchema=optiqSchema.schema.getSubSchema(schemaName);
      if (subSchema == null) {
        throw new RuntimeException(""String_Node_Str"" + schemaName + ""String_Node_Str"");
      }
      return new OptiqSchema(optiqSchema,subSchema,schemaName);
    }
  }
);
}",0.9827586206896552
111828,"/** 
 * Select distinct on composite key, one column of which is boolean to boot. 
 */
@Test public void testSelectDistinctComposite(){
  OptiqAssert.that().with(OptiqAssert.Config.REGULAR).query(""String_Node_Str"" + ""String_Node_Str"").returnsUnordered(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").planContains(""String_Node_Str"");
}","/** 
 * Select distinct on composite key, one column of which is boolean to boot. 
 */
@Test public void testSelectDistinctComposite(){
  OptiqAssert.that().with(OptiqAssert.Config.REGULAR).query(""String_Node_Str"" + ""String_Node_Str"").returnsUnordered(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").planContains(""String_Node_Str"");
}",0.9742857142857144
111829,"static Function1<ResultSet,Void> checkResultUnordered(final String... lines){
  return new Function1<ResultSet,Void>(){
    public Void apply(    ResultSet resultSet){
      try {
        final Collection<String> actualSet=new TreeSet<String>();
        OptiqAssert.toStringList(resultSet,actualSet);
        final TreeSet<String> expectedSet=new TreeSet<String>(Arrays.asList(lines));
        assertEquals(expectedSet,actualSet);
        return null;
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}","static Function1<ResultSet,Void> checkResultUnordered(final String... lines){
  return new Function1<ResultSet,Void>(){
    public Void apply(    ResultSet resultSet){
      try {
        final List<String> expectedList=new ArrayList<String>();
        Collections.addAll(expectedList,lines);
        Collections.sort(expectedList);
        final List<String> actualList=new ArrayList<String>();
        OptiqAssert.toStringList(resultSet,actualList);
        Collections.sort(actualList);
        assertThat(actualList,equalTo(expectedList));
        return null;
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}",0.6639276910435498
111830,"public PhysType project(final List<Integer> integers,JavaRowFormat format){
  RelDataType projectedRowType=typeFactory.createStructType(new AbstractList<Map.Entry<String,RelDataType>>(){
    public Map.Entry<String,RelDataType> get(    int index){
      return rowType.getFieldList().get(index);
    }
    public int size(){
      return integers.size();
    }
  }
);
  return of(typeFactory,projectedRowType,format.optimize(projectedRowType));
}","public PhysType project(List<Integer> integers,JavaRowFormat format){
  RelDataType projectedRowType=typeFactory.createStructType(Lists.transform(integers,new Function<Integer,RelDataTypeField>(){
    public RelDataTypeField apply(    Integer index){
      return rowType.getFieldList().get(index);
    }
  }
));
  return of(typeFactory,projectedRowType,format.optimize(projectedRowType));
}",0.3799283154121863
111831,"public static DataContext createDataContext(Connection schema){
  return new DummyDataContext((OptiqConnection)schema);
}","public static DataContext createDataContext(Connection connection){
  return new DummyDataContext((OptiqConnection)connection);
}",0.904
111832,"private static OptiqPrepare.Context makeContext(final ConnectionConfig connectionConfig,final JavaTypeFactory typeFactory,final OptiqSchema schema,final List<String> schemaPath){
  return new OptiqPrepare.Context(){
    public JavaTypeFactory getTypeFactory(){
      return typeFactory;
    }
    public OptiqRootSchema getRootSchema(){
      return schema.root();
    }
    public List<String> getDefaultSchemaPath(){
      if (schemaPath == null) {
        return path(schema.schema,null);
      }
      return schemaPath;
    }
    public ConnectionConfig config(){
      return connectionConfig;
    }
    public OptiqPrepare.SparkHandler spark(){
      return OptiqPrepare.Dummy.getSparkHandler();
    }
  }
;
}","private static OptiqPrepare.Context makeContext(final ConnectionConfig connectionConfig,final JavaTypeFactory typeFactory,final DataContext dataContext,final OptiqSchema schema,final List<String> schemaPath){
  return new OptiqPrepare.Context(){
    public JavaTypeFactory getTypeFactory(){
      return typeFactory;
    }
    public OptiqRootSchema getRootSchema(){
      return schema.root();
    }
    public List<String> getDefaultSchemaPath(){
      if (schemaPath == null) {
        return path(schema.schema,null);
      }
      return schemaPath;
    }
    public ConnectionConfig config(){
      return connectionConfig;
    }
    public DataContext getDataContext(){
      return dataContext;
    }
    public OptiqPrepare.SparkHandler spark(){
      return OptiqPrepare.Dummy.getSparkHandler();
    }
  }
;
}",0.9328990228013028
111833,"/** 
 * Creates a query planner and initializes it with a default set of rules. 
 */
protected RelOptPlanner createPlanner(Context context){
  final VolcanoPlanner planner=new VolcanoPlanner();
  planner.addRelTraitDef(ConventionTraitDef.instance);
  if (ENABLE_COLLATION_TRAIT) {
    planner.addRelTraitDef(RelCollationTraitDef.INSTANCE);
    planner.registerAbstractRelationalRules();
  }
  RelOptUtil.registerAbstractRels(planner);
  planner.addRule(JavaRules.ENUMERABLE_JOIN_RULE);
  planner.addRule(JavaRules.ENUMERABLE_PROJECT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_FILTER_RULE);
  planner.addRule(JavaRules.ENUMERABLE_AGGREGATE_RULE);
  planner.addRule(JavaRules.ENUMERABLE_SORT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_LIMIT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_UNION_RULE);
  planner.addRule(JavaRules.ENUMERABLE_INTERSECT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_MINUS_RULE);
  planner.addRule(JavaRules.ENUMERABLE_TABLE_MODIFICATION_RULE);
  planner.addRule(JavaRules.ENUMERABLE_VALUES_RULE);
  planner.addRule(JavaRules.ENUMERABLE_WINDOW_RULE);
  planner.addRule(JavaRules.ENUMERABLE_ONE_ROW_RULE);
  planner.addRule(TableAccessRule.instance);
  planner.addRule(MergeProjectRule.instance);
  planner.addRule(PushFilterPastProjectRule.instance);
  planner.addRule(PushFilterPastJoinRule.FILTER_ON_JOIN);
  planner.addRule(RemoveDistinctAggregateRule.instance);
  planner.addRule(ReduceAggregatesRule.instance);
  planner.addRule(SwapJoinRule.instance);
  planner.addRule(PushJoinThroughJoinRule.RIGHT);
  planner.addRule(PushJoinThroughJoinRule.LEFT);
  planner.addRule(PushSortPastProjectRule.INSTANCE);
  context.spark().registerRules(planner);
  return planner;
}","/** 
 * Creates a query planner and initializes it with a default set of rules. 
 */
protected RelOptPlanner createPlanner(Context context){
  final VolcanoPlanner planner=new VolcanoPlanner();
  planner.addRelTraitDef(ConventionTraitDef.instance);
  if (ENABLE_COLLATION_TRAIT) {
    planner.addRelTraitDef(RelCollationTraitDef.INSTANCE);
    planner.registerAbstractRelationalRules();
  }
  RelOptUtil.registerAbstractRels(planner);
  planner.addRule(JavaRules.ENUMERABLE_JOIN_RULE);
  planner.addRule(JavaRules.ENUMERABLE_PROJECT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_FILTER_RULE);
  planner.addRule(JavaRules.ENUMERABLE_AGGREGATE_RULE);
  planner.addRule(JavaRules.ENUMERABLE_SORT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_LIMIT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_UNION_RULE);
  planner.addRule(JavaRules.ENUMERABLE_INTERSECT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_MINUS_RULE);
  planner.addRule(JavaRules.ENUMERABLE_TABLE_MODIFICATION_RULE);
  planner.addRule(JavaRules.ENUMERABLE_VALUES_RULE);
  planner.addRule(JavaRules.ENUMERABLE_WINDOW_RULE);
  planner.addRule(JavaRules.ENUMERABLE_ONE_ROW_RULE);
  planner.addRule(TableAccessRule.instance);
  planner.addRule(MergeProjectRule.instance);
  planner.addRule(PushFilterPastProjectRule.instance);
  planner.addRule(PushFilterPastJoinRule.FILTER_ON_JOIN);
  planner.addRule(RemoveDistinctAggregateRule.instance);
  planner.addRule(ReduceAggregatesRule.instance);
  planner.addRule(SwapJoinRule.instance);
  planner.addRule(PushJoinThroughJoinRule.RIGHT);
  planner.addRule(PushJoinThroughJoinRule.LEFT);
  planner.addRule(PushSortPastProjectRule.INSTANCE);
  if (false) {
    planner.addRule(ReduceExpressionsRule.PROJECT_INSTANCE);
    planner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);
    planner.addRule(ReduceExpressionsRule.CALC_INSTANCE);
    planner.addRule(ReduceValuesRule.FILTER_INSTANCE);
    planner.addRule(ReduceValuesRule.PROJECT_FILTER_INSTANCE);
    planner.addRule(ReduceValuesRule.PROJECT_INSTANCE);
  }
  context.spark().registerRules(planner);
  return planner;
}",0.8988883006881948
111834,"public OptiqPreparingStmt(Context context,CatalogReader catalogReader,RelDataTypeFactory typeFactory,OptiqSchema schema,EnumerableRel.Prefer prefer,RelOptPlanner planner,Convention resultConvention){
}","public OptiqPreparingStmt(Context context,CatalogReader catalogReader,RelDataTypeFactory typeFactory,OptiqSchema schema,EnumerableRel.Prefer prefer,RelOptPlanner planner,Convention resultConvention){
  super(context,catalogReader,resultConvention);
  this.schema=schema;
  this.prefer=prefer;
  this.planner=planner;
  this.typeFactory=typeFactory;
  this.rexBuilder=new RexBuilder(typeFactory);
}",0.6722408026755853
111835,"public Prepare(CatalogReader catalogReader,Convention resultConvention){
  this.catalogReader=catalogReader;
  this.resultConvention=resultConvention;
}","public Prepare(OptiqPrepare.Context context,CatalogReader catalogReader,Convention resultConvention){
}",0.5803921568627451
111836,"private CallImplementor createImplementor(final NotNullImplementor implementor,final NullPolicy nullPolicy,final boolean harmonize){
switch (nullPolicy) {
case ANY:
case STRICT:
    return new CallImplementor(){
      public Expression implement(      RexToLixTranslator translator,      RexCall call,      NullAs nullAs){
        return implementNullSemantics0(translator,call,nullAs,nullPolicy,harmonize,implementor);
      }
    }
;
case AND:
  return new CallImplementor(){
    public Expression implement(    RexToLixTranslator translator,    RexCall call,    NullAs nullAs){
      final RexCall call2=call2(false,translator,call);
      final List<Expression> expressions=translator.translateList(call2.getOperands(),nullAs);
      return Expressions.foldAnd(expressions);
    }
  }
;
case OR:
return new CallImplementor(){
  public Expression implement(  RexToLixTranslator translator,  RexCall call,  NullAs nullAs){
    final RexCall call2=call2(harmonize,translator,call);
    final NullAs nullAs2=nullAs == NullAs.TRUE ? NullAs.NULL : nullAs;
    final List<Expression> expressions=translator.translateList(call2.getOperands(),nullAs2);
switch (nullAs) {
case NOT_POSSIBLE:
case FALSE:
      return Expressions.foldOr(expressions);
  }
  final Expression t0=expressions.get(0);
  final Expression t1=expressions.get(1);
  if (!nullable(call2,0) && !nullable(call2,1)) {
    return Expressions.orElse(t0,t1);
  }
  return optimize(Expressions.condition(Expressions.equal(t0,NULL_EXPR),Expressions.condition(Expressions.orElse(Expressions.equal(t1,NULL_EXPR),Expressions.not(t1)),NULL_EXPR,BOXED_TRUE_EXPR),Expressions.condition(Expressions.not(t0),t1,BOXED_TRUE_EXPR)));
}
}
;
case NOT:
return new CallImplementor(){
public Expression implement(RexToLixTranslator translator,RexCall call,NullAs nullAs){
NullAs nullAs2;
switch (nullAs) {
case FALSE:
  nullAs2=NullAs.TRUE;
break;
case TRUE:
nullAs2=NullAs.FALSE;
break;
default :
nullAs2=nullAs;
}
return implementNullSemantics0(translator,call,nullAs2,nullPolicy,harmonize,implementor);
}
}
;
case NONE:
return new CallImplementor(){
public Expression implement(RexToLixTranslator translator,RexCall call,NullAs nullAs){
final RexCall call2=call2(false,translator,call);
return implementCall(translator,call2,implementor,nullAs);
}
}
;
default :
throw new AssertionError(nullPolicy);
}
}","private CallImplementor createImplementor(final NotNullImplementor implementor,final NullPolicy nullPolicy,final boolean harmonize){
switch (nullPolicy) {
case ANY:
case STRICT:
    return new CallImplementor(){
      public Expression implement(      RexToLixTranslator translator,      RexCall call,      NullAs nullAs){
        return implementNullSemantics0(translator,call,nullAs,nullPolicy,harmonize,implementor);
      }
    }
;
case AND:
  return new CallImplementor(){
    public Expression implement(    RexToLixTranslator translator,    RexCall call,    NullAs nullAs){
      final RexCall call2=call2(false,translator,call);
      final NullAs nullAs2=nullAs == NullAs.FALSE ? NullAs.NULL : nullAs;
      final List<Expression> expressions=translator.translateList(call2.getOperands(),nullAs2);
switch (nullAs) {
case NOT_POSSIBLE:
case TRUE:
        return Expressions.foldAnd(expressions);
    }
    final Expression t0=expressions.get(0);
    final Expression t1=expressions.get(1);
    if (!nullable(call2,0) && !nullable(call2,1)) {
      return Expressions.andAlso(t0,t1);
    }
    return optimize(Expressions.condition(optimize(Expressions.equal(t0,NULL_EXPR)),Expressions.condition(optimize(Expressions.orElse(Expressions.equal(t1,NULL_EXPR),t1)),NULL_EXPR,BOXED_FALSE_EXPR),Expressions.condition(Expressions.unbox(t0),Expressions.box(t1),BOXED_FALSE_EXPR)));
  }
}
;
case OR:
return new CallImplementor(){
public Expression implement(RexToLixTranslator translator,RexCall call,NullAs nullAs){
  final RexCall call2=call2(harmonize,translator,call);
  final NullAs nullAs2=nullAs == NullAs.TRUE ? NullAs.NULL : nullAs;
  final List<Expression> expressions=translator.translateList(call2.getOperands(),nullAs2);
switch (nullAs) {
case NOT_POSSIBLE:
case FALSE:
    return Expressions.foldOr(expressions);
}
final Expression t0=expressions.get(0);
final Expression t1=expressions.get(1);
if (!nullable(call2,0) && !nullable(call2,1)) {
  return Expressions.orElse(t0,t1);
}
return optimize(Expressions.condition(Expressions.equal(t0,NULL_EXPR),Expressions.condition(Expressions.orElse(Expressions.equal(t1,NULL_EXPR),Expressions.not(t1)),NULL_EXPR,BOXED_TRUE_EXPR),Expressions.condition(Expressions.not(t0),t1,BOXED_TRUE_EXPR)));
}
}
;
case NOT:
return new CallImplementor(){
public Expression implement(RexToLixTranslator translator,RexCall call,NullAs nullAs){
NullAs nullAs2;
switch (nullAs) {
case FALSE:
nullAs2=NullAs.TRUE;
break;
case TRUE:
nullAs2=NullAs.FALSE;
break;
default :
nullAs2=nullAs;
}
return implementNullSemantics0(translator,call,nullAs2,nullPolicy,harmonize,implementor);
}
}
;
case NONE:
return new CallImplementor(){
public Expression implement(RexToLixTranslator translator,RexCall call,NullAs nullAs){
final RexCall call2=call2(false,translator,call);
return implementCall(translator,call2,implementor,nullAs);
}
}
;
default :
throw new AssertionError(nullPolicy);
}
}",0.7244393766628658
111837,"@Override public Expression visit(BinaryExpression binaryExpression,Expression expression0,Expression expression1){
  final BinaryExpression binary=(BinaryExpression)super.visit(binaryExpression,expression0,expression1);
  Boolean always;
switch (binary.getNodeType()) {
case AndAlso:
    always=always(binary.expression0);
  if (always != null) {
    return always ? binary.expression1 : FALSE_EXPR;
  }
always=always(binary.expression1);
if (always != null) {
return always ? binary.expression0 : FALSE_EXPR;
}
break;
case OrElse:
always=always(binary.expression0);
if (always != null) {
return !always ? binary.expression1 : TRUE_EXPR;
}
always=always(binary.expression1);
if (always != null) {
return !always ? binary.expression0 : TRUE_EXPR;
}
break;
case Equal:
if (binary.expression0 instanceof ConstantExpression && binary.expression1 instanceof ConstantExpression) {
return binary.expression0.equals(binary.expression1) ? TRUE_EXPR : FALSE_EXPR;
}
break;
case NotEqual:
if (binary.expression0 instanceof ConstantExpression && binary.expression1 instanceof ConstantExpression) {
return !binary.expression0.equals(binary.expression1) ? TRUE_EXPR : FALSE_EXPR;
}
break;
}
return binary;
}","@Override public Expression visit(BinaryExpression binaryExpression,Expression expression0,Expression expression1){
  final BinaryExpression binary=(BinaryExpression)super.visit(binaryExpression,expression0,expression1);
  Boolean always;
switch (binary.getNodeType()) {
case AndAlso:
    always=always(binary.expression0);
  if (always != null) {
    return always ? binary.expression1 : FALSE_EXPR;
  }
always=always(binary.expression1);
if (always != null) {
return always ? binary.expression0 : FALSE_EXPR;
}
break;
case OrElse:
always=always(binary.expression0);
if (always != null) {
return !always ? binary.expression1 : TRUE_EXPR;
}
always=always(binary.expression1);
if (always != null) {
return !always ? binary.expression0 : TRUE_EXPR;
}
break;
case Equal:
if (binary.expression0 instanceof ConstantExpression && binary.expression1 instanceof ConstantExpression) {
return binary.expression0.equals(binary.expression1) ? TRUE_EXPR : FALSE_EXPR;
}
if (isConstantNull(binary.expression1) && Primitive.is(binary.expression0.getType())) {
return FALSE_EXPR;
}
if (isConstantNull(binary.expression0) && Primitive.is(binary.expression1.getType())) {
return FALSE_EXPR;
}
break;
case NotEqual:
if (binary.expression0 instanceof ConstantExpression && binary.expression1 instanceof ConstantExpression) {
return !binary.expression0.equals(binary.expression1) ? TRUE_EXPR : FALSE_EXPR;
}
if (isConstantNull(binary.expression1) && Primitive.is(binary.expression0.getType())) {
return TRUE_EXPR;
}
if (isConstantNull(binary.expression0) && Primitive.is(binary.expression1.getType())) {
return TRUE_EXPR;
}
break;
}
return binary;
}",0.708008504606662
111838,"/** 
 * Translates an expression that is not in the cache.
 * @param expr Expression
 * @param nullAs If false, if expression is definitely not null atruntime. Therefore we can optimize. For example, we can cast to int using x.intValue().
 * @return Translated expression
 */
private Expression translate0(RexNode expr,RexImpTable.NullAs nullAs){
  if (nullAs == RexImpTable.NullAs.NULL && !expr.getType().isNullable()) {
    nullAs=RexImpTable.NullAs.NOT_POSSIBLE;
  }
switch (expr.getKind()) {
case INPUT_REF:
    final int index=((RexInputRef)expr).getIndex();
  Expression x=inputGetter.field(list,index);
return list.append(""String_Node_Str"",nullAs.handle(list.append(""String_Node_Str"",x)));
case LOCAL_REF:
return translate(program.getExprList().get(((RexLocalRef)expr).getIndex()),nullAs);
case LITERAL:
return translateLiteral(expr,nullifyType(expr.getType(),isNullable(expr) && nullAs != RexImpTable.NullAs.NOT_POSSIBLE),typeFactory,nullAs);
case DYNAMIC_PARAM:
return translateParameter((RexDynamicParam)expr,nullAs);
default :
if (expr instanceof RexCall) {
final RexCall call=(RexCall)expr;
final SqlOperator operator=call.getOperator();
RexImpTable.CallImplementor implementor=RexImpTable.INSTANCE.get(operator);
if (implementor != null) {
return implementor.implement(this,call,nullAs);
}
}
throw new RuntimeException(""String_Node_Str"" + expr);
}
}","/** 
 * Translates an expression that is not in the cache.
 * @param expr Expression
 * @param nullAs If false, if expression is definitely not null atruntime. Therefore we can optimize. For example, we can cast to int using x.intValue().
 * @return Translated expression
 */
private Expression translate0(RexNode expr,RexImpTable.NullAs nullAs){
  if (nullAs == RexImpTable.NullAs.NULL && !expr.getType().isNullable()) {
    nullAs=RexImpTable.NullAs.NOT_POSSIBLE;
  }
switch (expr.getKind()) {
case INPUT_REF:
    final int index=((RexInputRef)expr).getIndex();
  Expression x=inputGetter.field(list,index);
return list.append(""String_Node_Str"",nullAs.handle(list.append(""String_Node_Str"",x)));
case LOCAL_REF:
return translate(program.getExprList().get(((RexLocalRef)expr).getIndex()),nullAs);
case LITERAL:
return translateLiteral(expr,nullifyType(expr.getType(),isNullable(expr) && nullAs != RexImpTable.NullAs.NOT_POSSIBLE),typeFactory,nullAs);
case DYNAMIC_PARAM:
return translateParameter((RexDynamicParam)expr,nullAs);
default :
if (expr instanceof RexCall) {
return translateCall((RexCall)expr,nullAs);
}
throw new RuntimeException(""String_Node_Str"" + expr);
}
}",0.9052880820836622
111839,"public Expression generateAccessor(List<Integer> fields){
  ParameterExpression v1=Expressions.parameter(javaRowClass,""String_Node_Str"");
switch (fields.size()) {
case 0:
    return Expressions.lambda(Function1.class,Expressions.field(null,Collections.class,""String_Node_Str""),v1);
case 1:
  int field0=fields.get(0);
Class returnType=fieldClasses.get(field0);
Expression fieldReference=Types.castIfNecessary(returnType,fieldReference(v1,field0));
return Expressions.lambda(Function1.class,fieldReference,v1);
default :
Expressions.FluentList<Expression> list=Expressions.list();
for (int field : fields) {
list.add(fieldReference(v1,field));
}
switch (list.size()) {
case 2:
return Expressions.lambda(Function1.class,Expressions.call(List.class,null,BuiltinMethod.LIST2.method,list),v1);
case 3:
return Expressions.lambda(Function1.class,Expressions.call(List.class,null,BuiltinMethod.LIST3.method,list),v1);
default :
return Expressions.lambda(Function1.class,Expressions.call(BuiltinMethod.ARRAYS_AS_LIST.method,Expressions.newArrayInit(Object.class,list)),v1);
}
}
}","public Expression generateAccessor(List<Integer> fields){
  ParameterExpression v1=Expressions.parameter(javaRowClass,""String_Node_Str"");
switch (fields.size()) {
case 0:
    return Expressions.lambda(Function1.class,Expressions.field(null,Collections.class,""String_Node_Str""),v1);
case 1:
  int field0=fields.get(0);
Class returnType=fieldClasses.get(field0);
Expression fieldReference=Types.castIfNecessary(returnType,fieldReference(v1,field0));
return Expressions.lambda(Function1.class,fieldReference,v1);
default :
Expressions.FluentList<Expression> list=Expressions.list();
for (int field : fields) {
list.add(fieldReference(v1,field));
}
switch (list.size()) {
case 2:
return Expressions.lambda(Function1.class,Expressions.call(List.class,null,BuiltinMethod.LIST2.method,list),v1);
case 3:
return Expressions.lambda(Function1.class,Expressions.call(List.class,null,BuiltinMethod.LIST3.method,list),v1);
default :
return Expressions.lambda(Function1.class,Expressions.call(List.class,null,BuiltinMethod.ARRAYS_AS_LIST.method,Expressions.newArrayInit(Object.class,list)),v1);
}
}
}",0.9925788497217068
111840,"/** 
 * A selection of queries generated by Mondrian. 
 */
@Ignore @Test public void testCloneQueries(){
  OptiqAssert.AssertThat with=OptiqAssert.assertThat().with(OptiqAssert.Config.FOODMART_CLONE);
  for (  Ord<Pair<String,String>> query : Ord.zip(FOODMART_QUERIES)) {
    try {
      final String sql=query.e.left;
      final String expected=query.e.right;
      final OptiqAssert.AssertQuery query1=with.query(sql);
      if (expected != null) {
        if (sql.contains(""String_Node_Str"")) {
          query1.returns(expected);
        }
 else {
          query1.returnsUnordered(expected.split(""String_Node_Str""));
        }
      }
 else {
        query1.runs();
      }
    }
 catch (    Throwable e) {
      throw new RuntimeException(""String_Node_Str"" + query.i,e);
    }
  }
}","/** 
 * A selection of queries generated by Mondrian. 
 */
@Test public void testCloneQueries(){
  OptiqAssert.AssertThat with=OptiqAssert.assertThat().with(OptiqAssert.Config.FOODMART_CLONE);
  for (  Ord<Pair<String,String>> query : Ord.zip(FOODMART_QUERIES)) {
    try {
      final String sql=query.e.left;
      if (sql.startsWith(""String_Node_Str"")) {
        continue;
      }
      final String expected=query.e.right;
      final OptiqAssert.AssertQuery query1=with.query(sql);
      if (expected != null) {
        if (sql.contains(""String_Node_Str"")) {
          query1.returns(expected);
        }
 else {
          query1.returnsUnordered(expected.split(""String_Node_Str""));
        }
      }
 else {
        query1.runs();
      }
    }
 catch (    Throwable e) {
      throw new RuntimeException(""String_Node_Str"" + query.i,e);
    }
  }
}",0.9506999391357274
111841,"/** 
 * Returns the child of a project if the project is trivial, otherwise the project itself. 
 */
public static RelNode strip(ProjectRel project){
  return isTrivial(project) ? project : project.getChild();
}","/** 
 * Returns the child of a project if the project is trivial, otherwise the project itself. 
 */
public static RelNode strip(ProjectRel project){
  return isTrivial(project) ? project.getChild() : project;
}",0.95260663507109
111842,"public AssertQuery query(String sql){
  System.out.println(sql);
  return new AssertQuery(connectionFactory,sql);
}","public AssertQuery query(String sql){
  return new AssertQuery(connectionFactory,sql);
}",0.8669950738916257
111843,"/** 
 * Adapt for some types that we represent differently internally than their JDBC types.   {@link java.sql.Timestamp} values that are not null areconverted to  {@code long}, but nullable timestamps are acquired using  {@link java.sql.ResultSet#getObject(int)} and therefore the Timestampvalue needs to be converted to a  {@link Long}. Similarly  {@link java.sql.Date} and {@link java.sql.Time} values to{@link Integer}. 
 */
private static List wrap(List list,RelDataType type){
switch (type.getSqlTypeName()) {
case TIMESTAMP:
    return Functions.adapt(list,TIMESTAMP_TO_LONG);
case TIME:
  return Functions.adapt(list,TIME_TO_INT);
case DATE:
return Functions.adapt(list,DATE_TO_INT);
}
return list;
}","/** 
 * Adapt for some types that we represent differently internally than their JDBC types.   {@link java.sql.Timestamp} values that are not null areconverted to  {@code long}, but nullable timestamps are acquired using  {@link java.sql.ResultSet#getObject(int)} and therefore the Timestampvalue needs to be converted to a  {@link Long}. Similarly  {@link java.sql.Date} and {@link java.sql.Time} values to{@link Integer}. 
 */
private static List wrap(List list,RelDataType type){
  if (type.isNullable()) {
switch (type.getSqlTypeName()) {
case TIMESTAMP:
      return Functions.adapt(list,TIMESTAMP_TO_LONG);
case TIME:
    return Functions.adapt(list,TIME_TO_INT);
case DATE:
  return Functions.adapt(list,DATE_TO_INT);
}
}
return list;
}",0.9758787043418332
111844,"/** 
 * Returns a list of relational expressions one of whose children is this subset. The elements of the list are distinct. 
 */
public List<RelNode> getParentRels(){
}","/** 
 * Returns a list of relational expressions one of whose children is this subset. The elements of the list are distinct. 
 */
public Collection<RelNode> getParentRels(){
  final Set<RelNode> list=new LinkedHashSet<RelNode>();
  parentLoop:   for (  RelNode parent : set.getParentRels()) {
    for (    RelSubset rel : inputSubsets(parent)) {
      if (rel.set == set && rel.getTraitSet().equals(traitSet)) {
        list.add(parent);
        continue parentLoop;
      }
    }
  }
  return list;
}",0.5
111845,"/** 
 * Recursively matches operands above a given solve order.
 * @param solve Solver order of operand
 * @pre solve &gt; 0
 * @pre solve &lt;= rule.operands.length
 */
private void matchRecurse(int solve){
  if (solve == getRule().operands.size()) {
    if (getRule().matches(this)) {
      onMatch();
    }
  }
 else {
    int operandOrdinal=getOperand0().solveOrder[solve];
    int previousOperandOrdinal=getOperand0().solveOrder[solve - 1];
    boolean ascending=operandOrdinal < previousOperandOrdinal;
    RelOptRuleOperand previousOperand=getRule().operands.get(previousOperandOrdinal);
    RelOptRuleOperand operand=getRule().operands.get(operandOrdinal);
    List<RelNode> successors;
    if (ascending) {
      assert(previousOperand.getParent() == operand);
      final RelNode childRel=rels[previousOperandOrdinal];
      RelSubset subset=volcanoPlanner.getSubset(childRel);
      successors=subset.getParentRels();
    }
 else {
      int parentOrdinal=operand.getParent().ordinalInRule;
      RelNode parentRel=rels[parentOrdinal];
      List<RelNode> inputs=parentRel.getInputs();
      if (operand.ordinalInParent < inputs.size()) {
        RelSubset subset=(RelSubset)inputs.get(operand.ordinalInParent);
        successors=subset.getRelList();
      }
 else {
        successors=Collections.emptyList();
      }
    }
    for (    RelNode rel : successors) {
      if (!operand.matches(rel)) {
        continue;
      }
      if (ascending) {
        final RelSubset input=(RelSubset)rel.getInput(previousOperand.ordinalInParent);
        List<RelNode> inputRels=input.set.getRelsFromAllSubsets();
        if (!inputRels.contains(rels[previousOperandOrdinal])) {
          continue;
        }
      }
      rels[operandOrdinal]=rel;
      matchRecurse(solve + 1);
    }
  }
}","/** 
 * Recursively matches operands above a given solve order.
 * @param solve Solver order of operand
 * @pre solve &gt; 0
 * @pre solve &lt;= rule.operands.length
 */
private void matchRecurse(int solve){
  if (solve == getRule().operands.size()) {
    if (getRule().matches(this)) {
      onMatch();
    }
  }
 else {
    int operandOrdinal=getOperand0().solveOrder[solve];
    int previousOperandOrdinal=getOperand0().solveOrder[solve - 1];
    boolean ascending=operandOrdinal < previousOperandOrdinal;
    RelOptRuleOperand previousOperand=getRule().operands.get(previousOperandOrdinal);
    RelOptRuleOperand operand=getRule().operands.get(operandOrdinal);
    Collection<RelNode> successors;
    if (ascending) {
      assert(previousOperand.getParent() == operand);
      final RelNode childRel=rels[previousOperandOrdinal];
      RelSubset subset=volcanoPlanner.getSubset(childRel);
      successors=subset.getParentRels();
    }
 else {
      int parentOrdinal=operand.getParent().ordinalInRule;
      RelNode parentRel=rels[parentOrdinal];
      List<RelNode> inputs=parentRel.getInputs();
      if (operand.ordinalInParent < inputs.size()) {
        RelSubset subset=(RelSubset)inputs.get(operand.ordinalInParent);
        successors=subset.getRelList();
      }
 else {
        successors=Collections.emptyList();
      }
    }
    for (    RelNode rel : successors) {
      if (!operand.matches(rel)) {
        continue;
      }
      if (ascending) {
        final RelSubset input=(RelSubset)rel.getInput(previousOperand.ordinalInParent);
        List<RelNode> inputRels=input.set.getRelsFromAllSubsets();
        if (!inputRels.contains(rels[previousOperandOrdinal])) {
          continue;
        }
      }
      rels[operandOrdinal]=rel;
      matchRecurse(solve + 1);
    }
  }
}",0.9961046188091264
111846,"@Override protected Collection<TableInSchema> initialTables(){
  final List<TableInSchema> list=new ArrayList<TableInSchema>();
  File[] files=directoryFile.listFiles(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
);
  for (  File file : files) {
    String tableName=file.getName();
    if (tableName.endsWith(""String_Node_Str"")) {
      tableName=tableName.substring(0,tableName.length() - ""String_Node_Str"".length());
    }
    final List<CsvFieldType> fieldTypes=new ArrayList<CsvFieldType>();
    final RelDataType rowType=CsvTable.deduceRowType(typeFactory,file,fieldTypes);
    final CsvTable table;
    if (smart) {
      table=new CsvSmartTable(this,tableName,file,rowType,fieldTypes);
    }
 else {
      table=new CsvTable(this,tableName,file,rowType,fieldTypes);
    }
    list.add(new TableInSchemaImpl(this,tableName,TableType.TABLE,table));
  }
  return list;
}","@Override protected Collection<TableInSchema> initialTables(){
  final List<TableInSchema> list=new ArrayList<TableInSchema>();
  File[] files=directoryFile.listFiles(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
);
  if (files == null) {
    System.out.println(""String_Node_Str"" + directoryFile + ""String_Node_Str"");
    files=new File[0];
  }
  for (  File file : files) {
    String tableName=file.getName();
    if (tableName.endsWith(""String_Node_Str"")) {
      tableName=tableName.substring(0,tableName.length() - ""String_Node_Str"".length());
    }
    final List<CsvFieldType> fieldTypes=new ArrayList<CsvFieldType>();
    final RelDataType rowType=CsvTable.deduceRowType(typeFactory,file,fieldTypes);
    final CsvTable table;
    if (smart) {
      table=new CsvSmartTable(this,tableName,file,rowType,fieldTypes);
    }
 else {
      table=new CsvTable(this,tableName,file,rowType,fieldTypes);
    }
    list.add(new TableInSchemaImpl(this,tableName,TableType.TABLE,table));
  }
  return list;
}",0.9373482272948032
111847,"public Integer apply(Date a0){
  return a0 == null ? null : (int)(a0.getTime() / 86400000);
}","public Integer apply(Date a0){
  return a0 == null ? null : (int)(a0.getTime() / DateTimeUtil.MILLIS_PER_DAY);
}",0.8292682926829268
111848,"/** 
 * Adapt for some types that we represent differently internally than their JDBC types.   {@link java.sql.Timestamp} values that are not null areconverted to  {@code long}, but nullable timestamps are acquired using  {@link java.sql.ResultSet#getObject(int)} and therefore the Timestampvalue needs to be converted to a  {@link Long}. Similarly  {@link java.sql.Date} and {@link java.sql.Time} values to{@link Integer}. 
 */
private static List wrap(List list,RelDataType type){
  if (type.isNullable()) {
switch (type.getSqlTypeName()) {
case TIMESTAMP:
      return Functions.adapt(list,TIMESTAMP_TO_LONG);
case TIME:
    return Functions.adapt(list,TIME_TO_INT);
case DATE:
  return Functions.adapt(list,DATE_TO_INT);
}
}
return list;
}","/** 
 * Adapt for some types that we represent differently internally than their JDBC types.   {@link java.sql.Timestamp} values that are not null areconverted to  {@code long}, but nullable timestamps are acquired using  {@link java.sql.ResultSet#getObject(int)} and therefore the Timestampvalue needs to be converted to a  {@link Long}. Similarly  {@link java.sql.Date} and {@link java.sql.Time} values to{@link Integer}. 
 */
private static List wrap(List list,RelDataType type){
switch (type.getSqlTypeName()) {
case TIMESTAMP:
    return Functions.adapt(list,TIMESTAMP_TO_LONG);
case TIME:
  return Functions.adapt(list,TIME_TO_INT);
case DATE:
return Functions.adapt(list,DATE_TO_INT);
}
return list;
}",0.9758787043418332
111849,"public Enumerator<Object[]> enumerator(){
  final SqlString sql=generateSql();
  Function1<ResultSet,Function0<Object[]>> rowBuilderFactory=JdbcUtils.ObjectArrayRowBuilder.factory(JdbcUtils.getPrimitives(schema.typeFactory,rowType));
  return ResultSetEnumerable.of(schema.getDataSource(),sql.getSql(),rowBuilderFactory).enumerator();
}","public Enumerator<Object[]> enumerator(){
  final SqlString sql=generateSql();
  return ResultSetEnumerable.of(schema.getDataSource(),sql.getSql(),JdbcUtils.ObjectArrayRowBuilder.factory(fieldClasses())).enumerator();
}",0.4684684684684684
111850,"public static Function1<ResultSet,Function0<Object[]>> factory(List<Primitive> primitiveList){
  final Primitive[] primitives=primitiveList.toArray(new Primitive[primitiveList.size()]);
  return new Function1<ResultSet,Function0<Object[]>>(){
    public Function0<Object[]> apply(    ResultSet resultSet){
      try {
        return new ObjectArrayRowBuilder(resultSet,primitives);
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}","public static Function1<ResultSet,Function0<Object[]>> factory(final List<Pair<Primitive,Integer>> list){
  return new Function1<ResultSet,Function0<Object[]>>(){
    public Function0<Object[]> apply(    ResultSet resultSet){
      try {
        return new ObjectArrayRowBuilder(resultSet,Pair.left(list).toArray(new Primitive[list.size()]),IntList.toArray(Pair.right(list)));
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}",0.4775808133472367
111851,"public ObjectArrayRowBuilder(ResultSet resultSet,Primitive[] primitives) throws SQLException {
  this.resultSet=resultSet;
  this.primitives=primitives;
  this.columnCount=resultSet.getMetaData().getColumnCount();
}","public ObjectArrayRowBuilder(ResultSet resultSet,Primitive[] primitives,int[] types) throws SQLException {
  this.resultSet=resultSet;
  this.primitives=primitives;
  this.types=types;
  this.columnCount=resultSet.getMetaData().getColumnCount();
}",0.9307359307359307
111852,"private Object value(int i) throws SQLException {
  return primitives[i].jdbcGet(resultSet,i + 1);
}","/** 
 * Gets a value from a given column in a JDBC result set.
 * @param i Ordinal of column (1-based, per JDBC)
 */
private Object value(int i) throws SQLException {
switch (types[i]) {
case Types.TIMESTAMP:
    return shift(resultSet.getTimestamp(i + 1));
case Types.TIME:
  return shift(resultSet.getTime(i + 1));
case Types.DATE:
return shift(resultSet.getDate(i + 1));
}
return primitives[i].jdbcGet(resultSet,i + 1);
}",0.3740458015267175
111853,"public NamedFieldGetter(Class clazz,String... names){
  for (  String name : names) {
    final int index=fields.size();
    final String fieldName=uncamel(name);
    final Field field;
    try {
      field=clazz.getField(fieldName);
    }
 catch (    NoSuchFieldException e) {
      throw new RuntimeException(e);
    }
    Pair<Integer,String> pair=lookupType(field.getType());
    columnNames.add(new ColumnMetaData(index,false,true,false,false,Primitive.is(field.getType()) ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls,true,-1,name,name,null,0,0,null,null,pair.left,pair.right,true,false,false,null,field.getType()));
    fields.add(field);
  }
}","public NamedFieldGetter(Class clazz,String... names){
  for (  String name : names) {
    final int index=fields.size();
    final String fieldName=uncamel(name);
    final Field field;
    try {
      field=clazz.getField(fieldName);
    }
 catch (    NoSuchFieldException e) {
      throw new RuntimeException(e);
    }
    Pair<Integer,String> pair=lookupType(field.getType());
    ColumnMetaData.Rep rep=ColumnMetaData.Rep.VALUE_MAP.get(field.getType());
    columnNames.add(new ColumnMetaData(index,false,true,false,false,Primitive.is(field.getType()) ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls,true,-1,name,name,null,0,0,null,null,pair.left,pair.right,true,false,false,null,rep));
    fields.add(field);
  }
}",0.8456090651558074
111854,"public boolean wasNull() throws SQLException {
  return wasNull[0];
}","public boolean wasNull() throws SQLException {
  return cursor.wasNull();
}",0.9166666666666666
111855,"private List<ColumnMetaData> getColumnMetaDataList(JavaTypeFactory typeFactory,RelDataType x,RelDataType jdbcType,List<List<String>> originList){
  final List<ColumnMetaData> columns=new ArrayList<ColumnMetaData>();
  for (  Ord<RelDataTypeField> pair : Ord.zip(jdbcType.getFieldList())) {
    final RelDataTypeField field=pair.e;
    RelDataType type=field.getType();
    List<String> origins=originList.get(pair.i);
    SqlTypeName sqlTypeName=type.getSqlTypeName();
    final String typeName;
switch (sqlTypeName) {
case INTERVAL_YEAR_MONTH:
case INTERVAL_DAY_TIME:
      typeName=""String_Node_Str"" + type.getIntervalQualifier().toString().replace(' ','_');
    break;
default :
  typeName=sqlTypeName.getName();
}
columns.add(new ColumnMetaData(columns.size(),false,true,false,false,type.isNullable() ? 1 : 0,true,type.getPrecision(),field.getName(),origins == null ? null : origins.get(2),origins == null ? null : origins.get(0),type.getPrecision() == RelDataType.PRECISION_NOT_SPECIFIED ? 0 : type.getPrecision(),type.getScale() == RelDataType.SCALE_NOT_SPECIFIED ? 0 : type.getScale(),origins == null ? null : origins.get(1),null,sqlTypeName.getJdbcOrdinal(),typeName,true,false,false,null,(Class)typeFactory.getJavaClass(x.isStruct() ? x.getFieldList().get(pair.i).getType() : type)));
}
return columns;
}","private List<ColumnMetaData> getColumnMetaDataList(JavaTypeFactory typeFactory,RelDataType x,RelDataType jdbcType,List<List<String>> originList){
}",0.2013698630136986
111856,"public NamedFieldGetter(Class clazz,String... names){
  for (  String name : names) {
    final int index=fields.size();
    final String fieldName=uncamel(name);
    final Field field;
    try {
      field=clazz.getField(fieldName);
    }
 catch (    NoSuchFieldException e) {
      throw new RuntimeException(e);
    }
    columnNames.add(new ColumnMetaData(index,false,true,false,false,Primitive.is(field.getType()) ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls,true,-1,name,name,null,0,0,null,null,Types.VARCHAR,""String_Node_Str"",true,false,false,null,field.getType()));
    fields.add(field);
  }
}","public NamedFieldGetter(Class clazz,String... names){
  for (  String name : names) {
    final int index=fields.size();
    final String fieldName=uncamel(name);
    final Field field;
    try {
      field=clazz.getField(fieldName);
    }
 catch (    NoSuchFieldException e) {
      throw new RuntimeException(e);
    }
    Pair<Integer,String> pair=lookupType(field.getType());
    columnNames.add(new ColumnMetaData(index,false,true,false,false,Primitive.is(field.getType()) ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls,true,-1,name,name,null,0,0,null,null,pair.left,pair.right,true,false,false,null,field.getType()));
    fields.add(field);
  }
}",0.7349768875192604
111857,"/** 
 * Tests driver's implementation of   {@link DatabaseMetaData#getColumns}. 
 */
@Test public void testMetaDataColumns() throws ClassNotFoundException, SQLException {
  Connection connection=getConnection(""String_Node_Str"",""String_Node_Str"");
  DatabaseMetaData metaData=connection.getMetaData();
  ResultSet resultSet=metaData.getColumns(null,null,null,null);
  assertTrue(resultSet.next());
  resultSet.close();
  connection.close();
}","/** 
 * Tests driver's implementation of   {@link DatabaseMetaData#getColumns}. 
 */
@Test public void testMetaDataColumns() throws ClassNotFoundException, SQLException {
  Connection connection=getConnection(""String_Node_Str"",""String_Node_Str"");
  DatabaseMetaData metaData=connection.getMetaData();
  ResultSet resultSet=metaData.getColumns(null,null,null,null);
  assertTrue(resultSet.next());
  String name=resultSet.getString(4);
  int type=resultSet.getInt(5);
  String typeName=resultSet.getString(6);
  int columnSize=resultSet.getInt(7);
  int decimalDigits=resultSet.getInt(9);
  int numPrecRadix=resultSet.getInt(10);
  int charOctetLength=resultSet.getInt(16);
  String isNullable=resultSet.getString(18);
  resultSet.close();
  connection.close();
}",0.7331670822942643
111858,"public Object freeze(ColumnLoader.ValueSet valueSet,int[] sources){
  final int chunksPerWord=64 / bitCount;
  final List<Comparable> valueList=permuteList(valueSet.values,sources);
  final int valueCount=valueList.size();
  final int wordCount=(valueCount + (chunksPerWord - 1)) / chunksPerWord;
  final int remainingChunkCount=valueCount % chunksPerWord;
  final long[] longs=new long[wordCount];
  final int n=valueCount / chunksPerWord;
  int i;
  int k=0;
  if (valueCount > 0 && valueList.get(0) instanceof Boolean) {
    @SuppressWarnings(""String_Node_Str"") final List<Boolean> booleans=(List)valueSet.values;
    for (i=0; i < n; i++) {
      long v=0;
      for (int j=0; j < chunksPerWord; j++) {
        v|=(booleans.get(k++) ? (1 << (bitCount * j)) : 0);
      }
      longs[i]=v;
    }
    if (remainingChunkCount > 0) {
      long v=0;
      for (int j=0; j < remainingChunkCount; j++) {
        v|=(booleans.get(k++) ? (1 << (bitCount * j)) : 0);
      }
      longs[i]=v;
    }
  }
 else {
    @SuppressWarnings(""String_Node_Str"") final List<Number> numbers=(List)valueSet.values;
    for (i=0; i < n; i++) {
      long v=0;
      for (int j=0; j < chunksPerWord; j++) {
        v|=(numbers.get(k++).longValue() << (bitCount * j));
      }
      longs[i]=v;
    }
    if (remainingChunkCount > 0) {
      long v=0;
      for (int j=0; j < remainingChunkCount; j++) {
        v|=(numbers.get(k++).longValue() << (bitCount * j));
      }
      longs[i]=v;
    }
  }
  return longs;
}","public Object freeze(ColumnLoader.ValueSet valueSet,int[] sources){
  final int chunksPerWord=64 / bitCount;
  final List<Comparable> valueList=permuteList(valueSet.values,sources);
  final int valueCount=valueList.size();
  final int wordCount=(valueCount + (chunksPerWord - 1)) / chunksPerWord;
  final int remainingChunkCount=valueCount % chunksPerWord;
  final long[] longs=new long[wordCount];
  final int n=valueCount / chunksPerWord;
  int i;
  int k=0;
  if (valueCount > 0 && valueList.get(0) instanceof Boolean) {
    @SuppressWarnings(""String_Node_Str"") final List<Boolean> booleans=(List)valueList;
    for (i=0; i < n; i++) {
      long v=0;
      for (int j=0; j < chunksPerWord; j++) {
        v|=(booleans.get(k++) ? (1 << (bitCount * j)) : 0);
      }
      longs[i]=v;
    }
    if (remainingChunkCount > 0) {
      long v=0;
      for (int j=0; j < remainingChunkCount; j++) {
        v|=(booleans.get(k++) ? (1 << (bitCount * j)) : 0);
      }
      longs[i]=v;
    }
  }
 else {
    @SuppressWarnings(""String_Node_Str"") final List<Number> numbers=(List)valueList;
    for (i=0; i < n; i++) {
      long v=0;
      for (int j=0; j < chunksPerWord; j++) {
        v|=(numbers.get(k++).longValue() << (bitCount * j));
      }
      longs[i]=v;
    }
    if (remainingChunkCount > 0) {
      long v=0;
      for (int j=0; j < remainingChunkCount; j++) {
        v|=(numbers.get(k++).longValue() << (bitCount * j));
      }
      longs[i]=v;
    }
  }
  return longs;
}",0.9906103286384976
111859,"/** 
 * Creates a column loader, and performs the load. 
 */
ColumnLoader(JavaTypeFactory typeFactory,Enumerable<T> sourceTable,RelDataType elementType){
  this.typeFactory=typeFactory;
  sourceTable.into(list);
  final int[] sorts={-1};
  if (Bug.TodoFixed) {
    load(elementType,sorts);
    this.sortField=sorts[0];
  }
 else {
    load(elementType,null);
    sortField=-1;
  }
}","/** 
 * Creates a column loader, and performs the load. 
 */
ColumnLoader(JavaTypeFactory typeFactory,Enumerable<T> sourceTable,RelDataType elementType){
  this.typeFactory=typeFactory;
  sourceTable.into(list);
  final int[] sorts={-1};
  load(elementType,sorts);
  this.sortField=sorts[0];
}",0.8
111860,"@Override protected PreparedResult implement(RelDataType rowType,RelNode rootRel,SqlKind sqlKind){
  RelDataType resultType=rootRel.getRowType();
  boolean isDml=sqlKind.belongsTo(SqlKind.DML);
  EnumerableRelImplementor relImplementor=getRelImplementor(rootRel.getCluster().getRexBuilder());
  ClassDeclaration expr=relImplementor.implementRoot((EnumerableRel)rootRel);
  String s=Expressions.toString(expr.memberDeclarations,""String_Node_Str"",false);
  if (DEBUG) {
    System.out.println();
    System.out.println(s);
  }
  Hook.JAVA_PLAN.run(s);
  final Executable executable;
  try {
    executable=(Executable)ClassBodyEvaluator.createFastClassBodyEvaluator(new Scanner(null,new StringReader(s)),expr.name,Utilities.class,new Class[]{Executable.class,Typed.class},getClass().getClassLoader());
  }
 catch (  Exception e) {
    throw Helper.INSTANCE.wrap(""String_Node_Str"" + s,e);
  }
  if (timingTracer != null) {
    timingTracer.traceTime(""String_Node_Str"");
  }
  if (timingTracer != null) {
    timingTracer.traceTime(""String_Node_Str"");
  }
  return new PreparedResultImpl(resultType,fieldOrigins,rootRel,mapTableModOp(isDml,sqlKind),isDml){
    public String getCode(){
      throw new UnsupportedOperationException();
    }
    @Override public Object execute(){
      return executable.execute(schema);
    }
    @Override public Type getElementType(){
      return ((Typed)executable).getElementType();
    }
  }
;
}","@Override protected PreparedResult implement(RelDataType rowType,RelNode rootRel,SqlKind sqlKind){
  RelDataType resultType=rootRel.getRowType();
  boolean isDml=sqlKind.belongsTo(SqlKind.DML);
  EnumerableRelImplementor relImplementor=getRelImplementor(rootRel.getCluster().getRexBuilder());
  ClassDeclaration expr=relImplementor.implementRoot((EnumerableRel)rootRel,prefer);
  String s=Expressions.toString(expr.memberDeclarations,""String_Node_Str"",false);
  if (DEBUG) {
    System.out.println();
    System.out.println(s);
  }
  Hook.JAVA_PLAN.run(s);
  final Executable executable;
  try {
    executable=(Executable)ClassBodyEvaluator.createFastClassBodyEvaluator(new Scanner(null,new StringReader(s)),expr.name,Utilities.class,new Class[]{Executable.class,Typed.class},getClass().getClassLoader());
  }
 catch (  Exception e) {
    throw Helper.INSTANCE.wrap(""String_Node_Str"" + s,e);
  }
  if (timingTracer != null) {
    timingTracer.traceTime(""String_Node_Str"");
  }
  if (timingTracer != null) {
    timingTracer.traceTime(""String_Node_Str"");
  }
  return new PreparedResultImpl(resultType,fieldOrigins,rootRel,mapTableModOp(isDml,sqlKind),isDml){
    public String getCode(){
      throw new UnsupportedOperationException();
    }
    @Override public Object execute(){
      return executable.execute(schema);
    }
    @Override public Type getElementType(){
      return ((Typed)executable).getElementType();
    }
  }
;
}",0.9975601254792612
111861,"public OptiqPreparingStmt(CatalogReader catalogReader,RelDataTypeFactory typeFactory,Schema schema,Convention resultConvention,RelOptPlanner planner){
  super(catalogReader,resultConvention);
  this.schema=schema;
  this.planner=planner;
  this.rexBuilder=new RexBuilder(typeFactory);
}","public OptiqPreparingStmt(CatalogReader catalogReader,RelDataTypeFactory typeFactory,Schema schema,EnumerableRel.Prefer prefer,RelOptPlanner planner){
  super(catalogReader,EnumerableConvention.ARRAY);
  this.schema=schema;
  this.prefer=prefer;
  this.planner=planner;
  this.rexBuilder=new RexBuilder(typeFactory);
}",0.8377483443708609
111862,"public ClassDeclaration implementRoot(EnumerableRel rootRel){
  final EnumerableRel.Result implement=rootRel.implement(this,EnumerableRel.Prefer.ANY);
  List<MemberDeclaration> memberDeclarations=new ArrayList<MemberDeclaration>();
  declareSyntheticClasses(implement.expression,memberDeclarations);
  ParameterExpression root=Expressions.parameter(Modifier.FINAL,DataContext.class,""String_Node_Str"");
  memberDeclarations.add(Expressions.methodDecl(Modifier.PUBLIC,Enumerable.class,BuiltinMethod.EXECUTABLE_EXECUTE.method.getName(),Expressions.list(root),implement.expression));
  memberDeclarations.add(Expressions.methodDecl(Modifier.PUBLIC,Type.class,BuiltinMethod.TYPED_GET_ELEMENT_TYPE.method.getName(),Collections.<ParameterExpression>emptyList(),Blocks.toFunctionBlock(Expressions.return_(null,Expressions.constant(implement.physType.getJavaRowType())))));
  return Expressions.classDecl(Modifier.PUBLIC,""String_Node_Str"",null,Collections.<Type>singletonList(Executable.class),memberDeclarations);
}","public ClassDeclaration implementRoot(EnumerableRel rootRel,EnumerableRel.Prefer prefer){
  final EnumerableRel.Result implement=rootRel.implement(this,prefer);
  List<MemberDeclaration> memberDeclarations=new ArrayList<MemberDeclaration>();
  declareSyntheticClasses(implement.expression,memberDeclarations);
  ParameterExpression root=Expressions.parameter(Modifier.FINAL,DataContext.class,""String_Node_Str"");
  memberDeclarations.add(Expressions.methodDecl(Modifier.PUBLIC,Enumerable.class,BuiltinMethod.EXECUTABLE_EXECUTE.method.getName(),Expressions.list(root),implement.expression));
  memberDeclarations.add(Expressions.methodDecl(Modifier.PUBLIC,Type.class,BuiltinMethod.TYPED_GET_ELEMENT_TYPE.method.getName(),Collections.<ParameterExpression>emptyList(),Blocks.toFunctionBlock(Expressions.return_(null,Expressions.constant(implement.physType.getJavaRowType())))));
  return Expressions.classDecl(Modifier.PUBLIC,""String_Node_Str"",null,Collections.<Type>singletonList(Executable.class),memberDeclarations);
}",0.9762845849802372
111863,"/** 
 * Generates an accessor function for a given list of fields. <p>For example:</p> <pre>  {@code}new Function1<Employee, Object[]>  public Object[] apply(Employee v1) { return new Object[] {v1.<fieldN>, v1.<fieldM>}; } } }</pre>
 */
Expression generateAccessor(List<Integer> fields);","/** 
 * Generates an accessor function for a given list of fields. The resulting object is a   {@link List} (implementing {@link #hashCode()}and   {@link #equals(Object)} per that interface) and also implements{@link Comparable}. <p>For example:</p> <pre>  {@code}new Function1<Employee, Object[]>  public Object[] apply(Employee v1) { return FlatLists.of(v1.<fieldN>, v1.<fieldM>); } } }</pre>
 */
Expression generateAccessor(List<Integer> fields);",0.7391304347826086
111864,"/** 
 * Generates a selector with the default row format. 
 */
Expression generateSelector(ParameterExpression parameter,List<Integer> fields);","/** 
 * Generates a selector for the given fields from an expression. 
 */
Expression generateSelector(ParameterExpression parameter,List<Integer> fields,JavaRowFormat targetFormat);",0.7815384615384615
111865,"public PhysType project(final List<Integer> integers,JavaRowFormat format){
  RelDataType projectedRowType=typeFactory.createStructType(new AbstractList<Map.Entry<String,RelDataType>>(){
    public Map.Entry<String,RelDataType> get(    int index){
      return rowType.getFieldList().get(index);
    }
    public int size(){
      return integers.size();
    }
  }
);
  return of(typeFactory,projectedRowType,this.format.optimize(projectedRowType));
}","public PhysType project(final List<Integer> integers,JavaRowFormat format){
  RelDataType projectedRowType=typeFactory.createStructType(new AbstractList<Map.Entry<String,RelDataType>>(){
    public Map.Entry<String,RelDataType> get(    int index){
      return rowType.getFieldList().get(index);
    }
    public int size(){
      return integers.size();
    }
  }
);
  return of(typeFactory,projectedRowType,format.optimize(projectedRowType));
}",0.9944258639910812
111866,"/** 
 * Generates a selector for the given fields from an expression. 
 */
protected Expression generateSelector(ParameterExpression parameter,List<Integer> fields,JavaRowFormat targetFormat){
switch (fields.size()) {
case 0:
    targetFormat=JavaRowFormat.EMPTY_LIST;
  break;
case 1:
targetFormat=JavaRowFormat.SCALAR;
break;
}
final PhysType targetPhysType=project(fields,targetFormat);
switch (format) {
case SCALAR:
return Expressions.call(BuiltinMethod.IDENTITY_SELECTOR.method);
default :
return Expressions.lambda(Function1.class,targetPhysType.record(fieldReferences(parameter,fields)),parameter);
}
}","public Expression generateSelector(ParameterExpression parameter,List<Integer> fields,JavaRowFormat targetFormat){
switch (fields.size()) {
case 0:
    targetFormat=JavaRowFormat.LIST;
  break;
case 1:
targetFormat=JavaRowFormat.SCALAR;
break;
}
final PhysType targetPhysType=project(fields,targetFormat);
switch (format) {
case SCALAR:
return Expressions.call(BuiltinMethod.IDENTITY_SELECTOR.method);
default :
return Expressions.lambda(Function1.class,targetPhysType.record(fieldReferences(parameter,fields)),parameter);
}
}",0.9154929577464788
111867,"public int compareTo(List<T> o){
  return compare(list,o);
}","public int compareTo(List o){
  return compare(list,o);
}",0.9743589743589745
111868,"/** 
 * Creates a memory-, CPU- and cache-efficient immutable list from an existing list. The list is always copied.
 * @param t Array of members of list
 * @param < T > Element type
 * @return List containing the given members
 */
public static <T>List<T> of(List<T> t){
switch (t.size()) {
case 0:
    return COMPARABLE_EMPTY_LIST;
case 1:
  return Collections.singletonList(t.get(0));
case 2:
return new Flat2List<T>(t.get(0),t.get(1));
case 3:
return new Flat3List<T>(t.get(0),t.get(1),t.get(2));
default :
return new ComparableList(Arrays.asList(t.toArray()));
}
}","/** 
 * Creates a memory-, CPU- and cache-efficient immutable list from an existing list. The list is always copied.
 * @param t Array of members of list
 * @param < T > Element type
 * @return List containing the given members
 */
public static <T>List<T> of(List<T> t){
switch (t.size()) {
case 0:
    return COMPARABLE_EMPTY_LIST;
case 1:
  return Collections.singletonList(t.get(0));
case 2:
return new Flat2List<T>(t.get(0),t.get(1));
case 3:
return new Flat3List<T>(t.get(0),t.get(1),t.get(2));
default :
return new ComparableListImpl(Arrays.asList(t.toArray()));
}
}",0.9964973730297724
111869,"/** 
 * Creates a memory-, CPU- and cache-efficient immutable list, optionally copying the list.
 * @param copy Whether to always copy the list
 * @param t Array of members of list
 * @return List containing the given members
 */
private static <T>List<T> _flatList(T[] t,boolean copy){
switch (t.length) {
case 0:
    return COMPARABLE_EMPTY_LIST;
case 1:
  return Collections.singletonList(t[0]);
case 2:
return new Flat2List<T>(t[0],t[1]);
case 3:
return new Flat3List<T>(t[0],t[1],t[2]);
default :
if (copy) {
return new ComparableList(Arrays.asList(t.clone()));
}
 else {
return new ComparableList(Arrays.asList(t));
}
}
}","/** 
 * Creates a memory-, CPU- and cache-efficient immutable list, optionally copying the list.
 * @param copy Whether to always copy the list
 * @param t Array of members of list
 * @return List containing the given members
 */
private static <T>List<T> _flatList(T[] t,boolean copy){
switch (t.length) {
case 0:
    return COMPARABLE_EMPTY_LIST;
case 1:
  return Collections.singletonList(t[0]);
case 2:
return new Flat2List<T>(t[0],t[1]);
case 3:
return new Flat3List<T>(t[0],t[1],t[2]);
default :
if (copy) {
return new ComparableListImpl(Arrays.asList(t.clone()));
}
 else {
return new ComparableListImpl(Arrays.asList(t));
}
}
}",0.993660855784469
111870,"public static int compareNullsLast(List v0,List v1){
  return v0 == v1 ? 0 : v0 == null ? 1 : v1 == null ? -1 : FlatLists.ComparableList.compare(v0,v1);
}","public static int compareNullsLast(List v0,List v1){
  return v0 == v1 ? 0 : v0 == null ? 1 : v1 == null ? -1 : FlatLists.ComparableListImpl.compare(v0,v1);
}",0.9871794871794872
111871,"public PreparedResult prepareQueryable(Queryable queryable,RelDataType resultType){
  queryString=null;
  Class runtimeContextClass=Object.class;
  init(runtimeContextClass);
  final RelOptQuery query=new RelOptQuery(planner);
  final RelTraitSet emptyTraitSet=RelTraitSet.createEmpty();
  final RelOptCluster cluster=query.createCluster(rexBuilder.getTypeFactory(),rexBuilder,emptyTraitSet);
  RelNode rootRel=new LixToRelTranslator(cluster,OptiqPreparingStmt.this).translate(queryable);
  if (timingTracer != null) {
    timingTracer.traceTime(""String_Node_Str"");
  }
  final RelDataType jdbcType=makeStruct(rexBuilder.getTypeFactory(),resultType);
  fieldOrigins=Collections.nCopies(jdbcType.getFieldCount(),null);
  rootRel=flattenTypes(rootRel,true);
  rootRel=trimUnusedFields(rootRel);
  rootRel=optimize(resultType,rootRel);
  if (timingTracer != null) {
    timingTracer.traceTime(""String_Node_Str"");
  }
  return implement(resultType,rootRel,SqlKind.SELECT);
}","public PreparedResult prepareQueryable(Queryable queryable,RelDataType resultType){
  queryString=null;
  Class runtimeContextClass=Object.class;
  init(runtimeContextClass);
  final RelOptQuery query=new RelOptQuery(planner);
  final RelTraitSet emptyTraitSet=planner.emptyTraitSet();
  final RelOptCluster cluster=query.createCluster(rexBuilder.getTypeFactory(),rexBuilder,emptyTraitSet);
  RelNode rootRel=new LixToRelTranslator(cluster,OptiqPreparingStmt.this).translate(queryable);
  if (timingTracer != null) {
    timingTracer.traceTime(""String_Node_Str"");
  }
  final RelDataType jdbcType=makeStruct(rexBuilder.getTypeFactory(),resultType);
  fieldOrigins=Collections.nCopies(jdbcType.getFieldCount(),null);
  rootRel=flattenTypes(rootRel,true);
  rootRel=trimUnusedFields(rootRel);
  rootRel=optimize(resultType,rootRel);
  if (timingTracer != null) {
    timingTracer.traceTime(""String_Node_Str"");
  }
  return implement(resultType,rootRel,SqlKind.SELECT);
}",0.977296181630547
111872,"public boolean canConvert(RelOptPlanner planner,RelTrait fromTrait,RelTrait toTrait){
  ConversionData conversionData=getConversionData(planner);
  Convention fromConvention=(Convention)fromTrait;
  Convention toConvention=(Convention)toTrait;
  return conversionData.conversionGraph.getShortestPath(fromConvention,toConvention) != null;
}","public boolean canConvert(RelOptPlanner planner,Convention fromConvention,Convention toConvention){
  ConversionData conversionData=getConversionData(planner);
  return conversionData.conversionGraph.getShortestPath(fromConvention,toConvention) != null;
}",0.7138047138047138
111873,"public RelNode convert(RelOptPlanner planner,RelNode rel,RelTrait toTrait,boolean allowInfiniteCostConverters){
  final ConversionData conversionData=getConversionData(planner);
  final Graph<Convention> conversionGraph=conversionData.conversionGraph;
  final MultiMap<Graph.Arc,ConverterRule> mapArcToConverterRule=conversionData.mapArcToConverterRule;
  final Convention fromConvention=rel.getConvention();
  final Convention toConvention=(Convention)toTrait;
  Iterator<Graph.Arc<Convention>[]> conversionPaths=conversionGraph.getPaths(fromConvention,toConvention);
  loop:   while (conversionPaths.hasNext()) {
    Graph.Arc[] arcs=conversionPaths.next();
    assert(arcs[0].from == fromConvention);
    assert(arcs[arcs.length - 1].to == toConvention);
    RelNode converted=rel;
    for (    Graph.Arc arc : arcs) {
      if (planner.getCost(converted).isInfinite() && !allowInfiniteCostConverters) {
        continue loop;
      }
      converted=changeConvention(converted,arc,mapArcToConverterRule);
      if (converted == null) {
        throw Util.newInternal(""String_Node_Str"" + arc.from + ""String_Node_Str""+ arc.to+ ""String_Node_Str"");
      }
    }
    return converted;
  }
  return null;
}","public RelNode convert(RelOptPlanner planner,RelNode rel,Convention toConvention,boolean allowInfiniteCostConverters){
  final ConversionData conversionData=getConversionData(planner);
  final Graph<Convention> conversionGraph=conversionData.conversionGraph;
  final MultiMap<Graph.Arc,ConverterRule> mapArcToConverterRule=conversionData.mapArcToConverterRule;
  final Convention fromConvention=rel.getConvention();
  Iterator<Graph.Arc<Convention>[]> conversionPaths=conversionGraph.getPaths(fromConvention,toConvention);
  loop:   while (conversionPaths.hasNext()) {
    Graph.Arc[] arcs=conversionPaths.next();
    assert(arcs[0].from == fromConvention);
    assert(arcs[arcs.length - 1].to == toConvention);
    RelNode converted=rel;
    for (    Graph.Arc arc : arcs) {
      if (planner.getCost(converted).isInfinite() && !allowInfiniteCostConverters) {
        continue loop;
      }
      converted=changeConvention(converted,arc,mapArcToConverterRule);
      if (converted == null) {
        throw Util.newInternal(""String_Node_Str"" + arc.from + ""String_Node_Str""+ arc.to+ ""String_Node_Str"");
      }
    }
    return converted;
  }
  return null;
}",0.961082910321489
111874,"/** 
 * Tests whether the given RelTrait can be converted to another RelTrait.
 * @param planner the planner requesting the conversion test
 * @param fromTrait the RelTrait to convert from
 * @param toTrait the RelTrait to convert to
 * @return true if fromTrait can be converted to toTrait
 */
public abstract boolean canConvert(RelOptPlanner planner,RelTrait fromTrait,RelTrait toTrait);","/** 
 * Tests whether the given RelTrait can be converted to another RelTrait.
 * @param planner the planner requesting the conversion test
 * @param fromTrait the RelTrait to convert from
 * @param toTrait the RelTrait to convert to
 * @return true if fromTrait can be converted to toTrait
 */
public abstract boolean canConvert(RelOptPlanner planner,T fromTrait,T toTrait);",0.9764397905759162
111875,"/** 
 * Converts the given RelNode to the given RelTrait.
 * @param planner the planner requesting the conversion
 * @param rel RelNode to convert
 * @param toTrait RelTrait to convert to
 * @param allowInfiniteCostConverters flag indicating whether infinite costconverters are allowed
 * @return a converted RelNode or null if conversion is not possible
 */
public abstract RelNode convert(RelOptPlanner planner,RelNode rel,RelTrait toTrait,boolean allowInfiniteCostConverters);","/** 
 * Converts the given RelNode to the given RelTrait.
 * @param planner the planner requesting the conversion
 * @param rel RelNode to convert
 * @param toTrait RelTrait to convert to
 * @param allowInfiniteCostConverters flag indicating whether infinite costconverters are allowed
 * @return a converted RelNode or null if conversion is not possible
 */
public abstract RelNode convert(RelOptPlanner planner,RelNode rel,T toTrait,boolean allowInfiniteCostConverters);",0.9926393270241852
111876,"public boolean canConvert(RelOptPlanner planner,RelTrait fromTrait,RelTrait toTrait){
  if (conversionMap.containsKey(fromTrait)) {
    for (    Pair<RelTrait,ConverterRule> traitAndRule : conversionMap.getMulti(fromTrait)) {
      if (traitAndRule.left == toTrait) {
        return true;
      }
    }
  }
  return false;
}","public boolean canConvert(RelOptPlanner planner,AltTrait fromTrait,AltTrait toTrait){
  if (conversionMap.containsKey(fromTrait)) {
    for (    Pair<RelTrait,ConverterRule> traitAndRule : conversionMap.getMulti(fromTrait)) {
      if (traitAndRule.left == toTrait) {
        return true;
      }
    }
  }
  return false;
}",0.9814814814814816
111877,"private SyntheticRecordType(RelDataType relType,String name){
  this.relType=relType;
  this.name=name;
}","private SyntheticRecordType(RelDataType relType,String name){
}",0.75
111878,"private static Expression implementNullSemantics(RexToLixTranslator translator,RexCall call,NullAs nullAs,NotNullImplementor implementor){
  final List<Expression> list=new ArrayList<Expression>();
switch (nullAs) {
case NULL:
    for (    Ord<RexNode> operand : Ord.zip(call.getOperands())) {
      if (translator.isNullable(operand.e)) {
        list.add(translator.translate(operand.e,NullAs.IS_NULL));
        translator=translator.setNullable(operand.e,false);
      }
    }
  return optimize(Expressions.condition(Expressions.foldOr(list),NULL_EXPR,Expressions.box(implementCall(translator,call,implementor,nullAs))));
case FALSE:
for (Ord<RexNode> operand : Ord.zip(call.getOperands())) {
  if (translator.isNullable(operand.e)) {
    list.add(translator.translate(operand.e,NullAs.IS_NOT_NULL));
    translator=translator.setNullable(operand.e,false);
  }
}
list.add(implementCall(translator,call,implementor,nullAs));
return Expressions.foldAnd(list);
case NOT_POSSIBLE:
translator=translator.setNullable(call,false);
default :
return implementCall(translator,call,implementor,nullAs);
}
}","private static Expression implementNullSemantics(RexToLixTranslator translator,RexCall call,NullAs nullAs,NotNullImplementor implementor){
  final List<Expression> list=new ArrayList<Expression>();
switch (nullAs) {
case NULL:
    for (    Ord<RexNode> operand : Ord.zip(call.getOperands())) {
      if (translator.isNullable(operand.e)) {
        list.add(translator.translate(operand.e,NullAs.IS_NULL));
        translator=translator.setNullable(operand.e,false);
      }
    }
  final Expression box=Expressions.box(implementCall(translator,call,implementor,nullAs));
return optimize(Expressions.condition(Expressions.foldOr(list),Types.castIfNecessary(box.getType(),NULL_EXPR),box));
case FALSE:
for (Ord<RexNode> operand : Ord.zip(call.getOperands())) {
if (translator.isNullable(operand.e)) {
  list.add(translator.translate(operand.e,NullAs.IS_NOT_NULL));
  translator=translator.setNullable(operand.e,false);
}
}
list.add(implementCall(translator,call,implementor,nullAs));
return Expressions.foldAnd(list);
case NOT_POSSIBLE:
translator=translator.setNullable(call,false);
default :
return implementCall(translator,call,implementor,nullAs);
}
}",0.9115948467347844
111879,"private CallImplementor createImplementor(final NotNullImplementor implementor,final NullPolicy nullPolicy,final boolean harmonize){
switch (nullPolicy) {
case ANY:
case STRICT:
    return new CallImplementor(){
      public Expression implement(      RexToLixTranslator translator,      RexCall call,      NullAs nullAs){
        return implementNullSemantics0(translator,call,nullAs,nullPolicy,harmonize,implementor);
      }
    }
;
case AND:
  return new CallImplementor(){
    public Expression implement(    RexToLixTranslator translator,    RexCall call,    NullAs nullAs){
      final RexCall call2=call2(false,translator,call);
      final List<Expression> expressions=translator.translateList(call2.getOperandList(),nullAs);
      return Expressions.foldAnd(expressions);
    }
  }
;
case OR:
return new CallImplementor(){
  public Expression implement(  RexToLixTranslator translator,  RexCall call,  NullAs nullAs){
    final RexCall call2=call2(harmonize,translator,call);
    final Expression t0=translator.translate(call2.getOperandList().get(0));
    final Expression t1=translator.translate(call2.getOperandList().get(1));
    if (!nullable(call2,0) && !nullable(call2,1)) {
      return Expressions.orElse(t0,t1);
    }
    return optimize(Expressions.condition(Expressions.equal(t0,NULL_EXPR),Expressions.condition(Expressions.orElse(Expressions.equal(t1,NULL_EXPR),Expressions.not(t1)),NULL_EXPR,BOXED_TRUE_EXPR),Expressions.condition(Expressions.not(t0),t1,BOXED_TRUE_EXPR)));
  }
}
;
case NONE:
return new CallImplementor(){
public Expression implement(RexToLixTranslator translator,RexCall call,NullAs nullAs){
  final RexCall call2=call2(false,translator,call);
  return implementCall(translator,call2,implementor,nullAs);
}
}
;
default :
throw new AssertionError(nullPolicy);
}
}","private CallImplementor createImplementor(final NotNullImplementor implementor,final NullPolicy nullPolicy,final boolean harmonize){
switch (nullPolicy) {
case ANY:
case STRICT:
    return new CallImplementor(){
      public Expression implement(      RexToLixTranslator translator,      RexCall call,      NullAs nullAs){
        return implementNullSemantics0(translator,call,nullAs,nullPolicy,harmonize,implementor);
      }
    }
;
case AND:
  return new CallImplementor(){
    public Expression implement(    RexToLixTranslator translator,    RexCall call,    NullAs nullAs){
      final RexCall call2=call2(false,translator,call);
      final List<Expression> expressions=translator.translateList(call2.getOperandList(),nullAs);
      return Expressions.foldAnd(expressions);
    }
  }
;
case OR:
return new CallImplementor(){
  public Expression implement(  RexToLixTranslator translator,  RexCall call,  NullAs nullAs){
    final RexCall call2=call2(harmonize,translator,call);
    final NullAs nullAs2=nullAs == NullAs.TRUE ? NullAs.NULL : nullAs;
    final List<Expression> expressions=translator.translateList(call2.getOperandList(),nullAs2);
switch (nullAs) {
case NOT_POSSIBLE:
case FALSE:
      return Expressions.foldOr(expressions);
  }
  final Expression t0=expressions.get(0);
  final Expression t1=expressions.get(1);
  if (!nullable(call2,0) && !nullable(call2,1)) {
    return Expressions.orElse(t0,t1);
  }
  return optimize(Expressions.condition(Expressions.equal(t0,NULL_EXPR),Expressions.condition(Expressions.orElse(Expressions.equal(t1,NULL_EXPR),Expressions.not(t1)),NULL_EXPR,BOXED_TRUE_EXPR),Expressions.condition(Expressions.not(t0),t1,BOXED_TRUE_EXPR)));
}
}
;
case NOT:
return new CallImplementor(){
public Expression implement(RexToLixTranslator translator,RexCall call,NullAs nullAs){
NullAs nullAs2;
switch (nullAs) {
case FALSE:
  nullAs2=NullAs.TRUE;
break;
case TRUE:
nullAs2=NullAs.FALSE;
break;
default :
nullAs2=nullAs;
}
return implementNullSemantics0(translator,call,nullAs2,nullPolicy,harmonize,implementor);
}
}
;
case NONE:
return new CallImplementor(){
public Expression implement(RexToLixTranslator translator,RexCall call,NullAs nullAs){
final RexCall call2=call2(false,translator,call);
return implementCall(translator,call2,implementor,nullAs);
}
}
;
default :
throw new AssertionError(nullPolicy);
}
}",0.784992784992785
111880,"RexImpTable(){
  defineMethod(upperFunc,BuiltinMethod.UPPER.method,NullPolicy.STRICT);
  defineMethod(lowerFunc,BuiltinMethod.LOWER.method,NullPolicy.STRICT);
  defineMethod(initcapFunc,BuiltinMethod.INITCAP.method,NullPolicy.STRICT);
  defineMethod(substringFunc,BuiltinMethod.SUBSTRING.method,NullPolicy.STRICT);
  defineMethod(characterLengthFunc,BuiltinMethod.CHAR_LENGTH.method,NullPolicy.STRICT);
  defineMethod(charLengthFunc,BuiltinMethod.CHAR_LENGTH.method,NullPolicy.STRICT);
  defineMethod(concatOperator,BuiltinMethod.STRING_CONCAT.method,NullPolicy.STRICT);
  defineMethod(overlayFunc,BuiltinMethod.OVERLAY.method,NullPolicy.STRICT);
  defineBinary(andOperator,AndAlso,NullPolicy.AND,null);
  defineBinary(orOperator,OrElse,NullPolicy.OR,null);
  defineUnary(notOperator,Not,NullPolicy.STRICT);
  defineBinary(lessThanOperator,LessThan,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(lessThanOrEqualOperator,LessThanOrEqual,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(greaterThanOperator,GreaterThan,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(greaterThanOrEqualOperator,GreaterThanOrEqual,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(equalsOperator,Equal,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(notEqualsOperator,NotEqual,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(plusOperator,Add,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(minusOperator,Subtract,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(multiplyOperator,Multiply,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(divideOperator,Divide,NullPolicy.STRICT,""String_Node_Str"");
  defineUnary(prefixMinusOperator,Negate,NullPolicy.STRICT);
  defineUnary(prefixPlusOperator,UnaryPlus,NullPolicy.STRICT);
  defineMethod(modFunc,""String_Node_Str"",NullPolicy.STRICT);
  defineMethod(expFunc,""String_Node_Str"",NullPolicy.STRICT);
  defineMethod(powerFunc,""String_Node_Str"",NullPolicy.STRICT);
  defineMethod(lnFunc,""String_Node_Str"",NullPolicy.STRICT);
  map.put(isNullOperator,new IsXxxImplementor(null,false));
  map.put(isNotNullOperator,new IsXxxImplementor(null,true));
  map.put(isTrueOperator,new IsXxxImplementor(true,false));
  map.put(isNotTrueOperator,new IsXxxImplementor(true,true));
  map.put(isFalseOperator,new IsXxxImplementor(false,false));
  map.put(isNotFalseOperator,new IsXxxImplementor(false,true));
  final MethodImplementor likeImplementor=new MethodImplementor(BuiltinMethod.LIKE.method);
  defineImplementor(likeOperator,NullPolicy.STRICT,likeImplementor,false);
  defineImplementor(notLikeOperator,NullPolicy.STRICT,NotImplementor.of(likeImplementor),false);
  final MethodImplementor similarImplementor=new MethodImplementor(BuiltinMethod.SIMILAR.method);
  defineImplementor(similarOperator,NullPolicy.STRICT,similarImplementor,false);
  defineImplementor(notSimilarOperator,NullPolicy.STRICT,NotImplementor.of(similarImplementor),false);
  map.put(caseOperator,new CaseImplementor());
  defineImplementor(SqlStdOperatorTable.castFunc,NullPolicy.STRICT,new CastImplementor(),false);
  final CallImplementor value=new ValueConstructorImplementor();
  map.put(SqlStdOperatorTable.mapValueConstructor,value);
  map.put(SqlStdOperatorTable.arrayValueConstructor,value);
  map.put(SqlStdOperatorTable.itemOp,new ItemImplementor());
  aggMap.put(countOperator,new BuiltinAggregateImplementor(""String_Node_Str""));
  aggMap.put(sumOperator,new BuiltinAggregateImplementor(""String_Node_Str""));
  aggMap.put(minOperator,new BuiltinAggregateImplementor(""String_Node_Str""));
  aggMap.put(maxOperator,new BuiltinAggregateImplementor(""String_Node_Str""));
  agg2Map.put(countOperator,new CountImplementor2());
  agg2Map.put(sumOperator,new SumImplementor2());
  final MinMaxImplementor2 minMax=new MinMaxImplementor2();
  agg2Map.put(minOperator,minMax);
  agg2Map.put(maxOperator,minMax);
}","RexImpTable(){
  defineMethod(upperFunc,BuiltinMethod.UPPER.method,NullPolicy.STRICT);
  defineMethod(lowerFunc,BuiltinMethod.LOWER.method,NullPolicy.STRICT);
  defineMethod(initcapFunc,BuiltinMethod.INITCAP.method,NullPolicy.STRICT);
  defineMethod(substringFunc,BuiltinMethod.SUBSTRING.method,NullPolicy.STRICT);
  defineMethod(characterLengthFunc,BuiltinMethod.CHAR_LENGTH.method,NullPolicy.STRICT);
  defineMethod(charLengthFunc,BuiltinMethod.CHAR_LENGTH.method,NullPolicy.STRICT);
  defineMethod(concatOperator,BuiltinMethod.STRING_CONCAT.method,NullPolicy.STRICT);
  defineMethod(overlayFunc,BuiltinMethod.OVERLAY.method,NullPolicy.STRICT);
  defineBinary(andOperator,AndAlso,NullPolicy.AND,null);
  defineBinary(orOperator,OrElse,NullPolicy.OR,null);
  defineUnary(notOperator,Not,NullPolicy.NOT);
  defineBinary(lessThanOperator,LessThan,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(lessThanOrEqualOperator,LessThanOrEqual,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(greaterThanOperator,GreaterThan,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(greaterThanOrEqualOperator,GreaterThanOrEqual,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(equalsOperator,Equal,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(notEqualsOperator,NotEqual,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(plusOperator,Add,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(minusOperator,Subtract,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(multiplyOperator,Multiply,NullPolicy.STRICT,""String_Node_Str"");
  defineBinary(divideOperator,Divide,NullPolicy.STRICT,""String_Node_Str"");
  defineUnary(prefixMinusOperator,Negate,NullPolicy.STRICT);
  defineUnary(prefixPlusOperator,UnaryPlus,NullPolicy.STRICT);
  defineMethod(modFunc,""String_Node_Str"",NullPolicy.STRICT);
  defineMethod(expFunc,""String_Node_Str"",NullPolicy.STRICT);
  defineMethod(powerFunc,""String_Node_Str"",NullPolicy.STRICT);
  defineMethod(lnFunc,""String_Node_Str"",NullPolicy.STRICT);
  map.put(isNullOperator,new IsXxxImplementor(null,false));
  map.put(isNotNullOperator,new IsXxxImplementor(null,true));
  map.put(isTrueOperator,new IsXxxImplementor(true,false));
  map.put(isNotTrueOperator,new IsXxxImplementor(true,true));
  map.put(isFalseOperator,new IsXxxImplementor(false,false));
  map.put(isNotFalseOperator,new IsXxxImplementor(false,true));
  final MethodImplementor likeImplementor=new MethodImplementor(BuiltinMethod.LIKE.method);
  defineImplementor(likeOperator,NullPolicy.STRICT,likeImplementor,false);
  defineImplementor(notLikeOperator,NullPolicy.STRICT,NotImplementor.of(likeImplementor),false);
  final MethodImplementor similarImplementor=new MethodImplementor(BuiltinMethod.SIMILAR.method);
  defineImplementor(similarOperator,NullPolicy.STRICT,similarImplementor,false);
  defineImplementor(notSimilarOperator,NullPolicy.STRICT,NotImplementor.of(similarImplementor),false);
  map.put(caseOperator,new CaseImplementor());
  defineImplementor(SqlStdOperatorTable.castFunc,NullPolicy.STRICT,new CastImplementor(),false);
  final CallImplementor value=new ValueConstructorImplementor();
  map.put(SqlStdOperatorTable.mapValueConstructor,value);
  map.put(SqlStdOperatorTable.arrayValueConstructor,value);
  map.put(SqlStdOperatorTable.itemOp,new ItemImplementor());
  aggMap.put(countOperator,new BuiltinAggregateImplementor(""String_Node_Str""));
  aggMap.put(sumOperator,new BuiltinAggregateImplementor(""String_Node_Str""));
  aggMap.put(minOperator,new BuiltinAggregateImplementor(""String_Node_Str""));
  aggMap.put(maxOperator,new BuiltinAggregateImplementor(""String_Node_Str""));
  agg2Map.put(countOperator,new CountImplementor2());
  agg2Map.put(sumOperator,new SumImplementor2());
  final MinMaxImplementor2 minMax=new MinMaxImplementor2();
  agg2Map.put(minOperator,minMax);
  agg2Map.put(maxOperator,minMax);
}",0.9990881854891234
111881,"private static void expr(SqlBuilder buf,RexProgram program,RexNode rex){
  if (rex instanceof RexLocalRef) {
    final int index=((RexLocalRef)rex).getIndex();
    expr(buf,program,program.getExprList().get(index));
  }
 else   if (rex instanceof RexInputRef) {
    buf.identifier(program.getInputRowType().getFieldNames().get(((RexInputRef)rex).getIndex()));
  }
 else   if (rex instanceof RexLiteral) {
    RexLiteral rexLiteral=(RexLiteral)rex;
    buf.append(rexLiteral.getValue2().toString());
  }
 else   if (rex instanceof RexCall) {
    final RexCall call=(RexCall)rex;
switch (call.getOperator().getSyntax()) {
case Binary:
      expr(buf,program,call.getOperandList().get(0));
    buf.append(' ').append(call.getOperator().toString()).append(' ');
  expr(buf,program,call.getOperandList().get(1));
break;
default :
throw new AssertionError(call.getOperator());
}
}
 else {
throw new AssertionError(rex);
}
}","private static void expr(SqlBuilder buf,RexProgram program,RexNode rex){
  if (rex instanceof RexLocalRef) {
    final int index=((RexLocalRef)rex).getIndex();
    expr(buf,program,program.getExprList().get(index));
  }
 else   if (rex instanceof RexInputRef) {
    buf.identifier(program.getInputRowType().getFieldNames().get(((RexInputRef)rex).getIndex()));
  }
 else   if (rex instanceof RexLiteral) {
    toSql(buf,(RexLiteral)rex);
  }
 else   if (rex instanceof RexCall) {
    final RexCall call=(RexCall)rex;
switch (call.getOperator().getSyntax()) {
case Binary:
      expr(buf,program,call.getOperandList().get(0));
    buf.append(' ').append(call.getOperator().toString()).append(' ');
  expr(buf,program,call.getOperandList().get(1));
break;
default :
throw new AssertionError(call.getOperator());
}
}
 else {
throw new AssertionError(rex);
}
}",0.948081264108352
111882,"private static boolean isStar(RexProgram program){
  int i=0;
  for (  RexLocalRef ref : program.getProjectList()) {
    if (ref.getIndex() != i++) {
      return false;
    }
  }
  if (i != program.getInputRowType().getFieldCount()) {
    return false;
  }
  return true;
}","private static boolean isStar(RexProgram program){
  int i=0;
  for (  RexLocalRef ref : program.getProjectList()) {
    if (ref.getIndex() != i++) {
      return false;
    }
  }
  return i == program.getInputRowType().getFieldCount();
}",0.890625
111883,"Expression translateCast(RelDataType sourceType,RelDataType targetType,Expression operand){
  Expression convert=null;
switch (targetType.getSqlTypeName()) {
case BOOLEAN:
switch (sourceType.getSqlTypeName()) {
case CHAR:
case VARCHAR:
      convert=Expressions.call(BuiltinMethod.STRING_TO_BOOLEAN.method,operand);
  }
break;
case CHAR:
case VARCHAR:
switch (sourceType.getSqlTypeName()) {
case DATE:
convert=RexImpTable.optimize2(operand,Expressions.call(BuiltinMethod.UNIX_DATE_TO_STRING.method,operand));
break;
case TIME:
convert=RexImpTable.optimize2(operand,Expressions.call(BuiltinMethod.UNIX_TIME_TO_STRING.method,operand));
break;
case TIMESTAMP:
convert=RexImpTable.optimize2(operand,Expressions.call(BuiltinMethod.UNIX_TIMESTAMP_TO_STRING.method,operand));
break;
case BOOLEAN:
convert=RexImpTable.optimize2(operand,Expressions.call(BuiltinMethod.BOOLEAN_TO_STRING.method,operand));
break;
}
}
if (convert == null) {
convert=convert(operand,typeFactory.getJavaClass(targetType));
}
switch (sourceType.getSqlTypeName()) {
case CHAR:
switch (targetType.getSqlTypeName()) {
case VARCHAR:
convert=Expressions.call(BuiltinMethod.TRIM.method,convert);
}
}
truncate: switch (targetType.getSqlTypeName()) {
case CHAR:
case VARCHAR:
final int targetPrecision=targetType.getPrecision();
if (targetPrecision >= 0) {
switch (sourceType.getSqlTypeName()) {
case CHAR:
case VARCHAR:
final int sourcePrecision=sourceType.getPrecision();
if (sourcePrecision >= 0 && sourcePrecision <= targetPrecision) {
break truncate;
}
default :
convert=Expressions.call(BuiltinMethod.TRUNCATE.method,convert,Expressions.constant(targetPrecision));
}
}
break;
case TIMESTAMP:
int targetScale=targetType.getScale();
if (targetScale == RelDataType.SCALE_NOT_SPECIFIED) {
targetScale=0;
}
if (targetScale < sourceType.getScale()) {
convert=Expressions.call(BuiltinMethod.ROUND_LONG.method,convert,Expressions.constant((long)Math.pow(10,3 - targetScale)));
}
break;
}
return convert;
}","Expression translateCast(RelDataType sourceType,RelDataType targetType,Expression operand){
  Expression convert=null;
switch (targetType.getSqlTypeName()) {
case BOOLEAN:
switch (sourceType.getSqlTypeName()) {
case CHAR:
case VARCHAR:
      convert=Expressions.call(BuiltinMethod.STRING_TO_BOOLEAN.method,operand);
  }
break;
case CHAR:
case VARCHAR:
switch (sourceType.getSqlTypeName()) {
case DATE:
convert=RexImpTable.optimize2(operand,Expressions.call(BuiltinMethod.UNIX_DATE_TO_STRING.method,operand));
break;
case TIME:
convert=RexImpTable.optimize2(operand,Expressions.call(BuiltinMethod.UNIX_TIME_TO_STRING.method,operand));
break;
case TIMESTAMP:
convert=RexImpTable.optimize2(operand,Expressions.call(BuiltinMethod.UNIX_TIMESTAMP_TO_STRING.method,operand));
break;
case BOOLEAN:
convert=RexImpTable.optimize2(operand,Expressions.call(BuiltinMethod.BOOLEAN_TO_STRING.method,operand));
break;
}
}
if (convert == null) {
convert=convert(operand,typeFactory.getJavaClass(targetType));
}
switch (sourceType.getSqlTypeName()) {
case CHAR:
switch (targetType.getSqlTypeName()) {
case VARCHAR:
convert=Expressions.call(BuiltinMethod.TRIM.method,convert);
}
}
truncate: switch (targetType.getSqlTypeName()) {
case CHAR:
case VARCHAR:
final int targetPrecision=targetType.getPrecision();
if (targetPrecision >= 0) {
switch (sourceType.getSqlTypeName()) {
case CHAR:
case VARCHAR:
final int sourcePrecision=sourceType.getPrecision();
if (sourcePrecision < 0 || sourcePrecision >= 0 && sourcePrecision <= targetPrecision) {
break truncate;
}
default :
convert=Expressions.call(BuiltinMethod.TRUNCATE.method,convert,Expressions.constant(targetPrecision));
}
}
break;
case TIMESTAMP:
int targetScale=targetType.getScale();
if (targetScale == RelDataType.SCALE_NOT_SPECIFIED) {
targetScale=0;
}
if (targetScale < sourceType.getScale()) {
convert=Expressions.call(BuiltinMethod.ROUND_LONG.method,convert,Expressions.constant((long)Math.pow(10,3 - targetScale)));
}
break;
}
return convert;
}",0.9941757406938464
111884,"public RelNode toRel(RelOptTable.ToRelContext context,RelOptTable relOptTable){
  return expandView(context.getPreparingStmt(),((JavaTypeFactory)context.getCluster().getTypeFactory()).createType(elementType),viewSql);
}","public RelNode toRel(RelOptTable.ToRelContext context,RelOptTable relOptTable){
  return expandView(context.getPreparingStmt(),getRowType(),viewSql);
}",0.8054054054054054
111885,"/** 
 * Adding projection to the inputs of a join to produce the required join keys.
 * @param inputRels inputs to a join
 * @param leftJoinKeys expressions for LHS of join key
 * @param rightJoinKeys expressions for RHS of join key
 * @param systemColCount number of system columns, usually zero. Thesecolumns are projected at the leading edge of the output row.
 * @param leftKeys on return this contains the join key positions from thenew project rel on the LHS.
 * @param rightKeys on return this contains the join key positions from thenew project rel on the RHS.
 * @param outputProj on return this contains the positions of the originaljoin output in the (to be formed by caller) LhxJoinRel. Caller needs to be responsible for adding projection on the new join output.
 */
public static void projectJoinInputs(RelNode[] inputRels,List<RexNode> leftJoinKeys,List<RexNode> rightJoinKeys,int systemColCount,List<Integer> leftKeys,List<Integer> rightKeys,List<Integer> outputProj){
  RelNode leftRel=inputRels[0];
  RelNode rightRel=inputRels[1];
  RexBuilder rexBuilder=leftRel.getCluster().getRexBuilder();
  int origLeftInputSize=leftRel.getRowType().getFieldCount();
  int origRightInputSize=rightRel.getRowType().getFieldCount();
  List<RexNode> newLeftFields=new ArrayList<RexNode>();
  List<String> newLeftFieldNames=new ArrayList<String>();
  List<RexNode> newRightFields=new ArrayList<RexNode>();
  List<String> newRightFieldNames=new ArrayList<String>();
  int leftKeyCount=leftJoinKeys.size();
  int rightKeyCount=rightJoinKeys.size();
  int i;
  for (i=0; i < systemColCount; i++) {
    outputProj.add(i);
  }
  for (i=0; i < origLeftInputSize; i++) {
    newLeftFields.add(rexBuilder.makeInputRef(leftRel.getRowType().getFields()[i].getType(),i));
    newLeftFieldNames.add(leftRel.getRowType().getFields()[i].getName());
    outputProj.add(systemColCount + i);
  }
  int newLeftKeyCount=0;
  for (i=0; i < leftKeyCount; i++) {
    RexNode leftKey=leftJoinKeys.get(i);
    if (leftKey instanceof RexInputRef) {
      leftKeys.add(((RexInputRef)leftKey).getIndex());
    }
 else {
      newLeftFields.add(leftKey);
      newLeftFieldNames.add(leftKey.toString());
      leftKeys.add(origLeftInputSize + newLeftKeyCount);
      newLeftKeyCount++;
    }
  }
  int leftFieldCount=origLeftInputSize + newLeftKeyCount;
  for (i=0; i < origRightInputSize; i++) {
    newRightFields.add(rexBuilder.makeInputRef(rightRel.getRowType().getFields()[i].getType(),i));
    newRightFieldNames.add(rightRel.getRowType().getFields()[i].getName());
    outputProj.add(systemColCount + leftFieldCount + i);
  }
  int newRightKeyCount=0;
  for (i=0; i < rightKeyCount; i++) {
    RexNode rightKey=rightJoinKeys.get(i);
    if (rightKey instanceof RexInputRef) {
      rightKeys.add(((RexInputRef)rightKey).getIndex());
    }
 else {
      newRightFields.add(rightKey);
      newRightFieldNames.add(rightKey.toString());
      rightKeys.add(origRightInputSize + newRightKeyCount);
      newRightKeyCount++;
    }
  }
  if (newLeftKeyCount > 0) {
    leftRel=CalcRel.createProject(leftRel,newLeftFields,newLeftFieldNames);
  }
  if (newRightKeyCount > 0) {
    rightRel=CalcRel.createProject(rightRel,newRightFields,newRightFieldNames);
  }
  inputRels[0]=leftRel;
  inputRels[1]=rightRel;
}","/** 
 * Adding projection to the inputs of a join to produce the required join keys.
 * @param inputRels inputs to a join
 * @param leftJoinKeys expressions for LHS of join key
 * @param rightJoinKeys expressions for RHS of join key
 * @param systemColCount number of system columns, usually zero. Thesecolumns are projected at the leading edge of the output row.
 * @param leftKeys on return this contains the join key positions from thenew project rel on the LHS.
 * @param rightKeys on return this contains the join key positions from thenew project rel on the RHS.
 * @param outputProj on return this contains the positions of the originaljoin output in the (to be formed by caller) LhxJoinRel. Caller needs to be responsible for adding projection on the new join output.
 */
public static void projectJoinInputs(RelNode[] inputRels,List<RexNode> leftJoinKeys,List<RexNode> rightJoinKeys,int systemColCount,List<Integer> leftKeys,List<Integer> rightKeys,List<Integer> outputProj){
  RelNode leftRel=inputRels[0];
  RelNode rightRel=inputRels[1];
  RexBuilder rexBuilder=leftRel.getCluster().getRexBuilder();
  int origLeftInputSize=leftRel.getRowType().getFieldCount();
  int origRightInputSize=rightRel.getRowType().getFieldCount();
  List<RexNode> newLeftFields=new ArrayList<RexNode>();
  List<String> newLeftFieldNames=new ArrayList<String>();
  List<RexNode> newRightFields=new ArrayList<RexNode>();
  List<String> newRightFieldNames=new ArrayList<String>();
  int leftKeyCount=leftJoinKeys.size();
  int rightKeyCount=rightJoinKeys.size();
  int i;
  for (i=0; i < systemColCount; i++) {
    outputProj.add(i);
  }
  for (i=0; i < origLeftInputSize; i++) {
    newLeftFields.add(rexBuilder.makeInputRef(leftRel.getRowType().getFields()[i].getType(),i));
    newLeftFieldNames.add(leftRel.getRowType().getFields()[i].getName());
    outputProj.add(systemColCount + i);
  }
  int newLeftKeyCount=0;
  for (i=0; i < leftKeyCount; i++) {
    RexNode leftKey=leftJoinKeys.get(i);
    if (leftKey instanceof RexInputRef) {
      leftKeys.add(((RexInputRef)leftKey).getIndex());
    }
 else {
      newLeftFields.add(leftKey);
      newLeftFieldNames.add(""String_Node_Str"" + newLeftKeyCount);
      leftKeys.add(origLeftInputSize + newLeftKeyCount);
      newLeftKeyCount++;
    }
  }
  int leftFieldCount=origLeftInputSize + newLeftKeyCount;
  for (i=0; i < origRightInputSize; i++) {
    newRightFields.add(rexBuilder.makeInputRef(rightRel.getRowType().getFields()[i].getType(),i));
    newRightFieldNames.add(rightRel.getRowType().getFields()[i].getName());
    outputProj.add(systemColCount + leftFieldCount + i);
  }
  int newRightKeyCount=0;
  for (i=0; i < rightKeyCount; i++) {
    RexNode rightKey=rightJoinKeys.get(i);
    if (rightKey instanceof RexInputRef) {
      rightKeys.add(((RexInputRef)rightKey).getIndex());
    }
 else {
      newRightFields.add(rightKey);
      newRightFieldNames.add(""String_Node_Str"" + newRightKeyCount);
      rightKeys.add(origRightInputSize + newRightKeyCount);
      newRightKeyCount++;
    }
  }
  if (newLeftKeyCount > 0) {
    leftRel=CalcRel.createProject(leftRel,newLeftFields,newLeftFieldNames);
  }
  if (newRightKeyCount > 0) {
    rightRel=CalcRel.createProject(rightRel,newRightFields,newRightFieldNames);
  }
  inputRels[0]=leftRel;
  inputRels[1]=rightRel;
}",0.9872804360993336
111886,"public static <K,V>List<V> rightSlice(final List<Pair<K,V>> pairs){
  return new AbstractList<V>(){
    public V get(    int index){
      return pairs.get(index).right;
    }
    public int size(){
      return pairs.size();
    }
  }
;
}","public static <K,V>List<V> rightSlice(final List<? extends Map.Entry<K,V>> pairs){
  return new AbstractList<V>(){
    public V get(    int index){
      return pairs.get(index).getValue();
    }
    public int size(){
      return pairs.size();
    }
  }
;
}",0.923694779116466
111887,"public static <K,V>List<K> leftSlice(final List<Pair<K,V>> pairs){
  return new AbstractList<K>(){
    public K get(    int index){
      return pairs.get(index).left;
    }
    public int size(){
      return pairs.size();
    }
  }
;
}","public static <K,V>List<K> leftSlice(final List<? extends Map.Entry<K,V>> pairs){
  return new AbstractList<K>(){
    public K get(    int index){
      return pairs.get(index).getKey();
    }
    public int size(){
      return pairs.size();
    }
  }
;
}",0.9290060851926978
111888,"public V get(int index){
  return pairs.get(index).right;
}","public V get(int index){
  return pairs.get(index).getValue();
}",0.9105691056910568
111889,"/** 
 * Creates a query planner and initializes it with a default set of rules. 
 */
protected RelOptPlanner createPlanner(){
  final VolcanoPlanner planner=new VolcanoPlanner();
  planner.addRelTraitDef(ConventionTraitDef.instance);
  RelOptUtil.registerAbstractRels(planner);
  planner.addRule(JavaRules.ENUMERABLE_JOIN_RULE);
  planner.addRule(JavaRules.ENUMERABLE_CALC_RULE);
  planner.addRule(JavaRules.ENUMERABLE_AGGREGATE_RULE);
  planner.addRule(JavaRules.ENUMERABLE_SORT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_UNION_RULE);
  planner.addRule(JavaRules.ENUMERABLE_INTERSECT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_MINUS_RULE);
  planner.addRule(JavaRules.ENUMERABLE_TABLE_MODIFICATION_RULE);
  planner.addRule(JavaRules.ENUMERABLE_VALUES_RULE);
  planner.addRule(JavaRules.ENUMERABLE_ONE_ROW_RULE);
  planner.addRule(JavaRules.ENUMERABLE_CUSTOM_FROM_ARRAY_RULE);
  planner.addRule(JavaRules.ENUMERABLE_ARRAY_FROM_CUSTOM_RULE);
  planner.addRule(JavaRules.EnumerableCustomCalcRule.INSTANCE);
  planner.addRule(TableAccessRule.instance);
  planner.addRule(PushFilterPastProjectRule.instance);
  planner.addRule(PushFilterPastJoinRule.instance);
  planner.addRule(RemoveDistinctAggregateRule.instance);
  planner.addRule(SwapJoinRule.instance);
  return planner;
}","/** 
 * Creates a query planner and initializes it with a default set of rules. 
 */
protected RelOptPlanner createPlanner(){
  final VolcanoPlanner planner=new VolcanoPlanner();
  planner.addRelTraitDef(ConventionTraitDef.instance);
  RelOptUtil.registerAbstractRels(planner);
  planner.addRule(JavaRules.ENUMERABLE_JOIN_RULE);
  planner.addRule(JavaRules.ENUMERABLE_CALC_RULE);
  planner.addRule(JavaRules.ENUMERABLE_AGGREGATE_RULE);
  planner.addRule(JavaRules.ENUMERABLE_SORT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_UNION_RULE);
  planner.addRule(JavaRules.ENUMERABLE_INTERSECT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_MINUS_RULE);
  planner.addRule(JavaRules.ENUMERABLE_TABLE_MODIFICATION_RULE);
  planner.addRule(JavaRules.ENUMERABLE_VALUES_RULE);
  planner.addRule(JavaRules.ENUMERABLE_ONE_ROW_RULE);
  planner.addRule(JavaRules.ENUMERABLE_CUSTOM_FROM_ARRAY_RULE);
  planner.addRule(JavaRules.ENUMERABLE_ARRAY_FROM_CUSTOM_RULE);
  planner.addRule(JavaRules.EnumerableCustomCalcRule.INSTANCE);
  planner.addRule(TableAccessRule.instance);
  planner.addRule(PushFilterPastProjectRule.instance);
  planner.addRule(PushFilterPastJoinRule.instance);
  planner.addRule(RemoveDistinctAggregateRule.instance);
  planner.addRule(ReduceAggregatesRule.instance);
  planner.addRule(SwapJoinRule.instance);
  return planner;
}",0.9808575803981624
111890,"private ClassDeclaration classDecl(JavaTypeFactoryImpl.SyntheticRecordType type){
  ClassDeclaration classDeclaration=Expressions.classDecl(Modifier.PUBLIC | Modifier.STATIC,type.getName(),null,Collections.<Type>emptyList(),new ArrayList<MemberDeclaration>());
  for (  Types.RecordField field : type.getRecordFields()) {
    classDeclaration.memberDeclarations.add(Expressions.fieldDecl(Modifier.PUBLIC,Expressions.parameter(field.getType(),field.getName()),null));
  }
  final BlockBuilder blockBuilder=new BlockBuilder();
  final List<ParameterExpression> parameters=new ArrayList<ParameterExpression>();
  final ParameterExpression thisParameter=Expressions.parameter(type,""String_Node_Str"");
  for (  Types.RecordField field : type.getRecordFields()) {
    final ParameterExpression parameter=Expressions.parameter(field.getType(),field.getName());
    parameters.add(parameter);
    blockBuilder.add(Expressions.statement(Expressions.assign(Expressions.field(thisParameter,field),parameter)));
  }
  classDeclaration.memberDeclarations.add(Expressions.constructorDecl(Modifier.PUBLIC,type,parameters,blockBuilder.toBlock()));
  final BlockBuilder blockBuilder2=new BlockBuilder();
  final ParameterExpression thatParameter=Expressions.parameter(type,""String_Node_Str"");
  final ParameterExpression oParameter=Expressions.parameter(Object.class,""String_Node_Str"");
  blockBuilder2.add(Expressions.ifThen(Expressions.equal(thisParameter,oParameter),Expressions.return_(null,Expressions.constant(true))));
  blockBuilder2.add(Expressions.ifThen(Expressions.not(Expressions.typeIs(oParameter,type)),Expressions.return_(null,Expressions.constant(false))));
  blockBuilder2.add(Expressions.declare(Modifier.FINAL,thatParameter,Expressions.convert_(oParameter,type)));
  List<Expression> conditions=new ArrayList<Expression>();
  for (  Types.RecordField field : type.getRecordFields()) {
    conditions.add(Primitive.is(field.getType()) ? Expressions.equal(Expressions.field(thisParameter,field.getName()),Expressions.field(thatParameter,field.getName())) : Expressions.call(Utilities.class,""String_Node_Str"",Expressions.field(thisParameter,field.getName()),Expressions.field(thatParameter,field.getName())));
  }
  blockBuilder2.add(Expressions.return_(null,JavaRules.EnumUtil.foldAnd(conditions)));
  classDeclaration.memberDeclarations.add(Expressions.methodDecl(Modifier.PUBLIC,boolean.class,""String_Node_Str"",Collections.singletonList(oParameter),blockBuilder2.toBlock()));
  final BlockBuilder blockBuilder3=new BlockBuilder();
  final ParameterExpression hParameter=Expressions.parameter(int.class,""String_Node_Str"");
  final ConstantExpression constantZero=Expressions.constant(0);
  blockBuilder3.add(Expressions.declare(0,hParameter,constantZero));
  for (  Types.RecordField field : type.getRecordFields()) {
    blockBuilder3.add(Expressions.statement(Expressions.assign(hParameter,Expressions.call(Utilities.class,""String_Node_Str"",Arrays.<Expression>asList(hParameter,Expressions.field(thisParameter,field))))));
  }
  blockBuilder3.add(Expressions.return_(null,hParameter));
  classDeclaration.memberDeclarations.add(Expressions.methodDecl(Modifier.PUBLIC,int.class,""String_Node_Str"",Collections.<ParameterExpression>emptyList(),blockBuilder3.toBlock()));
  final BlockBuilder blockBuilder4=new BlockBuilder();
  final ParameterExpression cParameter=Expressions.parameter(int.class,""String_Node_Str"");
  blockBuilder4.add(Expressions.declare(0,cParameter,null));
  final ConditionalStatement conditionalStatement=Expressions.ifThen(Expressions.notEqual(cParameter,constantZero),Expressions.return_(null,cParameter));
  for (  Types.RecordField field : type.getRecordFields()) {
    blockBuilder4.add(Expressions.statement(Expressions.assign(cParameter,Expressions.call(Utilities.class,field.nullable() ? ""String_Node_Str"" : ""String_Node_Str"",Expressions.field(thisParameter,field),Expressions.field(thatParameter,field)))));
    blockBuilder4.add(conditionalStatement);
  }
  blockBuilder4.add(Expressions.return_(null,constantZero));
  classDeclaration.memberDeclarations.add(Expressions.methodDecl(Modifier.PUBLIC,int.class,""String_Node_Str"",Collections.singletonList(thatParameter),blockBuilder4.toBlock()));
  final BlockBuilder blockBuilder5=new BlockBuilder();
  Expression expression5=null;
  for (  Types.RecordField field : type.getRecordFields()) {
    if (expression5 == null) {
      expression5=Expressions.constant(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
    }
 else {
      expression5=Expressions.add(expression5,Expressions.constant(""String_Node_Str"" + field.getName() + ""String_Node_Str""));
    }
    expression5=Expressions.add(expression5,Expressions.field(thisParameter,field.getName()));
  }
  expression5=expression5 == null ? Expressions.constant(""String_Node_Str"") : Expressions.add(expression5,Expressions.constant(""String_Node_Str""));
  blockBuilder5.add(Expressions.return_(null,expression5));
  classDeclaration.memberDeclarations.add(Expressions.methodDecl(Modifier.PUBLIC,String.class,""String_Node_Str"",Collections.<ParameterExpression>emptyList(),blockBuilder5.toBlock()));
  return classDeclaration;
}","private ClassDeclaration classDecl(JavaTypeFactoryImpl.SyntheticRecordType type){
  ClassDeclaration classDeclaration=Expressions.classDecl(Modifier.PUBLIC | Modifier.STATIC,type.getName(),null,Collections.<Type>emptyList(),new ArrayList<MemberDeclaration>());
  for (  Types.RecordField field : type.getRecordFields()) {
    classDeclaration.memberDeclarations.add(Expressions.fieldDecl(Modifier.PUBLIC,Expressions.parameter(field.getType(),field.getName()),null));
  }
  final BlockBuilder blockBuilder=new BlockBuilder();
  final List<ParameterExpression> parameters=new ArrayList<ParameterExpression>();
  final ParameterExpression thisParameter=Expressions.parameter(type,""String_Node_Str"");
  for (  Types.RecordField field : type.getRecordFields()) {
    final ParameterExpression parameter=Expressions.parameter(field.getType(),field.getName());
    parameters.add(parameter);
    blockBuilder.add(Expressions.statement(Expressions.assign(Expressions.field(thisParameter,field),parameter)));
  }
  classDeclaration.memberDeclarations.add(Expressions.constructorDecl(Modifier.PUBLIC,type,parameters,blockBuilder.toBlock()));
  final BlockBuilder blockBuilder2=new BlockBuilder();
  final ParameterExpression thatParameter=Expressions.parameter(type,""String_Node_Str"");
  final ParameterExpression oParameter=Expressions.parameter(Object.class,""String_Node_Str"");
  blockBuilder2.add(Expressions.ifThen(Expressions.equal(thisParameter,oParameter),Expressions.return_(null,Expressions.constant(true))));
  blockBuilder2.add(Expressions.ifThen(Expressions.not(Expressions.typeIs(oParameter,type)),Expressions.return_(null,Expressions.constant(false))));
  blockBuilder2.add(Expressions.declare(Modifier.FINAL,thatParameter,Expressions.convert_(oParameter,type)));
  List<Expression> conditions=new ArrayList<Expression>();
  for (  Types.RecordField field : type.getRecordFields()) {
    conditions.add(Primitive.is(field.getType()) ? Expressions.equal(Expressions.field(thisParameter,field.getName()),Expressions.field(thatParameter,field.getName())) : Expressions.call(Utilities.class,""String_Node_Str"",Expressions.field(thisParameter,field.getName()),Expressions.field(thatParameter,field.getName())));
  }
  blockBuilder2.add(Expressions.return_(null,Expressions.foldAnd(conditions)));
  classDeclaration.memberDeclarations.add(Expressions.methodDecl(Modifier.PUBLIC,boolean.class,""String_Node_Str"",Collections.singletonList(oParameter),blockBuilder2.toBlock()));
  final BlockBuilder blockBuilder3=new BlockBuilder();
  final ParameterExpression hParameter=Expressions.parameter(int.class,""String_Node_Str"");
  final ConstantExpression constantZero=Expressions.constant(0);
  blockBuilder3.add(Expressions.declare(0,hParameter,constantZero));
  for (  Types.RecordField field : type.getRecordFields()) {
    blockBuilder3.add(Expressions.statement(Expressions.assign(hParameter,Expressions.call(Utilities.class,""String_Node_Str"",Arrays.<Expression>asList(hParameter,Expressions.field(thisParameter,field))))));
  }
  blockBuilder3.add(Expressions.return_(null,hParameter));
  classDeclaration.memberDeclarations.add(Expressions.methodDecl(Modifier.PUBLIC,int.class,""String_Node_Str"",Collections.<ParameterExpression>emptyList(),blockBuilder3.toBlock()));
  final BlockBuilder blockBuilder4=new BlockBuilder();
  final ParameterExpression cParameter=Expressions.parameter(int.class,""String_Node_Str"");
  blockBuilder4.add(Expressions.declare(0,cParameter,null));
  final ConditionalStatement conditionalStatement=Expressions.ifThen(Expressions.notEqual(cParameter,constantZero),Expressions.return_(null,cParameter));
  for (  Types.RecordField field : type.getRecordFields()) {
    blockBuilder4.add(Expressions.statement(Expressions.assign(cParameter,Expressions.call(Utilities.class,field.nullable() ? ""String_Node_Str"" : ""String_Node_Str"",Expressions.field(thisParameter,field),Expressions.field(thatParameter,field)))));
    blockBuilder4.add(conditionalStatement);
  }
  blockBuilder4.add(Expressions.return_(null,constantZero));
  classDeclaration.memberDeclarations.add(Expressions.methodDecl(Modifier.PUBLIC,int.class,""String_Node_Str"",Collections.singletonList(thatParameter),blockBuilder4.toBlock()));
  final BlockBuilder blockBuilder5=new BlockBuilder();
  Expression expression5=null;
  for (  Types.RecordField field : type.getRecordFields()) {
    if (expression5 == null) {
      expression5=Expressions.constant(""String_Node_Str"" + field.getName() + ""String_Node_Str"");
    }
 else {
      expression5=Expressions.add(expression5,Expressions.constant(""String_Node_Str"" + field.getName() + ""String_Node_Str""));
    }
    expression5=Expressions.add(expression5,Expressions.field(thisParameter,field.getName()));
  }
  expression5=expression5 == null ? Expressions.constant(""String_Node_Str"") : Expressions.add(expression5,Expressions.constant(""String_Node_Str""));
  blockBuilder5.add(Expressions.return_(null,expression5));
  classDeclaration.memberDeclarations.add(Expressions.methodDecl(Modifier.PUBLIC,String.class,""String_Node_Str"",Collections.<ParameterExpression>emptyList(),blockBuilder5.toBlock()));
  return classDeclaration;
}",0.997191827248959
111891,"private static Expression implementNullSemantics0(RexToLixTranslator translator,RexCall call,NullAs nullAs,NullPolicy nullPolicy,boolean harmonize,NotNullImplementor implementor){
switch (nullAs) {
case IS_NOT_NULL:
    if (nullPolicy == NullPolicy.STRICT) {
      return JavaRules.EnumUtil.foldAnd(translator.translateList(call.getOperandList(),nullAs));
    }
  break;
case IS_NULL:
if (nullPolicy == NullPolicy.STRICT) {
  return JavaRules.EnumUtil.foldOr(translator.translateList(call.getOperandList(),nullAs));
}
break;
}
final RexCall call2=call2(harmonize,translator,call);
try {
return implementNullSemantics(translator,call2,nullAs,implementor);
}
 catch (RexToLixTranslator.AlwaysNull e) {
if (nullAs == NullAs.NOT_POSSIBLE) {
throw e;
}
return NULL_EXPR;
}
}","private static Expression implementNullSemantics0(RexToLixTranslator translator,RexCall call,NullAs nullAs,NullPolicy nullPolicy,boolean harmonize,NotNullImplementor implementor){
switch (nullAs) {
case IS_NOT_NULL:
    if (nullPolicy == NullPolicy.STRICT) {
      return Expressions.foldAnd(translator.translateList(call.getOperandList(),nullAs));
    }
  break;
case IS_NULL:
if (nullPolicy == NullPolicy.STRICT) {
  return Expressions.foldOr(translator.translateList(call.getOperandList(),nullAs));
}
break;
}
final RexCall call2=call2(harmonize,translator,call);
try {
return implementNullSemantics(translator,call2,nullAs,implementor);
}
 catch (RexToLixTranslator.AlwaysNull e) {
if (nullAs == NullAs.NOT_POSSIBLE) {
throw e;
}
return NULL_EXPR;
}
}",0.9645669291338582
111892,"private static Expression implementNullSemantics(RexToLixTranslator translator,RexCall call,NullAs nullAs,NotNullImplementor implementor){
  final List<Expression> list=new ArrayList<Expression>();
switch (nullAs) {
case NULL:
    for (    Ord<RexNode> operand : Ord.zip(call.getOperands())) {
      if (translator.isNullable(operand.e)) {
        list.add(translator.translate(operand.e,NullAs.IS_NULL));
        translator=translator.setNullable(operand.e,false);
      }
    }
  return optimize(Expressions.condition(JavaRules.EnumUtil.foldOr(list),NULL_EXPR,RexToLixTranslator.box(implementCall(translator,call,implementor,nullAs))));
case FALSE:
for (Ord<RexNode> operand : Ord.zip(call.getOperands())) {
  if (translator.isNullable(operand.e)) {
    list.add(translator.translate(operand.e,NullAs.IS_NOT_NULL));
    translator=translator.setNullable(operand.e,false);
  }
}
list.add(implementCall(translator,call,implementor,nullAs));
return JavaRules.EnumUtil.foldAnd(list);
case NOT_POSSIBLE:
translator=translator.setNullable(call,false);
default :
return implementCall(translator,call,implementor,nullAs);
}
}","private static Expression implementNullSemantics(RexToLixTranslator translator,RexCall call,NullAs nullAs,NotNullImplementor implementor){
  final List<Expression> list=new ArrayList<Expression>();
switch (nullAs) {
case NULL:
    for (    Ord<RexNode> operand : Ord.zip(call.getOperands())) {
      if (translator.isNullable(operand.e)) {
        list.add(translator.translate(operand.e,NullAs.IS_NULL));
        translator=translator.setNullable(operand.e,false);
      }
    }
  return optimize(Expressions.condition(Expressions.foldOr(list),NULL_EXPR,Expressions.box(implementCall(translator,call,implementor,nullAs))));
case FALSE:
for (Ord<RexNode> operand : Ord.zip(call.getOperands())) {
  if (translator.isNullable(operand.e)) {
    list.add(translator.translate(operand.e,NullAs.IS_NOT_NULL));
    translator=translator.setNullable(operand.e,false);
  }
}
list.add(implementCall(translator,call,implementor,nullAs));
return Expressions.foldAnd(list);
case NOT_POSSIBLE:
translator=translator.setNullable(call,false);
default :
return implementCall(translator,call,implementor,nullAs);
}
}",0.9625620207487596
111893,"private CallImplementor createImplementor(final NotNullImplementor implementor,final NullPolicy nullPolicy,final boolean harmonize){
switch (nullPolicy) {
case ANY:
case STRICT:
    return new CallImplementor(){
      public Expression implement(      RexToLixTranslator translator,      RexCall call,      NullAs nullAs){
        return implementNullSemantics0(translator,call,nullAs,nullPolicy,harmonize,implementor);
      }
    }
;
case AND:
  return new CallImplementor(){
    public Expression implement(    RexToLixTranslator translator,    RexCall call,    NullAs nullAs){
      final RexCall call2=call2(false,translator,call);
      final List<Expression> expressions=translator.translateList(call2.getOperandList(),nullAs);
      return JavaRules.EnumUtil.foldAnd(expressions);
    }
  }
;
case OR:
return new CallImplementor(){
  public Expression implement(  RexToLixTranslator translator,  RexCall call,  NullAs nullAs){
    final RexCall call2=call2(harmonize,translator,call);
    final Expression t0=translator.translate(call2.getOperandList().get(0));
    final Expression t1=translator.translate(call2.getOperandList().get(1));
    if (!nullable(call2,0) && !nullable(call2,1)) {
      return Expressions.orElse(t0,t1);
    }
    return optimize(Expressions.condition(Expressions.equal(t0,NULL_EXPR),Expressions.condition(Expressions.orElse(Expressions.equal(t1,NULL_EXPR),Expressions.not(t1)),NULL_EXPR,BOXED_TRUE_EXPR),Expressions.condition(Expressions.not(t0),t1,BOXED_TRUE_EXPR)));
  }
}
;
case NONE:
return new CallImplementor(){
public Expression implement(RexToLixTranslator translator,RexCall call,NullAs nullAs){
  final RexCall call2=call2(false,translator,call);
  return implementCall(translator,call2,implementor,nullAs);
}
}
;
default :
throw new AssertionError(nullPolicy);
}
}","private CallImplementor createImplementor(final NotNullImplementor implementor,final NullPolicy nullPolicy,final boolean harmonize){
switch (nullPolicy) {
case ANY:
case STRICT:
    return new CallImplementor(){
      public Expression implement(      RexToLixTranslator translator,      RexCall call,      NullAs nullAs){
        return implementNullSemantics0(translator,call,nullAs,nullPolicy,harmonize,implementor);
      }
    }
;
case AND:
  return new CallImplementor(){
    public Expression implement(    RexToLixTranslator translator,    RexCall call,    NullAs nullAs){
      final RexCall call2=call2(false,translator,call);
      final List<Expression> expressions=translator.translateList(call2.getOperandList(),nullAs);
      return Expressions.foldAnd(expressions);
    }
  }
;
case OR:
return new CallImplementor(){
  public Expression implement(  RexToLixTranslator translator,  RexCall call,  NullAs nullAs){
    final RexCall call2=call2(harmonize,translator,call);
    final Expression t0=translator.translate(call2.getOperandList().get(0));
    final Expression t1=translator.translate(call2.getOperandList().get(1));
    if (!nullable(call2,0) && !nullable(call2,1)) {
      return Expressions.orElse(t0,t1);
    }
    return optimize(Expressions.condition(Expressions.equal(t0,NULL_EXPR),Expressions.condition(Expressions.orElse(Expressions.equal(t1,NULL_EXPR),Expressions.not(t1)),NULL_EXPR,BOXED_TRUE_EXPR),Expressions.condition(Expressions.not(t0),t1,BOXED_TRUE_EXPR)));
  }
}
;
case NONE:
return new CallImplementor(){
public Expression implement(RexToLixTranslator translator,RexCall call,NullAs nullAs){
  final RexCall call2=call2(false,translator,call);
  return implementCall(translator,call2,implementor,nullAs);
}
}
;
default :
throw new AssertionError(nullPolicy);
}
}",0.9919778699861688
111894,"private static Expression implementCall(RexToLixTranslator translator,RexCall call,NotNullImplementor implementor,NullAs nullAs){
  final List<Expression> translatedOperands=translator.translateList(call.getOperandList());
switch (nullAs) {
case NOT_POSSIBLE:
    for (    Expression translatedOperand : translatedOperands) {
      if (isConstantNull(translatedOperand)) {
        return NULL_EXPR;
      }
    }
}
return implementor.implement(translator,call,translatedOperands);
}","private static Expression implementCall(RexToLixTranslator translator,RexCall call,NotNullImplementor implementor,NullAs nullAs){
  final List<Expression> translatedOperands=translator.translateList(call.getOperandList());
switch (nullAs) {
case NOT_POSSIBLE:
    for (    Expression translatedOperand : translatedOperands) {
      if (Expressions.isConstantNull(translatedOperand)) {
        return NULL_EXPR;
      }
    }
}
return implementor.implement(translator,call,translatedOperands);
}",0.9877049180327868
111895,"public Expression generateAccessor(List<Integer> fields){
  ParameterExpression v1=Expressions.parameter(javaRowClass,""String_Node_Str"");
switch (fields.size()) {
case 0:
    return Expressions.lambda(Function1.class,Expressions.field(null,Collections.class,""String_Node_Str""),v1);
case 1:
  int field0=fields.get(0);
Class returnType=fieldClasses.get(field0);
Expression fieldReference=Types.castIfNecessary(returnType,fieldReference(v1,field0));
return Expressions.lambda(Function1.class,fieldReference,v1);
default :
Expressions.FluentList<Expression> list=Expressions.list();
for (int field : fields) {
list.add(fieldReference(v1,field));
}
return Expressions.lambda(Function1.class,Expressions.newArrayInit(Object.class,list),v1);
}
}","public Expression generateAccessor(List<Integer> fields){
  ParameterExpression v1=Expressions.parameter(javaRowClass,""String_Node_Str"");
switch (fields.size()) {
case 0:
    return Expressions.lambda(Function1.class,Expressions.field(null,Collections.class,""String_Node_Str""),v1);
case 1:
  int field0=fields.get(0);
Class returnType=fieldClasses.get(field0);
Expression fieldReference=Types.castIfNecessary(returnType,fieldReference(v1,field0));
return Expressions.lambda(Function1.class,fieldReference,v1);
default :
Expressions.FluentList<Expression> list=Expressions.list();
for (int field : fields) {
list.add(fieldReference(v1,field));
}
return Expressions.lambda(Function1.class,Expressions.call(BuiltinMethod.ARRAYS_AS_LIST.method,Expressions.newArrayInit(Object.class,list)),v1);
}
}",0.9647519582245432
111896,"private static ExpressionWriter write(ExpressionWriter writer,final Object value,Type type){
  if (value == null) {
    return writer.append(""String_Node_Str"");
  }
  if (value instanceof String) {
    escapeString(writer.getBuf(),(String)value);
    return writer;
  }
  final Primitive primitive=Primitive.of(type);
  if (primitive != null) {
switch (primitive) {
case FLOAT:
      return writer.append(value).append(""String_Node_Str"");
case DOUBLE:
    return writer.append(value).append(""String_Node_Str"");
case LONG:
  return writer.append(value).append(""String_Node_Str"");
default :
return writer.append(value);
}
}
final Primitive primitive2=Primitive.ofBox(type);
if (primitive2 != null) {
writer.append(primitive2.boxClass.getSimpleName() + ""String_Node_Str"");
write(writer,value,primitive2.primitiveClass);
return writer.append(""String_Node_Str"");
}
if (value instanceof BigDecimal) {
BigDecimal bigDecimal=((BigDecimal)value).stripTrailingZeros();
try {
final int scale=bigDecimal.scale();
final long exact=bigDecimal.scaleByPowerOfTen(scale).longValueExact();
writer.append(""String_Node_Str"").append(exact).append(""String_Node_Str"");
if (scale != 0) {
writer.append(""String_Node_Str"").append(scale);
}
return writer.append(""String_Node_Str"");
}
 catch (ArithmeticException e) {
return writer.append(""String_Node_Str"").append(bigDecimal.toString()).append(""String_Node_Str"");
}
}
if (value instanceof BigInteger) {
BigInteger bigInteger=(BigInteger)value;
return writer.append(""String_Node_Str"").append(bigInteger.toString()).append(""String_Node_Str"");
}
if (value instanceof Class) {
Class clazz=(Class)value;
return writer.append(clazz.getCanonicalName()).append(""String_Node_Str"");
}
if (value instanceof Types.RecordType) {
final Types.RecordType recordType=(Types.RecordType)value;
return writer.append(recordType.getName()).append(""String_Node_Str"");
}
if (value.getClass().isArray()) {
writer.append(""String_Node_Str"").append(value.getClass().getComponentType());
list(writer,new AbstractList<Object>(){
public Object get(int index){
return Array.get(value,index);
}
public int size(){
return Array.getLength(value);
}
}
,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
return writer;
}
Constructor constructor=matchingConstructor(value);
if (constructor != null) {
final Field[] fields=value.getClass().getFields();
writer.append(""String_Node_Str"").append(value.getClass());
list(writer,new AbstractList<Object>(){
public Object get(int index){
try {
  return fields[index].get(value);
}
 catch (IllegalAccessException e) {
  throw new RuntimeException(e);
}
}
public int size(){
return fields.length;
}
}
,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
return writer;
}
return writer.append(value);
}","private static ExpressionWriter write(ExpressionWriter writer,final Object value,Type type){
  if (value == null) {
    return writer.append(""String_Node_Str"");
  }
  if (value instanceof String) {
    escapeString(writer.getBuf(),(String)value);
    return writer;
  }
  final Primitive primitive=Primitive.of(type);
  if (primitive != null) {
switch (primitive) {
case FLOAT:
      return writer.append(value).append(""String_Node_Str"");
case DOUBLE:
    return writer.append(value).append(""String_Node_Str"");
case LONG:
  return writer.append(value).append(""String_Node_Str"");
case SHORT:
return writer.append(""String_Node_Str"").append(value);
default :
return writer.append(value);
}
}
final Primitive primitive2=Primitive.ofBox(type);
if (primitive2 != null) {
writer.append(primitive2.boxClass.getSimpleName() + ""String_Node_Str"");
write(writer,value,primitive2.primitiveClass);
return writer.append(""String_Node_Str"");
}
if (value instanceof BigDecimal) {
BigDecimal bigDecimal=((BigDecimal)value).stripTrailingZeros();
try {
final int scale=bigDecimal.scale();
final long exact=bigDecimal.scaleByPowerOfTen(scale).longValueExact();
writer.append(""String_Node_Str"").append(exact).append(""String_Node_Str"");
if (scale != 0) {
writer.append(""String_Node_Str"").append(scale);
}
return writer.append(""String_Node_Str"");
}
 catch (ArithmeticException e) {
return writer.append(""String_Node_Str"").append(bigDecimal.toString()).append(""String_Node_Str"");
}
}
if (value instanceof BigInteger) {
BigInteger bigInteger=(BigInteger)value;
return writer.append(""String_Node_Str"").append(bigInteger.toString()).append(""String_Node_Str"");
}
if (value instanceof Class) {
Class clazz=(Class)value;
return writer.append(clazz.getCanonicalName()).append(""String_Node_Str"");
}
if (value instanceof Types.RecordType) {
final Types.RecordType recordType=(Types.RecordType)value;
return writer.append(recordType.getName()).append(""String_Node_Str"");
}
if (value.getClass().isArray()) {
writer.append(""String_Node_Str"").append(value.getClass().getComponentType());
list(writer,new AbstractList<Object>(){
public Object get(int index){
return Array.get(value,index);
}
public int size(){
return Array.getLength(value);
}
}
,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
return writer;
}
Constructor constructor=matchingConstructor(value);
if (constructor != null) {
final Field[] fields=value.getClass().getFields();
writer.append(""String_Node_Str"").append(value.getClass());
list(writer,new AbstractList<Object>(){
public Object get(int index){
try {
return fields[index].get(value);
}
 catch (IllegalAccessException e) {
throw new RuntimeException(e);
}
}
public int size(){
return fields.length;
}
}
,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
return writer;
}
return writer.append(value);
}",0.9871771717536572
111897,"/** 
 * Creates a call to the CAST operator, expanding if possible.
 * @param type Type to cast to
 * @param exp Expression being cast
 * @return Call to CAST operator
 */
public RexNode makeCast(RelDataType type,RexNode exp){
  final SqlTypeName sqlType=type.getSqlTypeName();
  if (exp instanceof RexLiteral) {
    RexLiteral literal=(RexLiteral)exp;
    final Comparable value=literal.getValue();
    if (RexLiteral.valueMatchesType(value,sqlType,false) && (!(value instanceof NlsString) || type.getPrecision() >= ((NlsString)value).getValue().length())) {
      return makeLiteral(value,type,literal.getTypeName());
    }
  }
 else   if (SqlTypeUtil.isInterval(type) && SqlTypeUtil.isExactNumeric(exp.getType())) {
    return makeCastExactToInterval(type,exp);
  }
 else   if (SqlTypeUtil.isExactNumeric(type) && SqlTypeUtil.isInterval(exp.getType())) {
    return makeCastIntervalToExact(type,exp);
  }
 else   if (sqlType == SqlTypeName.BOOLEAN && SqlTypeUtil.isExactNumeric(exp.getType())) {
    return makeCastExactToBoolean(type,exp);
  }
 else   if (exp.getType().getSqlTypeName() == SqlTypeName.BOOLEAN && SqlTypeUtil.isExactNumeric(type)) {
    return makeCastBooleanToExact(type,exp);
  }
  return makeAbstractCast(type,exp);
}","/** 
 * Creates a call to the CAST operator, expanding if possible.
 * @param type Type to cast to
 * @param exp Expression being cast
 * @return Call to CAST operator
 */
public RexNode makeCast(RelDataType type,RexNode exp){
  final SqlTypeName sqlType=type.getSqlTypeName();
  if (exp instanceof RexLiteral) {
    RexLiteral literal=(RexLiteral)exp;
    final Comparable value=literal.getValue();
    if (RexLiteral.valueMatchesType(value,sqlType,false) && (!(value instanceof NlsString) || (type instanceof BasicSqlType && type.getPrecision() >= ((NlsString)value).getValue().length()))) {
      return makeLiteral(value,type,literal.getTypeName());
    }
  }
 else   if (SqlTypeUtil.isInterval(type) && SqlTypeUtil.isExactNumeric(exp.getType())) {
    return makeCastExactToInterval(type,exp);
  }
 else   if (SqlTypeUtil.isExactNumeric(type) && SqlTypeUtil.isInterval(exp.getType())) {
    return makeCastIntervalToExact(type,exp);
  }
 else   if (sqlType == SqlTypeName.BOOLEAN && SqlTypeUtil.isExactNumeric(exp.getType())) {
    return makeCastExactToBoolean(type,exp);
  }
 else   if (exp.getType().getSqlTypeName() == SqlTypeName.BOOLEAN && SqlTypeUtil.isExactNumeric(type)) {
    return makeCastBooleanToExact(type,exp);
  }
  return makeAbstractCast(type,exp);
}",0.9864757358790772
111898,"/** 
 * Optimizes the list of statements. If an expression is used only once, it is inlined. 
 */
private void optimize(){
  List<Slot> slots=new ArrayList<Slot>();
  final UseCounter useCounter=new UseCounter();
  for (  Statement statement : statements) {
    if (statement instanceof DeclarationExpression) {
      final Slot slot=new Slot((DeclarationExpression)statement);
      useCounter.map.put(slot.parameter,slot);
      slots.add(slot);
    }
  }
  for (  Statement statement : statements) {
    statement.accept(useCounter);
  }
  final Map<ParameterExpression,Expression> subMap=new HashMap<ParameterExpression,Expression>();
  final SubstituteVariableVisitor visitor=new SubstituteVariableVisitor(subMap);
  final ArrayList<Statement> oldStatements=new ArrayList<Statement>(statements);
  statements.clear();
  for (  Statement oldStatement : oldStatements) {
    if (oldStatement instanceof DeclarationExpression) {
      DeclarationExpression statement=(DeclarationExpression)oldStatement;
      final Slot slot=useCounter.map.get(statement.parameter);
      int count=slot.count;
      if (slot.expression instanceof ConstantExpression && ((ConstantExpression)slot.expression).value == null) {
        count=100;
      }
      if (slot.expression instanceof NewExpression && ((NewExpression)slot.expression).memberDeclarations != null) {
        count=100;
      }
switch (count) {
case 0:
        break;
case 1:
      subMap.put(slot.parameter,slot.expression);
    break;
default :
  statements.add(statement);
break;
}
}
 else {
statements.add(oldStatement.accept(visitor));
}
}
if (!subMap.isEmpty()) {
oldStatements.clear();
oldStatements.addAll(statements);
statements.clear();
for (Statement oldStatement : oldStatements) {
statements.add(oldStatement.accept(visitor));
}
}
}","/** 
 * Optimizes the list of statements. If an expression is used only once, it is inlined. 
 */
private void optimize(){
  List<Slot> slots=new ArrayList<Slot>();
  final UseCounter useCounter=new UseCounter();
  for (  Statement statement : statements) {
    if (statement instanceof DeclarationExpression) {
      final Slot slot=new Slot((DeclarationExpression)statement);
      useCounter.map.put(slot.parameter,slot);
      slots.add(slot);
    }
  }
  for (  Statement statement : statements) {
    statement.accept(useCounter);
  }
  final Map<ParameterExpression,Expression> subMap=new HashMap<ParameterExpression,Expression>();
  final SubstituteVariableVisitor visitor=new SubstituteVariableVisitor(subMap);
  final ArrayList<Statement> oldStatements=new ArrayList<Statement>(statements);
  statements.clear();
  for (  Statement oldStatement : oldStatements) {
    if (oldStatement instanceof DeclarationExpression) {
      DeclarationExpression statement=(DeclarationExpression)oldStatement;
      final Slot slot=useCounter.map.get(statement.parameter);
      int count=slot.count;
      if (Expressions.isConstantNull(slot.expression)) {
        count=100;
      }
      if (slot.expression instanceof NewExpression && ((NewExpression)slot.expression).memberDeclarations != null) {
        count=100;
      }
switch (count) {
case 0:
        break;
case 1:
      subMap.put(slot.parameter,slot.expression);
    break;
default :
  statements.add(statement);
break;
}
}
 else {
statements.add(oldStatement.accept(visitor));
}
}
if (!subMap.isEmpty()) {
oldStatements.clear();
oldStatements.addAll(statements);
statements.clear();
for (Statement oldStatement : oldStatements) {
statements.add(oldStatement.accept(visitor));
}
}
}",0.9754306693024568
111899,"/** 
 * Creates a TernaryExpression, given the left and right operands, by calling an appropriate factory method. 
 */
public static TernaryExpression makeTernary(ExpressionType ternaryType,Expression e0,Expression e1,Expression e2){
  final Type type=e1.getType();
  return new TernaryExpression(ternaryType,type,e0,e1,e2);
}","/** 
 * Creates a TernaryExpression, given the left and right operands, by calling an appropriate factory method. 
 */
public static TernaryExpression makeTernary(ExpressionType ternaryType,Expression e0,Expression e1,Expression e2){
  final Type type;
switch (ternaryType) {
case Conditional:
    type=isConstantNull(e1) ? box(e2.getType()) : isConstantNull(e2) ? box(e1.getType()) : Types.gcd(e1.getType(),e2.getType());
  break;
default :
type=e1.getType();
}
return new TernaryExpression(ternaryType,type,e0,e1,e2);
}",0.7414403778040142
111900,"/** 
 * Returns the most restrictive type that is assignable from all given types. 
 */
static Type gcd(Type... types){
  if (types.length == 0) {
    return Object.class;
  }
  for (int i=1; i < types.length; i++) {
    if (types[i] != types[0]) {
      return Object.class;
    }
  }
  return types[0];
}","/** 
 * Returns the most restrictive type that is assignable from all given types. 
 */
static Type gcd(Type... types){
  if (types.length == 0) {
    return Object.class;
  }
  Type best=types[0];
  Primitive bestPrimitive=Primitive.of(best);
  if (bestPrimitive != null) {
    for (int i=1; i < types.length; i++) {
      final Primitive primitive=Primitive.of(types[i]);
      if (primitive == null) {
        return Object.class;
      }
      if (primitive.assignableFrom(bestPrimitive)) {
        bestPrimitive=primitive;
      }
 else       if (bestPrimitive.assignableFrom(primitive)) {
      }
 else       if (bestPrimitive == Primitive.CHAR || bestPrimitive == Primitive.BYTE) {
        bestPrimitive=Primitive.INT;
        --i;
      }
 else {
        return Object.class;
      }
    }
    return bestPrimitive.primitiveClass;
  }
 else {
    for (int i=1; i < types.length; i++) {
      if (types[i] != types[0]) {
        return Object.class;
      }
    }
  }
  return types[0];
}",0.3458877786318217
111901,"public Float apply(T1 a0){
  return f.apply(a0);
}","/** 
 * Creates a copy of a list, applying a function to each element. 
 */
public static <T1,R>List<R> apply(final List<T1> list,final Function1<T1,R> f){
  final ArrayList<R> list2=new ArrayList<R>(list.size());
  for (  T1 t : list) {
    list2.add(f.apply(t));
  }
  return list2;
}",0.1011904761904761
111902,"/** 
 * Adapts a   {@link FloatFunction1} (that returns a {@code float}) to an   {@link Function1} returning a {@link Float}. 
 */
public static <T1>Function1<T1,Float> adapt(final FloatFunction1<T1> f){
  return new Function1<T1,Float>(){
    public Float apply(    T1 a0){
      return f.apply(a0);
    }
  }
;
}","/** 
 * Creates a view of a list that applies a function to each element. 
 */
public static <T1,R>List<R> adapt(final List<T1> list,final Function1<T1,R> f){
  return new AbstractList<R>(){
    public R get(    int index){
      return f.apply(list.get(index));
    }
    public int size(){
      return list.size();
    }
  }
;
}",0.3720930232558139
111903,"public void testIsAssignableFrom(){
  assertTrue(Primitive.INT.assignableFrom(Primitive.BYTE));
  assertTrue(Primitive.INT.assignableFrom(Primitive.SHORT));
  assertTrue(Primitive.INT.assignableFrom(Primitive.CHAR));
  assertTrue(Primitive.INT.assignableFrom(Primitive.INT));
  assertTrue(Primitive.INT.assignableFrom(Primitive.SHORT));
  assertFalse(Primitive.INT.assignableFrom(Primitive.LONG));
  assertTrue(Primitive.LONG.assignableFrom(Primitive.BYTE));
  assertTrue(Primitive.LONG.assignableFrom(Primitive.SHORT));
  assertTrue(Primitive.LONG.assignableFrom(Primitive.CHAR));
  assertTrue(Primitive.LONG.assignableFrom(Primitive.INT));
  assertTrue(Primitive.LONG.assignableFrom(Primitive.LONG));
  assertTrue(Primitive.SHORT.assignableFrom(Primitive.BYTE));
  assertTrue(Primitive.SHORT.assignableFrom(Primitive.SHORT));
  assertFalse(Primitive.SHORT.assignableFrom(Primitive.CHAR));
  assertFalse(Primitive.SHORT.assignableFrom(Primitive.INT));
  assertFalse(Primitive.SHORT.assignableFrom(Primitive.LONG));
  assertTrue(Primitive.CHAR.assignableFrom(Primitive.BYTE));
  assertFalse(Primitive.CHAR.assignableFrom(Primitive.SHORT));
  assertTrue(Primitive.CHAR.assignableFrom(Primitive.CHAR));
  assertFalse(Primitive.CHAR.assignableFrom(Primitive.INT));
  assertFalse(Primitive.CHAR.assignableFrom(Primitive.LONG));
  assertFalse(Primitive.BOOLEAN.assignableFrom(Primitive.INT));
  assertFalse(Primitive.INT.assignableFrom(Primitive.BOOLEAN));
}","public void testIsAssignableFrom(){
  assertTrue(Primitive.INT.assignableFrom(Primitive.BYTE));
  assertTrue(Primitive.INT.assignableFrom(Primitive.SHORT));
  assertTrue(Primitive.INT.assignableFrom(Primitive.CHAR));
  assertTrue(Primitive.INT.assignableFrom(Primitive.INT));
  assertTrue(Primitive.INT.assignableFrom(Primitive.SHORT));
  assertFalse(Primitive.INT.assignableFrom(Primitive.LONG));
  assertTrue(Primitive.LONG.assignableFrom(Primitive.BYTE));
  assertTrue(Primitive.LONG.assignableFrom(Primitive.SHORT));
  assertTrue(Primitive.LONG.assignableFrom(Primitive.CHAR));
  assertTrue(Primitive.LONG.assignableFrom(Primitive.INT));
  assertTrue(Primitive.LONG.assignableFrom(Primitive.LONG));
  assertTrue(Primitive.SHORT.assignableFrom(Primitive.BYTE));
  assertTrue(Primitive.SHORT.assignableFrom(Primitive.SHORT));
  assertFalse(Primitive.SHORT.assignableFrom(Primitive.CHAR));
  assertFalse(Primitive.SHORT.assignableFrom(Primitive.INT));
  assertFalse(Primitive.SHORT.assignableFrom(Primitive.LONG));
  assertFalse(Primitive.CHAR.assignableFrom(Primitive.BYTE));
  assertFalse(Primitive.CHAR.assignableFrom(Primitive.SHORT));
  assertTrue(Primitive.CHAR.assignableFrom(Primitive.CHAR));
  assertFalse(Primitive.CHAR.assignableFrom(Primitive.INT));
  assertFalse(Primitive.CHAR.assignableFrom(Primitive.LONG));
  assertFalse(Primitive.BOOLEAN.assignableFrom(Primitive.INT));
  assertFalse(Primitive.INT.assignableFrom(Primitive.BOOLEAN));
}",0.997592019263846
111904,"public void testInsert(){
  final List<JdbcTest.Employee> employees=new ArrayList<JdbcTest.Employee>();
  employees.add(new JdbcTest.Employee(0,0,""String_Node_Str""));
  OptiqAssert.AssertThat with=assertThat().with(new OptiqAssert.ConnectionFactory(){
    public OptiqConnection createConnection() throws Exception {
      final Connection connection=JdbcTest.getConnection(""String_Node_Str"",""String_Node_Str"");
      OptiqConnection optiqConnection=connection.unwrap(OptiqConnection.class);
      MutableSchema rootSchema=optiqConnection.getRootSchema();
      MapSchema mapSchema=MapSchema.create(optiqConnection,rootSchema,""String_Node_Str"");
      mapSchema.addTable(""String_Node_Str"",new JdbcTest.AbstractModifiableTable(mapSchema,JdbcTest.Employee.class,optiqConnection.getTypeFactory().createType(JdbcTest.Employee.class),""String_Node_Str""){
        public Enumerator enumerator(){
          return Linq4j.enumerator(employees);
        }
        public Collection getModifiableCollection(){
          return employees;
        }
      }
);
      return optiqConnection;
    }
  }
);
  with.query(""String_Node_Str"").returns(""String_Node_Str"");
  if (false) {
    with.query(""String_Node_Str"").returns(""String_Node_Str"");
  }
  with.query(""String_Node_Str"").returns(""String_Node_Str"");
  with.query(""String_Node_Str"").returns(""String_Node_Str"");
  with.query(""String_Node_Str"" + ""String_Node_Str"").returns(""String_Node_Str"");
  with.query(""String_Node_Str"" + ""String_Node_Str"").returns(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}","public void testInsert(){
  final List<JdbcTest.Employee> employees=new ArrayList<JdbcTest.Employee>();
  OptiqAssert.AssertThat with=mutable(employees);
  with.query(""String_Node_Str"").returns(""String_Node_Str"");
  with.query(""String_Node_Str"").returns(""String_Node_Str"");
  with.query(""String_Node_Str"").returns(""String_Node_Str"");
  with.query(""String_Node_Str"" + ""String_Node_Str"").returns(""String_Node_Str"");
  with.query(""String_Node_Str"" + ""String_Node_Str"").returns(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}",0.1138287864534336
111905,"private void load(final RelDataType elementType){
  final List<Type> types=new AbstractList<Type>(){
    final List<RelDataTypeField> fields=elementType.getFieldList();
    public Type get(    int index){
      return typeFactory.getJavaClass(fields.get(index).getType());
    }
    public int size(){
      return fields.size();
    }
  }
;
  for (  Pair<Integer,Type> pair : Pair.zip(types)) {
    final int i=pair.left;
    @SuppressWarnings(""String_Node_Str"") final List<?> sliceList=types.size() == 1 ? list : new AbstractList<Object>(){
      public Object get(      int index){
        return ((Object[])list.get(index))[i];
      }
      public int size(){
        return list.size();
      }
    }
;
    final Type type=pair.right;
    final Class clazz=type instanceof Class ? (Class)type : Object.class;
    ValueSet valueSet=new ValueSet(clazz);
    for (    Object o : sliceList) {
      valueSet.add((Comparable)o);
    }
    representationValues.add(valueSet.freeze(i));
  }
}","private void load(final RelDataType elementType){
  final List<Type> types=new AbstractList<Type>(){
    final List<RelDataTypeField> fields=elementType.getFieldList();
    public Type get(    int index){
      return typeFactory.getJavaClass(fields.get(index).getType());
    }
    public int size(){
      return fields.size();
    }
  }
;
  for (  final Ord<Type> pair : Ord.zip(types)) {
    @SuppressWarnings(""String_Node_Str"") final List<?> sliceList=types.size() == 1 ? list : new AbstractList<Object>(){
      public Object get(      int index){
        return ((Object[])list.get(index))[pair.i];
      }
      public int size(){
        return list.size();
      }
    }
;
    final Class clazz=pair.e instanceof Class ? (Class)pair.e : Object.class;
    ValueSet valueSet=new ValueSet(clazz);
    for (    Object o : sliceList) {
      valueSet.add((Comparable)o);
    }
    representationValues.add(valueSet.freeze(pair.i));
  }
}",0.7284014485256078
111906,"ArrayTable.Representation chooseRep(int ordinal){
  Primitive primitive=Primitive.of(clazz);
  Primitive boxPrimitive=Primitive.ofBox(clazz);
  Primitive p=primitive != null ? primitive : boxPrimitive;
  if (!containsNull && p != null) {
switch (p) {
case FLOAT:
case DOUBLE:
      return new ArrayTable.PrimitiveArray(ordinal,p,p);
case OTHER:
case VOID:
    throw new AssertionError(""String_Node_Str"");
}
if (canBeLong(min) && canBeLong(max)) {
  return chooseFixedRep(ordinal,p,toLong(min),toLong(max));
}
}
final int codeBitCount=log2(nextPowerOf2(map.size()));
if (codeBitCount < 10 && values.size() > 2000) {
final ArrayTable.Representation representation=chooseFixedRep(-1,Primitive.INT,0,map.size() - 1);
return new ArrayTable.ObjectDictionary(ordinal,representation);
}
return new ArrayTable.ObjectArray(ordinal);
}","ArrayTable.Representation chooseRep(int ordinal){
  Primitive primitive=Primitive.of(clazz);
  Primitive boxPrimitive=Primitive.ofBox(clazz);
  Primitive p=primitive != null ? primitive : boxPrimitive;
  if (!containsNull && p != null) {
switch (p) {
case FLOAT:
case DOUBLE:
      return new ArrayTable.PrimitiveArray(ordinal,p,p);
case OTHER:
case VOID:
    throw new AssertionError(""String_Node_Str"");
}
if (canBeLong(min) && canBeLong(max)) {
  return chooseFixedRep(ordinal,p,toLong(min),toLong(max));
}
}
final int codeCount=map.size() + (containsNull ? 1 : 0);
final int codeBitCount=log2(nextPowerOf2(codeCount));
if (codeBitCount < 10 && values.size() > 2000) {
final ArrayTable.Representation representation=chooseFixedRep(-1,Primitive.INT,0,codeCount - 1);
return new ArrayTable.ObjectDictionary(ordinal,representation);
}
return new ArrayTable.ObjectArray(ordinal);
}",0.9442160892542572
111907,"public Object get(int index){
  return ((Object[])list.get(index))[i];
}","public Object get(int index){
  return ((Object[])list.get(index))[pair.i];
}",0.9664429530201344
111908,"public MetaColumn apply(RelDataTypeField a0){
  return new MetaColumn(table.tableCat,table.tableSchem,table.tableName,a0.getName(),a0.getType().getSqlTypeName().getJdbcOrdinal(),a0.getType().getFullTypeString(),a0.getType().getPrecision(),a0.getType().getSqlTypeName().allowsScale() ? a0.getType().getScale() : null,10,a0.getType().isNullable() ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls,a0.getType().getPrecision(),a0.getIndex() + 1,a0.getType().isNullable() ? ""String_Node_Str"" : ""String_Node_Str"");
}","public MetaColumn apply(RelDataTypeField a0){
  final int precision=a0.getType().getSqlTypeName().allowsPrec() && !(a0.getType() instanceof RelDataTypeFactoryImpl.JavaType) ? a0.getType().getPrecision() : -1;
  return new MetaColumn(table.tableCat,table.tableSchem,table.tableName,a0.getName(),a0.getType().getSqlTypeName().getJdbcOrdinal(),a0.getType().getFullTypeString(),precision,a0.getType().getSqlTypeName().allowsScale() ? a0.getType().getScale() : null,10,a0.getType().isNullable() ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls,precision,a0.getIndex() + 1,a0.getType().isNullable() ? ""String_Node_Str"" : ""String_Node_Str"");
}",0.8010160880609652
111909,"public Enumerable<MetaColumn> columns(final MetaTable table){
  RelDataType x=connection.getTypeFactory().createType(table.optiqTable.getElementType());
  return Linq4j.asEnumerable(x.getFieldList()).select(new Function1<RelDataTypeField,MetaColumn>(){
    public MetaColumn apply(    RelDataTypeField a0){
      return new MetaColumn(table.tableCat,table.tableSchem,table.tableName,a0.getName(),a0.getType().getSqlTypeName().getJdbcOrdinal(),a0.getType().getFullTypeString(),a0.getType().getPrecision(),a0.getType().getSqlTypeName().allowsScale() ? a0.getType().getScale() : null,10,a0.getType().isNullable() ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls,a0.getType().getPrecision(),a0.getIndex() + 1,a0.getType().isNullable() ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
);
}","public Enumerable<MetaColumn> columns(final MetaTable table){
  RelDataType x=connection.getTypeFactory().createType(table.optiqTable.getElementType());
  return Linq4j.asEnumerable(x.getFieldList()).select(new Function1<RelDataTypeField,MetaColumn>(){
    public MetaColumn apply(    RelDataTypeField a0){
      final int precision=a0.getType().getSqlTypeName().allowsPrec() && !(a0.getType() instanceof RelDataTypeFactoryImpl.JavaType) ? a0.getType().getPrecision() : -1;
      return new MetaColumn(table.tableCat,table.tableSchem,table.tableName,a0.getName(),a0.getType().getSqlTypeName().getJdbcOrdinal(),a0.getType().getFullTypeString(),precision,a0.getType().getSqlTypeName().allowsScale() ? a0.getType().getScale() : null,10,a0.getType().isNullable() ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls,precision,a0.getIndex() + 1,a0.getType().isNullable() ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
);
}",0.8627225732337737
111910,"public OptiqPreparingStmt(CatalogReader catalogReader,RelDataTypeFactory typeFactory,Schema schema){
  super(catalogReader);
  this.schema=schema;
  planner=new VolcanoPlanner();
  planner.addRelTraitDef(CallingConventionTraitDef.instance);
  RelOptUtil.registerAbstractRels(planner);
  planner.addRule(JavaRules.ENUMERABLE_JOIN_RULE);
  planner.addRule(JavaRules.ENUMERABLE_CALC_RULE);
  planner.addRule(JavaRules.ENUMERABLE_AGGREGATE_RULE);
  planner.addRule(JavaRules.ENUMERABLE_SORT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_UNION_RULE);
  planner.addRule(JavaRules.ENUMERABLE_INTERSECT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_MINUS_RULE);
  planner.addRule(JavaRules.ENUMERABLE_TABLE_MODIFICATION_RULE);
  planner.addRule(TableAccessRule.instance);
  planner.addRule(PushFilterPastJoinRule.instance);
  planner.addRule(RemoveDistinctAggregateRule.instance);
  rexBuilder=new RexBuilder(typeFactory);
}","public OptiqPreparingStmt(CatalogReader catalogReader,RelDataTypeFactory typeFactory,Schema schema){
  super(catalogReader);
  this.schema=schema;
  planner=new VolcanoPlanner();
  planner.addRelTraitDef(CallingConventionTraitDef.instance);
  RelOptUtil.registerAbstractRels(planner);
  planner.addRule(JavaRules.ENUMERABLE_JOIN_RULE);
  planner.addRule(JavaRules.ENUMERABLE_CALC_RULE);
  planner.addRule(JavaRules.ENUMERABLE_AGGREGATE_RULE);
  planner.addRule(JavaRules.ENUMERABLE_SORT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_UNION_RULE);
  planner.addRule(JavaRules.ENUMERABLE_INTERSECT_RULE);
  planner.addRule(JavaRules.ENUMERABLE_MINUS_RULE);
  planner.addRule(JavaRules.ENUMERABLE_TABLE_MODIFICATION_RULE);
  planner.addRule(JavaRules.ENUMERABLE_VALUES_RULE);
  planner.addRule(TableAccessRule.instance);
  planner.addRule(PushFilterPastProjectRule.instance);
  planner.addRule(PushFilterPastJoinRule.instance);
  planner.addRule(RemoveDistinctAggregateRule.instance);
  rexBuilder=new RexBuilder(typeFactory);
}",0.9443298969072164
111911,"private Expression translate0(RexNode expr){
  if (expr instanceof RexInputRef) {
    final Expression input=getInput(0);
    final int index=((RexInputRef)expr).getIndex();
    final List<RelDataTypeField> fields=program.getInputRowType().getFieldList();
    final RelDataTypeField field=fields.get(index);
    if (fields.size() == 1) {
      return input;
    }
 else     if (input.getType() == Object[].class) {
      return Expressions.convert_(Expressions.arrayIndex(input,Expressions.constant(field.getIndex())),Types.box(JavaRules.EnumUtil.javaClass(typeFactory,field.getType())));
    }
 else     if (Types.isPrimitive(Types.unbox(input.getType())) || input.getType() == String.class) {
      return input;
    }
 else {
      return Expressions.field(input,field.getName());
    }
  }
  if (expr instanceof RexLocalRef) {
    return translate(program.getExprList().get(((RexLocalRef)expr).getIndex()));
  }
  if (expr instanceof RexLiteral) {
    Type javaClass=typeFactory.getJavaClass(expr.getType());
    if (javaClass == BigDecimal.class) {
      return Expressions.new_(BigDecimal.class,Arrays.<Expression>asList(Expressions.constant(((RexLiteral)expr).getValue3().toString())));
    }
    return Expressions.constant(((RexLiteral)expr).getValue3(),javaClass);
  }
  if (expr instanceof RexCall) {
    final RexCall call=(RexCall)expr;
    final SqlOperator operator=call.getOperator();
    CallImplementor implementor=ImpTable.INSTANCE.get(operator);
    if (implementor != null) {
      return implementor.implement(this,call);
    }
  }
switch (expr.getKind()) {
default :
    throw new RuntimeException(""String_Node_Str"" + expr);
}
}","private Expression translate0(RexNode expr){
  if (expr instanceof RexInputRef) {
    final Expression input=getInput(0);
    final int index=((RexInputRef)expr).getIndex();
    final List<RelDataTypeField> fields=program.getInputRowType().getFieldList();
    final RelDataTypeField field=fields.get(index);
    if (fields.size() == 1) {
      return input;
    }
 else     if (input.getType() == Object[].class) {
      return Expressions.convert_(Expressions.arrayIndex(input,Expressions.constant(field.getIndex())),Types.box(JavaRules.EnumUtil.javaClass(typeFactory,field.getType())));
    }
 else     if (Types.isPrimitive(Types.unbox(input.getType())) || input.getType() == String.class) {
      return input;
    }
 else {
      return Expressions.field(input,field.getName());
    }
  }
  if (expr instanceof RexLocalRef) {
    return translate(program.getExprList().get(((RexLocalRef)expr).getIndex()));
  }
  if (expr instanceof RexLiteral) {
    return translateLiteral(expr,typeFactory);
  }
  if (expr instanceof RexCall) {
    final RexCall call=(RexCall)expr;
    final SqlOperator operator=call.getOperator();
    CallImplementor implementor=ImpTable.INSTANCE.get(operator);
    if (implementor != null) {
      return implementor.implement(this,call);
    }
  }
switch (expr.getKind()) {
default :
    throw new RuntimeException(""String_Node_Str"" + expr);
}
}",0.8896232650363516
111912,"/** 
 * @return true if all tuples match rowType; otherwise, assert on mismatch
 */
private boolean assertRowType(){
  for (  List<RexLiteral> tuple : tuples) {
    RelDataTypeField[] fields=rowType.getFields();
    assert(tuple.size() == fields.length);
    int i=0;
    for (    RexLiteral literal : tuple) {
      RelDataType fieldType=fields[i++].getType();
      if (!RexLiteral.isNullLiteral(literal)) {
        assert(SqlTypeUtil.canAssignFrom(fieldType,literal.getType()));
      }
    }
  }
  return true;
}","/** 
 * @return true if all tuples match rowType; otherwise, assert on mismatch
 */
private boolean assertRowType(){
}",0.3722397476340694
111913,"private void adjustTextSize(){
  if (!_initiallized)   return;
  final int startSize=(int)_minTextSize;
  final int heightLimit=getMeasuredHeight() - getCompoundPaddingBottom() - getCompoundPaddingTop();
  _widthLimit=getMeasuredWidth() - getCompoundPaddingLeft() - getCompoundPaddingRight();
  if (_widthLimit <= 0)   return;
  _availableSpaceRect.right=_widthLimit;
  _availableSpaceRect.bottom=heightLimit;
  super.setTextSize(TypedValue.COMPLEX_UNIT_PX,efficientTextSizeSearch(startSize,(int)_maxTextSize,_sizeTester,_availableSpaceRect));
}","private void adjustTextSize(){
  post(new Runnable(){
    @Override public void run(){
      if (!_initiallized)       return;
      final int startSize=(int)_minTextSize;
      final int heightLimit=getMeasuredHeight() - getCompoundPaddingBottom() - getCompoundPaddingTop();
      _widthLimit=getMeasuredWidth() - getCompoundPaddingLeft() - getCompoundPaddingRight();
      if (_widthLimit <= 0)       return;
      _availableSpaceRect.right=_widthLimit;
      _availableSpaceRect.bottom=heightLimit;
      superSetTextSize(startSize);
    }
  }
);
}",0.7536496350364964
111914,"private void adjustTextSize(){
  if (!_initiallized)   return;
  final int startSize=(int)_minTextSize;
  final int heightLimit=getMeasuredHeight() - getCompoundPaddingBottom() - getCompoundPaddingTop();
  _widthLimit=getMeasuredWidth() - getCompoundPaddingLeft() - getCompoundPaddingRight();
  _availableSpaceRect.right=_widthLimit;
  _availableSpaceRect.bottom=heightLimit;
  super.setTextSize(TypedValue.COMPLEX_UNIT_PX,efficientTextSizeSearch(startSize,(int)_maxTextSize,_sizeTester,_availableSpaceRect));
}","private void adjustTextSize(){
  if (!_initiallized)   return;
  final int startSize=(int)_minTextSize;
  final int heightLimit=getMeasuredHeight() - getCompoundPaddingBottom() - getCompoundPaddingTop();
  _widthLimit=getMeasuredWidth() - getCompoundPaddingLeft() - getCompoundPaddingRight();
  if (_widthLimit <= 0)   return;
  _availableSpaceRect.right=_widthLimit;
  _availableSpaceRect.bottom=heightLimit;
  super.setTextSize(TypedValue.COMPLEX_UNIT_PX,efficientTextSizeSearch(startSize,(int)_maxTextSize,_sizeTester,_availableSpaceRect));
}",0.9678030303030304
111915,"public void dismiss(){
  if (mDismissed) {
    return;
  }
  mDismissed=true;
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  ft.remove(this);
  ft.commit();
}","public void dismiss(){
  if (mDismissed) {
    return;
  }
  mDismissed=true;
  getFragmentManager().popBackStack();
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  ft.remove(this);
  ft.commit();
}",0.9017632241813602
111916,"private void startExitAnimation(){
  Util.animateAlpha(mBgView,0f,mAnimDuration,null);
  Util.animateAlpha(mBlurImgView,0f,mAnimDuration,new Runnable(){
    @Override public void run(){
      mRoot.removeView(mBgView);
      mRoot.removeView(mBlurImgView);
    }
  }
);
}","private void startExitAnimation(){
  Util.animateAlpha(mBgView,1f,0f,mAnimDuration,null);
  Util.animateAlpha(mBlurImgView,1f,0f,mAnimDuration,new Runnable(){
    @Override public void run(){
      mRoot.removeView(mBlurImgView);
      mRoot.removeView(mBgView);
    }
  }
);
}",0.9708029197080292
111917,"@Override public void run(){
  mRoot.removeView(mBgView);
  mRoot.removeView(mBlurImgView);
}","@Override public void run(){
  mRoot.removeView(mBlurImgView);
  mRoot.removeView(mBgView);
}",0.946236559139785
111918,"private void startEnterAnimation(){
  Util.animateAlpha(mBgView,1f,mAnimDuration,null);
  Util.animateAlpha(mBlurImgView,1f,mAnimDuration,null);
}","private void startEnterAnimation(){
  Util.animateAlpha(mBgView,0f,1f,mAnimDuration,null);
  Util.animateAlpha(mBlurImgView,0f,1f,mAnimDuration,null);
}",0.9798657718120806
111919,"@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1) public static void animateAlpha(View view,float toAlpha,int duration,final Runnable endAction){
  if (isPostHoneycomb()) {
    ViewPropertyAnimator animator=view.animate().alpha(toAlpha).setDuration(duration);
    if (endAction != null) {
      animator.setListener(new AnimatorListenerAdapter(){
        public void onAnimationEnd(        Animator animation){
          endAction.run();
        }
      }
);
    }
  }
 else {
    AlphaAnimation alphaAnimation=new AlphaAnimation(0f,toAlpha);
    alphaAnimation.setDuration(duration);
    alphaAnimation.setFillAfter(true);
    if (endAction != null) {
      alphaAnimation.setAnimationListener(new Animation.AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          endAction.run();
        }
        @Override public void onAnimationStart(        Animation animation){
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
      }
);
    }
    view.startAnimation(alphaAnimation);
  }
}","@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1) public static void animateAlpha(final View view,float fromAlpha,float toAlpha,int duration,final Runnable endAction){
  if (isPostHoneycomb()) {
    ViewPropertyAnimator animator=view.animate().alpha(toAlpha).setDuration(duration);
    if (endAction != null) {
      animator.setListener(new AnimatorListenerAdapter(){
        public void onAnimationEnd(        Animator animation){
          endAction.run();
        }
      }
);
    }
  }
 else {
    AlphaAnimation alphaAnimation=new AlphaAnimation(fromAlpha,toAlpha);
    alphaAnimation.setDuration(duration);
    alphaAnimation.setFillAfter(true);
    if (endAction != null) {
      alphaAnimation.setAnimationListener(new Animation.AnimationListener(){
        @Override public void onAnimationEnd(        Animation animation){
          Handler handler=new Handler();
          handler.post(endAction);
        }
        @Override public void onAnimationStart(        Animation animation){
        }
        @Override public void onAnimationRepeat(        Animation animation){
        }
      }
);
    }
    view.startAnimation(alphaAnimation);
  }
}",0.9417040358744396
111920,"@Override public void onAnimationEnd(Animation animation){
  endAction.run();
}","@Override public void onAnimationEnd(Animation animation){
  Handler handler=new Handler();
  handler.post(endAction);
}",0.7437185929648241
111921,"@Override public void onDrawerOpened(View drawerView){
  super.onDrawerOpened(drawerView);
  if (!isAdded()) {
    return;
  }
  if (!mUserLearnedDrawer) {
    mUserLearnedDrawer=true;
    SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
    sp.edit().putBoolean(PREF_USER_LEARNED_DRAWER,true).apply();
  }
  getActivity().supportInvalidateOptionsMenu();
}","@Override public void onDrawerOpened(View drawerView){
  super.onDrawerOpened(drawerView);
  if (!isAdded()) {
    return;
  }
  if (!mUserLearnedDrawer) {
    mUserLearnedDrawer=true;
    SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
    sp.edit().putBoolean(PREF_USER_LEARNED_DRAWER,true).commit();
  }
  getActivity().supportInvalidateOptionsMenu();
}",0.8450704225352113
111922,"/** 
 * Users of this fragment must call this method to set up the navigation drawer interactions.
 * @param fragmentId   The android:id of this fragment in its activity's layout.
 * @param drawerLayout The DrawerLayout containing this fragment's UI.
 */
public void setUp(int fragmentId,DrawerLayout drawerLayout){
  mFragmentContainerView=getActivity().findViewById(fragmentId);
  mDrawerLayout=drawerLayout;
  mDrawerLayout.setScrimColor(getResources().getColor(R.color.bg_glass));
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  actionBar.setHomeButtonEnabled(true);
  mDrawerToggle=new EtsyActionBarDrawerToggle(getActivity(),mDrawerLayout,R.drawable.ic_drawer,R.string.navigation_drawer_open,R.string.navigation_drawer_close){
    @Override public void onDrawerClosed(    View drawerView){
      super.onDrawerClosed(drawerView);
      if (!isAdded()) {
        return;
      }
      getActivity().supportInvalidateOptionsMenu();
    }
    @Override public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      if (!isAdded()) {
        return;
      }
      if (!mUserLearnedDrawer) {
        mUserLearnedDrawer=true;
        SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
        sp.edit().putBoolean(PREF_USER_LEARNED_DRAWER,true).apply();
      }
      getActivity().supportInvalidateOptionsMenu();
    }
  }
;
  if (!mUserLearnedDrawer && !mFromSavedInstanceState) {
    mDrawerLayout.openDrawer(mFragmentContainerView);
  }
  mDrawerLayout.post(new Runnable(){
    @Override public void run(){
      mDrawerToggle.syncState();
    }
  }
);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
}","/** 
 * Users of this fragment must call this method to set up the navigation drawer interactions.
 * @param fragmentId   The android:id of this fragment in its activity's layout.
 * @param drawerLayout The DrawerLayout containing this fragment's UI.
 */
public void setUp(int fragmentId,DrawerLayout drawerLayout){
  mFragmentContainerView=getActivity().findViewById(fragmentId);
  mDrawerLayout=drawerLayout;
  mDrawerLayout.setScrimColor(getResources().getColor(R.color.bg_glass));
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  actionBar.setHomeButtonEnabled(true);
  mDrawerToggle=new EtsyActionBarDrawerToggle(getActivity(),mDrawerLayout,R.drawable.ic_drawer,R.string.navigation_drawer_open,R.string.navigation_drawer_close){
    @Override public void onDrawerClosed(    View drawerView){
      super.onDrawerClosed(drawerView);
      if (!isAdded()) {
        return;
      }
      getActivity().supportInvalidateOptionsMenu();
    }
    @Override public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      if (!isAdded()) {
        return;
      }
      if (!mUserLearnedDrawer) {
        mUserLearnedDrawer=true;
        SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
        sp.edit().putBoolean(PREF_USER_LEARNED_DRAWER,true).commit();
      }
      getActivity().supportInvalidateOptionsMenu();
    }
  }
;
  if (!mUserLearnedDrawer && !mFromSavedInstanceState) {
    mDrawerLayout.openDrawer(mFragmentContainerView);
  }
  mDrawerLayout.post(new Runnable(){
    @Override public void run(){
      mDrawerToggle.syncState();
    }
  }
);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
}",0.9967845659163987
111923,"private static void addType(String t,Tokenizer st,Types.GroupBuilder builder){
  Repetition repetition=asRepetition(t,st);
  String type=st.nextToken();
  if (""String_Node_Str"".equalsIgnoreCase(type)) {
    addGroupType(t,st,repetition,builder);
  }
 else {
    addPrimitiveType(t,st,asPrimitive(type,st),repetition,builder);
  }
}","private static void addType(String t,Tokenizer st,Types.GroupBuilder builder){
  Repetition repetition=asRepetition(t,st);
  String type=st.nextToken();
  if (""String_Node_Str"".equalsIgnoreCase(type)) {
    addGroupType(st,repetition,builder);
  }
 else {
    addPrimitiveType(st,asPrimitive(type,st),repetition,builder);
  }
}",0.993920972644377
111924,"private static void addPrimitiveType(String t,Tokenizer st,PrimitiveTypeName type,Repetition r,Types.GroupBuilder<?> builder){
  PrimitiveBuilder<?> childBuilder=builder.primitive(type,r);
  if (type == PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY) {
    t=st.nextToken();
    if (!t.equalsIgnoreCase(""String_Node_Str"")) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    childBuilder.length(Integer.parseInt(st.nextToken()));
    check(st.nextToken(),""String_Node_Str"",""String_Node_Str"",st);
  }
  String name=st.nextToken();
  t=st.nextToken();
  OriginalType originalType=null;
  if (t.equalsIgnoreCase(""String_Node_Str"")) {
    originalType=OriginalType.valueOf(st.nextToken());
    childBuilder.as(originalType);
    if (OriginalType.DECIMAL == originalType) {
      t=st.nextToken();
      if (t.equalsIgnoreCase(""String_Node_Str"")) {
        childBuilder.precision(Integer.parseInt(st.nextToken()));
        t=st.nextToken();
        if (t.equalsIgnoreCase(""String_Node_Str"")) {
          childBuilder.scale(Integer.parseInt(st.nextToken()));
          t=st.nextToken();
        }
        check(t,""String_Node_Str"",""String_Node_Str"",st);
        t=st.nextToken();
      }
    }
 else {
      t=st.nextToken();
    }
    check(t,""String_Node_Str"",""String_Node_Str"",st);
    t=st.nextToken();
  }
  if (t.equals(""String_Node_Str"")) {
    childBuilder.id(Integer.parseInt(st.nextToken()));
    t=st.nextToken();
  }
  check(t,""String_Node_Str"",""String_Node_Str"",st);
  try {
    childBuilder.named(name);
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + type + ""String_Node_Str""+ name+ ""String_Node_Str""+ originalType,e);
  }
}","private static void addPrimitiveType(Tokenizer st,PrimitiveTypeName type,Repetition r,Types.GroupBuilder<?> builder){
  PrimitiveBuilder<?> childBuilder=builder.primitive(type,r);
  String t;
  if (type == PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY) {
    t=st.nextToken();
    if (!t.equalsIgnoreCase(""String_Node_Str"")) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    childBuilder.length(Integer.parseInt(st.nextToken()));
    check(st.nextToken(),""String_Node_Str"",""String_Node_Str"",st);
  }
  String name=st.nextToken();
  t=st.nextToken();
  OriginalType originalType=null;
  if (t.equalsIgnoreCase(""String_Node_Str"")) {
    originalType=OriginalType.valueOf(st.nextToken());
    childBuilder.as(originalType);
    if (OriginalType.DECIMAL == originalType) {
      t=st.nextToken();
      if (t.equalsIgnoreCase(""String_Node_Str"")) {
        childBuilder.precision(Integer.parseInt(st.nextToken()));
        t=st.nextToken();
        if (t.equalsIgnoreCase(""String_Node_Str"")) {
          childBuilder.scale(Integer.parseInt(st.nextToken()));
          t=st.nextToken();
        }
        check(t,""String_Node_Str"",""String_Node_Str"",st);
        t=st.nextToken();
      }
    }
 else {
      t=st.nextToken();
    }
    check(t,""String_Node_Str"",""String_Node_Str"",st);
    t=st.nextToken();
  }
  if (t.equals(""String_Node_Str"")) {
    childBuilder.id(Integer.parseInt(st.nextToken()));
    t=st.nextToken();
  }
  check(t,""String_Node_Str"",""String_Node_Str"",st);
  try {
    childBuilder.named(name);
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + type + ""String_Node_Str""+ name+ ""String_Node_Str""+ originalType,e);
  }
}",0.9938325991189428
111925,"private static void addGroupType(String t,Tokenizer st,Repetition r,GroupBuilder<?> builder){
  GroupBuilder<?> childBuilder=builder.group(r);
  String name=st.nextToken();
  t=st.nextToken();
  OriginalType originalType=null;
  if (t.equalsIgnoreCase(""String_Node_Str"")) {
    originalType=OriginalType.valueOf(st.nextToken());
    childBuilder.as(originalType);
    check(st.nextToken(),""String_Node_Str"",""String_Node_Str"",st);
    t=st.nextToken();
  }
  if (t.equals(""String_Node_Str"")) {
    childBuilder.id(Integer.parseInt(st.nextToken()));
    t=st.nextToken();
  }
  try {
    addGroupTypeFields(t,st,childBuilder);
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str""+ originalType,e);
  }
  childBuilder.named(name);
}","private static void addGroupType(Tokenizer st,Repetition r,GroupBuilder<?> builder){
  GroupBuilder<?> childBuilder=builder.group(r);
  String t;
  String name=st.nextToken();
  t=st.nextToken();
  OriginalType originalType=null;
  if (t.equalsIgnoreCase(""String_Node_Str"")) {
    originalType=OriginalType.valueOf(st.nextToken());
    childBuilder.as(originalType);
    check(st.nextToken(),""String_Node_Str"",""String_Node_Str"",st);
    t=st.nextToken();
  }
  if (t.equals(""String_Node_Str"")) {
    childBuilder.id(Integer.parseInt(st.nextToken()));
    t=st.nextToken();
  }
  try {
    addGroupTypeFields(t,st,childBuilder);
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str""+ originalType,e);
  }
  childBuilder.named(name);
}",0.9869646182495344
111926,"static OriginalType getOriginalType(ConvertedType type){
switch (type) {
case UTF8:
    return OriginalType.UTF8;
case MAP:
  return OriginalType.MAP;
case MAP_KEY_VALUE:
return OriginalType.MAP_KEY_VALUE;
case LIST:
return OriginalType.LIST;
case ENUM:
return OriginalType.ENUM;
case DECIMAL:
return OriginalType.DECIMAL;
case DATE:
return OriginalType.DATE;
case TIME_MILLIS:
return OriginalType.TIME_MILLIS;
case TIMESTAMP_MILLIS:
return OriginalType.TIMESTAMP_MILLIS;
case INTERVAL:
return OriginalType.INTERVAL;
case INT_8:
return OriginalType.INT_8;
case INT_16:
return OriginalType.INT_16;
case INT_32:
return OriginalType.INT_32;
case INT_64:
return OriginalType.INT_64;
case UINT_8:
return OriginalType.UINT_8;
case UINT_16:
return OriginalType.UINT_16;
case UINT_32:
return OriginalType.UINT_32;
case UINT_64:
return OriginalType.UINT_64;
case JSON:
return OriginalType.JSON;
case BSON:
return OriginalType.BSON;
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
}","OriginalType getOriginalType(ConvertedType type){
switch (type) {
case UTF8:
    return OriginalType.UTF8;
case MAP:
  return OriginalType.MAP;
case MAP_KEY_VALUE:
return OriginalType.MAP_KEY_VALUE;
case LIST:
return OriginalType.LIST;
case ENUM:
return OriginalType.ENUM;
case DECIMAL:
return OriginalType.DECIMAL;
case DATE:
return OriginalType.DATE;
case TIME_MILLIS:
return OriginalType.TIME_MILLIS;
case TIMESTAMP_MILLIS:
return OriginalType.TIMESTAMP_MILLIS;
case INTERVAL:
return OriginalType.INTERVAL;
case INT_8:
return OriginalType.INT_8;
case INT_16:
return OriginalType.INT_16;
case INT_32:
return OriginalType.INT_32;
case INT_64:
return OriginalType.INT_64;
case UINT_8:
return OriginalType.UINT_8;
case UINT_16:
return OriginalType.UINT_16;
case UINT_32:
return OriginalType.UINT_32;
case UINT_64:
return OriginalType.UINT_64;
case JSON:
return OriginalType.JSON;
case BSON:
return OriginalType.BSON;
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
}",0.996452103395844
111927,"public static void writeDataPageV2Header(int uncompressedSize,int compressedSize,int valueCount,int nullCount,int rowCount,org.apache.parquet.column.statistics.Statistics statistics,org.apache.parquet.column.Encoding dataEncoding,int rlByteLength,int dlByteLength,OutputStream to) throws IOException {
  writePageHeader(newDataPageV2Header(uncompressedSize,compressedSize,valueCount,nullCount,rowCount,statistics,dataEncoding,rlByteLength,dlByteLength),to);
}","public void writeDataPageV2Header(int uncompressedSize,int compressedSize,int valueCount,int nullCount,int rowCount,org.apache.parquet.column.statistics.Statistics statistics,org.apache.parquet.column.Encoding dataEncoding,int rlByteLength,int dlByteLength,OutputStream to) throws IOException {
  writePageHeader(newDataPageV2Header(uncompressedSize,compressedSize,valueCount,nullCount,rowCount,statistics,dataEncoding,rlByteLength,dlByteLength),to);
}",0.9923161361141604
111928,"static MessageType fromParquetSchema(List<SchemaElement> schema){
  Iterator<SchemaElement> iterator=schema.iterator();
  SchemaElement root=iterator.next();
  Types.MessageTypeBuilder builder=Types.buildMessage();
  buildChildren(builder,iterator,root.getNum_children());
  return builder.named(root.name);
}","MessageType fromParquetSchema(List<SchemaElement> schema){
  Iterator<SchemaElement> iterator=schema.iterator();
  SchemaElement root=iterator.next();
  Types.MessageTypeBuilder builder=Types.buildMessage();
  buildChildren(builder,iterator,root.getNum_children());
  return builder.named(root.name);
}",0.9885433715220948
111929,"public static void writeDictionaryPageHeader(int uncompressedSize,int compressedSize,int valueCount,org.apache.parquet.column.Encoding valuesEncoding,OutputStream to) throws IOException {
  PageHeader pageHeader=new PageHeader(PageType.DICTIONARY_PAGE,uncompressedSize,compressedSize);
  pageHeader.setDictionary_page_header(new DictionaryPageHeader(valueCount,getEncoding(valuesEncoding)));
  writePageHeader(pageHeader,to);
}","public void writeDictionaryPageHeader(int uncompressedSize,int compressedSize,int valueCount,org.apache.parquet.column.Encoding valuesEncoding,OutputStream to) throws IOException {
  PageHeader pageHeader=new PageHeader(PageType.DICTIONARY_PAGE,uncompressedSize,compressedSize);
  pageHeader.setDictionary_page_header(new DictionaryPageHeader(valueCount,getEncoding(valuesEncoding)));
  writePageHeader(pageHeader,to);
}",0.9917355371900828
111930,"private static PageHeader newDataPageV2Header(int uncompressedSize,int compressedSize,int valueCount,int nullCount,int rowCount,org.apache.parquet.column.statistics.Statistics<?> statistics,org.apache.parquet.column.Encoding dataEncoding,int rlByteLength,int dlByteLength){
  DataPageHeaderV2 dataPageHeaderV2=new DataPageHeaderV2(valueCount,nullCount,rowCount,getEncoding(dataEncoding),dlByteLength,rlByteLength);
  if (!statistics.isEmpty()) {
    dataPageHeaderV2.setStatistics(toParquetStatistics(statistics));
  }
  PageHeader pageHeader=new PageHeader(PageType.DATA_PAGE_V2,uncompressedSize,compressedSize);
  pageHeader.setData_page_header_v2(dataPageHeaderV2);
  return pageHeader;
}","private PageHeader newDataPageV2Header(int uncompressedSize,int compressedSize,int valueCount,int nullCount,int rowCount,org.apache.parquet.column.statistics.Statistics<?> statistics,org.apache.parquet.column.Encoding dataEncoding,int rlByteLength,int dlByteLength){
  DataPageHeaderV2 dataPageHeaderV2=new DataPageHeaderV2(valueCount,nullCount,rowCount,getEncoding(dataEncoding),dlByteLength,rlByteLength);
  if (!statistics.isEmpty()) {
    dataPageHeaderV2.setStatistics(toParquetStatistics(statistics));
  }
  PageHeader pageHeader=new PageHeader(PageType.DATA_PAGE_V2,uncompressedSize,compressedSize);
  pageHeader.setData_page_header_v2(dataPageHeaderV2);
  return pageHeader;
}",0.9949090909090909
111931,"private static void addToList(final List<SchemaElement> result,org.apache.parquet.schema.Type field){
  field.accept(new TypeVisitor(){
    @Override public void visit(    PrimitiveType primitiveType){
      SchemaElement element=new SchemaElement(primitiveType.getName());
      element.setRepetition_type(toParquetRepetition(primitiveType.getRepetition()));
      element.setType(getType(primitiveType.getPrimitiveTypeName()));
      if (primitiveType.getOriginalType() != null) {
        element.setConverted_type(getConvertedType(primitiveType.getOriginalType()));
      }
      if (primitiveType.getDecimalMetadata() != null) {
        element.setPrecision(primitiveType.getDecimalMetadata().getPrecision());
        element.setScale(primitiveType.getDecimalMetadata().getScale());
      }
      if (primitiveType.getTypeLength() > 0) {
        element.setType_length(primitiveType.getTypeLength());
      }
      result.add(element);
    }
    @Override public void visit(    MessageType messageType){
      SchemaElement element=new SchemaElement(messageType.getName());
      visitChildren(result,messageType.asGroupType(),element);
    }
    @Override public void visit(    GroupType groupType){
      SchemaElement element=new SchemaElement(groupType.getName());
      element.setRepetition_type(toParquetRepetition(groupType.getRepetition()));
      if (groupType.getOriginalType() != null) {
        element.setConverted_type(getConvertedType(groupType.getOriginalType()));
      }
      visitChildren(result,groupType,element);
    }
    private void visitChildren(    final List<SchemaElement> result,    GroupType groupType,    SchemaElement element){
      element.setNum_children(groupType.getFieldCount());
      result.add(element);
      for (      org.apache.parquet.schema.Type field : groupType.getFields()) {
        addToList(result,field);
      }
    }
  }
);
}","private void addToList(final List<SchemaElement> result,org.apache.parquet.schema.Type field){
  field.accept(new TypeVisitor(){
    @Override public void visit(    PrimitiveType primitiveType){
      SchemaElement element=new SchemaElement(primitiveType.getName());
      element.setRepetition_type(toParquetRepetition(primitiveType.getRepetition()));
      element.setType(getType(primitiveType.getPrimitiveTypeName()));
      if (primitiveType.getOriginalType() != null) {
        element.setConverted_type(getConvertedType(primitiveType.getOriginalType()));
      }
      if (primitiveType.getDecimalMetadata() != null) {
        element.setPrecision(primitiveType.getDecimalMetadata().getPrecision());
        element.setScale(primitiveType.getDecimalMetadata().getScale());
      }
      if (primitiveType.getTypeLength() > 0) {
        element.setType_length(primitiveType.getTypeLength());
      }
      result.add(element);
    }
    @Override public void visit(    MessageType messageType){
      SchemaElement element=new SchemaElement(messageType.getName());
      visitChildren(result,messageType.asGroupType(),element);
    }
    @Override public void visit(    GroupType groupType){
      SchemaElement element=new SchemaElement(groupType.getName());
      element.setRepetition_type(toParquetRepetition(groupType.getRepetition()));
      if (groupType.getOriginalType() != null) {
        element.setConverted_type(getConvertedType(groupType.getOriginalType()));
      }
      visitChildren(result,groupType,element);
    }
    private void visitChildren(    final List<SchemaElement> result,    GroupType groupType,    SchemaElement element){
      element.setNum_children(groupType.getFieldCount());
      result.add(element);
      for (      org.apache.parquet.schema.Type field : groupType.getFields()) {
        addToList(result,field);
      }
    }
  }
);
}",0.9981427434332716
111932,"public static Encoding getEncoding(org.apache.parquet.column.Encoding encoding){
  return Encoding.valueOf(encoding.name());
}","public Encoding getEncoding(org.apache.parquet.column.Encoding encoding){
  return Encoding.valueOf(encoding.name());
}",0.9714285714285714
111933,"public static FileMetaData toParquetMetadata(int currentVersion,ParquetMetadata parquetMetadata){
  List<BlockMetaData> blocks=parquetMetadata.getBlocks();
  List<RowGroup> rowGroups=new ArrayList<RowGroup>();
  int numRows=0;
  for (  BlockMetaData block : blocks) {
    numRows+=block.getRowCount();
    addRowGroup(parquetMetadata,rowGroups,block);
  }
  FileMetaData fileMetaData=new FileMetaData(currentVersion,toParquetSchema(parquetMetadata.getFileMetaData().getSchema()),numRows,rowGroups);
  Set<Entry<String,String>> keyValues=parquetMetadata.getFileMetaData().getKeyValueMetaData().entrySet();
  for (  Entry<String,String> keyValue : keyValues) {
    addKeyValue(fileMetaData,keyValue.getKey(),keyValue.getValue());
  }
  fileMetaData.setCreated_by(parquetMetadata.getFileMetaData().getCreatedBy());
  return fileMetaData;
}","public FileMetaData toParquetMetadata(int currentVersion,ParquetMetadata parquetMetadata){
  List<BlockMetaData> blocks=parquetMetadata.getBlocks();
  List<RowGroup> rowGroups=new ArrayList<RowGroup>();
  int numRows=0;
  for (  BlockMetaData block : blocks) {
    numRows+=block.getRowCount();
    addRowGroup(parquetMetadata,rowGroups,block);
  }
  FileMetaData fileMetaData=new FileMetaData(currentVersion,toParquetSchema(parquetMetadata.getFileMetaData().getSchema()),numRows,rowGroups);
  Set<Entry<String,String>> keyValues=parquetMetadata.getFileMetaData().getKeyValueMetaData().entrySet();
  for (  Entry<String,String> keyValue : keyValues) {
    addKeyValue(fileMetaData,keyValue.getKey(),keyValue.getValue());
  }
  fileMetaData.setCreated_by(parquetMetadata.getFileMetaData().getCreatedBy());
  return fileMetaData;
}",0.9957957957957958
111934,"static FieldRepetitionType toParquetRepetition(Repetition repetition){
  return FieldRepetitionType.valueOf(repetition.name());
}","FieldRepetitionType toParquetRepetition(Repetition repetition){
  return FieldRepetitionType.valueOf(repetition.name());
}",0.9721115537848606
111935,"public static void writeDataPageHeader(int uncompressedSize,int compressedSize,int valueCount,org.apache.parquet.column.statistics.Statistics statistics,org.apache.parquet.column.Encoding rlEncoding,org.apache.parquet.column.Encoding dlEncoding,org.apache.parquet.column.Encoding valuesEncoding,OutputStream to) throws IOException {
  writePageHeader(newDataPageHeader(uncompressedSize,compressedSize,valueCount,statistics,rlEncoding,dlEncoding,valuesEncoding),to);
}","public void writeDataPageHeader(int uncompressedSize,int compressedSize,int valueCount,org.apache.parquet.column.statistics.Statistics statistics,org.apache.parquet.column.Encoding rlEncoding,org.apache.parquet.column.Encoding dlEncoding,org.apache.parquet.column.Encoding valuesEncoding,OutputStream to) throws IOException {
  writePageHeader(newDataPageHeader(uncompressedSize,compressedSize,valueCount,statistics,rlEncoding,dlEncoding,valuesEncoding),to);
}",0.9924487594390508
111936,"public static PrimitiveTypeName getPrimitive(Type type){
switch (type) {
case BYTE_ARRAY:
    return PrimitiveTypeName.BINARY;
case INT64:
  return PrimitiveTypeName.INT64;
case INT32:
return PrimitiveTypeName.INT32;
case BOOLEAN:
return PrimitiveTypeName.BOOLEAN;
case FLOAT:
return PrimitiveTypeName.FLOAT;
case DOUBLE:
return PrimitiveTypeName.DOUBLE;
case INT96:
return PrimitiveTypeName.INT96;
case FIXED_LEN_BYTE_ARRAY:
return PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY;
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
}","public PrimitiveTypeName getPrimitive(Type type){
switch (type) {
case BYTE_ARRAY:
    return PrimitiveTypeName.BINARY;
case INT64:
  return PrimitiveTypeName.INT64;
case INT32:
return PrimitiveTypeName.INT32;
case BOOLEAN:
return PrimitiveTypeName.BOOLEAN;
case FLOAT:
return PrimitiveTypeName.FLOAT;
case DOUBLE:
return PrimitiveTypeName.DOUBLE;
case INT96:
return PrimitiveTypeName.INT96;
case FIXED_LEN_BYTE_ARRAY:
return PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY;
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
}",0.9934762348555451
111937,"public static ParquetMetadata readParquetMetadata(final InputStream from,MetadataFilter filter) throws IOException {
  FileMetaData fileMetaData=filter.accept(new MetadataFilterVisitor<FileMetaData,IOException>(){
    @Override public FileMetaData visit(    NoFilter filter) throws IOException {
      return readFileMetaData(from);
    }
    @Override public FileMetaData visit(    SkipMetadataFilter filter) throws IOException {
      return readFileMetaData(from,true);
    }
    @Override public FileMetaData visit(    RangeMetadataFilter filter) throws IOException {
      return filterFileMetaData(readFileMetaData(from),filter);
    }
  }
);
  if (Log.DEBUG)   LOG.debug(fileMetaData);
  ParquetMetadata parquetMetadata=fromParquetMetadata(fileMetaData);
  if (Log.DEBUG)   LOG.debug(ParquetMetadata.toPrettyJSON(parquetMetadata));
  return parquetMetadata;
}","public ParquetMetadata readParquetMetadata(final InputStream from,MetadataFilter filter) throws IOException {
  FileMetaData fileMetaData=filter.accept(new MetadataFilterVisitor<FileMetaData,IOException>(){
    @Override public FileMetaData visit(    NoFilter filter) throws IOException {
      return readFileMetaData(from);
    }
    @Override public FileMetaData visit(    SkipMetadataFilter filter) throws IOException {
      return readFileMetaData(from,true);
    }
    @Override public FileMetaData visit(    RangeMetadataFilter filter) throws IOException {
      return filterFileMetaData(readFileMetaData(from),filter);
    }
  }
);
  if (Log.DEBUG)   LOG.debug(fileMetaData);
  ParquetMetadata parquetMetadata=fromParquetMetadata(fileMetaData);
  if (Log.DEBUG)   LOG.debug(ParquetMetadata.toPrettyJSON(parquetMetadata));
  return parquetMetadata;
}",0.9959420289855072
111938,"private static PageHeader newDataPageHeader(int uncompressedSize,int compressedSize,int valueCount,org.apache.parquet.column.statistics.Statistics statistics,org.apache.parquet.column.Encoding rlEncoding,org.apache.parquet.column.Encoding dlEncoding,org.apache.parquet.column.Encoding valuesEncoding){
  PageHeader pageHeader=new PageHeader(PageType.DATA_PAGE,uncompressedSize,compressedSize);
  pageHeader.setData_page_header(new DataPageHeader(valueCount,getEncoding(valuesEncoding),getEncoding(dlEncoding),getEncoding(rlEncoding)));
  if (!statistics.isEmpty()) {
    pageHeader.getData_page_header().setStatistics(toParquetStatistics(statistics));
  }
  return pageHeader;
}","private PageHeader newDataPageHeader(int uncompressedSize,int compressedSize,int valueCount,org.apache.parquet.column.statistics.Statistics statistics,org.apache.parquet.column.Encoding rlEncoding,org.apache.parquet.column.Encoding dlEncoding,org.apache.parquet.column.Encoding valuesEncoding){
  PageHeader pageHeader=new PageHeader(PageType.DATA_PAGE,uncompressedSize,compressedSize);
  pageHeader.setData_page_header(new DataPageHeader(valueCount,getEncoding(valuesEncoding),getEncoding(dlEncoding),getEncoding(rlEncoding)));
  if (!statistics.isEmpty()) {
    pageHeader.getData_page_header().setStatistics(toParquetStatistics(statistics));
  }
  return pageHeader;
}",0.994810971089696
111939,"static Repetition fromParquetRepetition(FieldRepetitionType repetition){
  return Repetition.valueOf(repetition.name());
}","Repetition fromParquetRepetition(FieldRepetitionType repetition){
  return Repetition.valueOf(repetition.name());
}",0.9704641350210972
111940,"static List<SchemaElement> toParquetSchema(MessageType schema){
  List<SchemaElement> result=new ArrayList<SchemaElement>();
  addToList(result,schema);
  return result;
}","List<SchemaElement> toParquetSchema(MessageType schema){
  List<SchemaElement> result=new ArrayList<SchemaElement>();
  addToList(result,schema);
  return result;
}",0.9791044776119404
111941,"private static List<Encoding> toFormatEncodings(Set<org.apache.parquet.column.Encoding> encodings){
  List<Encoding> converted=new ArrayList<Encoding>(encodings.size());
  for (  org.apache.parquet.column.Encoding encoding : encodings) {
    converted.add(getEncoding(encoding));
  }
  return converted;
}","private List<Encoding> toFormatEncodings(Set<org.apache.parquet.column.Encoding> encodings){
  List<Encoding> converted=new ArrayList<Encoding>(encodings.size());
  for (  org.apache.parquet.column.Encoding encoding : encodings) {
    converted.add(getEncoding(encoding));
  }
  return converted;
}",0.988391376451078
111942,"private static void buildChildren(Types.GroupBuilder builder,Iterator<SchemaElement> schema,int childrenCount){
  for (int i=0; i < childrenCount; i++) {
    SchemaElement schemaElement=schema.next();
    Types.Builder childBuilder;
    if (schemaElement.type != null) {
      Types.PrimitiveBuilder primitiveBuilder=builder.primitive(getPrimitive(schemaElement.type),fromParquetRepetition(schemaElement.repetition_type));
      if (schemaElement.isSetType_length()) {
        primitiveBuilder.length(schemaElement.type_length);
      }
      if (schemaElement.isSetPrecision()) {
        primitiveBuilder.precision(schemaElement.precision);
      }
      if (schemaElement.isSetScale()) {
        primitiveBuilder.scale(schemaElement.scale);
      }
      childBuilder=primitiveBuilder;
    }
 else {
      childBuilder=builder.group(fromParquetRepetition(schemaElement.repetition_type));
      buildChildren((Types.GroupBuilder)childBuilder,schema,schemaElement.num_children);
    }
    if (schemaElement.isSetConverted_type()) {
      childBuilder.as(getOriginalType(schemaElement.converted_type));
    }
    if (schemaElement.isSetField_id()) {
      childBuilder.id(schemaElement.field_id);
    }
    childBuilder.named(schemaElement.name);
  }
}","private void buildChildren(Types.GroupBuilder builder,Iterator<SchemaElement> schema,int childrenCount){
  for (int i=0; i < childrenCount; i++) {
    SchemaElement schemaElement=schema.next();
    Types.Builder childBuilder;
    if (schemaElement.type != null) {
      Types.PrimitiveBuilder primitiveBuilder=builder.primitive(getPrimitive(schemaElement.type),fromParquetRepetition(schemaElement.repetition_type));
      if (schemaElement.isSetType_length()) {
        primitiveBuilder.length(schemaElement.type_length);
      }
      if (schemaElement.isSetPrecision()) {
        primitiveBuilder.precision(schemaElement.precision);
      }
      if (schemaElement.isSetScale()) {
        primitiveBuilder.scale(schemaElement.scale);
      }
      childBuilder=primitiveBuilder;
    }
 else {
      childBuilder=builder.group(fromParquetRepetition(schemaElement.repetition_type));
      buildChildren((Types.GroupBuilder)childBuilder,schema,schemaElement.num_children);
    }
    if (schemaElement.isSetConverted_type()) {
      childBuilder.as(getOriginalType(schemaElement.converted_type));
    }
    if (schemaElement.isSetField_id()) {
      childBuilder.id(schemaElement.field_id);
    }
    childBuilder.named(schemaElement.name);
  }
}",0.9971943887775552
111943,"private static void addRowGroup(ParquetMetadata parquetMetadata,List<RowGroup> rowGroups,BlockMetaData block){
  List<ColumnChunkMetaData> columns=block.getColumns();
  List<ColumnChunk> parquetColumns=new ArrayList<ColumnChunk>();
  for (  ColumnChunkMetaData columnMetaData : columns) {
    ColumnChunk columnChunk=new ColumnChunk(columnMetaData.getFirstDataPageOffset());
    columnChunk.file_path=block.getPath();
    columnChunk.meta_data=new ColumnMetaData(getType(columnMetaData.getType()),toFormatEncodings(columnMetaData.getEncodings()),Arrays.asList(columnMetaData.getPath().toArray()),columnMetaData.getCodec().getParquetCompressionCodec(),columnMetaData.getValueCount(),columnMetaData.getTotalUncompressedSize(),columnMetaData.getTotalSize(),columnMetaData.getFirstDataPageOffset());
    columnChunk.meta_data.dictionary_page_offset=columnMetaData.getDictionaryPageOffset();
    if (!columnMetaData.getStatistics().isEmpty()) {
      columnChunk.meta_data.setStatistics(toParquetStatistics(columnMetaData.getStatistics()));
    }
    parquetColumns.add(columnChunk);
  }
  RowGroup rowGroup=new RowGroup(parquetColumns,block.getTotalByteSize(),block.getRowCount());
  rowGroups.add(rowGroup);
}","private void addRowGroup(ParquetMetadata parquetMetadata,List<RowGroup> rowGroups,BlockMetaData block){
  List<ColumnChunkMetaData> columns=block.getColumns();
  List<ColumnChunk> parquetColumns=new ArrayList<ColumnChunk>();
  for (  ColumnChunkMetaData columnMetaData : columns) {
    ColumnChunk columnChunk=new ColumnChunk(columnMetaData.getFirstDataPageOffset());
    columnChunk.file_path=block.getPath();
    columnChunk.meta_data=new ColumnMetaData(getType(columnMetaData.getType()),toFormatEncodings(columnMetaData.getEncodings()),Arrays.asList(columnMetaData.getPath().toArray()),columnMetaData.getCodec().getParquetCompressionCodec(),columnMetaData.getValueCount(),columnMetaData.getTotalUncompressedSize(),columnMetaData.getTotalSize(),columnMetaData.getFirstDataPageOffset());
    columnChunk.meta_data.dictionary_page_offset=columnMetaData.getDictionaryPageOffset();
    if (!columnMetaData.getStatistics().isEmpty()) {
      columnChunk.meta_data.setStatistics(toParquetStatistics(columnMetaData.getStatistics()));
    }
    parquetColumns.add(columnChunk);
  }
  RowGroup rowGroup=new RowGroup(parquetColumns,block.getTotalByteSize(),block.getRowCount());
  rowGroups.add(rowGroup);
}",0.9970893970893971
111944,"static Type getType(PrimitiveTypeName type){
switch (type) {
case INT64:
    return Type.INT64;
case INT32:
  return Type.INT32;
case BOOLEAN:
return Type.BOOLEAN;
case BINARY:
return Type.BYTE_ARRAY;
case FLOAT:
return Type.FLOAT;
case DOUBLE:
return Type.DOUBLE;
case INT96:
return Type.INT96;
case FIXED_LEN_BYTE_ARRAY:
return Type.FIXED_LEN_BYTE_ARRAY;
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
}","Type getType(PrimitiveTypeName type){
switch (type) {
case INT64:
    return Type.INT64;
case INT32:
  return Type.INT32;
case BOOLEAN:
return Type.BOOLEAN;
case BINARY:
return Type.BYTE_ARRAY;
case FLOAT:
return Type.FLOAT;
case DOUBLE:
return Type.DOUBLE;
case INT96:
return Type.INT96;
case FIXED_LEN_BYTE_ARRAY:
return Type.FIXED_LEN_BYTE_ARRAY;
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
}",0.9916765755053508
111945,"static Set<org.apache.parquet.column.Encoding> fromFormatEncodings(List<Encoding> encodings){
  Set<org.apache.parquet.column.Encoding> converted=new HashSet<org.apache.parquet.column.Encoding>();
  for (  Encoding encoding : encodings) {
    converted.add(getEncoding(encoding));
  }
  converted=Collections.unmodifiableSet(converted);
  Set<org.apache.parquet.column.Encoding> cached=cachedEncodingSets.putIfAbsent(converted,converted);
  if (cached == null) {
    cached=converted;
  }
  return cached;
}","Set<org.apache.parquet.column.Encoding> fromFormatEncodings(List<Encoding> encodings){
  Set<org.apache.parquet.column.Encoding> converted=new HashSet<org.apache.parquet.column.Encoding>();
  for (  Encoding encoding : encodings) {
    converted.add(getEncoding(encoding));
  }
  converted=Collections.unmodifiableSet(converted);
  Set<org.apache.parquet.column.Encoding> cached=cachedEncodingSets.putIfAbsent(converted,converted);
  if (cached == null) {
    cached=converted;
  }
  return cached;
}",0.99304865938431
111946,"static ConvertedType getConvertedType(OriginalType type){
switch (type) {
case UTF8:
    return ConvertedType.UTF8;
case MAP:
  return ConvertedType.MAP;
case MAP_KEY_VALUE:
return ConvertedType.MAP_KEY_VALUE;
case LIST:
return ConvertedType.LIST;
case ENUM:
return ConvertedType.ENUM;
case DECIMAL:
return ConvertedType.DECIMAL;
case DATE:
return ConvertedType.DATE;
case TIME_MILLIS:
return ConvertedType.TIME_MILLIS;
case TIMESTAMP_MILLIS:
return ConvertedType.TIMESTAMP_MILLIS;
case INTERVAL:
return ConvertedType.INTERVAL;
case INT_8:
return ConvertedType.INT_8;
case INT_16:
return ConvertedType.INT_16;
case INT_32:
return ConvertedType.INT_32;
case INT_64:
return ConvertedType.INT_64;
case UINT_8:
return ConvertedType.UINT_8;
case UINT_16:
return ConvertedType.UINT_16;
case UINT_32:
return ConvertedType.UINT_32;
case UINT_64:
return ConvertedType.UINT_64;
case JSON:
return ConvertedType.JSON;
case BSON:
return ConvertedType.BSON;
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
}","ConvertedType getConvertedType(OriginalType type){
switch (type) {
case UTF8:
    return ConvertedType.UTF8;
case MAP:
  return ConvertedType.MAP;
case MAP_KEY_VALUE:
return ConvertedType.MAP_KEY_VALUE;
case LIST:
return ConvertedType.LIST;
case ENUM:
return ConvertedType.ENUM;
case DECIMAL:
return ConvertedType.DECIMAL;
case DATE:
return ConvertedType.DATE;
case TIME_MILLIS:
return ConvertedType.TIME_MILLIS;
case TIMESTAMP_MILLIS:
return ConvertedType.TIMESTAMP_MILLIS;
case INTERVAL:
return ConvertedType.INTERVAL;
case INT_8:
return ConvertedType.INT_8;
case INT_16:
return ConvertedType.INT_16;
case INT_32:
return ConvertedType.INT_32;
case INT_64:
return ConvertedType.INT_64;
case UINT_8:
return ConvertedType.UINT_8;
case UINT_16:
return ConvertedType.UINT_16;
case UINT_32:
return ConvertedType.UINT_32;
case UINT_64:
return ConvertedType.UINT_64;
case JSON:
return ConvertedType.JSON;
case BSON:
return ConvertedType.BSON;
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
}",0.9965260545905708
111947,"public static ParquetMetadata fromParquetMetadata(FileMetaData parquetMetadata) throws IOException {
  MessageType messageType=fromParquetSchema(parquetMetadata.getSchema());
  List<BlockMetaData> blocks=new ArrayList<BlockMetaData>();
  List<RowGroup> row_groups=parquetMetadata.getRow_groups();
  if (row_groups != null) {
    for (    RowGroup rowGroup : row_groups) {
      BlockMetaData blockMetaData=new BlockMetaData();
      blockMetaData.setRowCount(rowGroup.getNum_rows());
      blockMetaData.setTotalByteSize(rowGroup.getTotal_byte_size());
      List<ColumnChunk> columns=rowGroup.getColumns();
      String filePath=columns.get(0).getFile_path();
      for (      ColumnChunk columnChunk : columns) {
        if ((filePath == null && columnChunk.getFile_path() != null) || (filePath != null && !filePath.equals(columnChunk.getFile_path()))) {
          throw new ParquetDecodingException(""String_Node_Str"");
        }
        ColumnMetaData metaData=columnChunk.meta_data;
        ColumnPath path=getPath(metaData);
        ColumnChunkMetaData column=ColumnChunkMetaData.get(path,messageType.getType(path.toArray()).asPrimitiveType().getPrimitiveTypeName(),CompressionCodecName.fromParquet(metaData.codec),fromFormatEncodings(metaData.encodings),fromParquetStatistics(parquetMetadata.getCreated_by(),metaData.statistics,messageType.getType(path.toArray()).asPrimitiveType().getPrimitiveTypeName()),metaData.data_page_offset,metaData.dictionary_page_offset,metaData.num_values,metaData.total_compressed_size,metaData.total_uncompressed_size);
        blockMetaData.addColumn(column);
      }
      blockMetaData.setPath(filePath);
      blocks.add(blockMetaData);
    }
  }
  Map<String,String> keyValueMetaData=new HashMap<String,String>();
  List<KeyValue> key_value_metadata=parquetMetadata.getKey_value_metadata();
  if (key_value_metadata != null) {
    for (    KeyValue keyValue : key_value_metadata) {
      keyValueMetaData.put(keyValue.key,keyValue.value);
    }
  }
  return new ParquetMetadata(new org.apache.parquet.hadoop.metadata.FileMetaData(messageType,keyValueMetaData,parquetMetadata.getCreated_by()),blocks);
}","public ParquetMetadata fromParquetMetadata(FileMetaData parquetMetadata) throws IOException {
  MessageType messageType=fromParquetSchema(parquetMetadata.getSchema());
  List<BlockMetaData> blocks=new ArrayList<BlockMetaData>();
  List<RowGroup> row_groups=parquetMetadata.getRow_groups();
  if (row_groups != null) {
    for (    RowGroup rowGroup : row_groups) {
      BlockMetaData blockMetaData=new BlockMetaData();
      blockMetaData.setRowCount(rowGroup.getNum_rows());
      blockMetaData.setTotalByteSize(rowGroup.getTotal_byte_size());
      List<ColumnChunk> columns=rowGroup.getColumns();
      String filePath=columns.get(0).getFile_path();
      for (      ColumnChunk columnChunk : columns) {
        if ((filePath == null && columnChunk.getFile_path() != null) || (filePath != null && !filePath.equals(columnChunk.getFile_path()))) {
          throw new ParquetDecodingException(""String_Node_Str"");
        }
        ColumnMetaData metaData=columnChunk.meta_data;
        ColumnPath path=getPath(metaData);
        ColumnChunkMetaData column=ColumnChunkMetaData.get(path,messageType.getType(path.toArray()).asPrimitiveType().getPrimitiveTypeName(),CompressionCodecName.fromParquet(metaData.codec),fromFormatEncodings(metaData.encodings),fromParquetStatistics(parquetMetadata.getCreated_by(),metaData.statistics,messageType.getType(path.toArray()).asPrimitiveType().getPrimitiveTypeName()),metaData.data_page_offset,metaData.dictionary_page_offset,metaData.num_values,metaData.total_compressed_size,metaData.total_uncompressed_size);
        blockMetaData.addColumn(column);
      }
      blockMetaData.setPath(filePath);
      blocks.add(blockMetaData);
    }
  }
  Map<String,String> keyValueMetaData=new HashMap<String,String>();
  List<KeyValue> key_value_metadata=parquetMetadata.getKey_value_metadata();
  if (key_value_metadata != null) {
    for (    KeyValue keyValue : key_value_metadata) {
      keyValueMetaData.put(keyValue.key,keyValue.value);
    }
  }
  return new ParquetMetadata(new org.apache.parquet.hadoop.metadata.FileMetaData(messageType,keyValueMetaData,parquetMetadata.getCreated_by()),blocks);
}",0.9983641037625614
111948,"@Override public void writePage(BytesInput bytes,int valueCount,Statistics statistics,Encoding rlEncoding,Encoding dlEncoding,Encoding valuesEncoding) throws IOException {
  long uncompressedSize=bytes.size();
  if (uncompressedSize > Integer.MAX_VALUE) {
    throw new ParquetEncodingException(""String_Node_Str"" + uncompressedSize);
  }
  BytesInput compressedBytes=compressor.compress(bytes);
  long compressedSize=compressedBytes.size();
  if (compressedSize > Integer.MAX_VALUE) {
    throw new ParquetEncodingException(""String_Node_Str"" + compressedSize);
  }
  tempOutputStream.reset();
  ParquetMetadataConverter.writeDataPageHeader((int)uncompressedSize,(int)compressedSize,valueCount,statistics,rlEncoding,dlEncoding,valuesEncoding,tempOutputStream);
  this.uncompressedLength+=uncompressedSize;
  this.compressedLength+=compressedSize;
  this.totalValueCount+=valueCount;
  this.pageCount+=1;
  this.totalStatistics.mergeStatistics(statistics);
  buf.collect(BytesInput.concat(BytesInput.from(tempOutputStream),compressedBytes));
  encodings.add(rlEncoding);
  encodings.add(dlEncoding);
  encodings.add(valuesEncoding);
}","@Override public void writePage(BytesInput bytes,int valueCount,Statistics statistics,Encoding rlEncoding,Encoding dlEncoding,Encoding valuesEncoding) throws IOException {
  long uncompressedSize=bytes.size();
  if (uncompressedSize > Integer.MAX_VALUE) {
    throw new ParquetEncodingException(""String_Node_Str"" + uncompressedSize);
  }
  BytesInput compressedBytes=compressor.compress(bytes);
  long compressedSize=compressedBytes.size();
  if (compressedSize > Integer.MAX_VALUE) {
    throw new ParquetEncodingException(""String_Node_Str"" + compressedSize);
  }
  tempOutputStream.reset();
  parquetMetadataConverter.writeDataPageHeader((int)uncompressedSize,(int)compressedSize,valueCount,statistics,rlEncoding,dlEncoding,valuesEncoding,tempOutputStream);
  this.uncompressedLength+=uncompressedSize;
  this.compressedLength+=compressedSize;
  this.totalValueCount+=valueCount;
  this.pageCount+=1;
  this.totalStatistics.mergeStatistics(statistics);
  buf.collect(BytesInput.concat(BytesInput.from(tempOutputStream),compressedBytes));
  encodings.add(rlEncoding);
  encodings.add(dlEncoding);
  encodings.add(valuesEncoding);
}",0.9991166077738516
111949,"@Override public void writePageV2(int rowCount,int nullCount,int valueCount,BytesInput repetitionLevels,BytesInput definitionLevels,Encoding dataEncoding,BytesInput data,Statistics<?> statistics) throws IOException {
  int rlByteLength=toIntWithCheck(repetitionLevels.size());
  int dlByteLength=toIntWithCheck(definitionLevels.size());
  int uncompressedSize=toIntWithCheck(data.size() + repetitionLevels.size() + definitionLevels.size());
  BytesInput compressedData=compressor.compress(data);
  int compressedSize=toIntWithCheck(compressedData.size() + repetitionLevels.size() + definitionLevels.size());
  tempOutputStream.reset();
  ParquetMetadataConverter.writeDataPageV2Header(uncompressedSize,compressedSize,valueCount,nullCount,rowCount,statistics,dataEncoding,rlByteLength,dlByteLength,tempOutputStream);
  this.uncompressedLength+=uncompressedSize;
  this.compressedLength+=compressedSize;
  this.totalValueCount+=valueCount;
  this.pageCount+=1;
  this.totalStatistics.mergeStatistics(statistics);
  buf.collect(BytesInput.concat(BytesInput.from(tempOutputStream),repetitionLevels,definitionLevels,compressedData));
  encodings.add(dataEncoding);
}","@Override public void writePageV2(int rowCount,int nullCount,int valueCount,BytesInput repetitionLevels,BytesInput definitionLevels,Encoding dataEncoding,BytesInput data,Statistics<?> statistics) throws IOException {
  int rlByteLength=toIntWithCheck(repetitionLevels.size());
  int dlByteLength=toIntWithCheck(definitionLevels.size());
  int uncompressedSize=toIntWithCheck(data.size() + repetitionLevels.size() + definitionLevels.size());
  BytesInput compressedData=compressor.compress(data);
  int compressedSize=toIntWithCheck(compressedData.size() + repetitionLevels.size() + definitionLevels.size());
  tempOutputStream.reset();
  parquetMetadataConverter.writeDataPageV2Header(uncompressedSize,compressedSize,valueCount,nullCount,rowCount,statistics,dataEncoding,rlByteLength,dlByteLength,tempOutputStream);
  this.uncompressedLength+=uncompressedSize;
  this.compressedLength+=compressedSize;
  this.totalValueCount+=valueCount;
  this.pageCount+=1;
  this.totalStatistics.mergeStatistics(statistics);
  buf.collect(BytesInput.concat(BytesInput.from(tempOutputStream),repetitionLevels,definitionLevels,compressedData));
  encodings.add(dataEncoding);
}",0.9991386735572784
111950,"/** 
 * Read all of the pages in a given column chunk.
 * @return the list of pages
 */
public ColumnChunkPageReader readAllPages() throws IOException {
  List<DataPage> pagesInChunk=new ArrayList<DataPage>();
  DictionaryPage dictionaryPage=null;
  long valuesCountReadSoFar=0;
  while (valuesCountReadSoFar < descriptor.metadata.getValueCount()) {
    PageHeader pageHeader=readPageHeader();
    int uncompressedPageSize=pageHeader.getUncompressed_page_size();
    int compressedPageSize=pageHeader.getCompressed_page_size();
switch (pageHeader.type) {
case DICTIONARY_PAGE:
      if (dictionaryPage != null) {
        throw new ParquetDecodingException(""String_Node_Str"" + descriptor.col);
      }
    DictionaryPageHeader dicHeader=pageHeader.getDictionary_page_header();
  dictionaryPage=new DictionaryPage(this.readAsBytesInput(compressedPageSize),uncompressedPageSize,dicHeader.getNum_values(),ParquetMetadataConverter.getEncoding(dicHeader.getEncoding()));
break;
case DATA_PAGE:
DataPageHeader dataHeaderV1=pageHeader.getData_page_header();
pagesInChunk.add(new DataPageV1(this.readAsBytesInput(compressedPageSize),dataHeaderV1.getNum_values(),uncompressedPageSize,fromParquetStatistics(createdBy,dataHeaderV1.getStatistics(),descriptor.col.getType()),ParquetMetadataConverter.getEncoding(dataHeaderV1.getRepetition_level_encoding()),ParquetMetadataConverter.getEncoding(dataHeaderV1.getDefinition_level_encoding()),ParquetMetadataConverter.getEncoding(dataHeaderV1.getEncoding())));
valuesCountReadSoFar+=dataHeaderV1.getNum_values();
break;
case DATA_PAGE_V2:
DataPageHeaderV2 dataHeaderV2=pageHeader.getData_page_header_v2();
int dataSize=compressedPageSize - dataHeaderV2.getRepetition_levels_byte_length() - dataHeaderV2.getDefinition_levels_byte_length();
pagesInChunk.add(new DataPageV2(dataHeaderV2.getNum_rows(),dataHeaderV2.getNum_nulls(),dataHeaderV2.getNum_values(),this.readAsBytesInput(dataHeaderV2.getRepetition_levels_byte_length()),this.readAsBytesInput(dataHeaderV2.getDefinition_levels_byte_length()),ParquetMetadataConverter.getEncoding(dataHeaderV2.getEncoding()),this.readAsBytesInput(dataSize),uncompressedPageSize,fromParquetStatistics(createdBy,dataHeaderV2.getStatistics(),descriptor.col.getType()),dataHeaderV2.isIs_compressed()));
valuesCountReadSoFar+=dataHeaderV2.getNum_values();
break;
default :
if (DEBUG) LOG.debug(""String_Node_Str"" + pageHeader.getType() + ""String_Node_Str""+ compressedPageSize);
this.skip(compressedPageSize);
break;
}
}
if (valuesCountReadSoFar != descriptor.metadata.getValueCount()) {
throw new IOException(""String_Node_Str"" + descriptor.metadata.getValueCount() + ""String_Node_Str""+ filePath+ ""String_Node_Str""+ descriptor.metadata.getFirstDataPageOffset()+ ""String_Node_Str""+ valuesCountReadSoFar+ ""String_Node_Str""+ pagesInChunk.size()+ ""String_Node_Str""+ (descriptor.fileOffset + pos()));
}
BytesDecompressor decompressor=codecFactory.getDecompressor(descriptor.metadata.getCodec());
return new ColumnChunkPageReader(decompressor,pagesInChunk,dictionaryPage);
}","/** 
 * Read all of the pages in a given column chunk.
 * @return the list of pages
 */
public ColumnChunkPageReader readAllPages() throws IOException {
  List<DataPage> pagesInChunk=new ArrayList<DataPage>();
  DictionaryPage dictionaryPage=null;
  long valuesCountReadSoFar=0;
  while (valuesCountReadSoFar < descriptor.metadata.getValueCount()) {
    PageHeader pageHeader=readPageHeader();
    int uncompressedPageSize=pageHeader.getUncompressed_page_size();
    int compressedPageSize=pageHeader.getCompressed_page_size();
switch (pageHeader.type) {
case DICTIONARY_PAGE:
      if (dictionaryPage != null) {
        throw new ParquetDecodingException(""String_Node_Str"" + descriptor.col);
      }
    DictionaryPageHeader dicHeader=pageHeader.getDictionary_page_header();
  dictionaryPage=new DictionaryPage(this.readAsBytesInput(compressedPageSize),uncompressedPageSize,dicHeader.getNum_values(),converter.getEncoding(dicHeader.getEncoding()));
break;
case DATA_PAGE:
DataPageHeader dataHeaderV1=pageHeader.getData_page_header();
pagesInChunk.add(new DataPageV1(this.readAsBytesInput(compressedPageSize),dataHeaderV1.getNum_values(),uncompressedPageSize,fromParquetStatistics(createdBy,dataHeaderV1.getStatistics(),descriptor.col.getType()),converter.getEncoding(dataHeaderV1.getRepetition_level_encoding()),converter.getEncoding(dataHeaderV1.getDefinition_level_encoding()),converter.getEncoding(dataHeaderV1.getEncoding())));
valuesCountReadSoFar+=dataHeaderV1.getNum_values();
break;
case DATA_PAGE_V2:
DataPageHeaderV2 dataHeaderV2=pageHeader.getData_page_header_v2();
int dataSize=compressedPageSize - dataHeaderV2.getRepetition_levels_byte_length() - dataHeaderV2.getDefinition_levels_byte_length();
pagesInChunk.add(new DataPageV2(dataHeaderV2.getNum_rows(),dataHeaderV2.getNum_nulls(),dataHeaderV2.getNum_values(),this.readAsBytesInput(dataHeaderV2.getRepetition_levels_byte_length()),this.readAsBytesInput(dataHeaderV2.getDefinition_levels_byte_length()),converter.getEncoding(dataHeaderV2.getEncoding()),this.readAsBytesInput(dataSize),uncompressedPageSize,fromParquetStatistics(createdBy,dataHeaderV2.getStatistics(),descriptor.col.getType()),dataHeaderV2.isIs_compressed()));
valuesCountReadSoFar+=dataHeaderV2.getNum_values();
break;
default :
if (DEBUG) LOG.debug(""String_Node_Str"" + pageHeader.getType() + ""String_Node_Str""+ compressedPageSize);
this.skip(compressedPageSize);
break;
}
}
if (valuesCountReadSoFar != descriptor.metadata.getValueCount()) {
throw new IOException(""String_Node_Str"" + descriptor.metadata.getValueCount() + ""String_Node_Str""+ filePath+ ""String_Node_Str""+ descriptor.metadata.getFirstDataPageOffset()+ ""String_Node_Str""+ valuesCountReadSoFar+ ""String_Node_Str""+ pagesInChunk.size()+ ""String_Node_Str""+ (descriptor.fileOffset + pos()));
}
BytesDecompressor decompressor=codecFactory.getDecompressor(descriptor.metadata.getCodec());
return new ColumnChunkPageReader(decompressor,pagesInChunk,dictionaryPage);
}",0.985797827903091
111951,"/** 
 * Reads the meta data block in the footer of the file
 * @param configuration
 * @param file the parquet File
 * @param filter the filter to apply to row groups
 * @return the metadata blocks in the footer
 * @throws IOException if an error occurs while reading the file
 */
public static final ParquetMetadata readFooter(Configuration configuration,FileStatus file,MetadataFilter filter) throws IOException {
  FileSystem fileSystem=file.getPath().getFileSystem(configuration);
  FSDataInputStream f=fileSystem.open(file.getPath());
  try {
    long l=file.getLen();
    if (Log.DEBUG)     LOG.debug(""String_Node_Str"" + l);
    int FOOTER_LENGTH_SIZE=4;
    if (l < MAGIC.length + FOOTER_LENGTH_SIZE + MAGIC.length) {
      throw new RuntimeException(file.getPath() + ""String_Node_Str"");
    }
    long footerLengthIndex=l - FOOTER_LENGTH_SIZE - MAGIC.length;
    if (Log.DEBUG)     LOG.debug(""String_Node_Str"" + footerLengthIndex);
    f.seek(footerLengthIndex);
    int footerLength=readIntLittleEndian(f);
    byte[] magic=new byte[MAGIC.length];
    f.readFully(magic);
    if (!Arrays.equals(MAGIC,magic)) {
      throw new RuntimeException(file.getPath() + ""String_Node_Str"" + Arrays.toString(MAGIC)+ ""String_Node_Str""+ Arrays.toString(magic));
    }
    long footerIndex=footerLengthIndex - footerLength;
    if (Log.DEBUG)     LOG.debug(""String_Node_Str"" + footerLength + ""String_Node_Str""+ footerIndex);
    if (footerIndex < MAGIC.length || footerIndex >= footerLengthIndex) {
      throw new RuntimeException(""String_Node_Str"");
    }
    f.seek(footerIndex);
    return ParquetMetadataConverter.readParquetMetadata(f,filter);
  }
  finally {
    f.close();
  }
}","/** 
 * Reads the meta data block in the footer of the file
 * @param configuration
 * @param file the parquet File
 * @param filter the filter to apply to row groups
 * @return the metadata blocks in the footer
 * @throws IOException if an error occurs while reading the file
 */
public static final ParquetMetadata readFooter(Configuration configuration,FileStatus file,MetadataFilter filter) throws IOException {
  FileSystem fileSystem=file.getPath().getFileSystem(configuration);
  FSDataInputStream f=fileSystem.open(file.getPath());
  try {
    long l=file.getLen();
    if (Log.DEBUG)     LOG.debug(""String_Node_Str"" + l);
    int FOOTER_LENGTH_SIZE=4;
    if (l < MAGIC.length + FOOTER_LENGTH_SIZE + MAGIC.length) {
      throw new RuntimeException(file.getPath() + ""String_Node_Str"");
    }
    long footerLengthIndex=l - FOOTER_LENGTH_SIZE - MAGIC.length;
    if (Log.DEBUG)     LOG.debug(""String_Node_Str"" + footerLengthIndex);
    f.seek(footerLengthIndex);
    int footerLength=readIntLittleEndian(f);
    byte[] magic=new byte[MAGIC.length];
    f.readFully(magic);
    if (!Arrays.equals(MAGIC,magic)) {
      throw new RuntimeException(file.getPath() + ""String_Node_Str"" + Arrays.toString(MAGIC)+ ""String_Node_Str""+ Arrays.toString(magic));
    }
    long footerIndex=footerLengthIndex - footerLength;
    if (Log.DEBUG)     LOG.debug(""String_Node_Str"" + footerLength + ""String_Node_Str""+ footerIndex);
    if (footerIndex < MAGIC.length || footerIndex >= footerLengthIndex) {
      throw new RuntimeException(""String_Node_Str"");
    }
    f.seek(footerIndex);
    return converter.readParquetMetadata(f,filter);
  }
  finally {
    f.close();
  }
}",0.9871526740364506
111952,"/** 
 * writes a single page
 * @param valueCount count of values
 * @param uncompressedPageSize the size of the data once uncompressed
 * @param bytes the compressed data for the page without header
 * @param rlEncoding encoding of the repetition level
 * @param dlEncoding encoding of the definition level
 * @param valuesEncoding encoding of values
 */
public void writeDataPage(int valueCount,int uncompressedPageSize,BytesInput bytes,Statistics statistics,Encoding rlEncoding,Encoding dlEncoding,Encoding valuesEncoding) throws IOException {
  state=state.write();
  long beforeHeader=out.getPos();
  if (DEBUG)   LOG.debug(beforeHeader + ""String_Node_Str"" + valueCount+ ""String_Node_Str"");
  int compressedPageSize=(int)bytes.size();
  ParquetMetadataConverter.writeDataPageHeader(uncompressedPageSize,compressedPageSize,valueCount,statistics,rlEncoding,dlEncoding,valuesEncoding,out);
  long headerSize=out.getPos() - beforeHeader;
  this.uncompressedLength+=uncompressedPageSize + headerSize;
  this.compressedLength+=compressedPageSize + headerSize;
  if (DEBUG)   LOG.debug(out.getPos() + ""String_Node_Str"" + compressedPageSize);
  bytes.writeAllTo(out);
  currentStatistics.mergeStatistics(statistics);
  currentEncodings.add(rlEncoding);
  currentEncodings.add(dlEncoding);
  currentEncodings.add(valuesEncoding);
}","/** 
 * writes a single page
 * @param valueCount count of values
 * @param uncompressedPageSize the size of the data once uncompressed
 * @param bytes the compressed data for the page without header
 * @param rlEncoding encoding of the repetition level
 * @param dlEncoding encoding of the definition level
 * @param valuesEncoding encoding of values
 */
public void writeDataPage(int valueCount,int uncompressedPageSize,BytesInput bytes,Statistics statistics,Encoding rlEncoding,Encoding dlEncoding,Encoding valuesEncoding) throws IOException {
  state=state.write();
  long beforeHeader=out.getPos();
  if (DEBUG)   LOG.debug(beforeHeader + ""String_Node_Str"" + valueCount+ ""String_Node_Str"");
  int compressedPageSize=(int)bytes.size();
  metadataConverter.writeDataPageHeader(uncompressedPageSize,compressedPageSize,valueCount,statistics,rlEncoding,dlEncoding,valuesEncoding,out);
  long headerSize=out.getPos() - beforeHeader;
  this.uncompressedLength+=uncompressedPageSize + headerSize;
  this.compressedLength+=compressedPageSize + headerSize;
  if (DEBUG)   LOG.debug(out.getPos() + ""String_Node_Str"" + compressedPageSize);
  bytes.writeAllTo(out);
  currentStatistics.mergeStatistics(statistics);
  currentEncodings.add(rlEncoding);
  currentEncodings.add(dlEncoding);
  currentEncodings.add(valuesEncoding);
}",0.9965999244427654
111953,"/** 
 * writes a dictionary page page
 * @param dictionaryPage the dictionary page
 */
public void writeDictionaryPage(DictionaryPage dictionaryPage) throws IOException {
  state=state.write();
  if (DEBUG)   LOG.debug(out.getPos() + ""String_Node_Str"" + dictionaryPage.getDictionarySize()+ ""String_Node_Str"");
  currentChunkDictionaryPageOffset=out.getPos();
  int uncompressedSize=dictionaryPage.getUncompressedSize();
  int compressedPageSize=(int)dictionaryPage.getBytes().size();
  ParquetMetadataConverter.writeDictionaryPageHeader(uncompressedSize,compressedPageSize,dictionaryPage.getDictionarySize(),dictionaryPage.getEncoding(),out);
  long headerSize=out.getPos() - currentChunkDictionaryPageOffset;
  this.uncompressedLength+=uncompressedSize + headerSize;
  this.compressedLength+=compressedPageSize + headerSize;
  if (DEBUG)   LOG.debug(out.getPos() + ""String_Node_Str"" + compressedPageSize);
  dictionaryPage.getBytes().writeAllTo(out);
  currentEncodings.add(dictionaryPage.getEncoding());
}","/** 
 * writes a dictionary page page
 * @param dictionaryPage the dictionary page
 */
public void writeDictionaryPage(DictionaryPage dictionaryPage) throws IOException {
  state=state.write();
  if (DEBUG)   LOG.debug(out.getPos() + ""String_Node_Str"" + dictionaryPage.getDictionarySize()+ ""String_Node_Str"");
  currentChunkDictionaryPageOffset=out.getPos();
  int uncompressedSize=dictionaryPage.getUncompressedSize();
  int compressedPageSize=(int)dictionaryPage.getBytes().size();
  metadataConverter.writeDictionaryPageHeader(uncompressedSize,compressedPageSize,dictionaryPage.getDictionarySize(),dictionaryPage.getEncoding(),out);
  long headerSize=out.getPos() - currentChunkDictionaryPageOffset;
  this.uncompressedLength+=uncompressedSize + headerSize;
  this.compressedLength+=compressedPageSize + headerSize;
  if (DEBUG)   LOG.debug(out.getPos() + ""String_Node_Str"" + compressedPageSize);
  dictionaryPage.getBytes().writeAllTo(out);
  currentEncodings.add(dictionaryPage.getEncoding());
}",0.9955156950672646
111954,"private static void serializeFooter(ParquetMetadata footer,FSDataOutputStream out) throws IOException {
  long footerIndex=out.getPos();
  org.apache.parquet.format.FileMetaData parquetMetadata=ParquetMetadataConverter.toParquetMetadata(CURRENT_VERSION,footer);
  writeFileMetaData(parquetMetadata,out);
  if (DEBUG)   LOG.debug(out.getPos() + ""String_Node_Str"" + (out.getPos() - footerIndex));
  BytesUtils.writeIntLittleEndian(out,(int)(out.getPos() - footerIndex));
  out.write(MAGIC);
}","private static void serializeFooter(ParquetMetadata footer,FSDataOutputStream out) throws IOException {
  long footerIndex=out.getPos();
  org.apache.parquet.format.FileMetaData parquetMetadata=metadataConverter.toParquetMetadata(CURRENT_VERSION,footer);
  writeFileMetaData(parquetMetadata,out);
  if (DEBUG)   LOG.debug(out.getPos() + ""String_Node_Str"" + (out.getPos() - footerIndex));
  BytesUtils.writeIntLittleEndian(out,(int)(out.getPos() - footerIndex));
  out.write(MAGIC);
}",0.9907502569373072
111955,"private void initializeInternalReader(ParquetInputSplit split,Configuration configuration) throws IOException {
  Path path=split.getPath();
  long[] rowGroupOffsets=split.getRowGroupOffsets();
  List<BlockMetaData> filteredBlocks;
  ParquetMetadata footer;
  if (rowGroupOffsets == null) {
    footer=readFooter(configuration,path,range(split.getStart(),split.getEnd()));
    MessageType fileSchema=footer.getFileMetaData().getSchema();
    Filter filter=getFilter(configuration);
    filteredBlocks=filterRowGroups(filter,footer.getBlocks(),fileSchema);
  }
 else {
    footer=readFooter(configuration,path,NO_FILTER);
    Set<Long> offsets=new HashSet<Long>();
    for (    long offset : rowGroupOffsets) {
      offsets.add(offset);
    }
    filteredBlocks=new ArrayList<BlockMetaData>();
    for (    BlockMetaData block : footer.getBlocks()) {
      if (offsets.contains(block.getStartingPos())) {
        filteredBlocks.add(block);
      }
    }
    if (filteredBlocks.size() != rowGroupOffsets.length) {
      long[] foundRowGroupOffsets=new long[footer.getBlocks().size()];
      for (int i=0; i < foundRowGroupOffsets.length; i++) {
        foundRowGroupOffsets[i]=footer.getBlocks().get(i).getStartingPos();
      }
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + Arrays.toString(rowGroupOffsets) + ""String_Node_Str""+ filteredBlocks+ ""String_Node_Str""+ Arrays.toString(foundRowGroupOffsets)+ ""String_Node_Str""+ split.getStart()+ ""String_Node_Str""+ split.getEnd());
    }
  }
  checkDeltaByteArrayProblem(footer.getFileMetaData(),configuration,filteredBlocks.get(0));
  MessageType fileSchema=footer.getFileMetaData().getSchema();
  internalReader.initialize(fileSchema,footer.getFileMetaData(),path,filteredBlocks,configuration);
}","private void initializeInternalReader(ParquetInputSplit split,Configuration configuration) throws IOException {
  Path path=split.getPath();
  long[] rowGroupOffsets=split.getRowGroupOffsets();
  List<BlockMetaData> filteredBlocks;
  ParquetMetadata footer;
  if (rowGroupOffsets == null) {
    footer=readFooter(configuration,path,range(split.getStart(),split.getEnd()));
    MessageType fileSchema=footer.getFileMetaData().getSchema();
    Filter filter=getFilter(configuration);
    filteredBlocks=filterRowGroups(filter,footer.getBlocks(),fileSchema);
  }
 else {
    footer=readFooter(configuration,path,NO_FILTER);
    Set<Long> offsets=new HashSet<Long>();
    for (    long offset : rowGroupOffsets) {
      offsets.add(offset);
    }
    filteredBlocks=new ArrayList<BlockMetaData>();
    for (    BlockMetaData block : footer.getBlocks()) {
      if (offsets.contains(block.getStartingPos())) {
        filteredBlocks.add(block);
      }
    }
    if (filteredBlocks.size() != rowGroupOffsets.length) {
      long[] foundRowGroupOffsets=new long[footer.getBlocks().size()];
      for (int i=0; i < foundRowGroupOffsets.length; i++) {
        foundRowGroupOffsets[i]=footer.getBlocks().get(i).getStartingPos();
      }
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + Arrays.toString(rowGroupOffsets) + ""String_Node_Str""+ filteredBlocks+ ""String_Node_Str""+ Arrays.toString(foundRowGroupOffsets)+ ""String_Node_Str""+ split.getStart()+ ""String_Node_Str""+ split.getEnd());
    }
  }
  if (!filteredBlocks.isEmpty()) {
    checkDeltaByteArrayProblem(footer.getFileMetaData(),configuration,filteredBlocks.get(0));
  }
  MessageType fileSchema=footer.getFileMetaData().getSchema();
  internalReader.initialize(fileSchema,footer.getFileMetaData(),path,filteredBlocks,configuration);
}",0.9885698355171452
111956,"@Override public byte[] getMinBytes(){
  return min.getBytes();
}","@Override public byte[] getMinBytes(){
  return min == null ? null : min.getBytes();
}",0.8609271523178808
111957,"@Override public byte[] getMaxBytes(){
  return max.getBytes();
}","@Override public byte[] getMaxBytes(){
  return max == null ? null : max.getBytes();
}",0.8609271523178808
111958,"/** 
 * @param valid whether the argument is valid
 * @param message error message if the argument is not valid
 * @throws IllegalStateException if !valid
 */
public static void checkState(boolean valid,String message) throws IllegalStateException {
  if (!valid) {
    throw new IllegalStateException(message);
  }
}","/** 
 * Precondition-style validation that throws   {@link IllegalStateException}.
 * @param isValid {@code true} if valid, {@code false} if an exception should bethrown
 * @param message A String message for the exception.
 * @param args Objects used to fill in  {@code %s} placeholders in the message
 * @throws IllegalStateException if {@code isValid} is false
 */
public static void checkState(boolean isValid,String message,Object... args) throws IllegalStateException {
  if (!isValid) {
    throw new IllegalStateException(String.format(String.valueOf(message),strings(args)));
  }
}",0.432194046306505
111959,"/** 
 * @param valid whether the argument is valid
 * @param message error message if the argument is not valid
 * @throws IllegalArgumentException if !valid
 */
public static void checkArgument(boolean valid,String message) throws IllegalArgumentException {
  if (!valid) {
    throw new IllegalArgumentException(message);
  }
}","/** 
 * Precondition-style validation that throws   {@link IllegalArgumentException}.
 * @param isValid {@code true} if valid, {@code false} if an exception should bethrown
 * @param message A String message for the exception.
 * @param args Objects used to fill in  {@code %s} placeholders in the message
 * @throws IllegalArgumentException if {@code isValid} is false
 */
public static void checkArgument(boolean isValid,String message,Object... args) throws IllegalArgumentException {
  if (!isValid) {
    throw new IllegalArgumentException(String.format(String.valueOf(message),strings(args)));
  }
}",0.4453961456102783
111960,"public static void validateBuffer(byte[] buffer,int off,int len){
  Preconditions.checkNotNull(buffer,""String_Node_Str"");
  Preconditions.checkArgument(off >= 0 && len >= 0 && off <= buffer.length - len,""String_Node_Str"" + buffer.length + ""String_Node_Str""+ off+ ""String_Node_Str""+ len);
}","public static void validateBuffer(byte[] buffer,int off,int len){
  Preconditions.checkNotNull(buffer,""String_Node_Str"");
  Preconditions.checkArgument(off >= 0 && len >= 0 && off <= buffer.length - len,""String_Node_Str"",buffer.length,off,len);
}",0.8485981308411215
111961,"@SuppressWarnings(""String_Node_Str"") @Override public void sourceConfInit(FlowProcess<JobConf> fp,Tap<JobConf,RecordReader,OutputCollector> tap,JobConf jobConf){
  super.sourceConfInit(fp,tap,jobConf);
  jobConf.setInputFormat(DeprecatedParquetInputFormat.class);
  ParquetInputFormat.setReadSupportClass(jobConf,ThriftReadSupport.class);
  ThriftReadSupport.setRecordConverterClass(jobConf,TBaseRecordConverter.class);
}","@Override public void sourceConfInit(FlowProcess<JobConf> fp,Tap<JobConf,RecordReader,OutputCollector> tap,JobConf jobConf){
  super.sourceConfInit(fp,tap,jobConf);
  jobConf.setInputFormat(DeprecatedParquetInputFormat.class);
  ParquetInputFormat.setReadSupportClass(jobConf,ThriftReadSupport.class);
  ThriftReadSupport.setRecordConverterClass(jobConf,TBaseRecordConverter.class);
}",0.9540372670807452
111962,"public ParquetTBaseScheme(Config config){
  super(config);
}","public ParquetTBaseScheme(Config<T> config){
  super(config);
}",0.975609756097561
111963,"@SuppressWarnings(""String_Node_Str"") @Override public void sinkConfInit(FlowProcess<JobConf> fp,Tap<JobConf,RecordReader,OutputCollector> tap,JobConf jobConf){
  if (this.config.getKlass() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  jobConf.setOutputFormat(DeprecatedParquetOutputFormat.class);
  DeprecatedParquetOutputFormat.setWriteSupportClass(jobConf,ThriftWriteSupport.class);
  ThriftWriteSupport.<T>setThriftClass(jobConf,this.config.getKlass());
}","@Override public void sinkConfInit(FlowProcess<JobConf> fp,Tap<JobConf,RecordReader,OutputCollector> tap,JobConf jobConf){
  if (this.config.getKlass() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  jobConf.setOutputFormat(DeprecatedParquetOutputFormat.class);
  DeprecatedParquetOutputFormat.setWriteSupportClass(jobConf,ThriftWriteSupport.class);
  ThriftWriteSupport.<T>setThriftClass(jobConf,this.config.getKlass());
}",0.9605963791267306
111964,"public Config withRecordClass(Class<T> klass){
  return new Config(checkNotNull(klass,""String_Node_Str""),this.filterPredicate,this.projectionString);
}","public Config<T> withRecordClass(Class<T> klass){
  return new Config<T>(checkNotNull(klass,""String_Node_Str""),this.filterPredicate,this.projectionString);
}",0.9805194805194806
111965,"@Override public void sink(FlowProcess<JobConf> fp,SinkCall<Object[],OutputCollector> sc) throws IOException {
  TupleEntry tuple=sc.getOutgoingEntry();
  if (tuple.size() != 1) {
    throw new RuntimeException(""String_Node_Str"" + tuple.getFields());
  }
  T value=(T)tuple.getObject(0);
  OutputCollector output=sc.getOutput();
  output.collect(null,value);
}","@SuppressWarnings(""String_Node_Str"") @Override public void sink(FlowProcess<JobConf> fp,SinkCall<Object[],OutputCollector> sc) throws IOException {
  TupleEntry tuple=sc.getOutgoingEntry();
  if (tuple.size() != 1) {
    throw new RuntimeException(""String_Node_Str"" + tuple.getFields());
  }
  T value=(T)tuple.getObject(0);
  OutputCollector output=sc.getOutput();
  output.collect(null,value);
}",0.95112285336856
111966,"public Config withFilterPredicate(FilterPredicate f){
  return new Config(this.klass,checkNotNull(f,""String_Node_Str""),this.projectionString);
}","public Config<T> withFilterPredicate(FilterPredicate f){
  return new Config<T>(this.klass,checkNotNull(f,""String_Node_Str""),this.projectionString);
}",0.979591836734694
111967,"public ParquetValueScheme(Config config){
  this.config=config;
}","public ParquetValueScheme(Config<T> config){
  this.config=config;
}",0.9774436090225564
111968,"public Config withProjectionString(String p){
  return new Config(this.klass,this.filterPredicate,checkNotNull(p,""String_Node_Str""));
}","public Config<T> withProjectionString(String p){
  return new Config<T>(this.klass,this.filterPredicate,checkNotNull(p,""String_Node_Str""));
}",0.9782608695652174
111969,"@SuppressWarnings(""String_Node_Str"") @Override public void sourceConfInit(FlowProcess<JobConf> fp,Tap<JobConf,RecordReader,OutputCollector> tap,JobConf jobConf){
  super.sourceConfInit(fp,tap,jobConf);
  jobConf.setInputFormat(DeprecatedParquetInputFormat.class);
  ParquetInputFormat.setReadSupportClass(jobConf,ScroogeReadSupport.class);
  ThriftReadSupport.setRecordConverterClass(jobConf,ScroogeRecordConverter.class);
}","@Override public void sourceConfInit(FlowProcess<JobConf> fp,Tap<JobConf,RecordReader,OutputCollector> tap,JobConf jobConf){
  super.sourceConfInit(fp,tap,jobConf);
  jobConf.setInputFormat(DeprecatedParquetInputFormat.class);
  ParquetInputFormat.setReadSupportClass(jobConf,ScroogeReadSupport.class);
  ThriftReadSupport.setRecordConverterClass(jobConf,ScroogeRecordConverter.class);
}",0.9543773119605424
111970,"@SuppressWarnings(""String_Node_Str"") @Override public void sinkConfInit(FlowProcess<JobConf> arg0,Tap<JobConf,RecordReader,OutputCollector> arg1,JobConf arg2){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void sinkConfInit(FlowProcess<JobConf> arg0,Tap<JobConf,RecordReader,OutputCollector> arg1,JobConf arg2){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9095354523227384
111971,"public ParquetScroogeScheme(Config config){
  super(config);
}","public ParquetScroogeScheme(Config<T> config){
  super(config);
}",0.9763779527559056
111972,"@Override public String toStringUsingUTF8(){
  return new String(getBytes(),BytesUtils.UTF8);
}","@Override public String toStringUsingUTF8(){
  return UTF8.decode(value).toString();
}",0.7292817679558011
111973,"@Override public void writeBytes(Binary value){
  if (!dictionaryTooBig) {
    int id=binaryDictionaryContent.getInt(value);
    if (id == -1) {
      id=binaryDictionaryContent.size();
      binaryDictionaryContent.put(value,id);
      dictionaryByteSize+=length;
    }
    encodedValues.add(id);
    checkAndFallbackIfNeeded();
  }
 else {
    plainValuesWriter.writeBytes(value);
  }
  rawDataByteSize+=length;
}","@Override public void writeBytes(Binary value){
  if (!dictionaryTooBig) {
    int id=binaryDictionaryContent.getInt(value);
    if (id == -1) {
      id=binaryDictionaryContent.size();
      binaryDictionaryContent.put(copy(value),id);
      dictionaryByteSize+=length;
    }
    encodedValues.add(id);
    checkAndFallbackIfNeeded();
  }
 else {
    plainValuesWriter.writeBytes(value);
  }
  rawDataByteSize+=length;
}",0.9808612440191388
111974,"@Override public ColumnWriter getColumnWriter(final ColumnDescriptor path){
  return new ColumnWriter(){
    private void validate(    Object value,    int repetitionLevel,    int definitionLevel){
      String actual=Arrays.toString(path.getPath()) + ""String_Node_Str"" + value+ ""String_Node_Str""+ repetitionLevel+ ""String_Node_Str""+ definitionLevel;
      assertEquals(""String_Node_Str"" + counter,expected[counter],actual);
      ++counter;
    }
    @Override public void writeNull(    int repetitionLevel,    int definitionLevel){
      validate(null,repetitionLevel,definitionLevel);
    }
    @Override public void write(    Binary value,    int repetitionLevel,    int definitionLevel){
      validate(value.toStringUsingUTF8(),repetitionLevel,definitionLevel);
    }
    @Override public void write(    boolean value,    int repetitionLevel,    int definitionLevel){
      validate(value,repetitionLevel,definitionLevel);
    }
    @Override public void write(    int value,    int repetitionLevel,    int definitionLevel){
      validate(value,repetitionLevel,definitionLevel);
    }
    @Override public void write(    long value,    int repetitionLevel,    int definitionLevel){
      validate(value,repetitionLevel,definitionLevel);
    }
    @Override public void write(    float value,    int repetitionLevel,    int definitionLevel){
      validate(value,repetitionLevel,definitionLevel);
    }
    @Override public void write(    double value,    int repetitionLevel,    int definitionLevel){
      validate(value,repetitionLevel,definitionLevel);
    }
    @Override public Statistics getColumnStatistics(){
      throw new UnsupportedOperationException();
    }
    @Override public void flush(){
      throw new UnsupportedOperationException();
    }
    @Override public long getBufferedSizeInMemory(){
      throw new UnsupportedOperationException();
    }
  }
;
}","@Override public ColumnWriter getColumnWriter(final ColumnDescriptor path){
  return new ColumnWriter(){
    private void validate(    Object value,    int repetitionLevel,    int definitionLevel){
      String actual=Arrays.toString(path.getPath()) + ""String_Node_Str"" + value+ ""String_Node_Str""+ repetitionLevel+ ""String_Node_Str""+ definitionLevel;
      assertEquals(""String_Node_Str"" + counter,expected[counter],actual);
      ++counter;
    }
    @Override public void writeNull(    int repetitionLevel,    int definitionLevel){
      validate(null,repetitionLevel,definitionLevel);
    }
    @Override public void write(    Binary value,    int repetitionLevel,    int definitionLevel){
      validate(value.toStringUsingUTF8(),repetitionLevel,definitionLevel);
    }
    @Override public void write(    boolean value,    int repetitionLevel,    int definitionLevel){
      validate(value,repetitionLevel,definitionLevel);
    }
    @Override public void write(    int value,    int repetitionLevel,    int definitionLevel){
      validate(value,repetitionLevel,definitionLevel);
    }
    @Override public void write(    long value,    int repetitionLevel,    int definitionLevel){
      validate(value,repetitionLevel,definitionLevel);
    }
    @Override public void write(    float value,    int repetitionLevel,    int definitionLevel){
      validate(value,repetitionLevel,definitionLevel);
    }
    @Override public void write(    double value,    int repetitionLevel,    int definitionLevel){
      validate(value,repetitionLevel,definitionLevel);
    }
    @Override public void flush(){
      throw new UnsupportedOperationException();
    }
    @Override public long getBufferedSizeInMemory(){
      throw new UnsupportedOperationException();
    }
  }
;
}",0.9486057955166758
111975,"@Test public void testWriteWithGroupWriter(){
  final String[] expected={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ColumnWriteStore columns=new ColumnWriteStore(){
    int counter=0;
    @Override public ColumnWriter getColumnWriter(    final ColumnDescriptor path){
      return new ColumnWriter(){
        private void validate(        Object value,        int repetitionLevel,        int definitionLevel){
          String actual=Arrays.toString(path.getPath()) + ""String_Node_Str"" + value+ ""String_Node_Str""+ repetitionLevel+ ""String_Node_Str""+ definitionLevel;
          assertEquals(""String_Node_Str"" + counter,expected[counter],actual);
          ++counter;
        }
        @Override public void writeNull(        int repetitionLevel,        int definitionLevel){
          validate(null,repetitionLevel,definitionLevel);
        }
        @Override public void write(        Binary value,        int repetitionLevel,        int definitionLevel){
          validate(value.toStringUsingUTF8(),repetitionLevel,definitionLevel);
        }
        @Override public void write(        boolean value,        int repetitionLevel,        int definitionLevel){
          validate(value,repetitionLevel,definitionLevel);
        }
        @Override public void write(        int value,        int repetitionLevel,        int definitionLevel){
          validate(value,repetitionLevel,definitionLevel);
        }
        @Override public void write(        long value,        int repetitionLevel,        int definitionLevel){
          validate(value,repetitionLevel,definitionLevel);
        }
        @Override public void write(        float value,        int repetitionLevel,        int definitionLevel){
          validate(value,repetitionLevel,definitionLevel);
        }
        @Override public void write(        double value,        int repetitionLevel,        int definitionLevel){
          validate(value,repetitionLevel,definitionLevel);
        }
        @Override public Statistics getColumnStatistics(){
          throw new UnsupportedOperationException();
        }
        @Override public void flush(){
          throw new UnsupportedOperationException();
        }
        @Override public long getBufferedSizeInMemory(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
    @Override public void flush(){
      assertEquals(""String_Node_Str"",expected.length,counter);
    }
  }
;
  MessageColumnIO columnIO=new ColumnIOFactory().getColumnIO(schema);
  GroupWriter groupWriter=new GroupWriter(columnIO.getRecordWriter(columns),schema);
  groupWriter.write(r1);
  groupWriter.write(r2);
  columns.flush();
}","@Test public void testWriteWithGroupWriter(){
  final String[] expected={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ColumnWriteStore columns=new ColumnWriteStore(){
    int counter=0;
    @Override public ColumnWriter getColumnWriter(    final ColumnDescriptor path){
      return new ColumnWriter(){
        private void validate(        Object value,        int repetitionLevel,        int definitionLevel){
          String actual=Arrays.toString(path.getPath()) + ""String_Node_Str"" + value+ ""String_Node_Str""+ repetitionLevel+ ""String_Node_Str""+ definitionLevel;
          assertEquals(""String_Node_Str"" + counter,expected[counter],actual);
          ++counter;
        }
        @Override public void writeNull(        int repetitionLevel,        int definitionLevel){
          validate(null,repetitionLevel,definitionLevel);
        }
        @Override public void write(        Binary value,        int repetitionLevel,        int definitionLevel){
          validate(value.toStringUsingUTF8(),repetitionLevel,definitionLevel);
        }
        @Override public void write(        boolean value,        int repetitionLevel,        int definitionLevel){
          validate(value,repetitionLevel,definitionLevel);
        }
        @Override public void write(        int value,        int repetitionLevel,        int definitionLevel){
          validate(value,repetitionLevel,definitionLevel);
        }
        @Override public void write(        long value,        int repetitionLevel,        int definitionLevel){
          validate(value,repetitionLevel,definitionLevel);
        }
        @Override public void write(        float value,        int repetitionLevel,        int definitionLevel){
          validate(value,repetitionLevel,definitionLevel);
        }
        @Override public void write(        double value,        int repetitionLevel,        int definitionLevel){
          validate(value,repetitionLevel,definitionLevel);
        }
        @Override public void flush(){
          throw new UnsupportedOperationException();
        }
        @Override public long getBufferedSizeInMemory(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
    @Override public void flush(){
      assertEquals(""String_Node_Str"",expected.length,counter);
    }
  }
;
  MessageColumnIO columnIO=new ColumnIOFactory().getColumnIO(schema);
  GroupWriter groupWriter=new GroupWriter(columnIO.getRecordWriter(columns),schema);
  groupWriter.write(r1);
  groupWriter.write(r2);
  columns.flush();
}",0.9794612794612796
111976,"private void initSchema(Job job) throws IOException {
  if (schema != null) {
    return;
  }
  if (requestedSchema != null) {
    schema=requestedSchema;
    return;
  }
  schema=PigSchemaConverter.parsePigSchema(getPropertyFromUDFContext(PARQUET_PIG_SCHEMA));
  if (schema == null) {
    final GlobalMetaData globalMetaData=getParquetInputFormat().getGlobalMetaData(job);
    schema=getPigSchemaFromMultipleFiles(globalMetaData.getSchema(),globalMetaData.getKeyValueMetaData());
  }
  if (isElephantBirdCompatible(job)) {
    convertToElephantBirdCompatibleSchema(schema);
  }
}","private void initSchema(Job job) throws IOException {
  if (schema != null) {
    return;
  }
  schema=PigSchemaConverter.parsePigSchema(getPropertyFromUDFContext(PARQUET_PIG_SCHEMA));
  if (schema == null && requestedSchema != null) {
    schema=requestedSchema;
    return;
  }
  if (schema == null) {
    final GlobalMetaData globalMetaData=getParquetInputFormat().getGlobalMetaData(job);
    schema=getPigSchemaFromMultipleFiles(globalMetaData.getSchema(),globalMetaData.getKeyValueMetaData());
  }
  if (isElephantBirdCompatible(job)) {
    convertToElephantBirdCompatibleSchema(schema);
  }
}",0.8539898132427843
111977,"public static ColumnChunkProperties get(ColumnPath path,PrimitiveTypeName type,CompressionCodecName codec,Set<Encoding> encodings){
  ColumnChunkProperties key=new ColumnChunkProperties(codec,path,type,encodings);
  ColumnChunkProperties cached=cache.get(key);
  if (cached == null) {
    cached=key;
    cache.put(key,cached);
  }
  return cached;
}","public static ColumnChunkProperties get(ColumnPath path,PrimitiveTypeName type,CompressionCodecName codec,Set<Encoding> encodings){
  return properties.canonicalize(new ColumnChunkProperties(codec,path,type,encodings));
}",0.5604203152364273
111978,"public static ColumnPath get(String... path){
  ColumnPath key=new ColumnPath(path);
  ColumnPath cached=paths.get(key);
  if (cached == null) {
    for (int i=0; i < path.length; i++) {
      path[i]=path[i].intern();
    }
    cached=key;
    paths.put(key,cached);
  }
  return cached;
}","public static ColumnPath get(String... path){
  return paths.canonicalize(new ColumnPath(path));
}",0.4020618556701031
111979,"public static EncodingList getEncodingList(List<Encoding> encodings){
  EncodingList key=new EncodingList(encodings);
  EncodingList cached=encodingLists.get(key);
  if (cached == null) {
    cached=key;
    encodingLists.put(key,cached);
  }
  return cached;
}","public static EncodingList getEncodingList(List<Encoding> encodings){
  return encodingLists.canonicalize(new EncodingList(encodings));
}",0.5778894472361809
111980,"public static ColumnChunkProperties get(ColumnPath path,PrimitiveTypeName type,CompressionCodecName codec,Set<Encoding> encodings){
  ColumnChunkProperties key=new ColumnChunkProperties(codec,path,type,encodings);
  ColumnChunkProperties cached=cache.get(key);
  if (cached == null) {
    cached=key;
    cache.put(key,cached);
  }
  return cached;
}","public static ColumnChunkProperties get(ColumnPath path,PrimitiveTypeName type,CompressionCodecName codec,Set<Encoding> encodings){
  return properties.canonicalize(new ColumnChunkProperties(codec,path,type,encodings));
}",0.5604203152364273
111981,"public static ColumnPath get(String... path){
  ColumnPath key=new ColumnPath(path);
  ColumnPath cached=paths.get(key);
  if (cached == null) {
    for (int i=0; i < path.length; i++) {
      path[i]=path[i].intern();
    }
    cached=key;
    paths.put(key,cached);
  }
  return cached;
}","public static ColumnPath get(String... path){
  return paths.canonicalize(new ColumnPath(path));
}",0.4020618556701031
111982,"public static EncodingList getEncodingList(List<Encoding> encodings){
  EncodingList key=new EncodingList(encodings);
  EncodingList cached=encodingLists.get(key);
  if (cached == null) {
    cached=key;
    encodingLists.put(key,cached);
  }
  return cached;
}","public static EncodingList getEncodingList(List<Encoding> encodings){
  return encodingLists.canonicalize(new EncodingList(encodings));
}",0.5778894472361809
111983,"public static void dump(PrettyPrintWriter out,ColumnReadStoreImpl crstore,ColumnDescriptor column,long page,long total,long offset) throws IOException {
  int dmax=column.getMaxDefinitionLevel();
  ColumnReader creader=crstore.getColumnReader(column);
  out.format(""String_Node_Str"",page,total,offset,offset + creader.getTotalValueCount() - 1);
  for (long i=0, e=creader.getTotalValueCount(); i < e; ++i) {
    int rlvl=creader.getCurrentDefinitionLevel();
    int dlvl=creader.getCurrentDefinitionLevel();
    out.format(""String_Node_Str"",offset + i,rlvl,dlvl);
    if (dlvl == dmax) {
switch (column.getType()) {
case BINARY:
        out.format(""String_Node_Str"",binaryToString(creader.getBinary()));
      break;
case BOOLEAN:
    out.format(""String_Node_Str"",creader.getBoolean());
  break;
case DOUBLE:
out.format(""String_Node_Str"",creader.getDouble());
break;
case FLOAT:
out.format(""String_Node_Str"",creader.getFloat());
break;
case INT32:
out.format(""String_Node_Str"",creader.getInteger());
break;
case INT64:
out.format(""String_Node_Str"",creader.getLong());
break;
case INT96:
out.format(""String_Node_Str"",binaryToBigInteger(creader.getBinary()));
break;
case FIXED_LEN_BYTE_ARRAY:
out.format(""String_Node_Str"",binaryToString(creader.getBinary()));
break;
}
}
 else {
out.format(""String_Node_Str"");
}
out.println();
creader.consume();
}
}","public static void dump(PrettyPrintWriter out,ColumnReadStoreImpl crstore,ColumnDescriptor column,long page,long total,long offset) throws IOException {
  int dmax=column.getMaxDefinitionLevel();
  ColumnReader creader=crstore.getColumnReader(column);
  out.format(""String_Node_Str"",page,total,offset,offset + creader.getTotalValueCount() - 1);
  for (long i=0, e=creader.getTotalValueCount(); i < e; ++i) {
    int rlvl=creader.getCurrentRepetitionLevel();
    int dlvl=creader.getCurrentDefinitionLevel();
    out.format(""String_Node_Str"",offset + i,rlvl,dlvl);
    if (dlvl == dmax) {
switch (column.getType()) {
case BINARY:
        out.format(""String_Node_Str"",binaryToString(creader.getBinary()));
      break;
case BOOLEAN:
    out.format(""String_Node_Str"",creader.getBoolean());
  break;
case DOUBLE:
out.format(""String_Node_Str"",creader.getDouble());
break;
case FLOAT:
out.format(""String_Node_Str"",creader.getFloat());
break;
case INT32:
out.format(""String_Node_Str"",creader.getInteger());
break;
case INT64:
out.format(""String_Node_Str"",creader.getLong());
break;
case INT96:
out.format(""String_Node_Str"",binaryToBigInteger(creader.getBinary()));
break;
case FIXED_LEN_BYTE_ARRAY:
out.format(""String_Node_Str"",binaryToString(creader.getBinary()));
break;
}
}
 else {
out.format(""String_Node_Str"");
}
out.println();
creader.consume();
}
}",0.9962908011869436
111984,"/** 
 * Read all of the pages in a given column chunk.
 * @return the list of pages
 */
public ColumnChunkPageReader readAllPages() throws IOException {
  List<Page> pagesInChunk=new ArrayList<Page>();
  DictionaryPage dictionaryPage=null;
  long valuesCountReadSoFar=0;
  while (valuesCountReadSoFar < descriptor.metadata.getValueCount()) {
    PageHeader pageHeader=readPageHeader(this);
switch (pageHeader.type) {
case DICTIONARY_PAGE:
      if (dictionaryPage != null) {
        throw new ParquetDecodingException(""String_Node_Str"" + descriptor.col);
      }
    dictionaryPage=new DictionaryPage(this.readAsBytesInput(pageHeader.compressed_page_size),pageHeader.uncompressed_page_size,pageHeader.dictionary_page_header.num_values,parquetMetadataConverter.getEncoding(pageHeader.dictionary_page_header.encoding));
  break;
case DATA_PAGE:
pagesInChunk.add(new Page(this.readAsBytesInput(pageHeader.compressed_page_size),pageHeader.data_page_header.num_values,pageHeader.uncompressed_page_size,parquetMetadataConverter.getEncoding(pageHeader.data_page_header.repetition_level_encoding),parquetMetadataConverter.getEncoding(pageHeader.data_page_header.definition_level_encoding),parquetMetadataConverter.getEncoding(pageHeader.data_page_header.encoding)));
valuesCountReadSoFar+=pageHeader.data_page_header.num_values;
break;
default :
if (DEBUG) LOG.debug(""String_Node_Str"" + pageHeader.type + ""String_Node_Str""+ pageHeader.compressed_page_size);
this.skip(pageHeader.compressed_page_size);
break;
}
}
if (valuesCountReadSoFar != descriptor.metadata.getValueCount()) {
throw new IOException(""String_Node_Str"" + descriptor.metadata.getValueCount() + ""String_Node_Str""+ filePath+ ""String_Node_Str""+ descriptor.metadata.getFirstDataPageOffset()+ ""String_Node_Str""+ valuesCountReadSoFar+ ""String_Node_Str""+ pagesInChunk.size()+ ""String_Node_Str""+ (descriptor.fileOffset + pos()));
}
BytesDecompressor decompressor=codecFactory.getDecompressor(descriptor.metadata.getCodec());
return new ColumnChunkPageReader(decompressor,pagesInChunk,dictionaryPage);
}","/** 
 * Read all of the pages in a given column chunk.
 * @return the list of pages
 */
public ColumnChunkPageReader readAllPages() throws IOException {
  List<Page> pagesInChunk=new ArrayList<Page>();
  DictionaryPage dictionaryPage=null;
  long valuesCountReadSoFar=0;
  while (valuesCountReadSoFar < descriptor.metadata.getValueCount()) {
    PageHeader pageHeader=readPageHeader();
switch (pageHeader.type) {
case DICTIONARY_PAGE:
      if (dictionaryPage != null) {
        throw new ParquetDecodingException(""String_Node_Str"" + descriptor.col);
      }
    dictionaryPage=new DictionaryPage(this.readAsBytesInput(pageHeader.compressed_page_size),pageHeader.uncompressed_page_size,pageHeader.dictionary_page_header.num_values,parquetMetadataConverter.getEncoding(pageHeader.dictionary_page_header.encoding));
  break;
case DATA_PAGE:
pagesInChunk.add(new Page(this.readAsBytesInput(pageHeader.compressed_page_size),pageHeader.data_page_header.num_values,pageHeader.uncompressed_page_size,parquetMetadataConverter.getEncoding(pageHeader.data_page_header.repetition_level_encoding),parquetMetadataConverter.getEncoding(pageHeader.data_page_header.definition_level_encoding),parquetMetadataConverter.getEncoding(pageHeader.data_page_header.encoding)));
valuesCountReadSoFar+=pageHeader.data_page_header.num_values;
break;
default :
if (DEBUG) LOG.debug(""String_Node_Str"" + pageHeader.type + ""String_Node_Str""+ pageHeader.compressed_page_size);
this.skip(pageHeader.compressed_page_size);
break;
}
}
if (valuesCountReadSoFar != descriptor.metadata.getValueCount()) {
throw new IOException(""String_Node_Str"" + descriptor.metadata.getValueCount() + ""String_Node_Str""+ filePath+ ""String_Node_Str""+ descriptor.metadata.getFirstDataPageOffset()+ ""String_Node_Str""+ valuesCountReadSoFar+ ""String_Node_Str""+ pagesInChunk.size()+ ""String_Node_Str""+ (descriptor.fileOffset + pos()));
}
BytesDecompressor decompressor=codecFactory.getDecompressor(descriptor.metadata.getCodec());
return new ColumnChunkPageReader(decompressor,pagesInChunk,dictionaryPage);
}",0.9990243902439024
111985,"public ValuesWriter getValuesWriter(ColumnDescriptor path,int initialSizePerCol){
switch (path.getType()) {
case BOOLEAN:
    if (writerVersion == WriterVersion.PARQUET_1_0) {
      return new BooleanPlainValuesWriter();
    }
 else     if (writerVersion == WriterVersion.PARQUET_2_0) {
      return new RunLengthBitPackingHybridValuesWriter(1,initialSizePerCol);
    }
  break;
case BINARY:
if (enableDictionary) {
  return new PlainBinaryDictionaryValuesWriter(dictionaryPageSizeThreshold,initialSizePerCol);
}
 else {
  if (writerVersion == WriterVersion.PARQUET_1_0) {
    return new PlainValuesWriter(initialSizePerCol);
  }
 else   if (writerVersion == WriterVersion.PARQUET_2_0) {
    return new DeltaByteArrayWriter(initialSizePerCol);
  }
}
break;
case INT32:
if (enableDictionary) {
return new PlainIntegerDictionaryValuesWriter(dictionaryPageSizeThreshold,initialSizePerCol);
}
 else {
if (writerVersion == WriterVersion.PARQUET_1_0) {
return new PlainValuesWriter(initialSizePerCol);
}
 else if (writerVersion == WriterVersion.PARQUET_2_0) {
return new DeltaBinaryPackingValuesWriter(initialSizePerCol);
}
}
break;
case INT64:
if (enableDictionary) {
return new PlainLongDictionaryValuesWriter(dictionaryPageSizeThreshold,initialSizePerCol);
}
 else {
return new PlainValuesWriter(initialSizePerCol);
}
case INT96:
if (enableDictionary) {
return new PlainFixedLenArrayDictionaryValuesWriter(12,dictionaryPageSizeThreshold,initialSizePerCol);
}
 else {
return new FixedLenByteArrayPlainValuesWriter(12,initialSizePerCol);
}
case DOUBLE:
if (enableDictionary) {
return new PlainDoubleDictionaryValuesWriter(dictionaryPageSizeThreshold,initialSizePerCol);
}
 else {
return new PlainValuesWriter(initialSizePerCol);
}
case FLOAT:
if (enableDictionary) {
return new PlainFloatDictionaryValuesWriter(dictionaryPageSizeThreshold,initialSizePerCol);
}
 else {
return new PlainValuesWriter(initialSizePerCol);
}
case FIXED_LEN_BYTE_ARRAY:
return new FixedLenByteArrayPlainValuesWriter(path.getTypeLength(),initialSizePerCol);
default :
return new PlainValuesWriter(initialSizePerCol);
}
return null;
}","public ValuesWriter getValuesWriter(ColumnDescriptor path,int initialSizePerCol){
switch (path.getType()) {
case BOOLEAN:
    if (writerVersion == WriterVersion.PARQUET_1_0) {
      return new BooleanPlainValuesWriter();
    }
 else     if (writerVersion == WriterVersion.PARQUET_2_0) {
      return new RunLengthBitPackingHybridValuesWriter(1,initialSizePerCol);
    }
  break;
case BINARY:
if (enableDictionary) {
  return new PlainBinaryDictionaryValuesWriter(dictionaryPageSizeThreshold,initialSizePerCol);
}
 else {
  if (writerVersion == WriterVersion.PARQUET_1_0) {
    return new PlainValuesWriter(initialSizePerCol);
  }
 else   if (writerVersion == WriterVersion.PARQUET_2_0) {
    return new DeltaByteArrayWriter(initialSizePerCol);
  }
}
break;
case INT32:
if (enableDictionary) {
return new PlainIntegerDictionaryValuesWriter(dictionaryPageSizeThreshold,initialSizePerCol);
}
 else {
if (writerVersion == WriterVersion.PARQUET_1_0) {
return new PlainValuesWriter(initialSizePerCol);
}
 else if (writerVersion == WriterVersion.PARQUET_2_0) {
return new DeltaBinaryPackingValuesWriter(initialSizePerCol);
}
}
break;
case INT64:
if (enableDictionary) {
return new PlainLongDictionaryValuesWriter(dictionaryPageSizeThreshold,initialSizePerCol);
}
 else {
return new PlainValuesWriter(initialSizePerCol);
}
case INT96:
if (enableDictionary) {
return new PlainFixedLenArrayDictionaryValuesWriter(dictionaryPageSizeThreshold,initialSizePerCol,12);
}
 else {
return new FixedLenByteArrayPlainValuesWriter(12,initialSizePerCol);
}
case DOUBLE:
if (enableDictionary) {
return new PlainDoubleDictionaryValuesWriter(dictionaryPageSizeThreshold,initialSizePerCol);
}
 else {
return new PlainValuesWriter(initialSizePerCol);
}
case FLOAT:
if (enableDictionary) {
return new PlainFloatDictionaryValuesWriter(dictionaryPageSizeThreshold,initialSizePerCol);
}
 else {
return new PlainValuesWriter(initialSizePerCol);
}
case FIXED_LEN_BYTE_ARRAY:
return new FixedLenByteArrayPlainValuesWriter(path.getTypeLength(),initialSizePerCol);
default :
return new PlainValuesWriter(initialSizePerCol);
}
return null;
}",0.9781368821292776
111986,"@Override public void startGroup(){
  if (DEBUG)   log(""String_Node_Str"");
  ++currentLevel;
  r[currentLevel]=r[currentLevel - 1];
  currentIndex[currentLevel]=0;
  if (DEBUG)   printState();
}","@Override public void startGroup(){
  if (DEBUG)   log(""String_Node_Str"");
  ++currentLevel;
  r[currentLevel]=r[currentLevel - 1];
  int fieldsCount=((GroupColumnIO)currentColumnIO).getChildrenCount();
  fieldsWritten[currentLevel].reset(fieldsCount);
  if (DEBUG)   printState();
}",0.7589098532494759
111987,"@Override public void endMessage(){
  writeNullForMissingFields(((GroupColumnIO)currentColumnIO).getChildrenCount() - 1);
  if (DEBUG)   log(""String_Node_Str"");
  if (DEBUG)   printState();
}","@Override public void endMessage(){
  writeNullForMissingFieldsAtCurrentLevel();
  if (DEBUG)   log(""String_Node_Str"");
  if (DEBUG)   printState();
}",0.844574780058651
111988,"@Override public void startMessage(){
  if (DEBUG)   log(""String_Node_Str"");
  currentColumnIO=MessageColumnIO.this;
  r[0]=0;
  currentIndex[0]=0;
  if (DEBUG)   printState();
}","@Override public void startMessage(){
  if (DEBUG)   log(""String_Node_Str"");
  currentColumnIO=MessageColumnIO.this;
  r[0]=0;
  int numberOfFieldsToVisit=((GroupColumnIO)currentColumnIO).getChildrenCount();
  fieldsWritten[0].reset(numberOfFieldsToVisit);
  if (DEBUG)   printState();
}",0.7354838709677419
111989,"@Override public void endGroup(){
  if (DEBUG)   log(""String_Node_Str"");
  emptyField=false;
  int lastIndex=((GroupColumnIO)currentColumnIO).getChildrenCount() - 1;
  writeNullForMissingFields(lastIndex);
  --currentLevel;
  setRepetitionLevel();
  if (DEBUG)   printState();
}","@Override public void endGroup(){
  if (DEBUG)   log(""String_Node_Str"");
  emptyField=false;
  writeNullForMissingFieldsAtCurrentLevel();
  --currentLevel;
  setRepetitionLevel();
  if (DEBUG)   printState();
}",0.7991803278688525
111990,"@Override public void endField(String field,int index){
  if (DEBUG)   log(""String_Node_Str"" + field + ""String_Node_Str""+ index+ ""String_Node_Str"");
  currentColumnIO=currentColumnIO.getParent();
  if (emptyField) {
    throw new ParquetEncodingException(""String_Node_Str"");
  }
  currentIndex[currentLevel]=index + 1;
  r[currentLevel]=currentLevel == 0 ? 0 : r[currentLevel - 1];
  if (DEBUG)   printState();
}","@Override public void endField(String field,int index){
  if (DEBUG)   log(""String_Node_Str"" + field + ""String_Node_Str""+ index+ ""String_Node_Str"");
  currentColumnIO=currentColumnIO.getParent();
  if (emptyField) {
    throw new ParquetEncodingException(""String_Node_Str"");
  }
  fieldsWritten[currentLevel].markWritten(index);
  r[currentLevel]=currentLevel == 0 ? 0 : r[currentLevel - 1];
  if (DEBUG)   printState();
}",0.9112709832134293
111991,"@Override public void startField(String field,int index){
  try {
    if (DEBUG)     log(""String_Node_Str"" + field + ""String_Node_Str""+ index+ ""String_Node_Str"");
    writeNullForMissingFields(index - 1);
    currentColumnIO=((GroupColumnIO)currentColumnIO).getChild(index);
    currentIndex[currentLevel]=index;
    emptyField=true;
    if (DEBUG)     printState();
  }
 catch (  RuntimeException e) {
    throw new ParquetEncodingException(""String_Node_Str"" + field + ""String_Node_Str""+ index,e);
  }
}","@Override public void startField(String field,int index){
  try {
    if (DEBUG)     log(""String_Node_Str"" + field + ""String_Node_Str""+ index+ ""String_Node_Str"");
    currentColumnIO=((GroupColumnIO)currentColumnIO).getChild(index);
    emptyField=true;
    if (DEBUG)     printState();
  }
 catch (  RuntimeException e) {
    throw new ParquetEncodingException(""String_Node_Str"" + field + ""String_Node_Str""+ index,e);
  }
}",0.913793103448276
111992,"public void printState(){
  log(currentLevel + ""String_Node_Str"" + currentIndex[currentLevel]+ ""String_Node_Str""+ Arrays.toString(currentColumnIO.getFieldPath())+ ""String_Node_Str""+ r[currentLevel]);
  if (r[currentLevel] > currentColumnIO.getRepetitionLevel()) {
    throw new InvalidRecordException(r[currentLevel] + ""String_Node_Str"" + currentColumnIO.getRepetitionLevel()+ ""String_Node_Str"");
  }
}","public void printState(){
  log(currentLevel + ""String_Node_Str"" + fieldsWritten[currentLevel]+ ""String_Node_Str""+ Arrays.toString(currentColumnIO.getFieldPath())+ ""String_Node_Str""+ r[currentLevel]);
  if (r[currentLevel] > currentColumnIO.getRepetitionLevel()) {
    throw new InvalidRecordException(r[currentLevel] + ""String_Node_Str"" + currentColumnIO.getRepetitionLevel()+ ""String_Node_Str"");
  }
}",0.968944099378882
111993,"public MessageColumnIORecordConsumer(ColumnWriteStore columns){
  int maxDepth=0;
  this.columnWriter=new ColumnWriter[MessageColumnIO.this.getLeaves().size()];
  for (  PrimitiveColumnIO primitiveColumnIO : MessageColumnIO.this.getLeaves()) {
    maxDepth=Math.max(maxDepth,primitiveColumnIO.getFieldPath().length);
    columnWriter[primitiveColumnIO.getId()]=columns.getColumnWriter(primitiveColumnIO.getColumnDescriptor());
  }
  currentIndex=new int[maxDepth];
  r=new int[maxDepth];
}","public MessageColumnIORecordConsumer(ColumnWriteStore columns){
  int maxDepth=0;
  this.columnWriter=new ColumnWriter[MessageColumnIO.this.getLeaves().size()];
  for (  PrimitiveColumnIO primitiveColumnIO : MessageColumnIO.this.getLeaves()) {
    maxDepth=Math.max(maxDepth,primitiveColumnIO.getFieldPath().length);
    columnWriter[primitiveColumnIO.getId()]=columns.getColumnWriter(primitiveColumnIO.getColumnDescriptor());
  }
  fieldsWritten=new FieldsMarker[maxDepth];
  for (int i=0; i < maxDepth; i++) {
    fieldsWritten[i]=new FieldsMarker();
  }
  r=new int[maxDepth];
}",0.8841121495327103
111994,"@Override public void startGroup(){
  if (DEBUG)   log(""String_Node_Str"");
  ++currentLevel;
  r[currentLevel]=r[currentLevel - 1];
  currentIndex[currentLevel]=0;
  if (DEBUG)   printState();
}","@Override public void startGroup(){
  if (DEBUG)   log(""String_Node_Str"");
  ++currentLevel;
  r[currentLevel]=r[currentLevel - 1];
  int fieldsCount=((GroupColumnIO)currentColumnIO).getChildrenCount();
  fieldsWritten[currentLevel].reset(fieldsCount);
  if (DEBUG)   printState();
}",0.7589098532494759
111995,"@Override public void endMessage(){
  writeNullForMissingFields(((GroupColumnIO)currentColumnIO).getChildrenCount() - 1);
  if (DEBUG)   log(""String_Node_Str"");
  if (DEBUG)   printState();
}","@Override public void endMessage(){
  writeNullForMissingFieldsAtCurrentLevel();
  if (DEBUG)   log(""String_Node_Str"");
  if (DEBUG)   printState();
}",0.844574780058651
111996,"@Override public void startMessage(){
  if (DEBUG)   log(""String_Node_Str"");
  currentColumnIO=MessageColumnIO.this;
  r[0]=0;
  currentIndex[0]=0;
  if (DEBUG)   printState();
}","@Override public void startMessage(){
  if (DEBUG)   log(""String_Node_Str"");
  currentColumnIO=MessageColumnIO.this;
  r[0]=0;
  int numberOfFieldsToVisit=((GroupColumnIO)currentColumnIO).getChildrenCount();
  fieldsWritten[0].reset(numberOfFieldsToVisit);
  if (DEBUG)   printState();
}",0.7354838709677419
111997,"@Override public void endGroup(){
  if (DEBUG)   log(""String_Node_Str"");
  emptyField=false;
  int lastIndex=((GroupColumnIO)currentColumnIO).getChildrenCount() - 1;
  writeNullForMissingFields(lastIndex);
  --currentLevel;
  setRepetitionLevel();
  if (DEBUG)   printState();
}","@Override public void endGroup(){
  if (DEBUG)   log(""String_Node_Str"");
  emptyField=false;
  writeNullForMissingFieldsAtCurrentLevel();
  --currentLevel;
  setRepetitionLevel();
  if (DEBUG)   printState();
}",0.7991803278688525
111998,"@Override public void endField(String field,int index){
  if (DEBUG)   log(""String_Node_Str"" + field + ""String_Node_Str""+ index+ ""String_Node_Str"");
  currentColumnIO=currentColumnIO.getParent();
  if (emptyField) {
    throw new ParquetEncodingException(""String_Node_Str"");
  }
  currentIndex[currentLevel]=index + 1;
  r[currentLevel]=currentLevel == 0 ? 0 : r[currentLevel - 1];
  if (DEBUG)   printState();
}","@Override public void endField(String field,int index){
  if (DEBUG)   log(""String_Node_Str"" + field + ""String_Node_Str""+ index+ ""String_Node_Str"");
  currentColumnIO=currentColumnIO.getParent();
  if (emptyField) {
    throw new ParquetEncodingException(""String_Node_Str"");
  }
  fieldsWritten[currentLevel].markWritten(index);
  r[currentLevel]=currentLevel == 0 ? 0 : r[currentLevel - 1];
  if (DEBUG)   printState();
}",0.9112709832134293
111999,"@Override public void startField(String field,int index){
  try {
    if (DEBUG)     log(""String_Node_Str"" + field + ""String_Node_Str""+ index+ ""String_Node_Str"");
    writeNullForMissingFields(index - 1);
    currentColumnIO=((GroupColumnIO)currentColumnIO).getChild(index);
    currentIndex[currentLevel]=index;
    emptyField=true;
    if (DEBUG)     printState();
  }
 catch (  RuntimeException e) {
    throw new ParquetEncodingException(""String_Node_Str"" + field + ""String_Node_Str""+ index,e);
  }
}","@Override public void startField(String field,int index){
  try {
    if (DEBUG)     log(""String_Node_Str"" + field + ""String_Node_Str""+ index+ ""String_Node_Str"");
    currentColumnIO=((GroupColumnIO)currentColumnIO).getChild(index);
    emptyField=true;
    if (DEBUG)     printState();
  }
 catch (  RuntimeException e) {
    throw new ParquetEncodingException(""String_Node_Str"" + field + ""String_Node_Str""+ index,e);
  }
}",0.913793103448276
112000,"public void printState(){
  log(currentLevel + ""String_Node_Str"" + currentIndex[currentLevel]+ ""String_Node_Str""+ Arrays.toString(currentColumnIO.getFieldPath())+ ""String_Node_Str""+ r[currentLevel]);
  if (r[currentLevel] > currentColumnIO.getRepetitionLevel()) {
    throw new InvalidRecordException(r[currentLevel] + ""String_Node_Str"" + currentColumnIO.getRepetitionLevel()+ ""String_Node_Str"");
  }
}","public void printState(){
  log(currentLevel + ""String_Node_Str"" + fieldsWritten[currentLevel]+ ""String_Node_Str""+ Arrays.toString(currentColumnIO.getFieldPath())+ ""String_Node_Str""+ r[currentLevel]);
  if (r[currentLevel] > currentColumnIO.getRepetitionLevel()) {
    throw new InvalidRecordException(r[currentLevel] + ""String_Node_Str"" + currentColumnIO.getRepetitionLevel()+ ""String_Node_Str"");
  }
}",0.968944099378882
