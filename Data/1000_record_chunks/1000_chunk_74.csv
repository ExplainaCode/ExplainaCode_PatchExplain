record_number,buggy_code,fixed_code,code_similarity
73001,"/** 
 * Updates XTab for Axis chart sync
 * @param cell
 * @param hostChartHandle
 * @param bTransOld
 * @param cmNew
 * @throws BirtException
 */
public static void updateXTabForAxis(AggregationCellHandle cell,ExtendedItemHandle hostChartHandle,boolean bTransOld,Chart cmNew) throws BirtException {
  boolean bTransNew=((ChartWithAxes)cmNew).isTransposed();
  if (bTransOld != bTransNew) {
    ChartXTabUtil.updateXTabDirection(cell.getCrosstab(),bTransNew);
    int measureCount=cell.getCrosstab().getMeasureCount();
    for (int i=0; i < measureCount - 1; i++) {
      ExtendedItemHandle chartInOtherMeasure=findChartInOtherMeasures(cell);
      if (chartInOtherMeasure != null) {
        if (isAxisChart(chartInOtherMeasure)) {
          chartInOtherMeasure=findReferenceChart(chartInOtherMeasure);
        }
        updateChartModelWhenTransposing((ChartWithAxes)cmNew,(ChartWithAxes)getChartFromHandle(chartInOtherMeasure));
        AggregationCellHandle cellAgg=getXtabContainerCell(chartInOtherMeasure);
        removeAxisChartInXTab(cellAgg,bTransOld);
        addAxisChartInXTab(cellAgg,bTransNew,chartInOtherMeasure);
      }
    }
    removeAxisChartInXTab(cell,bTransOld);
    addAxisChartInXTab(cell,bTransNew,hostChartHandle);
  }
}","/** 
 * Updates XTab for Axis chart sync
 * @param cell
 * @param hostChartHandle
 * @param bTransOld
 * @param cmNew
 * @throws BirtException
 */
public static void updateXTabForAxis(AggregationCellHandle cell,ExtendedItemHandle hostChartHandle,boolean bTransOld,Chart cmNew) throws BirtException {
  boolean bTransNew=((ChartWithAxes)cmNew).isTransposed();
  if (bTransOld != bTransNew) {
    ChartXTabUtil.updateXTabDirection(cell.getCrosstab(),bTransNew);
    int measureCount=cell.getCrosstab().getMeasureCount();
    for (int i=0; i < measureCount - 1; i++) {
      ExtendedItemHandle chartInOtherMeasure=findChartInOtherMeasures(cell);
      if (chartInOtherMeasure != null) {
        if (isAxisChart(chartInOtherMeasure)) {
          chartInOtherMeasure=findReferenceChart(chartInOtherMeasure);
        }
        updateChartModelWhenTransposing(chartInOtherMeasure,(ChartWithAxes)cmNew);
        AggregationCellHandle cellAgg=getXtabContainerCell(chartInOtherMeasure);
        removeAxisChartInXTab(cellAgg,bTransOld);
        addAxisChartInXTab(cellAgg,bTransNew,chartInOtherMeasure);
      }
    }
    removeAxisChartInXTab(cell,bTransOld);
    addAxisChartInXTab(cell,bTransNew,hostChartHandle);
  }
}",0.7352582350549004
73002,"private static void updateChartModelWhenTransposing(ChartWithAxes cmFrom,ChartWithAxes cmTo){
  cmTo.setTransposed(cmFrom.isTransposed());
  Query queryFrom=(Query)((SeriesDefinition)((Axis)cmFrom.getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries().getDataDefinition().get(0);
  Query queryTo=(Query)((SeriesDefinition)((Axis)cmTo.getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries().getDataDefinition().get(0);
  queryTo.setDefinition(queryFrom.getDefinition());
}","private static void updateChartModelWhenTransposing(ExtendedItemHandle eih,ChartWithAxes cmFrom) throws ExtendedElementException {
  ChartReportItemImpl reportItem=(ChartReportItemImpl)eih.getReportItem();
  ChartWithAxes cmOld=(ChartWithAxes)reportItem.getProperty(ChartReportItemConstants.PROPERTY_CHART);
  ChartWithAxes cmNew=(ChartWithAxes)EcoreUtil.copy(cmOld);
  cmNew.setTransposed(cmFrom.isTransposed());
  Query queryFrom=(Query)((SeriesDefinition)((Axis)cmFrom.getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries().getDataDefinition().get(0);
  Query queryTo=(Query)((SeriesDefinition)((Axis)cmNew.getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries().getDataDefinition().get(0);
  queryTo.setDefinition(queryFrom.getDefinition());
  reportItem.executeSetModelCommand(eih,cmOld,cmNew);
}",0.2128935532233883
73003,"public FlipAxisAction(ExtendedItemHandle eih){
  super(Messages.getString(""String_Node_Str""),Action.AS_CHECK_BOX);
  this.eih=eih;
  this.cwa=(ChartWithAxes)ChartXTabUtil.getChartFromHandle(eih);
  this.setChecked(cwa.isTransposed());
  this.setEnabled(checkEnabled());
}","public FlipAxisAction(ExtendedItemHandle eih){
  super(Messages.getString(""String_Node_Str""),Action.AS_CHECK_BOX);
  this.eih=eih;
  this.setChecked(ChartXTabUIUtil.isTransposedChartWithAxes(ChartXTabUtil.getChartFromHandle(eih)));
  this.setEnabled(checkEnabled());
}",0.712430426716141
73004,"@Override public void run(){
  try {
    AggregationCellHandle containerCell=ChartXTabUtil.getXtabContainerCell(eih);
    if (containerCell != null) {
      List<String> exprs=ChartXTabUtil.getAllLevelsBindingExpression(containerCell.getCrosstab());
      Query query=(Query)((SeriesDefinition)((Axis)cwa.getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries().getDataDefinition().get(0);
      if (cwa.isTransposed()) {
        cwa.setTransposed(false);
        query.setDefinition(exprs.get(0));
        ChartXTabUIUtil.updateXTabForAxis(containerCell,eih,true,cwa);
      }
 else {
        cwa.setTransposed(true);
        query.setDefinition(exprs.get(1));
        ChartXTabUIUtil.updateXTabForAxis(containerCell,eih,false,cwa);
      }
    }
  }
 catch (  BirtException e) {
    ChartWizard.displayException(e);
  }
}","@Override public void run(){
  try {
    AggregationCellHandle containerCell=ChartXTabUtil.getXtabContainerCell(eih);
    if (containerCell != null) {
      ChartReportItemImpl reportItem=(ChartReportItemImpl)eih.getReportItem();
      ChartWithAxes cmOld=(ChartWithAxes)reportItem.getProperty(ChartReportItemConstants.PROPERTY_CHART);
      ChartWithAxes cmNew=(ChartWithAxes)EcoreUtil.copy(cmOld);
      List<String> exprs=ChartXTabUtil.getAllLevelsBindingExpression(containerCell.getCrosstab());
      Query query=(Query)((SeriesDefinition)((Axis)cmNew.getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries().getDataDefinition().get(0);
      eih.getRoot().getCommandStack().startTrans(getText());
      if (cmNew.isTransposed()) {
        cmNew.setTransposed(false);
        query.setDefinition(exprs.get(0));
        ChartXTabUIUtil.updateXTabForAxis(containerCell,eih,true,cmNew);
      }
 else {
        cmNew.setTransposed(true);
        query.setDefinition(exprs.get(1));
        ChartXTabUIUtil.updateXTabForAxis(containerCell,eih,false,cmNew);
      }
      reportItem.executeSetModelCommand(eih,cmOld,cmNew);
    }
    eih.getRoot().getCommandStack().commit();
  }
 catch (  BirtException e) {
    ChartWizard.displayException(e);
    eih.getRoot().getCommandStack().rollback();
  }
}",0.7737430167597765
73005,"private boolean checkEnabled(){
  try {
    AggregationCellHandle containerCell=ChartXTabUtil.getXtabContainerCell(eih);
    if (containerCell != null) {
      List<String> exprs=ChartXTabUtil.getAllLevelsBindingExpression(containerCell.getCrosstab());
      return exprs.size() == 2 && !ChartXTabUtil.isAggregationCell(containerCell);
    }
  }
 catch (  BirtException e) {
    ChartWizard.displayException(e);
  }
  return false;
}","private boolean checkEnabled(){
  try {
    if (ChartXTabUtil.isAxisChart(eih)) {
      eih=(ExtendedItemHandle)eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
    }
    if (ChartXTabUtil.isPlotChart(eih)) {
      AggregationCellHandle containerCell=ChartXTabUtil.getXtabContainerCell(eih);
      if (containerCell != null) {
        List<String> exprs=ChartXTabUtil.getAllLevelsBindingExpression(containerCell.getCrosstab());
        return exprs.size() == 2 && !ChartXTabUtil.isAggregationCell(containerCell);
      }
    }
  }
 catch (  BirtException e) {
    ChartWizard.displayException(e);
  }
  return false;
}",0.7817164179104478
73006,"public String getColumnText(Object element,int columnIndex){
switch (columnIndex) {
case 0:
    return ((ComputedColumnHandle)element).getName();
case 1:
  return getDataTypeDisplayName(((ComputedColumnHandle)element).getDataType());
case 2:
return ((ComputedColumnHandle)element).getExpression();
case 3:
String ExpValue=((ComputedColumnHandle)element).getFilterExpression();
if (ExpValue != null && ExpValue.length() > 0) {
return ExpValue;
}
 else {
return null;
}
case 4:
String value=DEUtil.getAggregateOn((ComputedColumnHandle)element);
String groupType=DEUtil.getGroupControlType(bindingObject);
String text;
if (value == null) {
if ((ExpressionUtil.hasAggregation(((ComputedColumnHandle)element).getExpression()) && groupType != DEUtil.TYPE_GROUP_NONE) || ((ComputedColumnHandle)element).getAggregateFunction() != null) {
text=ALL;
}
 else text=NONE;
}
 else text=value;
return text;
default :
break;
}
return null;
}","public String getColumnText(Object element,int columnIndex){
switch (columnIndex) {
case 0:
    return ((ComputedColumnHandle)element).getName();
case 1:
  return getDataTypeDisplayName(((ComputedColumnHandle)element).getDataType());
case 2:
return DataUtil.getAggregationExpression((ComputedColumnHandle)element);
case 3:
String ExpValue=((ComputedColumnHandle)element).getFilterExpression();
if (ExpValue != null && ExpValue.length() > 0) {
return ExpValue;
}
 else {
return null;
}
case 4:
String value=DEUtil.getAggregateOn((ComputedColumnHandle)element);
String groupType=DEUtil.getGroupControlType(bindingObject);
String text;
if (value == null) {
if ((ExpressionUtil.hasAggregation(((ComputedColumnHandle)element).getExpression()) && groupType != DEUtil.TYPE_GROUP_NONE) || ((ComputedColumnHandle)element).getAggregateFunction() != null) {
text=ALL;
}
 else text=NONE;
}
 else text=value;
return text;
default :
break;
}
return null;
}",0.9737546866630958
73007,"protected String getText(){
  if (!hasBindingFunction()) {
    return super.getText();
  }
  String retValue=getMeasureName();
  if (retValue == null) {
    return super.getText();
  }
  ((LabelFigure)getFigure()).setSpecialPREFIX(PREFIX);
  return PREFIX + ""String_Node_Str"" + retValue+ ""String_Node_Str"";
}","protected String getText(){
  String retValue=getMeasureName();
  if (retValue == null) {
    return super.getText();
  }
  ((LabelFigure)getFigure()).setSpecialPREFIX(PREFIX);
  return PREFIX + ""String_Node_Str"" + retValue+ ""String_Node_Str"";
}",0.8860759493670886
73008,"private String getMeasureName(){
  try {
    DataItemHandle handle=(DataItemHandle)getModel();
    ComputedColumnHandle bindingColumn=DEUtil.getInputBinding(handle,handle.getResultSetColumn());
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    return session.getCubeQueryUtil().getReferencedMeasureName(bindingColumn.getExpression());
  }
 catch (  BirtException e) {
    return null;
  }
}","private String getMeasureName(){
  try {
    DataItemHandle handle=(DataItemHandle)getModel();
    ComputedColumnHandle bindingColumn=DEUtil.getInputBinding(handle,handle.getResultSetColumn());
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    return session.getCubeQueryUtil().getReferencedMeasureName(DataUtil.getAggregationExpression(bindingColumn));
  }
 catch (  BirtException e) {
    return null;
  }
}",0.9453044375644994
73009,"/** 
 * @param type
 * @return
 */
public static int modelDataTypeToCoreDataType(String type){
  int typeNum=DataType.ANY_TYPE;
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type))   typeNum=DataType.STRING_TYPE;
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type))   typeNum=DataType.DOUBLE_TYPE;
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type))   typeNum=DataType.DECIMAL_TYPE;
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type))   typeNum=DataType.DATE_TYPE;
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type))   typeNum=DataType.BOOLEAN_TYPE;
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type))   typeNum=DataType.INTEGER_TYPE;
  return typeNum;
}","/** 
 * @param type
 * @return
 */
public static int modelDataTypeToCoreDataType(String type){
  int typeNum=DataType.ANY_TYPE;
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type))   typeNum=DataType.STRING_TYPE;
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type))   typeNum=DataType.DOUBLE_TYPE;
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type))   typeNum=DataType.DECIMAL_TYPE;
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type))   typeNum=DataType.DATE_TYPE;
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type))   typeNum=DataType.SQL_DATE_TYPE;
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type))   typeNum=DataType.SQL_TIME_TYPE;
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type))   typeNum=DataType.BOOLEAN_TYPE;
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type))   typeNum=DataType.INTEGER_TYPE;
  return typeNum;
}",0.8822115384615384
73010,"protected EngineTask(ReportEngine engine,int taskType){
  this.engine=engine;
  this.taskType=taskType;
  taskID=id++;
  this.log=engine.getLogger();
  executionContext=new ExecutionContext(this);
  executionContext.setReportContext(new ReportContextImpl(executionContext));
  setAppContext(engine.getConfig().getAppContext());
  cancelFlag=false;
  runningStatus=STATUS_NOT_STARTED;
}","protected EngineTask(ReportEngine engine,int taskType){
  this.engine=engine;
  this.taskType=taskType;
  taskID=id++;
  this.log=engine.getLogger();
  executionContext=new ExecutionContext(this);
  executionContext.setReportContext(new ReportContextImpl(executionContext));
  setAppContext(null);
  cancelFlag=false;
  runningStatus=STATUS_NOT_STARTED;
}",0.9486486486486486
73011,"/** 
 * Merges user specified app context to that of EngineTask. The context variables in entry with following keys will be ignored: <ul> <li><code>EngineConstants.APPCONTEXT_CLASSLOADER_KEY</code> <li><code>EngineConstants.WEBAPP_CLASSPATH_KEY</code> <li><code>EngineConstants.PROJECT_CLASSPATH_KEY</code> <li><code>EngineConstants.WORKSPACE_CLASSPATH_KEY</code> </ul>
 * @param from the source app contexts.
 * @param to the destination app contexts.
 */
private void addAppContext(Map from,Map to){
  if (to == null) {
    return;
  }
  Iterator iterator=from.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry entry=(Map.Entry)iterator.next();
    if (!isDeprecatedEntry(entry)) {
      to.put(entry.getKey(),entry.getValue());
    }
  }
}","/** 
 * Merges user specified app context to that of EngineTask. The context variables in entry with following keys will be ignored: <ul> <li><code>EngineConstants.APPCONTEXT_CLASSLOADER_KEY</code> <li><code>EngineConstants.WEBAPP_CLASSPATH_KEY</code> <li><code>EngineConstants.PROJECT_CLASSPATH_KEY</code> <li><code>EngineConstants.WORKSPACE_CLASSPATH_KEY</code> </ul>
 * @param from the source app contexts.
 * @param to the destination app contexts.
 */
private void addAppContext(Map from,Map to){
  if (from == null || to == null) {
    return;
  }
  Iterator iterator=from.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry entry=(Map.Entry)iterator.next();
    if (!isDeprecatedEntry(entry)) {
      to.put(entry.getKey(),entry.getValue());
    }
  }
}",0.9869791666666666
73012,"private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  ILevel[] level=dimensions[1].getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[0];
  IDiskArray[] positionForFilter=null;
  positionForFilter=new IDiskArray[2];
  IDiskArray positionArray=dimensions[1].find(findLevel,filter);
  positionForFilter[0]=positionArray;
  assertEquals(positionArray.size(),2);
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[2];
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[1],positionArray,new StopSign());
  positionArray=dimensions[2].findAll();
  dimesionResultSets[1]=new DimensionResultIterator(dimensions[2],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[2];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  dimensionNamesForFilter[1]=""String_Node_Str"";
  positionForFilter[1]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dimesionResultSets,facttableRowIterator,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}","private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  ILevel[] level=dimensions[1].getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[0];
  IDiskArray[] positionForFilter=null;
  positionForFilter=new IDiskArray[2];
  IDiskArray positionArray=dimensions[1].find(findLevel,filter);
  positionForFilter[0]=positionArray;
  assertEquals(positionArray.size(),2);
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[2];
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[1],positionArray,new StopSign());
  positionArray=dimensions[2].findAll();
  dimesionResultSets[1]=new DimensionResultIterator(dimensions[2],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[2];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  dimensionNamesForFilter[1]=""String_Node_Str"";
  positionForFilter[1]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=DataSet4AggregationFactory.createDataSet4Aggregation(facttableRowIterator,dimesionResultSets);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}",0.968416706805202
73013,"private void testFactTableSaveAndLoad4(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(cube);
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addSimpleLevelFilter(new SimpleLevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}","private void testFactTableSaveAndLoad4(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(cube);
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addSimpleLevelFilter(new SimpleLevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}",0.996123697131536
73014,"public static ICubeQueryDefinition createCubeQuery(CrosstabReportItemHandle crosstabItem,IDataQueryDefinition parentQuery,boolean needMeasure,boolean needRowDimension,boolean needColumnDimension,boolean needBinding,boolean needSorting,boolean needFilter) throws BirtException {
  ICubeQueryDefinition cubeQuery=getCubeElementFactory().createCubeQuery(crosstabItem.getCubeName());
  List rowLevelNameList=new ArrayList();
  List columnLevelNameList=new ArrayList();
  List levelViewList=new ArrayList();
  Map levelMap=new HashMap();
  if (needMeasure) {
    for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      if (mv.getCubeMeasure() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",mv.getCubeMeasureName()));
      }
      IMeasureDefinition mDef=cubeQuery.createMeasure(mv.getCubeMeasure().getName());
      mDef.setAggrFunction(mv.getCubeMeasure().getFunction() == null ? null : DataAdapterUtil.getRollUpAggregationName(mv.getCubeMeasure().getFunction()));
      Iterator mfitr=mv.filtersIterator();
      if (mfitr != null) {
        while (mfitr.hasNext()) {
          FilterConditionElementHandle filterCon=(FilterConditionElementHandle)mfitr.next();
          ConditionalExpression filterCondExpr;
          if (ModuleUtil.isListFilterValue(filterCon)) {
            filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1List());
          }
 else {
            filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1(),filterCon.getValue2());
          }
          ICubeFilterDefinition filterDef=getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,null,null,null);
          cubeQuery.addFilter(filterDef);
        }
      }
    }
  }
  if (needRowDimension && crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
    IEdgeDefinition rowEdge=cubeQuery.createEdge(ICubeQueryDefinition.ROW_EDGE);
    LevelHandle mirrorLevel=crosstabItem.getCrosstabView(ROW_AXIS_TYPE).getMirroredStartingLevel();
    for (int i=0; i < crosstabItem.getDimensionCount(ROW_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      IDimensionDefinition dimDef=rowEdge.createDimension(dv.getCubeDimension().getName());
      IHierarchyDefinition hieDef=dimDef.createHierarchy(dv.getCubeDimension().getDefaultHierarchy().getName());
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        ILevelDefinition levelDef=hieDef.createLevel(lv.getCubeLevel().getName());
        rowLevelNameList.add(lv.getCubeLevel().getFullName());
        if (mirrorLevel != null && mirrorLevel.getQualifiedName().equals(lv.getCubeLevelName())) {
          rowEdge.setMirrorStartingLevel(levelDef);
        }
        levelViewList.add(lv);
        levelMap.put(lv.getCubeLevel(),levelDef);
      }
    }
  }
  if (needColumnDimension && crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
    IEdgeDefinition columnEdge=cubeQuery.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
    LevelHandle mirrorLevel=crosstabItem.getCrosstabView(COLUMN_AXIS_TYPE).getMirroredStartingLevel();
    for (int i=0; i < crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      IDimensionDefinition dimDef=columnEdge.createDimension(dv.getCubeDimension().getName());
      IHierarchyDefinition hieDef=dimDef.createHierarchy(dv.getCubeDimension().getDefaultHierarchy().getName());
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        ILevelDefinition levelDef=hieDef.createLevel(lv.getCubeLevel().getName());
        columnLevelNameList.add(lv.getCubeLevel().getFullName());
        if (mirrorLevel != null && mirrorLevel.getQualifiedName().equals(lv.getCubeLevelName())) {
          columnEdge.setMirrorStartingLevel(levelDef);
        }
        levelViewList.add(lv);
        levelMap.put(lv.getCubeLevel(),levelDef);
      }
    }
  }
  if (needSorting) {
    addLevelSorting(levelViewList,levelMap,cubeQuery);
  }
  if (needFilter) {
    addLevelFilter(levelViewList,levelMap,cubeQuery);
  }
  if (needBinding) {
    Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
    ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
    if (bindingItr != null) {
      Map cache=new HashMap();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(new ScriptExpression(column.getExpression()));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(new ScriptExpression(column.getFilterExpression()));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          binding.addArgument(new ScriptExpression(aah.getValue()));
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        cubeQuery.addBinding(binding);
      }
    }
  }
  return cubeQuery;
}","public static ICubeQueryDefinition createCubeQuery(CrosstabReportItemHandle crosstabItem,IDataQueryDefinition parentQuery,boolean needMeasure,boolean needRowDimension,boolean needColumnDimension,boolean needBinding,boolean needSorting,boolean needFilter) throws BirtException {
  ICubeQueryDefinition cubeQuery=getCubeElementFactory().createCubeQuery(crosstabItem.getCubeName());
  List rowLevelNameList=new ArrayList();
  List columnLevelNameList=new ArrayList();
  List levelViewList=new ArrayList();
  Map levelMap=new HashMap();
  if (needMeasure) {
    for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      if (mv instanceof ComputedMeasureViewHandle) {
        continue;
      }
      if (mv.getCubeMeasure() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",mv.getCubeMeasureName()));
      }
      IMeasureDefinition mDef=cubeQuery.createMeasure(mv.getCubeMeasure().getName());
      mDef.setAggrFunction(mv.getCubeMeasure().getFunction() == null ? null : DataAdapterUtil.getRollUpAggregationName(mv.getCubeMeasure().getFunction()));
      Iterator mfitr=mv.filtersIterator();
      if (mfitr != null) {
        while (mfitr.hasNext()) {
          FilterConditionElementHandle filterCon=(FilterConditionElementHandle)mfitr.next();
          ConditionalExpression filterCondExpr;
          if (ModuleUtil.isListFilterValue(filterCon)) {
            filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1List());
          }
 else {
            filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1(),filterCon.getValue2());
          }
          ICubeFilterDefinition filterDef=getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,null,null,null);
          cubeQuery.addFilter(filterDef);
        }
      }
    }
  }
  if (needRowDimension && crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
    IEdgeDefinition rowEdge=cubeQuery.createEdge(ICubeQueryDefinition.ROW_EDGE);
    LevelHandle mirrorLevel=crosstabItem.getCrosstabView(ROW_AXIS_TYPE).getMirroredStartingLevel();
    for (int i=0; i < crosstabItem.getDimensionCount(ROW_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      IDimensionDefinition dimDef=rowEdge.createDimension(dv.getCubeDimension().getName());
      IHierarchyDefinition hieDef=dimDef.createHierarchy(dv.getCubeDimension().getDefaultHierarchy().getName());
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        ILevelDefinition levelDef=hieDef.createLevel(lv.getCubeLevel().getName());
        rowLevelNameList.add(lv.getCubeLevel().getFullName());
        if (mirrorLevel != null && mirrorLevel.getQualifiedName().equals(lv.getCubeLevelName())) {
          rowEdge.setMirrorStartingLevel(levelDef);
        }
        levelViewList.add(lv);
        levelMap.put(lv.getCubeLevel(),levelDef);
      }
    }
  }
  if (needColumnDimension && crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
    IEdgeDefinition columnEdge=cubeQuery.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
    LevelHandle mirrorLevel=crosstabItem.getCrosstabView(COLUMN_AXIS_TYPE).getMirroredStartingLevel();
    for (int i=0; i < crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      IDimensionDefinition dimDef=columnEdge.createDimension(dv.getCubeDimension().getName());
      IHierarchyDefinition hieDef=dimDef.createHierarchy(dv.getCubeDimension().getDefaultHierarchy().getName());
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        ILevelDefinition levelDef=hieDef.createLevel(lv.getCubeLevel().getName());
        columnLevelNameList.add(lv.getCubeLevel().getFullName());
        if (mirrorLevel != null && mirrorLevel.getQualifiedName().equals(lv.getCubeLevelName())) {
          columnEdge.setMirrorStartingLevel(levelDef);
        }
        levelViewList.add(lv);
        levelMap.put(lv.getCubeLevel(),levelDef);
      }
    }
  }
  if (needSorting) {
    addLevelSorting(levelViewList,levelMap,cubeQuery);
  }
  if (needFilter) {
    addLevelFilter(levelViewList,levelMap,cubeQuery);
  }
  if (needBinding) {
    Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
    ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
    if (bindingItr != null) {
      Map cache=new HashMap();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(column.getExpression() == null ? null : new ScriptExpression(column.getExpression()));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(new ScriptExpression(column.getFilterExpression()));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          binding.addArgument(new ScriptExpression(aah.getValue()));
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        cubeQuery.addBinding(binding);
      }
    }
  }
  return cubeQuery;
}",0.988263799500265
73015,"/** 
 * @see org.eclipse.gef.ui.parts.GraphicalViewerKeyHandler#keyPressed(org.eclipse.swt.events.KeyEvent)
 */
public boolean keyPressed(KeyEvent event){
  GraphicalEditPart part=getFocusEditPart();
  if (part instanceof AbstractCellEditPart) {
    return tableCellKeyPressed(event);
  }
  return super.keyPressed(event);
}","/** 
 * @see org.eclipse.gef.ui.parts.GraphicalViewerKeyHandler#keyPressed(org.eclipse.swt.events.KeyEvent)
 */
public boolean keyPressed(KeyEvent event){
  GraphicalEditPart part=getFocusEditPart();
switch (event.keyCode) {
case SWT.ARROW_LEFT:
case SWT.ARROW_RIGHT:
case SWT.ARROW_UP:
case SWT.ARROW_DOWN:
    if (scrollIncrement(part,event)) {
      return true;
    }
  break;
case SWT.PAGE_DOWN:
case SWT.PAGE_UP:
if (scrollPageIncrement(part,event.keyCode)) {
  return true;
}
break;
default :
break;
}
if (part instanceof AbstractCellEditPart) {
return tableCellKeyPressed(event);
}
return super.keyPressed(event);
}",0.6631467793030623
73016,"/** 
 * Populate One AggrDefinition according to given binding name.
 * @param result
 * @param cx
 * @param compiler
 * @param gbc
 * @param name
 * @throws DataException
 */
private void populateOneAggrDefinition(List result,Context cx,ExpressionCompiler compiler,GroupBindingColumn gbc,String name) throws DataException {
  IBinding binding=gbc.getBinding(name);
  if (isAggregationBinding(binding)) {
    List argument=binding.getArguments();
    IAggrFunction aggrFunction=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
    IBaseExpression[] compiledArgu=populateAggregationArgument(cx,compiler,binding,argument,aggrFunction);
    compiler.compile(binding.getFilter(),cx);
    AggrInfo aggrDefn=new AggrInfo(name,gbc.getGroupLevel(),aggrFunction,compiledArgu,binding.getFilter());
    result.add(aggrDefn);
  }
}","/** 
 * Populate One AggrDefinition according to given binding name.
 * @param result
 * @param cx
 * @param compiler
 * @param gbc
 * @param name
 * @throws DataException
 */
private void populateOneAggrDefinition(List result,Context cx,ExpressionCompiler compiler,GroupBindingColumn gbc,String name) throws DataException {
  IBinding binding=gbc.getBinding(name);
  if (isAggregationBinding(binding)) {
    List argument=new ArrayList(binding.getArguments());
    IAggrFunction aggrFunction=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
    if (binding.getExpression() != null)     argument.add(0,binding.getExpression());
    IBaseExpression[] compiledArgu=populateAggregationArgument(cx,compiler,binding,argument,aggrFunction);
    compiler.compile(binding.getFilter(),cx);
    AggrInfo aggrDefn=new AggrInfo(name,gbc.getGroupLevel(),aggrFunction,compiledArgu,binding.getFilter());
    result.add(aggrDefn);
  }
}",0.9202453987730062
73017,"protected void appendMetaData(IBaseQueryDefinition query){
  Map bindings=query.getBindings();
  Iterator iter=bindings.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    String name=(String)entry.getKey();
    IBinding binding=(IBinding)entry.getValue();
    try {
      IBaseExpression expr;
      expr=(IBaseExpression)binding.getExpression();
      int type=expr.getDataType();
      metaEntries.add(new MetaDataEntry(name,type));
    }
 catch (    DataException ex) {
    }
  }
}","protected void appendMetaData(IBaseQueryDefinition query){
  Map bindings=query.getBindings();
  Iterator iter=bindings.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    String name=(String)entry.getKey();
    IBinding binding=(IBinding)entry.getValue();
    try {
      metaEntries.add(new MetaDataEntry(name,binding.getDataType()));
    }
 catch (    DataException ex) {
    }
  }
}",0.8203530633437176
73018,"protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle columnBinding) throws BirtException {
  String name=columnBinding.getName();
  String expr=columnBinding.getExpression();
  String type=columnBinding.getDataType();
  String displayName=columnBinding.getDisplayName();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=new ScriptExpression(expr,dbType);
  if (columnBinding.getAggregateOn() != null) {
    dbExpr.setGroupName(columnBinding.getAggregateOn());
  }
  IBinding binding=new Binding(name,dbExpr);
  binding.setDisplayName(displayName);
  if (columnBinding.getAggregateOn() != null)   binding.addAggregateOn(columnBinding.getAggregateOn());
  if (columnBinding.getAggregateFunction() != null) {
    binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(columnBinding.getAggregateFunction()));
  }
  String filter=columnBinding.getFilterExpression();
  if (filter != null) {
    binding.setFilter(new ScriptExpression(filter));
  }
  Iterator arguments=columnBinding.argumentsIterator();
  if (arguments != null) {
    while (arguments.hasNext()) {
      AggregationArgumentHandle argumentHandle=(AggregationArgumentHandle)arguments.next();
      String argument=argumentHandle.getValue();
      if (argument != null) {
        binding.addArgument(new ScriptExpression(argument));
      }
    }
  }
  transfer.addBinding(binding);
}","protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle columnBinding) throws BirtException {
  String name=columnBinding.getName();
  String expr=columnBinding.getExpression();
  String type=columnBinding.getDataType();
  String displayName=columnBinding.getDisplayName();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=expr != null ? new ScriptExpression(expr,dbType) : null;
  if (columnBinding.getAggregateOn() != null) {
    dbExpr.setGroupName(columnBinding.getAggregateOn());
  }
  IBinding binding=new Binding(name,dbExpr);
  binding.setDisplayName(displayName);
  if (columnBinding.getAggregateOn() != null)   binding.addAggregateOn(columnBinding.getAggregateOn());
  if (columnBinding.getAggregateFunction() != null) {
    binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(columnBinding.getAggregateFunction()));
  }
  String filter=columnBinding.getFilterExpression();
  if (filter != null) {
    binding.setFilter(new ScriptExpression(filter));
  }
  Iterator arguments=columnBinding.argumentsIterator();
  if (arguments != null) {
    while (arguments.hasNext()) {
      AggregationArgumentHandle argumentHandle=(AggregationArgumentHandle)arguments.next();
      String argument=argumentHandle.getValue();
      if (argument != null) {
        binding.addArgument(new ScriptExpression(argument));
      }
    }
  }
  transfer.addBinding(binding);
}",0.9922698524244554
73019,"public Shell createPopupContainer(){
  if (shellPopup != null && !shellPopup.isDisposed()) {
    shellPopup.dispose();
  }
  if (shellPopup == null || shellPopup.isDisposed()) {
    int shellStyle=SWT.DIALOG_TRIM | SWT.RESIZE;
    if (SWT.getPlatform().indexOf(""String_Node_Str"") < 0) {
      shellStyle|=SWT.APPLICATION_MODAL;
    }
    shellPopup=new Shell(getShell(),shellStyle);
    shellPopup.setLayout(new FillLayout());
  }
  return shellPopup;
}","public Shell createPopupContainer(){
  if (shellPopup != null && !shellPopup.isDisposed()) {
    shellPopup.dispose();
  }
  if (shellPopup == null || shellPopup.isDisposed()) {
    int shellStyle=SWT.DIALOG_TRIM | SWT.RESIZE;
    shellPopup=new Shell(getShell(),shellStyle);
    shellPopup.setLayout(new FillLayout());
  }
  return shellPopup;
}",0.8660826032540676
73020,"/** 
 * Determine the report design and doc 's timestamp
 * @param request
 * @throws Exception
 */
protected void processReport(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(this.requestType) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath()))   return;
  if (this.reportDocumentName == null)   return;
  File reportDocFile=new File(this.reportDocumentName);
  long lastModifiedOfDesign=getLastModifiedOfDesign(request);
  if (lastModifiedOfDesign != -1L && reportDocFile != null && reportDocFile.exists() && reportDocFile.isFile()) {
    if (lastModifiedOfDesign > reportDocFile.lastModified() || ParameterAccessor.isOverwrite(request)) {
      reportDocFile.delete();
    }
  }
}","/** 
 * Determine the report design and doc 's timestamp
 * @param request
 * @throws Exception
 */
protected void processReport(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(this.requestType) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_EXTRACT.equalsIgnoreCase(request.getServletPath()))   return;
  if (this.reportDocumentName == null)   return;
  File reportDocFile=new File(this.reportDocumentName);
  long lastModifiedOfDesign=getLastModifiedOfDesign(request);
  if (lastModifiedOfDesign != -1L && reportDocFile != null && reportDocFile.exists() && reportDocFile.isFile()) {
    if (lastModifiedOfDesign > reportDocFile.lastModified() || ParameterAccessor.isOverwrite(request)) {
      reportDocFile.delete();
    }
  }
}",0.9501216545012166
73021,"protected void drawTableBorder(TableArea table){
}","protected void drawTableBorder(TableArea table){
  TableBorder tb=new TableBorder(table.getX(),table.getY());
  traverseRows(tb,table,tb.tableX,tb.tableY);
  drawBorder(tb);
}",0.4444444444444444
73022,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static int runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getSession().getTempDir(),dataEngine.getContext(),queryResultInfo);
  IBaseQueryDefinition previousQueryDefn=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.PARENT_SCOPE);
  if (QueryCompUtil.isIVQueryDefnEqual(previousQueryDefn,queryDefn)) {
    return BASED_ON_PRESENTATION;
  }
  if (previousQueryDefn.getSorts() != null && previousQueryDefn.getSorts().size() > 0 && (queryDefn.getSorts() == null || queryDefn.getSorts().size() == 0)) {
    return BASED_ON_DATASET;
  }
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  runningOnRS=isCompatibleSubQuery(qd,queryDefn);
  if (runningOnRS == false)   return BASED_ON_DATASET;
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (!QueryCompUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
    Iterator bindings=queryDefn.getBindings().values().iterator();
    while (bindings.hasNext()) {
      IBinding binding=(IBinding)bindings.next();
      final String aggrName=binding.getAggrFunction();
      if (aggrName != null) {
        IAggrFunction aggrFunction=AggregationManager.getInstance().getAggregation(aggrName);
        if (aggrFunction.isDataOrderSensitive()) {
          return BASED_ON_DATASET;
        }
      }
      if (binding.getExpression() != null && binding.getExpression() instanceof IScriptExpression) {
        IScriptExpression expr=(IScriptExpression)binding.getExpression();
        if (ExpressionUtil.hasAggregation(expr.getText())) {
          if (expr.getText().matches(""String_Node_Str"") || expr.getText().matches(""String_Node_Str"")) {
            return BASED_ON_DATASET;
          }
        }
      }
    }
  }
  if (!isBindingReferenceSort(queryDefn.getSorts()))   return BASED_ON_DATASET;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return BASED_ON_DATASET;
    if (!QueryCompUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      if (groups != null && !groups.isEmpty())       runningOnRS=false;
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS ? BASED_ON_RESULTSET : BASED_ON_DATASET;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static int runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getSession().getTempDir(),dataEngine.getContext(),queryResultInfo);
  IBaseQueryDefinition previousQueryDefn=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.PARENT_SCOPE);
  if (QueryCompUtil.isIVQueryDefnEqual(dataEngine.getContext().getMode(),previousQueryDefn,queryDefn)) {
    return BASED_ON_PRESENTATION;
  }
  if (previousQueryDefn.getSorts() != null && previousQueryDefn.getSorts().size() > 0 && (queryDefn.getSorts() == null || queryDefn.getSorts().size() == 0)) {
    return BASED_ON_DATASET;
  }
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  runningOnRS=isCompatibleSubQuery(qd,queryDefn);
  if (runningOnRS == false)   return BASED_ON_DATASET;
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (!QueryCompUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
    Iterator bindings=queryDefn.getBindings().values().iterator();
    while (bindings.hasNext()) {
      IBinding binding=(IBinding)bindings.next();
      final String aggrName=binding.getAggrFunction();
      if (aggrName != null) {
        IAggrFunction aggrFunction=AggregationManager.getInstance().getAggregation(aggrName);
        if (aggrFunction.isDataOrderSensitive()) {
          return BASED_ON_DATASET;
        }
      }
      if (binding.getExpression() != null && binding.getExpression() instanceof IScriptExpression) {
        IScriptExpression expr=(IScriptExpression)binding.getExpression();
        if (ExpressionUtil.hasAggregation(expr.getText())) {
          if (expr.getText().matches(""String_Node_Str"") || expr.getText().matches(""String_Node_Str"")) {
            return BASED_ON_DATASET;
          }
        }
      }
    }
  }
  if (!isBindingReferenceSort(queryDefn.getSorts()))   return BASED_ON_DATASET;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return BASED_ON_DATASET;
    if (!QueryCompUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      if (groups != null && !groups.isEmpty())       runningOnRS=false;
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS ? BASED_ON_RESULTSET : BASED_ON_DATASET;
}",0.9964345637583892
73023,"private String[] getMesures(){
  try {
    CrosstabReportItemHandle xtabHandle=(CrosstabReportItemHandle)((ExtendedItemHandle)getBindingHolder()).getReportItem();
    String[] mesures=new String[xtabHandle.getMeasureCount() + 1];
    mesures[0]=""String_Node_Str"";
    for (int i=1; i < mesures.length; i++) {
      mesures[i]=DEUtil.getExpression(xtabHandle.getMeasure(i - 1).getCubeMeasure());
    }
    return mesures;
  }
 catch (  ExtendedElementException e) {
  }
  return new String[0];
}","private String[] getMesures(){
  try {
    CrosstabReportItemHandle xtabHandle=(CrosstabReportItemHandle)((ExtendedItemHandle)getBindingHolder()).getReportItem();
    List<String> measures=new ArrayList<String>();
    measures.add(""String_Node_Str"");
    for (int i=0; i < xtabHandle.getMeasureCount(); i++) {
      MeasureViewHandle mv=xtabHandle.getMeasure(i);
      if (mv instanceof ComputedMeasureViewHandle) {
        continue;
      }
      measures.add(DEUtil.getExpression(mv.getCubeMeasure()));
    }
    return measures.toArray(new String[measures.size()]);
  }
 catch (  ExtendedElementException e) {
  }
  return new String[0];
}",0.3327464788732394
73024,"/** 
 * Populate the aggregation binding argument. Please note the binding expression will serve as first argument of a binding in case of necessary.
 * @param cx
 * @param compiler
 * @param binding
 * @param argument
 * @param aggrFunction
 * @return
 * @throws DataException
 */
private IBaseExpression[] populateAggregationArgument(Context cx,ExpressionCompiler compiler,IBinding binding,List argument,IAggrFunction aggrFunction) throws DataException {
  int offset=0;
  if (aggrFunction.getParameterDefn().length > 0) {
    offset=1;
  }
  IBaseExpression[] compiledArgu=new IBaseExpression[argument.size() + offset];
  if (offset > 0) {
    compiledArgu[0]=binding.getExpression();
    compiler.compile(compiledArgu[0],cx);
  }
  for (int j=offset; j < argument.size() + offset; j++) {
    IScriptExpression scriptExpr=(IScriptExpression)argument.get(j - offset);
    compiler.compile(scriptExpr,cx);
    compiledArgu[j]=scriptExpr;
  }
  return compiledArgu;
}","/** 
 * Populate the aggregation binding argument. Please note the binding expression will serve as first argument of a binding in case of necessary.
 * @param cx
 * @param compiler
 * @param binding
 * @param argument
 * @param aggrFunction
 * @return
 * @throws DataException
 */
private IBaseExpression[] populateAggregationArgument(Context cx,ExpressionCompiler compiler,IBinding binding,List argument,IAggrFunction aggrFunction) throws DataException {
  IBaseExpression[] compiledArgu=new IBaseExpression[argument.size()];
  for (int j=0; j < argument.size(); j++) {
    IScriptExpression scriptExpr=(IScriptExpression)argument.get(j);
    compiler.compile(scriptExpr,cx);
    compiledArgu[j]=scriptExpr;
  }
  return compiledArgu;
}",0.7519061583577713
73025,"public CompatibilityStatus checkCompatibility(){
  if (getCrosstab().compStatus < 0) {
    ExtendedItemHandle exhandle=(ExtendedItemHandle)getModelHandle();
    Map illegalContents=exhandle.getIllegalContents();
    if (illegalContents.containsKey(IMeasureViewConstants.DETAIL_PROP)) {
      List detailInfoList=(List)illegalContents.get(IMeasureViewConstants.DETAIL_PROP);
      if (detailInfoList.size() > 0) {
        IllegalContentInfo detailInfo=(IllegalContentInfo)detailInfoList.get(0);
        ExtendedItemHandle oldDetail=(ExtendedItemHandle)detailInfo.getContent();
        if (oldDetail != null) {
          CompatibilityStatus status=new CompatibilityStatus();
          try {
            status.setStatusType(CompatibilityStatus.CONVERT_COMPATIBILITY_TYPE);
            ExtendedItemHandle newDetail=CrosstabExtendedItemFactory.createAggregationCell(getModuleHandle());
            handle.getPropertyHandle(DETAIL_PROP).setValue(newDetail);
            List contents=oldDetail.getContents(ICrosstabCellConstants.CONTENT_PROP);
            for (int i=0; i < contents.size(); i++) {
              ((DesignElementHandle)contents.get(i)).moveTo(newDetail,IAggregationCellConstants.CONTENT_PROP);
            }
          }
 catch (          SemanticException e) {
            List errorList=new ArrayList(1);
            errorList.add(e);
            status.setErrors(errorList);
          }
          return status;
        }
      }
    }
  }
  return COMP_OK_STATUS;
}","public CompatibilityStatus checkCompatibility(){
  CrosstabReportItemHandle crosstab=getCrosstab();
  if (crosstab.compStatus < 0) {
    ExtendedItemHandle exhandle=(ExtendedItemHandle)getModelHandle();
    Map illegalContents=exhandle.getIllegalContents();
    if (illegalContents.containsKey(IMeasureViewConstants.DETAIL_PROP)) {
      List detailInfoList=(List)illegalContents.get(IMeasureViewConstants.DETAIL_PROP);
      if (detailInfoList.size() > 0) {
        IllegalContentInfo detailInfo=(IllegalContentInfo)detailInfoList.get(0);
        ExtendedItemHandle oldDetail=(ExtendedItemHandle)detailInfo.getContent();
        if (oldDetail != null) {
          CompatibilityStatus status=new CompatibilityStatus();
          try {
            status.setStatusType(CompatibilityStatus.CONVERT_COMPATIBILITY_TYPE);
            ExtendedItemHandle newDetail=CrosstabExtendedItemFactory.createAggregationCell(getModuleHandle());
            handle.getPropertyHandle(DETAIL_PROP).setValue(newDetail);
            LevelHandle rowLevel=getInnerestLevel(crosstab,ROW_AXIS_TYPE);
            LevelHandle columnLevel=getInnerestLevel(crosstab,COLUMN_AXIS_TYPE);
            if (rowLevel != null) {
              newDetail.setProperty(IAggregationCellConstants.AGGREGATION_ON_ROW_PROP,rowLevel);
            }
            if (columnLevel != null) {
              newDetail.setProperty(IAggregationCellConstants.AGGREGATION_ON_COLUMN_PROP,columnLevel);
            }
            List contents=oldDetail.getContents(ICrosstabCellConstants.CONTENT_PROP);
            for (int i=0; i < contents.size(); i++) {
              ((DesignElementHandle)contents.get(i)).moveTo(newDetail,IAggregationCellConstants.CONTENT_PROP);
            }
          }
 catch (          SemanticException e) {
            List errorList=new ArrayList(1);
            errorList.add(e);
            status.setErrors(errorList);
          }
          return status;
        }
      }
    }
  }
  return COMP_OK_STATUS;
}",0.8506212077434268
73026,"public boolean test(Object receiver,String property,Object[] args,Object expectedValue){
  if (property.equals(""String_Node_Str"")) {
    if (receiver instanceof FileEditorInput) {
      FileEditorInput input=(FileEditorInput)receiver;
      if (input.getFile().getFileExtension().equals(IReportElementConstants.DESIGN_FILE_EXTENSION)) {
        return true;
      }
    }
  }
  return false;
}","public boolean test(Object receiver,String property,Object[] args,Object expectedValue){
  if (property.equals(""String_Node_Str"")) {
    IFile file=null;
    if (receiver instanceof FileEditorInput) {
      FileEditorInput input=(FileEditorInput)receiver;
      if (input.getFile() != null && IReportElementConstants.DESIGN_FILE_EXTENSION.equals(input.getFile().getFileExtension())) {
        return true;
      }
    }
  }
  return false;
}",0.8776978417266187
73027,"private void init(){
  if (debugScript) {
    server=new ReportVMServer();
    server.addVMListener(this);
    Context cx=Context.enter();
    try {
      server.start(getRequestPort(),getEventPort(),cx);
    }
 catch (    VMException e1) {
      throw new Error(""String_Node_Str"");
    }
  }
  engineConfig=new LauncherEngineConfig();
  engineConfig.setEngineHome(getEngineHome());
  try {
    Platform.startup(engineConfig);
  }
 catch (  BirtException e) {
    throw new Error(""String_Node_Str"");
  }
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  configEngine();
  this.engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
}","private void init(){
  if (debugScript) {
    server=new ReportVMServer();
    server.addVMListener(this);
    Context cx=Context.enter();
    try {
      server.start(getListenPort(),cx);
    }
 catch (    VMException e1) {
      throw new Error(""String_Node_Str"");
    }
  }
  engineConfig=new LauncherEngineConfig();
  engineConfig.setEngineHome(getEngineHome());
  try {
    Platform.startup(engineConfig);
  }
 catch (  BirtException e) {
    throw new Error(""String_Node_Str"");
  }
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  configEngine();
  this.engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
}",0.9812834224598932
73028,"public void connect(InetAddress host,int requestPort,int eventPort) throws VMException {
  try {
    requestSocket=new Socket(host,requestPort);
    requestWriter=new ObjectOutputStream(requestSocket.getOutputStream());
    requestReader=new ObjectInputStream(requestSocket.getInputStream());
    eventSocket=new Socket(host,eventPort);
    eventReader=new ObjectInputStream(eventSocket.getInputStream());
    isTerminated=false;
    isConnected=true;
    logger.info(""String_Node_Str"");
    addDeferredBreakPoints();
    startEventDispatch();
  }
 catch (  Exception e) {
    throw new VMException(e);
  }
}","public void connect(InetAddress host,int listenPort) throws VMException {
  try {
    requestSocket=new Socket(host,listenPort);
    requestWriter=new ObjectOutputStream(requestSocket.getOutputStream());
    requestReader=new ObjectInputStream(requestSocket.getInputStream());
    eventSocket=new Socket(host,listenPort);
    eventReader=new ObjectInputStream(eventSocket.getInputStream());
    isTerminated=false;
    isConnected=true;
    logger.info(""String_Node_Str"");
    addDeferredBreakPoints();
    startEventDispatch();
  }
 catch (  Exception e) {
    throw new VMException(e);
  }
}",0.9575353871773522
73029,"public void handleEvent(int eventCode,VMContextData context){
  if (isShutdown) {
    return;
  }
synchronized (eventSocket) {
    try {
      logger.info(""String_Node_Str"" + eventCode + ""String_Node_Str""+ EVENT_NAMES[eventCode]);
      clientEventWriter.writeInt(eventCode);
      clientEventWriter.flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  for (int i=0; i < vmListeners.size(); i++) {
    ((VMListener)vmListeners.get(i)).handleEvent(eventCode,context);
  }
}","public void handleEvent(int eventCode,VMContextData context){
  if (isShutdown) {
    return;
  }
synchronized (serverSocket) {
    try {
      logger.info(""String_Node_Str"" + eventCode + ""String_Node_Str""+ EVENT_NAMES[eventCode]);
      clientEventWriter.writeInt(eventCode);
      clientEventWriter.flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  for (int i=0; i < vmListeners.size(); i++) {
    ((VMListener)vmListeners.get(i)).handleEvent(eventCode,context);
  }
}",0.9890547263681592
73030,"public void start(int requestPort,int eventPort,Context cx) throws VMException {
  try {
    requestSocket=new ServerSocket(requestPort,50,InetAddress.getLocalHost());
    eventSocket=new ServerSocket(eventPort,50,InetAddress.getLocalHost());
    Socket clientRequestSocket=requestSocket.accept();
    clientRequestReader=new ObjectInputStream(clientRequestSocket.getInputStream());
    clientRequestWriter=new ObjectOutputStream(clientRequestSocket.getOutputStream());
    Socket clientEventSocket=eventSocket.accept();
    clientEventWriter=new ObjectOutputStream(clientEventSocket.getOutputStream());
    logger.info(""String_Node_Str"");
    isShutdown=false;
    vm.attach(cx,true);
    startRequestDispatch();
  }
 catch (  IOException e) {
    throw new VMException(e);
  }
}","public void start(int listenPort,Context cx) throws VMException {
  try {
    serverSocket=new ServerSocket(listenPort,50,InetAddress.getLocalHost());
    Socket clientRequestSocket=serverSocket.accept();
    clientRequestReader=new ObjectInputStream(clientRequestSocket.getInputStream());
    clientRequestWriter=new ObjectOutputStream(clientRequestSocket.getOutputStream());
    Socket clientEventSocket=serverSocket.accept();
    clientEventWriter=new ObjectOutputStream(clientEventSocket.getOutputStream());
    logger.info(""String_Node_Str"");
    isShutdown=false;
    vm.attach(cx,true);
    startRequestDispatch();
  }
 catch (  IOException e) {
    throw new VMException(e);
  }
}",0.8705722070844687
73031,"private void terminate(){
  if (isShutdown) {
    return;
  }
  isShutdown=true;
  try {
    clientRequestReader.close();
    clientRequestWriter.close();
    clientEventWriter.close();
  }
 catch (  IOException e) {
    logger.warning(""String_Node_Str"");
  }
  try {
    requestSocket.close();
    eventSocket.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (requestDispatchThread.isAlive()) {
    requestDispatchThread.interrupt();
  }
  counter=0;
  id2val.clear();
  val2id.clear();
  requestDispatchThread=null;
  clientRequestReader=null;
  clientRequestWriter=null;
  clientEventWriter=null;
  requestSocket=null;
  eventSocket=null;
  logger.info(""String_Node_Str"");
}","private void terminate(){
  if (isShutdown) {
    return;
  }
  isShutdown=true;
  try {
    clientRequestReader.close();
    clientRequestWriter.close();
    clientEventWriter.close();
  }
 catch (  IOException e) {
    logger.warning(""String_Node_Str"");
  }
  try {
    serverSocket.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (requestDispatchThread.isAlive()) {
    requestDispatchThread.interrupt();
  }
  counter=0;
  id2val.clear();
  val2id.clear();
  requestDispatchThread=null;
  clientRequestReader=null;
  clientRequestWriter=null;
  clientEventWriter=null;
  serverSocket=null;
  logger.info(""String_Node_Str"");
}",0.9476787030213708
73032,"public static void main(String[] args){
  RemoteRunner runner=new RemoteRunner();
  Thread debugthread=new Thread(runner,""String_Node_Str"");
  debugthread.start();
  System.out.println(""String_Node_Str"");
  ReportVMClient client=new ReportVMClient();
  runner.client=client;
  client.addVMListener(runner);
  runner.installBreakpoints();
  try {
    client.connect(10000,10001);
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  RemoteRunner runner=new RemoteRunner();
  Thread debugthread=new Thread(runner,""String_Node_Str"");
  debugthread.start();
  System.out.println(""String_Node_Str"");
  ReportVMClient client=new ReportVMClient();
  runner.client=client;
  client.addVMListener(runner);
  runner.installBreakpoints();
  try {
    client.connect(10000);
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9937238493723848
73033,"public void run(){
  try {
    System.out.println(""String_Node_Str"");
    server=new ReportVMServer();
    Context cx=Context.enter();
    server.start(10000,10001,cx);
    System.out.println(""String_Node_Str"");
    Scriptable global=new ImporterTopLevel();
    cx.evaluateString(global,""String_Node_Str"",""String_Node_Str"",0,null);
    cx.evaluateString(global,""String_Node_Str"",""String_Node_Str"",0,null);
    cx.evaluateString(global,""String_Node_Str"",""String_Node_Str"",0,null);
    server.shutdown(cx);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(){
  try {
    System.out.println(""String_Node_Str"");
    server=new ReportVMServer();
    Context cx=Context.enter();
    server.start(10000,cx);
    System.out.println(""String_Node_Str"");
    Scriptable global=new ImporterTopLevel();
    cx.evaluateString(global,""String_Node_Str"",""String_Node_Str"",0,null);
    cx.evaluateString(global,""String_Node_Str"",""String_Node_Str"",0,null);
    cx.evaluateString(global,""String_Node_Str"",""String_Node_Str"",0,null);
    server.shutdown(cx);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9946524064171124
73034,"/** 
 * Contructor
 * @param launch
 * @param vm
 * @param name
 * @param process
 * @param requestPort
 * @param eventPort
 * @param tempFolder
 */
public ScriptDebugTarget(ILaunch launch,ReportVMClient vm,String name,IProcess process,int requestPort,int eventPort,String tempFolder){
  super(null);
  this.launch=launch;
  this.reportVM=vm;
  this.name=name;
  this.process=process;
  this.tempFolder=tempFolder;
  this.requestPort=requestPort;
  this.eventPort=eventPort;
  launch.addDebugTarget(this);
  vm.addVMListener(this);
  setTerminating(false);
  setTerminated(false);
  thread=new ScriptDebugThread(this);
  threads=new IThread[]{thread};
  DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(this);
  while (!isTerminated()) {
    try {
      vm.connect(requestPort,eventPort);
      break;
    }
 catch (    VMException e) {
      continue;
    }
  }
}","/** 
 * Contructor
 * @param launch
 * @param vm
 * @param name
 * @param process
 * @param listenPort
 * @param eventPort
 * @param tempFolder
 */
public ScriptDebugTarget(ILaunch launch,ReportVMClient vm,String name,IProcess process,int listenPort,String tempFolder){
  super(null);
  this.launch=launch;
  this.reportVM=vm;
  this.name=name;
  this.process=process;
  this.tempFolder=tempFolder;
  this.listenPort=listenPort;
  launch.addDebugTarget(this);
  vm.addVMListener(this);
  setTerminating(false);
  setTerminated(false);
  thread=new ScriptDebugThread(this);
  threads=new IThread[]{thread};
  DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(this);
  while (!isTerminated()) {
    try {
      vm.connect(listenPort);
      break;
    }
 catch (    VMException e) {
      continue;
    }
  }
}",0.9316987740805605
73035,"private String getDefaultName(){
  return ""String_Node_Str"" + requestPort + ""String_Node_Str""+ eventPort;
}","private String getDefaultName(){
  return ""String_Node_Str"" + listenPort;
}",0.8021978021978022
73036,"public void run(VMRunnerConfiguration configuration,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  delegate.run(configuration,launch,monitor);
  IProcess[] ps=launch.getProcesses();
  if (ps != null && ps.length > 0) {
    if (runScript) {
      if (monitor == null) {
        monitor=new NullProgressMonitor();
      }
      IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1);
      subMonitor.beginTask(""String_Node_Str"",1);
      ReportVMClient vm=new ReportVMClient();
      ScriptDebugTarget target=new ScriptDebugTarget(launch,vm,null,ps[0],config.helper.requestPort,config.helper.eventPort,config.helper.tempFolder);
      target.setFileName(config.helper.fileName);
      subMonitor.worked(1);
      subMonitor.done();
    }
    ReportLaunchHelper.handleProcessTermination(launch,ps[0],config.helper.fileName,config.helper.tempFolder);
  }
}","public void run(VMRunnerConfiguration configuration,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  delegate.run(configuration,launch,monitor);
  IProcess[] ps=launch.getProcesses();
  if (ps != null && ps.length > 0) {
    if (runScript) {
      if (monitor == null) {
        monitor=new NullProgressMonitor();
      }
      IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1);
      subMonitor.beginTask(""String_Node_Str"",1);
      ReportVMClient vm=new ReportVMClient();
      ScriptDebugTarget target=new ScriptDebugTarget(launch,vm,null,ps[0],config.helper.listenPort,config.helper.tempFolder);
      target.setFileName(config.helper.fileName);
      subMonitor.worked(1);
      subMonitor.done();
    }
    ReportLaunchHelper.handleProcessTermination(launch,ps[0],config.helper.fileName,config.helper.tempFolder);
  }
}",0.9786497403346798
73037,"void addPortArgs(List list){
  requestPort=findFreePort();
  eventPort=findFreePort();
  list.add(""String_Node_Str"" + ATTR_REQUEST_PORT + ""String_Node_Str""+ requestPort);
  list.add(""String_Node_Str"" + ATTR_EVENT_PORT + ""String_Node_Str""+ eventPort);
}","void addPortArgs(List list){
  listenPort=findFreePort();
  list.add(""String_Node_Str"" + ATTR_LISTEN_PORT + ""String_Node_Str""+ listenPort);
}",0.6870229007633588
73038,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  baseURL=checkBaseURLWithExtractPattern(action,baseURL);
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (isContainExtractInfo(action)) {
      try {
        link.append(ParameterAccessor.PARAMETER_SEPARATOR);
        link.append(URLEncoder.encode(action.getActionString(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      Exception e) {
      }
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i]);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    if (isDesigner != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  baseURL=checkBaseURLWithExtractPattern(action,baseURL);
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (isContainExtractInfo(action)) {
      try {
        link.append(ParameterAccessor.PARAMETER_SEPARATOR);
        link.append(action.getActionString());
      }
 catch (      Exception e) {
      }
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i]);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    if (isDesigner != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9910464465584778
73039,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  ;
  baseURL=checkBaseURLWithExtractPattern(action,baseURL);
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (isContainExtractInfo(action)) {
    try {
      link.append(URLEncoder.encode(action.getActionString(),ParameterAccessor.UTF_8_ENCODE));
      link.append(ParameterAccessor.PARAMETER_SEPARATOR);
    }
 catch (    Exception e) {
    }
  }
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  if (svg != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
  }
  if (isDesigner != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  ;
  baseURL=checkBaseURLWithExtractPattern(action,baseURL);
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (isContainExtractInfo(action)) {
    try {
      link.append(action.getActionString());
      link.append(ParameterAccessor.PARAMETER_SEPARATOR);
    }
 catch (    Exception e) {
    }
  }
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  if (svg != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
  }
  if (isDesigner != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}",0.9876701772412022
73040,"/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#extractData(java.lang.String,org.eclipse.birt.report.service.api.InputOptions,java.io.OutputStream)
 */
public void extractData(String docName,InputOptions options,OutputStream out) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName,getModuleOptions(options));
  if (doc == null) {
    throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.REPORT_SERVICE_EXCEPTION_EXTRACT_DATA_NO_DOCUMENT));
  }
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
  try {
    String extractFormat=ParameterAccessor.getExtractFormat(request);
    String extractExtension=ParameterAccessor.getExtractExtension(request);
    String resultSetName=ParameterAccessor.getResultSetName(request);
    String instanceId=ParameterAccessor.getIId(request);
    Collection columns=ParameterAccessor.getSelectedColumns(request);
    Map paramMap=ParameterAccessor.getParameterAsMap(request);
    ReportEngineService.getInstance().extractDataEx(doc,extractFormat,extractExtension,resultSetName,instanceId,columns,locale,paramMap,out);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e.getCause());
  }
 finally {
    if (doc != null)     doc.close();
  }
}","/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#extractData(java.lang.String,org.eclipse.birt.report.service.api.InputOptions,java.io.OutputStream)
 */
public void extractData(String docName,InputOptions options,OutputStream out) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName,getModuleOptions(options));
  if (doc == null) {
    throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.REPORT_SERVICE_EXCEPTION_EXTRACT_DATA_NO_DOCUMENT));
  }
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
  try {
    String extractFormat=ParameterAccessor.getExtractFormat(request);
    String extractExtension=ParameterAccessor.getExtractExtension(request);
    String resultSetName=ParameterAccessor.getResultSetName(request);
    String instanceId=ParameterAccessor.getInstanceId(request);
    Collection columns=ParameterAccessor.getSelectedColumns(request);
    Map paramMap=ParameterAccessor.getParameterAsMap(request);
    ReportEngineService.getInstance().extractDataEx(doc,extractFormat,extractExtension,resultSetName,instanceId,columns,locale,paramMap,out);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e.getCause());
  }
 finally {
    if (doc != null)     doc.close();
  }
}",0.997623089983022
73041,void addSortCondition(ISortCondition sort) throws SemanticException ;,void addSortCondition(ISortElement sort) throws SemanticException ;,0.9117647058823528
73042,void removeSortCondition(ISortCondition sort) throws SemanticException ;,void removeSortCondition(ISortElement sort) throws SemanticException ;,0.9154929577464788
73043,"public void addFilterCondition(IFilterConditionElement filter) throws SemanticException {
}","public void addFilterCondition(IFilterConditionElement filter) throws SemanticException {
  FilterConditionElementHandle fceh=lv.getModelHandle().getElementFactory().newFilterConditionElement();
  fceh.setExpr(filter.getExpr());
  fceh.setFilterTarget(filter.getFilterTarget());
  fceh.setOperator(filter.getOperator());
  fceh.setValue1(filter.getValue1List());
  fceh.setValue2(filter.getValue2());
  fceh.setOptional(filter.isOptional());
  lv.getModelHandle().add(ILevelViewConstants.FILTER_PROP,fceh);
}",0.3038397328881469
73044,"public void addSortCondition(ISortCondition sort) throws SemanticException {
}","public void addSortCondition(ISortElement sort) throws SemanticException {
  SortElementHandle seh=lv.getModelHandle().getElementFactory().newSortElement();
  seh.setDirection(sort.getDirection());
  seh.setKey(sort.getKey());
  lv.getModelHandle().add(ILevelViewConstants.SORT_PROP,seh);
}",0.2119565217391304
73045,"public void removeSortCondition(ISortCondition sort) throws SemanticException {
}","public void removeSortCondition(ISortElement sort) throws SemanticException {
  if (sort == null) {
    return;
  }
  SortElementHandle handle=null;
  for (Iterator itr=lv.sortsIterator(); itr.hasNext(); ) {
    SortElementHandle seh=(SortElementHandle)itr.next();
    if (equalSort(seh,sort)) {
      handle=seh;
      break;
    }
  }
  if (handle != null) {
    lv.getModelHandle().drop(ILevelViewConstants.SORT_PROP,handle);
  }
}",0.2796116504854369
73046,"public void removeFilterCondition(IFilterConditionElement filter) throws SemanticException {
}","public void removeFilterCondition(IFilterConditionElement filter) throws SemanticException {
  if (filter == null) {
    return;
  }
  FilterConditionElementHandle handle=null;
  for (Iterator itr=lv.filtersIterator(); itr.hasNext(); ) {
    FilterConditionElementHandle feh=(FilterConditionElementHandle)itr.next();
    if (equalFilter(feh,filter)) {
      handle=feh;
      break;
    }
  }
  if (handle != null) {
    lv.getModelHandle().drop(ILevelViewConstants.FILTER_PROP,handle);
  }
}",0.3208191126279863
73047,"/** 
 * Draws a line with the line-style specified in advance from the start position to the end position with the given line width, color, and style at the given PDF layer. If the line-style is NOT set before invoking this method, ""solid"" will be used as the default line-style.
 * @param startX the start X coordinate of the line.
 * @param startY the start Y coordinate of the line.
 * @param endX the end X coordinate of the line.
 * @param endY the end Y coordinate of the line.
 * @param width the lineWidth
 * @param color the color of the line.
 * @param lineStyle the style of the line.
 */
protected void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle){
  if (null == color || 0f == width || ""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  contentByte.saveState();
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineCap(PdfContentByte.LINE_CAP_PROJECTING_SQUARE);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(3 * width,2 * width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(width,width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
 else {
    contentByte.setLineCap(PdfContentByte.LINE_CAP_PROJECTING_SQUARE);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  contentByte.restoreState();
}","/** 
 * Draws a line with the line-style specified in advance from the start position to the end position with the given line width, color, and style at the given PDF layer. If the line-style is NOT set before invoking this method, ""solid"" will be used as the default line-style.
 * @param startX the start X coordinate of the line.
 * @param startY the start Y coordinate of the line.
 * @param endX the end X coordinate of the line.
 * @param endY the end Y coordinate of the line.
 * @param width the lineWidth
 * @param color the color of the line.
 * @param lineStyle the style of the line.
 */
protected void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle){
  if (null == color || 0f == width || ""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  contentByte.saveState();
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(3 * width,2 * width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(width,width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
 else {
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  contentByte.restoreState();
}",0.9101834282099937
73048,"public PDFPageDevice(OutputStream output,String title,IReportContext context,IReportContent report){
  this.context=context;
  this.report=report;
  doc=new Document();
  try {
    writer=PdfWriter.getInstance(doc,new BufferedOutputStream(output));
    String creator=""String_Node_Str"" + BundleVersionUtil.getBundleVersion(""String_Node_Str"") + ""String_Node_Str""+ BundleVersionUtil.getBundleVersion(""String_Node_Str"");
    doc.addCreator(creator);
    if (null != title)     doc.addTitle(title);
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}","/** 
 * constructor for test
 * @param output
 */
public PDFPageDevice(OutputStream output){
  doc=new Document();
  try {
    writer=PdfWriter.getInstance(doc,new BufferedOutputStream(output));
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}",0.3592677345537757
73049,"public static String createTempRootDir(String tempDir){
  String rootDirStr=null;
  File tempDtEDir=null;
synchronized (cacheCounter1) {
    tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1);
    cacheCounter1=new Integer(cacheCounter1.intValue() + 1);
    int x=0;
    while (tempDtEDir.exists()) {
      x++;
      tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1+ ""String_Node_Str""+ x);
    }
    tempDtEDir.mkdirs();
    tempDtEDir.deleteOnExit();
  }
  rootDirStr=getCanonicalPath(tempDtEDir);
  return rootDirStr;
}","public static String createTempRootDir(String tempDir){
  String rootDirStr=null;
  File tempDtEDir=null;
  tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1);
  cacheCounter1.add(1);
  int x=0;
  while (tempDtEDir.exists()) {
    x++;
    tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1+ ""String_Node_Str""+ x);
  }
  tempDtEDir.mkdirs();
  tempDtEDir.deleteOnExit();
  rootDirStr=getCanonicalPath(tempDtEDir);
  return rootDirStr;
}",0.803921568627451
73050,"/** 
 * @return session temp dir
 * @throws DataException 
 * @throws IOException 
 */
public static String createSessionTempDir(String tempRootDir) throws DataException {
  final String prefix=""String_Node_Str"";
  File sessionFile=null;
synchronized (cacheCounter2) {
    String sessionTempDir=tempRootDir + File.separator + prefix+ System.currentTimeMillis()+ cacheCounter2.intValue();
    cacheCounter2=new Integer(cacheCounter2.intValue() + 1);
    sessionFile=new File(sessionTempDir);
    int i=0;
    while (sessionFile.exists() || !sessionFile.mkdirs()) {
      i++;
      sessionTempDir=sessionTempDir + ""String_Node_Str"" + i;
      sessionFile=new File(sessionTempDir);
      if (i > MAX_DIR_CREATION_ATTEMPT)       throw new DataException(ResourceConstants.FAIL_TO_CREATE_TEMP_DIR,sessionFile.getAbsolutePath());
    }
    sessionFile.deleteOnExit();
  }
  return getCanonicalPath(sessionFile);
}","/** 
 * @return session temp dir
 * @throws DataException 
 * @throws IOException 
 */
public static String createSessionTempDir(String tempRootDir) throws DataException {
  final String prefix=""String_Node_Str"";
  File sessionFile=null;
  String sessionTempDir=tempRootDir + File.separator + prefix+ System.currentTimeMillis()+ cacheCounter2.intValue();
  cacheCounter2.add(1);
  sessionFile=new File(sessionTempDir);
  int i=0;
  String tempDir=sessionTempDir;
  while (sessionFile.exists()) {
    i++;
    sessionTempDir=tempDir + ""String_Node_Str"" + i;
    sessionFile=new File(sessionTempDir);
    if (i > MAX_DIR_CREATION_ATTEMPT) {
      throw new DataException(ResourceConstants.FAIL_TO_CREATE_TEMP_DIR,diagnosticMkdirs(sessionFile));
    }
  }
  if (!sessionFile.mkdirs()) {
    throw new DataException(ResourceConstants.FAIL_TO_CREATE_TEMP_DIR,diagnosticMkdirs(sessionFile));
  }
  sessionFile.deleteOnExit();
  return getCanonicalPath(sessionFile);
}",0.7419700214132763
73051,"public void render() throws Exception {
  setupRenderOption();
  IContentEmitter emitter=createContentEmitter();
  String format=executionContext.getOutputFormat();
  IReportExecutor executor=new ReportletExecutor(executionContext,offset);
  executor=new SuppressDuplciateReportExecutor(executor);
  executor=new LocalizedReportExecutor(executionContext,executor);
  executionContext.setExecutor(executor);
  initializeContentEmitter(emitter,executor);
  IReportLayoutEngine layoutEngine=createReportLayoutEngine(pagination,renderOptions);
  layoutEngine.setLocale(executionContext.getLocale());
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
    layoutEngine.setPageHandler(handle);
    CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
    outputEmitters.addEmitter(emitter);
    outputEmitters.addEmitter(handle.getEmitter());
    emitter=outputEmitters;
  }
  startRender();
  IReportContent report=executor.execute();
  emitter.start(report);
  layoutEngine.layout(executor,report,emitter,false);
  emitter.end(report);
  closeRender();
  executor.close();
  pageCount=layoutEngine.getPageCount();
}","public void render() throws Exception {
  setupRenderOption();
  IContentEmitter emitter=createContentEmitter();
  String format=executionContext.getOutputFormat();
  IReportExecutor executor=new ReportletExecutor(executionContext,offset);
  executor=new SuppressDuplciateReportExecutor(executor);
  executor=new LocalizedReportExecutor(executionContext,executor);
  executionContext.setExecutor(executor);
  initializeContentEmitter(emitter,executor);
  IReportLayoutEngine layoutEngine=createReportLayoutEngine(pagination,renderOptions);
  layoutEngine.setLocale(executionContext.getLocale());
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
    layoutEngine.setPageHandler(handle);
    CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
    outputEmitters.addEmitter(emitter);
    outputEmitters.addEmitter(handle.getEmitter());
    emitter=outputEmitters;
  }
  startRender();
  IReportContent report=executor.execute();
  emitter.start(report);
  layoutEngine.layout(executor,report,emitter,false);
  layoutEngine.close();
  emitter.end(report);
  closeRender();
  executor.close();
  pageCount=layoutEngine.getPageCount();
}",0.9904153354632588
73052,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
}",0.9939862542955328
73053,"protected void endPage(){
  if (context.isAutoPageBreak()) {
    context.setAutoPageBreak(false);
    autoPageBreak();
  }
  if (isPageEmpty()) {
    if (!isFirst) {
      if (isLast) {
        context.setPageNumber(context.getPageNumber() - 1);
        context.setPageCount(context.getPageCount() - 1);
        resolveTotalPage();
      }
      return;
    }
 else {
      if (!isLast) {
        return;
      }
    }
  }
  MasterPageDesign mp=getMasterPage(report);
  if (mp instanceof SimpleMasterPageDesign) {
    if (isFirst && !((SimpleMasterPageDesign)mp).isShowHeaderOnFirst()) {
      removeHeader();
      isFirst=false;
    }
    if (isLast && !((SimpleMasterPageDesign)mp).isShowFooterOnLast()) {
      removeFooter();
    }
    if (((SimpleMasterPageDesign)mp).isFloatingFooter()) {
      floatingFooter();
    }
  }
  if (isFirst) {
    isFirst=false;
  }
  emitter.startPage(pageContent);
  emitter.endPage(pageContent);
  pageBreakEvent();
  if (isLast) {
    resolveTotalPage();
  }
 else {
    context.setPageNumber(context.getPageNumber() + 1);
    context.setPageCount(context.getPageCount() + 1);
  }
}","protected void endPage(){
  if (context.isAutoPageBreak()) {
    context.setAutoPageBreak(false);
    autoPageBreak();
  }
  if (isPageEmpty()) {
    if (!isFirst) {
      if (isLast) {
        context.setPageNumber(context.getPageNumber() - 1);
        context.setPageCount(context.getPageCount() - 1);
      }
      return;
    }
 else {
      if (!isLast) {
        return;
      }
    }
  }
  MasterPageDesign mp=getMasterPage(report);
  if (mp instanceof SimpleMasterPageDesign) {
    if (isFirst && !((SimpleMasterPageDesign)mp).isShowHeaderOnFirst()) {
      removeHeader();
      isFirst=false;
    }
    if (isLast && !((SimpleMasterPageDesign)mp).isShowFooterOnLast()) {
      removeFooter();
    }
    if (((SimpleMasterPageDesign)mp).isFloatingFooter()) {
      floatingFooter();
    }
  }
  if (isFirst) {
    isFirst=false;
  }
  emitter.startPage(pageContent);
  emitter.endPage(pageContent);
  pageBreakEvent();
  if (!isLast) {
    context.setPageNumber(context.getPageNumber() + 1);
    context.setPageCount(context.getPageCount() + 1);
  }
}",0.9702244617498856
73054,"public void build(){
  IReportExecutor executor=executionContext.getExecutor();
  engine=LayoutEngineFactory.createLayoutEngine(ExtensionManager.PAGE_BREAK_PAGINATION);
  engine.setOption(EngineTask.TASK_TYPE,new Integer(IEngineTask.TASK_RUN));
  engine.setPageHandler(layoutPageHandler);
  IReportContent report=executor.execute();
  outputEmitters.start(report);
  engine.layout(executor,report,outputEmitters,true);
  outputEmitters.end(report);
  engine=null;
}","public void build(){
  IReportExecutor executor=executionContext.getExecutor();
  engine=LayoutEngineFactory.createLayoutEngine(ExtensionManager.PAGE_BREAK_PAGINATION);
  engine.setOption(EngineTask.TASK_TYPE,new Integer(IEngineTask.TASK_RUN));
  engine.setPageHandler(layoutPageHandler);
  IReportContent report=executor.execute();
  outputEmitters.start(report);
  engine.layout(executor,report,outputEmitters,true);
  engine.close();
  outputEmitters.end(report);
  engine=null;
}",0.981012658227848
73055,"public void testIrr() throws Exception {
  double b[]=new double[]{-70000d,12000d,15000d,18000d,21000d,26000d};
  double a[]=new double[]{-70000,12000,15000};
  double c[]=new double[]{-70000d,12000d,15000d,18000d,21000d};
  double d[]=new double[]{-70000d,22000d,25000d,30000d,31000d};
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_IRR_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(2,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  assertTrue(!ag.getParameterDefn()[1].isOptional());
  ac.start();
  for (int i=0; i < b.length; i++) {
    ac.onRow(new Object[]{new Double(b[i]),new Double(0.1)});
  }
  ac.finish();
  assertEquals(0.0866,((Double)ac.getValue()).doubleValue(),0.0001);
  ac.start();
  for (int i=0; i < a.length; i++) {
    ac.onRow(new Object[]{new Double(a[i]),new Double(-0.6)});
  }
  ac.finish();
  assertEquals(-0.44,((Double)ac.getValue()).doubleValue(),0.01);
  ac.start();
  for (int i=0; i < a.length; i++) {
    ac.onRow(new Object[]{new Double(a[i]),new Double(new Double(2.3))});
  }
  ac.finish();
  assertEquals(Double.NaN,((Double)ac.getValue()).doubleValue());
  ac.start();
  for (int i=0; i < c.length; i++) {
    ac.onRow(new Object[]{new Double(c[i]),new Double(-0.1)});
  }
  ac.finish();
  assertEquals(-0.021244,((Double)ac.getValue()).doubleValue(),0.000001);
  ac.start();
  for (int i=0; i < d.length; i++) {
    ac.onRow(new Object[]{new Double(d[i]),new Double(0.05)});
  }
  ac.finish();
  assertEquals(0.19,((Double)ac.getValue()).doubleValue(),0.01);
  ac.start();
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  try {
    ac.getValue();
    assertTrue(false);
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
}","public void testIrr() throws Exception {
  double b[]=new double[]{-70000d,12000d,15000d,18000d,21000d,26000d};
  double a[]=new double[]{-70000,12000,15000};
  double c[]=new double[]{-70000d,12000d,15000d,18000d,21000d};
  double d[]=new double[]{-70000d,22000d,25000d,30000d,31000d};
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_IRR_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(2,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  assertTrue(!ag.getParameterDefn()[1].isOptional());
  ac.start();
  for (int i=0; i < b.length; i++) {
    ac.onRow(new Object[]{new Double(b[i]),new Double(0.1)});
  }
  ac.finish();
  assertEquals(0.0866,((Double)ac.getValue()).doubleValue(),0.0001);
  ac.start();
  for (int i=0; i < a.length; i++) {
    ac.onRow(new Object[]{new Double(a[i]),new Double(-0.6)});
  }
  ac.finish();
  assertEquals(-0.44,((Double)ac.getValue()).doubleValue(),0.01);
  ac.start();
  for (int i=0; i < a.length; i++) {
    ac.onRow(new Object[]{new Double(a[i]),new Double(2.3)});
  }
  ac.finish();
  assertEquals(Double.NaN,((Double)ac.getValue()).doubleValue());
  ac.start();
  for (int i=0; i < c.length; i++) {
    ac.onRow(new Object[]{new Double(c[i]),new Double(-0.1)});
  }
  ac.finish();
  assertEquals(-0.021244,((Double)ac.getValue()).doubleValue(),0.000001);
  ac.start();
  for (int i=0; i < d.length; i++) {
    ac.onRow(new Object[]{new Double(d[i]),new Double(0.05)});
  }
  ac.finish();
  assertEquals(0.19,((Double)ac.getValue()).doubleValue(),0.01);
  ac.start();
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  try {
    ac.getValue();
    assertTrue(false);
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
}",0.996803409696324
73056,"/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  currentX-=getX(container);
  currentY-=getY(container);
  if (container instanceof PageArea) {
    pageGraphic.dispose();
    if (((PageArea)container).isExtendToMultiplePages() && (extendDirection != EXTEND_NONE) && !extendDirectionMask) {
      int originalX=currentX;
      int originalY=currentY;
      if (extendDirection == EXTEND_ON_VERTICAL) {
        int startX=originalX;
        int startY=originalY + pageHeight;
        while (startY < maxHeight) {
          visitContainer(container,startX,startY);
          startY+=pageHeight;
        }
      }
 else       if (extendDirection == EXTEND_ON_HORIZONTAL) {
        int startX=originalX + pageWidth;
        int startY=originalY;
        while (startX < maxWidth) {
          visitContainer(container,startX,startY);
          startX+=pageWidth;
        }
      }
 else       if (extendDirection == EXTEND_ON_HORIZONTAL_AND_VERTICAL) {
        int startX=originalX + pageWidth;
        int startY=originalY;
        while (startY < maxHeight) {
          while (startX < maxWidth) {
            visitContainer(container,startX,startY);
            startX+=pageWidth;
          }
          startX=originalX;
          startY+=pageHeight;
        }
      }
      setExtendDirection(EXTEND_NONE);
      maxWidth=0;
      maxHeight=0;
    }
  }
 else {
    BorderInfo[] borders=cacheBorderInfo(container);
    if (container instanceof TableArea) {
      currentTableBorder.findBreakPoints();
      drawBorder(currentTableBorder);
      tableBorders.pop();
      if (!tableBorders.isEmpty()) {
        currentTableBorder=(TableBorder)tableBorders.peek();
      }
    }
 else     if (container instanceof CellArea) {
      CellArea cell=(CellArea)container;
      int cellX=currentX + cell.getX();
      int cellY=currentY + cell.getY();
      currentTableBorder.addRow(cellY + cell.getHeight());
      currentTableBorder.addColumn(cellX + cell.getWidth());
      if (null != borders && borders[BorderInfo.TOP_BORDER].borderWidth != 0) {
        currentTableBorder.setRowBorder(cellY,cellX,cellX + cell.getWidth(),borders[BorderInfo.TOP_BORDER].borderStyle,borders[BorderInfo.TOP_BORDER].borderWidth,borders[BorderInfo.TOP_BORDER].borderColor);
      }
      if (null != borders && borders[BorderInfo.LEFT_BORDER].borderWidth != 0) {
        currentTableBorder.setColumnBorder(cellX,cellY,cellY + cell.getHeight(),borders[BorderInfo.LEFT_BORDER].borderStyle,borders[BorderInfo.LEFT_BORDER].borderWidth,borders[BorderInfo.LEFT_BORDER].borderColor);
      }
      if (null != borders && borders[BorderInfo.BOTTOM_BORDER].borderWidth != 0) {
        currentTableBorder.setRowBorder(cellY + cell.getHeight(),cellX,cellX + cell.getWidth(),borders[BorderInfo.BOTTOM_BORDER].borderStyle,borders[BorderInfo.BOTTOM_BORDER].borderWidth,borders[BorderInfo.BOTTOM_BORDER].borderColor);
      }
      if (null != borders && borders[BorderInfo.RIGHT_BORDER].borderWidth != 0) {
        currentTableBorder.setColumnBorder(cellX + cell.getWidth(),cellY,cellY + cell.getHeight(),borders[BorderInfo.RIGHT_BORDER].borderStyle,borders[BorderInfo.RIGHT_BORDER].borderWidth,borders[BorderInfo.RIGHT_BORDER].borderColor);
      }
    }
 else {
      drawBorder(borders);
    }
    if (container.needClip()) {
      pageGraphic.clipRestore();
    }
  }
}","/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  currentX-=getX(container);
  currentY-=getY(container);
  if (container instanceof PageArea) {
    pageGraphic.dispose();
    if (((PageArea)container).isExtendToMultiplePages() && (extendDirection != EXTEND_NONE) && !extendDirectionMask) {
      int originalX=currentX;
      int originalY=currentY;
      if (extendDirection == EXTEND_ON_VERTICAL) {
        int startX=originalX;
        int startY=originalY + pageHeight;
        while (startY < maxHeight) {
          visitContainer(container,startX,startY);
          startY+=pageHeight;
        }
      }
 else       if (extendDirection == EXTEND_ON_HORIZONTAL) {
        int startX=originalX + pageWidth;
        int startY=originalY;
        while (startX < maxWidth) {
          visitContainer(container,startX,startY);
          startX+=pageWidth;
        }
      }
 else       if (extendDirection == EXTEND_ON_HORIZONTAL_AND_VERTICAL) {
        int startX=originalX + pageWidth;
        int startY=originalY;
        while (startY < maxHeight) {
          while (startX < maxWidth) {
            visitContainer(container,startX,startY);
            startX+=pageWidth;
          }
          startX=originalX;
          startY+=pageHeight;
        }
      }
      setExtendDirection(EXTEND_NONE);
      maxWidth=0;
      maxHeight=0;
    }
  }
 else {
    BorderInfo[] borders=cacheBorderInfo(container);
    if (container instanceof TableArea) {
      currentTableBorder.findBreakPoints();
      drawBorder(currentTableBorder);
      tableBorders.pop();
      if (!tableBorders.isEmpty()) {
        currentTableBorder=(TableBorder)tableBorders.peek();
      }
    }
 else     if (container instanceof CellArea) {
      CellArea cell=(CellArea)container;
      int cellX=currentX + getX(cell);
      int cellY=currentY + getY(cell);
      int cellRx=currentX + getScaledValue(cell.getX() + cell.getWidth());
      int cellBy=currentY + getScaledValue(cell.getY() + cell.getHeight());
      currentTableBorder.addRow(cellBy);
      currentTableBorder.addColumn(cellRx);
      if (null != borders && borders[BorderInfo.TOP_BORDER].borderWidth != 0) {
        currentTableBorder.setRowBorder(cellY,cellX,cellRx,borders[BorderInfo.TOP_BORDER].borderStyle,borders[BorderInfo.TOP_BORDER].borderWidth,borders[BorderInfo.TOP_BORDER].borderColor);
      }
      if (null != borders && borders[BorderInfo.LEFT_BORDER].borderWidth != 0) {
        currentTableBorder.setColumnBorder(cellX,cellY,cellBy,borders[BorderInfo.LEFT_BORDER].borderStyle,borders[BorderInfo.LEFT_BORDER].borderWidth,borders[BorderInfo.LEFT_BORDER].borderColor);
      }
      if (null != borders && borders[BorderInfo.BOTTOM_BORDER].borderWidth != 0) {
        currentTableBorder.setRowBorder(cellBy,cellX,cellRx,borders[BorderInfo.BOTTOM_BORDER].borderStyle,borders[BorderInfo.BOTTOM_BORDER].borderWidth,borders[BorderInfo.BOTTOM_BORDER].borderColor);
      }
      if (null != borders && borders[BorderInfo.RIGHT_BORDER].borderWidth != 0) {
        currentTableBorder.setColumnBorder(cellRx,cellY,cellBy,borders[BorderInfo.RIGHT_BORDER].borderStyle,borders[BorderInfo.RIGHT_BORDER].borderWidth,borders[BorderInfo.RIGHT_BORDER].borderColor);
      }
    }
 else {
      drawBorder(borders);
    }
    if (container.needClip()) {
      pageGraphic.clipRestore();
    }
  }
}",0.9483527549992808
73057,"private void drawBorder(BorderInfo bi){
  if (""String_Node_Str"".equals(bi.borderStyle)) {
    drawDoubleBorder(bi);
  }
 else {
    pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
  }
}","private void drawBorder(BorderInfo bi){
  if (""String_Node_Str"".equals(bi.borderStyle)) {
    drawDoubleBorder(bi);
  }
 else {
    pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,bi.borderStyle);
  }
}",0.936082474226804
73058,"protected void addBorderSegment(Border border,int start,int end,String style,int width,Color color){
  if (style == null || color == null || width == 0) {
    return;
  }
  ArrayList segments=border.segments;
  BorderSegment last=null;
  if (!segments.isEmpty()) {
    last=(BorderSegment)segments.get(segments.size() - 1);
    if (last.end == start && last.width == width && last.color.equals(color) && last.style.equals(style)) {
      last.end=end;
      return;
    }
  }
  segments.add(new BorderSegment(start,end,style,width,color));
  if (border.width < width) {
    border.width=width;
  }
}","protected void addBorderSegment(Border border,int start,int end,String style,int width,Color color){
  if (style == null || color == null || width == 0 || border == null) {
    return;
  }
  ArrayList segments=border.segments;
  BorderSegment last=null;
  if (!segments.isEmpty()) {
    last=(BorderSegment)segments.get(segments.size() - 1);
    if (last.end == start && last.width == width && last.color.equals(color) && last.style.equals(style)) {
      last.end=end;
      return;
    }
  }
  segments.add(new BorderSegment(start,end,style,width,color));
  if (border.width < width) {
    border.width=width;
  }
}",0.9851973684210528
73059,"/** 
 */
void moveTo(int rowIndex) throws BirtException {
  if (resultIterator == null) {
    return;
  }
  resultIterator.moveTo(rowIndex);
  value=resultIterator.getValue(boundColumnName);
  resultIterator.skipToEnd(1);
}","/** 
 */
void moveTo(int rowIndex) throws BirtException {
  if (resultIterator == null) {
    if (queryResults == null)     return;
    resultIterator=queryResults.getResultIterator();
  }
  if (resultIterator == null) {
    return;
  }
  resultIterator.moveTo(rowIndex);
  value=resultIterator.getValue(boundColumnName);
  resultIterator.skipToEnd(1);
}",0.7729636048526863
73060,"/** 
 * Select the item from the id.
 * @param id
 */
public void selectionItem(String id){
  if (getTreeViewer() == null || getTreeViewer().getTree() == null)   return;
  Object obj=ModuleUtil.getScriptObject(reportHandle,id);
  if (obj instanceof PropertyHandle) {
    PropertyHandle handle=(PropertyHandle)obj;
    IElementPropertyDefn defn=handle.getPropertyDefn();
    DebugScriptObjectNode node=new DebugScriptObjectNode(handle,defn);
    DebugScriptElementNode parent=new DebugScriptElementNode(handle.getElementHandle());
    node.setNodeParent(parent);
    IStructuredSelection selection=new StructuredSelection(node);
    setSelection(selection);
  }
}","/** 
 * Select the item from the id.
 * @param id
 */
public void selectionItem(String id){
  if (getTreeViewer() == null || getTreeViewer().getTree() == null)   return;
  Object obj=ModuleUtil.getScriptObject(reportHandle,id);
  if (obj instanceof PropertyHandle) {
    PropertyHandle handle=(PropertyHandle)obj;
    DebugScriptObjectNode node=new DebugScriptObjectNode(handle);
    DebugScriptElementNode parent=new DebugScriptElementNode(handle.getElementHandle());
    node.setNodeParent(parent);
    IStructuredSelection selection=new StructuredSelection(node);
    setSelection(selection);
  }
}",0.8709422011084719
73061,"/** 
 * Gets the children.
 * @param elementHandle
 * @return
 */
public List getScriptNodes(DesignElementHandle elementHandle){
  List scriptNodes=new ArrayList();
  List scriptMethods=elementHandle.getMethods();
  if (scriptMethods != null) {
    for (Iterator ite=scriptMethods.iterator(); ite.hasNext(); ) {
      IElementPropertyDefn elementPropDefn=(IElementPropertyDefn)ite.next();
      PropertyHandle handle=elementHandle.getPropertyHandle(elementPropDefn.getName());
      String methodName=elementPropDefn.getMethodInfo().getName();
      if (elementHandle.getStringProperty(methodName) != null) {
        DebugScriptObjectNode scriptElementNode=new DebugScriptObjectNode(handle,elementPropDefn);
        scriptElementNode.setNodeParent(this);
        scriptNodes.add(scriptElementNode);
      }
    }
  }
  return scriptNodes;
}","/** 
 * Gets the children.
 * @param elementHandle
 * @return
 */
public List getScriptNodes(DesignElementHandle elementHandle){
  List scriptNodes=new ArrayList();
  List scriptMethods=elementHandle.getMethods();
  if (scriptMethods != null) {
    for (Iterator ite=scriptMethods.iterator(); ite.hasNext(); ) {
      IElementPropertyDefn elementPropDefn=(IElementPropertyDefn)ite.next();
      PropertyHandle handle=elementHandle.getPropertyHandle(elementPropDefn.getName());
      String methodName=elementPropDefn.getMethodInfo().getName();
      if (elementHandle.getStringProperty(methodName) != null) {
        DebugScriptObjectNode scriptElementNode=new DebugScriptObjectNode(handle);
        scriptElementNode.setNodeParent(this);
        scriptNodes.add(scriptElementNode);
      }
    }
  }
  return scriptNodes;
}",0.9026442307692308
73062,"/** 
 * Constructor
 * @param handle
 * @param parent
 */
public DebugScriptObjectNode(PropertyHandle handle,IElementPropertyDefn parent){
  super(parent);
  this.propertyHandle=handle;
}","/** 
 * Constructor
 * @param handle
 * @param parent
 */
public DebugScriptObjectNode(PropertyHandle handle){
  super(handle);
  this.propertyHandle=handle;
}",0.8959537572254336
73063,"public String getText(){
  return parent.getMethodInfo().getName();
}","public String getText(){
  return parent.getPropertyDefn().getName();
}",0.8857142857142857
73064,"public boolean equals(Object arg0){
  if (arg0 == this) {
    return true;
  }
  if (arg0 instanceof ScriptObjectNode) {
    return ((ScriptObjectNode)arg0).parent.getName() == parent.getName();
  }
  return false;
}","public boolean equals(Object arg0){
  if (arg0 == this) {
    return true;
  }
  if (arg0 instanceof ScriptObjectNode) {
    return parent == null ? (((ScriptObjectNode)arg0).parent == null) : parent.equals(((ScriptObjectNode)arg0).parent);
  }
  return false;
}",0.799163179916318
73065,"public ScriptObjectNode(IElementPropertyDefn parent){
  this.parent=parent;
}","public ScriptObjectNode(PropertyHandle parent){
  this.parent=parent;
}",0.8918918918918919
73066,"public List getScriptNodes(DesignElementHandle elementHandle){
  List scriptNodes=new ArrayList();
  List scriptMethods=elementHandle.getMethods();
  if (scriptMethods != null) {
    for (Iterator ite=scriptMethods.iterator(); ite.hasNext(); ) {
      IElementPropertyDefn elementPropDefn=(IElementPropertyDefn)ite.next();
      String methodName=elementPropDefn.getMethodInfo().getName();
      if (elementHandle.getStringProperty(methodName) != null) {
        ScriptObjectNode scriptElementNode=new ScriptObjectNode(elementPropDefn);
        scriptNodes.add(scriptElementNode);
      }
    }
  }
  return scriptNodes;
}","public List getScriptNodes(DesignElementHandle elementHandle){
  List scriptNodes=new ArrayList();
  List scriptMethods=elementHandle.getMethods();
  if (scriptMethods != null) {
    for (Iterator ite=scriptMethods.iterator(); ite.hasNext(); ) {
      IElementPropertyDefn elementPropDefn=(IElementPropertyDefn)ite.next();
      String methodName=elementPropDefn.getMethodInfo().getName();
      if (elementHandle.getStringProperty(methodName) != null) {
        ScriptObjectNode scriptElementNode=new ScriptObjectNode(elementHandle.getPropertyHandle(methodName));
        scriptNodes.add(scriptElementNode);
      }
    }
  }
  return scriptNodes;
}",0.9716981132075472
73067,"public void handleSelectionChanged(ISelection selection){
  if (editorUIEnabled == true) {
    saveModel();
  }
  if (selection != null) {
    Object[] sel=((IStructuredSelection)selection).toArray();
    if (sel.length == 1) {
      editObject=sel[0];
      if (sel[0] instanceof ScriptElementNode) {
        editObject=((ScriptElementNode)editObject).getParent();
      }
    }
    if (editObject instanceof DesignElementHandle) {
      palettePage.getSupport().setCurrentEditObject(editObject);
      setComboViewerInput(editObject);
      cmbItemLastSelected=null;
      setEditorText(""String_Node_Str"");
      if (cmbExpList.getItemCount() > 0) {
        enableEditor();
        selectItemInComboExpList((ISelection)selectionMap.get(getModel()));
      }
 else {
        disableEditor();
      }
      checkDirty();
      palettePage.getSupport().updateParametersTree();
    }
 else {
      disableEditor();
      cmbExpList.removeAll();
      cmbSubFunctions.setItems(null);
      cmbItemLastSelected=null;
      palettePage.getSupport().setCurrentEditObject(null);
    }
    if (sel.length > 0) {
      updateAnnotationLabel(sel[0]);
    }
  }
}","public void handleSelectionChanged(ISelection selection){
  if (editorUIEnabled == true) {
    saveModel();
  }
  if (selection != null) {
    Object[] sel=((IStructuredSelection)selection).toArray();
    IElementPropertyDefn targetMethod=null;
    if (sel.length == 1) {
      editObject=sel[0];
      if (sel[0] instanceof ScriptElementNode) {
        editObject=((ScriptElementNode)editObject).getParent();
      }
 else       if (sel[0] instanceof ScriptObjectNode) {
        editObject=((ScriptObjectNode)editObject).getParent();
      }
      if (editObject instanceof PropertyHandle) {
        targetMethod=((PropertyHandle)editObject).getPropertyDefn();
        editObject=((PropertyHandle)editObject).getElementHandle();
      }
    }
    if (editObject instanceof DesignElementHandle) {
      palettePage.getSupport().setCurrentEditObject(editObject);
      setComboViewerInput(editObject);
      cmbItemLastSelected=null;
      setEditorText(""String_Node_Str"");
      if (cmbExpList.getItemCount() > 0) {
        enableEditor();
        if (targetMethod != null) {
          selectItemInComboExpList(new StructuredSelection(targetMethod));
        }
 else {
          selectItemInComboExpList((ISelection)selectionMap.get(getModel()));
        }
      }
 else {
        disableEditor();
      }
      checkDirty();
      palettePage.getSupport().updateParametersTree();
    }
 else {
      disableEditor();
      cmbExpList.removeAll();
      cmbSubFunctions.setItems(null);
      cmbItemLastSelected=null;
      palettePage.getSupport().setCurrentEditObject(null);
    }
    if (sel.length > 0) {
      updateAnnotationLabel(sel[0]);
    }
  }
}",0.2847988608045568
73068,"private IExtractionResults extractByInstanceID(InstanceID iid) throws EngineException {
  DataID dataId=iid.getDataID();
  DataSetID dataSetId=dataId.getDataSetID();
  DataRequestSession dataSession=executionContext.getDataEngine().getDTESession();
  Scriptable scope=executionContext.getSharedScope();
  IResultIterator dataIter=null;
  IBaseQueryDefinition query=null;
  try {
    if (null == filterExpressions && null == sortExpressions && maxRows == -1) {
      dataIter=getResultSetIterator(dataSession,dataSetId,scope);
    }
 else {
      long id=iid.getComponentID();
      ReportItemDesign design=(ReportItemDesign)report.getReportItemByID(id);
      IDataQueryDefinition dataQuery=design.getQuery();
      if (!(dataQuery instanceof IBaseQueryDefinition)) {
        return null;
      }
 else {
        query=(IBaseQueryDefinition)dataQuery;
      }
      if (filterExpressions != null) {
        for (int iNum=0; iNum < filterExpressions.length; iNum++) {
          query.getFilters().add(filterExpressions[iNum]);
        }
      }
      if (sortExpressions != null) {
        for (int iNum=0; iNum < sortExpressions.length; iNum++) {
          query.getSorts().add(sortExpressions[iNum]);
        }
      }
      if (maxRows != -1) {
        query.setMaxRows(maxRows);
      }
      IBaseQueryDefinition rootQuery=query;
      while (rootQuery instanceof SubqueryDefinition) {
        rootQuery=rootQuery.getParentQuery();
      }
      QueryDefinition newRootQuery=queryCopy((QueryDefinition)rootQuery);
      HashMap queryIds=report.getQueryIDs();
      String queryId=(String)queryIds.get(rootQuery);
      String rsetId=queryId2rsetId(queryId);
      newRootQuery.setQueryResultsID(rsetId);
      IPreparedQuery preparedQuery=dataSession.prepare(newRootQuery);
      IQueryResults rootResults=preparedQuery.execute(scope);
      dataIter=getFilterResultSetIterator(dataSession,dataSetId,scope,rootResults);
    }
  }
 catch (  BirtException e) {
    throw new EngineException(""String_Node_Str"",e);
  }
 finally {
    if (null != query) {
      if (filterExpressions != null) {
        for (int iNum=0; iNum < filterExpressions.length; iNum++) {
          query.getFilters().remove(filterExpressions[iNum]);
        }
        filterExpressions=null;
      }
      if (sortExpressions != null) {
        for (int iNum=0; iNum < sortExpressions.length; iNum++) {
          query.getSorts().remove(sortExpressions[iNum]);
        }
        sortExpressions=null;
      }
      maxRows=-1;
    }
  }
  IResultMetaData metaData=getMetaDateByInstanceID(iid);
  if (null != metaData) {
    return new ExtractionResults(dataIter,metaData,this.selectedColumns);
  }
 else {
    return null;
  }
}","private IExtractionResults extractByInstanceID(InstanceID iid) throws EngineException {
  DataID dataId=iid.getDataID();
  DataSetID dataSetId=dataId.getDataSetID();
  DataRequestSession dataSession=executionContext.getDataEngine().getDTESession();
  Scriptable scope=executionContext.getSharedScope();
  IResultIterator dataIter=null;
  IBaseQueryDefinition query=null;
  try {
    if (null == filterExpressions && null == sortExpressions && maxRows == -1) {
      dataIter=getResultSetIterator(dataSession,dataSetId,scope);
    }
 else {
      long id=iid.getComponentID();
      ReportItemDesign design=(ReportItemDesign)report.getReportItemByID(id);
      IDataQueryDefinition dataQuery=design.getQuery();
      if (!(dataQuery instanceof IBaseQueryDefinition)) {
        return null;
      }
 else {
        query=(IBaseQueryDefinition)dataQuery;
      }
      if (filterExpressions != null) {
        for (int iNum=0; iNum < filterExpressions.length; iNum++) {
          query.getFilters().add(filterExpressions[iNum]);
        }
      }
      if (sortExpressions != null) {
        for (int iNum=0; iNum < sortExpressions.length; iNum++) {
          query.getSorts().add(sortExpressions[iNum]);
        }
      }
      if (maxRows != -1) {
        query.setMaxRows(maxRows);
      }
      IBaseQueryDefinition rootQuery=query;
      while (rootQuery instanceof SubqueryDefinition) {
        rootQuery=rootQuery.getParentQuery();
      }
      QueryDefinition newRootQuery=queryCopy((QueryDefinition)rootQuery);
      HashMap queryIds=report.getQueryIDs();
      String queryId=(String)queryIds.get(rootQuery);
      String rsetId=queryId2rsetId(queryId);
      newRootQuery.setQueryResultsID(rsetId);
      IPreparedQuery preparedQuery=dataSession.prepare(newRootQuery);
      IQueryResults rootResults=preparedQuery.execute(scope);
      dataIter=getFilterResultSetIterator(dataSession,dataSetId,scope,rootResults);
    }
  }
 catch (  BirtException e) {
    throw new EngineException(""String_Node_Str"",e);
  }
 finally {
    if (null != query) {
      if (filterExpressions != null) {
        for (int iNum=0; iNum < filterExpressions.length; iNum++) {
          query.getFilters().remove(filterExpressions[iNum]);
        }
        filterExpressions=null;
      }
      if (sortExpressions != null) {
        for (int iNum=0; iNum < sortExpressions.length; iNum++) {
          query.getSorts().remove(sortExpressions[iNum]);
        }
        sortExpressions=null;
      }
      maxRows=-1;
    }
  }
  IResultMetaData metaData=getMetaDateByInstanceID(iid);
  if (null != metaData) {
    return new ExtractionResults(dataIter,metaData,this.selectedColumns,startRow,maxRows);
  }
 else {
    return null;
  }
}",0.9968640472237594
73069,"private IExtractionResults extractByInstanceID(InstanceID instanceId) throws BirtException {
  InstanceID iid=instanceId;
  while (iid != null) {
    long id=iid.getComponentID();
    ReportItemDesign design=(ReportItemDesign)report.getReportItemByID(id);
    IDataQueryDefinition dataQuery=design.getQuery();
    if (dataQuery != null) {
      if (!(dataQuery instanceof IBaseQueryDefinition)) {
        return null;
      }
      IBaseQueryDefinition query=(IBaseQueryDefinition)dataQuery;
      String queryId=(String)query2QueryIdMapping.get(query);
      if (filterExpressions != null) {
        query=cloneQuery(query);
        for (int i=0; i < filterExpressions.length; i++) {
          query.getFilters().add(filterExpressions[i]);
        }
        filterExpressions=null;
      }
      if (sortExpressions != null) {
        query=cloneQuery(query);
        for (int i=0; i < sortExpressions.length; i++) {
          query.getSorts().add(sortExpressions[i]);
        }
        sortExpressions=null;
      }
      if (maxRows != -1) {
        query.setMaxRows(maxRows);
        maxRows=-1;
      }
      if (query instanceof IQueryDefinition) {
        while (iid != null) {
          DataID dataId=iid.getDataID();
          if (dataId != null) {
            DataSetID dataSetId=dataId.getDataSetID();
            long rowId=dataId.getRowID();
            IResultIterator dataIter=executeQuery(dataSetId.toString(),rowId,queryId,(IQueryDefinition)query);
            IResultMetaData metaData=getMetaDateByInstanceID(instanceId);
            if (dataIter != null && metaData != null) {
              return new ExtractionResults(dataIter,metaData,this.selectedColumns);
            }
            return null;
          }
          iid=iid.getParentID();
        }
        IResultIterator dataIter=executeQuery(null,-1,queryId,(QueryDefinition)query);
        IResultMetaData metaData=getMetaDateByInstanceID(instanceId);
        if (dataIter != null && metaData != null) {
          return new ExtractionResults(dataIter,metaData,this.selectedColumns);
        }
        return null;
      }
 else {
        while (iid != null) {
          DataID dataId=iid.getDataID();
          if (dataId != null) {
            DataSetID dataSetId=dataId.getDataSetID();
            long rowId=dataId.getRowID();
            IResultIterator dataIter=executeSubQuery(dataSetId,rowId,(ISubqueryDefinition)query);
            IResultMetaData metaData=getMetaDateByInstanceID(instanceId);
            if (dataIter != null && metaData != null) {
              return new ExtractionResults(dataIter,metaData,this.selectedColumns);
            }
            return null;
          }
          iid=iid.getParentID();
        }
      }
    }
    iid=iid.getParentID();
  }
  return null;
}","private IExtractionResults extractByInstanceID(InstanceID instanceId) throws BirtException {
  InstanceID iid=instanceId;
  while (iid != null) {
    long id=iid.getComponentID();
    ReportItemDesign design=(ReportItemDesign)report.getReportItemByID(id);
    IDataQueryDefinition dataQuery=design.getQuery();
    if (dataQuery != null) {
      if (!(dataQuery instanceof IBaseQueryDefinition)) {
        return null;
      }
      IBaseQueryDefinition query=(IBaseQueryDefinition)dataQuery;
      String queryId=(String)query2QueryIdMapping.get(query);
      if (filterExpressions != null) {
        query=cloneQuery(query);
        for (int i=0; i < filterExpressions.length; i++) {
          query.getFilters().add(filterExpressions[i]);
        }
        filterExpressions=null;
      }
      if (sortExpressions != null) {
        query=cloneQuery(query);
        for (int i=0; i < sortExpressions.length; i++) {
          query.getSorts().add(sortExpressions[i]);
        }
        sortExpressions=null;
      }
      if (query instanceof IQueryDefinition) {
        while (iid != null) {
          DataID dataId=iid.getDataID();
          if (dataId != null) {
            DataSetID dataSetId=dataId.getDataSetID();
            long rowId=dataId.getRowID();
            IResultIterator dataIter=executeQuery(dataSetId.toString(),rowId,queryId,(IQueryDefinition)query);
            IResultMetaData metaData=getMetaDateByInstanceID(instanceId);
            if (dataIter != null && metaData != null) {
              return new ExtractionResults(dataIter,metaData,this.selectedColumns,startRow,maxRows);
            }
            return null;
          }
          iid=iid.getParentID();
        }
        IResultIterator dataIter=executeQuery(null,-1,queryId,(QueryDefinition)query);
        IResultMetaData metaData=getMetaDateByInstanceID(instanceId);
        if (dataIter != null && metaData != null) {
          return new ExtractionResults(dataIter,metaData,this.selectedColumns,startRow,maxRows);
        }
        return null;
      }
 else {
        while (iid != null) {
          DataID dataId=iid.getDataID();
          if (dataId != null) {
            DataSetID dataSetId=dataId.getDataSetID();
            long rowId=dataId.getRowID();
            IResultIterator dataIter=executeSubQuery(dataSetId,rowId,(ISubqueryDefinition)query);
            IResultMetaData metaData=getMetaDateByInstanceID(instanceId);
            if (dataIter != null && metaData != null) {
              return new ExtractionResults(dataIter,metaData,this.selectedColumns,startRow,maxRows);
            }
            return null;
          }
          iid=iid.getParentID();
        }
      }
    }
    iid=iid.getParentID();
  }
  return null;
}",0.7742520398912058
73070,"public boolean next() throws BirtException {
  return iterator.next();
}","public boolean next() throws BirtException {
  if (beforeFirstRow) {
    beforeFirstRow=false;
  }
  rowCount++;
  if (maxRows >= 0 && rowCount > maxRows) {
    return false;
  }
  return iterator.next();
}",0.5179856115107914
73071,"public Object getValue(int index) throws BirtException {
  IResultMetaData metaData=getResultMetaData();
  String columnName=metaData.getColumnName(index);
  return iterator.getValue(columnName);
}","public Object getValue(int index) throws BirtException {
  if (beforeFirstRow) {
    throw new EngineException(""String_Node_Str"");
  }
  IResultMetaData metaData=getResultMetaData();
  String columnName=metaData.getColumnName(index);
  return iterator.getValue(columnName);
}",0.8347457627118644
73072,"DataIterator(IExtractionResults results,IResultIterator iterator){
  this.results=results;
  this.iterator=iterator;
}","DataIterator(IExtractionResults results,IResultIterator iterator,int startRow,int maxRows) throws BirtException {
  this.results=results;
  this.iterator=iterator;
  this.startRow=startRow;
  this.maxRows=maxRows;
  this.rowCount=0;
  beforeFirstRow=true;
  if (startRow > 0) {
    iterator.moveTo(startRow - 1);
  }
}",0.5412844036697247
73073,"ExtractionResults(IResultIterator resultIterator,IResultMetaData metaData,String[] selectedColumns){
  this.resultIterator=resultIterator;
  if (null == selectedColumns) {
    this.metaData=metaData;
  }
 else {
    this.metaData=new ResultMetaData(metaData,selectedColumns);
  }
}","ExtractionResults(IResultIterator resultIterator,IResultMetaData metaData,String[] selectedColumns,int startRow,int maxRows){
  this.resultIterator=resultIterator;
  if (null == selectedColumns) {
    this.metaData=metaData;
  }
 else {
    this.metaData=new ResultMetaData(metaData,selectedColumns);
  }
  this.startRow=startRow;
  this.maxRows=maxRows;
}",0.8822605965463108
73074,"public IDataIterator nextResultIterator() throws BirtException {
  if (iterator == null) {
    if (null == resultIterator && null != queryResults) {
      resultIterator=queryResults.getResultIterator();
    }
    this.iterator=new DataIterator(this,resultIterator);
  }
  return iterator;
}","public IDataIterator nextResultIterator() throws BirtException {
  if (iterator == null) {
    if (null == resultIterator && null != queryResults) {
      resultIterator=queryResults.getResultIterator();
    }
    this.iterator=new DataIterator(this,resultIterator,startRow,maxRows);
  }
  return iterator;
}",0.9716193656093488
73075,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
    resultSetList=handle.getListValue();
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
    resultSetList=handle.getListValue();
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null && !resultSetList.isEmpty()) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      String columnName=resultSetColumn.getColumnName();
      String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
      uniqueColumnNameSet.add(uniqueColumnName);
      if (!uniqueColumnName.equals(columnName)) {
        updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      }
      columnDef=new ResultSetColumnDefinition(uniqueColumnName);
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(DataAdapterUtil.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
    resultSetList=handle.getListValue();
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
    resultSetList=handle.getListValue();
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null && !resultSetList.isEmpty()) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      uniqueColumnNameSet.add(resultSetColumn.getColumnName());
      columnDef=new ResultSetColumnDefinition(resultSetColumn.getColumnName());
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(DataAdapterUtil.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,resultSetColumn.getColumnName()) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,resultSetColumn.getColumnName());
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}",0.509147935180345
73076,"protected void prepareChildren(){
  currentChangeType=ColumnEvent.UNKNOWN_CHANGE;
  currentColIndex=-1;
  currentEdgePosition=-1;
  rowSpan=1;
  colSpan=0;
  lastMeasureIndex=-1;
  totalMeasureCount=crosstabItem.getMeasureCount();
  measureDetailStarted=false;
  measureSubTotalStarted=false;
  measureGrandTotalStarted=false;
  hasLast=false;
  isFirst=true;
}","protected void prepareChildren(){
  currentChangeType=ColumnEvent.UNKNOWN_CHANGE;
  currentColIndex=-1;
  currentEdgePosition=-1;
  rowSpan=1;
  colSpan=0;
  lastMeasureIndex=-1;
  totalMeasureCount=crosstabItem.getMeasureCount();
  isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstabItem.getMeasureDirection());
  measureDetailStarted=false;
  measureSubTotalStarted=false;
  measureGrandTotalStarted=false;
  hasLast=false;
  isFirst=true;
}",0.8880688806888068
73077,"protected boolean isMeetMeasureDetailEnd(ColumnEvent ev,AggregationCellHandle aggCell){
  if (totalMeasureCount != 1 || aggCell == null || ev.type == ColumnEvent.GRAND_TOTAL_CHANGE) {
    return true;
  }
  int targetColSpanGroupIndex=GroupUtil.getGroupIndex(columnGroups,aggCell.getSpanOverOnColumn());
  if (targetColSpanGroupIndex != -1) {
    if (ev.type == ColumnEvent.COLUMN_TOTAL_CHANGE) {
      EdgeGroup gp=(EdgeGroup)columnGroups.get(targetColSpanGroupIndex);
      if (ev.dimensionIndex < gp.dimensionIndex || (ev.dimensionIndex == gp.dimensionIndex && ev.levelIndex < gp.levelIndex)) {
        return true;
      }
    }
    try {
      targetColSpanGroupIndex--;
      if (targetColSpanGroupIndex == -1) {
        return false;
      }
 else {
        EdgeCursor columnEdgeCursor=getColumnEdgeCursor();
        if (columnEdgeCursor != null) {
          columnEdgeCursor.setPosition(ev.dataPosition);
          DimensionCursor dc=(DimensionCursor)columnEdgeCursor.getDimensionCursor().get(targetColSpanGroupIndex);
          if (!GroupUtil.isDummyGroup(dc)) {
            return currentEdgePosition < dc.getEdgeStart();
          }
        }
      }
    }
 catch (    OLAPException e) {
      logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
    }
  }
  return true;
}","protected boolean isMeetMeasureDetailEnd(ColumnEvent ev,AggregationCellHandle aggCell){
  if (aggCell == null || ev.type == ColumnEvent.GRAND_TOTAL_CHANGE) {
    return true;
  }
  if (totalMeasureCount != 1) {
    if (!isVerticalMeasure) {
      return true;
    }
  }
  int targetColSpanGroupIndex=GroupUtil.getGroupIndex(columnGroups,aggCell.getSpanOverOnColumn());
  if (targetColSpanGroupIndex != -1) {
    if (ev.type == ColumnEvent.COLUMN_TOTAL_CHANGE) {
      EdgeGroup gp=(EdgeGroup)columnGroups.get(targetColSpanGroupIndex);
      if (ev.dimensionIndex < gp.dimensionIndex || (ev.dimensionIndex == gp.dimensionIndex && ev.levelIndex < gp.levelIndex)) {
        return true;
      }
    }
    try {
      targetColSpanGroupIndex--;
      if (targetColSpanGroupIndex == -1) {
        return false;
      }
 else {
        EdgeCursor columnEdgeCursor=getColumnEdgeCursor();
        if (columnEdgeCursor != null) {
          columnEdgeCursor.setPosition(ev.dataPosition);
          DimensionCursor dc=(DimensionCursor)columnEdgeCursor.getDimensionCursor().get(targetColSpanGroupIndex);
          if (!GroupUtil.isDummyGroup(dc)) {
            return currentEdgePosition < dc.getEdgeStart();
          }
        }
      }
    }
 catch (    OLAPException e) {
      logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
    }
  }
  return true;
}",0.9559984956750658
73078,"protected void prepareChildren(){
  super.prepareChildren();
  boolean isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstabItem.getMeasureDirection());
  isFirstTotalRow=rowIndex == GroupUtil.getFirstTotalRowIndex(crosstabItem,-1,-1,isVerticalMeasure);
  totalRowSpan=GroupUtil.getTotalRowSpan(crosstabItem,-1,-1,isVerticalMeasure);
  walker.reload();
}","protected void prepareChildren(){
  super.prepareChildren();
  isFirstTotalRow=rowIndex == GroupUtil.getFirstTotalRowIndex(crosstabItem,-1,-1,isVerticalMeasure);
  totalRowSpan=GroupUtil.getTotalRowSpan(crosstabItem,-1,-1,isVerticalMeasure);
  walker.reload();
}",0.3563402889245586
73079,"protected void prepareChildren(){
  super.prepareChildren();
  initMeasureCache();
  isLayoutDownThenOver=PAGE_LAYOUT_DOWN_THEN_OVER.equals(crosstabItem.getPageLayout());
  if (isLayoutDownThenOver) {
    startTotalDimensionIndex=dimensionIndex;
    startTotalLevelIndex=levelIndex;
  }
 else {
    EdgeGroup nextGroup=GroupUtil.getNextGroup(rowGroups,dimensionIndex,levelIndex);
    startTotalDimensionIndex=nextGroup.dimensionIndex;
    startTotalLevelIndex=nextGroup.levelIndex;
  }
  DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimensionIndex);
  LevelViewHandle lv=dv.getLevel(levelIndex);
  isSubTotalBefore=lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation());
  boolean isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstabItem.getMeasureDirection());
  isFirstTotalRow=rowIndex == GroupUtil.getFirstTotalRowIndex(crosstabItem,dimensionIndex,levelIndex,isVerticalMeasure);
  totalRowSpan=GroupUtil.getTotalRowSpan(crosstabItem,dimensionIndex,levelIndex,isVerticalMeasure);
  walker.reload();
}","protected void prepareChildren(){
  super.prepareChildren();
  initMeasureCache();
  isLayoutDownThenOver=PAGE_LAYOUT_DOWN_THEN_OVER.equals(crosstabItem.getPageLayout());
  if (isLayoutDownThenOver) {
    startTotalDimensionIndex=dimensionIndex;
    startTotalLevelIndex=levelIndex;
  }
 else {
    EdgeGroup nextGroup=GroupUtil.getNextGroup(rowGroups,dimensionIndex,levelIndex);
    startTotalDimensionIndex=nextGroup.dimensionIndex;
    startTotalLevelIndex=nextGroup.levelIndex;
  }
  DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimensionIndex);
  LevelViewHandle lv=dv.getLevel(levelIndex);
  isSubTotalBefore=lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation());
  isFirstTotalRow=rowIndex == GroupUtil.getFirstTotalRowIndex(crosstabItem,dimensionIndex,levelIndex,isVerticalMeasure);
  totalRowSpan=GroupUtil.getTotalRowSpan(crosstabItem,dimensionIndex,levelIndex,isVerticalMeasure);
  walker.reload();
}",0.7684159845931632
73080,"/** 
 * @return <code>true</code> if the command can be executed
 */
public boolean canExecute(){
  if (cloneElement == null) {
    return false;
  }
  DesignElementHandle childHandle=sourceHandle;
  if (childHandle == null) {
    childHandle=cloneElement.getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
  }
  return DNDUtil.handleValidateTargetCanContain(newContainer,childHandle) && DNDUtil.handleValidateTargetCanContainMore(newContainer,1);
}","/** 
 * @return <code>true</code> if the command can be executed
 */
public boolean canExecute(){
  if (cloneElement == null) {
    return false;
  }
  DesignElementHandle childHandle=sourceHandle;
  if (childHandle == null) {
    if (cloneElement instanceof IDesignElement) {
      childHandle=((IDesignElement)cloneElement).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
    }
 else     if (cloneElement instanceof IElementCopy) {
      childHandle=((IElementCopy)cloneElement).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle());
    }
  }
  return DNDUtil.handleValidateTargetCanContain(newContainer,childHandle) && DNDUtil.handleValidateTargetCanContainMore(newContainer,1);
}",0.7713815789473685
73081,"/** 
 * Constructor
 * @param cloneElement the copy of the source
 * @param newContainer the new container, class type could be <code>DesignElementHandle</code>,<code>SlotHandle</code> or <code>ReportElementModel</code>
 * @param position the position will be added
 */
public PasteCommand(IDesignElement cloneElement,Object newContainer,int position){
  this.cloneElement=cloneElement;
  this.newContainer=newContainer;
  this.position=position;
  isCloned=false;
}","/** 
 * Constructor
 * @param cloneElement the copy of the source
 * @param newContainer the new container, class type could be <code>DesignElementHandle</code>,<code>SlotHandle</code> or <code>ReportElementModel</code>
 * @param position the position will be added
 */
public PasteCommand(IElementCopy cloneElement,Object newContainer,int position){
  this.cloneElement=cloneElement;
  this.newContainer=newContainer;
  this.position=position;
  isCloned=false;
}",0.9741935483870968
73082,"/** 
 * Add this design element to report.
 * @param newHandle The design element to add
 */
private void addHandleToReport(DesignElementHandle newHandle) throws ContentException, NameException, SemanticException {
  SlotHandle slotHandle=null;
  if (newContainer instanceof DesignElementHandle) {
    slotHandle=((DesignElementHandle)newContainer).getSlot(slotID);
  }
 else   if (newContainer instanceof SlotHandle) {
    slotHandle=(SlotHandle)newContainer;
  }
  if (slotHandle != null) {
    slotHandle.paste(newHandle,position);
  }
 else   if (newContainer instanceof PropertyHandle) {
    ((PropertyHandle)newContainer).paste(newHandle,position);
  }
 else   if (newContainer instanceof DesignElementHandle) {
    ((DesignElementHandle)newContainer).getPropertyHandle(contentString).paste(newHandle,position);
  }
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newHandle) + ""String_Node_Str""+ slotHandle.getSlotID()+ ""String_Node_Str""+ DEUtil.getDisplayLabel(slotHandle.getElementHandle())+ ""String_Node_Str""+ position);
  }
}","/** 
 * Add this design element to report.
 * @param newHandle The design element to add
 */
private void addHandleToReport(DesignElementHandle newHandle) throws ContentException, NameException, SemanticException {
  SlotHandle slotHandle=null;
  DesignElementHandle containerHandle=null;
  if (newContainer instanceof DesignElementHandle) {
    slotHandle=((DesignElementHandle)newContainer).getSlot(slotID);
    containerHandle=(DesignElementHandle)newContainer;
  }
 else   if (newContainer instanceof SlotHandle) {
    slotHandle=(SlotHandle)newContainer;
    containerHandle=((SlotHandle)newContainer).getElementHandle();
  }
 else   if (newContainer instanceof PropertyHandle) {
    containerHandle=((PropertyHandle)newContainer).getElementHandle();
  }
  if (cloneElement instanceof IElementCopy) {
    if (slotHandle != null) {
      CopyUtil.paste((IElementCopy)cloneElement,containerHandle,slotID,position);
    }
 else     if (newContainer instanceof PropertyHandle) {
      CopyUtil.paste((IElementCopy)cloneElement,containerHandle,((PropertyHandle)newContainer).getPropertyDefn().getName(),position);
    }
 else     if (newContainer instanceof DesignElementHandle) {
      CopyUtil.paste((IElementCopy)cloneElement,containerHandle,DEUtil.getDefaultContentName(newContainer),position);
    }
  }
 else   if (newHandle != null) {
    if (slotHandle != null) {
      slotHandle.paste(newHandle,position);
    }
 else     if (newContainer instanceof PropertyHandle) {
      ((PropertyHandle)newContainer).paste(newHandle,position);
    }
 else     if (newContainer instanceof DesignElementHandle) {
      ((DesignElementHandle)newContainer).getPropertyHandle(contentString).paste(newHandle,position);
    }
  }
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"" + cloneElement + ""String_Node_Str""+ slotHandle != null ? slotHandle.getSlotID() : DEUtil.getDefaultContentName(newContainer) + ""String_Node_Str"" + position);
  }
}",0.6014350945857795
73083,"/** 
 * Executes the Command.
 */
public void execute(){
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (!isCut || sourceHandle == null || sourceHandle.getContainer() == null) {
      isCut=false;
    }
    calculatePositionAndSlotId();
    dropSourceHandle(sourceHandle);
    ModuleHandle currentDesignHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
    DesignElementHandle newHandle=copyNewHandle(cloneElement,currentDesignHandle);
    addHandleToReport(newHandle);
  }
 catch (  Exception e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
}","/** 
 * Executes the Command.
 */
public void execute(){
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (!isCut || sourceHandle == null || sourceHandle.getContainer() == null) {
      isCut=false;
    }
    calculatePositionAndSlotId();
    dropSourceHandle(sourceHandle);
    ModuleHandle currentDesignHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
    DesignElementHandle newHandle=cloneElement instanceof IDesignElement ? copyNewHandle((IDesignElement)cloneElement,currentDesignHandle) : null;
    addHandleToReport(newHandle);
  }
 catch (  Exception e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
}",0.9576719576719576
73084,"/** 
 * Returns specified command
 * @param commandType command type, value is <code>TYPE_CUT</code> or <code>TYPE_COPY</code>
 * @param transferSource transfer source
 * @param newContainer the new container
 * @param position the position will be added
 * @return command
 */
private static Command getNewCommand(String commandType,Object transferSource,Object newContainer,int position) throws SemanticException {
  boolean isCut=TYPE_CUT.equals(commandType);
  if (newContainer instanceof ParameterGroupHandle && (transferSource instanceof ParameterGroupHandle || DEUtil.isParameterGroup(transferSource))) {
    return pasteParameterGroup(commandType,transferSource,(ParameterGroupHandle)newContainer);
  }
 else   if (transferSource instanceof DesignElementHandle) {
    return new PasteCommand((DesignElementHandle)transferSource,newContainer,position,isCut);
  }
 else   if (transferSource instanceof IDesignElement) {
    return new PasteCommand((IDesignElement)transferSource,newContainer,position);
  }
  return null;
}","/** 
 * Returns specified command
 * @param commandType command type, value is <code>TYPE_CUT</code> or <code>TYPE_COPY</code>
 * @param transferSource transfer source
 * @param newContainer the new container
 * @param position the position will be added
 * @return command
 */
private static Command getNewCommand(String commandType,Object transferSource,Object newContainer,int position) throws SemanticException {
  boolean isCut=TYPE_CUT.equals(commandType);
  if (newContainer instanceof ParameterGroupHandle && (transferSource instanceof ParameterGroupHandle || DEUtil.isParameterGroup(transferSource))) {
    return pasteParameterGroup(commandType,transferSource,(ParameterGroupHandle)newContainer);
  }
 else   if (transferSource instanceof DesignElementHandle) {
    return new PasteCommand((DesignElementHandle)transferSource,newContainer,position,isCut);
  }
 else   if (transferSource instanceof IDesignElement) {
    return new PasteCommand((IDesignElement)transferSource,newContainer,position);
  }
 else   if (transferSource instanceof IElementCopy) {
    return new PasteCommand((IElementCopy)transferSource,newContainer,position);
  }
  return null;
}",0.9258079198907602
73085,"/** 
 * Validates target elements can contain transfer data. <p> If transfer data is single element, validate target's container also
 * @param targetObj target elements
 * @param transferData transfer data,single object or array are permitted
 * @param validateContainer validate target's container can contain
 * @return If target elements can't be dropped, return CONTAIN_NO.<p> If target elements can be dropped, return CONTAIN_THIS. <p> If target's container can be dropped, return CONTAIN_PARENT
 */
public static int handleValidateTargetCanContain(Object targetObj,Object transferData,boolean validateContainer){
  if (targetObj == null || transferData == null)   return CONTAIN_NO;
  if (transferData instanceof StructuredSelection) {
    return handleValidateTargetCanContain(targetObj,((StructuredSelection)transferData).toArray(),validateContainer);
  }
 else   if (transferData instanceof Object[]) {
    Object[] array=(Object[])transferData;
    if (array.length == 1) {
      return handleValidateTargetCanContain(targetObj,array[0],validateContainer);
    }
    int canContainAll=CONTAIN_NO;
    for (int i=0; i < array.length; i++) {
      int canContain=handleValidateTargetCanContain(targetObj,array[i],validateContainer);
      if (i == 0) {
        canContainAll=canContain;
      }
      if (canContain == CONTAIN_NO || canContain != canContainAll) {
        return CONTAIN_NO;
      }
    }
    return canContainAll;
  }
 else {
    if (transferData instanceof DesignElementHandle) {
      return handleValidateTargetCanContainByContainer(targetObj,(DesignElementHandle)transferData,validateContainer);
    }
 else     if (transferData instanceof ColumnBandData) {
      if (targetObj instanceof ColumnHandle) {
        return handleValidateContainColumnPaste((ColumnHandle)targetObj,(ColumnBandData)transferData,false) ? CONTAIN_PARENT : CONTAIN_NO;
      }
      return CONTAIN_NO;
    }
 else     if (transferData instanceof IDesignElement) {
      DesignElementHandle childHandle=((IDesignElement)transferData).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
      return handleValidateTargetCanContainByContainer(targetObj,childHandle,validateContainer);
    }
 else     if (transferData instanceof SlotHandle) {
      SlotHandle slot=(SlotHandle)transferData;
      Object[] childHandles=slot.getContents().toArray();
      return handleValidateTargetCanContainByContainer(targetObj,childHandles,validateContainer);
    }
 else     if (transferData instanceof IStructure) {
      return handleValidateTargetCanContainStructure(targetObj,(IStructure)transferData) ? CONTAIN_THIS : CONTAIN_NO;
    }
 else     if (transferData instanceof EmbeddedImageHandle) {
      if (targetObj instanceof ReportDesignHandle && ((EmbeddedImageHandle)transferData).getElementHandle().getRoot() instanceof LibraryHandle)       return CONTAIN_THIS;
 else       if (targetObj instanceof EmbeddedImageNode)       return CONTAIN_THIS;
 else       return CONTAIN_NO;
    }
 else {
      return CONTAIN_NO;
    }
  }
}","/** 
 * Validates target elements can contain transfer data. <p> If transfer data is single element, validate target's container also
 * @param targetObj target elements
 * @param transferData transfer data,single object or array are permitted
 * @param validateContainer validate target's container can contain
 * @return If target elements can't be dropped, return CONTAIN_NO.<p> If target elements can be dropped, return CONTAIN_THIS. <p> If target's container can be dropped, return CONTAIN_PARENT
 */
public static int handleValidateTargetCanContain(Object targetObj,Object transferData,boolean validateContainer){
  if (targetObj == null || transferData == null)   return CONTAIN_NO;
  if (transferData instanceof StructuredSelection) {
    return handleValidateTargetCanContain(targetObj,((StructuredSelection)transferData).toArray(),validateContainer);
  }
 else   if (transferData instanceof Object[]) {
    Object[] array=(Object[])transferData;
    if (array.length == 1) {
      return handleValidateTargetCanContain(targetObj,array[0],validateContainer);
    }
    int canContainAll=CONTAIN_NO;
    for (int i=0; i < array.length; i++) {
      int canContain=handleValidateTargetCanContain(targetObj,array[i],validateContainer);
      if (i == 0) {
        canContainAll=canContain;
      }
      if (canContain == CONTAIN_NO || canContain != canContainAll) {
        return CONTAIN_NO;
      }
    }
    return canContainAll;
  }
 else {
    if (transferData instanceof DesignElementHandle) {
      return handleValidateTargetCanContainByContainer(targetObj,(DesignElementHandle)transferData,validateContainer);
    }
 else     if (transferData instanceof ColumnBandData) {
      if (targetObj instanceof ColumnHandle) {
        return handleValidateContainColumnPaste((ColumnHandle)targetObj,(ColumnBandData)transferData,false) ? CONTAIN_PARENT : CONTAIN_NO;
      }
      return CONTAIN_NO;
    }
 else     if (transferData instanceof IDesignElement) {
      DesignElementHandle childHandle=((IDesignElement)transferData).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
      return handleValidateTargetCanContainByContainer(targetObj,childHandle,validateContainer);
    }
 else     if (transferData instanceof IElementCopy) {
      DesignElementHandle childHandle=((IElementCopy)transferData).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle());
      return handleValidateTargetCanContainByContainer(targetObj,childHandle,validateContainer);
    }
 else     if (transferData instanceof SlotHandle) {
      SlotHandle slot=(SlotHandle)transferData;
      Object[] childHandles=slot.getContents().toArray();
      return handleValidateTargetCanContainByContainer(targetObj,childHandles,validateContainer);
    }
 else     if (transferData instanceof IStructure) {
      return handleValidateTargetCanContainStructure(targetObj,(IStructure)transferData) ? CONTAIN_THIS : CONTAIN_NO;
    }
 else     if (transferData instanceof EmbeddedImageHandle) {
      if (targetObj instanceof ReportDesignHandle && ((EmbeddedImageHandle)transferData).getElementHandle().getRoot() instanceof LibraryHandle)       return CONTAIN_THIS;
 else       if (targetObj instanceof EmbeddedImageNode)       return CONTAIN_THIS;
 else       return CONTAIN_NO;
    }
 else {
      return CONTAIN_NO;
    }
  }
}",0.9137420059273124
73086,"/** 
 * Gets a copy of source data. If copy multi-selection, skip all children's clone
 * @param source source to clone
 * @return copy of source
 */
public static Object cloneSource(Object source){
  source=unwrapToModel(source);
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    ArrayList list=new ArrayList();
    for (int i=0; i < array.length; i++) {
      if (array[i] instanceof ColumnHandle) {
        list.add(cloneSource(array[i]));
      }
    }
    if (!list.isEmpty()) {
      return list.toArray();
    }
    for (int i=0; i < array.length; i++) {
      if (!checkContainerExists(array[i],array)) {
        list.add(cloneSource(array[i]));
      }
    }
    return list.toArray();
  }
  if (source instanceof StructuredSelection) {
    return cloneSource(((StructuredSelection)source).toArray());
  }
  if (source instanceof ColumnHandle) {
    try {
      int columnNumber=HandleAdapterFactory.getInstance().getColumnHandleAdapter(source).getColumnNumber();
      Object parent=((ColumnHandle)source).getContainer();
      if (parent instanceof TableHandle) {
        return ((TableHandle)parent).copyColumn(columnNumber);
      }
 else       if (parent instanceof GridHandle) {
        return ((GridHandle)parent).copyColumn(columnNumber);
      }
    }
 catch (    SemanticException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
    return null;
  }
  if (source instanceof DesignElementHandle) {
    IDesignElement copyElement=((DesignElementHandle)source).copy();
    return copyElement;
  }
  if (source instanceof IDesignElement) {
    try {
      return ((IDesignElement)source).clone();
    }
 catch (    CloneNotSupportedException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    Object[] array=new Object[slot.getCount()];
    for (int i=0; i < array.length; i++) {
      array[i]=slot.get(i);
    }
    return cloneSource(array);
  }
  if (source instanceof StructureHandle) {
    return ((StructureHandle)source).getStructure().copy();
  }
  return null;
}","/** 
 * Gets a copy of source data. If copy multi-selection, skip all children's clone
 * @param source source to clone
 * @return copy of source
 */
public static Object cloneSource(Object source){
  source=unwrapToModel(source);
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    ArrayList list=new ArrayList();
    for (int i=0; i < array.length; i++) {
      if (array[i] instanceof ColumnHandle) {
        list.add(cloneSource(array[i]));
      }
    }
    if (!list.isEmpty()) {
      return list.toArray();
    }
    for (int i=0; i < array.length; i++) {
      if (!checkContainerExists(array[i],array)) {
        list.add(cloneSource(array[i]));
      }
    }
    return list.toArray();
  }
  if (source instanceof StructuredSelection) {
    return cloneSource(((StructuredSelection)source).toArray());
  }
  if (source instanceof ColumnHandle) {
    try {
      int columnNumber=HandleAdapterFactory.getInstance().getColumnHandleAdapter(source).getColumnNumber();
      Object parent=((ColumnHandle)source).getContainer();
      if (parent instanceof TableHandle) {
        return ((TableHandle)parent).copyColumn(columnNumber);
      }
 else       if (parent instanceof GridHandle) {
        return ((GridHandle)parent).copyColumn(columnNumber);
      }
    }
 catch (    SemanticException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
    return null;
  }
  if (source instanceof DesignElementHandle) {
    IElementCopy copyElement=CopyUtil.copy((DesignElementHandle)source);
    return copyElement;
  }
  if (source instanceof IDesignElement) {
    try {
      return ((IDesignElement)source).clone();
    }
 catch (    CloneNotSupportedException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    Object[] array=new Object[slot.getCount()];
    for (int i=0; i < array.length; i++) {
      array[i]=slot.get(i);
    }
    return cloneSource(array);
  }
  if (source instanceof StructureHandle) {
    return ((StructureHandle)source).getStructure().copy();
  }
  return null;
}",0.9825718323127648
73087,"/** 
 * Constructor
 * @param sourceHandle
 * @param newContainer
 * @param afterHandle
 */
public CrosstabPasterCommand(DesignElementHandle sourceHandle,DesignElementHandle newContainer,DesignElementHandle afterHandle){
  this.sourceHandle=sourceHandle;
  this.cloneElement=sourceHandle.copy();
  this.newContainer=newContainer;
  this.afterHandle=afterHandle;
}","/** 
 * Constructor
 * @param sourceHandle
 * @param newContainer
 * @param afterHandle
 */
public CrosstabPasterCommand(DesignElementHandle sourceHandle,DesignElementHandle newContainer,DesignElementHandle afterHandle){
  this.sourceHandle=sourceHandle;
  this.cloneElement=CopyUtil.copy(sourceHandle);
  this.newContainer=newContainer;
  this.afterHandle=afterHandle;
}",0.9564032697547684
73088,"/** 
 * Executes the Command.
 */
public void execute(){
  try {
    calculatePositionAndSlotId();
    ModuleHandle currentDesignHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
    DesignElementHandle newHandle=copyNewHandle(cloneElement,currentDesignHandle);
    addHandleToReport(newHandle);
  }
 catch (  Exception e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    ExceptionHandler.handle(e);
  }
}","/** 
 * Executes the Command.
 */
public void execute(){
  try {
    calculatePositionAndSlotId();
    CopyUtil.paste(cloneElement,newContainer,getContentName(),position);
  }
 catch (  Exception e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    ExceptionHandler.handle(e);
  }
}",0.6707768187422934
73089,"public ReportRunnable cloneRunnable(){
  ReportDesignHandle newDesign=(ReportDesignHandle)designHandle.copy().getHandle(null);
  ReportRunnable newRunnable=new ReportRunnable(newDesign);
  newRunnable.setReportName(reportName);
  newRunnable.setReportEngine(engine);
  return newRunnable;
}","public ReportRunnable cloneRunnable(){
  ReportDesignHandle newDesign=(ReportDesignHandle)designHandle.copy().getHandle(null);
  newDesign.setFileName(designHandle.getFileName());
  ReportRunnable newRunnable=new ReportRunnable(newDesign);
  newRunnable.setReportName(reportName);
  newRunnable.setReportEngine(engine);
  return newRunnable;
}",0.9162717219589256
73090,"/** 
 */
public static List[] cleanUnUsedGroupInstance(List[] groups){
  List[] savedList=groups;
  groups=new List[groups.length];
  for (int i=0; i < groups.length; i++) {
    groups[i]=new ArrayList();
  }
  copy(savedList,groups);
  int last=groups.length - 1;
  List lastGroup=groups[last];
  for (int i=0; i < lastGroup.size(); i++) {
    if (((GroupInfo)lastGroup.get(i)).firstChild == -2) {
      return cleanUnUsedGroupInstance(removeWholeGroup(groups,last,i));
    }
  }
  copy(groups,savedList);
  return savedList;
}","/** 
 */
public static List[] cleanUnUsedGroupInstance(List[] groups){
  List[] savedList=groups;
  groups=new List[groups.length];
  for (int i=0; i < groups.length; i++) {
    groups[i]=new ArrayList();
  }
  copy(savedList,groups);
  int last=groups.length - 1;
  List lastGroup=groups[last];
  for (int i=0; i < lastGroup.size(); i++) {
    if (((GroupInfo)lastGroup.get(i)).firstChild == -2) {
      return cleanUnUsedGroupInstance(removeWholeGroup(groups,last,i));
    }
  }
  return groups;
}",0.9464459591041868
73091,"/** 
 * @param inputStream
 * @param cacheProvider
 * @throws DataException
 */
public RDGroupUtil(String tempDir,InputStream inputStream) throws DataException {
  this(tempDir,inputStream,null);
}","/** 
 * @param inputStream
 * @param cacheProvider
 * @throws DataException
 */
public RDGroupUtil(String tempDir,int groupNumber,RAInputStream[] inputStreams) throws DataException {
  this(tempDir,groupNumber,inputStreams,null);
}",0.8130841121495327
73092,"/** 
 * @param streamManager
 * @param streamPos
 * @param streamScope
 * @return
 * @throws DataException
 */
public static RDGroupUtil loadGroupUtil(String tempDir,StreamManager streamManager,int streamPos,int streamScope) throws DataException {
  InputStream stream=streamManager.getInStream(DataEngineContext.GROUP_INFO_STREAM,streamPos,streamScope);
  BufferedInputStream buffStream=new BufferedInputStream(stream);
  RDGroupUtil rdGroupUtil=new RDGroupUtil(tempDir,buffStream);
  try {
    buffStream.close();
    stream.close();
  }
 catch (  IOException e) {
  }
  return rdGroupUtil;
}","/** 
 * @param streamManager
 * @param streamPos
 * @param streamScope
 * @return
 * @throws DataException
 */
public static RDGroupUtil loadGroupUtil(String tempDir,StreamManager streamManager,int streamPos,int streamScope) throws DataException {
  RAInputStream stream=streamManager.getInStream(DataEngineContext.GROUP_INFO_STREAM,streamPos,streamScope);
  RAInputStream[] groupStreams=null;
  int gNumber=0;
  try {
    gNumber=IOUtil.readInt(stream);
    groupStreams=new RAInputStream[gNumber];
    long nextOffset=IOUtil.INT_LENGTH;
    for (int i=0; i < gNumber; i++) {
      RAInputStream rain=streamManager.getInStream(DataEngineContext.GROUP_INFO_STREAM,streamPos,streamScope);
      rain.seek(nextOffset);
      groupStreams[i]=rain;
      int asize=IOUtil.readInt(stream);
      nextOffset=nextOffset + IOUtil.INT_LENGTH + 2 * IOUtil.INT_LENGTH * asize;
    }
    stream.close();
  }
 catch (  IOException e) {
  }
  return new RDGroupUtil(tempDir,gNumber,groupStreams);
}",0.494296577946768
73093,"public Object get(String name,Scriptable start){
  DummyParameterAttribute attr=(DummyParameterAttribute)this.params.get(this.parameterName);
  if (attr == null) {
    return null;
  }
  if (FIELD_VALUE.equals(name)) {
    return attr.getValue();
  }
 else   if (FIELD_DISPLAY_TEXT.equals(name)) {
    return attr.getDisplayText();
  }
  Object value=attr.getValue();
  Scriptable jsStr=Context.toObject(value,start);
  if (jsStr != null && jsStr.getPrototype() != null) {
    return jsStr.getPrototype().get(name,jsStr);
  }
  return null;
}","public Object get(String name,Scriptable start){
  DummyParameterAttribute attr=(DummyParameterAttribute)this.params.get(this.parameterName);
  if (attr == null) {
    return null;
  }
  if (FIELD_VALUE.equals(name)) {
    return attr.getValue();
  }
 else   if (FIELD_DISPLAY_TEXT.equals(name)) {
    return attr.getDisplayText();
  }
  Object value=attr.getValue();
  if (value instanceof Scriptable) {
    Scriptable jsValue=(Scriptable)value;
    Object property=jsValue.getPrototype().get(name,jsValue);
    if (property instanceof Callable) {
      Callable callable=(Callable)property;
      return new JsValueCallable(callable);
    }
    return jsValue.get(name,jsValue);
  }
 else {
    Scriptable jsValue=Context.toObject(value,start);
    return jsValue.get(name,jsValue);
  }
}",0.6531531531531531
73094,"/** 
 * Support setting parameter value by following methods: <li> params[""a""] = params[""b""] <li> params[""a""] = ""value""
 */
public void put(String name,Scriptable start,Object value){
  DummyParameterAttribute attr=(DummyParameterAttribute)parameters.get(name);
  if (attr == null) {
    attr=new DummyParameterAttribute();
    parameters.put(name,attr);
  }
  if (value instanceof ReportParameter) {
    ReportParameter scriptableParameter=(ReportParameter)value;
    Object paramValue=scriptableParameter.get(""String_Node_Str"",this);
    String displayText=(String)scriptableParameter.get(""String_Node_Str"",this);
    attr.setValue(paramValue);
    attr.setDisplayText(displayText);
    return;
  }
  if (value instanceof Wrapper) {
    value=((Wrapper)value).unwrap();
  }
  attr.setValue(JavascriptEvalUtil.convertJavascriptValue(value));
}","/** 
 * Support setting parameter value by following methods: <li> params[""a""] = params[""b""] <li> params[""a""] = ""value""
 */
public void put(String name,Scriptable start,Object value){
  DummyParameterAttribute attr=(DummyParameterAttribute)parameters.get(name);
  if (attr == null) {
    attr=new DummyParameterAttribute();
    parameters.put(name,attr);
  }
  if (value instanceof ReportParameter) {
    ReportParameter scriptableParameter=(ReportParameter)value;
    Object paramValue=scriptableParameter.get(""String_Node_Str"",this);
    String displayText=(String)scriptableParameter.get(""String_Node_Str"",this);
    attr.setValue(paramValue);
    attr.setDisplayText(displayText);
    return;
  }
  if (value instanceof Wrapper) {
    value=((Wrapper)value).unwrap();
  }
  attr.setValue(value);
}",0.9677811550151976
73095,"/** 
 * Test access to ""params's value"" with report handle
 */
public void testParamsWithItAttr() throws Exception {
  scope=new DataAdapterTopLevelScope(cx,design);
  Object r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertNull(r);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertTrue(r.toString().length() > 0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Date.class);
  r=evaluateScript(""String_Node_Str"");
  assertNull(r);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Date.class);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Double.class);
  assertEquals(((Double)r).intValue(),1234);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Double.class);
  assertEquals(((Double)r).intValue(),0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),BigDecimal.class);
  assertEquals(((BigDecimal)r).intValue(),1234);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),BigDecimal.class);
  assertEquals(((BigDecimal)r).intValue(),0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Boolean.class);
  assertTrue(((Boolean)r).booleanValue());
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Boolean.class);
  assertFalse(((Boolean)r).booleanValue());
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r,null);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
}","/** 
 * Test access to ""params's value"" with report handle
 */
public void testParamsWithItAttr() throws Exception {
  scope=new DataAdapterTopLevelScope(cx,design);
  Object r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertNull(r);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertTrue(r.toString().length() > 0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Date.class);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Double.class);
  assertEquals(((Double)r).intValue(),1234);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Double.class);
  assertEquals(((Double)r).intValue(),0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),BigDecimal.class);
  assertEquals(((BigDecimal)r).intValue(),1234);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),BigDecimal.class);
  assertEquals(((BigDecimal)r).intValue(),0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Boolean.class);
  assertTrue(((Boolean)r).booleanValue());
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Boolean.class);
  assertFalse(((Boolean)r).booleanValue());
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r,null);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
}",0.9647668393782384
73096,"/** 
 * Test access to ""params"" with report handle
 */
public void testParams() throws Exception {
  scope=new DataAdapterTopLevelScope(cx,design);
  Object len=evaluateScript(""String_Node_Str"");
  assertEquals(len.getClass(),Integer.class);
  assertEquals(((Integer)len).intValue(),13);
  Object r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertNull(r);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertTrue(r.toString().length() > 0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Date.class);
  r=evaluateScript(""String_Node_Str"");
  assertNull(r);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Date.class);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Double.class);
  assertEquals(((Double)r).intValue(),1234);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Double.class);
  assertEquals(((Double)r).intValue(),0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),BigDecimal.class);
  assertEquals(((BigDecimal)r).intValue(),1234);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),BigDecimal.class);
  assertEquals(((BigDecimal)r).intValue(),0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Boolean.class);
  assertTrue(((Boolean)r).booleanValue());
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Boolean.class);
  assertFalse(((Boolean)r).booleanValue());
  r=evaluateScript(""String_Node_Str"");
  assertNull(r);
  r=evaluateScript(""String_Node_Str"");
  assertNotNull(r);
}","/** 
 * Test access to ""params"" with report handle
 */
public void testParams() throws Exception {
  scope=new DataAdapterTopLevelScope(cx,design);
  Object len=evaluateScript(""String_Node_Str"");
  assertEquals(len.getClass(),Integer.class);
  assertEquals(((Integer)len).intValue(),13);
  Object r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertNull(r);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertTrue(r.toString().length() > 0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Date.class);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Double.class);
  assertEquals(((Double)r).intValue(),1234);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Double.class);
  assertEquals(((Double)r).intValue(),0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),BigDecimal.class);
  assertEquals(((BigDecimal)r).intValue(),1234);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),BigDecimal.class);
  assertEquals(((BigDecimal)r).intValue(),0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Boolean.class);
  assertTrue(((Boolean)r).booleanValue());
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Boolean.class);
  assertFalse(((Boolean)r).booleanValue());
  r=evaluateScript(""String_Node_Str"");
  assertNull(r);
  r=evaluateScript(""String_Node_Str"");
  assertNotNull(r);
}",0.9610761305094448
73097,"protected void setUp() throws Exception {
  super.setUp();
  session=DesignEngine.newSession(ULocale.getDefault());
  design=session.createDesign();
  setUpParam(""String_Node_Str"",true,true,DesignChoiceConstants.PARAM_TYPE_STRING,""String_Node_Str"");
  setUpParam(""String_Node_Str"",true,true,DesignChoiceConstants.PARAM_TYPE_STRING,null);
  setUpParam(""String_Node_Str"",false,true,DesignChoiceConstants.PARAM_TYPE_STRING,""String_Node_Str"");
  setUpParam(""String_Node_Str"",false,false,DesignChoiceConstants.PARAM_TYPE_STRING,""String_Node_Str"");
  setUpParam(""String_Node_Str"",true,false,DesignChoiceConstants.PARAM_TYPE_DATETIME,""String_Node_Str"");
  setUpParam(""String_Node_Str"",true,false,DesignChoiceConstants.PARAM_TYPE_DATETIME,null);
  setUpParam(""String_Node_Str"",false,false,DesignChoiceConstants.PARAM_TYPE_DATETIME,null);
  setUpParam(""String_Node_Str"",true,false,DesignChoiceConstants.PARAM_TYPE_DECIMAL,""String_Node_Str"");
  setUpParam(""String_Node_Str"",false,false,DesignChoiceConstants.PARAM_TYPE_DECIMAL,null);
  setUpParam(""String_Node_Str"",true,false,DesignChoiceConstants.PARAM_TYPE_FLOAT,""String_Node_Str"");
  setUpParam(""String_Node_Str"",false,false,DesignChoiceConstants.PARAM_TYPE_FLOAT,null);
  setUpParam(""String_Node_Str"",true,false,DesignChoiceConstants.PARAM_TYPE_BOOLEAN,""String_Node_Str"");
  setUpParam(""String_Node_Str"",false,false,DesignChoiceConstants.PARAM_TYPE_BOOLEAN,null);
  cx=Context.enter();
}","protected void setUp() throws Exception {
  super.setUp();
  session=DesignEngine.newSession(ULocale.getDefault());
  design=session.createDesign();
  design.setFileName(""String_Node_Str"");
  setUpParam(""String_Node_Str"",true,true,DesignChoiceConstants.PARAM_TYPE_STRING,""String_Node_Str"");
  setUpParam(""String_Node_Str"",true,true,DesignChoiceConstants.PARAM_TYPE_STRING,null);
  setUpParam(""String_Node_Str"",false,true,DesignChoiceConstants.PARAM_TYPE_STRING,""String_Node_Str"");
  setUpParam(""String_Node_Str"",false,false,DesignChoiceConstants.PARAM_TYPE_STRING,""String_Node_Str"");
  setUpParam(""String_Node_Str"",true,false,DesignChoiceConstants.PARAM_TYPE_DATETIME,""String_Node_Str"");
  setUpParam(""String_Node_Str"",true,false,DesignChoiceConstants.PARAM_TYPE_DATETIME,null);
  setUpParam(""String_Node_Str"",false,false,DesignChoiceConstants.PARAM_TYPE_DATETIME,null);
  setUpParam(""String_Node_Str"",true,false,DesignChoiceConstants.PARAM_TYPE_DECIMAL,""String_Node_Str"");
  setUpParam(""String_Node_Str"",false,false,DesignChoiceConstants.PARAM_TYPE_DECIMAL,null);
  setUpParam(""String_Node_Str"",true,false,DesignChoiceConstants.PARAM_TYPE_FLOAT,""String_Node_Str"");
  setUpParam(""String_Node_Str"",false,false,DesignChoiceConstants.PARAM_TYPE_FLOAT,null);
  setUpParam(""String_Node_Str"",true,false,DesignChoiceConstants.PARAM_TYPE_BOOLEAN,""String_Node_Str"");
  setUpParam(""String_Node_Str"",false,false,DesignChoiceConstants.PARAM_TYPE_BOOLEAN,null);
  cx=Context.enter();
}",0.9858766792972786
73098,"private void validateSingleMeasureDetail(MeasureViewHandle measureView,LevelViewHandle rowLevelView,LevelViewHandle colLevelView) throws SemanticException {
  AggregationCellHandle detailCell=measureView.getCell();
  LevelHandle rowLevel=detailCell.getAggregationOnRow();
  LevelHandle colLevel=detailCell.getAggregationOnColumn();
  if (rowLevelView == null) {
    detailCell.setAggregationOnRow(null);
  }
 else   if (rowLevel == null || !rowLevel.equals(rowLevelView.getCubeLevel())) {
    detailCell.setAggregationOnRow(rowLevelView.getCubeLevel());
  }
  if (colLevelView == null) {
    detailCell.setAggregationOnColumn(null);
  }
 else   if (colLevel == null || !colLevel.equals(colLevelView.getCubeLevel())) {
    detailCell.setAggregationOnColumn(colLevelView.getCubeLevel());
  }
  rowLevel=detailCell.getAggregationOnRow();
  colLevel=detailCell.getAggregationOnColumn();
  String aggregateRowName=rowLevel == null ? null : rowLevel.getQualifiedName();
  String aggregateColumnName=colLevel == null ? null : colLevel.getQualifiedName();
  if (detailCell.getContents().size() == 0 || (detailCell.getContents().size() == 1 && detailCell.getContents().get(0) instanceof DataItemHandle)) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,aggregateColumnName,aggregateRowName);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    String measureFunc=CrosstabModelUtil.getAggregationFunction(crosstab,detailCell);
    if (measureFunc == null) {
      measureFunc=CrosstabModelUtil.getDefaultMeasureAggregationFunction(measureView);
    }
    column.setAggregateFunction(measureFunc);
    if (aggregateRowName != null) {
      column.addAggregateOn(aggregateRowName);
    }
    if (aggregateColumnName != null) {
      column.addAggregateOn(aggregateColumnName);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    DataItemHandle dataItem;
    if (detailCell.getContents().size() == 0) {
      dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
      dataItem.setResultSetColumn(columnHandle.getName());
      detailCell.addContent(dataItem);
    }
 else {
      dataItem=(DataItemHandle)detailCell.getContents().get(0);
      dataItem.setResultSetColumn(columnHandle.getName());
    }
  }
}","private void validateSingleMeasureDetail(MeasureViewHandle measureView,LevelViewHandle rowLevelView,LevelViewHandle colLevelView) throws SemanticException {
  AggregationCellHandle detailCell=measureView.getCell();
  LevelHandle rowLevel=detailCell.getAggregationOnRow();
  LevelHandle colLevel=detailCell.getAggregationOnColumn();
  if (rowLevelView == null) {
    detailCell.setAggregationOnRow(null);
  }
 else   if (rowLevel == null || !rowLevel.equals(rowLevelView.getCubeLevel())) {
    detailCell.setAggregationOnRow(rowLevelView.getCubeLevel());
  }
  if (colLevelView == null) {
    detailCell.setAggregationOnColumn(null);
  }
 else   if (colLevel == null || !colLevel.equals(colLevelView.getCubeLevel())) {
    detailCell.setAggregationOnColumn(colLevelView.getCubeLevel());
  }
  rowLevel=detailCell.getAggregationOnRow();
  colLevel=detailCell.getAggregationOnColumn();
  String aggregateRowName=rowLevel == null ? null : rowLevel.getQualifiedName();
  String aggregateColumnName=colLevel == null ? null : colLevel.getQualifiedName();
  String name=CrosstabModelUtil.generateComputedColumnName(measureView,aggregateColumnName,aggregateRowName);
  ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
  String dataType=measureView.getDataType();
  column.setDataType(dataType);
  column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
  String measureFunc=CrosstabModelUtil.getAggregationFunction(crosstab,detailCell);
  if (measureFunc == null) {
    measureFunc=CrosstabModelUtil.getDefaultMeasureAggregationFunction(measureView);
  }
  column.setAggregateFunction(measureFunc);
  if (aggregateRowName != null) {
    column.addAggregateOn(aggregateRowName);
  }
  if (aggregateColumnName != null) {
    column.addAggregateOn(aggregateColumnName);
  }
  ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
  if (detailCell.getContents().size() == 0 || (detailCell.getContents().size() == 1 && detailCell.getContents().get(0) instanceof DataItemHandle)) {
    DataItemHandle dataItem;
    if (detailCell.getContents().size() == 0) {
      dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
      dataItem.setResultSetColumn(columnHandle.getName());
      detailCell.addContent(dataItem);
    }
 else {
      dataItem=(DataItemHandle)detailCell.getContents().get(0);
      dataItem.setResultSetColumn(columnHandle.getName());
    }
  }
}",0.9331751680506128
73099,"/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel,boolean forceAdd) throws SemanticException {
  if (crosstab == null || measureView == null)   return;
  if (cell == null) {
    cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell == null && forceAdd) {
    cell=measureView.addAggregation(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell != null && cell.getContents().size() == 0) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    column.setAggregateFunction(function != null ? function : getDefaultMeasureAggregationFunction(measureView));
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
    dataItem.setResultSetColumn(columnHandle.getName());
    cell.addContent(dataItem);
  }
}","/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel,boolean forceAdd) throws SemanticException {
  if (crosstab == null || measureView == null)   return;
  if (cell == null) {
    cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell == null && forceAdd) {
    cell=measureView.addAggregation(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell != null) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    column.setAggregateFunction(function != null ? function : getDefaultMeasureAggregationFunction(measureView));
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    if (cell.getContents().size() == 0) {
      DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
      dataItem.setResultSetColumn(columnHandle.getName());
      cell.addContent(dataItem);
    }
 else     if (cell.getContents().size() == 1 && cell.getContents().get(0) instanceof DataItemHandle) {
      DataItemHandle dataItem=(DataItemHandle)cell.getContents().get(0);
      dataItem.setResultSetColumn(columnHandle.getName());
    }
  }
}",0.9108642644269844
73100,"/** 
 * Creates unique result set column names if column names are <code>null</code> or empty string.
 * @param resultSetColumn a list containing result set columns
 */
private static void createUniqueResultSetColumnNames(List columnInfo){
  if (columnInfo == null || columnInfo.isEmpty())   return;
  Set names=new HashSet();
  for (int i=0; i < columnInfo.size(); i++) {
    ResultSetColumnInfo tmpInfo=(ResultSetColumnInfo)columnInfo.get(i);
    OdaResultSetColumn column=tmpInfo.column;
    String nativeName=column.getNativeName();
    if (nativeName != null)     names.add(nativeName);
  }
  Set newNames=new HashSet();
  for (int i=0; i < columnInfo.size(); i++) {
    ResultSetColumnInfo tmpInfo=(ResultSetColumnInfo)columnInfo.get(i);
    OdaResultSetColumn column=tmpInfo.column;
    String nativeName=column.getNativeName();
    String name=column.getColumnName();
    if (!StringUtil.isBlank(name))     continue;
    String newName=IdentifierUtility.getUniqueColumnName(names,newNames,nativeName,i);
    newNames.add(newName);
    column.setColumnName(newName);
    if (tmpInfo.hint != null)     tmpInfo.hint.setProperty(ColumnHint.COLUMN_NAME_MEMBER,newName);
  }
  names.clear();
  newNames.clear();
}","/** 
 * Creates unique result set column names if column names are <code>null</code> or empty string.
 * @param resultSetColumn a list containing result set columns
 */
private static void createUniqueResultSetColumnNames(List columnInfo){
  if (columnInfo == null || columnInfo.isEmpty())   return;
  Set names=new HashSet();
  for (int i=0; i < columnInfo.size(); i++) {
    ResultSetColumnInfo tmpInfo=(ResultSetColumnInfo)columnInfo.get(i);
    OdaResultSetColumn column=tmpInfo.column;
    String nativeName=column.getNativeName();
    if (nativeName != null)     names.add(nativeName);
  }
  Set newNames=new HashSet();
  for (int i=0; i < columnInfo.size(); i++) {
    ResultSetColumnInfo tmpInfo=(ResultSetColumnInfo)columnInfo.get(i);
    OdaResultSetColumn column=tmpInfo.column;
    String nativeName=column.getNativeName();
    String name=column.getColumnName();
    if (!StringUtil.isBlank(name)) {
      newNames.add(name);
      continue;
    }
    String newName=IdentifierUtility.getUniqueColumnName(names,newNames,nativeName,i);
    newNames.add(newName);
    column.setColumnName(newName);
    if (tmpInfo.hint != null)     tmpInfo.hint.setProperty(ColumnHint.COLUMN_NAME_MEMBER,newName);
  }
  names.clear();
  newNames.clear();
}",0.9748580697485808
73101,"/** 
 * @param cash specifies the name of an existing array of Doubles representing cash flow values
 * @param intrate is a number that you guess is close to the result of IRR.
 * @return This function takes the initial guess and scales it up and downto see if a solution IRR can be found. It also checks for 'more than 1 sign change' type of errors. Remarks IRR is closely related to NPV, the net present value function. The rate of return calculated by IRR is the interest rate corresponding to a 0 (zero) net present value. The following formula demonstrates how NPV and IRR are related
 */
public static double irr(double[] cash,double intrate) throws DataException {
  boolean arg1Positive=true;
  long arsize=0;
  double curr_rate;
  double incr;
  double result;
  double tmp;
  int i;
  if (cash != null) {
    arsize=cash.length;
  }
  tmp=Array.getDouble(cash,0);
  if (tmp < 0) {
    arg1Positive=false;
  }
 else   if (tmp > 0) {
    arg1Positive=true;
  }
 else {
    throw DataException.wrap(new AggrException(ResourceConstants.ILLEGAL_PARAMETER_FUN,""String_Node_Str""));
  }
  boolean found=false;
  for (i=1; i <= arsize; i++) {
    try {
      tmp=Array.getDouble(cash,i - 1);
    }
 catch (    Exception e) {
      throw DataException.wrap(new AggrException(ResourceConstants.BAD_PARAM_TYPE,e));
    }
    if ((arg1Positive && tmp < 0) || ((!arg1Positive) && tmp > 0)) {
      found=true;
      break;
    }
  }
  if (!found) {
    throw DataException.wrap(new AggrException(ResourceConstants.ILLEGAL_PARAMETER_FUN,""String_Node_Str""));
  }
  i=10;
  curr_rate=intrate;
  for (i--; i > 0; i--) {
    incr=.1;
    tmp=curr_rate;
    if ((result=calcIrr(cash,tmp,incr,0)) < 0)     return result;
    curr_rate=curr_rate / 2;
  }
  i=4;
  curr_rate=intrate * 2;
  for (i--; i > 0; i--) {
    incr=.1;
    tmp=curr_rate;
    if ((result=calcIrr(cash,tmp,incr,0)) >= 0)     return result;
    curr_rate=curr_rate * 2;
  }
  throw DataException.wrap(new AggrException(ResourceConstants.NO_SOLUTION_FOUND));
}","/** 
 * Calculate internal rate of return (IRR) using cash flows that occur at regular intervals, such as monthly or annually. The internal rate of return is the interest rate received for an investment consisting of payments and receipts that occur at regular intervals. Method: Newton-Raphson technique. Formula: sum(cashFlow(i) / (1 + IRR)^i)
 * @param cashFlows Cash flow values. Must contain at least one negative value (cash paid) and one positive value (cash received).
 * @param estimatedResult Optional guess as start value (default: 0.1 = 10%; if value is negative: 0.5). As the formula to calculate IRRs can have multiple solutions, an estimated result (guess) can help find the result we are looking for.
 * @return Internal rate of return (0.25 = 25%) or Double.NaN if IRR not computable.
 * @throws DataException 
 */
static public double irr(final double[] cashFlows,final double estimatedResult) throws DataException {
  int cashFlowsCount=cashFlows.length;
  if (cashFlows == null || cashFlowsCount < 2) {
    throw DataException.wrap(new AggrException(ResourceConstants.ILLEGAL_PARAMETER_FUN,""String_Node_Str""));
  }
  if (cashFlows[0] != 0) {
    double sumCashFlows=0.0;
    int numOfNegativeCashFlows=0;
    int numOfPositiveCashFlows=0;
    for (int i=0; i < cashFlowsCount; i++) {
      sumCashFlows+=cashFlows[i];
      if (cashFlows[i] > 0) {
        numOfPositiveCashFlows++;
      }
 else       if (cashFlows[i] < 0) {
        numOfNegativeCashFlows++;
      }
    }
    if (numOfNegativeCashFlows > 0 && numOfPositiveCashFlows > 0) {
      double irrGuess=0.1;
      if (!Double.isNaN(estimatedResult)) {
        if (estimatedResult >= 0) {
          irrGuess=estimatedResult;
        }
 else {
          irrGuess=0.5;
        }
      }
 else {
        throw DataException.wrap(new AggrException(ResourceConstants.ILLEGAL_PARAMETER_FUN,""String_Node_Str""));
      }
      double irr;
      if (sumCashFlows < 0) {
        irr=-irrGuess;
      }
 else {
        irr=irrGuess;
      }
      final double minDistance=1E-15;
      final double cashFlowStart=cashFlows[0];
      final int maxIteration=50;
      boolean highValueGap=false;
      double cashValue=0.0;
      for (int i=0; i <= maxIteration; i++) {
        cashValue=cashFlowStart;
        for (int j=1; j < cashFlowsCount; j++) {
          cashValue+=cashFlows[j] / Math.pow(1.0 + irr,j);
        }
        if (Math.abs(cashValue) <= 1E-7) {
          return irr;
        }
        if (cashValue > 0.0) {
          if (highValueGap) {
            irrGuess/=2;
          }
          irr+=irrGuess;
          if (highValueGap) {
            irrGuess-=minDistance;
            highValueGap=false;
          }
        }
 else {
          irrGuess/=2;
          irr-=irrGuess;
          highValueGap=true;
        }
        if (irrGuess <= minDistance && Math.abs(cashValue) <= 1E-7) {
          return irr;
        }
      }
    }
  }
  return Double.NaN;
}",0.1919741883444242
73102,"public void testIrr() throws Exception {
  double b[]=new double[]{-70000d,12000d,15000d,18000d,21000d,26000d};
  double a[]=new double[]{-70000,12000,15000};
  double c[]=new double[]{-70000d,12000d,15000d,18000d,21000d};
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_IRR_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(2,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  assertTrue(!ag.getParameterDefn()[1].isOptional());
  ac.start();
  for (int i=0; i < b.length; i++) {
    ac.onRow(new Object[]{new Double(b[i]),new Double(-0.6)});
  }
  ac.finish();
  assertEquals(0.0866,((Double)ac.getValue()).doubleValue(),0.0001);
  ac.start();
  for (int i=0; i < a.length; i++) {
    ac.onRow(new Object[]{new Double(a[i]),new Double(-0.6)});
  }
  ac.finish();
  assertEquals(-0.44,((Double)ac.getValue()).doubleValue(),0.01);
  ac.start();
  for (int i=0; i < c.length; i++) {
    ac.onRow(new Object[]{new Double(c[i]),new Double(-0.1)});
  }
  ac.finish();
  assertEquals(-0.021244848272999998,((Double)ac.getValue()).doubleValue(),Double.MIN_VALUE);
  ac.start();
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  try {
    ac.getValue();
    assertTrue(false);
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
}","public void testIrr() throws Exception {
  double b[]=new double[]{-70000d,12000d,15000d,18000d,21000d,26000d};
  double a[]=new double[]{-70000,12000,15000};
  double c[]=new double[]{-70000d,12000d,15000d,18000d,21000d};
  double d[]=new double[]{-70000d,22000d,25000d,30000d,31000d};
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_IRR_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(2,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  assertTrue(!ag.getParameterDefn()[1].isOptional());
  ac.start();
  for (int i=0; i < b.length; i++) {
    ac.onRow(new Object[]{new Double(b[i]),new Double(0.1)});
  }
  ac.finish();
  assertEquals(0.0866,((Double)ac.getValue()).doubleValue(),0.0001);
  ac.start();
  for (int i=0; i < a.length; i++) {
    ac.onRow(new Object[]{new Double(a[i]),new Double(-0.6)});
  }
  ac.finish();
  assertEquals(-0.44,((Double)ac.getValue()).doubleValue(),0.01);
  ac.start();
  for (int i=0; i < a.length; i++) {
    ac.onRow(new Object[]{new Double(a[i]),new Double(new Double(2.3))});
  }
  ac.finish();
  assertEquals(Double.NaN,((Double)ac.getValue()).doubleValue());
  ac.start();
  for (int i=0; i < c.length; i++) {
    ac.onRow(new Object[]{new Double(c[i]),new Double(-0.1)});
  }
  ac.finish();
  assertEquals(-0.021244,((Double)ac.getValue()).doubleValue(),0.000001);
  ac.start();
  for (int i=0; i < d.length; i++) {
    ac.onRow(new Object[]{new Double(d[i]),new Double(0.05)});
  }
  ac.finish();
  assertEquals(0.19,((Double)ac.getValue()).doubleValue(),0.01);
  ac.start();
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  try {
    ac.getValue();
    assertTrue(false);
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
}",0.8349924585218703
73103,"/** 
 * Pastes a report item to the slot. The item must be newly created and not yet added to the design.
 * @param copy the copy from the return value of <code>copy</code>
 * @param container the target container
 * @param propName the property name of the target container
 * @param newPos the target position
 * @return a list containing all errors for the pasted element
 * @throws SemanticException if the element is not allowed in the slot
 */
public static List paste(IElementCopy copy,DesignElementHandle container,String propName,int newPos) throws SemanticException {
  ContainerContext context=new ContainerContext(container.getElement(),propName);
  if (!canPaste(copy,container,propName))   throw ContentExceptionFactory.createContentException(context,ContentException.DESIGN_EXCEPTION_CONTENT_NOT_ALLOWED_PASTED);
  IDesignElement chosen=ContextCopyPastePolicy.getInstance().preWorkForPaste(context,copy,container.getModule());
  DesignElementHandle target=chosen.getHandle(container.getModule());
  container.getModuleHandle().rename(container,target);
  return container.paste(propName,chosen,newPos);
}","/** 
 * Pastes a report item to the slot. The item must be newly created and not yet added to the design.
 * @param copy the copy from the return value of <code>copy</code>
 * @param container the target container
 * @param propName the property name of the target container
 * @param newPos the target position
 * @return a list containing all errors for the pasted element
 * @throws SemanticException if the element is not allowed in the slot
 */
public static List paste(IElementCopy copy,DesignElementHandle container,String propName,int newPos) throws SemanticException {
  ContainerContext context=new ContainerContext(container.getElement(),propName);
  Module root=container.getModule();
  if (!canPaste(copy,container,propName))   throw ContentExceptionFactory.createContentException(context,ContentException.DESIGN_EXCEPTION_CONTENT_NOT_ALLOWED_PASTED);
  IDesignElement chosen=ContextCopyPastePolicy.getInstance().preWorkForPaste(context,copy,root);
  DesignElementHandle target=chosen.getHandle(root);
  container.getModuleHandle().rename(container,target);
  if (chosen == null)   return Collections.EMPTY_LIST;
  container.add(propName,target,newPos);
  return checkPostPasteErrors(target.getElement(),root);
}",0.8327645051194539
73104,"private Object getTableParent(){
  return DNDUtil.getTableParent(getHandle());
}","public Object getTableParent(){
  DesignElementHandle handle=getCellHandle();
  while (handle != null) {
    if (handle instanceof TableHandle) {
      return handle;
    }
    if (handle instanceof GridHandle) {
      return handle;
    }
    handle=handle.getContainer();
  }
  return null;
}",0.1818181818181818
73105,"/** 
 * Remove colleagure from mediator.
 * @param colleague
 */
public void removeGlobalColleague(IColleague colleague){
  if (DesignerConstants.TRACING_MEDIATOR_GLOBAL_COLLEAGUE_REMOVE) {
    System.out.println(""String_Node_Str"" + colleague);
  }
  globalListener.remove(colleague);
}","/** 
 * Remove colleagure from mediator.
 * @param colleague
 */
public static void removeGlobalColleague(IColleague colleague){
  if (DesignerConstants.TRACING_MEDIATOR_GLOBAL_COLLEAGUE_REMOVE) {
    System.out.println(""String_Node_Str"" + colleague);
  }
  globalListener.remove(colleague);
}",0.9879101899827288
73106,"/** 
 * Add global colleague
 * @param colleague
 */
public void addGlobalColleague(IColleague colleague){
  if (!globalListener.contains(colleague)) {
    if (DesignerConstants.TRACING_MEDIATOR_GLOBAL_COLLEAGUE_ADD) {
      System.out.println(""String_Node_Str"" + colleague);
    }
    globalListener.add(colleague);
  }
}","/** 
 * Add global colleague
 * @param colleague
 */
public static void addGlobalColleague(IColleague colleague){
  if (!globalListener.contains(colleague)) {
    if (DesignerConstants.TRACING_MEDIATOR_GLOBAL_COLLEAGUE_ADD) {
      System.out.println(""String_Node_Str"" + colleague);
    }
    globalListener.add(colleague);
  }
}",0.989247311827957
73107,"protected static int handleValidateTargetCanContainElementHandle(DesignElementHandle targetHandle,DesignElementHandle childHandle,boolean validateContainer){
  if (targetHandle instanceof CascadingParameterGroupHandle) {
    return childHandle.getContainer() == targetHandle ? CONTAIN_THIS : CONTAIN_NO;
  }
 else   if (targetHandle.canContain(DEUtil.getDefaultSlotID(targetHandle),childHandle)) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle != childHandle && targetHandle instanceof ParameterGroupHandle && childHandle instanceof ParameterGroupHandle) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle instanceof ReportDesignHandle && childHandle instanceof ThemeHandle) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle.canContain(DEUtil.getDefaultContentName(targetHandle),childHandle)) {
    return CONTAIN_THIS;
  }
 else   if (validateContainer) {
    if (targetHandle.getContainer() == null) {
      return CONTAIN_NO;
    }
    if (targetHandle.getContainerSlotHandle() == null) {
      if (!targetHandle.getContainerPropertyHandle().getDefn().isList()) {
        return CONTAIN_NO;
      }
    }
 else     if (!targetHandle.getContainer().getDefn().getSlot(targetHandle.getContainerSlotHandle().getSlotID()).isMultipleCardinality()) {
      return CONTAIN_NO;
    }
    if (targetHandle.getClass().equals(childHandle.getClass())) {
      if (childHandle instanceof LevelHandle)       return CONTAIN_NO;
      return CONTAIN_PARENT;
    }
    if (targetHandle.getContainerSlotHandle() != null) {
      return targetHandle.getContainer().canContain(targetHandle.getContainerSlotHandle().getSlotID(),childHandle) ? CONTAIN_PARENT : CONTAIN_NO;
    }
 else     if (targetHandle.getContainerPropertyHandle() != null) {
      return targetHandle.getContainer().canContain(targetHandle.getContainerPropertyHandle().getPropertyDefn().getName(),childHandle) ? CONTAIN_PARENT : CONTAIN_NO;
    }
  }
  return CONTAIN_NO;
}","static int handleValidateTargetCanContainElementHandle(DesignElementHandle targetHandle,DesignElementHandle childHandle,boolean validateContainer){
  if (targetHandle instanceof CascadingParameterGroupHandle) {
    return childHandle.getContainer() == targetHandle ? CONTAIN_THIS : CONTAIN_NO;
  }
 else   if (targetHandle.canContain(DEUtil.getDefaultSlotID(targetHandle),childHandle)) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle != childHandle && targetHandle instanceof ParameterGroupHandle && childHandle instanceof ParameterGroupHandle) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle instanceof ReportDesignHandle && childHandle instanceof ThemeHandle) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle.canContain(DEUtil.getDefaultContentName(targetHandle),childHandle)) {
    return CONTAIN_THIS;
  }
 else   if (validateContainer) {
    if (targetHandle.getContainer() == null) {
      return CONTAIN_NO;
    }
    if (targetHandle.getContainerSlotHandle() == null) {
      if (!targetHandle.getContainerPropertyHandle().getDefn().isList()) {
        return CONTAIN_NO;
      }
    }
 else     if (!targetHandle.getContainer().getDefn().getSlot(targetHandle.getContainerSlotHandle().getSlotID()).isMultipleCardinality()) {
      return CONTAIN_NO;
    }
    if (targetHandle.getClass().equals(childHandle.getClass())) {
      if (childHandle instanceof LevelHandle)       return CONTAIN_NO;
      return CONTAIN_PARENT;
    }
    if (targetHandle.getContainerSlotHandle() != null) {
      return targetHandle.getContainer().canContain(targetHandle.getContainerSlotHandle().getSlotID(),childHandle) ? CONTAIN_PARENT : CONTAIN_NO;
    }
 else     if (targetHandle.getContainerPropertyHandle() != null) {
      return targetHandle.getContainer().canContain(targetHandle.getContainerPropertyHandle().getPropertyDefn().getName(),childHandle) ? CONTAIN_PARENT : CONTAIN_NO;
    }
  }
  return CONTAIN_NO;
}",0.9974200206398348
73108,"protected static Command pasteParameterGroup(String commandType,Object childGroup,ParameterGroupHandle targetGroup) throws SemanticException {
  CompoundCommand commands=new CompoundCommand();
  ParameterGroupHandle childHandle=null;
  if (childGroup instanceof ParameterGroupHandle) {
    childHandle=(ParameterGroupHandle)childGroup;
  }
 else   if (DEUtil.isParameterGroup(childGroup)) {
    childHandle=(ParameterGroupHandle)((IDesignElement)childGroup).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
  }
  if (childHandle != null) {
    SlotHandle transferSlot=childHandle.getParameters();
    for (Iterator i=transferSlot.iterator(); i.hasNext(); ) {
      commands.add(getNewCommand(commandType,i.next(),targetGroup,-1));
    }
  }
  if (commandType.equals(TYPE_CUT)) {
    childHandle.drop();
  }
  return commands;
}","private static Command pasteParameterGroup(String commandType,Object childGroup,ParameterGroupHandle targetGroup) throws SemanticException {
  CompoundCommand commands=new CompoundCommand();
  ParameterGroupHandle childHandle=null;
  if (childGroup instanceof ParameterGroupHandle) {
    childHandle=(ParameterGroupHandle)childGroup;
  }
 else   if (DEUtil.isParameterGroup(childGroup)) {
    childHandle=(ParameterGroupHandle)((IDesignElement)childGroup).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
  }
  if (childHandle != null) {
    SlotHandle transferSlot=childHandle.getParameters();
    for (Iterator i=transferSlot.iterator(); i.hasNext(); ) {
      commands.add(getNewCommand(commandType,i.next(),targetGroup,-1));
    }
  }
  if (commandType.equals(TYPE_CUT)) {
    childHandle.drop();
  }
  return commands;
}",0.9930232558139536
73109,"protected static Object transferSlotHandle(String commandType,Object handle){
  Object cloneObj=cloneSource(handle);
  if (TYPE_CUT.equals(commandType)) {
    dropSource(handle);
  }
  return cloneObj;
}","private static Object transferSlotHandle(String commandType,Object handle){
  Object cloneObj=cloneSource(handle);
  if (TYPE_CUT.equals(commandType)) {
    dropSource(handle);
  }
  return cloneObj;
}",0.9702970297029704
73110,"protected static ColumnBandData getColumnHandle(Object transferData){
  if (transferData instanceof ColumnBandData) {
    return (ColumnBandData)transferData;
  }
  if (transferData instanceof Object[] && ((Object[])transferData).length == 1) {
    return getColumnHandle(((Object[])transferData)[0]);
  }
  return null;
}","private static ColumnBandData getColumnHandle(Object transferData){
  if (transferData instanceof ColumnBandData) {
    return (ColumnBandData)transferData;
  }
  if (transferData instanceof Object[] && ((Object[])transferData).length == 1) {
    return getColumnHandle(((Object[])transferData)[0]);
  }
  return null;
}",0.9813084112149532
73111,"/** 
 * Returns specified command
 * @param commandType command type, value is <code>TYPE_CUT</code> or <code>TYPE_COPY</code>
 * @param transferSource transfer source
 * @param newContainer the new container
 * @param position the position will be added
 * @return command
 */
protected static Command getNewCommand(String commandType,Object transferSource,Object newContainer,int position) throws SemanticException {
  boolean isCut=TYPE_CUT.equals(commandType);
  if (newContainer instanceof ParameterGroupHandle && (transferSource instanceof ParameterGroupHandle || DEUtil.isParameterGroup(transferSource))) {
    return pasteParameterGroup(commandType,transferSource,(ParameterGroupHandle)newContainer);
  }
 else   if (transferSource instanceof DesignElementHandle) {
    return new PasteCommand((DesignElementHandle)transferSource,newContainer,position,isCut);
  }
 else   if (transferSource instanceof IDesignElement) {
    return new PasteCommand((IDesignElement)transferSource,newContainer,position);
  }
  return null;
}","/** 
 * Returns specified command
 * @param commandType command type, value is <code>TYPE_CUT</code> or <code>TYPE_COPY</code>
 * @param transferSource transfer source
 * @param newContainer the new container
 * @param position the position will be added
 * @return command
 */
private static Command getNewCommand(String commandType,Object transferSource,Object newContainer,int position) throws SemanticException {
  boolean isCut=TYPE_CUT.equals(commandType);
  if (newContainer instanceof ParameterGroupHandle && (transferSource instanceof ParameterGroupHandle || DEUtil.isParameterGroup(transferSource))) {
    return pasteParameterGroup(commandType,transferSource,(ParameterGroupHandle)newContainer);
  }
 else   if (transferSource instanceof DesignElementHandle) {
    return new PasteCommand((DesignElementHandle)transferSource,newContainer,position,isCut);
  }
 else   if (transferSource instanceof IDesignElement) {
    return new PasteCommand((IDesignElement)transferSource,newContainer,position);
  }
  return null;
}",0.9941747572815534
73112,"/** 
 * Pastes table or grid columns to target
 * @param transferData column data
 * @param targetObj table
 * @param isNew true: insert and paste; false: override and paste
 * @return paste succeed or fail
 */
protected static boolean copyColumn(ColumnBandData transferData,Object targetObj,boolean isNew){
  try {
    int columnNumber=HandleAdapterFactory.getInstance().getColumnHandleAdapter(targetObj).getColumnNumber();
    Object parent=((ColumnHandle)targetObj).getContainer();
    if (parent instanceof TableHandle) {
      if (isNew) {
        ((TableHandle)parent).insertAndPasteColumn(transferData.copy(),columnNumber);
      }
 else {
        ((TableHandle)parent).pasteColumn(transferData.copy(),columnNumber,true);
      }
    }
 else     if (parent instanceof GridHandle) {
      if (isNew) {
        ((GridHandle)parent).insertAndPasteColumn(transferData.copy(),columnNumber);
      }
 else {
        ((GridHandle)parent).pasteColumn(transferData.copy(),columnNumber,true);
      }
    }
  }
 catch (  SemanticException e) {
    return false;
  }
  return true;
}","/** 
 * Pastes table or grid columns to target
 * @param transferData column data
 * @param targetObj table
 * @param isNew true: insert and paste; false: override and paste
 * @return paste succeed or fail
 */
private static boolean copyColumn(ColumnBandData transferData,Object targetObj,boolean isNew){
  try {
    int columnNumber=HandleAdapterFactory.getInstance().getColumnHandleAdapter(targetObj).getColumnNumber();
    Object parent=((ColumnHandle)targetObj).getContainer();
    if (parent instanceof TableHandle) {
      if (isNew) {
        ((TableHandle)parent).insertAndPasteColumn(transferData.copy(),columnNumber);
      }
 else {
        ((TableHandle)parent).pasteColumn(transferData.copy(),columnNumber,true);
      }
    }
 else     if (parent instanceof GridHandle) {
      if (isNew) {
        ((GridHandle)parent).insertAndPasteColumn(transferData.copy(),columnNumber);
      }
 else {
        ((GridHandle)parent).pasteColumn(transferData.copy(),columnNumber,true);
      }
    }
  }
 catch (  SemanticException e) {
    return false;
  }
  return true;
}",0.9944341372912802
73113,"protected static int handleValidateTargetCanContainByContainer(Object targetObj,Object[] childHandles,boolean validateContainer){
  if (childHandles.length == 0) {
    return CONTAIN_NO;
  }
  for (int i=0; i < childHandles.length; i++) {
    if (!(childHandles[i] instanceof DesignElementHandle) || handleValidateTargetCanContainByContainer(targetObj,(DesignElementHandle)childHandles[i],validateContainer) == CONTAIN_NO) {
      return CONTAIN_NO;
    }
  }
  return CONTAIN_THIS;
}","static int handleValidateTargetCanContainByContainer(Object targetObj,Object[] childHandles,boolean validateContainer){
  if (childHandles.length == 0) {
    return CONTAIN_NO;
  }
  for (int i=0; i < childHandles.length; i++) {
    if (!(childHandles[i] instanceof DesignElementHandle) || handleValidateTargetCanContainByContainer(targetObj,(DesignElementHandle)childHandles[i],validateContainer) == CONTAIN_NO) {
      return CONTAIN_NO;
    }
  }
  return CONTAIN_THIS;
}",0.9895615866388308
73114,"protected static void addCommandToCompound(Object transferData,Object targetObj,int position,String commandName,String commandType,CompoundCommand commands) throws SemanticException {
  if (transferData instanceof SlotHandle) {
    transferData=transferSlotHandle(commandType,transferData);
  }
  if (transferData instanceof Object[]) {
    Object[] array=(Object[])transferData;
    for (int i=0; i < array.length; i++) {
      if (array[i] instanceof EmbeddedImageHandle) {
        if (((EmbeddedImageHandle)array[i]).getElementHandle().getRoot() instanceof LibraryHandle) {
          try {
            array[i]=StructureFactory.newEmbeddedImageFrom((EmbeddedImageHandle)array[i],SessionHandleAdapter.getInstance().getReportDesignHandle());
          }
 catch (          LibraryException e) {
          }
        }
      }
      addCommandToCompound(array[i],targetObj,position,commandName,commandType,commands);
      if (position > -1) {
        position++;
      }
    }
  }
 else   if (transferData instanceof DesignElementHandle || transferData instanceof IDesignElement) {
    if (transferData instanceof DesignElementHandle && targetObj instanceof SlotHandle && ((DesignElementHandle)transferData).getContainerSlotHandle() == targetObj) {
      ((DesignElementHandle)transferData).moveTo(position);
    }
 else     if (targetObj instanceof DesignElementHandle || targetObj instanceof SlotHandle || targetObj instanceof PropertyHandle) {
      commands.add(getNewCommand(commandType,transferData,targetObj,position));
    }
  }
 else   if (transferData instanceof IStructure) {
    commands.add(new PasteStructureCommand((IStructure)transferData,targetObj));
  }
 else   if (transferData instanceof StructureHandle) {
    commands.add(new PasteStructureCommand(((StructureHandle)transferData).getStructure(),targetObj));
  }
}","private static void addCommandToCompound(Object transferData,Object targetObj,int position,String commandName,String commandType,CompoundCommand commands) throws SemanticException {
  if (transferData instanceof SlotHandle) {
    transferData=transferSlotHandle(commandType,transferData);
  }
  if (transferData instanceof Object[]) {
    Object[] array=(Object[])transferData;
    for (int i=0; i < array.length; i++) {
      if (array[i] instanceof EmbeddedImageHandle) {
        if (((EmbeddedImageHandle)array[i]).getElementHandle().getRoot() instanceof LibraryHandle) {
          try {
            array[i]=StructureFactory.newEmbeddedImageFrom((EmbeddedImageHandle)array[i],SessionHandleAdapter.getInstance().getReportDesignHandle());
          }
 catch (          LibraryException e) {
          }
        }
      }
      addCommandToCompound(array[i],targetObj,position,commandName,commandType,commands);
      if (position > -1) {
        position++;
      }
    }
  }
 else   if (transferData instanceof DesignElementHandle || transferData instanceof IDesignElement) {
    if (transferData instanceof DesignElementHandle && targetObj instanceof SlotHandle && ((DesignElementHandle)transferData).getContainerSlotHandle() == targetObj) {
      ((DesignElementHandle)transferData).moveTo(position);
    }
 else     if (targetObj instanceof DesignElementHandle || targetObj instanceof SlotHandle || targetObj instanceof PropertyHandle) {
      commands.add(getNewCommand(commandType,transferData,targetObj,position));
    }
  }
 else   if (transferData instanceof IStructure) {
    commands.add(new PasteStructureCommand((IStructure)transferData,targetObj));
  }
 else   if (transferData instanceof StructureHandle) {
    commands.add(new PasteStructureCommand(((StructureHandle)transferData).getStructure(),targetObj));
  }
}",0.9967266775777414
73115,"/** 
 * Operates elements. Operation type includes move or copy. Includes transaction.
 * @param transferData single or multiple transfer data, every data must be an instance of <code>DesignElementHandle</code> or <code>DesignElement</code>
 * @param targetObj target elements, class type could be <code>DesignElementHandle</code>,<code>SlotHandle</code> or <code>ReportElementModel</code>
 * @param position the position will be added
 * @param commandName
 * @param commandType TYPE_CUT or TYPE_COPY
 * @return if succeeding in operating data
 */
protected static boolean operateHandles(Object transferData,Object targetObj,int position,String commandName,String commandType){
  ModuleHandle designHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  CommandStack stack=designHandle.getCommandStack();
  try {
    stack.startTrans(commandName);
    CompoundCommand commands=new CompoundCommand();
    if (transferData instanceof StructuredSelection) {
      transferData=((StructuredSelection)transferData).toArray();
    }
    addCommandToCompound(transferData,targetObj,position,commandName,commandType,commands);
    commands.execute();
    stack.commit();
  }
 catch (  Exception e) {
    stack.rollbackAll();
    return false;
  }
  return true;
}","/** 
 * Operates elements. Operation type includes move or copy. Includes transaction.
 * @param transferData single or multiple transfer data, every data must be an instance of <code>DesignElementHandle</code> or <code>DesignElement</code>
 * @param targetObj target elements, class type could be <code>DesignElementHandle</code>,<code>SlotHandle</code> or <code>ReportElementModel</code>
 * @param position the position will be added
 * @param commandName
 * @param commandType TYPE_CUT or TYPE_COPY
 * @return if succeeding in operating data
 */
private static boolean operateHandles(Object transferData,Object targetObj,int position,String commandName,String commandType){
  ModuleHandle designHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  CommandStack stack=designHandle.getCommandStack();
  try {
    stack.startTrans(commandName);
    CompoundCommand commands=new CompoundCommand();
    if (transferData instanceof StructuredSelection) {
      transferData=((StructuredSelection)transferData).toArray();
    }
    addCommandToCompound(transferData,targetObj,position,commandName,commandType,commands);
    commands.execute();
    stack.commit();
  }
 catch (  Exception e) {
    stack.rollbackAll();
    return false;
  }
  return true;
}",0.9952718676122932
73116,"/** 
 * Returns if all objects are in the same column
 * @param objs the array of the object
 */
public static boolean isInSameColumn(Object[] objs){
}","/** 
 * Returns if all objects are in the same column
 * @param objs the array of the object
 */
static boolean isInSameColumn(Object[] objs){
}",0.976271186440678
73117,"/** 
 * @return the current mediator
 */
public ReportMediator getMediator(){
  return getMediator(getReportDesignHandle());
}","/** 
 * @deprecated use {{@link #getMediator(ModuleHandle)}
 * @return the current mediator
 */
public ReportMediator getMediator(){
  return getMediator(getReportDesignHandle());
}",0.8208469055374593
73118,"/** 
 * @deprecated
 * @return wrapped report design handle.
 */
public ModuleHandle getReportDesignHandle(){
  if (model == null) {
    IWorkbenchWindow activeWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    model=(ModuleHandle)reportHandleMap.get(activeWindow);
  }
  return model;
}","/** 
 * @deprecated always try find reprot handle in current context first
 * @return wrapped report design handle.
 */
public ModuleHandle getReportDesignHandle(){
  if (model == null) {
    IWorkbenchWindow activeWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    model=(ModuleHandle)reportHandleMap.get(activeWindow);
  }
  return model;
}",0.9162861491628614
73119,"/** 
 * Get file type
 * @return File type
 */
public int getFileType(){
  return type;
}","/** 
 * Get file type
 * @return File type
 * @deprecated not used any more
 */
public int getFileType(){
  return type;
}",0.8436018957345972
73120,"/** 
 * @return Returns the first master page handle in given module
 */
public MasterPageHandle getFirstMasterPageHandle(ModuleHandle handle){
  SlotHandle slotHandle=handle.getMasterPages();
  if (slotHandle.getCount() > 0) {
    return (MasterPageHandle)slotHandle.getContents().get(0);
  }
  return null;
}","/** 
 * @return Returns the first master page handle in given module
 */
public MasterPageHandle getFirstMasterPageHandle(ModuleHandle handle){
  if (handle == null) {
    return null;
  }
  SlotHandle slotHandle=handle.getMasterPages();
  if (slotHandle.getCount() > 0) {
    return (MasterPageHandle)slotHandle.getContents().get(0);
  }
  return null;
}",0.9323308270676692
73121,"/** 
 * Sets report design.
 * @param handle the model
 */
public void setReportDesignHandle(ModuleHandle handle){
  PlatformUI.getWorkbench().removeWindowListener(pageListener);
  IWorkbenchWindow activeWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (handle == null) {
    reportHandleMap.remove(activeWindow);
  }
 else {
    PlatformUI.getWorkbench().addWindowListener(pageListener);
  }
  if (activeWindow != null) {
    reportHandleMap.put(activeWindow,handle);
  }
  model=handle;
}","/** 
 * Sets report design in current session.
 * @param handle the model
 */
public void setReportDesignHandle(ModuleHandle handle){
  PlatformUI.getWorkbench().removeWindowListener(pageListener);
  IWorkbenchWindow activeWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (handle == null) {
    reportHandleMap.remove(activeWindow);
  }
 else {
    PlatformUI.getWorkbench().addWindowListener(pageListener);
  }
  if (activeWindow != null) {
    reportHandleMap.put(activeWindow,handle);
  }
  model=handle;
}",0.9816069699903196
73122,"private WrapperCommandStack getCommandStack(){
  return new WrapperCommandStack();
}","private WrapperCommandStack getCommandStack(){
  return new WrapperCommandStack(getModel().getCommandStack());
}",0.8571428571428571
73123,"/** 
 * Clears the dirty flag.
 */
private void clearDirtyFlag(){
  IReportProvider provider=getProvider();
  if (provider != null && getErrorLIine(false) == -1) {
    unhookModelEventManager(getModel());
    getCommandStack().removeCommandStackListener(getCommandStackListener());
    ModuleHandle model=provider.getReportModuleHandle(getEditorInput(),true);
    SessionHandleAdapter.getInstance().setReportDesignHandle(model);
    SessionHandleAdapter.getInstance().getMediator().addColleague(this);
    hookModelEventManager(getModel());
    getCommandStack().addCommandStackListener(getCommandStackListener());
    setIsModified(false);
    getEditor().editorDirtyStateChanged();
    if (isActive() && !isLeaving) {
      getReportEditor().reloadOutlinePage();
    }
  }
}","/** 
 * Clears the dirty flag.
 */
private void clearDirtyFlag(){
  IReportProvider provider=getProvider();
  if (provider != null && getErrorLIine(false) == -1) {
    unhookModelEventManager(getModel());
    getCommandStack().removeCommandStackListener(getCommandStackListener());
    SessionHandleAdapter.getInstance().getMediator(getModel()).removeColleague(this);
    ModuleHandle model=provider.getReportModuleHandle(getEditorInput(),true);
    SessionHandleAdapter.getInstance().setReportDesignHandle(model);
    SessionHandleAdapter.getInstance().getMediator(model).addColleague(this);
    hookModelEventManager(getModel());
    getCommandStack().addCommandStackListener(getCommandStackListener());
    setIsModified(false);
    getEditor().editorDirtyStateChanged();
    if (isActive() && !isLeaving) {
      getReportEditor().reloadOutlinePage();
    }
  }
}",0.9409616555082166
73124,"public void dispose(){
  super.dispose();
  reportXMLEditor.dispose();
  reportXMLEditor=null;
  unhookModelEventManager(getModel());
}","public void dispose(){
  super.dispose();
  reportXMLEditor.dispose();
  reportXMLEditor=null;
  unhookModelEventManager(getModel());
  SessionHandleAdapter.getInstance().getMediator(getModel()).removeColleague(this);
}",0.7627118644067796
73125,"public void createPartControl(Composite parent){
  reportXMLEditor.createPartControl(parent);
  Control[] children=parent.getChildren();
  control=children[children.length - 1];
  SessionHandleAdapter.getInstance().getMediator().addColleague(this);
  if (SessionHandleAdapter.getInstance().getCommandStack() != null) {
    getCommandStack().addCommandStackListener(getCommandStackListener());
    hookModelEventManager(getModel());
  }
  reportXMLEditor.getTextViewer().addTextListener(new ITextListener(){
    public void textChanged(    TextEvent event){
      if (!isTextModified() && event.getOffset() != 0) {
        markDirty();
      }
    }
  }
);
  reportXMLEditor.getTextViewer().getTextWidget().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      markDirty();
    }
  }
);
}","public void createPartControl(Composite parent){
  reportXMLEditor.createPartControl(parent);
  Control[] children=parent.getChildren();
  control=children[children.length - 1];
  SessionHandleAdapter.getInstance().getMediator(getModel()).addColleague(this);
  if (getModel() != null && getModel().getCommandStack() != null) {
    getCommandStack().addCommandStackListener(getCommandStackListener());
    hookModelEventManager(getModel());
  }
  reportXMLEditor.getTextViewer().addTextListener(new ITextListener(){
    public void textChanged(    TextEvent event){
      if (!isTextModified() && event.getOffset() != 0) {
        markDirty();
      }
    }
  }
);
  reportXMLEditor.getTextViewer().getTextWidget().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      markDirty();
    }
  }
);
}",0.9566265060240964
73126,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (prePage != this && (prePage.isDirty() || prePage.getStaleType() != IPageStaleType.NONE)) {
    prePage.doSave(null);
    prePage.markPageStale(IPageStaleType.NONE);
    refreshDocument();
    markPageStale(IPageStaleType.NONE);
  }
  hookModelEventManager(getModel());
  ReportRequest request=new ReportRequest(ReportXMLSourceEditorFormPage.this);
  List list=new ArrayList();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (prePage != this && (prePage.isDirty() || prePage.getStaleType() != IPageStaleType.NONE)) {
    prePage.doSave(null);
    prePage.markPageStale(IPageStaleType.NONE);
    refreshDocument();
    markPageStale(IPageStaleType.NONE);
  }
  hookModelEventManager(getModel());
  ReportRequest request=new ReportRequest(ReportXMLSourceEditorFormPage.this);
  List list=new ArrayList();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator(getModel()).notifyRequest(request);
  return true;
}",0.993006993006993
73127,"public void testTotalPercentSum() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_PERCENTSUM_FUNC,ag.getName());
  assertEquals(IAggrFunction.RUNNING_AGGR,ag.getType());
  assertEquals(1,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i]});
  }
  ac.finish();
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i]});
    assertEquals(doubleArray3PercentSum[i],ac.getValue().equals(""String_Node_Str"") ? null : new Integer((int)(new Double(ac.getValue().toString()).doubleValue() * 1000)));
  }
  ac.finish();
  ac.start();
  for (int i=0; i < str2.length; i++) {
    try {
      ac.onRow(new Object[]{str2[i]});
      fail();
    }
 catch (    DataException e) {
    }
  }
  ac.finish();
}","public void testTotalPercentSum() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_PERCENTSUM_FUNC,ag.getName());
  assertEquals(IAggrFunction.RUNNING_AGGR,ag.getType());
  assertEquals(1,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i]});
  }
  ac.finish();
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i]});
    assertEquals(doubleArray3PercentSum[i] == null ? new Integer(0) : doubleArray3PercentSum[i],new Integer((int)(new Double(ac.getValue().toString()).doubleValue() * 1000)));
  }
  ac.finish();
  ac.start();
  for (int i=0; i < str2.length; i++) {
    try {
      ac.onRow(new Object[]{str2[i]});
      fail();
    }
 catch (    DataException e) {
    }
  }
  ac.finish();
}",0.949050949050949
73128,"public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER) && ExcelUtil.isNumber(d.getText())) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  String txt=d.getText();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}","public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER) && ExcelUtil.isNumber(d.getText())) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  d.formatTxt();
  String txt=d.getText();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}",0.9910667367314766
73129,"private String applyFont(String fontName,int fontStyle,float fontSize,String text){
  if (isIntrinsicFont(fontName)) {
    return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
  }
 else {
    try {
      String fontPath=getFontPath(fontName);
      if (fontPath == null) {
        return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
      }
      ITrueTypeWriter trueTypeWriter=getTrueTypeFontWriter(fontPath);
      String displayName=fontName.replace(' ','_');
      trueTypeWriter.useDisplayName(displayName);
      trueTypeWriter.ensureGlyphsAvailable(text);
      setFont(displayName,fontSize);
      return toHexString(text);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
}","private String applyFont(String fontName,int fontStyle,float fontSize,String text){
  if (isIntrinsicFont(fontName)) {
    return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
  }
 else {
    try {
      String fontPath=getFontPath(fontName);
      if (fontPath == null) {
        return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
      }
      ITrueTypeWriter trueTypeWriter=getTrueTypeFontWriter(fontPath);
      String displayName=fontName.replace(' ','_');
      trueTypeWriter.useDisplayName(displayName);
      trueTypeWriter.ensureGlyphsAvailable(text);
      setFont(displayName,fontSize);
      return toHexString(text);
    }
 catch (    Exception e) {
      log.log(Level.WARNING,""String_Node_Str"" + fontName);
    }
    return null;
  }
}",0.9561752988047808
73130,"private String getFontPath(String fontName){
  try {
    FontFactoryImp fontImpl=FontFactory.getFontImp();
    Properties trueTypeFonts=(Properties)getField(FontFactoryImp.class,""String_Node_Str"",fontImpl);
    String fontPath=trueTypeFonts.getProperty(fontName.toLowerCase());
    return fontPath;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","private String getFontPath(String fontName){
  try {
    FontFactoryImp fontImpl=FontFactory.getFontImp();
    Properties trueTypeFonts=(Properties)getField(FontFactoryImp.class,""String_Node_Str"",fontImpl);
    String fontPath=trueTypeFonts.getProperty(fontName.toLowerCase());
    return fontPath;
  }
 catch (  Exception e) {
    log.log(Level.WARNING,""String_Node_Str"" + fontName);
  }
  return null;
}",0.9125964010282775
73131,"private int addTable(PrintStream out,int offset,String name,StringBuffer tableContent){
  int result=0;
  try {
    int[] tableLocation=getTableLocation(name);
    if (tableLocation != null) {
      byte[] tableMetadata=(byte[])metadataTables.get(name);
      Util.putInt32(tableMetadata,8,offset);
      result=offset + getEvenLength(tableLocation[1]);
      out.println(Util.toHexString(tableMetadata));
      byte[] data=readTable(name);
      tableContent.append(""String_Node_Str"" + toPSDataString(Util.toHexString(data)));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return result;
}","private int addTable(PrintStream out,int offset,String name,StringBuffer tableContent){
  int result=0;
  try {
    int[] tableLocation=getTableLocation(name);
    if (tableLocation != null) {
      byte[] tableMetadata=(byte[])metadataTables.get(name);
      Util.putInt32(tableMetadata,8,offset);
      result=offset + getEvenLength(tableLocation[1]);
      out.println(Util.toHexString(tableMetadata));
      byte[] data=readTable(name);
      tableContent.append(""String_Node_Str"" + toPSDataString(Util.toHexString(data)));
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + name);
  }
  return result;
}",0.9464428457234212
73132,"private int addBigTable(PrintStream out,int offset,String name,StringBuffer tableContent){
  int result=0;
  try {
    int[] tableLocation=getTableLocation(name);
    if (tableLocation != null) {
      byte[] tableMetadata=(byte[])metadataTables.get(name);
      if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name)) {
        tableMetadata[3]='x';
        Util.putInt32(tableMetadata,8,0);
        Util.putInt32(tableMetadata,12,0);
        result=offset;
        out.println(Util.toHexString(tableMetadata));
      }
 else {
        Util.putInt32(tableMetadata,8,offset);
        out.println(Util.toHexString(tableMetadata));
        result=offset + getEvenLength(tableLocation[1]);
        List datas=readBigTable(name);
        for (int i=0; i < datas.size(); i++) {
          tableContent.append(""String_Node_Str"" + toPSDataString(Util.toHexString((byte[])datas.get(i))));
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return result;
}","private int addBigTable(PrintStream out,int offset,String name,StringBuffer tableContent){
  int result=0;
  try {
    int[] tableLocation=getTableLocation(name);
    if (tableLocation != null) {
      byte[] tableMetadata=(byte[])metadataTables.get(name);
      if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name)) {
        tableMetadata[3]='x';
        Util.putInt32(tableMetadata,8,0);
        Util.putInt32(tableMetadata,12,0);
        result=offset;
        out.println(Util.toHexString(tableMetadata));
      }
 else {
        Util.putInt32(tableMetadata,8,offset);
        out.println(Util.toHexString(tableMetadata));
        result=offset + getEvenLength(tableLocation[1]);
        List datas=readBigTable(name);
        for (int i=0; i < datas.size(); i++) {
          tableContent.append(""String_Node_Str"" + toPSDataString(Util.toHexString((byte[])datas.get(i))));
        }
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + name);
  }
  return result;
}",0.9668152550767708
73133,"public static void load(String file,OutputStream out){
  InputStream input=null;
  try {
    input=FileUtil.class.getClassLoader().getResourceAsStream(file);
    byte[] buffer=new byte[1024];
    int length=-1;
    do {
      length=input.read(buffer);
      if (length < 0) {
        break;
      }
      out.write(buffer,0,length);
    }
 while (true);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (input != null) {
      try {
        input.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      input=null;
    }
  }
}","public static void load(String file,OutputStream out){
  InputStream input=null;
  try {
    input=FileUtil.class.getClassLoader().getResourceAsStream(file);
    byte[] buffer=new byte[1024];
    int length=-1;
    do {
      length=input.read(buffer);
      if (length < 0) {
        break;
      }
      out.write(buffer,0,length);
    }
 while (true);
  }
 catch (  IOException e) {
    log.log(Level.WARNING,""String_Node_Str"" + file);
  }
 finally {
    if (input != null) {
      try {
        input.close();
      }
 catch (      IOException e) {
        log.log(Level.WARNING,""String_Node_Str"" + file);
      }
      input=null;
    }
  }
}",0.8966074313408724
73134,"protected Object clone(){
  Object o=null;
  try {
    o=super.clone();
  }
 catch (  final CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return o;
}","protected Object clone(){
  Object o=null;
  try {
    o=super.clone();
  }
 catch (  final CloneNotSupportedException e) {
    log.log(Level.WARNING,""String_Node_Str"");
  }
  return o;
}",0.8838526912181303
73135,"public static int convertToPt(String size){
  try {
    int s=Integer.valueOf(size.substring(0,size.length() - 2)).intValue();
    if (size.endsWith(""String_Node_Str"")) {
      return s * 72;
    }
 else     if (size.endsWith(""String_Node_Str"")) {
      return (int)(s / 2.54 * 72);
    }
 else     if (size.endsWith(""String_Node_Str"")) {
      return (int)(s * 10 / 2.54 * 72);
    }
 else     if (size.endsWith(""String_Node_Str"")) {
      return s;
    }
 else {
      return s;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return 0;
  }
}","public static int convertToPt(String size){
  try {
    int s=Integer.valueOf(size.substring(0,size.length() - 2)).intValue();
    if (size.endsWith(""String_Node_Str"")) {
      return s * 72;
    }
 else     if (size.endsWith(""String_Node_Str"")) {
      return (int)(s / 2.54 * 72);
    }
 else     if (size.endsWith(""String_Node_Str"")) {
      return (int)(s * 10 / 2.54 * 72);
    }
 else     if (size.endsWith(""String_Node_Str"")) {
      return s;
    }
 else {
      return s;
    }
  }
 catch (  Exception e) {
    log.log(Level.WARNING,""String_Node_Str"" + size);
    return 0;
  }
}",0.9442508710801394
73136,"private void close(IResultIterator resultIterator){
  try {
    resultIterator.close();
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}","private void close(IResultIterator resultIterator){
  try {
    resultIterator.close();
  }
 catch (  BirtException e) {
    log.log(Level.WARNING,""String_Node_Str"");
  }
}",0.8730650154798761
73137,"/** 
 * set input parameter bindings
 */
private void setInputParameterBinding() throws DataException {
  Iterator inputParamValueslist=getInputParamValues().iterator();
  while (inputParamValueslist.hasNext()) {
    ParameterBinding paramBind=(ParameterBinding)inputParamValueslist.next();
    if (supportNamedParameter(paramBind.getName()))     odaStatement.setParameterValue(paramBind.getName(),paramBind.getValue());
 else     odaStatement.setParameterValue(paramBind.getPosition(),paramBind.getValue());
  }
}","/** 
 * set input parameter bindings
 */
private void setInputParameterBinding() throws DataException {
}",0.3392568659127625
73138,"/** 
 * Adds input and output parameter hints to odaStatement
 */
private void addParameterDefns() throws DataException {
  if (this.parameterHints == null)   return;
  Iterator it=this.parameterHints.iterator();
  while (it.hasNext()) {
    ParameterHint parameterHint=(ParameterHint)it.next();
    odaStatement.addParameterHint(parameterHint);
    if (parameterHint.isInputMode()) {
      Class paramHintDataType=parameterHint.getDataType();
      if (paramHintDataType == Date.class)       paramHintDataType=parameterHint.getEffectiveDataType(dataSource.getDriverName(),queryType);
      Object inputValue=parameterHint.getDefaultInputValue();
      if (paramHintDataType != IBlob.class && paramHintDataType != IClob.class)       inputValue=convertToValue(parameterHint.getDefaultInputValue(),paramHintDataType);
      if (supportNamedParameter(parameterHint.getName()))       this.setInputParamValue(parameterHint.getName(),inputValue);
 else       this.setInputParamValue(parameterHint.getPosition(),inputValue);
    }
  }
  this.setInputParameterBinding();
}","/** 
 * Adds input and output parameter hints to odaStatement
 */
private void addParameterDefns() throws DataException {
}",0.2072451558550969
73139,"private boolean supportsNamedParameter() throws DataException {
  String methodName=""String_Node_Str"";
  sm_logger.entering(sm_className,methodName);
  if (m_supportsNamedParameters != UNKNOWN) {
    boolean ret=(m_supportsNamedParameters == TRUE);
    if (sm_logger.isLoggingEnterExitLevel())     sm_logger.exiting(sm_className,methodName,Boolean.valueOf(ret));
    return ret;
  }
  boolean b=m_connection.getMetaData(m_dataSetType).supportsNamedParameters();
  m_supportsNamedParameters=b ? TRUE : FALSE;
  if (sm_logger.isLoggingEnterExitLevel())   sm_logger.exiting(sm_className,methodName,Boolean.valueOf(b));
  return b;
}","public boolean supportsNamedParameter() throws DataException {
  String methodName=""String_Node_Str"";
  sm_logger.entering(sm_className,methodName);
  if (m_supportsNamedParameters != UNKNOWN) {
    boolean ret=(m_supportsNamedParameters == TRUE);
    if (sm_logger.isLoggingEnterExitLevel())     sm_logger.exiting(sm_className,methodName,Boolean.valueOf(ret));
    return ret;
  }
  boolean b=m_connection.getMetaData(m_dataSetType).supportsNamedParameters();
  m_supportsNamedParameters=b ? TRUE : FALSE;
  if (sm_logger.isLoggingEnterExitLevel())   sm_logger.exiting(sm_className,methodName,Boolean.valueOf(b));
  return b;
}",0.9912490055688148
73140,"/** 
 * Find data type of expression from specified item handle.
 * @param expression expression.
 * @param itemHandle specified item handle.
 * @return an object array, size is two, the first element is a booleanobject, if its value is <code>true</code> then means the data type is found and the second element of array stores the data type; if its value is <code>false</code> then means that data type is not found.
 */
private Object[] findDataType(String expression,ReportItemHandle itemHandle){
  Object[] returnObj=new Object[2];
  returnObj[0]=new Boolean(false);
  String columnName=getQueryStringForProcessing(expression);
  Iterator iterator=ChartReportItemUtil.getAllColumnBindingsIterator(itemHandle);
  while (iterator.hasNext()) {
    ComputedColumnHandle cc=(ComputedColumnHandle)iterator.next();
    if (cc.getName().equalsIgnoreCase(columnName)) {
      String dataType=cc.getDataType();
      if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=DataType.TEXT_LITERAL;
        break;
      }
 else       if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER)|| dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=DataType.NUMERIC_LITERAL;
        break;
      }
 else       if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_TIME)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=DataType.DATE_TIME_LITERAL;
        break;
      }
 else       if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=null;
        break;
      }
    }
  }
  return returnObj;
}","/** 
 * Find data type of expression from specified item handle.
 * @param expression expression.
 * @param itemHandle specified item handle.
 * @return an object array, size is two, the first element is a booleanobject, if its value is <code>true</code> then means the data type is found and the second element of array stores the data type; if its value is <code>false</code> then means that data type is not found.
 */
private Object[] findDataType(String expression,ReportItemHandle itemHandle){
  if (ChartReportItemUtil.checkStringInExpression(expression)) {
    return new Object[]{true,DataType.TEXT_LITERAL};
  }
  Object[] returnObj=new Object[2];
  returnObj[0]=new Boolean(false);
  String columnName=getQueryStringForProcessing(expression);
  Iterator iterator=ChartReportItemUtil.getAllColumnBindingsIterator(itemHandle);
  while (iterator.hasNext()) {
    ComputedColumnHandle cc=(ComputedColumnHandle)iterator.next();
    if (cc.getName().equalsIgnoreCase(columnName)) {
      String dataType=cc.getDataType();
      if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=DataType.TEXT_LITERAL;
        break;
      }
 else       if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER)|| dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=DataType.NUMERIC_LITERAL;
        break;
      }
 else       if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_TIME)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=DataType.DATE_TIME_LITERAL;
        break;
      }
 else       if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=null;
        break;
      }
    }
  }
  return returnObj;
}",0.9704457364341084
73141,"/** 
 * Collect and empty any objects that are used in multiple tests.  Currently Empty.
 */
protected void tearDown() throws Exception {
}","/** 
 * Collect and empty any objects that are used in multiple tests. Currently Empty.
 */
protected void tearDown() throws Exception {
}",0.9963898916967509
73142,"private int getErrorLIine(boolean checkReport){
  errorDetail=null;
  IEditorInput input=getEditorInput();
  if (!(input instanceof IPathEditorInput)) {
    return 0;
  }
  IPath path=((IPathEditorInput)input).getPath();
  try {
    if (path.toOSString().endsWith(IReportEditorContants.LIBRARY_FILE_EXTENTION)) {
      LibraryHandle library=null;
      try {
        library=SessionHandleAdapter.getInstance().getSessionHandle().openLibrary(path.toOSString());
        if (checkReport) {
          return getErrorLineFromModuleHandle(library);
        }
      }
 catch (      DesignFileException e) {
        return getExpetionErrorLine(e);
      }
 finally {
        if (library != null) {
          library.close();
        }
      }
    }
 else {
      ReportDesignHandle report=null;
      try {
        report=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(path.toOSString(),new FileInputStream(path.toFile()));
        if (checkReport) {
          return getErrorLineFromModuleHandle(report);
        }
      }
 catch (      DesignFileException e) {
        return getExpetionErrorLine(e);
      }
 finally {
        if (report != null) {
          report.close();
        }
      }
    }
  }
 catch (  FileNotFoundException e) {
    return 0;
  }
  return -1;
}","private int getErrorLIine(boolean checkReport){
  errorDetail=null;
  IEditorInput input=getEditorInput();
  try {
    IPath path=getProvider().getInputPath(input);
    if (path.toOSString().endsWith(IReportEditorContants.LIBRARY_FILE_EXTENTION)) {
      LibraryHandle library=null;
      try {
        library=SessionHandleAdapter.getInstance().getSessionHandle().openLibrary(path.toOSString());
        if (checkReport) {
          return getErrorLineFromModuleHandle(library);
        }
      }
 catch (      DesignFileException e) {
        return getExpetionErrorLine(e);
      }
 finally {
        if (library != null) {
          library.close();
        }
      }
    }
 else {
      ReportDesignHandle report=null;
      try {
        report=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(path.toOSString(),new FileInputStream(path.toFile()));
        if (checkReport) {
          return getErrorLineFromModuleHandle(report);
        }
      }
 catch (      DesignFileException e) {
        return getExpetionErrorLine(e);
      }
 finally {
        if (report != null) {
          report.close();
        }
      }
    }
  }
 catch (  FileNotFoundException e) {
    return 0;
  }
  return -1;
}",0.9425837320574164
73143,"/** 
 * Initializes the given document from the given editor input using the given character encoding.
 * @param document the document to be initialized
 * @param editorInput the input from which to derive the content of the document
 * @param encoding the character encoding used to read the editor input
 * @return <code>true</code> if the document content could be set,<code>false</code> otherwise
 * @throws CoreException if the given editor input cannot be accessed
 */
protected boolean setDocumentContent(IDocument document,IEditorInput editorInput,String encoding) throws CoreException {
  ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  File file=new File(moduleHandle.getFileName());
  if (file.exists()) {
    try {
      InputStream stream=new FileInputStream(file);
      setDocumentContent(document,stream,encoding);
      stream.close();
      return true;
    }
 catch (    FileNotFoundException e) {
    }
catch (    IOException e) {
    }
  }
  return false;
}","/** 
 * Initializes the given document from the given editor input using the given character encoding.
 * @param document the document to be initialized
 * @param editorInput the input from which to derive the content of the document
 * @param encoding the character encoding used to read the editor input
 * @return <code>true</code> if the document content could be set,<code>false</code> otherwise
 * @throws CoreException if the given editor input cannot be accessed
 */
protected boolean setDocumentContent(IDocument document,IEditorInput editorInput,String encoding) throws CoreException {
  InputStream stream=null;
  if (editorInput instanceof IStorageEditorInput) {
    IStorage storage=((IStorageEditorInput)editorInput).getStorage();
    if (storage != null) {
      stream=storage.getContents();
    }
  }
  if (stream == null) {
    ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
    if (moduleHandle != null) {
      File file=new File(moduleHandle.getFileName());
      ;
      if (file.exists()) {
        try {
          stream=new FileInputStream(file);
        }
 catch (        FileNotFoundException e) {
        }
      }
    }
  }
  if (stream != null) {
    try {
      setDocumentContent(document,stream,encoding);
      stream.close();
      return true;
    }
 catch (    FileNotFoundException e) {
    }
catch (    IOException e) {
    }
  }
  return false;
}",0.8063855914858781
73144,"public IPath getInputPath(IEditorInput input){
  if (input instanceof FileEditorInput) {
    return ((FileEditorInput)input).getPath();
  }
 else   if (input instanceof IURIEditorInput) {
    return new Path(((IURIEditorInput)input).getURI().getPath());
  }
  return null;
}","public IPath getInputPath(IEditorInput input){
  if (input instanceof IPathEditorInput) {
    return ((IPathEditorInput)input).getPath();
  }
 else   if (input instanceof IURIEditorInput) {
    return new Path(((IURIEditorInput)input).getURI().getPath());
  }
  return null;
}",0.9672727272727272
73145,"protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle columnBinding) throws BirtException {
  String name=columnBinding.getName();
  String expr=columnBinding.getExpression();
  String type=columnBinding.getDataType();
  String displayName=columnBinding.getDisplayName();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=new ScriptExpression(expr,dbType);
  if (columnBinding.getAggregateOn() != null) {
    dbExpr.setGroupName(columnBinding.getAggregateOn());
  }
  IBinding binding=new Binding(name,dbExpr);
  binding.setDisplayName(displayName);
  if (columnBinding.getAggregateOn() != null)   binding.addAggregateOn(columnBinding.getAggregateOn());
  if (columnBinding.getAggregateFunction() != null) {
    binding.setAggrFunction(columnBinding.getAggregateFunction());
  }
  String filter=columnBinding.getFilterExpression();
  if (filter != null) {
    binding.setFilter(new ScriptExpression(filter));
  }
  Iterator arguments=columnBinding.argumentsIterator();
  if (arguments != null) {
    while (arguments.hasNext()) {
      AggregationArgumentHandle argumentHandle=(AggregationArgumentHandle)arguments.next();
      String argument=argumentHandle.getValue();
      if (argument != null) {
        binding.addArgument(new ScriptExpression(argument));
      }
    }
  }
  transfer.addBinding(binding);
}","protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle columnBinding) throws BirtException {
  String name=columnBinding.getName();
  String expr=columnBinding.getExpression();
  String type=columnBinding.getDataType();
  String displayName=columnBinding.getDisplayName();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=new ScriptExpression(expr,dbType);
  if (columnBinding.getAggregateOn() != null) {
    dbExpr.setGroupName(columnBinding.getAggregateOn());
  }
  IBinding binding=new Binding(name,dbExpr);
  binding.setDisplayName(displayName);
  if (columnBinding.getAggregateOn() != null)   binding.addAggregateOn(columnBinding.getAggregateOn());
  if (columnBinding.getAggregateFunction() != null) {
    binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(columnBinding.getAggregateFunction()));
  }
  String filter=columnBinding.getFilterExpression();
  if (filter != null) {
    binding.setFilter(new ScriptExpression(filter));
  }
  Iterator arguments=columnBinding.argumentsIterator();
  if (arguments != null) {
    while (arguments.hasNext()) {
      AggregationArgumentHandle argumentHandle=(AggregationArgumentHandle)arguments.next();
      String argument=argumentHandle.getValue();
      if (argument != null) {
        binding.addArgument(new ScriptExpression(argument));
      }
    }
  }
  transfer.addBinding(binding);
}",0.9845379359942468
73146,"public void testExecutionOptimize() throws Exception {
  ReportRunnable reportRunnable=(ReportRunnable)engine.openReportDesign(REPORT_DESIGN);
  Report report=reportRunnable.getReportIR();
  ExecutionOptimize executionOpt=new ExecutionOptimize();
  ExecutionPolicy policy=executionOpt.optimize(report);
  validatePolicy(report,policy);
}","public void testExecutionOptimize() throws Exception {
  ReportRunnable reportRunnable=(ReportRunnable)engine.openReportDesign(REPORT_DESIGN);
  Report report=new ReportParser().parse((ReportDesignHandle)reportRunnable.getDesignHandle());
  ExecutionOptimize executionOpt=new ExecutionOptimize();
  ExecutionPolicy policy=executionOpt.optimize(report);
  validatePolicy(report,policy);
}",0.8591160220994475
73147,"protected void createDocument(){
  try {
    IDocArchiveWriter archive=new FileArchiveWriter(REPORT_DOCUMENT);
    ReportDocumentWriter document=new ReportDocumentWriter(engine,archive);
    ReportRunnable runnable=(ReportRunnable)engine.openReportDesign(REPORT_DESIGN);
    document.saveDesign(runnable);
    HashMap parameters=createParamters();
    document.saveParamters(parameters);
    TOCTree tocTree=createTOC();
    document.saveTOC(tocTree);
    HashMap bookmarks=createBookmarks();
    document.saveBookmarks(bookmarks);
    Map map=createPersistentObjects();
    document.savePersistentObjects(map);
    document.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}","protected void createDocument(){
  try {
    IDocArchiveWriter archive=new FileArchiveWriter(REPORT_DOCUMENT);
    ReportDocumentWriter document=new ReportDocumentWriter(engine,archive);
    ReportRunnable runnable=(ReportRunnable)engine.openReportDesign(REPORT_DESIGN);
    Report reportIR=new ReportParser().parse((ReportDesignHandle)runnable.getDesignHandle());
    document.saveDesign(runnable,null,reportIR);
    HashMap parameters=createParamters();
    document.saveParamters(parameters);
    TOCTree tocTree=createTOC();
    document.saveTOC(tocTree);
    HashMap bookmarks=createBookmarks();
    document.saveBookmarks(bookmarks);
    Map map=createPersistentObjects();
    document.savePersistentObjects(map);
    document.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}",0.9106438896189224
73148,"/** 
 * The report runnable is used to create the report document while writing. If the report document is open with, the report runnable is used to render or extract data from the report document.
 * @return the runnable report design. It is available because a reportdocument must be run with a report design
 */
public abstract IReportRunnable getReportRunnable();","/** 
 * The report runnable is used to create the report document while writing. If the report document is open with, the report runnable is used to render or extract data from the report document. user always get a new instance from this interface.
 * @return the runnable report design. It is available because a reportdocument must be run with a report design
 */
public abstract IReportRunnable getReportRunnable();",0.9338422391857506
73149,"/** 
 * creates a task that renders the report to a specific output format.
 * @param reportDocument a handle to an IReportDocument object
 * @return a task that renders a report to an output format
 */
public IRenderTask createRenderTask(IReportDocument reportDocument){
  return engine.createRenderTask(reportDocument);
}","public IRenderTask createRenderTask(IReportDocument reportDocument,IReportRunnable reportRunnable){
  return engine.createRenderTask(reportDocument,reportRunnable);
}",0.4907975460122699
73150,"protected void setupExecutionContext(){
  executionContext.getConfigs().putAll(runnable.getTestConfig());
  executionContext.getConfigs().putAll(System.getProperties());
}","protected void setupExecutionContext(){
  IReportRunnable runnable=executionContext.getRunnable();
  executionContext.getConfigs().putAll(runnable.getTestConfig());
  executionContext.getConfigs().putAll(System.getProperties());
}",0.8528678304239401
73151,"public DataExtractionTask(ReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  String version=reader.getProperty(ReportDocumentConstants.DATA_EXTRACTION_TASK_VERSION_KEY);
  if (ReportDocumentConstants.DATA_EXTRACTION_TASK_VERSION_0.equals(version)) {
    task=new DataExtractionTaskV0(engine,runnable,reader);
  }
 else   if (ReportDocumentConstants.DATA_EXTRACTION_TASK_VERSION_1.equals(version)) {
    task=new DataExtractionTaskV1(engine,runnable,reader);
  }
}","public DataExtractionTask(ReportEngine engine,IReportDocument reader) throws EngineException {
  String version=reader.getProperty(ReportDocumentConstants.DATA_EXTRACTION_TASK_VERSION_KEY);
  if (ReportDocumentConstants.DATA_EXTRACTION_TASK_VERSION_0.equals(version)) {
    task=new DataExtractionTaskV0(engine,reader);
  }
 else   if (ReportDocumentConstants.DATA_EXTRACTION_TASK_VERSION_1.equals(version)) {
    task=new DataExtractionTaskV1(engine,reader);
  }
}",0.9558067831449126
73152,"public DataExtractionTaskV0(ReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  super(engine,runnable,IEngineTask.TASK_DATAEXTRACTION);
  this.report=((ReportRunnable)runnable).getReportIR();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
}","public DataExtractionTaskV0(ReportEngine engine,IReportDocument reader) throws EngineException {
  super(engine,IEngineTask.TASK_DATAEXTRACTION);
  IReportRunnable runnable=getOnPreparedRunnable(reader);
  setReportRunnable(runnable);
  setReportIR(reader);
  this.report=executionContext.getReport();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
}",0.7635135135135135
73153,"public DataExtractionTaskV1(ReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  super(engine,runnable);
  this.report=((ReportRunnable)runnable).getReportIR();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  setParameterValues(reportDocReader.getParameterValues());
  setParameterDisplayTexts(reportDocReader.getParameterDisplayTexts());
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDocReader.getGlobalVariables(null));
  Map appContext=executionContext.getAppContext();
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
}","public DataExtractionTaskV1(ReportEngine engine,IReportDocument reader) throws EngineException {
  super(engine,IEngineTask.TASK_DATAEXTRACTION);
  IReportRunnable runnable=getOnPreparedRunnable(reader);
  setReportRunnable(runnable);
  setReportIR(reader);
  this.report=executionContext.getReport();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  setParameterValues(reportDocReader.getParameterValues());
  setParameterDisplayTexts(reportDocReader.getParameterDisplayTexts());
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDocReader.getGlobalVariables(null));
  Map appContext=executionContext.getAppContext();
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
}",0.7826617826617827
73154,"protected void prepareDesign(){
  ReportDesignHandle reportDesign=executionContext.getDesign();
  ScriptedDesignVisitor visitor=new ScriptedDesignVisitor(reportDesign,executionContext);
  visitor.apply(reportDesign.getRoot());
  runnable.setDesignHandle(reportDesign);
}","protected void prepareDesign(){
  ReportDesignHandle reportDesign=executionContext.getDesign();
  ScriptedDesignSearcher searcher=new ScriptedDesignSearcher(reportDesign);
  searcher.apply(reportDesign);
  boolean hasOnprepare=searcher.hasOnPrepareScript();
  if (hasOnprepare) {
    ReportRunnable newRunnable=executionContext.getRunnable().cloneRunnable();
    ReportDesignHandle newDesign=newRunnable.designHandle;
    ScriptedDesignVisitor visitor=new ScriptedDesignHandler(newDesign,executionContext);
    visitor.apply(newDesign.getRoot());
    executionContext.updateRunnable(newRunnable);
  }
}",0.4334862385321101
73155,"public IReportRunnable getReportRunnable(){
  return runnable;
}","public IReportRunnable getReportRunnable(){
  return executionContext.getOriginalRunnable();
}",0.810126582278481
73156,"public void setReportRunnable(IReportRunnable runnable){
  if (runnable != null) {
    this.runnable=runnable;
    executionContext.setRunnable(runnable);
    executionContext.registerBeans(System.getProperties());
    executionContext.registerBeans(runnable.getTestConfig());
    executionContext.getConfigs().putAll(System.getProperties());
    executionContext.getConfigs().putAll(runnable.getTestConfig());
  }
}","public void setReportRunnable(IReportRunnable runnable){
  if (runnable != null) {
    executionContext.setRunnable(runnable);
    executionContext.registerBeans(System.getProperties());
    executionContext.registerBeans(runnable.getTestConfig());
    executionContext.getConfigs().putAll(System.getProperties());
    executionContext.getConfigs().putAll(runnable.getTestConfig());
  }
}",0.965174129353234
73157,"protected void loggerParamters(){
  if (log.isLoggable(Level.FINE)) {
    final StringBuffer buffer=new StringBuffer();
    new ParameterVisitor(){
      boolean visitScalarParameter(      ScalarParameterHandle param,      Object value){
        String paramName=param.getName();
        Object paramValue=runValues.get(paramName);
        buffer.append(paramName);
        buffer.append(""String_Node_Str"");
        buffer.append(paramValue);
        buffer.append(""String_Node_Str"");
        return true;
      }
      boolean visitParameterGroup(      ParameterGroupHandle group,      Object value){
        return visitParametersInGroup(group,value);
      }
    }
.visit((ReportDesignHandle)runnable.getDesignHandle(),null);
    log.log(Level.FINE,""String_Node_Str"",buffer);
  }
}","protected void loggerParamters(){
  if (log.isLoggable(Level.FINE)) {
    final StringBuffer buffer=new StringBuffer();
    new ParameterVisitor(){
      boolean visitScalarParameter(      ScalarParameterHandle param,      Object value){
        String paramName=param.getName();
        Object paramValue=runValues.get(paramName);
        buffer.append(paramName);
        buffer.append(""String_Node_Str"");
        buffer.append(paramValue);
        buffer.append(""String_Node_Str"");
        return true;
      }
      boolean visitParameterGroup(      ParameterGroupHandle group,      Object value){
        return visitParametersInGroup(group,value);
      }
    }
.visit(executionContext.getDesign(),null);
    log.log(Level.FINE,""String_Node_Str"",buffer);
  }
}",0.9638709677419356
73158,"protected EngineTask(ReportEngine engine,IReportRunnable runnable,int taskType){
  this(engine,runnable);
  this.taskType=taskType;
}","protected EngineTask(ReportEngine engine,int taskType){
  this.engine=engine;
  this.taskType=taskType;
  taskID=id++;
  this.log=engine.getLogger();
  executionContext=new ExecutionContext(this);
  executionContext.setReportContext(new ReportContextImpl(executionContext));
  setAppContext(engine.getConfig().getAppContext());
  cancelFlag=false;
  runningStatus=STATUS_NOT_STARTED;
}",0.2007722007722007
73159,"protected boolean doValidateParameters() throws ParameterValidationException {
  usingParameterValues();
  if (log.isLoggable(Level.FINE)) {
    loggerParamters();
  }
  ParameterValidationVisitor pv=new ParameterValidationVisitor();
  boolean result=pv.visit((ReportDesignHandle)runnable.getDesignHandle(),null);
  if (pv.engineException != null) {
    throw pv.engineException;
  }
  return result;
}","protected boolean doValidateParameters() throws ParameterValidationException {
  usingParameterValues();
  if (log.isLoggable(Level.FINE)) {
    loggerParamters();
  }
  ParameterValidationVisitor pv=new ParameterValidationVisitor();
  boolean result=pv.visit(executionContext.getDesign(),null);
  if (pv.engineException != null) {
    throw pv.engineException;
  }
  return result;
}",0.9287531806615776
73160,"/** 
 * use the user setting parameters values to setup the execution context. the user setting values and default values are merged here.
 */
protected void usingParameterValues(){
  if (!parameterChanged) {
    return;
  }
  parameterChanged=false;
  executionContext.clearParameters();
  runValues.clear();
  Iterator iterator=inputValues.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry entry=(Map.Entry)iterator.next();
    Object key=entry.getKey();
    ParameterAttribute attribute=(ParameterAttribute)entry.getValue();
    runValues.put(key,attribute.getValue());
    executionContext.setParameter((String)key,attribute.getValue(),attribute.getDisplayText());
  }
  if (runnable == null) {
    return;
  }
  new ParameterVisitor(){
    boolean visitScalarParameter(    ScalarParameterHandle param,    Object userData){
      String name=param.getName();
      if (!inputValues.containsKey(name)) {
        Object value=convertToType(param.getDefaultValue(),param.getDataType());
        executionContext.setParameterValue(name,value);
        runValues.put(name,value);
      }
      return true;
    }
    boolean visitParameterGroup(    ParameterGroupHandle group,    Object value){
      return visitParametersInGroup(group,value);
    }
  }
.visit((ReportDesignHandle)runnable.getDesignHandle());
}","/** 
 * use the user setting parameters values to setup the execution context. the user setting values and default values are merged here.
 */
protected void usingParameterValues(){
  if (!parameterChanged) {
    return;
  }
  parameterChanged=false;
  executionContext.clearParameters();
  runValues.clear();
  Iterator iterator=inputValues.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry entry=(Map.Entry)iterator.next();
    Object key=entry.getKey();
    ParameterAttribute attribute=(ParameterAttribute)entry.getValue();
    runValues.put(key,attribute.getValue());
    executionContext.setParameter((String)key,attribute.getValue(),attribute.getDisplayText());
  }
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null) {
    return;
  }
  new ParameterVisitor(){
    boolean visitScalarParameter(    ScalarParameterHandle param,    Object userData){
      String name=param.getName();
      if (!inputValues.containsKey(name)) {
        Object value=convertToType(param.getDefaultValue(),param.getDataType());
        executionContext.setParameterValue(name,value);
        runValues.put(name,value);
      }
      return true;
    }
    boolean visitParameterGroup(    ParameterGroupHandle group,    Object value){
      return visitParametersInGroup(group,value);
    }
  }
.visit((ReportDesignHandle)runnable.getDesignHandle());
}",0.9782848730217152
73161,"public boolean validateParameters(){
  if (runnable == null) {
    return false;
  }
  try {
    doValidateParameters();
    return true;
  }
 catch (  ParameterValidationException ex) {
    log.log(Level.SEVERE,ex.getMessage(),ex);
  }
  return false;
}","public boolean validateParameters(){
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null) {
    return false;
  }
  try {
    doValidateParameters();
    return true;
  }
 catch (  ParameterValidationException ex) {
    log.log(Level.SEVERE,ex.getMessage(),ex);
  }
  return false;
}",0.8959435626102292
73162,"protected void loadDesign(){
  if (runnable != null) {
    ReportDesignHandle reportDesign=executionContext.getDesign();
    Iterator iter=reportDesign.includeLibraryScriptsIterator();
    while (iter.hasNext()) {
      IncludeScriptHandle includeScript=(IncludeScriptHandle)iter.next();
      String fileName=includeScript.getFileName();
      executionContext.loadScript(fileName);
    }
    iter=reportDesign.includeScriptsIterator();
    while (iter.hasNext()) {
      IncludeScriptHandle includeScript=(IncludeScriptHandle)iter.next();
      String fileName=includeScript.getFileName();
      executionContext.loadScript(fileName);
    }
    ReportScriptExecutor.handleInitialize(reportDesign,executionContext);
  }
}","protected void loadDesign(){
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable != null) {
    ReportDesignHandle reportDesign=executionContext.getDesign();
    Iterator iter=reportDesign.includeLibraryScriptsIterator();
    while (iter.hasNext()) {
      IncludeScriptHandle includeScript=(IncludeScriptHandle)iter.next();
      String fileName=includeScript.getFileName();
      executionContext.loadScript(fileName);
    }
    iter=reportDesign.includeScriptsIterator();
    while (iter.hasNext()) {
      IncludeScriptHandle includeScript=(IncludeScriptHandle)iter.next();
      String fileName=includeScript.getFileName();
      executionContext.loadScript(fileName);
    }
    ReportScriptExecutor.handleInitialize(reportDesign,executionContext);
  }
}",0.9607451763140386
73163,"/** 
 * Creates unique result set column names if column names are <code>null</code> or empty string.
 * @param resultSetColumn a list containing result set columns
 */
private static void createUniqueResultSetColumnNames(List columnInfo){
  if (columnInfo == null || columnInfo.isEmpty())   return;
  Set names=new HashSet();
  for (int i=0; i < columnInfo.size(); i++) {
    ResultSetColumnInfo tmpInfo=(ResultSetColumnInfo)columnInfo.get(i);
    OdaResultSetColumn column=tmpInfo.column;
    String nativeName=column.getNativeName();
    if (nativeName != null)     names.add(nativeName);
  }
  Set newNames=new HashSet();
  for (int i=0; i < columnInfo.size(); i++) {
    ResultSetColumnInfo tmpInfo=(ResultSetColumnInfo)columnInfo.get(i);
    OdaResultSetColumn column=tmpInfo.column;
    String nativeName=column.getNativeName();
    String name=column.getColumnName();
    if (!StringUtil.isBlank(name))     continue;
    String newName=IdentifierUtility.getUniqueColumnName(names,newNames,nativeName,i);
    column.setColumnName(newName);
    if (tmpInfo.hint != null)     tmpInfo.hint.setProperty(ColumnHint.COLUMN_NAME_MEMBER,newName);
  }
  names.clear();
  newNames.clear();
}","/** 
 * Creates unique result set column names if column names are <code>null</code> or empty string.
 * @param resultSetColumn a list containing result set columns
 */
private static void createUniqueResultSetColumnNames(List columnInfo){
  if (columnInfo == null || columnInfo.isEmpty())   return;
  Set names=new HashSet();
  for (int i=0; i < columnInfo.size(); i++) {
    ResultSetColumnInfo tmpInfo=(ResultSetColumnInfo)columnInfo.get(i);
    OdaResultSetColumn column=tmpInfo.column;
    String nativeName=column.getNativeName();
    if (nativeName != null)     names.add(nativeName);
  }
  Set newNames=new HashSet();
  for (int i=0; i < columnInfo.size(); i++) {
    ResultSetColumnInfo tmpInfo=(ResultSetColumnInfo)columnInfo.get(i);
    OdaResultSetColumn column=tmpInfo.column;
    String nativeName=column.getNativeName();
    String name=column.getColumnName();
    if (!StringUtil.isBlank(name))     continue;
    String newName=IdentifierUtility.getUniqueColumnName(names,newNames,nativeName,i);
    newNames.add(newName);
    column.setColumnName(newName);
    if (tmpInfo.hint != null)     tmpInfo.hint.setProperty(ColumnHint.COLUMN_NAME_MEMBER,newName);
  }
  names.clear();
  newNames.clear();
}",0.9887640449438202
73164,"/** 
 * Test setRenderOption(IRenderOption) method Test getRenderOption() method
 */
public void testGetRenderOption(){
  RenderOptionBase rendop=new RenderOptionBase();
  rendop.setOutputFormat(""String_Node_Str"");
  rendop.setOutputFileName(""String_Node_Str"");
  HTMLRenderContext context=new HTMLRenderContext();
  context.SetRenderOption(rendop);
  RenderOptionBase ropb=(RenderOptionBase)(context.getRenderOption());
  assertEquals(""String_Node_Str"",ropb.getOutputFormat());
  HashMap outsetting=new HashMap();
  outsetting=ropb.getOutputSetting();
  assertFalse(outsetting.isEmpty());
  assertEquals(2,outsetting.size());
  ropb.getOutputSetting().put(HTMLRenderOption.URL_ENCODING,""String_Node_Str"");
  assertEquals(3,outsetting.size());
}","/** 
 * Test setRenderOption(IRenderOption) method Test getRenderOption() method
 */
public void testGetRenderOption(){
  RenderOptionBase rendop=new RenderOptionBase();
  rendop.setOutputFormat(""String_Node_Str"");
  rendop.setOutputFileName(""String_Node_Str"");
  HTMLRenderContext context=new HTMLRenderContext();
  context.SetRenderOption(rendop);
  RenderOptionBase ropb=(RenderOptionBase)(context.getRenderOption());
  assertEquals(""String_Node_Str"",ropb.getOutputFormat());
  Map outsetting=new HashMap();
  outsetting=ropb.getOutputSetting();
  assertFalse(outsetting.isEmpty());
  assertEquals(2,outsetting.size());
  ropb.getOutputSetting().put(HTMLRenderOption.URL_ENCODING,""String_Node_Str"");
  assertEquals(3,outsetting.size());
}",0.9973082099596232
73165,"private void configEngine(){
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler(){
    public String getURL(    IAction actionDefn,    Object context){
      if (actionDefn.getType() == IAction.ACTION_DRILLTHROUGH)       return ""String_Node_Str"" + URLEncoder.encode(super.getURL(actionDefn,context));
      return super.getURL(actionDefn,context);
    }
  }
);
  engineConfig.getEmitterConfigs().put(RenderOption.OUTPUT_FORMAT_HTML,emitterConfig);
  String userClassPath=getUserClassPath();
  logger.info(""String_Node_Str"" + userClassPath);
  if (userClassPath != null) {
    engineConfig.getAppContext().put(EngineConstants.PROJECT_CLASSPATH_KEY,userClassPath);
  }
}","private void configEngine(){
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler(){
    public String getURL(    IAction actionDefn,    Object context){
      if (actionDefn.getType() == IAction.ACTION_DRILLTHROUGH)       return ""String_Node_Str"" + URLEncoder.encode(super.getURL(actionDefn,context));
      return super.getURL(actionDefn,context);
    }
  }
);
  engineConfig.getEmitterConfigs().put(RenderOption.OUTPUT_FORMAT_HTML,emitterConfig);
  String userClassPath=getUserClassPath();
  logger.info(""String_Node_Str"" + userClassPath);
  System.clearProperty(EngineConstants.PROJECT_CLASSPATH_KEY);
  if (userClassPath != null) {
    engineConfig.getAppContext().put(EngineConstants.PROJECT_CLASSPATH_KEY,userClassPath);
    System.setProperty(EngineConstants.PROJECT_CLASSPATH_KEY,userClassPath);
  }
}",0.9123904881101376
73166,"private static Class getClassUsingCustomClassPath(String className,String classPathKey,ClassLoader parentLoader){
  String classPath=System.getProperty(classPathKey);
  if (classPath == null || classPath.length() == 0 || className == null)   return null;
  String[] classPathArray=classPath.split(PROPERTYSEPARATOR,-1);
  URL[] urls=null;
  if (classPathArray.length != 0) {
    List l=new ArrayList();
    for (int i=0; i < classPathArray.length; i++) {
      String cpValue=classPathArray[i];
      File file=new File(cpValue);
      try {
        l.add(file.toURL());
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
    }
    urls=(URL[])l.toArray(new URL[l.size()]);
  }
  if (urls != null) {
    ClassLoader cl=new URLClassLoader(urls,parentLoader);
    try {
      return cl.loadClass(className);
    }
 catch (    ClassNotFoundException e) {
    }
  }
  return null;
}","private static Class getClassUsingCustomClassPath(String className,String classPathKey,ClassLoader parentLoader){
  String classPath=System.getProperty(classPathKey);
  if (classPath == null || classPath.length() == 0 || className == null)   return null;
  String[] classPathArray=classPath.split(EngineConstants.PROPERTYSEPARATOR,-1);
  URL[] urls=null;
  if (classPathArray.length != 0) {
    List l=new ArrayList();
    for (int i=0; i < classPathArray.length; i++) {
      String cpValue=classPathArray[i];
      File file=new File(cpValue);
      try {
        l.add(file.toURL());
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
    }
    urls=(URL[])l.toArray(new URL[l.size()]);
  }
  if (urls != null) {
    ClassLoader cl=new URLClassLoader(urls,parentLoader);
    try {
      return cl.loadClass(className);
    }
 catch (    ClassNotFoundException e) {
    }
  }
  return null;
}",0.991313789359392
73167,"public Class loadClass(String className,ClassLoader parentLoader) throws ClassNotFoundException {
  if (className == null)   return null;
  Class c=null;
  ClassNotFoundException ex=null;
  if (this.classLoader != null) {
    c=this.classLoader.loadClass(className);
    if (c != null) {
      return c;
    }
  }
  try {
    c=Class.forName(className);
  }
 catch (  ClassNotFoundException e) {
    ex=e;
    c=getClassUsingCustomClassPath(className,WEBAPP_CLASSPATH_KEY,parentLoader);
    if (c == null) {
      c=getClassUsingCustomClassPath(className,PROJECT_CLASSPATH_KEY,parentLoader);
      if (c == null) {
        c=getClassUsingCustomClassPath(className,WORKSPACE_CLASSPATH_KEY,parentLoader);
      }
    }
  }
  if (c == null) {
    throw ex;
  }
  return c;
}","public Class loadClass(String className,ClassLoader parentLoader) throws ClassNotFoundException {
  if (className == null)   return null;
  Class c=null;
  ClassNotFoundException ex=null;
  if (this.classLoader != null) {
    try {
      c=this.classLoader.loadClass(className);
      if (c != null) {
        return c;
      }
    }
 catch (    Throwable e) {
    }
  }
  try {
    c=Class.forName(className);
  }
 catch (  ClassNotFoundException e) {
    ex=e;
    c=getClassUsingCustomClassPath(className,EngineConstants.WEBAPP_CLASSPATH_KEY,parentLoader);
    if (c == null) {
      c=getClassUsingCustomClassPath(className,EngineConstants.PROJECT_CLASSPATH_KEY,parentLoader);
      if (c == null) {
        c=getClassUsingCustomClassPath(className,EngineConstants.WORKSPACE_CLASSPATH_KEY,parentLoader);
      }
    }
  }
  if (c == null) {
    throw ex;
  }
  return c;
}",0.9253187613843352
73168,"protected void setupGroup(GroupDesign group,GroupHandle handle){
  group.setID(handle.getID());
  setupElementIDMap(group);
  group.setName(handle.getName());
  String pageBreakBefore=handle.getStringProperty(StyleHandle.PAGE_BREAK_BEFORE_PROP);
  String pageBreakAfter=handle.getStringProperty(StyleHandle.PAGE_BREAK_AFTER_PROP);
  String pageBreakInside=handle.getStringProperty(StyleHandle.PAGE_BREAK_INSIDE_PROP);
  group.setPageBreakBefore(pageBreakBefore);
  group.setPageBreakAfter(pageBreakAfter);
  group.setPageBreakInside(pageBreakInside);
  TOCHandle tocHandle=handle.getTOC();
  if (tocHandle != null) {
    String toc=tocHandle.getExpression();
    group.setTOC(createExpression(toc));
  }
  String bookmark=handle.getBookmark();
  group.setBookmark(bookmark);
  String scriptText=handle.getOnPageBreak();
  if (null != scriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(IGroupElementModel.ON_PAGE_BREAK_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(scriptText,id);
    group.setOnPageBreak(scriptExpr);
  }
  group.setHandle(handle);
  group.setJavaClass(handle.getEventHandlerClass());
}","protected void setupGroup(GroupDesign group,GroupHandle handle){
  group.setID(handle.getID());
  setupElementIDMap(group);
  group.setName(handle.getName());
  String pageBreakBefore=handle.getStringProperty(StyleHandle.PAGE_BREAK_BEFORE_PROP);
  String pageBreakAfter=handle.getStringProperty(StyleHandle.PAGE_BREAK_AFTER_PROP);
  String pageBreakInside=handle.getStringProperty(StyleHandle.PAGE_BREAK_INSIDE_PROP);
  group.setPageBreakBefore(pageBreakBefore);
  group.setPageBreakAfter(pageBreakAfter);
  group.setPageBreakInside(pageBreakInside);
  TOCHandle tocHandle=handle.getTOC();
  if (tocHandle != null) {
    String toc=tocHandle.getExpression();
    group.setTOC(createExpression(toc));
  }
  String bookmark=handle.getBookmark();
  group.setBookmark(bookmark);
  String scriptText=handle.getOnCreate();
  if (null != scriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(IGroupElementModel.ON_CREATE_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(scriptText,id);
    group.setOnCreate(scriptExpr);
  }
  scriptText=handle.getOnRender();
  if (null != scriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(IGroupElementModel.ON_RENDER_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(scriptText,id);
    group.setOnRender(scriptExpr);
  }
  scriptText=handle.getOnPageBreak();
  if (null != scriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(IGroupElementModel.ON_PAGE_BREAK_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(scriptText,id);
    group.setOnPageBreak(scriptExpr);
  }
  group.setHandle(handle);
  group.setJavaClass(handle.getEventHandlerClass());
}",0.8076109936575053
73169,"/** 
 * set input parameter bindings
 */
private void setInputParameterBinding() throws DataException {
  Iterator inputParamValueslist=getInputParamValues().iterator();
  while (inputParamValueslist.hasNext()) {
    ParameterBinding paramBind=(ParameterBinding)inputParamValueslist.next();
    if (isParameterPositionValid(paramBind.getPosition()))     odaStatement.setParameterValue(paramBind.getPosition(),paramBind.getValue());
 else     odaStatement.setParameterValue(paramBind.getName(),paramBind.getValue());
  }
}","/** 
 * set input parameter bindings
 */
private void setInputParameterBinding() throws DataException {
  Iterator inputParamValueslist=getInputParamValues().iterator();
  while (inputParamValueslist.hasNext()) {
    ParameterBinding paramBind=(ParameterBinding)inputParamValueslist.next();
    if (supportNamedParameter(paramBind.getName()))     odaStatement.setParameterValue(paramBind.getName(),paramBind.getValue());
 else     odaStatement.setParameterValue(paramBind.getPosition(),paramBind.getValue());
  }
}",0.8946859903381642
73170,"/** 
 * Adds input and output parameter hints to odaStatement
 */
private void addParameterDefns() throws DataException {
  if (this.parameterHints == null)   return;
  Iterator it=this.parameterHints.iterator();
  while (it.hasNext()) {
    ParameterHint parameterHint=(ParameterHint)it.next();
    odaStatement.addParameterHint(parameterHint);
    if (parameterHint.isInputMode()) {
      Class paramHintDataType=parameterHint.getDataType();
      if (paramHintDataType == Date.class)       paramHintDataType=parameterHint.getEffectiveDataType(dataSource.getDriverName(),queryType);
      Object inputValue=parameterHint.getDefaultInputValue();
      if (paramHintDataType != IBlob.class && paramHintDataType != IClob.class)       inputValue=convertToValue(parameterHint.getDefaultInputValue(),paramHintDataType);
      if (isParameterPositionValid(parameterHint.getPosition()))       this.setInputParamValue(parameterHint.getPosition(),inputValue);
 else       this.setInputParamValue(parameterHint.getName(),inputValue);
    }
  }
  this.setInputParameterBinding();
}","/** 
 * Adds input and output parameter hints to odaStatement
 */
private void addParameterDefns() throws DataException {
  if (this.parameterHints == null)   return;
  Iterator it=this.parameterHints.iterator();
  while (it.hasNext()) {
    ParameterHint parameterHint=(ParameterHint)it.next();
    odaStatement.addParameterHint(parameterHint);
    if (parameterHint.isInputMode()) {
      Class paramHintDataType=parameterHint.getDataType();
      if (paramHintDataType == Date.class)       paramHintDataType=parameterHint.getEffectiveDataType(dataSource.getDriverName(),queryType);
      Object inputValue=parameterHint.getDefaultInputValue();
      if (paramHintDataType != IBlob.class && paramHintDataType != IClob.class)       inputValue=convertToValue(parameterHint.getDefaultInputValue(),paramHintDataType);
      if (supportNamedParameter(parameterHint.getName()))       this.setInputParamValue(parameterHint.getName(),inputValue);
 else       this.setInputParamValue(parameterHint.getPosition(),inputValue);
    }
  }
  this.setInputParameterBinding();
}",0.8271662763466042
73171,"public void initialize(IEmitterServices services){
  this.services=services;
  this.out=EmitterUtil.getOuputStream(services,REPORT_FILE);
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=new HTMLWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    HashMap options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    htmlRtLFlag=htmlOption.getHtmlRtLFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=new MetadataEmitter(writer,htmlOption,idGenerator);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
    outputMasterPageMargins=htmlOption.getOutputMasterPageMargins();
  }
}","public void initialize(IEmitterServices services){
  this.services=services;
  this.out=EmitterUtil.getOuputStream(services,REPORT_FILE);
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=new HTMLWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    Map options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    htmlRtLFlag=htmlOption.getHtmlRtLFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=new MetadataEmitter(writer,htmlOption,idGenerator);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
    outputMasterPageMargins=htmlOption.getOutputMasterPageMargins();
  }
}",0.9989378651088688
73172,"private boolean translate3DEvent(Object obj,Matrix transMatrix,double xOffset,double yOffset){
  if (obj instanceof Polygon3DRenderEvent) {
    Polygon3DRenderEvent p3dre=(Polygon3DRenderEvent)obj;
    Object3D object3D=p3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    boolean behind=checkBehindFace(p3dre);
    p3dre.setBehind(behind);
    if (p3dre.isBehind()) {
      return false;
    }
    double cosValue=object3D.getNormal().cosineValue(LDR);
    if (p3dre.isDoubleSided()) {
      cosValue=-Math.abs(cosValue);
    }
    double brightnessRatio=(1 - cosValue) / 2d;
    p3dre.setBrightness(brightnessRatio);
    object3D.clip(this);
    if (object3D.getVectors().length < 3) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    p3dre.prepare2D(xOffset,yOffset);
    return true;
  }
 else   if (obj instanceof Line3DRenderEvent) {
    Line3DRenderEvent l3dre=(Line3DRenderEvent)obj;
    if (l3dre.getLineAttributes() == null || !l3dre.getLineAttributes().isSetVisible() || !l3dre.getLineAttributes().isVisible()) {
      return false;
    }
    Object3D object3D=l3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 2) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    l3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Text3DRenderEvent) {
    Text3DRenderEvent t3dre=(Text3DRenderEvent)obj;
    Object3D object3D=t3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    t3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Oval3DRenderEvent) {
    Oval3DRenderEvent o3dre=(Oval3DRenderEvent)obj;
    Object3D object3D=o3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 3) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    o3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Image3DRenderEvent) {
    Image3DRenderEvent i3dre=(Image3DRenderEvent)obj;
    Object3D object3D=i3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    i3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Arc3DRenderEvent) {
    Arc3DRenderEvent a3dre=(Arc3DRenderEvent)obj;
    Object3D object3D=a3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    a3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Area3DRenderEvent) {
    Area3DRenderEvent a3dre=(Area3DRenderEvent)obj;
    for (Iterator itr=a3dre.iterator(); itr.hasNext(); ) {
      PrimitiveRenderEvent pre=(PrimitiveRenderEvent)itr.next();
      if (pre instanceof I3DRenderEvent) {
        Object3D object3D=((I3DRenderEvent)pre).getObject3D();
        object3D.transform(transMatrix);
        object3D.transform(M2V_MATRIX);
        object3D.prepareZSort();
        object3D.clip(this);
        if (object3D.getVectors().length < 1) {
          itr.remove();
          continue;
        }
        object3D.perspective(PERSPECTIVE_VALUE);
        object3D.transform(V2C_MATRIX);
      }
    }
    a3dre.prepare2D(xOffset,yOffset);
  }
  return true;
}","private boolean translate3DEvent(Object obj,Matrix transMatrix,double xOffset,double yOffset){
  return translate3DEvent_clip_opt(obj,transMatrix,xOffset,yOffset,true);
}",0.0691896912003715
73173,"/** 
 * Renders the axis.
 * @throws ChartException
 */
public final void renderEachAxis() throws ChartException {
  final double dStaggeredLabelOffset=sc.computeStaggeredAxisLabelOffset(xs,la,iOrientation);
  if (!lia.isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  tre.setLabel(la);
  tre.setTextPosition(iLabelLocation);
  tre.setLocation(lo);
  lre.setLineAttributes(lia);
  lre.setStart(LocationImpl.create(0,0));
  lre.setEnd(LocationImpl.create(0,0));
  double dXStart=0;
  double dXEnd=0;
  double dZStart=0;
  double dZEnd=0;
  if (iDimension == IConstants.THREE_D) {
    AllAxes aax=pwa.getAxes();
    dXEnd=aax.getPrimaryBase().getScale().getEnd();
    dZEnd=aax.getAncillaryBase().getScale().getEnd();
    dXStart=aax.getPrimaryBase().getScale().getStart();
    dZStart=aax.getAncillaryBase().getScale().getStart();
    daEndPoints3D=sc.getEndPoints();
    da3D=sc.getTickCordinates();
    lo3d=Location3DImpl.create(0,0,0);
    t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
    t3dre.setLabel(la);
    t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
    t3dre.setTextPosition(iLabelLocation);
    t3dre.setLocation3D(lo3d);
    l3dre=(Line3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Line3DRenderEvent.class);
    l3dre.setLineAttributes(lia);
    l3dre.setStart3D(Location3DImpl.create(0,0,0));
    l3dre.setEnd3D(Location3DImpl.create(0,0,0));
  }
  if (iOrientation == IConstants.VERTICAL) {
    final ComputationContext context=new ComputationContext(true);
    context.y3d=0;
    context.dX=dLocation;
    double dZ=0;
    if (bRendering3D) {
      Location3D l3d=ax.getAxisCoordinate3D();
      context.dX=l3d.getX();
      dZ=l3d.getZ();
    }
    if (iv != null && iv.getType() == IntersectionValue.MAX && iDimension == IConstants.TWO_5_D) {
      trae.setTransform(TransformationEvent.TRANSLATE);
      trae.setTranslation(dSeriesThickness,-dSeriesThickness);
      ipr.applyTransformation(trae);
    }
    context.dTick1=((iMajorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? context.dX - pwa.getTickSize() : context.dX;
    context.dTick2=((iMajorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + pwa.getTickSize() : context.dX;
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS && lia.isVisible()) {
      if (bRenderOrthogonal3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(context.dX,dStart,dZ);
        l3dre.setEnd3D(context.dX,dEnd,dZ);
        dc.addLine(l3dre);
        l3dre.setStart3D(context.dX,dStart,dZEnd);
        l3dre.setEnd3D(context.dX,dEnd,dZEnd);
        dc.addLine(l3dre);
        l3dre.setStart3D(dXEnd,dStart,dZ);
        l3dre.setEnd3D(dXEnd,dEnd,dZ);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            ArrayList cachedTriggers=null;
            Location3D[] loaHotspot=new Location3D[4];
            Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot[0]=Location3DImpl.create(context.dX - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZ + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(context.dX + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZ - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(context.dX + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZ - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(context.dX - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZ + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              cachedTriggers=new ArrayList();
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                cachedTriggers.add(tg);
                iev.addTrigger(TriggerImpl.copyInstance(tg));
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
            pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dXStart - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(dXStart + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(dXStart + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(dXStart - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              if (cachedTriggers == null) {
                cachedTriggers=new ArrayList();
                for (int t=0; t < elTriggers.size(); t++) {
                  tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                  processTrigger(tg,StructureSource.createAxis(axModel));
                  cachedTriggers.add(tg);
                  iev.addTrigger(TriggerImpl.copyInstance(tg));
                }
              }
 else {
                for (int t=0; t < cachedTriggers.size(); t++) {
                  iev.addTrigger(TriggerImpl.copyInstance((Trigger)cachedTriggers.get(t)));
                }
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
            pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dXEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZStart + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(dXEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZStart - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(dXEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZStart - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(dXEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZStart + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              if (cachedTriggers == null) {
                for (int t=0; t < elTriggers.size(); t++) {
                  tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                  processTrigger(tg,StructureSource.createAxis(axModel));
                  iev.addTrigger(tg);
                }
              }
 else {
                for (int t=0; t < cachedTriggers.size(); t++) {
                  iev.addTrigger((Trigger)cachedTriggers.get(t));
                }
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else {
        double dStart=daEndPoints[0] + insCA.getBottom(), dEnd=daEndPoints[1] - insCA.getTop();
        if (sc.getDirection() == IConstants.FORWARD) {
          dStart=daEndPoints[1] + insCA.getBottom();
          dEnd=daEndPoints[0] - insCA.getTop();
        }
        if (iv != null && iv.getType() == IntersectionValue.VALUE && iDimension == IConstants.TWO_5_D) {
          final Location[] loa=new Location[4];
          loa[0]=LocationImpl.create(context.dX,dStart);
          loa[1]=LocationImpl.create(context.dX + dSeriesThickness,dStart - dSeriesThickness);
          loa[2]=LocationImpl.create(context.dX + dSeriesThickness,dEnd - dSeriesThickness);
          loa[3]=LocationImpl.create(context.dX,dEnd);
          final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
          pre.setPoints(loa);
          pre.setBackground(ColorDefinitionImpl.create(255,255,255,127));
          pre.setOutline(lia);
          ipr.fillPolygon(pre);
        }
        lre.setLineAttributes(lia);
        lre.getStart().set(context.dX,dStart);
        lre.getEnd().set(context.dX,dEnd);
        ipr.drawLine(lre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
            for (int t=0; t < elTriggers.size(); t++) {
              tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
              processTrigger(tg,StructureSource.createAxis(axModel));
              iev.addTrigger(tg);
            }
            Location[] loaHotspot=new Location[4];
            loaHotspot[0]=LocationImpl.create(context.dX - IConstants.LINE_EXPAND_SIZE,dStart);
            loaHotspot[1]=LocationImpl.create(context.dX + IConstants.LINE_EXPAND_SIZE,dStart);
            loaHotspot[2]=LocationImpl.create(context.dX + IConstants.LINE_EXPAND_SIZE,dEnd);
            loaHotspot[3]=LocationImpl.create(context.dX - IConstants.LINE_EXPAND_SIZE,dEnd);
            final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
            pre.setPoints(loaHotspot);
            iev.setHotSpot(pre);
            ipr.enableInteraction(iev);
          }
        }
      }
    }
    renderVerticalAxisByType(context,dXEnd,dZEnd,dZ,dStaggeredLabelOffset);
    la=LabelImpl.copyInstance(ax.getTitle());
    if (la.isVisible() && bRenderAxisTitle) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_TITLE,la);
      final String sRestoreValue=la.getCaption().getValue();
      la.getCaption().setValue(getRunTimeContext().externalizedMessage(sRestoreValue));
      BoundingBox bb=null;
      boolean bWithinAxis=false;
      final boolean bTitleHorizontal=Math.abs(la.getCaption().getFont().getRotation()) <= 30;
      final double dYAxisHeightPC=ChartUtil.computeHeightOfOrthogonalAxisTitle((ChartWithAxes)this.renderer.cm,xs);
      try {
        if (bTitleHorizontal) {
          bWithinAxis=true;
        }
 else {
          final BoundingBox bbWoWrap=Methods.computeBox(xs,iLabelLocation,la,0,0,dYAxisHeightPC);
          bWithinAxis=bbWoWrap.getHeight() < daEndPoints[0] - daEndPoints[1];
        }
        bb=Methods.computeBox(xs,ax.getTitlePosition(),la,0,0,bWithinAxis && !bTitleHorizontal ? daEndPoints[0] - daEndPoints[1] : dYAxisHeightPC);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      if (ax.getTitle().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          double yCenter=daEndPoints3D[0] + ((daEndPoints3D[1] - daEndPoints3D[0]) / 2);
          final double x=(iLabelLocation == IConstants.LEFT) ? context.dTick1 - 1 : context.dTick2 + 1;
          double sx=x;
          double sx2=dXEnd;
          if (bAxisLabelStaggered) {
            if (iLabelLocation == IConstants.LEFT) {
              sx-=dStaggeredLabelOffset;
              sx2+=dStaggeredLabelOffset;
            }
 else {
              sx+=dStaggeredLabelOffset;
              sx2-=dStaggeredLabelOffset;
            }
          }
          Angle3D a3D=(Angle3D)((ChartWithAxes)renderer.cm).getRotation().getAngles().get(0);
          double offset=2;
          t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
          sx=sx - pwa.getHorizontalSpacingInPixels() - bb.getWidth()- bb.getHeight();
          t3dre.setLocation3D(Location3DImpl.create(sx - offset,yCenter,dZEnd + offset + pwa.getHorizontalSpacingInPixels()+ (bb.getWidth() + bb.getHeight()) * Math.sin(a3D.getYAngle() * Math.PI / 180)));
          t3dre.setLabel(la);
          t3dre.setTextPosition(Text3DRenderEvent.LEFT);
          t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
          t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
          sx2=sx2 + pwa.getHorizontalSpacingInPixels() + 100;
          t3dre.setLocation3D(Location3DImpl.create(sx2,yCenter,dZ - pwa.getHorizontalSpacingInPixels() - 100 * Math.sin(a3D.getYAngle() * Math.PI / 180)));
          t3dre.setLabel(la);
          t3dre.setTextPosition(Text3DRenderEvent.RIGHT);
          t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
        }
 else {
          double dTop=computeTopOfOrthogonalAxisTitle();
          final Bounds bo=BoundsImpl.create(ax.getTitleCoordinate(),bWithinAxis ? daEndPoints[1] : dTop,bb.getWidth(),bWithinAxis ? daEndPoints[0] - daEndPoints[1] : dYAxisHeightPC);
          tre.setBlockBounds(bo);
          tre.setLabel(la);
          if (ax.getModelAxis().getAssociatedAxes().size() != 0) {
            tre.setBlockAlignment(ChartUtil.transposeAlignment(la.getCaption().getFont().getAlignment()));
          }
 else {
            tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          }
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          if (ax.getTitle().isVisible()) {
            ipr.drawText(tre);
          }
        }
      }
      la.getCaption().setValue(sRestoreValue);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_TITLE,la);
    }
    la=LabelImpl.copyInstance(ax.getLabel());
    if (iv != null && iv.getType() == IntersectionValue.MAX && iDimension == IConstants.TWO_5_D) {
      trae.setTranslation(-dSeriesThickness,dSeriesThickness);
      ipr.applyTransformation(trae);
    }
  }
 else   if (iOrientation == IConstants.HORIZONTAL) {
    final ComputationContext context=new ComputationContext(false);
    context.x3d=0;
    context.z3d=0;
    context.dY=dLocation;
    double dX=0;
    double dZ=0;
    if (bRendering3D) {
      Location3D l3d=ax.getAxisCoordinate3D();
      dX=l3d.getX();
      context.dY=l3d.getY();
      dZ=l3d.getZ();
    }
    context.dTick1=((iMajorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + pwa.getTickSize() : context.dY - pwa.getTickSize()) : context.dY;
    context.dTick2=((iMajorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - pwa.getTickSize() : context.dY + pwa.getTickSize()) : context.dY;
    if (iv != null && iDimension == IConstants.TWO_5_D && ((bTransposed && renderer.isRightToLeft() && iv.getType() == IntersectionValue.MIN) || (!renderer.isRightToLeft() && iv.getType() == IntersectionValue.MAX))) {
      trae.setTransform(TransformationEvent.TRANSLATE);
      trae.setTranslation(dSeriesThickness,-dSeriesThickness);
      ipr.applyTransformation(trae);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS && lia.isVisible()) {
      if (bRenderBase3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(dStart,context.dY,dZ);
        l3dre.setEnd3D(dEnd,context.dY,dZ);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            Location3D[] loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dStart,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[1]=Location3DImpl.create(dStart,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[2]=Location3DImpl.create(dEnd,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[3]=Location3DImpl.create(dEnd,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                iev.addTrigger(tg);
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else       if (bRenderAncillary3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(dX,context.dY,dStart);
        l3dre.setEnd3D(dX,context.dY,dEnd);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            Location3D[] loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dX,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart);
            loaHotspot[1]=Location3DImpl.create(dX,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart);
            loaHotspot[2]=Location3DImpl.create(dX,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd);
            loaHotspot[3]=Location3DImpl.create(dX,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                iev.addTrigger(tg);
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else {
        double dStart=daEndPoints[0] - insCA.getLeft(), dEnd=daEndPoints[1] + insCA.getRight();
        if (sc.getDirection() == IConstants.BACKWARD) {
          dStart=daEndPoints[1] - insCA.getLeft();
          dEnd=daEndPoints[0] + insCA.getRight();
        }
        if (iv != null && iv.getType() == IntersectionValue.VALUE && iDimension == IConstants.TWO_5_D) {
          final Location[] loa=new Location[4];
          loa[0]=LocationImpl.create(dStart,context.dY);
          loa[1]=LocationImpl.create(dStart + dSeriesThickness,context.dY - dSeriesThickness);
          loa[2]=LocationImpl.create(dEnd + dSeriesThickness,context.dY - dSeriesThickness);
          loa[3]=LocationImpl.create(dEnd,context.dY);
          final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
          pre.setPoints(loa);
          pre.setBackground(ColorDefinitionImpl.create(255,255,255,127));
          pre.setOutline(lia);
          ipr.fillPolygon(pre);
        }
        lre.setLineAttributes(lia);
        lre.getStart().set(dStart,context.dY);
        lre.getEnd().set(dEnd,context.dY);
        ipr.drawLine(lre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
            for (int t=0; t < elTriggers.size(); t++) {
              tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
              processTrigger(tg,StructureSource.createAxis(axModel));
              iev.addTrigger(tg);
            }
            Location[] loaHotspot=new Location[4];
            loaHotspot[0]=LocationImpl.create(dStart,context.dY - IConstants.LINE_EXPAND_SIZE);
            loaHotspot[1]=LocationImpl.create(dEnd,context.dY - IConstants.LINE_EXPAND_SIZE);
            loaHotspot[2]=LocationImpl.create(dEnd,context.dY + IConstants.LINE_EXPAND_SIZE);
            loaHotspot[3]=LocationImpl.create(dStart,context.dY + IConstants.LINE_EXPAND_SIZE);
            final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
            pre.setPoints(loaHotspot);
            iev.setHotSpot(pre);
            ipr.enableInteraction(iev);
          }
        }
      }
    }
    renderHorizontalAxisByType(context,dXEnd,dZEnd,dZ,dStaggeredLabelOffset);
    la=LabelImpl.copyInstance(ax.getTitle());
    if (la.isVisible() && bRenderAxisTitle) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_TITLE,la);
      final String sRestoreValue=la.getCaption().getValue();
      la.getCaption().setValue(getRunTimeContext().externalizedMessage(sRestoreValue));
      la.getCaption().getFont().setAlignment(renderer.switchTextAlignment(la.getCaption().getFont().getAlignment()));
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,ax.getTitlePosition(),la,0,0,Math.abs(daEndPoints[1] - daEndPoints[0]));
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      if (ax.getTitle().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          Angle3D a3D=(Angle3D)((ChartWithAxes)renderer.cm).getRotation().getAngles().get(0);
          if (axisType == IConstants.BASE_AXIS) {
            t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
            IAxisTypeComputation computation=createAxisTypeComputation(context);
            computation.initialize();
            final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
            int xStart=(int)da3D.getCoordinate(0);
            int xEnd=(int)da3D.getCoordinate(length - 1);
            int x=xStart + (xEnd - xStart) / 2;
            Location3D location=Location3DImpl.create(x,context.dY - bb.getHeight() * 3,dZEnd + pwa.getVerticalSpacingInPixels());
            t3dre.setLocation3D(location);
            t3dre.setLabel(la);
            double angle=(a3D.getZAngle() + a3D.getXAngle()) % 360;
            if (angle > 0 && angle <= 180) {
              t3dre.setTextPosition(Text3DRenderEvent.RIGHT);
            }
 else {
              t3dre.setTextPosition(Text3DRenderEvent.LEFT);
            }
            t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
            dc.addLabel(t3dre);
          }
 else {
            Location3D location=Location3DImpl.create(dXEnd,context.dY - bb.getHeight(),dZ + (dZEnd - dZ) / 2);
            t3dre.setLocation3D(location);
            t3dre.setLabel(la);
            double angle=a3D.getZAngle() % 360;
            if (angle >= 0 && angle < 180) {
              t3dre.setTextPosition(Text3DRenderEvent.RIGHT);
            }
 else {
              t3dre.setTextPosition(Text3DRenderEvent.LEFT);
            }
            t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
            dc.addLabel(t3dre);
          }
        }
 else {
          final Bounds bo=BoundsImpl.create(daEndPoints[0],ax.getTitleCoordinate(),daEndPoints[1] - daEndPoints[0],bb.getHeight());
          tre.setBlockBounds(bo);
          tre.setLabel(la);
          if (ax.getModelAxis().getAssociatedAxes().size() != 0) {
            tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          }
 else {
            tre.setBlockAlignment(ChartUtil.transposeAlignment(la.getCaption().getFont().getAlignment()));
          }
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_TITLE,la);
    }
    la=LabelImpl.copyInstance(ax.getLabel());
    if (iv != null && iDimension == IConstants.TWO_5_D && ((bTransposed && renderer.isRightToLeft() && iv.getType() == IntersectionValue.MIN) || (!renderer.isRightToLeft() && iv.getType() == IntersectionValue.MAX))) {
      trae.setTranslation(-dSeriesThickness,dSeriesThickness);
      ipr.applyTransformation(trae);
    }
  }
}","/** 
 * Renders the axis.
 * @throws ChartException
 */
public final void renderEachAxis() throws ChartException {
  final double dStaggeredLabelOffset=sc.computeStaggeredAxisLabelOffset(xs,la,iOrientation);
  if (!lia.isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  tre.setLabel(la);
  tre.setTextPosition(iLabelLocation);
  tre.setLocation(lo);
  lre.setLineAttributes(lia);
  lre.setStart(LocationImpl.create(0,0));
  lre.setEnd(LocationImpl.create(0,0));
  double dXStart=0;
  double dXEnd=0;
  double dZStart=0;
  double dZEnd=0;
  if (iDimension == IConstants.THREE_D) {
    AllAxes aax=pwa.getAxes();
    dXEnd=aax.getPrimaryBase().getScale().getEnd();
    dZEnd=aax.getAncillaryBase().getScale().getEnd();
    dXStart=aax.getPrimaryBase().getScale().getStart();
    dZStart=aax.getAncillaryBase().getScale().getStart();
    daEndPoints3D=sc.getEndPoints();
    da3D=sc.getTickCordinates();
    lo3d=Location3DImpl.create(0,0,0);
    t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
    t3dre.setLabel(la);
    t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
    t3dre.setTextPosition(iLabelLocation);
    t3dre.setLocation3D(lo3d);
    l3dre=(Line3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Line3DRenderEvent.class);
    l3dre.setLineAttributes(lia);
    l3dre.setStart3D(Location3DImpl.create(0,0,0));
    l3dre.setEnd3D(Location3DImpl.create(0,0,0));
  }
  if (iOrientation == IConstants.VERTICAL) {
    final ComputationContext context=new ComputationContext(true);
    context.y3d=0;
    context.dX=dLocation;
    double dZ=0;
    if (bRendering3D) {
      Location3D l3d=ax.getAxisCoordinate3D();
      context.dX=l3d.getX();
      dZ=l3d.getZ();
    }
    if (iv != null && iv.getType() == IntersectionValue.MAX && iDimension == IConstants.TWO_5_D) {
      trae.setTransform(TransformationEvent.TRANSLATE);
      trae.setTranslation(dSeriesThickness,-dSeriesThickness);
      ipr.applyTransformation(trae);
    }
    context.dTick1=((iMajorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? context.dX - pwa.getTickSize() : context.dX;
    context.dTick2=((iMajorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + pwa.getTickSize() : context.dX;
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS && lia.isVisible()) {
      if (bRenderOrthogonal3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(context.dX,dStart,dZ);
        l3dre.setEnd3D(context.dX,dEnd,dZ);
        dc.addLine(l3dre);
        l3dre.setStart3D(context.dX,dStart,dZEnd);
        l3dre.setEnd3D(context.dX,dEnd,dZEnd);
        dc.addLine(l3dre);
        l3dre.setStart3D(dXEnd,dStart,dZ);
        l3dre.setEnd3D(dXEnd,dEnd,dZ);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            ArrayList cachedTriggers=null;
            Location3D[] loaHotspot=new Location3D[4];
            Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot[0]=Location3DImpl.create(context.dX - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZ + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(context.dX + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZ - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(context.dX + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZ - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(context.dX - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZ + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              cachedTriggers=new ArrayList();
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                cachedTriggers.add(tg);
                iev.addTrigger(TriggerImpl.copyInstance(tg));
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
            pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dXStart - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(dXStart + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(dXStart + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(dXStart - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              if (cachedTriggers == null) {
                cachedTriggers=new ArrayList();
                for (int t=0; t < elTriggers.size(); t++) {
                  tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                  processTrigger(tg,StructureSource.createAxis(axModel));
                  cachedTriggers.add(tg);
                  iev.addTrigger(TriggerImpl.copyInstance(tg));
                }
              }
 else {
                for (int t=0; t < cachedTriggers.size(); t++) {
                  iev.addTrigger(TriggerImpl.copyInstance((Trigger)cachedTriggers.get(t)));
                }
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
            pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dXEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZStart + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(dXEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZStart - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(dXEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZStart - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(dXEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZStart + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              if (cachedTriggers == null) {
                for (int t=0; t < elTriggers.size(); t++) {
                  tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                  processTrigger(tg,StructureSource.createAxis(axModel));
                  iev.addTrigger(tg);
                }
              }
 else {
                for (int t=0; t < cachedTriggers.size(); t++) {
                  iev.addTrigger((Trigger)cachedTriggers.get(t));
                }
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else {
        double dStart=daEndPoints[0] + insCA.getBottom(), dEnd=daEndPoints[1] - insCA.getTop();
        if (sc.getDirection() == IConstants.FORWARD) {
          dStart=daEndPoints[1] + insCA.getBottom();
          dEnd=daEndPoints[0] - insCA.getTop();
        }
        if (iv != null && iv.getType() == IntersectionValue.VALUE && iDimension == IConstants.TWO_5_D) {
          final Location[] loa=new Location[4];
          loa[0]=LocationImpl.create(context.dX,dStart);
          loa[1]=LocationImpl.create(context.dX + dSeriesThickness,dStart - dSeriesThickness);
          loa[2]=LocationImpl.create(context.dX + dSeriesThickness,dEnd - dSeriesThickness);
          loa[3]=LocationImpl.create(context.dX,dEnd);
          final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
          pre.setPoints(loa);
          pre.setBackground(ColorDefinitionImpl.create(255,255,255,127));
          pre.setOutline(lia);
          ipr.fillPolygon(pre);
        }
        lre.setLineAttributes(lia);
        lre.getStart().set(context.dX,dStart);
        lre.getEnd().set(context.dX,dEnd);
        ipr.drawLine(lre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
            for (int t=0; t < elTriggers.size(); t++) {
              tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
              processTrigger(tg,StructureSource.createAxis(axModel));
              iev.addTrigger(tg);
            }
            Location[] loaHotspot=new Location[4];
            loaHotspot[0]=LocationImpl.create(context.dX - IConstants.LINE_EXPAND_SIZE,dStart);
            loaHotspot[1]=LocationImpl.create(context.dX + IConstants.LINE_EXPAND_SIZE,dStart);
            loaHotspot[2]=LocationImpl.create(context.dX + IConstants.LINE_EXPAND_SIZE,dEnd);
            loaHotspot[3]=LocationImpl.create(context.dX - IConstants.LINE_EXPAND_SIZE,dEnd);
            final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
            pre.setPoints(loaHotspot);
            iev.setHotSpot(pre);
            ipr.enableInteraction(iev);
          }
        }
      }
    }
    renderVerticalAxisByType(context,dXEnd,dZEnd,dZ,dStaggeredLabelOffset);
    la=LabelImpl.copyInstance(ax.getTitle());
    if (la.isVisible() && bRenderAxisTitle) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_TITLE,la);
      final String sRestoreValue=la.getCaption().getValue();
      la.getCaption().setValue(getRunTimeContext().externalizedMessage(sRestoreValue));
      BoundingBox bb=null;
      boolean bWithinAxis=false;
      final boolean bTitleHorizontal=Math.abs(la.getCaption().getFont().getRotation()) <= 30;
      final double dYAxisHeightPC=ChartUtil.computeHeightOfOrthogonalAxisTitle((ChartWithAxes)this.renderer.cm,xs);
      try {
        if (bTitleHorizontal) {
          bWithinAxis=true;
        }
 else {
          final BoundingBox bbWoWrap=Methods.computeBox(xs,iLabelLocation,la,0,0,dYAxisHeightPC);
          bWithinAxis=bbWoWrap.getHeight() < daEndPoints[0] - daEndPoints[1];
        }
        bb=Methods.computeBox(xs,ax.getTitlePosition(),la,0,0,bWithinAxis && !bTitleHorizontal ? daEndPoints[0] - daEndPoints[1] : dYAxisHeightPC);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      if (ax.getTitle().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          double yCenter=daEndPoints3D[0] + ((daEndPoints3D[1] - daEndPoints3D[0]) / 2);
          final double x=(iLabelLocation == IConstants.LEFT) ? context.dTick1 - 1 : context.dTick2 + 1;
          double sx=x;
          double sx2=dXEnd;
          if (bAxisLabelStaggered) {
            if (iLabelLocation == IConstants.LEFT) {
              sx-=dStaggeredLabelOffset;
              sx2+=dStaggeredLabelOffset;
            }
 else {
              sx+=dStaggeredLabelOffset;
              sx2-=dStaggeredLabelOffset;
            }
          }
          Angle3D a3D=(Angle3D)((ChartWithAxes)renderer.cm).getRotation().getAngles().get(0);
          double offset=2;
          t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
          sx=sx - pwa.getHorizontalSpacingInPixels() - bb.getWidth()- bb.getHeight();
          t3dre.setLocation3D(Location3DImpl.create(sx - offset,yCenter,dZEnd + offset + pwa.getHorizontalSpacingInPixels()+ (bb.getWidth() + bb.getHeight()) * Math.sin(a3D.getYAngle() * Math.PI / 180)));
          t3dre.setLabel(la);
          t3dre.setTextPosition(Text3DRenderEvent.LEFT);
          t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
          renderAxisTitleWith3DTextevent(bb);
          t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
          sx2=sx2 + pwa.getHorizontalSpacingInPixels() + 100;
          t3dre.setLocation3D(Location3DImpl.create(sx2,yCenter,dZ - pwa.getHorizontalSpacingInPixels() - 100 * Math.sin(a3D.getYAngle() * Math.PI / 180)));
          t3dre.setLabel(la);
          t3dre.setTextPosition(Text3DRenderEvent.RIGHT);
          t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
          renderAxisTitleWith3DTextevent(bb);
        }
 else {
          double dTop=computeTopOfOrthogonalAxisTitle();
          final Bounds bo=BoundsImpl.create(ax.getTitleCoordinate(),bWithinAxis ? daEndPoints[1] : dTop,bb.getWidth(),bWithinAxis ? daEndPoints[0] - daEndPoints[1] : dYAxisHeightPC);
          tre.setBlockBounds(bo);
          tre.setLabel(la);
          if (ax.getModelAxis().getAssociatedAxes().size() != 0) {
            tre.setBlockAlignment(ChartUtil.transposeAlignment(la.getCaption().getFont().getAlignment()));
          }
 else {
            tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          }
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          if (ax.getTitle().isVisible()) {
            ipr.drawText(tre);
          }
        }
      }
      la.getCaption().setValue(sRestoreValue);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_TITLE,la);
    }
    la=LabelImpl.copyInstance(ax.getLabel());
    if (iv != null && iv.getType() == IntersectionValue.MAX && iDimension == IConstants.TWO_5_D) {
      trae.setTranslation(-dSeriesThickness,dSeriesThickness);
      ipr.applyTransformation(trae);
    }
  }
 else   if (iOrientation == IConstants.HORIZONTAL) {
    final ComputationContext context=new ComputationContext(false);
    context.x3d=0;
    context.z3d=0;
    context.dY=dLocation;
    double dX=0;
    double dZ=0;
    if (bRendering3D) {
      Location3D l3d=ax.getAxisCoordinate3D();
      dX=l3d.getX();
      context.dY=l3d.getY();
      dZ=l3d.getZ();
    }
    context.dTick1=((iMajorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + pwa.getTickSize() : context.dY - pwa.getTickSize()) : context.dY;
    context.dTick2=((iMajorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - pwa.getTickSize() : context.dY + pwa.getTickSize()) : context.dY;
    if (iv != null && iDimension == IConstants.TWO_5_D && ((bTransposed && renderer.isRightToLeft() && iv.getType() == IntersectionValue.MIN) || (!renderer.isRightToLeft() && iv.getType() == IntersectionValue.MAX))) {
      trae.setTransform(TransformationEvent.TRANSLATE);
      trae.setTranslation(dSeriesThickness,-dSeriesThickness);
      ipr.applyTransformation(trae);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS && lia.isVisible()) {
      if (bRenderBase3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(dStart,context.dY,dZ);
        l3dre.setEnd3D(dEnd,context.dY,dZ);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            Location3D[] loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dStart,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[1]=Location3DImpl.create(dStart,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[2]=Location3DImpl.create(dEnd,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[3]=Location3DImpl.create(dEnd,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                iev.addTrigger(tg);
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else       if (bRenderAncillary3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(dX,context.dY,dStart);
        l3dre.setEnd3D(dX,context.dY,dEnd);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            Location3D[] loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dX,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart);
            loaHotspot[1]=Location3DImpl.create(dX,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart);
            loaHotspot[2]=Location3DImpl.create(dX,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd);
            loaHotspot[3]=Location3DImpl.create(dX,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                iev.addTrigger(tg);
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else {
        double dStart=daEndPoints[0] - insCA.getLeft(), dEnd=daEndPoints[1] + insCA.getRight();
        if (sc.getDirection() == IConstants.BACKWARD) {
          dStart=daEndPoints[1] - insCA.getLeft();
          dEnd=daEndPoints[0] + insCA.getRight();
        }
        if (iv != null && iv.getType() == IntersectionValue.VALUE && iDimension == IConstants.TWO_5_D) {
          final Location[] loa=new Location[4];
          loa[0]=LocationImpl.create(dStart,context.dY);
          loa[1]=LocationImpl.create(dStart + dSeriesThickness,context.dY - dSeriesThickness);
          loa[2]=LocationImpl.create(dEnd + dSeriesThickness,context.dY - dSeriesThickness);
          loa[3]=LocationImpl.create(dEnd,context.dY);
          final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
          pre.setPoints(loa);
          pre.setBackground(ColorDefinitionImpl.create(255,255,255,127));
          pre.setOutline(lia);
          ipr.fillPolygon(pre);
        }
        lre.setLineAttributes(lia);
        lre.getStart().set(dStart,context.dY);
        lre.getEnd().set(dEnd,context.dY);
        ipr.drawLine(lre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
            for (int t=0; t < elTriggers.size(); t++) {
              tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
              processTrigger(tg,StructureSource.createAxis(axModel));
              iev.addTrigger(tg);
            }
            Location[] loaHotspot=new Location[4];
            loaHotspot[0]=LocationImpl.create(dStart,context.dY - IConstants.LINE_EXPAND_SIZE);
            loaHotspot[1]=LocationImpl.create(dEnd,context.dY - IConstants.LINE_EXPAND_SIZE);
            loaHotspot[2]=LocationImpl.create(dEnd,context.dY + IConstants.LINE_EXPAND_SIZE);
            loaHotspot[3]=LocationImpl.create(dStart,context.dY + IConstants.LINE_EXPAND_SIZE);
            final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
            pre.setPoints(loaHotspot);
            iev.setHotSpot(pre);
            ipr.enableInteraction(iev);
          }
        }
      }
    }
    renderHorizontalAxisByType(context,dXEnd,dZEnd,dZ,dStaggeredLabelOffset);
    la=LabelImpl.copyInstance(ax.getTitle());
    if (la.isVisible() && bRenderAxisTitle) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_TITLE,la);
      final String sRestoreValue=la.getCaption().getValue();
      la.getCaption().setValue(getRunTimeContext().externalizedMessage(sRestoreValue));
      la.getCaption().getFont().setAlignment(renderer.switchTextAlignment(la.getCaption().getFont().getAlignment()));
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,ax.getTitlePosition(),la,0,0,Math.abs(daEndPoints[1] - daEndPoints[0]));
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      if (ax.getTitle().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          Angle3D a3D=(Angle3D)((ChartWithAxes)renderer.cm).getRotation().getAngles().get(0);
          if (axisType == IConstants.BASE_AXIS) {
            t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
            IAxisTypeComputation computation=createAxisTypeComputation(context);
            computation.initialize();
            final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
            int xStart=(int)da3D.getCoordinate(0);
            int xEnd=(int)da3D.getCoordinate(length - 1);
            int x=xStart + (xEnd - xStart) / 2;
            Location3D location=Location3DImpl.create(x,context.dY - bb.getHeight() * 3,dZEnd + pwa.getVerticalSpacingInPixels());
            t3dre.setLocation3D(location);
            t3dre.setLabel(la);
            double angle=(a3D.getZAngle() + a3D.getXAngle()) % 360;
            if (angle > 0 && angle <= 180) {
              t3dre.setTextPosition(Text3DRenderEvent.RIGHT);
            }
 else {
              t3dre.setTextPosition(Text3DRenderEvent.LEFT);
            }
            t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
          }
 else {
            Location3D location=Location3DImpl.create(dXEnd,context.dY - bb.getHeight(),dZ + (dZEnd - dZ) / 2);
            t3dre.setLocation3D(location);
            t3dre.setLabel(la);
            double angle=a3D.getZAngle() % 360;
            if (angle >= 0 && angle < 180) {
              t3dre.setTextPosition(Text3DRenderEvent.RIGHT);
            }
 else {
              t3dre.setTextPosition(Text3DRenderEvent.LEFT);
            }
            t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
          }
          renderAxisTitleWith3DTextevent(bb);
        }
 else {
          final Bounds bo=BoundsImpl.create(daEndPoints[0],ax.getTitleCoordinate(),daEndPoints[1] - daEndPoints[0],bb.getHeight());
          tre.setBlockBounds(bo);
          tre.setLabel(la);
          if (ax.getModelAxis().getAssociatedAxes().size() != 0) {
            tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          }
 else {
            tre.setBlockAlignment(ChartUtil.transposeAlignment(la.getCaption().getFont().getAlignment()));
          }
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_TITLE,la);
    }
    la=LabelImpl.copyInstance(ax.getLabel());
    if (iv != null && iDimension == IConstants.TWO_5_D && ((bTransposed && renderer.isRightToLeft() && iv.getType() == IntersectionValue.MIN) || (!renderer.isRightToLeft() && iv.getType() == IntersectionValue.MAX))) {
      trae.setTranslation(-dSeriesThickness,dSeriesThickness);
      ipr.applyTransformation(trae);
    }
  }
}",0.9961915326308004
73174,"/** 
 * Returns appcontext
 * @param request
 * @return
 */
public static Map getAppContext(HttpServletRequest request){
  HashMap context=new HashMap();
  Boolean isDesigner=Boolean.valueOf(ParameterAccessor.isDesigner(request));
  context.put(""String_Node_Str"",isDesigner);
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  int maxCubeRowLevels=ParameterAccessor.getMaxCubeRowLevels(request);
  if (maxCubeRowLevels >= 0)   context.put(DataEngine.CUBECUSROR_FETCH_LIMIT_ON_ROW_EDGE,new Integer(maxCubeRowLevels));
  int maxCubeColumnLevels=ParameterAccessor.getMaxCubeColumnLevels(request);
  if (maxCubeColumnLevels >= 0)   context.put(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_COLUMN_EDGE,new Integer(maxCubeColumnLevels));
  int cubeMemorySize=ParameterAccessor.getCubeMemorySize(request);
  if (cubeMemorySize >= 0)   context.put(DataEngine.IN_MEMORY_CUBE_SIZE,new Integer(cubeMemorySize));
  context.put(IBirtConstants.APPCONTEXT_BIRT_RESOURCE_PATH,ParameterAccessor.getResourceFolder(request));
  ParameterAccessor.pushAppContext(context,request);
  if (isDesigner) {
    String appContextName=ParameterAccessor.getAppContextName(request);
    getAppContextFromExtension(appContextName,context);
  }
  return context;
}","/** 
 * Returns appcontext
 * @param request
 * @return
 */
public static Map getAppContext(HttpServletRequest request){
  HashMap context=new HashMap();
  Boolean isDesigner=Boolean.valueOf(ParameterAccessor.isDesigner(request));
  context.put(""String_Node_Str"",isDesigner);
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  int maxCubeRowLevels=ParameterAccessor.getMaxCubeRowLevels(request);
  if (maxCubeRowLevels >= 0)   context.put(DataEngine.CUBECUSROR_FETCH_LIMIT_ON_ROW_EDGE,new Integer(maxCubeRowLevels));
  int maxCubeColumnLevels=ParameterAccessor.getMaxCubeColumnLevels(request);
  if (maxCubeColumnLevels >= 0)   context.put(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_COLUMN_EDGE,new Integer(maxCubeColumnLevels));
  int cubeMemorySize=ParameterAccessor.getCubeMemorySize(request);
  if (cubeMemorySize >= 0)   context.put(DataEngine.IN_MEMORY_CUBE_SIZE,new Integer(cubeMemorySize));
  context.put(IBirtConstants.APPCONTEXT_BIRT_RESOURCE_PATH,ParameterAccessor.getResourceFolder(request));
  ParameterAccessor.pushAppContext(context,request);
  if (isDesigner.booleanValue()) {
    String appContextName=ParameterAccessor.getAppContextName(request);
    getAppContextFromExtension(appContextName,context);
  }
  return context;
}",0.994475138121547
73175,"private void handleChartInXTab(final DesignElementHandle handle){
  if (ChartXTabUtil.isPlotChart(handle)) {
    HostChartsManager.addPlotChart(handle);
  }
 else   if (ChartXTabUtil.isAxisChart(handle)) {
    final DesignElementHandle plotChartHandle=HostChartsManager.findUnhostChart();
    if (plotChartHandle != null) {
      HostChartsManager.hostChart(plotChartHandle,handle);
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          try {
            handle.setProperty(ChartReportItemConstants.PROPERTY_HOST_CHART,plotChartHandle);
          }
 catch (          SemanticException e) {
            logger.log(e);
          }
        }
      }
);
    }
  }
}","private void handleChartInXTab(final DesignElementHandle handle){
  if (ChartXTabUtil.isPlotChart(handle)) {
    HostChartManager.addPlotChart(handle);
  }
 else   if (ChartXTabUtil.isAxisChart(handle)) {
    final DesignElementHandle plotChartHandle=HostChartManager.findUnhostChart();
    if (plotChartHandle != null) {
      HostChartManager.hostChart(plotChartHandle,handle);
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          try {
            handle.setProperty(ChartReportItemConstants.PROPERTY_HOST_CHART,plotChartHandle);
          }
 catch (          SemanticException e) {
            logger.log(e);
          }
        }
      }
);
    }
  }
}",0.99784327821711
73176,"public final void disposeFigure(ExtendedItemHandle eih,IFigure ifg){
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  ((DesignerRepresentation)ifg).dispose();
  HostChartsManager.dispose(eih);
}","public final void disposeFigure(ExtendedItemHandle eih,IFigure ifg){
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  ((DesignerRepresentation)ifg).dispose();
  HostChartManager.dispose(eih);
}",0.9977220956719818
73177,"private void initHostChart(){
  if (ChartXTabUtil.isAxisChart(handle)) {
    hostChartHandle=(ExtendedItemHandle)handle.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    HostChartsManager.hostChart(hostChartHandle,handle);
    cm=ChartReportItemUtil.getChartFromHandle(hostChartHandle);
    if (cm instanceof ChartWithAxes) {
      int axisType=((ChartWithAxes)cm).isTransposed() ? ICrosstabConstants.ROW_AXIS_TYPE : ICrosstabConstants.COLUMN_AXIS_TYPE;
      hostChartHandle.addListener(ChartXTabUtil.createSyncChartListener(hostChartHandle,(ExtendedItemHandle)handle,axisType));
      handle.addListener(ChartXTabUtil.createSyncChartListener((ExtendedItemHandle)handle,hostChartHandle,axisType));
      hostChartHandle.getContainer().addListener(ChartXTabUtil.createDeleteChartListener(hostChartHandle,handle));
      handle.getContainer().addListener(ChartXTabUtil.createDeleteChartListener(handle,hostChartHandle));
    }
  }
}","private void initHostChart(){
  if (ChartXTabUtil.isAxisChart(handle)) {
    hostChartHandle=(ExtendedItemHandle)handle.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    cm=ChartReportItemUtil.getChartFromHandle(hostChartHandle);
    if (cm instanceof ChartWithAxes) {
      int axisType=((ChartWithAxes)cm).isTransposed() ? ICrosstabConstants.ROW_AXIS_TYPE : ICrosstabConstants.COLUMN_AXIS_TYPE;
      hostChartHandle.addListener(ChartXTabUtil.createSyncChartListener(hostChartHandle,(ExtendedItemHandle)handle,axisType));
      handle.addListener(ChartXTabUtil.createSyncChartListener((ExtendedItemHandle)handle,hostChartHandle,axisType));
      hostChartHandle.getContainer().addListener(ChartXTabUtil.createDeleteChartListener(hostChartHandle,handle));
      handle.getContainer().addListener(ChartXTabUtil.createDeleteChartListener(handle,hostChartHandle));
    }
  }
}",0.9689373297002724
73178,"/** 
 * Copy new handle
 * @param element The elemnent to copy
 * @param currentDesignHandle Current design handle
 * @return The copied handle
 * @throws CloneNotSupportedException
 */
private IDesignElement copyNewHandle(IDesignElement element) throws CloneNotSupportedException {
  IDesignElement newElement=isCloned ? element : (IDesignElement)element.clone();
  return newElement;
}","/** 
 * Copy new handle
 * @param element The elemnent to copy
 * @param currentDesignHandle Current design handle
 * @return The copied handle
 * @throws CloneNotSupportedException
 */
private DesignElementHandle copyNewHandle(IDesignElement element,ModuleHandle currentDesignHandle) throws CloneNotSupportedException {
  IDesignElement newElement=isCloned ? element : (IDesignElement)element.clone();
  DesignElementHandle handle=newElement.getHandle(currentDesignHandle.getModule());
  if (newContainer instanceof ThemeHandle) {
    currentDesignHandle.rename((ThemeHandle)newContainer,handle);
  }
 else   if (newContainer instanceof SlotHandle && ((SlotHandle)newContainer).getElementHandle() instanceof ThemeHandle) {
    currentDesignHandle.rename(((SlotHandle)newContainer).getElementHandle(),handle);
  }
 else {
    currentDesignHandle.rename(handle);
  }
  return handle;
}",0.5601888276947286
73179,"/** 
 * Add this design element to report.
 * @param newHandle The design element to add
 */
private void addHandleToReport(IDesignElement newElement,ModuleHandle currentDesignHandle) throws ContentException, NameException, SemanticException {
  DesignElementHandle newHandle=newElement.getHandle(currentDesignHandle.getModule());
  if (newContainer instanceof ThemeHandle) {
    currentDesignHandle.rename((ThemeHandle)newContainer,newHandle);
  }
 else   if (newContainer instanceof SlotHandle && ((SlotHandle)newContainer).getElementHandle() instanceof ThemeHandle) {
    currentDesignHandle.rename(((SlotHandle)newContainer).getElementHandle(),newHandle);
  }
 else {
    currentDesignHandle.rename(newHandle);
  }
  SlotHandle slotHandle=null;
  if (newContainer instanceof DesignElementHandle) {
    slotHandle=((DesignElementHandle)newContainer).getSlot(slotID);
  }
 else   if (newContainer instanceof SlotHandle) {
    slotHandle=(SlotHandle)newContainer;
  }
  if (slotHandle != null) {
    slotHandle.paste(newElement,position);
  }
 else   if (newContainer instanceof PropertyHandle) {
    ((PropertyHandle)newContainer).paste(newElement,position);
  }
 else   if (newContainer instanceof DesignElementHandle) {
    ((DesignElementHandle)newContainer).getPropertyHandle(contentString).paste(newElement,position);
  }
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newHandle) + ""String_Node_Str""+ slotHandle.getSlotID()+ ""String_Node_Str""+ DEUtil.getDisplayLabel(slotHandle.getElementHandle())+ ""String_Node_Str""+ position);
  }
}","/** 
 * Add this design element to report.
 * @param newHandle The design element to add
 */
private void addHandleToReport(DesignElementHandle newHandle) throws ContentException, NameException, SemanticException {
  SlotHandle slotHandle=null;
  if (newContainer instanceof DesignElementHandle) {
    slotHandle=((DesignElementHandle)newContainer).getSlot(slotID);
  }
 else   if (newContainer instanceof SlotHandle) {
    slotHandle=(SlotHandle)newContainer;
  }
  if (slotHandle != null) {
    slotHandle.paste(newHandle,position);
  }
 else   if (newContainer instanceof PropertyHandle) {
    ((PropertyHandle)newContainer).paste(newHandle,position);
  }
 else   if (newContainer instanceof DesignElementHandle) {
    ((DesignElementHandle)newContainer).getPropertyHandle(contentString).paste(newHandle,position);
  }
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newHandle) + ""String_Node_Str""+ slotHandle.getSlotID()+ ""String_Node_Str""+ DEUtil.getDisplayLabel(slotHandle.getElementHandle())+ ""String_Node_Str""+ position);
  }
}",0.5968159940762681
73180,"/** 
 * Executes the Command.
 */
public void execute(){
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (!isCut || sourceHandle == null || sourceHandle.getContainer() == null) {
      isCut=false;
    }
    calculatePositionAndSlotId();
    dropSourceHandle(sourceHandle);
    ModuleHandle currentDesignHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
    addHandleToReport(copyNewHandle(cloneElement),currentDesignHandle);
  }
 catch (  Exception e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
}","/** 
 * Executes the Command.
 */
public void execute(){
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (!isCut || sourceHandle == null || sourceHandle.getContainer() == null) {
      isCut=false;
    }
    calculatePositionAndSlotId();
    dropSourceHandle(sourceHandle);
    ModuleHandle currentDesignHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
    DesignElementHandle newHandle=copyNewHandle(cloneElement,currentDesignHandle);
    addHandleToReport(newHandle);
  }
 catch (  Exception e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
}",0.9408410548823948
73181,"public boolean isEnabled(){
  if (getSelection() instanceof DesignElementHandle) {
    DesignElementHandle elementHandle=(DesignElementHandle)getSelection();
    if (getClipBoardContents() instanceof IDesignElement) {
      IDesignElement content=(IDesignElement)getClipBoardContents();
      try {
        if (!elementHandle.canPaste(DEUtil.getDefaultContentName(elementHandle),content))         return false;
      }
 catch (      SemanticException e) {
      }
    }
 else     if (getClipBoardContents() instanceof Object[]) {
      Object[] array=(Object[])getClipBoardContents();
      for (int i=0; i < array.length; i++) {
        if (array[i] instanceof IDesignElement) {
          IDesignElement content=(IDesignElement)array[i];
          try {
            if (!elementHandle.canPaste(DEUtil.getDefaultContentName(elementHandle),content))             return false;
          }
 catch (          SemanticException e) {
          }
        }
      }
    }
  }
  return DNDUtil.handleValidateTargetCanContain(getSelection(),getClipBoardContents()) && DNDUtil.handleValidateTargetCanContainMore(getSelection(),DNDUtil.getObjectLength(getClipBoardContents()));
}","public boolean isEnabled(){
  return DNDUtil.handleValidateTargetCanContain(getSelection(),getClipBoardContents()) && DNDUtil.handleValidateTargetCanContainMore(getSelection(),DNDUtil.getObjectLength(getClipBoardContents()));
}",0.3256814921090387
73182,"protected void setUp() throws Exception {
  super.setUp();
  testObject=new Object[]{new Integer(1),new Integer(0),BigDecimal.valueOf(Integer.MAX_VALUE),BigDecimal.valueOf(Integer.MAX_VALUE + 1),BigDecimal.valueOf(Integer.MIN_VALUE),BigDecimal.valueOf(Integer.MIN_VALUE - 1),BigDecimal.valueOf(0l),Boolean.valueOf(true),Boolean.valueOf(false),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),Double.valueOf(""String_Node_Str""),Double.valueOf(""String_Node_Str""),null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueInputObject=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),String.valueOf(0l),""String_Node_Str"",""String_Node_Str"",((new GregorianCalendar(2004 + 1900,1,1)).getTime()).toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  resultDate=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),null,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultInteger=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),new Integer(1),new Integer(0),new Integer((int)((Date)resultDate[9]).getTime()),new Integer((int)1.1),new Integer(0),null,new Exception(""String_Node_Str""),new Integer(""String_Node_Str""),new Integer(10),new Integer(10),new Integer(10)};
  resultBigDecimal=new Object[]{new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(Integer.MAX_VALUE),new BigDecimal(Integer.MAX_VALUE + 1),new BigDecimal(Integer.MIN_VALUE),new BigDecimal(Integer.MIN_VALUE - 1),new BigDecimal(0),new BigDecimal(1),new BigDecimal(0),new BigDecimal(((Date)resultDate[9]).getTime()),new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),null,new Exception(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(10),new BigDecimal(10),new BigDecimal(10)};
  resultBoolean=new Object[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultDouble=new Object[]{new Double(1),new Double(0),new Double(Integer.MAX_VALUE),new Double(Integer.MAX_VALUE + 1),new Double(Integer.MIN_VALUE),new Double(Integer.MIN_VALUE - 1),new Double(0),new Double(1),new Double(0),new Double(((Date)resultDate[9]).getTime()),new Double(1.1),new Double(0),null,new Exception(""String_Node_Str""),new Double(""String_Node_Str""),new Double(10),new Double(10),new Double(10)};
  resultString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",df.format(resultDate[9]),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  testObjectDecimal=new Object[]{new Double(Double.NaN),new Double(Double.POSITIVE_INFINITY),new Double(Double.NEGATIVE_INFINITY),new Double(Double.MAX_VALUE),new Double(Double.MIN_VALUE)};
  resultObjectDecimal=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new BigDecimal(new Double(Double.MAX_VALUE).toString()),new BigDecimal(new Double(Double.MIN_VALUE).toString())};
  testObjectDouble=new Object[]{new Float(1)};
  resultObjectDouble=new Object[]{new Double(1)};
}","protected void setUp() throws Exception {
  super.setUp();
  testObject=new Object[]{new Integer(1),new Integer(0),BigDecimal.valueOf(Integer.MAX_VALUE),BigDecimal.valueOf(Integer.MAX_VALUE + 1),BigDecimal.valueOf(Integer.MIN_VALUE),BigDecimal.valueOf(Integer.MIN_VALUE - 1),BigDecimal.valueOf(0l),Boolean.valueOf(true),Boolean.valueOf(false),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),Double.valueOf(""String_Node_Str""),Double.valueOf(""String_Node_Str""),null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueInputObject=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),String.valueOf(0l),""String_Node_Str"",""String_Node_Str"",((new GregorianCalendar(2004 + 1900,1,1)).getTime()).toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  resultDate=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),null,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultInteger=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),new Integer(1),new Integer(0),new Integer((int)((Date)resultDate[9]).getTime()),new Integer((int)1.1),new Integer(0),null,new Exception(""String_Node_Str""),new Integer(""String_Node_Str""),new Integer(10),new Integer(10),new Integer(10)};
  resultBigDecimal=new Object[]{new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(Integer.MAX_VALUE),new BigDecimal(Integer.MAX_VALUE + 1),new BigDecimal(Integer.MIN_VALUE),new BigDecimal(Integer.MIN_VALUE - 1),new BigDecimal(0),new BigDecimal(1),new BigDecimal(0),new BigDecimal(((Date)resultDate[9]).getTime()),new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),null,new Exception(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(10),new BigDecimal(10),new BigDecimal(10)};
  resultBoolean=new Object[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultDouble=new Object[]{new Double(1),new Double(0),new Double(Integer.MAX_VALUE),new Double(Integer.MAX_VALUE + 1),new Double(Integer.MIN_VALUE),new Double(Integer.MIN_VALUE - 1),new Double(0),new Double(1),new Double(0),new Double(((Date)resultDate[9]).getTime()),new Double(1.1),new Double(0),null,new Exception(""String_Node_Str""),new Double(""String_Node_Str""),new Double(10),new Double(10),new Double(10)};
  resultString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",df.format(resultDate[9]),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultLocaleNeutralString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  testObjectDecimal=new Object[]{new Double(Double.NaN),new Double(Double.POSITIVE_INFINITY),new Double(Double.NEGATIVE_INFINITY),new Double(Double.MAX_VALUE),new Double(Double.MIN_VALUE)};
  resultObjectDecimal=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new BigDecimal(new Double(Double.MAX_VALUE).toString()),new BigDecimal(new Double(Double.MIN_VALUE).toString())};
  testObjectDouble=new Object[]{new Float(1)};
  resultObjectDouble=new Object[]{new Double(1)};
}",0.9110119318699336
73183,"protected Object initialValue(){
  HashMap value=new HashMap();
  String[] dateFormatPattern={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  SimpleDateFormat simpleDateFormatter=null;
  PatternKey patterKey=null;
  for (int i=0; i < dateFormatPattern.length; i++) {
    patterKey=PatternKey.getPatterKey(dateFormatPattern[i]);
    simpleDateFormatter=new SimpleDateFormat(dateFormatPattern[i]);
    simpleDateFormatter.setLenient(false);
    value.put(patterKey,simpleDateFormatter);
  }
  return value;
}","protected Object initialValue(){
  HashMap value=new HashMap();
  String[] dateFormatPattern={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  SimpleDateFormat simpleDateFormatter=null;
  PatternKey patterKey=null;
  for (int i=0; i < dateFormatPattern.length; i++) {
    patterKey=PatternKey.getPatterKey(dateFormatPattern[i]);
    simpleDateFormatter=new SimpleDateFormat(dateFormatPattern[i]);
    simpleDateFormatter.setLenient(false);
    value.put(patterKey,simpleDateFormatter);
  }
  return value;
}",0.9262295081967212
73184,"private void clearTempFile(){
  File tmpDir=new File(session.getTempDir());
  if (!tmpDir.exists() || !tmpDir.isDirectory()) {
    return;
  }
  File[] tmpFiles=tmpDir.listFiles();
  if (tmpFiles != null) {
    for (int i=0; i < tmpFiles.length; i++) {
      if (!tmpFiles[i].delete()) {
        tmpFiles[i].deleteOnExit();
      }
    }
  }
  if (!tmpDir.delete()) {
    tmpDir.deleteOnExit();
  }
}","/** 
 */
private void clearTempFile(){
  File tmpDir=new File(session.getTempDir());
  if (!tmpDir.exists() || !tmpDir.isDirectory()) {
    return;
  }
  deleteDirectory(tmpDir);
}",0.5517241379310345
73185,"public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    return ret;
  }
  if (!maxRowsUpToDate) {
    try {
      assertNotNull(callStat);
      callStat.setMaxRows(maxrows);
    }
 catch (    SQLException e1) {
    }
    maxRowsUpToDate=true;
  }
  registerOutputParameter();
  java.sql.ResultSet rs=null;
  try {
    this.callStat.execute();
    rs=this.callStat.getResultSet();
    while (rs == null && this.callStat.getMoreResults()) {
      rs=this.callStat.getResultSet();
    }
    if (rs != null)     return new ResultSet(rs);
    java.sql.ResultSet resultSet=getOutputParamResultSet();
    if (resultSet != null)     return new ResultSet(resultSet);
 else     return new SPResultSet(null);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}","public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    return ret;
  }
  if (!maxRowsUpToDate) {
    try {
      assertNotNull(callStat);
      callStat.setMaxRows(maxrows);
    }
 catch (    SQLException e1) {
    }
    maxRowsUpToDate=true;
  }
  registerOutputParameter();
  java.sql.ResultSet rs=null;
  try {
    this.callStat.execute();
    rs=this.callStat.getResultSet();
    if (rs == null && callStat.getUpdateCount() != -1) {
      while (true) {
        int rowCount=callStat.getUpdateCount();
        if (rowCount != -1) {
          if (callStat.getMoreResults() == false && callStat.getUpdateCount() == -1)           break;
          continue;
        }
 else {
          rs=callStat.getResultSet();
          break;
        }
      }
    }
    if (rs != null)     return new ResultSet(rs);
    java.sql.ResultSet resultSet=getOutputParamResultSet();
    if (resultSet != null)     return new ResultSet(resultSet);
 else     return new SPResultSet(null);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}",0.8217186831979478
73186,"/** 
 * @throws Exception
 */
public void testParser() throws Exception {
  openDesign(FILE_NAME);
  assertNotNull(designHandle);
  TabularCubeHandle cube=(TabularCubeHandle)designHandle.findCube(""String_Node_Str"");
  assertEquals(designHandle.findDataSet(""String_Node_Str""),cube.getDataSet());
  Iterator iter=cube.filtersIterator();
  FilterConditionHandle filterConditionHandle=(FilterConditionHandle)iter.next();
  assertEquals(""String_Node_Str"",filterConditionHandle.getExpr());
  iter=cube.joinConditionsIterator();
  DimensionConditionHandle cubeJoinConditionHandle=(DimensionConditionHandle)iter.next();
  assertEquals(design.findOLAPElement(""String_Node_Str""),cubeJoinConditionHandle.getHierarchy().getElement());
  MemberHandle conditionMemberHandle=cubeJoinConditionHandle.getJoinConditions();
  assertEquals(3,conditionMemberHandle.getListValue().size());
  DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionMemberHandle.getAt(0);
  assertEquals(""String_Node_Str"",joinCondition.getCubeKey());
  assertEquals(""String_Node_Str"",joinCondition.getHierarchyKey());
  assertEquals(designHandle.findLevel(""String_Node_Str""),joinCondition.getLevel());
  joinCondition=(DimensionJoinConditionHandle)conditionMemberHandle.getAt(1);
  assertEquals(""String_Node_Str"",joinCondition.getCubeKey());
  assertEquals(""String_Node_Str"",joinCondition.getHierarchyKey());
  joinCondition=(DimensionJoinConditionHandle)conditionMemberHandle.getAt(2);
  assertEquals(""String_Node_Str"",joinCondition.getCubeKey());
  assertEquals(""String_Node_Str"",joinCondition.getHierarchyKey());
  cubeJoinConditionHandle=(DimensionConditionHandle)iter.next();
  assertNull(cubeJoinConditionHandle.getHierarchy());
  assertEquals(""String_Node_Str"",cubeJoinConditionHandle.getHierarchyName());
  conditionMemberHandle=cubeJoinConditionHandle.getJoinConditions();
  assertEquals(1,conditionMemberHandle.getListValue().size());
  Iterator iter1=cube.accessControlsIterator();
  AccessControlHandle accessControl=(AccessControlHandle)iter1.next();
  assertEquals(""String_Node_Str"",accessControl.getPropertyHandle(IAccessControlModel.USER_NAMES_PROP).getStringValue());
  assertEquals(""String_Node_Str"",accessControl.getPropertyHandle(IAccessControlModel.ROLES_PROP).getStringValue());
  assertEquals(DesignChoiceConstants.ACCESS_PERMISSION_DISALLOW,accessControl.getPermission());
  PropertyHandle propHandle=cube.getPropertyHandle(TabularCubeHandle.DIMENSIONS_PROP);
  assertEquals(1,propHandle.getContentCount());
  assertEquals(1,cube.getContentCount(TabularCubeHandle.DIMENSIONS_PROP));
  DimensionHandle dimension=(DimensionHandle)propHandle.getContent(0);
  assertEquals(dimension,cube.getContent(TabularCubeHandle.DIMENSIONS_PROP,0));
  assertEquals(""String_Node_Str"",dimension.getName());
  assertTrue(dimension.isTimeType());
  propHandle=dimension.getPropertyHandle(DimensionHandle.HIERARCHIES_PROP);
  assertEquals(1,propHandle.getContentCount());
  assertEquals(1,dimension.getContentCount(DimensionHandle.HIERARCHIES_PROP));
  TabularHierarchyHandle hierarchy=(TabularHierarchyHandle)propHandle.getContent(0);
  assertEquals(hierarchy,dimension.getContent(DimensionHandle.HIERARCHIES_PROP,0));
  assertEquals(hierarchy,dimension.getDefaultHierarchy());
  assertEquals(""String_Node_Str"",hierarchy.getName());
  assertEquals(designHandle.findDataSet(""String_Node_Str""),hierarchy.getDataSet());
  iter1=hierarchy.accessControlsIterator();
  accessControl=(AccessControlHandle)iter1.next();
  assertEquals(""String_Node_Str"",accessControl.getPropertyHandle(IAccessControlModel.USER_NAMES_PROP).getStringValue());
  assertEquals(""String_Node_Str"",accessControl.getPropertyHandle(IAccessControlModel.ROLES_PROP).getStringValue());
  assertEquals(DesignChoiceConstants.ACCESS_PERMISSION_ALLOW,accessControl.getPermission());
  propHandle=cube.getPropertyHandle(TabularCubeHandle.DIMENSIONS_PROP);
  assertEquals(1,propHandle.getContentCount());
  assertEquals(1,cube.getContentCount(TabularCubeHandle.DIMENSIONS_PROP));
  iter=hierarchy.filtersIterator();
  filterConditionHandle=(FilterConditionHandle)iter.next();
  assertEquals(""String_Node_Str"",filterConditionHandle.getExpr());
  List primaryKeys=hierarchy.getPrimaryKeys();
  assertEquals(3,primaryKeys.size());
  assertEquals(""String_Node_Str"",primaryKeys.get(0));
  assertEquals(""String_Node_Str"",primaryKeys.get(1));
  assertEquals(""String_Node_Str"",primaryKeys.get(2));
  propHandle=hierarchy.getPropertyHandle(TabularHierarchyHandle.LEVELS_PROP);
  assertEquals(1,propHandle.getContentCount());
  assertEquals(1,hierarchy.getContentCount(TabularHierarchyHandle.LEVELS_PROP));
  TabularLevelHandle level=(TabularLevelHandle)propHandle.getContent(0);
  assertEquals(level,hierarchy.getContent(TabularHierarchyHandle.LEVELS_PROP,0));
  assertEquals(""String_Node_Str"",level.getName());
  assertEquals(""String_Node_Str"",level.getColumnName());
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,level.getDataType());
  assertEquals(""String_Node_Str"",level.getInterval());
  assertEquals(DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_MONTH,level.getDateTimeLevelType());
  assertEquals(""String_Node_Str"",level.getDateTimeFormat());
  assertEquals(3.0,level.getIntervalRange(),0.00);
  assertEquals(""String_Node_Str"",level.getIntervalBase());
  assertEquals(DesignChoiceConstants.LEVEL_TYPE_DYNAMIC,level.getLevelType());
  iter=level.staticValuesIterator();
  RuleHandle rule=(RuleHandle)iter.next();
  assertEquals(""String_Node_Str"",rule.getRuleExpression());
  assertEquals(""String_Node_Str"",rule.getDisplayExpression());
  rule=(RuleHandle)iter.next();
  assertEquals(""String_Node_Str"",rule.getRuleExpression());
  assertEquals(""String_Node_Str"",rule.getDisplayExpression());
  iter=level.attributesIterator();
  LevelAttributeHandle attribute=(LevelAttributeHandle)iter.next();
  assertEquals(""String_Node_Str"",attribute.getName());
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,attribute.getDataType());
  attribute=(LevelAttributeHandle)iter.next();
  assertEquals(""String_Node_Str"",attribute.getName());
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,attribute.getDataType());
  iter1=level.valueAccessControlsIterator();
  ValueAccessControlHandle valueAccessControl=(ValueAccessControlHandle)iter1.next();
  assertEquals(""String_Node_Str"",valueAccessControl.getPropertyHandle(IAccessControlModel.USER_NAMES_PROP).getStringValue());
  assertEquals(""String_Node_Str"",valueAccessControl.getPropertyHandle(IAccessControlModel.ROLES_PROP).getStringValue());
  assertEquals(""String_Node_Str"",valueAccessControl.getPropertyHandle(IValueAccessControlModel.VALUES_PROP).getStringValue());
  assertEquals(DesignChoiceConstants.ACCESS_PERMISSION_DISALLOW,valueAccessControl.getPermission());
  propHandle=cube.getPropertyHandle(TabularCubeHandle.MEASURE_GROUPS_PROP);
  assertEquals(1,propHandle.getContentCount());
  assertEquals(1,cube.getContentCount(TabularCubeHandle.MEASURE_GROUPS_PROP));
  MeasureGroupHandle measureGroup=(MeasureGroupHandle)propHandle.getContent(0);
  assertEquals(measureGroup,cube.getContent(TabularCubeHandle.MEASURE_GROUPS_PROP,0));
  assertEquals(""String_Node_Str"",measureGroup.getName());
  assertEquals(measureGroup,cube.getDefaultMeasureGroup());
  propHandle=measureGroup.getPropertyHandle(MeasureGroupHandle.MEASURES_PROP);
  MeasureHandle measure=(MeasureHandle)propHandle.getContent(0);
  assertEquals(""String_Node_Str"",measure.getName());
  assertEquals(""String_Node_Str"",measure.getMeasureExpression());
  assertEquals(DesignChoiceConstants.MEASURE_FUNCTION_MIN,measure.getFunction());
  assertFalse(measure.isCalculated());
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,measure.getDataType());
}","/** 
 * @throws Exception
 */
public void testParser() throws Exception {
  openDesign(FILE_NAME);
  assertNotNull(designHandle);
  TabularCubeHandle cube=(TabularCubeHandle)designHandle.findCube(""String_Node_Str"");
  assertEquals(designHandle.findDataSet(""String_Node_Str""),cube.getDataSet());
  Iterator iter=cube.filtersIterator();
  FilterConditionHandle filterConditionHandle=(FilterConditionHandle)iter.next();
  assertEquals(""String_Node_Str"",filterConditionHandle.getExpr());
  iter=cube.joinConditionsIterator();
  DimensionConditionHandle cubeJoinConditionHandle=(DimensionConditionHandle)iter.next();
  assertEquals(design.findOLAPElement(""String_Node_Str""),cubeJoinConditionHandle.getHierarchy().getElement());
  MemberHandle conditionMemberHandle=cubeJoinConditionHandle.getJoinConditions();
  assertEquals(3,conditionMemberHandle.getListValue().size());
  DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionMemberHandle.getAt(0);
  assertEquals(""String_Node_Str"",joinCondition.getCubeKey());
  assertEquals(""String_Node_Str"",joinCondition.getHierarchyKey());
  assertEquals(designHandle.findLevel(""String_Node_Str""),joinCondition.getLevel());
  joinCondition=(DimensionJoinConditionHandle)conditionMemberHandle.getAt(1);
  assertEquals(""String_Node_Str"",joinCondition.getCubeKey());
  assertEquals(""String_Node_Str"",joinCondition.getHierarchyKey());
  joinCondition=(DimensionJoinConditionHandle)conditionMemberHandle.getAt(2);
  assertEquals(""String_Node_Str"",joinCondition.getCubeKey());
  assertEquals(""String_Node_Str"",joinCondition.getHierarchyKey());
  cubeJoinConditionHandle=(DimensionConditionHandle)iter.next();
  assertNull(cubeJoinConditionHandle.getHierarchy());
  assertEquals(""String_Node_Str"",cubeJoinConditionHandle.getHierarchyName());
  conditionMemberHandle=cubeJoinConditionHandle.getJoinConditions();
  assertEquals(1,conditionMemberHandle.getListValue().size());
  Iterator iter1=cube.accessControlsIterator();
  AccessControlHandle accessControl=(AccessControlHandle)iter1.next();
  assertEquals(""String_Node_Str"",accessControl.getPropertyHandle(IAccessControlModel.USER_NAMES_PROP).getStringValue());
  assertEquals(""String_Node_Str"",accessControl.getPropertyHandle(IAccessControlModel.ROLES_PROP).getStringValue());
  assertEquals(DesignChoiceConstants.ACCESS_PERMISSION_DISALLOW,accessControl.getPermission());
  PropertyHandle propHandle=cube.getPropertyHandle(TabularCubeHandle.DIMENSIONS_PROP);
  assertEquals(1,propHandle.getContentCount());
  assertEquals(1,cube.getContentCount(TabularCubeHandle.DIMENSIONS_PROP));
  DimensionHandle dimension=(DimensionHandle)propHandle.getContent(0);
  assertEquals(dimension,cube.getContent(TabularCubeHandle.DIMENSIONS_PROP,0));
  assertEquals(""String_Node_Str"",dimension.getName());
  assertTrue(dimension.isTimeType());
  propHandle=dimension.getPropertyHandle(DimensionHandle.HIERARCHIES_PROP);
  assertEquals(1,propHandle.getContentCount());
  assertEquals(1,dimension.getContentCount(DimensionHandle.HIERARCHIES_PROP));
  TabularHierarchyHandle hierarchy=(TabularHierarchyHandle)propHandle.getContent(0);
  assertEquals(hierarchy,dimension.getContent(DimensionHandle.HIERARCHIES_PROP,0));
  assertEquals(hierarchy,dimension.getDefaultHierarchy());
  assertEquals(""String_Node_Str"",hierarchy.getName());
  assertEquals(designHandle.findDataSet(""String_Node_Str""),hierarchy.getDataSet());
  TabularLevelHandle level=(TabularLevelHandle)hierarchy.getLevel(""String_Node_Str"");
  assertNotNull(level);
  iter1=hierarchy.accessControlsIterator();
  accessControl=(AccessControlHandle)iter1.next();
  assertEquals(""String_Node_Str"",accessControl.getPropertyHandle(IAccessControlModel.USER_NAMES_PROP).getStringValue());
  assertEquals(""String_Node_Str"",accessControl.getPropertyHandle(IAccessControlModel.ROLES_PROP).getStringValue());
  assertEquals(DesignChoiceConstants.ACCESS_PERMISSION_ALLOW,accessControl.getPermission());
  propHandle=cube.getPropertyHandle(TabularCubeHandle.DIMENSIONS_PROP);
  assertEquals(1,propHandle.getContentCount());
  assertEquals(1,cube.getContentCount(TabularCubeHandle.DIMENSIONS_PROP));
  iter=hierarchy.filtersIterator();
  filterConditionHandle=(FilterConditionHandle)iter.next();
  assertEquals(""String_Node_Str"",filterConditionHandle.getExpr());
  List primaryKeys=hierarchy.getPrimaryKeys();
  assertEquals(3,primaryKeys.size());
  assertEquals(""String_Node_Str"",primaryKeys.get(0));
  assertEquals(""String_Node_Str"",primaryKeys.get(1));
  assertEquals(""String_Node_Str"",primaryKeys.get(2));
  propHandle=hierarchy.getPropertyHandle(TabularHierarchyHandle.LEVELS_PROP);
  assertEquals(1,propHandle.getContentCount());
  assertEquals(1,hierarchy.getContentCount(TabularHierarchyHandle.LEVELS_PROP));
  level=(TabularLevelHandle)propHandle.getContent(0);
  assertEquals(level,hierarchy.getContent(TabularHierarchyHandle.LEVELS_PROP,0));
  assertEquals(""String_Node_Str"",level.getName());
  assertEquals(""String_Node_Str"",level.getColumnName());
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,level.getDataType());
  assertEquals(""String_Node_Str"",level.getInterval());
  assertEquals(DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_MONTH,level.getDateTimeLevelType());
  assertEquals(""String_Node_Str"",level.getDateTimeFormat());
  assertEquals(3.0,level.getIntervalRange(),0.00);
  assertEquals(""String_Node_Str"",level.getIntervalBase());
  assertEquals(DesignChoiceConstants.LEVEL_TYPE_DYNAMIC,level.getLevelType());
  iter=level.staticValuesIterator();
  RuleHandle rule=(RuleHandle)iter.next();
  assertEquals(""String_Node_Str"",rule.getRuleExpression());
  assertEquals(""String_Node_Str"",rule.getDisplayExpression());
  rule=(RuleHandle)iter.next();
  assertEquals(""String_Node_Str"",rule.getRuleExpression());
  assertEquals(""String_Node_Str"",rule.getDisplayExpression());
  iter=level.attributesIterator();
  LevelAttributeHandle attribute=(LevelAttributeHandle)iter.next();
  assertEquals(""String_Node_Str"",attribute.getName());
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,attribute.getDataType());
  attribute=(LevelAttributeHandle)iter.next();
  assertEquals(""String_Node_Str"",attribute.getName());
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER,attribute.getDataType());
  iter1=level.valueAccessControlsIterator();
  ValueAccessControlHandle valueAccessControl=(ValueAccessControlHandle)iter1.next();
  assertEquals(""String_Node_Str"",valueAccessControl.getPropertyHandle(IAccessControlModel.USER_NAMES_PROP).getStringValue());
  assertEquals(""String_Node_Str"",valueAccessControl.getPropertyHandle(IAccessControlModel.ROLES_PROP).getStringValue());
  assertEquals(""String_Node_Str"",valueAccessControl.getPropertyHandle(IValueAccessControlModel.VALUES_PROP).getStringValue());
  assertEquals(DesignChoiceConstants.ACCESS_PERMISSION_DISALLOW,valueAccessControl.getPermission());
  propHandle=cube.getPropertyHandle(TabularCubeHandle.MEASURE_GROUPS_PROP);
  assertEquals(1,propHandle.getContentCount());
  assertEquals(1,cube.getContentCount(TabularCubeHandle.MEASURE_GROUPS_PROP));
  MeasureGroupHandle measureGroup=(MeasureGroupHandle)propHandle.getContent(0);
  assertEquals(measureGroup,cube.getContent(TabularCubeHandle.MEASURE_GROUPS_PROP,0));
  assertEquals(""String_Node_Str"",measureGroup.getName());
  assertEquals(measureGroup,cube.getDefaultMeasureGroup());
  propHandle=measureGroup.getPropertyHandle(MeasureGroupHandle.MEASURES_PROP);
  MeasureHandle measure=(MeasureHandle)propHandle.getContent(0);
  assertEquals(""String_Node_Str"",measure.getName());
  assertEquals(""String_Node_Str"",measure.getMeasureExpression());
  assertEquals(DesignChoiceConstants.MEASURE_FUNCTION_MIN,measure.getFunction());
  assertFalse(measure.isCalculated());
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,measure.getDataType());
}",0.9917238724578176
73187,"/** 
 * Constructor.
 * @param os the output stream to which the design file is written.
 * @param signature the UTF signature
 * @param needMarkLineNumber 
 * @throws IOException if write error occurs
 */
public XMLWriter(OutputStream os,String signature,boolean needMarkLineNumber) throws IOException {
  out=new PrintStream(os,false,OUTPUT_ENCODING);
  markLineNumber=needMarkLineNumber;
  init(signature);
}","/** 
 * Constructor.
 * @param os the output stream to which the design file is written.
 * @param signature the UTF signature
 * @param needMarkLineNumber
 * @throws IOException if write error occurs
 */
public XMLWriter(OutputStream os,String signature,boolean needMarkLineNumber) throws IOException {
  out=new PrintStream(os,false,OUTPUT_ENCODING);
  markLineNumber=needMarkLineNumber;
  init(signature);
}",0.9987819732034104
73188,"/** 
 * Write text into the current element.
 * @param text the text to write
 */
public void text(String text){
  closeTextTag();
  if (text == null)   return;
  int len=text.length();
  for (int i=0; i < len; i++) {
    char c=text.charAt(i);
    if (c == '&')     out.print(""String_Node_Str"");
 else     if (c == '<')     out.print(""String_Node_Str"");
 else     if (c == '\n') {
      printLine();
    }
 else     out.print(c);
  }
}","/** 
 * Write text into the current element.
 * @param text the text to write
 */
public void text(String text){
  closeTextTag();
  if (text == null)   return;
  int len=text.length();
  for (int i=0; i < len; i++) {
    char c=text.charAt(i);
    if (c == '&')     out.print(""String_Node_Str"");
 else     if (c == '<')     out.print(""String_Node_Str"");
 else     if (c == '>') {
      if (i - 2 >= 0 && text.charAt(i - 1) == ']' && text.charAt(i - 2) == ']')       out.print(""String_Node_Str"");
 else       out.print(c);
    }
 else     if (c == '\n') {
      printLine();
    }
 else     out.print(c);
  }
}",0.8336520076481836
73189,"public IReportRunnable getReportRunnable(){
  if (reportRunnable != null) {
    return reportRunnable;
  }
synchronized (this) {
    if (reportRunnable != null) {
      return reportRunnable;
    }
    String name=null;
    if (systemId == null) {
      name=archive.getName();
    }
 else {
      name=systemId;
    }
    InputStream stream=getDesignStream();
    if (stream != null) {
      try {
        reportRunnable=(ReportRunnable)engine.openReportDesign(name,stream,moduleOptions);
        stream.close();
        try {
          stream=archive.getStream(DESIGN_IR_STREAM);
          EngineIRReader reader=new EngineIRReader();
          Report reportIR=reader.read(stream);
          reportIR.setVersion(getVersion());
          reader.link(reportIR,reportRunnable.getReport());
          reportRunnable.setReportIR(reportIR);
        }
 catch (        IOException ioex) {
          logger.log(Level.FINE,""String_Node_Str"",ioex);
        }
      }
 catch (      Exception ex) {
        logger.log(Level.SEVERE,""String_Node_Str"",ex);
      }
 finally {
        try {
          if (stream != null) {
            stream.close();
          }
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  return reportRunnable;
}","private IReportRunnable getReportRunnable(String systemId){
  if (reportRunnable != null) {
    return reportRunnable;
  }
synchronized (this) {
    if (reportRunnable != null) {
      return reportRunnable;
    }
    String name=null;
    if (systemId == null) {
      name=archive.getName();
    }
 else {
      name=systemId;
    }
    InputStream stream=getDesignStream();
    if (stream != null) {
      try {
        reportRunnable=(ReportRunnable)engine.openReportDesign(name,stream,moduleOptions);
        stream.close();
        try {
          stream=archive.getStream(DESIGN_IR_STREAM);
          EngineIRReader reader=new EngineIRReader();
          Report reportIR=reader.read(stream);
          reportIR.setVersion(getVersion());
          reader.link(reportIR,reportRunnable.getReport());
          reportRunnable.setReportIR(reportIR);
        }
 catch (        IOException ioex) {
          logger.log(Level.FINE,""String_Node_Str"",ioex);
        }
      }
 catch (      Exception ex) {
        logger.log(Level.SEVERE,""String_Node_Str"",ex);
      }
 finally {
        try {
          if (stream != null) {
            stream.close();
          }
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  return reportRunnable;
}",0.9744612928970472
73190,"public ClassLoader getClassLoader(){
  if (applicationClassLoader == null) {
    applicationClassLoader=new ApplicationClassLoader(engine,getReportRunnable());
  }
  return applicationClassLoader;
}","private ClassLoader getClassLoader(String systemId){
  if (applicationClassLoader == null) {
    applicationClassLoader=new ApplicationClassLoader(engine,getReportRunnable(systemId));
  }
  return applicationClassLoader;
}",0.7857142857142857
73191,"protected void doRefreshV0(DataInputStream di) throws IOException {
  ReportDocumentCoreInfo documentInfo=new ReportDocumentCoreInfo();
  documentInfo.checkpoint=CHECKPOINT_INIT;
  documentInfo.pageCount=PAGECOUNT_INIT;
  documentInfo.checkpoint=IOUtil.readInt(di);
  documentInfo.pageCount=IOUtil.readLong(di);
  if (documentInfo.checkpoint == checkpoint) {
    return;
  }
  String orgSystemId=IOUtil.readString(di);
  if (systemId == null) {
    documentInfo.systemId=orgSystemId;
  }
 else {
    documentInfo.systemId=systemId;
  }
  ClassLoader applicationClassLoader=getClassLoader();
  Map originalParameters=IOUtil.readMap(di,applicationClassLoader);
  documentInfo.parameters=convertToCompatibleParameter(originalParameters);
  documentInfo.globalVariables=(HashMap)IOUtil.readMap(di,applicationClassLoader);
  checkpoint=documentInfo.checkpoint;
  pageCount=documentInfo.pageCount;
  systemId=documentInfo.systemId;
  globalVariables=documentInfo.globalVariables;
  parameters=documentInfo.parameters;
  if (documentInfo.checkpoint == CHECKPOINT_END) {
    bookmarks=readMap(di);
    tocTree=new TOCTree();
    TOCBuilder.read(tocTree,di,applicationClassLoader);
    reportletsIndexById=readMap(di);
    reportletsIndexByBookmark=readMap(di);
  }
}","protected void doRefreshV0(DataInputStream di) throws IOException {
  ReportDocumentCoreInfo documentInfo=new ReportDocumentCoreInfo();
  documentInfo.checkpoint=CHECKPOINT_INIT;
  documentInfo.pageCount=PAGECOUNT_INIT;
  documentInfo.checkpoint=IOUtil.readInt(di);
  documentInfo.pageCount=IOUtil.readLong(di);
  if (documentInfo.checkpoint == checkpoint) {
    return;
  }
  String orgSystemId=IOUtil.readString(di);
  if (systemId == null) {
    documentInfo.systemId=orgSystemId;
  }
 else {
    documentInfo.systemId=systemId;
  }
  documentInfo.applicationClassLoader=getClassLoader(documentInfo.systemId);
  Map originalParameters=IOUtil.readMap(di,documentInfo.applicationClassLoader);
  documentInfo.parameters=convertToCompatibleParameter(originalParameters);
  documentInfo.globalVariables=(HashMap)IOUtil.readMap(di,documentInfo.applicationClassLoader);
  checkpoint=documentInfo.checkpoint;
  pageCount=documentInfo.pageCount;
  systemId=documentInfo.systemId;
  globalVariables=documentInfo.globalVariables;
  parameters=documentInfo.parameters;
  applicationClassLoader=documentInfo.applicationClassLoader;
  if (documentInfo.checkpoint == CHECKPOINT_END) {
    bookmarks=readMap(di);
    tocTree=new TOCTree();
    TOCBuilder.read(tocTree,di,applicationClassLoader);
    reportletsIndexById=readMap(di);
    reportletsIndexByBookmark=readMap(di);
  }
}",0.9367859862909368
73192,"protected void doOldRefresh(DataInputStream coreStream) throws IOException {
  ReportDocumentCoreInfo documentInfo=new ReportDocumentCoreInfo();
  documentInfo.checkpoint=CHECKPOINT_INIT;
  documentInfo.pageCount=PAGECOUNT_INIT;
  if (!archive.exists(CHECKPOINT_STREAM)) {
    documentInfo.checkpoint=CHECKPOINT_END;
    initializePageHintReader();
    if (pageHintReader != null) {
      documentInfo.pageCount=pageHintReader.getTotalPage();
    }
  }
 else {
    RAInputStream in=archive.getStream(CHECKPOINT_STREAM);
    try {
      DataInputStream di=new DataInputStream(in);
      documentInfo.checkpoint=IOUtil.readInt(di);
      documentInfo.pageCount=IOUtil.readLong(di);
    }
  finally {
      if (in != null) {
        in.close();
      }
    }
    if (documentInfo.checkpoint == checkpoint) {
      return;
    }
  }
  String orgSystemId=IOUtil.readString(coreStream);
  if (systemId == null) {
    documentInfo.systemId=orgSystemId;
  }
 else {
    documentInfo.systemId=systemId;
  }
  ClassLoader applicationClassLoader=getClassLoader();
  Map originalParameters=IOUtil.readMap(coreStream,applicationClassLoader);
  documentInfo.parameters=convertToCompatibleParameter(originalParameters);
  documentInfo.globalVariables=(HashMap)IOUtil.readMap(coreStream,applicationClassLoader);
  checkpoint=documentInfo.checkpoint;
  pageCount=documentInfo.pageCount;
  systemId=documentInfo.systemId;
  globalVariables=documentInfo.globalVariables;
  parameters=documentInfo.parameters;
}","protected void doOldRefresh(DataInputStream coreStream) throws IOException {
  ReportDocumentCoreInfo documentInfo=new ReportDocumentCoreInfo();
  documentInfo.checkpoint=CHECKPOINT_INIT;
  documentInfo.pageCount=PAGECOUNT_INIT;
  if (!archive.exists(CHECKPOINT_STREAM)) {
    documentInfo.checkpoint=CHECKPOINT_END;
    initializePageHintReader();
    if (pageHintReader != null) {
      documentInfo.pageCount=pageHintReader.getTotalPage();
    }
  }
 else {
    RAInputStream in=archive.getStream(CHECKPOINT_STREAM);
    try {
      DataInputStream di=new DataInputStream(in);
      documentInfo.checkpoint=IOUtil.readInt(di);
      documentInfo.pageCount=IOUtil.readLong(di);
    }
  finally {
      if (in != null) {
        in.close();
      }
    }
    if (documentInfo.checkpoint == checkpoint) {
      return;
    }
  }
  String orgSystemId=IOUtil.readString(coreStream);
  if (systemId == null) {
    documentInfo.systemId=orgSystemId;
  }
 else {
    documentInfo.systemId=systemId;
  }
  documentInfo.applicationClassLoader=getClassLoader(documentInfo.systemId);
  Map originalParameters=IOUtil.readMap(coreStream,documentInfo.applicationClassLoader);
  documentInfo.parameters=convertToCompatibleParameter(originalParameters);
  documentInfo.globalVariables=(HashMap)IOUtil.readMap(coreStream,documentInfo.applicationClassLoader);
  checkpoint=documentInfo.checkpoint;
  pageCount=documentInfo.pageCount;
  systemId=documentInfo.systemId;
  globalVariables=documentInfo.globalVariables;
  parameters=documentInfo.parameters;
  applicationClassLoader=documentInfo.applicationClassLoader;
}",0.946313065976714
73193,"public void doSave(IProgressMonitor progressMonitor){
  reportXMLEditor.doSave(progressMonitor);
  IReportProvider provider=getProvider();
  if (provider != null && getErrorLIine(false) == -1) {
    unhookModelEventManager(getModel());
    getCommandStack().removeCommandStackListener(getCommandStackListener());
    ModuleHandle model=provider.getReportModuleHandle(getEditorInput(),true);
    SessionHandleAdapter.getInstance().setReportDesignHandle(model);
    SessionHandleAdapter.getInstance().getMediator().addColleague(this);
    hookModelEventManager(getModel());
    getCommandStack().addCommandStackListener(getCommandStackListener());
    setIsModified(false);
    getEditor().editorDirtyStateChanged();
    if (isActive() && !isLeaving) {
      getReportEditor().reloadOutlinePage();
    }
  }
}","public void doSave(IProgressMonitor progressMonitor){
  reportXMLEditor.doSave(progressMonitor);
}",0.2165745856353591
73194,"public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  super.init(site,input);
  try {
    reportXMLEditor=new StructuredTextEditor();
    reportXMLEditor.init(site,input);
  }
 catch (  Exception e) {
  }
}","public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  super.init(site,input);
  try {
    reportXMLEditor=new StructuredTextEditor(){
      @Override public void doSave(      IProgressMonitor progressMonitor){
        super.doSave(progressMonitor);
        clearDirtyFlag();
      }
    }
;
    reportXMLEditor.init(site,input);
  }
 catch (  Exception e) {
  }
}",0.7496012759170654
73195,"protected void firePropertyChange(int type){
  if (type == PROP_DIRTY) {
    if (editor != null) {
      markPageStale(IPageStaleType.CODE_CHANGED);
      editor.editorDirtyStateChanged();
    }
  }
 else {
    super.firePropertyChange(type);
  }
}","protected void firePropertyChange(int type){
  super.firePropertyChange(type);
  if (type == PROP_DIRTY) {
    if (editor != null) {
      markPageStale(IPageStaleType.CODE_CHANGED);
      editor.editorDirtyStateChanged();
    }
  }
}",0.8298755186721992
73196,"/** 
 * Transforms dimension value to points.
 * @param handle
 * @param dpi to convert px unit
 * @return the dimension value with measure of points
 * @since 2.3
 */
public static double convertToPoints(org.eclipse.birt.report.model.api.DimensionHandle handle,int dpi){
  double retValue=0.0;
  if (handle.isSet()) {
    if (handle.getUnits() == DesignChoiceConstants.UNITS_PT) {
      retValue=handle.getMeasure();
    }
 else     if (handle.getUnits() == DesignChoiceConstants.UNITS_PX) {
      retValue=(handle.getMeasure() * 72d) / dpi;
    }
 else {
      retValue=DimensionUtil.convertTo(handle.getMeasure(),handle.getUnits(),DesignChoiceConstants.UNITS_PT).getMeasure();
    }
  }
  return retValue;
}","/** 
 * Transforms dimension value to points.
 * @param handle
 * @param dpi to convert px unit
 * @return the dimension value with measure of points
 * @since 2.3
 */
public static double convertToPoints(org.eclipse.birt.report.model.api.DimensionHandle handle,int dpi){
  double retValue=0.0;
  if (handle.isSet() && handle.getMeasure() > 0 && handle.getUnits().trim().length() > 0) {
    if (handle.getUnits() == DesignChoiceConstants.UNITS_PT) {
      retValue=handle.getMeasure();
    }
 else     if (handle.getUnits() == DesignChoiceConstants.UNITS_PX) {
      retValue=(handle.getMeasure() * 72d) / dpi;
    }
 else {
      retValue=DimensionUtil.convertTo(handle.getMeasure(),handle.getUnits(),DesignChoiceConstants.UNITS_PT).getMeasure();
    }
  }
  return retValue;
}",0.9543010752688172
73197,"public void test(){
  WordRecognizerWrapper wr=new WordRecognizerWrapper(testStr,java.util.Locale.ENGLISH);
  Word word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
}","public void test(){
  WordRecognizerWrapper wr=new WordRecognizerWrapper(testStr,java.util.Locale.ENGLISH);
  Word word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  wr=new WordRecognizerWrapper(testStr2,java.util.Locale.ENGLISH);
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  wr=new WordRecognizerWrapper(testStr3,java.util.Locale.ENGLISH);
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
}",0.8624192059095106
73198,"private void addDataExpForAggregate(String expr){
  lstTransformedExprs.add(expr);
}","private void addDataExpForAggregate(String expr,String aggExp){
  String key=generateKey(expr,aggExp);
  if (!lhmTransformedExprs.containsKey(key)) {
    lhmTransformedExprs.put(key,new Integer(iLookupTransformedExprs++));
    lstTransformedExprs.add(expr);
  }
}",0.4265129682997118
73199,"private void addLookupForOrthogonalSeries(SeriesDefinition baseSD,EList lstOrthogonalSDs,IActionEvaluator iae) throws ChartException {
  for (int k=0; k < lstOrthogonalSDs.size(); k++) {
    SeriesDefinition orthoSD=(SeriesDefinition)lstOrthogonalSDs.get(k);
    Query qOrthogonalSeriesDefinition=orthoSD.getQuery();
    if (qOrthogonalSeriesDefinition == null) {
      return;
    }
    String strOrthoAgg=getOrthogonalAggregationExpression(orthoSD);
    if (addDataExp(qOrthogonalSeriesDefinition.getDefinition(),strOrthoAgg)) {
      addDataExpForAggregate(qOrthogonalSeriesDefinition.getDefinition());
    }
    String ySortKey=getSortKey(orthoSD);
    Series seOrthogonal=orthoSD.getDesignTimeSeries();
    EList elOrthogonalSeries=seOrthogonal.getDataDefinition();
    if (elOrthogonalSeries.isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(k),seOrthogonal},Messages.getResourceBundle(this.locale));
    }
    boolean bAnyQueries=false;
    for (int i=0; i < elOrthogonalSeries.size(); i++) {
      Query qOrthogonalSeries=(Query)elOrthogonalSeries.get(i);
      if (qOrthogonalSeries == null) {
        continue;
      }
      if (addDataExp(qOrthogonalSeries.getDefinition(),strOrthoAgg)) {
        addDataExpForAggregate(ChartUtil.createValueSeriesRowFullExpression(qOrthogonalSeries.getDefinition(),orthoSD,baseSD));
        bAnyQueries=true;
        if (fBaseSortExprIndex < 0) {
          String sortExpr=getSortKey(baseSD);
          if (sortExpr != null && sortExpr.equals(qOrthogonalSeries.getDefinition()) && baseSD.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
            fBaseSortExprIndex=findIndex(qOrthogonalSeries.getDefinition(),strOrthoAgg);
          }
        }
        if (fYSortExprIndex < 0) {
          if (ySortKey != null && ySortKey.equals(qOrthogonalSeries.getDefinition()) && orthoSD.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
            fYSortExprIndex=findIndex(qOrthogonalSeries.getDefinition(),strOrthoAgg);
          }
        }
      }
    }
    if (!bAnyQueries) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(k),seOrthogonal},Messages.getResourceBundle(this.locale));
    }
    String[] triggerExprs=DataProcessor.getSeriesTriggerExpressions(seOrthogonal,iae);
    if (triggerExprs != null) {
      for (int t=0; t < triggerExprs.length; t++) {
        if (addDataExp(triggerExprs[t],strOrthoAgg)) {
          addDataExpForAggregate(triggerExprs[t]);
        }
      }
    }
  }
}","private void addLookupForOrthogonalSeries(SeriesDefinition baseSD,EList lstOrthogonalSDs,IActionEvaluator iae) throws ChartException {
  for (int k=0; k < lstOrthogonalSDs.size(); k++) {
    SeriesDefinition orthoSD=(SeriesDefinition)lstOrthogonalSDs.get(k);
    Query qOrthogonalSeriesDefinition=orthoSD.getQuery();
    if (qOrthogonalSeriesDefinition == null) {
      return;
    }
    String strOrthoAgg=getOrthogonalAggregationExpression(orthoSD);
    if (addDataExp(qOrthogonalSeriesDefinition.getDefinition(),strOrthoAgg)) {
      addDataExpForAggregate(qOrthogonalSeriesDefinition.getDefinition(),strOrthoAgg);
    }
    String ySortKey=getSortKey(orthoSD);
    Series seOrthogonal=orthoSD.getDesignTimeSeries();
    EList elOrthogonalSeries=seOrthogonal.getDataDefinition();
    if (elOrthogonalSeries.isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(k),seOrthogonal},Messages.getResourceBundle(this.locale));
    }
    boolean bAnyQueries=false;
    for (int i=0; i < elOrthogonalSeries.size(); i++) {
      Query qOrthogonalSeries=(Query)elOrthogonalSeries.get(i);
      if (qOrthogonalSeries == null) {
        continue;
      }
      if (addDataExp(qOrthogonalSeries.getDefinition(),strOrthoAgg)) {
        addDataExpForAggregate(ChartUtil.createValueSeriesRowFullExpression(qOrthogonalSeries.getDefinition(),orthoSD,baseSD),strOrthoAgg);
        bAnyQueries=true;
        if (fBaseSortExprIndex < 0) {
          String sortExpr=getSortKey(baseSD);
          if (sortExpr != null && sortExpr.equals(qOrthogonalSeries.getDefinition()) && baseSD.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
            fBaseSortExprIndex=findIndex(qOrthogonalSeries.getDefinition(),strOrthoAgg);
          }
        }
        if (fYSortExprIndex < 0) {
          if (ySortKey != null && ySortKey.equals(qOrthogonalSeries.getDefinition()) && orthoSD.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
            fYSortExprIndex=findIndex(qOrthogonalSeries.getDefinition(),strOrthoAgg);
          }
        }
      }
    }
    if (!bAnyQueries) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{String.valueOf(k),seOrthogonal},Messages.getResourceBundle(this.locale));
    }
    String[] triggerExprs=DataProcessor.getSeriesTriggerExpressions(seOrthogonal,iae);
    if (triggerExprs != null) {
      for (int t=0; t < triggerExprs.length; t++) {
        if (addDataExp(triggerExprs[t],strOrthoAgg)) {
          addDataExpForAggregate(triggerExprs[t],strOrthoAgg);
        }
      }
    }
  }
}",0.993210109392682
73200,"private boolean addDataExpOfBaseSeries(String dataExp){
  boolean result=addDataExp(dataExp,""String_Node_Str"");
  if (result) {
    addDataExpForAggregate(dataExp);
  }
  return result;
}","private boolean addDataExpOfBaseSeries(String dataExp){
  boolean result=addDataExp(dataExp,""String_Node_Str"");
  if (result) {
    addDataExpForAggregate(dataExp,""String_Node_Str"");
  }
  return result;
}",0.9540816326530612
73201,"/** 
 * Add common sort expression by the specified expression.
 * @param baseSD
 */
private void addCommonSortKey(SeriesDefinition baseSD){
  if (fBaseSortExprIndex < 0 && baseSD.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
    String sortExpr=getSortKey(baseSD);
    if (sortExpr != null) {
      if (addDataExp(sortExpr,""String_Node_Str"")) {
        addDataExpForAggregate(sortExpr);
      }
      fBaseSortExprIndex=findIndexOfBaseSeries(sortExpr);
    }
  }
}","/** 
 * Add common sort expression by the specified expression.
 * @param baseSD
 */
private void addCommonSortKey(SeriesDefinition baseSD){
  if (fBaseSortExprIndex < 0 && baseSD.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
    String sortExpr=getSortKey(baseSD);
    if (sortExpr != null) {
      if (addDataExp(sortExpr,""String_Node_Str"")) {
        addDataExpForAggregate(sortExpr,""String_Node_Str"");
      }
      fBaseSortExprIndex=findIndexOfBaseSeries(sortExpr);
    }
  }
}",0.9816700610997964
73202,"public Object get(String name,Scriptable start){
  DummyParameterAttribute attr=(DummyParameterAttribute)this.params.get(this.parameterName);
  if (attr == null) {
    return null;
  }
  if (FIELD_VALUE.equals(name)) {
    return attr.getValue();
  }
 else   if (FIELD_DISPLAY_TEXT.equals(name)) {
    return attr.getDisplayText();
  }
  Object value=attr.getValue();
  Scriptable jsStr=Context.toObject(value,start);
  if (jsStr != null) {
    return jsStr.getPrototype().get(name,jsStr);
  }
  return null;
}","public Object get(String name,Scriptable start){
  DummyParameterAttribute attr=(DummyParameterAttribute)this.params.get(this.parameterName);
  if (attr == null) {
    return null;
  }
  if (FIELD_VALUE.equals(name)) {
    return attr.getValue();
  }
 else   if (FIELD_DISPLAY_TEXT.equals(name)) {
    return attr.getDisplayText();
  }
  Object value=attr.getValue();
  Scriptable jsStr=Context.toObject(value,start);
  if (jsStr != null && jsStr.getPrototype() != null) {
    return jsStr.getPrototype().get(name,jsStr);
  }
  return null;
}",0.9695817490494296
73203,"public boolean has(String name,Scriptable scope){
  if (FIELD_VALUE.equals(name) || FIELD_DISPLAY_TEXT.equals(name)) {
    return true;
  }
  if (jsStrPrototype == null) {
    jsStrPrototype=Context.toObject(""String_Node_Str"",scope);
    if (jsStrPrototype != null) {
      jsStrPrototype=jsStrPrototype.getPrototype();
    }
  }
  return jsStrPrototype.has(name,scope);
}","public boolean has(String name,Scriptable scope){
  if (FIELD_VALUE.equals(name) || FIELD_DISPLAY_TEXT.equals(name)) {
    return true;
  }
  if (jsStrPrototype == null) {
    jsStrPrototype=Context.toObject(""String_Node_Str"",scope);
    if (jsStrPrototype != null) {
      jsStrPrototype=jsStrPrototype.getPrototype();
    }
  }
  return jsStrPrototype != null && jsStrPrototype.has(name,scope);
}",0.9662337662337662
73204,"public void initialize(IEmitterServices services){
  this.services=services;
  Object fd=services.getOption(RenderOptionBase.OUTPUT_FILE_NAME);
  File file=null;
  try {
    if (fd != null) {
      file=new File(fd.toString());
      File parent=file.getParentFile();
      if (parent != null && !parent.exists()) {
        parent.mkdirs();
      }
      out=new BufferedOutputStream(new FileOutputStream(file));
    }
  }
 catch (  FileNotFoundException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  if (out == null) {
    Object value=services.getOption(RenderOptionBase.OUTPUT_STREAM);
    if (value != null && value instanceof OutputStream) {
      out=(OutputStream)value;
    }
 else {
      try {
        file=new File(REPORT_FILE);
        out=new BufferedOutputStream(new FileOutputStream(file));
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=new HTMLWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    HashMap options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    htmlRtLFlag=htmlOption.getHtmlRtLFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=new MetadataEmitter(writer,htmlOption,idGenerator);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
    outputMasterPageMargins=htmlOption.getOutputMasterPageMargins();
  }
}","public void initialize(IEmitterServices services){
  this.services=services;
  this.out=EmitterUtil.getOuputStream(services,REPORT_FILE);
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=new HTMLWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    HashMap options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    htmlRtLFlag=htmlOption.getHtmlRtLFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=new MetadataEmitter(writer,htmlOption,idGenerator);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
    outputMasterPageMargins=htmlOption.getOutputMasterPageMargins();
  }
}",0.8093674764718757
73205,"/** 
 * Initializes the pdfEmitter.
 * @param services the emitter svervices object.
 */
private void initialize(IEmitterServices services){
  this.services=services;
  reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  Object fd=services.getOption(RenderOption.OUTPUT_FILE_NAME);
  File file=null;
  try {
    if (fd != null) {
      file=new File(fd.toString());
      File parent=file.getParentFile();
      if (parent != null && !parent.exists()) {
        parent.mkdirs();
      }
      output=new FileOutputStream(file);
    }
  }
 catch (  FileNotFoundException fnfe) {
    logger.log(Level.WARNING,fnfe.getMessage(),fnfe);
  }
  if (output == null) {
    Object value=services.getOption(RenderOption.OUTPUT_STREAM);
    if (value != null && value instanceof OutputStream) {
      output=(OutputStream)value;
    }
 else {
      try {
        file=new File(""String_Node_Str"");
        output=new FileOutputStream(file);
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
}","/** 
 * Initializes the pdfEmitter.
 * @param services the emitter svervices object.
 */
private void initialize(IEmitterServices services){
  this.services=services;
  reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.output=EmitterUtil.getOuputStream(services,""String_Node_Str"");
}",0.4628606507059545
73206,"/** 
 * Initializes the pdfEmitter.
 * @param services the emitter svervices object.
 */
private void initialize(IEmitterServices services){
  this.services=services;
  IReportRunnable reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  Object fd=services.getOption(RenderOption.OUTPUT_FILE_NAME);
  File file=null;
  try {
    if (fd != null) {
      file=new File(fd.toString());
      File parent=file.getParentFile();
      if (parent != null && !parent.exists()) {
        parent.mkdirs();
      }
      output=new FileOutputStream(file);
    }
  }
 catch (  FileNotFoundException fnfe) {
    logger.log(Level.WARNING,fnfe.getMessage(),fnfe);
  }
  if (output == null) {
    Object value=services.getOption(RenderOption.OUTPUT_STREAM);
    if (value != null && value instanceof OutputStream) {
      output=(OutputStream)value;
    }
 else {
      try {
        file=new File(""String_Node_Str"");
        output=new FileOutputStream(file);
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
}","/** 
 * Initializes the pdfEmitter.
 * @param services the emitter svervices object.
 */
private void initialize(IEmitterServices services){
  this.services=services;
  IReportRunnable reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.output=EmitterUtil.getOuputStream(services,""String_Node_Str"");
}",0.473208910295003
73207,"public void close() throws IOException {
  writer.stopRenderer();
}","public void close() throws IOException {
  writer.close();
}",0.8976377952755905
73208,"/** 
 * Initializes the PPTEmitter.
 * @param services the emitter services object.
 */
public void initialize(IEmitterServices services){
  this.services=services;
  IReportRunnable reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  Object fd=services.getOption(RenderOption.OUTPUT_FILE_NAME);
  File file=null;
  try {
    if (fd != null) {
      file=new File(fd.toString());
      File parent=file.getParentFile();
      if (parent != null && !parent.exists()) {
        parent.mkdirs();
      }
      pptOutput=new FileOutputStream(file);
    }
  }
 catch (  FileNotFoundException fnfe) {
    logger.log(Level.WARNING,fnfe.getMessage(),fnfe);
  }
  if (pptOutput == null) {
    Object value=services.getOption(RenderOption.OUTPUT_STREAM);
    if (value instanceof OutputStream) {
      pptOutput=(OutputStream)value;
    }
 else {
      try {
        file=new File(REPORT_FILE);
        pptOutput=new FileOutputStream(file);
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
}","/** 
 * Initializes the PPTEmitter.
 * @param services the emitter services object.
 */
public void initialize(IEmitterServices services){
  this.services=services;
  IReportRunnable reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.pptOutput=EmitterUtil.getOuputStream(services,REPORT_FILE);
}",0.4844796104686549
73209,"public void testGetPageCount() throws EngineException {
  String design=""String_Node_Str"";
  IReportDocument document=engine.openReportDocument(""String_Node_Str"");
  test(document,""String_Node_Str"");
  test(document,""String_Node_Str"");
}","public void testGetPageCount() throws EngineException {
  String design=""String_Node_Str"";
  IReportDocument document=createReportDocument(design);
  test(document,""String_Node_Str"");
  test(document,""String_Node_Str"");
}",0.8296943231441049
73210,"/** 
 * Zooms OUT 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomOut(){
  if (bStepFixed) {
    return false;
  }
  if (((Number)oStep).doubleValue() >= Double.MAX_VALUE) {
    return false;
  }
  if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) >= 1) {
        oStep=new Double(dStep * 10);
      }
 else {
        final int n=iaLogarithmicDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            oStep=new Double(iaLogarithmicDeltas[i + 1]);
            return true;
          }
        }
        return false;
      }
    }
 else     if ((iType & LINEAR) == LINEAR) {
      double dStep=asDouble(oStep).doubleValue();
      if (bIntegralZoom) {
        double dPower=Math.log(dStep) / LOG_10;
        if (dPower < 0) {
          dPower=Math.floor(dPower);
        }
 else {
          dPower=ChartUtil.alignWithInt(dPower);
        }
        dPower=Math.pow(10,dPower);
        dStep/=dPower;
        dStep=Math.round(dStep);
        int n=iaLinearDeltas.length;
        int i=0;
        for (; i < n; i++) {
          if (dStep == iaLinearDeltas[i]) {
            if (i < n - 1) {
              dStep=iaLinearDeltas[i + 1] * dPower;
            }
 else {
              dPower*=20;
              dStep=iaLinearDeltas[0] * dPower;
            }
            break;
          }
        }
        if (i == n) {
          throw new RuntimeException(new ChartException(ChartEnginePlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",new Object[]{new Double(dStep * dPower)},Messages.getResourceBundle(rtc.getULocale())));
        }
        if (((Number)oStep).doubleValue() == dStep) {
          return false;
        }
      }
 else {
        dStep*=2;
      }
      dStep=ChartUtil.alignWithInt(dStep);
      oStep=new Double(dStep);
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(oUnit);
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep++;
          oStep=new Integer(iStep);
        }
 else {
          int i=0, n=ia.length;
          for (; i < n; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == n - 1) {
            ia=iaCalendarDeltas[icu + 1];
            oUnit=new Integer(iaCalendarUnits[icu + 1]);
            if (ia == null) {
              oStep=new Integer(1);
              return true;
            }
            i=-1;
          }
          oStep=new Integer(ia[i + 1]);
          break;
        }
      }
    }
  }
  return true;
}","/** 
 * Zooms OUT 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomOut(){
  if (bStepFixed || this.getTickCordinates().size() < 3) {
    return false;
  }
  if (((Number)oStep).doubleValue() >= Double.MAX_VALUE) {
    return false;
  }
  if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) >= 1) {
        oStep=new Double(dStep * 10);
      }
 else {
        final int n=iaLogarithmicDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            oStep=new Double(iaLogarithmicDeltas[i + 1]);
            return true;
          }
        }
        return false;
      }
    }
 else     if ((iType & LINEAR) == LINEAR) {
      double dStep=asDouble(oStep).doubleValue();
      if (bIntegralZoom) {
        double dPower=Math.log(dStep) / LOG_10;
        if (dPower < 0) {
          dPower=Math.floor(dPower);
        }
 else {
          dPower=ChartUtil.alignWithInt(dPower);
        }
        dPower=Math.pow(10,dPower);
        dStep/=dPower;
        dStep=Math.round(dStep);
        int n=iaLinearDeltas.length;
        int i=0;
        for (; i < n; i++) {
          if (dStep == iaLinearDeltas[i]) {
            if (i < n - 1) {
              dStep=iaLinearDeltas[i + 1] * dPower;
            }
 else {
              dPower*=20;
              dStep=iaLinearDeltas[0] * dPower;
            }
            break;
          }
        }
        if (i == n) {
          throw new RuntimeException(new ChartException(ChartEnginePlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",new Object[]{new Double(dStep * dPower)},Messages.getResourceBundle(rtc.getULocale())));
        }
        if (((Number)oStep).doubleValue() == dStep) {
          return false;
        }
      }
 else {
        dStep*=2;
      }
      dStep=ChartUtil.alignWithInt(dStep);
      oStep=new Double(dStep);
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(oUnit);
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep++;
          oStep=new Integer(iStep);
        }
 else {
          int i=0, n=ia.length;
          for (; i < n; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == n - 1) {
            ia=iaCalendarDeltas[icu + 1];
            oUnit=new Integer(iaCalendarUnits[icu + 1]);
            if (ia == null) {
              oStep=new Integer(1);
              return true;
            }
            i=-1;
          }
          oStep=new Integer(ia[i + 1]);
          break;
        }
      }
    }
  }
  return true;
}",0.9933344727397028
73211,"public List convertSelectionToModelLisr(List list){
  List retValue=new ArrayList();
  int size=list.size();
  boolean isDummy=false;
  for (int i=0; i < size; i++) {
    Object object=list.get(i);
    if (!(object instanceof EditPart)) {
      continue;
    }
    EditPart part=(EditPart)object;
    if (part instanceof DummyEditpart) {
      retValue.add(part.getModel());
      isDummy=true;
    }
 else     if (isDummy) {
      break;
    }
 else     if (part.getModel() instanceof ListBandProxy) {
      retValue.add(((ListBandProxy)part.getModel()).getSlotHandle());
    }
 else {
      Object model=part.getModel();
      if (model instanceof IAdaptable) {
        Object temp=((IAdaptable)model).getAdapter(DesignElementHandle.class);
        model=temp == null ? model : temp;
      }
      retValue.add(model);
    }
  }
  return retValue;
}","public List convertSelectionToModelLisr(List list){
  List retValue=new ArrayList();
  int size=list.size();
  boolean isDummy=false;
  for (int i=0; i < size; i++) {
    Object object=list.get(i);
    if (!(object instanceof EditPart)) {
      continue;
    }
    EditPart part=(EditPart)object;
    if (part instanceof DummyEditpart) {
      retValue.add(part.getModel());
      isDummy=true;
    }
 else     if (isDummy) {
      break;
    }
 else     if (part.getModel() instanceof ListBandProxy) {
      retValue.add(((ListBandProxy)part.getModel()).getSlotHandle());
    }
 else {
      Object model=part.getModel();
      if (model instanceof IAdaptable) {
        Object temp=((IAdaptable)model).getAdapter(DesignElementHandle.class);
        model=temp == null ? model : temp;
      }
      if (model instanceof ReportItemHandle) {
        ReportItemHandle handle=(ReportItemHandle)model;
        if (handle.getCurrentView() != null) {
          model=handle.getCurrentView();
        }
      }
      retValue.add(model);
    }
  }
  return retValue;
}",0.8619246861924686
73212,"protected void propertyChange(Map info){
  Set set=info.keySet();
  if (set.contains(IReportItemModel.MULTI_VIEWS_PROP) && getMultipleAdapter().getViews().size() > 0) {
    refresh();
    return;
  }
  super.propertyChange(info);
}","protected void propertyChange(Map info){
  Set set=info.keySet();
  if (set.contains(IReportItemModel.MULTI_VIEWS_PROP) && getMultipleAdapter().getViews().size() > 0) {
    refresh();
    UIUtil.resetViewSelection(getViewer(),true);
    return;
  }
  super.propertyChange(info);
}",0.9041095890410958
73213,"public void defineCube(CubeHandle cubeHandle) throws BirtException {
  Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
  Iterator itr=involvedDataSets.iterator();
  while (itr.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)itr.next();
    BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
    BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
    this.defineDataSource(baseDataSource);
    this.defineDataSet(baseDataSet);
  }
  if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
    this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
  }
}","public void defineCube(CubeHandle cubeHandle) throws BirtException {
  Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
  Iterator itr=involvedDataSets.iterator();
  while (itr.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)itr.next();
    BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
    BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
    if (baseDataSource != null)     this.defineDataSource(baseDataSource);
    this.defineDataSet(baseDataSet);
  }
  if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
    this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
  }
}",0.9767103347889374
73214,"/** 
 */
private void populateTypesTable(){
  Collection cTypes=ChartUIExtensionsImpl.instance().getUIChartTypeExtensions();
  Iterator iterTypes=cTypes.iterator();
  while (iterTypes.hasNext()) {
    IChartType type=(IChartType)iterTypes.next();
    if (((ChartWizardContext)context).isEnabled(type.getName())) {
      htTypes.put(type.getName(),type);
    }
  }
}","/** 
 */
private void populateTypesTable(){
  htTypes.clear();
  Collection cTypes=ChartUIExtensionsImpl.instance().getUIChartTypeExtensions();
  Iterator iterTypes=cTypes.iterator();
  while (iterTypes.hasNext()) {
    IChartType type=(IChartType)iterTypes.next();
    if (((ChartWizardContext)context).isEnabled(type.getName())) {
      htTypes.put(type.getName(),type);
    }
  }
}",0.9746328437917224
73215,"/** 
 * Get the parameter value from .rptconfig file if it does exist
 * @return Object[] the parameter value
 */
private Object getParamValue(ScalarParameterHandle paramHandle){
  String designFileName=designModule.getFileName();
  String reportConfigName=designFileName.substring(0,designFileName.length() - ""String_Node_Str"".length()) + ""String_Node_Str"";
  File file=new File(reportConfigName);
  if (file.exists()) {
    String paraName=paramHandle.getName();
    ScalarParameterHandle parameterHandle=(ScalarParameterHandle)designModule.findParameter(paraName);
    paraName=paraName + ""String_Node_Str"" + parameterHandle.getID();
    SessionHandle sessionHandle=new DesignEngine(null).newSessionHandle(ULocale.US);
    ReportDesignHandle rdHandle=null;
    try {
      rdHandle=sessionHandle.openDesign(reportConfigName);
    }
 catch (    DesignFileException e) {
      return null;
    }
    if (rdHandle != null) {
      List values=new ArrayList();
      Iterator configVars=rdHandle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null) {
          String varName=prepareConfigVarName(configVar.getName());
          Object varValue=configVar.getValue();
          if (varName == null || varValue == null) {
            continue;
          }
          if (varName.equals(paraName)) {
            String value=(String)varValue;
            values.add(value);
          }
          if (isNullValue(varName,(String)varValue,paraName)) {
            if (!parameterHandle.getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
              return null;
            }
            return new Object[0];
          }
        }
      }
      if (values.size() > 0) {
        if (parameterHandle.getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_SIMPLE)) {
          return values.get(0);
        }
        return values.toArray();
      }
    }
  }
  return null;
}","/** 
 * Get the parameter value from .rptconfig file if it does exist
 * @return Object[] the parameter value
 */
private Object getParamValue(ScalarParameterHandle paramHandle){
  String designFileName=designModule.getFileName();
  String reportConfigName=designFileName.substring(0,designFileName.length() - ""String_Node_Str"".length()) + ""String_Node_Str"";
  File file=new File(reportConfigName);
  if (file.exists()) {
    String paraName=paramHandle.getName();
    ScalarParameterHandle parameterHandle=(ScalarParameterHandle)designModule.findParameter(paraName);
    paraName=paraName + ""String_Node_Str"" + parameterHandle.getID();
    SessionHandle sessionHandle=new DesignEngine(null).newSessionHandle(ULocale.US);
    ReportDesignHandle rdHandle=null;
    try {
      rdHandle=sessionHandle.openDesign(reportConfigName);
    }
 catch (    DesignFileException e) {
      return null;
    }
    if (rdHandle != null) {
      List values=new ArrayList();
      Iterator configVars=rdHandle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null) {
          String varName=prepareConfigVarName(configVar.getName());
          Object varValue=configVar.getValue();
          if (varName == null || varValue == null) {
            continue;
          }
          if (varName.equals(paraName)) {
            String value=(String)varValue;
            values.add(value);
          }
          if (isNullValue(varName,(String)varValue,paraName)) {
            if (!parameterHandle.getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
              return null;
            }
            return new Object[0];
          }
        }
      }
      if (values.size() > 0) {
        if (parameterHandle.getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_SIMPLE)) {
          try {
            return DataTypeUtil.convert(values.get(0),DataAdapterUtil.modelDataTypeToCoreDataType(parameterHandle.getDataType()));
          }
 catch (          BirtException e) {
            return null;
          }
        }
        try {
          Object[] reValues=new Object[values.size()];
          for (int i=0; i < reValues.length; i++) {
            reValues[i]=DataTypeUtil.convert(values.get(i),DataAdapterUtil.modelDataTypeToCoreDataType(parameterHandle.getDataType()));
          }
          return reValues;
        }
 catch (        BirtException e) {
          return null;
        }
      }
    }
  }
  return null;
}",0.8636167457919723
73216,"private void printCube(CubeCursor cursor,List columnEdgeBindingNames,List rowEdgeBindingNames,String measureBindingNames,String columnAggr,String rowAggr,String overallAggr) throws Exception {
  String output=getOutputFromCursor(cursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,columnAggr,rowAggr,overallAggr);
  this.testPrint(output);
  this.checkOutputFile();
  close(cursor);
}","private void printCube(CubeCursor cursor,List columnEdgeBindingNames,List rowEdgeBindingNames,String measureBindingNames,String columnAggr,String rowAggr,String overallAggr) throws Exception {
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,columnAggr,rowAggr,overallAggr,true);
}",0.840499306518724
73217,"protected void showLayoutTargetFeedback(Request request){
  if (getHost().getChildren().size() == 0)   return;
  boolean isCrossTabElement=false;
  if (request instanceof ChangeBoundsRequest) {
    List editParts=((ChangeBoundsRequest)request).getEditParts();
    if (editParts.size() > 0) {
      isCrossTabElement=editParts.get(0) instanceof CrosstabCellEditPart;
    }
  }
  if (!isCrossTabElement) {
    Object template=TemplateTransfer.getInstance().getTemplate();
    if (template instanceof Object[] && ((Object[])template).length > 0) {
      Object dragObject=((Object[])template)[0];
      if (!(dragObject instanceof DimensionHandle || dragObject instanceof MeasureHandle)) {
        isCrossTabElement=false;
      }
    }
  }
  if (isCrossTabElement) {
    Transposer transposer=new Transposer();
    transposer.setEnabled(!isHorizontal());
    Rectangle r=transposer.t(getAbsoluteClientBounds((GraphicalEditPart)getHost()));
    Point p=transposer.t(getLocationFromRequest(request));
    boolean before=p.x <= r.x + (r.width / 2);
    Point p1=new Point(before ? r.x : r.x + r.width,r.y - 2);
    p1=transposer.t(p1);
    Point p2=new Point(before ? r.x : r.x + r.width,r.y + r.height + 7);
    p2=transposer.t(p2);
    setTargetFeedbackPoints(p1,p2);
  }
 else {
    super.showLayoutTargetFeedback(request);
  }
}","protected void showLayoutTargetFeedback(Request request){
  boolean isCrossTabElement=false;
  if (request instanceof ChangeBoundsRequest) {
    List editParts=((ChangeBoundsRequest)request).getEditParts();
    if (editParts.size() > 0) {
      isCrossTabElement=editParts.get(0) instanceof CrosstabCellEditPart;
    }
  }
  if (isCrossTabElement) {
    Object template=TemplateTransfer.getInstance().getTemplate();
    if (template instanceof Object[] && ((Object[])template).length > 0) {
      Object dragObject=((Object[])template)[0];
      if (!(dragObject instanceof DimensionHandle || dragObject instanceof LevelHandle || dragObject instanceof MeasureHandle)) {
        isCrossTabElement=true;
      }
    }
  }
  if (isCrossTabElement) {
    Transposer transposer=new Transposer();
    transposer.setEnabled(!isHorizontal());
    Rectangle r=transposer.t(getAbsoluteClientBounds((GraphicalEditPart)getHost()));
    Point p=transposer.t(getLocationFromRequest(request));
    boolean before=p.x <= r.x + (r.width / 2);
    Point p1=new Point(before ? r.x : r.x + r.width,r.y - 2);
    p1=transposer.t(p1);
    Point p2=new Point(before ? r.x : r.x + r.width,r.y + r.height + 7);
    p2=transposer.t(p2);
    setTargetFeedbackPoints(p1,p2);
  }
 else {
    super.showLayoutTargetFeedback(request);
  }
}",0.8125948406676783
73218,"/** 
 * @param pb
 * @param pb2
 * @return
 */
private boolean isEqualParameterHint(ParameterHint pb,ParameterHint pb2){
  return pb.getPosition() == pb2.getPosition() && isEqualString(pb.getName(),pb2.getName()) && isEqualString(pb.getDefaultInputValue(),pb2.getDefaultInputValue()) && isEqualString(pb.getDataType().toString(),pb2.getDataType().toString()) && pb.getNativeDataType() == pb2.getNativeDataType();
}","/** 
 * @param pb
 * @param pb2
 * @return
 */
private boolean isEqualParameterHint(ParameterHint pb,ParameterHint pb2){
  return pb.getPosition() == pb2.getPosition() && isEqualString(pb.getName(),pb2.getName()) && isEqualString(pb.getDefaultInputValue(),pb2.getDefaultInputValue()) && DataTypeUtil.toApiDataType(pb.getDataType()) == DataTypeUtil.toApiDataType(pb2.getDataType()) && pb.getNativeDataType() == pb2.getNativeDataType();
}",0.8141176470588235
73219,"public void run(VMRunnerConfiguration configuration,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  delegate.run(configuration,launch,monitor);
  IProcess[] ps=launch.getProcesses();
  if (runScript && ps != null && ps.length > 0) {
    if (monitor == null) {
      monitor=new NullProgressMonitor();
    }
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1);
    subMonitor.beginTask(""String_Node_Str"",1);
    ReportVMClient vm=new ReportVMClient();
    ScriptDebugTarget target=new ScriptDebugTarget(launch,vm,null,ps[0],config.helper.requestPort,config.helper.eventPort,config.helper.tempFolder);
    target.setFileName(config.helper.fileName);
    subMonitor.worked(1);
    subMonitor.done();
    ReportLaunchHelper.handleProcessTermination(launch,ps[0],config.helper.fileName,config.helper.tempFolder);
  }
}","public void run(VMRunnerConfiguration configuration,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  delegate.run(configuration,launch,monitor);
  IProcess[] ps=launch.getProcesses();
  if (ps != null && ps.length > 0) {
    if (runScript) {
      if (monitor == null) {
        monitor=new NullProgressMonitor();
      }
      IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1);
      subMonitor.beginTask(""String_Node_Str"",1);
      ReportVMClient vm=new ReportVMClient();
      ScriptDebugTarget target=new ScriptDebugTarget(launch,vm,null,ps[0],config.helper.requestPort,config.helper.eventPort,config.helper.tempFolder);
      target.setFileName(config.helper.fileName);
      subMonitor.worked(1);
      subMonitor.done();
    }
    ReportLaunchHelper.handleProcessTermination(launch,ps[0],config.helper.fileName,config.helper.tempFolder);
  }
}",0.9535962877030162
73220,"/** 
 * start cell update content cache
 * @param cell
 */
public int getRowSpan(ICellContent cell){
  int groupLevel=getGroupLevel();
  int rowSpan=cell.getRowSpan();
  if (groupLevel >= 0) {
    CellDesign cellDesign=(CellDesign)cell.getGenerateBy();
    if (cellDesign != null) {
      String dropType=cellDesign.getDrop();
      if (dropType != null && !""String_Node_Str"".equals(dropType)) {
        return createDropID(groupLevel,dropType);
      }
    }
  }
  return rowSpan;
}","/** 
 * start cell update content cache
 * @param cell
 */
public int getRowSpan(ICellContent cell){
  int groupLevel=getGroupLevel();
  int rowSpan=cell.getRowSpan();
  if (groupLevel >= 0) {
    Object generateBy=cell.getGenerateBy();
    if (generateBy instanceof CellDesign) {
      CellDesign cellDesign=(CellDesign)generateBy;
      if (cellDesign != null) {
        String dropType=cellDesign.getDrop();
        if (dropType != null && !""String_Node_Str"".equals(dropType)) {
          return createDropID(groupLevel,dropType);
        }
      }
    }
  }
  return rowSpan;
}",0.7086466165413534
73221,"private boolean needSave(IContent content){
  InstanceID id=content.getInstanceID();
  if (id == null || id.getComponentID() == -1) {
    return true;
  }
  IContent parent=(IContent)content.getParent();
  if (parent != null) {
    InstanceID pid=parent.getInstanceID();
    if (pid == null || pid.getComponentID() == -1) {
      return true;
    }
  }
  if (content instanceof AbstractContent) {
    return ((AbstractContent)content).needSave();
  }
  return true;
}","private boolean needSave(IContent content){
  InstanceID id=content.getInstanceID();
  if (id == null || id.getComponentID() == -1) {
    return true;
  }
  IContent parent=(IContent)content.getParent();
  if (parent != null) {
    InstanceID pid=parent.getInstanceID();
    if (pid == null || pid.getComponentID() == -1) {
      return true;
    }
    if (parent.getGenerateBy() instanceof ExtendedItemDesign) {
      return true;
    }
  }
  if (content instanceof AbstractContent) {
    return ((AbstractContent)content).needSave();
  }
  return true;
}",0.9130009775171064
73222,"/** 
 * Computes tick count
 * @return tick count
 */
public final int getTickCount() throws ChartException {
  if (this.oStepNumber != null) {
    if (bCategoryScale || (iType & NUMERICAL) != NUMERICAL) {
      logger.log(new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale())));
    }
 else {
      return this.oStepNumber.intValue() + 1;
    }
  }
  int nTicks=2;
  if (isCategoryScale()) {
    if (dsiData != null) {
      nTicks=dsiData.size() + 1;
      if (!bTickBetweenCategories) {
        nTicks++;
      }
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LINEAR) == LINEAR) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      if (!ChartUtil.mathEqual(dMax,dMin)) {
        long lNTicks=Math.round((dMax - dMin) / dStep);
        if ((lNTicks > TICKS_MAX) || (lNTicks < 2)) {
          if (lNTicks > TICKS_MAX) {
            nTicks=TICKS_MAX;
          }
 else {
            nTicks=2;
          }
          dStep=dMax / (nTicks - 1) - dMin / (nTicks - 1);
          checkValible(dStep,Messages.getString(""String_Node_Str""));
          oStep=new Double(dStep);
        }
 else {
          nTicks=(int)Math.ceil(lNTicks - 0.5) + 1;
        }
      }
 else       nTicks=5;
    }
 else     if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      double dMaxLog=(Math.log(dMax) / LOG_10);
      double dMinLog=(Math.log(dMin) / LOG_10);
      double dStepLog=(Math.log(dStep) / LOG_10);
      nTicks=(int)Math.ceil((dMaxLog - dMinLog) / dStepLog) + 1;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    final CDateTime cdt1=(CDateTime)oMinimum;
    final CDateTime cdt2=(CDateTime)oMaximum;
    double diff=CDateTime.computeDifference(cdt2,cdt1,asInteger(oUnit)) / asInteger(oStep);
    nTicks=(int)Math.round(diff) + 1;
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  if (nTicks > 10000) {
    nTicks=10000;
  }
  if (nTicks < 2) {
    nTicks=2;
  }
  return nTicks;
}","/** 
 * Computes tick count
 * @return tick count
 */
public final int getTickCount() throws ChartException {
  if (this.oStepNumber != null) {
    if (bCategoryScale || (iType & NUMERICAL) != NUMERICAL) {
      logger.log(new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale())));
    }
 else {
      return this.oStepNumber.intValue() + 1;
    }
  }
  int nTicks=2;
  if (isCategoryScale()) {
    if (dsiData != null) {
      nTicks=dsiData.size() + 1;
      if (!bTickBetweenCategories) {
        nTicks++;
      }
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LINEAR) == LINEAR) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      if (!ChartUtil.mathEqual(dMax,dMin)) {
        double lNTicks=Math.ceil((dMax - dMin) / dStep - 0.5) + 1;
        if ((lNTicks > TICKS_MAX) || (lNTicks < 2)) {
          if (lNTicks > TICKS_MAX) {
            nTicks=TICKS_MAX;
          }
 else {
            nTicks=2;
          }
          dStep=dMax / (nTicks - 1) - dMin / (nTicks - 1);
          checkValible(dStep,Messages.getString(""String_Node_Str""));
          oStep=new Double(dStep);
        }
 else {
          nTicks=(int)lNTicks;
        }
      }
 else       nTicks=5;
    }
 else     if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      double dMaxLog=(Math.log(dMax) / LOG_10);
      double dMinLog=(Math.log(dMin) / LOG_10);
      double dStepLog=(Math.log(dStep) / LOG_10);
      nTicks=(int)Math.ceil((dMaxLog - dMinLog) / dStepLog) + 1;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    final CDateTime cdt1=(CDateTime)oMinimum;
    final CDateTime cdt2=(CDateTime)oMaximum;
    double diff=CDateTime.computeDifference(cdt2,cdt1,asInteger(oUnit)) / asInteger(oStep);
    nTicks=(int)Math.round(diff) + 1;
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  if (nTicks > 10000) {
    nTicks=10000;
  }
  if (nTicks < 2) {
    nTicks=2;
  }
  return nTicks;
}",0.988931460195828
73223,"/** 
 * parse the URLs by input path string
 * @param paths
 * @return
 */
public static URL[] parseURLs(String paths){
  ArrayList urls=new ArrayList();
  if (paths != null) {
    String[] classpaths=paths.split(PROPERTYSEPARATOR,-1);
    if (classpaths != null && classpaths.length != 0) {
      for (int j=0; j < classpaths.length; j++) {
        File file=new File(classpaths[j]);
        try {
          urls.add(file.toURL());
        }
 catch (        MalformedURLException e) {
          e.printStackTrace();
        }
      }
    }
  }
  URL[] oUrls=new URL[urls.size()];
  urls.toArray(oUrls);
  return oUrls;
}","/** 
 * parse the URLs by input path string
 * @param paths
 * @return
 */
public static URL[] parseURLs(String paths){
  ArrayList urls=new ArrayList();
  if (paths != null && paths.trim().length() > 0) {
    String[] classpaths=paths.split(PROPERTYSEPARATOR,-1);
    if (classpaths != null && classpaths.length != 0) {
      for (int j=0; j < classpaths.length; j++) {
        File file=new File(classpaths[j]);
        try {
          urls.add(file.toURL());
        }
 catch (        MalformedURLException e) {
          e.printStackTrace();
        }
      }
    }
  }
  URL[] oUrls=new URL[urls.size()];
  urls.toArray(oUrls);
  return oUrls;
}",0.977183320220299
73224,"public boolean isEnabled(){
  return DNDUtil.handleValidateTargetCanContain(getSelection(),getClipBoardContents()) && DNDUtil.handleValidateTargetCanContainMore(getSelection(),DNDUtil.getObjectLength(getClipBoardContents()));
}","public boolean isEnabled(){
  if (getSelection() instanceof DesignElementHandle) {
    DesignElementHandle elementHandle=(DesignElementHandle)getSelection();
    if (getClipBoardContents() instanceof IDesignElement) {
      IDesignElement content=(IDesignElement)getClipBoardContents();
      try {
        if (!elementHandle.canPaste(DEUtil.getDefaultContentName(elementHandle),content))         return false;
      }
 catch (      SemanticException e) {
      }
    }
 else     if (getClipBoardContents() instanceof Object[]) {
      Object[] array=(Object[])getClipBoardContents();
      for (int i=0; i < array.length; i++) {
        if (array[i] instanceof IDesignElement) {
          IDesignElement content=(IDesignElement)array[i];
          try {
            if (!elementHandle.canPaste(DEUtil.getDefaultContentName(elementHandle),content))             return false;
          }
 catch (          SemanticException e) {
          }
        }
      }
    }
  }
  return DNDUtil.handleValidateTargetCanContain(getSelection(),getClipBoardContents()) && DNDUtil.handleValidateTargetCanContainMore(getSelection(),DNDUtil.getObjectLength(getClipBoardContents()));
}",0.1463414634146341
73225,"public URL getResource(String name){
  URL url=ApplicationClassLoader.class.getClassLoader().getResource(name);
  if (url == null) {
    if (loader == null) {
      createWrappedClassLoaders();
    }
    return loader.getResource(name);
  }
  return null;
}","public URL getResource(String name){
  URL url=IReportEngine.class.getClassLoader().getResource(name);
  if (url == null) {
    if (loader == null) {
      createWrappedClassLoaders();
    }
    return loader.getResource(name);
  }
  return null;
}",0.3801980198019802
73226,"public Class loadClass(String className) throws ClassNotFoundException {
  try {
    return ApplicationClassLoader.class.getClassLoader().loadClass(className);
  }
 catch (  ClassNotFoundException ex) {
    if (loader == null) {
      createWrappedClassLoaders();
    }
    return loader.loadClass(className);
  }
}","public Class loadClass(String className) throws ClassNotFoundException {
  try {
    return IReportEngine.class.getClassLoader().loadClass(className);
  }
 catch (  ClassNotFoundException ex) {
    if (loader == null) {
      createWrappedClassLoaders();
    }
    return loader.loadClass(className);
  }
}",0.9436392914653784
73227,"/** 
 * Constructor.
 * @param servletContext
 * @param config
 */
private ReportEngineService(ServletContext servletContext){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletContext == null) {
    return;
  }
  ParameterAccessor.initParameters(servletContext);
  config=new EngineConfig();
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageBaseUrl=IBirtConstants.SERVLET_PATH_PREVIEW + ""String_Node_Str"";
  String logLevel=ParameterAccessor.logLevel;
  Level level=logLevel != null && logLevel.length() > 0 ? Level.parse(logLevel) : Level.OFF;
  config.setLogConfig(ParameterAccessor.logFolder,level);
  String scriptLibDir=ParameterAccessor.scriptLibDir;
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  config.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  config.setEngineHome(""String_Node_Str"");
  LoggingUtil.configureLoggers(ParameterAccessor.loggers,level,ParameterAccessor.logFolder);
}","/** 
 * Constructor.
 * @param servletContext
 * @param config
 */
private ReportEngineService(ServletContext servletContext){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletContext == null) {
    return;
  }
  ParameterAccessor.initParameters(servletContext);
  config=new EngineConfig();
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageBaseUrl=IBirtConstants.SERVLET_PATH_PREVIEW + ""String_Node_Str"";
  String logLevel=ParameterAccessor.logLevel;
  Level level=logLevel != null && logLevel.length() > 0 ? Level.parse(logLevel) : Level.OFF;
  config.setLogConfig(ParameterAccessor.logFolder,level);
  String scriptLibDir=ParameterAccessor.scriptLibDir;
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  config.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  ClassLoader appClassLoader=BirtUtility.getAppClassLoader();
  if (appClassLoader == null)   appClassLoader=ReportEngineService.class.getClassLoader();
  config.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,appClassLoader);
  config.setEngineHome(""String_Node_Str"");
  LoggingUtil.configureLoggers(ParameterAccessor.loggers,level,ParameterAccessor.logFolder);
}",0.9425981873111784
73228,"/** 
 * Start web application.
 */
private static void startWebApp(){
  try {
    String debugMode=System.getProperty(REPORT_DEBUT_MODE);
    if (debugMode == null) {
      ViewerClassPathHelper.setWorkspaceClassPath();
    }
    WebappAccessor.start(ViewerPlugin.WEBAPP_CONTEXT);
  }
 catch (  CoreException e) {
  }
}","/** 
 * Start web application.
 */
private synchronized static void startWebApp(){
  try {
    String debugMode=System.getProperty(REPORT_DEBUT_MODE);
    if (debugMode == null) {
      String classpaths=ViewerClassPathHelper.getWorkspaceClassPath();
      URL[] urls=ViewerClassPathHelper.parseURLs(classpaths);
      if (reloadableClassLoader == null) {
        reloadableClassLoader=new ReloadableClassLoader(urls,WebViewer.class.getClassLoader());
      }
 else {
        reloadableClassLoader.setUrls(urls);
        reloadableClassLoader.reload();
      }
    }
    WebappAccessor.start(ViewerPlugin.WEBAPP_CONTEXT);
  }
 catch (  CoreException e) {
  }
}",0.6496424923391215
73229,"public ReportDocumentReader(String systemId,ReportEngine engine,IDocArchiveReader archive,boolean sharedArchive) throws EngineException {
  this.engine=engine;
  this.archive=archive;
  this.systemId=systemId;
  this.sharedArchive=sharedArchive;
  this.moduleOptions=new HashMap();
  this.moduleOptions.put(ModuleOption.PARSER_SEMANTIC_CHECK_KEY,Boolean.FALSE);
  try {
    archive.open();
    doRefresh();
  }
 catch (  IOException ee) {
    close();
    throw new EngineException(""String_Node_Str"",ee);
  }
}","public ReportDocumentReader(String systemId,ReportEngine engine,IDocArchiveReader archive,boolean sharedArchive) throws EngineException {
  this(systemId,engine,archive,sharedArchive,null);
}",0.4964336661911555
73230,"public IReportDocument openReportDocument(String systemId,IDocArchiveReader archive,Map options) throws EngineException {
  ReportDocumentReader reader=new ReportDocumentReader(systemId,engine,archive);
  if (options == null) {
    options=new HashMap();
  }
  intializeModuleOptions(options);
  reader.setModuleOptions(options);
  return reader;
}","public IReportDocument openReportDocument(String systemId,IDocArchiveReader archive,Map options) throws EngineException {
  if (options == null) {
    options=new HashMap();
  }
  intializeModuleOptions(options);
  ReportDocumentReader reader=new ReportDocumentReader(systemId,engine,archive,options);
  return reader;
}",0.7275449101796407
73231,"public Class loadClass(String className) throws ClassNotFoundException {
  try {
    return IReportEngine.class.getClassLoader().loadClass(className);
  }
 catch (  ClassNotFoundException ex) {
    if (loader == null) {
      createWrappedClassLoaders();
    }
    return loader.loadClass(className);
  }
}","public Class loadClass(String className) throws ClassNotFoundException {
  try {
    return ApplicationClassLoader.class.getClassLoader().loadClass(className);
  }
 catch (  ClassNotFoundException ex) {
    if (loader == null) {
      createWrappedClassLoaders();
    }
    return loader.loadClass(className);
  }
}",0.9436392914653784
73232,"public IDataQueryDefinition[] createReportQueries(IDataQueryDefinition parent) throws BirtException {
  if (crosstabItem == null) {
    throw new CrosstabException(modelHandle == null ? null : modelHandle.getElement(),Messages.getString(""String_Node_Str""));
  }
  IDataQueryDefinition cubeQuery=CrosstabQueryUtil.createCubeQuery(crosstabItem,parent,true,true,true,true,true,true);
  String emptyValue=crosstabItem.getEmptyCellValue();
  if (context != null) {
    processChildQuery(cubeQuery,crosstabItem.getHeader(),emptyValue);
    for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      processChildQuery(cubeQuery,mv.getCell(),emptyValue);
      processChildQuery(cubeQuery,mv.getHeader(),emptyValue);
      for (int j=0; j < mv.getAggregationCount(); j++) {
        processChildQuery(cubeQuery,mv.getAggregationCell(j),emptyValue);
      }
    }
    if (crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      for (int i=0; i < crosstabItem.getDimensionCount(ROW_AXIS_TYPE); i++) {
        DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,i);
        for (int j=0; j < dv.getLevelCount(); j++) {
          LevelViewHandle lv=dv.getLevel(j);
          processChildQuery(cubeQuery,lv.getCell(),emptyValue);
          processChildQuery(cubeQuery,lv.getAggregationHeader(),emptyValue);
        }
      }
    }
    if (crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      for (int i=0; i < crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
        DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,i);
        for (int j=0; j < dv.getLevelCount(); j++) {
          LevelViewHandle lv=dv.getLevel(j);
          processChildQuery(cubeQuery,lv.getCell(),emptyValue);
          processChildQuery(cubeQuery,lv.getAggregationHeader(),emptyValue);
        }
      }
    }
    processChildQuery(cubeQuery,crosstabItem.getGrandTotal(ROW_AXIS_TYPE),emptyValue);
    processChildQuery(cubeQuery,crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE),emptyValue);
  }
  return new IDataQueryDefinition[]{cubeQuery};
}","public IDataQueryDefinition[] createReportQueries(IDataQueryDefinition parent) throws BirtException {
  if (crosstabItem == null) {
    throw new CrosstabException(Messages.getString(""String_Node_Str""));
  }
  IDataQueryDefinition cubeQuery=CrosstabQueryUtil.createCubeQuery(crosstabItem,parent,true,true,true,true,true,true);
  String emptyValue=crosstabItem.getEmptyCellValue();
  if (context != null) {
    processChildQuery(cubeQuery,crosstabItem.getHeader(),emptyValue);
    for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      processChildQuery(cubeQuery,mv.getCell(),emptyValue);
      processChildQuery(cubeQuery,mv.getHeader(),emptyValue);
      for (int j=0; j < mv.getAggregationCount(); j++) {
        processChildQuery(cubeQuery,mv.getAggregationCell(j),emptyValue);
      }
    }
    if (crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      for (int i=0; i < crosstabItem.getDimensionCount(ROW_AXIS_TYPE); i++) {
        DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,i);
        for (int j=0; j < dv.getLevelCount(); j++) {
          LevelViewHandle lv=dv.getLevel(j);
          processChildQuery(cubeQuery,lv.getCell(),emptyValue);
          processChildQuery(cubeQuery,lv.getAggregationHeader(),emptyValue);
        }
      }
    }
    if (crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      for (int i=0; i < crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
        DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,i);
        for (int j=0; j < dv.getLevelCount(); j++) {
          LevelViewHandle lv=dv.getLevel(j);
          processChildQuery(cubeQuery,lv.getCell(),emptyValue);
          processChildQuery(cubeQuery,lv.getAggregationHeader(),emptyValue);
        }
      }
    }
    processChildQuery(cubeQuery,crosstabItem.getGrandTotal(ROW_AXIS_TYPE),emptyValue);
    processChildQuery(cubeQuery,crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE),emptyValue);
  }
  return new IDataQueryDefinition[]{cubeQuery};
}",0.987012987012987
73233,"/** 
 * Creates the cube query definition for chart. If parent definition is null, it's usually used for Live preview in chart builder. If chart in xtab, will return sub cube query definition.
 * @param parent
 * @return ICubeQueryDefinition for cube consuming orISubCubeQueryDefinition for chart in xtab case
 * @throws BirtException
 */
public IBaseCubeQueryDefinition createCubeQuery(IDataQueryDefinition parent) throws BirtException {
  bLivePreview=parent == null;
  CubeHandle cubeHandle=handle.getCube();
  ICubeQueryDefinition cubeQuery=null;
  if (cubeHandle == null) {
    cubeHandle=ChartXTabUtil.getBindingCube(handle);
    if (cubeHandle == null) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.NULL_DATASET,Messages.getString(""String_Node_Str""));
    }
    if (!bLivePreview) {
      ISubCubeQueryDefinition subQuery=createSubCubeQuery();
      if (subQuery != null) {
        return subQuery;
      }
    }
  }
  cubeQuery=ChartXTabUtil.getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName());
  initBindings(cubeQuery,cubeHandle);
  List sdList=getAllSeriesDefinitions(cm);
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    List queryList=sd.getDesignTimeSeries().getDataDefinition();
    for (int j=0; j < queryList.size(); j++) {
      Query query=(Query)queryList.get(j);
      bindSeriesQuery(query,cubeQuery,cubeHandle);
    }
    bindSeriesQuery(sd.getQuery(),cubeQuery,cubeHandle);
  }
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    addSorting(cubeQuery,cubeHandle,sd,i);
  }
  addCubeFilter(cubeQuery);
  return cubeQuery;
}","/** 
 * Creates the cube query definition for chart. If parent definition is null, it's usually used for Live preview in chart builder. If chart in xtab, will return sub cube query definition.
 * @param parent
 * @return ICubeQueryDefinition for cube consuming orISubCubeQueryDefinition for chart in xtab case
 * @throws BirtException
 */
public IBaseCubeQueryDefinition createCubeQuery(IDataQueryDefinition parent) throws BirtException {
  bLivePreview=parent == null;
  CubeHandle cubeHandle=handle.getCube();
  ICubeQueryDefinition cubeQuery=null;
  if (cubeHandle == null) {
    cubeHandle=ChartXTabUtil.getBindingCube(handle);
    if (cubeHandle == null) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.NULL_DATASET,Messages.getString(""String_Node_Str""));
    }
    if (!bLivePreview) {
      ISubCubeQueryDefinition subQuery=createSubCubeQuery();
      if (subQuery != null) {
        return subQuery;
      }
    }
  }
  cubeQuery=ChartXTabUtil.getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName());
  initBindings(cubeQuery,cubeHandle);
  List sdList=getAllSeriesDefinitions(cm);
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    List queryList=sd.getDesignTimeSeries().getDataDefinition();
    for (int j=0; j < queryList.size(); j++) {
      Query query=(Query)queryList.get(j);
      bindSeriesQuery(query,cubeQuery,cubeHandle);
    }
    bindSeriesQuery(sd.getQuery(),cubeQuery,cubeHandle);
  }
  Collection levelsInOrder=getAllLevelsInHierarchyOrder(cubeHandle,cubeQuery);
  for (Iterator measureNames=registeredMeasures.keySet().iterator(); measureNames.hasNext(); ) {
    Binding binding=(Binding)registeredBindings.get(measureNames.next());
    if (binding != null && binding.getAggregatOns().isEmpty()) {
      for (Iterator levels=levelsInOrder.iterator(); levels.hasNext(); ) {
        ILevelDefinition level=(ILevelDefinition)levels.next();
        String dimensionName=level.getHierarchy().getDimension().getName();
        binding.addAggregateOn(ExpressionUtil.createJSDimensionExpression(dimensionName,level.getName()));
      }
    }
  }
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    addSorting(cubeQuery,cubeHandle,sd,i);
  }
  addCubeFilter(cubeQuery);
  return cubeQuery;
}",0.8382316621387997
73234,"/** 
 * Adds measure or row/column edge according to query expression. Besides, generates column bindings, replace them in chart queries and add them in query definition.
 */
private void bindSeriesQuery(Query query,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  String expr=query.getDefinition();
  if (expr != null && expr.length() > 0) {
    boolean bBindingExp=ChartXTabUtil.isBinding(expr,true);
    if (bBindingExp && !ChartXTabUtil.isBinding(expr,false)) {
      expr=ExpressionUtil.createJSDataExpression(ChartXTabUtil.getBindingName(expr,true));
    }
    Binding colBinding=(Binding)registeredBindings.get(expr);
    if (bBindingExp || colBinding == null) {
      String bindingName=null;
      if (colBinding == null) {
        bindingName=StructureFactory.newComputedColumn(handle,expr.replaceAll(""String_Node_Str"",""String_Node_Str"")).getName();
        colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(new ScriptExpression(expr));
        registeredBindings.put(expr,colBinding);
        registeredQueries.put(bindingName,expr);
      }
 else {
        bindingName=colBinding.getBindingName();
        expr=(String)registeredQueries.get(bindingName);
      }
      cubeQuery.addBinding(colBinding);
      String measure=getMeasure(expr);
      if (measure != null) {
        IMeasureDefinition mDef=cubeQuery.createMeasure(measure);
        String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
        mDef.setAggrFunction(aggFun);
        registeredMeasures.put(bindingName,mDef);
      }
 else       if (isReferenceToDimLevel(expr)) {
        String[] levels=getTargetLevel(expr);
        String dimensionName=levels[0];
        final int edgeType=getEdgeType(dimensionName);
        IEdgeDefinition edge=cubeQuery.getEdge(edgeType);
        IHierarchyDefinition hieDef=null;
        if (edge == null) {
          edge=cubeQuery.createEdge(edgeType);
          IDimensionDefinition dimDef=edge.createDimension(dimensionName);
          hieDef=dimDef.createHierarchy(cube.getDimension(dimDef.getName()).getDefaultHierarchy().getQualifiedName());
        }
 else {
          hieDef=(IHierarchyDefinition)((IDimensionDefinition)edge.getDimensions().get(0)).getHierarchy().get(0);
        }
        ILevelDefinition levelDef=hieDef.createLevel(levels[1]);
        registeredLevels.put(bindingName,levelDef);
        LevelHandle levelHandle=cube.getDimension(levelDef.getHierarchy().getDimension().getName()).getDefaultHierarchy().getLevel(levelDef.getName());
        registeredLevelHandles.put(levelHandle,levelDef);
      }
    }
    if (!bBindingExp) {
      String newExpr=ExpressionUtil.createJSDataExpression(colBinding.getBindingName());
      query.setDefinition(newExpr);
    }
  }
}","/** 
 * Adds measure or row/column edge according to query expression. Besides, generates column bindings, replace them in chart queries and add them in query definition.
 */
private void bindSeriesQuery(Query query,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  String expr=query.getDefinition();
  if (expr != null && expr.length() > 0) {
    String bindingName=ChartXTabUtil.getBindingName(expr,true);
    boolean bBindingExp=bindingName != null;
    if (bindingName != null && !ChartXTabUtil.isBinding(expr,false)) {
      expr=ExpressionUtil.createJSDataExpression(bindingName);
    }
    Binding colBinding=null;
    if (bindingName != null) {
      colBinding=(Binding)registeredBindings.get(bindingName);
    }
 else {
      colBinding=(Binding)registeredBindings.get(expr);
    }
    if (colBinding != null || bindingName != null) {
      if (colBinding == null) {
        bindingName=StructureFactory.newComputedColumn(handle,expr.replaceAll(""String_Node_Str"",""String_Node_Str"")).getName();
        colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(new ScriptExpression(expr));
        registeredBindings.put(bindingName,colBinding);
        registeredQueries.put(bindingName,expr);
        registeredBindings.put(expr,colBinding);
      }
 else {
        bindingName=colBinding.getBindingName();
        expr=(String)registeredQueries.get(bindingName);
      }
      if (!cubeQuery.getBindings().contains(colBinding)) {
        cubeQuery.addBinding(colBinding);
      }
      String measure=ChartXTabUtil.getMeasureName(expr);
      if (measure != null) {
        IMeasureDefinition mDef=cubeQuery.createMeasure(measure);
        String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
        mDef.setAggrFunction(aggFun);
        registeredMeasures.put(bindingName,mDef);
      }
 else       if (ChartXTabUtil.isDimensionExpresion(expr)) {
        String[] levels=ChartXTabUtil.getLevelNameFromDimensionExpression(expr);
        String dimensionName=levels[0];
        final int edgeType=getEdgeType(dimensionName);
        IEdgeDefinition edge=cubeQuery.getEdge(edgeType);
        IHierarchyDefinition hieDef=null;
        if (edge == null) {
          edge=cubeQuery.createEdge(edgeType);
          IDimensionDefinition dimDef=edge.createDimension(dimensionName);
          hieDef=dimDef.createHierarchy(cube.getDimension(dimDef.getName()).getDefaultHierarchy().getQualifiedName());
        }
 else {
          hieDef=(IHierarchyDefinition)((IDimensionDefinition)edge.getDimensions().get(0)).getHierarchy().get(0);
        }
        boolean bMultipleLevels=!hieDef.getLevels().isEmpty();
        ILevelDefinition levelDef=hieDef.createLevel(levels[1]);
        registeredLevels.put(bindingName,levelDef);
        LevelHandle levelHandle=cube.getDimension(levelDef.getHierarchy().getDimension().getName()).getDefaultHierarchy().getLevel(levelDef.getName());
        registeredLevelHandles.put(levelHandle,levelDef);
        if (bMultipleLevels) {
          Iterator levelsInOrder=getAllLevelsInHierarchyOrder(cube,cubeQuery).iterator();
          hieDef.getLevels().clear();
          while (levelsInOrder.hasNext()) {
            ILevelDefinition level=(ILevelDefinition)levelsInOrder.next();
            hieDef.createLevel(level.getName());
          }
        }
      }
    }
    if (!bBindingExp && colBinding != null) {
      String newExpr=ExpressionUtil.createJSDataExpression(colBinding.getBindingName());
      query.setDefinition(newExpr);
    }
  }
}",0.7592137592137592
73235,"private void addSorting(ICubeQueryDefinition cubeQuery,CubeHandle cube,SeriesDefinition sd,int i) throws BirtException {
  if (sd.getSortKey() == null) {
    return;
  }
  String sortKey=sd.getSortKey().getDefinition();
  if (sd.isSetSorting() && sortKey != null && sortKey.length() > 0) {
    String sortKeyBinding=ChartXTabUtil.getBindingName(sd.getSortKey().getDefinition(),true);
    if (registeredLevels.containsKey(sortKeyBinding)) {
      ICubeSortDefinition sortDef=ChartXTabUtil.getCubeElementFactory().createCubeSortDefinition(sortKey,(ILevelDefinition)registeredLevels.get(sortKeyBinding),null,null,sd.getSorting() == SortOption.ASCENDING_LITERAL ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
      cubeQuery.addSort(sortDef);
    }
 else     if (registeredMeasures.containsKey(sortKeyBinding)) {
      Query targetQuery=i > 0 ? sd.getQuery() : (Query)sd.getDesignTimeSeries().getDataDefinition().get(0);
      IMeasureDefinition mDef=(IMeasureDefinition)registeredMeasures.get(sortKeyBinding);
      String targetBindingName=ChartXTabUtil.getBindingName(targetQuery.getDefinition(),true);
      Binding measureBinding=(Binding)registeredBindings.get(sortKey);
      Binding aggBinding=new Binding(measureBinding.getBindingName() + targetBindingName);
      aggBinding.setDataType(measureBinding.getDataType());
      aggBinding.setExpression(measureBinding.getExpression());
      aggBinding.addAggregateOn((String)registeredQueries.get(targetBindingName));
      aggBinding.setAggrFunction(mDef.getAggrFunction());
      cubeQuery.addBinding(aggBinding);
      ICubeSortDefinition sortDef=ChartXTabUtil.getCubeElementFactory().createCubeSortDefinition(ExpressionUtil.createJSDataExpression(aggBinding.getBindingName()),(ILevelDefinition)registeredLevels.get(targetBindingName),null,null,sd.getSorting() == SortOption.ASCENDING_LITERAL ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
      cubeQuery.addSort(sortDef);
    }
  }
}","private void addSorting(ICubeQueryDefinition cubeQuery,CubeHandle cube,SeriesDefinition sd,int i) throws BirtException {
  if (sd.getSortKey() == null) {
    return;
  }
  String sortKey=sd.getSortKey().getDefinition();
  if (sd.isSetSorting() && sortKey != null && sortKey.length() > 0) {
    String sortKeyBinding=ChartXTabUtil.getBindingName(sd.getSortKey().getDefinition(),true);
    if (registeredLevels.containsKey(sortKeyBinding)) {
      ICubeSortDefinition sortDef=ChartXTabUtil.getCubeElementFactory().createCubeSortDefinition(sortKey,(ILevelDefinition)registeredLevels.get(sortKeyBinding),null,null,sd.getSorting() == SortOption.ASCENDING_LITERAL ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
      cubeQuery.addSort(sortDef);
    }
 else     if (registeredMeasures.containsKey(sortKeyBinding)) {
      Query targetQuery=i > 0 ? sd.getQuery() : (Query)sd.getDesignTimeSeries().getDataDefinition().get(0);
      IMeasureDefinition mDef=(IMeasureDefinition)registeredMeasures.get(sortKeyBinding);
      String targetBindingName=ChartXTabUtil.getBindingName(targetQuery.getDefinition(),true);
      Binding measureBinding=(Binding)registeredBindings.get(sortKeyBinding);
      Binding aggBinding=new Binding(measureBinding.getBindingName() + targetBindingName);
      aggBinding.setDataType(measureBinding.getDataType());
      aggBinding.setExpression(measureBinding.getExpression());
      aggBinding.addAggregateOn((String)registeredQueries.get(targetBindingName));
      aggBinding.setAggrFunction(mDef.getAggrFunction());
      cubeQuery.addBinding(aggBinding);
      ICubeSortDefinition sortDef=ChartXTabUtil.getCubeElementFactory().createCubeSortDefinition(ExpressionUtil.createJSDataExpression(aggBinding.getBindingName()),(ILevelDefinition)registeredLevels.get(targetBindingName),null,null,sd.getSorting() == SortOption.ASCENDING_LITERAL ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
      cubeQuery.addSort(sortDef);
    }
  }
}",0.9982183761771444
73236,"private void initBindings(ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator bindings=ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext(); ) {
    ComputedColumnHandle column=(ComputedColumnHandle)bindings.next();
    Binding binding=new Binding(column.getName());
    binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
    binding.setExpression(new ScriptExpression(column.getExpression()));
    List lstAggOn=column.getAggregateOnList();
    if (!bLivePreview && !lstAggOn.isEmpty()) {
      addAggregateOn(binding,lstAggOn,cubeQuery,cube);
      binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
    }
    registeredBindings.put(ExpressionUtil.createJSDataExpression(column.getName()),binding);
    registeredQueries.put(binding.getBindingName(),column.getExpression());
  }
}","private void initBindings(ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator bindings=ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext(); ) {
    ComputedColumnHandle column=(ComputedColumnHandle)bindings.next();
    Binding binding=new Binding(column.getName());
    binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
    binding.setExpression(new ScriptExpression(column.getExpression()));
    binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
    List lstAggOn=column.getAggregateOnList();
    if (!bLivePreview && !lstAggOn.isEmpty()) {
      addAggregateOn(binding,lstAggOn,cubeQuery,cube);
    }
    registeredBindings.put(column.getName(),binding);
    registeredQueries.put(binding.getBindingName(),column.getExpression());
  }
}",0.7260201377848436
73237,"private ChartWithAxes createDefaultChart(AggregationCellHandle cell){
  ChartWithAxes cm=ChartWithAxesImpl.create();
  cm.setType(""String_Node_Str"");
  cm.setSubType(""String_Node_Str"");
  cm.setUnits(""String_Node_Str"");
  cm.setUnitSpacing(50);
  cm.getLegend().setVisible(false);
  cm.getTitle().setVisible(false);
  String exprMeasure=ExpressionUtil.createJSDataExpression(ChartXTabUtil.generateComputedColumnName(cell));
  String exprCategory=null;
  if (checkTransposed(cell)) {
    cm.setTransposed(true);
    Object content=getFirstContent(ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.ROW_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprCategory=dataItemHandle.getResultSetColumn();
    }
  }
 else {
    Object content=getFirstContent(ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.COLUMN_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprCategory=dataItemHandle.getResultSetColumn();
    }
  }
  SeriesDefinition sdBase=SeriesDefinitionImpl.create();
  sdBase.getSeriesPalette().shift(0);
  Series series=SeriesImpl.create();
  sdBase.getSeries().add(series);
  cm.getBaseAxes()[0].getSeriesDefinitions().add(sdBase);
  if (exprCategory != null) {
    Query query=QueryImpl.create(ExpressionUtil.createJSDataExpression(exprCategory));
    series.getDataDefinition().add(query);
  }
  SeriesDefinition sdOrth=SeriesDefinitionImpl.create();
  sdOrth.getSeriesPalette().shift(0);
  series=BarSeriesImpl.create();
  sdOrth.getSeries().add(series);
  cm.getOrthogonalAxes(cm.getBaseAxes()[0],true)[0].getSeriesDefinitions().add(sdOrth);
  if (exprMeasure != null) {
    Query query=QueryImpl.create(exprMeasure);
    series.getDataDefinition().add(query);
  }
  SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
  sampleData.getBaseSampleData().clear();
  sampleData.getOrthogonalSampleData().clear();
  BaseSampleData sampleDataBase=DataFactory.eINSTANCE.createBaseSampleData();
  sampleDataBase.setDataSetRepresentation(""String_Node_Str"");
  sampleData.getBaseSampleData().add(sampleDataBase);
  OrthogonalSampleData sampleDataOrth=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sampleDataOrth.setDataSetRepresentation(""String_Node_Str"");
  sampleDataOrth.setSeriesDefinitionIndex(0);
  sampleData.getOrthogonalSampleData().add(sampleDataOrth);
  cm.setSampleData(sampleData);
  return cm;
}","private ChartWithAxes createDefaultChart(AggregationCellHandle cell){
  ChartWithAxes cm=ChartWithAxesImpl.create();
  cm.setType(""String_Node_Str"");
  cm.setSubType(""String_Node_Str"");
  cm.setUnits(""String_Node_Str"");
  cm.setUnitSpacing(50);
  cm.getLegend().setVisible(false);
  cm.getTitle().setVisible(false);
  String exprMeasure=ChartXTabUtil.generateComputedColumnName(cell);
  String exprCategory=null;
  if (checkTransposed(cell)) {
    cm.setTransposed(true);
    Object content=getFirstContent(ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.ROW_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprCategory=dataItemHandle.getResultSetColumn();
    }
  }
 else {
    Object content=getFirstContent(ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.COLUMN_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprCategory=dataItemHandle.getResultSetColumn();
    }
  }
  SeriesDefinition sdBase=SeriesDefinitionImpl.create();
  sdBase.getSeriesPalette().shift(0);
  Series series=SeriesImpl.create();
  sdBase.getSeries().add(series);
  cm.getBaseAxes()[0].getSeriesDefinitions().add(sdBase);
  if (exprCategory != null) {
    Query query=QueryImpl.create(ExpressionUtil.createJSDataExpression(exprCategory));
    series.getDataDefinition().add(query);
  }
  SeriesDefinition sdOrth=SeriesDefinitionImpl.create();
  sdOrth.getSeriesPalette().shift(0);
  series=BarSeriesImpl.create();
  sdOrth.getSeries().add(series);
  cm.getOrthogonalAxes(cm.getBaseAxes()[0],true)[0].getSeriesDefinitions().add(sdOrth);
  if (exprMeasure != null) {
    Query query=QueryImpl.create(ExpressionUtil.createJSDataExpression(exprMeasure));
    series.getDataDefinition().add(query);
  }
  SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
  sampleData.getBaseSampleData().clear();
  sampleData.getOrthogonalSampleData().clear();
  BaseSampleData sampleDataBase=DataFactory.eINSTANCE.createBaseSampleData();
  sampleDataBase.setDataSetRepresentation(""String_Node_Str"");
  sampleData.getBaseSampleData().add(sampleDataBase);
  OrthogonalSampleData sampleDataOrth=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sampleDataOrth.setDataSetRepresentation(""String_Node_Str"");
  sampleDataOrth.setSeriesDefinitionIndex(0);
  sampleData.getOrthogonalSampleData().add(sampleDataOrth);
  cm.setSampleData(sampleData);
  return cm;
}",0.9842084484800632
73238,"/** 
 * parse the URLs by input path string
 * @param paths
 * @return
 */
public static URL[] parseURLs(String paths){
  ArrayList urls=new ArrayList();
  String[] classpaths=paths.split(PROPERTYSEPARATOR,-1);
  if (classpaths != null && classpaths.length != 0) {
    for (int j=0; j < classpaths.length; j++) {
      File file=new File(classpaths[j]);
      try {
        urls.add(file.toURL());
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
    }
  }
  URL[] oUrls=new URL[urls.size()];
  urls.toArray(oUrls);
  return oUrls;
}","/** 
 * parse the URLs by input path string
 * @param paths
 * @return
 */
public static URL[] parseURLs(String paths){
  ArrayList urls=new ArrayList();
  if (paths != null) {
    String[] classpaths=paths.split(PROPERTYSEPARATOR,-1);
    if (classpaths != null && classpaths.length != 0) {
      for (int j=0; j < classpaths.length; j++) {
        File file=new File(classpaths[j]);
        try {
          urls.add(file.toURL());
        }
 catch (        MalformedURLException e) {
          e.printStackTrace();
        }
      }
    }
  }
  URL[] oUrls=new URL[urls.size()];
  urls.toArray(oUrls);
  return oUrls;
}",0.9571788413098236
73239,"/** 
 * IV request is applied here
 * @return query definition for interactive viewing
 */
private QueryDefinition newPreIVReportQuery(int filterNeeded,boolean sortNeeded,int groupNeeded,int mode){
  QueryDefinition qd=new QueryDefinition();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  for (int i=0; i < totalBeArray.length; i++)   qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  if (this.updateNewBindingName != null && this.updateNewBindingName.trim().length() > 0) {
    qd.addResultSetExpression(this.updateNewBindingName,this.updateNewBindingExpr);
  }
  if (mode == UPDATE) {
    qd.getFilters().addAll(this.GEN_filterDefn);
  }
 else   if (mode == PRESENTATION) {
    if (PRE_basedon_genfilter == false)     qd.getFilters().addAll(UPDATE_filterDefn);
 else     qd.getFilters().addAll(GEN_filterDefn);
  }
  if (filterNeeded == 0) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 1) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 2) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 3) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 4) {
    BaseExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"" + TimeZone.getDefault().getRawOffset() / 3600000 + ""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 5) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 6) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  UPDATE_filterDefn=qd.getFilters();
  if (sortNeeded) {
    SortDefinition sd=new SortDefinition();
    sd.setExpression(""String_Node_Str"");
    sd.setSortDirection(ISortDefinition.SORT_ASC);
    qd.addSort(sd);
  }
  if (groupNeeded == 1 || groupNeeded == 0) {
    GroupDefinition gd=null;
    if (groupNeeded == 1) {
      gd=new GroupDefinition(""String_Node_Str"");
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
 else     if (groupNeeded == 0) {
      gd=new GroupDefinition();
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
    if (this.UPDATE_add_subquery == 1) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
    if (this.UPDATE_add_subquery == 2) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName2,qd);
      subRowExprName2=new String[2];
      subRowExprName2[0]=""String_Node_Str"";
      subRowExprName2[1]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[2];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName2.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName2[i],exprs[i]);
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}","/** 
 * IV request is applied here
 * @return query definition for interactive viewing
 */
private QueryDefinition newPreIVReportQuery(int filterNeeded,boolean sortNeeded,int groupNeeded,int mode){
  QueryDefinition qd=new QueryDefinition();
  qd.setDataSetName(""String_Node_Str"");
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  for (int i=0; i < totalBeArray.length; i++)   qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  if (this.updateNewBindingName != null && this.updateNewBindingName.trim().length() > 0) {
    qd.addResultSetExpression(this.updateNewBindingName,this.updateNewBindingExpr);
  }
  if (mode == UPDATE) {
    qd.getFilters().addAll(this.GEN_filterDefn);
  }
 else   if (mode == PRESENTATION) {
    if (PRE_basedon_genfilter == false)     qd.getFilters().addAll(UPDATE_filterDefn);
 else     qd.getFilters().addAll(GEN_filterDefn);
  }
  if (filterNeeded == 0) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 1) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 2) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 3) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 4) {
    BaseExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"" + TimeZone.getDefault().getRawOffset() / 3600000 + ""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 5) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 6) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  UPDATE_filterDefn=qd.getFilters();
  if (sortNeeded) {
    SortDefinition sd=new SortDefinition();
    sd.setExpression(""String_Node_Str"");
    sd.setSortDirection(ISortDefinition.SORT_ASC);
    qd.addSort(sd);
  }
  if (groupNeeded == 1 || groupNeeded == 0) {
    GroupDefinition gd=null;
    if (groupNeeded == 1) {
      gd=new GroupDefinition(""String_Node_Str"");
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
 else     if (groupNeeded == 0) {
      gd=new GroupDefinition();
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
    if (this.UPDATE_add_subquery == 1) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
    if (this.UPDATE_add_subquery == 2) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName2,qd);
      subRowExprName2=new String[2];
      subRowExprName2[0]=""String_Node_Str"";
      subRowExprName2[1]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[2];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName2.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName2[i],exprs[i]);
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}",0.9953216374269006
73240,"private void handleNext(){
  int freeSpace=PDFTextLM.this.getFreeSpace();
  if (isNew || currentPos == chunk.getText().length()) {
    if (cg.hasMore()) {
      chunk=cg.getNext();
      if (chunk == Chunk.HARD_LINE_BREAK) {
        FontHandler handler=new FontHandler(context.getFontManager(),content,false);
        Dimension d=new Dimension(0,(int)(handler.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
        IArea con=buildArea(""String_Node_Str"",content,handler.getFontInfo(),d);
        PDFTextLM.this.addSpaceHolder(con);
        PDFTextLM.this.newLine();
        currentPos=chunk.getText().length();
        vestigeIndex=-1;
        return;
      }
      if (!pdfTextWrapping) {
        String originalText=chunk.getText();
        int areaWidth=(int)(chunk.getFontInfo().getWordWidth(originalText) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * originalText.length();
        Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
        IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
        PDFTextLM.this.addTextLine(builtArea);
        PDFTextLM.this.newLine();
        currentPos=chunk.getText().length();
        vestigeIndex=-1;
        return;
      }
      currentPos=0;
      vestigeIndex=-1;
      vestigeLength=0;
      wr=new ICUWordRecognizer(chunk.getText(),context.getLocale());
    }
 else {
      return;
    }
  }
  if (isNew) {
    isNew=false;
    if (isInline) {
      AbstractArea con=(AbstractArea)AreaFactory.createInlineContainer(content,true,false);
      con.setWidth(leftBorder + leftPadding);
      con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
      PDFTextLM.this.addSpaceHolder(con);
      leftSpaceHolder=leftMargin + leftBorder + leftPadding;
      freeSpace-=leftSpaceHolder;
    }
  }
  String str=null;
  Word currentWord=null;
  if (-1 == vestigeIndex) {
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      return;
    }
    str=currentWord.getValue();
    areaStartPos=chunk.getOffset() + currentWord.getStart();
  }
 else {
    str=chunk.getText().substring(vestigeIndex,vestigeIndex + vestigeLength);
    areaStartPos=chunk.getOffset() + vestigeIndex;
  }
  int prevAreaWidth=0;
  int areaWidth=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
  if (isInline) {
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  if (maxLineSpace < chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO + letterSpacing * str.length() + wordSpacing) {
    if (0 == str.length()) {
      vestigeIndex=-1;
      vestigeLength=0;
      return;
    }
    Dimension d=new Dimension((int)(chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=str;
    if (maxLineSpace != freeSpace) {
      PDFTextLM.this.newLine();
    }
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    currentPos+=str.length();
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
  while (freeSpace >= areaWidth) {
    currentPos+=str.length();
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      str=null;
      break;
    }
    str=currentWord.getValue();
    prevAreaWidth=areaWidth;
    areaWidth+=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  int length=chunk.getText().length();
  if (currentPos == length) {
    Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),chunk.getText().length());
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
 else {
    Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    if (null == currentWord) {
      if (originalText.length() == 0)       return;
      vestigeIndex=-1;
      vestigeLength=0;
    }
 else {
      vestigeIndex=currentWord.getStart();
      vestigeLength=currentWord.getLength();
    }
    return;
  }
}","private void handleNext(){
  int freeSpace=PDFTextLM.this.getFreeSpace();
  if (isNew || currentPos == chunk.getText().length()) {
    if (cg.hasMore()) {
      chunk=cg.getNext();
      if (chunk == Chunk.HARD_LINE_BREAK) {
        FontHandler handler=new FontHandler(context.getFontManager(),content,false);
        Dimension d=new Dimension(0,(int)(handler.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
        IArea con=buildArea(""String_Node_Str"",content,handler.getFontInfo(),d);
        PDFTextLM.this.addSpaceHolder(con);
        PDFTextLM.this.newLine();
        currentPos=chunk.getText().length();
        vestigeIndex=-1;
        return;
      }
      if (!pdfTextWrapping) {
        String originalText=chunk.getText();
        int areaWidth=(int)(chunk.getFontInfo().getWordWidth(originalText) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * originalText.length();
        Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
        IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
        PDFTextLM.this.addTextLine(builtArea);
        PDFTextLM.this.newLine();
        currentPos=chunk.getText().length();
        vestigeIndex=-1;
        return;
      }
      currentPos=0;
      vestigeIndex=-1;
      vestigeLength=0;
      wr=new WordRecognizerWrapper(chunk.getText(),context.getLocale());
    }
 else {
      return;
    }
  }
  if (isNew) {
    isNew=false;
    if (isInline) {
      AbstractArea con=(AbstractArea)AreaFactory.createInlineContainer(content,true,false);
      con.setWidth(leftBorder + leftPadding);
      con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
      PDFTextLM.this.addSpaceHolder(con);
      leftSpaceHolder=leftMargin + leftBorder + leftPadding;
      freeSpace-=leftSpaceHolder;
    }
  }
  String str=null;
  Word currentWord=null;
  if (-1 == vestigeIndex) {
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      return;
    }
    str=currentWord.getValue();
    areaStartPos=chunk.getOffset() + currentWord.getStart();
  }
 else {
    str=chunk.getText().substring(vestigeIndex,vestigeIndex + vestigeLength);
    areaStartPos=chunk.getOffset() + vestigeIndex;
  }
  int prevAreaWidth=0;
  int areaWidth=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
  if (isInline) {
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  if (maxLineSpace < chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO + letterSpacing * str.length() + wordSpacing) {
    if (0 == str.length()) {
      vestigeIndex=-1;
      vestigeLength=0;
      return;
    }
    Dimension d=new Dimension((int)(chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=str;
    if (maxLineSpace != freeSpace) {
      PDFTextLM.this.newLine();
    }
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    currentPos+=str.length();
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
  while (freeSpace >= areaWidth) {
    currentPos+=str.length();
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      str=null;
      break;
    }
    str=currentWord.getValue();
    prevAreaWidth=areaWidth;
    areaWidth+=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  int length=chunk.getText().length();
  if (currentPos == length) {
    Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),chunk.getText().length());
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
 else {
    Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    if (null == currentWord) {
      if (originalText.length() == 0)       return;
      vestigeIndex=-1;
      vestigeLength=0;
    }
 else {
      vestigeIndex=currentWord.getStart();
      vestigeLength=currentWord.getLength();
    }
    return;
  }
}",0.9990655952158476
73241,"/** 
 * @param outerResults
 * @param dsRT
 * @param queryDefn
 * @param scope
 */
ParameterUtil(IQueryService outerResults,DataSetRuntime dsRT,IQueryDefinition queryDefn,Scriptable scope){
  Object[] params={outerResults,dsRT,queryDefn,scope};
  logger.entering(ParameterUtil.class.getName(),""String_Node_Str"",params);
  this.outerResults=outerResults;
  this.dsRT=dsRT;
  this.queryDefn=queryDefn;
  this.scope=scope;
  logger.exiting(ParameterUtil.class.getName(),""String_Node_Str"");
}","/** 
 * @param outerResults
 * @param dsRT
 * @param queryDefn
 * @param scope
 */
ParameterUtil(Scriptable outerScope,DataSetRuntime dsRT,IQueryDefinition queryDefn,Scriptable scope){
  Object[] params={outerScope,dsRT,queryDefn,scope};
  logger.entering(ParameterUtil.class.getName(),""String_Node_Str"",params);
  this.outerScope=outerScope;
  this.dsRT=dsRT;
  this.queryDefn=queryDefn;
  this.scope=scope;
  logger.exiting(ParameterUtil.class.getName(),""String_Node_Str"");
}",0.9139896373056996
73242,"/** 
 * @param scope
 * @param cx
 * @param iParamBind
 * @return
 * @throws DataException
 */
private Object evaluateInputParameterValue(Scriptable scope,Context cx,IInputParameterBinding iParamBind) throws DataException {
  Object evaluateResult=null;
  Scriptable evaluateScope=scope;
  try {
    evaluateResult=ExprEvaluateUtil.evaluateRawExpression2(iParamBind.getExpr(),outerResults == null ? evaluateScope : outerResults.getQueryScope());
  }
 catch (  BirtException e) {
    DataException dataEx=new DataException(ResourceConstants.UNEXPECTED_ERROR,e);
    if (logger != null)     logger.logp(Level.FINE,PreparedOdaDSQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw dataEx;
  }
  return evaluateResult;
}","/** 
 * @param scope
 * @param cx
 * @param iParamBind
 * @return
 * @throws DataException
 */
private Object evaluateInputParameterValue(Scriptable scope,Context cx,IInputParameterBinding iParamBind) throws DataException {
  Object evaluateResult=null;
  Scriptable evaluateScope=scope;
  try {
    evaluateResult=ExprEvaluateUtil.evaluateRawExpression2(iParamBind.getExpr(),this.outerScope == null ? evaluateScope : this.outerScope);
  }
 catch (  BirtException e) {
    DataException dataEx=new DataException(ResourceConstants.UNEXPECTED_ERROR,e);
    if (logger != null)     logger.logp(Level.FINE,PreparedOdaDSQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw dataEx;
  }
  return evaluateResult;
}",0.952054794520548
73243,"/** 
 * @param appContext
 * @throws DataException
 */
private void configureDataSetCache(IQueryDefinition querySpec,Map appContext,Scriptable scope) throws DataException {
  if (querySpec == null)   return;
  String queryResultID=querySpec.getQueryResultsID();
  if (queryResultID != null)   return;
  if (dataSetDesign == null)   return;
  if (!getDataSetCacheManager().needsToCache(dataSetDesign,appContext))   return;
  Collection parameterHints=null;
  IBaseDataSourceDesign dataSourceDesign=null;
  DataSourceRuntime dsRuntime=this.dataEngine.getDataSourceRuntime(dataSetDesign.getDataSourceName());
  if (dsRuntime != null) {
    dataSourceDesign=dsRuntime.getDesign();
    DataSetRuntime dataSet=DataSetRuntime.newInstance(dataSetDesign,null);
    parameterHints=new ParameterUtil(null,dataSet,this.queryDefn,scope).resolveDataSetParameters(true);
  }
  getDataSetCacheManager().setDataSourceAndDataSet(dataSourceDesign,dataSetDesign,parameterHints,this.appContext);
}","/** 
 * @param appContext
 * @throws DataException
 */
private void configureDataSetCache(Scriptable outerScope,IQueryDefinition querySpec,Map appContext,Scriptable scope) throws DataException {
  if (querySpec == null)   return;
  String queryResultID=querySpec.getQueryResultsID();
  if (queryResultID != null)   return;
  if (dataSetDesign == null)   return;
  if (!getDataSetCacheManager().needsToCache(dataSetDesign,appContext))   return;
  Collection parameterHints=null;
  IBaseDataSourceDesign dataSourceDesign=null;
  DataSourceRuntime dsRuntime=this.dataEngine.getDataSourceRuntime(dataSetDesign.getDataSourceName());
  if (dsRuntime != null) {
    dataSourceDesign=dsRuntime.getDesign();
    DataSetRuntime dataSet=DataSetRuntime.newInstance(dataSetDesign,null);
    parameterHints=new ParameterUtil(outerScope,dataSet,this.queryDefn,scope).resolveDataSetParameters(true);
  }
  getDataSetCacheManager().setDataSourceAndDataSet(dataSourceDesign,dataSetDesign,parameterHints,this.appContext);
}",0.9818181818181818
73244,"/** 
 * @param outerResults
 * @param scope
 * @return
 * @throws DataException
 */
public IQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  this.configCache(scope);
  this.initializeExecution(outerResults,scope);
  return this.produceQueryResults(outerResults,scope);
}","/** 
 * @param outerResults
 * @param scope
 * @return
 * @throws DataException
 */
public IQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  this.configureDataSetCache(outerResults instanceof IQueryService ? ((IQueryService)outerResults).getQueryScope() : null,queryDefn,appContext,scope != null ? scope : dataEngine.getSession().getSharedScope());
  this.initializeExecution(outerResults,scope);
  return this.produceQueryResults(outerResults,scope);
}",0.7631901840490798
73245,"/** 
 * @param driverName
 * @param driverProps
 * @return
 * @throws DataException
 */
private IDataSource getDataSource(String driverName,Map driverProps) throws DataException {
  PreparedOdaDSQuery self=PreparedOdaDSQuery.this;
  Collection paramHints=null;
  if (getDataSetCacheManager().needsToCache(this.dataSet.getDesign(),appContext))   paramHints=new ParameterUtil(null,this.dataSet,self.queryDefn,this.getQueryScope()).resolveDataSetParameters(true);
  return DataSourceFactory.getFactory().getDataSource(driverName,driverProps,this.dataSource.getDesign(),this.dataSet.getDesign(),paramHints,self.dataEngine.getSession(),appContext);
}","/** 
 * @param driverName
 * @param driverProps
 * @return
 * @throws DataException
 */
private IDataSource getDataSource(String driverName,Map driverProps) throws DataException {
  PreparedOdaDSQuery self=PreparedOdaDSQuery.this;
  Collection paramHints=null;
  if (getDataSetCacheManager().needsToCache(this.dataSet.getDesign(),appContext))   paramHints=new ParameterUtil(this.tabularOuterResults == null ? null : this.tabularOuterResults.getQueryScope(),this.dataSet,self.queryDefn,this.getQueryScope()).resolveDataSetParameters(true);
  return DataSourceFactory.getFactory().getDataSource(driverName,driverProps,this.dataSource.getDesign(),this.dataSet.getDesign(),paramHints,self.dataEngine.getSession(),appContext);
}",0.9371345029239766
73246,"/** 
 * @param evaluateValue
 * @return
 * @throws DataException
 */
protected Collection resolveDataSetParameters(boolean evaluateValue) throws DataException {
  return new ParameterUtil(this.tabularOuterResults,this.getDataSet(),(IQueryDefinition)this.baseQueryDefn,this.getQueryScope()).resolveDataSetParameters(evaluateValue);
}","/** 
 * @param evaluateValue
 * @return
 * @throws DataException
 */
protected Collection resolveDataSetParameters(boolean evaluateValue) throws DataException {
  return new ParameterUtil(this.tabularOuterResults == null ? null : this.tabularOuterResults.getQueryScope(),this.getDataSet(),(IQueryDefinition)this.baseQueryDefn,this.getQueryScope()).resolveDataSetParameters(evaluateValue);
}",0.9196675900277008
73247,"public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINER,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.isFirstRowPepared) {
    if (this.isEmpty())     this.next();
 else     this.prepareCurrentRow();
  }
  if (!this.boundColumnValueMap.containsKey(exprName)) {
    if (this.resultService.getBindingExpr(exprName) != null) {
      return prepareBindingColumn(exprName);
    }
    throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  }
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  return exprValue;
}","public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINER,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.isFirstRowPepared) {
    if (this.isEmpty())     this.next();
 else     this.prepareCurrentRow();
  }
  if (!this.boundColumnValueMap.containsKey(exprName)) {
    if (this.resultService.getBindingExpr(exprName) != null) {
      return prepareBindingColumn(exprName);
    }
    throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  }
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  if (exprValue instanceof DataExceptionMocker)   throw ((DataExceptionMocker)exprValue).getCause();
  return exprValue;
}",0.935048231511254
73248,"protected void writeFields(DataOutputStream out) throws IOException {
  if (width != null) {
    IOUtil.writeInt(out,FIELD_WIDTH);
    width.writeObject(out);
  }
  if (styleClass != null) {
    IOUtil.writeInt(out,FIELD_STYLECLASS);
    IOUtil.writeString(out,styleClass);
  }
  if (instanceId != null) {
    IOUtil.writeInt(out,FIELD_INSTANCE_ID);
    IOUtil.writeString(out,instanceId.toString());
  }
  if (visibleFormat != null) {
    IOUtil.writeInt(out,FIELD_VISIBLE_FORMAT);
    IOUtil.writeString(out,visibleFormat);
  }
  if (inlineStyle != null) {
    String cssText=inlineStyle.getCssText();
    if (cssText != null && cssText.length() != 0) {
      IOUtil.writeInt(out,FIELD_INLINESTYLE);
      IOUtil.writeString(out,cssText);
    }
  }
}","protected void writeFields(DataOutputStream out) throws IOException {
  if (width != null) {
    IOUtil.writeInt(out,FIELD_WIDTH);
    width.writeObject(out);
  }
  if (styleClass != null) {
    IOUtil.writeInt(out,FIELD_STYLECLASS);
    IOUtil.writeString(out,styleClass);
  }
  if (instanceId != null) {
    IOUtil.writeInt(out,FIELD_INSTANCE_ID);
    IOUtil.writeString(out,instanceId.toString());
  }
  if (visibleFormat != null) {
    IOUtil.writeInt(out,FIELD_VISIBLE_FORMAT);
    IOUtil.writeString(out,visibleFormat);
  }
  if (inlineStyle != null) {
    String cssText=inlineStyle.getCssText();
    if (cssText != null && cssText.length() != 0) {
      IOUtil.writeInt(out,FIELD_INLINESTYLE);
      IOUtil.writeString(out,cssText);
    }
  }
  if (isColumnHeader != null) {
    IOUtil.writeInt(out,FIELD_ISCOLUMNHEADER);
    IOUtil.writeBool(out,isColumnHeader.booleanValue());
  }
}",0.9148418491484184
73249,"public void setColumnHeaderState(boolean isColumnHeader){
  this.isColumnHeader=new Boolean(isColumnHeader);
}","public void setColumnHeaderState(boolean isColumnHeader){
  this.isColumnHeader=Boolean.valueOf(isColumnHeader);
}",0.9464285714285714
73250,"protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_WIDTH:
    width=new DimensionType();
  width.readObject(in);
break;
case FIELD_STYLECLASS:
styleClass=IOUtil.readString(in);
break;
case FIELD_INSTANCE_ID:
String value=IOUtil.readString(in);
instanceId=InstanceID.parse(value);
break;
case FIELD_VISIBLE_FORMAT:
visibleFormat=IOUtil.readString(in);
break;
case FIELD_INLINESTYLE:
String style=IOUtil.readString(in);
if (style != null && style.length() != 0) {
inlineStyle=new StyleDeclaration(cssEngine);
inlineStyle.setCssText(style);
}
break;
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_WIDTH:
    width=new DimensionType();
  width.readObject(in);
break;
case FIELD_STYLECLASS:
styleClass=IOUtil.readString(in);
break;
case FIELD_INSTANCE_ID:
String value=IOUtil.readString(in);
instanceId=InstanceID.parse(value);
break;
case FIELD_VISIBLE_FORMAT:
visibleFormat=IOUtil.readString(in);
break;
case FIELD_INLINESTYLE:
String style=IOUtil.readString(in);
if (style != null && style.length() != 0) {
inlineStyle=new StyleDeclaration(cssEngine);
inlineStyle.setCssText(style);
}
break;
case FIELD_ISCOLUMNHEADER:
isColumnHeader=Boolean.valueOf(IOUtil.readBool(in));
break;
}
}",0.9361702127659576
73251,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext,StopSign stopSign) throws IOException, BirtException, DataException {
  List dataSetList=this.needCachedDataSetToEnhancePerformance(cubeHandle);
  Set involvedDataSet=new HashSet();
  for (int i=0; i < dataSetList.size(); i++) {
    involvedDataSet.add(dataSetList.get(i));
  }
  boolean doPerfTuning=(involvedDataSet.size() != dataSetList.size()) && (appContext == null || (appContext != null && appContext.get(DataEngine.DATA_SET_CACHE_ROW_LIMIT) == null && appContext.get(DataEngine.MEMORY_DATA_SET_CACHE) == null));
  Map candidateAppContext=new HashMap();
  if (appContext != null)   candidateAppContext.putAll(appContext);
  if (doPerfTuning) {
    candidateAppContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(-1));
    this.dataSetCache.addAll(involvedDataSet);
  }
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext,stopSign);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle,candidateAppContext),this.toStringArray(measureNames),stopSign);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext,StopSign stopSign) throws IOException, BirtException, DataException {
  List dataSetList=this.getDataSetsToCache(cubeHandle);
  Set involvedDataSet=new HashSet(dataSetList);
  boolean doPerfTuning=(involvedDataSet.size() != dataSetList.size()) && (appContext == null || (appContext != null && appContext.get(DataEngine.DATA_SET_CACHE_ROW_LIMIT) == null && appContext.get(DataEngine.MEMORY_DATA_SET_CACHE) == null));
  Map candidateAppContext=new HashMap();
  if (appContext != null)   candidateAppContext.putAll(appContext);
  if (doPerfTuning) {
    candidateAppContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(-1));
    this.dataSetCache.addAll(involvedDataSet);
  }
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext,stopSign);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle,candidateAppContext),this.toStringArray(measureNames),stopSign);
}",0.975314392175128
73252,"public void defineCube(CubeHandle cubeDesign) throws BirtException {
  if (!cubeHandleMap.containsKey(cubeDesign.getQualifiedName())) {
    this.cubeHandleMap.put(cubeDesign.getQualifiedName(),cubeDesign);
  }
}","public void defineCube(CubeHandle cubeHandle) throws BirtException {
  Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
  Iterator itr=involvedDataSets.iterator();
  while (itr.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)itr.next();
    BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
    BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
    this.defineDataSource(baseDataSource);
    this.defineDataSet(baseDataSet);
  }
  if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
    this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
  }
}",0.2993197278911564
73253,"/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  double dX=bo.getLeft() + insCA.getLeft();
  double dY=bo.getTop() + insCA.getTop();
  double dW=bo.getWidth() - insCA.getLeft() - insCA.getRight();
  double dH=bo.getHeight() - insCA.getTop() - insCA.getBottom();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,bo);
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}","/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  dSeriesThickness=cwa.getPlot().getClientArea().isVisible() ? dSeriesThickness : 0;
  double dX=bo.getLeft() + insCA.getLeft();
  double dY=bo.getTop() + insCA.getTop();
  double dW=bo.getWidth() - insCA.getLeft() - insCA.getRight();
  double dH=bo.getHeight() - insCA.getTop() - insCA.getBottom();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,bo);
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}",0.9938294010889293
73254,"/** 
 * Returns appcontext
 * @param request
 * @return
 */
public static Map getAppContext(HttpServletRequest request){
  HashMap context=new HashMap();
  Boolean isDesigner=Boolean.valueOf(ParameterAccessor.isDesigner(request));
  context.put(""String_Node_Str"",isDesigner);
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  int maxCubeRowLevels=ParameterAccessor.getMaxCubeRowLevels(request);
  if (maxCubeRowLevels >= 0)   context.put(DataEngine.CUBECUSROR_FETCH_LIMIT_ON_ROW_EDGE,new Integer(maxCubeRowLevels));
  int maxCubeColumnLevels=ParameterAccessor.getMaxCubeColumnLevels(request);
  if (maxCubeColumnLevels >= 0)   context.put(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_COLUMN_EDGE,new Integer(maxCubeColumnLevels));
  int cubeMemorySize=ParameterAccessor.getCubeMemorySize(request);
  if (cubeMemorySize >= 0)   context.put(DataEngine.IN_MEMORY_CUBE_SIZE,new Integer(cubeMemorySize));
  ParameterAccessor.pushAppContext(context,request);
  return context;
}","/** 
 * Returns appcontext
 * @param request
 * @return
 */
public static Map getAppContext(HttpServletRequest request){
  HashMap context=new HashMap();
  Boolean isDesigner=Boolean.valueOf(ParameterAccessor.isDesigner(request));
  context.put(""String_Node_Str"",isDesigner);
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  int maxCubeRowLevels=ParameterAccessor.getMaxCubeRowLevels(request);
  if (maxCubeRowLevels >= 0)   context.put(DataEngine.CUBECUSROR_FETCH_LIMIT_ON_ROW_EDGE,new Integer(maxCubeRowLevels));
  int maxCubeColumnLevels=ParameterAccessor.getMaxCubeColumnLevels(request);
  if (maxCubeColumnLevels >= 0)   context.put(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_COLUMN_EDGE,new Integer(maxCubeColumnLevels));
  int cubeMemorySize=ParameterAccessor.getCubeMemorySize(request);
  if (cubeMemorySize >= 0)   context.put(DataEngine.IN_MEMORY_CUBE_SIZE,new Integer(cubeMemorySize));
  context.put(IBirtConstants.APPCONTEXT_BIRT_RESOURCE_PATH,ParameterAccessor.getResourceFolder(request));
  ParameterAccessor.pushAppContext(context,request);
  return context;
}",0.9537117903930132
73255,"public Object visitExtendedItem(ExtendedItemDesign item,Object value){
  ExtendedItemHandle handle=(ExtendedItemHandle)item.getHandle();
  ReportItemHandle referenceHandle=handle.getDataBindingReference();
  if (referenceHandle != null) {
    IDataQueryDefinition[] queries=report.getQueryByReportHandle(referenceHandle);
    if (queries != null && queries.length > 0) {
      for (int i=0; i < queries.length; i++) {
        IDataQueryDefinition referenceQuery=queries[i];
        if (referenceQuery instanceof BaseQueryDefinition) {
          ((BaseQueryDefinition)referenceQuery).setCacheQueryResults(true);
        }
 else         if (referenceQuery instanceof ICubeQueryDefinition) {
          ((ICubeQueryDefinition)referenceQuery).setCacheQueryResults(true);
        }
      }
      IDataQueryDefinition query=queries[0];
      if (query instanceof IBaseQueryDefinition) {
        try {
          transformExpressions(item,(IBaseQueryDefinition)query);
        }
 catch (        BirtException ex) {
          context.addException(item.getHandle(),ex);
        }
      }
      return queries;
    }
 else {
      registerUnresolvedQueryReference(item);
      return null;
    }
  }
  String tagName=handle.getExtensionName();
  IReportItemQuery itemQuery=ExtensionManager.getInstance().createQueryItem(tagName);
  IDataQueryDefinition[] queries=null;
  IDataQueryDefinition parentQuery=(IDataQueryDefinition)value;
  if (itemQuery != null) {
    try {
      itemQuery.setModelObject(handle);
      itemQuery.setQueryContext(queryContext);
      queries=itemQuery.createReportQueries(parentQuery);
    }
 catch (    BirtException ex) {
      context.addException(handle,ex);
    }
    if (queries != null) {
      if (queries.length > 0) {
        IDataQueryDefinition query=queries[0];
        if (query instanceof IBaseQueryDefinition) {
          try {
            IBaseQueryDefinition baseQuery=(IBaseQueryDefinition)query;
            transformExpressions(item,baseQuery,null);
            if (query instanceof ISubqueryDefinition) {
              ISubqueryDefinition subQuery=(ISubqueryDefinition)query;
              String name=String.valueOf(item.getID());
              queries[0]=changeSubqueryName(subQuery,name);
            }
          }
 catch (          BirtException ex) {
            context.addException(handle,ex);
          }
        }
      }
      return queries;
    }
  }
  BaseQueryDefinition query=createQuery(item,parentQuery);
  try {
    transformExpressions(item,query);
  }
 catch (  BirtException ex) {
    context.addException(item.getHandle(),ex);
  }
  return getResultQuery(query,value);
}","public Object visitExtendedItem(ExtendedItemDesign item,Object value){
  ExtendedItemHandle handle=(ExtendedItemHandle)item.getHandle();
  ReportItemHandle referenceHandle=handle.getDataBindingReference();
  if (referenceHandle != null) {
    IDataQueryDefinition[] queries=report.getQueryByReportHandle(referenceHandle);
    if (queries != null && queries.length > 0) {
      for (int i=0; i < queries.length; i++) {
        IDataQueryDefinition referenceQuery=queries[i];
        if (referenceQuery instanceof BaseQueryDefinition) {
          ((BaseQueryDefinition)referenceQuery).setCacheQueryResults(true);
        }
 else         if (referenceQuery instanceof ICubeQueryDefinition) {
          ((ICubeQueryDefinition)referenceQuery).setCacheQueryResults(true);
        }
      }
      IDataQueryDefinition query=queries[0];
      if (query instanceof IBaseQueryDefinition) {
        try {
          transformExpressions(item,(IBaseQueryDefinition)query);
        }
 catch (        BirtException ex) {
          context.addException(item.getHandle(),ex);
        }
      }
      return queries;
    }
 else {
      registerUnresolvedQueryReference(item);
      return null;
    }
  }
  String tagName=handle.getExtensionName();
  IReportItemQuery itemQuery=ExtensionManager.getInstance().createQueryItem(tagName);
  IDataQueryDefinition[] queries=null;
  IDataQueryDefinition parentQuery=(IDataQueryDefinition)value;
  if (itemQuery != null) {
    try {
      itemQuery.setModelObject(handle);
      itemQuery.setQueryContext(queryContext);
      queries=itemQuery.createReportQueries(parentQuery);
    }
 catch (    BirtException ex) {
      context.addException(handle,ex);
    }
    if (queries != null) {
      if (queries.length > 0) {
        IDataQueryDefinition query=queries[0];
        if (query instanceof IBaseQueryDefinition) {
          try {
            IBaseQueryDefinition baseQuery=(IBaseQueryDefinition)query;
            baseQuery.setMaxRows(maxRows);
            transformExpressions(item,baseQuery,null);
            if (query instanceof ISubqueryDefinition) {
              ISubqueryDefinition subQuery=(ISubqueryDefinition)query;
              String name=String.valueOf(item.getID());
              queries[0]=changeSubqueryName(subQuery,name);
            }
          }
 catch (          BirtException ex) {
            context.addException(handle,ex);
          }
        }
      }
      return queries;
    }
  }
  BaseQueryDefinition query=createQuery(item,parentQuery);
  try {
    transformExpressions(item,query);
  }
 catch (  BirtException ex) {
    context.addException(item.getHandle(),ex);
  }
  return getResultQuery(query,value);
}",0.991894439208294
73256,"protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle columnBinding) throws BirtException {
  String name=columnBinding.getName();
  String expr=columnBinding.getExpression();
  String type=columnBinding.getDataType();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=new ScriptExpression(expr,dbType);
  if (columnBinding.getAggregateOn() != null) {
    dbExpr.setGroupName(columnBinding.getAggregateOn());
  }
  IBinding binding=new Binding(name,dbExpr);
  if (columnBinding.getAggregateOn() != null)   binding.addAggregateOn(columnBinding.getAggregateOn());
  if (columnBinding.getAggregateFunction() != null) {
    binding.setAggrFunction(columnBinding.getAggregateFunction());
  }
  String filter=columnBinding.getFilterExpression();
  if (filter != null) {
    binding.setFilter(new ScriptExpression(filter));
  }
  Iterator arguments=columnBinding.argumentsIterator();
  if (arguments != null) {
    while (arguments.hasNext()) {
      AggregationArgumentHandle argumentHandle=(AggregationArgumentHandle)arguments.next();
      String argument=argumentHandle.getValue();
      if (argument != null) {
        binding.addArgument(new ScriptExpression(argument));
      }
    }
  }
  transfer.addBinding(binding);
}","protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle columnBinding) throws BirtException {
  String name=columnBinding.getName();
  String expr=columnBinding.getExpression();
  String type=columnBinding.getDataType();
  String displayName=columnBinding.getDisplayName();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=new ScriptExpression(expr,dbType);
  if (columnBinding.getAggregateOn() != null) {
    dbExpr.setGroupName(columnBinding.getAggregateOn());
  }
  IBinding binding=new Binding(name,dbExpr);
  binding.setDisplayName(displayName);
  if (columnBinding.getAggregateOn() != null)   binding.addAggregateOn(columnBinding.getAggregateOn());
  if (columnBinding.getAggregateFunction() != null) {
    binding.setAggrFunction(columnBinding.getAggregateFunction());
  }
  String filter=columnBinding.getFilterExpression();
  if (filter != null) {
    binding.setFilter(new ScriptExpression(filter));
  }
  Iterator arguments=columnBinding.argumentsIterator();
  if (arguments != null) {
    while (arguments.hasNext()) {
      AggregationArgumentHandle argumentHandle=(AggregationArgumentHandle)arguments.next();
      String argument=argumentHandle.getValue();
      if (argument != null) {
        binding.addArgument(new ScriptExpression(argument));
      }
    }
  }
  transfer.addBinding(binding);
}",0.965230536659108
73257,"private IExtractionResults extractByInstanceID(InstanceID instanceId) throws BirtException {
  InstanceID iid=instanceId;
  while (iid != null) {
    long id=iid.getComponentID();
    ReportItemDesign design=(ReportItemDesign)report.getReportItemByID(id);
    IDataQueryDefinition dataQuery=design.getQuery();
    if (dataQuery != null) {
      if (!(dataQuery instanceof IBaseQueryDefinition)) {
        return null;
      }
      IBaseQueryDefinition query=(IBaseQueryDefinition)dataQuery;
      if (filterExpressions != null) {
        query=cloneQuery(query);
        for (int i=0; i < filterExpressions.length; i++) {
          query.getFilters().add(filterExpressions[i]);
        }
      }
      while (iid != null) {
        DataID dataId=iid.getDataID();
        if (dataId != null) {
          DataSetID dataSetId=dataId.getDataSetID();
          long rowId=dataId.getRowID();
          IResultIterator dataIter=executeSubQuery(dataSetId,rowId,(ISubqueryDefinition)query);
          IResultMetaData metaData=getMetaDateByInstanceID(instanceId);
          if (dataIter != null && metaData != null) {
            return new ExtractionResults(dataIter,metaData,this.selectedColumns);
          }
          return null;
        }
        iid=iid.getParentID();
      }
      return null;
    }
    iid=iid.getParentID();
  }
  return null;
}","private IExtractionResults extractByInstanceID(InstanceID instanceId) throws BirtException {
  InstanceID iid=instanceId;
  while (iid != null) {
    long id=iid.getComponentID();
    ReportItemDesign design=(ReportItemDesign)report.getReportItemByID(id);
    IDataQueryDefinition dataQuery=design.getQuery();
    if (dataQuery != null) {
      if (!(dataQuery instanceof IBaseQueryDefinition)) {
        return null;
      }
      IBaseQueryDefinition query=(IBaseQueryDefinition)dataQuery;
      String queryId=(String)query2QueryIdMapping.get(query);
      if (filterExpressions != null) {
        query=cloneQuery(query);
        for (int i=0; i < filterExpressions.length; i++) {
          query.getFilters().add(filterExpressions[i]);
        }
      }
      if (query instanceof IQueryDefinition) {
        while (iid != null) {
          DataID dataId=iid.getDataID();
          if (dataId != null) {
            DataSetID dataSetId=dataId.getDataSetID();
            long rowId=dataId.getRowID();
            IResultIterator dataIter=executeQuery(dataSetId.toString(),rowId,queryId,(IQueryDefinition)query);
            IResultMetaData metaData=getMetaDateByInstanceID(instanceId);
            if (dataIter != null && metaData != null) {
              return new ExtractionResults(dataIter,metaData,this.selectedColumns);
            }
            return null;
          }
          iid=iid.getParentID();
        }
        IResultIterator dataIter=executeQuery(null,-1,queryId,(QueryDefinition)query);
        IResultMetaData metaData=getMetaDateByInstanceID(instanceId);
        if (dataIter != null && metaData != null) {
          return new ExtractionResults(dataIter,metaData,this.selectedColumns);
        }
        return null;
      }
 else {
        while (iid != null) {
          DataID dataId=iid.getDataID();
          if (dataId != null) {
            DataSetID dataSetId=dataId.getDataSetID();
            long rowId=dataId.getRowID();
            IResultIterator dataIter=executeSubQuery(dataSetId,rowId,(ISubqueryDefinition)query);
            IResultMetaData metaData=getMetaDateByInstanceID(instanceId);
            if (dataIter != null && metaData != null) {
              return new ExtractionResults(dataIter,metaData,this.selectedColumns);
            }
            return null;
          }
          iid=iid.getParentID();
        }
      }
    }
    iid=iid.getParentID();
  }
  return null;
}",0.697748344370861
73258,"/** 
 * Transfer the rset relation array to a string.
 * @param rsetRelation
 * @return
 */
private String getDteMetaInfoString(String[] rsetRelation){
  StringBuffer buffer=new StringBuffer();
  String pRsetId=rsetRelation[0];
  String rowId=rsetRelation[1];
  String queryId=rsetRelation[2];
  String rsetId=rsetRelation[3];
  buffer.setLength(0);
  buffer.append(pRsetId);
  buffer.append(""String_Node_Str"");
  buffer.append(rowId);
  buffer.append(""String_Node_Str"");
  buffer.append(queryId);
  buffer.append(""String_Node_Str"");
  buffer.append(rsetId);
  return buffer.toString();
}","/** 
 * Transfer the rset relation array to a string.
 * @param rsetRelation
 * @return
 */
private String getDteMetaInfoString(String[] rsetRelation){
  StringBuffer buffer=new StringBuffer();
  String pRsetId=rsetRelation[0];
  String rowId=rsetRelation[1];
  String queryId=rsetRelation[2];
  buffer.setLength(0);
  if (pRsetId == null) {
    buffer.append(""String_Node_Str"");
  }
 else {
    buffer.append(pRsetId);
  }
  buffer.append(""String_Node_Str"");
  buffer.append(rowId);
  buffer.append(""String_Node_Str"");
  buffer.append(queryId);
  return buffer.toString();
}",0.823731728288908
73259,"/** 
 * load map from query id to result set id from report document.
 */
private void loadResultSetMetaData(){
  try {
    HashMap query2ResultMetaData=report.getResultMetaData();
    IDocArchiveReader reader=reportDocReader.getArchive();
    HashMap queryCounts=new HashMap();
    ArrayList result=DteMetaInfoIOUtil.loadDteMetaInfo(reader);
    if (result != null) {
      Set dteMetaInfoSet=new HashSet();
      for (int i=0; i < result.size(); i++) {
        String[] rsetRelation=(String[])result.get(i);
        String dteMetaInfoString=getDteMetaInfoString(rsetRelation);
        if (dteMetaInfoSet.contains(dteMetaInfoString)) {
          continue;
        }
        dteMetaInfoSet.add(dteMetaInfoString);
        String queryId=rsetRelation[2];
        String rsetId=rsetRelation[3];
        IQueryDefinition query=getQuery(queryId);
        rsetId2queryIdMapping.put(rsetId,queryId);
        int count=-1;
        Integer countObj=(Integer)queryCounts.get(queryId);
        if (countObj != null) {
          count=countObj.intValue();
        }
        count++;
        String rsetName=getQueryName(queryId);
        if (count > 0) {
          rsetName=rsetName + ""String_Node_Str"" + count;
        }
        queryCounts.put(queryId,new Integer(count));
        rsetName2IdMapping.put(rsetName,rsetId);
        if (null != query2ResultMetaData) {
          ResultMetaData metaData=(ResultMetaData)query2ResultMetaData.get(query);
          if (metaData != null && metaData.getColumnCount() > 0) {
            IResultSetItem resultItem=new ResultSetItem(rsetName,metaData);
            resultMetaList.add(resultItem);
          }
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
}","/** 
 * load map from query id to result set id from report document.
 */
private void loadResultSetMetaData(){
  try {
    HashMap query2ResultMetaData=report.getResultMetaData();
    IDocArchiveReader reader=reportDocReader.getArchive();
    HashMap queryCounts=new HashMap();
    ArrayList result=DteMetaInfoIOUtil.loadDteMetaInfo(reader);
    if (result != null) {
      Set dteMetaInfoSet=new HashSet();
      for (int i=0; i < result.size(); i++) {
        String[] rsetRelation=(String[])result.get(i);
        rssetIdMapping.put(this.getDteMetaInfoString(rsetRelation),rsetRelation[3]);
        String dteMetaInfoString=getDteMetaInfoString(rsetRelation);
        if (dteMetaInfoSet.contains(dteMetaInfoString)) {
          continue;
        }
        dteMetaInfoSet.add(dteMetaInfoString);
        String queryId=rsetRelation[2];
        String rsetId=rsetRelation[3];
        IQueryDefinition query=getQuery(queryId);
        rsetId2queryIdMapping.put(rsetId,queryId);
        int count=-1;
        Integer countObj=(Integer)queryCounts.get(queryId);
        if (countObj != null) {
          count=countObj.intValue();
        }
        count++;
        String rsetName=getQueryName(queryId);
        if (count > 0) {
          rsetName=rsetName + ""String_Node_Str"" + count;
        }
        queryCounts.put(queryId,new Integer(count));
        rsetName2IdMapping.put(rsetName,rsetId);
        if (null != query2ResultMetaData) {
          ResultMetaData metaData=(ResultMetaData)query2ResultMetaData.get(query);
          if (metaData != null && metaData.getColumnCount() > 0) {
            IResultSetItem resultItem=new ResultSetItem(rsetName,metaData);
            resultMetaList.add(resultItem);
          }
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
}",0.9763165227082752
73260,"public IExtractionResults extract() throws EngineException {
  try {
    String rsetName=resultSetName;
    if (rsetName == null) {
      if (instanceId != null) {
        rsetName=instanceId2RsetName(instanceId);
      }
    }
    if (rsetName != null) {
      return extractByResultSetName(rsetName);
    }
    if (instanceId != null) {
      return extractByInstanceID(instanceId);
    }
    return null;
  }
 catch (  BirtException ex) {
    throw new EngineException(ex.getLocalizedMessage(),ex);
  }
}","public IExtractionResults extract() throws EngineException {
  try {
    if (resultSetName != null) {
      return extractByResultSetName(resultSetName);
    }
    if (instanceId != null) {
      return extractByInstanceID(instanceId);
    }
    return null;
  }
 catch (  BirtException ex) {
    throw new EngineException(ex.getLocalizedMessage(),ex);
  }
}",0.7907514450867053
73261,"private void prepareMetaData(){
  if (isMetaDataPrepared == true)   return;
  HashMap queryIds=report.getQueryIDs();
  HashMap query2itemMapping=report.getReportItemToQueryMap();
  Iterator iter=queryIds.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    IDataQueryDefinition baseQuery=(IDataQueryDefinition)entry.getKey();
    if (baseQuery instanceof IQueryDefinition) {
      IQueryDefinition query=(IQueryDefinition)baseQuery;
      String queryId=(String)entry.getValue();
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      String queryName=item.getName();
      if (queryName == null) {
        queryName=""String_Node_Str"" + item.getID();
      }
      queryId2NameMapping.put(queryId,queryName);
      queryId2QueryMapping.put(queryId,query);
      ;
    }
  }
  try {
    loadResultSetMetaData();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  isMetaDataPrepared=true;
}","private void prepareMetaData(){
  if (isMetaDataPrepared == true)   return;
  HashMap queryIds=report.getQueryIDs();
  HashMap query2itemMapping=report.getReportItemToQueryMap();
  Iterator iter=queryIds.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    IDataQueryDefinition baseQuery=(IDataQueryDefinition)entry.getKey();
    if (baseQuery instanceof IQueryDefinition) {
      IQueryDefinition query=(IQueryDefinition)baseQuery;
      String queryId=(String)entry.getValue();
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      String queryName=item.getName();
      if (queryName == null) {
        queryName=""String_Node_Str"" + item.getID();
      }
      queryId2NameMapping.put(queryId,queryName);
      queryId2QueryMapping.put(queryId,query);
      query2QueryIdMapping.put(query,queryId);
    }
  }
  try {
    loadResultSetMetaData();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  isMetaDataPrepared=true;
}",0.9807217004448838
73262,"static boolean check(String source,int lineNumber){
  Context cx=Context.enter();
  Debugger oldDebugger=cx.getDebugger();
  Object oldContext=cx.getDebuggerContextData();
  boolean oldGenerate=cx.isGeneratingDebug();
  int oldLevel=cx.getOptimizationLevel();
  try {
    BreakableSourceChecker checker=new BreakableSourceChecker();
    checker.lineNumber=lineNumber + 1;
    cx.setDebugger(checker,null);
    cx.setGeneratingDebug(true);
    cx.setOptimizationLevel(-1);
    cx.evaluateString(new ImporterTopLevel(),source,""String_Node_Str"",1,null);
    return checker.breakable;
  }
  finally {
    cx.setDebugger(oldDebugger,oldContext);
    cx.setGeneratingDebug(oldGenerate);
    cx.setOptimizationLevel(oldLevel);
    Context.exit();
  }
}","static boolean check(String source,int lineNumber){
  Context cx=Context.enter();
  Debugger oldDebugger=cx.getDebugger();
  Object oldContext=cx.getDebuggerContextData();
  boolean oldGenerate=cx.isGeneratingDebug();
  int oldLevel=cx.getOptimizationLevel();
  try {
    BreakableSourceChecker checker=new BreakableSourceChecker();
    checker.lineNumber=lineNumber + 1;
    cx.setDebugger(checker,null);
    cx.setGeneratingDebug(true);
    cx.setOptimizationLevel(-1);
    cx.compileString(source,""String_Node_Str"",1,null);
    return checker.breakable;
  }
  finally {
    cx.setDebugger(oldDebugger,oldContext);
    cx.setGeneratingDebug(oldGenerate);
    cx.setOptimizationLevel(oldLevel);
    Context.exit();
  }
}",0.9672578444747612
73263,"/** 
 * Get the design element handle adapter for specified report element handle
 * @param obj Given boject
 * @param mark Helper mark
 * @return
 */
public DesignElementHandleAdapter getDesignElementHandleAdapter(Object obj,IModelAdapterHelper mark){
  if (obj instanceof IAdaptable) {
    Object adapter=((IAdaptable)obj).getAdapter(DesignElementHandle.class);
    if (adapter != null) {
      obj=adapter;
    }
  }
  if (obj instanceof ReportItemHandle && mark instanceof IMultipleAdapterHelper) {
    return getMultipleAdapter(obj,mark);
  }
  if (obj instanceof ReportDesignHandle) {
    return getReportDesignHandleAdapter(obj,mark);
  }
 else   if (obj instanceof LibraryHandle) {
    return getLibraryHandleAdapter(obj,mark);
  }
 else   if (obj instanceof SimpleMasterPageHandle) {
    return getReportDesignHandleAdapter(obj,mark);
  }
 else   if (obj instanceof TableHandle) {
    return getTableHandleAdapter(obj,mark);
  }
  if (obj instanceof RowHandle) {
    return getRowHandleAdapter(obj,mark);
  }
  if (obj instanceof ColumnHandle) {
    return getColumnHandleAdapter(obj,mark);
  }
  if (obj instanceof CellHandle) {
    return getCellHandleAdapter(obj,mark);
  }
  if (obj instanceof ImageHandle) {
    return getImageHandleAdapter(obj,mark);
  }
  if (obj instanceof GridHandle) {
    return getGridHandleAdapter(obj,mark);
  }
  if (obj instanceof ListHandle) {
    return getListHandleAdapter(obj,mark);
  }
  if (obj instanceof AutoTextHandle) {
    return getAutoTextHandleAdapter(obj,mark);
  }
  if (obj instanceof LabelHandle) {
    return getLabelHandleAdapter(obj,mark);
  }
  if (obj instanceof TextDataHandle) {
    return getTextDataHandleAdapter(obj,mark);
  }
  if (obj instanceof DataItemHandle) {
    return getDataItemHandleAdapter(obj,mark);
  }
  if (obj instanceof TextItemHandle) {
    return getTextItemHandleAdapter(obj,mark);
  }
  if (obj instanceof ExtendedItemHandle) {
    return getExtendedItemHandleAdapter(obj,mark);
  }
  return null;
}","/** 
 * Get the design element handle adapter for specified report element handle
 * @param obj Given boject
 * @param mark Helper mark
 * @return
 */
public DesignElementHandleAdapter getDesignElementHandleAdapter(Object obj,IModelAdapterHelper mark){
  if (obj instanceof IAdaptable) {
    Object adapter=((IAdaptable)obj).getAdapter(DesignElementHandle.class);
    if (adapter != null) {
      obj=adapter;
    }
  }
  if (obj instanceof ReportItemHandle && mark instanceof IMultipleAdapterHelper) {
    return getMultipleAdapter(obj,mark);
  }
  if (obj instanceof ReportDesignHandle) {
    return getReportDesignHandleAdapter(obj,mark);
  }
 else   if (obj instanceof LibraryHandle) {
    return getLibraryHandleAdapter(obj,mark);
  }
 else   if (obj instanceof SimpleMasterPageHandle) {
    return getSimpleMasterPageHandleAdapter(obj,mark);
  }
 else   if (obj instanceof TableHandle) {
    return getTableHandleAdapter(obj,mark);
  }
  if (obj instanceof RowHandle) {
    return getRowHandleAdapter(obj,mark);
  }
  if (obj instanceof ColumnHandle) {
    return getColumnHandleAdapter(obj,mark);
  }
  if (obj instanceof CellHandle) {
    return getCellHandleAdapter(obj,mark);
  }
  if (obj instanceof ImageHandle) {
    return getImageHandleAdapter(obj,mark);
  }
  if (obj instanceof GridHandle) {
    return getGridHandleAdapter(obj,mark);
  }
  if (obj instanceof ListHandle) {
    return getListHandleAdapter(obj,mark);
  }
  if (obj instanceof AutoTextHandle) {
    return getAutoTextHandleAdapter(obj,mark);
  }
  if (obj instanceof LabelHandle) {
    return getLabelHandleAdapter(obj,mark);
  }
  if (obj instanceof TextDataHandle) {
    return getTextDataHandleAdapter(obj,mark);
  }
  if (obj instanceof DataItemHandle) {
    return getDataItemHandleAdapter(obj,mark);
  }
  if (obj instanceof TextItemHandle) {
    return getTextItemHandleAdapter(obj,mark);
  }
  if (obj instanceof ExtendedItemHandle) {
    return getExtendedItemHandleAdapter(obj,mark);
  }
  return null;
}",0.9929789368104311
73264,"public void dispose(){
  if (subBarMap != null) {
    for (Iterator iter=subBarMap.values().iterator(); iter.hasNext(); ) {
      SubActionBarDef def=(SubActionBarDef)iter.next();
      def.dispose();
    }
    subBarMap.clear();
  }
  currentActionBarDef.dispose();
  currentActionBarDef=null;
  super.dispose();
}","public void dispose(){
  if (subBarMap != null) {
    for (Iterator iter=subBarMap.values().iterator(); iter.hasNext(); ) {
      SubActionBarDef def=(SubActionBarDef)iter.next();
      def.dispose();
    }
    subBarMap.clear();
  }
  if (currentActionBarDef != null) {
    currentActionBarDef.deactivate();
    currentActionBarDef.dispose();
    currentActionBarDef=null;
  }
  super.dispose();
}",0.664796633941094
73265,"public static IAction createStackAction(String id,CommandStack stack){
}","public static IAction createStackAction(String id,CommandStack stack){
  Assert.isNotNull(id);
  Assert.isNotNull(stack);
  GlobalStackActionEntry entry=(GlobalStackActionEntry)stackActionEntrys.get(stack);
  if (entry == null) {
    entry=new GlobalStackActionEntry(stack);
    stackActionEntrys.put(stack,entry);
  }
  return entry.getAction(id);
}",0.3412322274881517
73266,"public static IAction createSelectionAction(String id,ISelectionProvider provider){
}","public static IAction createSelectionAction(String id,ISelectionProvider provider){
  Assert.isNotNull(id);
  Assert.isNotNull(provider);
  if (COPY.equals(id)) {
    return new GlobalCopyAction(provider);
  }
 else   if (CUT.equals(id)) {
    return new GlobalCutAction(provider);
  }
 else   if (PASTE.equals(id)) {
    return new GlobalPasteAction(provider);
  }
 else   if (DELETE.equals(id)) {
    return new GlobalDeleteAction(provider);
  }
 else   if (NewDataSourceAction.ID.equals(id)) {
    return new NewDataSourceAction();
  }
 else   if (NewDataSetAction.ID.equals(id)) {
    return new NewDataSetAction();
  }
 else   if (NewJointDataSetAction.ID.equals(id)) {
    return new NewJointDataSetAction();
  }
  String elementType=null;
  if (GeneralInsertMenuAction.INSERT_TEXT_ID.equals(id)) {
    elementType=ReportDesignConstants.TEXT_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_LABEL_ID.equals(id)) {
    elementType=ReportDesignConstants.LABEL_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_DATA_ID.equals(id)) {
    elementType=ReportDesignConstants.DATA_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_IMAGE_ID.equals(id)) {
    elementType=ReportDesignConstants.IMAGE_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_GRID_ID.equals(id)) {
    elementType=ReportDesignConstants.GRID_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_LIST_ID.equals(id)) {
    elementType=ReportDesignConstants.LIST_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_TABLE_ID.equals(id)) {
    elementType=ReportDesignConstants.TABLE_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_ID.equals(id)) {
    elementType=ReportDesignConstants.TEXT_DATA_ITEM;
  }
 else   if (InsertRowAboveAction.ID.equals(id)) {
    return new GlobalInsertRowAction(provider,id,InsertAction.ABOVE);
  }
 else   if (InsertRowBelowAction.ID.equals(id)) {
    return new GlobalInsertRowAction(provider,id,InsertAction.BELOW);
  }
 else   if (NewParameterAction.INSERT_SCALAR_PARAMETER.equals(id)) {
    return new NewParameterAction(id,ReportDesignConstants.SCALAR_PARAMETER_ELEMENT);
  }
 else   if (NewParameterAction.INSERT_CASCADING_PARAMETER_GROUP.equals(id)) {
    return new NewParameterAction(id,ReportDesignConstants.CASCADING_PARAMETER_GROUP_ELEMENT);
  }
 else   if (NewParameterAction.INSERT_PARAMETER_GROUP.equals(id)) {
    return new NewParameterAction(id,ReportDesignConstants.PARAMETER_GROUP_ELEMENT);
  }
 else {
    if (DEUtil.getMetaDataDictionary().getExtension(id) != null) {
      elementType=id;
    }
  }
  if (elementType != null) {
    GlobalInsertAction action=new GlobalInsertAction(provider,id,elementType);
    action.setText(DEUtil.getElementDefn(elementType).getDisplayName());
    return action;
  }
  return null;
}",0.0595238095238095
73267,"public IContent execute(){
  ListGroupDesign groupDesign=(ListGroupDesign)getDesign();
  IListGroupContent groupContent=report.createListGroupContent();
  setContent(groupContent);
  restoreResultSet();
  initializeContent(groupDesign,groupContent);
  processBookmark(groupDesign,groupContent);
  handlePageBreakInsideOfGroup();
  handlePageBreakBeforeOfGroup();
  handlePageBreakAfterOfGroup();
  handlePageBreakAfterOfPreviousGroup();
  handlePageBreakBefore();
  startGroupTOCEntry(groupContent);
  prepareToExecuteChildren();
  return groupContent;
}","public IContent execute(){
  ListGroupDesign groupDesign=(ListGroupDesign)getDesign();
  IListGroupContent groupContent=report.createListGroupContent();
  setContent(groupContent);
  restoreResultSet();
  initializeContent(groupDesign,groupContent);
  processBookmark(groupDesign,groupContent);
  handlePageBreakInsideOfGroup();
  handlePageBreakBeforeOfGroup();
  handlePageBreakAfterOfGroup();
  handlePageBreakAfterOfPreviousGroup();
  handlePageBreakBefore();
  if (context.isInFactory()) {
    handleOnCreate(groupContent);
  }
  startGroupTOCEntry(groupContent);
  prepareToExecuteChildren();
  return groupContent;
}",0.9413763806287172
73268,"public IContent execute(){
  TableGroupDesign groupDesign=(TableGroupDesign)getDesign();
  ITableGroupContent groupContent=report.createTableGroupContent();
  setContent(groupContent);
  restoreResultSet();
  initializeContent(groupDesign,groupContent);
  processBookmark(groupDesign,groupContent);
  handlePageBreakInsideOfGroup();
  handlePageBreakBeforeOfGroup();
  handlePageBreakAfterOfGroup();
  handlePageBreakAfterOfPreviousGroup();
  handlePageBreakBefore();
  startGroupTOCEntry(groupContent);
  prepareToExecuteChildren();
  return groupContent;
}","public IContent execute(){
  TableGroupDesign groupDesign=(TableGroupDesign)getDesign();
  ITableGroupContent groupContent=report.createTableGroupContent();
  setContent(groupContent);
  restoreResultSet();
  initializeContent(groupDesign,groupContent);
  processBookmark(groupDesign,groupContent);
  handlePageBreakInsideOfGroup();
  handlePageBreakBeforeOfGroup();
  handlePageBreakAfterOfGroup();
  handlePageBreakAfterOfPreviousGroup();
  handlePageBreakBefore();
  if (context.isInFactory()) {
    handleOnCreate(groupContent);
  }
  startGroupTOCEntry(groupContent);
  prepareToExecuteChildren();
  return groupContent;
}",0.9417721518987342
73269,"public Object visitListGroup(ListGroupDesign group,Object value){
  return visitReportItem(group,value);
}","public Object visitListGroup(ListGroupDesign group,Object value){
  ListGroupScriptExecutor.handleOnCreate((IListGroupContent)value,context);
  return value;
}",0.6264150943396226
73270,"public Object visitTableGroup(TableGroupDesign group,Object value){
  return visitReportItem(group,value);
}","public Object visitTableGroup(TableGroupDesign group,Object value){
  TableGroupScriptExecutor.handleOnCreate((ITableGroupContent)value,context);
  return value;
}",0.6273062730627307
73271,"public Object visitListGroup(ListGroupDesign group,Object value){
  return visitReportItem(group,value);
}","public Object visitListGroup(ListGroupDesign group,Object value){
  ListGroupScriptExecutor.handleOnRender((IListGroupContent)value,context);
  return value;
}",0.6264150943396226
73272,"public Object visitTableGroup(TableGroupDesign group,Object value){
  return visitReportItem(group,value);
}","public Object visitTableGroup(TableGroupDesign group,Object value){
  TableGroupScriptExecutor.handleOnRender((ITableGroupContent)value,context);
  return value;
}",0.6273062730627307
73273,"/** 
 * With group and filter
 * @throws BirtException
 */
public void testBasicIVSubQuery() throws Exception {
  this.GEN_add_filter=false;
  this.GEN_add_group=true;
  this.GEN_subquery_on_group=true;
  this._genBasicIVWithSubQuery();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_filter=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=true;
  this._preBasicIVWithSubQuery();
  this.closeArchiveReader();
  this.checkOutputFile();
}","/** 
 * With group and filter
 * @throws BirtException
 */
public void testBasicIVSubQuery() throws Exception {
  this.GEN_add_filter=false;
  this.GEN_add_group=true;
  this.GEN_subquery_on_group=true;
  this._genBasicIVWithSubQuery();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_filter=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=true;
  this._preBasicIVWithSubQuery();
  this.closeArchiveReader();
  this.checkOutputFile();
}",0.983718937446444
73274,"/** 
 * @throws Exception
 */
public void testBasicIV5() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_filter=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=true;
  this.preBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}","/** 
 * @throws Exception
 */
public void testBasicIV5() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_filter=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=true;
  this.preBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}",0.98043254376931
73275,"/** 
 * @throws Exception
 */
public void testBasicIV6() throws Exception {
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_filter=false;
  this.PRE_add_sort=false;
  this.PRE_add_group=false;
  this.preBasicIV();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_change_oldbinding=true;
  this.preBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}","/** 
 * @throws Exception
 */
public void testBasicIV6() throws Exception {
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_filter=false;
  this.PRE_add_sort=false;
  this.PRE_add_group=false;
  this.preBasicIV();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_change_oldbinding=true;
  this.preBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}",0.9696969696969696
73276,"/** 
 * With group
 * @throws BirtException
 */
public void testBasicIV3() throws Exception {
  this.GEN_add_group=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_sort=true;
  this.PRE_add_group=true;
  this.preBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}","/** 
 * With group
 * @throws BirtException
 */
public void testBasicIV3() throws Exception {
  this.GEN_add_group=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_sort=true;
  this.PRE_add_group=true;
  this.preBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}",0.9787709497206704
73277,"/** 
 * With group and filter
 * @throws BirtException
 */
public void testBasicIV4() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_filter=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=true;
  this.preBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}","/** 
 * With group and filter
 * @throws BirtException
 */
public void testBasicIV4() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_filter=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=true;
  this.preBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}",0.9815354713313896
73278,"/** 
 * With filter
 * @throws BirtException
 */
public void testBasicIV2() throws Exception {
  this.GEN_add_filter=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_sort=true;
  this.preBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}","/** 
 * With filter
 * @throws BirtException
 */
public void testBasicIV2() throws Exception {
  this.GEN_add_filter=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_sort=true;
  this.preBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}",0.9775147928994082
73279,"/** 
 * Not use detail. Sort when update, then sort+group in presentation.
 * @throws Exception
 */
public void testBasicNotDetail4() throws Exception {
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=-1;
  this.UPDATE_add_sort=true;
  this.UPDATE_add_diff_group=false;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=0;
  this.preBasicIV();
  this.checkOutputFile();
}","/** 
 * Not use detail. Sort when update, then sort+group in presentation.
 * @throws Exception
 */
public void testBasicNotDetail4() throws Exception {
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=-1;
  this.UPDATE_add_sort=true;
  this.UPDATE_add_diff_group=false;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=0;
  this.preBasicIV();
  this.checkOutputFile();
}",0.9878260869565216
73280,"/** 
 * Test the presentation result that based on original filter not updated filter.
 * @throws Exception
 */
public void testSubQuery6() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.GEN_add_subquery=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=0;
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=1;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=true;
  this.PRE_basedon_genfilter=true;
  this.PRE_add_group=0;
  this.UPDATE_add_subquery=2;
  this.preBasicIV();
  this.checkOutputFile();
}","/** 
 * Test the presentation result that based on original filter not updated filter.
 * @throws Exception
 */
public void testSubQuery6() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.GEN_add_subquery=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=0;
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=1;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=true;
  this.PRE_basedon_genfilter=true;
  this.PRE_add_group=0;
  this.UPDATE_add_subquery=2;
  this.preBasicIV();
  this.checkOutputFile();
}",0.9877071084981294
73281,"/** 
 * Test the presentation result that based on original filter not updated filter.
 * @throws Exception
 */
public void testSubQuery3() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.GEN_add_subquery=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=0;
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=1;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=true;
  this.PRE_basedon_genfilter=true;
  this.PRE_add_group=0;
  this.UPDATE_add_subquery=1;
  this.preBasicIV();
  this.checkOutputFile();
}","/** 
 * Test the presentation result that based on original filter not updated filter.
 * @throws Exception
 */
public void testSubQuery3() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.GEN_add_subquery=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=0;
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=1;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=true;
  this.PRE_basedon_genfilter=true;
  this.PRE_add_group=0;
  this.UPDATE_add_subquery=1;
  this.preBasicIV();
  this.checkOutputFile();
}",0.9876939539860888
73282,"/** 
 * Test the presentation result that based on original filter not updated filter.
 * @throws Exception
 */
public void testSubQuery5() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.GEN_add_subquery=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=0;
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=1;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=true;
  this.PRE_basedon_genfilter=true;
  this.PRE_add_group=0;
  this.UPDATE_add_subquery=2;
  this.preBasicIV();
  this.checkOutputFile();
}","/** 
 * Test the presentation result that based on original filter not updated filter.
 * @throws Exception
 */
public void testSubQuery5() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.GEN_add_subquery=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=0;
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=1;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=true;
  this.PRE_basedon_genfilter=true;
  this.PRE_add_group=0;
  this.UPDATE_add_subquery=2;
  this.preBasicIV();
  this.checkOutputFile();
}",0.9876939539860888
73283,"/** 
 * Test the presentation result that based on original filter not updated filter.
 * @throws Exception
 */
public void testSubQuery4() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.GEN_add_subquery=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=0;
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=2;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=true;
  this.PRE_basedon_genfilter=true;
  this.PRE_add_group=0;
  this.UPDATE_add_subquery=2;
  this.preBasicIV();
  this.checkOutputFile();
}","/** 
 * Test the presentation result that based on original filter not updated filter.
 * @throws Exception
 */
public void testSubQuery4() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.GEN_add_subquery=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=0;
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=2;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=true;
  this.PRE_basedon_genfilter=true;
  this.PRE_add_group=0;
  this.UPDATE_add_subquery=2;
  this.preBasicIV();
  this.checkOutputFile();
}",0.9876939539860888
73284,"/** 
 * With filter Gen: filter A, Update: filter A, filter B, Presentation: filter A, filter B, filter C
 * @throws BirtException
 */
public void testFilters4() throws Exception {
  this.GEN_add_filter=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=0;
  this.UPDATE_add_sort=true;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_add_filter=2;
  this.PRE_execute_query=true;
  this.PRE_basedon_genfilter=true;
  this.PRE_add_sort=true;
  this.preBasicIV();
  this.checkOutputFile();
}","/** 
 * With filter Gen: filter A, Update: filter A, filter B, Presentation: filter A, filter B, filter C
 * @throws BirtException
 */
public void testFilters4() throws Exception {
  this.GEN_add_filter=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=0;
  this.UPDATE_add_sort=true;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_add_filter=2;
  this.PRE_execute_query=true;
  this.PRE_basedon_genfilter=true;
  this.PRE_add_sort=true;
  this.preBasicIV();
  this.checkOutputFile();
}",0.9854735618826264
73285,"/** 
 * With filter Gen: filter A Update: filter A, filter B Pre: filter A, filter C
 * @throws BirtException
 */
public void testFilters3() throws Exception {
  this.GEN_add_filter=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=1;
  this.UPDATE_add_sort=true;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_add_filter=2;
  this.PRE_execute_query=true;
  this.PRE_add_sort=true;
  this.preBasicIV();
  this.checkOutputFile();
}","/** 
 * With filter Gen: filter A Update: filter A, filter B Pre: filter A, filter C
 * @throws BirtException
 */
public void testFilters3() throws Exception {
  this.GEN_add_filter=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=1;
  this.UPDATE_add_sort=true;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_add_filter=2;
  this.PRE_execute_query=true;
  this.PRE_add_sort=true;
  this.preBasicIV();
  this.checkOutputFile();
}",0.9844623990055936
73286,"/** 
 * Sort when update, then sort+group in presentation.
 * @throws Exception
 */
public void testSortGroup() throws Exception {
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=-1;
  this.UPDATE_add_sort=true;
  this.UPDATE_add_diff_group=false;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=0;
  this.preBasicIV();
  this.checkOutputFile();
}","/** 
 * Sort when update, then sort+group in presentation.
 * @throws Exception
 */
public void testSortGroup() throws Exception {
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=-1;
  this.UPDATE_add_sort=true;
  this.UPDATE_add_diff_group=false;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=0;
  this.preBasicIV();
  this.checkOutputFile();
}",0.9875074360499704
73287,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  String value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  String value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.9624960605105578
73288,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}",0.9558113627924248
73289,"public void testToDate1(){
  String[] testStrings={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar calendar=Calendar.getInstance();
  Date[] resultDates={null,null,null,null,null,null,null,null,null,null};
  calendar.clear();
  calendar.set(1997,0,1);
  resultDates[0]=calendar.getTime();
  calendar.set(1997,6,1);
  resultDates[1]=calendar.getTime();
  calendar.set(1997,6,16);
  resultDates[2]=calendar.getTime();
  calendar.set(1997,6,16,19,20,0);
  resultDates[3]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  resultDates[4]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  calendar.set(Calendar.MILLISECOND,45);
  resultDates[5]=calendar.getTime();
  calendar.set(1997,6,16,19,20,0);
  calendar.set(Calendar.MILLISECOND,0);
  resultDates[6]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  resultDates[7]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  calendar.set(Calendar.MILLISECOND,45);
  resultDates[8]=calendar.getTime();
  resultDates[9]=resultDates[8];
  for (int i=0; i < testStrings.length; i++) {
    try {
      Date dateResult=DataTypeUtil.toDate(testStrings[i]);
      System.out.println(""String_Node_Str"" + i);
      System.out.println(dateResult);
      System.out.println(resultDates[i]);
      System.out.println();
      System.out.println(dateResult.getTime());
      System.out.println(resultDates[i].getTime());
      assertEquals(dateResult,resultDates[i]);
    }
 catch (    BirtException e) {
      fail(""String_Node_Str"");
    }
  }
}","public void testToDate1(){
  String[] testStrings={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar calendar=Calendar.getInstance();
  Date[] resultDates=new Date[11];
  calendar.clear();
  calendar.set(1997,0,1);
  resultDates[0]=calendar.getTime();
  calendar.set(1997,6,1);
  resultDates[1]=calendar.getTime();
  calendar.set(1997,6,16);
  resultDates[2]=calendar.getTime();
  calendar.set(1997,6,16,19,20,0);
  resultDates[3]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  resultDates[4]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  calendar.set(Calendar.MILLISECOND,45);
  resultDates[5]=calendar.getTime();
  calendar.set(1997,6,16,19,20,0);
  calendar.set(Calendar.MILLISECOND,0);
  resultDates[6]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  resultDates[7]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  calendar.set(Calendar.MILLISECOND,45);
  resultDates[8]=calendar.getTime();
  resultDates[9]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  calendar.set(Calendar.MILLISECOND,45);
  resultDates[10]=calendar.getTime();
  for (int i=9; i < testStrings.length; i++) {
    try {
      Date dateResult=DataTypeUtil.toDate(testStrings[i]);
      System.out.println(""String_Node_Str"" + i);
      System.out.println(dateResult);
      System.out.println(resultDates[i]);
      System.out.println();
      System.out.println(dateResult.getTime());
      System.out.println(resultDates[i].getTime());
      assertEquals(dateResult,resultDates[i]);
    }
 catch (    BirtException e) {
      fail(""String_Node_Str"");
    }
  }
}",0.94
73290,"/** 
 * @param s
 * @return
 */
private static String cleanDate(String s){
  s=s.trim();
  if (s.indexOf('T') < 12) {
    s=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  int zoneIndex=s.indexOf(""String_Node_Str"");
  if (zoneIndex > 0) {
    return s.substring(0,zoneIndex).trim();
  }
  zoneIndex=s.indexOf('Z');
  if (zoneIndex == s.length() - 1) {
    return s.substring(0,zoneIndex).trim();
  }
  zoneIndex=s.indexOf('+');
  if (zoneIndex > 0) {
    return s.substring(0,zoneIndex).trim();
  }
  return s;
}","/** 
 * @param s
 * @return
 */
private static String cleanDate(String s){
  s=s.trim();
  if (s.indexOf('T') < 12) {
    s=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  int zoneIndex=s.indexOf(""String_Node_Str"");
  if (zoneIndex > 0) {
    return s.substring(0,zoneIndex).trim();
  }
  zoneIndex=s.indexOf('Z');
  if (zoneIndex == s.length() - 1) {
    return s.substring(0,zoneIndex).trim();
  }
  zoneIndex=getZoneIndex(s);
  if (zoneIndex > 0) {
    return s.substring(0,zoneIndex).trim();
  }
  return s;
}",0.9742120343839542
73291,"/** 
 * @param itemType the type of the extended item, i.e., ""chart""
 * @return an object that extended items use to handle java event 
 */
public IReportEventHandler createEventHandler(String itemType){
  IConfigurationElement config=(IConfigurationElement)queryExtensions.get(itemType);
  if (config != null) {
    Object object=createObject(config,""String_Node_Str"");
    if (object instanceof IReportEventHandler) {
      return (IReportEventHandler)object;
    }
  }
  return null;
}","/** 
 * @param itemType the type of the extended item, i.e., ""chart""
 * @return an object that extended items use to handle java event 
 */
public IReportEventHandler createEventHandler(String itemType){
  IConfigurationElement config=(IConfigurationElement)eventHandlerExtensions.get(itemType);
  if (config != null) {
    Object object=createObject(config,""String_Node_Str"");
    if (object instanceof IReportEventHandler) {
      return (IReportEventHandler)object;
    }
  }
  return null;
}",0.982706002034588
73292,"public void setCurrentView(IDesignElement viewElement) throws SemanticException {
  DesignElementHandle tmpElement=null;
  if (viewElement != null)   tmpElement=((DesignElement)viewElement).handle;
  ((ReportItemHandle)handle).setCurrentView(tmpElement);
}","public void setCurrentView(IDesignElement viewElement) throws SemanticException {
  DesignElementHandle tmpElement=null;
  if (viewElement instanceof MultiRowItem) {
    DesignElement reportItem=(DesignElement)((MultiRowItem)viewElement).getExtensionElement();
    tmpElement=reportItem.handle;
  }
 else   if (viewElement != null) {
    tmpElement=((DesignElement)viewElement).handle;
  }
  ((ReportItemHandle)handle).setCurrentView(tmpElement);
}",0.7272727272727273
73293,"protected void visitExtendedItem(ExtendedItemHandle handle){
  String tagName=handle.getExtensionName();
  IReportItemPreparation itemPreparation=ExtensionManager.getInstance().createPreparationItem(tagName);
  if (itemPreparation != null) {
    ReportItemPreparationInfo preparationInfo=new ReportItemPreparationInfo(handle,new PreparationContext(executionContext,this));
    itemPreparation.init(preparationInfo);
    itemPreparation.prepare();
  }
 else {
    ExtendedItemScriptExecutor.handleOnPrepare((ExtendedItemHandle)handle,executionContext);
    Iterator propIter=handle.getPropertyIterator();
    while (propIter.hasNext()) {
      PropertyHandle propHandle=(PropertyHandle)propIter.next();
      IElementPropertyDefn property=propHandle.getPropertyDefn();
      if (property.getTypeCode() == IPropertyType.ELEMENT_TYPE) {
        Object children=propHandle.getValue();
        if (children instanceof List) {
          List tempList=(List)children;
          for (int i=0; tempList != null && i < tempList.size(); i++) {
            Object tempObj=tempList.get(i);
            if (tempObj instanceof ReportItemHandle) {
              apply((ReportItemHandle)tempObj);
            }
          }
        }
 else         if (children instanceof ReportItemHandle) {
          apply((ReportItemHandle)children);
        }
      }
    }
  }
}","protected void visitExtendedItem(ExtendedItemHandle handle){
  String tagName=handle.getExtensionName();
  IReportItemPreparation itemPreparation=ExtensionManager.getInstance().createPreparationItem(tagName);
  if (itemPreparation != null) {
    ReportItemPreparationInfo preparationInfo=new ReportItemPreparationInfo(handle,new PreparationContext(executionContext,this));
    itemPreparation.init(preparationInfo);
    try {
      itemPreparation.prepare();
    }
 catch (    BirtException ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
      executionContext.addException(handle,ex);
    }
  }
 else {
    ExtendedItemScriptExecutor.handleOnPrepare((ExtendedItemHandle)handle,executionContext);
    Iterator propIter=handle.getPropertyIterator();
    while (propIter.hasNext()) {
      PropertyHandle propHandle=(PropertyHandle)propIter.next();
      IElementPropertyDefn property=propHandle.getPropertyDefn();
      if (property.getTypeCode() == IPropertyType.ELEMENT_TYPE) {
        Object children=propHandle.getValue();
        if (children instanceof List) {
          List tempList=(List)children;
          for (int i=0; tempList != null && i < tempList.size(); i++) {
            Object tempObj=tempList.get(i);
            if (tempObj instanceof ReportItemHandle) {
              apply((ReportItemHandle)tempObj);
            }
          }
        }
 else         if (children instanceof ReportItemHandle) {
          apply((ReportItemHandle)children);
        }
      }
    }
  }
}",0.9264190609670636
73294,"public IContent execute(){
  if (executor != null) {
    getParentResultSet();
    if (executor instanceof ExtendedGenerateExecutor) {
      ExtendedGenerateExecutor gExecutor=(ExtendedGenerateExecutor)executor;
      gExecutor.parent=parent;
      gExecutor.context=context;
      gExecutor.report=report;
      gExecutor.design=design;
    }
    content=executor.execute();
    if (content != null) {
      IContent pContent=(IContent)content.getParent();
      if (pContent == null) {
        pContent=getParentContent();
        content.setParent(pContent);
      }
      InstanceID iid=content.getInstanceID();
      if (iid != null) {
        InstanceID pid=iid.getParentID();
        if (pid == null && pContent != null) {
          pid=pContent.getInstanceID();
        }
        long uid=iid.getUniqueID();
        if (uid == -1) {
          uid=generateUniqueID();
        }
        iid=new InstanceID(pid,uid,iid.getComponentID(),iid.getDataID());
        content.setInstanceID(iid);
      }
 else {
        iid=getInstanceID();
        content.setInstanceID(iid);
      }
      if (context.isInFactory()) {
        handleOnCreate(content);
      }
      startTOCEntry(content);
    }
  }
  return content;
}","public IContent execute(){
  if (executor != null) {
    getParentResultSet();
    if (executor instanceof ExtendedGenerateExecutor) {
      ExtendedGenerateExecutor gExecutor=(ExtendedGenerateExecutor)executor;
      gExecutor.parent=parent;
      gExecutor.context=context;
      gExecutor.report=report;
      gExecutor.design=design;
    }
    content=executor.execute();
    if (content != null) {
      IContent pContent=(IContent)content.getParent();
      if (pContent == null) {
        pContent=getParentContent();
        content.setParent(pContent);
      }
      InstanceID iid=content.getInstanceID();
      if (iid != null) {
        InstanceID pid=iid.getParentID();
        if (pid == null && pContent != null) {
          pid=pContent.getInstanceID();
        }
        long uid=iid.getUniqueID();
        if (uid == -1) {
          uid=generateUniqueID();
        }
        iid=new InstanceID(pid,uid,iid.getComponentID(),iid.getDataID());
        content.setInstanceID(iid);
      }
 else {
        iid=getInstanceID();
        content.setInstanceID(iid);
      }
      if (content.getGenerateBy() == null) {
        if (design == null) {
          long componentId=content.getInstanceID().getComponentID();
          if (componentId != -1) {
            design=(ReportItemDesign)report.getDesign().getReportItemByID(componentId);
          }
        }
        content.setGenerateBy(design);
      }
      if (context.isInFactory()) {
        handleOnCreate(content);
      }
      startTOCEntry(content);
    }
  }
  return content;
}",0.8788752703677001
73295,public void prepare(DesignElementHandle handle);,public void prepare(DesignElementHandle handle) throws BirtException ;,0.8135593220338984
73296,public void prepare();,public void prepare() throws BirtException ;,0.6666666666666666
73297,"public void prepare(){
}","public void prepare() throws BirtException {
  context.triggerEvent(handle);
  prepareChildren();
}",0.3902439024390244
73298,"public void prepare(DesignElementHandle handle){
  visitor.apply(handle);
}","public void prepare(DesignElementHandle handle) throws BirtException {
  visitor.apply(handle);
}",0.872093023255814
73299,"public void startCell(ICellContent cell){
  if (cellEmitter != null) {
    cellEmitter.startCell(cell);
  }
 else {
    if (!isNestTable()) {
      BufferedReportEmitter buffer=null;
      int colId=cell.getColumn();
      int colSpan=cell.getColSpan();
      int rowSpan=cell.getRowSpan();
      CellDesign cellDesign=(CellDesign)cell.getGenerateBy();
      if (cellDesign != null) {
        String dropType=cellDesign.getDrop();
        if (dropType != null && !""String_Node_Str"".equals(dropType)) {
          rowSpan=createDropID(getGroupLevel(),dropType);
        }
      }
      if (!hasDropCell() && (rowSpan < 0 || rowSpan > 1)) {
        layoutEvents.push(new LayoutEvent(LayoutEvent.ON_FIRST_DROP_CELL,new StartInfo(layout.getRowCount() - 1,colId)));
      }
      if (hasDropCell() || rowSpan < 0 || rowSpan > 1) {
        buffer=new BufferedReportEmitter(emitter);
        cellEmitter=buffer;
      }
      createCell(colId,rowSpan,colSpan,new CellContent(cell,buffer));
      if (hasDropCell()) {
        return;
      }
      emitter.startCell(layout.getWrappedCellContent(cell));
    }
 else {
      emitter.startCell(cell);
    }
  }
}","public void startCell(ICellContent cell){
  if (cellEmitter != null) {
    cellEmitter.startCell(cell);
  }
 else {
    if (!isNestTable()) {
      BufferedReportEmitter buffer=null;
      int colId=cell.getColumn();
      int colSpan=cell.getColSpan();
      int rowSpan=cell.getRowSpan();
      if (cell.getGenerateBy() instanceof CellDesign) {
        CellDesign cellDesign=(CellDesign)cell.getGenerateBy();
        if (cellDesign != null) {
          String dropType=cellDesign.getDrop();
          if (dropType != null && !""String_Node_Str"".equals(dropType)) {
            rowSpan=createDropID(getGroupLevel(),dropType);
          }
        }
      }
      if (!hasDropCell() && (rowSpan < 0 || rowSpan > 1)) {
        layoutEvents.push(new LayoutEvent(LayoutEvent.ON_FIRST_DROP_CELL,new StartInfo(layout.getRowCount() - 1,colId)));
      }
      if (hasDropCell() || rowSpan < 0 || rowSpan > 1) {
        buffer=new BufferedReportEmitter(emitter);
        cellEmitter=buffer;
      }
      createCell(colId,rowSpan,colSpan,new CellContent(cell,buffer));
      if (hasDropCell()) {
        return;
      }
      emitter.startCell(layout.getWrappedCellContent(cell));
    }
 else {
      emitter.startCell(cell);
    }
  }
}",0.9369217830109337
73300,"public static IAction createStackAction(String id,CommandStack stack){
  Assert.isNotNull(id);
  Assert.isNotNull(stack);
  GlobalStackActionEntry entry=(GlobalStackActionEntry)stackActionEntrys.get(stack);
  if (entry == null) {
    entry=new GlobalStackActionEntry(stack);
    stackActionEntrys.put(stack,entry);
  }
  return entry.getAction(id);
}","public static IAction createStackAction(String id,CommandStack stack){
}",0.3412322274881517
73301,"public static IAction createSelectionAction(String id,ISelectionProvider provider){
  Assert.isNotNull(id);
  Assert.isNotNull(provider);
  if (COPY.equals(id)) {
    return new GlobalCopyAction(provider);
  }
 else   if (CUT.equals(id)) {
    return new GlobalCutAction(provider);
  }
 else   if (PASTE.equals(id)) {
    return new GlobalPasteAction(provider);
  }
 else   if (DELETE.equals(id)) {
    return new GlobalDeleteAction(provider);
  }
 else   if (NewDataSourceAction.ID.equals(id)) {
    return new NewDataSourceAction();
  }
 else   if (NewDataSetAction.ID.equals(id)) {
    return new NewDataSetAction();
  }
 else   if (NewJointDataSetAction.ID.equals(id)) {
    return new NewJointDataSetAction();
  }
  String elementType=null;
  if (GeneralInsertMenuAction.INSERT_TEXT_ID.equals(id)) {
    elementType=ReportDesignConstants.TEXT_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_LABEL_ID.equals(id)) {
    elementType=ReportDesignConstants.LABEL_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_DATA_ID.equals(id)) {
    elementType=ReportDesignConstants.DATA_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_IMAGE_ID.equals(id)) {
    elementType=ReportDesignConstants.IMAGE_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_GRID_ID.equals(id)) {
    elementType=ReportDesignConstants.GRID_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_LIST_ID.equals(id)) {
    elementType=ReportDesignConstants.LIST_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_TABLE_ID.equals(id)) {
    elementType=ReportDesignConstants.TABLE_ITEM;
  }
 else   if (GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_ID.equals(id)) {
    elementType=ReportDesignConstants.TEXT_DATA_ITEM;
  }
 else   if (InsertRowAboveAction.ID.equals(id)) {
    return new GlobalInsertRowAction(provider,id,InsertAction.ABOVE);
  }
 else   if (InsertRowBelowAction.ID.equals(id)) {
    return new GlobalInsertRowAction(provider,id,InsertAction.BELOW);
  }
 else   if (NewParameterAction.INSERT_SCALAR_PARAMETER.equals(id)) {
    return new NewParameterAction(id,ReportDesignConstants.SCALAR_PARAMETER_ELEMENT);
  }
 else   if (NewParameterAction.INSERT_CASCADING_PARAMETER_GROUP.equals(id)) {
    return new NewParameterAction(id,ReportDesignConstants.CASCADING_PARAMETER_GROUP_ELEMENT);
  }
 else   if (NewParameterAction.INSERT_PARAMETER_GROUP.equals(id)) {
    return new NewParameterAction(id,ReportDesignConstants.PARAMETER_GROUP_ELEMENT);
  }
 else {
    if (DEUtil.getMetaDataDictionary().getExtension(id) != null) {
      elementType=id;
    }
  }
  if (elementType != null) {
    GlobalInsertAction action=new GlobalInsertAction(provider,id,elementType);
    action.setText(DEUtil.getElementDefn(elementType).getDisplayName());
    return action;
  }
  return null;
}","public static IAction createSelectionAction(String id,ISelectionProvider provider){
}",0.0595238095238095
73302,"/** 
 * Constructs the editor with a specified parent.
 * @param parent the parent editor.
 */
public ReportDecoratedScriptEditor(IEditorPart parent){
  this.parent=parent;
  setRulerContextMenuId(""String_Node_Str"");
}","/** 
 * Constructs the editor with a specified parent.
 * @param parent the parent editor.
 */
public ReportDecoratedScriptEditor(IEditorPart parent){
  super(parent);
  setRulerContextMenuId(""String_Node_Str"");
}",0.9280742459396752
73303,"/** 
 * Constructs an script editor with the specified script.
 * @param script the script to edit
 */
public DecoratedScriptEditor(String script){
  super();
  setSourceViewerConfiguration(new ScriptSourceViewerConfiguration(context));
  setDocumentProvider(new ScriptDocumentProvider());
  setScript(script);
}","/** 
 * Constructs a decorated script editor with the specified parent and the specified script.
 * @param parent the parent editor.
 * @param script the script to edit
 */
public DecoratedScriptEditor(IEditorPart parent,String script){
  super();
  this.parent=parent;
  setSourceViewerConfiguration(new ScriptSourceViewerConfiguration(context));
  setDocumentProvider(new ScriptDocumentProvider(parent));
  setScript(script);
}",0.8232118758434548
73304,"/** 
 * Creates script editor, dosen't include controller
 * @return a script editor
 */
protected IScriptEditor createScriptEditor(){
  return new ScriptEditor();
}","/** 
 * Creates script editor, dosen't include controller
 * @return a script editor
 */
protected IScriptEditor createScriptEditor(){
  return new ScriptEditor(this);
}",0.9880239520958084
73305,"/** 
 * Constructs an script editor with the specified script.
 * @param script the script to edit
 */
public ScriptEditor(String script){
  super();
  setSourceViewerConfiguration(new JSSourceViewerConfiguration(context));
  setDocumentProvider(new JSDocumentProvider());
  setScript(script);
}","/** 
 * Constructs a script editor with the specified parent and the specified script.
 * @param parent the parent editor.
 * @param script the script to edit
 */
public ScriptEditor(IEditorPart parent,String script){
  super();
  this.parent=parent;
  setSourceViewerConfiguration(new JSSourceViewerConfiguration(context));
  setDocumentProvider(new JSDocumentProvider(parent));
  setScript(script);
}",0.8263988522238164
73306,"protected void doSaveDocument(IProgressMonitor monitor,Object element,IDocument document,boolean overwrite) throws CoreException {
}","protected void doSaveDocument(IProgressMonitor monitor,Object element,IDocument document,boolean overwrite) throws CoreException {
  if (part != null) {
    part.doSave(monitor);
  }
}",0.8354430379746836
73307,"/** 
 * Creates a new document provider.
 */
public DocumentProvider(){
  super();
}","/** 
 * Creates a new document provider with the specified saveable part.
 * @param part the saveable part.
 */
public DocumentProvider(ISaveablePart part){
  super();
  this.part=part;
}",0.6199261992619927
73308,"/** 
 * Creates a new document provider.
 */
public StorageDocumentProvider(){
  super();
}","/** 
 * Creates a new document provider with the specified saveable part.
 * @param part the saveable part.
 */
public StorageDocumentProvider(ISaveablePart part){
  super(part);
}",0.6715867158671587
73309,"/** 
 * Returns the report design handle
 * @param request
 * @throws Exception
 * @return Report Design Handle
 */
protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=null;
  boolean isDocumentExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT);
  boolean isReportExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT);
  if (isDocumentExist && !isReportExist) {
    boolean isValidDocument=ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT));
    if (isValidDocument) {
      reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
      if (reportDocumentInstance != null) {
        reportRunnable=reportDocumentInstance.getReportRunnable();
      }
 else {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
      }
    }
 else {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
  }
 else   if (isReportExist) {
    if (isDocumentExist && !ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT))) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
    reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
    }
    if (reportRunnable == null) {
      if (!ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT))) {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
      }
      try {
        reportRunnable=BirtUtility.getRunnableFromDesignFile(request,this.reportDesignName,this.moduleOptions);
        if (reportRunnable == null) {
          throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportDocumentInstance != null) {
    this.documentInUrl=true;
    this.parameterMap=reportDocumentInstance.getParameterValues();
    if (!reportDocumentInstance.isComplete() && isReportExist)     this.isDocumentProcessing=true;
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","/** 
 * Returns the report design handle
 * @param request
 * @throws Exception
 * @return Report Design Handle
 */
protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=null;
  boolean isDocumentExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT);
  boolean isReportExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT);
  if (isDocumentExist && !isReportExist) {
    boolean isValidDocument=ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT));
    if (isValidDocument) {
      reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
      if (reportDocumentInstance != null) {
        reportRunnable=reportDocumentInstance.getReportRunnable();
      }
 else {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
      }
    }
 else {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
  }
 else   if (isReportExist) {
    if (isDocumentExist && !ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT))) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
    reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
    if (ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT))) {
      try {
        reportRunnable=BirtUtility.getRunnableFromDesignFile(request,this.reportDesignName,this.moduleOptions);
        if (reportRunnable == null) {
          throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportDocumentInstance != null) {
    this.documentInUrl=true;
    this.parameterMap=reportDocumentInstance.getParameterValues();
    if (!reportDocumentInstance.isComplete() && isReportExist)     this.isDocumentProcessing=true;
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.8743074792243767
73310,"/** 
 * Constructor
 * @param handle The moudle handle
 */
public LibraryHandleAdapter(ModuleHandle handle){
  super(handle);
  setCurrentEditorModel(handle,CURRENTMODEL);
}","/** 
 * Constructor
 * @param handle The moudle handle
 */
public LibraryHandleAdapter(ModuleHandle handle,IModelAdapterHelper mark){
  super(handle,mark);
  setCurrentEditorModel(handle,CURRENTMODEL);
}",0.9202127659574468
73311,"/** 
 * Get the design element handle adapter for specified report element handle
 * @param obj Given boject
 * @param mark Helper mark
 * @return
 */
public DesignElementHandleAdapter getDesignElementHandleAdapter(Object obj,IModelAdapterHelper mark){
  if (obj instanceof IAdaptable) {
    obj=((IAdaptable)obj).getAdapter(DesignElementHandle.class);
  }
  if (obj instanceof ReportItemHandle && mark instanceof IMultipleAdapterHelper) {
    return getMultipleAdapter(obj,mark);
  }
  if (obj instanceof ReportDesignHandle) {
    return getReportDesignHandleAdapter();
  }
 else   if (obj instanceof LibraryHandle) {
    return getLibraryHandleAdapter();
  }
 else   if (obj instanceof SimpleMasterPageHandle) {
    return getReportDesignHandleAdapter();
  }
 else   if (obj instanceof TableHandle) {
    return getTableHandleAdapter(obj,mark);
  }
  if (obj instanceof RowHandle) {
    return getRowHandleAdapter(obj,mark);
  }
  if (obj instanceof ColumnHandle) {
    return getColumnHandleAdapter(obj,mark);
  }
  if (obj instanceof CellHandle) {
    return getCellHandleAdapter(obj,mark);
  }
  if (obj instanceof ImageHandle) {
    return getImageHandleAdapter(obj,mark);
  }
  if (obj instanceof GridHandle) {
    return getGridHandleAdapter(obj,mark);
  }
  if (obj instanceof ListHandle) {
    return getListHandleAdapter(obj,mark);
  }
  if (obj instanceof AutoTextHandle) {
    return getAutoTextHandleAdapter(obj,mark);
  }
  if (obj instanceof LabelHandle) {
    return getLabelHandleAdapter(obj,mark);
  }
  if (obj instanceof TextDataHandle) {
    return getTextDataHandleAdapter(obj,mark);
  }
  if (obj instanceof DataItemHandle) {
    return getDataItemHandleAdapter(obj,mark);
  }
  if (obj instanceof TextItemHandle) {
    return getTextItemHandleAdapter(obj,mark);
  }
  if (obj instanceof ExtendedItemHandle) {
    return getExtendedItemHandleAdapter(obj,mark);
  }
  return null;
}","/** 
 * Get the design element handle adapter for specified report element handle
 * @param obj Given boject
 * @param mark Helper mark
 * @return
 */
public DesignElementHandleAdapter getDesignElementHandleAdapter(Object obj,IModelAdapterHelper mark){
  if (obj instanceof IAdaptable) {
    Object adapter=((IAdaptable)obj).getAdapter(DesignElementHandle.class);
    if (adapter != null) {
      obj=adapter;
    }
  }
  if (obj instanceof ReportItemHandle && mark instanceof IMultipleAdapterHelper) {
    return getMultipleAdapter(obj,mark);
  }
  if (obj instanceof ReportDesignHandle) {
    return getReportDesignHandleAdapter(obj,mark);
  }
 else   if (obj instanceof LibraryHandle) {
    return getLibraryHandleAdapter(obj,mark);
  }
 else   if (obj instanceof SimpleMasterPageHandle) {
    return getReportDesignHandleAdapter(obj,mark);
  }
 else   if (obj instanceof TableHandle) {
    return getTableHandleAdapter(obj,mark);
  }
  if (obj instanceof RowHandle) {
    return getRowHandleAdapter(obj,mark);
  }
  if (obj instanceof ColumnHandle) {
    return getColumnHandleAdapter(obj,mark);
  }
  if (obj instanceof CellHandle) {
    return getCellHandleAdapter(obj,mark);
  }
  if (obj instanceof ImageHandle) {
    return getImageHandleAdapter(obj,mark);
  }
  if (obj instanceof GridHandle) {
    return getGridHandleAdapter(obj,mark);
  }
  if (obj instanceof ListHandle) {
    return getListHandleAdapter(obj,mark);
  }
  if (obj instanceof AutoTextHandle) {
    return getAutoTextHandleAdapter(obj,mark);
  }
  if (obj instanceof LabelHandle) {
    return getLabelHandleAdapter(obj,mark);
  }
  if (obj instanceof TextDataHandle) {
    return getTextDataHandleAdapter(obj,mark);
  }
  if (obj instanceof DataItemHandle) {
    return getDataItemHandleAdapter(obj,mark);
  }
  if (obj instanceof TextItemHandle) {
    return getTextItemHandleAdapter(obj,mark);
  }
  if (obj instanceof ExtendedItemHandle) {
    return getExtendedItemHandleAdapter(obj,mark);
  }
  return null;
}",0.9761354888375674
73312,"public void dispose(){
  if (subBarMap != null) {
    for (Iterator iter=subBarMap.values().iterator(); iter.hasNext(); ) {
      SubActionBarDef def=(SubActionBarDef)iter.next();
      def.dispose();
    }
    subBarMap.clear();
  }
  super.dispose();
}","public void dispose(){
  if (subBarMap != null) {
    for (Iterator iter=subBarMap.values().iterator(); iter.hasNext(); ) {
      SubActionBarDef def=(SubActionBarDef)iter.next();
      def.dispose();
    }
    subBarMap.clear();
  }
  currentActionBarDef.dispose();
  currentActionBarDef=null;
  super.dispose();
}",0.8927943760984183
73313,"private void terminated(){
  DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);
  setTerminating(false);
  if (!fTerminated) {
    setTerminated(true);
    reportVM.disconnect();
    fireTerminateEvent();
  }
  breakPoints.clear();
  try {
    if (getLaunch().getLaunchConfiguration().getAttribute(IReportLaunchConstants.ATTR_OPEN_TARGET,false) && getLaunch().getLaunchConfiguration().getAttribute(IReportLaunchConstants.ATTR_TASK_TYPE,IReportLaunchConstants.DEFAULT_TASK_TYPE) != IReportLaunchConstants.TASK_TYPE_RUN) {
      while (!getProcess().isTerminated()) {
        try {
synchronized (this) {
            wait(DELAY_TIME);
          }
        }
 catch (        InterruptedException e) {
        }
      }
      if (getProcess().getExitValue() == ReportLauncher.EXIT_OK) {
        File file=new File(getFileName());
        String fileName=ReportLauncher.getOutputFileName(tempFolder,file.getName(),launch.getLaunchConfiguration().getAttribute(IReportLaunchConstants.ATTR_TARGET_FORMAT,IReportLaunchConstants.DEFAULT_TARGET_FORMAT));
        if (fileName != null && new File(fileName).exists()) {
          Program.launch(fileName);
        }
      }
    }
  }
 catch (  Exception e) {
  }
}","private void terminated(){
  DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);
  setTerminating(false);
  if (!fTerminated) {
    setTerminated(true);
    reportVM.disconnect();
    fireTerminateEvent();
  }
  breakPoints.clear();
}",0.3516778523489933
73314,"public void run(VMRunnerConfiguration configuration,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  delegate.run(configuration,launch,monitor);
  IProcess[] ps=launch.getProcesses();
  if (runScript && ps != null && ps.length > 0) {
    if (monitor == null) {
      monitor=new NullProgressMonitor();
    }
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1);
    subMonitor.beginTask(""String_Node_Str"",1);
    ReportVMClient vm=new ReportVMClient();
    ScriptDebugTarget target=new ScriptDebugTarget(launch,vm,null,ps[0],config.helper.requestPort,config.helper.eventPort,config.helper.tempFolder);
    target.setFileName(config.helper.fileName);
    subMonitor.worked(1);
    subMonitor.done();
  }
}","public void run(VMRunnerConfiguration configuration,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  delegate.run(configuration,launch,monitor);
  IProcess[] ps=launch.getProcesses();
  if (runScript && ps != null && ps.length > 0) {
    if (monitor == null) {
      monitor=new NullProgressMonitor();
    }
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1);
    subMonitor.beginTask(""String_Node_Str"",1);
    ReportVMClient vm=new ReportVMClient();
    ScriptDebugTarget target=new ScriptDebugTarget(launch,vm,null,ps[0],config.helper.requestPort,config.helper.eventPort,config.helper.tempFolder);
    target.setFileName(config.helper.fileName);
    subMonitor.worked(1);
    subMonitor.done();
    ReportLaunchHelper.handleProcessTermination(launch,ps[0],config.helper.fileName,config.helper.tempFolder);
  }
}",0.9297023432552248
73315,"public void run(){
  result[0]=new Boolean(getParameterValues(getInputParameters(fileName,taskType,engine),paramValues));
}","public void run(){
  try {
    while (!process.isTerminated()) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
      }
    }
    if (process.getExitValue() == ReportLauncher.EXIT_OK) {
      File file=new File(fileName);
      String openName=ReportLauncher.getOutputFileName(outputFolder,file.getName(),suffix);
      if (openName != null && new File(openName).exists()) {
        Program.launch(openName);
      }
    }
  }
 catch (  Exception e) {
  }
}",0.1064516129032258
73316,"protected void init(){
  assert(content instanceof IImageContent);
  image=(IImageContent)content;
  Dimension contentDimension=getSpecifiedDimension(image);
  ImageArea imageArea=(ImageArea)AreaFactory.createImageArea(image);
  imageArea.setWidth(contentDimension.getWidth());
  imageArea.setHeight(contentDimension.getHeight());
  if (PropertyUtil.isInlineElement(image)) {
    root=(ContainerArea)AreaFactory.createInlineContainer(image,true,true);
  }
 else {
    root=(ContainerArea)AreaFactory.createBlockContainer(image);
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  root.setContentWidth(imageArea.getWidth());
  root.setContentHeight(imageArea.getHeight());
  processChartLegend(image,imageArea);
}","protected void init(){
  assert(content instanceof IImageContent);
  image=(IImageContent)content;
  if (PropertyUtil.isInlineElement(image)) {
    root=(ContainerArea)AreaFactory.createInlineContainer(image,true,true);
  }
 else {
    root=(ContainerArea)AreaFactory.createBlockContainer(image);
  }
  root.setAllocatedWidth(parent.getCurrentMaxContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=(ImageArea)AreaFactory.createImageArea(image);
  imageArea.setWidth(contentDimension.getWidth());
  imageArea.setHeight(contentDimension.getHeight());
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  root.setContentWidth(imageArea.getWidth());
  root.setContentHeight(imageArea.getHeight());
  processChartLegend(image,imageArea);
}",0.4266169154228855
73317,"protected Dimension getSpecifiedDimension(IImageContent content){
  Dimension dim=new Dimension(DEFAULT_WIDHT,DEFAULT_HEIGHT);
  try {
    intrinsic=getIntrinsicDimension(content);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage());
  }
  boolean scale=false;
  int specifiedWidth=getDimensionValue(content.getWidth());
  int specifiedHeight=getDimensionValue(content.getHeight());
  if (intrinsic == null) {
    dim.setDimension(specifiedWidth == 0 ? DEFAULT_WIDHT : specifiedWidth,specifiedHeight == 0 ? DEFAULT_HEIGHT : specifiedHeight);
    return dim;
  }
  if (scale) {
    double ratio=intrinsic.getRatio();
    if (specifiedWidth > 0) {
      if (specifiedHeight > 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,(int)(specifiedWidth / ratio));
      }
    }
 else {
      if (specifiedHeight > 0) {
        dim.setDimension((int)(specifiedHeight * ratio),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
 else {
    if (specifiedWidth > 0) {
      if (specifiedHeight > 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,intrinsic.getHeight());
      }
    }
 else {
      if (specifiedHeight > 0) {
        dim.setDimension(intrinsic.getWidth(),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
  return dim;
}","protected Dimension getSpecifiedDimension(IImageContent content,int pWidth,boolean scale){
  Dimension dim=new Dimension(DEFAULT_WIDHT,DEFAULT_HEIGHT);
  try {
    intrinsic=getIntrinsicDimension(content);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage());
  }
  int specifiedWidth=getDimensionValue(content.getWidth(),pWidth);
  int specifiedHeight=getDimensionValue(content.getHeight());
  if (intrinsic == null) {
    dim.setDimension(specifiedWidth == 0 ? DEFAULT_WIDHT : specifiedWidth,specifiedHeight == 0 ? DEFAULT_HEIGHT : specifiedHeight);
    return dim;
  }
  if (scale) {
    double ratio=intrinsic.getRatio();
    if (specifiedWidth > 0) {
      if (specifiedHeight > 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,(int)(specifiedWidth / ratio));
      }
    }
 else {
      if (specifiedHeight > 0) {
        dim.setDimension((int)(specifiedHeight * ratio),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
 else {
    if (specifiedWidth > 0) {
      if (specifiedHeight > 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,intrinsic.getHeight());
      }
    }
 else {
      if (specifiedHeight > 0) {
        dim.setDimension(intrinsic.getWidth(),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
  return dim;
}",0.9821370574861968
73318,"private ReportItemHandle getSelectedElement(){
  if (getTableEditPart() != null && getTableEditPart().getModel() instanceof ReportItemHandle) {
    return (ReportItemHandle)getTableEditPart().getModel();
  }
  if (getListEditPart() != null && getListEditPart().getModel() instanceof ReportItemHandle) {
    return (ReportItemHandle)getListEditPart().getModel();
  }
  return null;
}","private ReportItemHandle getSelectedElement(){
  if (getTableEditPart() != null && getTableEditPart().getModel() instanceof ReportItemHandle) {
    return (ReportItemHandle)getTableEditPart().getModel();
  }
  if (getTableMultipleEditPart() != null && getTableMultipleEditPart().getModel() instanceof ReportItemHandle) {
    return (ReportItemHandle)getTableMultipleEditPart().getModel();
  }
  if (getListEditPart() != null && getListEditPart().getModel() instanceof ReportItemHandle) {
    return (ReportItemHandle)getListEditPart().getModel();
  }
  return null;
}",0.7966280295047419
73319,"public Object execute(ExecutionEvent event) throws ExecutionException {
  super.execute(event);
  TableEditPart editPart=getTableEditPart();
  ListEditPart listPart=getListEditPart();
  if (editPart != null || listPart != null) {
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
    DataBindingDialog dialog=new DataBindingDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),getSelectedElement());
    if (dialog.open() == Dialog.OK) {
      stack.commit();
    }
 else {
      stack.rollback();
    }
  }
  return new Boolean(true);
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  super.execute(event);
  TableEditPart editPart=getTableEditPart();
  ListEditPart listPart=getListEditPart();
  ReportElementEditPart part=getTableMultipleEditPart();
  if (editPart != null || listPart != null || part != null) {
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
    DataBindingDialog dialog=new DataBindingDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),getSelectedElement());
    if (dialog.open() == Dialog.OK) {
      stack.commit();
    }
 else {
      stack.rollback();
    }
  }
  return new Boolean(true);
}",0.9456440804169768
73320,"public Object execute(ExecutionEvent event) throws ExecutionException {
  super.execute(event);
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  currentModel=context.getVariable(ICommandParameterNameContants.INSERT_GROUP_CURRENT_MODEL_NAME);
  int position=0;
  Object obj=context.getVariable(ICommandParameterNameContants.INSERT_GROUP_POSITION);
  if (obj != null && obj instanceof Integer) {
    position=((Integer)obj).intValue();
  }
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  CommandStack stack=getActiveCommandStack();
  stack.startTrans(STACK_MSG_ADD_GROUP);
  boolean retValue=false;
  if (getTableEditPart() != null) {
    retValue=getTableEditPart().insertGroup(position);
  }
 else {
    retValue=getListEditPart().insertGroup(position);
  }
  if (retValue) {
    stack.commit();
  }
 else {
    stack.rollbackAll();
  }
  return new Boolean(true);
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  super.execute(event);
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  currentModel=context.getVariable(ICommandParameterNameContants.INSERT_GROUP_CURRENT_MODEL_NAME);
  int position=0;
  Object obj=context.getVariable(ICommandParameterNameContants.INSERT_GROUP_POSITION);
  if (obj != null && obj instanceof Integer) {
    position=((Integer)obj).intValue();
  }
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  CommandStack stack=getActiveCommandStack();
  stack.startTrans(STACK_MSG_ADD_GROUP);
  boolean retValue=false;
  if (getTableEditPart() != null) {
    retValue=getTableEditPart().insertGroup(position);
  }
 else   if (getTableMultipleEditPart() != null) {
    retValue=UIUtil.createGroup((DesignElementHandle)getTableMultipleEditPart().getModel(),position);
  }
 else {
    retValue=getListEditPart().insertGroup(position);
  }
  if (retValue) {
    stack.commit();
  }
 else {
    stack.rollbackAll();
  }
  return new Boolean(true);
}",0.9227722772277228
73321,"private ReportItemHandle getSelectedElement(){
  if (getTableEditPart() != null && getTableEditPart().getModel() instanceof ReportItemHandle) {
    return (ReportItemHandle)getTableEditPart().getModel();
  }
  if (getListEditPart() != null && getListEditPart().getModel() instanceof ReportItemHandle) {
    return (ReportItemHandle)getListEditPart().getModel();
  }
  return null;
}","private ReportItemHandle getSelectedElement(){
  if (getTableEditPart() != null && getTableEditPart().getModel() instanceof ReportItemHandle) {
    return (ReportItemHandle)getTableEditPart().getModel();
  }
  if (getTableMultipleEditPart() != null && getTableMultipleEditPart().getModel() instanceof ReportItemHandle) {
    return (ReportItemHandle)getTableMultipleEditPart().getModel();
  }
  if (getListEditPart() != null && getListEditPart().getModel() instanceof ReportItemHandle) {
    return (ReportItemHandle)getListEditPart().getModel();
  }
  return null;
}",0.7966280295047419
73322,"/** 
 * Creats sub menu in the specified action group of the specified menu manager.
 * @param menuManager The menu manager contains the action group.
 * @param group_name The action group contains the sub menu.
 */
private void createEditGroupMenu(IMenuManager menuManager,String group_name){
  if (getFirstElement() instanceof RowHandle) {
    DesignElementHandle container=((RowHandle)getFirstElement()).getContainer();
    if (container instanceof TableGroupHandle) {
      Action action=new EditGroupAction(null,(TableGroupHandle)container);
      action.setText(EDIT_GROUP_MENU_ITEM_TEXT);
      menuManager.appendToGroup(group_name,action);
      return;
    }
  }
  if (getFirstElement() instanceof SlotHandle) {
    DesignElementHandle container=((SlotHandle)getFirstElement()).getElementHandle();
    if (container instanceof ListGroupHandle) {
      Action action=new EditGroupAction(null,(ListGroupHandle)container);
      action.setText(EDIT_GROUP_MENU_ITEM_TEXT);
      menuManager.appendToGroup(group_name,action);
      return;
    }
  }
  MenuManager subMenu=new MenuManager(EDIT_GROUP_MENU_ITEM_TEXT);
  ListingHandle parentHandle=null;
  if (!getTableEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((TableEditPart)getTableEditParts().get(0)).getModel();
  }
 else   if (!getListEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((ListEditPart)getListEditParts().get(0)).getModel();
  }
 else {
    return;
  }
  SlotHandle handle=parentHandle.getGroups();
  Iterator iter=handle.iterator();
  while (iter.hasNext()) {
    GroupHandle groupHandle=(GroupHandle)iter.next();
    subMenu.add(new EditGroupAction(null,groupHandle));
  }
  menuManager.appendToGroup(group_name,subMenu);
}","/** 
 * Creats sub menu in the specified action group of the specified menu manager.
 * @param menuManager The menu manager contains the action group.
 * @param group_name The action group contains the sub menu.
 */
private void createEditGroupMenu(IMenuManager menuManager,String group_name){
  if (getFirstElement() instanceof RowHandle) {
    DesignElementHandle container=((RowHandle)getFirstElement()).getContainer();
    if (container instanceof TableGroupHandle) {
      Action action=new EditGroupAction(null,(TableGroupHandle)container);
      action.setText(EDIT_GROUP_MENU_ITEM_TEXT);
      menuManager.appendToGroup(group_name,action);
      return;
    }
  }
  if (getFirstElement() instanceof SlotHandle) {
    DesignElementHandle container=((SlotHandle)getFirstElement()).getElementHandle();
    if (container instanceof ListGroupHandle) {
      Action action=new EditGroupAction(null,(ListGroupHandle)container);
      action.setText(EDIT_GROUP_MENU_ITEM_TEXT);
      menuManager.appendToGroup(group_name,action);
      return;
    }
  }
  MenuManager subMenu=new MenuManager(EDIT_GROUP_MENU_ITEM_TEXT);
  ListingHandle parentHandle=null;
  if (!getTableEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((TableEditPart)getTableEditParts().get(0)).getModel();
  }
 else   if (!getTableMultipleEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((ReportElementEditPart)getTableMultipleEditParts().get(0)).getModel();
  }
 else   if (!getListEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((ListEditPart)getListEditParts().get(0)).getModel();
  }
 else {
    return;
  }
  SlotHandle handle=parentHandle.getGroups();
  Iterator iter=handle.iterator();
  while (iter.hasNext()) {
    GroupHandle groupHandle=(GroupHandle)iter.next();
    subMenu.add(new EditGroupAction(null,groupHandle));
  }
  menuManager.appendToGroup(group_name,subMenu);
}",0.9549749861033908
73323,"public void buildContextMenu(IMenuManager menuManager){
  if (proxy != null) {
    proxy.menuAboutToShow(menuManager);
    proxy=null;
    return;
  }
  GEFActionConstants.addStandardActionGroups(menuManager);
  Object firstSelectedElement=getFirstElement();
  Object selectedElements=getSelectedElement();
  Object multiSelection=getMultiSelectedElement();
  boolean isExtended=false;
  if (firstSelectedElement instanceof IAdaptable) {
    if (((IAdaptable)firstSelectedElement).getAdapter(DesignElementHandle.class) instanceof ExtendedItemHandle)     isExtended=true;
  }
  if (isMutilSelection(multiSelection)) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(ActionFactory.DELETE.getId()));
    if (isRootElementHandleClass(multiSelection)) {
      Action action=new RefreshModuleHandleAction(selectedElements);
      menuManager.add(action);
      createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
      createThemeMenu(menuManager,GEFActionConstants.GROUP_REST);
    }
    if (isListHandleCalss(multiSelection)) {
      IAction action=getAction(CreatePlaceHolderPartAction.ID);
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
    }
    createStyleMenu(menuManager,GEFActionConstants.GROUP_REST);
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"");
    }
  }
 else   if (firstSelectedElement instanceof DesignElementHandle || isExtended) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    createStyleMenu(menuManager,GEFActionConstants.GROUP_REST);
    if (((IStructuredSelection)getSelection()).size() == 1) {
      Object element=((IStructuredSelection)getSelection()).getFirstElement();
      if (element instanceof LabelEditPart || element instanceof ImageEditPart) {
        if (element instanceof DataEditPart) {
          IAction action=getAction(ChangeDataColumnPartAction.ID);
          menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
        }
        IAction action=getAction(GEFActionConstants.DIRECT_EDIT);
        action.setAccelerator(SWT.F2);
        if (element instanceof DataEditPart) {
          action.setText(Messages.getString(""String_Node_Str""));
        }
 else {
          action.setText(Messages.getString(""String_Node_Str""));
        }
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      if (firstSelectedElement instanceof ReportItemHandle) {
        IAction action=getAction(CreatePlaceHolderPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      if (firstSelectedElement instanceof TemplateReportItemHandle) {
        IAction action=getAction(RevertToReportItemPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      Object[] objs=ElementAdapterManager.getAdapters(firstSelectedElement,IReportItemViewProvider.class);
      if (objs != null && objs.length == 1) {
        IAction action=getAction(CreateChartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_VIEW,action);
      }
    }
    if (firstSelectedElement instanceof RowHandle) {
      if (getRowHandles().size() != 0) {
        MenuManager insertMenu=new MenuManager(INSERT_MENU_ITEM_TEXT);
        MenuManager rowMenu=new MenuManager(INSERT_ROW_MENU_ITEM_TEXT);
        rowMenu.add(getAction(InsertRowAboveAction.ID));
        rowMenu.add(getAction(InsertRowBelowAction.ID));
        RowHandle row=(RowHandle)getRowHandles().get(0);
        if (!(row.getContainer() instanceof GridHandle)) {
          insertMenu.add(getAction(IncludeHeaderAction.ID));
          insertMenu.add(getAction(IncludeDetailAction.ID));
          insertMenu.add(getAction(IncludeFooterAction.ID));
        }
        insertMenu.add(rowMenu);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,insertMenu);
      }
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(DeleteRowAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
    }
 else     if (firstSelectedElement instanceof ColumnHandle) {
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,new InsertPasteColumnAction(selectedElements));
      if (getColumnHandles().size() != 0) {
        MenuManager subMenu=new MenuManager(INSERT_MENU_ITEM_TEXT);
        subMenu.add(getAction(InsertColumnRightAction.ID));
        subMenu.add(getAction(InsertColumnLeftAction.ID));
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,subMenu);
      }
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(DeleteColumnAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
    }
 else     if (firstSelectedElement instanceof CellHandle) {
      createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(CopyCellContentsContextAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    }
 else {
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(ActionFactory.DELETE.getId()));
    }
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"" + ((DesignElementHandle)firstSelectedElement).getDefn().getDisplayName());
    }
  }
 else   if (firstSelectedElement instanceof SlotHandle) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"" + ((SlotHandle)firstSelectedElement).getSlotID() + ""String_Node_Str""+ ((SlotHandle)firstSelectedElement).getElementHandle().getDefn().getDisplayName());
    }
  }
 else {
  }
  if (!getTableEditParts().isEmpty()) {
    createInsertGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
    if (getTableEditParts().size() == 1) {
      createDeleteGroupMenus(menuManager,GEFActionConstants.GROUP_ADD);
      createEditGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
      createInsertGroupHeaderFooter(menuManager,GEFActionConstants.GROUP_ADD);
      Separator separator=new Separator(EditBindingAction.ID);
      menuManager.add(separator);
      menuManager.appendToGroup(EditBindingAction.ID,getAction(EditBindingAction.ID));
    }
  }
  if (!getListEditParts().isEmpty()) {
    createInsertGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
    if (getListEditParts().size() == 1) {
      createDeleteGroupMenus(menuManager,GEFActionConstants.GROUP_ADD);
      createEditGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
      Separator separator=new Separator(EditBindingAction.ID);
      menuManager.add(separator);
      menuManager.appendToGroup(EditBindingAction.ID,getAction(EditBindingAction.ID));
    }
  }
  if (getElements().size() == 1 || isMutilSelection(multiSelection)) {
    if (firstSelectedElement instanceof DesignElementHandle) {
      String elementName=((DesignElementHandle)firstSelectedElement).getDefn().getName();
      IMenuBuilder menuBuilder=ExtensionPointManager.getInstance().getMenuBuilder(elementName);
      if (menuBuilder != null) {
        menuBuilder.buildMenu(menuManager,getElements());
      }
    }
    Object menuAdapter=Platform.getAdapterManager().getAdapter(firstSelectedElement,IMenuListener.class);
    if (menuAdapter != null) {
      if (menuAdapter instanceof ISchematicMenuListener) {
        ((ISchematicMenuListener)menuAdapter).setActionRegistry(getActionRegistry());
      }
      ((IMenuListener)menuAdapter).menuAboutToShow(menuManager);
    }
  }
}","public void buildContextMenu(IMenuManager menuManager){
  if (proxy != null) {
    proxy.menuAboutToShow(menuManager);
    proxy=null;
    return;
  }
  GEFActionConstants.addStandardActionGroups(menuManager);
  Object firstSelectedElement=getFirstElement();
  Object selectedElements=getSelectedElement();
  Object multiSelection=getMultiSelectedElement();
  boolean isExtended=false;
  if (firstSelectedElement instanceof IAdaptable) {
    if (((IAdaptable)firstSelectedElement).getAdapter(DesignElementHandle.class) instanceof ExtendedItemHandle)     isExtended=true;
  }
  if (isMutilSelection(multiSelection)) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(ActionFactory.DELETE.getId()));
    if (isRootElementHandleClass(multiSelection)) {
      Action action=new RefreshModuleHandleAction(selectedElements);
      menuManager.add(action);
      createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
      createThemeMenu(menuManager,GEFActionConstants.GROUP_REST);
    }
    if (isListHandleCalss(multiSelection)) {
      IAction action=getAction(CreatePlaceHolderPartAction.ID);
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
    }
    createStyleMenu(menuManager,GEFActionConstants.GROUP_REST);
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"");
    }
  }
 else   if (firstSelectedElement instanceof DesignElementHandle || isExtended) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    createStyleMenu(menuManager,GEFActionConstants.GROUP_REST);
    if (((IStructuredSelection)getSelection()).size() == 1) {
      Object element=((IStructuredSelection)getSelection()).getFirstElement();
      if (element instanceof LabelEditPart || element instanceof ImageEditPart) {
        if (element instanceof DataEditPart) {
          IAction action=getAction(ChangeDataColumnPartAction.ID);
          menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
        }
        IAction action=getAction(GEFActionConstants.DIRECT_EDIT);
        action.setAccelerator(SWT.F2);
        if (element instanceof DataEditPart) {
          action.setText(Messages.getString(""String_Node_Str""));
        }
 else {
          action.setText(Messages.getString(""String_Node_Str""));
        }
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      if (firstSelectedElement instanceof ReportItemHandle) {
        IAction action=getAction(CreatePlaceHolderPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      if (firstSelectedElement instanceof TemplateReportItemHandle) {
        IAction action=getAction(RevertToReportItemPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      Object[] objs=ElementAdapterManager.getAdapters(firstSelectedElement,IReportItemViewProvider.class);
      if (objs != null && objs.length == 1) {
        IAction action=getAction(CreateChartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_VIEW,action);
      }
    }
    if (firstSelectedElement instanceof RowHandle) {
      if (getRowHandles().size() != 0) {
        MenuManager insertMenu=new MenuManager(INSERT_MENU_ITEM_TEXT);
        MenuManager rowMenu=new MenuManager(INSERT_ROW_MENU_ITEM_TEXT);
        rowMenu.add(getAction(InsertRowAboveAction.ID));
        rowMenu.add(getAction(InsertRowBelowAction.ID));
        RowHandle row=(RowHandle)getRowHandles().get(0);
        if (!(row.getContainer() instanceof GridHandle)) {
          insertMenu.add(getAction(IncludeHeaderAction.ID));
          insertMenu.add(getAction(IncludeDetailAction.ID));
          insertMenu.add(getAction(IncludeFooterAction.ID));
        }
        insertMenu.add(rowMenu);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,insertMenu);
      }
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(DeleteRowAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
    }
 else     if (firstSelectedElement instanceof ColumnHandle) {
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,new InsertPasteColumnAction(selectedElements));
      if (getColumnHandles().size() != 0) {
        MenuManager subMenu=new MenuManager(INSERT_MENU_ITEM_TEXT);
        subMenu.add(getAction(InsertColumnRightAction.ID));
        subMenu.add(getAction(InsertColumnLeftAction.ID));
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,subMenu);
      }
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(DeleteColumnAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
    }
 else     if (firstSelectedElement instanceof CellHandle) {
      createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(CopyCellContentsContextAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    }
 else {
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(ActionFactory.DELETE.getId()));
    }
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"" + ((DesignElementHandle)firstSelectedElement).getDefn().getDisplayName());
    }
  }
 else   if (firstSelectedElement instanceof SlotHandle) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"" + ((SlotHandle)firstSelectedElement).getSlotID() + ""String_Node_Str""+ ((SlotHandle)firstSelectedElement).getElementHandle().getDefn().getDisplayName());
    }
  }
 else {
  }
  if (!getTableEditParts().isEmpty() || !getTableMultipleEditParts().isEmpty()) {
    createInsertGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
    if (getTableEditParts().size() == 1 || getTableMultipleEditParts().size() == 1) {
      createDeleteGroupMenus(menuManager,GEFActionConstants.GROUP_ADD);
      createEditGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
      createInsertGroupHeaderFooter(menuManager,GEFActionConstants.GROUP_ADD);
      Separator separator=new Separator(EditBindingAction.ID);
      menuManager.add(separator);
      menuManager.appendToGroup(EditBindingAction.ID,getAction(EditBindingAction.ID));
    }
  }
  if (!getListEditParts().isEmpty()) {
    createInsertGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
    if (getListEditParts().size() == 1) {
      createDeleteGroupMenus(menuManager,GEFActionConstants.GROUP_ADD);
      createEditGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
      Separator separator=new Separator(EditBindingAction.ID);
      menuManager.add(separator);
      menuManager.appendToGroup(EditBindingAction.ID,getAction(EditBindingAction.ID));
    }
  }
  if (getElements().size() == 1 || isMutilSelection(multiSelection)) {
    if (firstSelectedElement instanceof DesignElementHandle) {
      String elementName=((DesignElementHandle)firstSelectedElement).getDefn().getName();
      IMenuBuilder menuBuilder=ExtensionPointManager.getInstance().getMenuBuilder(elementName);
      if (menuBuilder != null) {
        menuBuilder.buildMenu(menuManager,getElements());
      }
    }
    Object menuAdapter=Platform.getAdapterManager().getAdapter(firstSelectedElement,IMenuListener.class);
    if (menuAdapter != null) {
      if (menuAdapter instanceof ISchematicMenuListener) {
        ((ISchematicMenuListener)menuAdapter).setActionRegistry(getActionRegistry());
      }
      ((IMenuListener)menuAdapter).menuAboutToShow(menuManager);
    }
  }
}",0.9955237242614146
73324,"/** 
 * Creats sub menu in the specified action group of the specified menu manager.
 * @param menuManager The menu manager contains the action group.
 * @param group_name The action group contains the sub menu.
 */
private void createInsertGroupHeaderFooter(IMenuManager menuManager,String group_name){
  if (getFirstElement() instanceof RowHandle) {
    return;
  }
  if (getFirstElement() instanceof SlotHandle) {
    return;
  }
  MenuManager subMenu=new MenuManager(INSERT_GROUP_HEADER_FOOTER_ITEM_TEXT);
  ListingHandle parentHandle=null;
  if (!getTableEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((TableEditPart)getTableEditParts().get(0)).getModel();
  }
 else {
    return;
  }
  SlotHandle handle=parentHandle.getGroups();
  Iterator iter=handle.iterator();
  while (iter.hasNext()) {
    GroupHandle groupHandle=(GroupHandle)iter.next();
    MenuManager groupMenu=new MenuManager(groupHandle.getName());
    groupMenu.add(new InsertGroupHeaderFooterAction(groupHandle,InsertGroupHeaderFooterAction.HEADER));
    groupMenu.add(new InsertGroupHeaderFooterAction(groupHandle,InsertGroupHeaderFooterAction.FOOTER));
    subMenu.add(groupMenu);
  }
  menuManager.appendToGroup(group_name,subMenu);
}","/** 
 * Creats sub menu in the specified action group of the specified menu manager.
 * @param menuManager The menu manager contains the action group.
 * @param group_name The action group contains the sub menu.
 */
private void createInsertGroupHeaderFooter(IMenuManager menuManager,String group_name){
  if (getFirstElement() instanceof RowHandle) {
    return;
  }
  if (getFirstElement() instanceof SlotHandle) {
    return;
  }
  MenuManager subMenu=new MenuManager(INSERT_GROUP_HEADER_FOOTER_ITEM_TEXT);
  ListingHandle parentHandle=null;
  if (!getTableEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((TableEditPart)getTableEditParts().get(0)).getModel();
  }
 else   if (!getTableMultipleEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((ReportElementEditPart)getTableMultipleEditParts().get(0)).getModel();
  }
 else {
    return;
  }
  SlotHandle handle=parentHandle.getGroups();
  Iterator iter=handle.iterator();
  while (iter.hasNext()) {
    GroupHandle groupHandle=(GroupHandle)iter.next();
    MenuManager groupMenu=new MenuManager(groupHandle.getName());
    groupMenu.add(new InsertGroupHeaderFooterAction(groupHandle,InsertGroupHeaderFooterAction.HEADER));
    groupMenu.add(new InsertGroupHeaderFooterAction(groupHandle,InsertGroupHeaderFooterAction.FOOTER));
    subMenu.add(groupMenu);
  }
  menuManager.appendToGroup(group_name,subMenu);
}",0.9376923076923076
73325,"/** 
 * Creats sub menu in the specified action group of the specified menu manager.
 * @param menuManager The menu manager contains the action group.
 * @param group_name The action group contains the sub menu.
 */
private void createDeleteGroupMenus(IMenuManager menuManager,String group_name){
  ReportElementEditPart editPart=null;
  if (getFirstElement() instanceof RowHandle) {
    DesignElementHandle container=((RowHandle)getFirstElement()).getContainer();
    if (container instanceof TableGroupHandle) {
      editPart=getTableEditPart();
      Action action=new DeleteGroupAction(editPart,(TableGroupHandle)container);
      action.setText(DELETE_GROUP_MENU_ITEM_TEXT);
      menuManager.appendToGroup(group_name,action);
      return;
    }
  }
  if (getFirstElement() instanceof SlotHandle) {
    DesignElementHandle container=((SlotHandle)getFirstElement()).getElementHandle();
    if (container instanceof ListGroupHandle) {
      editPart=getListEditPart();
      Action action=new DeleteGroupAction(editPart,(ListGroupHandle)container);
      action.setText(DELETE_GROUP_MENU_ITEM_TEXT);
      menuManager.appendToGroup(group_name,action);
      return;
    }
  }
  MenuManager subMenu=new MenuManager(DELETE_GROUP_MENU_ITEM_TEXT);
  ListingHandle parentHandle=null;
  if (!getTableEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((TableEditPart)getTableEditParts().get(0)).getModel();
    editPart=(TableEditPart)getTableEditParts().get(0);
  }
 else   if (!getListEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((ListEditPart)getListEditParts().get(0)).getModel();
    editPart=(ListEditPart)getListEditParts().get(0);
  }
 else {
    return;
  }
  SlotHandle handle=parentHandle.getGroups();
  Iterator iter=handle.iterator();
  while (iter.hasNext()) {
    GroupHandle groupHandle=(GroupHandle)iter.next();
    subMenu.add(new DeleteGroupAction(editPart,groupHandle));
  }
  menuManager.appendToGroup(group_name,subMenu);
}","/** 
 * Creats sub menu in the specified action group of the specified menu manager.
 * @param menuManager The menu manager contains the action group.
 * @param group_name The action group contains the sub menu.
 */
private void createDeleteGroupMenus(IMenuManager menuManager,String group_name){
  ReportElementEditPart editPart=null;
  if (getFirstElement() instanceof RowHandle) {
    DesignElementHandle container=((RowHandle)getFirstElement()).getContainer();
    if (container instanceof TableGroupHandle) {
      editPart=getTableEditPart();
      Action action=new DeleteGroupAction(editPart,(TableGroupHandle)container);
      action.setText(DELETE_GROUP_MENU_ITEM_TEXT);
      menuManager.appendToGroup(group_name,action);
      return;
    }
  }
  if (getFirstElement() instanceof SlotHandle) {
    DesignElementHandle container=((SlotHandle)getFirstElement()).getElementHandle();
    if (container instanceof ListGroupHandle) {
      editPart=getListEditPart();
      Action action=new DeleteGroupAction(editPart,(ListGroupHandle)container);
      action.setText(DELETE_GROUP_MENU_ITEM_TEXT);
      menuManager.appendToGroup(group_name,action);
      return;
    }
  }
  MenuManager subMenu=new MenuManager(DELETE_GROUP_MENU_ITEM_TEXT);
  ListingHandle parentHandle=null;
  if (!getTableEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((TableEditPart)getTableEditParts().get(0)).getModel();
    editPart=(TableEditPart)getTableEditParts().get(0);
  }
 else   if (!getTableMultipleEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((ReportElementEditPart)getTableMultipleEditParts().get(0)).getModel();
    editPart=(ReportElementEditPart)getTableMultipleEditParts().get(0);
  }
 else   if (!getListEditParts().isEmpty()) {
    parentHandle=(ListingHandle)((ListEditPart)getListEditParts().get(0)).getModel();
    editPart=(ListEditPart)getListEditParts().get(0);
  }
 else {
    return;
  }
  SlotHandle handle=parentHandle.getGroups();
  Iterator iter=handle.iterator();
  while (iter.hasNext()) {
    GroupHandle groupHandle=(GroupHandle)iter.next();
    subMenu.add(new DeleteGroupAction(editPart,groupHandle));
  }
  menuManager.appendToGroup(group_name,subMenu);
}",0.94375
73326,"/** 
 * Copy new handle
 * @param element The elemnent to copy
 * @param currentDesignHandle Current design handle
 * @return The copied handle
 * @throws CloneNotSupportedException
 */
private DesignElementHandle copyNewHandle(IDesignElement element,ModuleHandle currentDesignHandle) throws CloneNotSupportedException {
  IDesignElement newElement=isCloned ? element : (IDesignElement)element.clone();
  DesignElementHandle handle=newElement.getHandle(currentDesignHandle.getModule());
  if (newContainer instanceof ThemeHandle) {
    currentDesignHandle.rename((ThemeHandle)newContainer,handle);
  }
 else   if (newContainer instanceof SlotHandle && ((SlotHandle)newContainer).getElementHandle() instanceof ThemeHandle) {
    currentDesignHandle.rename(((SlotHandle)newContainer).getElementHandle(),handle);
  }
 else {
    currentDesignHandle.rename(handle);
  }
  return handle;
}","/** 
 * Copy new handle
 * @param element The elemnent to copy
 * @param currentDesignHandle Current design handle
 * @return The copied handle
 * @throws CloneNotSupportedException
 */
private IDesignElement copyNewHandle(IDesignElement element) throws CloneNotSupportedException {
  IDesignElement newElement=isCloned ? element : (IDesignElement)element.clone();
  return newElement;
}",0.5601888276947286
73327,"/** 
 * Add this design element to report.
 * @param newHandle The design element to add
 */
private void addHandleToReport(DesignElementHandle newHandle) throws ContentException, NameException, SemanticException {
  SlotHandle slotHandle=null;
  if (newContainer instanceof DesignElementHandle) {
    slotHandle=((DesignElementHandle)newContainer).getSlot(slotID);
  }
 else   if (newContainer instanceof SlotHandle) {
    slotHandle=(SlotHandle)newContainer;
  }
  if (slotHandle != null) {
    slotHandle.paste(newHandle,position);
  }
 else   if (newContainer instanceof PropertyHandle) {
    ((PropertyHandle)newContainer).paste(newHandle,position);
  }
 else   if (newContainer instanceof DesignElementHandle) {
    ((DesignElementHandle)newContainer).getPropertyHandle(contentString).paste(newHandle,position);
  }
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newHandle) + ""String_Node_Str""+ slotHandle.getSlotID()+ ""String_Node_Str""+ DEUtil.getDisplayLabel(slotHandle.getElementHandle())+ ""String_Node_Str""+ position);
  }
}","/** 
 * Add this design element to report.
 * @param newHandle The design element to add
 */
private void addHandleToReport(IDesignElement newElement,ModuleHandle currentDesignHandle) throws ContentException, NameException, SemanticException {
  DesignElementHandle newHandle=newElement.getHandle(currentDesignHandle.getModule());
  if (newContainer instanceof ThemeHandle) {
    currentDesignHandle.rename((ThemeHandle)newContainer,newHandle);
  }
 else   if (newContainer instanceof SlotHandle && ((SlotHandle)newContainer).getElementHandle() instanceof ThemeHandle) {
    currentDesignHandle.rename(((SlotHandle)newContainer).getElementHandle(),newHandle);
  }
 else {
    currentDesignHandle.rename(newHandle);
  }
  SlotHandle slotHandle=null;
  if (newContainer instanceof DesignElementHandle) {
    slotHandle=((DesignElementHandle)newContainer).getSlot(slotID);
  }
 else   if (newContainer instanceof SlotHandle) {
    slotHandle=(SlotHandle)newContainer;
  }
  if (slotHandle != null) {
    slotHandle.paste(newElement,position);
  }
 else   if (newContainer instanceof PropertyHandle) {
    ((PropertyHandle)newContainer).paste(newElement,position);
  }
 else   if (newContainer instanceof DesignElementHandle) {
    ((DesignElementHandle)newContainer).getPropertyHandle(contentString).paste(newElement,position);
  }
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newHandle) + ""String_Node_Str""+ slotHandle.getSlotID()+ ""String_Node_Str""+ DEUtil.getDisplayLabel(slotHandle.getElementHandle())+ ""String_Node_Str""+ position);
  }
}",0.7819326175490559
73328,"/** 
 * Executes the Command.
 */
public void execute(){
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (!isCut || sourceHandle == null || sourceHandle.getContainer() == null) {
      isCut=false;
    }
    calculatePositionAndSlotId();
    dropSourceHandle(sourceHandle);
    ModuleHandle currentDesignHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
    DesignElementHandle newHandle=copyNewHandle(cloneElement,currentDesignHandle);
    addHandleToReport(newHandle);
  }
 catch (  Exception e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
}","/** 
 * Executes the Command.
 */
public void execute(){
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (!isCut || sourceHandle == null || sourceHandle.getContainer() == null) {
      isCut=false;
    }
    calculatePositionAndSlotId();
    dropSourceHandle(sourceHandle);
    ModuleHandle currentDesignHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
    addHandleToReport(copyNewHandle(cloneElement),currentDesignHandle);
  }
 catch (  Exception e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
}",0.9408410548823948
73329,"private String createSignature(IMethodInfo info){
  StringBuffer signature=new StringBuffer();
  String javaDoc=info.getJavaDoc();
  if (javaDoc != null && javaDoc.length() > 0) {
    signature.append(""String_Node_Str"");
    signature.append(info.getJavaDoc());
  }
  signature.append(""String_Node_Str"");
  signature.append(info.getName());
  signature.append('(');
  Iterator iter=info.argumentListIterator();
  if (iter.hasNext()) {
    IArgumentInfoList argumentList=(IArgumentInfoList)iter.next();
    for (Iterator argumentIter=argumentList.argumentsIterator(); argumentIter.hasNext(); ) {
      IArgumentInfo argument=(IArgumentInfo)argumentIter.next();
      String type=argument.getType();
      signature.append(JSEditor.convertToParameterName(type));
      if (argumentIter.hasNext()) {
        signature.append(""String_Node_Str"");
      }
    }
  }
  signature.append(""String_Node_Str"");
  return signature.toString();
}","private String createSignature(IMethodInfo info){
  StringBuffer signature=new StringBuffer();
  String javaDoc=info.getJavaDoc();
  if (javaDoc != null && javaDoc.length() > 0) {
    signature.append(""String_Node_Str"");
    signature.append(info.getJavaDoc());
  }
  signature.append(""String_Node_Str"");
  signature.append(info.getName());
  signature.append(""String_Node_Str"");
  Iterator iter=info.argumentListIterator();
  if (iter.hasNext()) {
    IArgumentInfoList argumentList=(IArgumentInfoList)iter.next();
    for (Iterator argumentIter=argumentList.argumentsIterator(); argumentIter.hasNext(); ) {
      IArgumentInfo argument=(IArgumentInfo)argumentIter.next();
      String argName=argument.getName();
      if (argName == null || argName.length() == 0) {
        String type=argument.getType();
        argName=JSEditor.convertToParameterName(type);
      }
      signature.append(argName);
      if (argumentIter.hasNext()) {
        signature.append(""String_Node_Str"");
      }
    }
  }
  signature.append(""String_Node_Str"");
  return signature.toString();
}",0.9082751744765702
73330,"private void updateScriptContext(DesignElementHandle handle,String method){
  List args=DEUtil.getDesignElementMethodArgumentsInfo(handle,method);
  JSSyntaxContext context=scriptEditor.getContext();
  context.clear();
  for (Iterator iter=args.iterator(); iter.hasNext(); ) {
    IArgumentInfo element=(IArgumentInfo)iter.next();
    String name=element.getName();
    String type=element.getType();
    if (!context.setVariable(name,type)) {
      context.setVariable(name,element.getClassType());
    }
  }
  if (handle instanceof ExtendedItemHandle) {
    ExtendedItemHandle exHandle=(ExtendedItemHandle)handle;
    List mtds=exHandle.getMethods(method);
    if (mtds != null && mtds.size() > 0) {
      for (int i=0; i < mtds.size(); i++) {
        IMethodInfo mi=(IMethodInfo)mtds.get(i);
        for (Iterator itr=mi.argumentListIterator(); itr.hasNext(); ) {
          IArgumentInfoList ailist=(IArgumentInfoList)itr.next();
          for (Iterator argItr=ailist.argumentsIterator(); argItr.hasNext(); ) {
            IArgumentInfo aiinfo=(IArgumentInfo)argItr.next();
            IClassInfo ci=aiinfo.getClassType();
            String name=convertToParameterName(ci.getName());
            context.setVariable(name,ci);
          }
        }
      }
    }
  }
}","private void updateScriptContext(DesignElementHandle handle,String method){
  List args=DEUtil.getDesignElementMethodArgumentsInfo(handle,method);
  JSSyntaxContext context=scriptEditor.getContext();
  context.clear();
  for (Iterator iter=args.iterator(); iter.hasNext(); ) {
    IArgumentInfo element=(IArgumentInfo)iter.next();
    String name=element.getName();
    String type=element.getType();
    if (!context.setVariable(name,type)) {
      context.setVariable(name,element.getClassType());
    }
  }
  if (handle instanceof ExtendedItemHandle) {
    ExtendedItemHandle exHandle=(ExtendedItemHandle)handle;
    List mtds=exHandle.getMethods(method);
    if (mtds != null && mtds.size() > 0) {
      for (int i=0; i < mtds.size(); i++) {
        IMethodInfo mi=(IMethodInfo)mtds.get(i);
        for (Iterator itr=mi.argumentListIterator(); itr.hasNext(); ) {
          IArgumentInfoList ailist=(IArgumentInfoList)itr.next();
          for (Iterator argItr=ailist.argumentsIterator(); argItr.hasNext(); ) {
            IArgumentInfo aiinfo=(IArgumentInfo)argItr.next();
            String argName=aiinfo.getName();
            IClassInfo ci=aiinfo.getClassType();
            if (argName == null || argName.length() == 0) {
              argName=convertToParameterName(ci.getName());
            }
            context.setVariable(argName,ci);
          }
        }
      }
    }
  }
}",0.9481592787377912
73331,"protected void drawBackgroundImage(float x,float y,float width,float height,String repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  Image img=null;
  try {
    img=Image.getInstance(imageUrl);
    if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,img.scaledWidth());
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,img.scaledHeight());
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > img.scaledWidth()) {
        if (height - absPosY > img.scaledHeight()) {
          template=contentByte.createTemplate(img.scaledWidth(),img.scaledHeight());
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
        }
 else {
          template=contentByte.createTemplate(img.scaledWidth(),height);
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height);
        }
      }
      while (remainX > 0) {
        if (remainX < img.scaledWidth()) {
          if (height - absPosY > img.scaledHeight()) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,img.scaledHeight());
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - img.scaledHeight());
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > img.scaledHeight())           contentByte.addTemplate(template,x + width - remainX,y - absPosY - img.scaledHeight());
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=img.scaledWidth();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > img.scaledHeight()) {
        template=contentByte.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        if (remainY < img.scaledHeight()) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,remainY);
          templateY.addImage(img,width > img.scaledWidth() ? img.scaledWidth() : width - absPosX,0,0,img.scaledHeight(),0,-(img.scaledHeight() - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - img.scaledHeight());
          remainY-=img.scaledHeight();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > img.scaledWidth() && height > img.scaledHeight()) {
        template=contentByte.createTemplate(img.scaledWidth(),img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < img.scaledHeight()) {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(img.scaledWidth(),remainY);
              templateY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=img.scaledWidth();
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,img.scaledHeight());
              templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX-=img.scaledWidth();
            }
          }
          remainY-=img.scaledHeight();
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}","protected void drawBackgroundImage(float x,float y,float width,float height,String repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  Image img=null;
  try {
    img=Image.getInstance(new URL(imageUrl));
    if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,img.scaledWidth());
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,img.scaledHeight());
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > img.scaledWidth()) {
        if (height - absPosY > img.scaledHeight()) {
          template=contentByte.createTemplate(img.scaledWidth(),img.scaledHeight());
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
        }
 else {
          template=contentByte.createTemplate(img.scaledWidth(),height);
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height);
        }
      }
      while (remainX > 0) {
        if (remainX < img.scaledWidth()) {
          if (height - absPosY > img.scaledHeight()) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,img.scaledHeight());
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - img.scaledHeight());
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > img.scaledHeight())           contentByte.addTemplate(template,x + width - remainX,y - absPosY - img.scaledHeight());
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=img.scaledWidth();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > img.scaledHeight()) {
        template=contentByte.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        if (remainY < img.scaledHeight()) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,remainY);
          templateY.addImage(img,width > img.scaledWidth() ? img.scaledWidth() : width - absPosX,0,0,img.scaledHeight(),0,-(img.scaledHeight() - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - img.scaledHeight());
          remainY-=img.scaledHeight();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > img.scaledWidth() && height > img.scaledHeight()) {
        template=contentByte.createTemplate(img.scaledWidth(),img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < img.scaledHeight()) {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(img.scaledWidth(),remainY);
              templateY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=img.scaledWidth();
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,img.scaledHeight());
              templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX-=img.scaledWidth();
            }
          }
          remainY-=img.scaledHeight();
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}",0.998090493980905
73332,"/** 
 * Draws the background image at the contentByteUnder of the pdf with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PDF where the image is positioned
 * @param y the start Y coordinate at the PDF where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
private void drawBackgroundImage(String imageURI,int x,int y,int width,int height,float positionX,float positionY,String repeat,boolean xMode,boolean yMode){
  if (null == imageURI) {
    return;
  }
  String imageUrl=getImageUrl(imageURI);
  if (imageUrl == null || ""String_Node_Str"".equals(imageUrl)) {
    return;
  }
  if (null == repeat) {
    repeat=""String_Node_Str"";
  }
  Image img=null;
  try {
    img=Image.getInstance(imageUrl);
    int absPosX, absPosY;
    if (xMode) {
      absPosX=(int)((width - img.scaledWidth() * PDFConstants.LAYOUT_TO_PDF_RATIO) * positionX);
    }
 else {
      absPosX=(int)positionX;
    }
    if (yMode) {
      absPosY=(int)((height - img.scaledHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) * positionY);
    }
 else {
      absPosY=(int)positionY;
    }
    pageGraphic.drawBackgroundImage(x,y,width,height,repeat,imageUrl,absPosX,absPosY);
  }
 catch (  Exception e) {
    log(e,Level.WARNING);
  }
}","/** 
 * Draws the background image at the contentByteUnder of the pdf with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PDF where the image is positioned
 * @param y the start Y coordinate at the PDF where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
private void drawBackgroundImage(String imageURI,int x,int y,int width,int height,float positionX,float positionY,String repeat,boolean xMode,boolean yMode){
  if (null == imageURI) {
    return;
  }
  if (imageURI == null || ""String_Node_Str"".equals(imageURI)) {
    return;
  }
  if (null == repeat) {
    repeat=""String_Node_Str"";
  }
  Image img=null;
  try {
    img=Image.getInstance(new URL(imageURI));
    int absPosX, absPosY;
    if (xMode) {
      absPosX=(int)((width - img.scaledWidth() * PDFConstants.LAYOUT_TO_PDF_RATIO) * positionX);
    }
 else {
      absPosX=(int)positionX;
    }
    if (yMode) {
      absPosY=(int)((height - img.scaledHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) * positionY);
    }
 else {
      absPosY=(int)positionY;
    }
    pageGraphic.drawBackgroundImage(x,y,width,height,repeat,imageURI,absPosX,absPosY);
  }
 catch (  Exception e) {
    log(e,Level.WARNING);
  }
}",0.9765342960288808
73333,"private String format(String givenValue){
  String returnStr=""String_Node_Str"";
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      returnStr=givenValue + ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      returnStr=""String_Node_Str"";
    }
    returnStr=returnStr + givenValue + ""String_Node_Str"";
  }
 else {
    if (givenValue.equals(""String_Node_Str"") || givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str"") || givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str"") || givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str"") || givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
    if (validType(givenValue)) {
      return givenValue + ""String_Node_Str"";
    }
    int count=givenValue.length();
    for (int num=0; num < count - 1; num++) {
      returnStr=returnStr + givenValue.charAt(num) + ""String_Node_Str"";
    }
    returnStr=returnStr + givenValue.charAt(count - 1) + ""String_Node_Str"";
  }
  return returnStr;
}","private String format(String givenValue){
  String returnStr=""String_Node_Str"";
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      returnStr=givenValue + ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      returnStr=""String_Node_Str"";
    }
    returnStr=returnStr + givenValue + ""String_Node_Str"";
  }
 else {
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (validType(givenValue)) {
      return givenValue + ""String_Node_Str"";
    }
    int count=givenValue.length();
    for (int num=0; num < count - 1; num++) {
      returnStr=returnStr + givenValue.charAt(num) + ""String_Node_Str"";
    }
    returnStr=returnStr + givenValue.charAt(count - 1) + ""String_Node_Str"";
  }
  return returnStr;
}",0.8756345177664975
73334,"private void addAggregateOn(Binding binding,List lstAggOn,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator iAggs=lstAggOn.iterator(); iAggs.hasNext(); ) {
    String aggOn=(String)iAggs.next();
    String[] levelNames=CubeUtil.splitLevelName(aggOn);
    String dimExpr=ExpressionUtil.createJSDimensionExpression(levelNames[0],levelNames[1]);
    binding.addAggregateOn(dimExpr);
    if (cubeQuery != null && cube != null) {
      bindSeriesQuery(QueryImpl.create(dimExpr),cubeQuery,cube);
    }
  }
}","private void addAggregateOn(Binding binding,List lstAggOn,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator iAggs=lstAggOn.iterator(); iAggs.hasNext(); ) {
    String aggOn=(String)iAggs.next();
    String[] levelNames=CubeUtil.splitLevelName(aggOn);
    String dimExpr=ExpressionUtil.createJSDimensionExpression(levelNames[0],levelNames[1]);
    binding.addAggregateOn(dimExpr);
  }
}",0.8791666666666667
73335,"public void run(){
  try {
    while (!process.isTerminated()) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
      }
    }
    if (process.getExitValue() == ReportLauncher.EXIT_OK) {
      File file=new File(fileName);
      String openName=ReportLauncher.getOutputFileName(outputFolder,file.getName(),suffix);
      if (openName != null && new File(openName).exists()) {
        Program.launch(openName);
      }
    }
  }
 catch (  Exception e) {
  }
}","public void run(){
  try {
    if (process.getExitValue() == ReportLauncher.EXIT_OK) {
      File file=new File(fileName);
      String openName=ReportLauncher.getOutputFileName(outputFolder,file.getName(),suffix);
      if (openName != null && new File(openName).exists()) {
        Program.launch(openName);
      }
    }
  }
 catch (  DebugException e) {
  }
}",0.8325581395348837
73336,"static void handleProcessTermination(ILaunch launch,final IProcess process,final String fileName,final String outputFolder) throws CoreException {
  if (launch.getLaunchConfiguration().getAttribute(ATTR_OPEN_TARGET,false) && launch.getLaunchConfiguration().getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE) != TASK_TYPE_RUN) {
    final String suffix=launch.getLaunchConfiguration().getAttribute(ATTR_TARGET_FORMAT,DEFAULT_TARGET_FORMAT);
    Thread monitorThread=new Thread(new Runnable(){
      public void run(){
        try {
          while (!process.isTerminated()) {
            try {
              Thread.sleep(100);
            }
 catch (            InterruptedException e) {
            }
          }
          if (process.getExitValue() == ReportLauncher.EXIT_OK) {
            File file=new File(fileName);
            String openName=ReportLauncher.getOutputFileName(outputFolder,file.getName(),suffix);
            if (openName != null && new File(openName).exists()) {
              Program.launch(openName);
            }
          }
        }
 catch (        Exception e) {
        }
      }
    }
,""String_Node_Str"");
    monitorThread.setDaemon(true);
    monitorThread.start();
  }
}","static void handleProcessTermination(ILaunch launch,final IProcess process,final String fileName,final String outputFolder) throws CoreException {
  if (launch.getLaunchConfiguration().getAttribute(ATTR_OPEN_TARGET,false) && launch.getLaunchConfiguration().getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE) != TASK_TYPE_RUN) {
    final String suffix=launch.getLaunchConfiguration().getAttribute(ATTR_TARGET_FORMAT,DEFAULT_TARGET_FORMAT);
    Thread monitorThread=new Thread(new Runnable(){
      public void run(){
        while (!process.isTerminated()) {
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException e) {
          }
        }
        DebugUI.getStandardDisplay().asyncExec(new Runnable(){
          public void run(){
            try {
              if (process.getExitValue() == ReportLauncher.EXIT_OK) {
                File file=new File(fileName);
                String openName=ReportLauncher.getOutputFileName(outputFolder,file.getName(),suffix);
                if (openName != null && new File(openName).exists()) {
                  Program.launch(openName);
                }
              }
            }
 catch (            DebugException e) {
            }
          }
        }
);
      }
    }
,""String_Node_Str"");
    monitorThread.setDaemon(true);
    monitorThread.start();
  }
}",0.8840125391849529
73337,"public Object[] findSourceElements(String name) throws CoreException {
  int index=name.lastIndexOf(File.separator);
  if (index < 0) {
    return EMPTY;
  }
  String id=name.substring(index + 1);
  String tName=name.substring(0,index);
  ArrayList sources=new ArrayList();
  File directory=getDirectory();
  File file=new File(directory,tName);
  if (file.exists() && file.isFile()) {
    sources.add(new ScriptLocalFileStorage(file,id));
  }
  if (sources.isEmpty())   return EMPTY;
  return sources.toArray();
}","public Object[] findSourceElements(String name) throws CoreException {
  int index=name.indexOf(File.separator);
  if (index < 0) {
    return EMPTY;
  }
  String id=name.substring(index + 1);
  String tName=name.substring(0,index);
  ArrayList sources=new ArrayList();
  File directory=getDirectory();
  File file=new File(directory,tName);
  if (file.exists() && file.isFile()) {
    sources.add(new ScriptLocalFileStorage(file,id));
  }
  if (sources.isEmpty())   return EMPTY;
  return sources.toArray();
}",0.994140625
73338,"public Object visitListItem(ListItemDesign list,Object value){
  BaseQueryDefinition query;
  if (list.useCachedResult()) {
    query=getRefenceQuery(list);
    if (query == null) {
      registerUnresolvedQueryReference(list);
      return null;
    }
  }
 else {
    query=createQuery(list,value);
  }
  if (query == null) {
    handleListingBand(list.getHeader(),query,true,null);
    handleListingBand(list.getFooter(),query,true,null);
  }
 else {
    handleListingBand(list.getHeader(),query,true,null);
    SlotHandle groupsSlot=((ListHandle)list.getHandle()).getGroups();
    for (int i=0; i < list.getGroupCount(); i++) {
      handleListingGroup(list.getGroup(i),(GroupHandle)groupsSlot.get(i),query);
    }
    BandDesign detail=list.getDetail();
    if (!query.cacheQueryResults()) {
      if (detail == null || detail.getContentCount() == 0) {
        query.setUsesDetails(false);
      }
    }
    handleListingBand(detail,query,false,null);
    handleListingBand(list.getFooter(),query,true,null);
  }
  try {
    transformExpressions(list,query);
  }
 catch (  BirtException ex) {
    context.addException(list.getHandle(),ex);
  }
  return getResultQuery(query,value);
}","public Object visitListItem(ListItemDesign list,Object value){
  BaseQueryDefinition query;
  if (list.useCachedResult()) {
    query=getRefenceQuery(list);
    if (query == null) {
      registerUnresolvedQueryReference(list);
      return null;
    }
  }
 else {
    query=createQuery(list,value);
  }
  if (query == null) {
    handleListingBand(list.getHeader(),query,true,null);
    handleListingBand(list.getFooter(),query,true,null);
  }
 else {
    handleListingQuery(list,query);
    handleListingBand(list.getHeader(),query,true,null);
    SlotHandle groupsSlot=((ListHandle)list.getHandle()).getGroups();
    for (int i=0; i < list.getGroupCount(); i++) {
      handleListingGroup(list.getGroup(i),(GroupHandle)groupsSlot.get(i),query);
    }
    BandDesign detail=list.getDetail();
    if (!query.cacheQueryResults()) {
      if (detail == null || detail.getContentCount() == 0) {
        query.setUsesDetails(false);
      }
    }
    handleListingBand(detail,query,false,null);
    handleListingBand(list.getFooter(),query,true,null);
  }
  try {
    transformExpressions(list,query);
  }
 catch (  BirtException ex) {
    context.addException(list.getHandle(),ex);
  }
  return getResultQuery(query,value);
}",0.9850622406639004
73339,"public Object visitTableItem(TableItemDesign table,Object value){
  BaseQueryDefinition query;
  if (table.useCachedResult()) {
    query=getRefenceQuery(table);
    if (query == null) {
      registerUnresolvedQueryReference(table);
      return null;
    }
  }
 else {
    query=createQuery(table,value);
  }
  if (query == null) {
    handleListingBand(table.getHeader(),query,true,null);
    handleListingBand(table.getFooter(),query,true,null);
  }
 else {
    for (int i=0; i < table.getColumnCount(); i++) {
      handleColumn(table.getColumn(i),query);
    }
    handleListingBand(table.getHeader(),query,true,null);
    SlotHandle groupsSlot=((TableHandle)table.getHandle()).getGroups();
    for (int i=0; i < table.getGroupCount(); i++) {
      handleListingGroup(table.getGroup(i),(GroupHandle)groupsSlot.get(i),query);
    }
    BandDesign detail=table.getDetail();
    if (!query.cacheQueryResults()) {
      if (detail == null || detail.getContentCount() == 0) {
        query.setUsesDetails(false);
      }
    }
    handleListingBand(detail,query,false,null);
    handleListingBand(table.getFooter(),query,true,null);
  }
  try {
    transformExpressions(table,query);
  }
 catch (  BirtException ex) {
    context.addException(table.getHandle(),ex);
  }
  return getResultQuery(query,value);
}","public Object visitTableItem(TableItemDesign table,Object value){
  BaseQueryDefinition query;
  if (table.useCachedResult()) {
    query=getRefenceQuery(table);
    if (query == null) {
      registerUnresolvedQueryReference(table);
      return null;
    }
  }
 else {
    query=createQuery(table,value);
  }
  if (query == null) {
    handleListingBand(table.getHeader(),query,true,null);
    handleListingBand(table.getFooter(),query,true,null);
  }
 else {
    handleListingQuery(table,query);
    for (int i=0; i < table.getColumnCount(); i++) {
      handleColumn(table.getColumn(i),query);
    }
    handleListingBand(table.getHeader(),query,true,null);
    SlotHandle groupsSlot=((TableHandle)table.getHandle()).getGroups();
    for (int i=0; i < table.getGroupCount(); i++) {
      handleListingGroup(table.getGroup(i),(GroupHandle)groupsSlot.get(i),query);
    }
    BandDesign detail=table.getDetail();
    if (!query.cacheQueryResults()) {
      if (detail == null || detail.getContentCount() == 0) {
        query.setUsesDetails(false);
      }
    }
    handleListingBand(detail,query,false,null);
    handleListingBand(table.getFooter(),query,true,null);
  }
  try {
    transformExpressions(table,query);
  }
 catch (  BirtException ex) {
    context.addException(table.getHandle(),ex);
  }
  return getResultQuery(query,value);
}",0.9860745201354912
73340,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  boolean isDesigner=false;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
  imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String rootPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_ROOT_PATH + ""String_Node_Str"";
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=rootPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxRowLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_ROWLEVELS);
  try {
    maxCubeRowLevels=Integer.valueOf(s_maxRowLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeRowLevels=-1;
  }
  String s_maxColumnLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_COLUMNLEVELS);
  try {
    maxCubeColumnLevels=Integer.valueOf(s_maxColumnLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeColumnLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  birtResourceFolder=processRealPath(context,context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH),null,false);
  String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=false;
  clearTempFiles();
  isInitContext=true;
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  boolean isDesigner=false;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
  imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String rootPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_ROOT_PATH + ""String_Node_Str"";
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=rootPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxRowLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_ROWLEVELS);
  try {
    maxCubeRowLevels=Integer.valueOf(s_maxRowLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeRowLevels=-1;
  }
  String s_maxColumnLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_COLUMNLEVELS);
  try {
    maxCubeColumnLevels=Integer.valueOf(s_maxColumnLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeColumnLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  String initResourceFolder=context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH);
  if (isDesigner && initResourceFolder == null)   initResourceFolder=""String_Node_Str"" + IBirtConstants.SYS_PROP_RESOURCE_PATH + ""String_Node_Str"";
  birtResourceFolder=processRealPath(context,initResourceFolder,null,false);
  String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=false;
  clearTempFiles();
  isInitContext=true;
}",0.9726716222125056
73341,"public void close(){
  super.close();
  nextExecutor=null;
}","public void close(){
  super.close();
  nextExecutor=null;
  measureCellCache=null;
}",0.8275862068965517
73342,"protected void prepareChildren(){
  super.prepareChildren();
  walker.reload();
}","protected void prepareChildren(){
  super.prepareChildren();
  initMeasureCache();
  walker.reload();
}",0.8804347826086957
73343,"protected void advance(){
  int mx;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.MEASURE_HEADER_CHANGE:
        nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
      ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
    hasLast=false;
  break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
if (measureDetailStarted && isMeetMeasureDetailEnd(ev,totalMeasureCount > 0 ? crosstabItem.getMeasure(mx).getCell() : null)) {
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? crosstabItem.getMeasure(mx).getCell() : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureDetailStarted=false;
hasLast=false;
}
 else if (measureSubTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureSubTotalStarted=false;
hasLast=false;
}
 else if (measureGrandTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureGrandTotalStarted=false;
hasLast=false;
}
break;
}
if (isMeasureDetailNeedStart(ev)) {
measureDetailStarted=true;
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureSubTotalNeedStart(ev)) {
measureSubTotalStarted=true;
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureGrandTotalNeedStart(ev)) {
measureGrandTotalStarted=true;
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_HEADER_CHANGE) {
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentEdgePosition=ev.dataPosition;
currentChangeType=ev.type;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.MEASURE_HEADER_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
break;
}
if (measureDetailStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? crosstabItem.getMeasure(mx).getCell() : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureDetailStarted=false;
}
 else if (measureSubTotalStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureSubTotalStarted=false;
}
 else if (measureGrandTotalStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureGrandTotalStarted=false;
}
}
}","protected void advance(){
  int mx;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.MEASURE_HEADER_CHANGE:
        nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
      ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
    hasLast=false;
  break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
if (measureDetailStarted && isMeetMeasureDetailEnd(ev,totalMeasureCount > 0 ? getMeasureCell(mx) : null)) {
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? getMeasureCell(mx) : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureDetailStarted=false;
hasLast=false;
}
 else if (measureSubTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureSubTotalStarted=false;
hasLast=false;
}
 else if (measureGrandTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureGrandTotalStarted=false;
hasLast=false;
}
break;
}
if (isMeasureDetailNeedStart(ev)) {
measureDetailStarted=true;
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureSubTotalNeedStart(ev)) {
measureSubTotalStarted=true;
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureGrandTotalNeedStart(ev)) {
measureGrandTotalStarted=true;
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_HEADER_CHANGE) {
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentEdgePosition=ev.dataPosition;
currentChangeType=ev.type;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.MEASURE_HEADER_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
break;
}
if (measureDetailStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? getMeasureCell(mx) : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureDetailStarted=false;
}
 else if (measureSubTotalStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureSubTotalStarted=false;
}
 else if (measureGrandTotalStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureGrandTotalStarted=false;
}
}
}",0.9675602888970498
73344,"protected void prepareChildren(){
  super.prepareChildren();
  rowEdgeStarted=false;
  isLayoutDownThenOver=PAGE_LAYOUT_DOWN_THEN_OVER.equals(crosstabItem.getPageLayout());
  walker.reload();
}","protected void prepareChildren(){
  super.prepareChildren();
  initMeasureCache();
  rowEdgeStarted=false;
  isLayoutDownThenOver=PAGE_LAYOUT_DOWN_THEN_OVER.equals(crosstabItem.getPageLayout());
  walker.reload();
}",0.946078431372549
73345,"protected boolean checkMeasureVerticalSpanOverlapped(ColumnEvent ev){
  if (ev.measureIndex == -1) {
    return false;
  }
  LevelHandle spanLevel=null;
switch (ev.type) {
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
    spanLevel=crosstabItem.getMeasure(ev.measureIndex).getCell().getSpanOverOnRow();
  break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
spanLevel=getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,ev.measureIndex).getSpanOverOnRow();
break;
}
if (spanLevel != null) {
int targetSpanGroupIndex=GroupUtil.getGroupIndex(rowGroups,spanLevel);
if (targetSpanGroupIndex != -1) {
try {
EdgeCursor rowEdgeCursor=getRowEdgeCursor();
if (rowEdgeCursor != null) {
targetSpanGroupIndex--;
if (targetSpanGroupIndex == -1) {
return !rowEdgeCursor.isFirst();
}
 else {
DimensionCursor dc=(DimensionCursor)rowEdgeCursor.getDimensionCursor().get(targetSpanGroupIndex);
if (!GroupUtil.isDummyGroup(dc)) {
  return rowEdgeCursor.getPosition() > dc.getEdgeStart();
}
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
}
}
return false;
}","protected boolean checkMeasureVerticalSpanOverlapped(ColumnEvent ev){
  if (ev.measureIndex == -1) {
    return false;
  }
  LevelHandle spanLevel=null;
switch (ev.type) {
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
    spanLevel=getMeasureCell(ev.measureIndex).getSpanOverOnRow();
  break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
spanLevel=getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,ev.measureIndex).getSpanOverOnRow();
break;
}
if (spanLevel != null) {
int targetSpanGroupIndex=GroupUtil.getGroupIndex(rowGroups,spanLevel);
if (targetSpanGroupIndex != -1) {
try {
EdgeCursor rowEdgeCursor=getRowEdgeCursor();
if (rowEdgeCursor != null) {
targetSpanGroupIndex--;
if (targetSpanGroupIndex == -1) {
return !rowEdgeCursor.isFirst();
}
 else {
DimensionCursor dc=(DimensionCursor)rowEdgeCursor.getDimensionCursor().get(targetSpanGroupIndex);
if (!GroupUtil.isDummyGroup(dc)) {
  return rowEdgeCursor.getPosition() > dc.getEdgeStart();
}
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
}
}
return false;
}",0.9896828429499428
73346,"protected void advance(){
  int mx;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
        if (rowEdgeStarted) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
          ((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
          rowEdgeStarted=false;
          hasLast=false;
        }
      break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
    nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
if (measureDetailStarted && isMeetMeasureDetailEnd(ev,totalMeasureCount > 0 ? crosstabItem.getMeasure(mx).getCell() : null)) {
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? crosstabItem.getMeasure(mx).getCell() : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureDetailStarted=false;
hasLast=false;
}
 else if (measureSubTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureSubTotalStarted=false;
hasLast=false;
}
 else if (measureGrandTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureGrandTotalStarted=false;
hasLast=false;
}
break;
}
if (isRowEdgeNeedStart(ev)) {
rowEdgeStarted=true;
rowSpan=GroupUtil.computeRowSpan(crosstabItem,rowGroups,ev.dimensionIndex,ev.levelIndex,getRowEdgeCursor(),isLayoutDownThenOver);
colSpan=0;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureDetailNeedStart(ev)) {
measureDetailStarted=true;
if (ev.measureIndex == -1) {
rowSpan=1;
}
 else {
rowSpan=GroupUtil.computeAggregationCellRowOverSpan(crosstabItem,rowGroups,crosstabItem.getMeasure(ev.measureIndex).getCell().getSpanOverOnRow(),getRowEdgeCursor());
}
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureSubTotalNeedStart(ev)) {
measureSubTotalStarted=true;
if (ev.measureIndex == -1) {
rowSpan=1;
}
 else {
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
rowSpan=GroupUtil.computeAggregationCellRowOverSpan(crosstabItem,rowGroups,getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,ev.measureIndex).getSpanOverOnRow(),getRowEdgeCursor());
}
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureGrandTotalNeedStart(ev)) {
measureGrandTotalStarted=true;
if (ev.measureIndex == -1) {
rowSpan=1;
}
 else {
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
rowSpan=GroupUtil.computeAggregationCellRowOverSpan(crosstabItem,rowGroups,getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,ev.measureIndex).getSpanOverOnRow(),getRowEdgeCursor());
}
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_HEADER_CHANGE) {
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentChangeType=ev.type;
currentEdgePosition=ev.dataPosition;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
if (rowEdgeStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
rowEdgeStarted=false;
}
break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
break;
}
if (measureDetailStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? crosstabItem.getMeasure(mx).getCell() : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureDetailStarted=false;
}
 else if (measureSubTotalStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureSubTotalStarted=false;
}
 else if (measureGrandTotalStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureGrandTotalStarted=false;
}
}
}","protected void advance(){
  int mx;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
        if (rowEdgeStarted) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
          ((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
          rowEdgeStarted=false;
          hasLast=false;
        }
      break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
    nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
if (measureDetailStarted && isMeetMeasureDetailEnd(ev,totalMeasureCount > 0 ? getMeasureCell(mx) : null)) {
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? getMeasureCell(mx) : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureDetailStarted=false;
hasLast=false;
}
 else if (measureSubTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureSubTotalStarted=false;
hasLast=false;
}
 else if (measureGrandTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureGrandTotalStarted=false;
hasLast=false;
}
break;
}
if (isRowEdgeNeedStart(ev)) {
rowEdgeStarted=true;
rowSpan=GroupUtil.computeRowSpan(crosstabItem,rowGroups,ev.dimensionIndex,ev.levelIndex,getRowEdgeCursor(),isLayoutDownThenOver);
colSpan=0;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureDetailNeedStart(ev)) {
measureDetailStarted=true;
if (ev.measureIndex == -1) {
rowSpan=1;
}
 else {
rowSpan=GroupUtil.computeAggregationCellRowOverSpan(crosstabItem,rowGroups,getMeasureCell(ev.measureIndex).getSpanOverOnRow(),getRowEdgeCursor());
}
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureSubTotalNeedStart(ev)) {
measureSubTotalStarted=true;
if (ev.measureIndex == -1) {
rowSpan=1;
}
 else {
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
rowSpan=GroupUtil.computeAggregationCellRowOverSpan(crosstabItem,rowGroups,getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,ev.measureIndex).getSpanOverOnRow(),getRowEdgeCursor());
}
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureGrandTotalNeedStart(ev)) {
measureGrandTotalStarted=true;
if (ev.measureIndex == -1) {
rowSpan=1;
}
 else {
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
rowSpan=GroupUtil.computeAggregationCellRowOverSpan(crosstabItem,rowGroups,getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,ev.measureIndex).getSpanOverOnRow(),getRowEdgeCursor());
}
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_HEADER_CHANGE) {
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentChangeType=ev.type;
currentEdgePosition=ev.dataPosition;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
if (rowEdgeStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
rowEdgeStarted=false;
}
break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
break;
}
if (measureDetailStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? getMeasureCell(mx) : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureDetailStarted=false;
}
 else if (measureSubTotalStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureSubTotalStarted=false;
}
 else if (measureGrandTotalStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureGrandTotalStarted=false;
}
}
}",0.974924133524996
73347,"protected void prepareChildren(){
  super.prepareChildren();
  isLayoutDownThenOver=PAGE_LAYOUT_DOWN_THEN_OVER.equals(crosstabItem.getPageLayout());
  if (isLayoutDownThenOver) {
    startTotalDimensionIndex=dimensionIndex;
    startTotalLevelIndex=levelIndex;
  }
 else {
    EdgeGroup nextGroup=GroupUtil.getNextGroup(rowGroups,dimensionIndex,levelIndex);
    startTotalDimensionIndex=nextGroup.dimensionIndex;
    startTotalLevelIndex=nextGroup.levelIndex;
  }
  DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimensionIndex);
  LevelViewHandle lv=dv.getLevel(levelIndex);
  isSubTotalBefore=lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation());
  boolean isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstabItem.getMeasureDirection());
  isFirstTotalRow=rowIndex == GroupUtil.getFirstTotalRowIndex(crosstabItem,dimensionIndex,levelIndex,isVerticalMeasure);
  totalRowSpan=GroupUtil.getTotalRowSpan(crosstabItem,dimensionIndex,levelIndex,isVerticalMeasure);
  walker.reload();
}","protected void prepareChildren(){
  super.prepareChildren();
  initMeasureCache();
  isLayoutDownThenOver=PAGE_LAYOUT_DOWN_THEN_OVER.equals(crosstabItem.getPageLayout());
  if (isLayoutDownThenOver) {
    startTotalDimensionIndex=dimensionIndex;
    startTotalLevelIndex=levelIndex;
  }
 else {
    EdgeGroup nextGroup=GroupUtil.getNextGroup(rowGroups,dimensionIndex,levelIndex);
    startTotalDimensionIndex=nextGroup.dimensionIndex;
    startTotalLevelIndex=nextGroup.levelIndex;
  }
  DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimensionIndex);
  LevelViewHandle lv=dv.getLevel(levelIndex);
  isSubTotalBefore=lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation());
  boolean isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstabItem.getMeasureDirection());
  isFirstTotalRow=rowIndex == GroupUtil.getFirstTotalRowIndex(crosstabItem,dimensionIndex,levelIndex,isVerticalMeasure);
  totalRowSpan=GroupUtil.getTotalRowSpan(crosstabItem,dimensionIndex,levelIndex,isVerticalMeasure);
  walker.reload();
}",0.989786443825441
73348,"protected boolean checkMeasureVerticalSpanOverlapped(ColumnEvent ev){
  if (ev.measureIndex == -1) {
    return false;
  }
  LevelHandle spanLevel=null;
switch (ev.type) {
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
    spanLevel=crosstabItem.getMeasure(ev.measureIndex).getCell().getSpanOverOnRow();
  break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
spanLevel=getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,ev.measureIndex).getSpanOverOnRow();
break;
}
if (spanLevel != null) {
int targetRowSpanGroupIndex=GroupUtil.getGroupIndex(rowGroups,spanLevel);
int currentGroupIndex=GroupUtil.getGroupIndex(rowGroups,dimensionIndex,levelIndex);
if (targetRowSpanGroupIndex != -1) {
return targetRowSpanGroupIndex <= currentGroupIndex;
}
}
return false;
}","protected boolean checkMeasureVerticalSpanOverlapped(ColumnEvent ev){
  if (ev.measureIndex == -1) {
    return false;
  }
  LevelHandle spanLevel=null;
switch (ev.type) {
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
    spanLevel=getMeasureCell(ev.measureIndex).getSpanOverOnRow();
  break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
spanLevel=getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,ev.measureIndex).getSpanOverOnRow();
break;
}
if (spanLevel != null) {
int targetRowSpanGroupIndex=GroupUtil.getGroupIndex(rowGroups,spanLevel);
int currentGroupIndex=GroupUtil.getGroupIndex(rowGroups,dimensionIndex,levelIndex);
if (targetRowSpanGroupIndex != -1) {
return targetRowSpanGroupIndex <= currentGroupIndex;
}
}
return false;
}",0.96979006656426
73349,"/** 
 * Test disable some column binding on diskCache.
 * @throws Exception
 */
public void testDiskCacheColumnBinding() throws Exception {
  String initialStr=System.getProperty(""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  incomprehensiveColumnBinding();
  if (initialStr == null)   System.clearProperty(""String_Node_Str"");
 else   System.setProperty(""String_Node_Str"",initialStr);
}","/** 
 * Test disable some column binding on diskCache.
 * @throws Exception
 */
public void testDiskCacheColumnBinding() throws Exception {
  String initialStr=System.getProperty(""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  incomprehensiveColumnBinding();
  if (initialStr == null)   System.getProperties().remove(""String_Node_Str"");
 else   System.setProperty(""String_Node_Str"",initialStr);
}",0.9752650176678446
73350,"WrapperedRAInputStream(RAInputStream input,long startOffset,int size) throws DataException {
  this.raIn=input;
  this.startOffset=startOffset;
  this.size=size;
  try {
    this.skip(this.startOffset);
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","WrapperedRAInputStream(RAInputStream input,long startOffset,int size) throws DataException {
  this.raIn=input;
  this.startOffset=startOffset;
  this.size=size;
  try {
    this.raIn.seek(this.startOffset);
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.9813874788494078
73351,"protected void initialize(){
  createRoot();
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  maxAvaHeight=parent.getCurrentMaxContentHeight();
  root.setWidth(parent.getCurrentMaxContentWidth());
  setCurrentBP(0);
  setupMinHeight();
}","protected void initialize(){
  createRoot();
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  maxAvaHeight=parent.getCurrentMaxContentHeight();
  root.setWidth(parent.getCurrentMaxContentWidth());
  setCurrentBP(0);
  setCurrentIP(0);
  setupMinHeight();
}",0.9619238476953909
73352,"private void init(){
  if (debugScript) {
    server=new ReportVMServer();
    server.addVMListener(this);
    Context cx=Context.enter();
    try {
      server.start(getRequestPort(),getEventPort(),cx);
    }
 catch (    VMException e1) {
      throw new Error(""String_Node_Str"");
    }
  }
  engineConfig=new LauncherEngineConfig();
  engineConfig.setEngineHome(getEngineHome());
  try {
    Platform.startup(engineConfig);
  }
 catch (  BirtException e) {
    throw new Error(""String_Node_Str"");
  }
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  this.engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  configEngine();
}","private void init(){
  if (debugScript) {
    server=new ReportVMServer();
    server.addVMListener(this);
    Context cx=Context.enter();
    try {
      server.start(getRequestPort(),getEventPort(),cx);
    }
 catch (    VMException e1) {
      throw new Error(""String_Node_Str"");
    }
  }
  engineConfig=new LauncherEngineConfig();
  engineConfig.setEngineHome(getEngineHome());
  try {
    Platform.startup(engineConfig);
  }
 catch (  BirtException e) {
    throw new Error(""String_Node_Str"");
  }
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  configEngine();
  this.engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
}",0.9761904761904762
73353,"private void configEngine(){
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler(){
    public String getURL(    IAction actionDefn,    Object context){
      if (actionDefn.getType() == IAction.ACTION_DRILLTHROUGH)       return ""String_Node_Str"" + URLEncoder.encode(super.getURL(actionDefn,context));
      return super.getURL(actionDefn,context);
    }
  }
);
  engineConfig.getEmitterConfigs().put(RenderOption.OUTPUT_FORMAT_HTML,emitterConfig);
  String userClassPath=getUserClassPath();
  logger.info(""String_Node_Str"" + userClassPath);
  if (userClassPath != null) {
    engineConfig.setProperty(EngineConstants.PROJECT_CLASSPATH_KEY,userClassPath);
  }
}","private void configEngine(){
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler(){
    public String getURL(    IAction actionDefn,    Object context){
      if (actionDefn.getType() == IAction.ACTION_DRILLTHROUGH)       return ""String_Node_Str"" + URLEncoder.encode(super.getURL(actionDefn,context));
      return super.getURL(actionDefn,context);
    }
  }
);
  engineConfig.getEmitterConfigs().put(RenderOption.OUTPUT_FORMAT_HTML,emitterConfig);
  String userClassPath=getUserClassPath();
  logger.info(""String_Node_Str"" + userClassPath);
  if (userClassPath != null) {
    engineConfig.getAppContext().put(EngineConstants.PROJECT_CLASSPATH_KEY,userClassPath);
  }
}",0.9793103448275862
73354,"private BookmarkDef getBookmark(IContent content){
  if (content.getBookmark() == null)   return null;
  return new BookmarkDef(content.getBookmark());
}","private BookmarkDef getBookmark(IContent content){
  String bookmark=content.getBookmark();
  if (bookmark == null)   return null;
  if (!ExcelUtil.isValidBookmarkName(bookmark)) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return null;
  }
  return new BookmarkDef(content.getBookmark());
}",0.5814977973568282
73355,"private HyperlinkDef parseHyperLink(IContent content){
  IHyperlinkAction linkaction=content.getHyperlinkAction();
  if (linkaction != null) {
    if (linkaction.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      return new HyperlinkDef(linkaction.getBookmark().replaceAll(""String_Node_Str"",""String_Node_Str""),IHyperlinkAction.ACTION_BOOKMARK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_HYPERLINK) {
      return new HyperlinkDef(linkaction.getHyperlink(),IHyperlinkAction.ACTION_HYPERLINK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_DRILLTHROUGH) {
      Action act=new Action(linkaction);
      IHTMLActionHandler actionHandler=null;
      Object ac=service.getOption(IRenderOption.ACTION_HANDLER);
      if (ac != null && ac instanceof IHTMLActionHandler) {
        actionHandler=(IHTMLActionHandler)ac;
        return new HyperlinkDef(actionHandler.getURL(act,service.getReportContext()),IHyperlinkAction.ACTION_DRILLTHROUGH,null);
      }
    }
  }
  return null;
}","private HyperlinkDef parseHyperLink(IContent content){
  IHyperlinkAction linkaction=content.getHyperlinkAction();
  if (linkaction != null) {
    if (linkaction.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      String bookmark=linkaction.getBookmark();
      if (ExcelUtil.isValidBookmarkName(bookmark)) {
        return new HyperlinkDef(linkaction.getBookmark(),IHyperlinkAction.ACTION_BOOKMARK,null);
      }
 else {
        return null;
      }
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_HYPERLINK) {
      return new HyperlinkDef(linkaction.getHyperlink(),IHyperlinkAction.ACTION_HYPERLINK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_DRILLTHROUGH) {
      Action act=new Action(linkaction);
      IHTMLActionHandler actionHandler=null;
      Object ac=service.getOption(IRenderOption.ACTION_HANDLER);
      if (ac != null && ac instanceof IHTMLActionHandler) {
        actionHandler=(IHTMLActionHandler)ac;
        return new HyperlinkDef(actionHandler.getURL(act,service.getReportContext()),IHyperlinkAction.ACTION_DRILLTHROUGH,null);
      }
    }
  }
  return null;
}",0.9097605893186004
73356,"private void applyContainerTopBorder(Rule rule,int pos){
  if (engine.getContainers().size() == 0) {
    return;
  }
  XlsContainer container=engine.getCurrentContainer();
  StyleEntry entry=container.getStyle();
  int col=engine.getAxis().getCoordinate(rule.getStart());
  int span=engine.getAxis().getCoordinate(rule.getEnd()) - col;
  for (int i=col; i < span + col; i++) {
    Data data=engine.getData(i,pos);
    if (data == null || data == engine.waste) {
      continue;
    }
    StyleBuilder.applyTopBorder(entry,data.style);
  }
}","private void applyContainerTopBorder(Rule rule,int pos){
  if (engine.getContainers().size() == 0) {
    return;
  }
  XlsContainer container=engine.getCurrentContainer();
  StyleEntry entry=container.getStyle();
  int col=engine.getAxis().getCoordinateIndex(rule.getStart());
  int span=engine.getAxis().getCoordinateIndex(rule.getEnd()) - col;
  for (int i=col; i < span + col; i++) {
    Data data=engine.getData(i,pos);
    if (data == null || data == engine.waste) {
      continue;
    }
    StyleBuilder.applyTopBorder(entry,data.style);
  }
}",0.9908256880733946
73357,"public void calculateBottomStyles(){
  if (engine.getContainers().size() == 0) {
    return;
  }
  XlsContainer container=engine.getCurrentContainer();
  Rule rule=container.getRule();
  StyleEntry entry=container.getStyle();
  if (entry.isStart()) {
    calculateTopStyles();
  }
  int start=rule.getStart();
  int col=engine.getAxis().getCoordinate(start);
  int span=engine.getAxis().getCoordinate(rule.getEnd()) - col;
  int cp=engine.getColumnSize(col);
  cp=cp > 0 ? cp - 1 : 0;
  for (int i=0; i < span; i++) {
    Data data=engine.getData(i + col,cp);
    if (data == null) {
      continue;
    }
    StyleBuilder.applyBottomBorder(entry,data.style);
  }
}","public void calculateBottomStyles(){
  if (engine.getContainers().size() == 0) {
    return;
  }
  XlsContainer container=engine.getCurrentContainer();
  Rule rule=container.getRule();
  StyleEntry entry=container.getStyle();
  if (entry.isStart()) {
    calculateTopStyles();
  }
  int start=rule.getStart();
  int col=engine.getAxis().getCoordinateIndex(start);
  int span=engine.getAxis().getCoordinateIndex(rule.getEnd()) - col;
  int cp=engine.getColumnSize(col);
  cp=cp > 0 ? cp - 1 : 0;
  for (int i=0; i < span; i++) {
    Data data=engine.getData(i + col,cp);
    if (data == null) {
      continue;
    }
    StyleBuilder.applyBottomBorder(entry,data.style);
  }
}",0.9925373134328358
73358,"public void addCoordinates(int[] values){
  for (int i=0; i < values.length; i++) {
    addCoordinate(values[i]);
  }
}","public void addCoordinates(int[] values){
  for (int i=0; i < values.length; i++) {
    addCoordinateWithoutSort(values[i]);
  }
  Collections.sort(naxis);
}",0.8623188405797102
73359,"public void addCoordinate(int value){
  Integer index=new Integer(value);
  if (!naxis.contains(index)) {
    naxis.add(index);
    Collections.sort(naxis);
  }
}","public void addCoordinate(int value){
  if (addCoordinateWithoutSort(value)) {
    Collections.sort(naxis);
  }
}",0.6545454545454545
73360,"public int[] getRange(int start,int end){
  int sp=getCoordinate(start);
  int ep=getCoordinate(end);
  List list=naxis.subList(sp,ep + 1);
  Integer[] values=new Integer[list.size()];
  values=(Integer[])list.toArray(values);
  int[] pos=new int[values.length];
  for (int i=0; i < pos.length; i++) {
    pos[i]=values[i].intValue();
  }
  return pos;
}","/** 
 * Gets a subset of naxis.
 * @param start
 * @param end
 * @return
 */
public int[] getRange(int start,int end){
  int sp=getCoordinateIndex(start);
  int ep=getCoordinateIndex(end);
  List list=naxis.subList(sp,ep + 1);
  Integer[] values=new Integer[list.size()];
  values=(Integer[])list.toArray(values);
  int[] pos=new int[values.length];
  for (int i=0; i < pos.length; i++) {
    pos[i]=values[i].intValue();
  }
  return pos;
}",0.8880503144654088
73361,"private void synchronous(){
  Rule rule=getCurrentContainer().getRule();
  int start=rule.getStart();
  int end=rule.getEnd();
  int startcol=axis.getCoordinate(start);
  int endcol=axis.getCoordinate(end);
  int max=0;
  int len[]=new int[endcol - startcol];
  for (int i=startcol; i < endcol; i++) {
    int columnsize=cache.getColumnSize(i);
    len[i - startcol]=columnsize;
    max=max > columnsize ? max : columnsize;
  }
  for (int i=startcol; i < endcol; i++) {
    int rowspan=max - len[i - startcol];
    int last=len[i - startcol] - 1;
    if (rowspan > 0) {
      Object data=null;
      Object upstair=cache.getData(i,last);
      if (upstair != null && upstair != waste) {
        Data predata=(Data)upstair;
        int rs=predata.getRowSpan() + rowspan;
        predata.setRowSpan(rs);
        data=predata;
      }
 else {
        data=waste;
      }
      for (int p=0; p < rowspan; p++) {
        cache.addData(i,data);
      }
    }
  }
}","private void synchronous(){
  Rule rule=getCurrentContainer().getRule();
  int start=rule.getStart();
  int end=rule.getEnd();
  int startcol=axis.getCoordinateIndex(start);
  int endcol=axis.getCoordinateIndex(end);
  int max=0;
  int len[]=new int[endcol - startcol];
  for (int i=startcol; i < endcol; i++) {
    int columnsize=cache.getColumnSize(i);
    len[i - startcol]=columnsize;
    max=max > columnsize ? max : columnsize;
  }
  for (int i=startcol; i < endcol; i++) {
    int rowspan=max - len[i - startcol];
    int last=len[i - startcol] - 1;
    if (rowspan > 0) {
      Object data=null;
      Object upstair=cache.getData(i,last);
      if (upstair != null && upstair != waste) {
        Data predata=(Data)upstair;
        int rs=predata.getRowSpan() + rowspan;
        predata.setRowSpan(rs);
        data=predata;
      }
 else {
        data=waste;
      }
      for (int p=0; p < rowspan; p++) {
        cache.addData(i,data);
      }
    }
  }
}",0.9948078920041536
73362,"public void addTable(TableInfo table,IStyle style){
  Rule rule=getCurrentContainer().getRule();
  int start=rule.getStart();
  int[] npos=new int[table.getColumnCount() + 1];
  npos[0]=start;
  for (int i=1; i <= table.getColumnCount(); i++) {
    npos[i]=npos[i - 1] + table.getColumnWidth(i - 1);
  }
  int[] scale=axis.getRange(start,rule.getEnd());
  for (int i=0; i < scale.length - 1; i++) {
    int sp=scale[i];
    int se=scale[i + 1];
    int[] range=inRange(sp,se,npos);
    if (range.length > 0) {
      int pos=axis.getCoordinate(sp);
      cache.insertColumns(pos,range.length);
      for (int j=0; j < range.length; j++) {
        axis.addCoordinate(range[j]);
      }
    }
  }
  XlsContainer container=createContainer(rule,style);
  XlsTable tcontainer=new XlsTable(table,container);
  addContainer(tcontainer);
  tables.push(tcontainer);
}","public void addTable(TableInfo table,IStyle style){
  Rule rule=getCurrentContainer().getRule();
  int start=rule.getStart();
  int[] npos=new int[table.getColumnCount() + 1];
  npos[0]=start;
  for (int i=1; i <= table.getColumnCount(); i++) {
    npos[i]=npos[i - 1] + table.getColumnWidth(i - 1);
  }
  int[] scale=axis.getRange(start,rule.getEnd());
  for (int i=0; i < scale.length - 1; i++) {
    int sp=scale[i];
    int se=scale[i + 1];
    int[] range=inRange(sp,se,npos);
    if (range.length > 0) {
      int pos=axis.getCoordinateIndex(sp);
      cache.insertColumns(pos,range.length);
      for (int j=0; j < range.length; j++) {
        axis.addCoordinate(range[j]);
      }
    }
  }
  XlsContainer container=createContainer(rule,style);
  XlsTable tcontainer=new XlsTable(table,container);
  addContainer(tcontainer);
  tables.push(tcontainer);
}",0.9970913321698662
73363,"public void addContainer(XlsContainer container){
  getCurrentContainer().setEmpty(false);
  int col=axis.getCoordinate(container.getRule().getStart());
  int pos=cache.getColumnSize(col);
  container.setStart(pos);
  containers.push(container);
}","public void addContainer(XlsContainer container){
  getCurrentContainer().setEmpty(false);
  int col=axis.getCoordinateIndex(container.getRule().getStart());
  int pos=cache.getColumnSize(col);
  container.setStart(pos);
  containers.push(container);
}",0.9899799599198396
73364,"private void addData(Data data){
  getCurrentContainer().setEmpty(false);
  int col=axis.getCoordinate(data.getRule().getStart());
  int span=axis.getCoordinate(data.getRule().getEnd()) - col;
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    addDatatoCache(i,waste);
  }
}","private void addData(Data data){
  getCurrentContainer().setEmpty(false);
  int col=axis.getCoordinateIndex(data.getRule().getStart());
  int span=axis.getCoordinateIndex(data.getRule().getEnd()) - col;
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    addDatatoCache(i,waste);
  }
}",0.9836065573770492
73365,"public Data[] getRow(int rownum){
  Object[] row=cache.getRowData(rownum);
  List data=new ArrayList();
  int width=Math.min(row.length,MAX_COLUMN - 1);
  for (int i=0; i < width; i++) {
    if (waste == row[i]) {
      continue;
    }
    Data d=(Data)row[i];
    if (d.isProcessed()) {
      continue;
    }
    HyperlinkDef def=d.getHyperlinkDef();
    if (def != null && def.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      def.setUrl((String)links.get(def.getUrl()));
    }
    d.setProcessed(true);
    data.add(row[i]);
  }
  Data[] rowdata=new Data[data.size()];
  data.toArray(rowdata);
  return rowdata;
}","public Data[] getRow(int rownum){
  Object[] row=cache.getRowData(rownum);
  List data=new ArrayList();
  int width=Math.min(row.length,MAX_COLUMN - 1);
  for (int i=0; i < width; i++) {
    if (waste == row[i]) {
      continue;
    }
    Data d=(Data)row[i];
    if (d.isProcessed()) {
      continue;
    }
    d.setProcessed(true);
    data.add(row[i]);
  }
  Data[] rowdata=new Data[data.size()];
  data.toArray(rowdata);
  return rowdata;
}",0.5923149015932521
73366,"public void complete(){
  int rowcount=cache.getMaxRow();
  for (int i=0; i < rowcount; i++) {
    Object[] row=cache.getRowData(i);
    for (int j=0; j < row.length; j++) {
      if (row[j] == waste) {
        continue;
      }
      Data d=(Data)row[j];
      int styleid=engine.getStyleID(d.getStyleEntry());
      d.setStyleId(styleid);
      Rule rule=d.getRule();
      int start=axis.getCoordinate(rule.getStart()) + 1;
      int end=axis.getCoordinate(rule.getEnd()) + 1;
      end=Math.min(end,MAX_COLUMN);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      HyperlinkDef link=d.getHyperlinkDef();
      if (link != null && link.getBookmark() != null) {
        links.put(link.getBookmark(),getCellName(i + 1,start + 1));
      }
      d.setSpan(span);
    }
  }
}","public void complete(){
  int rowcount=cache.getMaxRow();
  for (int i=0; i < rowcount; i++) {
    Object[] row=cache.getRowData(i);
    for (int j=0; j < row.length; j++) {
      if (row[j] == waste) {
        continue;
      }
      Data d=(Data)row[j];
      int styleid=engine.getStyleID(d.getStyleEntry());
      d.setStyleId(styleid);
      Rule rule=d.getRule();
      int start=axis.getCoordinateIndex(rule.getStart()) + 1;
      int end=axis.getCoordinateIndex(rule.getEnd()) + 1;
      end=Math.min(end,MAX_COLUMN);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      HyperlinkDef link=d.getHyperlinkDef();
      if (link != null && link.getBookmark() != null) {
        links.put(link.getBookmark(),getCellName(i + 1,start + 1));
      }
      d.setSpan(span);
    }
  }
}",0.9938875305623472
73367,"/** 
 * @param cubeHandle
 * @param appContext
 * @param stopSign
 * @throws BirtException
 */
private void materializeCube(CubeHandle cubeHandle,Map appContext,StopSign stopSign) throws BirtException {
  if (stopSign == null)   stopSign=new StopSign();
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    CubeMaterializer cubeMaterializer=null;
    if (appContext == null)     appContext=sessionContext.getAppContext();
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      int size=0;
      if (appContext != null) {
        Integer value=DataTypeUtil.toInteger(appContext.get(DataEngine.IN_MEMORY_CUBE_SIZE));
        if (value != null && value.intValue() > 0) {
          size=value.intValue();
        }
      }
      cubeMaterializer=createCubeMaterializer(cubeHandle,size);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer,appContext,stopSign);
      cubeMaterializer.close();
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle,0);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer,appContext,stopSign);
      cubeMaterializer.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),null);
      cubeMaterializer.close();
    }
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","/** 
 * @param cubeHandle
 * @param appContext
 * @param stopSign
 * @throws BirtException
 */
private void materializeCube(CubeHandle cubeHandle,Map appContext,StopSign stopSign) throws BirtException {
  if (stopSign == null)   stopSign=new StopSign();
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    CubeMaterializer cubeMaterializer=null;
    if (appContext == null)     appContext=sessionContext.getAppContext();
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      int size=0;
      if (appContext != null) {
        Integer value=DataTypeUtil.toInteger(appContext.get(DataEngine.IN_MEMORY_CUBE_SIZE));
        if (value != null && value.intValue() > 0) {
          size=value.intValue();
        }
      }
      cubeMaterializer=createCubeMaterializer(cubeHandle,size);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer,appContext,stopSign);
      cubeMaterializer.close();
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle,0);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer,appContext,stopSign);
      cubeMaterializer.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),null);
      cubeMaterializer.close();
    }
  }
 catch (  Exception e) {
    throw new DataException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}",0.9793152639087018
73368,"/** 
 * Test disable some column binding on diskCache.
 * @throws Exception
 */
public void testDiskCacheColumnBinding() throws Exception {
  String initialStr=System.getProperty(""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  incomprehensiveColumnBinding();
  System.setProperty(""String_Node_Str"",initialStr == null ? ""String_Node_Str"" : initialStr);
}","/** 
 * Test disable some column binding on diskCache.
 * @throws Exception
 */
public void testDiskCacheColumnBinding() throws Exception {
  String initialStr=System.getProperty(""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  incomprehensiveColumnBinding();
  if (initialStr == null)   System.clearProperty(""String_Node_Str"");
 else   System.setProperty(""String_Node_Str"",initialStr);
}",0.826302729528536
73369,"public int getSubQueryStartingIndex() throws DataException {
  int groupIndex=this.parentIterator.getCurrentGroupIndex(groupLevel);
  int[] groupStartingEndingIndex=this.parentIterator.getGroupStartAndEndIndex(groupLevel);
  return (this.parentExecutor instanceof ISubQueryExecutor) ? ((ISubQueryExecutor)this.parentExecutor).getSubQueryStartingIndex() + groupStartingEndingIndex[groupIndex * 2] : groupStartingEndingIndex[groupIndex * 2];
}","public int getSubQueryStartingIndex() throws DataException {
  if (!subQueryOnGroup)   return this.parentIterator.getCurrentResultIndex();
  int groupIndex=this.parentIterator.getCurrentGroupIndex(groupLevel);
  int[] groupStartingEndingIndex=this.parentIterator.getGroupStartAndEndIndex(groupLevel);
  return (this.parentExecutor instanceof ISubQueryExecutor) ? ((ISubQueryExecutor)this.parentExecutor).getSubQueryStartingIndex() + groupStartingEndingIndex[groupIndex * 2] : groupStartingEndingIndex[groupIndex * 2];
}",0.91875
73370,"/** 
 * This is used for PRESENTATION, the data in report document as the CachedResultSet.
 * @return
 * @throws DataException
 */
IExprResultSet loadExprResultSet() throws DataException {
  if (streamManager.isSecondRD() == true && streamManager.isSubquery() == true)   return new ExprResultSet2(tempDir,streamManager,version,streamManager.isSecondRD());
  return new ExprResultSet(tempDir,streamManager,version,streamManager.isSecondRD(),(streamManager.isSubquery() || this.version < VersionManager.VERSION_2_2_1_3) ? null : this.loadDataSetData());
}","/** 
 * This is used for PRESENTATION, the data in report document as the CachedResultSet.
 * @return
 * @throws DataException
 */
IExprResultSet loadExprResultSet(int rowIdStartingIndex) throws DataException {
  if (streamManager.isSecondRD() == true && streamManager.isSubquery() == true)   return new ExprResultSet2(tempDir,streamManager,version,streamManager.isSecondRD(),rowIdStartingIndex);
  return new ExprResultSet(tempDir,streamManager,version,streamManager.isSecondRD(),(streamManager.isSubquery() || this.version < VersionManager.VERSION_2_2_1_3) ? null : this.loadDataSetData(),streamManager.isSubquery() ? rowIdStartingIndex : 0);
}",0.9224353628023352
73371,"/** 
 * @throws DataException
 */
private void prepare() throws DataException {
  String rootID=QueryResultIDUtil.get1PartID(this.queryResultID);
  String selfID=QueryResultIDUtil.get2PartID(this.queryResultID);
  if (selfID == null)   selfID=this.queryResultID;
  RDLoad valueLoader=RDUtil.newLoad(tempDir,this.context,new QueryResultInfo(rootID,null,selfID,this.subQueryName,this.currParentIndex));
  if (this.subQueryName != null)   subQueryIndex=valueLoader.getSubQueryIndex(currParentIndex);
  this.exprResultSet=valueLoader.loadExprResultSet();
}","/** 
 * @throws DataException
 */
private void prepare() throws DataException {
  String rootID=QueryResultIDUtil.get1PartID(this.queryResultID);
  String selfID=QueryResultIDUtil.get2PartID(this.queryResultID);
  if (selfID == null)   selfID=this.queryResultID;
  RDLoad valueLoader=RDUtil.newLoad(tempDir,this.context,new QueryResultInfo(rootID,null,selfID,this.subQueryName,this.currParentIndex));
  int rowIdStartingIndex=0;
  if (this.subQueryName != null) {
    subQueryIndex=valueLoader.getSubQueryIndex(currParentIndex);
    rowIdStartingIndex=currParentIndex;
  }
  this.exprResultSet=valueLoader.loadExprResultSet(rowIdStartingIndex);
}",0.9215358931552587
73372,"public int getCurrentId(){
  return this.exprResultReader.getRowId();
}","public int getCurrentId(){
  return this.rowIdStartingIndex + this.exprResultReader.getRowId();
}",0.8452380952380952
73373,"/** 
 * @param streamManager
 * @param rdGroupUtil
 * @throws DataException
 */
public ExprResultSet(String tempDir,StreamManager streamManager,int version,boolean isBasedOnSecondRD,DataSetResultSet dataSetResultSet) throws DataException {
  this.tempDir=tempDir;
  this.streamManager=streamManager;
  this.version=version;
  this.isBasedOnSecondRD=isBasedOnSecondRD;
  this.dataSetResultSet=dataSetResultSet;
  this.prepare();
  this.rdGroupUtil.setCacheProvider(new CacheProviderImpl(this));
}","/** 
 * @param streamManager
 * @param rdGroupUtil
 * @throws DataException
 */
public ExprResultSet(String tempDir,StreamManager streamManager,int version,boolean isBasedOnSecondRD,DataSetResultSet dataSetResultSet,int rowIdStartingIndex) throws DataException {
  this.tempDir=tempDir;
  this.streamManager=streamManager;
  this.version=version;
  this.isBasedOnSecondRD=isBasedOnSecondRD;
  this.dataSetResultSet=dataSetResultSet;
  this.rowIdStartingIndex=rowIdStartingIndex;
  this.prepare();
  this.rdGroupUtil.setCacheProvider(new CacheProviderImpl(this));
}",0.9348441926345608
73374,"/** 
 * @param streamManager
 * @param rdGroupUtil
 * @param version
 * @param isBasedOnSecondRD
 * @throws DataException
 */
public ExprResultSet2(String tempDir,StreamManager streamManager,int version,boolean isBasedOnSecondRD) throws DataException {
  super(tempDir,streamManager,version,isBasedOnSecondRD,null);
}","/** 
 * @param streamManager
 * @param rdGroupUtil
 * @param version
 * @param isBasedOnSecondRD
 * @throws DataException
 */
public ExprResultSet2(String tempDir,StreamManager streamManager,int version,boolean isBasedOnSecondRD,int rowIdStartingIndex) throws DataException {
  super(tempDir,streamManager,version,isBasedOnSecondRD,null,rowIdStartingIndex);
}",0.9378698224852072
73375,"public PDFTableRegionLM getTableRegionLayout(){
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setReport(context.getReport());
  con.setMaxHeight(context.getMaxHeight());
  con.setMaxWidth(context.getMaxWidth());
  con.setAllowPageBreak(false);
  if (regionLayout == null) {
    regionLayout=new TableAreaLayout(tableContent,layoutInfo,startCol,endCol);
  }
  return new PDFTableRegionLM(con,tableContent,layoutInfo,regionLayout);
}","public PDFTableRegionLM getTableRegionLayout(){
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setLocale(context.getLocale());
  con.setReport(context.getReport());
  con.setMaxHeight(context.getMaxHeight());
  con.setMaxWidth(context.getMaxWidth());
  con.setAllowPageBreak(false);
  if (regionLayout == null) {
    regionLayout=new TableAreaLayout(tableContent,layoutInfo,startCol,endCol);
  }
  return new PDFTableRegionLM(con,tableContent,layoutInfo,regionLayout);
}",0.9695024077046548
73376,"public Collection getSelectionTreeForCascadingGroup(String parameterGroupName){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (parameterGroup == null)   return Collections.EMPTY_LIST;
  SlotHandle parameters=parameterGroup.getParameters();
  int parameterCount=parameters.getCount();
  if (DesignChoiceConstants.DATA_SET_MODE_SINGLE.equals(parameterGroup.getDataSetMode())) {
    IResultIterator resultIterator=getResultSetOfCascadingGroup(parameterGroup);
    if (resultIterator == null) {
      return Collections.EMPTY_LIST;
    }
    Collection selectionTree=populateToSelectionTree(resultIterator,parameterGroup);
    close(resultIterator);
    return selectionTree;
  }
 else {
    ParameterHelper[] parameterHelpers=getParameterHelpers(parameterGroup);
    ChoiceListCache cache=new ChoiceListCache(parameterHelpers);
    assert(parameterCount > 0);
    return getSelectionTree(parameters,parameterHelpers,cache,new Object[0]);
  }
}","public Collection getSelectionTreeForCascadingGroup(String parameterGroupName){
  try {
    switchToOsgiClassLoader();
    return doGetSelectionTreeForCascadingGroup(parameterGroupName);
  }
  finally {
    switchClassLoaderBack();
  }
}",0.1949634443541835
73377,"public Collection getSelectionList(String name){
  usingParameterValues();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return Collections.EMPTY_LIST;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  boolean sortByLabel=""String_Node_Str"".equalsIgnoreCase(parameter.getSortBy());
  boolean sortDirectionValue=""String_Node_Str"".equalsIgnoreCase(parameter.getSortDirection());
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    CascadingParameterGroupHandle group=null;
    if (isCascadingParameter(parameter)) {
      group=getCascadingGroup(parameter);
    }
    if (group != null) {
      if (DesignChoiceConstants.DATA_SET_MODE_SINGLE.equals(group.getDataSetMode())) {
        return getCascadingParameterList(parameter);
      }
 else {
        if (parameter.getDataSetName() != null) {
          return getChoicesFromParameterQuery(parameter);
        }
      }
    }
 else {
      if (parameter.getDataSetName() != null) {
        return getChoicesFromParameterQuery(parameter);
      }
    }
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label == null) {
        label=choice.getLabel();
      }
      Object value=convertToType(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    if (!fixedOrder)     Collections.sort(choices,new SelectionChoiceComparator(sortByLabel,parameter.getPattern(),sortDirectionValue,ULocale.forLocale(locale)));
    return choices;
  }
  return Collections.EMPTY_LIST;
}","public Collection getSelectionList(String name){
  try {
    switchToOsgiClassLoader();
    return doGetSelectionList(name);
  }
  finally {
    switchClassLoaderBack();
  }
}",0.0918181818181818
73378,"public void run() throws EngineException {
  try {
    changeStatusToRunning();
    doRun();
  }
  finally {
    changeStatusToStopped();
  }
}","public void run() throws EngineException {
  try {
    switchToOsgiClassLoader();
    changeStatusToRunning();
    doRun();
  }
  finally {
    changeStatusToStopped();
    switchClassLoaderBack();
  }
}",0.8265895953757225
73379,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static int runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getSession().getTempDir(),dataEngine.getContext(),queryResultInfo);
  IBaseQueryDefinition rootQueryDefn=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  if (QueryCompUtil.isIVQueryDefnEqual(rootQueryDefn,queryDefn)) {
    return BASED_ON_PRESENTATION;
  }
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=isCompatibleSubQuery(rootQueryDefn,queryDefn);
  if (runningOnRS == false)   return BASED_ON_DATASET;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (!QueryCompUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
    Iterator bindings=queryDefn.getBindings().values().iterator();
    while (bindings.hasNext()) {
      IBinding binding=(IBinding)bindings.next();
      if (binding.getAggrFunction() != null) {
        if (IBuildInAggregation.TOTAL_FIRST_FUNC.equals(binding.getAggrFunction()) || IBuildInAggregation.TOTAL_LAST_FUNC.equals(binding.getAggrFunction())) {
          return BASED_ON_DATASET;
        }
      }
      if (binding.getExpression() != null && binding.getExpression() instanceof IScriptExpression) {
        IScriptExpression expr=(IScriptExpression)binding.getExpression();
        if (ExpressionUtil.hasAggregation(expr.getText())) {
          if (expr.getText().matches(""String_Node_Str"") || expr.getText().matches(""String_Node_Str"")) {
            return BASED_ON_DATASET;
          }
        }
      }
    }
  }
  if (!isBindingReferenceSort(queryDefn.getSorts()))   return BASED_ON_DATASET;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return BASED_ON_DATASET;
    if (!QueryCompUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      if (groups != null && !groups.isEmpty())       runningOnRS=false;
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS ? BASED_ON_RESULTSET : BASED_ON_DATASET;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static int runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getSession().getTempDir(),dataEngine.getContext(),queryResultInfo);
  IBaseQueryDefinition rootQueryDefn=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  if (QueryCompUtil.isIVQueryDefnEqual(rootQueryDefn,queryDefn)) {
    return BASED_ON_PRESENTATION;
  }
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=isCompatibleSubQuery(rootQueryDefn,queryDefn);
  if (runningOnRS == false)   return BASED_ON_DATASET;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (!QueryCompUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
    Iterator bindings=queryDefn.getBindings().values().iterator();
    while (bindings.hasNext()) {
      IBinding binding=(IBinding)bindings.next();
      if (binding.getAggrFunction() != null) {
        if (IBuildInAggregation.TOTAL_FIRST_FUNC.equals(binding.getAggrFunction()) || IBuildInAggregation.TOTAL_LAST_FUNC.equals(binding.getAggrFunction())) {
          return BASED_ON_DATASET;
        }
      }
      if (binding.getExpression() != null && binding.getExpression() instanceof IScriptExpression) {
        IScriptExpression expr=(IScriptExpression)binding.getExpression();
        if (ExpressionUtil.hasAggregation(expr.getText())) {
          if (expr.getText().matches(""String_Node_Str"") || expr.getText().matches(""String_Node_Str"")) {
            return BASED_ON_DATASET;
          }
        }
      }
    }
  }
  if (!isBindingReferenceSort(queryDefn.getSorts()))   return BASED_ON_DATASET;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return BASED_ON_DATASET;
    if (!QueryCompUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      if (groups != null && !groups.isEmpty())       runningOnRS=false;
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS ? BASED_ON_RESULTSET : BASED_ON_DATASET;
}",0.984126984126984
73380,"/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  Platform.setPlatform(null);
}","/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  Platform.setPlatform(null);
  Platform.setContextClassLoader(null);
}",0.8974358974358975
73381,"/** 
 * This method is called upon plug-in activation.
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  Platform.setPlatform(new EclipsePlatform(context));
}","/** 
 * This method is called upon plug-in activation.
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  Platform.setPlatform(new EclipsePlatform(context));
  Platform.setContextClassLoader(Thread.currentThread().getContextClassLoader());
}",0.8284518828451883
73382,"/** 
 * Returns the list of editparts which are conceptually at the same level of navigation as the currently focused editpart. By default, these are the siblings of the focused part. <p> This implementation returns a list that contains the EditPart that has focus. </p>
 * @return a list of navigation editparts
 */
List getNavigationSiblings(){
  EditPart focusPart=getFocusEditPart();
  if (focusPart.getParent() != null)   return focusPart.getParent().getChildren();
  List list=new ArrayList();
  list.add(focusPart);
  return list;
}","/** 
 * Returns the list of editparts which are conceptually at the same level of navigation as the currently focused editpart. By default, these are the siblings of the focused part. <p> This implementation returns a list that contains the EditPart that has focus. </p>
 * @return a list of navigation editparts
 */
protected List getNavigationSiblings(){
  EditPart focusPart=getFocusEditPart();
  if (focusPart.getParent() != null)   return focusPart.getParent().getChildren();
  List list=new ArrayList();
  list.add(focusPart);
  return list;
}",0.9908088235294118
73383,"public static ClassLoader createClassLoaderFromDesign(IReportRunnable runnable,ClassLoader parent){
  if (runnable != null) {
    ModuleHandle module=(ModuleHandle)runnable.getDesignHandle();
    ArrayList urls=new ArrayList();
    Iterator iter=module.scriptLibsIterator();
    while (iter.hasNext()) {
      ScriptLibHandle lib=(ScriptLibHandle)iter.next();
      String libPath=lib.getName();
      URL url=module.findResource(libPath,IResourceLocator.LIBRARY);
      System.out.println(url.getPath());
      if (url != null) {
        urls.add(url);
      }
    }
    if (urls.size() != 0) {
      URL[] jarUrls=(URL[])urls.toArray(new URL[]{});
      return new URLClassLoader(jarUrls,parent);
    }
  }
  return parent;
}","public static ClassLoader createClassLoaderFromDesign(IReportRunnable runnable,ClassLoader parent){
  if (runnable != null) {
    ModuleHandle module=(ModuleHandle)runnable.getDesignHandle();
    ArrayList urls=new ArrayList();
    Iterator iter=module.scriptLibsIterator();
    while (iter.hasNext()) {
      ScriptLibHandle lib=(ScriptLibHandle)iter.next();
      String libPath=lib.getName();
      URL url=module.findResource(libPath,IResourceLocator.LIBRARY);
      if (url != null) {
        urls.add(url);
      }
    }
    if (urls.size() != 0) {
      URL[] jarUrls=(URL[])urls.toArray(new URL[]{});
      return new URLClassLoader(jarUrls,parent);
    }
  }
  return parent;
}",0.9709837225760792
73384,"protected Object doRead(byte[] buffer) throws Exception {
  ByteArrayInputStream in=new ByteArrayInputStream(buffer);
  DataInputStream oi=new DataInputStream(in);
  Object object=new Object();
  int contentType=IOUtil.readInt(oi);
  int version=VERSION_1;
switch (contentType) {
case IContent.CELL_CONTENT:
    CellContent cellContent=(CellContent)reportContent.createCellContent();
  cellContent.setVersion(VERSION_1);
cellContent.readContent(oi);
object=cellContent;
break;
case IContent.CONTAINER_CONTENT:
ContainerContent containerContent=(ContainerContent)reportContent.createContainerContent();
containerContent.setVersion(version);
containerContent.readContent(oi);
object=containerContent;
break;
case IContent.DATA_CONTENT:
DataContent dataContent=(DataContent)reportContent.createDataContent();
dataContent.setVersion(version);
dataContent.readContent(oi);
object=dataContent;
break;
case IContent.FOREIGN_CONTENT:
ForeignContent foreignContent=foreignContent=(ForeignContent)reportContent.createForeignContent();
foreignContent.setVersion(version);
foreignContent.readContent(oi);
object=foreignContent;
break;
case IContent.IMAGE_CONTENT:
ImageContent imageContent=(ImageContent)reportContent.createImageContent();
imageContent.setVersion(version);
imageContent.readContent(oi);
object=imageContent;
break;
case IContent.LABEL_CONTENT:
LabelContent labelContent=(LabelContent)reportContent.createLabelContent();
labelContent.setVersion(version);
labelContent.readContent(oi);
object=labelContent;
break;
case IContent.PAGE_CONTENT:
PageContent pageContent=(PageContent)reportContent.createPageContent();
pageContent.setVersion(version);
pageContent.readContent(oi);
object=pageContent;
break;
case IContent.ROW_CONTENT:
RowContent rowContent=(RowContent)reportContent.createRowContent();
rowContent.setVersion(version);
rowContent.readContent(oi);
object=rowContent;
break;
case IContent.TABLE_BAND_CONTENT:
TableBandContent tableBandContent=(TableBandContent)reportContent.createTableBandContent();
tableBandContent.setVersion(version);
tableBandContent.readContent(oi);
object=tableBandContent;
break;
case IContent.TABLE_CONTENT:
TableContent tableContent=(TableContent)reportContent.createTableContent();
tableContent.setVersion(version);
tableContent.readContent(oi);
object=tableContent;
break;
case IContent.TEXT_CONTENT:
TextContent textContent=(TextContent)reportContent.createTextContent();
textContent.setVersion(version);
textContent.readContent(oi);
object=textContent;
break;
default :
throw new ClassNotFoundException(""String_Node_Str"" + contentType);
}
return object;
}","protected Object doRead(byte[] buffer) throws Exception {
  ByteArrayInputStream in=new ByteArrayInputStream(buffer);
  DataInputStream oi=new DataInputStream(in);
  Object object=new Object();
  int contentType=IOUtil.readInt(oi);
  int version=VERSION_1;
switch (contentType) {
case IContent.CELL_CONTENT:
    CellContent cellContent=(CellContent)reportContent.createCellContent();
  cellContent.setVersion(VERSION_1);
cellContent.readContent(oi,null);
object=cellContent;
break;
case IContent.CONTAINER_CONTENT:
ContainerContent containerContent=(ContainerContent)reportContent.createContainerContent();
containerContent.setVersion(version);
containerContent.readContent(oi,null);
object=containerContent;
break;
case IContent.DATA_CONTENT:
DataContent dataContent=(DataContent)reportContent.createDataContent();
dataContent.setVersion(version);
dataContent.readContent(oi,null);
object=dataContent;
break;
case IContent.FOREIGN_CONTENT:
ForeignContent foreignContent=(ForeignContent)reportContent.createForeignContent();
foreignContent.setVersion(version);
foreignContent.readContent(oi,null);
object=foreignContent;
break;
case IContent.IMAGE_CONTENT:
ImageContent imageContent=(ImageContent)reportContent.createImageContent();
imageContent.setVersion(version);
imageContent.readContent(oi,null);
object=imageContent;
break;
case IContent.LABEL_CONTENT:
LabelContent labelContent=(LabelContent)reportContent.createLabelContent();
labelContent.setVersion(version);
labelContent.readContent(oi,null);
object=labelContent;
break;
case IContent.PAGE_CONTENT:
PageContent pageContent=(PageContent)reportContent.createPageContent();
pageContent.setVersion(version);
pageContent.readContent(oi,null);
object=pageContent;
break;
case IContent.ROW_CONTENT:
RowContent rowContent=(RowContent)reportContent.createRowContent();
rowContent.setVersion(version);
rowContent.readContent(oi,null);
object=rowContent;
break;
case IContent.TABLE_BAND_CONTENT:
TableBandContent tableBandContent=(TableBandContent)reportContent.createTableBandContent();
tableBandContent.setVersion(version);
tableBandContent.readContent(oi,null);
object=tableBandContent;
break;
case IContent.TABLE_CONTENT:
TableContent tableContent=(TableContent)reportContent.createTableContent();
tableContent.setVersion(version);
tableContent.readContent(oi,null);
object=tableContent;
break;
case IContent.TEXT_CONTENT:
TextContent textContent=(TextContent)reportContent.createTextContent();
textContent.setVersion(version);
textContent.readContent(oi,null);
object=textContent;
break;
default :
throw new ClassNotFoundException(""String_Node_Str"" + contentType);
}
return object;
}",0.9514896867838044
73385,void readContent(DataInputStream in) throws IOException ;,"void readContent(DataInputStream in,ClassLoader loader) throws IOException ;",0.8571428571428571
73386,"protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_TYPE:
    bandType=IOUtil.readInt(in);
  break;
default :
super.readField(version,filedId,in);
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_TYPE:
    bandType=IOUtil.readInt(in);
  break;
default :
super.readField(version,filedId,in,loader);
}
}",0.9437229437229436
73387,"public void readContent(DataInputStream in) throws IOException {
  if (this.version == VERSION_1) {
    readContentV1(in);
  }
 else   if (this.version == VERSION_0) {
    readContentV0(in);
  }
 else {
    throw new IOException(""String_Node_Str"" + version);
  }
}","public void readContent(DataInputStream in,ClassLoader loader) throws IOException {
  if (this.version == VERSION_1) {
    readContentV1(in,loader);
  }
 else   if (this.version == VERSION_0) {
    readContentV0(in,loader);
  }
 else {
    throw new IOException(""String_Node_Str"" + version);
  }
}",0.9411764705882352
73388,"protected void readContentV0(DataInputStream in) throws IOException {
  IOUtil.readInt(in);
  int filedId=IOUtil.readInt(in);
  while (filedId != FIELD_NONE) {
    readField(VERSION_0,filedId,in);
    filedId=IOUtil.readInt(in);
  }
}","protected void readContentV0(DataInputStream in,ClassLoader loader) throws IOException {
  IOUtil.readInt(in);
  int filedId=IOUtil.readInt(in);
  while (filedId != FIELD_NONE) {
    readField(VERSION_0,filedId,in,loader);
    filedId=IOUtil.readInt(in);
  }
}",0.9473684210526316
73389,"protected void readContentV1(DataInputStream in) throws IOException {
  while (in.available() > 0) {
    int filedId=IOUtil.readShort(in);
    readField(VERSION_1,filedId,in);
  }
}","protected void readContentV1(DataInputStream in,ClassLoader loader) throws IOException {
  while (in.available() > 0) {
    int filedId=IOUtil.readShort(in);
    readField(VERSION_1,filedId,in,loader);
  }
}",0.9329896907216496
73390,"protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_NAME:
    name=IOUtil.readString(in);
  break;
case FIELD_X:
x=new DimensionType();
x.readObject(in);
break;
case FIELD_Y:
y=new DimensionType();
y.readObject(in);
break;
case FIELD_WIDTH:
width=new DimensionType();
width.readObject(in);
break;
case FIELD_HEIGHT:
height=new DimensionType();
height.readObject(in);
break;
case FIELD_HYPERLINK:
ActionContent action=new ActionContent();
action.readObject(in);
hyperlink=action;
break;
case FIELD_BOOKMARK:
bookmark=IOUtil.readString(in);
break;
case FIELD_HELPTEXT:
helpText=IOUtil.readString(in);
break;
case FIELD_INLINESTYLE:
String style=IOUtil.readString(in);
if (style != null && style.length() != 0) {
inlineStyle=new StyleDeclaration(cssEngine);
inlineStyle.setCssText(style);
}
break;
case FIELD_INSTANCE_ID:
String value=IOUtil.readString(in);
instanceId=InstanceID.parse(value);
break;
case FIELD_TOC:
toc=IOUtil.readObject(in);
break;
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_NAME:
    name=IOUtil.readString(in);
  break;
case FIELD_X:
x=new DimensionType();
x.readObject(in);
break;
case FIELD_Y:
y=new DimensionType();
y.readObject(in);
break;
case FIELD_WIDTH:
width=new DimensionType();
width.readObject(in);
break;
case FIELD_HEIGHT:
height=new DimensionType();
height.readObject(in);
break;
case FIELD_HYPERLINK:
ActionContent action=new ActionContent();
action.readObject(in,loader);
hyperlink=action;
break;
case FIELD_BOOKMARK:
bookmark=IOUtil.readString(in);
break;
case FIELD_HELPTEXT:
helpText=IOUtil.readString(in);
break;
case FIELD_INLINESTYLE:
String style=IOUtil.readString(in);
if (style != null && style.length() != 0) {
inlineStyle=new StyleDeclaration(cssEngine);
inlineStyle.setCssText(style);
}
break;
case FIELD_INSTANCE_ID:
String value=IOUtil.readString(in);
instanceId=InstanceID.parse(value);
break;
case FIELD_TOC:
toc=IOUtil.readObject(in,loader);
break;
}
}",0.9840656687590535
73391,"public void readObject(DataInputStream in) throws IOException {
  int version=IOUtil.readInt(in);
  int filedId=IOUtil.readInt(in);
  while (filedId != FIELD_NONE) {
    readField(version,filedId,in);
    filedId=IOUtil.readInt(in);
  }
}","public void readObject(DataInputStream in,ClassLoader loader) throws IOException {
  int version=IOUtil.readInt(in);
  int filedId=IOUtil.readInt(in);
  while (filedId != FIELD_NONE) {
    readField(version,filedId,in,loader);
    filedId=IOUtil.readInt(in);
  }
}",0.9482071713147412
73392,"protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_TYPE:
    type=IOUtil.readInt(in);
  if (type == ACTION_DRILLTHROUGH) {
    drillThrough=new DrillThroughAction();
  }
break;
case FIELD_BOOKMARK:
String bk=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setBookmark(bk);
}
 else {
bookmark=bk;
}
break;
case FIELD_HYPERLINK:
hyperlink=IOUtil.readString(in);
break;
case FIELD_REPORTNAME:
String name=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setReportName(name);
}
break;
case FIELD_PARAMETERBINDINGS:
Map bindings=IOUtil.readMap(in);
if (isDrillThrough()) {
drillThrough.setParameterBindings(bindings);
}
break;
case FIELD_SEARCHCRITERIA:
Map search=IOUtil.readMap(in);
if (isDrillThrough()) {
drillThrough.setSearchCriteria(search);
}
break;
case FIELD_TARGET:
String tgt=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setTargetWindow(tgt);
}
 else {
target=tgt;
}
break;
case FIELD_FORMAT:
String fmt=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setFormat(fmt);
}
break;
case FIELD_ISBOOKMARK:
boolean isBk=IOUtil.readBool(in);
if (isDrillThrough()) {
drillThrough.setBookmarkType(isBk);
}
break;
case FIELD_TARGETFILETYPE:
String tgtType=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setTargetFileType(tgtType);
}
break;
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_TYPE:
    type=IOUtil.readInt(in);
  if (type == ACTION_DRILLTHROUGH) {
    drillThrough=new DrillThroughAction();
  }
break;
case FIELD_BOOKMARK:
String bk=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setBookmark(bk);
}
 else {
bookmark=bk;
}
break;
case FIELD_HYPERLINK:
hyperlink=IOUtil.readString(in);
break;
case FIELD_REPORTNAME:
String name=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setReportName(name);
}
break;
case FIELD_PARAMETERBINDINGS:
Map bindings=IOUtil.readMap(in,loader);
if (isDrillThrough()) {
drillThrough.setParameterBindings(bindings);
}
break;
case FIELD_SEARCHCRITERIA:
Map search=IOUtil.readMap(in,loader);
if (isDrillThrough()) {
drillThrough.setSearchCriteria(search);
}
break;
case FIELD_TARGET:
String tgt=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setTargetWindow(tgt);
}
 else {
target=tgt;
}
break;
case FIELD_FORMAT:
String fmt=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setFormat(fmt);
}
break;
case FIELD_ISBOOKMARK:
boolean isBk=IOUtil.readBool(in);
if (isDrillThrough()) {
drillThrough.setBookmarkType(isBk);
}
break;
case FIELD_TARGETFILETYPE:
String tgtType=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setTargetFileType(tgtType);
}
break;
}
}",0.988108108108108
73393,"protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_TYPE:
    type=IOUtil.readInt(in);
  break;
case FIELD_TEXT:
text=IOUtil.readString(in);
break;
default :
super.readField(version,filedId,in);
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_TYPE:
    type=IOUtil.readInt(in);
  break;
case FIELD_TEXT:
text=IOUtil.readString(in);
break;
default :
super.readField(version,filedId,in,loader);
}
}",0.953405017921147
73394,"protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_ROW_SPAN:
    rowSpan=IOUtil.readInt(in);
  break;
case FIELD_COL_SPAN:
colSpan=IOUtil.readInt(in);
break;
case FIELD_COLUMN:
column=IOUtil.readInt(in);
break;
case FIELD_START_OF_GROUP:
IOUtil.readBool(in);
break;
case FIELD_DISPLAY_GROUP_ICON:
displayGroupIcon=Boolean.valueOf(IOUtil.readBool(in));
break;
default :
super.readField(version,filedId,in);
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_ROW_SPAN:
    rowSpan=IOUtil.readInt(in);
  break;
case FIELD_COL_SPAN:
colSpan=IOUtil.readInt(in);
break;
case FIELD_COLUMN:
column=IOUtil.readInt(in);
break;
case FIELD_START_OF_GROUP:
IOUtil.readBool(in);
break;
case FIELD_DISPLAY_GROUP_ICON:
displayGroupIcon=Boolean.valueOf(IOUtil.readBool(in));
break;
default :
super.readField(version,filedId,in,loader);
}
}",0.9735234215885948
73395,"public void readObject(DataInputStream in) throws IOException {
  int version=IOUtil.readInt(in);
  int filedId=IOUtil.readInt(in);
  while (filedId != FIELD_NONE) {
    readField(version,filedId,in);
    filedId=IOUtil.readInt(in);
  }
}","public void readObject(DataInputStream in,ClassLoader loader) throws IOException {
  int version=IOUtil.readInt(in);
  int filedId=IOUtil.readInt(in);
  while (filedId != FIELD_NONE) {
    readField(version,filedId,in,loader);
    filedId=IOUtil.readInt(in);
  }
}",0.9482071713147412
73396,"protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_WIDTH:
    width=new DimensionType();
  width.readObject(in);
break;
case FIELD_STYLECLASS:
styleClass=IOUtil.readString(in);
break;
case FIELD_INSTANCE_ID:
String value=IOUtil.readString(in);
instanceId=InstanceID.parse(value);
break;
case FIELD_VISIBLE_FORMAT:
visibleFormat=IOUtil.readString(in);
break;
case FIELD_INLINESTYLE:
String style=IOUtil.readString(in);
if (style != null && style.length() != 0) {
inlineStyle=new StyleDeclaration(cssEngine);
inlineStyle.setCssText(style);
}
break;
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_WIDTH:
    width=new DimensionType();
  width.readObject(in);
break;
case FIELD_STYLECLASS:
styleClass=IOUtil.readString(in);
break;
case FIELD_INSTANCE_ID:
String value=IOUtil.readString(in);
instanceId=InstanceID.parse(value);
break;
case FIELD_VISIBLE_FORMAT:
visibleFormat=IOUtil.readString(in);
break;
case FIELD_INLINESTYLE:
String style=IOUtil.readString(in);
if (style != null && style.length() != 0) {
inlineStyle=new StyleDeclaration(cssEngine);
inlineStyle.setCssText(style);
}
break;
}
}",0.984884645982498
73397,"protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_VALUE:
    value=IOUtil.readObject(in);
  break;
case FIELD_LAVELTEXT:
labelText=IOUtil.readString(in);
break;
case FIELD_LABELKEY:
labelKey=IOUtil.readString(in);
break;
case FIELD_HELPKEY:
helpKey=IOUtil.readString(in);
break;
default :
super.readField(version,filedId,in);
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_VALUE:
    value=IOUtil.readObject(in,loader);
  break;
case FIELD_LAVELTEXT:
labelText=IOUtil.readString(in);
break;
case FIELD_LABELKEY:
labelKey=IOUtil.readString(in);
break;
case FIELD_HELPKEY:
helpKey=IOUtil.readString(in);
break;
default :
super.readField(version,filedId,in,loader);
}
}",0.96028880866426
73398,"protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_RAW_TYPE:
    rawType=IOUtil.readString(in);
  break;
case FIELD_RAWVALUE:
rawValue=IOUtil.readObject(in);
if (rawType.equals(TEMPLATE_TYPE) && rawValue instanceof HashMap) {
rawValue=new Object[]{null,rawValue};
}
break;
case FIELD_ALTTEXT:
altText=IOUtil.readString(in);
break;
case FIELD_ALTTEXTKEY:
altTextKey=IOUtil.readString(in);
break;
case FIELD_RAWKEY:
rawKey=IOUtil.readString(in);
break;
default :
super.readField(version,filedId,in);
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_RAW_TYPE:
    rawType=IOUtil.readString(in);
  break;
case FIELD_RAWVALUE:
rawValue=IOUtil.readObject(in,loader);
if (rawType.equals(TEMPLATE_TYPE) && rawValue instanceof HashMap) {
rawValue=new Object[]{null,rawValue};
}
break;
case FIELD_ALTTEXT:
altText=IOUtil.readString(in);
break;
case FIELD_ALTTEXTKEY:
altTextKey=IOUtil.readString(in);
break;
case FIELD_RAWKEY:
rawKey=IOUtil.readString(in);
break;
default :
super.readField(version,filedId,in,loader);
}
}",0.9718670076726342
73399,"protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_HEADER_REPEAT:
    headerRepeat=Boolean.valueOf(IOUtil.readBool(in));
  break;
default :
super.readField(version,filedId,in);
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_HEADER_REPEAT:
    headerRepeat=Boolean.valueOf(IOUtil.readBool(in));
  break;
default :
super.readField(version,filedId,in,loader);
}
}",0.950381679389313
73400,"/** 
 */
private void getMetaUsingPolicy0(){
  java.sql.ResultSetMetaData resultmd;
  try {
    resultmd=preStat.getMetaData();
    this.cachedResultMetaData=new ResultSetMetaData(resultmd);
  }
 catch (  Throwable e) {
  }
}","/** 
 */
private void getMetaUsingPolicy0(){
  java.sql.ResultSetMetaData resultmd;
  try {
    resultmd=preStat.getMetaData();
    if (resultmd != null)     this.cachedResultMetaData=new ResultSetMetaData(resultmd);
  }
 catch (  Throwable e) {
  }
}",0.9453781512605042
73401,"/** 
 * Adds measure or row/column edge according to query expression. Besides, generates column bindings, replace them in chart queries and add them in query definition.
 */
private void bindSeriesQuery(Query query,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  String expr=query.getDefinition();
  if (expr != null && expr.length() > 0) {
    boolean bBindingExp=ChartXTabUtil.isBinding(expr,true);
    if (!ChartXTabUtil.isBinding(expr,false)) {
      expr=ExpressionUtil.createJSDataExpression(ChartXTabUtil.getBindingName(expr,true));
    }
    Binding colBinding=(Binding)registeredBindings.get(expr);
    if (bBindingExp || colBinding == null) {
      String bindingName=null;
      if (colBinding == null) {
        bindingName=StructureFactory.newComputedColumn(handle,expr.replaceAll(""String_Node_Str"",""String_Node_Str"")).getName();
        colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(new ScriptExpression(expr));
        registeredBindings.put(expr,colBinding);
        registeredQueries.put(bindingName,expr);
      }
 else {
        bindingName=colBinding.getBindingName();
        expr=(String)registeredQueries.get(bindingName);
      }
      cubeQuery.addBinding(colBinding);
      String measure=getMeasure(expr);
      if (measure != null) {
        IMeasureDefinition mDef=cubeQuery.createMeasure(measure);
        String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
        mDef.setAggrFunction(aggFun);
      }
 else       if (isReferenceToDimLevel(expr)) {
        String[] levels=getTargetLevel(expr);
        String dimensionName=levels[0];
        final int edgeType=getEdgeType(dimensionName);
        IEdgeDefinition edge=cubeQuery.getEdge(edgeType);
        IHierarchyDefinition hieDef=null;
        if (edge == null) {
          edge=cubeQuery.createEdge(edgeType);
          IDimensionDefinition dimDef=edge.createDimension(dimensionName);
          hieDef=dimDef.createHierarchy(cube.getDimension(dimDef.getName()).getDefaultHierarchy().getQualifiedName());
        }
 else {
          hieDef=(IHierarchyDefinition)((IDimensionDefinition)edge.getDimensions().get(0)).getHierarchy().get(0);
        }
        ILevelDefinition levelDef=hieDef.createLevel(levels[1]);
        registeredLevels.put(bindingName,levelDef);
        LevelHandle levelHandle=cube.getDimension(levelDef.getHierarchy().getDimension().getName()).getDefaultHierarchy().getLevel(levelDef.getName());
        registeredLevelHandles.put(levelHandle,levelDef);
      }
    }
    if (!bBindingExp) {
      String newExpr=ExpressionUtil.createJSDataExpression(colBinding.getBindingName());
      query.setDefinition(newExpr);
    }
  }
}","/** 
 * Adds measure or row/column edge according to query expression. Besides, generates column bindings, replace them in chart queries and add them in query definition.
 */
private void bindSeriesQuery(Query query,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  String expr=query.getDefinition();
  if (expr != null && expr.length() > 0) {
    boolean bBindingExp=ChartXTabUtil.isBinding(expr,true);
    if (bBindingExp && !ChartXTabUtil.isBinding(expr,false)) {
      expr=ExpressionUtil.createJSDataExpression(ChartXTabUtil.getBindingName(expr,true));
    }
    Binding colBinding=(Binding)registeredBindings.get(expr);
    if (bBindingExp || colBinding == null) {
      String bindingName=null;
      if (colBinding == null) {
        bindingName=StructureFactory.newComputedColumn(handle,expr.replaceAll(""String_Node_Str"",""String_Node_Str"")).getName();
        colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(new ScriptExpression(expr));
        registeredBindings.put(expr,colBinding);
        registeredQueries.put(bindingName,expr);
      }
 else {
        bindingName=colBinding.getBindingName();
        expr=(String)registeredQueries.get(bindingName);
      }
      cubeQuery.addBinding(colBinding);
      String measure=getMeasure(expr);
      if (measure != null) {
        IMeasureDefinition mDef=cubeQuery.createMeasure(measure);
        String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
        mDef.setAggrFunction(aggFun);
      }
 else       if (isReferenceToDimLevel(expr)) {
        String[] levels=getTargetLevel(expr);
        String dimensionName=levels[0];
        final int edgeType=getEdgeType(dimensionName);
        IEdgeDefinition edge=cubeQuery.getEdge(edgeType);
        IHierarchyDefinition hieDef=null;
        if (edge == null) {
          edge=cubeQuery.createEdge(edgeType);
          IDimensionDefinition dimDef=edge.createDimension(dimensionName);
          hieDef=dimDef.createHierarchy(cube.getDimension(dimDef.getName()).getDefaultHierarchy().getQualifiedName());
        }
 else {
          hieDef=(IHierarchyDefinition)((IDimensionDefinition)edge.getDimensions().get(0)).getHierarchy().get(0);
        }
        ILevelDefinition levelDef=hieDef.createLevel(levels[1]);
        registeredLevels.put(bindingName,levelDef);
        LevelHandle levelHandle=cube.getDimension(levelDef.getHierarchy().getDimension().getName()).getDefaultHierarchy().getLevel(levelDef.getName());
        registeredLevelHandles.put(levelHandle,levelDef);
      }
    }
    if (!bBindingExp) {
      String newExpr=ExpressionUtil.createJSDataExpression(colBinding.getBindingName());
      query.setDefinition(newExpr);
    }
  }
}",0.9973352282821104
73402,"/** 
 * Test read/writeContent() methods.
 * @throws IOException
 */
public void testContent() throws IOException {
  IReportContent rContent=new ReportContent();
  IContent content1=rContent.createContainerContent();
  IContent content2=rContent.createContainerContent();
  content1.setName(""String_Node_Str"");
  content1.setHelpText(""String_Node_Str"");
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(bos);
  ((ContainerContent)content1).setVersion(1);
  content1.writeContent(dos);
  InputStream is=new ByteArrayInputStream(bos.toByteArray());
  DataInputStream dis=new DataInputStream(is);
  ((ContainerContent)content2).setVersion(1);
  content2.readContent(dis);
  assertEquals(content1.getName(),content2.getName());
  assertEquals(content1.getHelpText(),content2.getHelpText());
}","/** 
 * Test read/writeContent() methods.
 * @throws IOException
 */
public void testContent() throws IOException {
  IReportContent rContent=new ReportContent();
  IContent content1=rContent.createContainerContent();
  IContent content2=rContent.createContainerContent();
  content1.setName(""String_Node_Str"");
  content1.setHelpText(""String_Node_Str"");
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(bos);
  ((ContainerContent)content1).setVersion(1);
  content1.writeContent(dos);
  InputStream is=new ByteArrayInputStream(bos.toByteArray());
  DataInputStream dis=new DataInputStream(is);
  ((ContainerContent)content2).setVersion(1);
  content2.readContent(dis,null);
  assertEquals(content1.getName(),content2.getName());
  assertEquals(content1.getHelpText(),content2.getHelpText());
}",0.997036158861885
73403,"/** 
 * close the executor, if the executor is closed, all sub executor will be termiante also.
 */
void close();","/** 
 * close the executor, if the executor is closed, all sub executor will be terminate also.
 */
void close();",0.991150442477876
73404,"public void submit(AbstractArea area){
  area.setAllocatedPosition(getCurrentIP(),getCurrentBP());
  setCurrentIP(getCurrentIP() + area.getAllocatedWidth());
  if (getCurrentIP() > root.getContentWidth()) {
    root.setContentWidth(getCurrentIP());
  }
  if (getCurrentBP() + area.getAllocatedHeight() > root.getContentHeight()) {
    root.setContentHeight(getCurrentBP() + area.getAllocatedHeight());
  }
  root.addChild(area);
  lineFinished=false;
}","public void submit(AbstractArea area){
  area.setAllocatedPosition(getCurrentIP(),getCurrentBP());
  setCurrentIP(getCurrentIP() + area.getAllocatedWidth());
  if (getCurrentIP() > root.getContentWidth()) {
    root.setContentWidth(getCurrentIP());
  }
  if (getCurrentBP() + area.getAllocatedHeight() > root.getContentHeight()) {
    root.setContentHeight(getCurrentBP() + area.getAllocatedHeight());
  }
  root.addChild(area);
  isEmpty=false;
  lineFinished=false;
}",0.9554831704668838
73405,"protected void initialize(){
  createRoot();
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  maxAvaHeight=parent.getCurrentMaxContentHeight();
  root.setWidth(parent.getCurrentMaxContentWidth());
  setCurrentBP(0);
  if (lineCount == 1) {
    assert(parent instanceof IBlockStackingLayoutManager);
    setCurrentIP(((PDFBlockStackingLM)parent).getTextIndent());
  }
 else {
    setCurrentIP(currentPosition);
  }
  setupMinHeight();
}","protected void initialize(){
  createRoot();
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  maxAvaHeight=parent.getCurrentMaxContentHeight();
  root.setWidth(parent.getCurrentMaxContentWidth());
  setCurrentBP(0);
  setupMinHeight();
}",0.6578171091445427
73406,"public PDFTextLM(PDFLayoutEngineContext context,PDFStackingLM parent,IContent content,IReportItemExecutor executor){
  super(context,parent,content,executor);
  lineLM=(ILineStackingLayoutManager)parent;
  ITextContent textContent=(ITextContent)content;
  String text=textContent.getText();
  if (text != null && text.length() != 0) {
    transform(textContent);
    this.textContent=textContent;
    comp=new Compositor();
  }
}","public PDFTextLM(PDFLayoutEngineContext context,PDFStackingLM parent,IContent content,IReportItemExecutor executor){
  super(context,parent,content,executor);
  lineLM=(ILineStackingLayoutManager)parent;
  ITextContent textContent=(ITextContent)content;
  lineLM.setTextIndent(textContent);
  String text=textContent.getText();
  if (text != null && text.length() != 0) {
    transform(textContent);
    this.textContent=textContent;
    comp=new Compositor();
  }
}",0.958659217877095
73407,"/** 
 * need overwrite this mothod to change default behavour. For inline leaf elements, page-break is handled by this layout manager. For block leaf elements. page-break is handled by it's block container
 */
protected boolean handlePageBreakBefore(){
  if (content != null) {
    if (PropertyUtil.isInlineElement(content)) {
      return super.handlePageBreakBefore();
    }
  }
  return false;
}","/** 
 * need overwrite this method to change default behavior. For inline leaf elements, page-break is handled by this layout manager. For block leaf elements, page-break is handled by it's block container
 */
protected boolean handlePageBreakBefore(){
  if (content != null) {
    if (PropertyUtil.isInlineElement(content)) {
      return super.handlePageBreakBefore();
    }
  }
  return false;
}",0.9899497487437184
73408,"static void handleElement(Element ele,Map cssStyles,IContent content,ActionContent action,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.BLOCK_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.MIDDLE_VALUE);
    IContainerContent container=content.getReportContent().createContainerContent();
    container.setInlineStyle(style);
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    IContainerContent orderContainer=content.getReportContent().createContainerContent();
    CSSValue fontSizeValue=content.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
    orderContainer.setWidth(new DimensionType(2.1 * PropertyUtil.getDimensionValue(fontSizeValue) / 1000.0,EngineIRConstants.UNITS_PT));
    orderContainer.setInlineStyle(style);
    addChild(container,orderContainer);
    TextContent text=(TextContent)content.getReportContent().createTextContent();
    addChild(orderContainer,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new String(new char[]{'\u2022'}));
    }
    text.setInlineStyle(style);
    IContainerContent childContainer=content.getReportContent().createContainerContent();
    addChild(container,childContainer);
    childContainer.setInlineStyle(style);
    processNodes(ele,cssStyles,childContainer,action);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(content,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action);
    }
 else {
      processNodes(ele,cssStyles,container,action);
    }
  }
 else   if (""String_Node_Str"".equals(tagName.toLowerCase())) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action);
  }
}","static void handleElement(Element ele,Map cssStyles,IContent content,ActionContent action,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.BLOCK_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.MIDDLE_VALUE);
    IContainerContent container=content.getReportContent().createContainerContent();
    container.setInlineStyle(style);
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    IContainerContent orderContainer=content.getReportContent().createContainerContent();
    CSSValue fontSizeValue=content.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
    orderContainer.setWidth(new DimensionType(2.1 * PropertyUtil.getDimensionValue(fontSizeValue) / 1000.0,EngineIRConstants.UNITS_PT));
    orderContainer.setInlineStyle(style);
    addChild(container,orderContainer);
    TextContent text=(TextContent)content.getReportContent().createTextContent();
    addChild(orderContainer,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new String(new char[]{'\u2022'}));
    }
    text.setInlineStyle(style);
    IContainerContent childContainer=content.getReportContent().createContainerContent();
    addChild(container,childContainer);
    childContainer.setInlineStyle(style);
    processNodes(ele,cssStyles,childContainer,action);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action);
    }
 else {
      processNodes(ele,cssStyles,container,action);
    }
  }
 else   if (""String_Node_Str"".equals(tagName.toLowerCase())) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action);
  }
}",0.9991146525011066
73409,"/** 
 * processes after pressing ok button
 */
private void okPressedProcess(){
  Utility.setPreferenceStoredMap(JdbcPlugin.JAR_MAP_PREFERENCE_KEY,jarMap);
  Utility.setPreferenceStoredMap(JdbcPlugin.DRIVER_MAP_PREFERENCE_KEY,driverMap);
  Iterator jarsCopyIterator=jarsToBeCopied.values().iterator();
  JDBCDriverManager manager=JDBCDriverManager.getInstance();
  JDBCDriverInformation info;
  List drivers=new ArrayList();
  while (jarsCopyIterator.hasNext()) {
    JarFile jar=(JarFile)jarsCopyIterator.next();
    jar.copyJarToODADir();
    Utility.removeMapEntryFromPreferenceStoredMap(JdbcPlugin.DELETED_JAR_MAP_PREFERENCE_KEY,jar.getFileName());
    drivers.addAll(JdbcToolKit.getDriverByJar(jar));
  }
  for (int i=0; i < drivers.size(); i++) {
    info=(JDBCDriverInformation)drivers.get(i);
    manager.updateStatus(info.getDriverClassName());
  }
  drivers.clear();
  Iterator jarsDeleteIterator=jarsToBeDeleted.values().iterator();
  while (jarsDeleteIterator.hasNext()) {
    JarFile jar=(JarFile)jarsDeleteIterator.next();
    jar.deleteJarFromODADir();
    Utility.putPreferenceStoredMapValue(JdbcPlugin.DELETED_JAR_MAP_PREFERENCE_KEY,jar.getFileName(),jar);
    drivers.addAll(JdbcToolKit.getDriverByJar(jar));
  }
  for (int i=0; i < drivers.size(); i++) {
    info=(JDBCDriverInformation)drivers.get(i);
    try {
      manager.deregisterDriver(info.getDriverClassName());
    }
 catch (    OdaException e) {
      MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"" + info.getDriverClassName());
    }
  }
  refreshDriverPage();
  super.okPressed();
}","/** 
 * processes after pressing ok button
 */
private void okPressedProcess(){
  Utility.setPreferenceStoredMap(JdbcPlugin.JAR_MAP_PREFERENCE_KEY,jarMap);
  Utility.setPreferenceStoredMap(JdbcPlugin.DRIVER_MAP_PREFERENCE_KEY,driverMap);
  Iterator jarsCopyIterator=jarsToBeCopied.values().iterator();
  JDBCDriverManager manager=JDBCDriverManager.getInstance();
  JDBCDriverInformation info;
  List drivers=new ArrayList();
  while (jarsCopyIterator.hasNext()) {
    JarFile jar=(JarFile)jarsCopyIterator.next();
    jar.copyJarToODADir();
    Utility.removeMapEntryFromPreferenceStoredMap(JdbcPlugin.DELETED_JAR_MAP_PREFERENCE_KEY,jar.getFileName());
    drivers.addAll(JdbcToolKit.getDriverByJar(jar));
  }
  for (int i=0; i < drivers.size(); i++) {
    info=(JDBCDriverInformation)drivers.get(i);
    try {
      manager.loadAndRegisterDriver(info.getDriverClassName(),null);
      manager.updateStatus(info.getDriverClassName());
    }
 catch (    OdaException e) {
      MessageDialog.openError(null,JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str"") + info.getDriverClassName());
    }
  }
  drivers.clear();
  Iterator jarsDeleteIterator=jarsToBeDeleted.values().iterator();
  while (jarsDeleteIterator.hasNext()) {
    JarFile jar=(JarFile)jarsDeleteIterator.next();
    jar.deleteJarFromODADir();
    Utility.putPreferenceStoredMapValue(JdbcPlugin.DELETED_JAR_MAP_PREFERENCE_KEY,jar.getFileName(),jar);
    drivers.addAll(JdbcToolKit.getDriverByJar(jar));
  }
  for (int i=0; i < drivers.size(); i++) {
    info=(JDBCDriverInformation)drivers.get(i);
    try {
      manager.deregisterDriver(info.getDriverClassName());
    }
 catch (    OdaException e) {
      MessageDialog.openError(null,JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str"") + info.getDriverClassName());
    }
  }
  refreshDriverPage();
  super.okPressed();
}",0.901994301994302
73410,"/** 
 */
private void getMetaUsingPolicy0(){
  java.sql.ResultSetMetaData resultmd;
  try {
    resultmd=preStat.getMetaData();
    if (resultmd != null)     this.cachedResultMetaData=new ResultSetMetaData(resultmd);
  }
 catch (  Throwable e) {
  }
}","/** 
 */
private void getMetaUsingPolicy0(){
  java.sql.ResultSetMetaData resultmd;
  try {
    resultmd=preStat.getMetaData();
    if (resultmd != null && resultmd.getColumnCount() > 0)     this.cachedResultMetaData=new ResultSetMetaData(resultmd);
  }
 catch (  Throwable e) {
  }
}",0.9383177570093458
73411,"protected void loadDesign(){
  if (runnable != null) {
    ReportDesignHandle reportDesign=executionContext.getDesign();
    Iterator iter=reportDesign.includeScriptsIterator();
    while (iter.hasNext()) {
      IncludeScriptHandle includeScript=(IncludeScriptHandle)iter.next();
      String fileName=includeScript.getFileName();
      executionContext.loadScript(fileName);
    }
    ReportScriptExecutor.handleInitialize(reportDesign,executionContext);
  }
}","protected void loadDesign(){
  if (runnable != null) {
    ReportDesignHandle reportDesign=executionContext.getDesign();
    Iterator iter=reportDesign.includeLibraryScriptsIterator();
    while (iter.hasNext()) {
      IncludeScriptHandle includeScript=(IncludeScriptHandle)iter.next();
      String fileName=includeScript.getFileName();
      executionContext.loadScript(fileName);
    }
    iter=reportDesign.includeScriptsIterator();
    while (iter.hasNext()) {
      IncludeScriptHandle includeScript=(IncludeScriptHandle)iter.next();
      String fileName=includeScript.getFileName();
      executionContext.loadScript(fileName);
    }
    ReportScriptExecutor.handleInitialize(reportDesign,executionContext);
  }
}",0.7804054054054054
73412,"/** 
 * @param itemType the type of the extended item, i.e., ""chart""
 * @return an object that extended items use to handle java event 
 */
public IReportEventHandler createEventHandler(String itemType){
  IConfigurationElement config=(IConfigurationElement)queryExtensions.get(itemType);
  if (config != null) {
    Object object=createObject(config,""String_Node_Str"");
    if (object instanceof IReportItemQuery) {
      return (IReportEventHandler)object;
    }
  }
  return null;
}","/** 
 * @param itemType the type of the extended item, i.e., ""chart""
 * @return an object that extended items use to handle java event 
 */
public IReportEventHandler createEventHandler(String itemType){
  IConfigurationElement config=(IConfigurationElement)queryExtensions.get(itemType);
  if (config != null) {
    Object object=createObject(config,""String_Node_Str"");
    if (object instanceof IReportEventHandler) {
      return (IReportEventHandler)object;
    }
  }
  return null;
}",0.9784172661870504
73413,"private ChartWithAxes createDefaultChart(String exprMeasure,String[] nameDimensions){
  ChartWithAxes cm=ChartWithAxesImpl.create();
  cm.setType(""String_Node_Str"");
  cm.setSubType(""String_Node_Str"");
  cm.setUnits(""String_Node_Str"");
  cm.setUnitSpacing(50);
  cm.getLegend().setVisible(false);
  cm.getTitle().setVisible(false);
  String exprCategory=null;
  if (nameDimensions[1] != null) {
    exprCategory=nameDimensions[1];
  }
 else   if (nameDimensions[0] != null) {
    exprCategory=nameDimensions[0];
    cm.setTransposed(true);
  }
  SeriesDefinition sdBase=SeriesDefinitionImpl.create();
  sdBase.getSeriesPalette().shift(0);
  Series series=SeriesImpl.create();
  sdBase.getSeries().add(series);
  cm.getBaseAxes()[0].getSeriesDefinitions().add(sdBase);
  if (exprCategory != null) {
    Query query=QueryImpl.create(ExpressionUtil.createJSDataExpression(exprCategory));
    series.getDataDefinition().add(query);
  }
  SeriesDefinition sdOrth=SeriesDefinitionImpl.create();
  sdOrth.getSeriesPalette().shift(0);
  series=BarSeriesImpl.create();
  sdOrth.getSeries().add(series);
  cm.getOrthogonalAxes(cm.getBaseAxes()[0],true)[0].getSeriesDefinitions().add(sdOrth);
  if (exprMeasure != null) {
    Query query=QueryImpl.create(exprMeasure);
    series.getDataDefinition().add(query);
  }
  SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
  sampleData.getBaseSampleData().clear();
  sampleData.getOrthogonalSampleData().clear();
  BaseSampleData sampleDataBase=DataFactory.eINSTANCE.createBaseSampleData();
  sampleDataBase.setDataSetRepresentation(""String_Node_Str"");
  sampleData.getBaseSampleData().add(sampleDataBase);
  OrthogonalSampleData sampleDataOrth=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sampleDataOrth.setDataSetRepresentation(""String_Node_Str"");
  sampleDataOrth.setSeriesDefinitionIndex(0);
  sampleData.getOrthogonalSampleData().add(sampleDataOrth);
  cm.setSampleData(sampleData);
  return cm;
}","private ChartWithAxes createDefaultChart(AggregationCellHandle cell){
  ChartWithAxes cm=ChartWithAxesImpl.create();
  cm.setType(""String_Node_Str"");
  cm.setSubType(""String_Node_Str"");
  cm.setUnits(""String_Node_Str"");
  cm.setUnitSpacing(50);
  cm.getLegend().setVisible(false);
  cm.getTitle().setVisible(false);
  String exprMeasure=ExpressionUtil.createJSDataExpression(ChartXTabUtil.generateComputedColumnName(cell));
  String exprCategory=null;
  if (cell.getAggregationOnColumn() == null || cell.getCrosstab().getGrandTotal(ICrosstabConstants.COLUMN_AXIS_TYPE) != null) {
    cm.setTransposed(true);
    Object content=getFirstContent(ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.ROW_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprCategory=dataItemHandle.getResultSetColumn();
    }
  }
 else {
    Object content=getFirstContent(ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.COLUMN_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprCategory=dataItemHandle.getResultSetColumn();
    }
  }
  SeriesDefinition sdBase=SeriesDefinitionImpl.create();
  sdBase.getSeriesPalette().shift(0);
  Series series=SeriesImpl.create();
  sdBase.getSeries().add(series);
  cm.getBaseAxes()[0].getSeriesDefinitions().add(sdBase);
  if (exprCategory != null) {
    Query query=QueryImpl.create(ExpressionUtil.createJSDataExpression(exprCategory));
    series.getDataDefinition().add(query);
  }
  SeriesDefinition sdOrth=SeriesDefinitionImpl.create();
  sdOrth.getSeriesPalette().shift(0);
  series=BarSeriesImpl.create();
  sdOrth.getSeries().add(series);
  cm.getOrthogonalAxes(cm.getBaseAxes()[0],true)[0].getSeriesDefinitions().add(sdOrth);
  if (exprMeasure != null) {
    Query query=QueryImpl.create(exprMeasure);
    series.getDataDefinition().add(query);
  }
  SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
  sampleData.getBaseSampleData().clear();
  sampleData.getOrthogonalSampleData().clear();
  BaseSampleData sampleDataBase=DataFactory.eINSTANCE.createBaseSampleData();
  sampleDataBase.setDataSetRepresentation(""String_Node_Str"");
  sampleData.getBaseSampleData().add(sampleDataBase);
  OrthogonalSampleData sampleDataOrth=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sampleDataOrth.setDataSetRepresentation(""String_Node_Str"");
  sampleDataOrth.setSeriesDefinitionIndex(0);
  sampleData.getOrthogonalSampleData().add(sampleDataOrth);
  cm.setSampleData(sampleData);
  return cm;
}",0.7857921115711484
73414,"public void switchView(AggregationCellHandle cell){
  try {
    Object content=getFirstContent(cell);
    String exprMeasure=ExpressionUtil.createJSDataExpression(ChartXTabUtil.generateComputedColumnName(cell));
    if (content instanceof DesignElementHandle) {
      ((DesignElementHandle)content).dropAndClear();
    }
    String nameDimRow=null;
    content=getFirstContent(ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.ROW_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      nameDimRow=dataItemHandle.getResultSetColumn();
    }
    String nameDimColumn=null;
    content=getFirstContent(ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.COLUMN_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      nameDimColumn=dataItemHandle.getResultSetColumn();
    }
    String name=ReportPlugin.getDefault().getCustomName(ChartReportItemConstants.CHART_EXTENSION_NAME);
    ExtendedItemHandle chartHandle=cell.getCrosstabHandle().getElementFactory().newExtendedItem(name,ChartReportItemConstants.CHART_EXTENSION_NAME);
    ChartReportItemImpl reportItem=(ChartReportItemImpl)chartHandle.getReportItem();
    ChartWithAxes cm=createDefaultChart(exprMeasure,new String[]{nameDimRow,nameDimColumn});
    reportItem.setModel(cm);
    cell.addContent(chartHandle,0);
    if (cm.isTransposed()) {
      ChartXTabUIUtil.addAxisChartInXTab(cell,ICrosstabConstants.ROW_AXIS_TYPE,chartHandle);
    }
 else {
      ChartXTabUIUtil.addAxisChartInXTab(cell,ICrosstabConstants.COLUMN_AXIS_TYPE,chartHandle);
    }
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
}","public void switchView(AggregationCellHandle cell){
  try {
    Object content=getFirstContent(cell);
    if (content instanceof DesignElementHandle) {
      ((DesignElementHandle)content).dropAndClear();
    }
    String name=ReportPlugin.getDefault().getCustomName(ChartReportItemConstants.CHART_EXTENSION_NAME);
    ExtendedItemHandle chartHandle=cell.getCrosstabHandle().getElementFactory().newExtendedItem(name,ChartReportItemConstants.CHART_EXTENSION_NAME);
    ChartReportItemImpl reportItem=(ChartReportItemImpl)chartHandle.getReportItem();
    ChartWithAxes cm=createDefaultChart(cell);
    reportItem.setModel(cm);
    cell.addContent(chartHandle,0);
    if (cm.isTransposed()) {
      ChartXTabUIUtil.addAxisChartInXTab(cell,ICrosstabConstants.ROW_AXIS_TYPE,chartHandle);
    }
 else {
      ChartXTabUIUtil.addAxisChartInXTab(cell,ICrosstabConstants.COLUMN_AXIS_TYPE,chartHandle);
    }
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
}",0.1722242579699523
73415,"protected void initCubeCursor() throws OLAPException {
  ICubeCursor parent=(ICubeCursor)rs.getCubeCursor();
  cubeCursor=parent;
  try {
    AggregationCellHandle cellHandle=ChartXTabUtil.getXtabContainerCell(handle);
    LevelHandle levelAggColumn=cellHandle.getAggregationOnColumn();
    LevelHandle levelAggRow=cellHandle.getAggregationOnRow();
    Chart cm=ChartReportItemUtil.getChartFromHandle(handle);
    bTransposed=((ChartWithAxes)cm).isTransposed();
    if (!bTransposed) {
      if (levelAggColumn != null && levelAggRow != null) {
        List edges=cubeCursor.getOrdinateEdge();
        this.mainEdgeCursor=(EdgeCursor)edges.get(1);
        this.subEdgeCursor=(EdgeCursor)edges.get(0);
        bSubCursor=true;
      }
 else {
        cubeCursor=parent;
      }
    }
 else     if (cellHandle.getSpanOverOnRow() != null) {
      if (levelAggColumn != null && levelAggRow != null) {
        List edges=cubeCursor.getOrdinateEdge();
        this.mainEdgeCursor=(EdgeCursor)edges.get(0);
        this.subEdgeCursor=(EdgeCursor)edges.get(1);
        bSubCursor=true;
      }
 else {
        cubeCursor=parent;
      }
    }
 else {
      cubeCursor=parent;
    }
  }
 catch (  BirtException e) {
    logger.log(e);
    cubeCursor=parent;
  }
  if (!bSubCursor) {
    List edges=cubeCursor.getOrdinateEdge();
    this.mainEdgeCursor=(EdgeCursor)edges.get(0);
    this.subEdgeCursor=null;
  }
}","protected void initCubeCursor() throws OLAPException {
  ICubeCursor parent=(ICubeCursor)rs.getCubeCursor();
  cubeCursor=parent;
  try {
    AggregationCellHandle cellHandle=ChartXTabUtil.getXtabContainerCell(handle);
    LevelHandle levelAggColumn=cellHandle.getAggregationOnColumn();
    LevelHandle levelAggRow=cellHandle.getAggregationOnRow();
    Chart cm=ChartReportItemUtil.getChartFromHandle(handle);
    bTransposed=((ChartWithAxes)cm).isTransposed();
    if (!bTransposed) {
      if (levelAggColumn != null && levelAggRow != null) {
        List edges=cubeCursor.getOrdinateEdge();
        this.mainEdgeCursor=(EdgeCursor)edges.get(1);
        this.subEdgeCursor=(EdgeCursor)edges.get(0);
        bSubCursor=true;
      }
 else {
        cubeCursor=parent;
      }
    }
 else     if (cellHandle.getSpanOverOnRow() != null) {
      if (levelAggColumn != null && levelAggRow != null) {
        List edges=cubeCursor.getOrdinateEdge();
        this.mainEdgeCursor=(EdgeCursor)edges.get(0);
        this.subEdgeCursor=(EdgeCursor)edges.get(1);
        bSubCursor=true;
      }
 else {
        cubeCursor=parent;
      }
    }
 else {
      cubeCursor=parent;
    }
  }
 catch (  BirtException e) {
    logger.log(e);
    cubeCursor=parent;
  }
  if (!bSubCursor) {
    List edges=cubeCursor.getOrdinateEdge();
    if (edges.size() == 1) {
      this.mainEdgeCursor=(EdgeCursor)edges.get(0);
    }
 else     if (edges.size() > 1) {
      this.mainEdgeCursor=(EdgeCursor)edges.get(bTransposed ? 1 : 0);
    }
    this.subEdgeCursor=null;
  }
}",0.9319336268201828
73416,"/** 
 * compares two row indexes, actually compares two rows pointed by the two row indexes
 */
public int compare(Object obj1,Object obj2){
  IResultObject row1=(IResultObject)obj1;
  IResultObject row2=(IResultObject)obj2;
  for (int i=0; i < sortKeyIndexes.length; i++) {
    int colIndex=sortKeyIndexes[i];
    String colName=sortKeyColumns[i];
    try {
      Object colObj1=null;
      Object colObj2=null;
      if (eventHandler != null) {
        colObj1=eventHandler.getValue(row1,colIndex,colName);
        colObj2=eventHandler.getValue(row2,colIndex,colName);
      }
 else {
        colObj1=row1.getFieldValue(colIndex);
        colObj2=row2.getFieldValue(colIndex);
      }
      int result=CompareUtil.compare(colObj1,colObj2);
      if (result != 0) {
        return sortAscending[i] ? result : -result;
      }
    }
 catch (    DataException e) {
    }
  }
  return 0;
}","/** 
 * compares two row indexes, actually compares two rows pointed by the two row indexes
 */
public int compare(Object obj1,Object obj2){
  IResultObject row1=(IResultObject)obj1;
  IResultObject row2=(IResultObject)obj2;
  for (int i=0; i < sortKeyIndexes.length; i++) {
    int colIndex=sortKeyIndexes[i];
    String colName=sortKeyColumns[i];
    try {
      Object colObj1=null;
      Object colObj2=null;
      if (eventHandler != null) {
        colObj1=eventHandler.getValue(row1,colIndex,colName);
        colObj2=eventHandler.getValue(row2,colIndex,colName);
      }
 else {
        colObj1=row1.getFieldValue(colIndex);
        colObj2=row2.getFieldValue(colIndex);
      }
      int result=ScriptEvalUtil.compare(colObj1,colObj2,comparators[i]);
      if (result != 0) {
        return sortAscending[i] ? result : -result;
      }
    }
 catch (    DataException e) {
    }
  }
  return 0;
}",0.9642857142857144
73417,"/** 
 * @param sortSpec
 * @return Comparator based on specified sortSpec, null indicates there isno need to do sorting
 */
private static Comparator getComparator(SortSpec sortSpec,final IEventHandler eventHandler){
  if (sortSpec == null)   return null;
  final int[] sortKeyIndexes=sortSpec.sortKeyIndexes;
  final String[] sortKeyColumns=sortSpec.sortKeyColumns;
  if (sortKeyIndexes == null || sortKeyIndexes.length == 0)   return null;
  final boolean[] sortAscending=sortSpec.sortAscending;
  Comparator comparator=new Comparator(){
    /** 
 * compares two row indexes, actually compares two rows pointed by the two row indexes
 */
    public int compare(    Object obj1,    Object obj2){
      IResultObject row1=(IResultObject)obj1;
      IResultObject row2=(IResultObject)obj2;
      for (int i=0; i < sortKeyIndexes.length; i++) {
        int colIndex=sortKeyIndexes[i];
        String colName=sortKeyColumns[i];
        try {
          Object colObj1=null;
          Object colObj2=null;
          if (eventHandler != null) {
            colObj1=eventHandler.getValue(row1,colIndex,colName);
            colObj2=eventHandler.getValue(row2,colIndex,colName);
          }
 else {
            colObj1=row1.getFieldValue(colIndex);
            colObj2=row2.getFieldValue(colIndex);
          }
          int result=CompareUtil.compare(colObj1,colObj2);
          if (result != 0) {
            return sortAscending[i] ? result : -result;
          }
        }
 catch (        DataException e) {
        }
      }
      return 0;
    }
  }
;
  return comparator;
}","/** 
 * @param sortSpec
 * @return Comparator based on specified sortSpec, null indicates there isno need to do sorting
 */
private static Comparator getComparator(SortSpec sortSpec,final IEventHandler eventHandler){
  if (sortSpec == null)   return null;
  final int[] sortKeyIndexes=sortSpec.getSortKeyIndexes();
  final String[] sortKeyColumns=sortSpec.getSortKeyColumns();
  if (sortKeyIndexes == null || sortKeyIndexes.length == 0)   return null;
  final boolean[] sortAscending=sortSpec.getSortAscending();
  final Comparator[] comparators=sortSpec.getComparator();
  Comparator comparator=new Comparator(){
    /** 
 * compares two row indexes, actually compares two rows pointed by the two row indexes
 */
    public int compare(    Object obj1,    Object obj2){
      IResultObject row1=(IResultObject)obj1;
      IResultObject row2=(IResultObject)obj2;
      for (int i=0; i < sortKeyIndexes.length; i++) {
        int colIndex=sortKeyIndexes[i];
        String colName=sortKeyColumns[i];
        try {
          Object colObj1=null;
          Object colObj2=null;
          if (eventHandler != null) {
            colObj1=eventHandler.getValue(row1,colIndex,colName);
            colObj2=eventHandler.getValue(row2,colIndex,colName);
          }
 else {
            colObj1=row1.getFieldValue(colIndex);
            colObj2=row2.getFieldValue(colIndex);
          }
          int result=ScriptEvalUtil.compare(colObj1,colObj2,comparators[i]);
          if (result != 0) {
            return sortAscending[i] ? result : -result;
          }
        }
 catch (        DataException e) {
        }
      }
      return 0;
    }
  }
;
  return comparator;
}",0.965389369592089
73418,"/** 
 * @param rsMeta
 * @return
 */
private static SortSpec getSortSpec(IResultClass rsMeta){
  int fieldCount=rsMeta.getFieldCount();
  int[] sortKeyIndexs=new int[fieldCount];
  String[] sortKeyNames=new String[fieldCount];
  boolean[] ascending=new boolean[fieldCount];
  for (int i=0; i < fieldCount; i++) {
    sortKeyIndexs[i]=i + 1;
    ascending[i]=true;
  }
  return new SortSpec(sortKeyIndexs,sortKeyNames,ascending);
}","/** 
 * @param rsMeta
 * @return
 */
private static SortSpec getSortSpec(IResultClass rsMeta){
  int fieldCount=rsMeta.getFieldCount();
  int[] sortKeyIndexs=new int[fieldCount];
  String[] sortKeyNames=new String[fieldCount];
  boolean[] ascending=new boolean[fieldCount];
  Comparator[] comparator=new Comparator[fieldCount];
  for (int i=0; i < fieldCount; i++) {
    sortKeyIndexs[i]=i + 1;
    ascending[i]=true;
  }
  return new SortSpec(sortKeyIndexs,sortKeyNames,ascending,comparator);
}",0.9297297297297298
73419,"/** 
 * @return
 */
public int length(){
  if (sortAscending != null)   return sortAscending.length;
 else   return 0;
}","/** 
 * @return
 */
public int length(){
  if (getSortAscending() != null)   return getSortAscending().length;
 else   return 0;
}",0.944
73420,"/** 
 * @param sortKeyIndexes
 * @param sortKeyColumns
 * @param sortAscending
 */
public SortSpec(int[] sortKeyIndexes,String[] sortKeyColumns,boolean[] sortAscending){
  this.sortKeyIndexes=sortKeyIndexes;
  this.sortKeyColumns=sortKeyColumns;
  this.sortAscending=sortAscending;
}","/** 
 * @param sortKeyIndexes
 * @param sortKeyColumns
 * @param sortAscending
 */
public SortSpec(int[] sortKeyIndexes,String[] sortKeyColumns,boolean[] sortAscending,Comparator[] comparator){
  this.setSortKeyIndexes(sortKeyIndexes);
  this.setSortKeyColumns(sortKeyColumns);
  this.setSortAscending(sortAscending);
  this.setComparator(comparator);
}",0.7955974842767296
73421,"/** 
 * @param stopSign
 * @throws DataException
 */
private void doRowSorting(StopSign stopSign) throws DataException {
  this.populator.getQuery().setOrdering(this.cachedSort);
  if (this.populator.getGroupProcessorManager().getGroupCalculationUtil().getSortSpec() != null && this.populator.getGroupProcessorManager().getGroupCalculationUtil().getSortSpec().length() > 0) {
    PassUtil.pass(this.populator,new OdiResultSetWrapper(populator.getResultIterator()),true,stopSign);
    this.groupingDone=true;
  }
}","/** 
 * @param stopSign
 * @throws DataException
 */
private void doRowSorting(StopSign stopSign) throws DataException {
  this.populator.getQuery().setOrdering(this.cachedSort);
  SortSpec spec=this.populator.getGroupProcessorManager().getGroupCalculationUtil().getSortSpec();
  if (spec != null && spec.length() > 0) {
    PassUtil.pass(this.populator,new OdiResultSetWrapper(populator.getResultIterator()),true,stopSign);
    this.groupingDone=true;
  }
}",0.7229660144181257
73422,"private static String toString_SortDefinition(Object source){
  SortDefinition sort=(SortDefinition)source;
  StringBuffer stringBuffer=new StringBuffer(""String_Node_Str"");
  if (!isEmpty(sort.getColumn()))   stringBuffer.append(""String_Node_Str"" + sort.getColumn() + ""String_Node_Str"");
  if (!isEmpty(sort.getExpression()))   stringBuffer.append(""String_Node_Str"" + sort.getExpression() + ""String_Node_Str"");
  stringBuffer.append(""String_Node_Str"" + sort.getSortDirection() + ""String_Node_Str"");
  return stringBuffer.toString();
}","private static String toString_SortDefinition(Object source){
  SortDefinition sort=(SortDefinition)source;
  StringBuffer stringBuffer=new StringBuffer(""String_Node_Str"");
  if (!isEmpty(sort.getColumn()))   stringBuffer.append(""String_Node_Str"" + sort.getColumn() + ""String_Node_Str"");
  if (!isEmpty(sort.getExpression()))   stringBuffer.append(""String_Node_Str"" + sort.getExpression() + ""String_Node_Str"");
  stringBuffer.append(""String_Node_Str"" + sort.getSortDirection() + ""String_Node_Str"");
  stringBuffer.append(""String_Node_Str"" + sort.getSortStrength() + ""String_Node_Str"");
  return stringBuffer.toString();
}",0.8744588744588745
73423,"/** 
 * Populate the sortings in a query.
 * @throws DataException
 */
private void populateSorting() throws DataException {
  List sorts=this.baseQueryDefn.getSorts();
  if (sorts != null && !sorts.isEmpty()) {
    IQuery.SortSpec[] sortSpecs=new IQuery.SortSpec[sorts.size()];
    Iterator it=sorts.iterator();
    for (int i=0; it.hasNext(); i++) {
      ISortDefinition src=(ISortDefinition)it.next();
      int sortIndex=-1;
      String sortKey=src.getColumn();
      if (sortKey == null)       sortKey=src.getExpression().getText();
 else {
        sortKey=getColumnRefExpression(sortKey);
      }
      temporaryComputedColumns.add(new ComputedColumn(""String_Node_Str"" + i + ""String_Node_Str"",sortKey,DataType.ANY_TYPE));
      sortIndex=-1;
      sortKey=String.valueOf(""String_Node_Str"" + i + ""String_Node_Str"");
      IQuery.SortSpec dest=new IQuery.SortSpec(sortIndex,sortKey,src.getSortDirection() == ISortDefinition.SORT_ASC);
      sortSpecs[i]=dest;
    }
    odiQuery.setOrdering(Arrays.asList(sortSpecs));
  }
}","/** 
 * Populate the sortings in a query.
 * @throws DataException
 */
private void populateSorting() throws DataException {
  List sorts=this.baseQueryDefn.getSorts();
  if (sorts != null && !sorts.isEmpty()) {
    IQuery.SortSpec[] sortSpecs=new IQuery.SortSpec[sorts.size()];
    Iterator it=sorts.iterator();
    for (int i=0; it.hasNext(); i++) {
      ISortDefinition src=(ISortDefinition)it.next();
      int sortIndex=-1;
      String sortKey=src.getColumn();
      if (sortKey == null)       sortKey=src.getExpression().getText();
 else {
        sortKey=getColumnRefExpression(sortKey);
      }
      temporaryComputedColumns.add(new ComputedColumn(""String_Node_Str"" + i + ""String_Node_Str"",sortKey,DataType.ANY_TYPE));
      sortIndex=-1;
      sortKey=String.valueOf(""String_Node_Str"" + i + ""String_Node_Str"");
      IQuery.SortSpec dest=new IQuery.SortSpec(sortIndex,sortKey,src.getSortDirection() == ISortDefinition.SORT_ASC,src.getSortStrength() == -1 ? null : Collator.getInstance());
      sortSpecs[i]=dest;
    }
    odiQuery.setOrdering(Arrays.asList(sortSpecs));
  }
}",0.9716713881019832
73424,"/** 
 * Convert IGroupDefn to IQuery.GroupSpec
 * @param cx
 * @param src
 * @return
 * @throws DataException
 */
static IQuery.GroupSpec groupDefnToSpec(Context cx,IGroupDefinition src,String expr,String columnName,int index) throws DataException {
  ColumnInfo groupKeyInfo=new ColumnInfo(index,columnName);
  int groupIndex=groupKeyInfo.getColumnIndex();
  String groupKey=groupKeyInfo.getColumnName();
  boolean isComplexExpression=true;
  IQuery.GroupSpec dest=new IQuery.GroupSpec(groupIndex,groupKey);
  dest.setName(src.getName());
  dest.setInterval(src.getInterval());
  dest.setIntervalRange(src.getIntervalRange());
  dest.setIntervalStart(src.getIntervalStart());
  dest.setSortDirection(src.getSortDirection() != ISortDefinition.SORT_DESC ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
  dest.setFilters(src.getFilters());
  if (src.getSorts().size() != 0) {
    dest.setSorts(src.getSorts());
  }
  dest.setIsComplexExpression(isComplexExpression);
  return dest;
}","/** 
 * Convert IGroupDefn to IQuery.GroupSpec
 * @param cx
 * @param src
 * @return
 * @throws DataException
 */
static IQuery.GroupSpec groupDefnToSpec(Context cx,IGroupDefinition src,String expr,String columnName,int index) throws DataException {
  ColumnInfo groupKeyInfo=new ColumnInfo(index,columnName);
  int groupIndex=groupKeyInfo.getColumnIndex();
  String groupKey=groupKeyInfo.getColumnName();
  boolean isComplexExpression=true;
  IQuery.GroupSpec dest=new IQuery.GroupSpec(groupIndex,groupKey);
  dest.setName(src.getName());
  dest.setInterval(src.getInterval());
  dest.setIntervalRange(src.getIntervalRange());
  dest.setIntervalStart(src.getIntervalStart());
  dest.setSortDirection(src.getSortDirection());
  dest.setFilters(src.getFilters());
  if (src.getSorts().size() != 0) {
    dest.setSorts(src.getSorts());
  }
  dest.setIsComplexExpression(isComplexExpression);
  return dest;
}",0.7710970464135021
73425,"/** 
 * @param inputStream
 * @return
 * @throws DataException 
 */
static List loadGroupDefn(InputStream inputStream,IBaseQueryDefinition parent,int version) throws DataException {
  List groupList=new ArrayList();
  DataInputStream dis=new DataInputStream(inputStream);
  try {
    int size=IOUtil.readInt(inputStream);
    for (int i=0; i < size; i++) {
      GroupDefinition groupDefn=new GroupDefinition(IOUtil.readString(dis));
      String keyColumn=IOUtil.readString(dis);
      String keyExpr=IOUtil.readString(dis);
      if (keyColumn != null)       groupDefn.setKeyColumn(keyColumn);
 else       groupDefn.setKeyExpression(keyExpr);
      groupDefn.setInterval(IOUtil.readInt(dis));
      groupDefn.setIntervalRange(IOUtil.readDouble(dis));
      groupDefn.setSortDirection(IOUtil.readInt(dis));
      groupDefn.getFilters().addAll(FilterDefnUtil.loadFilterDefn(dis));
      groupDefn.getSorts().addAll(QueryDefnIOUtil.loadSorts(dis));
      groupDefn.getSubqueries().addAll(QueryDefnIOUtil.loadSubQuery(dis,parent,version));
      groupList.add(groupDefn);
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e);
  }
  return groupList;
}","/** 
 * @param inputStream
 * @return
 * @throws DataException 
 */
static List loadGroupDefn(InputStream inputStream,IBaseQueryDefinition parent,int version) throws DataException {
  List groupList=new ArrayList();
  DataInputStream dis=new DataInputStream(inputStream);
  try {
    int size=IOUtil.readInt(inputStream);
    for (int i=0; i < size; i++) {
      GroupDefinition groupDefn=new GroupDefinition(IOUtil.readString(dis));
      String keyColumn=IOUtil.readString(dis);
      String keyExpr=IOUtil.readString(dis);
      if (keyColumn != null)       groupDefn.setKeyColumn(keyColumn);
 else       groupDefn.setKeyExpression(keyExpr);
      groupDefn.setInterval(IOUtil.readInt(dis));
      groupDefn.setIntervalRange(IOUtil.readDouble(dis));
      groupDefn.setSortDirection(IOUtil.readInt(dis));
      groupDefn.getFilters().addAll(FilterDefnUtil.loadFilterDefn(dis));
      groupDefn.getSorts().addAll(QueryDefnIOUtil.loadSorts(dis,version));
      groupDefn.getSubqueries().addAll(QueryDefnIOUtil.loadSubQuery(dis,parent,version));
      groupList.add(groupDefn);
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e);
  }
  return groupList;
}",0.9966666666666668
73426,"/** 
 * @param outputStream
 * @param filterList
 * @throws DataException
 */
static void saveGroupDefn(OutputStream outputStream,List groupList,int version) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  int size=groupList == null ? 0 : groupList.size();
  try {
    IOUtil.writeInt(dos,size);
    for (int i=0; i < size; i++) {
      IGroupDefinition groupDefn=(IGroupDefinition)groupList.get(i);
      IOUtil.writeString(dos,groupDefn.getName());
      IOUtil.writeString(dos,groupDefn.getKeyColumn());
      IOUtil.writeString(dos,groupDefn.getKeyExpression());
      IOUtil.writeInt(dos,groupDefn.getInterval());
      IOUtil.writeDouble(dos,groupDefn.getIntervalRange());
      IOUtil.writeInt(dos,groupDefn.getSortDirection());
      FilterDefnUtil.saveFilterDefn(dos,groupDefn.getFilters());
      QueryDefnIOUtil.saveSorts(dos,groupDefn.getSorts());
      QueryDefnIOUtil.saveSubQuery(dos,groupDefn.getSubqueries(),version);
    }
    dos.flush();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * @param outputStream
 * @param filterList
 * @throws DataException
 */
static void saveGroupDefn(OutputStream outputStream,List groupList,int version) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  int size=groupList == null ? 0 : groupList.size();
  try {
    IOUtil.writeInt(dos,size);
    for (int i=0; i < size; i++) {
      IGroupDefinition groupDefn=(IGroupDefinition)groupList.get(i);
      IOUtil.writeString(dos,groupDefn.getName());
      IOUtil.writeString(dos,groupDefn.getKeyColumn());
      IOUtil.writeString(dos,groupDefn.getKeyExpression());
      IOUtil.writeInt(dos,groupDefn.getInterval());
      IOUtil.writeDouble(dos,groupDefn.getIntervalRange());
      IOUtil.writeInt(dos,groupDefn.getSortDirection());
      FilterDefnUtil.saveFilterDefn(dos,groupDefn.getFilters());
      QueryDefnIOUtil.saveSorts(dos,groupDefn.getSorts(),version);
      QueryDefnIOUtil.saveSubQuery(dos,groupDefn.getSubqueries(),version);
    }
    dos.flush();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9963570127504554
73427,"/** 
 * @param context
 * @param queryResultID
 * @param resultMetaData
 * @param subQueryName
 * @param currParentIndex
 */
QueryResults(String tempDir,DataEngineContext context,String baseResultID,String queryResultID,IResultMetaData resultMetaData,String subQueryName,int currParentIndex){
}","/** 
 * @param context
 * @param queryResultID
 * @param resultMetaData
 * @param subQueryName
 * @param currParentIndex
 */
QueryResults(String tempDir,DataEngineContext context,String baseResultID,String queryResultID,IResultMetaData resultMetaData,String subQueryName,int currParentIndex,IBaseQueryResults parentQueryResults){
}",0.9408
73428,"public IResultIterator getSecondaryIterator(String subQueryName,Scriptable scope) throws DataException {
  String parentQueryResultsID=null;
  if (this.subQueryName == null) {
    parentQueryResultsID=queryResultID;
  }
 else {
    parentQueryResultsID=queryResultID + ""String_Node_Str"" + this.subQueryName+ ""String_Node_Str""+ this.subQueryIndex;
  }
  QueryResults queryResults=null;
  try {
    queryResults=new QueryResults(tempDir,context,queryResultID,parentQueryResultsID,this.getResultMetaData(),subQueryName,this.exprResultSet.getCurrentIndex());
  }
 catch (  Exception e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  try {
    ResultIterator ri=(ResultIterator)queryResults.getResultIterator();
    ri.setSubQueryName(subQueryName);
    return ri;
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
}","public IResultIterator getSecondaryIterator(String subQueryName,Scriptable scope) throws DataException {
  String parentQueryResultsID=null;
  if (this.subQueryName == null) {
    parentQueryResultsID=queryResultID;
  }
 else {
    parentQueryResultsID=queryResultID + ""String_Node_Str"" + this.subQueryName+ ""String_Node_Str""+ this.subQueryIndex;
  }
  QueryResults queryResults=null;
  try {
    queryResults=new QueryResults(tempDir,context,queryResultID,parentQueryResultsID,this.getResultMetaData(),subQueryName,this.exprResultSet.getCurrentIndex(),this.queryResults);
  }
 catch (  Exception e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  try {
    ResultIterator ri=(ResultIterator)queryResults.getResultIterator();
    ri.setSubQueryName(subQueryName);
    return ri;
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
}",0.990343347639485
73429,"protected IBaseResultSet doExecuteQuery(IBaseResultSet parentResult,IQueryDefinition query,boolean useCache) throws BirtException {
  String queryID=(String)queryIDMap.get(query);
  String resultSetID=loadResultSetID(parentResult,queryID);
  if (resultSetID == null) {
    throw new EngineException(""String_Node_Str"" + queryID);
  }
  IBaseQueryResults queryResults=dteSession.getQueryResults(resultSetID);
  QueryResultSet resultSet=null;
  if (parentResult == null) {
    resultSet=new QueryResultSet(this,context,query,(IQueryResults)queryResults);
  }
 else {
    resultSet=new QueryResultSet(this,context,parentResult,query,(IQueryResults)queryResults);
  }
  return resultSet;
}","protected IBaseResultSet doExecuteQuery(IBaseResultSet parentResult,IQueryDefinition query,boolean useCache) throws BirtException {
  String queryID=(String)queryIDMap.get(query);
  String resultSetID=loadResultSetID(parentResult,queryID);
  if (resultSetID == null) {
    throw new EngineException(""String_Node_Str"" + queryID);
  }
  ((QueryDefinition)query).setQueryResultsID(resultSetID);
  IPreparedQuery pq=dteSession.prepare(query);
  IBaseQueryResults queryResults=pq.execute(parentResult == null ? null : parentResult.getQueryResults(),context.getScope());
  QueryResultSet resultSet=null;
  if (parentResult == null) {
    resultSet=new QueryResultSet(this,context,query,(IQueryResults)queryResults);
  }
 else {
    resultSet=new QueryResultSet(this,context,parentResult,query,(IQueryResults)queryResults);
  }
  return resultSet;
}",0.8689384010484927
73430,"protected void okPressed(){
  expression=sourceViewer.getTextWidget().getText().trim();
  super.okPressed();
}","protected void okPressed(){
  if (!validateScript()) {
    MessageDialog dialog=new MessageDialog(getShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.WARNING,new String[]{IDialogConstants.OK_LABEL,IDialogConstants.CANCEL_LABEL},1);
    if (dialog.open() != 0) {
      return;
    }
  }
  expression=sourceViewer.getTextWidget().getText().trim();
  super.okPressed();
}",0.4135338345864661
73431,"/** 
 * get the sub cube query result from the current query.
 * @param parent
 * @param query
 * @return
 * @throws BirtException
 */
protected IBaseResultSet doExecuteSubCubeQuery(ICubeResultSet parent,ISubCubeQueryDefinition query) throws BirtException {
  Scriptable scope=context.getSharedScope();
  IBasePreparedQuery pQuery=(IBasePreparedQuery)queryMap.get(query);
  if (pQuery == null) {
    throw new EngineException(""String_Node_Str"" + query);
  }
  ICubeQueryResults dteResults=(ICubeQueryResults)dteSession.execute(pQuery,parent.getQueryResults(),scope);
  IBaseResultSet resultSet=new CubeResultSet(this,context,parent,query,(ICubeQueryResults)dteResults);
  return resultSet;
}","/** 
 * get the sub cube query result from the current query.
 * @param parent
 * @param query
 * @return
 * @throws BirtException
 */
protected IBaseResultSet doExecuteSubCubeQuery(ICubeResultSet parent,ISubCubeQueryDefinition query) throws BirtException {
  Scriptable scope=context.getSharedScope();
  IBasePreparedQuery pQuery=dteSession.prepare(query,appContext);
  ICubeQueryResults dteResults=(ICubeQueryResults)dteSession.execute(pQuery,parent.getQueryResults(),scope);
  IBaseResultSet resultSet=new CubeResultSet(this,context,parent,query,(ICubeQueryResults)dteResults);
  return resultSet;
}",0.5460170146945089
73432,"/** 
 * Gets the parameter
 * @param params
 * @return
 */
private boolean getParameterValues(List params){
  if (params != null && params.size() > 0) {
    InputParameterDialog dialog=new InputParameterDialog(DebugUI.getShell(),params,paramValues);
    if (dialog.open() == Window.OK) {
      paramValues=dialog.getParameters();
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return true;
  }
}","/** 
 * Gets the parameter
 * @param params
 * @return
 */
private static boolean getParameterValues(List params,Map paramValues){
  if (params != null && params.size() > 0) {
    InputParameterDialog dialog=new InputParameterDialog(DebugUI.getShell(),params,paramValues);
    if (dialog.open() == Window.OK) {
      paramValues.clear();
      paramValues.putAll(dialog.getParameters());
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return true;
  }
}",0.9336283185840708
73433,"protected static int findFreePort(){
  ServerSocket socket=null;
  try {
    socket=new ServerSocket(0);
    return socket.getLocalPort();
  }
 catch (  IOException e) {
  }
 finally {
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return -1;
}","private static int findFreePort(){
  ServerSocket socket=null;
  try {
    socket=new ServerSocket(0);
    return socket.getLocalPort();
  }
 catch (  IOException e) {
  }
 finally {
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return -1;
}",0.9810725552050472
73434,"void init(ILaunchConfiguration configuration){
  engineConfig=new LauncherEngineConfig();
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  configEngine();
  try {
    fileName=covertVariables(configuration.getAttribute(ATTR_REPORT_FILE_NAME,""String_Node_Str""));
    engineHome=covertVariables(configuration.getAttribute(ATTR_ENGINE_HOME,""String_Node_Str""));
    tempFolder=covertVariables(configuration.getAttribute(ATTR_TEMP_FOLDER,""String_Node_Str""));
    useDefaultEngineHome=configuration.getAttribute(ATTR_USE_DEFULT_ENGINE_HOME,true);
    targetFormat=configuration.getAttribute(ATTR_TARGET_FORMAT,DEFAULT_TARGET_FORMAT);
    isOpenTargetFile=configuration.getAttribute(ATTR_OPEN_TARGET,false);
    debugType=configuration.getAttribute(ATTR_DEBUG_TYPE,DEFAULT_DEBUG_TYPE);
    taskType=configuration.getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}","void init(ILaunchConfiguration configuration) throws CoreException {
  fileName=covertVariables(configuration.getAttribute(ATTR_REPORT_FILE_NAME,""String_Node_Str""));
  engineHome=covertVariables(configuration.getAttribute(ATTR_ENGINE_HOME,""String_Node_Str""));
  tempFolder=covertVariables(configuration.getAttribute(ATTR_TEMP_FOLDER,""String_Node_Str""));
  useDefaultEngineHome=configuration.getAttribute(ATTR_USE_DEFULT_ENGINE_HOME,true);
  targetFormat=configuration.getAttribute(ATTR_TARGET_FORMAT,DEFAULT_TARGET_FORMAT);
  isOpenTargetFile=configuration.getAttribute(ATTR_OPEN_TARGET,false);
  debugType=configuration.getAttribute(ATTR_DEBUG_TYPE,DEFAULT_DEBUG_TYPE);
  taskType=configuration.getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE);
}",0.7270754205100379
73435,"private String convertClassPath(String[] cp){
  int pathCount=0;
  StringBuffer buf=new StringBuffer();
  if (cp == null || cp.length == 0) {
    return ""String_Node_Str"";
  }
  for (int i=0; i < cp.length; i++) {
    if (pathCount > 0) {
      buf.append(File.pathSeparator);
    }
    buf.append(cp[i]);
    pathCount++;
  }
  return buf.toString();
}","private static String convertClassPath(String[] cp){
  int pathCount=0;
  StringBuffer buf=new StringBuffer();
  if (cp == null || cp.length == 0) {
    return ""String_Node_Str"";
  }
  for (int i=0; i < cp.length; i++) {
    if (pathCount > 0) {
      buf.append(File.pathSeparator);
    }
    buf.append(cp[i]);
    pathCount++;
  }
  return buf.toString();
}",0.9901823281907434
73436,"private List getInputParameters(String reportDesignFile){
  try {
    IGetParameterDefinitionTask task;
    if (taskType == TASK_TYPE_RENDER) {
      task=engine.createGetParameterDefinitionTask(engine.openReportDocument(reportDesignFile).getReportRunnable());
    }
 else {
      task=engine.createGetParameterDefinitionTask(engine.openReportDesign(reportDesignFile));
    }
    ParameterFactory factory=new ParameterFactory(task);
    List parameters=factory.getRootChildren();
    task.close();
    task=null;
    return parameters;
  }
 catch (  EngineException e) {
  }
  return null;
}","private static List getInputParameters(String reportDesignFile,int taskType,IReportEngine engine){
  IGetParameterDefinitionTask task=null;
  try {
    if (taskType == TASK_TYPE_RENDER) {
      task=engine.createGetParameterDefinitionTask(engine.openReportDocument(reportDesignFile).getReportRunnable());
    }
 else {
      task=engine.createGetParameterDefinitionTask(engine.openReportDesign(reportDesignFile));
    }
    ParameterFactory factory=new ParameterFactory(task);
    List parameters=factory.getRootChildren();
    task.close();
    task=null;
    return parameters;
  }
 catch (  EngineException e) {
    if (task != null) {
      task.close();
    }
  }
  return null;
}",0.8887147335423198
73437,"public void run(){
  result[0]=new Boolean(getParameterValues(getInputParameters(fileName)));
}","public void run(){
  result[0]=new Boolean(getParameterValues(getInputParameters(fileName,taskType,engine),paramValues));
}",0.8715596330275229
73438,"private void configEngine(){
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler(){
    public String getURL(    IAction actionDefn,    Object context){
      if (actionDefn.getType() == IAction.ACTION_DRILLTHROUGH)       return ""String_Node_Str"" + URLEncoder.encode(super.getURL(actionDefn,context));
      return super.getURL(actionDefn,context);
    }
  }
);
  engineConfig.getEmitterConfigs().put(RenderOption.OUTPUT_FORMAT_HTML,emitterConfig);
}","private static void configEngine(EngineConfig engineConfig){
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler(){
    public String getURL(    IAction actionDefn,    Object context){
      if (actionDefn.getType() == IAction.ACTION_DRILLTHROUGH)       return ""String_Node_Str"" + URLEncoder.encode(super.getURL(actionDefn,context));
      return super.getURL(actionDefn,context);
    }
  }
);
  engineConfig.getEmitterConfigs().put(RenderOption.OUTPUT_FORMAT_HTML,emitterConfig);
}",0.9695817490494296
73439,"private String[] getUserClasspath(ILaunchConfiguration configuration){
  try {
    ScriptDebugClasspathProvider provider=new ScriptDebugClasspathProvider();
    IRuntimeClasspathEntry[] entries=provider.computeUserClasspath(configuration);
    entries=JavaRuntime.resolveRuntimeClasspath(entries,configuration);
    List userEntries=new ArrayList();
    Set set=new HashSet(entries.length);
    for (int i=0; i < entries.length; i++) {
      if (entries[i].getClasspathProperty() == IRuntimeClasspathEntry.USER_CLASSES) {
        String location=entries[i].getLocation();
        if (location != null) {
          if (!set.contains(location)) {
            userEntries.add(location);
            set.add(location);
          }
        }
      }
    }
    return (String[])userEntries.toArray(new String[userEntries.size()]);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  return null;
}","private static String[] getUserClasspath(ILaunchConfiguration configuration){
  try {
    ScriptDebugClasspathProvider provider=new ScriptDebugClasspathProvider();
    IRuntimeClasspathEntry[] entries=provider.computeUserClasspath(configuration);
    entries=JavaRuntime.resolveRuntimeClasspath(entries,configuration);
    List userEntries=new ArrayList();
    Set set=new HashSet(entries.length);
    for (int i=0; i < entries.length; i++) {
      if (entries[i].getClasspathProperty() == IRuntimeClasspathEntry.USER_CLASSES) {
        String location=entries[i].getLocation();
        if (location != null) {
          if (!set.contains(location)) {
            userEntries.add(location);
            set.add(location);
          }
        }
      }
    }
    return (String[])userEntries.toArray(new String[userEntries.size()]);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  return null;
}",0.996138996138996
73440,"private String covertVariables(String str){
  try {
    return ScriptDebugUtil.getSubstitutedString(str);
  }
 catch (  CoreException e) {
    return str;
  }
}","private static String covertVariables(String str){
  try {
    return ScriptDebugUtil.getSubstitutedString(str);
  }
 catch (  CoreException e) {
    return str;
  }
}",0.9785932721712538
73441,"boolean finalLaunchCheck(final ILaunchConfiguration configuration,String mode,IProgressMonitor monitor) throws CoreException {
  if (engine == null) {
    init(configuration);
  }
  Display display=DebugUI.getStandardDisplay();
  if (display.getThread().equals(Thread.currentThread())) {
    return getParameterValues(getInputParameters(fileName));
  }
  final Object[] result=new Object[]{Boolean.FALSE};
  Runnable r=new Runnable(){
    public void run(){
      result[0]=new Boolean(getParameterValues(getInputParameters(fileName)));
    }
  }
;
  DebugUI.getStandardDisplay().syncExec(r);
  return ((Boolean)result[0]).booleanValue();
}","boolean finalLaunchCheck(final ILaunchConfiguration configuration,String mode,IProgressMonitor monitor) throws CoreException {
  paramValues=new HashMap();
  LauncherEngineConfig engineConfig=new LauncherEngineConfig();
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  final IReportEngine engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  configEngine(engineConfig);
  final String fileName=covertVariables(configuration.getAttribute(ATTR_REPORT_FILE_NAME,""String_Node_Str""));
  final int taskType=configuration.getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE);
  Display display=DebugUI.getStandardDisplay();
  if (display.getThread().equals(Thread.currentThread())) {
    return getParameterValues(getInputParameters(fileName,taskType,engine),paramValues);
  }
  final Object[] result=new Object[]{Boolean.FALSE};
  Runnable r=new Runnable(){
    public void run(){
      result[0]=new Boolean(getParameterValues(getInputParameters(fileName,taskType,engine),paramValues));
    }
  }
;
  DebugUI.getStandardDisplay().syncExec(r);
  return ((Boolean)result[0]).booleanValue();
}",0.6388738494856524
73442,"/** 
 * Read a Map from an input stream
 * @param dos
 * @return
 * @throws IOException
 * @throws BirtException
 */
public final static Map readMap(DataInputStream dis) throws IOException {
  if (readInt(dis) == TYPE_NULL)   return null;
  Map dataMap=new HashMap();
  int size=readInt(dis);
  if (size == 0)   return dataMap;
  for (int i=0; i < size; i++) {
    Object key=readObject(dis);
    Object value=readObject(dis);
    dataMap.put(key,value);
  }
  return dataMap;
}","/** 
 * Read a Map from an input stream
 * @param dos
 * @return
 * @throws IOException
 * @throws BirtException
 */
public final static Map readMap(DataInputStream dis,ClassLoader loader) throws IOException {
  if (readInt(dis) == TYPE_NULL)   return null;
  Map dataMap=new HashMap();
  int size=readInt(dis);
  if (size == 0)   return dataMap;
  for (int i=0; i < size; i++) {
    Object key=readObject(dis,loader);
    Object value=readObject(dis,loader);
    dataMap.put(key,value);
  }
  return dataMap;
}",0.9666329625884732
73443,"/** 
 * Read a list from an input stream
 * @param dos
 * @return
 * @throws IOException
 * @throws BirtException
 */
public final static List readList(DataInputStream dis) throws IOException {
  if (readInt(dis) == TYPE_NULL)   return null;
  List dataList=new ArrayList();
  int size=readInt(dis);
  if (size == 0)   return dataList;
  for (int i=0; i < size; i++)   dataList.add(readObject(dis));
  return dataList;
}","/** 
 * Read a list from an input stream
 * @param dos
 * @return
 * @throws IOException
 * @throws BirtException
 */
public final static List readList(DataInputStream dis,ClassLoader classLoader) throws IOException {
  if (readInt(dis) == TYPE_NULL)   return null;
  List dataList=new ArrayList();
  int size=readInt(dis);
  if (size == 0)   return dataList;
  for (int i=0; i < size; i++)   dataList.add(readObject(dis,classLoader));
  return dataList;
}",0.958904109589041
73444,"/** 
 * Currently these data types are supported. Integer Float Double BigDecimal Date Time Timestamp Boolean String byte[] List Map
 * @return
 * @throws IOException
 */
public final static Object readObject(DataInputStream dis) throws IOException {
}","/** 
 * Currently these data types are supported. Integer Float Double BigDecimal Date Time Timestamp Boolean String byte[] List Map
 * @return
 * @throws IOException
 */
public final static Object readObject(DataInputStream dis,ClassLoader classLoader) throws IOException {
}",0.9545454545454546
73445,"public void testParameterWithDataSet() throws SemanticException, EngineException {
  IReportRunnable report=engine.openReportDesign(REPORT_DESIGN);
  ReportDesignHandle design=(ReportDesignHandle)report.getDesignHandle().getModuleHandle();
  ScalarParameterHandle parameter1=(ScalarParameterHandle)design.findParameter(""String_Node_Str"");
  parameter1.setDataSetName(""String_Node_Str"");
  ScalarParameterHandle parameter2=(ScalarParameterHandle)design.findParameter(""String_Node_Str"");
  parameter2.setDataSetName(""String_Node_Str"");
  GetParameterDefinitionTask task=new GetParameterDefinitionTask(engine,report);
  Collection list=task.getSelectionListForCascadingGroup(""String_Node_Str"",new Object[0]);
  Object[] content=list.toArray();
  assertEquals(""String_Node_Str"",(SelectionChoiceUtil.getValue(content[0])));
  list=task.getSelectionListForCascadingGroup(""String_Node_Str"",new Object[]{""String_Node_Str""});
  content=list.toArray();
  assertEquals(""String_Node_Str"",(SelectionChoiceUtil.getValue(content[0])));
}","public void testParameterWithDataSet() throws SemanticException, EngineException {
  IReportRunnable report=engine.openReportDesign(REPORT_DESIGN);
  ReportDesignHandle design=(ReportDesignHandle)report.getDesignHandle().getModuleHandle();
  ScalarParameterHandle parameter1=(ScalarParameterHandle)design.findParameter(""String_Node_Str"");
  parameter1.setDataSetName(""String_Node_Str"");
  ScalarParameterHandle parameter2=(ScalarParameterHandle)design.findParameter(""String_Node_Str"");
  parameter2.setDataSetName(""String_Node_Str"");
  IGetParameterDefinitionTask task=engine.createGetParameterDefinitionTask(report);
  Collection list=task.getSelectionListForCascadingGroup(""String_Node_Str"",new Object[0]);
  Object[] content=list.toArray();
  assertEquals(""String_Node_Str"",(SelectionChoiceUtil.getValue(content[0])));
  list=task.getSelectionListForCascadingGroup(""String_Node_Str"",new Object[]{""String_Node_Str""});
  content=list.toArray();
  assertEquals(""String_Node_Str"",(SelectionChoiceUtil.getValue(content[0])));
}",0.9877870053737176
73446,"protected void checkFindTOCByName(ReportDocumentReader document){
  TOCNode root=document.findTOC(""String_Node_Str"");
  assertTrue(root != null);
  List tocs=(List)document.findTOCByName(""String_Node_Str"");
  assertEquals(1,tocs.size());
  tocs=(List)document.findTOCByName(""String_Node_Str"");
  assertEquals(2,tocs.size());
  tocs=(List)document.findTOCByName(""String_Node_Str"");
  assertEquals(3,tocs.size());
  tocs=(List)document.findTOCByName(""String_Node_Str"");
  assertNull(tocs);
  assertNull(document.findTOCByName(null));
}","protected void checkFindTOCByName(IReportDocument document){
  TOCNode root=document.findTOC(""String_Node_Str"");
  assertTrue(root != null);
  List tocs=(List)document.findTOCByName(""String_Node_Str"");
  assertEquals(1,tocs.size());
  tocs=(List)document.findTOCByName(""String_Node_Str"");
  assertEquals(2,tocs.size());
  tocs=(List)document.findTOCByName(""String_Node_Str"");
  assertEquals(3,tocs.size());
  tocs=(List)document.findTOCByName(""String_Node_Str"");
  assertNull(tocs);
  assertNull(document.findTOCByName(null));
}",0.9934024505183788
73447,"protected void checkDocument(){
  try {
    IDocArchiveReader archive=new FileArchiveReader(REPORT_DOCUMENT);
    ReportDocumentReader document=new ReportDocumentReader(engine,archive);
    assertTrue(document.getName() != null);
    assertTrue(document.getReportRunnable() != null);
    checkParamters(document.getParameterValues());
    checkTOC(document);
    checkBookmarks(document);
    checkPersistentObjects(document.getGlobalVariables(null));
    document.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}","protected void checkDocument(){
  try {
    IDocArchiveReader archive=new FileArchiveReader(REPORT_DOCUMENT);
    IReportDocument document=engine.openReportDocument(null,archive,null);
    assertTrue(document.getName() != null);
    assertTrue(document.getReportRunnable() != null);
    checkParamters(document.getParameterValues());
    checkTOC(document);
    checkBookmarks(document);
    checkPersistentObjects(document.getGlobalVariables(null));
    document.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}",0.958828911253431
73448,"/** 
 * write empty content, the stream shouldn't be created.
 */
public void testEmptyDocument(){
  try {
    IDocArchiveWriter archive=new FileArchiveWriter(REPORT_DOCUMENT);
    ReportDocumentWriter document=new ReportDocumentWriter(engine,archive);
    TOCTree tree=new TOCTree();
    document.saveTOC(tree);
    HashMap bookmarks=new HashMap();
    document.saveBookmarks(bookmarks);
    document.close();
    IDocArchiveReader reader=new FileArchiveReader(REPORT_DOCUMENT);
    ReportDocumentReader docReader=new ReportDocumentReader(engine,reader);
    assertFalse(reader.exists(ReportDocumentReader.BOOKMARK_STREAM));
    TOCNode root=tree.getTOCRoot();
    assertTrue(root.getChildren().isEmpty());
    assertTrue(docReader.getBookmarks().isEmpty());
    docReader.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}","/** 
 * write empty content, the stream shouldn't be created.
 */
public void testEmptyDocument(){
  try {
    IDocArchiveWriter archive=new FileArchiveWriter(REPORT_DOCUMENT);
    ReportDocumentWriter document=new ReportDocumentWriter(engine,archive);
    TOCTree tree=new TOCTree();
    document.saveTOC(tree);
    HashMap bookmarks=new HashMap();
    document.saveBookmarks(bookmarks);
    document.close();
    IDocArchiveReader reader=new FileArchiveReader(REPORT_DOCUMENT);
    IReportDocument docReader=engine.openReportDocument(null,reader,null);
    assertFalse(reader.exists(ReportDocumentReader.BOOKMARK_STREAM));
    TOCNode root=tree.getTOCRoot();
    assertTrue(root.getChildren().isEmpty());
    assertTrue(docReader.getBookmarks().isEmpty());
    docReader.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}",0.9479836353009936
73449,"protected void checkTOC(ReportDocumentReader document){
  ITOCTree tree=document.getTOCTree(""String_Node_Str"",null);
  TOCNode root=tree.getRoot();
  assertTrue(root != null);
  assertTrue(root.getNodeID() == null);
  assertEquals(3,root.getChildren().size());
  Iterator iter=root.getChildren().iterator();
  TOCNode chart1=(TOCNode)iter.next();
  assertTOCNode(chart1,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(3,chart1.getChildren().size());
  Iterator sectionIter=chart1.getChildren().iterator();
  TOCNode section1=(TOCNode)sectionIter.next();
  assertTOCNode(section1,chart1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  section1=(TOCNode)sectionIter.next();
  assertTOCNode(section1,chart1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  section1=(TOCNode)sectionIter.next();
  assertTOCNode(section1,chart1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFalse(sectionIter.hasNext());
  TOCNode chart2=(TOCNode)iter.next();
  assertTOCNode(chart2,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  chart2=(TOCNode)iter.next();
  assertTOCNode(chart2,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFalse(sectionIter.hasNext());
  checkFindTOCByName(document);
}","protected void checkTOC(IReportDocument document){
  ITOCTree tree=document.getTOCTree(""String_Node_Str"",null);
  TOCNode root=tree.getRoot();
  assertTrue(root != null);
  assertTrue(root.getNodeID() == null);
  assertEquals(3,root.getChildren().size());
  Iterator iter=root.getChildren().iterator();
  TOCNode chart1=(TOCNode)iter.next();
  assertTOCNode(chart1,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(3,chart1.getChildren().size());
  Iterator sectionIter=chart1.getChildren().iterator();
  TOCNode section1=(TOCNode)sectionIter.next();
  assertTOCNode(section1,chart1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  section1=(TOCNode)sectionIter.next();
  assertTOCNode(section1,chart1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  section1=(TOCNode)sectionIter.next();
  assertTOCNode(section1,chart1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFalse(sectionIter.hasNext());
  TOCNode chart2=(TOCNode)iter.next();
  assertTOCNode(chart2,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  chart2=(TOCNode)iter.next();
  assertTOCNode(chart2,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertFalse(sectionIter.hasNext());
  checkFindTOCByName(document);
}",0.9972451790633609
73450,"public TestRunAndRenderTask(IReportEngine engine,IReportRunnable runnable,IEmitterMonitor monitor){
  super(engine,runnable);
  this.monitor=monitor;
}","public TestRunAndRenderTask(IReportEngine engine,IReportRunnable runnable,IEmitterMonitor monitor){
  super(getReportEngine(engine),runnable);
  this.monitor=monitor;
}",0.9467084639498432
73451,"AbstractRunTask(IReportEngine engine,IReportRunnable runnable,int taskType){
  super(engine,runnable,taskType);
}","AbstractRunTask(ReportEngine engine,IReportRunnable runnable,int taskType){
  super(engine,runnable,taskType);
}",0.9955555555555556
73452,"public DataExtractionTask(IReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  String version=reader.getProperty(ReportDocumentConstants.DATA_EXTRACTION_TASK_VERSION_KEY);
  if (ReportDocumentConstants.DATA_EXTRACTION_TASK_VERSION_0.equals(version)) {
    task=new DataExtractionTaskV0(engine,runnable,reader);
  }
 else   if (ReportDocumentConstants.DATA_EXTRACTION_TASK_VERSION_1.equals(version)) {
    task=new DataExtractionTaskV1(engine,runnable,reader);
  }
}","public DataExtractionTask(ReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  String version=reader.getProperty(ReportDocumentConstants.DATA_EXTRACTION_TASK_VERSION_KEY);
  if (ReportDocumentConstants.DATA_EXTRACTION_TASK_VERSION_0.equals(version)) {
    task=new DataExtractionTaskV0(engine,runnable,reader);
  }
 else   if (ReportDocumentConstants.DATA_EXTRACTION_TASK_VERSION_1.equals(version)) {
    task=new DataExtractionTaskV1(engine,runnable,reader);
  }
}",0.9990167158308751
73453,"public DataExtractionTaskV0(IReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  super(engine,runnable,IEngineTask.TASK_DATAEXTRACTION);
  this.report=((ReportRunnable)runnable).getReportIR();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
}","public DataExtractionTaskV0(ReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  super(engine,runnable,IEngineTask.TASK_DATAEXTRACTION);
  this.report=((ReportRunnable)runnable).getReportIR();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
}",0.9987849331713244
73454,"public DataExtractionTaskV1(IReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  super(engine,runnable);
  this.report=((ReportRunnable)runnable).getReportIR();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  setParameterValues(reportDocReader.getParameterValues());
  setParameterDisplayTexts(reportDocReader.getParameterDisplayTexts());
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDocReader.getGlobalVariables(null));
  Map appContext=executionContext.getAppContext();
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
}","public DataExtractionTaskV1(ReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  super(engine,runnable);
  this.report=((ReportRunnable)runnable).getReportIR();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  setParameterValues(reportDocReader.getParameterValues());
  setParameterDisplayTexts(reportDocReader.getParameterDisplayTexts());
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDocReader.getGlobalVariables(null));
  Map appContext=executionContext.getAppContext();
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
}",0.99935107073329
73455,"/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.isPDFLayout(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  if (!IBirtConstants.EXCEL_RENDER_FORMAT.equalsIgnoreCase(format)) {
    ((IRenderOption)renderOption).setOption(IRenderOption.HTML_PAGINATION,Boolean.TRUE);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (ParameterAccessor.isPDFLayout(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    if (ParameterAccessor.isDesigner(request))     BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.isPDFLayout(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  if (!IBirtConstants.EXCEL_RENDER_FORMAT.equalsIgnoreCase(format)) {
    ((IRenderOption)renderOption).setOption(IRenderOption.HTML_PAGINATION,Boolean.TRUE);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (ParameterAccessor.isPDFLayout(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    if (ParameterAccessor.isDesigner(request))     BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}",0.9946801929976494
73456,"/** 
 * createGetParameterDefinitionTask.
 * @param runnable
 * @return the get parameter definition task
 */
public IGetParameterDefinitionTask createGetParameterDefinitionTask(IReportRunnable runnable,InputOptions options){
  IGetParameterDefinitionTask task=null;
  try {
    HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
    Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
    task=engine.createGetParameterDefinitionTask(runnable);
    task.setLocale(locale);
    Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
    task.setAppContext(context);
  }
 catch (  Exception e) {
  }
  return task;
}","/** 
 * createGetParameterDefinitionTask.
 * @param runnable
 * @return the get parameter definition task
 */
public IGetParameterDefinitionTask createGetParameterDefinitionTask(IReportRunnable runnable,InputOptions options){
  IGetParameterDefinitionTask task=null;
  try {
    HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
    Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
    task=engine.createGetParameterDefinitionTask(runnable);
    task.setLocale(locale);
    Map context=BirtUtility.getAppContext(request);
    task.setAppContext(context);
  }
 catch (  Exception e) {
  }
  return task;
}",0.9685902118334552
73457,"/** 
 * Constructor.
 * @param servletContext
 * @param config
 */
private ReportEngineService(ServletContext servletContext){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletContext == null) {
    return;
  }
  ParameterAccessor.initParameters(servletContext);
  config=new EngineConfig();
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageBaseUrl=IBirtConstants.SERVLET_PATH_PREVIEW + ""String_Node_Str"";
  String logLevel=ParameterAccessor.logLevel;
  Level level=logLevel != null && logLevel.length() > 0 ? Level.parse(logLevel) : Level.OFF;
  config.setLogConfig(ParameterAccessor.logFolder,level);
  String scriptLibDir=ParameterAccessor.scriptLibDir;
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  config.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.setEngineHome(""String_Node_Str"");
  LoggingUtil.configureLoggers(ParameterAccessor.loggers,level,ParameterAccessor.logFolder);
}","/** 
 * Constructor.
 * @param servletContext
 * @param config
 */
private ReportEngineService(ServletContext servletContext){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletContext == null) {
    return;
  }
  ParameterAccessor.initParameters(servletContext);
  config=new EngineConfig();
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageBaseUrl=IBirtConstants.SERVLET_PATH_PREVIEW + ""String_Node_Str"";
  String logLevel=ParameterAccessor.logLevel;
  Level level=logLevel != null && logLevel.length() > 0 ? Level.parse(logLevel) : Level.OFF;
  config.setLogConfig(ParameterAccessor.logFolder,level);
  String scriptLibDir=ParameterAccessor.scriptLibDir;
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  config.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  config.setEngineHome(""String_Node_Str"");
  LoggingUtil.configureLoggers(ParameterAccessor.loggers,level,ParameterAccessor.logFolder);
}",0.9655781112091792
73458,"/** 
 * Returns app context
 * @param request
 * @param loader
 * @return
 */
public static Map getAppContext(HttpServletRequest request,ClassLoader loader){
  HashMap context=new HashMap();
  Boolean isDesigner=Boolean.valueOf(ParameterAccessor.isDesigner(request));
  context.put(""String_Node_Str"",isDesigner);
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,loader);
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  int maxCubeRowLevels=ParameterAccessor.getMaxCubeRowLevels(request);
  if (maxCubeRowLevels >= 0)   context.put(DataEngine.CUBECUSROR_FETCH_LIMIT_ON_ROW_EDGE,new Integer(maxCubeRowLevels));
  int maxCubeColumnLevels=ParameterAccessor.getMaxCubeColumnLevels(request);
  if (maxCubeColumnLevels >= 0)   context.put(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_COLUMN_EDGE,new Integer(maxCubeColumnLevels));
  int cubeMemorySize=ParameterAccessor.getCubeMemorySize(request);
  if (cubeMemorySize >= 0)   context.put(DataEngine.IN_MEMORY_CUBE_SIZE,new Integer(cubeMemorySize));
  ParameterAccessor.pushAppContext(context,request);
  return context;
}","/** 
 * Returns appcontext
 * @param request
 * @return
 */
public static Map getAppContext(HttpServletRequest request){
  HashMap context=new HashMap();
  Boolean isDesigner=Boolean.valueOf(ParameterAccessor.isDesigner(request));
  context.put(""String_Node_Str"",isDesigner);
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  int maxCubeRowLevels=ParameterAccessor.getMaxCubeRowLevels(request);
  if (maxCubeRowLevels >= 0)   context.put(DataEngine.CUBECUSROR_FETCH_LIMIT_ON_ROW_EDGE,new Integer(maxCubeRowLevels));
  int maxCubeColumnLevels=ParameterAccessor.getMaxCubeColumnLevels(request);
  if (maxCubeColumnLevels >= 0)   context.put(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_COLUMN_EDGE,new Integer(maxCubeColumnLevels));
  int cubeMemorySize=ParameterAccessor.getCubeMemorySize(request);
  if (cubeMemorySize >= 0)   context.put(DataEngine.IN_MEMORY_CUBE_SIZE,new Integer(cubeMemorySize));
  ParameterAccessor.pushAppContext(context,request);
  return context;
}",0.954962833406209
73459,"/** 
 * Draws a line with the line-style specified in advance from the start position to the end position with the given line width, color, and style on the PPT. If the line-style is NOT set before invoking this method, ""solid"" will be used as the default line-style.
 * @param startX the start X coordinate of the line
 * @param startY the start Y coordinate of the line
 * @param endX the end X coordinate of the line
 * @param endY the end Y coordinate of the line
 * @param width the lineWidth
 * @param color the color of the line
 */
private void drawRawLine(double startX,double startY,double endX,double endY,double width,Color color,String lineStyle){
  print(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  print(""String_Node_Str"" + startX + ""String_Node_Str""+ startY+ ""String_Node_Str"");
  print(""String_Node_Str"" + endX + ""String_Node_Str""+ endY+ ""String_Node_Str"");
  print(""String_Node_Str"" + Integer.toHexString(color.getRGB() & 0x00ffffff) + ""String_Node_Str"");
  print(""String_Node_Str"" + width + ""String_Node_Str"");
  if (lineStyle.equalsIgnoreCase(""String_Node_Str"")) {
    println(""String_Node_Str"");
  }
 else   if (lineStyle.equalsIgnoreCase(""String_Node_Str"")) {
    println(""String_Node_Str"");
  }
 else   if (lineStyle.equalsIgnoreCase(""String_Node_Str"")) {
    println(""String_Node_Str"");
  }
 else {
    println(""String_Node_Str"");
    return;
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a line with the line-style specified in advance from the start position to the end position with the given line width, color, and style on the PPT. If the line-style is NOT set before invoking this method, ""solid"" will be used as the default line-style.
 * @param startX the start X coordinate of the line
 * @param startY the start Y coordinate of the line
 * @param endX the end X coordinate of the line
 * @param endY the end Y coordinate of the line
 * @param width the lineWidth
 * @param color the color of the line
 */
private void drawRawLine(double startX,double startY,double endX,double endY,double width,Color color,String lineStyle){
  print(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  print(""String_Node_Str"" + startX + ""String_Node_Str""+ startY+ ""String_Node_Str"");
  print(""String_Node_Str"" + endX + ""String_Node_Str""+ endY+ ""String_Node_Str"");
  print(""String_Node_Str"" + getColorString(color) + ""String_Node_Str"");
  print(""String_Node_Str"" + width + ""String_Node_Str"");
  if (lineStyle.equalsIgnoreCase(""String_Node_Str"")) {
    println(""String_Node_Str"");
  }
 else   if (lineStyle.equalsIgnoreCase(""String_Node_Str"")) {
    println(""String_Node_Str"");
  }
 else   if (lineStyle.equalsIgnoreCase(""String_Node_Str"")) {
    println(""String_Node_Str"");
  }
 else {
    println(""String_Node_Str"");
    return;
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9850017439832578
73460,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  String red=Integer.toHexString(color.getRed());
  String green=Integer.toHexString(color.getGreen());
  String blue=Integer.toHexString(color.getBlue());
  red=red.length() == 1 ? ""String_Node_Str"" + red : red;
  green=green.length() == 1 ? ""String_Node_Str"" + green : green;
  blue=blue.length() == 1 ? ""String_Node_Str"" + blue : blue;
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ red+ green+ blue+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.6095293434049971
73461,"final double computeAxisLabelThickness(IDisplayServer xs,Label la,int iOrientation) throws ChartException {
  if (!la.isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{la.getCaption().getValue()},Messages.getResourceBundle(rtc.getULocale()));
  }
  if (!la.isVisible() && !bLabelWithinAxes) {
    return 0;
  }
  String sText;
  AxisTickCoordinates da=getTickCordinates();
  if (iOrientation == VERTICAL) {
    double dW, dMaxW=0, dMaxW2=0;
    if (isCategoryScale()) {
      final DataSetIterator dsi=getData();
      final int iDateTimeUnit=(getType() == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
      dsi.reset();
      int i=0;
      while (dsi.hasNext()) {
        la.getCaption().setValue(formatCategoryValue(getType(),dsi.next(),iDateTimeUnit));
        dW=computeWidth(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxW2=Math.max(dW,dMaxW2);
        }
 else         if (dW > dMaxW) {
          dMaxW=dW;
        }
        i++;
      }
    }
 else     if ((getType() & LINEAR) == LINEAR) {
      final NumberDataElement nde=NumberDataElementImpl.create(0);
      double dAxisValue=asDouble(getMinimum()).doubleValue();
      double dAxisStep=asDouble(getStep()).doubleValue();
      DecimalFormat df=null;
      if (fs == null) {
        df=computeDecimalFormat(dAxisValue,dAxisStep);
      }
      for (int i=0; i < da.size(); i++) {
        nde.setValue(dAxisValue);
        try {
          sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
        }
 catch (        ChartException dfex) {
          logger.log(dfex);
          sText=IConstants.NULL_STRING;
        }
        la.getCaption().setValue(sText);
        dW=computeWidth(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxW2=Math.max(dW,dMaxW2);
        }
 else         if (dW > dMaxW) {
          dMaxW=dW;
        }
        dAxisValue+=dAxisStep;
      }
    }
 else     if ((getType() & LOGARITHMIC) == LOGARITHMIC) {
      final NumberDataElement nde=NumberDataElementImpl.create(0);
      double dAxisValue=asDouble(getMinimum()).doubleValue();
      double dAxisStep=asDouble(getStep()).doubleValue();
      DecimalFormat df=null;
      for (int i=0; i < da.size(); i++) {
        if (fs == null) {
          df=computeDecimalFormat(dAxisValue,dAxisStep);
        }
        nde.setValue(dAxisValue);
        try {
          sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
        }
 catch (        ChartException dfex) {
          logger.log(dfex);
          sText=IConstants.NULL_STRING;
        }
        la.getCaption().setValue(sText);
        dW=computeWidth(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxW2=Math.max(dW,dMaxW2);
        }
 else         if (dW > dMaxW) {
          dMaxW=dW;
        }
        dAxisValue*=dAxisStep;
      }
    }
 else     if ((getType() & DATE_TIME) == DATE_TIME) {
      CDateTime cdtAxisValue=asDateTime(getMinimum());
      int iStep=asInteger(getStep());
      int iUnit=asInteger(getUnit());
      IDateFormatWrapper sdf=null;
      if (fs == null) {
        sdf=DateFormatWrapperFactory.getPreferredDateFormat(iUnit,rtc.getULocale());
      }
      for (int i=0; i < da.size(); i++) {
        try {
          sText=ValueFormatter.format(cdtAxisValue,fs,rtc.getULocale(),sdf);
        }
 catch (        ChartException dfex) {
          logger.log(dfex);
          sText=IConstants.NULL_STRING;
        }
        la.getCaption().setValue(sText);
        dW=computeWidth(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxW2=Math.max(dW,dMaxW2);
        }
 else         if (dW > dMaxW) {
          dMaxW=dW;
        }
        cdtAxisValue=cdtAxisValue.forward(iUnit,iStep);
      }
    }
    return dMaxW + dMaxW2;
  }
 else   if (iOrientation == HORIZONTAL) {
    double dH, dMaxH=0, dMaxH2=0;
    if (isCategoryScale()) {
      final DataSetIterator dsi=getData();
      final int iDateTimeUnit=(getType() == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
      dsi.reset();
      int i=0;
      while (dsi.hasNext()) {
        la.getCaption().setValue(formatCategoryValue(getType(),dsi.next(),iDateTimeUnit));
        dH=computeHeight(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxH2=Math.max(dH,dMaxH2);
        }
 else         if (dH > dMaxH) {
          dMaxH=dH;
        }
        i++;
      }
    }
 else     if ((getType() & LINEAR) == LINEAR) {
      final NumberDataElement nde=NumberDataElementImpl.create(0);
      double dAxisValue=asDouble(getMinimum()).doubleValue();
      final double dAxisStep=asDouble(getStep()).doubleValue();
      DecimalFormat df=null;
      if (fs == null) {
        df=computeDecimalFormat(dAxisValue,dAxisStep);
      }
      for (int i=0; i < da.size(); i++) {
        nde.setValue(dAxisValue);
        try {
          sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
        }
 catch (        ChartException dfex) {
          logger.log(dfex);
          sText=IConstants.NULL_STRING;
        }
        la.getCaption().setValue(sText);
        dH=computeHeight(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxH2=Math.max(dH,dMaxH2);
        }
 else         if (dH > dMaxH) {
          dMaxH=dH;
        }
        dAxisValue+=dAxisStep;
      }
    }
 else     if ((getType() & LOGARITHMIC) == LOGARITHMIC) {
      final NumberDataElement nde=NumberDataElementImpl.create(0);
      double dAxisValue=asDouble(getMinimum()).doubleValue();
      final double dAxisStep=asDouble(getStep()).doubleValue();
      DecimalFormat df=null;
      for (int i=0; i < da.size(); i++) {
        if (fs == null) {
          df=computeDecimalFormat(dAxisValue,dAxisStep);
        }
        nde.setValue(dAxisValue);
        try {
          sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
        }
 catch (        ChartException dfex) {
          logger.log(dfex);
          sText=IConstants.NULL_STRING;
        }
        la.getCaption().setValue(sText);
        dH=computeHeight(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxH2=Math.max(dH,dMaxH2);
        }
 else         if (dH > dMaxH) {
          dMaxH=dH;
        }
        dAxisValue*=dAxisStep;
      }
    }
 else     if ((getType() & DATE_TIME) == DATE_TIME) {
      CDateTime cdtAxisValue=asDateTime(getMinimum());
      final int iStep=asInteger(getStep());
      final int iUnit=asInteger(getUnit());
      IDateFormatWrapper sdf=null;
      if (fs == null) {
        sdf=DateFormatWrapperFactory.getPreferredDateFormat(iUnit,rtc.getULocale());
      }
      for (int i=0; i < da.size(); i++) {
        try {
          sText=ValueFormatter.format(cdtAxisValue,fs,rtc.getULocale(),sdf);
        }
 catch (        ChartException dfex) {
          logger.log(dfex);
          sText=IConstants.NULL_STRING;
        }
        la.getCaption().setValue(sText);
        dH=computeHeight(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxH2=Math.max(dH,dMaxH2);
        }
 else         if (dH > dMaxH) {
          dMaxH=dH;
        }
        cdtAxisValue.forward(iUnit,iStep);
      }
    }
    return dMaxH + dMaxH2;
  }
  return 0;
}","final double computeAxisLabelThickness(IDisplayServer xs,Label la,int iOrientation) throws ChartException {
  if (!la.isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{la.getCaption().getValue()},Messages.getResourceBundle(rtc.getULocale()));
  }
  if (!la.isVisible()) {
    return 0;
  }
  String sText;
  AxisTickCoordinates da=getTickCordinates();
  if (iOrientation == VERTICAL) {
    double dW, dMaxW=0, dMaxW2=0;
    if (isCategoryScale()) {
      final DataSetIterator dsi=getData();
      final int iDateTimeUnit=(getType() == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
      dsi.reset();
      int i=0;
      while (dsi.hasNext()) {
        la.getCaption().setValue(formatCategoryValue(getType(),dsi.next(),iDateTimeUnit));
        dW=computeWidth(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxW2=Math.max(dW,dMaxW2);
        }
 else         if (dW > dMaxW) {
          dMaxW=dW;
        }
        i++;
      }
    }
 else     if ((getType() & LINEAR) == LINEAR) {
      final NumberDataElement nde=NumberDataElementImpl.create(0);
      double dAxisValue=asDouble(getMinimum()).doubleValue();
      double dAxisStep=asDouble(getStep()).doubleValue();
      DecimalFormat df=null;
      if (fs == null) {
        df=computeDecimalFormat(dAxisValue,dAxisStep);
      }
      for (int i=0; i < da.size(); i++) {
        nde.setValue(dAxisValue);
        try {
          sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
        }
 catch (        ChartException dfex) {
          logger.log(dfex);
          sText=IConstants.NULL_STRING;
        }
        la.getCaption().setValue(sText);
        dW=computeWidth(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxW2=Math.max(dW,dMaxW2);
        }
 else         if (dW > dMaxW) {
          dMaxW=dW;
        }
        dAxisValue+=dAxisStep;
      }
    }
 else     if ((getType() & LOGARITHMIC) == LOGARITHMIC) {
      final NumberDataElement nde=NumberDataElementImpl.create(0);
      double dAxisValue=asDouble(getMinimum()).doubleValue();
      double dAxisStep=asDouble(getStep()).doubleValue();
      DecimalFormat df=null;
      for (int i=0; i < da.size(); i++) {
        if (fs == null) {
          df=computeDecimalFormat(dAxisValue,dAxisStep);
        }
        nde.setValue(dAxisValue);
        try {
          sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
        }
 catch (        ChartException dfex) {
          logger.log(dfex);
          sText=IConstants.NULL_STRING;
        }
        la.getCaption().setValue(sText);
        dW=computeWidth(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxW2=Math.max(dW,dMaxW2);
        }
 else         if (dW > dMaxW) {
          dMaxW=dW;
        }
        dAxisValue*=dAxisStep;
      }
    }
 else     if ((getType() & DATE_TIME) == DATE_TIME) {
      CDateTime cdtAxisValue=asDateTime(getMinimum());
      int iStep=asInteger(getStep());
      int iUnit=asInteger(getUnit());
      IDateFormatWrapper sdf=null;
      if (fs == null) {
        sdf=DateFormatWrapperFactory.getPreferredDateFormat(iUnit,rtc.getULocale());
      }
      for (int i=0; i < da.size(); i++) {
        try {
          sText=ValueFormatter.format(cdtAxisValue,fs,rtc.getULocale(),sdf);
        }
 catch (        ChartException dfex) {
          logger.log(dfex);
          sText=IConstants.NULL_STRING;
        }
        la.getCaption().setValue(sText);
        dW=computeWidth(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxW2=Math.max(dW,dMaxW2);
        }
 else         if (dW > dMaxW) {
          dMaxW=dW;
        }
        cdtAxisValue=cdtAxisValue.forward(iUnit,iStep);
      }
    }
    return dMaxW + dMaxW2;
  }
 else   if (iOrientation == HORIZONTAL) {
    double dH, dMaxH=0, dMaxH2=0;
    if (isCategoryScale()) {
      final DataSetIterator dsi=getData();
      final int iDateTimeUnit=(getType() == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
      dsi.reset();
      int i=0;
      while (dsi.hasNext()) {
        la.getCaption().setValue(formatCategoryValue(getType(),dsi.next(),iDateTimeUnit));
        dH=computeHeight(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxH2=Math.max(dH,dMaxH2);
        }
 else         if (dH > dMaxH) {
          dMaxH=dH;
        }
        i++;
      }
    }
 else     if ((getType() & LINEAR) == LINEAR) {
      final NumberDataElement nde=NumberDataElementImpl.create(0);
      double dAxisValue=asDouble(getMinimum()).doubleValue();
      final double dAxisStep=asDouble(getStep()).doubleValue();
      DecimalFormat df=null;
      if (fs == null) {
        df=computeDecimalFormat(dAxisValue,dAxisStep);
      }
      for (int i=0; i < da.size(); i++) {
        nde.setValue(dAxisValue);
        try {
          sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
        }
 catch (        ChartException dfex) {
          logger.log(dfex);
          sText=IConstants.NULL_STRING;
        }
        la.getCaption().setValue(sText);
        dH=computeHeight(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxH2=Math.max(dH,dMaxH2);
        }
 else         if (dH > dMaxH) {
          dMaxH=dH;
        }
        dAxisValue+=dAxisStep;
      }
    }
 else     if ((getType() & LOGARITHMIC) == LOGARITHMIC) {
      final NumberDataElement nde=NumberDataElementImpl.create(0);
      double dAxisValue=asDouble(getMinimum()).doubleValue();
      final double dAxisStep=asDouble(getStep()).doubleValue();
      DecimalFormat df=null;
      for (int i=0; i < da.size(); i++) {
        if (fs == null) {
          df=computeDecimalFormat(dAxisValue,dAxisStep);
        }
        nde.setValue(dAxisValue);
        try {
          sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
        }
 catch (        ChartException dfex) {
          logger.log(dfex);
          sText=IConstants.NULL_STRING;
        }
        la.getCaption().setValue(sText);
        dH=computeHeight(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxH2=Math.max(dH,dMaxH2);
        }
 else         if (dH > dMaxH) {
          dMaxH=dH;
        }
        dAxisValue*=dAxisStep;
      }
    }
 else     if ((getType() & DATE_TIME) == DATE_TIME) {
      CDateTime cdtAxisValue=asDateTime(getMinimum());
      final int iStep=asInteger(getStep());
      final int iUnit=asInteger(getUnit());
      IDateFormatWrapper sdf=null;
      if (fs == null) {
        sdf=DateFormatWrapperFactory.getPreferredDateFormat(iUnit,rtc.getULocale());
      }
      for (int i=0; i < da.size(); i++) {
        try {
          sText=ValueFormatter.format(cdtAxisValue,fs,rtc.getULocale(),sdf);
        }
 catch (        ChartException dfex) {
          logger.log(dfex);
          sText=IConstants.NULL_STRING;
        }
        la.getCaption().setValue(sText);
        dH=computeHeight(xs,la);
        if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
          dMaxH2=Math.max(dH,dMaxH2);
        }
 else         if (dH > dMaxH) {
          dMaxH=dH;
        }
        cdtAxisValue.forward(iUnit,iStep);
      }
    }
    return dMaxH + dMaxH2;
  }
  return 0;
}",0.9985821348997368
73462,"void setDataSet(String datasetName){
  try {
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setCube(null);
    if (datasetName == null) {
      if (getBoundDataSet() != null) {
        clearBindings();
      }
      itemHandle.setDataSet(null);
    }
 else {
      DataSetHandle dataset=getReportDesignHandle().findDataSet(datasetName);
      if (itemHandle.getDataSet() != dataset) {
        itemHandle.setDataSet(dataset);
        clearBindings();
        generateBindings(generateComputedColumns(dataset));
      }
    }
  }
 catch (  SemanticException e) {
    ChartWizard.showException(e.getLocalizedMessage());
  }
}","void setDataSet(String datasetName){
  try {
    boolean isPreviousDataBindingReference=false;
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      isPreviousDataBindingReference=true;
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setCube(null);
    if (datasetName == null) {
      if (getBoundDataSet() != null) {
        clearBindings();
      }
      itemHandle.setDataSet(null);
    }
 else {
      DataSetHandle dataset=getReportDesignHandle().findDataSet(datasetName);
      if (isPreviousDataBindingReference || itemHandle.getDataSet() != dataset) {
        itemHandle.setDataSet(dataset);
        clearBindings();
        generateBindings(generateComputedColumns(dataset));
      }
    }
  }
 catch (  SemanticException e) {
    ChartWizard.showException(e.getLocalizedMessage());
  }
}",0.9209707529558184
73463,"public String getDisplayExpression(){
  if (cmbDefinition != null && isTableSharedBinding()) {
    Object[] data=(Object[])cmbDefinition.getData();
    for (int i=0; data != null && i < data.length; i++) {
      ColumnBindingInfo chi=(ColumnBindingInfo)data[i];
      if (chi.getExpression().equals(query.getDefinition())) {
        if (queryType == ChartUIConstants.QUERY_CATEGORY || queryType == ChartUIConstants.QUERY_OPTIONAL) {
          boolean sdGrouped=seriesdefinition.getGrouping().isEnabled();
          boolean groupedBinding=(chi.getColumnType() == ColumnBindingInfo.GROUP_COLUMN);
          if (sdGrouped == groupedBinding) {
            return cmbDefinition.getItem(i);
          }
        }
      }
    }
    return query.getDefinition();
  }
 else {
    return query.getDefinition();
  }
}","public String getDisplayExpression(){
  if (cmbDefinition != null && isTableSharedBinding()) {
    Object[] data=(Object[])cmbDefinition.getData();
    for (int i=0; data != null && i < data.length; i++) {
      ColumnBindingInfo chi=(ColumnBindingInfo)data[i];
      if (chi.getExpression().equals(query.getDefinition())) {
        if (queryType == ChartUIConstants.QUERY_CATEGORY || queryType == ChartUIConstants.QUERY_OPTIONAL) {
          boolean sdGrouped=seriesdefinition.getGrouping().isEnabled();
          boolean groupedBinding=(chi.getColumnType() == ColumnBindingInfo.GROUP_COLUMN);
          if (sdGrouped == groupedBinding) {
            String expr=cmbDefinition.getItem(i);
            return (expr == null) ? ""String_Node_Str"" : expr;
          }
        }
      }
    }
    String expr=query.getDefinition();
    return (expr == null) ? ""String_Node_Str"" : expr;
  }
 else {
    String expr=query.getDefinition();
    return (expr == null) ? ""String_Node_Str"" : expr;
  }
}",0.8736783528102393
73464,"/** 
 * Builds and computes preferred sizes of various chart components offscreen using the provided display server.
 * @param ids A display server using which the chart may be built.
 * @param cmDesignTime The design time chart model (bound to a dataset).
 * @param externalContext An external context object.
 * @param bo The bounds associated with the chart being built.
 * @param rtc Encapsulates the runtime environment for the build process.
 * @param externalProcessor An external style processor. If it's null, an implicit processor will be used.
 * @return An instance of a generated chart state that encapsulates builtchart information that may be subsequently rendered.
 * @throws ChartException
 */
public final GeneratedChartState build(IDisplayServer ids,Chart cmDesignTime,Bounds bo,IExternalContext externalContext,RunTimeContext rtc,IStyleProcessor externalProcessor) throws ChartException {
  if (ids == null || cmDesignTime == null || bo == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle());
  }
  if (rtc == null) {
    rtc=new RunTimeContext();
  }
  if (rtc.getULocale() == null) {
    rtc.setULocale(ULocale.getDefault());
  }
  IChartScriptContext icsc=rtc.getScriptContext();
  if (icsc == null) {
    ChartScriptContext csc=new ChartScriptContext();
    csc.setChartInstance((Chart)EcoreUtil.copy(cmDesignTime));
    csc.setExternalContext(externalContext);
    csc.setULocale(rtc.getULocale());
    csc.setLogger(logger);
    rtc.setScriptContext(csc);
    icsc=csc;
  }
 else   if (icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setLogger(logger);
  }
  if (externalContext != null && icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setExternalContext(externalContext);
  }
  final Chart cmRunTime=icsc.getChartInstance();
  ScriptHandler sh=rtc.getScriptHandler();
  if (sh == null) {
    sh=new ScriptHandler();
    rtc.setScriptHandler(sh);
    sh.setScriptClassLoader(rtc.getScriptClassLoader());
    sh.setScriptContext(icsc);
    final String sScriptContent=cmRunTime.getScript();
    if (externalContext != null && externalContext.getScriptable() != null) {
      sh.init(externalContext.getScriptable());
    }
 else {
      sh.init(null);
    }
    sh.setRunTimeModel(cmRunTime);
    if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
      sh.register(null,sScriptContent);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.START_GENERATION,cmRunTime);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_GENERATION,cmRunTime,rtc.getScriptContext());
  prepareStyles(cmRunTime,externalProcessor);
  int iChartType=UNDEFINED;
  Object oComputations=null;
  if (cmRunTime instanceof ChartWithAxes) {
    iChartType=WITH_AXES;
    try {
      if (cmRunTime.getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL) {
        oComputations=new PlotWith3DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
 else {
        oComputations=new PlotWith2DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
    }
 catch (    Exception e) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
    }
  }
 else   if (cmRunTime instanceof ChartWithoutAxes) {
    iChartType=WITHOUT_AXES;
    oComputations=new PlotWithoutAxes(ids,(ChartWithoutAxes)cmRunTime,rtc);
  }
  if (oComputations == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{cmRunTime},Messages.getResourceBundle(rtc.getULocale()));
  }
  final LinkedHashMap lhmRenderers=new LinkedHashMap();
  BaseRenderer[] brna=null;
  try {
    brna=BaseRenderer.instances(cmRunTime,rtc,oComputations);
    for (int i=0; i < brna.length; i++) {
      lhmRenderers.put(brna[i].getSeries(),new LegendItemRenderingHints(brna[i],BoundsImpl.create(0,0,0,0)));
    }
    rtc.setSeriesRenderers(lhmRenderers);
    rtc.setLegendLayoutHints(null);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  if (oComputations instanceof PlotWith2DAxes) {
    PlotWith2DAxes pwa=(PlotWith2DAxes)oComputations;
    pwa.initDynamicPlotBounds(bo);
  }
  Block bl=cmRunTime.getBlock();
  final LayoutManager lm=new LayoutManager(bl);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_LAYOUT,cmRunTime);
  lm.doLayout(ids,cmRunTime,bo,rtc);
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_LAYOUT,cmRunTime);
  Bounds boPlot=cmRunTime.getPlot().getBounds();
  Insets insPlot=cmRunTime.getPlot().getInsets();
  boPlot=boPlot.adjustedInstance(insPlot);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_COMPUTATIONS,cmRunTime,oComputations);
  long lTimer=System.currentTimeMillis();
  if (iChartType == WITH_AXES) {
    PlotWithAxes pwa=(PlotWithAxes)oComputations;
    try {
      pwa.compute(boPlot);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
 else   if (iChartType == WITHOUT_AXES) {
    PlotWithoutAxes pwoa=(PlotWithoutAxes)oComputations;
    try {
      pwoa.compute(boPlot);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_COMPUTATIONS,cmRunTime,oComputations);
  final Collection co=lhmRenderers.values();
  final LegendItemRenderingHints[] lirha=(LegendItemRenderingHints[])co.toArray(new LegendItemRenderingHints[co.size()]);
  final int iSize=lhmRenderers.size();
  BaseRenderer br;
  for (int i=0; i < iSize; i++) {
    br=lirha[i].getRenderer();
    br.set(brna);
    br.set(ids);
    br.set(rtc);
    try {
      if (br.getComputations() instanceof PlotWithoutAxes) {
        br.set(((PlotWithoutAxes)br.getComputations()).getSeriesRenderingHints(br.getSeries()));
      }
 else {
        br.set(((PlotWithAxes)br.getComputations()).getSeriesRenderingHints(br.getSeriesDefinition(),br.getSeries()));
      }
      ScriptHandler.callFunction(sh,ScriptHandler.START_COMPUTE_SERIES,br.getSeries());
      br.compute(bo,cmRunTime.getPlot(),br.getSeriesRenderingHints());
      ScriptHandler.callFunction(sh,ScriptHandler.FINISH_COMPUTE_SERIES,br.getSeries());
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Long(System.currentTimeMillis() - lTimer)},rtc.getULocale()));
  final GeneratedChartState gcs=new GeneratedChartState(ids,cmRunTime,lhmRenderers,rtc,oComputations);
  if (sh != null) {
    sh.setGeneratedChartState(gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.FINISH_GENERATION,gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_GENERATION,gcs,rtc.getScriptContext());
  }
  return gcs;
}","/** 
 * Builds and computes preferred sizes of various chart components offscreen using the provided display server.
 * @param ids A display server using which the chart may be built.
 * @param cmDesignTime The design time chart model (bound to a dataset).
 * @param externalContext An external context object.
 * @param bo The bounds associated with the chart being built.
 * @param rtc Encapsulates the runtime environment for the build process.
 * @param externalProcessor An external style processor. If it's null, an implicit processor will be used.
 * @return An instance of a generated chart state that encapsulates builtchart information that may be subsequently rendered.
 * @throws ChartException
 */
public final GeneratedChartState build(IDisplayServer ids,Chart cmDesignTime,Bounds bo,IExternalContext externalContext,RunTimeContext rtc,IStyleProcessor externalProcessor) throws ChartException {
  if (ids == null || cmDesignTime == null || bo == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle());
  }
  if (rtc == null) {
    rtc=new RunTimeContext();
  }
  if (rtc.getULocale() == null) {
    rtc.setULocale(ULocale.getDefault());
  }
  IChartScriptContext icsc=rtc.getScriptContext();
  if (icsc == null) {
    ChartScriptContext csc=new ChartScriptContext();
    csc.setChartInstance((Chart)EcoreUtil.copy(cmDesignTime));
    csc.setExternalContext(externalContext);
    csc.setULocale(rtc.getULocale());
    csc.setLogger(logger);
    rtc.setScriptContext(csc);
    icsc=csc;
  }
 else   if (icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setLogger(logger);
    ((ChartScriptContext)icsc).setChartInstance((Chart)EcoreUtil.copy(cmDesignTime));
  }
  if (externalContext != null && icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setExternalContext(externalContext);
  }
  final Chart cmRunTime=icsc.getChartInstance();
  ScriptHandler sh=rtc.getScriptHandler();
  if (sh == null) {
    sh=new ScriptHandler();
    rtc.setScriptHandler(sh);
    sh.setScriptClassLoader(rtc.getScriptClassLoader());
    sh.setScriptContext(icsc);
    final String sScriptContent=cmRunTime.getScript();
    if (externalContext != null && externalContext.getScriptable() != null) {
      sh.init(externalContext.getScriptable());
    }
 else {
      sh.init(null);
    }
    sh.setRunTimeModel(cmRunTime);
    if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
      sh.register(null,sScriptContent);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.START_GENERATION,cmRunTime);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_GENERATION,cmRunTime,rtc.getScriptContext());
  prepareStyles(cmRunTime,externalProcessor);
  int iChartType=UNDEFINED;
  Object oComputations=null;
  if (cmRunTime instanceof ChartWithAxes) {
    iChartType=WITH_AXES;
    try {
      if (cmRunTime.getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL) {
        oComputations=new PlotWith3DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
 else {
        oComputations=new PlotWith2DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
    }
 catch (    Exception e) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
    }
  }
 else   if (cmRunTime instanceof ChartWithoutAxes) {
    iChartType=WITHOUT_AXES;
    oComputations=new PlotWithoutAxes(ids,(ChartWithoutAxes)cmRunTime,rtc);
  }
  if (oComputations == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{cmRunTime},Messages.getResourceBundle(rtc.getULocale()));
  }
  final LinkedHashMap lhmRenderers=new LinkedHashMap();
  BaseRenderer[] brna=null;
  try {
    brna=BaseRenderer.instances(cmRunTime,rtc,oComputations);
    for (int i=0; i < brna.length; i++) {
      lhmRenderers.put(brna[i].getSeries(),new LegendItemRenderingHints(brna[i],BoundsImpl.create(0,0,0,0)));
    }
    rtc.setSeriesRenderers(lhmRenderers);
    rtc.setLegendLayoutHints(null);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  if (oComputations instanceof PlotWith2DAxes) {
    PlotWith2DAxes pwa=(PlotWith2DAxes)oComputations;
    pwa.initDynamicPlotBounds(bo);
  }
  Block bl=cmRunTime.getBlock();
  final LayoutManager lm=new LayoutManager(bl);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_LAYOUT,cmRunTime);
  lm.doLayout(ids,cmRunTime,bo,rtc);
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_LAYOUT,cmRunTime);
  Bounds boPlot=cmRunTime.getPlot().getBounds();
  Insets insPlot=cmRunTime.getPlot().getInsets();
  boPlot=boPlot.adjustedInstance(insPlot);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_COMPUTATIONS,cmRunTime,oComputations);
  long lTimer=System.currentTimeMillis();
  if (iChartType == WITH_AXES) {
    PlotWithAxes pwa=(PlotWithAxes)oComputations;
    try {
      pwa.compute(boPlot);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
 else   if (iChartType == WITHOUT_AXES) {
    PlotWithoutAxes pwoa=(PlotWithoutAxes)oComputations;
    try {
      pwoa.compute(boPlot);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_COMPUTATIONS,cmRunTime,oComputations);
  final Collection co=lhmRenderers.values();
  final LegendItemRenderingHints[] lirha=(LegendItemRenderingHints[])co.toArray(new LegendItemRenderingHints[co.size()]);
  final int iSize=lhmRenderers.size();
  BaseRenderer br;
  for (int i=0; i < iSize; i++) {
    br=lirha[i].getRenderer();
    br.set(brna);
    br.set(ids);
    br.set(rtc);
    try {
      if (br.getComputations() instanceof PlotWithoutAxes) {
        br.set(((PlotWithoutAxes)br.getComputations()).getSeriesRenderingHints(br.getSeries()));
      }
 else {
        br.set(((PlotWithAxes)br.getComputations()).getSeriesRenderingHints(br.getSeriesDefinition(),br.getSeries()));
      }
      ScriptHandler.callFunction(sh,ScriptHandler.START_COMPUTE_SERIES,br.getSeries());
      br.compute(bo,cmRunTime.getPlot(),br.getSeriesRenderingHints());
      ScriptHandler.callFunction(sh,ScriptHandler.FINISH_COMPUTE_SERIES,br.getSeries());
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Long(System.currentTimeMillis() - lTimer)},rtc.getULocale()));
  final GeneratedChartState gcs=new GeneratedChartState(ids,cmRunTime,lhmRenderers,rtc,oComputations);
  if (sh != null) {
    sh.setGeneratedChartState(gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.FINISH_GENERATION,gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_GENERATION,gcs,rtc.getScriptContext());
  }
  return gcs;
}",0.9938253877082136
73465,"public void deserialize(InputStream is){
  try {
    ObjectInputStream ois=new ObjectInputStream(is){
      protected Class resolveClass(      ObjectStreamClass desc) throws IOException, ClassNotFoundException {
        if (""String_Node_Str"".equals(desc.getName())) {
          return ChartScriptContext.class;
        }
        return super.resolveClass(desc);
      }
    }
;
    Object o=ois.readObject();
    if (o instanceof RunTimeContext) {
      RunTimeContext drtc=(RunTimeContext)o;
      if (rtc != null) {
        drtc.setULocale(rtc.getULocale());
        drtc.setScale(rtc.getScale());
      }
      rtc=drtc;
      cm=rtc.getScriptContext().getChartInstance();
      if (cm != null && handle != null) {
        IReportItem item=handle.getReportItem();
        ((ChartReportItemImpl)item).setModel(cm);
        ((ChartReportItemImpl)item).setScale(rtc.getScale());
      }
      Object oMaxRow=context.getAppContext().get(EngineConstants.PROPERTY_EXTENDED_ITEM_MAX_ROW);
      if (oMaxRow != null) {
        rtc.putState(ChartUtil.CHART_MAX_ROW,oMaxRow);
      }
 else {
        oMaxRow=context.getGlobalVariable(EngineConstants.PROPERTY_EXTENDED_ITEM_MAX_ROW);
        if (oMaxRow != null) {
          rtc.putState(ChartUtil.CHART_MAX_ROW,oMaxRow);
        }
      }
    }
    ois.close();
  }
 catch (  Exception e) {
    logger.log(e);
  }
}","public void deserialize(InputStream is){
  try {
    ObjectInputStream ois=new ObjectInputStream(is){
      protected Class resolveClass(      ObjectStreamClass desc) throws IOException, ClassNotFoundException {
        if (""String_Node_Str"".equals(desc.getName())) {
          return ChartScriptContext.class;
        }
        return super.resolveClass(desc);
      }
    }
;
    Object o=ois.readObject();
    if (o instanceof RunTimeContext) {
      RunTimeContext drtc=(RunTimeContext)o;
      if (rtc != null) {
        drtc.setULocale(rtc.getULocale());
        drtc.setScale(rtc.getScale());
      }
      rtc=drtc;
      Object oMaxRow=context.getAppContext().get(EngineConstants.PROPERTY_EXTENDED_ITEM_MAX_ROW);
      if (oMaxRow != null) {
        rtc.putState(ChartUtil.CHART_MAX_ROW,oMaxRow);
      }
 else {
        oMaxRow=context.getGlobalVariable(EngineConstants.PROPERTY_EXTENDED_ITEM_MAX_ROW);
        if (oMaxRow != null) {
          rtc.putState(ChartUtil.CHART_MAX_ROW,oMaxRow);
        }
      }
    }
    ois.close();
  }
 catch (  Exception e) {
    logger.log(e);
  }
}",0.5772523440684876
73466,"protected void populateFieldIndexMap(){
  for (int i=0; i < resultSet.getLevelCount(); i++) {
    DimLevel level=resultSet.getAllLevels()[i];
    for (int j=0; j < resultSet.getLevelKeyColCount(i); j++) {
      String levelKeyName=resultSet.getLevelKeyName(i,j);
      String name=OlapExpressionUtil.getAttrReference(level.getDimensionName(),level.getLevelName(),levelKeyName);
      fieldIndexMap.put(name,new AggregationKeyIndex(i,j));
    }
    String[] attrNames=resultSet.getLevelAttributes(i);
    if (attrNames != null) {
      for (int j=0; j < attrNames.length; j++) {
        String name=OlapExpressionUtil.getAttrReference(level.getDimensionName(),level.getLevelName(),attrNames[j]);
        fieldIndexMap.put(name,new AggregationAttrIndex(i,j));
      }
    }
  }
}","protected void populateFieldIndexMap(){
  for (int i=0; i < resultSet.getLevelCount(); i++) {
    DimLevel level=resultSet.getAllLevels()[i];
    for (int j=0; j < resultSet.getLevelKeyColCount(i); j++) {
      String levelKeyName=resultSet.getLevelKeyName(i,j);
      String name=OlapExpressionUtil.getAttrReference(level.getDimensionName(),level.getLevelName(),levelKeyName);
      fieldIndexMap.put(name,new AggregationKeyIndex(i,j));
    }
    String[] attrNames=resultSet.getLevelAttributes(i);
    if (attrNames != null) {
      for (int j=0; j < attrNames.length; j++) {
        String attrName=parseAttributeName(attrNames[j]);
        String name=OlapExpressionUtil.getAttrReference(level.getDimensionName(),level.getLevelName(),attrName);
        fieldIndexMap.put(name,new AggregationAttrIndex(i,j));
      }
    }
  }
}",0.9614427860696516
73467,"protected void populateFieldIndexMap(){
  fieldIndexMap=new HashMap();
  ILevel[] levels=dimension.getHierarchy().getLevels();
  for (int i=0; i < levels.length; i++) {
    String[] keyNames=levels[i].getKeyNames();
    if (keyNames != null) {
      for (int j=0; j < keyNames.length; j++) {
        String keyName=OlapExpressionUtil.getAttrReference(dimension.getName(),levels[i].getName(),keyNames[j]);
        fieldIndexMap.put(keyName,new DimensionKeyIndex(i,j));
      }
    }
    String[] attrNames=levels[i].getAttributeNames();
    if (attrNames != null) {
      for (int j=0; j < attrNames.length; j++) {
        String attrName=OlapExpressionUtil.getAttrReference(dimension.getName(),levels[i].getName(),attrNames[j]);
        fieldIndexMap.put(attrName,new DimensionAttrIndex(i,j));
      }
    }
  }
}","protected void populateFieldIndexMap(){
  fieldIndexMap=new HashMap();
  ILevel[] levels=dimension.getHierarchy().getLevels();
  for (int i=0; i < levels.length; i++) {
    String[] keyNames=levels[i].getKeyNames();
    if (keyNames != null) {
      for (int j=0; j < keyNames.length; j++) {
        String name=OlapExpressionUtil.getAttrReference(dimension.getName(),levels[i].getName(),keyNames[j]);
        fieldIndexMap.put(name,new DimensionKeyIndex(i,j));
      }
    }
    String[] attrNames=levels[i].getAttributeNames();
    if (attrNames != null) {
      for (int j=0; j < attrNames.length; j++) {
        String attrName=parseAttributeName(attrNames[j]);
        String name=OlapExpressionUtil.getAttrReference(dimension.getName(),levels[i].getName(),attrName);
        fieldIndexMap.put(name,new DimensionAttrIndex(i,j));
      }
    }
  }
}",0.9555822328931572
73468,"public void testToBoolean(){
  Boolean result;
  for (int i=0; i < testObject.length; i++) {
    try {
      result=DataTypeUtil.toBoolean(testObject[i]);
      if (resultBoolean[i] instanceof Exception)       fail(""String_Node_Str"");
      assertEquals(result,resultBoolean[i]);
    }
 catch (    BirtException dteEx) {
      if (!(resultBoolean[i] instanceof Exception))       fail(""String_Node_Str"");
    }
  }
  try {
    assertTrue(DataTypeUtil.toBoolean(new Double(0.1)).booleanValue());
    assertTrue(DataTypeUtil.toBoolean(new Double(-0.1)).booleanValue());
    assertTrue(DataTypeUtil.toBoolean(new Double(1)).booleanValue());
    assertTrue(DataTypeUtil.toBoolean(new Double(1)).booleanValue());
    assertFalse(DataTypeUtil.toBoolean(new Double(0)).booleanValue());
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}","public void testToBoolean(){
  Boolean result;
  for (int i=0; i < testObject.length; i++) {
    System.out.println(i);
    try {
      result=DataTypeUtil.toBoolean(testObject[i]);
      if (resultBoolean[i] instanceof Exception)       fail(""String_Node_Str"");
      assertEquals(result,resultBoolean[i]);
    }
 catch (    BirtException dteEx) {
      if (!(resultBoolean[i] instanceof Exception))       fail(""String_Node_Str"");
    }
  }
  try {
    assertTrue(DataTypeUtil.toBoolean(new Double(0.1)).booleanValue());
    assertTrue(DataTypeUtil.toBoolean(new Double(-0.1)).booleanValue());
    assertTrue(DataTypeUtil.toBoolean(new Double(1)).booleanValue());
    assertTrue(DataTypeUtil.toBoolean(new Double(1)).booleanValue());
    assertFalse(DataTypeUtil.toBoolean(new Double(0)).booleanValue());
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}",0.984201287302516
73469,"protected void setUp() throws Exception {
  super.setUp();
  testObject=new Object[]{new Integer(1),new Integer(0),BigDecimal.valueOf(Integer.MAX_VALUE),BigDecimal.valueOf(Integer.MAX_VALUE + 1),BigDecimal.valueOf(Integer.MIN_VALUE),BigDecimal.valueOf(Integer.MIN_VALUE - 1),BigDecimal.valueOf(0l),Boolean.valueOf(true),Boolean.valueOf(false),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),Double.valueOf(""String_Node_Str""),Double.valueOf(""String_Node_Str""),null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueInputObject=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),String.valueOf(0l),""String_Node_Str"",""String_Node_Str"",((new GregorianCalendar(2004 + 1900,1,1)).getTime()).toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  resultDate=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),null,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultInteger=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),new Integer(1),new Integer(0),new Integer((int)((Date)resultDate[9]).getTime()),new Integer((int)1.1),new Integer(0),null,new Exception(""String_Node_Str""),new Integer(""String_Node_Str""),new Integer(10),new Integer(10),new Integer(10)};
  resultBigDecimal=new Object[]{new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(Integer.MAX_VALUE),new BigDecimal(Integer.MAX_VALUE + 1),new BigDecimal(Integer.MIN_VALUE),new BigDecimal(Integer.MIN_VALUE - 1),new BigDecimal(0),new BigDecimal(1),new BigDecimal(0),new BigDecimal(((Date)resultDate[9]).getTime()),new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),null,new Exception(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(10),new BigDecimal(10),new BigDecimal(10)};
  resultBoolean=new Object[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,Boolean.FALSE,null,new Exception(""String_Node_Str""),Boolean.TRUE,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultDouble=new Object[]{new Double(1),new Double(0),new Double(Integer.MAX_VALUE),new Double(Integer.MAX_VALUE + 1),new Double(Integer.MIN_VALUE),new Double(Integer.MIN_VALUE - 1),new Double(0),new Double(1),new Double(0),new Double(((Date)resultDate[9]).getTime()),new Double(1.1),new Double(0),null,new Exception(""String_Node_Str""),new Double(""String_Node_Str""),new Double(10),new Double(10),new Double(10)};
  resultString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",df.format(resultDate[9]),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  testObjectDecimal=new Object[]{new Double(Double.NaN),new Double(Double.POSITIVE_INFINITY),new Double(Double.NEGATIVE_INFINITY),new Double(Double.MAX_VALUE),new Double(Double.MIN_VALUE)};
  resultObjectDecimal=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new BigDecimal(new Double(Double.MAX_VALUE).toString()),new BigDecimal(new Double(Double.MIN_VALUE).toString())};
  testObjectDouble=new Object[]{new Float(1)};
  resultObjectDouble=new Object[]{new Double(1)};
}","protected void setUp() throws Exception {
  super.setUp();
  testObject=new Object[]{new Integer(1),new Integer(0),BigDecimal.valueOf(Integer.MAX_VALUE),BigDecimal.valueOf(Integer.MAX_VALUE + 1),BigDecimal.valueOf(Integer.MIN_VALUE),BigDecimal.valueOf(Integer.MIN_VALUE - 1),BigDecimal.valueOf(0l),Boolean.valueOf(true),Boolean.valueOf(false),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),Double.valueOf(""String_Node_Str""),Double.valueOf(""String_Node_Str""),null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueInputObject=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),String.valueOf(0l),""String_Node_Str"",""String_Node_Str"",((new GregorianCalendar(2004 + 1900,1,1)).getTime()).toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  resultDate=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),null,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultInteger=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),new Integer(1),new Integer(0),new Integer((int)((Date)resultDate[9]).getTime()),new Integer((int)1.1),new Integer(0),null,new Exception(""String_Node_Str""),new Integer(""String_Node_Str""),new Integer(10),new Integer(10),new Integer(10)};
  resultBigDecimal=new Object[]{new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(Integer.MAX_VALUE),new BigDecimal(Integer.MAX_VALUE + 1),new BigDecimal(Integer.MIN_VALUE),new BigDecimal(Integer.MIN_VALUE - 1),new BigDecimal(0),new BigDecimal(1),new BigDecimal(0),new BigDecimal(((Date)resultDate[9]).getTime()),new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),null,new Exception(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(10),new BigDecimal(10),new BigDecimal(10)};
  resultBoolean=new Object[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultDouble=new Object[]{new Double(1),new Double(0),new Double(Integer.MAX_VALUE),new Double(Integer.MAX_VALUE + 1),new Double(Integer.MIN_VALUE),new Double(Integer.MIN_VALUE - 1),new Double(0),new Double(1),new Double(0),new Double(((Date)resultDate[9]).getTime()),new Double(1.1),new Double(0),null,new Exception(""String_Node_Str""),new Double(""String_Node_Str""),new Double(10),new Double(10),new Double(10)};
  resultString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",df.format(resultDate[9]),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  testObjectDecimal=new Object[]{new Double(Double.NaN),new Double(Double.POSITIVE_INFINITY),new Double(Double.NEGATIVE_INFINITY),new Double(Double.MAX_VALUE),new Double(Double.MIN_VALUE)};
  resultObjectDecimal=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new BigDecimal(new Double(Double.MAX_VALUE).toString()),new BigDecimal(new Double(Double.MIN_VALUE).toString())};
  testObjectDouble=new Object[]{new Float(1)};
  resultObjectDouble=new Object[]{new Double(1)};
}",0.9982988091664164
73470,"private void computeDateTimeMinMax(){
  int iStep=asInteger(oStep);
  CDateTime cdtMinValue=bMinimumFixed ? asDateTime(oMinFixed) : asDateTime(oMinAuto);
  CDateTime cdtMaxValue=bMaximumFixed ? asDateTime(oMaxFixed) : asDateTime(oMaxAuto);
  if (bMaximumFixed && !bMinimumFixed) {
    oMax=cdtMaxValue;
    double diff=CDateTime.computeDifference(cdtMaxValue,cdtMinValue,iUnit) / iStep;
    int count=(int)diff * iStep;
    if (!ChartUtil.mathEqual(diff,Math.floor(diff))) {
      count+=iStep;
    }
    CDateTime cdtMinValue_new=(CDateTime)cdtMaxValue.clone();
    cdtMinValue_new.add(iUnit,-count);
    oMin=cdtMinValue_new;
  }
 else {
    if (!bMinimumFixed) {
      cdtMinValue.clearBelow(iUnit);
    }
    oMin=cdtMinValue;
    double diff=CDateTime.computeDifference(cdtMaxValue,cdtMinValue,iUnit) / iStep;
    int count=(int)diff * iStep;
    if (!ChartUtil.mathEqual(diff,Math.floor(diff))) {
      count+=iStep;
    }
    CDateTime cdtMaxValue_new=(CDateTime)cdtMinValue.clone();
    cdtMaxValue_new.add(iUnit,count);
    oMax=cdtMaxValue_new;
  }
  oMinAuto=null;
  oMaxAuto=null;
}","private void computeDateTimeMinMax(){
  int iStep=asInteger(oStep);
  CDateTime cdtMinValue=bMinimumFixed ? asDateTime(oMinFixed) : asDateTime(oMinAuto);
  CDateTime cdtMaxValue=bMaximumFixed ? asDateTime(oMaxFixed) : asDateTime(oMaxAuto);
  if (bMaximumFixed && !bMinimumFixed) {
    oMax=cdtMaxValue;
    double diff=CDateTime.computeDifference(cdtMaxValue,cdtMinValue,iUnit) / iStep;
    int count=(int)diff * iStep;
    if (!ChartUtil.mathEqual(diff,Math.floor(diff))) {
      count+=iStep;
    }
    CDateTime cdtMinValue_new=(CDateTime)cdtMaxValue.clone();
    cdtMinValue_new.add(iUnit,-count);
    oMin=cdtMinValue_new;
  }
 else {
    if (!bMinimumFixed) {
      cdtMinValue=cdtMinValue.backward(iUnit,iStep);
      cdtMinValue.clearBelow(iUnit);
      if (!bMaximumFixed) {
        cdtMaxValue=cdtMaxValue.forward(iUnit,iStep);
        cdtMaxValue.clearBelow(iUnit);
      }
    }
    oMin=cdtMinValue;
    double diff=CDateTime.computeDifference(cdtMaxValue,cdtMinValue,iUnit) / iStep;
    int count=(int)diff * iStep;
    if (!ChartUtil.mathEqual(diff,Math.floor(diff))) {
      count+=iStep;
    }
    CDateTime cdtMaxValue_new=(CDateTime)cdtMinValue.clone();
    cdtMaxValue_new.add(iUnit,count);
    oMax=cdtMaxValue_new;
  }
  oMinAuto=null;
  oMaxAuto=null;
}",0.9232067510548524
73471,"/** 
 * Checks if the datetime data point entry is in the range of plot area. Default result is 0, inside.
 * @param entry data point entry
 * @param min scale min
 * @param max scale max
 * @return int indicates if data point entry is in the range of plot area. 0inside, 1 left side, 2 outside
 */
protected final int checkEntryInDatetimeRange(CDateTime entry,Object min,Object max){
  int iOutside=0;
  CDateTime cmin=Methods.asDateTime(min);
  CDateTime cmax=Methods.asDateTime(max);
  if (entry.before(cmin)) {
    iOutside=1;
  }
 else   if (entry.after(cmax)) {
    iOutside=2;
  }
  return iOutside;
}","/** 
 * Checks if the datetime data point entry is in the range of plot area. Default result is 0, inside.
 * @param entry data point entry
 * @param min scale min
 * @param max scale max
 * @return int indicates if data point entry is in the range of plot area. 0inside, 1 left side, 2 outside
 */
protected final int checkEntryInDatetimeRange(CDateTime entry,Object min,Object max){
  int iOutside=0;
  CDateTime cmin=Methods.asDateTime(min);
  CDateTime cmax=Methods.asDateTime(max);
  if (entry.before(cmin)) {
    if (CDateTime.getDifference(entry,cmin) != 0) {
      iOutside=1;
    }
  }
 else   if (entry.after(cmax)) {
    if (CDateTime.getDifference(entry,cmax) != 0) {
      iOutside=2;
    }
  }
  return iOutside;
}",0.9101796407185628
73472,"public DataElement getDataElement(){
  if (!btnCheck.getSelection()) {
    return null;
  }
  Calendar calendar=Calendar.getInstance();
  calendar.set(pickerDate.getYear(),pickerDate.getMonth(),pickerDate.getDay(),pickerTime.getHours(),pickerTime.getMinutes(),pickerTime.getSeconds());
  return DateTimeDataElementImpl.create(calendar);
}","public DataElement getDataElement(){
  if (!btnCheck.getSelection()) {
    return null;
  }
  Calendar calendar=Calendar.getInstance();
  calendar.set(pickerDate.getYear(),pickerDate.getMonth(),pickerDate.getDay(),pickerTime.getHours(),pickerTime.getMinutes(),pickerTime.getSeconds());
  calendar.set(calendar.MILLISECOND,0);
  return DateTimeDataElementImpl.create(calendar);
}",0.9441340782122905
73473,"/** 
 * Returns <code>true</code> if current index is in a comment line, <code>false</code> otherwise.
 * @param index the current index.
 * @return <code>true</code> if current index is in a comment line,<code>false</code> otherwise.
 */
private boolean isCommentLine(int index){
  int start=index;
  while (start > 0 && script.charAt(start - 1) != '\n') {
    if (start < script.length()) {
      if (script.charAt(start) == '/' && script.charAt(start - 1) == '/') {
        return true;
      }
    }
    start--;
  }
  return false;
}","/** 
 * Returns <code>true</code> if current index is in a comment line, <code>false</code> otherwise.
 * @param index the current index.
 * @return <code>true</code> if current index is in a comment line,<code>false</code> otherwise.
 */
private boolean isCommentLine(int index){
  int start=index;
  while (start >= 0 && script.charAt(start) != '\n') {
    if (start + 1 < script.length()) {
      if (script.charAt(start) == '/' && script.charAt(start + 1) == '/') {
        return true;
      }
    }
    start--;
  }
  return false;
}",0.989786443825441
73474,"/** 
 * @param helper
 * @param currentIterator
 */
DummyJSResultSetRow(IExecutorHelper helper,IResultIterator currentIterator){
  this.helper=helper;
  this.currentIterator=currentIterator;
}","/** 
 * @param parentHelper
 * @param currentIterator
 */
DummyJSResultSetRow(IExecutorHelper parentHelper,IResultIterator currentIterator){
  this.parentHelper=parentHelper;
  this.currentIterator=currentIterator;
}",0.9215686274509804
73475,"public Object get(String name,Scriptable scope){
  if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name) && this.helper != null) {
    return this.helper.getScriptable();
  }
  try {
    return this.currentIterator.getValue(name);
  }
 catch (  BirtException e) {
    return e;
  }
}","public Object get(String name,Scriptable scope){
  if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name)) {
    if (this.parentHelper == null) {
      return new DataExceptionMocker(new DataException(ResourceConstants.NO_OUTER_RESULTS_EXIST));
    }
 else     return this.parentHelper.getScriptable();
  }
  try {
    return this.currentIterator.getValue(name);
  }
 catch (  BirtException e) {
    return e;
  }
}",0.4100418410041841
73476,"/** 
 * Constructor 
 * @param delta
 * @param propertyName
 */
public MoveGuideCommand(int delta,String propertyName){
  super();
  pDelta=delta;
  this.propertyName=propertyName;
}","/** 
 * Constructor
 * @param delta
 * @param propertyName
 */
public MoveGuideCommand(int delta,String propertyName){
  super();
  pDelta=delta;
  this.propertyName=propertyName;
}",0.9972451790633609
73477,"/** 
 * Ececute this command 
 */
public void execute(){
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  MasterPageHandle page=SessionHandleAdapter.getInstance().getMasterPageHandle();
  String unit=handle.getDefaultUnits();
  if (unit == null) {
    unit=DesignChoiceConstants.UNITS_IN;
  }
  double value=MetricUtility.pixelToPixelInch(pDelta);
  if (value < 0.0) {
    value=0.0;
  }
  DimensionValue dim=DimensionUtil.convertTo(value,DesignChoiceConstants.UNITS_IN,unit);
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"" + page.getDisplayLabel() + ""String_Node_Str""+ propertyName+ ""String_Node_Str""+ dim.toDisplayString());
  }
  try {
    page.setProperty(propertyName,dim);
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
}","/** 
 * Ececute this command
 */
public void execute(){
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  MasterPageHandle page=SessionHandleAdapter.getInstance().getFirstMasterPageHandle(handle);
  String unit=handle.getDefaultUnits();
  if (unit == null) {
    unit=DesignChoiceConstants.UNITS_IN;
  }
  double value=MetricUtility.pixelToPixelInch(pDelta);
  if (value < 0.0) {
    value=0.0;
  }
  DimensionValue dim=DimensionUtil.convertTo(value,DesignChoiceConstants.UNITS_IN,unit);
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"" + page.getDisplayLabel() + ""String_Node_Str""+ propertyName+ ""String_Node_Str""+ dim.toDisplayString());
  }
  try {
    page.setProperty(propertyName,dim);
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
}",0.9942307692307693
73478,"/** 
 * @deprecated
 * @return Command stack of current session.
 */
public CommandStack getCommandStack(){
  if (getReportDesignHandle() != null) {
    return getReportDesignHandle().getCommandStack();
  }
  return null;
}","public CommandStack getCommandStack(ModuleHandle handle){
  if (handle != null) {
    return handle.getCommandStack();
  }
  return null;
}",0.6519337016574586
73479,"/** 
 * @deprecated Gets the first MasterPageHandle
 * @param handle
 * @return
 */
public MasterPageHandle getMasterPageHandle(ModuleHandle handle){
  SlotHandle slotHandle=handle.getMasterPages();
  Iterator iter=slotHandle.iterator();
  return (MasterPageHandle)iter.next();
}","/** 
 * Returns the first master page handle in given module
 * @deprecated use {@link #getFirstMasterPageHandle(ModuleHandle)}
 */
public MasterPageHandle getMasterPageHandle(ModuleHandle handle){
  return getFirstMasterPageHandle(handle);
}",0.3800383877159309
73480,"/** 
 * Generates GroupElementHandle for given model list.
 * @param modelList
 * @return
 */
public static GroupElementHandle getGroupElementHandle(List modelList){
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return GroupElementFactory.newGroupElement(SessionHandleAdapter.getInstance().getReportDesignHandle(),Collections.EMPTY_LIST);
  }
  return GroupElementFactory.newGroupElement(SessionHandleAdapter.getInstance().getReportDesignHandle(),modelList);
}","/** 
 * Generates GroupElementHandle for given model list.
 * @param modelList
 * @return
 */
public static GroupElementHandle getGroupElementHandle(List modelList){
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (handle == null) {
    return GroupElementFactory.newGroupElement(handle,Collections.EMPTY_LIST);
  }
  return GroupElementFactory.newGroupElement(handle,modelList);
}",0.700218818380744
73481,"/** 
 * Get styles
 * @param comparator
 * @return return styles list sortted with given comparator.
 */
public static Iterator getLocalStyles(Comparator comparator){
  List styles=null;
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() instanceof ReportDesignHandle) {
    styles=SessionHandleAdapter.getInstance().getReportDesignHandle().getStyles().getContents();
  }
 else   if (SessionHandleAdapter.getInstance().getReportDesignHandle() instanceof LibraryHandle) {
    styles=new ArrayList();
    ThemeHandle theme=((LibraryHandle)SessionHandleAdapter.getInstance().getReportDesignHandle()).getTheme();
    if (theme != null) {
      styles.addAll(theme.getAllStyles());
    }
  }
  Object[] stylesArray=(styles == null ? new Object[0] : styles.toArray());
  if (comparator != null) {
    Arrays.sort(stylesArray,comparator);
  }
  return Arrays.asList(stylesArray).iterator();
}","/** 
 * Get styles
 * @param comparator
 * @return return styles list sortted with given comparator.
 */
public static Iterator getLocalStyles(Comparator comparator){
  List styles=null;
  ModuleHandle module=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (module instanceof ReportDesignHandle) {
    styles=module.getStyles().getContents();
  }
 else   if (module instanceof LibraryHandle) {
    styles=new ArrayList();
    ThemeHandle theme=((LibraryHandle)module).getTheme();
    if (theme != null) {
      styles.addAll(theme.getAllStyles());
    }
  }
  Object[] stylesArray=(styles == null ? new Object[0] : styles.toArray());
  if (comparator != null) {
    Arrays.sort(stylesArray,comparator);
  }
  return Arrays.asList(stylesArray).iterator();
}",0.6949760765550239
73482,"/** 
 * Get styles
 * @param comparator
 * @return return styles list sortted with given comparator.
 */
public static Iterator getStyles(ThemeHandle theme,Comparator comparator){
  List styles=new ArrayList();
  if (theme != null) {
    styles.addAll(theme.getAllStyles());
  }
 else   if (SessionHandleAdapter.getInstance().getReportDesignHandle() instanceof LibraryHandle) {
    styles=new ArrayList();
    theme=((LibraryHandle)SessionHandleAdapter.getInstance().getReportDesignHandle()).getTheme();
    if (theme != null) {
      styles.addAll(theme.getAllStyles());
    }
  }
  Object[] stylesArray=styles.toArray(new Object[styles.size()]);
  if (comparator != null) {
    Arrays.sort(stylesArray,comparator);
  }
  return Arrays.asList(stylesArray).iterator();
}","/** 
 * Get styles
 * @param comparator
 * @return return styles list sortted with given comparator.
 */
public static Iterator getStyles(ThemeHandle theme,Comparator comparator){
  List styles=new ArrayList();
  if (theme != null) {
    styles.addAll(theme.getAllStyles());
  }
 else {
    ModuleHandle module=SessionHandleAdapter.getInstance().getReportDesignHandle();
    if (module instanceof LibraryHandle) {
      styles=new ArrayList();
      theme=((LibraryHandle)module).getTheme();
      if (theme != null) {
        styles.addAll(theme.getAllStyles());
      }
    }
  }
  Object[] stylesArray=styles.toArray(new Object[styles.size()]);
  if (comparator != null) {
    Arrays.sort(stylesArray,comparator);
  }
  return Arrays.asList(stylesArray).iterator();
}",0.7480519480519481
73483,"private DataSetCacheConfig getDataSetCacheConfig(IBaseDataSetDesign dataSetDesign,Map appContect) throws DataException {
  DataSetCacheConfig result=DataSetCacheUtil.getJVMDataSetCacheConfig(appContext,context,session,dataSetDesign);
  if (result == null) {
    result=DataSetCacheUtil.getDteDataSetCacheConfig(queryExecutionHints,dataSetDesign,session);
  }
  return result;
}","private DataSetCacheConfig getDataSetCacheConfig(IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  DataSetCacheConfig result=DataSetCacheUtil.getJVMDataSetCacheConfig(appContext,context,session,dataSetDesign);
  if (result == null) {
    result=DataSetCacheUtil.getDteDataSetCacheConfig(queryExecutionHints,dataSetDesign,session);
  }
  return result;
}",0.9973474801061007
73484,"/** 
 * Clear cache
 * @param dataSourceDesign
 * @param dataSetDesign
 * @throws DataException 
 */
public void clearCache(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign) throws DataException {
  if (dataSourceDesign == null || dataSetDesign == null)   return;
  DataSourceAndDataSet ds=DataSourceAndDataSet.newInstance(dataSourceDesign,dataSetDesign,null);
  switchCacheMap(dataSetDesign);
  cacheMapManager.clearCache(ds);
}","/** 
 * Clear cache
 * @param dataSourceDesign
 * @param dataSetDesign
 * @throws DataException 
 */
public void clearCache(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign) throws DataException {
  if (dataSourceDesign == null || dataSetDesign == null)   return;
  DataSourceAndDataSet ds=DataSourceAndDataSet.newInstance(dataSourceDesign,dataSetDesign,null);
  jvmLevelCacheMapManager.clearCache(ds);
  dteLevelCacheMapManager.clearCache(ds);
}",0.9402823018458196
73485,"/** 
 * Return the cached result metadata. Please note that parameter hint will not change the returned metadata.
 * @return
 * @throws DataException
 */
public IResultMetaData getCachedResultMetadata(IBaseDataSourceDesign dataSource,IBaseDataSetDesign dataSet) throws DataException {
  switchCacheMap(dataSet);
  IResultClass resultClass=this.cacheMapManager.getCachedResultClass(DataSourceAndDataSet.newInstance(dataSource,dataSet,null));
  if (resultClass != null)   return new ResultMetaData(resultClass);
 else   return null;
}","/** 
 * Return the cached result metadata. Please note that parameter hint will not change the returned metadata.
 * @return
 * @throws DataException
 */
public IResultMetaData getCachedResultMetadata(IBaseDataSourceDesign dataSource,IBaseDataSetDesign dataSet) throws DataException {
  IResultClass resultClass=this.jvmLevelCacheMapManager.getCachedResultClass(DataSourceAndDataSet.newInstance(dataSource,dataSet,null));
  if (resultClass != null)   return new ResultMetaData(resultClass);
 else   return null;
}",0.9645933014354068
73486,"protected IBaseQueryResults getCachedQueryResult(IDataQueryDefinition query) throws BirtException {
  Object rsetId=cachedQueryToResults.get(query);
  if (rsetId != null) {
    return dteSession.getQueryResults(String.valueOf(rsetId));
  }
 else {
    return null;
  }
}","protected IBaseQueryResults getCachedQueryResult(IBaseQueryDefinition query,IBaseResultSet outer) throws BirtException {
  Object rsetId=cachedQueryToResults.get(query);
  if (rsetId != null) {
    ((QueryDefinition)query).setQueryResultsID((String)rsetId);
    IBasePreparedQuery pQuery=dteSession.prepare(query,null);
    return dteSession.execute(pQuery,outer == null ? null : outer.getQueryResults(),context.getSharedScope());
  }
 else {
    return null;
  }
}",0.5659863945578232
73487,"protected IBaseResultSet doExecuteQuery(IBaseResultSet parentResult,IQueryDefinition query,boolean useCache) throws BirtException {
  String queryID=(String)queryIDMap.get(query);
  IBaseQueryResults parentQueryResults=null;
  if (parentResult != null) {
    parentQueryResults=parentResult.getQueryResults();
  }
  String resultSetID=loadResultSetID(parentResult,queryID);
  if (resultSetID == null) {
    throw new EngineException(""String_Node_Str"" + query.getClass().getName());
  }
  ((QueryDefinition)query).setQueryResultsID(resultSetID);
  IBasePreparedQuery pQuery=dteSession.prepare(query,null);
  Scriptable scope=context.getSharedScope();
  String pRsetId=null;
  String rowId=""String_Node_Str"";
  IBaseQueryResults dteResults=null;
  QueryResultSet resultSet=null;
  if (parentQueryResults == null) {
    if (useCache) {
      dteResults=getCachedQueryResult(query);
    }
    if (dteResults == null) {
      dteResults=dteSession.execute(pQuery,null,scope);
      if (query.cacheQueryResults()) {
        cachedQueryToResults.put(query,dteResults.getID());
      }
    }
    resultSet=new QueryResultSet(this,context,query,(IQueryResults)dteResults);
  }
 else {
    if (parentResult instanceof QueryResultSet) {
      pRsetId=((QueryResultSet)parentResult).getQueryResultsID();
    }
 else {
      pRsetId=((CubeResultSet)parentResult).getQueryResultsID();
    }
    rowId=parentResult.getRawID();
    if (useCache) {
      dteResults=getCachedQueryResult(query);
    }
    if (dteResults == null) {
      dteResults=dteSession.execute(pQuery,parentQueryResults,scope);
      if (query.cacheQueryResults()) {
        cachedQueryToResults.put(query,dteResults.getID());
      }
    }
    resultSet=new QueryResultSet(this,context,parentResult,(IQueryDefinition)query,(IQueryResults)dteResults);
  }
  resultSet.setBaseRSetID(resultSetID);
  storeDteMetaInfo(pRsetId,rowId,queryID,dteResults.getID());
  return resultSet;
}","protected IBaseResultSet doExecuteQuery(IBaseResultSet parentResult,IQueryDefinition query,boolean useCache) throws BirtException {
  String queryID=(String)queryIDMap.get(query);
  IBaseQueryResults parentQueryResults=null;
  if (parentResult != null) {
    parentQueryResults=parentResult.getQueryResults();
  }
  String resultSetID=loadResultSetID(parentResult,queryID);
  if (resultSetID == null) {
    throw new EngineException(""String_Node_Str"" + query.getClass().getName());
  }
  ((QueryDefinition)query).setQueryResultsID(resultSetID);
  IBasePreparedQuery pQuery=dteSession.prepare(query,null);
  Scriptable scope=context.getSharedScope();
  String pRsetId=null;
  String rowId=""String_Node_Str"";
  IBaseQueryResults dteResults=null;
  QueryResultSet resultSet=null;
  if (parentQueryResults == null) {
    if (useCache) {
      dteResults=getCachedQueryResult(query,parentResult);
    }
    if (dteResults == null) {
      dteResults=dteSession.execute(pQuery,null,scope);
      putCachedQueryResult(query,dteResults.getID());
    }
    resultSet=new QueryResultSet(this,context,query,(IQueryResults)dteResults);
  }
 else {
    if (parentResult instanceof QueryResultSet) {
      pRsetId=((QueryResultSet)parentResult).getQueryResultsID();
    }
 else {
      pRsetId=((CubeResultSet)parentResult).getQueryResultsID();
    }
    rowId=parentResult.getRawID();
    if (useCache) {
      dteResults=getCachedQueryResult(query,parentResult);
    }
    if (dteResults == null) {
      dteResults=dteSession.execute(pQuery,parentQueryResults,scope);
      putCachedQueryResult(query,dteResults.getID());
    }
    resultSet=new QueryResultSet(this,context,parentResult,(IQueryDefinition)query,(IQueryResults)dteResults);
  }
  resultSet.setBaseRSetID(resultSetID);
  storeDteMetaInfo(pRsetId,rowId,queryID,dteResults.getID());
  return resultSet;
}",0.5398416886543536
73488,"protected IBaseResultSet doExecuteQuery(IBaseResultSet parentResultSet,IQueryDefinition query,boolean useCache) throws BirtException {
  IPreparedQuery pQuery=(IPreparedQuery)queryMap.get(query);
  if (pQuery == null) {
    return null;
  }
  Scriptable scope=context.getSharedScope();
  IBaseQueryResults dteResults=null;
  if (useCache) {
    dteResults=getCachedQueryResult(query);
  }
  if (dteResults == null) {
    if (parentResultSet == null) {
      dteResults=dteSession.execute(pQuery,null,scope);
    }
 else {
      dteResults=dteSession.execute(pQuery,parentResultSet.getQueryResults(),scope);
    }
    if (query.cacheQueryResults()) {
      cachedQueryToResults.put(query,dteResults.getID());
    }
  }
  if (parentResultSet == null) {
    return new QueryResultSet(this,context,query,(IQueryResults)dteResults);
  }
 else {
    return new QueryResultSet(this,context,parentResultSet,query,(IQueryResults)dteResults);
  }
}","protected IBaseResultSet doExecuteQuery(IBaseResultSet parentResultSet,IQueryDefinition query,boolean useCache) throws BirtException {
  IPreparedQuery pQuery=(IPreparedQuery)queryMap.get(query);
  if (pQuery == null) {
    return null;
  }
  Scriptable scope=context.getSharedScope();
  IBaseQueryResults dteResults=null;
  if (useCache) {
    dteResults=getCachedQueryResult(query,parentResultSet);
  }
  if (dteResults == null) {
    if (parentResultSet == null) {
      dteResults=dteSession.execute(pQuery,null,scope);
    }
 else {
      dteResults=dteSession.execute(pQuery,parentResultSet.getQueryResults(),scope);
    }
    putCachedQueryResult(query,dteResults.getID());
  }
  if (parentResultSet == null) {
    return new QueryResultSet(this,context,query,(IQueryResults)dteResults);
  }
 else {
    return new QueryResultSet(this,context,parentResultSet,query,(IQueryResults)dteResults);
  }
}",0.8073792729245794
73489,"private ISubCubeQueryDefinition createSubCubeQuery() throws BirtException {
  String queryName=""String_Node_Str"";
  CrosstabReportItemHandle xtab=ChartXTabUtil.getXtabContainerCell(handle).getCrosstab();
  LevelViewHandle levelColumn=ChartXTabUtil.getLevel(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE,0);
  LevelViewHandle levelRow=ChartXTabUtil.getLevel(xtab,ICrosstabConstants.ROW_AXIS_TYPE,0);
  if (cm instanceof ChartWithAxes) {
    if (((ChartWithAxes)cm).isTransposed()) {
      int rowLevelCount=ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.ROW_AXIS_TYPE);
      if (levelColumn != null) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
        if (levelRow != null && rowLevelCount > 1) {
          subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
        }
        return subCubeQuery;
      }
 else       if (rowLevelCount > 1) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
        return subCubeQuery;
      }
    }
 else {
      int columnLevelCount=ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE);
      if (levelRow != null) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
        if (levelColumn != null && columnLevelCount > 1) {
          subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
        }
        return subCubeQuery;
      }
 else       if (columnLevelCount > 1) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
        return subCubeQuery;
      }
    }
  }
  return null;
}","private ISubCubeQueryDefinition createSubCubeQuery() throws BirtException {
  String queryName=ChartReportItemConstants.CHART_SUBQUERY;
  AggregationCellHandle containerCell=ChartXTabUtil.getXtabContainerCell(handle);
  if (containerCell == null) {
    return null;
  }
  CrosstabReportItemHandle xtab=containerCell.getCrosstab();
  LevelViewHandle levelColumn=ChartXTabUtil.getLevel(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE,0);
  LevelViewHandle levelRow=ChartXTabUtil.getLevel(xtab,ICrosstabConstants.ROW_AXIS_TYPE,0);
  if (cm instanceof ChartWithAxes) {
    if (((ChartWithAxes)cm).isTransposed()) {
      int rowLevelCount=ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.ROW_AXIS_TYPE);
      if (levelColumn != null) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
        if (levelRow != null && rowLevelCount > 1) {
          subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
        }
        return subCubeQuery;
      }
 else       if (rowLevelCount > 1) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
        return subCubeQuery;
      }
    }
 else {
      int columnLevelCount=ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE);
      if (levelRow != null) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
        if (levelColumn != null && columnLevelCount > 1) {
          subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
        }
        return subCubeQuery;
      }
 else       if (columnLevelCount > 1) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
        return subCubeQuery;
      }
    }
  }
  return null;
}",0.9568391668456088
73490,"private void addAggregateOn(ICubeQueryDefinition cubeQuery,CubeHandle cube,Binding binding,List lstAggOn) throws BirtException {
  for (Iterator iAggs=lstAggOn.iterator(); iAggs.hasNext(); ) {
    String aggOn=(String)iAggs.next();
    String[] levelNames=CubeUtil.splitLevelName(aggOn);
    String dimExpr=ExpressionUtil.createJSDimensionExpression(levelNames[0],levelNames[1]);
    binding.addAggregateOn(dimExpr);
    bindSeriesQuery(QueryImpl.create(dimExpr),cubeQuery,cube);
  }
}","private void addAggregateOn(Binding binding,List lstAggOn,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator iAggs=lstAggOn.iterator(); iAggs.hasNext(); ) {
    String aggOn=(String)iAggs.next();
    String[] levelNames=CubeUtil.splitLevelName(aggOn);
    String dimExpr=ExpressionUtil.createJSDimensionExpression(levelNames[0],levelNames[1]);
    binding.addAggregateOn(dimExpr);
    if (cubeQuery != null && cube != null) {
      bindSeriesQuery(QueryImpl.create(dimExpr),cubeQuery,cube);
    }
  }
}",0.8895405669599218
73491,"private void initBindings(ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator bindings=ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext(); ) {
    ComputedColumnHandle column=(ComputedColumnHandle)bindings.next();
    Binding binding=new Binding(column.getName());
    binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
    binding.setExpression(new ScriptExpression(column.getExpression()));
    List lstAggOn=column.getAggregateOnList();
    if (!lstAggOn.isEmpty()) {
      addAggregateOn(cubeQuery,cube,binding,lstAggOn);
      binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
    }
    registeredBindings.put(ExpressionUtil.createJSDataExpression(column.getName()),binding);
    registeredQueries.put(binding.getBindingName(),column.getExpression());
  }
}","private void initBindings(ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator bindings=ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext(); ) {
    ComputedColumnHandle column=(ComputedColumnHandle)bindings.next();
    Binding binding=new Binding(column.getName());
    binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
    binding.setExpression(new ScriptExpression(column.getExpression()));
    List lstAggOn=column.getAggregateOnList();
    if (!lstAggOn.isEmpty()) {
      addAggregateOn(binding,lstAggOn,cubeQuery,cube);
      binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
    }
    registeredBindings.put(ExpressionUtil.createJSDataExpression(column.getName()),binding);
    registeredQueries.put(binding.getBindingName(),column.getExpression());
  }
}",0.9820485744456178
73492,"public Object load(){
  if (DEUtil.getInputSize(input) != 1)   return null;
  DataSetHandle dataset=(DataSetHandle)((TabularCubeHandle)DEUtil.getInputFirstElement(input)).getDataSet();
  if (dataset != null)   return dataset.getName();
 else   return ""String_Node_Str"";
}","public Object load(){
  if (DEUtil.getInputSize(input) != 1)   return null;
  DataSetHandle dataset=((TabularCubeHandle)DEUtil.getInputFirstElement(input)).getDataSet();
  if (dataset != null)   return dataset.getName();
 else   return ""String_Node_Str"";
}",0.9715370018975332
73493,"private TreeItem getItem(String text){
  TreeItem topNode=(TreeItem)levelViewer.getTree().getItem(0);
  do {
    if (text.equals(topNode.getData()))     return topNode;
    topNode=topNode.getItem(0);
  }
 while (topNode.getItemCount() > 0);
  if (text.equals(topNode.getData()))   return topNode;
 else   return null;
}","private TreeItem getItem(String text){
  TreeItem topNode=levelViewer.getTree().getItem(0);
  do {
    if (text.equals(topNode.getData()))     return topNode;
    topNode=topNode.getItem(0);
  }
 while (topNode.getItemCount() > 0);
  if (text.equals(topNode.getData()))   return topNode;
 else   return null;
}",0.984126984126984
73494,"private void initDialog(){
  nameText.setText(hierarchy.getContainer().getName());
  if (!isNew) {
    if (((DimensionHandle)hierarchy.getContainer()).isTimeType()) {
      dateButton.setSelection(true);
      handleButtonSelection(dateButton);
    }
 else {
      regularButton.setSelection(true);
      handleButtonSelection(regularButton);
    }
  }
 else {
    dateButton.setSelection(true);
    handleButtonSelection(dateButton);
  }
  if (!isNew) {
    WidgetUtil.setExcludeGridData(regularButton,true);
    WidgetUtil.setExcludeGridData(dateButton,true);
  }
  if (!isNew && !((DimensionHandle)hierarchy.getContainer()).isTimeType())   levelViewer.getTree().setVisible(false);
  levelViewer.setInput(getDateTypeNames(getLevelTypesByDateType()));
  levelViewer.expandAll();
  TreeItem topNode=(TreeItem)levelViewer.getTree().getItem(0);
  do {
    if (levelList.contains(topNode.getData()))     topNode.setChecked(true);
    topNode=topNode.getItem(0);
  }
 while (topNode.getItemCount() > 0);
  if (levelList.contains(topNode.getData()))   topNode.setChecked(true);
  checkOKButtonStatus();
}","private void initDialog(){
  nameText.setText(hierarchy.getContainer().getName());
  if (!isNew) {
    if (((DimensionHandle)hierarchy.getContainer()).isTimeType()) {
      dateButton.setSelection(true);
      handleButtonSelection(dateButton);
    }
 else {
      regularButton.setSelection(true);
      handleButtonSelection(regularButton);
    }
  }
 else {
    dateButton.setSelection(true);
    handleButtonSelection(dateButton);
  }
  if (!isNew) {
    WidgetUtil.setExcludeGridData(regularButton,true);
    WidgetUtil.setExcludeGridData(dateButton,true);
  }
  if (!isNew && !((DimensionHandle)hierarchy.getContainer()).isTimeType())   levelViewer.getTree().setVisible(false);
  levelViewer.setInput(getDateTypeNames(getLevelTypesByDateType()));
  levelViewer.expandAll();
  TreeItem topNode=levelViewer.getTree().getItem(0);
  do {
    if (levelList.contains(topNode.getData()))     topNode.setChecked(true);
    topNode=topNode.getItem(0);
  }
 while (topNode.getItemCount() > 0);
  if (levelList.contains(topNode.getData()))   topNode.setChecked(true);
  checkOKButtonStatus();
}",0.9954296160877514
73495,"public static String getType(Object val){
  if (val instanceof Number) {
    return Data.NUMBER;
  }
 else   if (val instanceof Date) {
    return Data.DATE;
  }
 else   if (val instanceof Calendar) {
    return Data.CALENDAR;
  }
 else   if (val instanceof CDateTime) {
    return Data.CDATETIME;
  }
 else {
    return Data.STRING;
  }
}","public static String getType(Object val){
  if (val instanceof Number) {
    if (isNumber(val.toString())) {
      return Data.NUMBER;
    }
 else {
      return Data.STRING;
    }
  }
 else   if (val instanceof Date) {
    return Data.DATE;
  }
 else   if (val instanceof Calendar) {
    return Data.CALENDAR;
  }
 else   if (val instanceof CDateTime) {
    return Data.CDATETIME;
  }
 else {
    return Data.STRING;
  }
}",0.889763779527559
73496,"public static boolean isNumber(String val){
  NumberFormat nf=NumberFormat.getInstance();
  try {
    if (nf.parse(val).toString().length() == val.length()) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
}","public static boolean isNumber(String val){
  try {
    new BigDecimal(val);
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}",0.6394230769230769
73497,"/** 
 * @param aggregations
 * @param resultSet
 * @param levelFilterList
 * @throws DataException
 * @throws IOException
 */
private void applyAggrFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,List levelFilterList) throws DataException, IOException {
  for (Iterator i=aggrFilters.iterator(); i.hasNext(); ) {
    AggrFilterDefinition filter=(AggrFilterDefinition)i.next();
    for (int j=0; !isEmptyXtab && j < aggregations.length; j++) {
      if (aggregations[j].getAggregationFunctions() != null && FilterUtil.isEqualLevels(aggregations[j].getLevels(),filter.getAggrLevels())) {
        applyAggrFilter(aggregations,resultSet,j,filter,levelFilterList);
      }
    }
  }
}","/** 
 * @param aggregations
 * @param resultSet
 * @param levelFilterList
 * @throws DataException
 * @throws IOException
 */
private void applyAggrFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,List levelFilterList) throws DataException, IOException {
  for (Iterator i=aggrFilters.iterator(); i.hasNext(); ) {
    AggrFilterDefinition filter=(AggrFilterDefinition)i.next();
    for (int j=0; !isEmptyXtab && j < aggregations.length; j++) {
      if (aggregations[j].getAggregationFunctions() != null && isMatch(aggregations[j],resultSet[j],filter)) {
        applyAggrFilter(resultSet[j],filter,levelFilterList);
      }
    }
  }
}",0.9040697674418604
73498,"/** 
 * @param aggregations
 * @param resultSet
 * @param j
 * @param filter
 * @param levelFilters
 * @throws IOException
 * @throws DataException
 */
private void applyAggrFilter(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,int j,AggrFilterDefinition filter,List levelFilters) throws DataException, IOException {
  DimLevel targetLevel=filter.getTargetLevel();
  ILevel[] levelsOfDimension=getLevelsOfDimension(targetLevel.getDimensionName());
  int targetIndex=FilterUtil.getTargetLevelIndex(levelsOfDimension,targetLevel.getLevelName());
  List selKeyValueList=new ArrayList();
  Member[] preMembers=null;
  IJSDimensionFilterHelper filterHelper=(IJSDimensionFilterHelper)filter.getFilterHelper();
  AggregationRowAccessor row4filter=new AggregationRowAccessor(resultSet[j]);
  for (int k=0; k < resultSet[j].length(); k++) {
    resultSet[j].seek(k);
    boolean isSelect=filterHelper.evaluateFilter(row4filter);
    if (isSelect) {
      Member[] members=getTargetDimMembers(targetLevel.getDimensionName(),resultSet[j]);
      if (preMembers != null && !FilterUtil.shareParentLevels(members,preMembers,targetIndex)) {
        LevelFilter levelFilter=toLevelFilter(targetLevel,selKeyValueList,preMembers,filterHelper);
        levelFilters.add(levelFilter);
        selKeyValueList.clear();
      }
      int levelIndex=resultSet[j].getLevelIndex(targetLevel);
      Object[] levelKeyValue=resultSet[j].getLevelKeyValue(levelIndex);
      if (levelKeyValue != null && levelKeyValue[0] != null)       selKeyValueList.add(levelKeyValue);
      preMembers=members;
    }
  }
  if (preMembers == null) {
    isEmptyXtab=true;
    return;
  }
  if (!selKeyValueList.isEmpty()) {
    LevelFilter levelFilter=toLevelFilter(targetLevel,selKeyValueList,preMembers,filterHelper);
    levelFilters.add(levelFilter);
  }
}","/** 
 * @param resultSet
 * @param filter
 * @param levelFilters
 * @throws IOException
 * @throws DataException
 */
private void applyAggrFilter(IAggregationResultSet resultSet,AggrFilterDefinition filter,List levelFilters) throws DataException, IOException {
  DimLevel targetLevel=filter.getTargetLevel();
  ILevel[] levelsOfDimension=getLevelsOfDimension(targetLevel.getDimensionName());
  int targetIndex=FilterUtil.getTargetLevelIndex(levelsOfDimension,targetLevel.getLevelName());
  List selKeyValueList=new ArrayList();
  Member[] preMembers=null;
  IJSDimensionFilterHelper filterHelper=(IJSDimensionFilterHelper)filter.getFilterHelper();
  AggregationRowAccessor row4filter=new AggregationRowAccessor(resultSet);
  for (int k=0; k < resultSet.length(); k++) {
    resultSet.seek(k);
    boolean isSelect=filterHelper.evaluateFilter(row4filter);
    if (isSelect) {
      Member[] members=getTargetDimMembers(targetLevel.getDimensionName(),resultSet);
      if (preMembers != null && !FilterUtil.shareParentLevels(members,preMembers,targetIndex)) {
        LevelFilter levelFilter=toLevelFilter(targetLevel,selKeyValueList,preMembers,filterHelper);
        levelFilters.add(levelFilter);
        selKeyValueList.clear();
      }
      int levelIndex=resultSet.getLevelIndex(targetLevel);
      Object[] levelKeyValue=resultSet.getLevelKeyValue(levelIndex);
      if (levelKeyValue != null && levelKeyValue[0] != null)       selKeyValueList.add(levelKeyValue);
      preMembers=members;
    }
  }
  if (preMembers == null) {
    isEmptyXtab=true;
    return;
  }
  if (!selKeyValueList.isEmpty()) {
    LevelFilter levelFilter=toLevelFilter(targetLevel,selKeyValueList,preMembers,filterHelper);
    levelFilters.add(levelFilter);
  }
}",0.97265625
73499,"/** 
 * Swap two consecutive entries
 * @param iIndex1
 * @param iIndex2
 */
private final void swap(int iIndex1,int iIndex2){
  final Object o1=elPaletteEntries1.get(iIndex1);
  final Object o2=elPaletteEntries1.get(iIndex2);
  if (iIndex1 < iIndex2) {
    elPaletteEntries1.remove(iIndex2);
    elPaletteEntries1.add(iIndex1,o2);
    elPaletteEntries1.remove(iIndex2);
    elPaletteEntries1.add(iIndex2,o1);
  }
 else {
    elPaletteEntries1.remove(iIndex1);
    elPaletteEntries1.add(iIndex2,o1);
    elPaletteEntries1.remove(iIndex1);
    elPaletteEntries1.add(iIndex1,o2);
  }
  if (iSelectedIndex == iIndex1) {
    iSelectedIndex=iIndex2;
  }
 else   if (iSelectedIndex == iIndex2) {
    iSelectedIndex=iIndex1;
  }
  if (vSeriesDefns != null) {
    int index1=iIndex1;
    int index2=iIndex2;
    for (int i=0; i < vSeriesDefns.length; i++) {
      int size=vSeriesDefns[i].getSeriesPalette().getEntries().size();
      if ((iIndex1 - i) >= 0) {
        index1=iIndex1 - i;
      }
 else {
        index1=size - i + iIndex1;
      }
      if ((iIndex2 - i) >= 0) {
        index2=iIndex2 - i;
      }
 else {
        index2=size - i + iIndex2;
      }
      EList el=vSeriesDefns[i].getSeriesPalette().getEntries();
      final Object o3=el.get(index1);
      final Object o4=el.get(index2);
      if (index1 < index2) {
        el.remove(index2);
        el.remove(index1);
        el.add(index1,o4);
        el.add(index2,o3);
      }
 else {
        el.remove(index1);
        el.remove(index2);
        el.add(index2,o3);
        el.add(index1,o4);
      }
    }
  }
  scrollToView(iSelectedIndex);
  coPaletteEntries.redraw();
}","/** 
 * Swap two consecutive entries
 * @param iIndex1
 * @param iIndex2
 */
private final void swap(int iIndex1,int iIndex2){
  final Object o1=elPaletteEntries1.get(iIndex1);
  final Object o2=elPaletteEntries1.get(iIndex2);
  if (iIndex1 < iIndex2) {
    elPaletteEntries1.remove(iIndex2);
    elPaletteEntries1.add(iIndex1,o2);
    elPaletteEntries1.remove(iIndex2);
    elPaletteEntries1.add(iIndex2,o1);
  }
 else {
    elPaletteEntries1.remove(iIndex1);
    elPaletteEntries1.add(iIndex2,o1);
    elPaletteEntries1.remove(iIndex1);
    elPaletteEntries1.add(iIndex1,o2);
  }
  if (iSelectedIndex == iIndex1) {
    iSelectedIndex=iIndex2;
  }
 else   if (iSelectedIndex == iIndex2) {
    iSelectedIndex=iIndex1;
  }
  if (vSeriesDefns != null) {
    int index1=iIndex1;
    int index2=iIndex2;
    if (isMultiAxes()) {
      int min=Math.min(index1,index2);
      int max=Math.max(index1,index2);
      if (vSeriesDefns.length - 1 < min) {
      }
 else       if (min <= vSeriesDefns.length - 1 && vSeriesDefns.length - 1 < max) {
        vSeriesDefns[min].getSeriesPalette().getEntries().set(0,EcoreUtil.copy((EObject)elPaletteEntries1.get(min)));
      }
 else       if (vSeriesDefns.length - 1 >= max) {
        vSeriesDefns[min].getSeriesPalette().getEntries().set(0,EcoreUtil.copy((EObject)elPaletteEntries1.get(min)));
        vSeriesDefns[max].getSeriesPalette().getEntries().set(0,EcoreUtil.copy((EObject)elPaletteEntries1.get(max)));
      }
    }
 else {
      for (int i=0; i < vSeriesDefns.length; i++) {
        int size=vSeriesDefns[i].getSeriesPalette().getEntries().size();
        if ((iIndex1 - i) >= 0) {
          index1=iIndex1 - i;
        }
 else {
          index1=size - i + iIndex1;
        }
        if ((iIndex2 - i) >= 0) {
          index2=iIndex2 - i;
        }
 else {
          index2=size - i + iIndex2;
        }
        EList el=vSeriesDefns[i].getSeriesPalette().getEntries();
        final Object o3=el.get(index1);
        final Object o4=el.get(index2);
        if (index1 < index2) {
          el.remove(index2);
          el.remove(index1);
          el.add(index1,o4);
          el.add(index2,o3);
        }
 else {
          el.remove(index1);
          el.remove(index2);
          el.add(index2,o3);
          el.add(index1,o4);
        }
      }
    }
  }
  scrollToView(iSelectedIndex);
  coPaletteEntries.redraw();
}",0.6347544253303415
73500,"/** 
 * @param targetLevel
 * @param bindingExpr
 * @param bindings
 * @param rowEdgeExprList
 * @param columnEdgeExprList
 * @return
 * @throws AdapterException
 */
public static List getReferencedLevels(String targetLevel,String bindingExpr,List bindings,List rowEdgeExprList,List columnEdgeExprList) throws AdapterException {
  try {
    List result=new ArrayList();
    DimensionLevel target=getTargetDimLevel(targetLevel);
    String bindingName=getReferencedScriptObject(bindingExpr,""String_Node_Str"");
    if (bindingName == null)     return result;
    IBinding binding=null;
    for (int i=0; i < bindings.size(); i++) {
      IBinding bd=(IBinding)bindings.get(i);
      if (bd.getBindingName().equals(bindingName)) {
        binding=bd;
        break;
      }
    }
    if (binding == null) {
      return result;
    }
    List aggrOns=binding.getAggregatOns();
    boolean isMeasure=false;
    if (aggrOns.size() == 0) {
      isMeasure=getReferencedScriptObject(binding.getExpression(),""String_Node_Str"") != null;
    }
    int candidateEdge=getAxisQualifierEdgeType(rowEdgeExprList,columnEdgeExprList,target);
    if (candidateEdge == -1)     return result;
    if (isMeasure) {
switch (candidateEdge) {
case ICubeQueryDefinition.ROW_EDGE:
        populateLevels(rowEdgeExprList,result);
      break;
case ICubeQueryDefinition.COLUMN_EDGE:
    populateLevels(columnEdgeExprList,result);
  break;
}
}
 else {
for (int i=0; i < aggrOns.size(); i++) {
DimensionLevel dimLevel=getTargetDimLevel(aggrOns.get(i).toString());
result.add(dimLevel);
}
}
return result;
}
 catch (DataException e) {
throw new AdapterException(e.getLocalizedMessage(),e);
}
}","/** 
 * @param targetLevel
 * @param bindingExpr
 * @param bindings
 * @param rowEdgeExprList
 * @param columnEdgeExprList
 * @return
 * @throws AdapterException
 */
public static List getReferencedLevels(String targetLevel,String bindingExpr,List bindings,List rowEdgeExprList,List columnEdgeExprList) throws AdapterException {
  try {
    List result=new ArrayList();
    DimensionLevel target=getTargetDimLevel(targetLevel);
    String bindingName=getReferencedScriptObject(bindingExpr,""String_Node_Str"");
    if (bindingName == null)     return result;
    IBinding binding=null;
    for (int i=0; i < bindings.size(); i++) {
      IBinding bd=(IBinding)bindings.get(i);
      if (bd.getBindingName().equals(bindingName)) {
        binding=bd;
        break;
      }
    }
    if (binding == null) {
      return result;
    }
    List aggrOns=binding.getAggregatOns();
    boolean isMeasure=false;
    if (aggrOns.size() == 0) {
      isMeasure=getReferencedScriptObject(binding.getExpression(),""String_Node_Str"") != null;
    }
    int candidateEdge=getAxisQualifierEdgeType(rowEdgeExprList,columnEdgeExprList,target);
    if (candidateEdge == -1)     return result;
    if (isMeasure) {
switch (candidateEdge) {
case ICubeQueryDefinition.ROW_EDGE:
        populateLevels(rowEdgeExprList,result);
      break;
case ICubeQueryDefinition.COLUMN_EDGE:
    populateLevels(columnEdgeExprList,result);
  break;
}
}
 else {
switch (candidateEdge) {
case ICubeQueryDefinition.ROW_EDGE:
populateAxisLevels(aggrOns,rowEdgeExprList,result);
break;
case ICubeQueryDefinition.COLUMN_EDGE:
populateAxisLevels(aggrOns,columnEdgeExprList,result);
break;
}
}
return result;
}
 catch (DataException e) {
throw new AdapterException(e.getLocalizedMessage(),e);
}
}",0.8411488862837045
73501,"/** 
 * @param rowEdgeList
 * @param columnEdgeList
 * @param target
 * @return
 * @throws AdapterException
 */
private static int getAxisQualifierEdgeType(List rowEdgeList,List columnEdgeList,DimensionLevel target) throws AdapterException {
  if (rowEdgeList != null) {
    for (Iterator i=rowEdgeList.iterator(); i.hasNext(); ) {
      String levelExpr=(String)i.next();
      DimensionLevel level=getTargetDimLevel(levelExpr);
      if (target.getDimensionName().equals(level.getDimensionName())) {
        return ICubeQueryDefinition.ROW_EDGE;
      }
    }
  }
  if (columnEdgeList != null) {
    for (Iterator i=columnEdgeList.iterator(); i.hasNext(); ) {
      String levelExpr=(String)i.next();
      DimensionLevel level=getTargetDimLevel(levelExpr);
      if (target.getDimensionName().equals(level.getDimensionName())) {
        return ICubeQueryDefinition.COLUMN_EDGE;
      }
    }
  }
  return -1;
}","/** 
 * @param rowEdgeList
 * @param columnEdgeList
 * @param target
 * @return
 * @throws AdapterException
 */
private static int getAxisQualifierEdgeType(List rowEdgeList,List columnEdgeList,DimensionLevel target) throws AdapterException {
  if (rowEdgeList != null) {
    for (Iterator i=rowEdgeList.iterator(); i.hasNext(); ) {
      String levelExpr=(String)i.next();
      DimensionLevel level=getTargetDimLevel(levelExpr);
      if (target.getDimensionName().equals(level.getDimensionName())) {
        return ICubeQueryDefinition.COLUMN_EDGE;
      }
    }
  }
  if (columnEdgeList != null) {
    for (Iterator i=columnEdgeList.iterator(); i.hasNext(); ) {
      String levelExpr=(String)i.next();
      DimensionLevel level=getTargetDimLevel(levelExpr);
      if (target.getDimensionName().equals(level.getDimensionName())) {
        return ICubeQueryDefinition.ROW_EDGE;
      }
    }
  }
  return -1;
}",0.6352683461117196
73502,"private ISubCubeQueryDefinition createSubCubeQuery() throws BirtException {
  String queryName=ChartReportItemConstants.CHART_SUBQUERY;
  AggregationCellHandle containerCell=ChartXTabUtil.getXtabContainerCell(handle);
  if (containerCell == null) {
    return null;
  }
  CrosstabReportItemHandle xtab=containerCell.getCrosstab();
  LevelViewHandle levelColumn=ChartXTabUtil.getLevel(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE,0);
  LevelViewHandle levelRow=ChartXTabUtil.getLevel(xtab,ICrosstabConstants.ROW_AXIS_TYPE,0);
  if (cm instanceof ChartWithAxes) {
    if (((ChartWithAxes)cm).isTransposed()) {
      int rowLevelCount=ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.ROW_AXIS_TYPE);
      if (levelColumn != null) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
        if (levelRow != null && rowLevelCount > 1) {
          subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
        }
        return subCubeQuery;
      }
 else       if (rowLevelCount > 1) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
        return subCubeQuery;
      }
    }
 else {
      int columnLevelCount=ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE);
      if (levelRow != null) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
        if (levelColumn != null && columnLevelCount > 1) {
          subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
        }
        return subCubeQuery;
      }
 else       if (columnLevelCount > 1) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
        return subCubeQuery;
      }
    }
  }
  return null;
}","private ISubCubeQueryDefinition createSubCubeQuery() throws BirtException {
  String queryName=ChartReportItemConstants.CHART_SUBQUERY;
  AggregationCellHandle containerCell=ChartXTabUtil.getXtabContainerCell(handle);
  if (containerCell == null) {
    return null;
  }
  CrosstabReportItemHandle xtab=containerCell.getCrosstab();
  int columnLevelCount=ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE);
  int rowLevelCount=ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.ROW_AXIS_TYPE);
  if (cm instanceof ChartWithAxes) {
    if (((ChartWithAxes)cm).isTransposed()) {
      if (columnLevelCount >= 1) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(ChartXTabUtil.getLevel(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE,columnLevelCount - 1).getCubeLevel()));
        if (rowLevelCount > 1) {
          subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(ChartXTabUtil.getLevel(xtab,ICrosstabConstants.ROW_AXIS_TYPE,rowLevelCount - 2).getCubeLevel()));
        }
        return subCubeQuery;
      }
 else       if (rowLevelCount > 1) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(ChartXTabUtil.getLevel(xtab,ICrosstabConstants.ROW_AXIS_TYPE,rowLevelCount - 2).getCubeLevel()));
        return subCubeQuery;
      }
    }
 else {
      if (rowLevelCount >= 1) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(ChartXTabUtil.getLevel(xtab,ICrosstabConstants.ROW_AXIS_TYPE,rowLevelCount - 1).getCubeLevel()));
        if (columnLevelCount > 1) {
          subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(ChartXTabUtil.getLevel(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE,columnLevelCount - 2).getCubeLevel()));
        }
        return subCubeQuery;
      }
 else       if (columnLevelCount > 1) {
        ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(queryName);
        subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(ChartXTabUtil.getLevel(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE,columnLevelCount - 2).getCubeLevel()));
        return subCubeQuery;
      }
    }
  }
  return null;
}",0.5331192292252107
73503,"private void createMeasureMenu(IMenuManager menu,Object firstSelectedObj,IContributionItem beforeThis){
  DesignElementHandle element=null;
  String firstId=beforeThis.getId();
  if (firstSelectedObj instanceof DesignElementHandle) {
    element=(DesignElementHandle)firstSelectedObj;
  }
 else   if (firstSelectedObj instanceof CrosstabCellAdapter) {
    element=((CrosstabCellAdapter)firstSelectedObj).getDesignElementHandle();
  }
  if (element != null) {
    IAction action=new AddMesureViewHandleAction((DesignElementHandle)element);
    menu.insertBefore(firstId,action);
    action=new DeleteMeasureHandleAction((DesignElementHandle)element);
    menu.insertBefore(firstId,action);
  }
}","private void createMeasureMenu(IMenuManager menu,Object firstSelectedObj,IContributionItem beforeThis){
  DesignElementHandle element=null;
  String firstId=beforeThis.getId();
  if (firstSelectedObj instanceof DesignElementHandle) {
    element=(DesignElementHandle)firstSelectedObj;
  }
 else   if (firstSelectedObj instanceof CrosstabCellAdapter) {
    element=((CrosstabCellAdapter)firstSelectedObj).getDesignElementHandle();
  }
  if (element != null) {
    IAction action=new AddMesureViewHandleAction(element);
    menu.insertBefore(firstId,action);
    action=new DeleteMeasureHandleAction(element);
    menu.insertBefore(firstId,action);
  }
}",0.8469539375928677
73504,"private void createLevelMenu(IMenuManager menu,Object firstSelectedObj,IContributionItem beforeThis){
  DesignElementHandle element=null;
  if (firstSelectedObj instanceof DesignElementHandle) {
    element=(DesignElementHandle)firstSelectedObj;
  }
 else   if (firstSelectedObj instanceof CrosstabCellAdapter) {
    element=((CrosstabCellAdapter)firstSelectedObj).getDesignElementHandle();
  }
  String firstId=beforeThis.getId();
  if (element != null) {
    IAction action=new AddLevelHandleAction((DesignElementHandle)element);
    menu.insertBefore(firstId,action);
    action=new AddSubTotalAction((DesignElementHandle)element);
    menu.insertBefore(firstId,action);
    action=new DeleteDimensionViewHandleAction((DesignElementHandle)element);
    menu.insertBefore(firstId,action);
  }
}","private void createLevelMenu(IMenuManager menu,Object firstSelectedObj,IContributionItem beforeThis){
  DesignElementHandle element=null;
  if (firstSelectedObj instanceof DesignElementHandle) {
    element=(DesignElementHandle)firstSelectedObj;
  }
 else   if (firstSelectedObj instanceof CrosstabCellAdapter) {
    element=((CrosstabCellAdapter)firstSelectedObj).getDesignElementHandle();
  }
  String firstId=beforeThis.getId();
  if (element != null) {
    IAction action=new AddLevelHandleAction(element);
    menu.insertBefore(firstId,action);
    action=new AddSubTotalAction(element);
    menu.insertBefore(firstId,action);
    action=new DeleteDimensionViewHandleAction(element);
    menu.insertBefore(firstId,action);
  }
}",0.9587965990843688
73505,"/** 
 * @param levelExprList
 * @param result
 */
private static void populateLevels(List levelExprList,List result){
  for (Iterator i=levelExprList.iterator(); i.hasNext(); ) {
    String levelExpr=(String)i.next();
    result.add(getTargetLevel(levelExpr));
  }
}","/** 
 * @param levelExprList
 * @param result
 * @throws AdapterException 
 */
private static void populateLevels(List levelExprList,List result) throws AdapterException {
  for (Iterator i=levelExprList.iterator(); i.hasNext(); ) {
    String levelExpr=(String)i.next();
    result.add(getTargetDimLevel(levelExpr));
  }
}",0.9032258064516128
73506,"/** 
 * Returns the display label of this element. To get the display label of an element, the following step should be done: <ul> <li>The localized display name of this element if set</li> <li>The display property value of this element if set</li> <li>The name of element if set</li> <li>The localized display name of this kind of element, which is defined in metadata, if set</li> <li>The name of this kind of element, which is also defined in metadata </li> </ul> <p> User can also decide at which detail level the display label should be returned. The level could be one of the following 3 options: <ul> <li>USER_LABEL: Only the first 3 steps can be visited, if not found, return null</li> <li>SHORT_LABEL: All the above 5 steps can be visited. This will ensure there will be a return value</li> <li>FULL_LABEL: Besides the return value of SHORT_LABEL, this option says we need to return additional information. To get this, every child element needs to overwrite this method</li> </ul>
 * @param module the module
 * @param level the description level.
 * @return the display label of this element.
 */
public String getDisplayLabel(Module module,int level){
  String displayLabel=ModelUtil.searchForExternalizedValue(this,DISPLAY_NAME_ID_PROP,ThreadResources.getLocale());
  if (StringUtil.isBlank(displayLabel)) {
    displayLabel=getDisplayName();
  }
  if (StringUtil.isBlank(displayLabel)) {
    displayLabel=getNameForDisplayLabel();
  }
  if (level == USER_LABEL) {
    return displayLabel;
  }
  MetaDataDictionary dictionary=MetaDataDictionary.getInstance();
  IElementDefn elementDefn=dictionary.getElement(getElementName());
  if (StringUtil.isBlank(displayLabel)) {
    displayLabel=elementDefn.getDisplayName();
  }
  if (StringUtil.isBlank(displayLabel)) {
    displayLabel=elementDefn.getName();
  }
  return displayLabel;
}","/** 
 * Returns the display label of this element. To get the display label of an element, the following step should be done: <ul> <li>The localized display name of this element if set</li> <li>The display property value of this element if set</li> <li>The name of element if set</li> <li>The localized display name of this kind of element, which is defined in metadata, if set</li> <li>The name of this kind of element, which is also defined in metadata </li> </ul> <p> User can also decide at which detail level the display label should be returned. The level could be one of the following 3 options: <ul> <li>USER_LABEL: Only the first 3 steps can be visited, if not found, return null</li> <li>SHORT_LABEL: All the above 5 steps can be visited. This will ensure there will be a return value</li> <li>FULL_LABEL: Besides the return value of SHORT_LABEL, this option says we need to return additional information. To get this, every child element needs to overwrite this method</li> </ul>
 * @param module the module
 * @param level the description level.
 * @return the display label of this element.
 */
public String getDisplayLabel(Module module,int level){
  String displayLabel=ModelUtil.searchForExternalizedValue(this,DISPLAY_NAME_ID_PROP,ThreadResources.getLocale());
  if (StringUtil.isBlank(displayLabel)) {
    displayLabel=getDisplayName();
  }
  if (StringUtil.isBlank(displayLabel)) {
    displayLabel=getNameForDisplayLabel();
  }
  if (level == USER_LABEL) {
    return displayLabel;
  }
  if (!StringUtil.isBlank(displayLabel))   return displayLabel;
  return getDefnDisplayName(module);
}",0.8792354474370113
73507,"public String getDisplayLabel(Module module,int level){
  String displayLabel=super.getDisplayLabel(module,level);
  if (level == IDesignElementModel.FULL_LABEL) {
    String value=getStringProperty(module,IAutoTextModel.AUTOTEXT_TYPE_PROP);
    if (!StringUtil.isBlank(value)) {
      MetaDataDictionary dictionary=MetaDataDictionary.getInstance();
      IChoiceSet cSet=dictionary.getChoiceSet(DesignChoiceConstants.CHOICE_AUTO_TEXT_TYPE);
      IChoice choice=cSet.findChoice(value);
      if (choice != null) {
        value=choice.getDisplayName();
        value=limitStringLength(value);
        displayLabel+=""String_Node_Str"" + value + ""String_Node_Str"";
      }
    }
  }
  return displayLabel;
}","public String getDisplayLabel(Module module,int level){
  String displayLabel=super.getDisplayLabel(module,level);
  if (level == IDesignElementModel.FULL_LABEL) {
    String value=getStringProperty(module,IAutoTextModel.AUTOTEXT_TYPE_PROP);
    if (!StringUtil.isBlank(value)) {
      String rtnValue=getChoiceDisplayName(value);
      displayLabel+=""String_Node_Str"" + rtnValue + ""String_Node_Str"";
    }
  }
  return displayLabel;
}",0.6017543859649123
73508,"public void switchView(AggregationCellHandle cell){
  try {
    Object content=getFirstContent(cell);
    String exprMeasure=getMeasureBindingExpr(content);
    if (content instanceof DesignElementHandle) {
      ((DesignElementHandle)content).dropAndClear();
    }
    String nameDimRow=null;
    LevelViewHandle levelView=ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.ROW_AXIS_TYPE);
    if (levelView != null) {
      content=getFirstContent(levelView.getCell());
      if (content instanceof DataItemHandle) {
        DataItemHandle dataItemHandle=(DataItemHandle)content;
        nameDimRow=dataItemHandle.getResultSetColumn();
      }
    }
    String nameDimColumn=null;
    levelView=ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.COLUMN_AXIS_TYPE);
    if (levelView != null) {
      content=getFirstContent(levelView.getCell());
      if (content instanceof DataItemHandle) {
        DataItemHandle dataItemHandle=(DataItemHandle)content;
        nameDimColumn=dataItemHandle.getResultSetColumn();
      }
    }
    ExtendedItemHandle chartHandle=cell.getCrosstabHandle().getElementFactory().newExtendedItem(null,ChartReportItemConstants.CHART_EXTENSION_NAME);
    ChartReportItemImpl reportItem=(ChartReportItemImpl)chartHandle.getReportItem();
    ChartWithAxes cm=createDefaultChart(exprMeasure,new String[]{nameDimRow,nameDimColumn});
    reportItem.setModel(cm);
    cell.addContent(chartHandle,0);
    if (cm.isTransposed()) {
      ChartXTabUtil.addAxisChartInXTab(cell,ICrosstabConstants.ROW_AXIS_TYPE,chartHandle);
    }
 else {
      ChartXTabUtil.addAxisChartInXTab(cell,ICrosstabConstants.COLUMN_AXIS_TYPE,chartHandle);
    }
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
}","public void switchView(AggregationCellHandle cell){
  try {
    Object content=getFirstContent(cell);
    String exprMeasure=getMeasureBindingExpr(content);
    if (content instanceof DesignElementHandle) {
      ((DesignElementHandle)content).dropAndClear();
    }
    String nameDimRow=null;
    content=getFirstContent(ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.ROW_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      nameDimRow=dataItemHandle.getResultSetColumn();
    }
    String nameDimColumn=null;
    content=getFirstContent(ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.COLUMN_AXIS_TYPE));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      nameDimColumn=dataItemHandle.getResultSetColumn();
    }
    ExtendedItemHandle chartHandle=cell.getCrosstabHandle().getElementFactory().newExtendedItem(null,ChartReportItemConstants.CHART_EXTENSION_NAME);
    ChartReportItemImpl reportItem=(ChartReportItemImpl)chartHandle.getReportItem();
    ChartWithAxes cm=createDefaultChart(exprMeasure,new String[]{nameDimRow,nameDimColumn});
    reportItem.setModel(cm);
    cell.addContent(chartHandle,0);
    if (cm.isTransposed()) {
      ChartXTabUtil.addAxisChartInXTab(cell,ICrosstabConstants.ROW_AXIS_TYPE,chartHandle);
    }
 else {
      ChartXTabUtil.addAxisChartInXTab(cell,ICrosstabConstants.COLUMN_AXIS_TYPE,chartHandle);
    }
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
}",0.7821958456973294
73509,"public void restoreView(AggregationCellHandle cell){
  try {
    Chart cm=ChartReportItemUtil.getChartFromHandle(getChartHandle(cell));
    ChartXTabUtil.removeAxisChartInXTab(cell,cm);
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
}","public void restoreView(AggregationCellHandle cell){
  try {
    CrosstabCellHandle levelCell=ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.ROW_AXIS_TYPE);
    if (levelCell != null) {
      cell.getCrosstab().setRowHeight(levelCell,null);
    }
    levelCell=ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.COLUMN_AXIS_TYPE);
    if (levelCell != null) {
      cell.getCrosstab().setColumnWidth(levelCell,null);
    }
    Chart cm=ChartReportItemUtil.getChartFromHandle(getChartHandle(cell));
    ChartXTabUtil.removeAxisChartInXTab(cell,cm);
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
}",0.3961038961038961
73510,"public IBaseCubeQueryDefinition createCubeQuery(IDataQueryDefinition parent) throws BirtException {
  CubeHandle cubeHandle=handle.getCube();
  ICubeQueryDefinition cubeQuery=null;
  if (cubeHandle == null) {
    cubeHandle=ChartXTabUtil.getBindingCube(handle);
    if (cubeHandle == null) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.NULL_DATASET,Messages.getString(""String_Node_Str""));
    }
    CrosstabReportItemHandle xtab=ChartXTabUtil.getXtabContainerCell(handle).getCrosstab();
    LevelViewHandle levelColumn=ChartXTabUtil.getInnermostLevelCell(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE);
    LevelViewHandle levelRow=ChartXTabUtil.getInnermostLevelCell(xtab,ICrosstabConstants.ROW_AXIS_TYPE);
    if (cm instanceof ChartWithAxes) {
      if (((ChartWithAxes)cm).isTransposed()) {
        if (levelColumn != null) {
          ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(cubeHandle.getQualifiedName());
          subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
          return subCubeQuery;
        }
 else         if (ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.ROW_AXIS_TYPE) > 1) {
          ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(cubeHandle.getQualifiedName());
          subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
          return subCubeQuery;
        }
      }
 else {
        if (levelRow != null) {
          ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(cubeHandle.getQualifiedName());
          subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
          return subCubeQuery;
        }
 else         if (ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE) > 1) {
          ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(cubeHandle.getQualifiedName());
          subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
          return subCubeQuery;
        }
      }
    }
  }
  cubeQuery=ChartXTabUtil.getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName());
  initBindings(cubeQuery,cubeHandle);
  List sdList=getAllSeriesDefinitions(cm);
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    List queryList=sd.getDesignTimeSeries().getDataDefinition();
    for (int j=0; j < queryList.size(); j++) {
      Query query=(Query)queryList.get(j);
      bindSeriesQuery(query,cubeQuery,cubeHandle);
    }
    bindSeriesQuery(sd.getQuery(),cubeQuery,cubeHandle);
  }
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    addSorting(cubeQuery,cubeHandle,sd,i);
  }
  addCubeFilter(cubeQuery);
  return cubeQuery;
}","public IBaseCubeQueryDefinition createCubeQuery(IDataQueryDefinition parent) throws BirtException {
  CubeHandle cubeHandle=handle.getCube();
  ICubeQueryDefinition cubeQuery=null;
  if (cubeHandle == null) {
    cubeHandle=ChartXTabUtil.getBindingCube(handle);
    if (cubeHandle == null) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.NULL_DATASET,Messages.getString(""String_Node_Str""));
    }
    CrosstabReportItemHandle xtab=ChartXTabUtil.getXtabContainerCell(handle).getCrosstab();
    LevelViewHandle levelColumn=ChartXTabUtil.getInnermostLevel(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE);
    LevelViewHandle levelRow=ChartXTabUtil.getInnermostLevel(xtab,ICrosstabConstants.ROW_AXIS_TYPE);
    if (cm instanceof ChartWithAxes) {
      if (((ChartWithAxes)cm).isTransposed()) {
        if (levelColumn != null) {
          ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(cubeHandle.getQualifiedName());
          subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
          return subCubeQuery;
        }
 else         if (ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.ROW_AXIS_TYPE) > 1) {
          ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(cubeHandle.getQualifiedName());
          subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
          return subCubeQuery;
        }
      }
 else {
        if (levelRow != null) {
          ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(cubeHandle.getQualifiedName());
          subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
          return subCubeQuery;
        }
 else         if (ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE) > 1) {
          ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(cubeHandle.getQualifiedName());
          subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
          return subCubeQuery;
        }
      }
    }
  }
  cubeQuery=ChartXTabUtil.getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName());
  initBindings(cubeQuery,cubeHandle);
  List sdList=getAllSeriesDefinitions(cm);
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    List queryList=sd.getDesignTimeSeries().getDataDefinition();
    for (int j=0; j < queryList.size(); j++) {
      Query query=(Query)queryList.get(j);
      bindSeriesQuery(query,cubeQuery,cubeHandle);
    }
    bindSeriesQuery(sd.getQuery(),cubeQuery,cubeHandle);
  }
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    addSorting(cubeQuery,cubeHandle,sd,i);
  }
  addCubeFilter(cubeQuery);
  return cubeQuery;
}",0.9986733001658374
73511,"protected Bounds computeBounds() throws ChartException {
  final Bounds originalBounds=cm.getBlock().getBounds();
  Bounds bounds=(Bounds)EcoreUtil.copy(originalBounds);
  try {
    AggregationCellHandle xtabCell=ChartXTabUtil.getXtabContainerCell(handle);
    if (xtabCell != null) {
      if (xtabCell.getSpanOverOnColumn() != null) {
        CrosstabCellHandle columnCell=xtabCell.getCrosstab().getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,0).getLevel(0).getCell();
        double dWidth=ChartReportItemUtil.convertToPoints(xtabCell.getCrosstab().getColumnWidth(columnCell));
        double dLeftBorder=ChartReportItemUtil.convertToPoints(xtabCell.getCrosstabHandle().getDimensionProperty(StyleHandle.BORDER_LEFT_WIDTH_PROP));
        double dRightBorder=ChartReportItemUtil.convertToPoints(xtabCell.getCrosstabHandle().getDimensionProperty(StyleHandle.BORDER_RIGHT_WIDTH_PROP));
        bounds.setWidth(-dWidth - dLeftBorder - dRightBorder);
      }
 else       if (xtabCell.getSpanOverOnRow() != null) {
        CrosstabCellHandle rowCell=xtabCell.getCrosstab().getDimension(ICrosstabConstants.ROW_AXIS_TYPE,0).getLevel(0).getCell();
        double dHeight=ChartReportItemUtil.convertToPoints(xtabCell.getCrosstab().getRowHeight(rowCell));
        double dTopBorder=ChartReportItemUtil.convertToPoints(xtabCell.getCrosstabHandle().getDimensionProperty(StyleHandle.BORDER_TOP_WIDTH_PROP));
        double dBottomBorder=ChartReportItemUtil.convertToPoints(xtabCell.getCrosstabHandle().getDimensionProperty(StyleHandle.BORDER_BOTTOM_WIDTH_PROP));
        bounds.setHeight(-dHeight - dTopBorder - dBottomBorder);
      }
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,e);
  }
  return bounds;
}","protected Bounds computeBounds() throws ChartException {
  final Bounds originalBounds=cm.getBlock().getBounds();
  Bounds bounds=(Bounds)EcoreUtil.copy(originalBounds);
  try {
    AggregationCellHandle xtabCell=ChartXTabUtil.getXtabContainerCell(handle);
    if (xtabCell != null) {
      if (xtabCell.getSpanOverOnColumn() != null) {
        CrosstabCellHandle columnCell=ChartXTabUtil.getInnermostLevelCell(xtabCell.getCrosstab(),ICrosstabConstants.COLUMN_AXIS_TYPE);
        double dWidth=ChartReportItemUtil.convertToPoints(xtabCell.getCrosstab().getColumnWidth(columnCell));
        double dLeftBorder=ChartReportItemUtil.convertToPoints(xtabCell.getCrosstabHandle().getDimensionProperty(StyleHandle.BORDER_LEFT_WIDTH_PROP));
        double dRightBorder=ChartReportItemUtil.convertToPoints(xtabCell.getCrosstabHandle().getDimensionProperty(StyleHandle.BORDER_RIGHT_WIDTH_PROP));
        bounds.setWidth(-dWidth - dLeftBorder - dRightBorder);
      }
 else       if (xtabCell.getSpanOverOnRow() != null) {
        CrosstabCellHandle rowCell=ChartXTabUtil.getInnermostLevelCell(xtabCell.getCrosstab(),ICrosstabConstants.ROW_AXIS_TYPE);
        double dHeight=ChartReportItemUtil.convertToPoints(xtabCell.getCrosstab().getRowHeight(rowCell));
        double dTopBorder=ChartReportItemUtil.convertToPoints(xtabCell.getCrosstabHandle().getDimensionProperty(StyleHandle.BORDER_TOP_WIDTH_PROP));
        double dBottomBorder=ChartReportItemUtil.convertToPoints(xtabCell.getCrosstabHandle().getDimensionProperty(StyleHandle.BORDER_BOTTOM_WIDTH_PROP));
        bounds.setHeight(-dHeight - dTopBorder - dBottomBorder);
      }
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,e);
  }
  return bounds;
}",0.9576271186440678
73512,"/** 
 * Check whether the command can be executed or not
 * @return true or false
 */
public boolean canExecute(){
  return super.canExecute() && ((ColumnHandle)handle).canDrop();
}","/** 
 * Check whether the command can be executed or not
 * @return true or false
 */
public boolean canExecute(){
  return super.canExecute() && handle.canDrop();
}",0.953757225433526
73513,"/** 
 * Deletes the command
 * @param model the model
 */
public DeleteColumnCommand(Object model){
  Assert.isTrue(model instanceof ColumnHandle);
  this.handle=(ColumnHandle)model;
}","/** 
 * Deletes the command
 * @param model the model
 */
public DeleteColumnCommand(Object model){
}",0.7087719298245614
73514,"private boolean isExtendedCell(ExtendedItemHandle handle){
  return ((ExtendedItemHandle)handle).getExtensionName().indexOf(""String_Node_Str"") > -1;
}","private boolean isExtendedCell(ExtendedItemHandle handle){
  return handle.getExtensionName().indexOf(""String_Node_Str"") > -1;
}",0.920863309352518
73515,"/** 
 * Check whether the command can be executed or not
 * @return true or false
 */
public boolean canExecute(){
  return super.canExecute() && ((RowHandle)handle).canDrop();
}","/** 
 * Check whether the command can be executed or not
 * @return true or false
 */
public boolean canExecute(){
  return super.canExecute() && handle.canDrop();
}",0.9620991253644317
73516,"/** 
 * Deletes the command
 * @param model the model
 */
public DeleteRowCommand(Object model){
  Assert.isTrue(model instanceof RowHandle);
  this.handle=(RowHandle)model;
}","/** 
 * Deletes the command
 * @param model the model
 */
public DeleteRowCommand(Object model){
}",0.717948717948718
73517,"/** 
 * Get current eitor model
 * @param current The current editor model to set.
 * @param type	The type
 */
public void setCurrentEditorModel(Object current,String type){
  oldEditorModel=this.currentEditorModel;
  if (current == null || current instanceof LibraryHandle) {
    this.currentEditorModel=new LibRootModel(current);
  }
 else {
    this.currentEditorModel=current;
  }
  PropertyChangeEvent event=new PropertyChangeEvent(this,type,oldEditorModel,this.currentEditorModel);
  firePropertyChangeEvent(event);
}","/** 
 * Get current eitor model
 * @param current The current editor model to set.
 * @param type The type
 */
public void setCurrentEditorModel(Object current,String type){
  oldEditorModel=this.currentEditorModel;
  if (current == null || current instanceof LibraryHandle) {
    this.currentEditorModel=new LibRootModel(current);
  }
 else {
    this.currentEditorModel=current;
  }
  PropertyChangeEvent event=new PropertyChangeEvent(this,type,oldEditorModel,this.currentEditorModel);
  firePropertyChangeEvent(event);
}",0.9980879541108988
73518,"/** 
 * Gets the row number.
 * @return The row number.
 */
public int getRowNumber(){
  Assert.isLegal(getCellHandle().getContainer() instanceof RowHandle);
  return HandleAdapterFactory.getInstance().getRowHandleAdapter(getCellHandle().getContainer()).getRowNumber();
}","/** 
 * Gets the row number.
 * @return The row number.
 */
public int getRowNumber(){
}",0.49025069637883
73519,"/** 
 * Gets the column number
 * @return The column number.
 */
public int getColumnNumber(){
  Assert.isLegal(getCellHandle().getContainer() instanceof RowHandle);
  if (getCellHandle().getColumn() == 0) {
    TableHandleAdapter adapt=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
    TableHandleAdapter.RowUIInfomation info=adapt.getRowInfo(getHandle().getContainer());
    return info.getAllChildren().indexOf(getHandle()) + 1;
  }
  return getCellHandle().getColumn();
}","/** 
 * Gets the column number
 * @return The column number.
 */
public int getColumnNumber(){
}",0.3194675540765391
73520,"/** 
 * Provides remove group function.
 * @param group
 * @throws SemanticException
 */
public void removeGroup(Object group) throws SemanticException {
  Assert.isLegal(group instanceof ListBandProxy);
  ((ListBandProxy)group).getElemtHandle().drop();
}","/** 
 * Provides remove group function.
 * @param group
 * @throws SemanticException
 */
public void removeGroup(Object group) throws SemanticException {
}",0.7560975609756098
73521,"public IBaseCubeQueryDefinition createCubeQuery(IDataQueryDefinition parent) throws BirtException {
  CubeHandle cubeHandle=handle.getCube();
  ICubeQueryDefinition cubeQuery=null;
  if (cubeHandle == null) {
    cubeHandle=ChartXTabUtil.getBindingCube(handle);
    if (cubeHandle == null) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.NULL_DATASET,Messages.getString(""String_Node_Str""));
    }
    CrosstabReportItemHandle xtab=ChartXTabUtil.getXtabContainerCell(handle).getCrosstab();
    LevelViewHandle levelColumn=ChartXTabUtil.getInnermostLevel(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE);
    LevelViewHandle levelRow=ChartXTabUtil.getInnermostLevel(xtab,ICrosstabConstants.ROW_AXIS_TYPE);
    if (cm instanceof ChartWithAxes) {
      if (((ChartWithAxes)cm).isTransposed()) {
        if (levelColumn != null) {
          ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(cubeHandle.getQualifiedName());
          subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
          return subCubeQuery;
        }
 else         if (ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.ROW_AXIS_TYPE) > 1) {
          ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(cubeHandle.getQualifiedName());
          subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
          return subCubeQuery;
        }
      }
 else {
        if (levelRow != null) {
          ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(cubeHandle.getQualifiedName());
          subCubeQuery.setStartingLevelOnRow(ChartXTabUtil.createDimensionExpression(levelRow.getCubeLevel()));
          return subCubeQuery;
        }
 else         if (ChartXTabUtil.getLevelCount(xtab,ICrosstabConstants.COLUMN_AXIS_TYPE) > 1) {
          ISubCubeQueryDefinition subCubeQuery=ChartXTabUtil.getCubeElementFactory().createSubCubeQuery(cubeHandle.getQualifiedName());
          subCubeQuery.setStartingLevelOnColumn(ChartXTabUtil.createDimensionExpression(levelColumn.getCubeLevel()));
          return subCubeQuery;
        }
      }
    }
  }
  cubeQuery=ChartXTabUtil.getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName());
  initBindings(cubeQuery,cubeHandle);
  List sdList=getAllSeriesDefinitions(cm);
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    List queryList=sd.getDesignTimeSeries().getDataDefinition();
    for (int j=0; j < queryList.size(); j++) {
      Query query=(Query)queryList.get(j);
      bindSeriesQuery(query,cubeQuery,cubeHandle);
    }
    bindSeriesQuery(sd.getQuery(),cubeQuery,cubeHandle);
  }
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    addSorting(cubeQuery,cubeHandle,sd,i);
  }
  addCubeFilter(cubeQuery);
  return cubeQuery;
}","public IBaseCubeQueryDefinition createCubeQuery(IDataQueryDefinition parent) throws BirtException {
  CubeHandle cubeHandle=handle.getCube();
  ICubeQueryDefinition cubeQuery=null;
  if (cubeHandle == null) {
    cubeHandle=ChartXTabUtil.getBindingCube(handle);
    if (cubeHandle == null) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.NULL_DATASET,Messages.getString(""String_Node_Str""));
    }
    ISubCubeQueryDefinition subQuery=createSubCubeQuery();
    if (subQuery != null) {
      return subQuery;
    }
  }
  cubeQuery=ChartXTabUtil.getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName());
  initBindings(cubeQuery,cubeHandle);
  List sdList=getAllSeriesDefinitions(cm);
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    List queryList=sd.getDesignTimeSeries().getDataDefinition();
    for (int j=0; j < queryList.size(); j++) {
      Query query=(Query)queryList.get(j);
      bindSeriesQuery(query,cubeQuery,cubeHandle);
    }
    bindSeriesQuery(sd.getQuery(),cubeQuery,cubeHandle);
  }
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    addSorting(cubeQuery,cubeHandle,sd,i);
  }
  addCubeFilter(cubeQuery);
  return cubeQuery;
}",0.5554780181437544
73522,"public void setLength(long length) throws IOException {
  ensureSize(length);
  entry.setLength(length);
}","public synchronized void setLength(long length) throws IOException {
  ensureSize(length);
  entry.setLength(length);
}",0.9422222222222222
73523,"public int read(long pos,byte[] b,int off,int len) throws IOException {
  long length=entry.getLength();
  if (pos >= length) {
    return -1;
  }
  if (pos + len > length) {
    len=(int)(length - pos);
  }
  if (len == 0) {
    return 0;
  }
  int blockId=(int)(pos / BLOCK_SIZE);
  int blockOff=(int)(pos % BLOCK_SIZE);
  int readSize=BLOCK_SIZE - blockOff;
  if (len < readSize) {
    readSize=len;
  }
  int phyBlockId=index.getBlock(blockId);
  af.read(phyBlockId,blockOff,b,off,readSize);
  int remainSize=len - readSize;
  while (remainSize >= BLOCK_SIZE) {
    blockId++;
    phyBlockId=index.getBlock(blockId);
    af.read(phyBlockId,0,b,off + readSize,BLOCK_SIZE);
    readSize+=BLOCK_SIZE;
    remainSize-=BLOCK_SIZE;
  }
  if (remainSize > 0) {
    blockId++;
    phyBlockId=index.getBlock(blockId);
    af.read(phyBlockId,0,b,off + readSize,remainSize);
    readSize+=remainSize;
  }
  return readSize;
}","public synchronized int read(long pos,byte[] b,int off,int len) throws IOException {
  long length=entry.getLength();
  if (pos >= length) {
    return -1;
  }
  if (pos + len > length) {
    len=(int)(length - pos);
  }
  if (len == 0) {
    return 0;
  }
  int blockId=(int)(pos / BLOCK_SIZE);
  int blockOff=(int)(pos % BLOCK_SIZE);
  int readSize=BLOCK_SIZE - blockOff;
  if (len < readSize) {
    readSize=len;
  }
  int phyBlockId=index.getBlock(blockId);
  af.read(phyBlockId,blockOff,b,off,readSize);
  int remainSize=len - readSize;
  while (remainSize >= BLOCK_SIZE) {
    blockId++;
    phyBlockId=index.getBlock(blockId);
    af.read(phyBlockId,0,b,off + readSize,BLOCK_SIZE);
    readSize+=BLOCK_SIZE;
    remainSize-=BLOCK_SIZE;
  }
  if (remainSize > 0) {
    blockId++;
    phyBlockId=index.getBlock(blockId);
    af.read(phyBlockId,0,b,off + readSize,remainSize);
    readSize+=remainSize;
  }
  return readSize;
}",0.9929691725256896
73524,"public void flush() throws IOException {
}","public synchronized void flush() throws IOException {
}",0.865979381443299
73525,"public long getLength() throws IOException {
  return entry.getLength();
}","public synchronized long getLength() throws IOException {
  return entry.getLength();
}",0.9192546583850932
73526,"public void refresh() throws IOException {
}","public synchronized void refresh() throws IOException {
}",0.8712871287128713
73527,"public void write(long pos,byte[] b,int off,int len) throws IOException {
  ensureSize(pos + len);
  if (len == 0) {
    return;
  }
  int blockId=(int)(pos / BLOCK_SIZE);
  int phyBlockId=index.getBlock(blockId);
  int blockOff=(int)(pos % BLOCK_SIZE);
  int writeSize=BLOCK_SIZE - blockOff;
  if (len < writeSize) {
    writeSize=len;
  }
  af.write(phyBlockId,blockOff,b,off,writeSize);
  int remainSize=len - writeSize;
  while (remainSize >= BLOCK_SIZE) {
    blockId++;
    phyBlockId=index.getBlock(blockId);
    af.write(phyBlockId,0,b,off + writeSize,BLOCK_SIZE);
    writeSize+=BLOCK_SIZE;
    remainSize-=BLOCK_SIZE;
  }
  if (remainSize > 0) {
    blockId++;
    phyBlockId=index.getBlock(blockId);
    af.write(phyBlockId,0,b,off + writeSize,remainSize);
  }
  long length=entry.getLength();
  long offset=pos + len;
  if (length < offset) {
    setLength(offset);
  }
}","public synchronized void write(long pos,byte[] b,int off,int len) throws IOException {
  ensureSize(pos + len);
  if (len == 0) {
    return;
  }
  int blockId=(int)(pos / BLOCK_SIZE);
  int phyBlockId=index.getBlock(blockId);
  int blockOff=(int)(pos % BLOCK_SIZE);
  int writeSize=BLOCK_SIZE - blockOff;
  if (len < writeSize) {
    writeSize=len;
  }
  af.write(phyBlockId,blockOff,b,off,writeSize);
  int remainSize=len - writeSize;
  while (remainSize >= BLOCK_SIZE) {
    blockId++;
    phyBlockId=index.getBlock(blockId);
    af.write(phyBlockId,0,b,off + writeSize,BLOCK_SIZE);
    writeSize+=BLOCK_SIZE;
    remainSize-=BLOCK_SIZE;
  }
  if (remainSize > 0) {
    blockId++;
    phyBlockId=index.getBlock(blockId);
    af.write(phyBlockId,0,b,off + writeSize,remainSize);
  }
  long length=entry.getLength();
  long offset=pos + len;
  if (length < offset) {
    setLength(offset);
  }
}",0.9926925238898258
73528,"public boolean removeEntry(String name) throws IOException {
  assertWritable();
  if (!name.startsWith(ArchiveUtil.UNIX_SEPERATOR))   name=ArchiveUtil.UNIX_SEPERATOR + name;
  ArchiveEntryV2 entry=(ArchiveEntryV2)entries.get(name);
  if (entry != null) {
    entries.remove(name);
    entryTbl.removeEntry(entry.entry);
    if (entry.index != null) {
      allocTbl.removeEntry(entry.index);
    }
    return true;
  }
  return false;
}","public synchronized boolean removeEntry(String name) throws IOException {
  assertWritable();
  if (!name.startsWith(ArchiveUtil.UNIX_SEPERATOR))   name=ArchiveUtil.UNIX_SEPERATOR + name;
  ArchiveEntryV2 entry=(ArchiveEntryV2)entries.get(name);
  if (entry != null) {
    entries.remove(name);
    entryTbl.removeEntry(entry.entry);
    if (entry.index != null) {
      allocTbl.removeEntry(entry.index);
    }
    return true;
  }
  return false;
}",0.9853438556933484
73529,"public void save() throws IOException {
  assertWritable();
  if (isTransient) {
    isTransient=false;
  }
  flush();
}","public synchronized void save() throws IOException {
  assertWritable();
  if (isTransient) {
    isTransient=false;
  }
  flush();
}",0.9486166007905138
73530,"public ArchiveEntry getEntry(String name){
  return (ArchiveEntry)entries.get(name);
}","public synchronized ArchiveEntry getEntry(String name){
  return (ArchiveEntry)entries.get(name);
}",0.9297297297297298
73531,"/** 
 * close the archive. all changed data will be flushed into disk if the file is opened for write. the file will be removed if it is opend as transient. after close, the instance can't be used any more.
 * @throws IOException
 */
public void close() throws IOException {
  if (isWritable) {
    head.setStatus(FILE_STATUS_FINISHED);
    if (!isTransient) {
      flush();
    }
  }
  if (rf != null) {
    rf.close();
    rf=null;
  }
  if (isTransient) {
    new File(archiveName).delete();
  }
  caches.reset();
  isClosed=true;
}","/** 
 * close the archive. all changed data will be flushed into disk if the file is opened for write. the file will be removed if it is opend as transient. after close, the instance can't be used any more.
 * @throws IOException
 */
public synchronized void close() throws IOException {
  if (isWritable) {
    head.setStatus(FILE_STATUS_FINISHED);
    if (!isTransient) {
      flush();
    }
  }
  if (rf != null) {
    rf.close();
    rf=null;
  }
  if (isTransient) {
    new File(archiveName).delete();
  }
  caches.reset();
  isClosed=true;
}",0.9880184331797236
73532,"public List listEntries(String namePattern){
  ArrayList list=new ArrayList();
  Iterator iter=entries.keySet().iterator();
  while (iter.hasNext()) {
    String name=(String)iter.next();
    if (namePattern == null || name.startsWith(namePattern)) {
      list.add(name);
    }
  }
  return list;
}","public synchronized List listEntries(String namePattern){
  ArrayList list=new ArrayList();
  Iterator iter=entries.keySet().iterator();
  while (iter.hasNext()) {
    String name=(String)iter.next();
    if (namePattern == null || name.startsWith(namePattern)) {
      list.add(name);
    }
  }
  return list;
}",0.9787234042553192
73533,"public ArchiveEntry createEntry(String name) throws IOException {
  assertWritable();
  if (!name.startsWith(ArchiveUtil.UNIX_SEPERATOR))   name=ArchiveUtil.UNIX_SEPERATOR + name;
  ArchiveEntry entry=(ArchiveEntry)entries.get(name);
  if (entry != null) {
    entry.setLength(0L);
    return entry;
  }
  NameEntry nameEnt=entryTbl.createEntry(name);
  entry=new ArchiveEntryV2(this,nameEnt);
  entries.put(name,entry);
  return entry;
}","public synchronized ArchiveEntry createEntry(String name) throws IOException {
  assertWritable();
  if (!name.startsWith(ArchiveUtil.UNIX_SEPERATOR))   name=ArchiveUtil.UNIX_SEPERATOR + name;
  ArchiveEntry entry=(ArchiveEntry)entries.get(name);
  if (entry != null) {
    entry.setLength(0L);
    return entry;
  }
  NameEntry nameEnt=entryTbl.createEntry(name);
  entry=new ArchiveEntryV2(this,nameEnt);
  entries.put(name,entry);
  return entry;
}",0.9853768278965128
73534,"public boolean exists(String name){
  return entries.containsKey(name);
}","public synchronized boolean exists(String name){
  return entries.containsKey(name);
}",0.9182389937106918
73535,"public void startData(IDataContent data){
  super.startData(data);
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  if (((StyledElementDesign)data.getGenerateBy()).getMap() != null && ((StyledElementDesign)data.getGenerateBy()).getMap().getRuleCount() > 0) {
    engine.addData(data.getText().trim(),data.getComputedStyle(),url,bookmark);
  }
 else   if (!ExcelUtil.getType(data.getValue()).equals(Data.NUMBER)) {
    engine.addData(data.getText(),data.getComputedStyle(),url,bookmark);
  }
 else {
    engine.addData(data.getValue(),data.getComputedStyle(),url,bookmark);
  }
}","public void startData(IDataContent data){
  super.startData(data);
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  if (((StyledElementDesign)data.getGenerateBy()).getMap() != null && ((StyledElementDesign)data.getGenerateBy()).getMap().getRuleCount() > 0 && data.getLabelText() != null) {
    engine.addData(data.getLabelText().trim(),data.getComputedStyle(),url,bookmark);
  }
 else   if (!ExcelUtil.getType(data.getValue()).equals(Data.NUMBER)) {
    engine.addData(data.getText(),data.getComputedStyle(),url,bookmark);
  }
 else {
    engine.addData(data.getValue(),data.getComputedStyle(),url,bookmark);
  }
}",0.971518987341772
73536,"private String getExpression(Control control){
  if (control instanceof Text) {
    return ((Text)control).getText();
  }
  if (control instanceof Combo) {
    Combo c=((Combo)control);
    if (c.getSelectionIndex() >= 0) {
      Object value=((Object[])c.getData())[c.getSelectionIndex()];
      if (value instanceof String) {
        return (String)value;
      }
 else       if (value instanceof ColumnBindingInfo) {
        ColumnBindingInfo chi=(ColumnBindingInfo)value;
        return chi.getExpression();
      }
    }
  }
  return ""String_Node_Str"";
}","private String getExpression(Control control){
  return ChartUIUtil.getActualExpression(control);
}",0.2492401215805471
73537,"public void modifyText(ModifyEvent e){
  if (e.getSource().equals(getInputControl())) {
    isQueryModified=true;
    getInputControl().setToolTipText(getTooltipForDataText(getExpression(getInputControl())));
  }
}","public void modifyText(ModifyEvent e){
  if (e.getSource().equals(getInputControl())) {
    isQueryModified=true;
    setTooltipForInputControl();
  }
}",0.7704918032786885
73538,"public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  if (description != null && description.length() > 0) {
    Label lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  if (predefinedQuery != null) {
    cmbDefinition=new Combo(cmpTop,context.getDataServiceProvider().isInXTab() ? SWT.READ_ONLY : SWT.NONE);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmbDefinition.setLayoutData(gd);
    if (predefinedQuery.length > 0) {
      populateExprComboItems(predefinedQuery);
    }
    initComboExprText();
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        query.setDefinition(getExpression(cmbDefinition));
        updateGroupingAggregate();
        if (context.getDataServiceProvider().isInXTab() && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
      }
    }
);
    cmbDefinition.addModifyListener(this);
    cmbDefinition.addFocusListener(this);
    cmbDefinition.addKeyListener(this);
  }
 else {
    txtDefinition=new Text(cmpTop,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (query != null && query.getDefinition() != null) {
      txtDefinition.setText(query.getDefinition());
      txtDefinition.setToolTipText(getTooltipForDataText(query.getDefinition()));
    }
    txtDefinition.addModifyListener(this);
    txtDefinition.addFocusListener(this);
    txtDefinition.addKeyListener(this);
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,query);
  btnBuilder=new Button(cmpTop,SWT.PUSH);
{
    GridData gdBTNBuilder=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder);
    btnBuilder.setLayoutData(gdBTNBuilder);
    btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnBuilder.addSelectionListener(this);
    btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBuilder.getImage().setBackground(btnBuilder.getBackground());
    btnBuilder.setEnabled(context.getUIServiceProvider().isInvokingSupported());
    btnBuilder.setVisible(context.getUIServiceProvider().isEclipseModeSupported());
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  setColor();
  if (context.getDataServiceProvider().isInXTab() || context.getDataServiceProvider().isSharedBinding()) {
    if (txtDefinition != null) {
      txtDefinition.setEnabled(false);
    }
    btnBuilder.setEnabled(false);
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  return cmpTop;
}","public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  if (description != null && description.length() > 0) {
    Label lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  if (predefinedQuery != null) {
    cmbDefinition=new Combo(cmpTop,context.getDataServiceProvider().isInXTab() ? SWT.READ_ONLY : SWT.NONE);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmbDefinition.setLayoutData(gd);
    if (predefinedQuery.length > 0) {
      populateExprComboItems(predefinedQuery);
    }
    initComboExprText();
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        query.setDefinition(getExpression(cmbDefinition));
        updateGroupingAggregate();
        if (context.getDataServiceProvider().isInXTab() && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
      }
    }
);
    cmbDefinition.addModifyListener(this);
    cmbDefinition.addFocusListener(this);
    cmbDefinition.addKeyListener(this);
  }
 else {
    txtDefinition=new Text(cmpTop,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (query != null && query.getDefinition() != null) {
      txtDefinition.setText(query.getDefinition());
      txtDefinition.setToolTipText(getTooltipForDataText(query.getDefinition()));
    }
    txtDefinition.addModifyListener(this);
    txtDefinition.addFocusListener(this);
    txtDefinition.addKeyListener(this);
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,query);
  btnBuilder=new Button(cmpTop,SWT.PUSH);
{
    GridData gdBTNBuilder=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder);
    btnBuilder.setLayoutData(gdBTNBuilder);
    btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnBuilder.addSelectionListener(this);
    btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBuilder.getImage().setBackground(btnBuilder.getBackground());
    btnBuilder.setEnabled(context.getUIServiceProvider().isInvokingSupported());
    btnBuilder.setVisible(context.getUIServiceProvider().isEclipseModeSupported());
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  setColor();
  if (context.getDataServiceProvider().isInXTab() || context.getDataServiceProvider().isSharedBinding()) {
    if (txtDefinition != null) {
      txtDefinition.setEnabled(false);
    }
    btnBuilder.setEnabled(false);
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  setTooltipForInputControl();
  return cmpTop;
}",0.996320474777448
73539,"public void updateQuery(Control control){
  if (textCollection.containsKey(control)) {
    Query query=(Query)textCollection.get(control);
    query.setDefinition(getText(control));
    adjustScaleData(query);
    ColorPalette.getInstance().putColor(getText(control));
    control.setBackground(ColorPalette.getInstance().getColor(getText(control)));
  }
}","public void updateQuery(Control control){
  if (textCollection.containsKey(control)) {
    Query query=(Query)textCollection.get(control);
    query.setDefinition(ChartUIUtil.getActualExpression(control));
    adjustScaleData(query);
    ColorPalette.getInstance().putColor(getText(control));
    control.setBackground(ColorPalette.getInstance().getColor(getText(control)));
  }
}",0.9483695652173914
73540,"private void setText(Control control,String text){
  if (control instanceof Text) {
    ((Text)control).setText(text);
  }
 else   if (control instanceof Combo) {
    Object[] data=(Object[])control.getData();
    if (data != null && data.length > 0 && data[0] instanceof ColumnBindingInfo) {
      for (int i=0; i < data.length; i++) {
        if (((ColumnBindingInfo)data[i]).getExpression().equals(text)) {
          String expr=ExpressionUtil.createJSRowExpression(((ColumnBindingInfo)data[i]).getName());
          ((Combo)control).setText(expr);
          break;
        }
      }
    }
 else {
      ((Combo)control).setText(text);
    }
  }
}","private void setText(Control control,String expression){
  if (control instanceof Text) {
    ((Text)control).setText(expression);
  }
 else   if (control instanceof Combo) {
    Object[] data=(Object[])control.getData();
    if (data != null && data.length > 0 && data[0] instanceof ColumnBindingInfo) {
      for (int i=0; i < data.length; i++) {
        if (((ColumnBindingInfo)data[i]).getExpression().equals(expression)) {
          String txt=ExpressionUtil.createJSRowExpression(((ColumnBindingInfo)data[i]).getName());
          ((Combo)control).setText(txt);
          return;
        }
      }
    }
    ((Combo)control).setText(expression);
  }
}",0.901300688599847
73541,"/** 
 * Make a multi-pass to a filter that needs multipass, meanly TopN and BottomN.The pass actually contains two steps. 1.FIRST PASS: in this step we just go through all result rows and make preparation work for the second step 2.SECOND PASS: in this step the rows that are not qualified is filtered out
 * @param filterPass
 * @param stopSign
 * @throws DataException
 */
private void makeMultiPassToFilter(FilterPassController filterPass,StopSign stopSign) throws DataException {
  int max=populator.getQuery().getMaxRows();
  populator.getQuery().setMaxRows(0);
  ResultSetCache sCache=populator.getCache();
  makeFirstPassToMultiPassFilter(filterPass,stopSign);
  populator.setCache(sCache);
  sCache.reset();
  sCache.next();
  makeSecondPassToMultiPassFilter(filterPass,stopSign);
  Iterator filterIt=filterByRow.getFilterList().iterator();
  while (filterIt.hasNext()) {
    IFilterDefinition fd=(IFilterDefinition)filterIt.next();
    if (FilterUtil.isFilterNeedMultiPass(fd)) {
      fd.getExpression().setHandle(null);
    }
  }
  filterPass.setSecondPassRowCount(0);
  populator.getQuery().setMaxRows(max);
}","/** 
 * Make a multi-pass to a filter that needs multipass, meanly TopN and BottomN.The pass actually contains two steps. 1.FIRST PASS: in this step we just go through all result rows and make preparation work for the second step 2.SECOND PASS: in this step the rows that are not qualified is filtered out
 * @param filterPass
 * @param stopSign
 * @throws DataException
 */
private void makeMultiPassToFilter(FilterPassController filterPass,StopSign stopSign) throws DataException {
  int max=populator.getQuery().getMaxRows();
  populator.getQuery().setMaxRows(0);
  ResultSetCache sCache=populator.getCache();
  makeFirstPassToMultiPassFilter(filterPass,stopSign);
  populator.setCache(sCache);
  sCache.reset();
  sCache.next();
  populator.getQuery().setMaxRows(max);
  makeSecondPassToMultiPassFilter(filterPass,stopSign);
  Iterator filterIt=filterByRow.getFilterList().iterator();
  while (filterIt.hasNext()) {
    IFilterDefinition fd=(IFilterDefinition)filterIt.next();
    if (FilterUtil.isFilterNeedMultiPass(fd)) {
      fd.getExpression().setHandle(null);
    }
  }
  filterPass.setSecondPassRowCount(0);
}",0.9643175735950044
73542,"private void fireEvent(){
  boolean isFractionConverted=false;
  String sText=txtValue.getText();
  if (sText == null || sText.trim().length() == 0) {
    bValueIsSet=false;
  }
 else {
    int iDelimiter=sText.indexOf('/');
    if (iDelimiter < 0) {
      iDelimiter=sText.indexOf(':');
    }
    if (iDelimiter > 0) {
      isFractionConverted=true;
      String numerator=sText.substring(0,iDelimiter);
      String denominator=sText.substring(iDelimiter + 1);
      try {
        Number nume=numberFormat.parse(numerator);
        Number deno=numberFormat.parse(denominator);
        dValue=nume.doubleValue() / deno.doubleValue();
        bValueIsSet=true;
        sText=numberFormat.format(dValue);
        this.txtValue.setText(sText);
      }
 catch (      ParseException e) {
        if (!this.bTextModified) {
          handleFormatError(sText);
        }
      }
    }
 else {
      try {
        Number num=numberFormat.parse(sText);
        dValue=num.doubleValue();
        bValueIsSet=true;
        sText=numberFormat.format(dValue);
      }
 catch (      ParseException e) {
        if (!this.bTextModified) {
          handleFormatError(sText);
        }
      }
    }
  }
  for (int i=0; i < vModifyListeners.size(); i++) {
    Event e=new Event();
    e.data=sText;
    e.widget=this;
    e.type=TEXT_MODIFIED;
    ((ModifyListener)vModifyListeners.get(i)).modifyText(new ModifyEvent(e));
  }
  if (isFractionConverted) {
    for (int i=0; i < vFractionListeners.size(); i++) {
      Event e=new Event();
      e.data=sText;
      e.widget=this;
      e.type=TEXT_FRACTION_CONVERTED;
      ((Listener)vFractionListeners.get(i)).handleEvent(e);
    }
  }
}","private void fireEvent(boolean bByModifyText){
  boolean isFractionConverted=false;
  String sText=txtValue.getText();
  if (sText == null || sText.trim().length() == 0) {
    bValueIsSet=false;
  }
 else {
    int iDelimiter=sText.indexOf('/');
    if (iDelimiter < 0) {
      iDelimiter=sText.indexOf(':');
    }
    if (iDelimiter > 0) {
      isFractionConverted=true;
      String numerator=sText.substring(0,iDelimiter);
      String denominator=sText.substring(iDelimiter + 1);
      try {
        Number nume=numberFormat.parse(numerator);
        Number deno=numberFormat.parse(denominator);
        dValue=nume.doubleValue() / deno.doubleValue();
        bValueIsSet=true;
        sText=numberFormat.format(dValue);
        if (!bByModifyText) {
          this.txtValue.setText(sText);
        }
      }
 catch (      ParseException e) {
        if (!this.bTextModified) {
          handleFormatError(sText);
        }
      }
    }
 else {
      try {
        Number num=numberFormat.parse(sText);
        dValue=num.doubleValue();
        bValueIsSet=true;
        sText=numberFormat.format(dValue);
      }
 catch (      ParseException e) {
        if (!this.bTextModified) {
          handleFormatError(sText);
        }
      }
    }
  }
  for (int i=0; i < vModifyListeners.size(); i++) {
    Event e=new Event();
    e.data=bByModifyText ? Boolean.FALSE : Boolean.TRUE;
    e.widget=this;
    e.type=TEXT_MODIFIED;
    ((ModifyListener)vModifyListeners.get(i)).modifyText(new ModifyEvent(e));
  }
  if (isFractionConverted) {
    for (int i=0; i < vFractionListeners.size(); i++) {
      Event e=new Event();
      e.data=sText;
      e.widget=this;
      e.type=TEXT_FRACTION_CONVERTED;
      ((Listener)vFractionListeners.get(i)).handleEvent(e);
    }
  }
}",0.967536231884058
73543,"public void modifyText(ModifyEvent e){
  this.bTextModified=true;
  fireEvent();
}","public void modifyText(ModifyEvent e){
  this.bTextModified=true;
  fireEvent(true);
}",0.9761904761904762
73544,"public void modifyText(ModifyEvent e){
  if (e.widget.equals(txtWrapping)) {
    getBlockForProcessing().setWrappingSize(txtWrapping.getValue());
  }
 else   if (e.widget.equals(txtMaxPercent)) {
    getBlockForProcessing().setMaxPercent(txtMaxPercent.getValue());
  }
}","public void modifyText(ModifyEvent e){
  if (e.widget.equals(txtWrapping)) {
    getBlockForProcessing().setWrappingSize(txtWrapping.getValue());
  }
 else   if (e.widget.equals(txtMaxPercent)) {
    if (e.data != null && ((Boolean)e.data).booleanValue()) {
      getBlockForProcessing().setMaxPercent(txtMaxPercent.getValue());
    }
  }
}",0.8852459016393442
73545,"private String getLabel(Object obj){
  Object ownerModel=getOwner().getModel();
  if (ownerModel == obj) {
    return ((ReportElementEditPart)getOwner()).getGuideLabel();
  }
  Object[] objs=ElementAdapterManager.getAdapters(getOwner().getModel(),IReportItemViewProvider.class);
  if (objs != null) {
    return ((IReportItemViewProvider)objs[0]).getViewName();
  }
  return ""String_Node_Str"";
}","private String getLabel(Object obj){
  Object ownerModel=getOwner().getModel();
  if (ownerModel == obj) {
    return ProviderFactory.createProvider(obj).getNodeDisplayName(obj);
  }
  Object[] objs=ElementAdapterManager.getAdapters(getOwner().getModel(),IReportItemViewProvider.class);
  if (objs != null) {
    return ((IReportItemViewProvider)objs[0]).getViewName();
  }
  return ""String_Node_Str"";
}",0.8696741854636592
73546,"private Image getIamge(Object obj){
  if (obj instanceof TableHandle) {
    return ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_TABLE);
  }
  return null;
}","private Image getIamge(Object obj){
  if (obj instanceof TableHandle) {
    return ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_TABLE);
  }
  Object ownerModel=getOwner().getModel();
  if (ownerModel == obj) {
    return ProviderFactory.createProvider(obj).getNodeIcon(obj);
  }
  return null;
}",0.717434869739479
73547,"public Object evaluate(IBaseExpression expr) throws BirtException {
  if (expr instanceof IScriptExpression) {
    return context.evaluate(((IScriptExpression)expr).getText());
  }
  if (expr instanceof IConditionalExpression) {
    return context.evaluateCondExpr((IConditionalExpression)expr);
  }
  return null;
}","public Object evaluate(IBaseExpression expr) throws BirtException {
  IBaseResultSet oldRSet=context.getResultSet();
  if (oldRSet != this) {
    context.setResultSet(this);
  }
  Object result=null;
  if (expr instanceof IScriptExpression) {
    result=context.evaluate(((IScriptExpression)expr).getText());
  }
 else   if (expr instanceof IConditionalExpression) {
    result=context.evaluateCondExpr((IConditionalExpression)expr);
  }
  if (oldRSet != this) {
    context.setResultSet(oldRSet);
  }
  return result;
}",0.4904306220095694
73548,"public IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache) throws BirtException {
  if (query instanceof ISubqueryDefinition) {
    if (parent == null) {
      return null;
    }
 else     if (parent instanceof ICubeResultSet) {
      throw new EngineException(""String_Node_Str"" + ((ISubqueryDefinition)query).getName());
    }
    return doExecuteSubQuery((IQueryResultSet)parent,(ISubqueryDefinition)query);
  }
 else   if (query instanceof IQueryDefinition) {
    return doExecuteQuery(parent,(IQueryDefinition)query,useCache);
  }
 else   if (query instanceof ICubeQueryDefinition) {
    return doExecuteCube(parent,(ICubeQueryDefinition)query,useCache);
  }
  throw new EngineException(""String_Node_Str"" + query.getClass().getName());
}","public IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache) throws BirtException {
  if (query instanceof ISubqueryDefinition) {
    if (parent == null) {
      return null;
    }
 else     if (parent instanceof ICubeResultSet) {
      throw new EngineException(""String_Node_Str"" + ((ISubqueryDefinition)query).getName());
    }
    return doExecuteSubQuery((IQueryResultSet)parent,(ISubqueryDefinition)query);
  }
 else   if (query instanceof IQueryDefinition) {
    return doExecuteQuery(parent,(IQueryDefinition)query,useCache);
  }
 else   if (query instanceof ICubeQueryDefinition) {
    return doExecuteCube(parent,(ICubeQueryDefinition)query,useCache);
  }
 else   if (query instanceof ISubCubeQueryDefinition) {
    doExecuteSubCubeQuery((ICubeResultSet)parent,(ISubCubeQueryDefinition)query);
  }
  throw new EngineException(""String_Node_Str"" + query.getClass().getName());
}",0.916470588235294
73549,"public CubeResultSet(IDataEngine dataEngine,ExecutionContext context,IBaseResultSet parent,ICubeQueryDefinition queryDefn,ICubeQueryResults rsets) throws BirtException {
}","public CubeResultSet(IDataEngine dataEngine,ExecutionContext context,IBaseResultSet parent,ISubCubeQueryDefinition queryDefn,ICubeQueryResults rsets) throws BirtException {
}",0.991304347826087
73550,"/** 
 * When cache option is true, user needs to specify how many rows will be retrieved into cache for use.
 * @return cache row count
 */
public abstract int getCacheRowCount();","/** 
 * When cache option is true, user needs to specify how many rows will be retrieved into cache for use.
 * @deprecated
 * @return cache row count
 */
public abstract int getCacheRowCount();",0.9597855227882036
73551,"/** 
 * @return cache row count
 */
public int getCacheRowCount(){
  return cacheRowCount;
}","/** 
 * @deprecated
 * @return cache row count
 */
public int getCacheRowCount(){
  return cacheRowCount;
}",0.9246231155778896
73552,"/** 
 * @param cacheRowCount
 */
public void setCacheRowCount(int cacheRowCount){
  this.cacheRowCount=cacheRowCount;
}","/** 
 * @deprecated
 * @param cacheRowCount
 */
public void setCacheRowCount(int cacheRowCount){
  this.cacheRowCount=cacheRowCount;
}",0.9407114624505928
73553,"/** 
 * construction
 */
CacheMapManager(String tempDir,boolean useJVMLevelCache){
  this.tempDir=tempDir;
  if (useJVMLevelCache) {
    cacheMap=JVMLevelCacheMap;
  }
 else {
    cacheMap=new HashMap();
  }
}","/** 
 * construction
 */
CacheMapManager(boolean useJVMLevelCache){
  if (useJVMLevelCache) {
    cacheMap=JVMLevelCacheMap;
  }
 else {
    cacheMap=new HashMap();
  }
}",0.8970976253298153
73554,"/** 
 * @param dsAndDs
 * @return
 */
boolean doesLoadFromCache(DataSourceAndDataSet dsAndDs){
  Object cacheObject=null;
synchronized (cacheMap) {
    cacheObject=cacheMap.get(dsAndDs);
  }
  if (cacheObject != null) {
    return (cacheObject instanceof IncreDataSetCacheObject) ? true : !needSaveToCache(cacheObject);
  }
  return false;
}","/** 
 * @param dsAndDs
 * @return
 */
boolean doesLoadFromCache(DataSourceAndDataSet dsAndDs,int requiredCapability){
synchronized (cacheMap) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheMap.get(dsAndDs);
    if (cacheObject != null) {
      return cacheObject.isCachedDataReusable(requiredCapability);
    }
 else {
      return false;
    }
  }
}",0.5141242937853108
73555,"/** 
 * @param dataSourceDesign2
 * @param dataSetDesign2
 */
void clearCache(DataSourceAndDataSet dsAndDs){
  List cacheDir=new ArrayList();
synchronized (cacheMap) {
    while (getKey(dsAndDs) != null)     cacheDir.add(cacheMap.remove(getKey(dsAndDs)));
  }
  for (int i=0; i < cacheDir.size(); i++) {
    Object cacheObject=cacheDir.get(i);
    if (cacheObject instanceof DiskDataSetCacheObject) {
      DiskDataSetCacheObject diskObject=(DiskDataSetCacheObject)cacheObject;
      deleteDir(diskObject.getTempDir());
    }
 else     if (cacheObject instanceof IncreDataSetCacheObject) {
      IncreDataSetCacheObject psObject=(IncreDataSetCacheObject)cacheObject;
      deleteDir(psObject.getCacheDir());
    }
  }
}","/** 
 * @param dataSourceDesign2
 * @param dataSetDesign2
 */
void clearCache(DataSourceAndDataSet dsAndDs){
  List cacheObjects=new ArrayList();
synchronized (cacheMap) {
    Object key=getKey(dsAndDs);
    while (key != null) {
      cacheObjects.add(cacheMap.remove(key));
      key=getKey(dsAndDs);
    }
  }
  for (int i=0; i < cacheObjects.size(); i++) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheObjects.get(i);
    cacheObject.release();
  }
}",0.4907563025210084
73556,"/** 
 * @param appContext 
 * @param collection 
 * @param baseDataSetDesign 
 * @param baseDataSourceDesign 
 * @return
 * @throws DataException 
 */
boolean doesSaveToCache(DataSourceAndDataSet dsAndDs,int mode,IBaseDataSourceDesign baseDataSourceDesign,IBaseDataSetDesign baseDataSetDesign,Collection parameterHints,Map appContext) throws DataException {
  Object cacheObject=null;
synchronized (cacheMap) {
    cacheObject=cacheMap.get(dsAndDs);
  }
  if (cacheObject != null) {
    return needSaveToCache(cacheObject);
  }
 else {
synchronized (cacheMap) {
      cacheObject=(String)cacheMap.get(dsAndDs);
      if (cacheObject != null) {
        return needSaveToCache(cacheObject);
      }
      IDataSetCacheObject dsCacheObject=null;
      String cacheDir=(String)cacheDirMap.get(baseDataSetDesign);
      if (baseDataSetDesign instanceof IIncreCacheDataSetDesign) {
        dsCacheObject=(IDataSetCacheObject)new IncreDataSetCacheObject(cacheDir);
      }
 else {
switch (mode) {
case DataEngineContext.CACHE_MODE_IN_MEMORY:
          dsCacheObject=(IDataSetCacheObject)new MemoryDataSetCacheObject();
        break;
case DataEngineContext.CACHE_MODE_IN_DISK:
      String tempRootDir=CacheUtil.createTempRootDir(tempDir);
    String sessionTempDir=CacheUtil.createSessionTempDir(tempRootDir);
  dsCacheObject=(IDataSetCacheObject)new DiskDataSetCacheObject(sessionTempDir);
break;
default :
return false;
}
}
cacheMap.put(dsAndDs,dsCacheObject);
return true;
}
}
}","/** 
 * @param appContext 
 * @param collection 
 * @param baseDataSetDesign 
 * @param baseDataSourceDesign 
 * @return
 * @throws DataException 
 */
boolean doesSaveToCache(DataSourceAndDataSet dsAndDs,DataSetCacheConfig dscc) throws DataException {
synchronized (cacheMap) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheMap.get(dsAndDs);
    if (cacheObject != null) {
      return cacheObject.needUpdateCache(dscc.getCacheCapability());
    }
 else {
      IDataSetCacheObject dsco=dscc.createDataSetCacheObject();
      cacheMap.put(dsAndDs,dsco);
      return true;
    }
  }
}",0.2342168674698795
73557,"/** 
 * Return the cached result metadata featured by the given DataSourceAndDataSet. Please note that the paramter would have no impact to DataSourceAndDataSet so that will be omited.
 * @param dsAndDs
 * @return
 * @throws DataException
 */
IResultClass getCachedResultClass(DataSourceAndDataSet dsAndDs) throws DataException {
  Object cacheObject=null;
  Object key=getKey(dsAndDs);
  if (key != null) {
    cacheObject=cacheMap.get(key);
  }
  if (cacheObject instanceof MemoryDataSetCacheObject) {
    return ((MemoryDataSetCacheObject)cacheObject).getResultClass();
  }
 else   if (cacheObject instanceof DiskDataSetCacheObject) {
    IResultClass rsClass;
    FileInputStream fis1=null;
    BufferedInputStream bis1=null;
    try {
      fis1=new FileInputStream(((DiskDataSetCacheObject)cacheObject).getMetaFile());
      bis1=new BufferedInputStream(fis1);
      IOUtil.readInt(bis1);
      rsClass=new ResultClass(bis1);
      bis1.close();
      fis1.close();
      return rsClass;
    }
 catch (    FileNotFoundException e) {
      throw new DataException(ResourceConstants.DATASETCACHE_LOAD_ERROR,e);
    }
catch (    IOException e) {
      throw new DataException(ResourceConstants.DATASETCACHE_LOAD_ERROR,e);
    }
  }
  return null;
}","/** 
 * Return the cached result metadata featured by the given DataSourceAndDataSet. Please note that the paramter would have no impact to DataSourceAndDataSet so that will be omited.
 * @param dsAndDs
 * @return
 * @throws DataException
 */
IResultClass getCachedResultClass(DataSourceAndDataSet dsAndDs) throws DataException {
  IDataSetCacheObject cacheObject=null;
  Object key=getKey(dsAndDs);
  if (key != null) {
    cacheObject=(IDataSetCacheObject)cacheMap.get(key);
  }
  if (cacheObject != null) {
    return cacheObject.getResultClass();
  }
 else {
    return null;
  }
}",0.5686274509803921
73558,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static int runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getSession().getTempDir(),dataEngine.getContext(),queryResultInfo);
  IBaseQueryDefinition rootQueryDefn=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  if (QueryCompUtil.isIVQueryDefnEqual(rootQueryDefn,queryDefn)) {
    return BASED_ON_PRESENTATION;
  }
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=isCompatibleSubQuery(rootQueryDefn,queryDefn);
  if (runningOnRS == false)   return BASED_ON_DATASET;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (!isBindingReferenceSort(queryDefn.getSorts()))   return BASED_ON_DATASET;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return BASED_ON_DATASET;
    if (!QueryCompUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      if (groups != null && !groups.isEmpty())       runningOnRS=false;
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS ? BASED_ON_RESULTSET : BASED_ON_DATASET;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static int runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getSession().getTempDir(),dataEngine.getContext(),queryResultInfo);
  IBaseQueryDefinition rootQueryDefn=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  if (QueryCompUtil.isIVQueryDefnEqual(rootQueryDefn,queryDefn)) {
    return BASED_ON_PRESENTATION;
  }
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=isCompatibleSubQuery(rootQueryDefn,queryDefn);
  if (runningOnRS == false)   return BASED_ON_DATASET;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (!QueryCompUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
    Iterator bindings=queryDefn.getBindings().values().iterator();
    while (bindings.hasNext()) {
      IBinding binding=(IBinding)bindings.next();
      if (binding.getAggrFunction() != null) {
        if (IBuildInAggregation.TOTAL_FIRST_FUNC.equals(binding.getAggrFunction()) || IBuildInAggregation.TOTAL_LAST_FUNC.equals(binding.getAggrFunction())) {
          return BASED_ON_DATASET;
        }
      }
      if (binding.getExpression() != null && binding.getExpression() instanceof IScriptExpression) {
        IScriptExpression expr=(IScriptExpression)binding.getExpression();
        if (ExpressionUtil.hasAggregation(expr.getText())) {
          if (expr.getText().matches(""String_Node_Str"") || expr.getText().matches(""String_Node_Str"")) {
            return BASED_ON_DATASET;
          }
        }
      }
    }
  }
  if (!isBindingReferenceSort(queryDefn.getSorts()))   return BASED_ON_DATASET;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return BASED_ON_DATASET;
    if (!QueryCompUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      if (groups != null && !groups.isEmpty())       runningOnRS=false;
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS ? BASED_ON_RESULTSET : BASED_ON_DATASET;
}",0.8898678414096917
73559,"private int getAdjustedColumnSpan(int columnId,int columnSpan){
  if (columnSpan == 1) {
    return columnSpan;
  }
  int endColumnId=columnId + columnSpan;
  return adjustedColumnIds[endColumnId] - adjustedColumnIds[columnId];
}","private int getAdjustedColumnSpan(int columnId,int columnSpan){
  if (columnSpan == 1) {
    return columnSpan;
  }
  int endColumnId=columnId + columnSpan - 1;
  return adjustedColumnIds[endColumnId] - adjustedColumnIds[columnId] + 1;
}",0.9828326180257512
73560,"/** 
 * Returns the formatted value for given Axis type and value.
 * @param iType
 * @param oValue
 * @return
 */
public final String formatCategoryValue(int iType,Object oValue,int iDateTimeUnit){
  if (oValue == null) {
    return IConstants.NULL_STRING;
  }
  if (iType == IConstants.TEXT) {
    return oValue.toString();
  }
 else   if (iType == IConstants.DATE_TIME) {
    final Calendar ca=(Calendar)oValue;
    IDateFormatWrapper sdf=null;
    if (fs == null) {
      sdf=DateFormatWrapperFactory.getPreferredDateFormat(iDateTimeUnit,rtc.getULocale());
    }
    try {
      return ValueFormatter.format(ca,fs,rtc.getULocale(),sdf);
    }
 catch (    ChartException dfex) {
      logger.log(dfex);
      return IConstants.NULL_STRING;
    }
  }
 else   if ((iType & IConstants.NUMERICAL) == IConstants.NUMERICAL) {
    DecimalFormat df=null;
    if (fs == null) {
      df=new DecimalFormat(getNumericPattern(((Number)oValue).doubleValue()));
    }
    try {
      return ValueFormatter.format(oValue,fs,rtc.getULocale(),df);
    }
 catch (    ChartException dfex) {
      logger.log(dfex);
      return IConstants.NULL_STRING;
    }
  }
  return IConstants.NULL_STRING;
}","/** 
 * Returns the formatted value for given Axis type and value.
 * @param iType
 * @param oValue
 * @return
 */
public final String formatCategoryValue(int iType,Object oValue,int iDateTimeUnit){
  if (oValue == null) {
    return IConstants.NULL_STRING;
  }
  if ((iType & IConstants.TEXT) == IConstants.TEXT) {
    if (oValue instanceof Number) {
      return formatCategoryValue(IConstants.NUMERICAL,oValue,iDateTimeUnit);
    }
    return oValue.toString();
  }
 else   if ((iType & IConstants.DATE_TIME) == IConstants.DATE_TIME) {
    final Calendar ca=(Calendar)oValue;
    IDateFormatWrapper sdf=null;
    if (fs == null) {
      sdf=DateFormatWrapperFactory.getPreferredDateFormat(iDateTimeUnit,rtc.getULocale());
    }
    try {
      return ValueFormatter.format(ca,fs,rtc.getULocale(),sdf);
    }
 catch (    ChartException dfex) {
      logger.log(dfex);
      return IConstants.NULL_STRING;
    }
  }
 else   if ((iType & IConstants.NUMERICAL) == IConstants.NUMERICAL) {
    DecimalFormat df=null;
    if (fs == null) {
      df=new DecimalFormat(getNumericPattern(((Number)oValue).doubleValue()));
    }
    try {
      return ValueFormatter.format(oValue,fs,rtc.getULocale(),df);
    }
 catch (    ChartException dfex) {
      logger.log(dfex);
      return IConstants.NULL_STRING;
    }
  }
  return IConstants.NULL_STRING;
}",0.927892234548336
73561,"public IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache) throws BirtException {
  if (query instanceof ISubqueryDefinition) {
    if (parent == null) {
      return null;
    }
 else     if (parent instanceof ICubeResultSet) {
      throw new EngineException(""String_Node_Str"" + ((ISubqueryDefinition)query).getName());
    }
    return doExecuteSubQuery((IQueryResultSet)parent,(ISubqueryDefinition)query);
  }
 else   if (query instanceof IQueryDefinition) {
    return doExecuteQuery(parent,(IQueryDefinition)query,useCache);
  }
 else   if (query instanceof ICubeQueryDefinition) {
    return doExecuteCube(parent,(ICubeQueryDefinition)query,useCache);
  }
 else   if (query instanceof ISubCubeQueryDefinition) {
    doExecuteSubCubeQuery((ICubeResultSet)parent,(ISubCubeQueryDefinition)query);
  }
  throw new EngineException(""String_Node_Str"" + query.getClass().getName());
}","public IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache) throws BirtException {
  if (query instanceof ISubqueryDefinition) {
    if (parent == null) {
      return null;
    }
 else     if (parent instanceof ICubeResultSet) {
      throw new EngineException(""String_Node_Str"" + ((ISubqueryDefinition)query).getName());
    }
    return doExecuteSubQuery((IQueryResultSet)parent,(ISubqueryDefinition)query);
  }
 else   if (query instanceof IQueryDefinition) {
    return doExecuteQuery(parent,(IQueryDefinition)query,useCache);
  }
 else   if (query instanceof ICubeQueryDefinition) {
    return doExecuteCube(parent,(ICubeQueryDefinition)query,useCache);
  }
 else   if (query instanceof ISubCubeQueryDefinition) {
    return doExecuteSubCubeQuery((ICubeResultSet)parent,(ISubCubeQueryDefinition)query);
  }
  throw new EngineException(""String_Node_Str"" + query.getClass().getName());
}",0.9962141698215252
73562,"public ChartCubeQueryHelper(ExtendedItemHandle handle,Chart cm){
  this.handle=handle;
  this.cm=cm;
  this.bInXtabDetail=ChartXTabUtil.isChartInXTab(handle);
  IActionEvaluator iae=BIRTActionEvaluator.getInstance(handle);
  iae.addExpressionReplaceable(this);
}","public ChartCubeQueryHelper(ExtendedItemHandle handle,Chart cm){
  this.handle=handle;
  this.cm=cm;
  IActionEvaluator iae=BIRTActionEvaluator.getInstance(handle);
  iae.addExpressionReplaceable(this);
}",0.8755364806866953
73563,"/** 
 * Adds measure or row/column edge according to query expression. Besides, generates column bindings, replace them in chart queries and add them in query definition.
 */
private void bindSeriesQuery(Query query,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  String expr=query.getDefinition();
  if (expr != null && expr.length() > 0) {
    boolean bBindingExp=isBinding(expr);
    Binding colBinding=(Binding)registeredBindings.get(expr);
    if (bBindingExp || colBinding == null) {
      String bindingName=null;
      if (colBinding == null) {
        bindingName=StructureFactory.newComputedColumn(handle,expr.replaceAll(""String_Node_Str"",""String_Node_Str"")).getName();
        colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(new ScriptExpression(expr));
        registeredBindings.put(expr,colBinding);
        registeredQueries.put(bindingName,expr);
      }
 else {
        bindingName=colBinding.getBindingName();
        expr=(String)registeredQueries.get(bindingName);
      }
      cubeQuery.addBinding(colBinding);
      String measure=getMeasure(expr);
      if (measure != null) {
        IMeasureDefinition mDef=cubeQuery.createMeasure(measure);
        if (!bInXtabDetail) {
          String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
          mDef.setAggrFunction(aggFun);
        }
      }
 else       if (isReferenceToDimLevel(expr)) {
        String[] levels=getTargetLevel(expr);
        String dimensionName=levels[0];
        final int edgeType=getEdgeType(dimensionName);
        IEdgeDefinition edge=cubeQuery.getEdge(edgeType);
        IHierarchyDefinition hieDef=null;
        if (edge == null) {
          edge=cubeQuery.createEdge(edgeType);
          IDimensionDefinition dimDef=edge.createDimension(dimensionName);
          hieDef=dimDef.createHierarchy(cube.getDimension(dimDef.getName()).getDefaultHierarchy().getQualifiedName());
        }
 else {
          hieDef=(IHierarchyDefinition)((IDimensionDefinition)edge.getDimensions().get(0)).getHierarchy().get(0);
        }
        ILevelDefinition levelDef=hieDef.createLevel(levels[1]);
        registeredLevels.put(bindingName,levelDef);
        LevelHandle levelHandle=cube.getDimension(levelDef.getHierarchy().getDimension().getName()).getDefaultHierarchy().getLevel(levelDef.getName());
        registeredLevelHandles.put(levelHandle,levelDef);
      }
    }
    if (!bBindingExp) {
      String newExpr=ExpressionUtil.createJSDataExpression(colBinding.getBindingName());
      query.setDefinition(newExpr);
    }
  }
}","/** 
 * Adds measure or row/column edge according to query expression. Besides, generates column bindings, replace them in chart queries and add them in query definition.
 */
private void bindSeriesQuery(Query query,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  String expr=query.getDefinition();
  if (expr != null && expr.length() > 0) {
    boolean bBindingExp=isBinding(expr);
    Binding colBinding=(Binding)registeredBindings.get(expr);
    if (bBindingExp || colBinding == null) {
      String bindingName=null;
      if (colBinding == null) {
        bindingName=StructureFactory.newComputedColumn(handle,expr.replaceAll(""String_Node_Str"",""String_Node_Str"")).getName();
        colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(new ScriptExpression(expr));
        registeredBindings.put(expr,colBinding);
        registeredQueries.put(bindingName,expr);
      }
 else {
        bindingName=colBinding.getBindingName();
        expr=(String)registeredQueries.get(bindingName);
      }
      cubeQuery.addBinding(colBinding);
      String measure=getMeasure(expr);
      if (measure != null) {
        IMeasureDefinition mDef=cubeQuery.createMeasure(measure);
        String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
        mDef.setAggrFunction(aggFun);
      }
 else       if (isReferenceToDimLevel(expr)) {
        String[] levels=getTargetLevel(expr);
        String dimensionName=levels[0];
        final int edgeType=getEdgeType(dimensionName);
        IEdgeDefinition edge=cubeQuery.getEdge(edgeType);
        IHierarchyDefinition hieDef=null;
        if (edge == null) {
          edge=cubeQuery.createEdge(edgeType);
          IDimensionDefinition dimDef=edge.createDimension(dimensionName);
          hieDef=dimDef.createHierarchy(cube.getDimension(dimDef.getName()).getDefaultHierarchy().getQualifiedName());
        }
 else {
          hieDef=(IHierarchyDefinition)((IDimensionDefinition)edge.getDimensions().get(0)).getHierarchy().get(0);
        }
        ILevelDefinition levelDef=hieDef.createLevel(levels[1]);
        registeredLevels.put(bindingName,levelDef);
        LevelHandle levelHandle=cube.getDimension(levelDef.getHierarchy().getDimension().getName()).getDefaultHierarchy().getLevel(levelDef.getName());
        registeredLevelHandles.put(levelHandle,levelDef);
      }
    }
    if (!bBindingExp) {
      String newExpr=ExpressionUtil.createJSDataExpression(colBinding.getBindingName());
      query.setDefinition(newExpr);
    }
  }
}",0.947842401500938
73564,"private void initBindings(ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator bindings=ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext(); ) {
    ComputedColumnHandle column=(ComputedColumnHandle)bindings.next();
    Binding binding=new Binding(column.getName());
    binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
    binding.setExpression(new ScriptExpression(column.getExpression()));
    if (column.getAggregateOn() != null) {
      String[] levelNames=CubeUtil.splitLevelName(column.getAggregateOn());
      String dimExpr=ExpressionUtil.createJSDimensionExpression(levelNames[0],levelNames[1]);
      if (!bInXtabDetail) {
        binding.addAggregateOn(dimExpr);
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
      }
      bindSeriesQuery(QueryImpl.create(dimExpr),cubeQuery,cube);
    }
    registeredBindings.put(ExpressionUtil.createJSDataExpression(column.getName()),binding);
    registeredQueries.put(binding.getBindingName(),column.getExpression());
  }
}","private void initBindings(ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator bindings=ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext(); ) {
    ComputedColumnHandle column=(ComputedColumnHandle)bindings.next();
    Binding binding=new Binding(column.getName());
    binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
    binding.setExpression(new ScriptExpression(column.getExpression()));
    List lstAggOn=column.getAggregateOnList();
    if (!lstAggOn.isEmpty()) {
      addAggregateOn(cubeQuery,cube,binding,lstAggOn);
      binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
    }
    registeredBindings.put(ExpressionUtil.createJSDataExpression(column.getName()),binding);
    registeredQueries.put(binding.getBindingName(),column.getExpression());
  }
}",0.5212464589235127
73565,"/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.973529411764706
73566,"/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.9750099166997224
73567,"/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReferenceCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReferenceCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9853590518243086
73568,"/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotalCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotalCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9829036635006784
73569,"/** 
 * Test use aggregation with one more arguments, referenced using ""data""
 * @throws Exception
 */
public void testBasic4() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding7);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null);
}","/** 
 * Test use aggregation with one more arguments, referenced using ""data""
 * @throws Exception
 */
public void testBasic4() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding7);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"",null,""String_Node_Str"",null);
}",0.9770491803278688
73570,"/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotal1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.setFilter(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.setFilter(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding8.setFilter(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotal1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.setFilter(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.setFilter(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding8.setFilter(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9828990228013028
73571,"/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.96800406297613
73572,"/** 
 * Test use aggregation with one more arguments, referenced using ""dimension"".
 * @throws Exception
 */
public void testBasic3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null);
}","/** 
 * Test use aggregation with one more arguments, referenced using ""dimension"".
 * @throws Exception
 */
public void testBasic3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"",null,""String_Node_Str"",null);
}",0.9758064516129032
73573,"/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.972984562607204
73574,"/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1() throws Exception {
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1() throws Exception {
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.9712197350388304
73575,"/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.9764837625979844
73576,"/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.9764837625979844
73577,"/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.9708333333333332
73578,"/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.9780487804878047
73579,"/** 
 * expression sort on 2 level: one with expression sort and the other with traditional sort.
 * @throws Exception
 */
public void testSortWithExpr() throws Exception {
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level12);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * expression sort on 2 level: one with expression sort and the other with traditional sort.
 * @throws Exception
 */
public void testSortWithExpr() throws Exception {
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level12);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.974820143884892
73580,"/** 
 * Test computed measure.
 * @throws Exception
 */
public void testComputedMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test computed measure.
 * @throws Exception
 */
public void testComputedMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.9722589167767504
73581,"/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasic() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasic() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.9713636363636364
73582,"/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReference() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReference() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9846789883268484
73583,"/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testMirroredCrosstab() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition leve113=hier1.createLevel(""String_Node_Str"");
  columnEdge.setMirrorStartingLevel(leve113);
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testMirroredCrosstab() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition leve113=hier1.createLevel(""String_Node_Str"");
  columnEdge.setMirrorStartingLevel(leve113);
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.97239263803681
73584,"/** 
 * Test use Nested Computed Measure.
 * @throws Exception
 */
public void testNestedComputedMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use Nested Computed Measure.
 * @throws Exception
 */
public void testNestedComputedMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.9737171464330412
73585,"/** 
 * Test subQuery in crosstab
 * @throws Exception
 */
public void testSubQuery3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  Context cx=null;
  try {
    cx=Context.enter();
    Scriptable sharedScope=cx.initStandardObjects();
    DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,sharedScope,null,null));
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults cqResults=pcq.execute(sharedScope);
    ICubeCursor cubeCursor=(ICubeCursor)cqResults.getCubeCursor();
    Scriptable subScope=cx.newObject(sharedScope);
    subScope.setParentScope(sharedScope);
    Scriptable subSubScope=cx.newObject(sharedScope);
    subSubScope.setParentScope(sharedScope);
    int depth=0;
    EdgeCursor edge1=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(0));
    EdgeCursor edge2=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(1));
    edge1.beforeFirst();
    while (edge2.next()) {
      edge1.beforeFirst();
      while (edge1.next()) {
        depth++;
        this.testPrintln(""String_Node_Str"" + cubeCursor.getObject(""String_Node_Str"").toString());
        ICubeCursor subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        EdgeCursor subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        EdgeCursor subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrintln(""String_Node_Str"" + subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
            ICubeCursor subSubCubeCursor=subCubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subSubScope);
            EdgeCursor subSubEdge1=(EdgeCursor)(subSubCubeCursor.getOrdinateEdge().get(0));
            EdgeCursor subSubEdge2=(EdgeCursor)(subSubCubeCursor.getOrdinateEdge().get(1));
            subSubEdge2.beforeFirst();
            this.testPrintln(""String_Node_Str"");
            while (subSubEdge2.next()) {
              subSubEdge1.beforeFirst();
              while (subSubEdge1.next()) {
                depth++;
                this.testPrint(subSubCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
    close(cubeCursor);
  }
  finally {
    if (cx != null)     cx.exit();
  }
  this.checkOutputFile();
}","/** 
 * Test subQuery in crosstab
 * @throws Exception
 */
public void testSubQuery3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  Context cx=null;
  try {
    cx=Context.enter();
    Scriptable sharedScope=cx.initStandardObjects();
    DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,sharedScope,null,null));
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults cqResults=pcq.execute(sharedScope);
    ICubeCursor cubeCursor=(ICubeCursor)cqResults.getCubeCursor();
    Scriptable subScope=cx.newObject(sharedScope);
    subScope.setParentScope(sharedScope);
    Scriptable subSubScope=cx.newObject(sharedScope);
    subSubScope.setParentScope(sharedScope);
    int depth=0;
    EdgeCursor edge1=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(0));
    EdgeCursor edge2=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(1));
    edge1.beforeFirst();
    while (edge2.next()) {
      edge1.beforeFirst();
      while (edge1.next()) {
        this.testPrintln(""String_Node_Str"" + cubeCursor.getObject(""String_Node_Str"").toString());
        ICubeCursor subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        EdgeCursor subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        EdgeCursor subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrintln(""String_Node_Str"" + subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
            ICubeCursor subSubCubeCursor=subCubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subSubScope);
            EdgeCursor subSubEdge1=(EdgeCursor)(subSubCubeCursor.getOrdinateEdge().get(0));
            EdgeCursor subSubEdge2=(EdgeCursor)(subSubCubeCursor.getOrdinateEdge().get(1));
            subSubEdge2.beforeFirst();
            this.testPrintln(""String_Node_Str"");
            while (subSubEdge2.next()) {
              subSubEdge1.beforeFirst();
              while (subSubEdge1.next()) {
                depth++;
                this.testPrint(subSubCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
    close(cubeCursor);
  }
  finally {
    if (cx != null)     cx.exit();
  }
  this.checkOutputFile();
}",0.6417370325693607
73586,"/** 
 * Test subQuery with mirrored level in crosstab
 * @throws Exception
 */
public void testSubQuery2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  columnEdge.setMirrorStartingLevel(level13);
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  Context cx=null;
  try {
    cx=Context.enter();
    Scriptable sharedScope=cx.initStandardObjects();
    DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,sharedScope,null,null));
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults cqResults=pcq.execute(sharedScope);
    ICubeCursor cubeCursor=(ICubeCursor)cqResults.getCubeCursor();
    Scriptable subScope=cx.newObject(sharedScope);
    subScope.setParentScope(sharedScope);
    int depth=0;
    Object value;
    EdgeCursor edge1=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(0));
    EdgeCursor edge2=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(1));
    edge1.beforeFirst();
    while (edge2.next()) {
      edge1.beforeFirst();
      while (edge1.next()) {
        depth++;
        value=cubeCursor.getObject(""String_Node_Str"");
        this.testPrintln(""String_Node_Str"" + value);
        ICubeCursor subCubeCursor=null;
        EdgeCursor subEdge1, subEdge2;
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(null,""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(null,null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
      }
    }
    close(cubeCursor);
  }
  finally {
    if (cx != null)     cx.exit();
  }
  this.checkOutputFile();
}","/** 
 * Test subQuery with mirrored level in crosstab
 * @throws Exception
 */
public void testSubQuery2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  columnEdge.setMirrorStartingLevel(level13);
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  Context cx=null;
  try {
    cx=Context.enter();
    Scriptable sharedScope=cx.initStandardObjects();
    DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,sharedScope,null,null));
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults cqResults=pcq.execute(sharedScope);
    ICubeCursor cubeCursor=(ICubeCursor)cqResults.getCubeCursor();
    Scriptable subScope=cx.newObject(sharedScope);
    subScope.setParentScope(sharedScope);
    int depth=0;
    Object value;
    EdgeCursor edge1=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(0));
    EdgeCursor edge2=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(1));
    edge1.beforeFirst();
    while (edge2.next()) {
      edge1.beforeFirst();
      while (edge1.next()) {
        value=cubeCursor.getObject(""String_Node_Str"");
        if (value != null)         this.testPrintln(""String_Node_Str"" + value);
 else         continue;
        ICubeCursor subCubeCursor=null;
        EdgeCursor subEdge1, subEdge2;
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            if (value != null)             this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(null,""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(null,null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
      }
    }
    close(cubeCursor);
  }
  finally {
    if (cx != null)     cx.exit();
  }
  this.checkOutputFile();
}",0.9675579872081376
73587,"/** 
 * Test computed measure.
 * @throws Exception
 */
public void testComputedMeasureCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test computed measure.
 * @throws Exception
 */
public void testComputedMeasureCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.9744110479285134
73588,"/** 
 * Test subQuery in crosstab
 * @throws Exception
 */
public void testSubQuery1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  Context cx=null;
  try {
    cx=Context.enter();
    Scriptable sharedScope=cx.initStandardObjects();
    DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,sharedScope,null,null));
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults cqResults=pcq.execute(sharedScope);
    ICubeCursor cubeCursor=(ICubeCursor)cqResults.getCubeCursor();
    Scriptable subScope=cx.newObject(sharedScope);
    subScope.setParentScope(sharedScope);
    int depth=0;
    EdgeCursor edge1=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(0));
    EdgeCursor edge2=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(1));
    edge1.beforeFirst();
    while (edge2.next()) {
      edge1.beforeFirst();
      while (edge1.next()) {
        depth++;
        this.testPrintln(""String_Node_Str"" + cubeCursor.getObject(""String_Node_Str"").toString());
        ICubeCursor subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        EdgeCursor subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        EdgeCursor subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(null,""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(null,null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
      }
    }
    close(cubeCursor);
  }
  finally {
    if (cx != null)     cx.exit();
  }
  this.checkOutputFile();
}","/** 
 * Test subQuery in crosstab
 * @throws Exception
 */
public void testSubQuery1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  Context cx=null;
  try {
    cx=Context.enter();
    Scriptable sharedScope=cx.initStandardObjects();
    DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,sharedScope,null,null));
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults cqResults=pcq.execute(sharedScope);
    ICubeCursor cubeCursor=(ICubeCursor)cqResults.getCubeCursor();
    Scriptable subScope=cx.newObject(sharedScope);
    subScope.setParentScope(sharedScope);
    int depth=0;
    EdgeCursor edge1=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(0));
    EdgeCursor edge2=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(1));
    edge1.beforeFirst();
    while (edge2.next()) {
      edge1.beforeFirst();
      while (edge1.next()) {
        depth++;
        this.testPrintln(""String_Node_Str"" + cubeCursor.getObject(""String_Node_Str"").toString());
        ICubeCursor subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        EdgeCursor subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        EdgeCursor subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          List dimension=subEdge2.getDimensionCursor();
          for (int i=0; i < dimension.size(); i++) {
            DimensionCursor dim=(DimensionCursor)dimension.get(i);
            System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dim.getEdgeStart()+ ""String_Node_Str""+ dim.getEdgeEnd()+ ""String_Node_Str"");
          }
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            List dimensions=subEdge1.getDimensionCursor();
            for (int i=0; i < dimensions.size(); i++) {
              DimensionCursor dim=(DimensionCursor)dimensions.get(i);
              System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dim.getEdgeStart()+ ""String_Node_Str""+ dim.getEdgeEnd()+ ""String_Node_Str"");
            }
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(null,""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(null,null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
      }
    }
    close(cubeCursor);
  }
  finally {
    if (cx != null)     cx.exit();
  }
  this.checkOutputFile();
}",0.949447655278367
73589,"private void printCube(CubeCursor cursor,List columnEdgeBindingNames,String rowEdgeBindingNames,String measureBindingNames,String columnAggr,String rowAggr,String overallAggr) throws Exception {
  EdgeCursor edge1=(EdgeCursor)(cursor.getOrdinateEdge().get(0));
  EdgeCursor edge2=(EdgeCursor)(cursor.getOrdinateEdge().get(1));
  String[] lines=new String[edge1.getDimensionCursor().size()];
  for (int i=0; i < lines.length; i++) {
    lines[i]=""String_Node_Str"";
  }
  while (edge1.next()) {
    for (int i=0; i < lines.length; i++) {
      lines[i]+=cursor.getObject(columnEdgeBindingNames.get(i).toString()) + ""String_Node_Str"";
    }
  }
  if (rowAggr != null)   lines[lines.length - 1]+=""String_Node_Str"";
  String output=""String_Node_Str"";
  for (int i=0; i < lines.length; i++) {
    output+=""String_Node_Str"" + lines[i];
  }
  while (edge2.next()) {
    String line=cursor.getObject(rowEdgeBindingNames).toString() + ""String_Node_Str"";
    edge1.beforeFirst();
    while (edge1.next()) {
      line+=cursor.getObject(measureBindingNames) + ""String_Node_Str"";
    }
    if (rowAggr != null)     line+=cursor.getObject(rowAggr);
    output+=""String_Node_Str"" + line;
  }
  if (columnAggr != null) {
    String line=""String_Node_Str"" + ""String_Node_Str"";
    edge1.beforeFirst();
    while (edge1.next()) {
      line+=cursor.getObject(columnAggr) + ""String_Node_Str"";
    }
    if (overallAggr != null)     line+=cursor.getObject(overallAggr);
    output+=""String_Node_Str"" + line;
  }
  this.testPrint(output);
  this.checkOutputFile();
  close(cursor);
}","private void printCube(CubeCursor cursor,List columnEdgeBindingNames,List rowEdgeBindingNames,String measureBindingNames,String columnAggr,String rowAggr,String overallAggr) throws Exception {
  String output=getOutputFromCursor(cursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,columnAggr,rowAggr,overallAggr);
  this.testPrint(output);
  this.checkOutputFile();
  close(cursor);
}",0.2413441955193482
73590,"/** 
 * @throws Exception
 */
public void testGrandTotalWithComputedMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * @throws Exception
 */
public void testGrandTotalWithComputedMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9828384636338872
73591,"/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.972961373390558
73592,"/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.972961373390558
73593,"/** 
 * expression sort on attribute
 */
public void testSortWithExpr1() throws Exception {
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_ASC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * expression sort on attribute
 */
public void testSortWithExpr1() throws Exception {
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_ASC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.9739669421487605
73594,"/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotal() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotal() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9819690898683456
73595,"/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.9705744978981784
73596,"/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasicCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasicCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"");
}",0.973651191969887
73597,"public ICubeCursor getCubeCursor() throws DataException {
  if (this.cubeCursor != null)   return this.cubeCursor;
  try {
    stopSign.start();
    CubeQueryExecutor executor=new CubeQueryExecutor(this.outResults,preparedQuery.getCubeQueryDefinition(),this.session,this.scope,this.context);
    BirtCubeView bcv=new BirtCubeView(executor,appContext);
    CubeCursor cubeCursor=bcv.getCubeCursor(stopSign);
    String newResultSetId=executor.getQueryResultsId();
    if (newResultSetId != null) {
      this.queryResultsId=newResultSetId;
    }
    this.scope.put(ScriptConstants.MEASURE_SCRIPTABLE,this.scope,new JSMeasureAccessor(cubeCursor,bcv.getMeasureMapping()));
    this.scope.put(ScriptConstants.DIMENSION_SCRIPTABLE,this.scope,new JSLevelAccessor(this.preparedQuery.getCubeQueryDefinition(),bcv));
    this.cubeCursor=new CubeCursorImpl(outResults,cubeCursor,this.scope,this.preparedQuery.getCubeQueryDefinition(),bcv);
    return this.cubeCursor;
  }
 catch (  OLAPException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","public ICubeCursor getCubeCursor() throws DataException {
  if (this.cubeCursor != null)   return this.cubeCursor;
  try {
    stopSign.start();
    CubeQueryExecutor executor=new CubeQueryExecutor(this.outResults,(ICubeQueryDefinition)preparedQuery.getCubeQueryDefinition(),this.session,this.scope,this.context);
    BirtCubeView bcv=new BirtCubeView(executor,appContext);
    CubeCursor cubeCursor=bcv.getCubeCursor(stopSign);
    String newResultSetId=executor.getQueryResultsId();
    if (newResultSetId != null) {
      this.queryResultsId=newResultSetId;
    }
    this.scope.put(ScriptConstants.MEASURE_SCRIPTABLE,this.scope,new JSMeasureAccessor(cubeCursor,bcv.getMeasureMapping()));
    this.scope.put(ScriptConstants.DIMENSION_SCRIPTABLE,this.scope,new JSLevelAccessor((ICubeQueryDefinition)this.preparedQuery.getCubeQueryDefinition(),bcv));
    this.cubeCursor=new CubeCursorImpl(outResults,cubeCursor,this.scope,(ICubeQueryDefinition)this.preparedQuery.getCubeQueryDefinition(),bcv);
    return this.cubeCursor;
  }
 catch (  OLAPException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.969529085872576
73598,"/** 
 * @param preparedQuery
 * @param scope
 */
public CubeQueryResults(IBaseQueryResults outResults,PreparedCubeQuery preparedQuery,DataEngineSession session,Scriptable scope,DataEngineContext context,Map appContext){
  this.preparedQuery=preparedQuery;
  this.scope=scope;
  this.context=context;
  this.session=session;
  this.appContext=appContext;
  this.queryResultsId=preparedQuery.getCubeQueryDefinition().getQueryResultsID();
  this.outResults=outResults;
  this.stopSign=new StopSign();
}","/** 
 * @param preparedQuery
 * @param scope
 */
public CubeQueryResults(IBaseQueryResults outResults,PreparedCubeQuery preparedQuery,DataEngineSession session,Scriptable scope,DataEngineContext context,Map appContext){
  this.preparedQuery=preparedQuery;
  this.scope=scope;
  this.context=context;
  this.session=session;
  this.appContext=appContext;
  this.queryResultsId=((ICubeQueryDefinition)preparedQuery.getCubeQueryDefinition()).getQueryResultsID();
  this.outResults=outResults;
  this.stopSign=new StopSign();
}",0.9765166340508806
73599,"public ICubeQueryDefinition getCubeQueryDefinition(){
  return this.cubeQueryDefn;
}","public IBaseCubeQueryDefinition getCubeQueryDefinition(){
  return this.cubeQueryDefn;
}",0.9767441860465116
73600,"public String[] getActionExpressions(Action action,StructureSource source){
  if (ActionType.URL_REDIRECT_LITERAL.equals(action.getType())) {
    URLValue uv=(URLValue)action.getValue();
    String sa=uv.getBaseUrl();
    try {
      ActionHandle handle=ModuleUtil.deserializeAction(sa);
      List expList=new ArrayList();
      String exp;
      if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType())) {
        exp=handle.getURI();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
 else       if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType())) {
        exp=handle.getTargetBookmark();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
 else       if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType())) {
        exp=handle.getTargetBookmark();
        if (exp != null && !expList.contains(exp)) {
          expList.add(exp);
        }
        for (Iterator itr=handle.getSearch().iterator(); itr.hasNext(); ) {
          SearchKeyHandle skh=(SearchKeyHandle)itr.next();
          exp=skh.getExpression();
          if (!expList.contains(exp)) {
            expList.add(exp);
          }
        }
        for (Iterator itr=handle.getParamBindings().iterator(); itr.hasNext(); ) {
          ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
          exp=pbh.getExpression();
          if (!expList.contains(exp)) {
            expList.add(exp);
          }
        }
      }
      if (expList.size() > 0) {
        return (String[])expList.toArray(new String[expList.size()]);
      }
    }
 catch (    DesignFileException e) {
      logger.log(e);
    }
  }
 else   if (ActionType.SHOW_TOOLTIP_LITERAL.equals(action.getType())) {
    if (StructureType.SERIES.equals(source.getType())) {
      TooltipValue tv=(TooltipValue)action.getValue();
      String exp=tv.getText();
      if (exp != null && exp.trim().length() > 0) {
        return new String[]{exp};
      }
    }
  }
  return null;
}","public String[] getActionExpressions(Action action,StructureSource source){
  if (ActionType.URL_REDIRECT_LITERAL.equals(action.getType())) {
    URLValue uv=(URLValue)action.getValue();
    String sa=uv.getBaseUrl();
    try {
      ActionHandle handle=ModuleUtil.deserializeAction(sa);
      List expList=new ArrayList();
      String exp;
      if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType())) {
        exp=handle.getURI();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
 else       if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType())) {
        exp=handle.getTargetBookmark();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
 else       if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType())) {
        exp=handle.getTargetBookmark();
        if (exp != null && !expList.contains(exp)) {
          expList.add(exp);
        }
        for (Iterator itr=handle.getSearch().iterator(); itr.hasNext(); ) {
          SearchKeyHandle skh=(SearchKeyHandle)itr.next();
          exp=skh.getExpression();
          if (!expList.contains(exp)) {
            expList.add(exp);
          }
        }
        for (Iterator itr=handle.getParamBindings().iterator(); itr.hasNext(); ) {
          ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
          exp=pbh.getExpression();
          if (!expList.contains(exp)) {
            expList.add(exp);
          }
        }
      }
      if (expList.size() > 0) {
        return replaceRawExpression((String[])expList.toArray(new String[expList.size()]));
      }
    }
 catch (    DesignFileException e) {
      logger.log(e);
    }
  }
 else   if (ActionType.SHOW_TOOLTIP_LITERAL.equals(action.getType())) {
    if (StructureType.SERIES.equals(source.getType())) {
      TooltipValue tv=(TooltipValue)action.getValue();
      String exp=tv.getText();
      if (exp != null && exp.trim().length() > 0) {
        return replaceRawExpression(new String[]{exp});
      }
    }
  }
  return null;
}",0.9894686452848253
73601,"public Object evaluate(String expression){
  Object result=null;
  try {
    result=cubeCursor.getObject(ChartCubeQueryHelper.getBindingName(expression));
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return result;
}","public Object evaluate(String expression){
  Object result=null;
  try {
    String bindingName=ChartCubeQueryHelper.getBindingName(expression);
    if (bindingName != null) {
      result=cubeCursor.getObject(bindingName);
    }
 else {
      result=rs.evaluate(expression);
    }
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
catch (  BirtException e) {
    logger.log(e);
  }
  return result;
}",0.5723270440251572
73602,"public ChartCubeQueryHelper(ExtendedItemHandle handle,Chart cm){
  this.handle=handle;
  this.cm=cm;
  this.bInXtabDetail=ChartXTabUtil.isChartInXTab(handle);
}","public ChartCubeQueryHelper(ExtendedItemHandle handle,Chart cm){
  this.handle=handle;
  this.cm=cm;
  this.bInXtabDetail=ChartXTabUtil.isChartInXTab(handle);
  IActionEvaluator iae=BIRTActionEvaluator.getInstance(handle);
  iae.addExpressionReplaceable(this);
}",0.7582938388625592
73603,"public List getRowExpressions(){
  try {
    return Generator.instance().getRowExpressions(cm,new BIRTActionEvaluator());
  }
 catch (  ChartException e) {
    logger.log(e);
  }
  return null;
}","public List getRowExpressions(){
  try {
    return Generator.instance().getRowExpressions(cm,BIRTActionEvaluator.getInstance(handle));
  }
 catch (  ChartException e) {
    logger.log(e);
  }
  return null;
}",0.9405940594059404
73604,"public Object onRowSets(IBaseResultSet[] baseResultSet) throws BirtException {
  IBaseResultSet resultSet=getDataToRender(baseResultSet);
  if (resultSet == null) {
    return null;
  }
  try {
    if (rtc.getScale() == null && ChartReportItemUtil.canScaleShared(handle,cm)) {
      rtc.setScale(createSharedScale(resultSet));
    }
    updateChartModel();
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    initializeScriptHandler(externalContext);
    IDataRowExpressionEvaluator rowAdapter=createEvaluator(resultSet);
    BIRTActionEvaluator evaluator=new BIRTActionEvaluator();
    Generator.instance().bindData(rowAdapter,evaluator,cm,rtc);
    prepareDeviceRenderer();
    GeneratedChartState gcs=buildChart(rowAdapter,externalContext);
    renderToImageFile(gcs);
    rowAdapter.close();
    if (rtc.getScale() != null && !rtc.getScale().isShared()) {
      rtc.getScale().setShared(true);
      ((ChartReportItemImpl)getReportItem(handle)).setScale(rtc.getScale());
    }
    return getImageToDisplay();
  }
 catch (  BirtException birtException) {
    if (isNoDataException(birtException)) {
      return null;
    }
 else {
      throw birtException;
    }
  }
catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
}","public Object onRowSets(IBaseResultSet[] baseResultSet) throws BirtException {
  IBaseResultSet resultSet=getDataToRender(baseResultSet);
  if (resultSet == null) {
    return null;
  }
  try {
    if (rtc.getScale() == null && ChartReportItemUtil.canScaleShared(handle,cm)) {
      rtc.setScale(createSharedScale(resultSet));
    }
    updateChartModel();
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    initializeScriptHandler(externalContext);
    IDataRowExpressionEvaluator rowAdapter=createEvaluator(resultSet);
    IActionEvaluator evaluator=BIRTActionEvaluator.getInstance(handle);
    Generator.instance().bindData(rowAdapter,evaluator,cm,rtc);
    prepareDeviceRenderer();
    GeneratedChartState gcs=buildChart(rowAdapter,externalContext);
    renderToImageFile(gcs);
    rowAdapter.close();
    if (rtc.getScale() != null && !rtc.getScale().isShared()) {
      rtc.getScale().setShared(true);
      ((ChartReportItemImpl)getReportItem(handle)).setScale(rtc.getScale());
    }
    return getImageToDisplay();
  }
 catch (  BirtException birtException) {
    if (isNoDataException(birtException)) {
      return null;
    }
 else {
      throw birtException;
    }
  }
catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
}",0.9713679745493108
73605,"public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
  if (hostChart instanceof ExtendedItemHandle) {
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=""String_Node_Str"";
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : (Chart)EcoreUtil.copy(cm);
    final Object[] applyData=new Object[2];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    IChartDataSheet dataSheet=new StandardChartDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=new ChartWizardContext(cmClone,this,dataProvider,dataSheet);
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=EcoreUtil.copy(context.getModel());
        applyData[1]=context.getOutputFormat();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(ChartReportItemUtil.isRtl());
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else       context.setOutputFormat((String)of);
    }
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    if (contextResult != null && contextResult.getModel() != null) {
      commandStack.commit();
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat());
      if (hostChart != null) {
        ChartReportItemUtil.getChartReportItemFromHandle(eih).setModel(contextResult.getModel());
      }
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1]);
      if (hostChart != null) {
        ChartReportItemUtil.getChartReportItemFromHandle(eih).setModel((Chart)applyData[0]);
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
  }
}","public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
  if (hostChart instanceof ExtendedItemHandle) {
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=""String_Node_Str"";
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : (Chart)EcoreUtil.copy(cm);
    final Object[] applyData=new Object[2];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    IChartDataSheet dataSheet=new StandardChartDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=new ChartWizardContext(cmClone,this,dataProvider,dataSheet);
    if (dataProvider.isInXTab()) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=EcoreUtil.copy(context.getModel());
        applyData[1]=context.getOutputFormat();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(ChartReportItemUtil.isRtl());
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else       context.setOutputFormat((String)of);
    }
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    if (contextResult != null && contextResult.getModel() != null) {
      commandStack.commit();
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat());
      if (hostChart != null) {
        ChartReportItemUtil.getChartReportItemFromHandle(eih).setModel(contextResult.getModel());
      }
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1]);
      if (hostChart != null) {
        ChartReportItemUtil.getChartReportItemFromHandle(eih).setModel((Chart)applyData[0]);
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
  }
}",0.9419896991054486
73606,"public final String[] validate(Chart cm,Object oContext){
  final ArrayList alProblems=new ArrayList(4);
  final ExtendedItemHandle eih=(ExtendedItemHandle)oContext;
  if (DEUtil.getDataSetList(eih).size() == 0 && ChartReportItemUtil.getBindingCube(eih) == null) {
    alProblems.add(Messages.getString(""String_Node_Str""));
  }
  final QueryUIHelper.SeriesQueries[] qsqa=new QueryUIHelper().getSeriesQueryDefinitions(cm);
  Collection co;
  for (int i=0; i < qsqa.length; i++) {
    co=qsqa[i].validate();
    if (co != null) {
      alProblems.addAll(co);
    }
  }
  return (String[])alProblems.toArray(new String[alProblems.size()]);
}","public final String[] validate(Chart cm,Object oContext){
  final ArrayList alProblems=new ArrayList(4);
  final ExtendedItemHandle eih=(ExtendedItemHandle)oContext;
  if (DEUtil.getDataSetList(eih).size() == 0 && ChartXTabUtil.getBindingCube(eih) == null) {
    alProblems.add(Messages.getString(""String_Node_Str""));
  }
  final QueryUIHelper.SeriesQueries[] qsqa=new QueryUIHelper().getSeriesQueryDefinitions(cm);
  Collection co;
  for (int i=0; i < qsqa.length; i++) {
    co=qsqa[i].validate();
    if (co != null) {
      alProblems.addAll(co);
    }
  }
  return (String[])alProblems.toArray(new String[alProblems.size()]);
}",0.988976377952756
73607,"private void updateChartModelAndSize(){
  if (crii != null) {
    cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    if (ChartReportItemUtil.isChartInXTab(crii.getHandle())) {
      if (!crii.hasHostChart()) {
        cm=ChartReportItemUtil.updateModelToRenderPlot((Chart)EcoreUtil.copy(cm));
      }
 else {
        cm=ChartReportItemUtil.updateModelToRenderAxis((Chart)EcoreUtil.copy(cm));
      }
    }
    if (cm != null) {
      if (!crii.hasHostChart()) {
        final IDisplayServer idsSWT=ChartUIUtil.getDisplayServer();
        final Bounds bo=cm.getBlock().getBounds().scaledInstance(72d / idsSWT.getDpiResolution());
        setSize((int)bo.getWidth(),(int)bo.getHeight());
      }
    }
 else {
      setSize((int)ChartReportItemUtil.DEFAULT_CHART_BLOCK_WIDTH,(int)ChartReportItemUtil.DEFAULT_CHART_BLOCK_HEIGHT);
    }
  }
 else {
    setSize((int)ChartReportItemUtil.DEFAULT_CHART_BLOCK_WIDTH,(int)ChartReportItemUtil.DEFAULT_CHART_BLOCK_HEIGHT);
  }
}","private void updateChartModelAndSize(){
  if (crii != null) {
    cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    if (ChartXTabUtil.isChartInXTab(crii.getHandle())) {
      if (!crii.hasHostChart()) {
        cm=ChartXTabUtil.updateModelToRenderPlot((Chart)EcoreUtil.copy(cm));
      }
 else {
        cm=ChartXTabUtil.updateModelToRenderAxis((Chart)EcoreUtil.copy(cm));
      }
    }
    if (cm != null) {
      if (!crii.hasHostChart()) {
        final IDisplayServer idsSWT=ChartUIUtil.getDisplayServer();
        final Bounds bo=cm.getBlock().getBounds().scaledInstance(72d / idsSWT.getDpiResolution());
        setSize((int)bo.getWidth(),(int)bo.getHeight());
      }
    }
 else {
      setSize((int)ChartReportItemUtil.DEFAULT_CHART_BLOCK_WIDTH,(int)ChartReportItemUtil.DEFAULT_CHART_BLOCK_HEIGHT);
    }
  }
 else {
    setSize((int)ChartReportItemUtil.DEFAULT_CHART_BLOCK_WIDTH,(int)ChartReportItemUtil.DEFAULT_CHART_BLOCK_HEIGHT);
  }
}",0.964102564102564
73608,"public DataType getDataType(String expression){
  if (expression == null || expression.trim().length() == 0 || ChartReportItemUtil.getBindingCube(itemHandle) != null) {
    return null;
  }
  Object[] returnObj=findDataType(expression,itemHandle);
  if (((Boolean)returnObj[0]).booleanValue()) {
    return (DataType)returnObj[1];
  }
  ReportItemHandle parentHandle=DEUtil.getBindingHolder(itemHandle);
  if (parentHandle != null) {
    returnObj=findDataType(expression,parentHandle);
    if (((Boolean)returnObj[0]).booleanValue()) {
      return (DataType)returnObj[1];
    }
  }
  try {
    NumberFormat.getInstance().parse(expression);
    return DataType.NUMERIC_LITERAL;
  }
 catch (  ParseException e) {
  }
  try {
    DateFormat.getInstance().parse(expression);
    return DataType.DATE_TIME_LITERAL;
  }
 catch (  ParseException e) {
  }
  return null;
}","public DataType getDataType(String expression){
  if (expression == null || expression.trim().length() == 0 || ChartXTabUtil.getBindingCube(itemHandle) != null) {
    return null;
  }
  Object[] returnObj=findDataType(expression,itemHandle);
  if (((Boolean)returnObj[0]).booleanValue()) {
    return (DataType)returnObj[1];
  }
  ReportItemHandle parentHandle=DEUtil.getBindingHolder(itemHandle);
  if (parentHandle != null) {
    returnObj=findDataType(expression,parentHandle);
    if (((Boolean)returnObj[0]).booleanValue()) {
      return (DataType)returnObj[1];
    }
  }
  try {
    NumberFormat.getInstance().parse(expression);
    return DataType.NUMERIC_LITERAL;
  }
 catch (  ParseException e) {
  }
  try {
    DateFormat.getInstance().parse(expression);
    return DataType.DATE_TIME_LITERAL;
  }
 catch (  ParseException e) {
  }
  return null;
}",0.9918887601390498
73609,"private void initDataSelector(){
  cmbDataItems.setItems(createDataComboItems());
  String sItemRef=getDataServiceProvider().getReportItemReference();
  if (sItemRef != null) {
    btnUseData.setSelection(true);
    cmbDataItems.setText(sItemRef);
    return;
  }
  String sDataSet=getDataServiceProvider().getBoundDataSet();
  if (sDataSet != null && !getDataServiceProvider().isInMultiViews()) {
    btnUseData.setSelection(true);
    cmbDataItems.setText(sDataSet);
    if (sDataSet != null) {
      switchDataTable();
    }
    return;
  }
  String sDataCube=getDataServiceProvider().getDataCube();
  if (sDataCube != null && !getDataServiceProvider().isInMultiViews()) {
    btnUseData.setSelection(true);
    cmbDataItems.setText(sDataCube);
    return;
  }
  btnInherit.setSelection(true);
  if (getDataServiceProvider().isInMultiViews()) {
    btnUseData.setSelection(false);
    btnUseData.setEnabled(false);
  }
  cmbDataItems.select(0);
  cmbDataItems.setEnabled(false);
  getDataServiceProvider().setDataSet(null);
  String reportDataSet=getDataServiceProvider().getReportDataSet();
  if (reportDataSet != null) {
    switchDataTable();
  }
}","private void initDataSelector(){
  cmbDataItems.setItems(createDataComboItems());
  String sItemRef=getDataServiceProvider().getReportItemReference();
  if (sItemRef != null) {
    btnUseData.setSelection(true);
    cmbDataItems.setText(sItemRef);
    return;
  }
  String sDataSet=getDataServiceProvider().getBoundDataSet();
  if (sDataSet != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    cmbDataItems.setText(sDataSet);
    if (sDataSet != null) {
      switchDataTable();
    }
    return;
  }
  String sDataCube=getDataServiceProvider().getDataCube();
  if (sDataCube != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    cmbDataItems.setText(sDataCube);
    return;
  }
  btnInherit.setSelection(true);
  if (getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(false);
    btnUseData.setEnabled(false);
  }
  cmbDataItems.select(0);
  cmbDataItems.setEnabled(false);
  getDataServiceProvider().setDataSet(null);
  String reportDataSet=getDataServiceProvider().getReportDataSet();
  if (reportDataSet != null) {
    switchDataTable();
  }
}",0.97022011221407
73610,"private CubeHandle getCube(){
  return ChartReportItemUtil.getBindingCube(itemHandle);
}","private CubeHandle getCube(){
  return ChartXTabUtil.getBindingCube(itemHandle);
}",0.9176470588235294
73611,"private void addMenu(IMenuManager manager,Object item){
  if (item instanceof IAction) {
    manager.add((IAction)item);
  }
 else   if (item instanceof IContributionItem) {
    manager.add((IContributionItem)item);
  }
}","private void addMenu(IMenuManager manager,Object item){
  if (item instanceof IAction) {
    manager.add((IAction)item);
  }
 else   if (item instanceof IContributionItem) {
    manager.add((IContributionItem)item);
  }
  if (getDataServiceProvider().isInXTab()) {
    if (item instanceof IAction) {
      ((IAction)item).setEnabled(false);
    }
  }
}",0.7678883071553229
73612,"private boolean isCubeMode(){
  return ChartReportItemUtil.getBindingCube(itemHandle) != null;
}","private boolean isCubeMode(){
  return ChartXTabUtil.getBindingCube(itemHandle) != null;
}",0.9247311827956988
73613,"private MenuManager createMenuManager(final Object data){
  MenuManager menuManager=new MenuManager();
  menuManager.setRemoveAllWhenShown(true);
  menuManager.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      if (data instanceof Integer) {
        addMenu(manager,new HeaderShowAction(tablePreview.getCurrentColumnHeading()));
        String expr=ExpressionUtil.createJSRowExpression(tablePreview.getCurrentColumnHeading());
        addMenu(manager,getBaseSeriesMenu(getChartModel(),expr));
        addMenu(manager,getOrthogonalSeriesMenu(getChartModel(),expr));
        addMenu(manager,getGroupSeriesMenu(getChartModel(),expr));
      }
 else       if (data instanceof MeasureHandle) {
        String expr=createCubeExpression();
        addMenu(manager,getOrthogonalSeriesMenu(getChartModel(),expr));
      }
 else       if (data instanceof LevelHandle) {
        String expr=createCubeExpression();
        addMenu(manager,getBaseSeriesMenu(getChartModel(),expr));
        addMenu(manager,getGroupSeriesMenu(getChartModel(),expr));
      }
    }
    private void addMenu(    IMenuManager manager,    Object item){
      if (item instanceof IAction) {
        manager.add((IAction)item);
      }
 else       if (item instanceof IContributionItem) {
        manager.add((IContributionItem)item);
      }
    }
  }
);
  return menuManager;
}","private MenuManager createMenuManager(final Object data){
  MenuManager menuManager=new MenuManager();
  menuManager.setRemoveAllWhenShown(true);
  menuManager.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      if (data instanceof Integer) {
        addMenu(manager,new HeaderShowAction(tablePreview.getCurrentColumnHeading()));
        String expr=ExpressionUtil.createJSRowExpression(tablePreview.getCurrentColumnHeading());
        addMenu(manager,getBaseSeriesMenu(getChartModel(),expr));
        addMenu(manager,getOrthogonalSeriesMenu(getChartModel(),expr));
        addMenu(manager,getGroupSeriesMenu(getChartModel(),expr));
      }
 else       if (data instanceof MeasureHandle) {
        String expr=createCubeExpression();
        addMenu(manager,getOrthogonalSeriesMenu(getChartModel(),expr));
      }
 else       if (data instanceof LevelHandle) {
        String expr=createCubeExpression();
        addMenu(manager,getBaseSeriesMenu(getChartModel(),expr));
        addMenu(manager,getGroupSeriesMenu(getChartModel(),expr));
      }
    }
    private void addMenu(    IMenuManager manager,    Object item){
      if (item instanceof IAction) {
        manager.add((IAction)item);
      }
 else       if (item instanceof IContributionItem) {
        manager.add((IContributionItem)item);
      }
      if (getDataServiceProvider().isInXTab()) {
        if (item instanceof IAction) {
          ((IAction)item).setEnabled(false);
        }
      }
    }
  }
);
  return menuManager;
}",0.9316093909493024
73614,"private void updatePredefinedQueries(){
  CubeHandle cube=getCube();
  if (cube == null) {
    getContext().addPredefinedQuery(ChartUIConstants.QUERY_CATEGORY,null);
    getContext().addPredefinedQuery(ChartUIConstants.QUERY_VALUE,null);
    getContext().addPredefinedQuery(ChartUIConstants.QUERY_OPTIONAL,null);
  }
 else {
    List measures=ChartReportItemUtil.getAllMeasures(cube);
    if (!measures.isEmpty()) {
      String[] exprs=new String[measures.size()];
      for (int i=0; i < exprs.length; i++) {
        exprs[i]=ExpressionUtil.createJSMeasureExpression(((MeasureHandle)measures.get(i)).getName());
      }
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_VALUE,exprs);
    }
    List levels=ChartReportItemUtil.getAllLevels(cube);
    if (!levels.isEmpty()) {
      String[] exprs=new String[levels.size()];
      for (int i=0; i < exprs.length; i++) {
        exprs[i]=ChartReportItemUtil.createDimensionExpression((LevelHandle)levels.get(i));
      }
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_CATEGORY,exprs);
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_OPTIONAL,exprs);
    }
  }
  fireEvent(btnBinding,EVENT_QUERY);
}","private void updatePredefinedQueries(){
  if (dataProvider.isInXTab()) {
    try {
      CrosstabReportItemHandle xtab=ChartXTabUtil.getXtabContainerCell(itemHandle).getCrosstab();
      List levels=ChartXTabUtil.getAllLevels(xtab);
      String[] exprs=(String[])levels.toArray(new String[levels.size()]);
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_CATEGORY,exprs);
      xtab.getMeasure(0).getAggregationCell(0);
    }
 catch (    BirtException e) {
      WizardBase.displayException(e);
    }
  }
 else {
    CubeHandle cube=getCube();
    if (cube == null) {
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_CATEGORY,null);
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_VALUE,null);
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_OPTIONAL,null);
    }
 else {
      List measures=ChartXTabUtil.getAllMeasures(cube);
      if (!measures.isEmpty()) {
        String[] exprs=new String[measures.size()];
        for (int i=0; i < exprs.length; i++) {
          exprs[i]=ExpressionUtil.createJSMeasureExpression(((MeasureHandle)measures.get(i)).getName());
        }
        getContext().addPredefinedQuery(ChartUIConstants.QUERY_VALUE,exprs);
      }
      List levels=ChartXTabUtil.getAllLevels(cube);
      if (!levels.isEmpty()) {
        String[] exprs=new String[levels.size()];
        for (int i=0; i < exprs.length; i++) {
          exprs[i]=ChartXTabUtil.createDimensionExpression((LevelHandle)levels.get(i));
        }
        getContext().addPredefinedQuery(ChartUIConstants.QUERY_CATEGORY,exprs);
        getContext().addPredefinedQuery(ChartUIConstants.QUERY_OPTIONAL,exprs);
      }
    }
  }
  fireEvent(btnBinding,EVENT_QUERY);
}",0.7280276816608997
73615,"/** 
 * Test subQuery in crosstab
 * @throws Exception
 */
public void testSubQuery3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  Context cx=null;
  try {
    cx=Context.enter();
    Scriptable sharedScope=cx.initStandardObjects();
    DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,sharedScope,null,null));
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults cqResults=pcq.execute(sharedScope);
    ICubeCursor cubeCursor=(ICubeCursor)cqResults.getCubeCursor();
    Scriptable subScope=cx.newObject(sharedScope);
    subScope.setParentScope(sharedScope);
    Scriptable subSubScope=cx.newObject(sharedScope);
    subSubScope.setParentScope(sharedScope);
    int depth=0;
    EdgeCursor edge1=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(0));
    EdgeCursor edge2=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(1));
    edge1.beforeFirst();
    while (edge2.next()) {
      edge1.beforeFirst();
      while (edge1.next()) {
        this.testPrintln(""String_Node_Str"" + cubeCursor.getObject(""String_Node_Str"").toString());
        ICubeCursor subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        EdgeCursor subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        EdgeCursor subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrintln(""String_Node_Str"" + subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
            ICubeCursor subSubCubeCursor=subCubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subSubScope);
            EdgeCursor subSubEdge1=(EdgeCursor)(subSubCubeCursor.getOrdinateEdge().get(0));
            EdgeCursor subSubEdge2=(EdgeCursor)(subSubCubeCursor.getOrdinateEdge().get(1));
            subSubEdge2.beforeFirst();
            this.testPrintln(""String_Node_Str"");
            while (subSubEdge2.next()) {
              subSubEdge1.beforeFirst();
              while (subSubEdge1.next()) {
                depth++;
                this.testPrint(subSubCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
    close(cubeCursor);
  }
  finally {
    if (cx != null)     cx.exit();
  }
  this.checkOutputFile();
}","/** 
 * Test subQuery in crosstab
 * @throws Exception
 */
public void testSubQuery3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  Context cx=null;
  try {
    cx=Context.enter();
    Scriptable sharedScope=cx.initStandardObjects();
    DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,sharedScope,null,null));
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults cqResults=pcq.execute(sharedScope);
    ICubeCursor cubeCursor=(ICubeCursor)cqResults.getCubeCursor();
    Scriptable subScope=cx.newObject(sharedScope);
    subScope.setParentScope(sharedScope);
    Scriptable subSubScope=cx.newObject(sharedScope);
    subSubScope.setParentScope(sharedScope);
    ISubCubeQueryDefinition subQuery1=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    ISubCubeQueryDefinition subQuery2=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    int depth=0;
    EdgeCursor edge1=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(0));
    EdgeCursor edge2=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(1));
    edge1.beforeFirst();
    while (edge2.next()) {
      edge1.beforeFirst();
      while (edge1.next()) {
        this.testPrintln(""String_Node_Str"" + cubeCursor.getObject(""String_Node_Str"").toString());
        ICubeQueryResults subResult=engine.prepare(subQuery1,null).execute(cqResults,subScope);
        ICubeCursor subCubeCursor=subResult.getCubeCursor();
        EdgeCursor subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        EdgeCursor subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrintln(""String_Node_Str"" + subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
            ICubeCursor subSubCubeCursor=engine.prepare(subQuery2,null).execute(subResult,subScope).getCubeCursor();
            EdgeCursor subSubEdge1=(EdgeCursor)(subSubCubeCursor.getOrdinateEdge().get(0));
            EdgeCursor subSubEdge2=(EdgeCursor)(subSubCubeCursor.getOrdinateEdge().get(1));
            subSubEdge2.beforeFirst();
            this.testPrintln(""String_Node_Str"");
            while (subSubEdge2.next()) {
              subSubEdge1.beforeFirst();
              while (subSubEdge1.next()) {
                depth++;
                this.testPrint(subSubCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
    close(cubeCursor);
  }
  finally {
    if (cx != null)     cx.exit();
  }
  this.checkOutputFile();
}",0.913087785703887
73616,"/** 
 * Test subQuery with mirrored level in crosstab
 * @throws Exception
 */
public void testSubQuery2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  columnEdge.setMirrorStartingLevel(level13);
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  Context cx=null;
  try {
    cx=Context.enter();
    Scriptable sharedScope=cx.initStandardObjects();
    DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,sharedScope,null,null));
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults cqResults=pcq.execute(sharedScope);
    ICubeCursor cubeCursor=(ICubeCursor)cqResults.getCubeCursor();
    Scriptable subScope=cx.newObject(sharedScope);
    subScope.setParentScope(sharedScope);
    int depth=0;
    Object value;
    EdgeCursor edge1=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(0));
    EdgeCursor edge2=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(1));
    edge1.beforeFirst();
    while (edge2.next()) {
      edge1.beforeFirst();
      while (edge1.next()) {
        value=cubeCursor.getObject(""String_Node_Str"");
        if (value != null)         this.testPrintln(""String_Node_Str"" + value);
 else         continue;
        ICubeCursor subCubeCursor=null;
        EdgeCursor subEdge1, subEdge2;
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            if (value != null)             this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(null,""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(null,null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
      }
    }
    close(cubeCursor);
  }
  finally {
    if (cx != null)     cx.exit();
  }
  this.checkOutputFile();
}","/** 
 * Test subQuery with mirrored level in crosstab
 * @throws Exception
 */
public void testSubQuery2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  columnEdge.setMirrorStartingLevel(level13);
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  Context cx=null;
  try {
    cx=Context.enter();
    Scriptable sharedScope=cx.initStandardObjects();
    DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,sharedScope,null,null));
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults cqResults=pcq.execute(sharedScope);
    ICubeCursor cubeCursor=(ICubeCursor)cqResults.getCubeCursor();
    Scriptable subScope=cx.newObject(sharedScope);
    subScope.setParentScope(sharedScope);
    ISubCubeQueryDefinition subQuery1=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    ISubCubeQueryDefinition subQuery2=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    ISubCubeQueryDefinition subQuery3=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    ISubCubeQueryDefinition subQuery4=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",null);
    ISubCubeQueryDefinition subQuery5=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",null);
    ISubCubeQueryDefinition subQuery6=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",null);
    ISubCubeQueryDefinition subQuery7=new SubCubeQueryDefinition(""String_Node_Str"",null,""String_Node_Str"");
    ISubCubeQueryDefinition subQuery8=new SubCubeQueryDefinition(""String_Node_Str"",null,null);
    int depth=0;
    Object value;
    EdgeCursor edge1=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(0));
    EdgeCursor edge2=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(1));
    edge1.beforeFirst();
    while (edge2.next()) {
      edge1.beforeFirst();
      while (edge1.next()) {
        value=cubeCursor.getObject(""String_Node_Str"");
        if (value != null)         this.testPrintln(""String_Node_Str"" + value);
 else         continue;
        ICubeCursor subCubeCursor=null;
        EdgeCursor subEdge1, subEdge2;
        subCubeCursor=engine.prepare(subQuery1,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery2,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery3,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery4,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery5,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery6,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery7,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery8,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
      }
    }
    close(cubeCursor);
  }
  finally {
    if (cx != null)     cx.exit();
  }
  this.checkOutputFile();
}",0.635169460773641
73617,"/** 
 * Test subQuery in crosstab
 * @throws Exception
 */
public void testSubQuery1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  Context cx=null;
  try {
    cx=Context.enter();
    Scriptable sharedScope=cx.initStandardObjects();
    DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,sharedScope,null,null));
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults cqResults=pcq.execute(sharedScope);
    ICubeCursor cubeCursor=(ICubeCursor)cqResults.getCubeCursor();
    Scriptable subScope=cx.newObject(sharedScope);
    subScope.setParentScope(sharedScope);
    int depth=0;
    EdgeCursor edge1=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(0));
    EdgeCursor edge2=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(1));
    edge1.beforeFirst();
    while (edge2.next()) {
      edge1.beforeFirst();
      while (edge1.next()) {
        depth++;
        this.testPrintln(""String_Node_Str"" + cubeCursor.getObject(""String_Node_Str"").toString());
        ICubeCursor subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        EdgeCursor subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        EdgeCursor subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          List dimension=subEdge2.getDimensionCursor();
          for (int i=0; i < dimension.size(); i++) {
            DimensionCursor dim=(DimensionCursor)dimension.get(i);
            System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dim.getEdgeStart()+ ""String_Node_Str""+ dim.getEdgeEnd()+ ""String_Node_Str"");
          }
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            List dimensions=subEdge1.getDimensionCursor();
            for (int i=0; i < dimensions.size(); i++) {
              DimensionCursor dim=(DimensionCursor)dimensions.get(i);
              System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dim.getEdgeStart()+ ""String_Node_Str""+ dim.getEdgeEnd()+ ""String_Node_Str"");
            }
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(""String_Node_Str"",null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(null,""String_Node_Str"",null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=cubeCursor.getSubCubeCursor(null,null,null,subScope);
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            depth++;
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
      }
    }
    close(cubeCursor);
  }
  finally {
    if (cx != null)     cx.exit();
  }
  this.checkOutputFile();
}","/** 
 * Test subQuery in crosstab
 * @throws Exception
 */
public void testSubQuery1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  Context cx=null;
  try {
    cx=Context.enter();
    Scriptable sharedScope=cx.initStandardObjects();
    DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,sharedScope,null,null));
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults cqResults=pcq.execute(sharedScope);
    ICubeCursor cubeCursor=(ICubeCursor)cqResults.getCubeCursor();
    Scriptable subScope=cx.newObject(sharedScope);
    subScope.setParentScope(sharedScope);
    ISubCubeQueryDefinition subQuery1=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    ISubCubeQueryDefinition subQuery2=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    ISubCubeQueryDefinition subQuery3=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    ISubCubeQueryDefinition subQuery4=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",null);
    ISubCubeQueryDefinition subQuery5=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",null);
    ISubCubeQueryDefinition subQuery6=new SubCubeQueryDefinition(""String_Node_Str"",""String_Node_Str"",null);
    ISubCubeQueryDefinition subQuery7=new SubCubeQueryDefinition(""String_Node_Str"",null,""String_Node_Str"");
    ISubCubeQueryDefinition subQuery8=new SubCubeQueryDefinition(""String_Node_Str"",null,null);
    EdgeCursor edge1=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(0));
    EdgeCursor edge2=(EdgeCursor)(cubeCursor.getOrdinateEdge().get(1));
    edge1.beforeFirst();
    while (edge2.next()) {
      edge1.beforeFirst();
      while (edge1.next()) {
        this.testPrintln(""String_Node_Str"" + cubeCursor.getObject(""String_Node_Str"").toString());
        ICubeCursor subCubeCursor=engine.prepare(subQuery1,null).execute(cqResults,subScope).getCubeCursor();
        EdgeCursor subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        EdgeCursor subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          List dimension=subEdge2.getDimensionCursor();
          for (int i=0; i < dimension.size(); i++) {
            DimensionCursor dim=(DimensionCursor)dimension.get(i);
            System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dim.getEdgeStart()+ ""String_Node_Str""+ dim.getEdgeEnd()+ ""String_Node_Str"");
          }
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            List dimensions=subEdge1.getDimensionCursor();
            for (int i=0; i < dimensions.size(); i++) {
              DimensionCursor dim=(DimensionCursor)dimensions.get(i);
              System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dim.getEdgeStart()+ ""String_Node_Str""+ dim.getEdgeEnd()+ ""String_Node_Str"");
            }
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery2,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery3,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery4,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery5,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery6,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery7,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
        subCubeCursor=engine.prepare(subQuery8,null).execute(cqResults,subScope).getCubeCursor();
        subEdge1=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(0));
        subEdge2=(EdgeCursor)(subCubeCursor.getOrdinateEdge().get(1));
        subEdge2.beforeFirst();
        this.testPrintln(""String_Node_Str"");
        while (subEdge2.next()) {
          subEdge1.beforeFirst();
          while (subEdge1.next()) {
            this.testPrint(subCubeCursor.getObject(""String_Node_Str"").toString() + ""String_Node_Str"");
          }
        }
      }
    }
    close(cubeCursor);
  }
  finally {
    if (cx != null)     cx.exit();
  }
  this.checkOutputFile();
}",0.5319994699880747
73618,"/** 
 * Prepare the cube query definition, return an IPreparedCubeQuery instance 
 * @param query
 * @param appContext
 * @return
 * @throws BirtException
 */
abstract public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException ;","/** 
 * Prepare the sub cube query definition, return an IPreparedCubeQuery instance
 * @param query
 * @param appContext
 * @return
 * @throws BirtException
 */
abstract public IPreparedCubeQuery prepare(ISubCubeQueryDefinition query,Map appContext) throws BirtException ;",0.9851851851851852
73619,"/** 
 * Executes the prepared                       execution plan as an inner query  that appears within the scope of another query.  The outer query must have been prepared and executed, and  its results given as a parameter to this method.
 * @param outerResults
 * @param scope
 * @return
 * @throws DataException
 */
public ICubeQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException ;","/** 
 * Executes the prepared execution plan as an inner query  that appears within the scope of another query.  The outer query must have been prepared and executed, and  its results given as a parameter to this method.
 * @param outerResults
 * @param scope
 * @return
 * @throws DataException
 */
public ICubeQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException ;",0.9734939759036144
73620,"/** 
 * Return the query definition which is used to generate current IPreparedCubeQuery instance.
 * @return
 */
public ICubeQueryDefinition getCubeQueryDefinition();","/** 
 * Return the query definition which is used to generate current IPreparedCubeQuery instance.
 * @return
 */
public IBaseCubeQueryDefinition getCubeQueryDefinition();",0.9881656804733728
73621,"/** 
 * @param aggrIndex
 * @throws OLAPException
 * @throws IOException
 * @throws DataException
 */
private boolean populateRelation(int aggrIndex,String aggrName) throws OLAPException, IOException, DataException {
  IAggregationResultSet rs=this.resultSet.getMeasureResult()[aggrIndex].getQueryResultSet();
  if (rs == null || rs.length() <= 0)   return false;
  EdgeCursor rowEdgeCursor=null, columnEdgeCursor=null;
  List columnDimList=null, rowDimList=null;
  if (this.view.getRowEdgeView() != null) {
    rowEdgeCursor=(EdgeCursor)((BirtEdgeView)this.view.getRowEdgeView()).getEdgeCursor();
    if (rowEdgeCursor != null)     rowDimList=rowEdgeCursor.getDimensionCursor();
  }
  if (this.view.getColumnEdgeView() != null) {
    columnEdgeCursor=(EdgeCursor)((BirtEdgeView)this.view.getColumnEdgeView()).getEdgeCursor();
    if (columnEdgeCursor != null)     columnDimList=columnEdgeCursor.getDimensionCursor();
  }
  CalculatedMember member=manager.getCalculatedMember(aggrName);
  List memberList=member.getAggrOnList();
  RelationShip relation=(RelationShip)this.relationMap.get(aggrName);
  List columnLevelList=relation.getLevelListOnColumn();
  List rowLevelList=relation.getLevelListOnRow();
  Map valueMap=new HashMap();
  for (int i=0; i < columnLevelList.size(); i++) {
    DimLevel level=(DimLevel)columnLevelList.get(i);
    DimensionCursor cursor=(DimensionCursor)columnDimList.get(i);
    Object value=cursor.getObject(level.getLevelName());
    valueMap.put(level,value);
  }
  for (int i=0; i < rowLevelList.size(); i++) {
    DimLevel level=(DimLevel)rowLevelList.get(i);
    DimensionCursor cursor=(DimensionCursor)rowDimList.get(i);
    Object value=cursor.getObject(level.getLevelName());
    valueMap.put(level,value);
  }
  if (columnLevelList.isEmpty() && rowLevelList.isEmpty())   return true;
  return findValueMatcher(rs,memberList,valueMap,aggrIndex);
}","/** 
 * @param aggrIndex
 * @throws OLAPException
 * @throws IOException
 * @throws DataException
 */
private boolean populateRelation(int aggrIndex,String aggrName) throws OLAPException, IOException, DataException {
  IAggregationResultSet rs=this.resultSet.getMeasureResult()[aggrIndex].getQueryResultSet();
  if (rs == null || rs.length() <= 0)   return false;
  EdgeCursor rowEdgeCursor=null, columnEdgeCursor=null, pageEdgeCursor=null;
  List columnDimList=null, rowDimList=null, pageDimList=null;
  if (this.view.getRowEdgeView() != null) {
    rowEdgeCursor=(EdgeCursor)((BirtEdgeView)this.view.getRowEdgeView()).getEdgeCursor();
    if (rowEdgeCursor != null)     rowDimList=rowEdgeCursor.getDimensionCursor();
  }
  if (this.view.getColumnEdgeView() != null) {
    columnEdgeCursor=(EdgeCursor)((BirtEdgeView)this.view.getColumnEdgeView()).getEdgeCursor();
    if (columnEdgeCursor != null)     columnDimList=columnEdgeCursor.getDimensionCursor();
  }
  if (this.view.getPageEdgeView() != null) {
    pageEdgeCursor=(EdgeCursor)((BirtEdgeView)this.view.getPageEdgeView()).getEdgeCursor();
    if (pageEdgeCursor != null)     pageDimList=pageEdgeCursor.getDimensionCursor();
  }
  CalculatedMember member=manager.getCalculatedMember(aggrName);
  List memberList=member.getAggrOnList();
  Relationship relation=(Relationship)this.relationMap.get(aggrName);
  List pageLevelList=relation.getLevelListOnPage();
  List columnLevelList=relation.getLevelListOnColumn();
  List rowLevelList=relation.getLevelListOnRow();
  Map valueMap=new HashMap();
  for (int index=0; index < pageLevelList.size(); index++) {
    DimLevel level=(DimLevel)pageLevelList.get(index);
    DimensionCursor cursor=(DimensionCursor)pageDimList.get(index);
    Object value=cursor.getObject(level.getLevelName());
    valueMap.put(level,value);
  }
  for (int i=0; i < columnLevelList.size(); i++) {
    DimLevel level=(DimLevel)columnLevelList.get(i);
    DimensionCursor cursor=(DimensionCursor)columnDimList.get(i);
    Object value=cursor.getObject(level.getLevelName());
    valueMap.put(level,value);
  }
  for (int i=0; i < rowLevelList.size(); i++) {
    DimLevel level=(DimLevel)rowLevelList.get(i);
    DimensionCursor cursor=(DimensionCursor)rowDimList.get(i);
    Object value=cursor.getObject(level.getLevelName());
    valueMap.put(level,value);
  }
  if (columnLevelList.isEmpty() && rowLevelList.isEmpty() && pageLevelList.isEmpty())   return true;
  return findValueMatcher(rs,memberList,valueMap,aggrIndex);
}",0.8387978142076503
73622,"/** 
 * @param cubeView
 * @param result
 * @param relationMap
 * @param manager
 * @param appContext
 * @throws OLAPException
 */
public CubeCursorImpl(BirtCubeView cubeView,IResultSet result,Map relationMap,MeasureNameManager manager,Map appContext) throws OLAPException {
  super(null,new AggregationAccessor(cubeView,result,relationMap,manager));
  if (result == null)   return;
  EdgeAxis[] calculatedMemberAxis=result.getMeasureResult();
  BirtEdgeView[] calculatedMemberView=cubeView.getMeasureEdgeView();
  if (calculatedMemberAxis != null) {
    for (int i=0; i < calculatedMemberAxis.length; i++) {
      pageEdge.add(new EdgeCursorImpl(calculatedMemberView[i],true,calculatedMemberAxis[i],this));
    }
  }
  if (cubeView.getColumnEdgeView() != null) {
    EdgeCursor columnEdgeCursor=new EdgeCursorImpl(cubeView.getColumnEdgeView(),false,result.getColumnEdgeResult(),this);
    if (appContext != null)     columnEdgeCursor.setFetchSize(populateFetchLimitSize(appContext.get(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_COLUMN_EDGE)));
    result.getColumnEdgeResult().populateEdgeInfo();
    ordinateEdge.add(columnEdgeCursor);
  }
  if (cubeView.getRowEdgeView() != null) {
    EdgeCursor rowEdgeCursor=new EdgeCursorImpl(cubeView.getRowEdgeView(),false,result.getRowEdgeResult(),this);
    if (appContext != null)     rowEdgeCursor.setFetchSize(populateFetchLimitSize(appContext.get(DataEngine.CUBECUSROR_FETCH_LIMIT_ON_ROW_EDGE)));
    result.getRowEdgeResult().populateEdgeInfo();
    ordinateEdge.add(rowEdgeCursor);
  }
}","/** 
 * @param cubeView
 * @param result
 * @param relationMap
 * @param manager
 * @param appContext
 * @throws OLAPException
 */
public CubeCursorImpl(BirtCubeView cubeView,IResultSet result,Map relationMap,MeasureNameManager manager,Map appContext) throws OLAPException {
  super(null,new AggregationAccessor(cubeView,result,relationMap,manager));
  if (result == null)   return;
  if (cubeView.getColumnEdgeView() != null) {
    EdgeCursor columnEdgeCursor=new EdgeCursorImpl(cubeView.getColumnEdgeView(),false,result.getColumnEdgeResult(),this);
    if (appContext != null)     columnEdgeCursor.setFetchSize(populateFetchLimitSize(appContext.get(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_COLUMN_EDGE)));
    result.getColumnEdgeResult().populateEdgeInfo(false);
    ordinateEdge.add(columnEdgeCursor);
  }
  if (cubeView.getRowEdgeView() != null) {
    EdgeCursor rowEdgeCursor=new EdgeCursorImpl(cubeView.getRowEdgeView(),false,result.getRowEdgeResult(),this);
    if (appContext != null)     rowEdgeCursor.setFetchSize(populateFetchLimitSize(appContext.get(DataEngine.CUBECUSROR_FETCH_LIMIT_ON_ROW_EDGE)));
    result.getRowEdgeResult().populateEdgeInfo(false);
    ordinateEdge.add(rowEdgeCursor);
  }
  if (cubeView.getPageEdgeView() != null) {
    EdgeCursor pageEdgeCursor=new EdgeCursorImpl(cubeView.getPageEdgeView(),true,result.getPageEdgeResult(),this);
    result.getPageEdgeResult().populateEdgeInfo(true);
    pageEdge.add(pageEdgeCursor);
  }
}",0.8002676480428237
73623,"public void synchronizePages() throws OLAPException {
}","public void synchronizePages() throws OLAPException {
  if (this.pageEdge != null && !this.pageEdge.isEmpty()) {
    EdgeCursorImpl pageCursor=(EdgeCursorImpl)this.pageEdge.get(0);
    long position=pageCursor.getPosition();
    Iterator iter=this.ordinateEdge.iterator();
    while (iter.hasNext()) {
      EdgeCursorImpl cursor=(EdgeCursorImpl)iter.next();
      cursor.synchronizedPages((int)position);
    }
  }
}",0.2330508474576271
73624,"/** 
 * get the end row index for the certain dimension cursor.
 * @param dimAxisIndex
 * @return
 */
int getEdgeEnd(int dimAxisIndex){
  if (this.relationMap.mirrorStartPosition == 0) {
    EdgeInfo edgeInfo=findCurrentEdgeInfo(dimAxisIndex);
    if (edgeInfo == null)     return -1;
    int endPosition=edgeInfo.firstChild;
    int index=this.relationMap.relation[dimAxisIndex].indexOf(edgeInfo);
    if (index < this.relationMap.relation[dimAxisIndex].size() - 1) {
      EdgeInfo nextEdgeInfo=(EdgeInfo)this.relationMap.relation[dimAxisIndex].get(index + 1);
      EdgeInfo nextOuterEdgeInfo=this.findOuterMostChildEdgeInfo(dimAxisIndex,nextEdgeInfo);
      endPosition=nextOuterEdgeInfo.firstChild - 1;
    }
 else {
      endPosition=this.relationMap.traverseLength - 1;
    }
    return endPosition;
  }
 else {
    if (!this.dimAxis[dimAxisIndex].isMirrored()) {
      EdgeInfo edgeInfo=findCurrentEdgeInfo(dimAxisIndex);
      int index=this.relationMap.relation[dimAxisIndex].indexOf(edgeInfo);
      if (index < this.relationMap.relation[dimAxisIndex].size() - 1) {
        EdgeInfo nextEdgeInfo=(EdgeInfo)this.relationMap.relation[dimAxisIndex].get(index + 1);
        int start=findOuterMostChildEdgeInfoIndex(dimAxisIndex,nextEdgeInfo);
        if (relationMap.mirrorStartPosition > 0)         for (int i=relationMap.mirrorStartPosition; i < this.dimAxis.length; i++) {
          start=start * this.relationMap.mirrorLength[i];
        }
        return start - 1;
      }
 else {
        return this.relationMap.traverseLength - 1;
      }
    }
 else {
      int start=caculateOffset(dimAxisIndex,false);
      if (start < 0)       return start;
      if (dimAxisIndex == this.dimAxis.length - 1) {
        start+=this.dimensionCursorPosition[dimAxisIndex] + 1;
      }
      return start - 1;
    }
  }
}","/** 
 * get the end row index for the certain dimension cursor.
 * @param dimAxisIndex
 * @return
 */
int getEdgeEnd(int dimAxisIndex){
  if (this.relationMap.mirrorStartPosition == 0) {
    EdgeInfo edgeInfo=findCurrentEdgeInfo(dimAxisIndex);
    if (edgeInfo == null)     return -1;
    int endPosition=edgeInfo.firstChild;
    int index=this.relationMap.currentRelation[dimAxisIndex].indexOf(edgeInfo);
    if (index < this.relationMap.currentRelation[dimAxisIndex].size() - 1) {
      EdgeInfo nextEdgeInfo=(EdgeInfo)this.relationMap.currentRelation[dimAxisIndex].get(index + 1);
      EdgeInfo nextOuterEdgeInfo=this.findOuterMostChildEdgeInfo(dimAxisIndex,nextEdgeInfo);
      endPosition=nextOuterEdgeInfo.firstChild - 1;
    }
 else {
      endPosition=this.relationMap.traverseLength - 1;
    }
    return endPosition;
  }
 else {
    if (!this.dimAxis[dimAxisIndex].isMirrored()) {
      EdgeInfo edgeInfo=findCurrentEdgeInfo(dimAxisIndex);
      int index=this.relationMap.currentRelation[dimAxisIndex].indexOf(edgeInfo);
      if (index < this.relationMap.currentRelation[dimAxisIndex].size() - 1) {
        EdgeInfo nextEdgeInfo=(EdgeInfo)this.relationMap.currentRelation[dimAxisIndex].get(index + 1);
        int start=findOuterMostChildEdgeInfoIndex(dimAxisIndex,nextEdgeInfo);
        if (relationMap.mirrorStartPosition > 0)         for (int i=relationMap.mirrorStartPosition; i < this.dimAxis.length; i++) {
          start=start * this.relationMap.mirrorLength[i];
        }
        return start - 1;
      }
 else {
        return this.relationMap.traverseLength - 1;
      }
    }
 else {
      int start=caculateOffset(dimAxisIndex,false);
      if (start < 0)       return start;
      if (dimAxisIndex == this.dimAxis.length - 1) {
        start+=this.dimensionCursorPosition[dimAxisIndex] + 1;
      }
      return start - 1;
    }
  }
}",0.9853340575774036
73625,"/** 
 * get the start row index for the certain dimension.
 * @param dimAxisIndex
 * @return
 */
int getEdgeStart(int dimAxisIndex){
  if (this.relationMap.mirrorStartPosition == 0) {
    int outer=this.relationMap.mirrorStartPosition == 0 ? this.dimAxis.length : this.relationMap.mirrorStartPosition;
    EdgeInfo edgeInfo=findCurrentEdgeInfo(dimAxisIndex);
    if (edgeInfo == null)     return -1;
    int endPosition=edgeInfo.firstChild, position;
    EdgeInfo info=edgeInfo;
    for (position=dimAxisIndex + 1; position < outer; position++) {
      info=(EdgeInfo)((List)this.relationMap.relation[position]).get(endPosition);
      endPosition=info.firstChild;
    }
    return info.firstChild;
  }
 else {
    if (!this.dimAxis[dimAxisIndex].isMirrored()) {
      EdgeInfo edgeInfo=findCurrentEdgeInfo(dimAxisIndex);
      int start=findOuterMostChildEdgeInfoIndex(dimAxisIndex,edgeInfo);
      if (relationMap.mirrorStartPosition > 0 && start >= 0)       for (int i=relationMap.mirrorStartPosition; i < this.dimAxis.length; i++) {
        start=start * this.relationMap.mirrorLength[i];
      }
      return start;
    }
 else {
      int start=caculateOffset(dimAxisIndex,true);
      if (start < 0)       return start;
      if (dimAxisIndex == this.dimAxis.length - 1) {
        start+=this.dimensionCursorPosition[dimAxisIndex];
      }
      return start;
    }
  }
}","/** 
 * get the start row index for the certain dimension.
 * @param dimAxisIndex
 * @return
 */
int getEdgeStart(int dimAxisIndex){
  if (this.relationMap.mirrorStartPosition == 0) {
    int outer=this.relationMap.mirrorStartPosition == 0 ? this.dimAxis.length : this.relationMap.mirrorStartPosition;
    EdgeInfo edgeInfo=findCurrentEdgeInfo(dimAxisIndex);
    if (edgeInfo == null)     return -1;
    int endPosition=edgeInfo.firstChild, position;
    EdgeInfo info=edgeInfo;
    for (position=dimAxisIndex + 1; position < outer; position++) {
      info=(EdgeInfo)((List)this.relationMap.currentRelation[position]).get(endPosition);
      endPosition=info.firstChild;
    }
    return info.firstChild;
  }
 else {
    if (!this.dimAxis[dimAxisIndex].isMirrored()) {
      EdgeInfo edgeInfo=findCurrentEdgeInfo(dimAxisIndex);
      int start=findOuterMostChildEdgeInfoIndex(dimAxisIndex,edgeInfo);
      if (relationMap.mirrorStartPosition > 0 && start >= 0)       for (int i=relationMap.mirrorStartPosition; i < this.dimAxis.length; i++) {
        start=start * this.relationMap.mirrorLength[i];
      }
      return start;
    }
 else {
      int start=caculateOffset(dimAxisIndex,true);
      if (start < 0)       return start;
      if (dimAxisIndex == this.dimAxis.length - 1) {
        start+=this.dimensionCursorPosition[dimAxisIndex];
      }
      return start;
    }
  }
}",0.996742671009772
73626,"/** 
 * @param currentPosition
 * @return
 */
private int[] findDimensionPosition(int currentPosition){
  int position=currentPosition;
  int[] pos=new int[this.relationMap.mirrorLength.length];
  int count=0;
  for (int i=pos.length - 1; i >= 0; i--) {
    count=0;
    if (position < 0) {
      pos[i]=-1;
      continue;
    }
    if (this.relationMap.mirrorLength[i] == 0) {
      EdgeInfo info=null;
      if (this.relationMap.relation[i].size() > position) {
        info=(EdgeInfo)this.relationMap.relation[i].get(position);
      }
 else {
        pos[i]=-1;
        continue;
      }
      for (int j=position - 1; j >= 0; j--) {
        EdgeInfo lastInfo=(EdgeInfo)this.relationMap.relation[i].get(j);
        if (info.parent == lastInfo.parent) {
          count++;
        }
 else {
          break;
        }
      }
      position=info.parent;
      pos[i]=count;
    }
 else {
      int offset=position % this.relationMap.mirrorLength[i];
      position=(position - offset) / this.relationMap.mirrorLength[i];
      pos[i]=offset;
    }
  }
  return pos;
}","/** 
 * @param currentPosition
 * @return
 */
private int[] findDimensionPosition(int currentPosition){
  int position=currentPosition;
  int[] pos=new int[this.relationMap.mirrorLength.length];
  int count=0;
  for (int i=pos.length - 1; i >= 0; i--) {
    count=0;
    if (position < 0) {
      pos[i]=-1;
      continue;
    }
    if (this.relationMap.mirrorLength[i] == 0) {
      EdgeInfo info=null;
      if (this.relationMap.currentRelation[i].size() > position) {
        info=(EdgeInfo)this.relationMap.currentRelation[i].get(position);
      }
 else {
        pos[i]=-1;
        continue;
      }
      for (int j=position - 1; j >= 0; j--) {
        EdgeInfo lastInfo=(EdgeInfo)this.relationMap.currentRelation[i].get(j);
        if (info.parent == lastInfo.parent) {
          count++;
        }
 else {
          break;
        }
      }
      position=info.parent;
      pos[i]=count;
    }
 else {
      int offset=position % this.relationMap.mirrorLength[i];
      position=(position - offset) / this.relationMap.mirrorLength[i];
      pos[i]=offset;
    }
  }
  return pos;
}",0.9875173370319
73627,"/** 
 * @param dimensionAxis
 * @return
 */
private int findFowardOffsetRange(int dimensionAxis){
  int range=-1;
  if (dimensionAxis < 0 || dimensionAxis > this.dimAxis.length) {
    return range;
  }
  if (dimensionAxis == 0) {
    if (this.dimensionCursorPosition[0] < this.relationMap.relation[0].size())     return this.relationMap.relation[0].size() - this.dimensionCursorPosition[dimensionAxis] - 1;
 else     return range;
  }
  if (dimensionAxis >= this.relationMap.mirrorStartPosition && this.relationMap.mirrorStartPosition > 0) {
    return this.relationMap.mirrorLength[dimensionAxis] - this.dimensionCursorPosition[dimensionAxis] - 1;
  }
  EdgeInfo currentInfo=this.findCurrentEdgeInfo(dimensionAxis);
  if (currentInfo == null)   return range;
 else {
    range=0;
    while (true) {
      int index=this.relationMap.relation[dimensionAxis].indexOf(currentInfo);
      EdgeInfo nextEdgeInfo=null;
      if (this.relationMap.relation[dimensionAxis].size() > index + 1)       nextEdgeInfo=(EdgeInfo)this.relationMap.relation[dimensionAxis].get(index + 1);
 else       break;
      if (nextEdgeInfo != null && currentInfo.parent == nextEdgeInfo.parent) {
        range++;
        currentInfo=nextEdgeInfo;
      }
 else {
        break;
      }
    }
  }
  return range;
}","/** 
 * @param dimensionAxis
 * @return
 */
private int findFowardOffsetRange(int dimensionAxis){
  int range=-1;
  if (dimensionAxis < 0 || dimensionAxis > this.dimAxis.length) {
    return range;
  }
  if (dimensionAxis == 0) {
    if (this.dimensionCursorPosition[0] < this.relationMap.currentRelation[0].size())     return this.relationMap.currentRelation[0].size() - this.dimensionCursorPosition[dimensionAxis] - 1;
 else     return range;
  }
  if (dimensionAxis >= this.relationMap.mirrorStartPosition && this.relationMap.mirrorStartPosition > 0) {
    return this.relationMap.mirrorLength[dimensionAxis] - this.dimensionCursorPosition[dimensionAxis] - 1;
  }
  EdgeInfo currentInfo=this.findCurrentEdgeInfo(dimensionAxis);
  if (currentInfo == null)   return range;
 else {
    range=0;
    while (true) {
      int index=this.relationMap.currentRelation[dimensionAxis].indexOf(currentInfo);
      EdgeInfo nextEdgeInfo=null;
      if (this.relationMap.currentRelation[dimensionAxis].size() > index + 1)       nextEdgeInfo=(EdgeInfo)this.relationMap.currentRelation[dimensionAxis].get(index + 1);
 else       break;
      if (nextEdgeInfo != null && currentInfo.parent == nextEdgeInfo.parent) {
        range++;
        currentInfo=nextEdgeInfo;
      }
 else {
        break;
      }
    }
  }
  return range;
}",0.982725527831094
73628,"/** 
 * Check whether the cursor on dimAxisIndex has next row.
 * @param dimAxisIndex
 * @return
 */
private boolean hasNext(int dimAxisIndex){
  if (!this.dimAxis[dimAxisIndex].isMirrored()) {
    EdgeInfo currentEdgeInfo=findCurrentEdgeInfo(dimAxisIndex);
    if (currentEdgeInfo == null) {
      if (this.dimensionCursorPosition[dimAxisIndex] < 0 && this.relationMap.traverseLength > 0)       return true;
 else       return false;
    }
    int index=this.relationMap.relation[dimAxisIndex].indexOf(currentEdgeInfo);
    EdgeInfo nextEdgeInfo=null;
    if (this.relationMap.relation[dimAxisIndex].size() > index + 1)     nextEdgeInfo=(EdgeInfo)this.relationMap.relation[dimAxisIndex].get(index + 1);
    if (nextEdgeInfo == null)     return false;
    if (currentEdgeInfo.parent == nextEdgeInfo.parent)     return true;
    return false;
  }
 else {
    if (this.dimensionCursorPosition[dimAxisIndex] < relationMap.mirrorLength[dimAxisIndex] - 1)     return true;
 else     return false;
  }
}","/** 
 * Check whether the cursor on dimAxisIndex has next row.
 * @param dimAxisIndex
 * @return
 */
private boolean hasNext(int dimAxisIndex){
  if (!this.dimAxis[dimAxisIndex].isMirrored()) {
    EdgeInfo currentEdgeInfo=findCurrentEdgeInfo(dimAxisIndex);
    if (currentEdgeInfo == null) {
      if (this.dimensionCursorPosition[dimAxisIndex] < 0 && this.relationMap.traverseLength > 0)       return true;
 else       return false;
    }
    int index=this.relationMap.currentRelation[dimAxisIndex].indexOf(currentEdgeInfo);
    EdgeInfo nextEdgeInfo=null;
    if (this.relationMap.currentRelation[dimAxisIndex].size() > index + 1)     nextEdgeInfo=(EdgeInfo)this.relationMap.currentRelation[dimAxisIndex].get(index + 1);
    if (nextEdgeInfo == null)     return false;
    if (currentEdgeInfo.parent == nextEdgeInfo.parent)     return true;
    return false;
  }
 else {
    if (this.dimensionCursorPosition[dimAxisIndex] < relationMap.mirrorLength[dimAxisIndex] - 1)     return true;
 else     return false;
  }
}",0.9866004962779156
73629,"/** 
 * @param dimAxisIndex
 * @param edgeInfo
 * @return
 */
private int findOuterMostChildEdgeInfoIndex(int dimAxisIndex,EdgeInfo edgeInfo){
  if (dimAxisIndex < 0 || dimAxisIndex >= this.dimAxis.length || edgeInfo == null)   return -1;
  int endPosition=edgeInfo.firstChild;
  EdgeInfo info=edgeInfo;
  int index;
  for (index=dimAxisIndex + 1; index < this.dimAxis.length; index++) {
    if (this.dimAxis[index].isMirrored())     break;
    info=(EdgeInfo)((List)this.relationMap.relation[index]).get(endPosition);
    endPosition=info.firstChild;
  }
  if (index == this.relationMap.mirrorStartPosition)   return this.relationMap.relation[index - 1].indexOf(info);
 else   return this.relationMap.relation[index].indexOf(info);
}","/** 
 * @param dimAxisIndex
 * @param edgeInfo
 * @return
 */
private int findOuterMostChildEdgeInfoIndex(int dimAxisIndex,EdgeInfo edgeInfo){
  if (dimAxisIndex < 0 || dimAxisIndex >= this.dimAxis.length || edgeInfo == null)   return -1;
  int endPosition=edgeInfo.firstChild;
  EdgeInfo info=edgeInfo;
  int index;
  for (index=dimAxisIndex + 1; index < this.dimAxis.length; index++) {
    if (this.dimAxis[index].isMirrored())     break;
    info=(EdgeInfo)((List)this.relationMap.currentRelation[index]).get(endPosition);
    endPosition=info.firstChild;
  }
  if (index == this.relationMap.mirrorStartPosition)   return this.relationMap.currentRelation[index - 1].indexOf(info);
 else   return this.relationMap.currentRelation[index].indexOf(info);
}",0.981867024848892
73630,"/** 
 * @param dimAxisIndex
 * @param edgeInfo
 * @return
 */
private EdgeInfo findOuterMostChildEdgeInfo(int dimAxisIndex,EdgeInfo edgeInfo){
  if (dimAxisIndex < 0 || dimAxisIndex >= this.dimAxis.length || edgeInfo == null)   return null;
  int endPosition=edgeInfo.firstChild;
  EdgeInfo info=edgeInfo;
  for (int i=dimAxisIndex + 1; i < this.dimAxis.length; i++) {
    if (this.dimAxis[i].isMirrored())     break;
    info=(EdgeInfo)((List)this.relationMap.relation[i]).get(endPosition);
    endPosition=info.firstChild;
  }
  return info;
}","/** 
 * @param dimAxisIndex
 * @param edgeInfo
 * @return
 */
private EdgeInfo findOuterMostChildEdgeInfo(int dimAxisIndex,EdgeInfo edgeInfo){
  if (dimAxisIndex < 0 || dimAxisIndex >= this.dimAxis.length || edgeInfo == null)   return null;
  int endPosition=edgeInfo.firstChild;
  EdgeInfo info=edgeInfo;
  for (int i=dimAxisIndex + 1; i < this.dimAxis.length; i++) {
    if (this.dimAxis[i].isMirrored())     break;
    info=(EdgeInfo)((List)this.relationMap.currentRelation[i]).get(endPosition);
    endPosition=info.firstChild;
  }
  return info;
}",0.99179580674567
73631,"/** 
 * Based on current dimensionCursor position, get current edge info for certain dimensionAxis.
 * @param dimensionAxis
 * @return
 */
private EdgeInfo findCurrentEdgeInfo(int dimensionAxis){
  if (dimensionAxis < 0 || dimensionAxis > this.dimAxis.length) {
    return null;
  }
  EdgeInfo tempEdgeInfo1=null, tempEdgeInfo2=null, edgeInfo=null;
  int endPosition=0;
  for (int index=0; index <= dimensionAxis; index++) {
    if (dimensionAxis == index) {
      if (this.relationMap.relation[index].size() > endPosition && this.dimensionCursorPosition[index] > -1 && this.dimensionCursorPosition[index] + endPosition < this.relationMap.relation[index].size() && (tempEdgeInfo2 == null || this.dimensionCursorPosition[index] + endPosition < tempEdgeInfo2.firstChild)) {
        edgeInfo=(EdgeInfo)this.relationMap.relation[index].get(this.dimensionCursorPosition[index] + endPosition);
      }
 else       if (this.dimensionCursorPosition[index] == -1)       return null;
      break;
    }
 else {
      if (this.dimensionCursorPosition[index] + endPosition < this.relationMap.relation[index].size() && this.dimensionCursorPosition[index] > -1 && this.relationMap.relation[index].size() > endPosition) {
        tempEdgeInfo1=(EdgeInfo)this.relationMap.relation[index].get(this.dimensionCursorPosition[index] + endPosition);
        if (this.dimensionCursorPosition[index] + endPosition + 1 < this.relationMap.relation[index].size()) {
          tempEdgeInfo2=(EdgeInfo)this.relationMap.relation[index].get(this.dimensionCursorPosition[index] + endPosition + 1);
        }
      }
 else       return null;
      if (tempEdgeInfo1 != null) {
        endPosition=tempEdgeInfo1.firstChild;
      }
    }
  }
  return edgeInfo;
}","/** 
 * Based on current dimensionCursor position, get current edge info for certain dimensionAxis.
 * @param dimensionAxis
 * @return
 */
private EdgeInfo findCurrentEdgeInfo(int dimensionAxis){
  if (dimensionAxis < 0 || dimensionAxis > this.dimAxis.length) {
    return null;
  }
  EdgeInfo tempEdgeInfo1=null, tempEdgeInfo2=null, edgeInfo=null;
  int endPosition=0;
  for (int index=0; index <= dimensionAxis; index++) {
    if (dimensionAxis == index) {
      if (this.relationMap.currentRelation[index].size() > endPosition && this.dimensionCursorPosition[index] > -1 && this.dimensionCursorPosition[index] + endPosition < this.relationMap.currentRelation[index].size() && (tempEdgeInfo2 == null || this.dimensionCursorPosition[index] + endPosition < tempEdgeInfo2.firstChild)) {
        edgeInfo=(EdgeInfo)this.relationMap.currentRelation[index].get(this.dimensionCursorPosition[index] + endPosition);
      }
 else       if (this.dimensionCursorPosition[index] == -1)       return null;
      break;
    }
 else {
      if (this.dimensionCursorPosition[index] + endPosition < this.relationMap.currentRelation[index].size() && this.dimensionCursorPosition[index] > -1 && this.relationMap.currentRelation[index].size() > endPosition) {
        tempEdgeInfo1=(EdgeInfo)this.relationMap.currentRelation[index].get(this.dimensionCursorPosition[index] + endPosition);
        if (this.dimensionCursorPosition[index] + endPosition + 1 < this.relationMap.currentRelation[index].size()) {
          tempEdgeInfo2=(EdgeInfo)this.relationMap.currentRelation[index].get(this.dimensionCursorPosition[index] + endPosition + 1);
        }
      }
 else       return null;
      if (tempEdgeInfo1 != null) {
        endPosition=tempEdgeInfo1.firstChild;
      }
    }
  }
  return edgeInfo;
}",0.979498861047836
73632,"EdgeCursorImpl(BirtEdgeView view,boolean isPage,EdgeAxis axis,CubeCursor cursor) throws OLAPException {
  super(new EdgeNavigator(axis),null);
  if (isPage)   pageOwner=cursor;
 else   ordinateOwner=cursor;
  view.setEdgeCursor(this);
  for (int i=0; i < axis.getAllDimensionAxis().length; i++) {
    dimensionCursorList.add(new DimensionCursorImpl(this,axis.getDimensionAxis(i),new DimensionNavigator(axis.getDimensionAxis(i))));
  }
}","EdgeCursorImpl(BirtEdgeView view,boolean isPage,EdgeAxis axis,CubeCursor cursor) throws OLAPException {
  super(new EdgeNavigator(axis),null);
  if (isPage)   pageOwner=cursor;
 else   ordinateOwner=cursor;
  view.setEdgeCursor(this);
  for (int i=view.getPageEndingIndex() + 1; i < axis.getAllDimensionAxis().length; i++) {
    dimensionCursorList.add(new DimensionCursorImpl(this,axis.getDimensionAxis(i),new DimensionNavigator(axis.getDimensionAxis(i))));
  }
}",0.9666666666666668
73633,"public String getText(Object element){
  if (element instanceof IMethodInfo) {
    IMethodInfo eleDef=(IMethodInfo)element;
    return ""String_Node_Str"" + eleDef.getName();
  }
 else   if (element instanceof String) {
    return (String)element;
  }
  return ""String_Node_Str"";
}","public String getText(Object element){
  if (element instanceof IMethodInfo) {
    IMethodInfo eleDef=(IMethodInfo)element;
    return JSEditor.METHOD_DISPLAY_INDENT + eleDef.getName();
  }
 else   if (element instanceof String) {
    return (String)element;
  }
  return ""String_Node_Str"";
}",0.5359019264448336
73634,"public void createPartControl(Composite parent){
  Composite child=this.initEditorLayout(parent);
  cmbExprListViewer=new ComboViewer(cmbExpList);
  JSExpListProvider provider=new JSExpListProvider();
  cmbExprListViewer.setContentProvider(provider);
  cmbExprListViewer.setLabelProvider(provider);
  cmbExprListViewer.setData(VIEWER_CATEGORY_KEY,VIEWER_CATEGORY_CONTEXT);
  JSSubFunctionListProvider subProvider=new JSSubFunctionListProvider(this);
  cmbExprListViewer.addSelectionChangedListener(subProvider);
  cmbSubFunctionsViewer=new TextComboViewer(cmbSubFunctions);
  cmbSubFunctionsViewer.setContentProvider(subProvider);
  cmbSubFunctionsViewer.setLabelProvider(subProvider);
  cmbSubFunctionsViewer.addSelectionChangedListener(subProvider);
  Object model=getModel();
  if (model != null) {
    cmbExpList.setVisible(true);
    cmbSubFunctions.setVisible(true);
    setComboViewerInput(model);
  }
 else {
    setComboViewerInput(Messages.getString(""String_Node_Str""));
  }
  cmbExprListViewer.addSelectionChangedListener(palettePage.getSupport());
  cmbExprListViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    /** 
 * selectionChanged( event) - This listener implementation is invoked when an item in the combo box is selected, - It saves the current editor contents. - Updates the editor content with the expression corresponding to the selected method name or expression. name.
 */
    public void selectionChanged(    SelectionChangedEvent event){
      ISelection selection=event.getSelection();
      if (selection != null) {
        Object[] sel=((IStructuredSelection)selection).toArray();
        if (sel.length == 1) {
          if (sel[0] instanceof IPropertyDefn) {
            DesignElementHandle desHandle=(DesignElementHandle)cmbExprListViewer.getInput();
            saveModel();
            IPropertyDefn elePropDefn=(IPropertyDefn)sel[0];
            cmbItemLastSelected=elePropDefn;
            setEditorText(desHandle.getStringProperty(elePropDefn.getName()));
            selectionMap.put(getModel(),selection);
            String method=cmbItemLastSelected.getName();
            updateScriptContext(desHandle,method);
          }
        }
      }
    }
  }
);
  scriptEditor.createPartControl(child);
  scriptValidator=new ScriptValidator(getViewer());
  SessionHandleAdapter.getInstance().getMediator().addColleague(this);
  disableEditor();
  SourceViewer viewer=getViewer();
  IDocument document=viewer == null ? null : viewer.getDocument();
  if (document != null) {
    IDocumentUndoManager undoManager=DocumentUndoManagerRegistry.getDocumentUndoManager(document);
    if (undoManager != null) {
      undoManager.addDocumentUndoListener(undoListener);
    }
    document.addDocumentListener(documentListener);
  }
}","public void createPartControl(Composite parent){
  Composite child=this.initEditorLayout(parent);
  cmbExprListViewer=new ComboViewer(cmbExpList);
  JSExpListProvider provider=new JSExpListProvider();
  cmbExprListViewer.setContentProvider(provider);
  cmbExprListViewer.setLabelProvider(provider);
  cmbExprListViewer.setData(VIEWER_CATEGORY_KEY,VIEWER_CATEGORY_CONTEXT);
  JSSubFunctionListProvider subProvider=new JSSubFunctionListProvider(this);
  cmbExprListViewer.addSelectionChangedListener(subProvider);
  cmbSubFunctions.addListener(CustomChooserComposite.DROPDOWN_EVENT,new Listener(){
    public void handleEvent(    Event event){
      cmbSubFunctions.deselectAll();
      ScriptParser parser=new ScriptParser(getEditorText());
      Collection coll=parser.getAllMethodInfo();
      for (Iterator itr=coll.iterator(); itr.hasNext(); ) {
        IScriptMethodInfo mtd=(IScriptMethodInfo)itr.next();
        cmbSubFunctions.markSelection(METHOD_DISPLAY_INDENT + mtd.getName());
      }
    }
  }
);
  cmbSubFunctionsViewer=new TextComboViewer(cmbSubFunctions);
  cmbSubFunctionsViewer.setContentProvider(subProvider);
  cmbSubFunctionsViewer.setLabelProvider(subProvider);
  cmbSubFunctionsViewer.addSelectionChangedListener(subProvider);
  Object model=getModel();
  if (model != null) {
    cmbExpList.setVisible(true);
    cmbSubFunctions.setVisible(true);
    setComboViewerInput(model);
  }
 else {
    setComboViewerInput(Messages.getString(""String_Node_Str""));
  }
  cmbExprListViewer.addSelectionChangedListener(palettePage.getSupport());
  cmbExprListViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    /** 
 * selectionChanged( event) - This listener implementation is invoked when an item in the combo box is selected, - It saves the current editor contents. - Updates the editor content with the expression corresponding to the selected method name or expression. name.
 */
    public void selectionChanged(    SelectionChangedEvent event){
      ISelection selection=event.getSelection();
      if (selection != null) {
        Object[] sel=((IStructuredSelection)selection).toArray();
        if (sel.length == 1) {
          if (sel[0] instanceof IPropertyDefn) {
            DesignElementHandle desHandle=(DesignElementHandle)cmbExprListViewer.getInput();
            saveModel();
            IPropertyDefn elePropDefn=(IPropertyDefn)sel[0];
            cmbItemLastSelected=elePropDefn;
            setEditorText(desHandle.getStringProperty(elePropDefn.getName()));
            selectionMap.put(getModel(),selection);
            String method=cmbItemLastSelected.getName();
            updateScriptContext(desHandle,method);
          }
        }
      }
    }
  }
);
  scriptEditor.createPartControl(child);
  scriptValidator=new ScriptValidator(getViewer());
  SessionHandleAdapter.getInstance().getMediator().addColleague(this);
  disableEditor();
  SourceViewer viewer=getViewer();
  IDocument document=viewer == null ? null : viewer.getDocument();
  if (document != null) {
    IDocumentUndoManager undoManager=DocumentUndoManagerRegistry.getDocumentUndoManager(document);
    if (undoManager != null) {
      undoManager.addDocumentUndoListener(undoListener);
    }
    document.addDocumentListener(documentListener);
  }
}",0.9179190751445088
73635,"/** 
 * getEditorText() - gets the editor content.
 */
private String getEditorText(){
  return scriptEditor.getScript();
}","/** 
 * getEditorText() - gets the editor content.
 */
String getEditorText(){
  return scriptEditor.getScript();
}",0.9663865546218487
73636,"public void selectionChanged(SelectionChangedEvent event){
  boolean isContextChange=false;
  if (event.getSource() instanceof ComboViewer) {
    isContextChange=JSEditor.VIEWER_CATEGORY_CONTEXT.equals(((ComboViewer)event.getSource()).getData(JSEditor.VIEWER_CATEGORY_KEY));
  }
  ISelection selection=event.getSelection();
  if (selection != null) {
    Object[] sel=((IStructuredSelection)selection).toArray();
    if (sel.length == 1) {
      if (isContextChange) {
        editor.cmbSubFunctionsViewer.refresh();
        int itemCount=editor.cmbSubFunctions.getItemCount();
        if (itemCount > 0) {
          editor.cmbSubFunctions.select(0);
        }
        editor.cmbSubFunctions.setEnabled(itemCount > 0);
      }
 else {
        if (sel[0] instanceof IMethodInfo) {
          IMethodInfo methodInfo=(IMethodInfo)sel[0];
          String signature=createSignature(methodInfo);
          try {
            IScriptEditor viewer=editor.getScriptEditor();
            if (viewer instanceof AbstractTextEditor) {
              AbstractTextEditor editor=(AbstractTextEditor)viewer;
              IDocument doc=(editor.getDocumentProvider()).getDocument(viewer.getEditorInput());
              int length=doc.getLength();
              doc.replace(length,0,signature);
              editor.selectAndReveal(length + 1,signature.length());
            }
          }
 catch (          BadLocationException e) {
            logger.log(Level.SEVERE,e.getMessage(),e);
          }
          editor.cmbSubFunctions.select(0);
        }
      }
    }
  }
}","public void selectionChanged(SelectionChangedEvent event){
  boolean isContextChange=false;
  if (event.getSource() instanceof ComboViewer) {
    isContextChange=JSEditor.VIEWER_CATEGORY_CONTEXT.equals(((ComboViewer)event.getSource()).getData(JSEditor.VIEWER_CATEGORY_KEY));
  }
  ISelection selection=event.getSelection();
  if (selection != null) {
    Object[] sel=((IStructuredSelection)selection).toArray();
    if (sel.length == 1) {
      if (isContextChange) {
        editor.cmbSubFunctionsViewer.refresh();
        int itemCount=editor.cmbSubFunctions.getItemCount();
        if (itemCount > 0) {
          editor.cmbSubFunctions.select(0);
        }
        editor.cmbSubFunctions.setEnabled(itemCount > 0);
      }
 else {
        if (sel[0] instanceof IMethodInfo) {
          IMethodInfo methodInfo=(IMethodInfo)sel[0];
          Position pos=findMethod(methodInfo);
          if (pos != null) {
            IScriptEditor viewer=editor.getScriptEditor();
            if (viewer instanceof AbstractTextEditor) {
              AbstractTextEditor editor=(AbstractTextEditor)viewer;
              editor.selectAndReveal(pos.getOffset(),pos.length);
            }
          }
 else {
            String signature=createSignature(methodInfo);
            try {
              IScriptEditor viewer=editor.getScriptEditor();
              if (viewer instanceof AbstractTextEditor) {
                AbstractTextEditor editor=(AbstractTextEditor)viewer;
                IDocument doc=(editor.getDocumentProvider()).getDocument(viewer.getEditorInput());
                int length=doc.getLength();
                doc.replace(length,0,signature);
                editor.selectAndReveal(length + 1,signature.length());
              }
            }
 catch (            BadLocationException e) {
              logger.log(Level.SEVERE,e.getMessage(),e);
            }
          }
          editor.cmbSubFunctions.select(0);
        }
      }
    }
  }
}",0.868548617051611
73637,"private boolean validType(String str){
  for (int count=0; count < str.length(); count++) {
    char ch=str.charAt(count);
    if (ch != '$' && ch != '0' && ch != '#' && ch != '?' && ch != '@' && ch != '%' && ch != '.' && ch != ';' && ch != ' ') {
      return false;
    }
  }
  return true;
}","private boolean validType(String str){
  for (int count=0; count < str.length(); count++) {
    char ch=str.charAt(count);
    if (ch != '$' && ch != '0' && ch != '#' && ch != '?' && ch != '@' && ch != '%' && ch != '.' && ch != ';' && ch != ' ' && ch != ',' && ch != '+' && ch != '/' && ch != '_' && ch != '*' && ch != '(' && ch != ')' && ch != '[' && ch != ']' && ch != '""') {
      return false;
    }
  }
  return true;
}",0.8189415041782729
73638,"public Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings.hasNext()) {
    temp.add(columnBindings.next());
  }
  if (referToAggregation(temp,boundColumnName))   return new ArrayList();
  IQueryResults queryResults=getGroupingQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  IResultIterator resultIt=queryResults.getResultIterator();
  int maxRowCount=-1;
  ArrayList values=new ArrayList();
  if (requestInfo != null) {
    if (requestInfo.getStartRow() >= 0) {
      resultIt.moveTo(requestInfo.getStartRow());
      Object value=resultIt.getValue(boundColumnName);
      values.add(value);
    }
    maxRowCount=requestInfo.getMaxRow();
  }
  while (resultIt.next() && maxRowCount != 0) {
    Object value=resultIt.getValue(boundColumnName);
    values.add(value);
    resultIt.skipToEnd(1);
    maxRowCount--;
  }
  resultIt.close();
  queryResults.close();
  return values;
}","public Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  IColumnValueIterator columnValueIterator=getColumnValueIterator(dataSet,inputParamBindings,columnBindings,boundColumnName);
  int maxRowCount=-1;
  ArrayList values=new ArrayList();
  if (requestInfo != null) {
    if (requestInfo.getStartRow() >= 0) {
      ((ColumnValueIterator)columnValueIterator).moveTo(requestInfo.getStartRow());
      Object value=columnValueIterator.getValue();
      values.add(value);
    }
    maxRowCount=requestInfo.getMaxRow();
  }
  while (columnValueIterator.next() && maxRowCount != 0) {
    Object value=columnValueIterator.getValue();
    values.add(value);
    maxRowCount--;
  }
  columnValueIterator.close();
  return values;
}",0.6505154639175258
73639,"public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
  if (hostChart instanceof ExtendedItemHandle) {
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=""String_Node_Str"";
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : (Chart)EcoreUtil.copy(cm);
    final Object[] applyData=new Object[2];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    IChartDataSheet dataSheet=new StandardChartDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=new ChartWizardContext(cmClone,this,dataProvider,dataSheet);
    if (dataProvider.isInXTab()) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=EcoreUtil.copy(context.getModel());
        applyData[1]=context.getOutputFormat();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(ChartReportItemUtil.isRtl());
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else       context.setOutputFormat((String)of);
    }
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    if (contextResult != null && contextResult.getModel() != null) {
      commandStack.commit();
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat());
      if (hostChart != null) {
        ChartReportItemUtil.getChartReportItemFromHandle(eih).setModel(contextResult.getModel());
      }
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1]);
      if (hostChart != null) {
        ChartReportItemUtil.getChartReportItemFromHandle(eih).setModel((Chart)applyData[0]);
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
  }
}","public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
  if (hostChart instanceof ExtendedItemHandle) {
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=""String_Node_Str"";
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : (Chart)EcoreUtil.copy(cm);
    final Object[] applyData=new Object[2];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    IChartDataSheet dataSheet=new StandardChartDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=new ChartWizardContext(cmClone,this,dataProvider,dataSheet);
    if (dataProvider.isInXTab()) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=EcoreUtil.copy(context.getModel());
        applyData[1]=context.getOutputFormat();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(ChartReportItemUtil.isRtl());
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else       context.setOutputFormat((String)of);
    }
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    if (contextResult != null && contextResult.getModel() != null) {
      commandStack.commit();
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat());
      if (dataProvider.isInXTab()) {
        ChartXTabUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,cm,contextResult.getModel());
      }
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1]);
      if (dataProvider.isInXTab()) {
        ChartXTabUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,cm,(Chart)applyData[0]);
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
  }
}",0.9579427413225234
73640,"private ChartWithAxes createDefaultChart(String exprMeasure,String[] exprDimensions){
  ChartWithAxes cm=ChartWithAxesImpl.create();
  cm.setType(""String_Node_Str"");
  cm.setSubType(""String_Node_Str"");
  cm.setUnits(""String_Node_Str"");
  cm.setUnitSpacing(50);
  cm.getLegend().setVisible(false);
  cm.getTitle().setVisible(false);
  String exprCategory=null;
  if (exprDimensions[1] != null) {
    exprCategory=exprDimensions[1];
  }
 else   if (exprDimensions[0] != null) {
    exprCategory=exprDimensions[0];
    cm.setTransposed(true);
  }
  SeriesDefinition sdBase=SeriesDefinitionImpl.create();
  sdBase.getSeriesPalette().shift(0);
  Series series=SeriesImpl.create();
  sdBase.getSeries().add(series);
  cm.getBaseAxes()[0].getSeriesDefinitions().add(sdBase);
  if (exprCategory != null) {
    Query query=QueryImpl.create(ExpressionUtil.createJSDataExpression(exprCategory));
    series.getDataDefinition().add(query);
  }
  SeriesDefinition sdOrth=SeriesDefinitionImpl.create();
  sdOrth.getSeriesPalette().shift(0);
  series=BarSeriesImpl.create();
  sdOrth.getSeries().add(series);
  cm.getOrthogonalAxes(cm.getBaseAxes()[0],true)[0].getSeriesDefinitions().add(sdOrth);
  if (exprMeasure != null) {
    Query query=QueryImpl.create(ExpressionUtil.createJSDataExpression(exprMeasure));
    series.getDataDefinition().add(query);
  }
  SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
  sampleData.getBaseSampleData().clear();
  sampleData.getOrthogonalSampleData().clear();
  BaseSampleData sampleDataBase=DataFactory.eINSTANCE.createBaseSampleData();
  sampleDataBase.setDataSetRepresentation(""String_Node_Str"");
  sampleData.getBaseSampleData().add(sampleDataBase);
  OrthogonalSampleData sampleDataOrth=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sampleDataOrth.setDataSetRepresentation(""String_Node_Str"");
  sampleDataOrth.setSeriesDefinitionIndex(0);
  sampleData.getOrthogonalSampleData().add(sampleDataOrth);
  cm.setSampleData(sampleData);
  return cm;
}","private ChartWithAxes createDefaultChart(String exprMeasure,String[] nameDimensions){
  ChartWithAxes cm=ChartWithAxesImpl.create();
  cm.setType(""String_Node_Str"");
  cm.setSubType(""String_Node_Str"");
  cm.setUnits(""String_Node_Str"");
  cm.setUnitSpacing(50);
  cm.getLegend().setVisible(false);
  cm.getTitle().setVisible(false);
  String exprCategory=null;
  if (nameDimensions[1] != null) {
    exprCategory=nameDimensions[1];
  }
 else   if (nameDimensions[0] != null) {
    exprCategory=nameDimensions[0];
    cm.setTransposed(true);
  }
  SeriesDefinition sdBase=SeriesDefinitionImpl.create();
  sdBase.getSeriesPalette().shift(0);
  Series series=SeriesImpl.create();
  sdBase.getSeries().add(series);
  cm.getBaseAxes()[0].getSeriesDefinitions().add(sdBase);
  if (exprCategory != null) {
    Query query=QueryImpl.create(ExpressionUtil.createJSDataExpression(exprCategory));
    series.getDataDefinition().add(query);
  }
  SeriesDefinition sdOrth=SeriesDefinitionImpl.create();
  sdOrth.getSeriesPalette().shift(0);
  series=BarSeriesImpl.create();
  sdOrth.getSeries().add(series);
  cm.getOrthogonalAxes(cm.getBaseAxes()[0],true)[0].getSeriesDefinitions().add(sdOrth);
  if (exprMeasure != null) {
    Query query=QueryImpl.create(exprMeasure);
    series.getDataDefinition().add(query);
  }
  SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
  sampleData.getBaseSampleData().clear();
  sampleData.getOrthogonalSampleData().clear();
  BaseSampleData sampleDataBase=DataFactory.eINSTANCE.createBaseSampleData();
  sampleDataBase.setDataSetRepresentation(""String_Node_Str"");
  sampleData.getBaseSampleData().add(sampleDataBase);
  OrthogonalSampleData sampleDataOrth=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sampleDataOrth.setDataSetRepresentation(""String_Node_Str"");
  sampleDataOrth.setSeriesDefinitionIndex(0);
  sampleData.getOrthogonalSampleData().add(sampleDataOrth);
  cm.setSampleData(sampleData);
  return cm;
}",0.979529946929492
73641,"public void switchView(AggregationCellHandle cell){
  try {
    String exprMeasure=null;
    Object content=getFirstContent(cell);
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprMeasure=dataItemHandle.getResultSetColumn();
    }
    if (content instanceof DesignElementHandle) {
      ((DesignElementHandle)content).dropAndClear();
    }
    String exprDimRow=null;
    content=getFirstContent(getLevelCell(cell.getCrosstab().getCrosstabView(ICrosstabConstants.ROW_AXIS_TYPE)));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprDimRow=dataItemHandle.getResultSetColumn();
    }
    String exprDimColumn=null;
    content=getFirstContent(getLevelCell(cell.getCrosstab().getCrosstabView(ICrosstabConstants.COLUMN_AXIS_TYPE)));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      exprDimColumn=dataItemHandle.getResultSetColumn();
    }
    ExtendedItemHandle chartHandle=cell.getCrosstabHandle().getElementFactory().newExtendedItem(null,ChartReportItemConstants.CHART_EXTENSION_NAME);
    ChartReportItemImpl reportItem=(ChartReportItemImpl)chartHandle.getReportItem();
    ChartWithAxes cm=createDefaultChart(exprMeasure,new String[]{exprDimRow,exprDimColumn});
    reportItem.setModel(cm);
    cell.addContent(chartHandle,0);
    if (cm.isTransposed()) {
      cell.setSpanOverOnRow(cell.getAggregationOnRow());
      CrosstabCellHandle rowCell=cell.getCrosstab().getDimension(ICrosstabConstants.ROW_AXIS_TYPE,0).getLevel(0).getCell();
      if (rowCell.getHeight() == null || rowCell.getHeight().getMeasure() == 0) {
        cell.getCrosstab().setRowHeight(rowCell,DEFAULT_ROW_WIDTH);
      }
      rowCell.getCrosstabHandle().setProperty(StyleHandle.PADDING_TOP_PROP,new DimensionValue(0,DesignChoiceConstants.UNITS_PT));
      rowCell.getCrosstabHandle().setProperty(StyleHandle.PADDING_BOTTOM_PROP,new DimensionValue(0,DesignChoiceConstants.UNITS_PT));
      updateXtabForAxisChart(cell,chartHandle,ICrosstabConstants.ROW_AXIS_TYPE);
    }
 else {
      cell.setSpanOverOnColumn(cell.getAggregationOnColumn());
      CrosstabCellHandle columnCell=cell.getCrosstab().getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,0).getLevel(0).getCell();
      if (columnCell.getWidth() != null || columnCell.getWidth().getMeasure() == 0) {
        cell.getCrosstab().setColumnWidth(columnCell,DEFAULT_COLUMN_WIDTH);
      }
      columnCell.getCrosstabHandle().setProperty(StyleHandle.PADDING_LEFT_PROP,new DimensionValue(0,DesignChoiceConstants.UNITS_PT));
      columnCell.getCrosstabHandle().setProperty(StyleHandle.PADDING_RIGHT_PROP,new DimensionValue(0,DesignChoiceConstants.UNITS_PT));
      updateXtabForAxisChart(cell,chartHandle,ICrosstabConstants.COLUMN_AXIS_TYPE);
    }
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
}","public void switchView(AggregationCellHandle cell){
  try {
    Object content=getFirstContent(cell);
    String exprMeasure=getMeasureBindingExpr(content);
    if (content instanceof DesignElementHandle) {
      ((DesignElementHandle)content).dropAndClear();
    }
    String nameDimRow=null;
    content=getFirstContent(getLevelCell(cell.getCrosstab().getCrosstabView(ICrosstabConstants.ROW_AXIS_TYPE)));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      nameDimRow=dataItemHandle.getResultSetColumn();
    }
    String nameDimColumn=null;
    content=getFirstContent(getLevelCell(cell.getCrosstab().getCrosstabView(ICrosstabConstants.COLUMN_AXIS_TYPE)));
    if (content instanceof DataItemHandle) {
      DataItemHandle dataItemHandle=(DataItemHandle)content;
      nameDimColumn=dataItemHandle.getResultSetColumn();
    }
    ExtendedItemHandle chartHandle=cell.getCrosstabHandle().getElementFactory().newExtendedItem(null,ChartReportItemConstants.CHART_EXTENSION_NAME);
    ChartReportItemImpl reportItem=(ChartReportItemImpl)chartHandle.getReportItem();
    ChartWithAxes cm=createDefaultChart(exprMeasure,new String[]{nameDimRow,nameDimColumn});
    reportItem.setModel(cm);
    cell.addContent(chartHandle,0);
    if (cm.isTransposed()) {
      ChartXTabUtil.addAxisChartInXTab(cell,ICrosstabConstants.ROW_AXIS_TYPE,chartHandle);
    }
 else {
      ChartXTabUtil.addAxisChartInXTab(cell,ICrosstabConstants.COLUMN_AXIS_TYPE,chartHandle);
    }
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
}",0.6342541436464089
73642,"public void restoreView(AggregationCellHandle cell){
  try {
    Chart cm=ChartReportItemUtil.getChartFromHandle(getChartHandle(cell));
    ChartXTabUtil.removeAxisChartInXTab(cm,cell.getCrosstab());
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
}","public void restoreView(AggregationCellHandle cell){
  try {
    Chart cm=ChartReportItemUtil.getChartFromHandle(getChartHandle(cell));
    ChartXTabUtil.removeAxisChartInXTab(cell,cm);
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
}",0.9581749049429658
73643,"/** 
 * Finds chart report item from handle
 * @param eih extended item handle with chart
 * @since 2.3
 */
public static ChartReportItemImpl getChartReportItemFromHandle(ExtendedItemHandle eih){
  ChartReportItemImpl item=null;
  if (!""String_Node_Str"".endsWith(eih.getExtensionName())) {
    return null;
  }
  try {
    item=(ChartReportItemImpl)eih.getReportItem();
  }
 catch (  ExtendedElementException e) {
    logger.log(e);
  }
  if (item == null) {
    try {
      eih.loadExtendedElement();
      item=(ChartReportItemImpl)eih.getReportItem();
    }
 catch (    ExtendedElementException eeex) {
      logger.log(eeex);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    }
  }
  return item;
}","/** 
 * Finds chart report item from handle
 * @param eih extended item handle with chart
 * @since 2.3
 */
public static ChartReportItemImpl getChartReportItemFromHandle(ExtendedItemHandle eih){
  ChartReportItemImpl item=null;
  if (!isChartHandle(eih)) {
    return null;
  }
  try {
    item=(ChartReportItemImpl)eih.getReportItem();
  }
 catch (  ExtendedElementException e) {
    logger.log(e);
  }
  if (item == null) {
    try {
      eih.loadExtendedElement();
      item=(ChartReportItemImpl)eih.getReportItem();
    }
 catch (    ExtendedElementException eeex) {
      logger.log(eeex);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    }
  }
  return item;
}",0.3549257759784076
73644,"/** 
 * @throws BirtException
 * @throws DataException
 * @throws IOException
 */
private void incomprehensiveColumnBinding() throws BirtException, DataException, IOException {
  this.GEN_add_group=true;
  this.GEN_add_subquery=true;
  this.GEN_print=true;
  this.USE_DATE_IN_COLUMNBINDING=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  if (myPreDataEngine != null) {
    myPreDataEngine.shutdown();
    myGenDataEngine.clearCache(dataSource,dataSet);
  }
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=1;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  myPreDataEngine.shutdown();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=false;
  this.preBasicIV();
  this.checkOutputFile();
  myPreDataEngine.shutdown();
}","/** 
 * @throws BirtException
 * @throws DataException
 * @throws IOException
 */
private void incomprehensiveColumnBinding() throws BirtException, DataException, IOException {
  File file=new File(fileName);
  if (file.exists()) {
    file.delete();
  }
  this.GEN_add_group=true;
  this.GEN_add_subquery=true;
  this.GEN_print=true;
  this.USE_DATE_IN_COLUMNBINDING=false;
  this.genBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  if (myPreDataEngine != null) {
    myPreDataEngine.shutdown();
    myPreDataEngine.clearCache(dataSource,dataSet);
  }
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=1;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  myPreDataEngine.shutdown();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=false;
  this.preBasicIV();
  this.checkOutputFile();
  myPreDataEngine.shutdown();
}",0.9492590929501572
73645,"public void changeTask(Notification notification){
  if (previewPainter != null) {
    if (notification == null) {
      if (getChartModel() instanceof ChartWithAxes) {
        checkDataTypeForChartWithAxes();
      }
      return;
    }
    if ((notification.getNotifier() instanceof Query && ((Query)notification.getNotifier()).eContainer() instanceof Series)) {
      checkDataType((Query)notification.getNotifier(),(Series)((Query)notification.getNotifier()).eContainer());
    }
    if (notification.getNotifier() instanceof SeriesDefinition && getChartModel() instanceof ChartWithAxes) {
      checkDataTypeForChartWithAxes();
    }
    if (notification.getNewValue() instanceof SeriesGrouping) {
      getCustomizeUI().refreshLeftBindingArea();
    }
    if (notification.getNotifier() instanceof Query || notification.getNotifier() instanceof Axis || notification.getNotifier() instanceof SeriesDefinition|| notification.getNotifier() instanceof SeriesGrouping) {
      doLivePreview();
    }
 else     if (ChartPreviewPainter.isLivePreviewActive()) {
      ChartAdapter.beginIgnoreNotifications();
      ChartUIUtil.syncRuntimeSeries(getChartModel());
      ChartAdapter.endIgnoreNotifications();
      doLivePreview();
    }
 else {
      previewPainter.renderModel(getChartModel());
    }
  }
}","public void changeTask(Notification notification){
  if (previewPainter != null) {
    if (notification == null) {
      if (getChartModel() instanceof ChartWithAxes) {
        checkDataTypeForChartWithAxes();
      }
      return;
    }
    if ((notification.getNotifier() instanceof Query && ((Query)notification.getNotifier()).eContainer() instanceof Series)) {
      checkDataType((Query)notification.getNotifier(),(Series)((Query)notification.getNotifier()).eContainer());
    }
    if (notification.getNotifier() instanceof SeriesDefinition && getChartModel() instanceof ChartWithAxes) {
      checkDataTypeForChartWithAxes();
    }
    if (notification.getNotifier() instanceof Query || notification.getNotifier() instanceof Axis || notification.getNotifier() instanceof SeriesDefinition|| notification.getNotifier() instanceof SeriesGrouping) {
      doLivePreview();
    }
 else     if (ChartPreviewPainter.isLivePreviewActive()) {
      ChartAdapter.beginIgnoreNotifications();
      ChartUIUtil.syncRuntimeSeries(getChartModel());
      ChartAdapter.endIgnoreNotifications();
      doLivePreview();
    }
 else {
      previewPainter.renderModel(getChartModel());
    }
  }
}",0.9522280208751506
73646,"/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
  URL url=design.findResource(content.getURI(),IResourceLocator.IMAGE);
InputStream in=url.openStream();
try {
byte[] buffer=new byte[in.available()];
in.read(buffer);
image=Image.getInstance(buffer);
}
 catch (Exception ex) {
logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
image=Image.getInstance(content.getData());
break;
case IImageContent.IMAGE_URL:
image=Image.getInstance(new URL(content.getURI()));
break;
default :
assert(false);
}
if (image != null) {
Object design=content.getGenerateBy();
int resolution=96;
if (design instanceof ExtendedItemDesign) {
resolution=192;
}
return new Dimension((int)(image.plainWidth() * 1000 / resolution * 72),(int)(image.plainHeight() * 1000 / resolution * 72));
}
return null;
}","/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
  URL url=design.findResource(content.getURI(),IResourceLocator.IMAGE);
InputStream in=url.openStream();
try {
byte[] buffer=new byte[in.available()];
in.read(buffer);
image=Image.getInstance(buffer);
}
 catch (Exception ex) {
logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
image=Image.getInstance(content.getData());
break;
case IImageContent.IMAGE_URL:
image=Image.getInstance(new URL(content.getURI()));
break;
default :
assert(false);
}
if (image != null) {
int resolution=96;
int contentResolution=content.getResolution();
if (contentResolution != 0) {
resolution=contentResolution;
}
return new Dimension((int)(image.plainWidth() * 1000 / resolution * 72),(int)(image.plainHeight() * 1000 / resolution * 72));
}
return null;
}",0.936472346786248
73647,"private String format(String givenValue){
  String returnStr=""String_Node_Str"";
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      returnStr=givenValue + ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      returnStr=""String_Node_Str"";
    }
    returnStr=returnStr + givenValue;
  }
 else {
    if (givenValue.equals(""String_Node_Str"") || givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str"") || givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str"") || givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str"") || givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
    if (validType(givenValue)) {
      return givenValue + ""String_Node_Str"";
    }
    int count=givenValue.length();
    for (int num=0; num < count - 1; num++) {
      returnStr=returnStr + givenValue.charAt(num) + ""String_Node_Str"";
    }
    returnStr=returnStr + givenValue.charAt(count - 1) + ""String_Node_Str"";
  }
  return returnStr;
}","private String format(String givenValue){
  String returnStr=""String_Node_Str"";
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      returnStr=givenValue + ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      returnStr=""String_Node_Str"";
    }
    returnStr=returnStr + givenValue + ""String_Node_Str"";
  }
 else {
    if (givenValue.equals(""String_Node_Str"") || givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str"") || givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str"") || givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str"") || givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
    if (validType(givenValue)) {
      return givenValue + ""String_Node_Str"";
    }
    int count=givenValue.length();
    for (int num=0; num < count - 1; num++) {
      returnStr=returnStr + givenValue.charAt(num) + ""String_Node_Str"";
    }
    returnStr=returnStr + givenValue.charAt(count - 1) + ""String_Node_Str"";
  }
  return returnStr;
}",0.9939430648092066
73648,"/** 
 * @throws BirtException
 * @throws DataException
 * @throws IOException
 */
private void incomprehensiveColumnBinding() throws BirtException, DataException, IOException {
  this.GEN_add_group=true;
  this.GEN_add_subquery=true;
  this.GEN_print=true;
  this.USE_DATE_IN_COLUMNBINDING=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=1;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  myPreDataEngine.shutdown();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=false;
  this.preBasicIV();
  this.checkOutputFile();
  myPreDataEngine.shutdown();
}","/** 
 * @throws BirtException
 * @throws DataException
 * @throws IOException
 */
private void incomprehensiveColumnBinding() throws BirtException, DataException, IOException {
  this.GEN_add_group=true;
  this.GEN_add_subquery=true;
  this.GEN_print=true;
  this.USE_DATE_IN_COLUMNBINDING=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  if (myPreDataEngine != null) {
    myPreDataEngine.shutdown();
    myGenDataEngine.clearCache(dataSource,dataSet);
  }
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=1;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  myPreDataEngine.shutdown();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=false;
  this.preBasicIV();
  this.checkOutputFile();
  myPreDataEngine.shutdown();
}",0.9394697348674336
73649,"/** 
 * @throws BirtException
 */
private void genBasicIV() throws BirtException {
  QueryDefinition qd=newGenIVReportQuery();
  if (!this.usesDetails) {
    qd.setUsesDetails(false);
  }
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  GEN_queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(this.rowExprName[i]) + ""String_Node_Str"";
    if (!this.notIncludeAggr) {
      for (int i=0; i < totalExprName.length; i++)       abc+=ri.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    }
    if (this.GEN_print == true)     this.testPrintln(abc);
    if (this.GEN_add_subquery == true) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++) {
          abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        }
        if (this.USE_DATE_IN_SUBQUERY)         abc+=subRi.getValue(""String_Node_Str"");
      }
      subRi.close();
    }
  }
  if (this.add_subquery_on_query) {
    IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
    String abc=""String_Node_Str"";
    for (int i=0; i < subRowExprName1.length; i++)     abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
    if (this.GEN_print)     this.testPrintln(abc);
    while (subRi.next()) {
      abc=""String_Node_Str"";
      for (int i=0; i < subRowExprName1.length; i++)       abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
      this.testPrintln(abc);
    }
  }
  if (this.GEN_print == true)   this.testPrintln(""String_Node_Str"");
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genBasicIV() throws BirtException {
  QueryDefinition qd=newGenIVReportQuery();
  if (!this.usesDetails) {
    qd.setUsesDetails(false);
  }
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  GEN_queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(this.rowExprName[i]) + ""String_Node_Str"";
    if (!this.notIncludeAggr) {
      for (int i=0; i < totalExprName.length; i++)       abc+=ri.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    }
    if (this.GEN_print == true)     this.testPrintln(abc);
    if (this.GEN_add_subquery == true) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++) {
          abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        }
        if (this.USE_DATE_IN_SUBQUERY)         abc+=subRi.getValue(""String_Node_Str"");
      }
      subRi.close();
    }
  }
  if (this.add_subquery_on_query) {
    IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
    String abc=""String_Node_Str"";
    for (int i=0; i < subRowExprName1.length; i++)     abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
    if (this.GEN_print)     this.testPrintln(abc);
    while (subRi.next()) {
      abc=""String_Node_Str"";
      for (int i=0; i < subRowExprName1.length; i++)       abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
      this.testPrintln(abc);
    }
  }
  if (this.GEN_print == true)   this.testPrintln(""String_Node_Str"");
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
  myGenDataEngine.clearCache(dataSource,dataSet);
}",0.9863013698630136
73650,"protected String getEscapedStr(String s){
  StringBuffer result=null;
  int spacePos=1;
  char[] s2char=s.toCharArray();
  for (int i=0, max=s2char.length, delta=0; i < max; i++) {
    char c=s2char[i];
    String replacement=null;
    if (c == ' ') {
      if (spacePos % 2 == 1 || i == max - 1) {
        replacement=""String_Node_Str"";
      }
      spacePos++;
    }
 else {
      spacePos=0;
    }
    if (!(c == 0x9 || c == 0xA || c == 0xD || (c >= 0x20 && c <= 0xD7FF) || (c >= 0xE000 && c <= 0xFFFD))) {
      replacement=""String_Node_Str"";
    }
 else     if (c == '&') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '<') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '>') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '\t') {
      replacement=""String_Node_Str"";
    }
 else     if (c >= 0x80) {
      replacement=""String_Node_Str"" + Integer.toHexString(c) + ';';
    }
    if (replacement != null) {
      if (result == null) {
        result=new StringBuffer(s);
      }
      result.replace(i + delta,i + delta + 1,replacement);
      delta+=(replacement.length() - 1);
    }
  }
  if (result == null) {
    return s;
  }
  return result.toString();
}","protected String getEscapedStr(String s){
  StringBuffer result=null;
  int spacePos=1;
  char[] s2char=s.toCharArray();
  for (int i=0, max=s2char.length, delta=0; i < max; i++) {
    char c=s2char[i];
    String replacement=null;
    if (c == ' ') {
      if (spacePos % 2 == 1 || i == max - 1) {
        replacement=""String_Node_Str"";
      }
      spacePos++;
    }
 else {
      spacePos=0;
    }
    if (!(c == 0x9 || c == 0xA || c == 0xD || (c >= 0x20 && c <= 0xD7FF) || (c >= 0xE000 && c <= 0xFFFD))) {
      replacement=""String_Node_Str"";
    }
 else     if (c == '&') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '<') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '>') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '\t') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '=') {
      replacement=""String_Node_Str"";
    }
 else     if (c >= 0x80) {
      replacement=""String_Node_Str"" + Integer.toHexString(c) + ';';
    }
    if (replacement != null) {
      if (result == null) {
        result=new StringBuffer(s);
      }
      result.replace(i + delta,i + delta + 1,replacement);
      delta+=(replacement.length() - 1);
    }
  }
  if (result == null) {
    return s;
  }
  return result.toString();
}",0.9724110355857656
73651,"/** 
 * Gets teh value from the String throw the VM.
 * @param frame
 * @param expression
 * @return
 */
public ScriptValue evaluate(ScriptStackFrame frame,String expression){
  VMValue value;
  try {
    value=reportVM.evaluate(expression);
  }
 catch (  VMException e) {
    return null;
  }
  if (value == null) {
    return null;
  }
  ScriptValue debugValue=new ScriptValue(frame,value);
  return debugValue;
}","/** 
 * Gets teh value from the String throw the VM.
 * @param frame
 * @param expression
 * @return
 */
public ScriptValue evaluate(ScriptStackFrame frame,String expression){
  VMValue value;
  try {
    value=reportVM.evaluate(expression);
  }
 catch (  VMException e) {
    return null;
  }
  if (value == null) {
    return null;
  }
  if (VMConstants.UNDEFINED_TYPE.equals(value.getTypeName()) || VMConstants.EXCEPTION_TYPE.equals(value.getTypeName())) {
    return null;
  }
  ScriptValue debugValue=new ScriptValue(frame,value);
  return debugValue;
}",0.8530318602261048
73652,"/** 
 * Clear the temp files when session is expired
 * @param sessionId
 */
public static void clearSessionFiles(String sessionId){
  if (sessionId == null)   return;
  String tempFolder=documentFolder + File.separator + (PREFIX_SUB_DOC_FOLDER + sessionId);
  File file=new File(tempFolder);
  deleteDir(file);
  tempFolder=imageFolder + File.separator + sessionId;
  file=new File(tempFolder);
  deleteDir(file);
}","/** 
 * Clear the temp files when session is expired
 * @param sessionId
 */
public static void clearSessionFiles(String sessionId){
  if (sessionId == null)   return;
  String tempFolder=documentFolder + File.separator + (PREFIX_SUB_DOC_FOLDER + sessionId);
  File file=new File(tempFolder);
  deleteDir(file);
  tempFolder=imageFolder + File.separator + (PREFIX_SUB_IMAGE_FOLDER + sessionId);
  file=new File(tempFolder);
  deleteDir(file);
}",0.9465116279069768
73653,"/** 
 * Clears the report document/image files which had been created last time the server starts up.
 */
protected static void clearTempFiles(){
  File file=new File(documentFolder);
  if (file != null && file.isDirectory()) {
    String[] children=file.list();
    for (int i=0; i < children.length; i++) {
      if (children[i].startsWith(PREFIX_SUB_DOC_FOLDER))       deleteDir(new File(file,children[i]));
    }
  }
  file=new File(imageFolder);
  deleteDir(file);
  makeDir(imageFolder);
}","/** 
 * Clears the report document/image files which had been created last time the server starts up.
 */
protected static void clearTempFiles(){
  File file=new File(documentFolder);
  if (file != null && file.isDirectory()) {
    String[] children=file.list();
    for (int i=0; i < children.length; i++) {
      if (children[i].startsWith(PREFIX_SUB_DOC_FOLDER))       deleteDir(new File(file,children[i]));
    }
  }
  file=new File(imageFolder);
  if (file != null && file.isDirectory()) {
    String[] children=file.list();
    for (int i=0; i < children.length; i++) {
      if (children[i].startsWith(PREFIX_SUB_IMAGE_FOLDER))       deleteDir(new File(file,children[i]));
    }
  }
}",0.7723440134907251
73654,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  boolean isDesigner=false;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
 else   initImageFolder+=File.separator + IBirtConstants.SUB_IMAGE_FOLDER;
  imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String rootPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_ROOT_PATH + ""String_Node_Str"";
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=rootPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxRowLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_ROWLEVELS);
  try {
    maxCubeRowLevels=Integer.valueOf(s_maxRowLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeRowLevels=-1;
  }
  String s_maxColumnLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_COLUMNLEVELS);
  try {
    maxCubeColumnLevels=Integer.valueOf(s_maxColumnLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeColumnLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  birtResourceFolder=processRealPath(context,context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH),null,false);
  String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=false;
  clearTempFiles();
  isInitContext=true;
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  boolean isDesigner=false;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
  imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String rootPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_ROOT_PATH + ""String_Node_Str"";
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=rootPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxRowLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_ROWLEVELS);
  try {
    maxCubeRowLevels=Integer.valueOf(s_maxRowLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeRowLevels=-1;
  }
  String s_maxColumnLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_COLUMNLEVELS);
  try {
    maxCubeColumnLevels=Integer.valueOf(s_maxColumnLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeColumnLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  birtResourceFolder=processRealPath(context,context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH),null,false);
  String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=false;
  clearTempFiles();
  isInitContext=true;
}",0.9916915918909937
73655,"/** 
 * Returns the temp image folder with session id
 * @param request
 * @return
 */
public static String getImageTempFolder(HttpServletRequest request){
  String tempFolder=imageFolder;
  String sessionId=request.getSession().getId();
  if (sessionId != null)   tempFolder=tempFolder + File.separator + sessionId;
  return tempFolder;
}","/** 
 * Returns the temp image folder with session id
 * @param request
 * @return
 */
public static String getImageTempFolder(HttpServletRequest request){
  String tempFolder=imageFolder;
  String sessionId=request.getSession().getId();
  if (sessionId != null)   tempFolder=tempFolder + File.separator + (PREFIX_SUB_IMAGE_FOLDER + sessionId);
  return tempFolder;
}",0.9348441926345608
73656,"public final void updateFigure(ExtendedItemHandle eih,IFigure ifg){
  try {
    eih.loadExtendedElement();
    final ChartReportItemImpl crii=(ChartReportItemImpl)eih.getReportItem();
    crii.setHandle(eih);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    Bounds defaultBounds=ChartReportItemUtil.createDefaultChartBounds(crii,cm);
    double dHeightInPoints=defaultBounds.getHeight();
    double dWidthInPoints=defaultBounds.getWidth();
    final DimensionHandle dhHeight=eih.getHeight();
    final DimensionHandle dhWidth=eih.getWidth();
    double dOriginalHeight=dhHeight.getMeasure();
    String sHeightUnits=dhHeight.getUnits();
    double dOriginalWidth=dhWidth.getMeasure();
    String sWidthUnits=dhWidth.getUnits();
    final IDisplayServer idsSWT=ChartUIUtil.getDisplayServer();
    if (sHeightUnits != null) {
      if (sHeightUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,dOriginalHeight);
        sHeightUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sHeightUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int height=(int)((parentFigure.getSize().height - parentFigure.getInsets().getHeight()) * dOriginalHeight / 100);
          dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,height);
          sHeightUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dHeightInPoints=DimensionUtil.convertTo(dOriginalHeight,sHeightUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    if (sWidthUnits != null) {
      if (sWidthUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalWidth=(dOriginalWidth * 72d) / idsSWT.getDpiResolution();
        sWidthUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sWidthUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int width=(int)((parentFigure.getSize().width - parentFigure.getInsets().getWidth()) * dOriginalWidth / 100);
          dOriginalWidth=ChartUtil.convertPixelsToPoints(idsSWT,width);
          sWidthUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dWidthInPoints=DimensionUtil.convertTo(dOriginalWidth,sWidthUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    final double dHeightInPixels=(idsSWT.getDpiResolution() * dHeightInPoints) / 72d;
    final double dWidthInPixels=(idsSWT.getDpiResolution() * dWidthInPoints) / 72d;
    if (cm != null) {
      if (dWidthInPoints > 0)       cm.getBlock().getBounds().setWidth(dWidthInPoints);
      if (dHeightInPoints > 0)       cm.getBlock().getBounds().setHeight(dHeightInPoints);
    }
    if (crii.getDesignerRepresentation() != null) {
      ((DesignerRepresentation)crii.getDesignerRepresentation()).setDirty(true);
    }
    Dimension newSize=ifg.getBounds().getCopy().getSize();
    if (dWidthInPixels > 0)     newSize.width=(int)dWidthInPixels;
    if (dHeightInPixels > 0)     newSize.height=(int)dHeightInPixels;
    ifg.setSize(newSize);
  }
 catch (  BirtException ex) {
    logger.log(ex);
  }
}","public final void updateFigure(ExtendedItemHandle eih,IFigure ifg){
  try {
    eih.loadExtendedElement();
    final ChartReportItemImpl crii=(ChartReportItemImpl)eih.getReportItem();
    crii.setHandle(eih);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    Bounds defaultBounds=ChartReportItemUtil.createDefaultChartBounds(crii,cm);
    double dHeightInPoints=defaultBounds.getHeight();
    double dWidthInPoints=defaultBounds.getWidth();
    final DimensionHandle dhHeight=eih.getHeight();
    final DimensionHandle dhWidth=eih.getWidth();
    double dOriginalHeight=dhHeight.getMeasure();
    String sHeightUnits=dhHeight.getUnits();
    double dOriginalWidth=dhWidth.getMeasure();
    String sWidthUnits=dhWidth.getUnits();
    final IDisplayServer idsSWT=ChartUIUtil.getDisplayServer();
    if (sHeightUnits != null) {
      if (sHeightUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,dOriginalHeight);
        sHeightUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sHeightUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int height=(int)((parentFigure.getSize().height - parentFigure.getInsets().getHeight()) * dOriginalHeight / 100);
          dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,height);
          sHeightUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dHeightInPoints=DimensionUtil.convertTo(dOriginalHeight,sHeightUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    if (sWidthUnits != null) {
      if (sWidthUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalWidth=(dOriginalWidth * 72d) / idsSWT.getDpiResolution();
        sWidthUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sWidthUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int width=(int)((parentFigure.getSize().width - parentFigure.getInsets().getWidth()) * dOriginalWidth / 100);
          dOriginalWidth=ChartUtil.convertPixelsToPoints(idsSWT,width);
          sWidthUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dWidthInPoints=DimensionUtil.convertTo(dOriginalWidth,sWidthUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    final double dHeightInPixels=(idsSWT.getDpiResolution() * dHeightInPoints) / 72d;
    final double dWidthInPixels=(idsSWT.getDpiResolution() * dWidthInPoints) / 72d;
    if (cm != null && !crii.hasHostChart()) {
      if (dWidthInPoints > 0)       cm.getBlock().getBounds().setWidth(dWidthInPoints);
      if (dHeightInPoints > 0)       cm.getBlock().getBounds().setHeight(dHeightInPoints);
    }
    if (crii.getDesignerRepresentation() != null) {
      ((DesignerRepresentation)crii.getDesignerRepresentation()).setDirty(true);
    }
    Dimension newSize=ifg.getBounds().getCopy().getSize();
    if (dWidthInPixels > 0)     newSize.width=(int)dWidthInPixels;
    if (dHeightInPixels > 0)     newSize.height=(int)dHeightInPixels;
    ifg.setSize(newSize);
  }
 catch (  BirtException ex) {
    logger.log(ex);
  }
}",0.9962264150943396
73657,"/** 
 * @param crii
 */
DesignerRepresentation(ChartReportItemImpl crii){
  bRtL=ChartReportItemUtil.isRtl();
  this.crii=crii;
  if (crii != null) {
    cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    if (ChartReportItemUtil.isChartInXTab(crii.getHandle())) {
      if (!crii.hasHostChart()) {
        cm=ChartReportItemUtil.updateModelToRenderPlot((Chart)EcoreUtil.copy(cm));
      }
 else {
        cm=ChartReportItemUtil.updateModelToRenderAxis((Chart)EcoreUtil.copy(cm));
      }
    }
    if (cm != null) {
      final IDisplayServer idsSWT=ChartUIUtil.getDisplayServer();
      final Bounds bo=cm.getBlock().getBounds().scaledInstance(72d / idsSWT.getDpiResolution());
      setSize((int)bo.getWidth(),(int)bo.getHeight());
    }
 else {
      setSize((int)ChartReportItemUtil.DEFAULT_CHART_BLOCK_WIDTH,(int)ChartReportItemUtil.DEFAULT_CHART_BLOCK_HEIGHT);
    }
  }
 else {
    setSize((int)ChartReportItemUtil.DEFAULT_CHART_BLOCK_WIDTH,(int)ChartReportItemUtil.DEFAULT_CHART_BLOCK_HEIGHT);
  }
  try {
    idr=PluginSettings.instance().getDevice(""String_Node_Str"");
  }
 catch (  ChartException pex) {
    logger.log(pex);
  }
}","/** 
 * @param crii
 */
DesignerRepresentation(ChartReportItemImpl crii){
  bRtL=ChartReportItemUtil.isRtl();
  this.crii=crii;
  updateChartModelAndSize();
  try {
    idr=PluginSettings.instance().getDevice(""String_Node_Str"");
  }
 catch (  ChartException pex) {
    logger.log(pex);
  }
}",0.3756906077348066
73658,"/** 
 * @param bDirty
 */
final void setDirty(boolean bDirty){
  this.bDirty=bDirty;
}","/** 
 * @param bDirty
 */
final void setDirty(boolean bDirty){
  this.bDirty=bDirty;
  updateChartModelAndSize();
}",0.8557213930348259
73659,"private void initHostChart(){
  DesignElementHandle hostChart=handle.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
  if (hostChart instanceof ExtendedItemHandle) {
    cm=ChartReportItemUtil.getChartFromHandle((ExtendedItemHandle)hostChart);
    handle=hostChart;
    hasHostChart=true;
  }
}","private void initHostChart(){
  DesignElementHandle hostChart=handle.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
  if (hostChart instanceof ExtendedItemHandle) {
    cm=ChartReportItemUtil.getChartFromHandle((ExtendedItemHandle)hostChart);
    hostChartHandle=hostChart;
  }
}",0.9466666666666668
73660,"/** 
 * Checks if the handle has host chart reference. In xtab cell, there are two types of chart handle. The one is axis chart with host chart, and the other is plot chart without host chart. For the other cases, not in xtab, it's always chart without host chart.
 * @return true for axis chart, false for plot chart or ordinary chart.
 * @since 2.3
 */
public boolean hasHostChart(){
  return this.hasHostChart;
}","/** 
 * Checks if the handle has host chart reference. In xtab cell, there are two types of chart handle. The one is axis chart with host chart, and the other is plot chart without host chart. For the other cases, not in xtab, it's always chart without host chart.
 * @return true for axis chart, false for plot chart or ordinary chart.
 * @since 2.3
 */
public boolean hasHostChart(){
  return hostChartHandle != null;
}",0.9545454545454546
73661,"public ByteArrayOutputStream serialize(String propName){
  if (propName != null && propName.equalsIgnoreCase(ChartReportItemUtil.PROPERTY_XMLPRESENTATION)) {
    if (!hasHostChart) {
      try {
        return SerializerImpl.instance().asXml(cm,true);
      }
 catch (      Exception e) {
        logger.log(e);
        return new ByteArrayOutputStream();
      }
    }
  }
  return null;
}","public ByteArrayOutputStream serialize(String propName){
  if (propName != null && propName.equalsIgnoreCase(ChartReportItemUtil.PROPERTY_XMLPRESENTATION)) {
    if (!hasHostChart()) {
      try {
        return SerializerImpl.instance().asXml(cm,true);
      }
 catch (      Exception e) {
        logger.log(e);
        return new ByteArrayOutputStream();
      }
    }
  }
  return null;
}",0.9974424552429668
73662,"public void setProperty(String propName,Object value){
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{propName,value}));
  executeSetSimplePropertyCommand(handle,propName,getProperty(propName),value);
}","public void setProperty(String propName,Object value){
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{propName,value}));
  executeSetSimplePropertyCommand(handle,propName,getProperty(propName),value);
  if (hasHostChart()) {
    executeSetSimplePropertyCommand(hostChartHandle,propName,getProperty(propName),value);
  }
}",0.8
73663,"public static String convertBorderWeight(String linestyle){
  String w=StyleConstant.NULL;
  if (linestyle != null && !""String_Node_Str"".equalsIgnoreCase(linestyle)) {
    linestyle=ExcelUtil.getValue(linestyle);
    int weight=(int)Double.parseDouble(linestyle);
    if (weight >= 749 && weight < 2249) {
      w=""String_Node_Str"";
    }
 else     if (weight >= 2249 && weight < 3750) {
      w=""String_Node_Str"";
    }
 else     if (weight >= 3750) {
      w=""String_Node_Str"";
    }
 else {
      w=""String_Node_Str"";
    }
  }
  return w;
}","public static String convertBorderWeight(String linestyle){
  String w=StyleConstant.NULL;
  if (linestyle != null && !""String_Node_Str"".equalsIgnoreCase(linestyle)) {
    linestyle=ExcelUtil.getValue(linestyle);
    int weight=(int)Double.parseDouble(linestyle);
    if (weight >= 749 && weight < 1499) {
      w=""String_Node_Str"";
    }
 else     if (weight >= 1499 && weight < 2249) {
      w=""String_Node_Str"";
    }
 else     if (weight >= 2249) {
      w=""String_Node_Str"";
    }
 else {
      w=""String_Node_Str"";
    }
  }
  return w;
}",0.8308823529411765
73664,"public Object getAdapter(Class adapter){
  if (adapter == IDebugElement.class) {
    return this;
  }
 else   if (adapter == IDebugTarget.class) {
    return getDebugTarget();
  }
  return super.getAdapter(adapter);
}","public Object getAdapter(Class adapter){
  if (adapter == IDebugElement.class || adapter == ScriptDebugElement.class) {
    return this;
  }
 else   if (adapter == IDebugTarget.class) {
    return getDebugTarget();
  }
  return super.getAdapter(adapter);
}",0.9175475687103594
73665,"public void debugContextChanged(DebugContextEvent event){
  ISelection selection=event.getContext();
  if (selection instanceof IStructuredSelection) {
    IStructuredSelection ss=(IStructuredSelection)selection;
    if (ss.size() == 1) {
      Object element=ss.getFirstElement();
      if (element instanceof IAdaptable) {
        ScriptDebugElement frame=(ScriptDebugElement)((IAdaptable)element).getAdapter(IDebugElement.class);
        if (frame != null) {
          System.setProperty(KEY,""String_Node_Str"");
          return;
        }
      }
    }
  }
  System.setProperty(KEY,""String_Node_Str"");
}","public void debugContextChanged(DebugContextEvent event){
  ISelection selection=event.getContext();
  if (selection instanceof IStructuredSelection) {
    IStructuredSelection ss=(IStructuredSelection)selection;
    if (ss.size() == 1) {
      Object element=ss.getFirstElement();
      if (element instanceof IAdaptable) {
        ScriptDebugElement frame=(ScriptDebugElement)((IAdaptable)element).getAdapter(ScriptDebugElement.class);
        if (frame != null) {
          System.setProperty(KEY,""String_Node_Str"");
          return;
        }
      }
    }
  }
  System.setProperty(KEY,""String_Node_Str"");
}",0.9942575881870386
73666,"public Object[] findSourceElements(String name) throws CoreException {
  int index=name.lastIndexOf(File.separator);
  String id=name.substring(index + 1);
  String tName=name.substring(0,index);
  ArrayList sources=new ArrayList();
  File directory=getDirectory();
  File file=new File(directory,tName);
  if (file.exists() && file.isFile()) {
    sources.add(new ScriptLocalFileStorage(file,id));
  }
  if (sources.isEmpty())   return EMPTY;
  return sources.toArray();
}","public Object[] findSourceElements(String name) throws CoreException {
  int index=name.lastIndexOf(File.separator);
  if (index < 0) {
    return EMPTY;
  }
  String id=name.substring(index + 1);
  String tName=name.substring(0,index);
  ArrayList sources=new ArrayList();
  File directory=getDirectory();
  File file=new File(directory,tName);
  if (file.exists() && file.isFile()) {
    sources.add(new ScriptLocalFileStorage(file,id));
  }
  if (sources.isEmpty())   return EMPTY;
  return sources.toArray();
}",0.303951367781155
73667,"public void startCell(int cellindex,int colspan,int rowspan,int styleid,HyperlinkDef hyperLink){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",cellindex);
  writer.attribute(""String_Node_Str"",styleid);
  if (hyperLink != null) {
    if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"" + hyperLink.getUrl());
    }
 else {
      writer.attribute(""String_Node_Str"",hyperLink.getUrl());
    }
  }
  writer.attribute(""String_Node_Str"",colspan);
  writer.attribute(""String_Node_Str"",rowspan);
}","public void startCell(int cellindex,int colspan,int rowspan,int styleid,HyperlinkDef hyperLink){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",cellindex);
  writer.attribute(""String_Node_Str"",styleid);
  if (hyperLink != null) {
    String urlAddress=hyperLink.getUrl();
    if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      urlAddress=""String_Node_Str"" + urlAddress;
    }
    if (urlAddress.length() >= 255) {
      urlAddress=urlAddress.substring(0,254);
    }
    writer.attribute(""String_Node_Str"",urlAddress);
  }
  writer.attribute(""String_Node_Str"",colspan);
  writer.attribute(""String_Node_Str"",rowspan);
}",0.6180944755804644
73668,"public void writeDataFormat(StyleEntry style){
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
}","public void writeDataFormat(StyleEntry style){
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    String numberStyle=style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    numberStyle=format(numberStyle);
    writer.attribute(""String_Node_Str"",numberStyle);
    writer.closeTag(""String_Node_Str"");
  }
}",0.8979300499643112
73669,"private static int getDebugType(){
  String str=System.getProperty(ATTR_DEBUG_TYPE);
  if (str == null) {
    return DEBUG_TYPE_ALL;
  }
  return Integer.parseInt(str);
}","private static int getDebugType(){
  String str=System.getProperty(ATTR_DEBUG_TYPE);
  if (str == null) {
    return DEFAULT_DEBUG_TYPE;
  }
  return Integer.parseInt(str);
}",0.9651162790697676
73670,"private static int getTaskType(){
  String str=System.getProperty(ATTR_TASK_TYPE);
  if (str == null) {
    return TASK_TYPE_RUN_PLUS_RENDER;
  }
  return Integer.parseInt(str);
}","private static int getTaskType(){
  String str=System.getProperty(ATTR_TASK_TYPE);
  if (str == null) {
    return DEFAULT_TASK_TYPE;
  }
  return Integer.parseInt(str);
}",0.9314285714285714
73671,"public VMVariable[] getVariables(){
  return (VMVariable[])Context.call(new ContextAction(){
    public Object run(    Context arg0){
      try {
        return getVariablesImpl(arg0);
      }
 catch (      Exception e) {
        StringWriter sw=new StringWriter();
        e.printStackTrace(new PrintWriter(sw));
        return new VMVariable[]{new JsVariable(sw.toString(),ERROR_LITERAL)};
      }
    }
  }
);
}","public VMVariable[] getVariables(){
  return (VMVariable[])Context.call(new ContextAction(){
    public Object run(    Context arg0){
      try {
        return getVariablesImpl(arg0);
      }
 catch (      Exception e) {
        StringWriter sw=new StringWriter();
        e.printStackTrace(new PrintWriter(sw));
        return new VMVariable[]{new JsVariable(sw.toString(),ERROR_LITERAL,EXCEPTION_TYPE)};
      }
    }
  }
);
}",0.98220640569395
73672,"public Object run(Context arg0){
  try {
    return getVariablesImpl(arg0);
  }
 catch (  Exception e) {
    StringWriter sw=new StringWriter();
    e.printStackTrace(new PrintWriter(sw));
    return new VMVariable[]{new JsVariable(sw.toString(),ERROR_LITERAL)};
  }
}","public Object run(Context arg0){
  try {
    return getVariablesImpl(arg0);
  }
 catch (  Exception e) {
    StringWriter sw=new StringWriter();
    e.printStackTrace(new PrintWriter(sw));
    return new VMVariable[]{new JsVariable(sw.toString(),ERROR_LITERAL,EXCEPTION_TYPE)};
  }
}",0.94010889292196
73673,"public synchronized VMValue evaluate(String expression){
  int currentState=debugger.currentState();
  if (currentState == VM_TERMINATED) {
    return null;
  }
  JsValue result=null;
  Debugger oldDebugger=cx.getDebugger();
  Object oldContextData=cx.getDebuggerContextData();
  int oldLevel=cx.getOptimizationLevel();
  cx.setDebugger(null,null);
  cx.setOptimizationLevel(-1);
  cx.setGeneratingDebug(false);
  try {
    Callable script=(Callable)cx.compileString(expression,EVALUATOR_LITERAL,0,null);
    Object val=script.call(cx,scope,thisObj,ScriptRuntime.emptyArgs);
    if (val == Undefined.instance) {
      result=new JsValue(UNDEFINED_LITERAL);
    }
 else {
      result=new JsValue(val);
    }
  }
 catch (  Exception ex) {
    result=new JsValue(ex.getMessage());
  }
 finally {
    cx.setGeneratingDebug(true);
    cx.setOptimizationLevel(oldLevel);
    cx.setDebugger(oldDebugger,oldContextData);
  }
  return result;
}","public synchronized VMValue evaluate(String expression){
  int currentState=debugger.currentState();
  if (currentState == VM_TERMINATED) {
    return null;
  }
  JsValue result=null;
  Debugger oldDebugger=cx.getDebugger();
  Object oldContextData=cx.getDebuggerContextData();
  int oldLevel=cx.getOptimizationLevel();
  cx.setDebugger(null,null);
  cx.setOptimizationLevel(-1);
  cx.setGeneratingDebug(false);
  try {
    Callable script=(Callable)cx.compileString(expression,EVALUATOR_LITERAL,0,null);
    Object val=script.call(cx,scope,thisObj,ScriptRuntime.emptyArgs);
    if (val == Undefined.instance) {
      result=new JsValue(UNDEFINED_LITERAL,UNDEFINED_TYPE);
    }
 else {
      result=new JsValue(val);
    }
  }
 catch (  Exception ex) {
    result=new JsValue(ex.getMessage(),EXCEPTION_TYPE);
  }
 finally {
    cx.setGeneratingDebug(true);
    cx.setOptimizationLevel(oldLevel);
    cx.setDebugger(oldDebugger,oldContextData);
  }
  return result;
}",0.9842271293375394
73674,"public Object run(Context arg0){
  try {
    return getMembersImpl(arg0);
  }
 catch (  Exception e) {
    StringWriter sw=new StringWriter();
    e.printStackTrace(new PrintWriter(sw));
    return new VMVariable[]{new JsVariable(sw.toString(),ERROR_LITERAL)};
  }
}","public Object run(Context arg0){
  try {
    return getMembersImpl(arg0);
  }
 catch (  Exception e) {
    StringWriter sw=new StringWriter();
    e.printStackTrace(new PrintWriter(sw));
    return new VMVariable[]{new JsVariable(sw.toString(),ERROR_LITERAL,EXCEPTION_TYPE)};
  }
}",0.939670932358318
73675,"public int hashCode(){
  if (value == null) {
    return Boolean.valueOf(isPrimitive).hashCode();
  }
  return value.hashCode() ^ Boolean.valueOf(isPrimitive).hashCode();
}","public int hashCode(){
  int hash=Boolean.valueOf(isPrimitive).hashCode();
  if (value != null) {
    hash^=value.hashCode();
  }
  if (reservedValueType != null) {
    hash^=reservedValueType.hashCode();
  }
  return hash;
}",0.3778337531486146
73676,"public boolean equals(Object obj){
  if (!(obj instanceof JsValue)) {
    return false;
  }
  JsValue that=(JsValue)obj;
  if (this.isPrimitive != that.isPrimitive) {
    return false;
  }
  if (this.value == null) {
    return that.value == null;
  }
 else {
    return this.value.equals(that.value);
  }
}","public boolean equals(Object obj){
  if (!(obj instanceof JsValue)) {
    return false;
  }
  JsValue that=(JsValue)obj;
  if (this.isPrimitive != that.isPrimitive) {
    return false;
  }
  if (this.value == null) {
    if (that.value != null) {
      return false;
    }
  }
 else {
    if (!this.value.equals(that.value)) {
      return false;
    }
  }
  if (this.reservedValueType == null) {
    return that.reservedValueType == null;
  }
 else {
    return this.reservedValueType.equals(that.reservedValueType);
  }
}",0.6024096385542169
73677,"private VMVariable[] getMembersImpl(Context cx){
  Object valObj=value;
  if (value instanceof NativeJavaObject) {
    valObj=((NativeJavaObject)value).unwrap();
  }
  if (valObj == null || valObj.getClass().isPrimitive() || isPrimitive) {
    return NO_CHILD;
  }
  List children=new ArrayList();
  if (valObj.getClass().isArray()) {
    int len=Array.getLength(valObj);
    boolean primitive=valObj.getClass().getComponentType().isPrimitive();
    for (int i=0; i < len; i++) {
      Object aobj=Array.get(valObj,i);
      if (isValidJsValue(aobj)) {
        children.add(new JsVariable(aobj,""String_Node_Str"" + children.size() + ""String_Node_Str"",primitive));
      }
    }
  }
 else   if (valObj instanceof Scriptable) {
    Object[] ids;
    if (valObj instanceof DebuggableObject) {
      ids=((DebuggableObject)valObj).getAllIds();
    }
 else {
      ids=((Scriptable)valObj).getIds();
    }
    if (ids == null || ids.length == 0) {
      return NO_CHILD;
    }
    for (int i=0; i < ids.length; i++) {
      if (ids[i] instanceof String) {
        Object val=ScriptableObject.getProperty((Scriptable)valObj,(String)ids[i]);
        if (val instanceof NativeJavaObject) {
          val=((NativeJavaObject)val).unwrap();
        }
        if (isValidJsValue(val)) {
          children.add(new JsVariable(val,(String)ids[i]));
        }
      }
    }
  }
 else {
    reflectMembers(valObj,children);
  }
  if (children.size() == 0) {
    return NO_CHILD;
  }
  Collections.sort(children);
  return (VMVariable[])children.toArray(new VMVariable[children.size()]);
}","private VMVariable[] getMembersImpl(Context cx){
  if (reservedValueType != null) {
    return NO_CHILD;
  }
  Object valObj=value;
  if (value instanceof NativeJavaObject) {
    valObj=((NativeJavaObject)value).unwrap();
  }
  if (valObj == null || valObj.getClass().isPrimitive() || isPrimitive) {
    return NO_CHILD;
  }
  List children=new ArrayList();
  if (valObj.getClass().isArray()) {
    int len=Array.getLength(valObj);
    boolean primitive=valObj.getClass().getComponentType().isPrimitive();
    for (int i=0; i < len; i++) {
      Object aobj=Array.get(valObj,i);
      if (isValidJsValue(aobj)) {
        children.add(new JsVariable(aobj,""String_Node_Str"" + children.size() + ""String_Node_Str"",primitive));
      }
    }
  }
 else   if (valObj instanceof Scriptable) {
    Object[] ids;
    if (valObj instanceof DebuggableObject) {
      ids=((DebuggableObject)valObj).getAllIds();
    }
 else {
      ids=((Scriptable)valObj).getIds();
    }
    if (ids == null || ids.length == 0) {
      return NO_CHILD;
    }
    for (int i=0; i < ids.length; i++) {
      if (ids[i] instanceof String) {
        Object val=ScriptableObject.getProperty((Scriptable)valObj,(String)ids[i]);
        if (val instanceof NativeJavaObject) {
          val=((NativeJavaObject)val).unwrap();
        }
        if (isValidJsValue(val)) {
          children.add(new JsVariable(val,(String)ids[i]));
        }
      }
    }
  }
 else {
    reflectMembers(valObj,children);
  }
  if (children.size() == 0) {
    return NO_CHILD;
  }
  Collections.sort(children);
  return (VMVariable[])children.toArray(new VMVariable[children.size()]);
}",0.193628981886321
73678,"public String getTypeName(){
  Object valObj=value;
  if (value instanceof NativeJavaObject) {
    valObj=((NativeJavaObject)value).unwrap();
  }
  if (valObj != null) {
    return convertArrayTypeName(valObj.getClass(),isPrimitive);
  }
  return ""String_Node_Str"";
}","public String getTypeName(){
  if (reservedValueType != null) {
    return reservedValueType;
  }
  Object valObj=value;
  if (value instanceof NativeJavaObject) {
    valObj=((NativeJavaObject)value).unwrap();
  }
  if (valObj != null) {
    return convertArrayTypeName(valObj.getClass(),isPrimitive);
  }
  return ""String_Node_Str"";
}",0.8855721393034826
73679,"public VMVariable[] getMembers(){
  return (VMVariable[])Context.call(new ContextAction(){
    public Object run(    Context arg0){
      try {
        return getMembersImpl(arg0);
      }
 catch (      Exception e) {
        StringWriter sw=new StringWriter();
        e.printStackTrace(new PrintWriter(sw));
        return new VMVariable[]{new JsVariable(sw.toString(),ERROR_LITERAL)};
      }
    }
  }
);
}","public VMVariable[] getMembers(){
  return (VMVariable[])Context.call(new ContextAction(){
    public Object run(    Context arg0){
      try {
        return getMembersImpl(arg0);
      }
 catch (      Exception e) {
        StringWriter sw=new StringWriter();
        e.printStackTrace(new PrintWriter(sw));
        return new VMVariable[]{new JsVariable(sw.toString(),ERROR_LITERAL,EXCEPTION_TYPE)};
      }
    }
  }
);
}",0.9820359281437124
73680,"private void terminated(){
  DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);
  setTerminating(false);
  if (!fTerminated) {
    setTerminated(true);
    reportVM.disconnect();
    fireTerminateEvent();
  }
  breakPoints.clear();
  try {
    if (getLaunch().getLaunchConfiguration().getAttribute(IReportLaunchConstants.ATTR_OPEN_TARGET,false) && getLaunch().getLaunchConfiguration().getAttribute(IReportLaunchConstants.ATTR_TASK_TYPE,IReportLaunchConstants.TASK_TYPE_RUN_AND_RENDER) != IReportLaunchConstants.TASK_TYPE_RUN) {
      while (!getProcess().isTerminated()) {
        try {
synchronized (this) {
            wait(DELAY_TIME);
          }
        }
 catch (        InterruptedException e) {
        }
      }
      if (getProcess().getExitValue() == ReportLauncher.EXIT_OK) {
        File file=new File(getFileName());
        String fileName=ReportLauncher.getOutputFileName(tempFolder,file.getName(),launch.getLaunchConfiguration().getAttribute(IReportLaunchConstants.ATTR_TARGET_FORMAT,IReportLaunchConstants.DEFAULT_OUTPUT_FORMAT));
        if (fileName != null && new File(fileName).exists()) {
          Program.launch(fileName);
        }
      }
    }
  }
 catch (  Exception e) {
  }
}","private void terminated(){
  DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);
  setTerminating(false);
  if (!fTerminated) {
    setTerminated(true);
    reportVM.disconnect();
    fireTerminateEvent();
  }
  breakPoints.clear();
  try {
    if (getLaunch().getLaunchConfiguration().getAttribute(IReportLaunchConstants.ATTR_OPEN_TARGET,false) && getLaunch().getLaunchConfiguration().getAttribute(IReportLaunchConstants.ATTR_TASK_TYPE,IReportLaunchConstants.DEFAULT_TASK_TYPE) != IReportLaunchConstants.TASK_TYPE_RUN) {
      while (!getProcess().isTerminated()) {
        try {
synchronized (this) {
            wait(DELAY_TIME);
          }
        }
 catch (        InterruptedException e) {
        }
      }
      if (getProcess().getExitValue() == ReportLauncher.EXIT_OK) {
        File file=new File(getFileName());
        String fileName=ReportLauncher.getOutputFileName(tempFolder,file.getName(),launch.getLaunchConfiguration().getAttribute(IReportLaunchConstants.ATTR_TARGET_FORMAT,IReportLaunchConstants.DEFAULT_TARGET_FORMAT));
        if (fileName != null && new File(fileName).exists()) {
          Program.launch(fileName);
        }
      }
    }
  }
 catch (  Exception e) {
  }
}",0.5205034510759237
73681,"void init(ILaunchConfiguration configuration){
  engineConfig=new LauncherEngineConfig();
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  configEngine();
  try {
    fileName=covertVariables(configuration.getAttribute(ATTR_REPORT_FILE_NAME,""String_Node_Str""));
    engineHome=covertVariables(configuration.getAttribute(ATTR_ENGINE_HOME,""String_Node_Str""));
    tempFolder=covertVariables(configuration.getAttribute(ATTR_TEMP_FOLDER,""String_Node_Str""));
    useDefaultEngineHome=configuration.getAttribute(ATTR_USE_DEFULT_ENGINE_HOME,true);
    targetFormat=configuration.getAttribute(ATTR_TARGET_FORMAT,DEFAULT_OUTPUT_FORMAT);
    isOpenTargetFile=configuration.getAttribute(ATTR_OPEN_TARGET,false);
    debugType=configuration.getAttribute(ATTR_DEBUG_TYPE,DEBUG_TYPE_ALL);
    taskType=configuration.getAttribute(ATTR_TASK_TYPE,TASK_TYPE_RUN_AND_RENDER);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}","void init(ILaunchConfiguration configuration){
  engineConfig=new LauncherEngineConfig();
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  configEngine();
  try {
    fileName=covertVariables(configuration.getAttribute(ATTR_REPORT_FILE_NAME,""String_Node_Str""));
    engineHome=covertVariables(configuration.getAttribute(ATTR_ENGINE_HOME,""String_Node_Str""));
    tempFolder=covertVariables(configuration.getAttribute(ATTR_TEMP_FOLDER,""String_Node_Str""));
    useDefaultEngineHome=configuration.getAttribute(ATTR_USE_DEFULT_ENGINE_HOME,true);
    targetFormat=configuration.getAttribute(ATTR_TARGET_FORMAT,DEFAULT_TARGET_FORMAT);
    isOpenTargetFile=configuration.getAttribute(ATTR_OPEN_TARGET,false);
    debugType=configuration.getAttribute(ATTR_DEBUG_TYPE,DEFAULT_DEBUG_TYPE);
    taskType=configuration.getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}",0.9795361527967258
73682,"public void initializeFrom(ILaunchConfiguration configuration){
  try {
    fMainText.setText(configuration.getAttribute(ATTR_REPORT_FILE_NAME,getDefaultFileName()));
    fEngineHome.setText(configuration.getAttribute(ATTR_ENGINE_HOME,""String_Node_Str""));
    fTempFolder.setText(configuration.getAttribute(ATTR_TEMP_FOLDER,getDefaultTempFolder()));
    bUseDefaultEngineHome.setSelection(configuration.getAttribute(ATTR_USE_DEFULT_ENGINE_HOME,true));
    fEngineHome.setEnabled(!bUseDefaultEngineHome.getSelection());
    engineHomeSearchButton.setEnabled(!bUseDefaultEngineHome.getSelection());
    engineHomeVariableButton.setEnabled(!bUseDefaultEngineHome.getSelection());
    ReportEngine engine=new ReportEngine(new EngineConfig());
    String[] supportedFormats=engine.getSupportedFormats();
    cmbOutputFormat.setItems(supportedFormats);
    String targetFormat=configuration.getAttribute(ATTR_TARGET_FORMAT,DEFAULT_OUTPUT_FORMAT);
    int idx=Arrays.asList(supportedFormats).indexOf(targetFormat);
    if (idx != -1) {
      cmbOutputFormat.select(idx);
    }
 else     if (supportedFormats.length > 0) {
      cmbOutputFormat.select(0);
    }
    bOpenTarget.setSelection(configuration.getAttribute(ATTR_OPEN_TARGET,false));
    int debugType=configuration.getAttribute(ATTR_DEBUG_TYPE,DEBUG_TYPE_ALL);
    int taskType=configuration.getAttribute(ATTR_TASK_TYPE,TASK_TYPE_RUN_AND_RENDER);
    bDebugAll.setSelection(false);
    bDebugJava.setSelection(false);
    bDebugScript.setSelection(false);
    bRunAndRender.setSelection(false);
    bRun.setSelection(false);
    bRender.setSelection(false);
    bRunPlusRender.setSelection(false);
    if ((debugType & DEBUG_TYPE_ALL) == DEBUG_TYPE_ALL) {
      bDebugAll.setSelection(true);
    }
 else     if ((debugType & DEBUG_TYPE_JAVA_CLASS) == DEBUG_TYPE_JAVA_CLASS) {
      bDebugJava.setSelection(true);
    }
 else {
      bDebugScript.setSelection(true);
    }
    if ((taskType & TASK_TYPE_RUN_PLUS_RENDER) == TASK_TYPE_RUN_PLUS_RENDER) {
      bRunPlusRender.setSelection(true);
    }
 else     if ((taskType & TASK_TYPE_RUN) == TASK_TYPE_RUN) {
      bRun.setSelection(true);
    }
 else     if ((taskType & TASK_TYPE_RENDER) == TASK_TYPE_RENDER) {
      bRender.setSelection(true);
    }
 else {
      bRunAndRender.setSelection(true);
    }
    bOpenTarget.setEnabled(!bRun.getSelection());
  }
 catch (  CoreException e) {
  }
}","public void initializeFrom(ILaunchConfiguration configuration){
  try {
    fMainText.setText(configuration.getAttribute(ATTR_REPORT_FILE_NAME,getDefaultFileName()));
    fEngineHome.setText(configuration.getAttribute(ATTR_ENGINE_HOME,""String_Node_Str""));
    fTempFolder.setText(configuration.getAttribute(ATTR_TEMP_FOLDER,getDefaultTempFolder()));
    bUseDefaultEngineHome.setSelection(configuration.getAttribute(ATTR_USE_DEFULT_ENGINE_HOME,true));
    fEngineHome.setEnabled(!bUseDefaultEngineHome.getSelection());
    engineHomeSearchButton.setEnabled(!bUseDefaultEngineHome.getSelection());
    engineHomeVariableButton.setEnabled(!bUseDefaultEngineHome.getSelection());
    ReportEngine engine=new ReportEngine(new EngineConfig());
    String[] supportedFormats=engine.getSupportedFormats();
    cmbOutputFormat.setItems(supportedFormats);
    String targetFormat=configuration.getAttribute(ATTR_TARGET_FORMAT,DEFAULT_TARGET_FORMAT);
    int idx=Arrays.asList(supportedFormats).indexOf(targetFormat);
    if (idx != -1) {
      cmbOutputFormat.select(idx);
    }
 else     if (supportedFormats.length > 0) {
      cmbOutputFormat.select(0);
    }
    bOpenTarget.setSelection(configuration.getAttribute(ATTR_OPEN_TARGET,false));
    int debugType=configuration.getAttribute(ATTR_DEBUG_TYPE,DEFAULT_DEBUG_TYPE);
    int taskType=configuration.getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE);
    bDebugAll.setSelection(false);
    bDebugJava.setSelection(false);
    bDebugScript.setSelection(false);
    bRunAndRender.setSelection(false);
    bRun.setSelection(false);
    bRender.setSelection(false);
    bRunPlusRender.setSelection(false);
    if ((debugType & DEBUG_TYPE_ALL) == DEBUG_TYPE_ALL) {
      bDebugAll.setSelection(true);
    }
 else     if ((debugType & DEBUG_TYPE_JAVA_CLASS) == DEBUG_TYPE_JAVA_CLASS) {
      bDebugJava.setSelection(true);
    }
 else {
      bDebugScript.setSelection(true);
    }
    if ((taskType & TASK_TYPE_RUN_PLUS_RENDER) == TASK_TYPE_RUN_PLUS_RENDER) {
      bRunPlusRender.setSelection(true);
    }
 else     if ((taskType & TASK_TYPE_RUN) == TASK_TYPE_RUN) {
      bRun.setSelection(true);
    }
 else     if ((taskType & TASK_TYPE_RENDER) == TASK_TYPE_RENDER) {
      bRender.setSelection(true);
    }
 else {
      bRunAndRender.setSelection(true);
    }
    bOpenTarget.setEnabled(!bRun.getSelection());
  }
 catch (  CoreException e) {
  }
}",0.99061130815773
73683,"public void performApply(ILaunchConfigurationWorkingCopy configuration){
  configuration.setAttribute(ATTR_REPORT_FILE_NAME,fMainText.getText());
  configuration.setAttribute(ATTR_ENGINE_HOME,fEngineHome.getText());
  configuration.setAttribute(ATTR_TEMP_FOLDER,fTempFolder.getText());
  configuration.setAttribute(IJavaLaunchConfigurationConstants.ATTR_MAIN_TYPE_NAME,ReportLauncher.class.getName());
  if (cmbOutputFormat.getItemCount() > 0 && cmbOutputFormat.getSelectionIndex() != -1) {
    configuration.setAttribute(ATTR_TARGET_FORMAT,cmbOutputFormat.getItem(cmbOutputFormat.getSelectionIndex()));
  }
  configuration.setAttribute(ATTR_OPEN_TARGET,bOpenTarget.getSelection());
  configuration.setAttribute(ATTR_USE_DEFULT_ENGINE_HOME,bUseDefaultEngineHome.getSelection());
  int debugType=DEBUG_TYPE_ALL;
  if (bDebugJava.getSelection()) {
    debugType=DEBUG_TYPE_JAVA_CLASS;
  }
 else   if (bDebugScript.getSelection()) {
    debugType=DEBUG_TYPE_JAVA_SCRIPT;
  }
  int taskType=TASK_TYPE_RUN_AND_RENDER;
  if (bRunPlusRender.getSelection()) {
    taskType=TASK_TYPE_RUN_PLUS_RENDER;
  }
 else   if (bRun.getSelection()) {
    taskType=TASK_TYPE_RUN;
  }
 else   if (bRender.getSelection()) {
    taskType=TASK_TYPE_RENDER;
  }
  configuration.setAttribute(ATTR_DEBUG_TYPE,debugType);
  configuration.setAttribute(ATTR_TASK_TYPE,taskType);
  if (bUseDefaultEngineHome.getSelection()) {
    configuration.setAttribute(IReportLaunchConstants.ATTR_CLASSPATH,(List)null);
  }
 else {
    List list=new ArrayList();
    String libDirectory=getJarFolder();
    try {
      libDirectory=ScriptDebugUtil.getSubstitutedString(libDirectory);
    }
 catch (    CoreException e) {
      libDirectory=getJarFolder();
    }
    addEngineLibHomeClassPath(libDirectory,list);
    addProjectClassPath(list);
    configuration.setAttribute(IReportLaunchConstants.ATTR_CLASSPATH,list);
  }
}","public void performApply(ILaunchConfigurationWorkingCopy configuration){
  configuration.setAttribute(ATTR_REPORT_FILE_NAME,fMainText.getText());
  configuration.setAttribute(ATTR_ENGINE_HOME,fEngineHome.getText());
  configuration.setAttribute(ATTR_TEMP_FOLDER,fTempFolder.getText());
  configuration.setAttribute(IJavaLaunchConfigurationConstants.ATTR_MAIN_TYPE_NAME,ReportLauncher.class.getName());
  if (cmbOutputFormat.getItemCount() > 0 && cmbOutputFormat.getSelectionIndex() != -1) {
    configuration.setAttribute(ATTR_TARGET_FORMAT,cmbOutputFormat.getItem(cmbOutputFormat.getSelectionIndex()));
  }
  configuration.setAttribute(ATTR_OPEN_TARGET,bOpenTarget.getSelection());
  configuration.setAttribute(ATTR_USE_DEFULT_ENGINE_HOME,bUseDefaultEngineHome.getSelection());
  int debugType=DEFAULT_DEBUG_TYPE;
  if (bDebugJava.getSelection()) {
    debugType=DEBUG_TYPE_JAVA_CLASS;
  }
 else   if (bDebugScript.getSelection()) {
    debugType=DEBUG_TYPE_JAVA_SCRIPT;
  }
 else   if (bDebugAll.getSelection()) {
    debugType=DEBUG_TYPE_ALL;
  }
  int taskType=DEFAULT_TASK_TYPE;
  if (bRunAndRender.getSelection()) {
    taskType=TASK_TYPE_RUN_AND_RENDER;
  }
 else   if (bRunPlusRender.getSelection()) {
    taskType=TASK_TYPE_RUN_PLUS_RENDER;
  }
 else   if (bRun.getSelection()) {
    taskType=TASK_TYPE_RUN;
  }
 else   if (bRender.getSelection()) {
    taskType=TASK_TYPE_RENDER;
  }
  configuration.setAttribute(ATTR_DEBUG_TYPE,debugType);
  configuration.setAttribute(ATTR_TASK_TYPE,taskType);
  if (bUseDefaultEngineHome.getSelection()) {
    configuration.setAttribute(IReportLaunchConstants.ATTR_CLASSPATH,(List)null);
  }
 else {
    List list=new ArrayList();
    String libDirectory=getJarFolder();
    try {
      libDirectory=ScriptDebugUtil.getSubstitutedString(libDirectory);
    }
 catch (    CoreException e) {
      libDirectory=getJarFolder();
    }
    addEngineLibHomeClassPath(libDirectory,list);
    addProjectClassPath(list);
    configuration.setAttribute(IReportLaunchConstants.ATTR_CLASSPATH,list);
  }
}",0.8085758039816233
73684,"public void setDefaults(ILaunchConfigurationWorkingCopy configuration){
  configuration.setAttribute(ATTR_REPORT_FILE_NAME,getDefaultFileName());
  configuration.setAttribute(ATTR_ENGINE_HOME,""String_Node_Str"");
  configuration.setAttribute(ATTR_TEMP_FOLDER,getDefaultTempFolder());
  configuration.setAttribute(ATTR_OPEN_TARGET,false);
  configuration.setAttribute(ATTR_TARGET_FORMAT,DEFAULT_OUTPUT_FORMAT);
  configuration.setAttribute(ATTR_USE_DEFULT_ENGINE_HOME,true);
  configuration.setAttribute(ATTR_DEBUG_TYPE,DEBUG_TYPE_ALL);
  configuration.setAttribute(ATTR_TASK_TYPE,TASK_TYPE_RUN_AND_RENDER);
}","public void setDefaults(ILaunchConfigurationWorkingCopy configuration){
  configuration.setAttribute(ATTR_REPORT_FILE_NAME,getDefaultFileName());
  configuration.setAttribute(ATTR_ENGINE_HOME,""String_Node_Str"");
  configuration.setAttribute(ATTR_TEMP_FOLDER,getDefaultTempFolder());
  configuration.setAttribute(ATTR_OPEN_TARGET,false);
  configuration.setAttribute(ATTR_TARGET_FORMAT,DEFAULT_TARGET_FORMAT);
  configuration.setAttribute(ATTR_USE_DEFULT_ENGINE_HOME,true);
  configuration.setAttribute(ATTR_DEBUG_TYPE,DEFAULT_DEBUG_TYPE);
  configuration.setAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE);
}",0.962840627580512
73685,"/** 
 * Test disable some column binding on MemoryCache.
 * @throws Exception
 */
public void testMemoryCacheColumnBinding() throws Exception {
  incomprehensiveColumnBinding();
}","/** 
 * Test disable some column binding on MemoryCache.
 * @throws Exception
 */
public void testMemoryCacheColumnBinding() throws Exception {
  String initialStr=System.getProperty(""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  incomprehensiveColumnBinding();
  System.setProperty(""String_Node_Str"",initialStr == null ? ""String_Node_Str"" : initialStr);
}",0.6291739894551845
73686,"/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws DataException
 * @throws DataException
 */
protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList seriesDefinitions,GroupDefinition innerGroupDef,Map valueExprMap,SeriesDefinition baseSD) throws ChartException {
  for (Iterator iter=seriesDefinitions.iterator(); iter.hasNext(); ) {
    SeriesDefinition orthSD=(SeriesDefinition)iter.next();
    Series series=orthSD.getDesignTimeSeries();
    List qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    for (Iterator iter_datadef=series.getDataDefinition().iterator(); iter_datadef.hasNext(); ) {
      Query qry=(Query)iter_datadef.next();
      if (!qlist.contains(qry)) {
        continue;
      }
      String expr=qry.getDefinition();
      if (expr != null && !""String_Node_Str"".equals(expr)) {
        String aggName=ChartUtil.getAggregateFuncExpr(orthSD,baseSD);
        if (aggName != null && !""String_Node_Str"".equals(aggName)) {
          String name=generateUniqueBindingName(expr);
          Binding colBinding=new Binding(name);
          colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
          colBinding.setExpression(new ScriptExpression(expr));
          if (innerGroupDef != null) {
            try {
              colBinding.addAggregateOn(innerGroupDef.getName());
            }
 catch (            DataException e) {
              throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
            }
          }
          colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
          IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
          if (aFunc.getParametersCount() > 0) {
            Object[] parameters=getAggFunParameters(orthSD,baseSD);
            for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
              String param=(String)parameters[i];
              colBinding.addArgument(new ScriptExpression(param));
            }
          }
          String newExpr=getExpressionForEvaluator(name);
          qry.setDefinition(newExpr);
          try {
            query.addBinding(colBinding);
          }
 catch (          DataException e) {
            throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
          }
          valueExprMap.put(expr,newExpr);
        }
      }
    }
  }
}","/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws DataException
 * @throws DataException
 */
protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList seriesDefinitions,GroupDefinition innerGroupDef,Map valueExprMap,SeriesDefinition baseSD) throws ChartException {
  for (Iterator iter=seriesDefinitions.iterator(); iter.hasNext(); ) {
    SeriesDefinition orthSD=(SeriesDefinition)iter.next();
    Series series=orthSD.getDesignTimeSeries();
    List qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    for (Iterator iter_datadef=series.getDataDefinition().iterator(); iter_datadef.hasNext(); ) {
      Query qry=(Query)iter_datadef.next();
      if (!qlist.contains(qry)) {
        continue;
      }
      String expr=qry.getDefinition();
      if (expr != null && !""String_Node_Str"".equals(expr)) {
        String aggName=ChartUtil.getAggregateFuncExpr(orthSD,baseSD);
        if (aggName != null && !""String_Node_Str"".equals(aggName)) {
          String name=generateUniqueBindingName(expr);
          Binding colBinding=new Binding(name);
          colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
          colBinding.setExpression(new ScriptExpression(expr));
          if (innerGroupDef != null) {
            try {
              colBinding.addAggregateOn(innerGroupDef.getName());
            }
 catch (            DataException e) {
              throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
            }
          }
          colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
          IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
          if (aFunc.getParametersCount() > 0) {
            Object[] parameters=getAggFunParameters(orthSD,baseSD);
            for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
              String param=(String)parameters[i];
              colBinding.addArgument(new ScriptExpression(param));
            }
          }
          String newExpr=getExpressionForEvaluator(name);
          updateQueryDefinitionForSortOnAggregateExpression(qry,name,newExpr);
          try {
            query.addBinding(colBinding);
          }
 catch (          DataException e) {
            throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
          }
          valueExprMap.put(expr,new String[]{name,newExpr});
        }
      }
    }
  }
}",0.9785229841748304
73687,"/** 
 * @param expression
 * @return
 */
protected String getExpressionForEvaluator(String expression){
  return expression;
}","/** 
 * @param expression
 * @return
 */
protected String getExpressionForEvaluator(String expression){
  return ExpressionUtil.createJSRowExpression(expression);
}",0.8689655172413793
73688,"/** 
 * @param query
 * @param categorySD
 * @param categoryGroupDefinition
 * @param valueExprMap
 */
private void bindSortOnCategorySeries(BaseQueryDefinition query,SeriesDefinition categorySD,GroupDefinition categoryGroupDefinition,Map valueExprMap){
  String baseSortExpr=getValidSortExpr(categorySD);
  if (categorySD.isSetSorting() && baseSortExpr != null) {
    if (ChartReportItemUtil.isBaseGroupingDefined(categorySD)) {
      String baseExpr=((Query)categorySD.getDesignTimeSeries().getDataDefinition().get(0)).getDefinition();
      if (baseExpr.equals(getValidSortExpr(categorySD))) {
        categoryGroupDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(categorySD.getSorting()));
      }
 else {
        SortDefinition sd=new SortDefinition();
        sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(categorySD.getSorting()));
        String newValueSeriesExpr=(String)valueExprMap.get(baseSortExpr);
        if (newValueSeriesExpr != null) {
          categorySD.getSortKey().setDefinition(newValueSeriesExpr);
          sd.setExpression(newValueSeriesExpr);
        }
 else {
          sd.setExpression(baseSortExpr);
        }
        categoryGroupDefinition.addSort(sd);
      }
    }
 else {
      SortDefinition sd=new SortDefinition();
      sd.setExpression(baseSortExpr);
      sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(categorySD.getSorting()));
      query.addSort(sd);
    }
  }
}","/** 
 * @param query
 * @param categorySD
 * @param categoryGroupDefinition
 * @param valueExprMap
 */
private void bindSortOnCategorySeries(BaseQueryDefinition query,SeriesDefinition categorySD,GroupDefinition categoryGroupDefinition,Map valueExprMap){
  String baseSortExpr=getValidSortExpr(categorySD);
  if (categorySD.isSetSorting() && baseSortExpr != null) {
    if (ChartReportItemUtil.isBaseGroupingDefined(categorySD)) {
      String baseExpr=((Query)categorySD.getDesignTimeSeries().getDataDefinition().get(0)).getDefinition();
      if (baseExpr.equals(getValidSortExpr(categorySD))) {
        categoryGroupDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(categorySD.getSorting()));
      }
 else {
        SortDefinition sd=new SortDefinition();
        sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(categorySD.getSorting()));
        String[] nameNewExprArray=(String[])valueExprMap.get(baseSortExpr);
        if (nameNewExprArray != null && nameNewExprArray.length == 2) {
          updateQueryDefinitionForSortOnAggregateExpression(categorySD.getSortKey(),nameNewExprArray[0],nameNewExprArray[1]);
          sd.setExpression(nameNewExprArray[1]);
        }
 else {
          sd.setExpression(baseSortExpr);
        }
        categoryGroupDefinition.addSort(sd);
      }
    }
 else {
      SortDefinition sd=new SortDefinition();
      sd.setExpression(baseSortExpr);
      sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(categorySD.getSorting()));
      query.addSort(sd);
    }
  }
}",0.9189723320158104
73689,"/** 
 * Create Y grouping definition.
 * @param orthSD
 * @return
 */
private GroupDefinition createOrthogonalGroupingDefinition(SeriesDefinition orthSD){
  if (ChartReportItemUtil.isYGroupingDefined(orthSD)) {
    DataType dataType=null;
    GroupingUnitType groupUnit=null;
    double groupIntervalRange=0;
    String yGroupExpr=orthSD.getQuery().getDefinition();
    if (orthSD.getGrouping() != null && orthSD.getGrouping().isSetGroupType()) {
      dataType=orthSD.getGrouping().getGroupType();
      groupUnit=orthSD.getGrouping().getGroupingUnit();
      groupIntervalRange=orthSD.getGrouping().getGroupingInterval();
    }
    String name=generateUniqueBindingName(yGroupExpr);
    GroupDefinition yGroupDefinition=new GroupDefinition(name);
    yGroupDefinition.setKeyExpression(yGroupExpr);
    yGroupDefinition.setInterval(ChartReportItemUtil.convertToDtEGroupUnit(dataType,groupUnit,groupIntervalRange));
    yGroupDefinition.setIntervalRange(ChartReportItemUtil.convertToDtEIntervalRange(dataType,groupUnit,groupIntervalRange));
    if (orthSD.isSetSorting()) {
      yGroupDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(orthSD.getSorting()));
    }
    return yGroupDefinition;
  }
  return null;
}","/** 
 * Create Y grouping definition.
 * @param orthSD
 * @return
 */
private GroupDefinition createOrthogonalGroupingDefinition(SeriesDefinition orthSD){
  if (ChartReportItemUtil.isYGroupingDefined(orthSD)) {
    DataType dataType=null;
    GroupingUnitType groupUnit=null;
    double groupIntervalRange=0;
    String yGroupExpr=orthSD.getQuery().getDefinition();
    SeriesGrouping yGroupingInterval=orthSD.getQuery().getGrouping();
    if (yGroupingInterval != null && yGroupingInterval.isSetGroupType()) {
      dataType=yGroupingInterval.getGroupType();
      groupUnit=yGroupingInterval.getGroupingUnit();
      groupIntervalRange=yGroupingInterval.getGroupingInterval();
    }
    String name=generateUniqueBindingName(yGroupExpr);
    GroupDefinition yGroupDefinition=new GroupDefinition(name);
    yGroupDefinition.setKeyExpression(yGroupExpr);
    yGroupDefinition.setInterval(ChartReportItemUtil.convertToDtEGroupUnit(dataType,groupUnit,groupIntervalRange));
    yGroupDefinition.setIntervalRange(ChartReportItemUtil.convertToDtEIntervalRange(dataType,groupUnit,groupIntervalRange));
    if (orthSD.isSetSorting()) {
      yGroupDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(orthSD.getSorting()));
    }
    return yGroupDefinition;
  }
  return null;
}",0.9039905175819836
73690,"/** 
 * Convert interval range from Chart's to DtE's.
 * @param dataType
 * @param groupUnitType
 * @param intervalRange
 * @since BIRT 2.3
 */
public static double convertToDtEIntervalRange(DataType dataType,GroupingUnitType groupUnitType,double intervalRange){
  double range=intervalRange;
  if (Double.isNaN(intervalRange)) {
    range=0;
  }
  if (dataType == DataType.DATE_TIME_LITERAL && range <= 0) {
    range=1;
  }
 else   if (dataType == DataType.TEXT_LITERAL) {
    if (groupUnitType == GroupingUnitType.STRING_LITERAL) {
      if (range >= 1) {
        return (long)(range + 1);
      }
    }
    return (long)range;
  }
  return range;
}","/** 
 * Convert interval range from Chart's to DtE's.
 * @param dataType
 * @param groupUnitType
 * @param intervalRange
 * @since BIRT 2.3
 */
public static double convertToDtEIntervalRange(DataType dataType,GroupingUnitType groupUnitType,double intervalRange){
  double range=intervalRange;
  if (Double.isNaN(intervalRange)) {
    range=0;
  }
  if (dataType == DataType.DATE_TIME_LITERAL && range <= 0) {
    range=1;
  }
 else   if (dataType == DataType.TEXT_LITERAL) {
    return (long)range;
  }
  return range;
}",0.8378839590443686
73691,"/** 
 * @throws BirtException
 * @throws DataException
 * @throws IOException
 */
private void incomprehensiveColumnBinding() throws BirtException, DataException, IOException {
  this.GEN_add_group=true;
  this.GEN_add_subquery=true;
  this.GEN_print=true;
  this.USE_DATE_IN_COLUMNBINDING=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=1;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=false;
  this.preBasicIV();
  this.checkOutputFile();
}","/** 
 * @throws BirtException
 * @throws DataException
 * @throws IOException
 */
private void incomprehensiveColumnBinding() throws BirtException, DataException, IOException {
  this.GEN_add_group=true;
  this.GEN_add_subquery=true;
  this.GEN_print=true;
  this.USE_DATE_IN_COLUMNBINDING=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_same_group=true;
  this.UPDATE_add_subquery=1;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  myPreDataEngine.shutdown();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_execute_query=false;
  this.preBasicIV();
  this.checkOutputFile();
  myPreDataEngine.shutdown();
}",0.966996699669967
73692,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_SCALE);
  Composite cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(4,false);
    glContent.marginHeight=10;
    glContent.marginWidth=10;
    glContent.horizontalSpacing=5;
    glContent.verticalSpacing=10;
    cmpContent.setLayout(glContent);
  }
  Group grpScale=new Group(cmpContent,SWT.NONE);
{
    GridData gdGRPScale=new GridData(GridData.FILL_BOTH);
    gdGRPScale.horizontalSpan=4;
    grpScale.setLayoutData(gdGRPScale);
    GridLayout glScale=new GridLayout();
    glScale.numColumns=4;
    glScale.horizontalSpacing=5;
    glScale.verticalSpacing=5;
    glScale.marginHeight=2;
    glScale.marginWidth=7;
    grpScale.setLayout(glScale);
    grpScale.setText(Messages.getString(""String_Node_Str""));
  }
  btnStepAuto=new Button(grpScale,SWT.RADIO);
{
    GridData gd=new GridData();
    gd.horizontalSpan=4;
    btnStepAuto.setLayoutData(gd);
    btnStepAuto.setText(Messages.getString(""String_Node_Str""));
    btnStepAuto.addListener(SWT.Selection,this);
  }
  btnStepSize=new Button(grpScale,SWT.RADIO);
{
    btnStepSize.setText(Messages.getString(""String_Node_Str""));
    btnStepSize.addListener(SWT.Selection,this);
  }
  txtStepSize=new TextEditorComposite(grpScale,SWT.BORDER | SWT.SINGLE,TextEditorComposite.TYPE_NUMBERIC);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=100;
    txtStepSize.setLayoutData(gd);
    String str=""String_Node_Str"";
    if (getScale().isSetStep()) {
      str=String.valueOf(getScale().getStep());
    }
    txtStepSize.setText(str);
    txtStepSize.addListener(this);
    txtStepSize.addListener(SWT.Modify,this);
    txtStepSize.setDefaultValue(""String_Node_Str"");
  }
  lblUnit=new Label(grpScale,SWT.NONE);
{
    lblUnit.setText(Messages.getString(""String_Node_Str""));
  }
  cmbScaleUnit=new Combo(grpScale,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gdCMBScaleUnit=new GridData(GridData.FILL_HORIZONTAL);
    cmbScaleUnit.setLayoutData(gdCMBScaleUnit);
    cmbScaleUnit.addListener(SWT.Selection,this);
    NameSet ns=LiteralHelper.scaleUnitTypeSet;
    cmbScaleUnit.setItems(ns.getDisplayNames());
    cmbScaleUnit.select(ns.getSafeNameIndex(getScale().getUnit().getName()));
  }
  btnStepNumber=new Button(grpScale,SWT.RADIO);
{
    btnStepNumber.setText(Messages.getString(""String_Node_Str""));
    btnStepNumber.addListener(SWT.Selection,this);
  }
  spnStepNumber=new Spinner(grpScale,SWT.BORDER);
{
    spnStepNumber.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    spnStepNumber.setMinimum(1);
    spnStepNumber.setMaximum(100);
    spnStepNumber.setSelection(getScale().getStepNumber());
    spnStepNumber.addListener(SWT.Selection,this);
  }
  new Label(grpScale,SWT.NONE);
  new Label(grpScale,SWT.NONE);
  lblMin=new Label(cmpContent,SWT.NONE);
  lblMin.setText(Messages.getString(""String_Node_Str""));
  txtScaleMin=createValuePicker(cmpContent,getScale().getMin());
  lblMax=new Label(cmpContent,SWT.NONE);
  lblMax.setText(Messages.getString(""String_Node_Str""));
  txtScaleMax=createValuePicker(cmpContent,getScale().getMax());
  btnShowOutside=new Button(cmpContent,SWT.CHECK);
{
    GridData gd=new GridData();
    gd.horizontalSpan=4;
    btnShowOutside.setLayoutData(gd);
    btnShowOutside.setText(Messages.getString(""String_Node_Str""));
    btnShowOutside.setSelection(getScale().isShowOutside());
    btnShowOutside.addListener(SWT.Selection,this);
    btnShowOutside.setVisible(getValueType() == TextEditorComposite.TYPE_NUMBERIC);
  }
  btnStepSize.setSelection(getScale().isSetStep());
  if (!btnStepSize.getSelection()) {
    if (getValueType() != TextEditorComposite.TYPE_NUMBERIC) {
      btnStepAuto.setSelection(true);
    }
 else {
      btnStepNumber.setSelection(getScale().isSetStepNumber());
      btnStepAuto.setSelection(!getScale().isSetStep() && !getScale().isSetStepNumber());
    }
  }
  setState();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_SCALE);
  Composite cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(4,false);
    glContent.marginHeight=10;
    glContent.marginWidth=10;
    glContent.horizontalSpacing=5;
    glContent.verticalSpacing=10;
    cmpContent.setLayout(glContent);
  }
  Group grpScale=new Group(cmpContent,SWT.NONE);
{
    GridData gdGRPScale=new GridData(GridData.FILL_BOTH);
    gdGRPScale.horizontalSpan=4;
    grpScale.setLayoutData(gdGRPScale);
    GridLayout glScale=new GridLayout();
    glScale.numColumns=4;
    glScale.horizontalSpacing=5;
    glScale.verticalSpacing=5;
    glScale.marginHeight=2;
    glScale.marginWidth=7;
    grpScale.setLayout(glScale);
    grpScale.setText(Messages.getString(""String_Node_Str""));
  }
  btnStepAuto=new Button(grpScale,SWT.RADIO);
{
    GridData gd=new GridData();
    gd.horizontalSpan=4;
    btnStepAuto.setLayoutData(gd);
    btnStepAuto.setText(Messages.getString(""String_Node_Str""));
    btnStepAuto.addListener(SWT.Selection,this);
  }
  btnStepSize=new Button(grpScale,SWT.RADIO);
{
    btnStepSize.setText(Messages.getString(""String_Node_Str""));
    btnStepSize.addListener(SWT.Selection,this);
  }
  txtStepSize=new TextEditorComposite(grpScale,SWT.BORDER | SWT.SINGLE,TextEditorComposite.TYPE_NUMBERIC);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=100;
    txtStepSize.setLayoutData(gd);
    String str=""String_Node_Str"";
    if (getScale().isSetStep()) {
      str=String.valueOf(getScale().getStep());
    }
    txtStepSize.setText(str);
    txtStepSize.addListener(this);
    txtStepSize.addListener(SWT.Modify,this);
    txtStepSize.setDefaultValue(""String_Node_Str"");
  }
  lblUnit=new Label(grpScale,SWT.NONE);
{
    lblUnit.setText(Messages.getString(""String_Node_Str""));
  }
  cmbScaleUnit=new Combo(grpScale,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gdCMBScaleUnit=new GridData(GridData.FILL_HORIZONTAL);
    cmbScaleUnit.setLayoutData(gdCMBScaleUnit);
    cmbScaleUnit.addListener(SWT.Selection,this);
    NameSet ns=LiteralHelper.scaleUnitTypeSet;
    cmbScaleUnit.setItems(ns.getDisplayNames());
    cmbScaleUnit.select(ns.getSafeNameIndex(getScale().getUnit().getName()));
  }
  btnStepNumber=new Button(grpScale,SWT.RADIO);
{
    btnStepNumber.setText(Messages.getString(""String_Node_Str""));
    btnStepNumber.addListener(SWT.Selection,this);
  }
  spnStepNumber=new Spinner(grpScale,SWT.BORDER);
{
    spnStepNumber.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    spnStepNumber.setMinimum(1);
    spnStepNumber.setMaximum(100);
    spnStepNumber.setSelection(getScale().getStepNumber());
    spnStepNumber.addListener(SWT.Selection,this);
  }
  new Label(grpScale,SWT.NONE);
  new Label(grpScale,SWT.NONE);
  lblMin=new Label(cmpContent,SWT.NONE);
  lblMin.setText(Messages.getString(""String_Node_Str""));
  txtScaleMin=createValuePicker(cmpContent,getScale().getMin());
  lblMax=new Label(cmpContent,SWT.NONE);
  lblMax.setText(Messages.getString(""String_Node_Str""));
  txtScaleMax=createValuePicker(cmpContent,getScale().getMax());
  btnShowOutside=new Button(cmpContent,SWT.CHECK);
{
    GridData gd=new GridData();
    gd.horizontalSpan=4;
    btnShowOutside.setLayoutData(gd);
    btnShowOutside.setText(Messages.getString(""String_Node_Str""));
    btnShowOutside.setSelection(getScale().isShowOutside());
    btnShowOutside.addListener(SWT.Selection,this);
    btnShowOutside.setVisible(getValueType() == TextEditorComposite.TYPE_NUMBERIC);
  }
  btnStepSize.setSelection(getScale().isSetStep());
  if (!btnStepSize.getSelection()) {
    if (getValueType() != TextEditorComposite.TYPE_NUMBERIC) {
      btnStepAuto.setSelection(true);
    }
 else {
      btnStepNumber.setSelection(getScale().isSetStepNumber());
      btnStepAuto.setSelection(!getScale().isSetStep() && !getScale().isSetStepNumber());
    }
  }
  setState();
  if (getValueType() == TextEditorComposite.TYPE_DATETIME) {
    parent.getShell().addListener(SWT.Close,new Listener(){
      public void handleEvent(      Event event){
        if (event.type == SWT.Close) {
          DataElement data=txtScaleMin.getDataElement();
          if (data == null) {
            getScale().eUnset(ComponentPackage.eINSTANCE.getScale_Min());
          }
 else {
            getScale().setMin(data);
          }
          data=txtScaleMax.getDataElement();
          if (data == null) {
            getScale().eUnset(ComponentPackage.eINSTANCE.getScale_Max());
          }
 else {
            getScale().setMax(data);
          }
          setState();
        }
      }
    }
);
  }
  return cmpContent;
}",0.9145740167411994
73693,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  boolean isDesigner=false;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
  imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String rootPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_ROOT_PATH + ""String_Node_Str"";
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=rootPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxRowLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_ROWLEVELS);
  try {
    maxCubeRowLevels=Integer.valueOf(s_maxRowLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeRowLevels=-1;
  }
  String s_maxColumnLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_COLUMNLEVELS);
  try {
    maxCubeColumnLevels=Integer.valueOf(s_maxColumnLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeColumnLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  birtResourceFolder=processRealPath(context,context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH),null,false);
  String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=false;
  clearTempFiles();
  isInitContext=true;
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  boolean isDesigner=false;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
 else   initImageFolder+=File.separator + IBirtConstants.SUB_IMAGE_FOLDER;
  imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String rootPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_ROOT_PATH + ""String_Node_Str"";
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=rootPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxRowLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_ROWLEVELS);
  try {
    maxCubeRowLevels=Integer.valueOf(s_maxRowLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeRowLevels=-1;
  }
  String s_maxColumnLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_COLUMNLEVELS);
  try {
    maxCubeColumnLevels=Integer.valueOf(s_maxColumnLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeColumnLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  birtResourceFolder=processRealPath(context,context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH),null,false);
  String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=false;
  clearTempFiles();
  isInitContext=true;
}",0.9916915918909937
73694,"public IPreparedQuery getPreparedQuery(){
  return null;
}","public IPreparedQuery getPreparedQuery(){
  return this.pQuery;
}",0.8943089430894309
73695,"/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CachedQueryResults(String tempDir,String queryResultID) throws DataException {
  Object[] params={tempDir,queryResultID};
  logger.entering(CachedQueryResults.class.getName(),""String_Node_Str"",params);
  this.queryResultID=queryResultID;
  this.resultIterator=new CacheResultIterator(tempDir,this);
  logger.exiting(CachedQueryResults.class.getName(),""String_Node_Str"");
}","/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CachedQueryResults(String tempDir,String queryResultID,IPreparedQuery preparedQuery) throws DataException {
  Object[] params={tempDir,queryResultID};
  logger.entering(CachedQueryResults.class.getName(),""String_Node_Str"",params);
  this.queryResultID=queryResultID;
  this.resultIterator=new CacheResultIterator(tempDir,this);
  this.pQuery=preparedQuery;
  logger.exiting(CachedQueryResults.class.getName(),""String_Node_Str"");
}",0.9400826446280992
73696,"public IQueryResults getQueryResults(String queryResultID) throws DataException {
  if (context.getMode() == DataEngineContext.MODE_PRESENTATION) {
    return new QueryResults(this.session.getTempDir(),this.context,queryResultID);
  }
  if (context.getMode() == DataEngineContext.MODE_GENERATION || context.getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    return new CachedQueryResults(session.getTempDir(),queryResultID);
  }
  return null;
}","public IQueryResults getQueryResults(String queryResultID) throws DataException {
  if (context.getMode() == DataEngineContext.MODE_PRESENTATION) {
    return new QueryResults(this.session.getTempDir(),this.context,queryResultID);
  }
  if (context.getMode() == DataEngineContext.MODE_GENERATION || context.getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    return new CachedQueryResults(session.getTempDir(),queryResultID,null);
  }
  return null;
}",0.9944994499449944
73697,"public IQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  try {
    if (context == null)     return new CachedQueryResults(tempDir,this.queryDefn.getQueryResultsID());
 else     return new QueryResults(this.tempDir,this.context,this.queryDefn.getQueryResultsID(),outerResults);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","public IQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  try {
    if (context == null)     return new CachedQueryResults(tempDir,this.queryDefn.getQueryResultsID(),this);
 else     return new QueryResults(this.tempDir,this.context,this.queryDefn.getQueryResultsID(),outerResults);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9936948297604036
73698,"/** 
 * @param iterator
 * @param keyColumnNames
 * @param measureColumnNames
 * @param stopSign
 * @return
 * @throws BirtException
 * @throws IOException
 */
private static DiskSortedStack getSortedFactTableRows(IDatasetIterator iterator,String[][] keyColumnNames,String[] measureColumnNames,StopSign stopSign) throws BirtException, IOException {
  DiskSortedStack result=new DiskSortedStack(Constants.FACT_TABLE_BUFFER_SIZE,true,false,FactTableRow.getCreator());
  int[][] levelKeyColumnIndex=new int[keyColumnNames.length][];
  int[] measureColumnIndex=new int[measureColumnNames.length];
  for (int i=0; i < keyColumnNames.length; i++) {
    levelKeyColumnIndex[i]=new int[keyColumnNames[i].length];
    for (int j=0; j < keyColumnNames[i].length; j++) {
      levelKeyColumnIndex[i][j]=iterator.getFieldIndex(keyColumnNames[i][j]);
    }
  }
  for (int i=0; i < measureColumnIndex.length; i++) {
    measureColumnIndex[i]=iterator.getFieldIndex(measureColumnNames[i]);
  }
  while (iterator.next() && !stopSign.isStopped()) {
    FactTableRow factTableRow=new FactTableRow();
    DimensionKey[] dimensionKeys=new DimensionKey[levelKeyColumnIndex.length];
    for (int i=0; i < levelKeyColumnIndex.length; i++) {
      dimensionKeys[i]=new DimensionKey(levelKeyColumnIndex[i].length);
      for (int j=0; j < levelKeyColumnIndex[i].length; j++) {
        if (levelKeyColumnIndex[i][j] >= 0)         dimensionKeys[i].getKeyValues()[j]=iterator.getValue(levelKeyColumnIndex[i][j]);
      }
    }
    factTableRow.setDimensionKeys(dimensionKeys);
    Object[] measures=new Object[measureColumnIndex.length];
    for (int i=0; i < measureColumnIndex.length; i++) {
      measures[i]=iterator.getValue(measureColumnIndex[i]);
      if (measures[i] == null) {
        factTableRow.setMeasures(measures);
        throw new DataException(ResourceConstants.FACTTABLE_NULL_MEASURE_VALUE,factTableRow.toString());
      }
    }
    factTableRow.setMeasures(measures);
    result.push(factTableRow);
  }
  return result;
}","/** 
 * @param iterator
 * @param keyColumnNames
 * @param measureColumnNames
 * @param stopSign
 * @return
 * @throws BirtException
 * @throws IOException
 */
private static DiskSortedStack getSortedFactTableRows(IDatasetIterator iterator,String[][] keyColumnNames,String[] measureColumnNames,StopSign stopSign) throws BirtException, IOException {
  DiskSortedStack result=new DiskSortedStack(Constants.FACT_TABLE_BUFFER_SIZE,true,false,FactTableRow.getCreator());
  int[][] levelKeyColumnIndex=new int[keyColumnNames.length][];
  int[] measureColumnIndex=new int[measureColumnNames.length];
  for (int i=0; i < keyColumnNames.length; i++) {
    levelKeyColumnIndex[i]=new int[keyColumnNames[i].length];
    for (int j=0; j < keyColumnNames[i].length; j++) {
      levelKeyColumnIndex[i][j]=iterator.getFieldIndex(keyColumnNames[i][j]);
    }
  }
  for (int i=0; i < measureColumnIndex.length; i++) {
    measureColumnIndex[i]=iterator.getFieldIndex(measureColumnNames[i]);
  }
  while (iterator.next() && !stopSign.isStopped()) {
    FactTableRow factTableRow=new FactTableRow();
    DimensionKey[] dimensionKeys=new DimensionKey[levelKeyColumnIndex.length];
    for (int i=0; i < levelKeyColumnIndex.length; i++) {
      dimensionKeys[i]=new DimensionKey(levelKeyColumnIndex[i].length);
      for (int j=0; j < levelKeyColumnIndex[i].length; j++) {
        if (levelKeyColumnIndex[i][j] >= 0)         dimensionKeys[i].getKeyValues()[j]=iterator.getValue(levelKeyColumnIndex[i][j]);
      }
    }
    factTableRow.setDimensionKeys(dimensionKeys);
    Object[] measures=new Object[measureColumnIndex.length];
    for (int i=0; i < measureColumnIndex.length; i++) {
      measures[i]=iterator.getValue(measureColumnIndex[i]);
    }
    factTableRow.setMeasures(measures);
    result.push(factTableRow);
  }
  return result;
}",0.9114583333333334
73699,"/** 
 * Constructor.
 * @param columnMetas
 */
ResultMeta(List columnMetas){
  this.columnMetaMap=new HashMap();
  this.indexMap=new HashMap();
  this.nullValueReplacer=new Object[columnMetas.size()];
  for (int i=0; i < columnMetas.size(); i++) {
    ColumnMeta columnMeta=(ColumnMeta)columnMetas.get(i);
    columnMeta.setIndex(i + 1);
    this.columnMetaMap.put(columnMeta.getName(),columnMeta);
    this.indexMap.put(new Integer(i + 1),columnMeta);
    if (columnMeta.isLevelKey() || columnMeta.isMeasure()) {
      this.nullValueReplacer[i]=createNullValueReplacer(columnMeta.getType());
    }
  }
}","/** 
 * Constructor.
 * @param columnMetas
 */
ResultMeta(List columnMetas){
  this.columnMetaMap=new HashMap();
  this.indexMap=new HashMap();
  this.nullValueReplacer=new Object[columnMetas.size()];
  for (int i=0; i < columnMetas.size(); i++) {
    ColumnMeta columnMeta=(ColumnMeta)columnMetas.get(i);
    columnMeta.setIndex(i + 1);
    this.columnMetaMap.put(columnMeta.getName(),columnMeta);
    this.indexMap.put(new Integer(i + 1),columnMeta);
    if (columnMeta.isLevelKey()) {
      this.nullValueReplacer[i]=createNullValueReplacer(columnMeta.getType());
    }
  }
}",0.9780033840947546
73700,"/** 
 * @param report
 * @param appContext
 */
protected void doPrepareQuery(Report report,Map appContext){
  this.appContext=appContext;
  List queries=report.getQueries();
  for (int i=0; i < queries.size(); i++) {
    IDataQueryDefinition query=(IDataQueryDefinition)queries.get(i);
    try {
      IBasePreparedQuery preparedQuery=dteSession.prepare(query,appContext);
      queryMap.put(query,preparedQuery);
    }
 catch (    BirtException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
      context.addException(report.getReportDesign(),e);
    }
  }
}","/** 
 * @param report
 * @param appContext
 */
protected void doPrepareQuery(Report report,Map appContext){
  this.appContext=appContext;
  List queries=report.getQueries();
  int queriesSize=queries.size();
  IDataQueryDefinition[] queryArray=new IDataQueryDefinition[queriesSize];
  for (int index=0; index < queriesSize; index++) {
    queryArray[index]=(IDataQueryDefinition)queries.get(index);
  }
  try {
    this.dteSession.registerQueries(queryArray);
  }
 catch (  AdapterException ae) {
    logger.log(Level.SEVERE,ae.getMessage(),ae);
    context.addException(report.getReportDesign(),ae);
  }
  for (int index=0; index < queriesSize; index++) {
    try {
      IBasePreparedQuery preparedQuery=dteSession.prepare(queryArray[index],appContext);
      queryMap.put(queryArray[index],preparedQuery);
    }
 catch (    BirtException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
      context.addException(report.getReportDesign(),e);
    }
  }
}",0.4368868541530412
73701,"protected void setUp() throws Exception {
  super.setUp();
  testObject=new Object[]{new Integer(1),new Integer(0),BigDecimal.valueOf(Integer.MAX_VALUE),BigDecimal.valueOf(Integer.MAX_VALUE + 1),BigDecimal.valueOf(Integer.MIN_VALUE),BigDecimal.valueOf(Integer.MIN_VALUE - 1),BigDecimal.valueOf(0l),Boolean.valueOf(true),Boolean.valueOf(false),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),Double.valueOf(""String_Node_Str""),Double.valueOf(""String_Node_Str""),null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueInputObject=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),String.valueOf(0l),""String_Node_Str"",""String_Node_Str"",((new GregorianCalendar(2004 + 1900,1,1)).getTime()).toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  resultDate=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),null,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultInteger=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),new Integer(1),new Integer(0),new Integer((int)((Date)resultDate[9]).getTime()),new Integer((int)1.1),new Integer(0),null,new Exception(""String_Node_Str""),new Integer(""String_Node_Str""),new Integer(10),new Integer(10),new Integer(10)};
  resultBigDecimal=new Object[]{new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(Integer.MAX_VALUE),new BigDecimal(Integer.MAX_VALUE + 1),new BigDecimal(Integer.MIN_VALUE),new BigDecimal(Integer.MIN_VALUE - 1),new BigDecimal(0),new BigDecimal(1),new BigDecimal(0),new BigDecimal(((Date)resultDate[9]).getTime()),new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),null,new Exception(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(10),new BigDecimal(10),new BigDecimal(10)};
  resultBoolean=new Object[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultDouble=new Object[]{new Double(1),new Double(0),new Double(Integer.MAX_VALUE),new Double(Integer.MAX_VALUE + 1),new Double(Integer.MIN_VALUE),new Double(Integer.MIN_VALUE - 1),new Double(0),new Double(1),new Double(0),new Double(((Date)resultDate[9]).getTime()),new Double(1.1),new Double(0),null,new Exception(""String_Node_Str""),new Double(""String_Node_Str""),new Double(10),new Double(10),new Double(10)};
  resultString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",df.format(resultDate[9]),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  testObjectDecimal=new Object[]{new Double(Double.NaN),new Double(Double.POSITIVE_INFINITY),new Double(Double.NEGATIVE_INFINITY),new Double(Double.MAX_VALUE),new Double(Double.MIN_VALUE)};
  resultObjectDecimal=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new BigDecimal(new Double(Double.MAX_VALUE).toString()),new BigDecimal(new Double(Double.MIN_VALUE).toString())};
  testObjectDouble=new Object[]{new Float(1)};
  resultObjectDouble=new Object[]{new Double(1)};
}","protected void setUp() throws Exception {
  super.setUp();
  testObject=new Object[]{new Integer(1),new Integer(0),BigDecimal.valueOf(Integer.MAX_VALUE),BigDecimal.valueOf(Integer.MAX_VALUE + 1),BigDecimal.valueOf(Integer.MIN_VALUE),BigDecimal.valueOf(Integer.MIN_VALUE - 1),BigDecimal.valueOf(0l),Boolean.valueOf(true),Boolean.valueOf(false),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),Double.valueOf(""String_Node_Str""),Double.valueOf(""String_Node_Str""),null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueInputObject=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),String.valueOf(0l),""String_Node_Str"",""String_Node_Str"",((new GregorianCalendar(2004 + 1900,1,1)).getTime()).toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  resultDate=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),null,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultInteger=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),new Integer(1),new Integer(0),new Integer((int)((Date)resultDate[9]).getTime()),new Integer((int)1.1),new Integer(0),null,new Exception(""String_Node_Str""),new Integer(""String_Node_Str""),new Integer(10),new Integer(10),new Integer(10)};
  resultBigDecimal=new Object[]{new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(Integer.MAX_VALUE),new BigDecimal(Integer.MAX_VALUE + 1),new BigDecimal(Integer.MIN_VALUE),new BigDecimal(Integer.MIN_VALUE - 1),new BigDecimal(0),new BigDecimal(1),new BigDecimal(0),new BigDecimal(((Date)resultDate[9]).getTime()),new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),null,new Exception(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(10),new BigDecimal(10),new BigDecimal(10)};
  resultBoolean=new Object[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,Boolean.FALSE,null,new Exception(""String_Node_Str""),Boolean.TRUE,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultDouble=new Object[]{new Double(1),new Double(0),new Double(Integer.MAX_VALUE),new Double(Integer.MAX_VALUE + 1),new Double(Integer.MIN_VALUE),new Double(Integer.MIN_VALUE - 1),new Double(0),new Double(1),new Double(0),new Double(((Date)resultDate[9]).getTime()),new Double(1.1),new Double(0),null,new Exception(""String_Node_Str""),new Double(""String_Node_Str""),new Double(10),new Double(10),new Double(10)};
  resultString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",df.format(resultDate[9]),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  testObjectDecimal=new Object[]{new Double(Double.NaN),new Double(Double.POSITIVE_INFINITY),new Double(Double.NEGATIVE_INFINITY),new Double(Double.MAX_VALUE),new Double(Double.MIN_VALUE)};
  resultObjectDecimal=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new BigDecimal(new Double(Double.MAX_VALUE).toString()),new BigDecimal(new Double(Double.MIN_VALUE).toString())};
  testObjectDouble=new Object[]{new Float(1)};
  resultObjectDouble=new Object[]{new Double(1)};
}",0.9982988091664164
73702,"public void testAddHour() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2005,10,22);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(2006,10,5);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1795,10,15,10,0,0);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1970,0,22,0,0,0);
  Date d4=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3,d4};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}","public void testAddHour() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2005,10,22);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(2006,10,5);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1795,10,15,10,0,0);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1970,0,22,0,0,0);
  c.clear();
  Date[] values=new Date[]{d1,d2,d3,null};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}",0.9651593773165308
73703,"/** 
 * new a EngineConfig and config it with user's setting
 */
protected EngineConfig createEngineConfig(){
  EngineConfig config=new EngineConfig();
  String resourcePath=(String)params.get(""String_Node_Str"");
  if (resourcePath != null)   config.setResourcePath(resourcePath.trim());
  String tempDir=(String)params.get(""String_Node_Str"");
  if (tempDir != null)   config.setTempDir(tempDir.trim());
  String logDir=(String)params.get(""String_Node_Str"");
  String logLevel=(String)params.get(""String_Node_Str"");
  Level level=null;
  if (logLevel != null) {
    logLevel=logLevel.trim();
    if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.ALL;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.CONFIG;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.FINE;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.FINER;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.FINEST;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.INFO;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.OFF;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.SEVERE;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.WARNING;
    }
  }
  String logD=(logDir == null) ? config.getLogDirectory() : logDir;
  Level logL=(level == null) ? config.getLogLevel() : level;
  config.setLogConfig(logD,logL);
  return config;
}","/** 
 * new a EngineConfig and config it with user's setting
 */
protected EngineConfig createEngineConfig(){
  EngineConfig config=new EngineConfig();
  String resourcePath=(String)params.get(""String_Node_Str"");
  if (resourcePath != null)   config.setResourcePath(resourcePath.trim());
  String tempDir=(String)params.get(""String_Node_Str"");
  if (tempDir != null)   config.setTempDir(tempDir.trim());
  String logDir=(String)params.get(""String_Node_Str"");
  String logLevel=(String)params.get(""String_Node_Str"");
  Level level=null;
  if (logLevel != null) {
    logLevel=logLevel.trim();
    if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.ALL;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.CONFIG;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.FINE;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.FINER;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.FINEST;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.INFO;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.OFF;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.SEVERE;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.WARNING;
    }
  }
  String logD=(logDir == null) ? config.getLogDirectory() : logDir;
  Level logL=(level == null) ? config.getLogLevel() : level;
  config.setLogConfig(logD,logL);
  String logFile=(String)params.get(""String_Node_Str"");
  if (logFile != null)   config.setLogFile(logFile.trim());
  return config;
}",0.9615615615615616
73704,"/** 
 * This is a utility function that will create an unique file name with the timestamp information in the file name and append the file name into the directory name. For example, if the directory name is C:\Log, the returned file name will be C:\Log\ReportEngine_2005_02_26_11_26_56.log.
 * @param directoryName -the directory name of the log file.
 * @return An unique Log file name which is the directory name plus the filename.
 */
private static String generateUniqueLogFileName(String directoryName){
  SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"");
  String dateTimeString=df.format(new Date());
  if (directoryName == null)   directoryName=""String_Node_Str"";
 else   if (directoryName.length() > 0)   directoryName+=System.getProperty(""String_Node_Str"");
  return new String(directoryName + ""String_Node_Str"" + dateTimeString+ ""String_Node_Str"");
}","/** 
 * This is a utility function that will create an unique file name with the timestamp information in the file name and append the file name into the directory name. For example, if the directory name is C:\Log, the returned file name will be C:\Log\ReportEngine_2005_02_26_11_26_56.log.
 * @param directoryName -the directory name of the log file.
 * @return An unique Log file name which is the directory name plus the filename.
 */
private static String generateUniqueLogFileName(String directoryName,String fileName){
  if (fileName == null) {
    SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"");
    String dateTimeString=df.format(new Date());
    fileName=""String_Node_Str"" + dateTimeString + ""String_Node_Str"";
  }
  if (directoryName == null)   directoryName=""String_Node_Str"";
 else   if (directoryName.length() > 0)   directoryName+=System.getProperty(""String_Node_Str"");
  return new String(directoryName + fileName);
}",0.9010989010989012
73705,"/** 
 * This function should only called by the main application that starts BIRT. It will add a new log handler to the global BIRT logger.
 * @param directoryName -the directory name of the log file (e.g. C:\Log). The final file name will be the directory name plus an unique file name. For example, if the directory name is C:\Log, the log file name will be something like C:\Log\ReportEngine_2005_02_26_11_26_56.log
 * @param logLevel -the log level to be set. If logLevel is null, it will be ignored.
 */
public static void startEngineLogging(Logger logger,String directoryName,Level logLevel){
  Logger rootLogger=Logger.getLogger(BIRT_NAME_SPACE);
  if (sharedHandler == null) {
    sharedHandler=new EngineLoggerHandler(rootLogger);
    sharedHandler.setLevel(Level.ALL);
    rootLogger.addHandler(sharedHandler);
  }
  if (fileLogger != null) {
    closeFileLogger(fileLogger);
    fileLogger=null;
  }
  if (logger != null && isValidLogger(logger)) {
    userLogger=logger;
    sharedHandler.setSharedLogger(userLogger);
  }
 else {
    if (directoryName != null) {
      dirName=directoryName;
    }
    if (logLevel == null) {
      logLevel=rootLogger.getLevel();
    }
    if (logLevel != Level.OFF && dirName != null) {
      fileLogger=createFileLogger(dirName);
      sharedHandler.setSharedLogger(fileLogger);
    }
    rootLogger.setLevel(logLevel);
  }
  rootLogger.setUseParentHandlers(false);
}","/** 
 * This function should only called by the main application that starts BIRT. It will add a new log handler to the global BIRT logger.
 * @param directoryName -the directory name of the log file (e.g. C:\Log). The final file name will be the directory name plus an unique file name. For example, if the directory name is C:\Log, the log file name will be something like C:\Log\ReportEngine_2005_02_26_11_26_56.log
 * @param logLevel -the log level to be set. If logLevel is null, it will be ignored.
 */
public static void startEngineLogging(Logger logger,String directoryName,String file,Level logLevel){
  Logger rootLogger=Logger.getLogger(BIRT_NAME_SPACE);
  if (sharedHandler == null) {
    sharedHandler=new EngineLoggerHandler(rootLogger);
    sharedHandler.setLevel(Level.ALL);
    rootLogger.addHandler(sharedHandler);
  }
  if (fileLogger != null) {
    closeFileLogger(fileLogger);
    fileLogger=null;
  }
  if (logger != null && isValidLogger(logger)) {
    userLogger=logger;
    sharedHandler.setSharedLogger(userLogger);
  }
 else {
    if (directoryName != null) {
      dirName=directoryName;
    }
    if (file != null) {
      fileName=file;
    }
    if (logLevel == null) {
      logLevel=rootLogger.getLevel();
    }
    if (logLevel != Level.OFF && (dirName != null || fileName != null)) {
      fileLogger=createFileLogger(dirName,fileName);
      sharedHandler.setSharedLogger(fileLogger);
    }
    rootLogger.setLevel(logLevel);
  }
  rootLogger.setUseParentHandlers(false);
}",0.9678522571819426
73706,"private static Logger createFileLogger(String dirName){
  try {
    File directory=new File(dirName);
    if (!directory.exists()) {
      if (!directory.mkdirs())       throw new IOException(""String_Node_Str"" + dirName + ""String_Node_Str"");
    }
 else {
      if (directory.isFile())       throw new IOException(""String_Node_Str"" + dirName + ""String_Node_Str"");
    }
    Handler logFileHandler=new FileHandler(generateUniqueLogFileName(dirName),true);
    logFileHandler.setFormatter(new SimpleFormatter());
    logFileHandler.setLevel(Level.FINEST);
    Logger logger=Logger.getAnonymousLogger();
    logger.addHandler(logFileHandler);
    return logger;
  }
 catch (  SecurityException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  return null;
}","private static Logger createFileLogger(String dirName,String fileName){
  try {
    if (dirName != null) {
      File directory=new File(dirName);
      if (!directory.exists()) {
        if (!directory.mkdirs())         throw new IOException(""String_Node_Str"" + dirName + ""String_Node_Str"");
      }
 else {
        if (directory.isFile())         throw new IOException(""String_Node_Str"" + dirName + ""String_Node_Str"");
      }
    }
    Handler logFileHandler=new FileHandler(generateUniqueLogFileName(dirName,fileName),true);
    logFileHandler.setFormatter(new SimpleFormatter());
    logFileHandler.setLevel(Level.FINEST);
    Logger logger=Logger.getAnonymousLogger();
    logger.addHandler(logFileHandler);
    return logger;
  }
 catch (  SecurityException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  return null;
}",0.9579067121729238
73707,"/** 
 * Change the log level to the newLevel
 * @param newLevel -new log level
 */
public static void changeLogLevel(Level newLevel){
  if (newLevel != null) {
    if (userLogger != null) {
      if (newLevel != Level.OFF && fileLogger == null && dirName != null) {
        fileLogger=createFileLogger(dirName);
        if (fileLogger != null) {
          sharedHandler.setSharedLogger(fileLogger);
        }
      }
    }
    Logger rootLogger=Logger.getLogger(BIRT_NAME_SPACE);
    rootLogger.setLevel(newLevel);
  }
}","/** 
 * Change the log level to the newLevel
 * @param newLevel -new log level
 */
public static void changeLogLevel(Level newLevel){
  if (newLevel != null) {
    if (userLogger != null) {
      if (newLevel != Level.OFF && fileLogger == null && (dirName != null || fileName != null)) {
        fileLogger=createFileLogger(dirName,fileName);
        if (fileLogger != null) {
          sharedHandler.setSharedLogger(fileLogger);
        }
      }
    }
    Logger rootLogger=Logger.getLogger(BIRT_NAME_SPACE);
    rootLogger.setLevel(newLevel);
  }
}",0.9710550887021476
73708,"/** 
 * set up engine logging
 */
private void intializeLogger(){
  Logger logger=null;
  String dest=null;
  Level level=Level.WARNING;
  if (config != null) {
    logger=config.getLogger();
    dest=config.getLogDirectory();
    level=config.getLogLevel();
    if (level == null) {
      level=Level.WARNING;
    }
  }
  EngineLogger.startEngineLogging(logger,dest,level);
}","/** 
 * set up engine logging
 */
private void intializeLogger(){
  Logger logger=null;
  String dest=null;
  String file=null;
  Level level=Level.WARNING;
  if (config != null) {
    logger=config.getLogger();
    dest=config.getLogDirectory();
    file=config.getLogFile();
    level=config.getLogLevel();
    if (level == null) {
      level=Level.WARNING;
    }
  }
  EngineLogger.startEngineLogging(logger,dest,file,level);
}",0.9318463444857495
73709,"public void setLogger(Logger logger){
  if (logger != null) {
    EngineLogger.startEngineLogging(logger,null,null);
  }
}","public void setLogger(Logger logger){
  if (logger != null) {
    EngineLogger.startEngineLogging(logger,null,null,null);
  }
}",0.9799196787148594
73710,"/** 
 * create query for non-listing report item
 * @param item report item
 * @return a report query
 */
protected BaseQueryDefinition createQuery(ReportItemDesign item,Object parent){
  DesignElementHandle handle=item.getHandle();
  BaseQueryDefinition parentQuery=null;
  if (parent instanceof BaseQueryDefinition) {
    parentQuery=(BaseQueryDefinition)parent;
  }
  if (!(handle instanceof ReportItemHandle)) {
    if (!needQuery(item,parentQuery)) {
      return parentQuery;
    }
    return createSubQuery(item,parentQuery);
  }
  ReportItemHandle designHandle=(ReportItemHandle)handle;
  DataSetHandle dsHandle=designHandle.getDataSet();
  if (dsHandle == null) {
    String dsName=(String)designHandle.getProperty(ReportItemHandle.DATA_SET_PROP);
    if (dsName != null && dsName.length() > 0) {
      context.addException(item.getHandle(),new EngineException(MessageConstants.UNDEFINED_DATASET_ERROR,dsName));
    }
    if (!needQuery(item,parentQuery)) {
      return parentQuery;
    }
    if (parent instanceof CubeQueryDefinition) {
      return null;
    }
    return createSubQuery(item,parentQuery);
  }
  QueryDefinition query=new QueryDefinition(parentQuery);
  query.setDataSetName(dsHandle.getQualifiedName());
  query.getInputParamBindings().addAll(createParamBindings(designHandle.paramBindingsIterator()));
  query.setMaxRows(maxRows);
  Iterator iter=designHandle.columnBindingsIterator();
  while (iter.hasNext()) {
    ComputedColumnHandle binding=(ComputedColumnHandle)iter.next();
    try {
      addColumBinding(query,binding);
    }
 catch (    BirtException ex) {
      context.addException(designHandle,ex);
    }
  }
  addSortAndFilter(item,query);
  return query;
}","/** 
 * create query for non-listing report item
 * @param item report item
 * @return a report query
 */
protected BaseQueryDefinition createQuery(ReportItemDesign item,Object parent){
  DesignElementHandle handle=item.getHandle();
  BaseQueryDefinition parentQuery=null;
  if (parent instanceof BaseQueryDefinition) {
    parentQuery=(BaseQueryDefinition)parent;
  }
  if (!(handle instanceof ReportItemHandle)) {
    if (!needQuery(item,parentQuery)) {
      return parentQuery;
    }
    return createSubQuery(item,parentQuery);
  }
  ReportItemHandle designHandle=(ReportItemHandle)handle;
  DataSetHandle dsHandle=designHandle.getDataSet();
  if (dsHandle == null) {
    String dsName=(String)designHandle.getProperty(ReportItemHandle.DATA_SET_PROP);
    if (dsName != null && dsName.length() > 0) {
      context.addException(item.getHandle(),new EngineException(MessageConstants.UNDEFINED_DATASET_ERROR,dsName));
    }
    if (!needQuery(item,parentQuery)) {
      return parentQuery;
    }
    if (parent instanceof CubeQueryDefinition) {
      return createSubQuery(item,null);
    }
    return createSubQuery(item,parentQuery);
  }
  QueryDefinition query=new QueryDefinition(parentQuery);
  query.setDataSetName(dsHandle.getQualifiedName());
  query.getInputParamBindings().addAll(createParamBindings(designHandle.paramBindingsIterator()));
  query.setMaxRows(maxRows);
  Iterator iter=designHandle.columnBindingsIterator();
  while (iter.hasNext()) {
    ComputedColumnHandle binding=(ComputedColumnHandle)iter.next();
    try {
      addColumBinding(query,binding);
    }
 catch (    BirtException ex) {
      context.addException(designHandle,ex);
    }
  }
  addSortAndFilter(item,query);
  return query;
}",0.9915278995033596
73711,"/** 
 * Find data type of expression from specified item handle.
 * @param expression expression.
 * @param itemHandle specified item handle.
 * @return an object array, size is two, the first element is a booleanobject, if its value is <code>true</code> then means the data type is found and the second element of array stores the data type; if its value is <code>false</code> then means that data type is not found.
 */
private Object[] findDataType(String expression,ReportItemHandle itemHandle){
  Object[] returnObj=new Object[2];
  returnObj[0]=new Boolean(false);
  Iterator iterator=getAllColumnBindingsIterator();
  while (iterator.hasNext()) {
    ComputedColumnHandle cc=(ComputedColumnHandle)iterator.next();
    if (expression.toUpperCase().indexOf(cc.getName().toUpperCase()) >= 0) {
      String dataType=cc.getDataType();
      if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=DataType.TEXT_LITERAL;
        break;
      }
 else       if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER)|| dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=DataType.NUMERIC_LITERAL;
        break;
      }
 else       if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_TIME)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=DataType.DATE_TIME_LITERAL;
        break;
      }
 else       if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=null;
        break;
      }
    }
  }
  return returnObj;
}","/** 
 * Find data type of expression from specified item handle.
 * @param expression expression.
 * @param itemHandle specified item handle.
 * @return an object array, size is two, the first element is a booleanobject, if its value is <code>true</code> then means the data type is found and the second element of array stores the data type; if its value is <code>false</code> then means that data type is not found.
 */
private Object[] findDataType(String expression,ReportItemHandle itemHandle){
  Object[] returnObj=new Object[2];
  returnObj[0]=new Boolean(false);
  Iterator iterator=ChartReportItemUtil.getAllColumnBindingsIterator(itemHandle);
  while (iterator.hasNext()) {
    ComputedColumnHandle cc=(ComputedColumnHandle)iterator.next();
    if (expression.toUpperCase().indexOf(cc.getName().toUpperCase()) >= 0) {
      String dataType=cc.getDataType();
      if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=DataType.TEXT_LITERAL;
        break;
      }
 else       if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER)|| dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=DataType.NUMERIC_LITERAL;
        break;
      }
 else       if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_TIME)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=DataType.DATE_TIME_LITERAL;
        break;
      }
 else       if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY)) {
        returnObj[0]=new Boolean(true);
        returnObj[1]=null;
        break;
      }
    }
  }
  return returnObj;
}",0.9923116350589442
73712,"private void updatePredefinedQueries(){
  CubeHandle cube=getCube();
  if (cube == null) {
    getContext().addPredefinedQuery(ChartUIConstants.QUERY_CATEGORY,null);
    getContext().addPredefinedQuery(ChartUIConstants.QUERY_VALUE,null);
    getContext().addPredefinedQuery(ChartUIConstants.QUERY_OPTIONAL,null);
  }
 else {
    List measures=ChartReportItemUtil.getAllMeasures(cube);
    if (!measures.isEmpty()) {
      String[] exprs=new String[measures.size()];
      for (int i=0; i < exprs.length; i++) {
        exprs[i]=ExpressionUtil.createJSMeasureExpression(((MeasureHandle)measures.get(i)).getName());
      }
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_VALUE,exprs);
    }
    List levels=ChartReportItemUtil.getAllLevels(cube);
    if (!levels.isEmpty()) {
      String[] exprs=new String[levels.size()];
      for (int i=0; i < exprs.length; i++) {
        LevelHandle level=(LevelHandle)levels.get(i);
        exprs[i]=ExpressionUtil.createJSDimensionExpression(level.getContainer().getContainer().getName(),level.getName());
      }
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_CATEGORY,exprs);
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_OPTIONAL,exprs);
    }
  }
  fireEvent(btnBinding,EVENT_QUERY);
}","private void updatePredefinedQueries(){
  CubeHandle cube=getCube();
  if (cube == null) {
    getContext().addPredefinedQuery(ChartUIConstants.QUERY_CATEGORY,null);
    getContext().addPredefinedQuery(ChartUIConstants.QUERY_VALUE,null);
    getContext().addPredefinedQuery(ChartUIConstants.QUERY_OPTIONAL,null);
  }
 else {
    List measures=ChartReportItemUtil.getAllMeasures(cube);
    if (!measures.isEmpty()) {
      String[] exprs=new String[measures.size()];
      for (int i=0; i < exprs.length; i++) {
        exprs[i]=ExpressionUtil.createJSMeasureExpression(((MeasureHandle)measures.get(i)).getName());
      }
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_VALUE,exprs);
    }
    List levels=ChartReportItemUtil.getAllLevels(cube);
    if (!levels.isEmpty()) {
      String[] exprs=new String[levels.size()];
      for (int i=0; i < exprs.length; i++) {
        exprs[i]=ChartReportItemUtil.createDimensionExpression((LevelHandle)levels.get(i));
      }
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_CATEGORY,exprs);
      getContext().addPredefinedQuery(ChartUIConstants.QUERY_OPTIONAL,exprs);
    }
  }
  fireEvent(btnBinding,EVENT_QUERY);
}",0.9397394136807816
73713,"private CrosstabCellHandle getLevelCell(CrosstabViewHandle xtab){
  DimensionViewHandle dim=xtab.getDimension(0);
  if (dim != null) {
    LevelViewHandle level=dim.getLevel(0);
    if (level != null) {
      return level.getCell();
    }
  }
  return null;
}","private CrosstabCellHandle getLevelCell(CrosstabViewHandle xtab){
  if (xtab == null) {
    return null;
  }
  DimensionViewHandle dim=xtab.getDimension(0);
  if (dim != null) {
    LevelViewHandle level=dim.getLevel(0);
    if (level != null) {
      return level.getCell();
    }
  }
  return null;
}",0.9233511586452764
73714,"public boolean next(){
  try {
    EdgeCursor edge=getEdge();
    return edge.next();
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return false;
}","public boolean next(){
  iIndex++;
  try {
    EdgeCursor subEdge=getSubEdge();
    if (subEdge != null) {
      if (subEdge.next()) {
        return true;
      }
      lstBreaks.add(new Integer(iIndex));
      subEdge.first();
      return getMainEdge().next();
    }
 else {
      return getMainEdge().next();
    }
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return false;
}",0.4609800362976406
73715,"/** 
 * The constructor.
 * @param set
 * @param definition
 */
public BIRTCubeResultSetEvaluator(ICubeResultSet set){
  this.rs=set;
}","public BIRTCubeResultSetEvaluator(ICubeResultSet rs){
  this.rs=rs;
}",0.6568627450980392
73716,"public Object evaluate(String expression){
  Object result=null;
  try {
    result=rs.getCubeCursor().getObject(ChartCubeQueryHelper.getBindingName(expression));
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return result;
}","public Object evaluate(String expression){
  Object result=null;
  try {
    result=getCubeCursor().getObject(ChartCubeQueryHelper.getBindingName(expression));
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return result;
}",0.9936305732484076
73717,"public boolean first(){
  try {
    EdgeCursor edge=getEdge();
    return edge.first();
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return false;
}","public boolean first(){
  try {
    getMainEdge().first();
    EdgeCursor subEdge=getSubEdge();
    if (subEdge != null) {
      subEdge.first();
    }
    bWithoutSub=getCubeCursor().getOrdinateEdge().size() <= 1;
    return true;
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return false;
}",0.5536480686695279
73718,"public IDataRowExpressionEvaluator prepareRowExpressionEvaluator(Chart cm,List columnExpression,int rowCount,boolean isStringType) throws ChartException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=getCustomScriptClassLoader(parentLoader);
  Thread.currentThread().setContextClassLoader(newContextLoader);
  try {
    DataRequestSession session=prepareDataRequestSession(getMaxRow());
    BaseQueryHelper cbqh=new BaseQueryHelper(itemHandle,cm);
    QueryDefinition queryDefn=(QueryDefinition)cbqh.createBaseQuery(columnExpression);
    resetParametersForDataPreview(getDataSetFromHandle(),queryDefn);
    IQueryResults actualResultSet=session.executeQuery(queryDefn,null,itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP).iterator(),ChartReportItemUtil.getColumnDataBindings(itemHandle));
    if (actualResultSet != null) {
      return new ChartBuilderGrupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.hasAggregation(cm));
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldContextLoader);
  }
  return null;
}","public IDataRowExpressionEvaluator prepareRowExpressionEvaluator(Chart cm,List columnExpression,int rowCount,boolean isStringType) throws ChartException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=getCustomScriptClassLoader(parentLoader);
  Thread.currentThread().setContextClassLoader(newContextLoader);
  try {
    DataRequestSession session=prepareDataRequestSession(getMaxRow());
    BaseQueryHelper cbqh=new BaseQueryHelper(itemHandle,cm);
    QueryDefinition queryDefn=(QueryDefinition)cbqh.createBaseQuery(columnExpression);
    resetParametersForDataPreview(getDataSetFromHandle(),queryDefn);
    IQueryResults actualResultSet=session.executeQuery(queryDefn,null,itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP).iterator(),ChartReportItemUtil.getColumnDataBindings(itemHandle));
    if (actualResultSet != null) {
      return new ChartBuilderGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.hasAggregation(cm));
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldContextLoader);
  }
  return null;
}",0.9996411912450665
73719,"/** 
 * Validates current script.
 */
protected void validate(){
  try {
    validator.validate(false);
  }
 catch (  ParseException e) {
    return;
  }
}","/** 
 * Validates current script.
 */
protected void validate(){
  try {
    validator.validate(true,false);
  }
 catch (  ParseException e) {
    return;
  }
}",0.984126984126984
73720,"/** 
 * Validates the contents of this editor.
 */
public void doValidate(){
  Image image=null;
  String message=null;
  if (scriptValidator == null) {
    return;
  }
  try {
    scriptValidator.validate();
    image=ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_SCRIPT_NOERROR);
    message=Messages.getString(""String_Node_Str"");
  }
 catch (  ParseException e) {
    image=ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_SCRIPT_ERROR);
    message=e.getLocalizedMessage();
  }
 finally {
    setValidateIcon(image,message);
    setFocus();
  }
}","/** 
 * Validates the contents of this editor.
 */
public void doValidate(){
  Image image=null;
  String message=null;
  if (scriptValidator == null) {
    return;
  }
  try {
    scriptValidator.validate(true,true);
    image=ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_SCRIPT_NOERROR);
    message=Messages.getString(""String_Node_Str"");
  }
 catch (  ParseException e) {
    image=ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_SCRIPT_ERROR);
    message=e.getLocalizedMessage();
  }
 finally {
    setValidateIcon(image,message);
    setFocus();
  }
}",0.9922613929492692
73721,"/** 
 * Validates the current script.
 * @return <code>true</code> if no error was found, <code>false</code>otherwise.
 */
protected boolean validateScript(){
  if (sourceViewer == null) {
    return false;
  }
  String errorMessage=null;
  try {
    new ScriptValidator(sourceViewer).validate();
    setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.INFORMATION);
    return true;
  }
 catch (  ParseException e) {
    int offset=e.getErrorOffset();
    int row=sourceViewer.getTextWidget().getLineAtOffset(offset) + 1;
    int column=offset - sourceViewer.getTextWidget().getOffsetAtLine(row - 1) + 1;
    errorMessage=Messages.getFormattedString(""String_Node_Str"",new Object[]{Integer.toString(row),Integer.toString(column),e.getLocalizedMessage()});
    return false;
  }
 finally {
    setErrorMessage(errorMessage);
  }
}","/** 
 * Validates the current script.
 * @return <code>true</code> if no error was found, <code>false</code>otherwise.
 */
protected boolean validateScript(){
  if (sourceViewer == null) {
    return false;
  }
  String errorMessage=null;
  try {
    new ScriptValidator(sourceViewer).validate(true,true);
    setMessage(Messages.getString(""String_Node_Str""),IMessageProvider.INFORMATION);
    return true;
  }
 catch (  ParseException e) {
    int offset=e.getErrorOffset();
    int row=sourceViewer.getTextWidget().getLineAtOffset(offset) + 1;
    int column=offset - sourceViewer.getTextWidget().getOffsetAtLine(row - 1) + 1;
    errorMessage=Messages.getFormattedString(""String_Node_Str"",new Object[]{Integer.toString(row),Integer.toString(column),e.getLocalizedMessage()});
    return false;
  }
 finally {
    setErrorMessage(errorMessage);
  }
}",0.9946902654867256
73722,"/** 
 * initializes numeric format pattern
 * @param patternStr ths string used for formatting numeric data
 */
public void applyPattern(String patternStr){
  try {
    this.formatPattern=patternStr;
    hexFlag=false;
    if (this.formatPattern == null) {
      numberFormat=NumberFormat.getInstance(locale.toLocale());
      numberFormat.setGroupingUsed(false);
      decimalFormat=new DecimalFormat(""String_Node_Str"",new DecimalFormatSymbols(locale.toLocale()));
      decimalFormat.setGroupingUsed(false);
      return;
    }
    if (patternStr.length() == 1) {
      handleSingleCharFormatString(patternStr.charAt(0));
      return;
    }
    handleNamedFormats(patternStr);
  }
 catch (  Exception illeagueE) {
    logger.log(Level.WARNING,illeagueE.getMessage(),illeagueE);
  }
}","/** 
 * initializes numeric format pattern
 * @param patternStr ths string used for formatting numeric data
 */
public void applyPattern(String patternStr){
  try {
    this.formatPattern=patternStr;
    hexFlag=false;
    if (this.formatPattern == null) {
      numberFormat=NumberFormat.getInstance(locale.toLocale());
      numberFormat.setGroupingUsed(false);
      DecimalFormatSymbols symbols=new DecimalFormatSymbols(locale.toLocale());
      decimalSeparator=symbols.getDecimalSeparator();
      decimalFormat=new DecimalFormat(""String_Node_Str"",new DecimalFormatSymbols(locale.toLocale()));
      decimalFormat.setGroupingUsed(false);
      return;
    }
    if (patternStr.length() == 1) {
      handleSingleCharFormatString(patternStr.charAt(0));
      return;
    }
    handleNamedFormats(patternStr);
  }
 catch (  Exception illeagueE) {
    logger.log(Level.WARNING,illeagueE.getMessage(),illeagueE);
  }
}",0.9214536928487692
73723,"protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFERENCE_BIRT_PREVIEW_DATA_ID);
  Composite cmpTop=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  cmpTop.setLayout(layout);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  cmpTop.setLayoutData(gd);
  txtMaxDataSetRow=new IntegerFieldEditor(PREVIEW_MAXROW,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxDataSetRow.setPage(this);
  txtMaxDataSetRow.setTextLimit(Integer.toString(MAX_DATASET_ROW).length());
  txtMaxDataSetRow.setErrorMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_DATASET_ROW)}));
  txtMaxDataSetRow.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxDataSetRow.setValidRange(1,MAX_DATASET_ROW);
  txtMaxDataSetRow.setEmptyStringAllowed(false);
  txtMaxDataSetRow.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxDataSetRow.isValid());
    }
  }
);
  txtMaxRowLevelMember=new IntegerFieldEditor(PREVIEW_MAX_ROW_LEVEL_MEMBER,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxRowLevelMember.setPage(this);
  txtMaxRowLevelMember.setTextLimit(Integer.toString(MAX_CUBE_LEVEL_MEMBER).length());
  txtMaxRowLevelMember.setErrorMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_CUBE_LEVEL_MEMBER)}));
  txtMaxRowLevelMember.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxRowLevelMember.setValidRange(1,MAX_CUBE_LEVEL_MEMBER);
  txtMaxRowLevelMember.setEmptyStringAllowed(false);
  txtMaxRowLevelMember.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxRowLevelMember.isValid());
    }
  }
);
  txtMaxColumnLevelMember=new IntegerFieldEditor(PREVIEW_MAX_COLUMN_LEVEL_MEMBER,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxColumnLevelMember.setPage(this);
  txtMaxColumnLevelMember.setTextLimit(Integer.toString(MAX_CUBE_LEVEL_MEMBER).length());
  txtMaxColumnLevelMember.setErrorMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_CUBE_LEVEL_MEMBER)}));
  txtMaxColumnLevelMember.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxColumnLevelMember.setValidRange(1,MAX_CUBE_LEVEL_MEMBER);
  txtMaxColumnLevelMember.setEmptyStringAllowed(false);
  txtMaxColumnLevelMember.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxColumnLevelMember.isValid());
    }
  }
);
  txtMaxInMemoryCubeSize=new IntegerFieldEditor(PREVIEW_MAX_IN_MEMORY_CUBE_SIZE,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxInMemoryCubeSize.setPage(this);
  txtMaxInMemoryCubeSize.setTextLimit(Integer.toString(MAX_IN_MEMORY_CUBE_SIZE).length());
  txtMaxInMemoryCubeSize.setErrorMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_IN_MEMORY_CUBE_SIZE)}));
  txtMaxInMemoryCubeSize.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxInMemoryCubeSize.setValidRange(1,MAX_IN_MEMORY_CUBE_SIZE);
  txtMaxInMemoryCubeSize.setEmptyStringAllowed(false);
  txtMaxInMemoryCubeSize.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxInMemoryCubeSize.isValid());
    }
  }
);
  initControlValues();
  return cmpTop;
}","protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFERENCE_BIRT_PREVIEW_DATA_ID);
  Composite cmpTop=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  cmpTop.setLayout(layout);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  cmpTop.setLayoutData(gd);
  txtMaxDataSetRow=new IntegerFieldEditor(PREVIEW_MAXROW,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxDataSetRow.setPage(this);
  txtMaxDataSetRow.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxDataSetRow.setEmptyStringAllowed(false);
  txtMaxDataSetRow.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxDataSetRow.isValid());
    }
  }
);
  txtMaxRowLevelMember=new IntegerFieldEditor(PREVIEW_MAX_ROW_LEVEL_MEMBER,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxRowLevelMember.setPage(this);
  txtMaxRowLevelMember.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxRowLevelMember.setEmptyStringAllowed(false);
  txtMaxRowLevelMember.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxRowLevelMember.isValid());
    }
  }
);
  txtMaxColumnLevelMember=new IntegerFieldEditor(PREVIEW_MAX_COLUMN_LEVEL_MEMBER,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxColumnLevelMember.setPage(this);
  txtMaxColumnLevelMember.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxColumnLevelMember.setEmptyStringAllowed(false);
  txtMaxColumnLevelMember.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxColumnLevelMember.isValid());
    }
  }
);
  txtMaxInMemoryCubeSize=new IntegerFieldEditor(PREVIEW_MAX_IN_MEMORY_CUBE_SIZE,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxInMemoryCubeSize.setPage(this);
  txtMaxInMemoryCubeSize.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxInMemoryCubeSize.setEmptyStringAllowed(false);
  txtMaxInMemoryCubeSize.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxInMemoryCubeSize.isValid());
    }
  }
);
  initControlValues();
  return cmpTop;
}",0.1972757162987318
73724,"protected boolean calculateEnabled(){
  if (getSelectedObjects().size() != 1) {
    return false;
  }
  EditPart part=(EditPart)getSelectedObjects().get(0);
  Object model=part.getModel();
  if (!(model instanceof ReportItemHandle) && model instanceof IAdaptable) {
    model=((IAdaptable)model).getAdapter(DesignElementHandle.class);
  }
  if (!(model instanceof ReportItemHandle)) {
    return false;
  }
  Object[] objs=ElementAdapterManager.getAdapters(model,IReportItemViewProvider.class);
  if (objs == null || objs.length > 1) {
    return false;
  }
  if (((ReportItemHandle)model).getViews().size() != 0) {
    return false;
  }
  return true;
}","protected boolean calculateEnabled(){
  List selected=getSelectedObjects();
  if (selected.size() != 1 || !(selected.get(0) instanceof EditPart)) {
    return false;
  }
  EditPart part=(EditPart)selected.get(0);
  Object model=part.getModel();
  if (!(model instanceof ReportItemHandle) && model instanceof IAdaptable) {
    model=((IAdaptable)model).getAdapter(DesignElementHandle.class);
  }
  if (!(model instanceof ReportItemHandle)) {
    return false;
  }
  Object[] objs=ElementAdapterManager.getAdapters(model,IReportItemViewProvider.class);
  if (objs == null || objs.length > 1) {
    return false;
  }
  if (((ReportItemHandle)model).getViews().size() != 0) {
    return false;
  }
  return true;
}",0.9237536656891496
73725,"private void createTextView(AggregationCellHandle cell) throws SemanticException {
  CrosstabReportItemHandle crosstab=cell.getCrosstab();
  MeasureViewHandle measureView=(MeasureViewHandle)cell.getContainer();
  LevelHandle rowLevelHandle=cell.getAggregationOnRow();
  LevelHandle colLevelHandle=cell.getAggregationOnColumn();
  String rowLevel=rowLevelHandle == null ? null : rowLevelHandle.getName();
  String colLevel=colLevelHandle == null ? null : colLevelHandle.getName();
  String rowDimension=null;
  String colDimension=null;
  if (rowLevelHandle != null && rowLevelHandle.getContainer() != null && rowLevelHandle.getContainer().getContainer() != null) {
    rowDimension=rowLevelHandle.getContainer().getContainer().getName();
  }
  if (colLevelHandle != null && colLevelHandle.getContainer() != null && colLevelHandle.getContainer().getContainer() != null) {
    colDimension=colLevelHandle.getContainer().getContainer().getName();
  }
  CrosstabUtil.addDataItem(crosstab,cell,measureView,null,rowDimension,rowLevel,colDimension,colLevel);
}","private void createTextView(AggregationCellHandle cell) throws SemanticException {
  CrosstabReportItemHandle crosstab=cell.getCrosstab();
  MeasureViewHandle measureView=(MeasureViewHandle)cell.getContainer();
  LevelHandle rowLevelHandle=cell.getAggregationOnRow();
  LevelHandle colLevelHandle=cell.getAggregationOnColumn();
  String rowLevel=rowLevelHandle == null ? null : rowLevelHandle.getFullName();
  String colLevel=colLevelHandle == null ? null : colLevelHandle.getFullName();
  String rowDimension=null;
  String colDimension=null;
  if (rowLevelHandle != null && rowLevelHandle.getContainer() != null && rowLevelHandle.getContainer().getContainer() != null) {
    rowDimension=rowLevelHandle.getContainer().getContainer().getFullName();
  }
  if (colLevelHandle != null && colLevelHandle.getContainer() != null && colLevelHandle.getContainer().getContainer() != null) {
    colDimension=colLevelHandle.getContainer().getContainer().getFullName();
  }
  CrosstabUtil.addDataItem(crosstab,cell,measureView,null,rowDimension,rowLevel,colDimension,colLevel);
}",0.992459943449576
73726,"/** 
 * Creates view upon given multiview host
 */
DesignElementHandle createView(DesignElementHandle host);","/** 
 * Creates view upon given multiview host
 */
DesignElementHandle createView(DesignElementHandle host) throws BirtException ;",0.907563025210084
73727,"public void run(){
  showSelectionPage(selectedNode);
}","public void run(){
  l.pageChanged(event);
}",0.6464646464646465
73728,"private final void performHelp(){
  if (currentNode != null) {
    currentNode.getPage().performHelp();
  }
}","private final void performHelp(){
  if (currentNode != null) {
    currentNode.getPageControl().notifyListeners(SWT.Help,new Event());
  }
}",0.8353413654618473
73729,"public void handleEvent(Event event){
  fbException=false;
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        if (header.getMenu() == null) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        header.getMenu().setVisible(true);
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        cmbDataItems.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        getDataServiceProvider().setReportItemReference(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        setEnabledForButtons();
        updateDragDataSource();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=(Integer)selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=(Integer)selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
updateDragDataSource();
setEnabledForButtons();
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnNewData) {
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
String currentDataSet=cmbDataItems.getText();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setText(currentDataSet);
}
}
 catch (ChartException e1) {
fbException=true;
ChartWizard.showException(e1.getLocalizedMessage());
}
}
if (!fbException) {
WizardBase.removeException();
}
}","public void handleEvent(Event event){
  fbException=false;
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        if (header.getMenu() == null) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        header.getMenu().setVisible(true);
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        cmbDataItems.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        getDataServiceProvider().setReportItemReference(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=(Integer)selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=(Integer)selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
updateDragDataSource();
setEnabledForButtons();
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnNewData) {
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
String currentDataSet=cmbDataItems.getText();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setText(currentDataSet);
}
}
 catch (ChartException e1) {
fbException=true;
ChartWizard.showException(e1.getLocalizedMessage());
}
}
if (!fbException) {
WizardBase.removeException();
}
}",0.991041719989762
73730,"protected Control createDialogArea(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_GROUP_AND_SORT);
  getShell().setText(Messages.getString(""String_Node_Str""));
  Composite cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(2,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpBasic.setLayoutData(gd);
  }
  createSortArea(cmpBasic);
  createGroupArea(cmpBasic);
  initSortKey();
  populateLists();
  return cmpContent;
}","protected Control createDialogArea(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_GROUP_AND_SORT);
  getShell().setText(Messages.getString(""String_Node_Str""));
  Composite cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(2,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpBasic.setLayoutData(gd);
  }
  createSortArea(cmpBasic);
  if (ChartUIUtil.isGroupingSupported(wizardContext)) {
    createGroupArea(cmpBasic);
  }
  initSortKey();
  populateLists();
  return cmpContent;
}",0.9595827900912648
73731,"public void handleEvent(Event event){
  if (event.data == getDataSheet()) {
    if (event.type == IChartDataSheet.EVENT_UPDATE) {
      doLivePreview();
      updateApplyButton();
    }
  }
}","public void handleEvent(Event event){
  if (event.data == getDataSheet()) {
    if (event.type == IChartDataSheet.EVENT_PREVIEW) {
      doLivePreview();
      updateApplyButton();
    }
 else     if (event.type == IChartDataSheet.EVENT_QUERY) {
      getCustomizeUI().refreshBottomBindingArea();
      getCustomizeUI().refreshLeftBindingArea();
      getCustomizeUI().refreshRightBindingArea();
    }
  }
}",0.6220735785953178
73732,"public void createControl(Composite parent){
  if (topControl == null || topControl.isDisposed()) {
    topControl=new Composite(parent,SWT.NONE);
    GridLayout gridLayout=new GridLayout(3,false);
    gridLayout.marginWidth=0;
    gridLayout.marginHeight=0;
    topControl.setLayout(gridLayout);
    topControl.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL));
    dynamicArea=new SelectDataDynamicArea(this);
    getCustomizeUI().init();
    foSashForm=new SashForm(topControl,SWT.VERTICAL);
{
      GridLayout layout=new GridLayout();
      foSashForm.setLayout(layout);
      GridData gridData=new GridData(GridData.FILL_BOTH);
      gridData.heightHint=580;
      foSashForm.setLayoutData(gridData);
    }
    placeComponents();
    createPreviewPainter();
  }
 else {
    customizeUI();
  }
  if (getChartModel() instanceof ChartWithAxes) {
    changeTask(null);
  }
  doLivePreview();
  DataDefinitionTextManager.getInstance().refreshAll();
  ChartUIUtil.bindHelp(getControl(),ChartHelpContextIds.TASK_SELECT_DATA);
  getDataSheet().setChartModel(getChartModel());
  getDataSheet().addListener(IChartDataSheet.EVENT_UPDATE,this);
}","public void createControl(Composite parent){
  getDataSheet().setChartModel(getChartModel());
  getDataSheet().addListener(this);
  if (topControl == null || topControl.isDisposed()) {
    topControl=new Composite(parent,SWT.NONE);
    GridLayout gridLayout=new GridLayout(3,false);
    gridLayout.marginWidth=0;
    gridLayout.marginHeight=0;
    topControl.setLayout(gridLayout);
    topControl.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL));
    dynamicArea=new SelectDataDynamicArea(this);
    getCustomizeUI().init();
    foSashForm=new SashForm(topControl,SWT.VERTICAL);
{
      GridLayout layout=new GridLayout();
      foSashForm.setLayout(layout);
      GridData gridData=new GridData(GridData.FILL_BOTH);
      gridData.heightHint=580;
      foSashForm.setLayoutData(gridData);
    }
    placeComponents();
    createPreviewPainter();
  }
 else {
    customizeUI();
  }
  if (getChartModel() instanceof ChartWithAxes) {
    changeTask(null);
  }
  doLivePreview();
  DataDefinitionTextManager.getInstance().refreshAll();
  ChartUIUtil.bindHelp(getControl(),ChartHelpContextIds.TASK_SELECT_DATA);
}",0.9137407889033377
73733,"public void handleEvent(Event event){
  query.setDefinition(cmbDefinition.getText());
  if (context.getModel() instanceof ChartWithAxes) {
    ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
  }
}","public void handleEvent(Event event){
  query.setDefinition(cmbDefinition.getText());
}",0.5353846153846153
73734,"private void createAggregationItem(Composite composite){
  fAggEditorComposite=new AggregateEditorComposite(composite,seriesdefinition,context);
  SeriesDefinition baseSD=(SeriesDefinition)ChartUIUtil.getBaseSeriesDefinitions(context.getModel()).get(0);
  boolean enabled=!PluginSettings.instance().inEclipseEnv() && baseSD.getGrouping().isEnabled();
  fAggEditorComposite.setEnabled(PluginSettings.instance().inEclipseEnv() || enabled);
}","private void createAggregationItem(Composite composite){
  fAggEditorComposite=new AggregateEditorComposite(composite,seriesdefinition,context);
  SeriesDefinition baseSD=(SeriesDefinition)ChartUIUtil.getBaseSeriesDefinitions(context.getModel()).get(0);
  fAggEditorComposite.setEnabled(ChartUIUtil.isGroupingSupported(context) && (PluginSettings.instance().inEclipseEnv() || baseSD.getGrouping().isEnabled()));
}",0.7347417840375586
73735,"public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  if (description != null && description.length() > 0) {
    Label lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  String[] predefinedQuery=context.getPredefinedQuery(queryType);
  if (predefinedQuery != null) {
    cmbDefinition=new Combo(cmpTop,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmbDefinition.setLayoutData(gd);
    cmbDefinition.setItems(predefinedQuery);
    cmbDefinition.setText(query.getDefinition());
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        query.setDefinition(cmbDefinition.getText());
        if (context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
      }
    }
);
    cmbDefinition.addModifyListener(this);
    cmbDefinition.addFocusListener(this);
    cmbDefinition.addKeyListener(this);
  }
 else {
    txtDefinition=new Text(cmpTop,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (query != null && query.getDefinition() != null) {
      txtDefinition.setText(query.getDefinition());
      txtDefinition.setToolTipText(getTooltipForDataText(query.getDefinition()));
    }
    txtDefinition.addModifyListener(this);
    txtDefinition.addFocusListener(this);
    txtDefinition.addKeyListener(this);
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,query);
  btnBuilder=new Button(cmpTop,SWT.PUSH);
{
    GridData gdBTNBuilder=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder);
    btnBuilder.setLayoutData(gdBTNBuilder);
    btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnBuilder.addSelectionListener(this);
    btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBuilder.getImage().setBackground(btnBuilder.getBackground());
    btnBuilder.setEnabled(context.getUIServiceProvider().isInvokingSupported());
    btnBuilder.setVisible(context.getUIServiceProvider().isEclipseModeSupported());
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  setColor();
  return cmpTop;
}","public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  if (description != null && description.length() > 0) {
    Label lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  String[] predefinedQuery=context.getPredefinedQuery(queryType);
  if (predefinedQuery != null) {
    cmbDefinition=new Combo(cmpTop,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmbDefinition.setLayoutData(gd);
    cmbDefinition.setItems(predefinedQuery);
    cmbDefinition.setText(query.getDefinition());
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        query.setDefinition(cmbDefinition.getText());
      }
    }
);
    cmbDefinition.addModifyListener(this);
    cmbDefinition.addFocusListener(this);
    cmbDefinition.addKeyListener(this);
  }
 else {
    txtDefinition=new Text(cmpTop,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (query != null && query.getDefinition() != null) {
      txtDefinition.setText(query.getDefinition());
      txtDefinition.setToolTipText(getTooltipForDataText(query.getDefinition()));
    }
    txtDefinition.addModifyListener(this);
    txtDefinition.addFocusListener(this);
    txtDefinition.addKeyListener(this);
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,query);
  btnBuilder=new Button(cmpTop,SWT.PUSH);
{
    GridData gdBTNBuilder=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder);
    btnBuilder.setLayoutData(gdBTNBuilder);
    btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnBuilder.addSelectionListener(this);
    btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBuilder.getImage().setBackground(btnBuilder.getBackground());
    btnBuilder.setEnabled(context.getUIServiceProvider().isInvokingSupported());
    btnBuilder.setVisible(context.getUIServiceProvider().isEclipseModeSupported());
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  setColor();
  return cmpTop;
}",0.9762940103801374
73736,"public ChartWizardContext(Chart chartModel,IUIServiceProvider uiProvider,IDataServiceProvider dataProvider,IChartDataSheet dataSheet){
  this.chartModel=chartModel;
  this.uiProvider=uiProvider;
  this.dataProvider=dataProvider;
  this.dataSheet=dataSheet;
}","public ChartWizardContext(Chart chartModel,IUIServiceProvider uiProvider,IDataServiceProvider dataProvider,IChartDataSheet dataSheet){
  this.chartModel=chartModel;
  this.uiProvider=uiProvider;
  this.dataProvider=dataProvider;
  this.dataSheet=dataSheet;
  this.dataSheet.setContext(this);
}",0.9364791288566244
73737,"/** 
 * @param stopSign
 * @throws DataException
 */
private void doGroupFiltering(StopSign stopSign) throws DataException {
  if (!groupingDone) {
    PassUtil.pass(this.populator,new OdiResultSetWrapper(populator.getResultIterator()),true,stopSign);
    groupingDone=true;
  }
  if (this.populator.getQuery().getGrouping() != null && this.populator.getQuery().getGrouping().length > 0) {
    this.populator.getGroupProcessorManager().doGroupFiltering(this.populator.getCache(),this.populator.getExpressionProcessor(),stopSign);
  }
}","/** 
 * @param stopSign
 * @throws DataException
 */
private void doGroupFiltering(StopSign stopSign) throws DataException {
  if (!this.needDoGroupFiltering())   return;
  if (!groupingDone) {
    PassUtil.pass(this.populator,new OdiResultSetWrapper(populator.getResultIterator()),true,stopSign);
    groupingDone=true;
  }
  this.populator.getGroupProcessorManager().doGroupFiltering(this.populator.getCache(),this.populator.getExpressionProcessor(),stopSign);
}",0.8368368368368369
73738,"/** 
 * @param stopSign
 * @throws DataException
 */
private void doGroupSorting(StopSign stopSign) throws DataException {
  if (!groupingDone) {
    PassUtil.pass(this.populator,new OdiResultSetWrapper(populator.getResultIterator()),true,stopSign);
    groupingDone=true;
  }
  if (this.populator.getQuery().getGrouping() != null && this.populator.getQuery().getGrouping().length > 0) {
    this.populator.getGroupProcessorManager().doGroupSorting(this.populator.getCache(),this.populator.getExpressionProcessor(),stopSign);
  }
}","/** 
 * @param stopSign
 * @throws DataException
 */
private void doGroupSorting(StopSign stopSign) throws DataException {
  if (!this.needDoGroupSorting())   return;
  if (!groupingDone) {
    PassUtil.pass(this.populator,new OdiResultSetWrapper(populator.getResultIterator()),true,stopSign);
    groupingDone=true;
  }
  this.populator.getGroupProcessorManager().doGroupSorting(this.populator.getCache(),this.populator.getExpressionProcessor(),stopSign);
}",0.8372093023255814
73739,"public List getDataDefinitionsForGrouping(Series series){
  ArrayList list=new ArrayList(1);
  EList elDD=series.getDataDefinition();
  for (int n=0; n < elDD.size(); n++) {
    String sExpression=((Query)elDD.get(n)).getDefinition();
    if (sExpression != null && sExpression.trim().length() > 0) {
      list.add(sExpression);
    }
  }
  return list;
}","/** 
 */
public List getDataDefinitionsForGrouping(Series series){
  ArrayList list=new ArrayList(1);
  EList elDD=series.getDataDefinition();
  int IDs[]=getDataDefIdsForGrouping(series);
  for (int i=0; i < IDs.length; i++) {
    Query query=(Query)elDD.get(IDs[i]);
    String sExpression=query.getDefinition();
    if (sExpression != null && sExpression.trim().length() > 0) {
      list.add(query);
    }
  }
  return list;
}",0.7633587786259542
73740,"/** 
 * @param elSD orthogonal series definitions list
 * @param lhmLookup
 */
public void addSeriesDefinitions(EList elSD,GroupingLookupHelper lhmLookup) throws ChartException {
  for (int k=0; k < elSD.size(); k++) {
    SeriesDefinition sdOrthogonal=(SeriesDefinition)elSD.get(k);
    Series series=sdOrthogonal.getDesignTimeSeries();
    List qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    String strOrtAgg=lhmLookup.getOrthogonalAggregationExpression(sdOrthogonal);
    if (strOrtAgg != null) {
      addAggregation(strOrtAgg,qlist);
    }
 else {
      baseQueryList.addAll(qlist);
    }
  }
}","/** 
 * @param elSD orthogonal series definitions list
 * @param lhmLookup
 */
public void addSeriesDefinitions(EList elSD,GroupingLookupHelper lhmLookup) throws ChartException {
  for (int k=0; k < elSD.size(); k++) {
    SeriesDefinition sdOrthogonal=(SeriesDefinition)elSD.get(k);
    Series series=sdOrthogonal.getDesignTimeSeries();
    List qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    List slist=new ArrayList(1);
    for (int i=0; i < qlist.size(); i++) {
      slist.add(((Query)qlist.get(i)).getDefinition());
    }
    String strOrtAgg=lhmLookup.getOrthogonalAggregationExpression(sdOrthogonal);
    if (strOrtAgg != null) {
      addAggregation(strOrtAgg,slist);
    }
 else {
      baseQueryList.addAll(slist);
    }
  }
}",0.9030054644808744
73741,"/** 
 * Generate grouping bindings and add into query definition.
 * @param query
 * @throws DataException
 */
protected void generateGroupBindings(BaseQueryDefinition query) throws DataException {
  SeriesDefinition baseSD=null;
  SeriesDefinition orthSD=null;
  Object[] orthAxisArray=null;
  if (fChartModel instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)fChartModel;
    baseSD=(SeriesDefinition)cwa.getBaseAxes()[0].getSeriesDefinitions().get(0);
    orthAxisArray=cwa.getOrthogonalAxes(cwa.getBaseAxes()[0],true);
    orthSD=(SeriesDefinition)((Axis)orthAxisArray[0]).getSeriesDefinitions().get(0);
  }
 else   if (fChartModel instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)fChartModel;
    baseSD=(SeriesDefinition)cwoa.getSeriesDefinitions().get(0);
    orthSD=(SeriesDefinition)baseSD.getSeriesDefinitions().get(0);
  }
  GroupDefinition yGroupingDefinition=createOrthogonalGroupingDefinition(orthSD);
  if (yGroupingDefinition != null) {
    query.addGroup(yGroupingDefinition);
    if (ChartReportItemUtil.isBaseGroupingDefined(baseSD) && orthSD.isSetSorting() && orthSD.getSortKey() != null) {
      String sortKey=orthSD.getSortKey().getDefinition();
      String yGroupingExpr=orthSD.getQuery().getDefinition();
      if (sortKey != null && !yGroupingExpr.equals(sortKey)) {
        String name=generateUniqueBindingName(sortKey);
        Binding binding=new Binding(name);
        query.addBinding(binding);
        binding.setExpression(new ScriptExpression(sortKey));
        binding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        binding.addAggregateOn(yGroupingDefinition.getName());
        String aggFunc=getAggFunExpr(sortKey,baseSD,orthAxisArray);
        binding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggFunc));
        SortDefinition sortDefinition=new SortDefinition();
        sortDefinition.setColumn(binding.getBindingName());
        sortDefinition.setExpression(ExpressionUtil.createRowExpression(binding.getBindingName()));
        sortDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(orthSD.getSorting()));
        yGroupingDefinition.addSort(sortDefinition);
      }
    }
  }
  GroupDefinition baseGroupDefinition=createBaseGroupingDefinition(baseSD);
  if (baseGroupDefinition != null) {
    query.addGroup(baseGroupDefinition);
  }
  GroupDefinition innerGroupDef=null;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    innerGroupDef=(GroupDefinition)query.getGroups().get(query.getGroups().size() - 1);
  }
  Map valueExprMap=new HashMap();
  if (fChartModel instanceof ChartWithAxes) {
    for (int i=0; i < orthAxisArray.length; i++) {
      addValueSeriesAggregateBindingForGrouping(query,((Axis)orthAxisArray[i]).getSeriesDefinitions(),innerGroupDef,valueExprMap,baseSD);
    }
  }
 else   if (fChartModel instanceof ChartWithoutAxes) {
    addValueSeriesAggregateBindingForGrouping(query,baseSD.getSeriesDefinitions(),innerGroupDef,valueExprMap,baseSD);
  }
  String baseSortExpr=getValidSortExpr(baseSD);
  if (baseSD.isSetSorting() && baseSortExpr != null) {
    if (ChartReportItemUtil.isBaseGroupingDefined(baseSD)) {
      String baseExpr=((Query)baseSD.getDesignTimeSeries().getDataDefinition().get(0)).getDefinition();
      if (baseExpr.equals(getValidSortExpr(baseSD))) {
        baseGroupDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(baseSD.getSorting()));
      }
 else {
        SortDefinition sd=new SortDefinition();
        sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(baseSD.getSorting()));
        String newValueSeriesExpr=(String)valueExprMap.get(baseSortExpr);
        if (newValueSeriesExpr != null) {
          baseSD.getSortKey().setDefinition(newValueSeriesExpr);
          sd.setExpression(newValueSeriesExpr);
        }
 else {
          sd.setExpression(baseSortExpr);
        }
        baseGroupDefinition.addSort(sd);
      }
    }
 else {
      SortDefinition sd=new SortDefinition();
      sd.setExpression(baseSortExpr);
      sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(baseSD.getSorting()));
      query.addSort(sd);
    }
  }
}","/** 
 * Generate grouping bindings and add into query definition.
 * @param query
 * @throws DataException
 */
protected void generateGroupBindings(BaseQueryDefinition query) throws ChartException {
  SeriesDefinition baseSD=null;
  SeriesDefinition orthSD=null;
  Object[] orthAxisArray=null;
  if (fChartModel instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)fChartModel;
    baseSD=(SeriesDefinition)cwa.getBaseAxes()[0].getSeriesDefinitions().get(0);
    orthAxisArray=cwa.getOrthogonalAxes(cwa.getBaseAxes()[0],true);
    orthSD=(SeriesDefinition)((Axis)orthAxisArray[0]).getSeriesDefinitions().get(0);
  }
 else   if (fChartModel instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)fChartModel;
    baseSD=(SeriesDefinition)cwoa.getSeriesDefinitions().get(0);
    orthSD=(SeriesDefinition)baseSD.getSeriesDefinitions().get(0);
  }
  GroupDefinition yGroupingDefinition=createOrthogonalGroupingDefinition(orthSD);
  if (yGroupingDefinition != null) {
    query.addGroup(yGroupingDefinition);
    if (ChartReportItemUtil.isBaseGroupingDefined(baseSD) && orthSD.isSetSorting() && orthSD.getSortKey() != null) {
      String sortKey=orthSD.getSortKey().getDefinition();
      String yGroupingExpr=orthSD.getQuery().getDefinition();
      if (sortKey != null && !yGroupingExpr.equals(sortKey)) {
        String name=generateUniqueBindingName(sortKey);
        Binding binding=new Binding(name);
        try {
          query.addBinding(binding);
          binding.setExpression(new ScriptExpression(sortKey));
          binding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
          binding.addAggregateOn(yGroupingDefinition.getName());
        }
 catch (        DataException e) {
          throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
        }
        String aggFunc=getAggFunExpr(sortKey,baseSD,orthAxisArray);
        binding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggFunc));
        SortDefinition sortDefinition=new SortDefinition();
        sortDefinition.setColumn(binding.getBindingName());
        sortDefinition.setExpression(ExpressionUtil.createRowExpression(binding.getBindingName()));
        sortDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(orthSD.getSorting()));
        yGroupingDefinition.addSort(sortDefinition);
      }
    }
  }
  GroupDefinition baseGroupDefinition=createBaseGroupingDefinition(baseSD);
  if (baseGroupDefinition != null) {
    query.addGroup(baseGroupDefinition);
  }
  GroupDefinition innerGroupDef=null;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    innerGroupDef=(GroupDefinition)query.getGroups().get(query.getGroups().size() - 1);
  }
  Map valueExprMap=new HashMap();
  if (fChartModel instanceof ChartWithAxes) {
    for (int i=0; i < orthAxisArray.length; i++) {
      addValueSeriesAggregateBindingForGrouping(query,((Axis)orthAxisArray[i]).getSeriesDefinitions(),innerGroupDef,valueExprMap,baseSD);
    }
  }
 else   if (fChartModel instanceof ChartWithoutAxes) {
    addValueSeriesAggregateBindingForGrouping(query,baseSD.getSeriesDefinitions(),innerGroupDef,valueExprMap,baseSD);
  }
  String baseSortExpr=getValidSortExpr(baseSD);
  if (baseSD.isSetSorting() && baseSortExpr != null) {
    if (ChartReportItemUtil.isBaseGroupingDefined(baseSD)) {
      String baseExpr=((Query)baseSD.getDesignTimeSeries().getDataDefinition().get(0)).getDefinition();
      if (baseExpr.equals(getValidSortExpr(baseSD))) {
        baseGroupDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(baseSD.getSorting()));
      }
 else {
        SortDefinition sd=new SortDefinition();
        sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(baseSD.getSorting()));
        String newValueSeriesExpr=(String)valueExprMap.get(baseSortExpr);
        if (newValueSeriesExpr != null) {
          baseSD.getSortKey().setDefinition(newValueSeriesExpr);
          sd.setExpression(newValueSeriesExpr);
        }
 else {
          sd.setExpression(baseSortExpr);
        }
        baseGroupDefinition.addSort(sd);
      }
    }
 else {
      SortDefinition sd=new SortDefinition();
      sd.setExpression(baseSortExpr);
      sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(baseSD.getSorting()));
      query.addSort(sd);
    }
  }
}",0.979278230500582
73742,"/** 
 * Create base query definition.
 * @param columns
 * @return
 * @throws DataException
 */
public abstract IDataQueryDefinition createBaseQuery(List columns) throws DataException ;","/** 
 * Create base query definition.
 * @param columns
 * @return
 * @throws DataException
 */
public abstract IDataQueryDefinition createBaseQuery(List columns) throws ChartException ;",0.9865229110512128
73743,"/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws DataException
 */
protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList seriesDefinitions,GroupDefinition innerGroupDef,Map valueExprMap,SeriesDefinition baseSD) throws DataException {
  for (Iterator iter=seriesDefinitions.iterator(); iter.hasNext(); ) {
    SeriesDefinition orthSD=(SeriesDefinition)iter.next();
    String expr=((Query)orthSD.getDesignTimeSeries().getDataDefinition().get(0)).getDefinition();
    if (expr != null && !""String_Node_Str"".equals(expr)) {
      String aggName=ChartUtil.getAggregateFuncExpr(orthSD,baseSD);
      if (aggName != null && !""String_Node_Str"".equals(aggName)) {
        String name=generateUniqueBindingName(expr);
        Binding colBinding=new Binding(name);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(new ScriptExpression(expr));
        if (innerGroupDef != null) {
          colBinding.addAggregateOn(innerGroupDef.getName());
        }
        try {
          colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
          IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
          if (aFunc.getParametersCount() > 0) {
            Object[] parameters=getAggFunParameters(orthSD,baseSD);
            for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
              String param=(String)parameters[i];
              colBinding.addArgument(new ScriptExpression(param));
            }
          }
        }
 catch (        ChartException e) {
          logger.log(e);
        }
        String newExpr=getExpressionForEvaluator(name);
        ((Query)orthSD.getDesignTimeSeries().getDataDefinition().get(0)).setDefinition(newExpr);
        query.addBinding(colBinding);
        valueExprMap.put(expr,newExpr);
      }
    }
  }
}","/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws DataException 
 * @throws DataException
 */
protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList seriesDefinitions,GroupDefinition innerGroupDef,Map valueExprMap,SeriesDefinition baseSD) throws ChartException {
  for (Iterator iter=seriesDefinitions.iterator(); iter.hasNext(); ) {
    SeriesDefinition orthSD=(SeriesDefinition)iter.next();
    Series series=orthSD.getDesignTimeSeries();
    List qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    for (Iterator iter_datadef=series.getDataDefinition().iterator(); iter_datadef.hasNext(); ) {
      Query qry=(Query)iter_datadef.next();
      if (!qlist.contains(qry)) {
        continue;
      }
      String expr=qry.getDefinition();
      if (expr != null && !""String_Node_Str"".equals(expr)) {
        String aggName=ChartUtil.getAggregateFuncExpr(orthSD,baseSD);
        if (aggName != null && !""String_Node_Str"".equals(aggName)) {
          String name=generateUniqueBindingName(expr);
          Binding colBinding=new Binding(name);
          colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
          colBinding.setExpression(new ScriptExpression(expr));
          if (innerGroupDef != null) {
            try {
              colBinding.addAggregateOn(innerGroupDef.getName());
            }
 catch (            DataException e) {
              throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
            }
          }
          try {
            colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
            IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
            if (aFunc.getParametersCount() > 0) {
              Object[] parameters=getAggFunParameters(orthSD,baseSD);
              for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
                String param=(String)parameters[i];
                colBinding.addArgument(new ScriptExpression(param));
              }
            }
          }
 catch (          ChartException e) {
            logger.log(e);
          }
          String newExpr=getExpressionForEvaluator(name);
          qry.setDefinition(newExpr);
          try {
            query.addBinding(colBinding);
          }
 catch (          DataException e) {
            throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
          }
          valueExprMap.put(expr,newExpr);
        }
      }
    }
  }
}",0.7794209539679233
73744,"void setDataSet(String datasetName){
  boolean needClean=false;
  boolean needAddBinding=false;
  try {
    itemHandle.setCube(null);
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      itemHandle.setDataBindingReference(null);
    }
    if (datasetName == null) {
      if (getBoundDataSet() != null) {
        needClean=true;
      }
      itemHandle.setDataSet(null);
    }
 else {
      DataSetHandle dataset=getReportDesignHandle().findDataSet(datasetName);
      if (itemHandle.getDataSet() != dataset) {
        itemHandle.setDataSet(dataset);
        needClean=true;
        needAddBinding=true;
      }
    }
    if (needClean) {
      clearBindings();
    }
    if (needAddBinding) {
      generateBindings();
    }
  }
 catch (  SemanticException e) {
    ChartWizard.showException(e.getLocalizedMessage());
  }
}","void setDataSet(String datasetName){
  boolean needClean=false;
  boolean needAddBinding=false;
  try {
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setCube(null);
    if (datasetName == null) {
      if (getBoundDataSet() != null) {
        needClean=true;
      }
      itemHandle.setDataSet(null);
    }
 else {
      DataSetHandle dataset=getReportDesignHandle().findDataSet(datasetName);
      if (itemHandle.getDataSet() != dataset) {
        itemHandle.setDataSet(dataset);
        needClean=true;
        needAddBinding=true;
      }
    }
    if (needClean) {
      clearBindings();
    }
    if (needAddBinding) {
      generateBindings();
    }
  }
 catch (  SemanticException e) {
    ChartWizard.showException(e.getLocalizedMessage());
  }
}",0.965675057208238
73745,"void setDataCube(String cubeName){
  try {
    itemHandle.setDataSet(null);
    itemHandle.setDataBindingReference(null);
    if (cubeName == null) {
      itemHandle.setCube(null);
    }
 else {
      if (!cubeName.equals(getDataCube())) {
        itemHandle.setCube(getReportDesignHandle().findCube(cubeName));
        clearBindings();
      }
    }
  }
 catch (  SemanticException e) {
    ChartWizard.showException(e.getLocalizedMessage());
  }
}","void setDataCube(String cubeName){
  try {
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setDataSet(null);
    if (cubeName == null) {
      itemHandle.setCube(null);
    }
 else {
      if (!cubeName.equals(getDataCube())) {
        itemHandle.setCube(getReportDesignHandle().findCube(cubeName));
        clearBindings();
      }
    }
  }
 catch (  SemanticException e) {
    ChartWizard.showException(e.getLocalizedMessage());
  }
}",0.8047808764940239
73746,"public void handleEvent(Event event){
  fbException=false;
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        if (header.getMenu() == null) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        header.getMenu().setVisible(true);
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnFilters,EVENT_UPDATE);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnParameters,EVENT_UPDATE);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnBinding,EVENT_UPDATE);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        cmbDataItems.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        getDataServiceProvider().setReportItemReference(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        setEnabledForButtons();
        updateDragDataSource();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=(Integer)selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=(Integer)selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
updateDragDataSource();
setEnabledForButtons();
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
}
}
 else if (event.widget == btnNewData) {
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
String currentDataSet=cmbDataItems.getText();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setText(currentDataSet);
}
}
 catch (ChartException e1) {
fbException=true;
ChartWizard.showException(e1.getLocalizedMessage());
}
}
if (!fbException) {
WizardBase.removeException();
}
}","public void handleEvent(Event event){
  fbException=false;
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        if (header.getMenu() == null) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        header.getMenu().setVisible(true);
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        cmbDataItems.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        getDataServiceProvider().setReportItemReference(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        setEnabledForButtons();
        updateDragDataSource();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=(Integer)selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=(Integer)selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
updateDragDataSource();
setEnabledForButtons();
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnNewData) {
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
String currentDataSet=cmbDataItems.getText();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setText(currentDataSet);
}
}
 catch (ChartException e1) {
fbException=true;
ChartWizard.showException(e1.getLocalizedMessage());
}
}
if (!fbException) {
WizardBase.removeException();
}
}",0.9922219341457093
73747,"void fireEvent(Widget widget,int eventType){
  Event event=new Event();
  event.data=this;
  event.widget=widget;
  event.type=eventType;
  notifyListeners(eventType,event);
}","void fireEvent(Widget widget,int eventType){
  Event event=new Event();
  event.data=this;
  event.widget=widget;
  event.type=eventType;
  notifyListeners(event);
}",0.9705882352941176
73748,"public Composite createDataSelector(Composite parent){
  Composite cmpDataSet=ChartUIUtil.createCompositeWrapper(parent);
{
    cmpDataSet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label label=new Label(cmpDataSet,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  Composite cmpDetail=new Composite(cmpDataSet,SWT.NONE);
{
    GridLayout gridLayout=new GridLayout(3,false);
    gridLayout.marginWidth=10;
    gridLayout.marginHeight=0;
    cmpDetail.setLayout(gridLayout);
    cmpDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Composite compRadios=ChartUIUtil.createCompositeWrapper(cmpDetail);
{
    GridData gd=new GridData();
    gd.verticalSpan=2;
    compRadios.setLayoutData(gd);
  }
  btnInherit=new Button(compRadios,SWT.RADIO);
  btnInherit.setText(Messages.getString(""String_Node_Str""));
  btnInherit.addListener(SWT.Selection,this);
  btnUseData=new Button(compRadios,SWT.RADIO);
  btnUseData.setText(Messages.getString(""String_Node_Str""));
  btnUseData.addListener(SWT.Selection,this);
  new Label(cmpDetail,SWT.NONE);
  new Label(cmpDetail,SWT.NONE);
  cmbDataItems=new Combo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY);
  cmbDataItems.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbDataItems.addListener(SWT.Selection,this);
  btnNewData=new Button(cmpDetail,SWT.NONE);
{
    btnNewData.setText(Messages.getString(""String_Node_Str""));
    btnNewData.setToolTipText(Messages.getString(""String_Node_Str""));
    btnNewData.addListener(SWT.Selection,this);
  }
  initDataSelector();
  return cmpDataSet;
}","public Composite createDataSelector(Composite parent){
  Composite cmpDataSet=ChartUIUtil.createCompositeWrapper(parent);
{
    cmpDataSet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label label=new Label(cmpDataSet,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  Composite cmpDetail=new Composite(cmpDataSet,SWT.NONE);
{
    GridLayout gridLayout=new GridLayout(3,false);
    gridLayout.marginWidth=10;
    gridLayout.marginHeight=0;
    cmpDetail.setLayout(gridLayout);
    cmpDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Composite compRadios=ChartUIUtil.createCompositeWrapper(cmpDetail);
{
    GridData gd=new GridData();
    gd.verticalSpan=2;
    compRadios.setLayoutData(gd);
  }
  btnInherit=new Button(compRadios,SWT.RADIO);
  btnInherit.setText(Messages.getString(""String_Node_Str""));
  btnInherit.addListener(SWT.Selection,this);
  btnUseData=new Button(compRadios,SWT.RADIO);
  btnUseData.setText(Messages.getString(""String_Node_Str""));
  btnUseData.addListener(SWT.Selection,this);
  new Label(cmpDetail,SWT.NONE);
  new Label(cmpDetail,SWT.NONE);
  cmbDataItems=new Combo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY);
  cmbDataItems.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbDataItems.addListener(SWT.Selection,this);
  btnNewData=new Button(cmpDetail,SWT.NONE);
{
    btnNewData.setText(Messages.getString(""String_Node_Str""));
    btnNewData.setToolTipText(Messages.getString(""String_Node_Str""));
    btnNewData.addListener(SWT.Selection,this);
  }
  initDataSelector();
  updatePredefinedQueries();
  return cmpDataSet;
}",0.9912466042861456
73749,"private void switchDataSet(String datasetName) throws ChartException {
  if (isCubeMode()) {
    return;
  }
  try {
    tablePreview.clearContents();
    if (datasetName == null) {
      datasetName=getDataServiceProvider().getReportDataSet();
    }
    if (datasetName != null) {
      switchDataTable();
    }
 else {
      tablePreview.createDummyTable();
    }
    tablePreview.layout();
  }
 catch (  Throwable t) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,t);
  }
  DataDefinitionTextManager.getInstance().refreshAll();
  fireEvent(tablePreview,EVENT_UPDATE);
}","private void switchDataSet(String datasetName) throws ChartException {
  if (isCubeMode()) {
    return;
  }
  try {
    tablePreview.clearContents();
    if (datasetName == null) {
      datasetName=getDataServiceProvider().getReportDataSet();
    }
    if (datasetName != null) {
      switchDataTable();
    }
 else {
      tablePreview.createDummyTable();
    }
    tablePreview.layout();
  }
 catch (  Throwable t) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,t);
  }
  DataDefinitionTextManager.getInstance().refreshAll();
  fireEvent(tablePreview,EVENT_PREVIEW);
}",0.990916597853014
73750,"public void notifyListeners(int eventType,Event event){
  for (Iterator iterator=listeners.iterator(); iterator.hasNext(); ) {
    ((Listener)iterator.next()).handleEvent(event);
  }
}","public void notifyListeners(Event event){
  for (Iterator iterator=listeners.iterator(); iterator.hasNext(); ) {
    ((Listener)iterator.next()).handleEvent(event);
  }
}",0.96045197740113
73751,"public void removeListener(int eventType,Listener listener){
  listeners.remove(listener);
}","public void removeListener(Listener listener){
  listeners.remove(listener);
}",0.9176470588235294
73752,"public void addListener(int eventType,Listener listener){
  listeners.add(listener);
}","public void addListener(Listener listener){
  if (!listeners.contains(listener)) {
    listeners.add(listener);
  }
}",0.7093596059113301
73753,"private final void updateOverlayAxes(AllAxes aax) throws ChartException, IllegalArgumentException {
  int iDirection=(aax.getOrientation() == HORIZONTAL) ? 1 : -1;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOverlayOrthogonal=cwa.getOrthogonalAxes(axPrimaryBase,false);
  OneAxis axOverlay, axPrimary=aax.getPrimaryOrthogonal();
  AutoScale scOA, sc=axPrimary.getScale();
  double dStart, dEnd;
  Object[] oaMinMax;
  int iAxisType=(aax.getOverlayCount() > 0) ? aax.getOverlay(0).getScale().getType() : 0;
  Label la;
  for (int i=0; i < aax.getOverlayCount(); i++) {
    axOverlay=aax.getOverlay(i);
    la=axOverlay.getLabel();
    scOA=axOverlay.getScale();
    scOA.setEndPoints(scOA.getStart() - scOA.getStartShift() * iDirection,scOA.getEnd() + scOA.getEndShift() * iDirection);
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    scOA.setEndPoints(dStart,dEnd);
    scOA.computeTicks(ids,la,axOverlay.getLabelPosition(),aax.getOrientation(),dStart,dEnd,false,null);
    if (!scOA.isStepFixed()) {
      oaMinMax=scOA.getMinMax();
      while (!scOA.checkFit(ids,la,axOverlay.getLabelPosition())) {
        if (!scOA.zoomOut()) {
          break;
        }
        scOA.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        scOA.computeTicks(ids,la,axOverlay.getLabelPosition(),aax.getOrientation(),dStart,dEnd,false,null);
      }
    }
    scOA.setData(getTypedDataSet(axaOverlayOrthogonal[i],iAxisType,0));
  }
}","private final void updateOverlayAxes(AllAxes aax) throws ChartException, IllegalArgumentException {
  int iDirection=(aax.getOrientation() == HORIZONTAL) ? 1 : -1;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOverlayOrthogonal=cwa.getOrthogonalAxes(axPrimaryBase,false);
  OneAxis axOverlay, axPrimary=aax.getPrimaryOrthogonal();
  AutoScale scOA, sc=axPrimary.getScale();
  double dStart, dEnd;
  Object[] oaMinMax;
  Label la;
  for (int i=0; i < aax.getOverlayCount(); i++) {
    axOverlay=aax.getOverlay(i);
    int iAxisType=axOverlay.getAxisType();
    la=axOverlay.getLabel();
    scOA=axOverlay.getScale();
    scOA.setEndPoints(scOA.getStart() - scOA.getStartShift() * iDirection,scOA.getEnd() + scOA.getEndShift() * iDirection);
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    scOA.setEndPoints(dStart,dEnd);
    scOA.computeTicks(ids,la,axOverlay.getLabelPosition(),aax.getOrientation(),dStart,dEnd,false,null);
    if (!scOA.isStepFixed()) {
      oaMinMax=scOA.getMinMax();
      while (!scOA.checkFit(ids,la,axOverlay.getLabelPosition())) {
        if (!scOA.zoomOut()) {
          break;
        }
        scOA.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        scOA.computeTicks(ids,la,axOverlay.getLabelPosition(),aax.getOrientation(),dStart,dEnd,false,null);
      }
    }
    scOA.setData(getTypedDataSet(axaOverlayOrthogonal[i],iAxisType,0));
  }
}",0.9540904383845358
73754,"/** 
 * Builds and computes preferred sizes of various chart components offscreen using the provided display server.
 * @param ids A display server using which the chart may be built.
 * @param cmDesignTime The design time chart model (bound to a dataset).
 * @param externalContext An external context object.
 * @param bo The bounds associated with the chart being built.
 * @param rtc Encapsulates the runtime environment for the build process.
 * @param externalProcessor An external style processor. If it's null, an implicit processor will be used.
 * @return An instance of a generated chart state that encapsulates builtchart information that may be subsequently rendered.
 * @throws ChartException
 */
public final GeneratedChartState build(IDisplayServer ids,Chart cmDesignTime,Bounds bo,IExternalContext externalContext,RunTimeContext rtc,IStyleProcessor externalProcessor) throws ChartException {
  if (ids == null || cmDesignTime == null || bo == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle());
  }
  if (rtc == null) {
    rtc=new RunTimeContext();
  }
  if (rtc.getULocale() == null) {
    rtc.setULocale(ULocale.getDefault());
  }
  IChartScriptContext icsc=rtc.getScriptContext();
  if (icsc == null) {
    ChartScriptContext csc=new ChartScriptContext();
    csc.setChartInstance((Chart)EcoreUtil.copy(cmDesignTime));
    csc.setExternalContext(externalContext);
    csc.setULocale(rtc.getULocale());
    csc.setLogger(logger);
    rtc.setScriptContext(csc);
    icsc=csc;
  }
 else   if (icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setLogger(logger);
  }
  if (externalContext != null && icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setExternalContext(externalContext);
  }
  final Chart cmRunTime=icsc.getChartInstance();
  ScriptHandler sh=rtc.getScriptHandler();
  if (sh == null) {
    sh=new ScriptHandler();
    rtc.setScriptHandler(sh);
    sh.setScriptClassLoader(rtc.getScriptClassLoader());
    sh.setScriptContext(icsc);
    final String sScriptContent=cmRunTime.getScript();
    if (externalContext != null && externalContext.getScriptable() != null) {
      sh.init(externalContext.getScriptable());
    }
 else {
      sh.init(null);
    }
    sh.setRunTimeModel(cmRunTime);
    if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
      sh.register(sScriptContent);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.START_GENERATION,cmRunTime);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_GENERATION,cmRunTime,rtc.getScriptContext());
  prepareStyles(cmRunTime,externalProcessor);
  int iChartType=UNDEFINED;
  Object oComputations=null;
  if (cmRunTime instanceof ChartWithAxes) {
    iChartType=WITH_AXES;
    try {
      if (cmRunTime.getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL) {
        oComputations=new PlotWith3DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
 else {
        oComputations=new PlotWith2DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
    }
 catch (    Exception e) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
    }
  }
 else   if (cmRunTime instanceof ChartWithoutAxes) {
    iChartType=WITHOUT_AXES;
    oComputations=new PlotWithoutAxes(ids,(ChartWithoutAxes)cmRunTime,rtc);
  }
  if (oComputations == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{cmRunTime},Messages.getResourceBundle(rtc.getULocale()));
  }
  final LinkedHashMap lhmRenderers=new LinkedHashMap();
  BaseRenderer[] brna=null;
  try {
    brna=BaseRenderer.instances(cmRunTime,rtc,oComputations);
    for (int i=0; i < brna.length; i++) {
      lhmRenderers.put(brna[i].getSeries(),new LegendItemRenderingHints(brna[i],BoundsImpl.create(0,0,0,0)));
    }
    rtc.setSeriesRenderers(lhmRenderers);
    rtc.setLegendLayoutHints(null);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  if (oComputations instanceof PlotWith2DAxes) {
    PlotWith2DAxes pwa=(PlotWith2DAxes)oComputations;
    pwa.initDynamicPlotBounds(bo);
  }
  Block bl=cmRunTime.getBlock();
  final LayoutManager lm=new LayoutManager(bl);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_LAYOUT,cmRunTime);
  lm.doLayout(ids,cmRunTime,bo,rtc);
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_LAYOUT,cmRunTime);
  Bounds boPlot=cmRunTime.getPlot().getBounds();
  Insets insPlot=cmRunTime.getPlot().getInsets();
  boPlot=boPlot.adjustedInstance(insPlot);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_COMPUTATIONS,cmRunTime,oComputations);
  long lTimer=System.currentTimeMillis();
  if (iChartType == WITH_AXES) {
    PlotWithAxes pwa=(PlotWithAxes)oComputations;
    try {
      pwa.compute(boPlot);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
 else   if (iChartType == WITHOUT_AXES) {
    PlotWithoutAxes pwoa=(PlotWithoutAxes)oComputations;
    try {
      pwoa.compute(boPlot);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_COMPUTATIONS,cmRunTime,oComputations);
  final Collection co=lhmRenderers.values();
  final LegendItemRenderingHints[] lirha=(LegendItemRenderingHints[])co.toArray(new LegendItemRenderingHints[co.size()]);
  final int iSize=lhmRenderers.size();
  BaseRenderer br;
  for (int i=0; i < iSize; i++) {
    br=lirha[i].getRenderer();
    br.set(brna);
    br.set(ids);
    br.set(rtc);
    try {
      if (br.getComputations() instanceof PlotWithoutAxes) {
        br.set(((PlotWithoutAxes)br.getComputations()).getSeriesRenderingHints(br.getSeries()));
      }
 else {
        br.set(((PlotWithAxes)br.getComputations()).getSeriesRenderingHints(br.getSeriesDefinition(),br.getSeries()));
      }
      ScriptHandler.callFunction(sh,ScriptHandler.START_COMPUTE_SERIES,br.getSeries());
      br.compute(bo,cmRunTime.getPlot(),br.getSeriesRenderingHints());
      ScriptHandler.callFunction(sh,ScriptHandler.FINISH_COMPUTE_SERIES,br.getSeries());
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Long(System.currentTimeMillis() - lTimer)},rtc.getULocale()));
  final GeneratedChartState gcs=new GeneratedChartState(ids,cmRunTime,lhmRenderers,rtc,oComputations);
  if (sh != null) {
    sh.setGeneratedChartState(gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.FINISH_GENERATION,gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_GENERATION,gcs,rtc.getScriptContext());
  }
  return gcs;
}","/** 
 * Builds and computes preferred sizes of various chart components offscreen using the provided display server.
 * @param ids A display server using which the chart may be built.
 * @param cmDesignTime The design time chart model (bound to a dataset).
 * @param externalContext An external context object.
 * @param bo The bounds associated with the chart being built.
 * @param rtc Encapsulates the runtime environment for the build process.
 * @param externalProcessor An external style processor. If it's null, an implicit processor will be used.
 * @return An instance of a generated chart state that encapsulates builtchart information that may be subsequently rendered.
 * @throws ChartException
 */
public final GeneratedChartState build(IDisplayServer ids,Chart cmDesignTime,Bounds bo,IExternalContext externalContext,RunTimeContext rtc,IStyleProcessor externalProcessor) throws ChartException {
  if (ids == null || cmDesignTime == null || bo == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle());
  }
  if (rtc == null) {
    rtc=new RunTimeContext();
  }
  if (rtc.getULocale() == null) {
    rtc.setULocale(ULocale.getDefault());
  }
  IChartScriptContext icsc=rtc.getScriptContext();
  if (icsc == null) {
    ChartScriptContext csc=new ChartScriptContext();
    csc.setChartInstance((Chart)EcoreUtil.copy(cmDesignTime));
    csc.setExternalContext(externalContext);
    csc.setULocale(rtc.getULocale());
    csc.setLogger(logger);
    rtc.setScriptContext(csc);
    icsc=csc;
  }
 else   if (icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setLogger(logger);
  }
  if (externalContext != null && icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setExternalContext(externalContext);
  }
  final Chart cmRunTime=icsc.getChartInstance();
  ScriptHandler sh=rtc.getScriptHandler();
  if (sh == null) {
    sh=new ScriptHandler();
    rtc.setScriptHandler(sh);
    sh.setScriptClassLoader(rtc.getScriptClassLoader());
    sh.setScriptContext(icsc);
    final String sScriptContent=cmRunTime.getScript();
    if (externalContext != null && externalContext.getScriptable() != null) {
      sh.init(externalContext.getScriptable());
    }
 else {
      sh.init(null);
    }
    sh.setRunTimeModel(cmRunTime);
    if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
      sh.register(null,sScriptContent);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.START_GENERATION,cmRunTime);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_GENERATION,cmRunTime,rtc.getScriptContext());
  prepareStyles(cmRunTime,externalProcessor);
  int iChartType=UNDEFINED;
  Object oComputations=null;
  if (cmRunTime instanceof ChartWithAxes) {
    iChartType=WITH_AXES;
    try {
      if (cmRunTime.getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL) {
        oComputations=new PlotWith3DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
 else {
        oComputations=new PlotWith2DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
    }
 catch (    Exception e) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
    }
  }
 else   if (cmRunTime instanceof ChartWithoutAxes) {
    iChartType=WITHOUT_AXES;
    oComputations=new PlotWithoutAxes(ids,(ChartWithoutAxes)cmRunTime,rtc);
  }
  if (oComputations == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{cmRunTime},Messages.getResourceBundle(rtc.getULocale()));
  }
  final LinkedHashMap lhmRenderers=new LinkedHashMap();
  BaseRenderer[] brna=null;
  try {
    brna=BaseRenderer.instances(cmRunTime,rtc,oComputations);
    for (int i=0; i < brna.length; i++) {
      lhmRenderers.put(brna[i].getSeries(),new LegendItemRenderingHints(brna[i],BoundsImpl.create(0,0,0,0)));
    }
    rtc.setSeriesRenderers(lhmRenderers);
    rtc.setLegendLayoutHints(null);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  if (oComputations instanceof PlotWith2DAxes) {
    PlotWith2DAxes pwa=(PlotWith2DAxes)oComputations;
    pwa.initDynamicPlotBounds(bo);
  }
  Block bl=cmRunTime.getBlock();
  final LayoutManager lm=new LayoutManager(bl);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_LAYOUT,cmRunTime);
  lm.doLayout(ids,cmRunTime,bo,rtc);
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_LAYOUT,cmRunTime);
  Bounds boPlot=cmRunTime.getPlot().getBounds();
  Insets insPlot=cmRunTime.getPlot().getInsets();
  boPlot=boPlot.adjustedInstance(insPlot);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_COMPUTATIONS,cmRunTime,oComputations);
  long lTimer=System.currentTimeMillis();
  if (iChartType == WITH_AXES) {
    PlotWithAxes pwa=(PlotWithAxes)oComputations;
    try {
      pwa.compute(boPlot);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
 else   if (iChartType == WITHOUT_AXES) {
    PlotWithoutAxes pwoa=(PlotWithoutAxes)oComputations;
    try {
      pwoa.compute(boPlot);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_COMPUTATIONS,cmRunTime,oComputations);
  final Collection co=lhmRenderers.values();
  final LegendItemRenderingHints[] lirha=(LegendItemRenderingHints[])co.toArray(new LegendItemRenderingHints[co.size()]);
  final int iSize=lhmRenderers.size();
  BaseRenderer br;
  for (int i=0; i < iSize; i++) {
    br=lirha[i].getRenderer();
    br.set(brna);
    br.set(ids);
    br.set(rtc);
    try {
      if (br.getComputations() instanceof PlotWithoutAxes) {
        br.set(((PlotWithoutAxes)br.getComputations()).getSeriesRenderingHints(br.getSeries()));
      }
 else {
        br.set(((PlotWithAxes)br.getComputations()).getSeriesRenderingHints(br.getSeriesDefinition(),br.getSeries()));
      }
      ScriptHandler.callFunction(sh,ScriptHandler.START_COMPUTE_SERIES,br.getSeries());
      br.compute(bo,cmRunTime.getPlot(),br.getSeriesRenderingHints());
      ScriptHandler.callFunction(sh,ScriptHandler.FINISH_COMPUTE_SERIES,br.getSeries());
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Long(System.currentTimeMillis() - lTimer)},rtc.getULocale()));
  final GeneratedChartState gcs=new GeneratedChartState(ids,cmRunTime,lhmRenderers,rtc,oComputations);
  if (sh != null) {
    sh.setGeneratedChartState(gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.FINISH_GENERATION,gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_GENERATION,gcs,rtc.getScriptContext());
  }
  return gcs;
}",0.9996386499963864
73755,"/** 
 * Register the script content for current script handler.
 * @param sScriptContent This is either the JavaSciprt code content or a full class name which has implemented <code>IChartItemScriptHandler</code>
 */
public final void register(String sScriptContent) throws ChartException {
  try {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    Class handlerClass=null;
    try {
      handlerClass=Class.forName(sScriptContent);
    }
 catch (    ClassNotFoundException ex) {
      if (iscl != null) {
        handlerClass=iscl.loadClass(sScriptContent,ScriptHandler.class.getClassLoader());
      }
 else {
        throw ex;
      }
    }
    if (IChartEventHandler.class.isAssignableFrom(handlerClass)) {
      try {
        javahandler=(IChartEventHandler)handlerClass.newInstance();
      }
 catch (      InstantiationException e) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.ERROR,e);
      }
catch (      IllegalAccessException e) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.ERROR,e);
      }
      logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",handlerClass,ULocale.getDefault()));
    }
 else {
      logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",handlerClass,ULocale.getDefault()));
    }
  }
 catch (  ClassNotFoundException e) {
    javahandler=null;
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    final Context cx=Context.enter();
    try {
      cx.evaluateString(scope,sScriptContent,""String_Node_Str"",1,null);
      logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
      Object[] objs=scope.getIds();
      if (objs != null) {
        javaScriptFunctionNamesCache=new ArrayList();
        for (int i=0; i < objs.length; i++) {
          javaScriptFunctionNamesCache.add(String.valueOf(objs[i]));
        }
      }
 else {
        javaScriptFunctionNamesCache=null;
      }
    }
 catch (    RhinoException jsx) {
      throw convertException(jsx);
    }
 finally {
      Context.exit();
    }
  }
}","/** 
 * Register the script content for current script handler.
 * @param sScriptContent This is either the JavaSciprt code content or a full class name which has implemented <code>IChartItemScriptHandler</code>
 */
public final void register(String sScriptName,String sScriptContent) throws ChartException {
  try {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    Class handlerClass=null;
    try {
      handlerClass=Class.forName(sScriptContent);
    }
 catch (    ClassNotFoundException ex) {
      if (iscl != null) {
        handlerClass=iscl.loadClass(sScriptContent,ScriptHandler.class.getClassLoader());
      }
 else {
        throw ex;
      }
    }
    if (IChartEventHandler.class.isAssignableFrom(handlerClass)) {
      try {
        javahandler=(IChartEventHandler)handlerClass.newInstance();
      }
 catch (      InstantiationException e) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.ERROR,e);
      }
catch (      IllegalAccessException e) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.ERROR,e);
      }
      logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",handlerClass,ULocale.getDefault()));
    }
 else {
      logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",handlerClass,ULocale.getDefault()));
    }
  }
 catch (  ClassNotFoundException e) {
    javahandler=null;
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    final Context cx=Context.enter();
    try {
      cx.evaluateString(scope,sScriptContent,sScriptName == null ? ""String_Node_Str"" : sScriptName,1,null);
      logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
      Object[] objs=scope.getIds();
      if (objs != null) {
        javaScriptFunctionNamesCache=new ArrayList();
        for (int i=0; i < objs.length; i++) {
          javaScriptFunctionNamesCache.add(String.valueOf(objs[i]));
        }
      }
 else {
        javaScriptFunctionNamesCache=null;
      }
    }
 catch (    RhinoException jsx) {
      throw convertException(jsx);
    }
 finally {
      Context.exit();
    }
  }
}",0.987025241802312
73756,"private void initializeScriptHandler(BIRTExternalContext externalContext) throws ChartException {
  String javaHandlerClass=handle.getEventHandlerClass();
  if (javaHandlerClass != null && javaHandlerClass.length() > 0) {
    cm.setScript(javaHandlerClass);
  }
  rtc.setScriptClassLoader(new BIRTScriptClassLoader(appClassLoader));
  ScriptHandler sh=rtc.getScriptHandler();
  if (sh == null) {
    sh=new ScriptHandler();
    rtc.setScriptHandler(sh);
    sh.setScriptClassLoader(rtc.getScriptClassLoader());
    sh.setScriptContext(rtc.getScriptContext());
    final String sScriptContent=cm.getScript();
    if (externalContext != null && externalContext.getScriptable() != null) {
      sh.init(externalContext.getScriptable());
    }
 else {
      sh.init(null);
    }
    sh.setRunTimeModel(cm);
    if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
      sh.register(sScriptContent);
    }
  }
}","private void initializeScriptHandler(BIRTExternalContext externalContext) throws ChartException {
  String javaHandlerClass=handle.getEventHandlerClass();
  if (javaHandlerClass != null && javaHandlerClass.length() > 0) {
    cm.setScript(javaHandlerClass);
  }
  rtc.setScriptClassLoader(new BIRTScriptClassLoader(appClassLoader));
  ScriptHandler sh=rtc.getScriptHandler();
  if (sh == null) {
    sh=new ScriptHandler();
    rtc.setScriptHandler(sh);
    sh.setScriptClassLoader(rtc.getScriptClassLoader());
    sh.setScriptContext(rtc.getScriptContext());
    final String sScriptContent=cm.getScript();
    if (externalContext != null && externalContext.getScriptable() != null) {
      sh.init(externalContext.getScriptable());
    }
 else {
      sh.init(null);
    }
    sh.setRunTimeModel(cm);
    if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
      sh.register(ModuleUtil.getScriptUID(handle.getPropertyHandle(IReportItemModel.ON_RENDER_METHOD)),sScriptContent);
    }
  }
}",0.956830878618588
73757,"/** 
 * Evaluate a filter expression.
 * @param cx
 * @param filter
 * @return
 * @throws DataException
 */
private Object evaluteFilterExpression(Context cx,IFilterDefinition filter) throws DataException {
  IBaseExpression expr=filter.getExpression();
  FilterUtil.prepareFilterExpression(tempDir,expr,filterPass,this.populator.getEventHandler().getExecutorHelper());
  Object result=ScriptEvalUtil.evalExpr(expr,cx,this.groupProcessor.getExpressionProcessor().getScope(),""String_Node_Str"",0);
  if (result == null) {
    Object info=null;
    if (expr instanceof IScriptExpression)     info=((IScriptExpression)expr).getText();
 else     info=expr;
    throw new DataException(ResourceConstants.INVALID_EXPRESSION_IN_FILTER,info);
  }
  return result;
}","/** 
 * Evaluate a filter expression.
 * @param cx
 * @param filter
 * @return
 * @throws DataException
 */
private Object evaluteFilterExpression(Context cx,IFilterDefinition filter) throws DataException {
  IBaseExpression expr=filter.getExpression();
  FilterUtil.prepareFilterExpression(tempDir,expr,filterPass,this.populator.getEventHandler().getExecutorHelper());
  Object result=ScriptEvalUtil.evalExpr(expr,cx,this.groupProcessor.getExpressionProcessor().getScope(),ScriptExpression.defaultID,0);
  if (result == null) {
    Object info=null;
    if (expr instanceof IScriptExpression)     info=((IScriptExpression)expr).getText();
 else     info=expr;
    throw new DataException(ResourceConstants.INVALID_EXPRESSION_IN_FILTER,info);
  }
  return result;
}",0.9756738987508218
73758,"/** 
 * Add sort infos to GroupBoundaryInfo in groupArray.
 * @param cx
 * @param groupArray
 * @param groupPosition groupPosition = groupLevel - 1; it is 0-based;
 * @param groupIndex
 * @throws DataException
 */
private void populateGroupBoundaryInfoSortings(Context cx,List[] groupArray,int groupPosition,int groupIndex) throws DataException {
  Object[] sortKeys=new Object[this.populator.getQuery().getGrouping()[groupPosition].getSorts().size()];
  boolean[] sortDirections=new boolean[sortKeys.length];
  this.populator.getResultIterator().last(groupPosition + 1);
  for (int l=0; l < sortKeys.length; l++) {
    sortKeys[l]=ScriptEvalUtil.evalExpr(((ISortDefinition)this.populator.getQuery().getGrouping()[groupPosition].getSorts().get(l)).getExpression(),cx,this.groupProcessor.getExpressionProcessor().getScope(),""String_Node_Str"",0);
    sortDirections[l]=((ISortDefinition)this.populator.getQuery().getGrouping()[groupPosition].getSorts().get(l)).getSortDirection() == ISortDefinition.SORT_ASC ? true : false;
  }
  ((GroupBoundaryInfo)groupArray[groupPosition].get(groupIndex)).setSortCondition(sortKeys,sortDirections);
  this.populator.getResultIterator().next();
}","/** 
 * Add sort infos to GroupBoundaryInfo in groupArray.
 * @param cx
 * @param groupArray
 * @param groupPosition groupPosition = groupLevel - 1; it is 0-based;
 * @param groupIndex
 * @throws DataException
 */
private void populateGroupBoundaryInfoSortings(Context cx,List[] groupArray,int groupPosition,int groupIndex) throws DataException {
  Object[] sortKeys=new Object[this.populator.getQuery().getGrouping()[groupPosition].getSorts().size()];
  boolean[] sortDirections=new boolean[sortKeys.length];
  this.populator.getResultIterator().last(groupPosition + 1);
  for (int l=0; l < sortKeys.length; l++) {
    sortKeys[l]=ScriptEvalUtil.evalExpr(((ISortDefinition)this.populator.getQuery().getGrouping()[groupPosition].getSorts().get(l)).getExpression(),cx,this.groupProcessor.getExpressionProcessor().getScope(),ScriptExpression.defaultID,0);
    sortDirections[l]=((ISortDefinition)this.populator.getQuery().getGrouping()[groupPosition].getSorts().get(l)).getSortDirection() == ISortDefinition.SORT_ASC ? true : false;
  }
  ((GroupBoundaryInfo)groupArray[groupPosition].get(groupIndex)).setSortCondition(sortKeys,sortDirections);
  this.populator.getResultIterator().next();
}",0.9835373575348249
73759,"/** 
 * @see org.eclipse.birt.data.engine.expression.CompiledExpression#evaluate(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)
 */
public Object evaluate(Context context,Scriptable scope) throws DataException {
  StringBuffer expr=new StringBuffer(this.rowIndicator + ""String_Node_Str"");
  if (isIndexed()) {
    expr.append(m_columnIndex);
  }
 else {
    expr.append('""');
    expr.append(JavascriptEvalUtil.transformToJsConstants(m_columnName));
    expr.append('""');
  }
  expr.append(']');
  try {
    return DataTypeUtil.convert(ScriptEvalUtil.evaluateJSAsExpr(context,scope,expr.toString(),""String_Node_Str"",0),this.dataType);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @see org.eclipse.birt.data.engine.expression.CompiledExpression#evaluate(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)
 */
public Object evaluate(Context context,Scriptable scope) throws DataException {
  StringBuffer expr=new StringBuffer(this.rowIndicator + ""String_Node_Str"");
  if (isIndexed()) {
    expr.append(m_columnIndex);
  }
 else {
    expr.append('""');
    expr.append(JavascriptEvalUtil.transformToJsConstants(m_columnName));
    expr.append('""');
  }
  expr.append(']');
  try {
    return DataTypeUtil.convert(ScriptEvalUtil.evaluateJSAsExpr(context,scope,expr.toString(),ScriptExpression.defaultID,0),this.dataType);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9705277587388622
73760,"/** 
 * @param groupKeyValues
 * @param columnExprs
 * @param i
 * @return
 * @throws BirtException
 */
private boolean groupKeyValuesEqual(org.eclipse.birt.data.engine.odi.IResultIterator odiResult,Object[] groupKeyValues,String[] columnExprs,int i) throws BirtException {
  Object fieldValue=null;
  try {
    Context cx=Context.enter();
    fieldValue=ScriptEvalUtil.evalExpr(new ScriptExpression(columnExprs[i]),cx,ResultIterator.this.scope,""String_Node_Str"",0);
  }
  finally {
    Context.exit();
  }
  boolean retValue=false;
  if (fieldValue == groupKeyValues[i]) {
    retValue=true;
  }
 else   if (fieldValue != null && groupKeyValues[i] != null) {
    if (fieldValue.getClass().equals(groupKeyValues[i].getClass())) {
      retValue=isTwoObjectEqual(fieldValue,groupKeyValues[i]);
    }
 else {
      Object convertedOb=DataTypeUtil.convert(groupKeyValues[i],fieldValue.getClass());
      retValue=isTwoObjectEqual(fieldValue,convertedOb);
    }
  }
  return retValue;
}","/** 
 * @param groupKeyValues
 * @param columnExprs
 * @param i
 * @return
 * @throws BirtException
 */
private boolean groupKeyValuesEqual(org.eclipse.birt.data.engine.odi.IResultIterator odiResult,Object[] groupKeyValues,String[] columnExprs,int i) throws BirtException {
  Object fieldValue=null;
  try {
    Context cx=Context.enter();
    fieldValue=ScriptEvalUtil.evalExpr(new ScriptExpression(columnExprs[i]),cx,ResultIterator.this.scope,org.eclipse.birt.core.script.ScriptExpression.defaultID,0);
  }
  finally {
    Context.exit();
  }
  boolean retValue=false;
  if (fieldValue == groupKeyValues[i]) {
    retValue=true;
  }
 else   if (fieldValue != null && groupKeyValues[i] != null) {
    if (fieldValue.getClass().equals(groupKeyValues[i].getClass())) {
      retValue=isTwoObjectEqual(fieldValue,groupKeyValues[i]);
    }
 else {
      Object convertedOb=DataTypeUtil.convert(groupKeyValues[i],fieldValue.getClass());
      retValue=isTwoObjectEqual(fieldValue,convertedOb);
    }
  }
  return retValue;
}",0.965034965034965
73761,"/** 
 * Get the value of current column.
 * @return
 * @throws DataException
 */
public Object getColumnValue() throws DataException {
  Context cx=Context.enter();
  try {
    Object leftValue=ScriptEvalUtil.evalExpr(this.expr,cx,this.scope,""String_Node_Str"",0);
    return leftValue;
  }
  finally {
    Context.exit();
  }
}","/** 
 * Get the value of current column.
 * @return
 * @throws DataException
 */
public Object getColumnValue() throws DataException {
  Context cx=Context.enter();
  try {
    Object leftValue=ScriptEvalUtil.evalExpr(this.expr,cx,this.scope,ScriptExpression.defaultID,0);
    return leftValue;
  }
  finally {
    Context.exit();
  }
}",0.9441930618401206
73762,"public Object[] computeMeasureValues(IFacttableRow factTableRow) throws DataException {
  this.populator.setData(factTableRow);
  try {
    Context cx=Context.enter();
    Object[] result=new Object[this.measureInfos.length];
    for (int i=0; i < this.measureInfos.length; i++) {
      try {
        result[i]=ScriptEvalUtil.evalExpr((IBaseExpression)this.exprMap.get(this.measureInfos[i].getMeasureName()),cx,scope,null,0);
      }
 catch (      Exception e) {
        result[i]=null;
      }
    }
    return result;
  }
  finally {
    Context.exit();
  }
}","public Object[] computeMeasureValues(IFacttableRow factTableRow) throws DataException {
  this.populator.setData(factTableRow);
  try {
    Context cx=Context.enter();
    Object[] result=new Object[this.measureInfos.length];
    for (int i=0; i < this.measureInfos.length; i++) {
      try {
        result[i]=ScriptEvalUtil.evalExpr((IBaseExpression)this.exprMap.get(this.measureInfos[i].getMeasureName()),cx,scope,ScriptExpression.defaultID,0);
      }
 catch (      Exception e) {
        result[i]=null;
      }
    }
    return result;
  }
  finally {
    Context.exit();
  }
}",0.9737762237762236
73763,"public Object get(String aggrName,Scriptable scope){
  if (this.resultRow != null) {
    try {
      if (this.computedMeasures.containsKey(aggrName)) {
        try {
          Context cx=Context.enter();
          return ScriptEvalUtil.evalExpr(((IBaseExpression)this.computedMeasures.get(aggrName)),cx,this.scope,null,0);
        }
 catch (        Exception e) {
          return null;
        }
 finally {
          Context.exit();
        }
      }
      return this.resultRow.getMeasureValue(aggrName);
    }
 catch (    DataException e) {
      return null;
    }
  }
 else   return null;
}","public Object get(String aggrName,Scriptable scope){
  if (this.resultRow != null) {
    try {
      if (this.computedMeasures.containsKey(aggrName)) {
        try {
          Context cx=Context.enter();
          return ScriptEvalUtil.evalExpr(((IBaseExpression)this.computedMeasures.get(aggrName)),cx,this.scope,ScriptExpression.defaultID,0);
        }
 catch (        Exception e) {
          return null;
        }
 finally {
          Context.exit();
        }
      }
      return this.resultRow.getMeasureValue(aggrName);
    }
 catch (    DataException e) {
      return null;
    }
  }
 else   return null;
}",0.9752475247524752
73764,"public boolean evaluateFilter(IResultRow resultRow) throws DataException {
  super.setData(resultRow);
  Context cx=Context.enter();
  try {
    Object result=ScriptEvalUtil.evalExpr(expr,cx,scope,null,0);
    return DataTypeUtil.toBoolean(result).booleanValue();
  }
 catch (  IJSObjectPopulator.InMatchDimensionIndicator e) {
    return true;
  }
catch (  BirtException e) {
    throw DataException.wrap(e);
  }
 finally {
    Context.exit();
  }
}","public boolean evaluateFilter(IResultRow resultRow) throws DataException {
  super.setData(resultRow);
  Context cx=Context.enter();
  try {
    Object result=ScriptEvalUtil.evalExpr(expr,cx,scope,ScriptExpression.defaultID,0);
    return DataTypeUtil.toBoolean(result).booleanValue();
  }
 catch (  IJSObjectPopulator.InMatchDimensionIndicator e) {
    return true;
  }
catch (  BirtException e) {
    throw DataException.wrap(e);
  }
 finally {
    Context.exit();
  }
}",0.9674620390455532
73765,"public boolean evaluateFilter(IResultRow resultRow) throws DataException {
  super.setData(resultRow);
  Context cx=Context.enter();
  try {
    if (this.isAxisFilter) {
      for (int i=0; i < axisLevels.length; i++) {
        DimLevel level=new DimLevel(axisLevels[i]);
        if (CompareUtil.compare(resultRow.getFieldValue(level.toString()),axisValues[i]) != 0) {
          return false;
        }
      }
    }
    Object result=ScriptEvalUtil.evalExpr(expr,cx,scope,null,0);
    return DataTypeUtil.toBoolean(result).booleanValue();
  }
 catch (  IJSObjectPopulator.InMatchDimensionIndicator e) {
    return true;
  }
catch (  BirtException e) {
    throw DataException.wrap(e);
  }
 finally {
    Context.exit();
  }
}","public boolean evaluateFilter(IResultRow resultRow) throws DataException {
  super.setData(resultRow);
  Context cx=Context.enter();
  try {
    if (this.isAxisFilter) {
      for (int i=0; i < axisLevels.length; i++) {
        DimLevel level=new DimLevel(axisLevels[i]);
        if (CompareUtil.compare(resultRow.getFieldValue(level.toString()),axisValues[i]) != 0) {
          return false;
        }
      }
    }
    Object result=ScriptEvalUtil.evalExpr(expr,cx,scope,ScriptExpression.defaultID,0);
    return DataTypeUtil.toBoolean(result).booleanValue();
  }
 catch (  IJSObjectPopulator.InMatchDimensionIndicator e) {
    return true;
  }
catch (  BirtException e) {
    throw DataException.wrap(e);
  }
 finally {
    Context.exit();
  }
}",0.9796472184531886
73766,"public Object evaluateFilterExpr(IResultRow resultRow) throws DataException {
  super.setData(resultRow);
  Context cx=Context.enter();
  try {
    Object result=ScriptEvalUtil.evalExpr(((IConditionalExpression)expr).getExpression(),cx,scope,null,0);
    return result;
  }
 catch (  IJSObjectPopulator.InMatchDimensionIndicator e) {
    throw new DataException(e.getMessage());
  }
catch (  BirtException e) {
    throw DataException.wrap(e);
  }
 finally {
    Context.exit();
  }
}","public Object evaluateFilterExpr(IResultRow resultRow) throws DataException {
  super.setData(resultRow);
  Context cx=Context.enter();
  try {
    Object result=ScriptEvalUtil.evalExpr(((IConditionalExpression)expr).getExpression(),cx,scope,ScriptExpression.defaultID,0);
    return result;
  }
 catch (  IJSObjectPopulator.InMatchDimensionIndicator e) {
    throw new DataException(e.getMessage());
  }
catch (  BirtException e) {
    throw DataException.wrap(e);
  }
 finally {
    Context.exit();
  }
}",0.9696969696969696
73767,"/** 
 * @param cx
 * @throws DataException
 */
private void populateN(Context cx) throws DataException {
  Object o=ScriptEvalUtil.evalExpr(((IConditionalExpression)expr).getOperand1(),cx,scope,null,0);
  this.N=Double.valueOf(o.toString()).doubleValue();
}","/** 
 * @param cx
 * @throws DataException
 */
private void populateN(Context cx) throws DataException {
  Object o=ScriptEvalUtil.evalExpr(((IConditionalExpression)expr).getOperand1(),cx,scope,ScriptExpression.defaultID,0);
  this.N=Double.valueOf(o.toString()).doubleValue();
}",0.9440298507462688
73768,"/** 
 */
public Object evaluate(IResultRow resultRow) throws DataException {
  super.setData(resultRow);
  Context cx=Context.enter();
  try {
    return ScriptEvalUtil.evalExpr(expr,cx,scope,null,0);
  }
 catch (  IJSObjectPopulator.InMatchDimensionIndicator e) {
    return null;
  }
catch (  BirtException e) {
    throw DataException.wrap(e);
  }
 finally {
    Context.exit();
  }
}","/** 
 */
public Object evaluate(IResultRow resultRow) throws DataException {
  super.setData(resultRow);
  Context cx=Context.enter();
  try {
    return ScriptEvalUtil.evalExpr(expr,cx,scope,ScriptExpression.defaultID,0);
  }
 catch (  IJSObjectPopulator.InMatchDimensionIndicator e) {
    return null;
  }
catch (  BirtException e) {
    throw DataException.wrap(e);
  }
 finally {
    Context.exit();
  }
}",0.9623115577889448
73769,"/** 
 * Constructor
 * @param scope Javascript scope within which to execute JS code. This should bethe Javascript object implementing the data source or data set
 * @param scopeName A descriptive name describing the scope. This name is usedfor error reporting purposes. Example, ""DataSet(my_sql_dataset)"".
 */
public JSMethodRunner(Scriptable scope,String scopeName){
  this.scope=scope;
  this.scopeName=scopeName;
}","/** 
 * Constructor
 * @param scope Javascript scope within which to execute JS code. This should bethe Javascript object implementing the data source or data set
 * @param scopeName A descriptive name describing the scope. This name is usedfor error reporting purposes. Example, ""DataSet(my_sql_dataset)"".
 */
public JSMethodRunner(Scriptable scope,String scopeName){
  this.scope=scope;
}",0.9653465346534652
73770,"/** 
 * Executes a method script. Each script should be identified with a unique name within the scope (such as ""afterOpen"", ""onFetch"" etc.). This class  assumes that the content of a named method script is immutable, therefore it defines each named script only once.
 * @param methodName Identification of the script
 * @param script Script text
 * @return Return value from the script
 */
public Object runScript(String methodName,String script) throws BirtException {
  methodName=METHOD_NAME_PREFIX + methodName;
  String methodDesc=scopeName + ""String_Node_Str"" + methodName;
  Context cx=Context.enter();
  try {
    if (!scope.has(methodName,scope)) {
      String scriptText=""String_Node_Str"" + methodName + ""String_Node_Str""+ script+ ""String_Node_Str"";
      ScriptEvalUtil.evaluateJSAsExpr(cx,scope,scriptText,methodDesc,1);
    }
    String callScriptText=methodName + ""String_Node_Str"";
    Object result=ScriptEvalUtil.evaluateJSAsExpr(cx,scope,callScriptText,methodDesc,1);
    return result;
  }
  finally {
    Context.exit();
  }
}","/** 
 * Executes a method script. Each script should be identified with a unique name within the scope (such as ""afterOpen"", ""onFetch"" etc.). This class  assumes that the content of a named method script is immutable, therefore it defines each named script only once.
 * @param methodName Identification of the script
 * @param script Script text
 * @return Return value from the script
 */
public Object runScript(String methodName,String script) throws BirtException {
  methodName=METHOD_NAME_PREFIX + methodName;
  Context cx=Context.enter();
  try {
    if (!scope.has(methodName,scope)) {
      String scriptText=""String_Node_Str"" + methodName + ""String_Node_Str""+ script+ ""String_Node_Str"";
      ScriptEvalUtil.evaluateJSAsExpr(cx,scope,scriptText,ScriptExpression.defaultID,1);
    }
    String callScriptText=methodName + ""String_Node_Str"";
    Object result=ScriptEvalUtil.evaluateJSAsExpr(cx,scope,callScriptText,ScriptExpression.defaultID,1);
    return result;
  }
  finally {
    Context.exit();
  }
}",0.936046511627907
73771,"/** 
 * Evaluate the given value
 * @param value
 * @param n
 * @return
 * @throws DataException
 */
public boolean evaluate(Context cx,Scriptable scope) throws DataException {
  if (filterPassController.getForceReset()) {
    doReset();
    filterPassController.setForceReset(false);
  }
  if (N == -1) {
    Object n_object=null;
    try {
      n_object=ExprEvaluateUtil.evaluateRawExpression2(n_expr,scope);
    }
 catch (    BirtException e1) {
      throw DataException.wrap(e1);
    }
    double n_value=-1;
    try {
      n_value=DataTypeUtil.toDouble(n_object).doubleValue();
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_ARGUMENT,e);
    }
    if (n_percent) {
      if (n_value < 0 || n_value > 100)       throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_PERCENT_ARGUMENT);
      N=(int)Math.round(n_value / 100 * filterPassController.getRowCount());
    }
 else {
      if (n_value < 0)       throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_N_ARGUMENT);
      N=(int)n_value;
    }
  }
  Object value=ScriptEvalUtil.evalExpr(op_expr,cx,scope,""String_Node_Str"",0);
  if (filterPassController.getPassLevel() == FilterPassController.FIRST_PASS) {
    return doFirstPass(value);
  }
 else   if (filterPassController.getPassLevel() == FilterPassController.SECOND_PASS) {
    return doSecondPass();
  }
  return false;
}","/** 
 * Evaluate the given value
 * @param value
 * @param n
 * @return
 * @throws DataException
 */
public boolean evaluate(Context cx,Scriptable scope) throws DataException {
  if (filterPassController.getForceReset()) {
    doReset();
    filterPassController.setForceReset(false);
  }
  if (N == -1) {
    Object n_object=null;
    try {
      n_object=ExprEvaluateUtil.evaluateRawExpression2(n_expr,scope);
    }
 catch (    BirtException e1) {
      throw DataException.wrap(e1);
    }
    double n_value=-1;
    try {
      n_value=DataTypeUtil.toDouble(n_object).doubleValue();
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_ARGUMENT,e);
    }
    if (n_percent) {
      if (n_value < 0 || n_value > 100)       throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_PERCENT_ARGUMENT);
      N=(int)Math.round(n_value / 100 * filterPassController.getRowCount());
    }
 else {
      if (n_value < 0)       throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_N_ARGUMENT);
      N=(int)n_value;
    }
  }
  Object value=ScriptEvalUtil.evalExpr(op_expr,cx,scope,ScriptExpression.defaultID,0);
  if (filterPassController.getPassLevel() == FilterPassController.FIRST_PASS) {
    return doFirstPass(value);
  }
 else   if (filterPassController.getPassLevel() == FilterPassController.SECOND_PASS) {
    return doSecondPass();
  }
  return false;
}",0.9869211735595615
73772,"/** 
 * Adapts a model oda data set handle
 * @param modelDataSet model handle
 * @param propBindingScope Javascript scope in which to evaluate property binding expressions.If null, property binding is not resolved
 * @throws BirtException
 */
public OdaDataSetAdapter(OdaDataSetHandle modelDataSet,Scriptable propBindingScope) throws BirtException {
  super(modelDataSet.getQualifiedName());
  DataAdapterUtil.adaptBaseDataSet(modelDataSet,this);
  String queryTextBinding=modelDataSet.getPropertyBinding(OdaDataSet.QUERY_TEXT_PROP);
  if (propBindingScope != null && queryTextBinding != null && queryTextBinding.length() > 0) {
    String queryText=JavascriptEvalUtil.evaluateScript(null,propBindingScope,queryTextBinding,""String_Node_Str"",0).toString();
    setQueryText(queryText);
  }
 else {
    setQueryText(modelDataSet.getQueryText());
  }
  setExtensionID(modelDataSet.getExtensionID());
  setPrimaryResultSetName(modelDataSet.getResultSetName());
  Map staticProps=DataAdapterUtil.getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=modelDataSet.getPropertyBinding(propName);
      if (propBindingScope != null && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=JavascriptEvalUtil.evaluateScript(null,propBindingScope,bindingExpr,""String_Node_Str"",0).toString();
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
}","/** 
 * Adapts a model oda data set handle
 * @param modelDataSet model handle
 * @param propBindingScope Javascript scope in which to evaluate property binding expressions.If null, property binding is not resolved
 * @throws BirtException
 */
public OdaDataSetAdapter(OdaDataSetHandle modelDataSet,Scriptable propBindingScope) throws BirtException {
  super(modelDataSet.getQualifiedName());
  DataAdapterUtil.adaptBaseDataSet(modelDataSet,this);
  String queryTextBinding=modelDataSet.getPropertyBinding(OdaDataSet.QUERY_TEXT_PROP);
  if (propBindingScope != null && queryTextBinding != null && queryTextBinding.length() > 0) {
    String queryText=JavascriptEvalUtil.evaluateScript(null,propBindingScope,queryTextBinding,ScriptExpression.defaultID,0).toString();
    setQueryText(queryText);
  }
 else {
    setQueryText(modelDataSet.getQueryText());
  }
  setExtensionID(modelDataSet.getExtensionID());
  setPrimaryResultSetName(modelDataSet.getResultSetName());
  Map staticProps=DataAdapterUtil.getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=modelDataSet.getPropertyBinding(propName);
      if (propBindingScope != null && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=JavascriptEvalUtil.evaluateScript(null,propBindingScope,bindingExpr,ScriptExpression.defaultID,0).toString();
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
}",0.9790141532454856
73773,"/** 
 * Creates adaptor based on Model OdaDataSourceHandle.
 * @param source model handle
 * @param propBindingScope Javascript scope in which to evaluate property bindings. If null,property bindings are not evaluated.
 */
public OdaDataSourceAdapter(OdaDataSourceHandle source,Scriptable propBindingScope) throws BirtException {
  super(source.getQualifiedName());
  bindingScope=propBindingScope;
  DataAdapterUtil.adaptBaseDataSource(source,this);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new AdapterException(ResourceConstants.DATASOURCE_EXID_ERROR,source.getName());
  }
  setExtensionID(driverName);
  Map staticProps=DataAdapterUtil.getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (bindingScope != null && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=JavascriptEvalUtil.evaluateScript(null,bindingScope,bindingExpr,""String_Node_Str"",0).toString();
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(this);
}","/** 
 * Creates adaptor based on Model OdaDataSourceHandle.
 * @param source model handle
 * @param propBindingScope Javascript scope in which to evaluate property bindings. If null,property bindings are not evaluated.
 */
public OdaDataSourceAdapter(OdaDataSourceHandle source,Scriptable propBindingScope) throws BirtException {
  super(source.getQualifiedName());
  bindingScope=propBindingScope;
  DataAdapterUtil.adaptBaseDataSource(source,this);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new AdapterException(ResourceConstants.DATASOURCE_EXID_ERROR,source.getName());
  }
  setExtensionID(driverName);
  Map staticProps=DataAdapterUtil.getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (bindingScope != null && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=JavascriptEvalUtil.evaluateScript(null,bindingScope,bindingExpr,ScriptExpression.defaultID,0).toString();
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(this);
}",0.9877736707421098
73774,"/** 
 * Evaluates a property binding Javascript expression
 */
String evaluatePropertyBindingExpr(String expr) throws BirtException {
  Object result=JavascriptEvalUtil.evaluateScript(null,jsScope,expr,""String_Node_Str"",0);
  return result == null ? null : result.toString();
}","/** 
 * Evaluates a property binding Javascript expression
 */
String evaluatePropertyBindingExpr(String expr) throws BirtException {
  Object result=JavascriptEvalUtil.evaluateScript(null,jsScope,expr,org.eclipse.birt.core.script.ScriptExpression.defaultID,0);
  return result == null ? null : result.toString();
}",0.8851351351351351
73775,"/** 
 * evaluate conditional expression. A conditional expression can have an operator, one LHS expression, and up to two expressions on RHS, i.e., testExpr operator operand1 operand2 or testExpr between 1 20 Now only support comparison between the same data type
 * @param expr the conditional expression to be evaluated
 * @return a boolean value (as an Object)
 */
public Object evaluateCondExpr(IConditionalExpression expr) throws BirtException {
  IScriptExpression testExpr=expr.getExpression();
  if (testExpr == null)   return Boolean.FALSE;
  try {
    return ScriptEvalUtil.evalExpr(expr,scriptContext.getContext(),scriptContext.getScope(),null,0);
  }
 catch (  Exception e) {
    throw new EngineException(MessageConstants.INVALID_EXPRESSION_ERROR,expr,e);
  }
}","/** 
 * evaluate conditional expression. A conditional expression can have an operator, one LHS expression, and up to two expressions on RHS, i.e., testExpr operator operand1 operand2 or testExpr between 1 20 Now only support comparison between the same data type
 * @param expr the conditional expression to be evaluated
 * @return a boolean value (as an Object)
 */
public Object evaluateCondExpr(IConditionalExpression expr) throws BirtException {
  IScriptExpression testExpr=expr.getExpression();
  if (testExpr == null)   return Boolean.FALSE;
  try {
    return ScriptEvalUtil.evalExpr(expr,scriptContext.getContext(),scriptContext.getScope(),ScriptExpression.defaultID,0);
  }
 catch (  Exception e) {
    throw new EngineException(MessageConstants.INVALID_EXPRESSION_ERROR,expr,e);
  }
}",0.9808917197452228
73776,"/** 
 * Internally walks through the resultset and computes the group breaks cached for subsequent use
 * @param bGrouped Indicates if the resultset contains the group key
 * @return Row indexes containing changing group key values
 */
private int[] findGroupBreaks(List resultSet,GroupKey groupKey,SeriesGrouping seriesGrouping){
  if (groupKey == null || groupKey.getKey() == null) {
    return NO_GROUP_BREAKS;
  }
  boolean groupingEnabled=false;
  if (seriesGrouping != null && seriesGrouping.isEnabled()) {
    groupingEnabled=true;
  }
  GroupKey newGroupKey=groupKey;
  if (groupingEnabled && groupKey.getDirection() == null) {
    newGroupKey=new GroupKey(groupKey.getKey(),SortOption.ASCENDING_LITERAL);
    newGroupKey.setKeyIndex(groupKey.getKeyIndex());
  }
  Collections.sort(resultSet,new TupleComparator(new GroupKey[]{newGroupKey}));
  final int iColumnIndex=newGroupKey.getKeyIndex();
  final ArrayList alBreaks=new ArrayList(8);
  boolean bFirst=true;
  Object oValue, oPreviousValue=null;
  int iRowIndex=0;
  if (groupingEnabled) {
    resetGroupedData(resultSet,iColumnIndex,seriesGrouping);
    final Iterator it=resultSet.iterator();
    int intervalCount=0;
    int lastGroupIndex=0;
    double groupInterval=seriesGrouping.getGroupingInterval();
    while (it.hasNext()) {
      oValue=((Object[])it.next())[iColumnIndex];
      iRowIndex++;
      if (bFirst) {
        bFirst=false;
        oPreviousValue=oValue;
        if (seriesGrouping.getGroupType() == DataType.NUMERIC_LITERAL) {
          lastGroupIndex=(int)Math.floor(Math.abs((((Number)oValue).doubleValue() - BASE_START_INTERVAL_VALUE) / groupInterval));
        }
        continue;
      }
      if (compareObjects(oPreviousValue,oValue,seriesGrouping) != 0) {
        if (seriesGrouping.getGroupType() == DataType.NUMERIC_LITERAL) {
          if (groupInterval == 0) {
            alBreaks.add(new Integer(iRowIndex - 1));
          }
 else {
            int groupIndex=(int)Math.floor(Math.abs((((Number)oValue).doubleValue() - BASE_START_INTERVAL_VALUE) / groupInterval));
            if (lastGroupIndex != groupIndex) {
              alBreaks.add(new Integer(iRowIndex - 1));
            }
            lastGroupIndex=groupIndex;
          }
        }
 else         if (seriesGrouping.getGroupType() == DataType.DATE_TIME_LITERAL) {
          int cunit=GroupingUtil.groupingUnit2CDateUnit(seriesGrouping.getGroupingUnit());
          double diff=CDateTime.computeDifference((CDateTime)oValue,(CDateTime)oPreviousValue,cunit,true);
          if (diff != 0) {
            int groupingInterval=(int)seriesGrouping.getGroupingInterval();
            if (groupingInterval == 0) {
              alBreaks.add(new Integer(iRowIndex - 1));
            }
 else {
              if ((int)Math.floor(Math.abs(diff / groupingInterval)) > 0) {
                alBreaks.add(new Integer(iRowIndex - 1));
              }
            }
          }
        }
 else {
          if (seriesGrouping.getGroupingUnit() == GroupingUnitType.STRING_PREFIX_LITERAL) {
            alBreaks.add(new Integer(iRowIndex - 1));
          }
 else {
            if (intervalCount == (int)seriesGrouping.getGroupingInterval()) {
              alBreaks.add(new Integer(iRowIndex - 1));
              intervalCount=0;
            }
 else {
              intervalCount++;
            }
          }
        }
      }
      oPreviousValue=oValue;
    }
  }
 else {
    final Iterator it=resultSet.iterator();
    while (it.hasNext()) {
      oValue=((Object[])it.next())[iColumnIndex];
      iRowIndex++;
      if (bFirst) {
        bFirst=false;
        oPreviousValue=oValue;
        continue;
      }
      if (compareObjects(oPreviousValue,oValue) != 0) {
        alBreaks.add(new Integer(iRowIndex - 1));
      }
      oPreviousValue=oValue;
    }
  }
  final int[] ia=new int[alBreaks.size()];
  for (int i=0; i < alBreaks.size(); i++) {
    ia[i]=((Integer)alBreaks.get(i)).intValue();
  }
  return ia;
}","/** 
 * Internally walks through the resultset and computes the group breaks cached for subsequent use
 * @param bGrouped Indicates if the resultset contains the group key
 * @return Row indexes containing changing group key values
 */
private int[] findGroupBreaks(List resultSet,GroupKey groupKey,SeriesGrouping seriesGrouping){
  if (groupKey == null || groupKey.getKey() == null) {
    return NO_GROUP_BREAKS;
  }
  boolean groupingEnabled=false;
  if (seriesGrouping != null && seriesGrouping.isSetGroupType()) {
    groupingEnabled=true;
  }
  GroupKey newGroupKey=groupKey;
  if (groupingEnabled && groupKey.getDirection() == null) {
    newGroupKey=new GroupKey(groupKey.getKey(),SortOption.ASCENDING_LITERAL);
    newGroupKey.setKeyIndex(groupKey.getKeyIndex());
  }
  Collections.sort(resultSet,new TupleComparator(new GroupKey[]{newGroupKey}));
  final int iColumnIndex=newGroupKey.getKeyIndex();
  final ArrayList alBreaks=new ArrayList(8);
  boolean bFirst=true;
  Object oValue, oPreviousValue=null;
  int iRowIndex=0;
  if (groupingEnabled) {
    resetGroupedData(resultSet,iColumnIndex,seriesGrouping);
    final Iterator it=resultSet.iterator();
    int intervalCount=0;
    int lastGroupIndex=0;
    double groupInterval=seriesGrouping.getGroupingInterval();
    while (it.hasNext()) {
      oValue=((Object[])it.next())[iColumnIndex];
      iRowIndex++;
      if (bFirst) {
        bFirst=false;
        oPreviousValue=oValue;
        if (seriesGrouping.getGroupType() == DataType.NUMERIC_LITERAL) {
          lastGroupIndex=(int)Math.floor(Math.abs((((Number)oValue).doubleValue() - BASE_START_INTERVAL_VALUE) / groupInterval));
        }
        continue;
      }
      if (compareObjects(oPreviousValue,oValue,seriesGrouping) != 0) {
        if (seriesGrouping.getGroupType() == DataType.NUMERIC_LITERAL) {
          if (groupInterval == 0) {
            alBreaks.add(new Integer(iRowIndex - 1));
          }
 else {
            int groupIndex=(int)Math.floor(Math.abs((((Number)oValue).doubleValue() - BASE_START_INTERVAL_VALUE) / groupInterval));
            if (lastGroupIndex != groupIndex) {
              alBreaks.add(new Integer(iRowIndex - 1));
            }
            lastGroupIndex=groupIndex;
          }
        }
 else         if (seriesGrouping.getGroupType() == DataType.DATE_TIME_LITERAL) {
          int cunit=GroupingUtil.groupingUnit2CDateUnit(seriesGrouping.getGroupingUnit());
          double diff=CDateTime.computeDifference((CDateTime)oValue,(CDateTime)oPreviousValue,cunit,true);
          if (diff != 0) {
            int groupingInterval=(int)seriesGrouping.getGroupingInterval();
            if (groupingInterval == 0) {
              alBreaks.add(new Integer(iRowIndex - 1));
            }
 else {
              if ((int)Math.floor(Math.abs(diff / groupingInterval)) > 0) {
                alBreaks.add(new Integer(iRowIndex - 1));
              }
            }
          }
        }
 else {
          if (seriesGrouping.getGroupingUnit() == GroupingUnitType.STRING_PREFIX_LITERAL) {
            alBreaks.add(new Integer(iRowIndex - 1));
          }
 else {
            if (intervalCount == (int)seriesGrouping.getGroupingInterval()) {
              alBreaks.add(new Integer(iRowIndex - 1));
              intervalCount=0;
            }
 else {
              intervalCount++;
            }
          }
        }
      }
      oPreviousValue=oValue;
    }
  }
 else {
    final Iterator it=resultSet.iterator();
    while (it.hasNext()) {
      oValue=((Object[])it.next())[iColumnIndex];
      iRowIndex++;
      if (bFirst) {
        bFirst=false;
        oPreviousValue=oValue;
        continue;
      }
      if (compareObjects(oPreviousValue,oValue) != 0) {
        alBreaks.add(new Integer(iRowIndex - 1));
      }
      oPreviousValue=oValue;
    }
  }
  final int[] ia=new int[alBreaks.size()];
  for (int i=0; i < alBreaks.size(); i++) {
    ia[i]=((Integer)alBreaks.get(i)).intValue();
  }
  return ia;
}",0.9976031285480004
73777,"/** 
 * Gets the aggregation function expression
 * @param orthoSD
 * @param strBaseAggExp
 */
public static String getAggFuncExpr(SeriesDefinition orthoSD,String strBaseAggExp){
  String strOrthoAgg=null;
  SeriesGrouping grouping=orthoSD.getGrouping();
  if (strBaseAggExp != null) {
    strOrthoAgg=grouping.getAggregateExpression();
    if (strOrthoAgg == null || ""String_Node_Str"".equals(strOrthoAgg)) {
      strOrthoAgg=strBaseAggExp;
    }
  }
  return strOrthoAgg;
}","/** 
 * Gets the aggregation function expression
 * @param orthoSD
 * @param strBaseAggExp
 */
public static String getAggFuncExpr(SeriesDefinition orthoSD,String strBaseAggExp){
  String strOrthoAgg=null;
  SeriesGrouping grouping=orthoSD.getGrouping();
  if (grouping.isSetEnabled() && grouping.isEnabled()) {
    strOrthoAgg=grouping.getAggregateExpression();
  }
  if (strOrthoAgg == null || ""String_Node_Str"".equals(strOrthoAgg)) {
    strOrthoAgg=strBaseAggExp;
  }
  return strOrthoAgg;
}",0.8783505154639175
73778,"/** 
 * Generate grouping bindings and add into query definition.
 * @param query
 * @throws DataException
 */
protected void generateGroupBindings(BaseQueryDefinition query) throws DataException {
  SeriesDefinition baseSD=null;
  SeriesDefinition orthSD=null;
  Object[] orthAxisArray=null;
  if (fChartModel instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)fChartModel;
    baseSD=(SeriesDefinition)cwa.getBaseAxes()[0].getSeriesDefinitions().get(0);
    orthAxisArray=cwa.getOrthogonalAxes(cwa.getBaseAxes()[0],true);
    orthSD=(SeriesDefinition)((Axis)orthAxisArray[0]).getSeriesDefinitions().get(0);
  }
 else   if (fChartModel instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)fChartModel;
    baseSD=(SeriesDefinition)cwoa.getSeriesDefinitions().get(0);
    orthSD=(SeriesDefinition)baseSD.getSeriesDefinitions().get(0);
  }
  GroupDefinition yGroupingDefinition=createOrthogonalGroupingDefinition(orthSD);
  if (yGroupingDefinition != null) {
    query.addGroup(yGroupingDefinition);
    if (ChartReportItemUtil.isBaseGroupingDefined(baseSD) && orthSD.isSetSorting() && orthSD.getSortKey() != null) {
      String sortKey=orthSD.getSortKey().getDefinition();
      String yGroupingExpr=orthSD.getQuery().getDefinition();
      if (sortKey != null && !yGroupingExpr.equals(sortKey)) {
        String name=generateUniqueBindingName(sortKey);
        Binding binding=new Binding(name);
        query.addBinding(binding);
        binding.setExpression(new ScriptExpression(sortKey));
        binding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        binding.addAggregateOn(yGroupingDefinition.getName());
        String aggFunc=getAggFunExpr(sortKey,baseSD,orthAxisArray);
        binding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggFunc));
        SortDefinition sortDefinition=new SortDefinition();
        sortDefinition.setColumn(binding.getBindingName());
        sortDefinition.setExpression(ExpressionUtil.createRowExpression(binding.getBindingName()));
        sortDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(orthSD.getSorting()));
        yGroupingDefinition.addSort(sortDefinition);
      }
    }
  }
  GroupDefinition baseGroupDefinition=createBaseGroupingDefinition(baseSD);
  if (baseGroupDefinition != null) {
    query.addGroup(baseGroupDefinition);
  }
  GroupDefinition innerGroupDef=null;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    innerGroupDef=(GroupDefinition)query.getGroups().get(query.getGroups().size() - 1);
  }
  Map valueExprMap=new HashMap();
  if (fChartModel instanceof ChartWithAxes) {
    for (int i=0; i < orthAxisArray.length; i++) {
      addValueSeriesAggregateBindingForGrouping(query,((Axis)orthAxisArray[i]).getSeriesDefinitions(),baseGroupDefinition,valueExprMap,baseSD);
    }
  }
 else   if (fChartModel instanceof ChartWithoutAxes) {
    addValueSeriesAggregateBindingForGrouping(query,baseSD.getSeriesDefinitions(),baseGroupDefinition,valueExprMap,baseSD);
  }
  String baseSortExpr=getValidSortExpr(baseSD);
  if (baseSD.isSetSorting() && baseSortExpr != null) {
    if (ChartReportItemUtil.isBaseGroupingDefined(baseSD)) {
      String baseExpr=((Query)baseSD.getDesignTimeSeries().getDataDefinition().get(0)).getDefinition();
      if (baseExpr.equals(getValidSortExpr(baseSD))) {
        baseGroupDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(baseSD.getSorting()));
      }
 else {
        SortDefinition sd=new SortDefinition();
        sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(baseSD.getSorting()));
        String newValueSeriesExpr=(String)valueExprMap.get(baseSortExpr);
        if (newValueSeriesExpr != null) {
          baseSD.getSortKey().setDefinition(newValueSeriesExpr);
          sd.setExpression(newValueSeriesExpr);
        }
 else {
          sd.setExpression(baseSortExpr);
        }
        baseGroupDefinition.addSort(sd);
      }
    }
 else {
      SortDefinition sd=new SortDefinition();
      sd.setExpression(baseSortExpr);
      sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(baseSD.getSorting()));
      query.addSort(sd);
    }
  }
}","/** 
 * Generate grouping bindings and add into query definition.
 * @param query
 * @throws DataException
 */
protected void generateGroupBindings(BaseQueryDefinition query) throws DataException {
  SeriesDefinition baseSD=null;
  SeriesDefinition orthSD=null;
  Object[] orthAxisArray=null;
  if (fChartModel instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)fChartModel;
    baseSD=(SeriesDefinition)cwa.getBaseAxes()[0].getSeriesDefinitions().get(0);
    orthAxisArray=cwa.getOrthogonalAxes(cwa.getBaseAxes()[0],true);
    orthSD=(SeriesDefinition)((Axis)orthAxisArray[0]).getSeriesDefinitions().get(0);
  }
 else   if (fChartModel instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)fChartModel;
    baseSD=(SeriesDefinition)cwoa.getSeriesDefinitions().get(0);
    orthSD=(SeriesDefinition)baseSD.getSeriesDefinitions().get(0);
  }
  GroupDefinition yGroupingDefinition=createOrthogonalGroupingDefinition(orthSD);
  if (yGroupingDefinition != null) {
    query.addGroup(yGroupingDefinition);
    if (ChartReportItemUtil.isBaseGroupingDefined(baseSD) && orthSD.isSetSorting() && orthSD.getSortKey() != null) {
      String sortKey=orthSD.getSortKey().getDefinition();
      String yGroupingExpr=orthSD.getQuery().getDefinition();
      if (sortKey != null && !yGroupingExpr.equals(sortKey)) {
        String name=generateUniqueBindingName(sortKey);
        Binding binding=new Binding(name);
        query.addBinding(binding);
        binding.setExpression(new ScriptExpression(sortKey));
        binding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        binding.addAggregateOn(yGroupingDefinition.getName());
        String aggFunc=getAggFunExpr(sortKey,baseSD,orthAxisArray);
        binding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggFunc));
        SortDefinition sortDefinition=new SortDefinition();
        sortDefinition.setColumn(binding.getBindingName());
        sortDefinition.setExpression(ExpressionUtil.createRowExpression(binding.getBindingName()));
        sortDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(orthSD.getSorting()));
        yGroupingDefinition.addSort(sortDefinition);
      }
    }
  }
  GroupDefinition baseGroupDefinition=createBaseGroupingDefinition(baseSD);
  if (baseGroupDefinition != null) {
    query.addGroup(baseGroupDefinition);
  }
  GroupDefinition innerGroupDef=null;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    innerGroupDef=(GroupDefinition)query.getGroups().get(query.getGroups().size() - 1);
  }
  Map valueExprMap=new HashMap();
  if (fChartModel instanceof ChartWithAxes) {
    for (int i=0; i < orthAxisArray.length; i++) {
      addValueSeriesAggregateBindingForGrouping(query,((Axis)orthAxisArray[i]).getSeriesDefinitions(),innerGroupDef,valueExprMap,baseSD);
    }
  }
 else   if (fChartModel instanceof ChartWithoutAxes) {
    addValueSeriesAggregateBindingForGrouping(query,baseSD.getSeriesDefinitions(),innerGroupDef,valueExprMap,baseSD);
  }
  String baseSortExpr=getValidSortExpr(baseSD);
  if (baseSD.isSetSorting() && baseSortExpr != null) {
    if (ChartReportItemUtil.isBaseGroupingDefined(baseSD)) {
      String baseExpr=((Query)baseSD.getDesignTimeSeries().getDataDefinition().get(0)).getDefinition();
      if (baseExpr.equals(getValidSortExpr(baseSD))) {
        baseGroupDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(baseSD.getSorting()));
      }
 else {
        SortDefinition sd=new SortDefinition();
        sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(baseSD.getSorting()));
        String newValueSeriesExpr=(String)valueExprMap.get(baseSortExpr);
        if (newValueSeriesExpr != null) {
          baseSD.getSortKey().setDefinition(newValueSeriesExpr);
          sd.setExpression(newValueSeriesExpr);
        }
 else {
          sd.setExpression(baseSortExpr);
        }
        baseGroupDefinition.addSort(sd);
      }
    }
 else {
      SortDefinition sd=new SortDefinition();
      sd.setExpression(baseSortExpr);
      sd.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(baseSD.getSorting()));
      query.addSort(sd);
    }
  }
}",0.9962049335863378
73779,"/** 
 * Create Y grouping definition.
 * @param orthSD
 * @return
 */
private GroupDefinition createOrthogonalGroupingDefinition(SeriesDefinition orthSD){
  if (ChartReportItemUtil.isYGroupingDefined(orthSD)) {
    DataType dataType=null;
    GroupingUnitType groupUnit=null;
    double groupIntervalRange=0;
    String yGroupExpr=orthSD.getQuery().getDefinition();
    if (orthSD.getGrouping() != null && orthSD.getGrouping().isEnabled()) {
      dataType=orthSD.getGrouping().getGroupType();
      groupUnit=orthSD.getGrouping().getGroupingUnit();
      groupIntervalRange=orthSD.getGrouping().getGroupingInterval();
    }
    String name=generateUniqueBindingName(yGroupExpr);
    GroupDefinition yGroupDefinition=new GroupDefinition(name);
    yGroupDefinition.setKeyExpression(yGroupExpr);
    yGroupDefinition.setInterval(ChartReportItemUtil.convertToDtEGroupUnit(dataType,groupUnit,groupIntervalRange));
    yGroupDefinition.setIntervalRange(ChartReportItemUtil.convertToDtEIntervalRange(dataType,groupUnit,groupIntervalRange));
    if (orthSD.isSetSorting()) {
      yGroupDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(orthSD.getSorting()));
    }
    return yGroupDefinition;
  }
  return null;
}","/** 
 * Create Y grouping definition.
 * @param orthSD
 * @return
 */
private GroupDefinition createOrthogonalGroupingDefinition(SeriesDefinition orthSD){
  if (ChartReportItemUtil.isYGroupingDefined(orthSD)) {
    DataType dataType=null;
    GroupingUnitType groupUnit=null;
    double groupIntervalRange=0;
    String yGroupExpr=orthSD.getQuery().getDefinition();
    if (orthSD.getGrouping() != null && orthSD.getGrouping().isSetGroupType()) {
      dataType=orthSD.getGrouping().getGroupType();
      groupUnit=orthSD.getGrouping().getGroupingUnit();
      groupIntervalRange=orthSD.getGrouping().getGroupingInterval();
    }
    String name=generateUniqueBindingName(yGroupExpr);
    GroupDefinition yGroupDefinition=new GroupDefinition(name);
    yGroupDefinition.setKeyExpression(yGroupExpr);
    yGroupDefinition.setInterval(ChartReportItemUtil.convertToDtEGroupUnit(dataType,groupUnit,groupIntervalRange));
    yGroupDefinition.setIntervalRange(ChartReportItemUtil.convertToDtEIntervalRange(dataType,groupUnit,groupIntervalRange));
    if (orthSD.isSetSorting()) {
      yGroupDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(orthSD.getSorting()));
    }
    return yGroupDefinition;
  }
  return null;
}",0.9923108053419668
73780,"/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param baseGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws DataException
 */
protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList seriesDefinitions,GroupDefinition baseGroupDef,Map valueExprMap,SeriesDefinition baseSD) throws DataException {
  for (Iterator iter=seriesDefinitions.iterator(); iter.hasNext(); ) {
    SeriesDefinition orthSD=(SeriesDefinition)iter.next();
    String expr=((Query)orthSD.getDesignTimeSeries().getDataDefinition().get(0)).getDefinition();
    if (expr != null && !""String_Node_Str"".equals(expr)) {
      String aggName=getAggFunExpr(orthSD,baseSD);
      if (aggName != null && !""String_Node_Str"".equals(aggName)) {
        String name=generateUniqueBindingName(expr);
        Binding colBinding=new Binding(name);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(new ScriptExpression(expr));
        if (baseGroupDef != null) {
          colBinding.addAggregateOn(baseGroupDef.getName());
        }
        try {
          colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
          IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
          if (aFunc.getParametersCount() > 0) {
            Object[] parameters=getAggFunParameters(orthSD,baseSD);
            for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
              String param=(String)parameters[i];
              colBinding.addArgument(new ScriptExpression(param));
            }
          }
        }
 catch (        ChartException e) {
          logger.log(e);
        }
        String newExpr=getExpressionForEvaluator(name);
        ((Query)orthSD.getDesignTimeSeries().getDataDefinition().get(0)).setDefinition(newExpr);
        query.addBinding(colBinding);
        valueExprMap.put(expr,newExpr);
      }
    }
  }
}","/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws DataException
 */
protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList seriesDefinitions,GroupDefinition innerGroupDef,Map valueExprMap,SeriesDefinition baseSD) throws DataException {
  for (Iterator iter=seriesDefinitions.iterator(); iter.hasNext(); ) {
    SeriesDefinition orthSD=(SeriesDefinition)iter.next();
    String expr=((Query)orthSD.getDesignTimeSeries().getDataDefinition().get(0)).getDefinition();
    if (expr != null && !""String_Node_Str"".equals(expr)) {
      String aggName=getAggFunExpr(orthSD,baseSD);
      if (aggName != null && !""String_Node_Str"".equals(aggName)) {
        String name=generateUniqueBindingName(expr);
        Binding colBinding=new Binding(name);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(new ScriptExpression(expr));
        if (innerGroupDef != null) {
          colBinding.addAggregateOn(innerGroupDef.getName());
        }
        try {
          colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
          IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
          if (aFunc.getParametersCount() > 0) {
            Object[] parameters=getAggFunParameters(orthSD,baseSD);
            for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
              String param=(String)parameters[i];
              colBinding.addArgument(new ScriptExpression(param));
            }
          }
        }
 catch (        ChartException e) {
          logger.log(e);
        }
        String newExpr=getExpressionForEvaluator(name);
        ((Query)orthSD.getDesignTimeSeries().getDataDefinition().get(0)).setDefinition(newExpr);
        query.addBinding(colBinding);
        valueExprMap.put(expr,newExpr);
      }
    }
  }
}",0.991150442477876
73781,"/** 
 * Create composite of group area.
 * @param cmpBasic
 */
protected void createGroupArea(Composite cmpBasic){
  Composite cmpGrouping=new Composite(cmpBasic,SWT.NONE);
  GridData gdCMPGrouping=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPGrouping.horizontalSpan=2;
  cmpGrouping.setLayoutData(gdCMPGrouping);
  cmpGrouping.setLayout(new FillLayout());
  new SeriesGroupingComposite(cmpGrouping,SWT.NONE,getSeriesDefinitionForProcessing(),wizardContext.getModel() instanceof ChartWithoutAxes,fEnableAggregation,wizardContext,null);
}","/** 
 * Create composite of group area.
 * @param cmpBasic
 */
protected void createGroupArea(Composite cmpBasic){
  Composite cmpGrouping=new Composite(cmpBasic,SWT.NONE);
  GridData gdCMPGrouping=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPGrouping.horizontalSpan=2;
  cmpGrouping.setLayoutData(gdCMPGrouping);
  cmpGrouping.setLayout(new FillLayout());
  fGroupingComposite=new SeriesGroupingComposite(cmpGrouping,SWT.NONE,getSeriesDefinitionForProcessing(),wizardContext.getModel() instanceof ChartWithoutAxes,fEnableAggregation,wizardContext,null);
}",0.9826800364630812
73782,"private boolean isSetAggregate(){
  String agg=fGrouping.getAggregateExpression();
  return (agg != null && !""String_Node_Str"".equals(agg));
}","private boolean isSetAggregate(){
  return (fGrouping.isEnabled() && fGrouping.isSetEnabled());
}",0.5690376569037657
73783,"public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == fBtnAggEnabled) {
    populateAggFuncNames();
    if (!fBtnAggEnabled.getSelection()) {
      fGrouping.setAggregateExpression(null);
    }
 else {
      fGrouping.setAggregateExpression(((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()]);
    }
    setAggregatesState();
  }
 else   if (source == fCmbAggregate) {
    String aggFunc=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
    showAggregateParameters(aggFunc);
    fGrouping.setAggregateExpression(aggFunc);
  }
 else   if (isAggParametersWidget(source)) {
    setAggParameter((Text)source);
  }
 else   if (isBuilderBtnWidget(source)) {
    try {
      Text txtArg=(Text)fExprBuilderWidgetsMap.get(source);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
 else   if (source == fBtnOK) {
    fSeriesDefi.setGrouping(fGrouping);
    fSeriesDefi.getGrouping().eAdapters().addAll(fSeriesDefi.eAdapters());
    closeAggregateEditor(getShell());
  }
 else   if (source == fBtnCancel) {
    closeAggregateEditor(getShell());
  }
}","public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == fBtnAggEnabled) {
    fGrouping.setEnabled(fBtnAggEnabled.getSelection());
    populateAggFuncNames();
    setAggregatesState();
  }
 else   if (source == fCmbAggregate) {
    String aggFunc=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
    showAggregateParameters(aggFunc);
    fGrouping.setAggregateExpression(aggFunc);
  }
 else   if (isAggParametersWidget(source)) {
    setAggParameter((Text)source);
  }
 else   if (isBuilderBtnWidget(source)) {
    try {
      Text txtArg=(Text)fExprBuilderWidgetsMap.get(source);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
 else   if (source == fBtnOK) {
    fSeriesDefi.setGrouping(fGrouping);
    fSeriesDefi.getGrouping().eAdapters().addAll(fSeriesDefi.eAdapters());
    closeAggregateEditor(getShell());
  }
 else   if (source == fBtnCancel) {
    closeAggregateEditor(getShell());
  }
}",0.894395730080061
73784,"public void setEnabled(boolean enabled){
  super.setEnabled(enabled);
  fBtnAggImage.setEnabled(enabled);
}","public void setEnabled(boolean enabled){
  super.setEnabled(enabled);
  fBtnAggImage.setEnabled(enabled);
  fBtnDropDown.setEnabled(enabled);
}",0.856
73785,"private void placeComponents(){
  GridLayout glDropDown=new GridLayout();
  this.setLayout(glDropDown);
  fBtnAggEnabled=new Button(this,SWT.CHECK);
{
    fBtnAggEnabled.setText(Messages.getString(""String_Node_Str""));
    fBtnAggEnabled.setSelection(isSetAggregate());
    fBtnAggEnabled.addSelectionListener(this);
    fBtnAggEnabled.addListener(SWT.FocusOut,this);
    fBtnAggEnabled.addListener(SWT.Traverse,this);
    fBtnAggEnabled.setFocus();
  }
  fCmpAggregate=new Composite(this,SWT.NONE);
  GridData gdCMPAggregate=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPAggregate.horizontalSpan=2;
  fCmpAggregate.setLayoutData(gdCMPAggregate);
  GridLayout glAggregate=new GridLayout();
  glAggregate.numColumns=2;
  glAggregate.marginHeight=0;
  glAggregate.marginWidth=0;
  glAggregate.horizontalSpacing=5;
  glAggregate.verticalSpacing=5;
  fCmpAggregate.setLayout(glAggregate);
  fLabelAggregate=new Label(fCmpAggregate,SWT.NONE);
  GridData gdLBLAggregate=new GridData();
  fLabelAggregate.setLayoutData(gdLBLAggregate);
  fLabelAggregate.setText(Messages.getString(""String_Node_Str""));
  fCmbAggregate=new Combo(fCmpAggregate,SWT.DROP_DOWN | SWT.READ_ONLY);
  fCmbAggregate.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  fCmbAggregate.addSelectionListener(this);
  fCmbAggregate.addListener(SWT.FocusOut,this);
  fCmbAggregate.addListener(SWT.Traverse,this);
  fAggParameterComposite=new Composite(fCmpAggregate,SWT.NONE);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
  gridData.horizontalIndent=0;
  gridData.horizontalSpan=2;
  gridData.exclude=true;
  fAggParameterComposite.setLayoutData(gridData);
  GridLayout layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=3;
  fAggParameterComposite.setLayout(layout);
  ((GridData)fAggParameterComposite.getLayoutData()).heightHint=0;
  populateAggFuncNames();
  setAggregatesState();
  Composite btnComposite=new Composite(fCmpAggregate,SWT.NONE);
  gridData=new GridData(GridData.HORIZONTAL_ALIGN_END | GridData.VERTICAL_ALIGN_CENTER);
  gridData.horizontalIndent=0;
  gridData.horizontalSpan=2;
  btnComposite.setLayoutData(gridData);
  GridLayout glBtn=new GridLayout();
  glBtn.numColumns=2;
  glBtn.marginHeight=0;
  glBtn.marginWidth=0;
  glBtn.horizontalSpacing=5;
  glBtn.verticalSpacing=5;
  btnComposite.setLayout(glBtn);
  fBtnOK=new Button(btnComposite,SWT.NONE);
  GridData gd=new GridData();
  gd.widthHint=50;
  fBtnOK.setLayoutData(gd);
  fBtnOK.addSelectionListener(this);
  fBtnOK.setText(Messages.getString(""String_Node_Str""));
  fBtnCancel=new Button(btnComposite,SWT.NONE);
  gd=new GridData();
  gd.widthHint=50;
  fBtnCancel.setLayoutData(gd);
  fBtnCancel.addSelectionListener(this);
  fBtnCancel.setText(Messages.getString(""String_Node_Str""));
  getShell().pack();
}","private void placeComponents(){
  GridLayout glDropDown=new GridLayout();
  this.setLayout(glDropDown);
  fBtnAggEnabled=new Button(this,SWT.CHECK);
{
    fBtnAggEnabled.setText(Messages.getString(""String_Node_Str""));
    fBtnAggEnabled.addSelectionListener(this);
    fBtnAggEnabled.addListener(SWT.FocusOut,this);
    fBtnAggEnabled.addListener(SWT.Traverse,this);
    fBtnAggEnabled.setFocus();
    fBtnAggEnabled.setSelection(isSetAggregate());
  }
  fCmpAggregate=new Composite(this,SWT.NONE);
  GridData gdCMPAggregate=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPAggregate.horizontalSpan=2;
  fCmpAggregate.setLayoutData(gdCMPAggregate);
  GridLayout glAggregate=new GridLayout();
  glAggregate.numColumns=2;
  glAggregate.marginHeight=0;
  glAggregate.marginWidth=0;
  glAggregate.horizontalSpacing=5;
  glAggregate.verticalSpacing=5;
  fCmpAggregate.setLayout(glAggregate);
  fLabelAggregate=new Label(fCmpAggregate,SWT.NONE);
  GridData gdLBLAggregate=new GridData();
  fLabelAggregate.setLayoutData(gdLBLAggregate);
  fLabelAggregate.setText(Messages.getString(""String_Node_Str""));
  fCmbAggregate=new Combo(fCmpAggregate,SWT.DROP_DOWN | SWT.READ_ONLY);
  fCmbAggregate.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  fCmbAggregate.addSelectionListener(this);
  fCmbAggregate.addListener(SWT.FocusOut,this);
  fCmbAggregate.addListener(SWT.Traverse,this);
  fAggParameterComposite=new Composite(fCmpAggregate,SWT.NONE);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
  gridData.horizontalIndent=0;
  gridData.horizontalSpan=2;
  gridData.exclude=true;
  fAggParameterComposite.setLayoutData(gridData);
  GridLayout layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=3;
  fAggParameterComposite.setLayout(layout);
  ((GridData)fAggParameterComposite.getLayoutData()).heightHint=0;
  populateAggFuncNames();
  setAggregatesState();
  Composite btnComposite=new Composite(fCmpAggregate,SWT.NONE);
  gridData=new GridData(GridData.HORIZONTAL_ALIGN_END | GridData.VERTICAL_ALIGN_CENTER);
  gridData.horizontalIndent=0;
  gridData.horizontalSpan=2;
  btnComposite.setLayoutData(gridData);
  GridLayout glBtn=new GridLayout();
  glBtn.numColumns=2;
  glBtn.marginHeight=0;
  glBtn.marginWidth=0;
  glBtn.horizontalSpacing=5;
  glBtn.verticalSpacing=5;
  btnComposite.setLayout(glBtn);
  fBtnOK=new Button(btnComposite,SWT.NONE);
  GridData gd=new GridData();
  gd.widthHint=50;
  fBtnOK.setLayoutData(gd);
  fBtnOK.addSelectionListener(this);
  fBtnOK.setText(Messages.getString(""String_Node_Str""));
  fBtnCancel=new Button(btnComposite,SWT.NONE);
  gd=new GridData();
  gd.widthHint=50;
  fBtnCancel.setLayoutData(gd);
  fBtnCancel.addSelectionListener(this);
  fBtnCancel.setText(Messages.getString(""String_Node_Str""));
  getShell().pack();
}",0.9820232640112796
73786,"protected void handleGroupAction(){
  SeriesDefinition sdBackup=(SeriesDefinition)EcoreUtil.copy(seriesdefinition);
  GroupSortingDialog groupDialog=createGroupSortingDialog(sdBackup);
  if (groupDialog.open() == Window.OK) {
    if (!sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
    }
 else {
      seriesdefinition.setSorting(sdBackup.getSorting());
    }
    ChartAdapter.beginIgnoreNotifications();
    List sds=ChartUIUtil.getAllOrthogonalSeriesDefinitions(context.getModel());
    for (int i=0; i < sds.size(); i++) {
      if (i != 0) {
        SeriesDefinition sdf=(SeriesDefinition)sds.get(i);
        if (!sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
          sdf.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
        }
 else {
          sdf.setSorting(sdBackup.getSorting());
        }
      }
    }
    ChartAdapter.endIgnoreNotifications();
    seriesdefinition.setSortKey(sdBackup.getSortKey());
    seriesdefinition.getSortKey().eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setGrouping(sdBackup.getGrouping());
    seriesdefinition.getGrouping().eAdapters().addAll(seriesdefinition.eAdapters());
  }
}","protected void handleGroupAction(){
  SeriesDefinition sdBackup=(SeriesDefinition)EcoreUtil.copy(seriesdefinition);
  GroupSortingDialog groupDialog=createGroupSortingDialog(sdBackup);
  if (groupDialog.open() == Window.OK) {
    if (!sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
    }
 else {
      seriesdefinition.setSorting(sdBackup.getSorting());
    }
    ChartAdapter.beginIgnoreNotifications();
    List sds=ChartUIUtil.getAllOrthogonalSeriesDefinitions(context.getModel());
    for (int i=0; i < sds.size(); i++) {
      if (i != 0) {
        SeriesDefinition sdf=(SeriesDefinition)sds.get(i);
        if (!sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
          sdf.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
        }
 else {
          sdf.setSorting(sdBackup.getSorting());
        }
      }
    }
    ChartAdapter.endIgnoreNotifications();
    seriesdefinition.setSortKey(sdBackup.getSortKey());
    seriesdefinition.getSortKey().eAdapters().addAll(seriesdefinition.eAdapters());
    sdBackup.getGrouping().eUnset(DataPackage.eINSTANCE.getSeriesGrouping_Enabled());
    sdBackup.getGrouping().setEnabled(false);
    seriesdefinition.setGrouping(sdBackup.getGrouping());
    seriesdefinition.getGrouping().eAdapters().addAll(seriesdefinition.eAdapters());
  }
}",0.920704845814978
73787,"/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel,boolean forceAdd) throws SemanticException {
  if (crosstab == null || measureView == null)   return;
  AggregationCellHandle cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  if (cell == null && forceAdd) {
    cell=measureView.addAggregation(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell != null && cell.getContents().size() == 0) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    column.setAggregateFunction(function != null ? function : getDefaultMeasureAggregationFunction(measureView));
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
    dataItem.setResultSetColumn(columnHandle.getName());
    cell.addContent(dataItem);
  }
}","/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel,boolean forceAdd) throws SemanticException {
  if (crosstab == null || measureView == null)   return;
  if (cell == null) {
    cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell == null && forceAdd) {
    cell=measureView.addAggregation(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell != null && cell.getContents().size() == 0) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    column.setAggregateFunction(function != null ? function : getDefaultMeasureAggregationFunction(measureView));
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
    dataItem.setResultSetColumn(columnHandle.getName());
    cell.addContent(dataItem);
  }
}",0.965557845157492
73788,"public static void addDataItem(CrosstabReportItemHandle crosstab,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  CrosstabModelUtil.addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel,false);
}","public static void addDataItem(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  CrosstabModelUtil.addDataItem(crosstab,cell,measureView,function,rowDimension,rowLevel,colDimension,colLevel,false);
}",0.953216374269006
73789,"private void createTextView(AggregationCellHandle cell) throws SemanticException {
  CrosstabReportItemHandle crosstab=cell.getCrosstab();
  MeasureViewHandle measureView=(MeasureViewHandle)cell.getContainer();
  LevelHandle rowLevelHandle=cell.getAggregationOnRow();
  LevelHandle colLevelHandle=cell.getAggregationOnColumn();
  String rowLevel=rowLevelHandle == null ? null : rowLevelHandle.getName();
  String colLevel=colLevelHandle == null ? null : colLevelHandle.getName();
  String rowDimension=null;
  String colDimension=null;
  if (rowLevelHandle != null && rowLevelHandle.getContainer() != null && rowLevelHandle.getContainer().getContainer() != null) {
    rowDimension=rowLevelHandle.getContainer().getContainer().getName();
  }
  if (colLevelHandle != null && colLevelHandle.getContainer() != null && colLevelHandle.getContainer().getContainer() != null) {
    colDimension=colLevelHandle.getContainer().getContainer().getName();
  }
  CrosstabUtil.addDataItem(crosstab,measureView,null,rowDimension,rowLevel,colDimension,colLevel);
}","private void createTextView(AggregationCellHandle cell) throws SemanticException {
  CrosstabReportItemHandle crosstab=cell.getCrosstab();
  MeasureViewHandle measureView=(MeasureViewHandle)cell.getContainer();
  LevelHandle rowLevelHandle=cell.getAggregationOnRow();
  LevelHandle colLevelHandle=cell.getAggregationOnColumn();
  String rowLevel=rowLevelHandle == null ? null : rowLevelHandle.getName();
  String colLevel=colLevelHandle == null ? null : colLevelHandle.getName();
  String rowDimension=null;
  String colDimension=null;
  if (rowLevelHandle != null && rowLevelHandle.getContainer() != null && rowLevelHandle.getContainer().getContainer() != null) {
    rowDimension=rowLevelHandle.getContainer().getContainer().getName();
  }
  if (colLevelHandle != null && colLevelHandle.getContainer() != null && colLevelHandle.getContainer().getContainer() != null) {
    colDimension=colLevelHandle.getContainer().getContainer().getName();
  }
  CrosstabUtil.addDataItem(crosstab,cell,measureView,null,rowDimension,rowLevel,colDimension,colLevel);
}",0.997620180866254
73790,"/** 
 * @param dataSetDesign
 * @param cacheOption
 * @param alwaysCacheRowCount
 * @return
 */
public boolean needsToCache(IBaseDataSetDesign dataSetDesign,int cacheOption,int alwaysCacheRowCount){
  return needsToDteCache() || DataSetCacheUtil.needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount);
}","/** 
 * @param dataSetDesign
 * @param cacheOption
 * @param alwaysCacheRowCount
 * @return
 */
public boolean needsToCache(IBaseDataSetDesign dataSetDesign,int cacheOption,int alwaysCacheRowCount){
  return needsToDteCache(dataSetDesign) || needsToJVMCache(dataSetDesign,cacheOption,alwaysCacheRowCount);
}",0.946341463414634
73791,"/** 
 * Construction
 */
public DataSetCacheManager(String tempDir,DataEngine dataEngine){
  this.tempDir=tempDir;
  this.dataSourceDesign=null;
  this.dataSetDesign=null;
  this.cacheOption=DataEngineContext.CACHE_USE_DEFAULT;
  this.alwaysCacheRowCount=0;
  this.JVMLevelCacheMapManager=new CacheMapManager(tempDir,true);
  this.DteLevelCacheMapManager=new CacheMapManager(tempDir,false);
  this.mode=DataEngineContext.CACHE_MODE_IN_DISK;
}","/** 
 * Construction
 */
public DataSetCacheManager(String tempDir,DataEngineImpl dataEngine){
  this.tempDir=tempDir;
  this.dataSourceDesign=null;
  this.dataSetDesign=null;
  this.cacheOption=DataEngineContext.CACHE_USE_DEFAULT;
  this.alwaysCacheRowCount=0;
  this.JVMLevelCacheMapManager=new CacheMapManager(tempDir,true);
  this.DteLevelCacheMapManager=new CacheMapManager(tempDir,false);
  this.mode=DataEngineContext.CACHE_MODE_IN_DISK;
  this.queryExecutionHints=dataEngine.getExecutionHints();
}",0.9334741288278776
73792,"/** 
 * @param dataSetDesign
 * @return
 */
private boolean needsToJVMCache(IBaseDataSetDesign dataSetDesign){
  return DataSetCacheUtil.needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount);
}","/** 
 * @param dataSetDesign
 * @return
 */
private boolean needsToJVMCache(IBaseDataSetDesign dataSetDesign,int cacheOption,int alwaysCacheRowCount){
  return DataSetCacheUtil.needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount);
}",0.908675799086758
73793,"/** 
 * @param dataSetDesign
 */
private void switchCacheMap(IBaseDataSetDesign dataSetDesign){
  if (needsToJVMCache(dataSetDesign)) {
    cacheMapManager=JVMLevelCacheMapManager;
  }
 else {
    cacheMapManager=DteLevelCacheMapManager;
  }
}","/** 
 * @param dataSetDesign
 */
private void switchCacheMap(IBaseDataSetDesign dataSetDesign){
  if (needsToJVMCache(dataSetDesign,cacheOption,alwaysCacheRowCount)) {
    cacheMapManager=JVMLevelCacheMapManager;
  }
 else {
    cacheMapManager=DteLevelCacheMapManager;
  }
}",0.9382239382239382
73794,"/** 
 * @return
 */
private boolean needsToDteCache(){
  return false;
}","/** 
 * @return
 */
private boolean needsToDteCache(IBaseDataSetDesign dataSetDesign){
  if (queryExecutionHints == null || dataSetDesign == null)   return false;
  return this.queryExecutionHints.needCacheDataSet(dataSetDesign.getName());
}",0.4153354632587859
73795,"/** 
 * Returns the runtime defn of a data source. If data source is not found, returns null.
 */
DataSourceRuntime getDataSourceRuntime(String name) throws DataException {
  if (!dataSources.containsKey(name))   throw new DataException(ResourceConstants.UNDEFINED_DATA_SOURCE);
  return (DataSourceRuntime)dataSources.get(name);
}","/** 
 * Returns the runtime defn of a data source. If data source is not found, returns null.
 */
DataSourceRuntime getDataSourceRuntime(String name){
  return (DataSourceRuntime)dataSources.get(name);
}",0.5917602996254682
73796,"/** 
 * Return whether a data set need to be cached during query execution.
 * @param dataSetName
 * @return
 * @throws DataException
 */
public IQueryExecutionHints getExecutionHints() throws DataException {
  if (this.queryExecutionHints == null)   return new QueryExecutionHints(this,null);
  return this.queryExecutionHints;
}","/** 
 * Return whether a data set need to be cached during query execution.
 * @param dataSetName
 * @return
 */
public IQueryExecutionHints getExecutionHints(){
  return this.queryExecutionHints;
}",0.75
73797,"/** 
 * Returns the design of a data set. If data set is not found, returns null.
 */
IBaseDataSetDesign getDataSetDesign(String name) throws DataException {
  if (!dataSetDesigns.containsKey(name))   throw new DataException(ResourceConstants.UNDEFINED_DATA_SET);
  return (IBaseDataSetDesign)dataSetDesigns.get(name);
}","/** 
 * Returns the design of a data set. If data set is not found, returns null.
 */
IBaseDataSetDesign getDataSetDesign(String name){
  return (IBaseDataSetDesign)dataSetDesigns.get(name);
}",0.75
73798,"public void registerQueries(IDataQueryDefinition[] queryDefns) throws DataException {
  this.queryExecutionHints=new QueryExecutionHints(this,queryDefns);
}","public void registerQueries(IDataQueryDefinition[] queryDefns) throws DataException {
  ((QueryExecutionHints)queryExecutionHints).populateCachedDataSets(this,queryDefns);
}",0.8206686930091185
73799,"/** 
 * convert a object to given class Classes supported: Integer.class BigDecimal.class Boolean.class Time.class Date.class Double.class String.class Blob.class
 * @param source
 * @param toTypeClass
 * @return
 * @throws BirtException
 */
public static Object convert(Object source,Class toTypeClass) throws BirtException {
  if (toTypeClass == DataType.getClass(DataType.ANY_TYPE))   return source;
  if (toTypeClass == Integer.class)   return toInteger(source);
  if (toTypeClass == BigDecimal.class)   return toBigDecimal(source);
  if (toTypeClass == Boolean.class)   return toBoolean(source);
  if (toTypeClass == Time.class)   return toSqlTime(source);
  if (toTypeClass == java.sql.Date.class)   return toSqlDate(source);
  if (toTypeClass == java.sql.Timestamp.class)   return toDate(source);
  if (toTypeClass == Date.class)   return toDate(source);
  if (toTypeClass == Double.class)   return toDouble(source);
  if (toTypeClass == String.class)   return toString(source);
  if (toTypeClass == Blob.class)   return toBlob(source);
  if (toTypeClass == byte[].class)   return source;
  throw new CoreException(ResourceConstants.INVALID_TYPE,resourceBundle);
}","/** 
 * convert a object to given class Classes supported: Integer.class BigDecimal.class Boolean.class Time.class Date.class Double.class String.class Blob.class
 * @param source
 * @param toTypeClass
 * @return
 * @throws BirtException
 */
public static Object convert(Object source,Class toTypeClass) throws BirtException {
  if (toTypeClass == DataType.getClass(DataType.ANY_TYPE))   return source;
  if (toTypeClass == Integer.class)   return toInteger(source);
  if (toTypeClass == BigDecimal.class)   return toBigDecimal(source);
  if (toTypeClass == Boolean.class)   return toBoolean(source);
  if (toTypeClass == Time.class)   return toSqlTime(source);
  if (toTypeClass == java.sql.Date.class)   return toSqlDate(source);
  if (toTypeClass == java.sql.Timestamp.class)   return toDate(source);
  if (toTypeClass == Date.class)   return toDate(source);
  if (toTypeClass == Double.class)   return toDouble(source);
  if (toTypeClass == String.class)   return toString(source);
  if (toTypeClass == Blob.class) {
    if (source instanceof byte[])     return source;
 else     return toBlob(source);
  }
  if (toTypeClass == byte[].class)   return source;
  throw new CoreException(ResourceConstants.INVALID_TYPE,resourceBundle);
}",0.9721876297218764
73800,"protected boolean processOnMouseOver(ShapedAction sa,HTMLTag tag){
  Action ac=sa.getActionForCondition(TriggerCondition.ONMOUSEOVER_LITERAL);
  if (checkSupportedAction(ac)) {
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
      return false;
case ActionType.SHOW_TOOLTIP:
    TooltipValue tv=(TooltipValue)ac.getValue();
  if (tv.getText() != null && tv.getText().length() > 0) {
    tag.addAttribute(HTMLAttribute.TITLE,eval2HTML(tv.getText()));
    return true;
  }
return false;
case ActionType.INVOKE_SCRIPT:
final DataPointHints dph;
if (StructureType.SERIES_DATA_POINT.equals(sa.getSource().getType())) {
dph=(DataPointHints)sa.getSource().getSource();
}
 else {
dph=null;
}
String callbackFunction=getJSMethodName(TriggerCondition.ONMOUSEOVER_LITERAL,sa) + ""String_Node_Str"";
callbackFunction=ScriptUtil.script(callbackFunction,dph);
callbackFunction+=""String_Node_Str"";
tag.addAttribute(HTMLAttribute.ONMOUSEOVER,eval2JS(callbackFunction,true));
return true;
}
}
return false;
}","protected boolean processOnMouseOver(ShapedAction sa,HTMLTag tag){
  Action ac=sa.getActionForCondition(TriggerCondition.ONMOUSEOVER_LITERAL);
  if (checkSupportedAction(ac)) {
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
      return false;
case ActionType.SHOW_TOOLTIP:
    TooltipValue tv=(TooltipValue)ac.getValue();
  if (tv.getText() != null && tv.getText().length() > 0) {
    tag.addAttribute(HTMLAttribute.TITLE,eval2HTML(tv.getText()));
    return true;
  }
return false;
case ActionType.INVOKE_SCRIPT:
final DataPointHints dph;
if (StructureType.SERIES_DATA_POINT.equals(sa.getSource().getType())) {
dph=(DataPointHints)sa.getSource().getSource();
}
 else {
dph=null;
}
StringBuffer callbackFunction=new StringBuffer(getJSMethodName(TriggerCondition.ONMOUSEOVER_LITERAL,sa));
callbackFunction.append(""String_Node_Str"");
ScriptUtil.script(callbackFunction,dph);
callbackFunction.append(""String_Node_Str"");
tag.addAttribute(HTMLAttribute.ONMOUSEOVER,eval2JS(callbackFunction.toString(),true));
return true;
}
}
return false;
}",0.8617176128093159
73801,"private boolean processCommonEvent(ShapedAction sa,HTMLTag tag,TriggerCondition condition,HTMLAttribute htmlAttr){
  Action ac=sa.getActionForCondition(condition);
  if (checkSupportedAction(ac)) {
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
      URLValue uv=(URLValue)ac.getValue();
    if (condition == TriggerCondition.ONCLICK_LITERAL) {
      tag.addAttribute(HTMLAttribute.HREF,eval2HTML(uv.getBaseUrl()));
      tag.addAttribute(HTMLAttribute.TARGET,eval2HTML(uv.getTarget()));
    }
 else {
      tag.addAttribute(HTMLAttribute.HREF,NO_OP_JAVASCRIPT);
      String value=getJsURLRedirect(uv);
      if (htmlAttr.equals(HTMLAttribute.ONFOCUS)) {
        value=""String_Node_Str"" + value;
      }
      tag.addAttribute(htmlAttr,value);
    }
  return true;
case ActionType.SHOW_TOOLTIP:
return false;
case ActionType.INVOKE_SCRIPT:
tag.addAttribute(HTMLAttribute.HREF,NO_OP_JAVASCRIPT);
final DataPointHints dph;
if (StructureType.SERIES_DATA_POINT.equals(sa.getSource().getType())) {
dph=(DataPointHints)sa.getSource().getSource();
}
 else {
dph=null;
}
String callbackFunction=getJSMethodName(condition,sa) + ""String_Node_Str"";
callbackFunction=ScriptUtil.script(callbackFunction,dph);
callbackFunction+=""String_Node_Str"";
tag.addAttribute(htmlAttr,eval2JS(callbackFunction,true));
return true;
}
}
return false;
}","private boolean processCommonEvent(ShapedAction sa,HTMLTag tag,TriggerCondition condition,HTMLAttribute htmlAttr){
  Action ac=sa.getActionForCondition(condition);
  if (checkSupportedAction(ac)) {
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
      URLValue uv=(URLValue)ac.getValue();
    if (condition == TriggerCondition.ONCLICK_LITERAL) {
      tag.addAttribute(HTMLAttribute.HREF,eval2HTML(uv.getBaseUrl()));
      tag.addAttribute(HTMLAttribute.TARGET,eval2HTML(uv.getTarget()));
    }
 else {
      tag.addAttribute(HTMLAttribute.HREF,NO_OP_JAVASCRIPT);
      String value=getJsURLRedirect(uv);
      if (htmlAttr.equals(HTMLAttribute.ONFOCUS)) {
        value=""String_Node_Str"" + value;
      }
      tag.addAttribute(htmlAttr,value);
    }
  return true;
case ActionType.SHOW_TOOLTIP:
return false;
case ActionType.INVOKE_SCRIPT:
tag.addAttribute(HTMLAttribute.HREF,NO_OP_JAVASCRIPT);
final DataPointHints dph;
if (StructureType.SERIES_DATA_POINT.equals(sa.getSource().getType())) {
dph=(DataPointHints)sa.getSource().getSource();
}
 else {
dph=null;
}
StringBuffer callbackFunction=new StringBuffer(getJSMethodName(condition,sa));
callbackFunction.append(""String_Node_Str"");
ScriptUtil.script(callbackFunction,dph);
callbackFunction.append(""String_Node_Str"");
tag.addAttribute(htmlAttr,eval2JS(callbackFunction.toString(),true));
return true;
}
}
return false;
}",0.9652650822669104
73802,"/** 
 * Add the value of categoryData, valueData, and valueSeriesName into script.
 * @param str
 * @param dph
 * @return the output script
 */
public static String script(String str,DataPointHints dph){
  if (dph != null) {
    str+=addDataValueToScript(dph.getBaseValue());
    str+=""String_Node_Str"";
    str+=addDataValueToScript(dph.getOrthogonalValue());
    str+=""String_Node_Str"";
    str+=addDataValueToScript(dph.getSeriesValue());
  }
  return str;
}","/** 
 * Add the value of categoryData, valueData, and valueSeriesName into script.
 * @param str
 * @param dph
 * @return the output script
 */
public static void script(StringBuffer str,DataPointHints dph){
  if (dph != null) {
    str.append(""String_Node_Str"");
    str.append(addDataValueToScript(dph.getBaseValue()));
    str.append(""String_Node_Str"");
    str.append(addDataValueToScript(dph.getOrthogonalValue()));
    str.append(""String_Node_Str"");
    str.append(addDataValueToScript(dph.getSeriesValue()));
  }
 else {
    str.append(""String_Node_Str"");
  }
}",0.7424684159378037
73803,"/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    boolean redirect=false;
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      if (tg.getAction().getType().getValue() == ActionType.URL_REDIRECT) {
        redirect=true;
        break;
      }
    }
    if (redirect) {
      Element aLink=svg_g2d.createElement(""String_Node_Str"");
      Element group=svg_g2d.createElement(""String_Node_Str"");
      group.appendChild(elm);
      aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
      aLink.appendChild(group);
      elm=group;
      hotspotLayer.appendChild(aLink);
    }
 else     hotspotLayer.appendChild(elm);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
        boolean bDblClick=false;
        if (scriptEvent.equals(""String_Node_Str"")) {
          scriptEvent=""String_Node_Str"";
          bDblClick=true;
        }
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          String componentId=null;
          if (src instanceof WrappedStructureSource) {
            componentId=findFirstComponentId((WrappedStructureSource)src);
          }
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            if (componentId != null)             elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + componentId + ""String_Node_Str"");
 else             elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            if (componentId != null) {
              elm.setAttribute(scriptEvent,wrapJS(bDblClick,""String_Node_Str"" + componentId + ""String_Node_Str""));
            }
 else {
              elm.setAttribute(scriptEvent,wrapJS(bDblClick,""String_Node_Str""));
            }
          }
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    elm.setAttribute(scriptEvent,wrapJS(bDblClick,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str""));
    elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    elm.setAttribute(scriptEvent,wrapJS(bDblClick,urlValue.getBaseUrl()));
    elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    String target=urlValue.getTarget();
    if (target == null)     target=""String_Node_Str"";
    String jsRedirect=""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"";
    elm.setAttribute(scriptEvent,wrapJS(bDblClick,""String_Node_Str"" + jsRedirect + ""String_Node_Str""+ jsRedirect+ ""String_Node_Str""));
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue(),bDblClick);
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode();
if (StructureType.SERIES_DATA_POINT.equals(src.getType())) {
final DataPointHints dph=(DataPointHints)src.getSource();
callbackFunction+=""String_Node_Str"";
callbackFunction=ScriptUtil.script(callbackFunction,dph);
}
callbackFunction+=""String_Node_Str"";
elm.setAttribute(scriptEvent,wrapJS(bDblClick,callbackFunction));
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
}
}","/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    boolean redirect=false;
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      if (tg.getAction().getType().getValue() == ActionType.URL_REDIRECT) {
        redirect=true;
        break;
      }
    }
    if (redirect) {
      Element aLink=svg_g2d.createElement(""String_Node_Str"");
      Element group=svg_g2d.createElement(""String_Node_Str"");
      group.appendChild(elm);
      aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
      aLink.appendChild(group);
      elm=group;
      hotspotLayer.appendChild(aLink);
    }
 else     hotspotLayer.appendChild(elm);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
        boolean bDblClick=false;
        if (scriptEvent.equals(""String_Node_Str"")) {
          scriptEvent=""String_Node_Str"";
          bDblClick=true;
        }
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          String componentId=null;
          if (src instanceof WrappedStructureSource) {
            componentId=findFirstComponentId((WrappedStructureSource)src);
          }
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            if (componentId != null)             elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + componentId + ""String_Node_Str"");
 else             elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            if (componentId != null) {
              elm.setAttribute(scriptEvent,wrapJS(bDblClick,""String_Node_Str"" + componentId + ""String_Node_Str""));
            }
 else {
              elm.setAttribute(scriptEvent,wrapJS(bDblClick,""String_Node_Str""));
            }
          }
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    elm.setAttribute(scriptEvent,wrapJS(bDblClick,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str""));
    elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    elm.setAttribute(scriptEvent,wrapJS(bDblClick,urlValue.getBaseUrl()));
    elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    String target=urlValue.getTarget();
    if (target == null)     target=""String_Node_Str"";
    String jsRedirect=""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"";
    elm.setAttribute(scriptEvent,wrapJS(bDblClick,""String_Node_Str"" + jsRedirect + ""String_Node_Str""+ jsRedirect+ ""String_Node_Str""));
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue(),bDblClick);
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
StringBuffer callbackFunction=new StringBuffer(""String_Node_Str"");
callbackFunction.append(Math.abs(script.hashCode()));
callbackFunction.append(""String_Node_Str"");
callbackFunction.append(src.getSource().hashCode());
if (StructureType.SERIES_DATA_POINT.equals(src.getType())) {
final DataPointHints dph=(DataPointHints)src.getSource();
ScriptUtil.script(callbackFunction,dph);
}
callbackFunction.append(""String_Node_Str"");
elm.setAttribute(scriptEvent,wrapJS(bDblClick,callbackFunction.toString()));
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
}
}",0.9614625532356912
73804,"/** 
 * Returns the categories list in BIRT chart expression builder
 * @param builderCommand
 * @return category style
 */
private int getExpressionBuilderStyle(int builderCommand){
  if (builderCommand == COMMAND_EXPRESSION_DATA_BINDINGS) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == COMMAND_EXPRESSION_CHART_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_CHART_VARIABLES;
  }
 else   if (builderCommand == COMMAND_EXPRESSION_TRIGGERS_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_CHART_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == COMMAND_EXPRESSION_TRIGGERS_SIMPLE) {
    return ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == COMMAND_HYPERLINK) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == COMMAND_HYPERLINK_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
  return ChartExpressionProvider.CATEGORY_BASE;
}","/** 
 * Returns the categories list in BIRT chart expression builder
 * @param builderCommand
 * @return category style
 */
private int getExpressionBuilderStyle(int builderCommand){
  if (builderCommand == COMMAND_EXPRESSION_DATA_BINDINGS) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == COMMAND_EXPRESSION_CHART_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_CHART_VARIABLES;
  }
 else   if (builderCommand == COMMAND_EXPRESSION_TRIGGERS_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_CHART_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT;
  }
 else   if (builderCommand == COMMAND_EXPRESSION_TRIGGERS_SIMPLE) {
    return ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT;
  }
 else   if (builderCommand == COMMAND_HYPERLINK) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == COMMAND_HYPERLINK_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
  return ChartExpressionProvider.CATEGORY_BASE;
}",0.9637784090909092
73805,"protected List getChildrenList(Object parent){
  List list=super.getChildrenList(parent);
  if (DATA_POINTS.equals(parent)) {
    list.add(ScriptHandler.BASE_VALUE);
    list.add(ScriptHandler.ORTHOGONAL_VALUE);
    list.add(ScriptHandler.SERIES_VALUE);
  }
 else {
    if (CHART_VARIABLES.equals(parent)) {
      list.add(DATA_POINTS);
    }
  }
  return list;
}","protected List getChildrenList(Object parent){
  List list=super.getChildrenList(parent);
  if (DATA_POINTS.equals(parent)) {
    list.add(ScriptHandler.BASE_VALUE);
    list.add(ScriptHandler.ORTHOGONAL_VALUE);
    list.add(ScriptHandler.SERIES_VALUE);
  }
 else   if (CHART_VARIABLES.equals(parent)) {
    if ((this._categoryStyle & CATEGORY_WITH_CHART_VARIABLES) == CATEGORY_WITH_CHART_VARIABLES)     list.add(DATA_POINTS);
    if ((this._categoryStyle & CATEGORY_WITH_JAVASCRIPT) == CATEGORY_WITH_JAVASCRIPT)     list.add(JAVASCRIPT);
  }
 else   if (JAVASCRIPT.equals(parent)) {
    list.add(JAVASCRIPT_EVENT_PARAMETER);
  }
  return list;
}",0.711595639246779
73806,"protected List getCategoryList(){
  List list=super.getCategoryList();
  if ((this._categoryStyle & CATEGORY_WITH_CHART_VARIABLES) == CATEGORY_WITH_CHART_VARIABLES) {
    list.add(CHART_VARIABLES);
  }
  return list;
}","protected List getCategoryList(){
  List list=super.getCategoryList();
  if ((this._categoryStyle & CATEGORY_WITH_CHART_VARIABLES) == CATEGORY_WITH_CHART_VARIABLES || (this._categoryStyle & CATEGORY_WITH_JAVASCRIPT) == CATEGORY_WITH_JAVASCRIPT) {
    list.add(CHART_VARIABLES);
  }
  return list;
}",0.8449612403100775
73807,"public String getDisplayText(Object element){
  if (element.equals(ScriptHandler.BASE_VALUE)) {
    return org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString(""String_Node_Str"");
  }
 else   if (element.equals(ScriptHandler.ORTHOGONAL_VALUE)) {
    return org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString(""String_Node_Str"");
  }
 else   if (element.equals(ScriptHandler.SERIES_VALUE)) {
    return org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString(""String_Node_Str"");
  }
  return super.getDisplayText(element);
}","public String getDisplayText(Object element){
  if (element.equals(ScriptHandler.BASE_VALUE)) {
    return org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString(""String_Node_Str"");
  }
 else   if (element.equals(ScriptHandler.ORTHOGONAL_VALUE)) {
    return org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString(""String_Node_Str"");
  }
 else   if (element.equals(ScriptHandler.SERIES_VALUE)) {
    return org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString(""String_Node_Str"");
  }
 else   if (element.equals(JAVASCRIPT_EVENT_PARAMETER)) {
    return JAVASCRIPT_EVENT;
  }
  return super.getDisplayText(element);
}",0.9229466553767992
73808,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  boolean isDesigner=false;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
  imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=workingPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxRowLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_ROWLEVELS);
  try {
    maxCubeRowLevels=Integer.valueOf(s_maxRowLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeRowLevels=-1;
  }
  String s_maxColumnLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_COLUMNLEVELS);
  try {
    maxCubeColumnLevels=Integer.valueOf(s_maxColumnLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeColumnLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  birtResourceFolder=processRealPath(context,context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH),null,false);
  String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=false;
  clearTempFiles();
  isInitContext=true;
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  boolean isDesigner=false;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
  imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String rootPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_ROOT_PATH + ""String_Node_Str"";
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=rootPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxRowLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_ROWLEVELS);
  try {
    maxCubeRowLevels=Integer.valueOf(s_maxRowLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeRowLevels=-1;
  }
  String s_maxColumnLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_COLUMNLEVELS);
  try {
    maxCubeColumnLevels=Integer.valueOf(s_maxColumnLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeColumnLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  birtResourceFolder=processRealPath(context,context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH),null,false);
  String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=false;
  clearTempFiles();
  isInitContext=true;
}",0.9882645001128414
73809,"/** 
 * Test the feature of always cache.
 * @throws BirtException
 */
public void testAlwaysCache() throws BirtException {
  DataEngineContext context=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  context.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,4);
  DataEngineImpl myDataEngine2=(DataEngineImpl)DataEngine.newDataEngine(context);
  myDataEngine2.defineDataSource(this.dataSource);
  myDataEngine2.defineDataSet(this.dataSet);
  QueryDefinition qd=newReportQuery();
  IQueryResults qr=myDataEngine2.prepare(qd).execute(null);
  assertFalse(getDataSetCacheManager(myDataEngine2).doesLoadFromCache());
  qr.getResultIterator();
  assertTrue(getDataSetCacheManager(myDataEngine2).doesLoadFromCache());
  qr.close();
  myDataEngine2.shutdown();
}","/** 
 * Test the feature of always cache.
 * @throws BirtException
 */
public void testAlwaysCache() throws BirtException {
  DataEngineContext context=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  context.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,4);
  DataEngineImpl myDataEngine2=(DataEngineImpl)DataEngine.newDataEngine(context);
  myDataEngine2.defineDataSource(this.dataSource);
  myDataEngine2.defineDataSet(this.dataSet);
  QueryDefinition qd=newReportQuery();
  IQueryResults qr=myDataEngine2.prepare(qd).execute(null);
  assertFalse(getDataSetCacheManager(myDataEngine2).doesLoadFromCache());
  qr.getResultIterator();
  assertTrue(getDataSetCacheManager(myDataEngine2).doesLoadFromCache());
  myDataEngine2.clearCache(dataSource,dataSet);
  qr.close();
  myDataEngine2.shutdown();
}",0.9706601466992664
73810,"/** 
 * @param dataSetDesign
 * @param cacheOption
 * @param alwaysCacheRowCount
 * @return
 */
public boolean needsToCache(IBaseDataSetDesign dataSetDesign,int cacheOption,int alwaysCacheRowCount){
  return true;
}","/** 
 * @param dataSetDesign
 * @param cacheOption
 * @param alwaysCacheRowCount
 * @return
 */
public boolean needsToCache(IBaseDataSetDesign dataSetDesign,int cacheOption,int alwaysCacheRowCount){
  return needsToDteCache() || DataSetCacheUtil.needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount);
}",0.8068833652007649
73811,"/** 
 * Create the file path of the the document. The document will be put under the document folder based on different session id.
 * @param filePath the document path cretaed from the report design file.
 * @param request Http request, used to get the session Id.
 * @return
 * @throws AxisFault
 */
protected static String createDocumentPath(String filePath,HttpServletRequest request){
  String documentName=null;
  if ((filePath == null) || (filePath.length() == 0))   return ""String_Node_Str"";
  String sessionId=request.getSession().getId();
  String fileSeparator=""String_Node_Str"";
  if (filePath.lastIndexOf(fileSeparator) == -1)   fileSeparator=""String_Node_Str"";
  if (filePath.lastIndexOf(fileSeparator) != -1) {
    documentName=filePath.substring(filePath.lastIndexOf(fileSeparator) + 1);
  }
 else {
    documentName=filePath;
  }
  String hashCode=Integer.toHexString(filePath.hashCode());
  return documentFolder + File.separator + sessionId+ File.separator+ hashCode+ File.separator+ documentName;
}","/** 
 * Create the file path of the the document. The document will be put under the document folder based on different session id.
 * @param filePath the document path cretaed from the report design file.
 * @param request Http request, used to get the session Id.
 * @return
 * @throws AxisFault
 */
protected static String createDocumentPath(String filePath,HttpServletRequest request){
  String documentName=null;
  if ((filePath == null) || (filePath.length() == 0))   return ""String_Node_Str"";
  String sessionId=request.getSession().getId();
  String fileSeparator=""String_Node_Str"";
  if (filePath.lastIndexOf(fileSeparator) == -1)   fileSeparator=""String_Node_Str"";
  if (filePath.lastIndexOf(fileSeparator) != -1) {
    documentName=filePath.substring(filePath.lastIndexOf(fileSeparator) + 1);
  }
 else {
    documentName=filePath;
  }
  String hashCode=Integer.toHexString(filePath.hashCode());
  return documentFolder + File.separator + (PREFIX_SUB_DOC_FOLDER + sessionId)+ File.separator+ hashCode+ File.separator+ documentName;
}",0.979631425800194
73812,"/** 
 * Clear the temp files when session is expired
 * @param sessionId
 */
public static void clearSessionFiles(String sessionId){
  if (sessionId == null)   return;
  String tempFolder=documentFolder + File.separator + sessionId;
  File file=new File(tempFolder);
  deleteDir(file);
  tempFolder=imageFolder + File.separator + sessionId;
  file=new File(tempFolder);
  deleteDir(file);
}","/** 
 * Clear the temp files when session is expired
 * @param sessionId
 */
public static void clearSessionFiles(String sessionId){
  if (sessionId == null)   return;
  String tempFolder=documentFolder + File.separator + (PREFIX_SUB_DOC_FOLDER + sessionId);
  File file=new File(tempFolder);
  deleteDir(file);
  tempFolder=imageFolder + File.separator + sessionId;
  file=new File(tempFolder);
  deleteDir(file);
}",0.9454094292803972
73813,"/** 
 * Clears the report document/image files which had been created last time the server starts up.
 */
protected static void clearTempFiles(){
  File file=new File(documentFolder);
  deleteDir(file);
  makeDir(documentFolder);
  file=new File(imageFolder);
  deleteDir(file);
  makeDir(imageFolder);
}","/** 
 * Clears the report document/image files which had been created last time the server starts up.
 */
protected static void clearTempFiles(){
  File file=new File(documentFolder);
  if (file != null && file.isDirectory()) {
    String[] children=file.list();
    for (int i=0; i < children.length; i++) {
      if (children[i].startsWith(PREFIX_SUB_DOC_FOLDER))       deleteDir(new File(file,children[i]));
    }
  }
  file=new File(imageFolder);
  deleteDir(file);
  makeDir(imageFolder);
}",0.5707133917396746
73814,"/** 
 * Returns the runtime defn of a data source. If data source is not found, returns null.
 */
DataSourceRuntime getDataSourceRuntime(String name){
  return (DataSourceRuntime)dataSources.get(name);
}","/** 
 * Returns the runtime defn of a data source. If data source is not found, returns null.
 */
DataSourceRuntime getDataSourceRuntime(String name) throws DataException {
  if (!dataSources.containsKey(name))   throw new DataException(ResourceConstants.UNDEFINED_DATA_SOURCE);
  return (DataSourceRuntime)dataSources.get(name);
}",0.7602996254681648
73815,"/** 
 * Returns the design of a data set. If data set is not found, returns null.
 */
IBaseDataSetDesign getDataSetDesign(String name){
  return (IBaseDataSetDesign)dataSetDesigns.get(name);
}","/** 
 * Returns the design of a data set. If data set is not found, returns null.
 */
IBaseDataSetDesign getDataSetDesign(String name) throws DataException {
  if (!dataSetDesigns.containsKey(name))   throw new DataException(ResourceConstants.UNDEFINED_DATA_SET);
  return (IBaseDataSetDesign)dataSetDesigns.get(name);
}",0.75
73816,"/** 
 * @param dataSetDesign
 */
private void switchCacheMap(IBaseDataSetDesign dataSetDesign){
  if (!dataSetDesign.needCache()) {
    cacheMapManager=JVMLevelCacheMapManager;
  }
 else {
    cacheMapManager=DteLevelCacheMapManager;
  }
}","/** 
 * @param dataSetDesign
 */
private void switchCacheMap(IBaseDataSetDesign dataSetDesign){
  if (needsToJVMCache(dataSetDesign)) {
    cacheMapManager=JVMLevelCacheMapManager;
  }
 else {
    cacheMapManager=DteLevelCacheMapManager;
  }
}",0.9128630705394192
73817,"/** 
 * @param dataSetDesign
 * @param cacheOption
 * @param alwaysCacheRowCount
 * @return
 */
public boolean needsToCache(IBaseDataSetDesign dataSetDesign,int cacheOption,int alwaysCacheRowCount){
  return DataSetCacheUtil.needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount);
}","/** 
 * @param dataSetDesign
 * @param cacheOption
 * @param alwaysCacheRowCount
 * @return
 */
public boolean needsToCache(IBaseDataSetDesign dataSetDesign,int cacheOption,int alwaysCacheRowCount){
  return true;
}",0.8406374501992032
73818,"/** 
 * Adapts base data set properties
 */
public static void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null) {
    throw new AdapterException(ResourceConstants.DATASOURCE_NULL_ERROR);
  }
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  dteDataSet.setNeedCache(modelDataSet.needsCache());
  mergeHints(modelDataSet,dteDataSet);
}","/** 
 * Adapts base data set properties
 */
public static void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null) {
    throw new AdapterException(ResourceConstants.DATASOURCE_NULL_ERROR);
  }
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  mergeHints(modelDataSet,dteDataSet);
}",0.9746954076850984
73819,"void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  dteDataSet.setNeedCache(modelDataSet.needsCache());
  mergeHints(modelDataSet,dteDataSet);
}","void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  mergeHints(modelDataSet,dteDataSet);
}",0.97239263803681
73820,"/** 
 * Renders the axis.
 * @throws ChartException
 */
public final void renderEachAxis() throws ChartException {
  final double dStaggeredLabelOffset=sc.computeStaggeredAxisLabelOffset(xs,la,iOrientation);
  if (!lia.isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  tre.setLabel(la);
  tre.setTextPosition(iLabelLocation);
  tre.setLocation(lo);
  lre.setLineAttributes(lia);
  lre.setStart(LocationImpl.create(0,0));
  lre.setEnd(LocationImpl.create(0,0));
  double dXStart=0;
  double dXEnd=0;
  double dZStart=0;
  double dZEnd=0;
  if (iDimension == IConstants.THREE_D) {
    AllAxes aax=pwa.getAxes();
    dXEnd=aax.getPrimaryBase().getScale().getEnd();
    dZEnd=aax.getAncillaryBase().getScale().getEnd();
    dXStart=aax.getPrimaryBase().getScale().getStart();
    dZStart=aax.getAncillaryBase().getScale().getStart();
    daEndPoints3D=sc.getEndPoints();
    da3D=sc.getTickCordinates();
    lo3d=Location3DImpl.create(0,0,0);
    t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
    t3dre.setLabel(la);
    t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
    t3dre.setTextPosition(iLabelLocation);
    t3dre.setLocation3D(lo3d);
    l3dre=(Line3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Line3DRenderEvent.class);
    l3dre.setLineAttributes(lia);
    l3dre.setStart3D(Location3DImpl.create(0,0,0));
    l3dre.setEnd3D(Location3DImpl.create(0,0,0));
  }
  if (iOrientation == IConstants.VERTICAL) {
    final ComputationContext context=new ComputationContext(true);
    context.y3d=0;
    context.dX=dLocation;
    double dZ=0;
    if (bRendering3D) {
      Location3D l3d=ax.getAxisCoordinate3D();
      context.dX=l3d.getX();
      dZ=l3d.getZ();
    }
    if (iv != null && iv.getType() == IntersectionValue.MAX && iDimension == IConstants.TWO_5_D) {
      trae.setTransform(TransformationEvent.TRANSLATE);
      trae.setTranslation(dSeriesThickness,-dSeriesThickness);
      ipr.applyTransformation(trae);
    }
    context.dTick1=((iMajorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? context.dX - pwa.getTickSize() : context.dX;
    context.dTick2=((iMajorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + pwa.getTickSize() : context.dX;
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS && lia.isVisible()) {
      if (bRenderOrthogonal3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(context.dX,dStart,dZ);
        l3dre.setEnd3D(context.dX,dEnd,dZ);
        dc.addLine(l3dre);
        l3dre.setStart3D(context.dX,dStart,dZEnd);
        l3dre.setEnd3D(context.dX,dEnd,dZEnd);
        dc.addLine(l3dre);
        l3dre.setStart3D(dXEnd,dStart,dZ);
        l3dre.setEnd3D(dXEnd,dEnd,dZ);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            ArrayList cachedTriggers=null;
            Location3D[] loaHotspot=new Location3D[4];
            Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot[0]=Location3DImpl.create(context.dX - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZ + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(context.dX + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZ - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(context.dX + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZ - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(context.dX - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZ + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              cachedTriggers=new ArrayList();
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                cachedTriggers.add(tg);
                iev.addTrigger(TriggerImpl.copyInstance(tg));
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
            pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dXStart - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(dXStart + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(dXStart + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(dXStart - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              if (cachedTriggers == null) {
                cachedTriggers=new ArrayList();
                for (int t=0; t < elTriggers.size(); t++) {
                  tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                  processTrigger(tg,StructureSource.createAxis(axModel));
                  cachedTriggers.add(tg);
                  iev.addTrigger(TriggerImpl.copyInstance(tg));
                }
              }
 else {
                for (int t=0; t < cachedTriggers.size(); t++) {
                  iev.addTrigger(TriggerImpl.copyInstance((Trigger)cachedTriggers.get(t)));
                }
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
            pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dXEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZStart + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(dXEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZStart - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(dXEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZStart - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(dXEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZStart + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              if (cachedTriggers == null) {
                for (int t=0; t < elTriggers.size(); t++) {
                  tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                  processTrigger(tg,StructureSource.createAxis(axModel));
                  iev.addTrigger(tg);
                }
              }
 else {
                for (int t=0; t < cachedTriggers.size(); t++) {
                  iev.addTrigger((Trigger)cachedTriggers.get(t));
                }
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else {
        double dStart=daEndPoints[0] + insCA.getBottom(), dEnd=daEndPoints[1] - insCA.getTop();
        if (sc.getDirection() == IConstants.FORWARD) {
          dStart=daEndPoints[1] + insCA.getBottom();
          dEnd=daEndPoints[0] - insCA.getTop();
        }
        if (iv != null && iv.getType() == IntersectionValue.VALUE && iDimension == IConstants.TWO_5_D) {
          final Location[] loa=new Location[4];
          loa[0]=LocationImpl.create(context.dX,dStart);
          loa[1]=LocationImpl.create(context.dX + dSeriesThickness,dStart - dSeriesThickness);
          loa[2]=LocationImpl.create(context.dX + dSeriesThickness,dEnd - dSeriesThickness);
          loa[3]=LocationImpl.create(context.dX,dEnd);
          final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
          pre.setPoints(loa);
          pre.setBackground(ColorDefinitionImpl.create(255,255,255,127));
          pre.setOutline(lia);
          ipr.fillPolygon(pre);
        }
        lre.setLineAttributes(lia);
        lre.getStart().set(context.dX,dStart);
        lre.getEnd().set(context.dX,dEnd);
        ipr.drawLine(lre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
            for (int t=0; t < elTriggers.size(); t++) {
              tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
              processTrigger(tg,StructureSource.createAxis(axModel));
              iev.addTrigger(tg);
            }
            Location[] loaHotspot=new Location[4];
            loaHotspot[0]=LocationImpl.create(context.dX - IConstants.LINE_EXPAND_SIZE,dStart);
            loaHotspot[1]=LocationImpl.create(context.dX + IConstants.LINE_EXPAND_SIZE,dStart);
            loaHotspot[2]=LocationImpl.create(context.dX + IConstants.LINE_EXPAND_SIZE,dEnd);
            loaHotspot[3]=LocationImpl.create(context.dX - IConstants.LINE_EXPAND_SIZE,dEnd);
            final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
            pre.setPoints(loaHotspot);
            iev.setHotSpot(pre);
            ipr.enableInteraction(iev);
          }
        }
      }
    }
    renderVerticalAxisByType(context,dXEnd,dZEnd,dZ,dStaggeredLabelOffset);
    la=LabelImpl.copyInstance(ax.getTitle());
    if (la.isVisible() && bRenderAxisTitle) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_TITLE,la);
      final String sRestoreValue=la.getCaption().getValue();
      la.getCaption().setValue(getRunTimeContext().externalizedMessage(sRestoreValue));
      BoundingBox bb=null;
      boolean bWithinAxis=false;
      final boolean bTitleHorizontal=Math.abs(la.getCaption().getFont().getRotation()) <= 30;
      final double dYAxisHeightPC=ChartUtil.computeHeightOfOrthogonalAxisTitle((ChartWithAxes)this.renderer.cm,xs);
      try {
        if (bTitleHorizontal) {
          bWithinAxis=true;
        }
 else {
          final BoundingBox bbWoWrap=Methods.computeBox(xs,iLabelLocation,la,0,0,dYAxisHeightPC);
          bWithinAxis=bbWoWrap.getHeight() < daEndPoints[0] - daEndPoints[1];
        }
        bb=Methods.computeBox(xs,ax.getTitlePosition(),la,0,0,bWithinAxis && !bTitleHorizontal ? daEndPoints[0] - daEndPoints[1] : dYAxisHeightPC);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      if (ax.getTitle().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          Bounds cbo=renderer.getPlotBounds();
          tre.setBlockBounds(BoundsImpl.create(cbo.getLeft() + (cbo.getWidth() / 3d - bb.getWidth()) / 2d,cbo.getTop() + 30,bb.getWidth(),bb.getHeight()));
          tre.setLabel(la);
          tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          ipr.drawText(tre);
          tre.setBlockBounds(BoundsImpl.create(cbo.getLeft() + cbo.getWidth() - bb.getWidth(),cbo.getTop() + 30 * 2,bb.getWidth(),bb.getHeight()));
          ipr.drawText(tre);
        }
 else {
          final Bounds boundsTitle=((ChartWithAxes)this.renderer.cm).getTitle().getBounds();
          final Bounds bo=BoundsImpl.create(ax.getTitleCoordinate(),bWithinAxis ? daEndPoints[1] : (boundsTitle.getTop() + boundsTitle.getHeight()) / 72 * xs.getDpiResolution(),bb.getWidth(),bWithinAxis ? daEndPoints[0] - daEndPoints[1] : dYAxisHeightPC);
          tre.setBlockBounds(bo);
          tre.setLabel(la);
          if (ax.getModelAxis().getAssociatedAxes().size() != 0) {
            tre.setBlockAlignment(ChartUtil.transposeAlignment(la.getCaption().getFont().getAlignment()));
          }
 else {
            tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          }
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          if (ax.getTitle().isVisible()) {
            ipr.drawText(tre);
          }
        }
      }
      la.getCaption().setValue(sRestoreValue);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_TITLE,la);
    }
    la=LabelImpl.copyInstance(ax.getLabel());
    if (iv != null && iv.getType() == IntersectionValue.MAX && iDimension == IConstants.TWO_5_D) {
      trae.setTranslation(-dSeriesThickness,dSeriesThickness);
      ipr.applyTransformation(trae);
    }
  }
 else   if (iOrientation == IConstants.HORIZONTAL) {
    final ComputationContext context=new ComputationContext(false);
    context.x3d=0;
    context.z3d=0;
    context.dY=dLocation;
    double dX=0;
    double dZ=0;
    if (bRendering3D) {
      Location3D l3d=ax.getAxisCoordinate3D();
      dX=l3d.getX();
      context.dY=l3d.getY();
      dZ=l3d.getZ();
    }
    context.dTick1=((iMajorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + pwa.getTickSize() : context.dY - pwa.getTickSize()) : context.dY;
    context.dTick2=((iMajorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - pwa.getTickSize() : context.dY + pwa.getTickSize()) : context.dY;
    if (iv != null && iDimension == IConstants.TWO_5_D && ((bTransposed && renderer.isRightToLeft() && iv.getType() == IntersectionValue.MIN) || (!renderer.isRightToLeft() && iv.getType() == IntersectionValue.MAX))) {
      trae.setTransform(TransformationEvent.TRANSLATE);
      trae.setTranslation(dSeriesThickness,-dSeriesThickness);
      ipr.applyTransformation(trae);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS && lia.isVisible()) {
      if (bRenderBase3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(dStart,context.dY,dZ);
        l3dre.setEnd3D(dEnd,context.dY,dZ);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            Location3D[] loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dStart,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[1]=Location3DImpl.create(dStart,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[2]=Location3DImpl.create(dEnd,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[3]=Location3DImpl.create(dEnd,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                iev.addTrigger(tg);
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else       if (bRenderAncillary3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(dX,context.dY,dStart);
        l3dre.setEnd3D(dX,context.dY,dEnd);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            Location3D[] loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dX,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart);
            loaHotspot[1]=Location3DImpl.create(dX,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart);
            loaHotspot[2]=Location3DImpl.create(dX,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd);
            loaHotspot[3]=Location3DImpl.create(dX,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                iev.addTrigger(tg);
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else {
        double dStart=daEndPoints[0] - insCA.getLeft(), dEnd=daEndPoints[1] + insCA.getRight();
        if (sc.getDirection() == IConstants.BACKWARD) {
          dStart=daEndPoints[1] - insCA.getLeft();
          dEnd=daEndPoints[0] + insCA.getRight();
        }
        if (iv != null && iv.getType() == IntersectionValue.VALUE && iDimension == IConstants.TWO_5_D) {
          final Location[] loa=new Location[4];
          loa[0]=LocationImpl.create(dStart,context.dY);
          loa[1]=LocationImpl.create(dStart + dSeriesThickness,context.dY - dSeriesThickness);
          loa[2]=LocationImpl.create(dEnd + dSeriesThickness,context.dY - dSeriesThickness);
          loa[3]=LocationImpl.create(dEnd,context.dY);
          final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
          pre.setPoints(loa);
          pre.setBackground(ColorDefinitionImpl.create(255,255,255,127));
          pre.setOutline(lia);
          ipr.fillPolygon(pre);
        }
        lre.setLineAttributes(lia);
        lre.getStart().set(dStart,context.dY);
        lre.getEnd().set(dEnd,context.dY);
        ipr.drawLine(lre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
            for (int t=0; t < elTriggers.size(); t++) {
              tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
              processTrigger(tg,StructureSource.createAxis(axModel));
              iev.addTrigger(tg);
            }
            Location[] loaHotspot=new Location[4];
            loaHotspot[0]=LocationImpl.create(dStart,context.dY - IConstants.LINE_EXPAND_SIZE);
            loaHotspot[1]=LocationImpl.create(dEnd,context.dY - IConstants.LINE_EXPAND_SIZE);
            loaHotspot[2]=LocationImpl.create(dEnd,context.dY + IConstants.LINE_EXPAND_SIZE);
            loaHotspot[3]=LocationImpl.create(dStart,context.dY + IConstants.LINE_EXPAND_SIZE);
            final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
            pre.setPoints(loaHotspot);
            iev.setHotSpot(pre);
            ipr.enableInteraction(iev);
          }
        }
      }
    }
    renderHorizontalAxisByType(context,dXEnd,dZEnd,dZ,dStaggeredLabelOffset);
    la=LabelImpl.copyInstance(ax.getTitle());
    if (la.isVisible() && bRenderAxisTitle) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_TITLE,la);
      final String sRestoreValue=la.getCaption().getValue();
      la.getCaption().setValue(getRunTimeContext().externalizedMessage(sRestoreValue));
      la.getCaption().getFont().setAlignment(renderer.switchTextAlignment(la.getCaption().getFont().getAlignment()));
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,ax.getTitlePosition(),la,0,0,Math.abs(daEndPoints[1] - daEndPoints[0]));
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      if (ax.getTitle().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          Bounds cbo=renderer.getPlotBounds();
          if (axisType == IConstants.BASE_AXIS) {
            tre.setBlockBounds(BoundsImpl.create(cbo.getLeft() + (cbo.getWidth() / 3d - bb.getWidth()),cbo.getTop() + cbo.getHeight() - Math.min(bb.getHeight(),bb.getWidth()),bb.getWidth(),bb.getHeight()));
          }
 else {
            tre.setBlockBounds(BoundsImpl.create(cbo.getLeft() + cbo.getWidth() * 2 / 3d + (cbo.getWidth() / 3d - bb.getWidth()) / 2d,cbo.getTop() + cbo.getHeight() - Math.min(bb.getHeight(),bb.getWidth()),bb.getWidth(),bb.getHeight()));
          }
          tre.setLabel(la);
          tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          ipr.drawText(tre);
        }
 else {
          final Bounds bo=BoundsImpl.create(daEndPoints[0],ax.getTitleCoordinate(),daEndPoints[1] - daEndPoints[0],bb.getHeight());
          tre.setBlockBounds(bo);
          tre.setLabel(la);
          if (ax.getModelAxis().getAssociatedAxes().size() != 0) {
            tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          }
 else {
            tre.setBlockAlignment(ChartUtil.transposeAlignment(la.getCaption().getFont().getAlignment()));
          }
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_TITLE,la);
    }
    la=LabelImpl.copyInstance(ax.getLabel());
    if (iv != null && iDimension == IConstants.TWO_5_D && ((bTransposed && renderer.isRightToLeft() && iv.getType() == IntersectionValue.MIN) || (!renderer.isRightToLeft() && iv.getType() == IntersectionValue.MAX))) {
      trae.setTranslation(-dSeriesThickness,dSeriesThickness);
      ipr.applyTransformation(trae);
    }
  }
}","/** 
 * Renders the axis.
 * @throws ChartException
 */
public final void renderEachAxis() throws ChartException {
  final double dStaggeredLabelOffset=sc.computeStaggeredAxisLabelOffset(xs,la,iOrientation);
  if (!lia.isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  tre.setLabel(la);
  tre.setTextPosition(iLabelLocation);
  tre.setLocation(lo);
  lre.setLineAttributes(lia);
  lre.setStart(LocationImpl.create(0,0));
  lre.setEnd(LocationImpl.create(0,0));
  double dXStart=0;
  double dXEnd=0;
  double dZStart=0;
  double dZEnd=0;
  if (iDimension == IConstants.THREE_D) {
    AllAxes aax=pwa.getAxes();
    dXEnd=aax.getPrimaryBase().getScale().getEnd();
    dZEnd=aax.getAncillaryBase().getScale().getEnd();
    dXStart=aax.getPrimaryBase().getScale().getStart();
    dZStart=aax.getAncillaryBase().getScale().getStart();
    daEndPoints3D=sc.getEndPoints();
    da3D=sc.getTickCordinates();
    lo3d=Location3DImpl.create(0,0,0);
    t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
    t3dre.setLabel(la);
    t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
    t3dre.setTextPosition(iLabelLocation);
    t3dre.setLocation3D(lo3d);
    l3dre=(Line3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Line3DRenderEvent.class);
    l3dre.setLineAttributes(lia);
    l3dre.setStart3D(Location3DImpl.create(0,0,0));
    l3dre.setEnd3D(Location3DImpl.create(0,0,0));
  }
  if (iOrientation == IConstants.VERTICAL) {
    final ComputationContext context=new ComputationContext(true);
    context.y3d=0;
    context.dX=dLocation;
    double dZ=0;
    if (bRendering3D) {
      Location3D l3d=ax.getAxisCoordinate3D();
      context.dX=l3d.getX();
      dZ=l3d.getZ();
    }
    if (iv != null && iv.getType() == IntersectionValue.MAX && iDimension == IConstants.TWO_5_D) {
      trae.setTransform(TransformationEvent.TRANSLATE);
      trae.setTranslation(dSeriesThickness,-dSeriesThickness);
      ipr.applyTransformation(trae);
    }
    context.dTick1=((iMajorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? context.dX - pwa.getTickSize() : context.dX;
    context.dTick2=((iMajorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + pwa.getTickSize() : context.dX;
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS && lia.isVisible()) {
      if (bRenderOrthogonal3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(context.dX,dStart,dZ);
        l3dre.setEnd3D(context.dX,dEnd,dZ);
        dc.addLine(l3dre);
        l3dre.setStart3D(context.dX,dStart,dZEnd);
        l3dre.setEnd3D(context.dX,dEnd,dZEnd);
        dc.addLine(l3dre);
        l3dre.setStart3D(dXEnd,dStart,dZ);
        l3dre.setEnd3D(dXEnd,dEnd,dZ);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            ArrayList cachedTriggers=null;
            Location3D[] loaHotspot=new Location3D[4];
            Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot[0]=Location3DImpl.create(context.dX - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZ + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(context.dX + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZ - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(context.dX + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZ - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(context.dX - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZ + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              cachedTriggers=new ArrayList();
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                cachedTriggers.add(tg);
                iev.addTrigger(TriggerImpl.copyInstance(tg));
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
            pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dXStart - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(dXStart + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(dXStart + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(dXStart - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              if (cachedTriggers == null) {
                cachedTriggers=new ArrayList();
                for (int t=0; t < elTriggers.size(); t++) {
                  tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                  processTrigger(tg,StructureSource.createAxis(axModel));
                  cachedTriggers.add(tg);
                  iev.addTrigger(TriggerImpl.copyInstance(tg));
                }
              }
 else {
                for (int t=0; t < cachedTriggers.size(); t++) {
                  iev.addTrigger(TriggerImpl.copyInstance((Trigger)cachedTriggers.get(t)));
                }
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
            pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dXEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZStart + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(dXEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZStart - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(dXEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZStart - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(dXEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZStart + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              if (cachedTriggers == null) {
                for (int t=0; t < elTriggers.size(); t++) {
                  tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                  processTrigger(tg,StructureSource.createAxis(axModel));
                  iev.addTrigger(tg);
                }
              }
 else {
                for (int t=0; t < cachedTriggers.size(); t++) {
                  iev.addTrigger((Trigger)cachedTriggers.get(t));
                }
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else {
        double dStart=daEndPoints[0] + insCA.getBottom(), dEnd=daEndPoints[1] - insCA.getTop();
        if (sc.getDirection() == IConstants.FORWARD) {
          dStart=daEndPoints[1] + insCA.getBottom();
          dEnd=daEndPoints[0] - insCA.getTop();
        }
        if (iv != null && iv.getType() == IntersectionValue.VALUE && iDimension == IConstants.TWO_5_D) {
          final Location[] loa=new Location[4];
          loa[0]=LocationImpl.create(context.dX,dStart);
          loa[1]=LocationImpl.create(context.dX + dSeriesThickness,dStart - dSeriesThickness);
          loa[2]=LocationImpl.create(context.dX + dSeriesThickness,dEnd - dSeriesThickness);
          loa[3]=LocationImpl.create(context.dX,dEnd);
          final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
          pre.setPoints(loa);
          pre.setBackground(ColorDefinitionImpl.create(255,255,255,127));
          pre.setOutline(lia);
          ipr.fillPolygon(pre);
        }
        lre.setLineAttributes(lia);
        lre.getStart().set(context.dX,dStart);
        lre.getEnd().set(context.dX,dEnd);
        ipr.drawLine(lre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
            for (int t=0; t < elTriggers.size(); t++) {
              tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
              processTrigger(tg,StructureSource.createAxis(axModel));
              iev.addTrigger(tg);
            }
            Location[] loaHotspot=new Location[4];
            loaHotspot[0]=LocationImpl.create(context.dX - IConstants.LINE_EXPAND_SIZE,dStart);
            loaHotspot[1]=LocationImpl.create(context.dX + IConstants.LINE_EXPAND_SIZE,dStart);
            loaHotspot[2]=LocationImpl.create(context.dX + IConstants.LINE_EXPAND_SIZE,dEnd);
            loaHotspot[3]=LocationImpl.create(context.dX - IConstants.LINE_EXPAND_SIZE,dEnd);
            final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
            pre.setPoints(loaHotspot);
            iev.setHotSpot(pre);
            ipr.enableInteraction(iev);
          }
        }
      }
    }
    renderVerticalAxisByType(context,dXEnd,dZEnd,dZ,dStaggeredLabelOffset);
    la=LabelImpl.copyInstance(ax.getTitle());
    if (la.isVisible() && bRenderAxisTitle) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_TITLE,la);
      final String sRestoreValue=la.getCaption().getValue();
      la.getCaption().setValue(getRunTimeContext().externalizedMessage(sRestoreValue));
      BoundingBox bb=null;
      boolean bWithinAxis=false;
      final boolean bTitleHorizontal=Math.abs(la.getCaption().getFont().getRotation()) <= 30;
      final double dYAxisHeightPC=ChartUtil.computeHeightOfOrthogonalAxisTitle((ChartWithAxes)this.renderer.cm,xs);
      try {
        if (bTitleHorizontal) {
          bWithinAxis=true;
        }
 else {
          final BoundingBox bbWoWrap=Methods.computeBox(xs,iLabelLocation,la,0,0,dYAxisHeightPC);
          bWithinAxis=bbWoWrap.getHeight() < daEndPoints[0] - daEndPoints[1];
        }
        bb=Methods.computeBox(xs,ax.getTitlePosition(),la,0,0,bWithinAxis && !bTitleHorizontal ? daEndPoints[0] - daEndPoints[1] : dYAxisHeightPC);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      if (ax.getTitle().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          double yCenter=daEndPoints3D[0] + ((daEndPoints3D[1] - daEndPoints3D[0]) / 2);
          final double x=(iLabelLocation == IConstants.LEFT) ? context.dTick1 - 1 : context.dTick2 + 1;
          double sx=x;
          double sx2=dXEnd;
          if (bAxisLabelStaggered) {
            if (iLabelLocation == IConstants.LEFT) {
              sx-=dStaggeredLabelOffset;
              sx2+=dStaggeredLabelOffset;
            }
 else {
              sx+=dStaggeredLabelOffset;
              sx2-=dStaggeredLabelOffset;
            }
          }
          Angle3D a3D=(Angle3D)((ChartWithAxes)renderer.cm).getRotation().getAngles().get(0);
          double offset=2;
          t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
          sx=sx - pwa.getHorizontalSpacingInPixels() - bb.getWidth()- bb.getHeight();
          t3dre.setLocation3D(Location3DImpl.create(sx - offset,yCenter,dZEnd + offset + pwa.getHorizontalSpacingInPixels()+ (bb.getWidth() + bb.getHeight()) * Math.sin(a3D.getYAngle() * Math.PI / 180)));
          t3dre.setLabel(la);
          t3dre.setTextPosition(Text3DRenderEvent.LEFT);
          t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
          t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
          sx2=sx2 + pwa.getHorizontalSpacingInPixels() + 100;
          t3dre.setLocation3D(Location3DImpl.create(sx2,yCenter,dZ - pwa.getHorizontalSpacingInPixels() - 100 * Math.sin(a3D.getYAngle() * Math.PI / 180)));
          t3dre.setLabel(la);
          t3dre.setTextPosition(Text3DRenderEvent.RIGHT);
          t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
        }
 else {
          final Bounds boundsTitle=((ChartWithAxes)this.renderer.cm).getTitle().getBounds();
          final Bounds bo=BoundsImpl.create(ax.getTitleCoordinate(),bWithinAxis ? daEndPoints[1] : (boundsTitle.getTop() + boundsTitle.getHeight()) / 72 * xs.getDpiResolution(),bb.getWidth(),bWithinAxis ? daEndPoints[0] - daEndPoints[1] : dYAxisHeightPC);
          tre.setBlockBounds(bo);
          tre.setLabel(la);
          if (ax.getModelAxis().getAssociatedAxes().size() != 0) {
            tre.setBlockAlignment(ChartUtil.transposeAlignment(la.getCaption().getFont().getAlignment()));
          }
 else {
            tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          }
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          if (ax.getTitle().isVisible()) {
            ipr.drawText(tre);
          }
        }
      }
      la.getCaption().setValue(sRestoreValue);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_TITLE,la);
    }
    la=LabelImpl.copyInstance(ax.getLabel());
    if (iv != null && iv.getType() == IntersectionValue.MAX && iDimension == IConstants.TWO_5_D) {
      trae.setTranslation(-dSeriesThickness,dSeriesThickness);
      ipr.applyTransformation(trae);
    }
  }
 else   if (iOrientation == IConstants.HORIZONTAL) {
    final ComputationContext context=new ComputationContext(false);
    context.x3d=0;
    context.z3d=0;
    context.dY=dLocation;
    double dX=0;
    double dZ=0;
    if (bRendering3D) {
      Location3D l3d=ax.getAxisCoordinate3D();
      dX=l3d.getX();
      context.dY=l3d.getY();
      dZ=l3d.getZ();
    }
    context.dTick1=((iMajorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + pwa.getTickSize() : context.dY - pwa.getTickSize()) : context.dY;
    context.dTick2=((iMajorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - pwa.getTickSize() : context.dY + pwa.getTickSize()) : context.dY;
    if (iv != null && iDimension == IConstants.TWO_5_D && ((bTransposed && renderer.isRightToLeft() && iv.getType() == IntersectionValue.MIN) || (!renderer.isRightToLeft() && iv.getType() == IntersectionValue.MAX))) {
      trae.setTransform(TransformationEvent.TRANSLATE);
      trae.setTranslation(dSeriesThickness,-dSeriesThickness);
      ipr.applyTransformation(trae);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS && lia.isVisible()) {
      if (bRenderBase3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(dStart,context.dY,dZ);
        l3dre.setEnd3D(dEnd,context.dY,dZ);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            Location3D[] loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dStart,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[1]=Location3DImpl.create(dStart,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[2]=Location3DImpl.create(dEnd,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[3]=Location3DImpl.create(dEnd,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                iev.addTrigger(tg);
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else       if (bRenderAncillary3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(dX,context.dY,dStart);
        l3dre.setEnd3D(dX,context.dY,dEnd);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            Location3D[] loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dX,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart);
            loaHotspot[1]=Location3DImpl.create(dX,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart);
            loaHotspot[2]=Location3DImpl.create(dX,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd);
            loaHotspot[3]=Location3DImpl.create(dX,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                iev.addTrigger(tg);
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else {
        double dStart=daEndPoints[0] - insCA.getLeft(), dEnd=daEndPoints[1] + insCA.getRight();
        if (sc.getDirection() == IConstants.BACKWARD) {
          dStart=daEndPoints[1] - insCA.getLeft();
          dEnd=daEndPoints[0] + insCA.getRight();
        }
        if (iv != null && iv.getType() == IntersectionValue.VALUE && iDimension == IConstants.TWO_5_D) {
          final Location[] loa=new Location[4];
          loa[0]=LocationImpl.create(dStart,context.dY);
          loa[1]=LocationImpl.create(dStart + dSeriesThickness,context.dY - dSeriesThickness);
          loa[2]=LocationImpl.create(dEnd + dSeriesThickness,context.dY - dSeriesThickness);
          loa[3]=LocationImpl.create(dEnd,context.dY);
          final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
          pre.setPoints(loa);
          pre.setBackground(ColorDefinitionImpl.create(255,255,255,127));
          pre.setOutline(lia);
          ipr.fillPolygon(pre);
        }
        lre.setLineAttributes(lia);
        lre.getStart().set(dStart,context.dY);
        lre.getEnd().set(dEnd,context.dY);
        ipr.drawLine(lre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
            for (int t=0; t < elTriggers.size(); t++) {
              tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
              processTrigger(tg,StructureSource.createAxis(axModel));
              iev.addTrigger(tg);
            }
            Location[] loaHotspot=new Location[4];
            loaHotspot[0]=LocationImpl.create(dStart,context.dY - IConstants.LINE_EXPAND_SIZE);
            loaHotspot[1]=LocationImpl.create(dEnd,context.dY - IConstants.LINE_EXPAND_SIZE);
            loaHotspot[2]=LocationImpl.create(dEnd,context.dY + IConstants.LINE_EXPAND_SIZE);
            loaHotspot[3]=LocationImpl.create(dStart,context.dY + IConstants.LINE_EXPAND_SIZE);
            final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
            pre.setPoints(loaHotspot);
            iev.setHotSpot(pre);
            ipr.enableInteraction(iev);
          }
        }
      }
    }
    renderHorizontalAxisByType(context,dXEnd,dZEnd,dZ,dStaggeredLabelOffset);
    la=LabelImpl.copyInstance(ax.getTitle());
    if (la.isVisible() && bRenderAxisTitle) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_TITLE,la);
      final String sRestoreValue=la.getCaption().getValue();
      la.getCaption().setValue(getRunTimeContext().externalizedMessage(sRestoreValue));
      la.getCaption().getFont().setAlignment(renderer.switchTextAlignment(la.getCaption().getFont().getAlignment()));
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,ax.getTitlePosition(),la,0,0,Math.abs(daEndPoints[1] - daEndPoints[0]));
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      if (ax.getTitle().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          Angle3D a3D=(Angle3D)((ChartWithAxes)renderer.cm).getRotation().getAngles().get(0);
          if (axisType == IConstants.BASE_AXIS) {
            t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
            IAxisTypeComputation computation=createAxisTypeComputation(context);
            computation.initialize();
            final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
            int xStart=(int)da3D.getCoordinate(0);
            int xEnd=(int)da3D.getCoordinate(length - 1);
            int x=xStart + (xEnd - xStart) / 2;
            Location3D location=Location3DImpl.create(x,context.dY - bb.getHeight() * 3,dZEnd + pwa.getVerticalSpacingInPixels());
            t3dre.setLocation3D(location);
            t3dre.setLabel(la);
            double angle=(a3D.getZAngle() + a3D.getXAngle()) % 360;
            if (angle > 0 && angle <= 180) {
              t3dre.setTextPosition(Text3DRenderEvent.RIGHT);
            }
 else {
              t3dre.setTextPosition(Text3DRenderEvent.LEFT);
            }
            t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
            dc.addLabel(t3dre);
          }
 else {
            Location3D location=Location3DImpl.create(dXEnd,context.dY - bb.getHeight(),dZ + (dZEnd - dZ) / 2);
            t3dre.setLocation3D(location);
            t3dre.setLabel(la);
            double angle=a3D.getZAngle() % 360;
            if (angle >= 0 && angle < 180) {
              t3dre.setTextPosition(Text3DRenderEvent.RIGHT);
            }
 else {
              t3dre.setTextPosition(Text3DRenderEvent.LEFT);
            }
            t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
            dc.addLabel(t3dre);
          }
        }
 else {
          final Bounds bo=BoundsImpl.create(daEndPoints[0],ax.getTitleCoordinate(),daEndPoints[1] - daEndPoints[0],bb.getHeight());
          tre.setBlockBounds(bo);
          tre.setLabel(la);
          if (ax.getModelAxis().getAssociatedAxes().size() != 0) {
            tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          }
 else {
            tre.setBlockAlignment(ChartUtil.transposeAlignment(la.getCaption().getFont().getAlignment()));
          }
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_TITLE,la);
    }
    la=LabelImpl.copyInstance(ax.getLabel());
    if (iv != null && iDimension == IConstants.TWO_5_D && ((bTransposed && renderer.isRightToLeft() && iv.getType() == IntersectionValue.MIN) || (!renderer.isRightToLeft() && iv.getType() == IntersectionValue.MAX))) {
      trae.setTranslation(-dSeriesThickness,dSeriesThickness);
      ipr.applyTransformation(trae);
    }
  }
}",0.9160640098476688
73821,"private ThemeHandle getThemeHandle(){
  IStructuredSelection selection=null;
  if (getSelection() instanceof IStructuredSelection) {
    selection=(IStructuredSelection)getSelection();
  }
  if (selection != null && !selection.isEmpty() && selection.getFirstElement() instanceof ReportDesignEditPart) {
    return ((ReportDesignHandle)((ReportDesignEditPart)selection.getFirstElement()).getModel()).getTheme();
  }
  return null;
}","private ThemeHandle getThemeHandle(){
  IStructuredSelection selection=null;
  if (getSelection() instanceof IStructuredSelection) {
    selection=(IStructuredSelection)getSelection();
  }
  if (selection != null && !selection.isEmpty() && selection.getFirstElement() instanceof ReportDesignEditPart) {
    return ((ModuleHandle)((ReportDesignEditPart)selection.getFirstElement()).getModel()).getTheme();
  }
  return null;
}",0.9789719626168224
73822,"/** 
 * Convert group unit type from Chart's to DtE's.
 * @param dataType
 * @param groupUnitType
 * @param intervalRange
 * @since BIRT 2.3
 */
public static int convertToDtEGroupUnit(DataType dataType,GroupingUnitType groupUnitType,double intervalRange){
  if (dataType == DataType.NUMERIC_LITERAL) {
    if (intervalRange == 0) {
      return IGroupDefinition.NO_INTERVAL;
    }
    return IGroupDefinition.NUMERIC_INTERVAL;
  }
 else   if (dataType == DataType.DATE_TIME_LITERAL) {
switch (groupUnitType.getValue()) {
case GroupingUnitType.SECONDS:
      return IGroupDefinition.SECOND_INTERVAL;
case GroupingUnitType.MINUTES:
    return IGroupDefinition.MINUTE_INTERVAL;
case GroupingUnitType.HOURS:
  return IGroupDefinition.HOUR_INTERVAL;
case GroupingUnitType.DAYS:
return IGroupDefinition.DAY_INTERVAL;
case GroupingUnitType.MONTHS:
return IGroupDefinition.MONTH_INTERVAL;
case GroupingUnitType.QUARTERS:
return IGroupDefinition.QUARTER_INTERVAL;
case GroupingUnitType.YEARS:
return IGroupDefinition.YEAR_INTERVAL;
}
}
 else if (dataType == DataType.TEXT_LITERAL) {
switch (groupUnitType.getValue()) {
case GroupingUnitType.STRING_PREFIX:
return IGroupDefinition.STRING_PREFIX_INTERVAL;
}
return IGroupDefinition.NO_INTERVAL;
}
return IGroupDefinition.NO_INTERVAL;
}","/** 
 * Convert group unit type from Chart's to DtE's.
 * @param dataType
 * @param groupUnitType
 * @param intervalRange
 * @since BIRT 2.3
 */
public static int convertToDtEGroupUnit(DataType dataType,GroupingUnitType groupUnitType,double intervalRange){
  if (dataType == DataType.NUMERIC_LITERAL) {
    if (intervalRange == 0) {
      return IGroupDefinition.NO_INTERVAL;
    }
    return IGroupDefinition.NUMERIC_INTERVAL;
  }
 else   if (dataType == DataType.DATE_TIME_LITERAL) {
switch (groupUnitType.getValue()) {
case GroupingUnitType.SECONDS:
      return IGroupDefinition.SECOND_INTERVAL;
case GroupingUnitType.MINUTES:
    return IGroupDefinition.MINUTE_INTERVAL;
case GroupingUnitType.HOURS:
  return IGroupDefinition.HOUR_INTERVAL;
case GroupingUnitType.DAYS:
return IGroupDefinition.DAY_INTERVAL;
case GroupingUnitType.WEEKS:
return IGroupDefinition.WEEK_INTERVAL;
case GroupingUnitType.MONTHS:
return IGroupDefinition.MONTH_INTERVAL;
case GroupingUnitType.QUARTERS:
return IGroupDefinition.QUARTER_INTERVAL;
case GroupingUnitType.YEARS:
return IGroupDefinition.YEAR_INTERVAL;
}
}
 else if (dataType == DataType.TEXT_LITERAL) {
switch (groupUnitType.getValue()) {
case GroupingUnitType.STRING_PREFIX:
return IGroupDefinition.STRING_PREFIX_INTERVAL;
}
return IGroupDefinition.NO_INTERVAL;
}
return IGroupDefinition.NO_INTERVAL;
}",0.974025974025974
73823,"public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException {
  return new PreparedCubeQuery(query,this.session,this.context,appContext);
}","public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException {
  adaptCubeQueryDefinition(query);
  return new PreparedCubeQuery(query,this.session,this.context,appContext);
}",0.910025706940874
73824,"public long getPageNumber(InstanceID iid){
  if (!isComplete()) {
    return -1;
  }
  initializePageHintReader();
  if (pageHintReader == null) {
    return -1;
  }
  int version=pageHintReader.getVersion();
  try {
    if (version == IPageHintReader.VERSION_0) {
      long offset=getInstanceOffset(iid);
      if (offset == -1) {
        return -1;
      }
      long totalPage=pageHintReader.getTotalPage();
      for (long pageNumber=1; pageNumber <= totalPage; pageNumber++) {
        IPageHint hint=pageHintReader.getPageHint(pageNumber);
        PageSection section=hint.getSection(0);
        if (offset >= section.startOffset) {
          return pageNumber;
        }
      }
    }
 else     if (version == IPageHintReader.VERSION_1) {
      long offset=getInstanceOffset(iid);
      if (offset == -1) {
        return -1;
      }
      long totalPage=pageHintReader.getTotalPage();
      for (long pageNumber=1; pageNumber <= totalPage; pageNumber++) {
        IPageHint hint=pageHintReader.getPageHint(pageNumber);
        int sectionCount=hint.getSectionCount();
        for (int i=0; i < sectionCount; i++) {
          PageSection section=hint.getSection(i);
          if (section.startOffset <= offset && offset <= section.endOffset) {
            return pageNumber;
          }
        }
      }
    }
 else     if (version == IPageHintReader.VERSION_2 || version == IPageHintReader.VERSION_3) {
      long totalPage=pageHintReader.getTotalPage();
      for (long pageNumber=1; pageNumber <= totalPage; pageNumber++) {
        IPageHint hint=pageHintReader.getPageHint(pageNumber);
        int sectionCount=hint.getSectionCount();
        Fragment fragment=new Fragment(new InstanceIDComparator());
        for (int i=0; i < sectionCount; i++) {
          PageSection section=hint.getSection(i);
          fragment.addFragment(section.starts,section.ends);
        }
        if (fragment.inFragment(iid)) {
          return pageNumber;
        }
      }
    }
  }
 catch (  IOException ex) {
  }
  return -1;
}","public long getPageNumber(InstanceID iid){
  if (!isComplete()) {
    return -1;
  }
  initializePageHintReader();
  if (pageHintReader == null) {
    return -1;
  }
  int version=pageHintReader.getVersion();
  try {
    if (version == IPageHintReader.VERSION_0) {
      long offset=getInstanceOffset(iid);
      if (offset == -1) {
        return -1;
      }
      long totalPage=pageHintReader.getTotalPage();
      for (long pageNumber=1; pageNumber <= totalPage; pageNumber++) {
        IPageHint hint=pageHintReader.getPageHint(pageNumber);
        PageSection section=hint.getSection(0);
        if (offset >= section.startOffset) {
          return pageNumber;
        }
      }
    }
 else     if (version == IPageHintReader.VERSION_1) {
      long offset=getInstanceOffset(iid);
      if (offset == -1) {
        return -1;
      }
      long totalPage=pageHintReader.getTotalPage();
      for (long pageNumber=1; pageNumber <= totalPage; pageNumber++) {
        IPageHint hint=pageHintReader.getPageHint(pageNumber);
        int sectionCount=hint.getSectionCount();
        for (int i=0; i < sectionCount; i++) {
          PageSection section=hint.getSection(i);
          if (section.startOffset <= offset && offset <= section.endOffset) {
            return pageNumber;
          }
        }
      }
    }
 else     if (version == IPageHintReader.VERSION_2 || version == IPageHintReader.VERSION_3 || version == IPageHintReader.VERSION_4) {
      long totalPage=pageHintReader.getTotalPage();
      for (long pageNumber=1; pageNumber <= totalPage; pageNumber++) {
        IPageHint hint=pageHintReader.getPageHint(pageNumber);
        int sectionCount=hint.getSectionCount();
        Fragment fragment=new Fragment(new InstanceIDComparator());
        for (int i=0; i < sectionCount; i++) {
          PageSection section=hint.getSection(i);
          fragment.addFragment(section.starts,section.ends);
        }
        if (fragment.inFragment(iid)) {
          return pageNumber;
        }
      }
    }
  }
 catch (  IOException ex) {
  }
  return -1;
}",0.9902248289345064
73825,"protected Fragment loadPageHints(List pageSequence) throws IOException {
  if (pageSequence.size() == 1) {
    long[] pages=(long[])pageSequence.get(0);
    if (pages[0] == 1 && pages[1] == hintsReader.getTotalPage()) {
      return null;
    }
  }
  Fragment fragment=new Fragment(new InstanceIDComparator());
  PageRangeIterator iter=new PageRangeIterator(pageSequence);
  while (iter.hasNext()) {
    long pageNumber=iter.next();
    IPageHint pageHint=hintsReader.getPageHint(pageNumber);
    int sectCount=pageHint.getSectionCount();
    for (int i=0; i < sectCount; i++) {
      PageSection section=pageHint.getSection(i);
      InstanceIndex[] leftEdges=section.starts;
      InstanceIndex[] rightEdges=section.ends;
      fragment.addFragment(leftEdges,rightEdges);
    }
  }
  return fragment;
}","protected Fragment loadPageHints(List pageSequence) throws IOException {
  if (pageSequence.size() == 1) {
    if (context.getReportDocument().isComplete()) {
      long[] pages=(long[])pageSequence.get(0);
      if (pages[0] == 1 && pages[1] == hintsReader.getTotalPage()) {
        return null;
      }
    }
  }
  Fragment fragment=new Fragment(new InstanceIDComparator());
  PageRangeIterator iter=new PageRangeIterator(pageSequence);
  while (iter.hasNext()) {
    long pageNumber=iter.next();
    IPageHint pageHint=hintsReader.getPageHint(pageNumber);
    int sectCount=pageHint.getSectionCount();
    for (int i=0; i < sectCount; i++) {
      PageSection section=pageHint.getSection(i);
      InstanceIndex[] leftEdges=section.starts;
      InstanceIndex[] rightEdges=section.ends;
      fragment.addFragment(leftEdges,rightEdges);
    }
  }
  return fragment;
}",0.946236559139785
73826,"/** 
 * Draws a line with the line-style specified in advance from the start position to the end position with the given linewidth, color, and style at the given pdf layer. If the line-style is NOT set before invoking this method, ""solid"" will be used as the default line-style.
 * @param startX the start X coordinate of the line.
 * @param startY the start Y coordinate of the line.
 * @param endX the end X coordinate of the line.
 * @param endY the end Y coordinate of the line.
 * @param width the lineWidth
 * @param color the color of the line.
 * @param lineStyle the style of the line.
 */
protected void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle){
  if (null == color || 0f == width || ""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  contentByte.saveState();
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineCap(PdfContentByte.LINE_CAP_PROJECTING_SQUARE);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(3 * width,2 * width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(width,width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
 else {
    contentByte.setLineCap(PdfContentByte.LINE_CAP_PROJECTING_SQUARE);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  contentByte.restoreState();
}","/** 
 * Draws a line with the line-style specified in advance from the start position to the end position with the given line width, color, and style at the given PDF layer. If the line-style is NOT set before invoking this method, ""solid"" will be used as the default line-style.
 * @param startX the start X coordinate of the line.
 * @param startY the start Y coordinate of the line.
 * @param endX the end X coordinate of the line.
 * @param endY the end Y coordinate of the line.
 * @param width the lineWidth
 * @param color the color of the line.
 * @param lineStyle the style of the line.
 */
protected void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle){
  if (null == color || 0f == width || ""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  contentByte.saveState();
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineCap(PdfContentByte.LINE_CAP_PROJECTING_SQUARE);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(3 * width,2 * width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(width,width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
 else {
    contentByte.setLineCap(PdfContentByte.LINE_CAP_PROJECTING_SQUARE);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  contentByte.restoreState();
}",0.997880714501968
73827,"/** 
 * Draws the borders of a container.
 * @param borders the border info
 */
private void drawBorder(BorderInfo[] borders){
  ArrayList dbl=null;
  ArrayList solid=null;
  ArrayList dashed=null;
  ArrayList dotted=null;
  for (int i=0; i < borders.length; i++) {
    if (IStyle.DOUBLE_VALUE.equals(borders[i].borderStyle)) {
      if (null == dbl) {
        dbl=new ArrayList();
      }
      dbl.add(borders[i]);
    }
 else     if (IStyle.DASHED_VALUE.equals(borders[i].borderStyle)) {
      if (null == dashed) {
        dashed=new ArrayList();
      }
      dashed.add(borders[i]);
    }
 else     if (IStyle.DOTTED_VALUE.equals(borders[i].borderStyle)) {
      if (null == dotted) {
        dotted=new ArrayList();
      }
      dotted.add(borders[i]);
    }
 else {
      if (null == solid) {
        solid=new ArrayList();
      }
      solid.add(borders[i]);
    }
  }
  if (null != dotted) {
    for (Iterator it=dotted.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != dashed) {
    for (Iterator it=dashed.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != solid) {
    for (Iterator it=solid.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != dbl) {
    for (Iterator it=dbl.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      int borderWidth=bi.borderWidth;
      int outerBorderWidth=borderWidth / 4;
      int innerBorderWidth=borderWidth / 4;
      int startX=bi.startX;
      int startY=bi.startY;
      int endX=bi.endX;
      int endY=bi.endY;
      Color borderColor=bi.borderColor;
switch (bi.borderType) {
case BorderInfo.TOP_BORDER:
        pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY - borderWidth / 2 + outerBorderWidth / 2,endX + borderWidth / 2 - outerBorderWidth / 2,endY - borderWidth / 2 + outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
      pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY + borderWidth / 2 - innerBorderWidth / 2,endX + borderWidth / 2 - outerBorderWidth / 2,endY + borderWidth / 2 - innerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
    break;
case BorderInfo.RIGHT_BORDER:
  pageGraphic.drawLine(startX + borderWidth / 2 - outerBorderWidth / 2,startY - borderWidth / 2 + outerBorderWidth / 2,endX + borderWidth / 2 - outerBorderWidth / 2,endY + borderWidth / 2 - outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX - borderWidth / 2 + innerBorderWidth / 2,startY - borderWidth / 2 + outerBorderWidth / 2,endX - borderWidth / 2 + innerBorderWidth / 2,endY + borderWidth / 2 - outerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
break;
case BorderInfo.BOTTOM_BORDER:
pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY + borderWidth / 2 - outerBorderWidth / 2,endX + borderWidth / 2 - outerBorderWidth / 2,endY + borderWidth / 2 - outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY - borderWidth / 2 + innerBorderWidth / 2,endX + borderWidth / 2 - outerBorderWidth / 2,endY - borderWidth / 2 + innerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
break;
case BorderInfo.LEFT_BORDER:
pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY - borderWidth / 2 + outerBorderWidth / 2,endX - borderWidth / 2 + outerBorderWidth / 2,endY + borderWidth / 2 - outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX + borderWidth / 2 - innerBorderWidth / 2,startY - borderWidth / 2 + outerBorderWidth / 2,endX + borderWidth / 2 - innerBorderWidth / 2,endY + borderWidth / 2 - outerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
break;
}
}
}
}","/** 
 * Draws the borders of a container.
 * @param borders the border info
 */
private void drawBorder(BorderInfo[] borders){
  ArrayList dbl=null;
  ArrayList solid=null;
  ArrayList dashed=null;
  ArrayList dotted=null;
  for (int i=0; i < borders.length; i++) {
    if (IStyle.DOUBLE_VALUE.equals(borders[i].borderStyle)) {
      if (null == dbl) {
        dbl=new ArrayList();
      }
      dbl.add(borders[i]);
    }
 else     if (IStyle.DASHED_VALUE.equals(borders[i].borderStyle)) {
      if (null == dashed) {
        dashed=new ArrayList();
      }
      dashed.add(borders[i]);
    }
 else     if (IStyle.DOTTED_VALUE.equals(borders[i].borderStyle)) {
      if (null == dotted) {
        dotted=new ArrayList();
      }
      dotted.add(borders[i]);
    }
 else {
      if (null == solid) {
        solid=new ArrayList();
      }
      solid.add(borders[i]);
    }
  }
  if (null != dotted) {
    for (Iterator it=dotted.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != dashed) {
    for (Iterator it=dashed.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != solid) {
    for (Iterator it=solid.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != dbl) {
    for (Iterator it=dbl.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      int borderWidth=bi.borderWidth;
      int outerBorderWidth=borderWidth / 4;
      int innerBorderWidth=borderWidth / 4;
      int startX=bi.startX;
      int startY=bi.startY;
      int endX=bi.endX;
      int endY=bi.endY;
      Color borderColor=bi.borderColor;
switch (bi.borderType) {
case BorderInfo.TOP_BORDER:
        pageGraphic.drawLine(startX - borders[BorderInfo.LEFT_BORDER].borderWidth / 2 + outerBorderWidth / 2,startY - borderWidth / 2 + outerBorderWidth / 2,endX + borders[BorderInfo.RIGHT_BORDER].borderWidth / 2 - outerBorderWidth / 2,endY - borderWidth / 2 + outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
      pageGraphic.drawLine(startX - borders[BorderInfo.LEFT_BORDER].borderWidth / 2 + outerBorderWidth / 2,startY + borderWidth / 2 - innerBorderWidth / 2,endX + borders[BorderInfo.RIGHT_BORDER].borderWidth / 2 - outerBorderWidth / 2,endY + borderWidth / 2 - innerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
    break;
case BorderInfo.RIGHT_BORDER:
  pageGraphic.drawLine(startX + borderWidth / 2 - outerBorderWidth / 2,startY - borders[BorderInfo.TOP_BORDER].borderWidth / 2 + outerBorderWidth / 2,endX + borderWidth / 2 - outerBorderWidth / 2,endY + borders[BorderInfo.BOTTOM_BORDER].borderWidth / 2 - outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX - borderWidth / 2 + innerBorderWidth / 2,startY - borders[BorderInfo.TOP_BORDER].borderWidth / 2 + outerBorderWidth / 2,endX - borderWidth / 2 + innerBorderWidth / 2,endY + borders[BorderInfo.BOTTOM_BORDER].borderWidth / 2 - outerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
break;
case BorderInfo.BOTTOM_BORDER:
pageGraphic.drawLine(startX - borders[BorderInfo.LEFT_BORDER].borderWidth / 2 + outerBorderWidth / 2,startY + borderWidth / 2 - outerBorderWidth / 2,endX + borders[BorderInfo.RIGHT_BORDER].borderWidth / 2 - outerBorderWidth / 2,endY + borderWidth / 2 - outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX - borders[BorderInfo.LEFT_BORDER].borderWidth / 2 + outerBorderWidth / 2,startY - borderWidth / 2 + innerBorderWidth / 2,endX + borders[BorderInfo.RIGHT_BORDER].borderWidth / 2 - outerBorderWidth / 2,endY - borderWidth / 2 + innerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
break;
case BorderInfo.LEFT_BORDER:
pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY - borders[BorderInfo.TOP_BORDER].borderWidth / 2 + outerBorderWidth / 2,endX - borderWidth / 2 + outerBorderWidth / 2,endY + borders[BorderInfo.BOTTOM_BORDER].borderWidth / 2 - outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX + borderWidth / 2 - innerBorderWidth / 2,startY - borders[BorderInfo.TOP_BORDER].borderWidth / 2 + outerBorderWidth / 2,endX + borderWidth / 2 - innerBorderWidth / 2,endY + borders[BorderInfo.BOTTOM_BORDER].borderWidth / 2 - outerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
break;
}
}
}
}",0.6851974409883079
73828,"/** 
 * @param queryDefn
 * @param paramBindingIt
 * @param filterIt
 * @param bindingIt
 * @throws AdapterException 
 */
private void populateQueryDefn(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws AdapterException {
  try {
    while (bindingIt != null && bindingIt.hasNext()) {
      IComputedColumn column=this.modelAdaptor.adaptComputedColumn((ComputedColumnHandle)bindingIt.next());
      IBinding binding=new Binding(column.getName(),(ScriptExpression)column.getExpression());
      binding.setDataType(column.getDataType());
      queryDefn.addBinding(binding);
    }
    List parameterBindings=convertParamterBindings(paramBindingIt);
    if (parameterBindings != null)     queryDefn.getInputParamBindings().addAll(parameterBindings);
    List filters=convertFilters(filterIt);
    if (filters != null)     queryDefn.getFilters().addAll(filters);
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","/** 
 * @param queryDefn
 * @param paramBindingIt
 * @param filterIt
 * @param bindingIt
 * @throws AdapterException 
 */
private void populateQueryDefn(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws AdapterException {
  try {
    while (bindingIt != null && bindingIt.hasNext()) {
      queryDefn.addBinding(this.modelAdaptor.adaptBinding((ComputedColumnHandle)bindingIt.next()));
    }
    List parameterBindings=convertParamterBindings(paramBindingIt);
    if (parameterBindings != null)     queryDefn.getInputParamBindings().addAll(parameterBindings);
    List filters=convertFilters(filterIt);
    if (filters != null)     queryDefn.getFilters().addAll(filters);
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}",0.8262548262548263
73829,"protected void linkReportElement(ReportElementDesign element){
  long id=element.getID();
  DesignElementHandle elementHandle=handle.getElementByID(id);
  element.setHandle(elementHandle);
  getScriptIDBack(element);
  report.setReportItemInstanceID(id,element);
}","protected void linkReportElement(ReportElementDesign element){
  long id=element.getID();
  DesignElementHandle elementHandle=handle.getElementByID(id);
  if (elementHandle instanceof ReportItemHandle) {
    DesignElementHandle currentView=((ReportItemHandle)elementHandle).getCurrentView();
    if (currentView != null) {
      elementHandle=currentView;
    }
  }
  element.setHandle(elementHandle);
  getScriptIDBack(element);
  report.setReportItemInstanceID(id,element);
}",0.6936572199730094
73830,"public ReportItemDesign findDesign(ReportElementHandle handle){
  ReportElementDesign elementDesign=getReportItemByID(handle.getID());
  if (elementDesign != null) {
    return (ReportItemDesign)elementDesign;
  }
 else {
    return new EngineIRVisitor(reportDesign).translate(handle,this);
  }
}","public ReportItemDesign findDesign(ReportElementHandle handle){
  ReportElementDesign elementDesign=getReportItemByID(handle.getID());
  if (elementDesign != null) {
    return (ReportItemDesign)elementDesign;
  }
 else {
    return new MultiViewEngineIRVisitor(reportDesign).translate(handle,this);
  }
}",0.9850249584026622
73831,"public void visitTable(TableHandle handle){
  TableItemDesign table=new TableItemDesign();
  table.setRepeatHeader(handle.repeatHeader());
  setupListingItem(table,handle);
  String caption=handle.getCaption();
  String captionKey=handle.getCaptionKey();
  if (caption != null || captionKey != null) {
    table.setCaption(captionKey,caption);
  }
  SlotHandle columnSlot=handle.getColumns();
  for (int i=0; i < columnSlot.getCount(); i++) {
    ColumnHandle columnHandle=(ColumnHandle)columnSlot.get(i);
    apply(columnHandle);
    if (currentElement != null) {
      ColumnDesign columnDesign=(ColumnDesign)currentElement;
      for (int j=0; j < columnHandle.getRepeatCount(); j++) {
        table.addColumn(columnDesign);
      }
    }
  }
  SlotHandle headerSlot=handle.getHeader();
  if (headerSlot.getCount() > 0) {
    TableBandDesign header=createTableBand(headerSlot);
    header.setBandType(TableBandDesign.BAND_HEADER);
    table.setHeader(header);
  }
  SlotHandle groupSlot=handle.getGroups();
  for (int i=0; i < groupSlot.getCount(); i++) {
    apply(groupSlot.get(i));
    if (currentElement != null) {
      TableGroupDesign group=(TableGroupDesign)currentElement;
      group.setGroupLevel(i);
      table.addGroup(group);
    }
  }
  SlotHandle detailSlot=handle.getDetail();
  if (detailSlot.getCount() > 0) {
    TableBandDesign detail=createTableBand(detailSlot);
    detail.setBandType(TableBandDesign.BAND_DETAIL);
    table.setDetail(detail);
  }
  SlotHandle footerSlot=handle.getFooter();
  if (footerSlot.getCount() > 0) {
    TableBandDesign footer=createTableBand(footerSlot);
    footer.setBandType(TableBandDesign.BAND_FOOTER);
    table.setFooter(footer);
  }
  newCellId=new TableItemDesignLayout().layout(table,newCellId);
  for (int i=0; i < table.getGroupCount(); i++) {
    TableGroupDesign group=(TableGroupDesign)table.getGroup(i);
    locateGroupIcon(group);
  }
  applyColumnHighlight(table);
  TableBandDesign detail=(TableBandDesign)table.getDetail();
  if (detail != null) {
    for (int i=0; i < detail.getRowCount(); i++) {
      RowDesign row=detail.getRow(i);
      for (int j=0; j < row.getCellCount(); j++) {
        CellDesign cell=row.getCell(j);
        ColumnDesign column=table.getColumn(cell.getColumn());
        if (column.getSuppressDuplicate()) {
          for (int k=0; k < cell.getContentCount(); k++) {
            ReportItemDesign item=cell.getContent(k);
            if (item instanceof DataItemDesign) {
              DataItemDesign dataItem=(DataItemDesign)item;
              dataItem.setSuppressDuplicate(true);
            }
          }
        }
        if (!column.hasDataItemsInDetail()) {
          for (int k=0; k < cell.getContentCount(); k++) {
            ReportItemDesign item=cell.getContent(k);
            if (item instanceof DataItemDesign) {
              column.setHasDataItemsInDetail(true);
              break;
            }
          }
        }
      }
    }
  }
  currentElement=table;
}","public void visitTable(TableHandle handle){
  TableItemDesign table=new TableItemDesign();
  table.setRepeatHeader(handle.repeatHeader());
  setupListingItem(table,handle);
  String caption=handle.getCaption();
  String captionKey=handle.getCaptionKey();
  if (caption != null || captionKey != null) {
    table.setCaption(captionKey,caption);
  }
  SlotHandle columnSlot=handle.getColumns();
  for (int i=0; i < columnSlot.getCount(); i++) {
    ColumnHandle columnHandle=(ColumnHandle)columnSlot.get(i);
    apply(columnHandle);
    if (currentElement != null) {
      ColumnDesign columnDesign=(ColumnDesign)currentElement;
      for (int j=0; j < columnHandle.getRepeatCount(); j++) {
        table.addColumn(columnDesign);
      }
    }
  }
  SlotHandle headerSlot=handle.getHeader();
  if (headerSlot.getCount() > 0) {
    TableBandDesign header=createTableBand(headerSlot);
    header.setBandType(TableBandDesign.BAND_HEADER);
    table.setHeader(header);
  }
  SlotHandle groupSlot=handle.getGroups();
  for (int i=0; i < groupSlot.getCount(); i++) {
    apply(groupSlot.get(i));
    if (currentElement != null) {
      TableGroupDesign group=(TableGroupDesign)currentElement;
      group.setGroupLevel(i);
      table.addGroup(group);
    }
  }
  SlotHandle detailSlot=handle.getDetail();
  if (detailSlot.getCount() > 0) {
    TableBandDesign detail=createTableBand(detailSlot);
    detail.setBandType(TableBandDesign.BAND_DETAIL);
    table.setDetail(detail);
  }
  SlotHandle footerSlot=handle.getFooter();
  if (footerSlot.getCount() > 0) {
    TableBandDesign footer=createTableBand(footerSlot);
    footer.setBandType(TableBandDesign.BAND_FOOTER);
    table.setFooter(footer);
  }
  newCellId=new TableItemDesignLayout().layout(table,newCellId);
  for (int i=0; i < table.getGroupCount(); i++) {
    TableGroupDesign group=(TableGroupDesign)table.getGroup(i);
    locateGroupIcon(group);
  }
  applyColumnHighlight(table);
  TableBandDesign detail=(TableBandDesign)table.getDetail();
  if (detail != null) {
    for (int i=0; i < detail.getRowCount(); i++) {
      RowDesign row=detail.getRow(i);
      for (int j=0; j < row.getCellCount(); j++) {
        CellDesign cell=row.getCell(j);
        ColumnDesign column=table.getColumn(cell.getColumn());
        if (column.getSuppressDuplicate()) {
          for (int k=0; k < cell.getContentCount(); k++) {
            ReportItemDesign item=cell.getContent(k);
            if (item instanceof DataItemDesign) {
              DataItemDesign dataItem=(DataItemDesign)item;
              dataItem.setSuppressDuplicate(true);
            }
          }
        }
        if (!column.hasDataItemsInDetail()) {
          for (int k=0; k < cell.getContentCount(); k++) {
            ReportItemDesign item=cell.getContent(k);
            if (item instanceof DataItemDesign) {
              column.setHasDataItemsInDetail(true);
              break;
            }
          }
        }
      }
    }
  }
  setCurrentElement(table);
}",0.9969839142091153
73832,"public void visitList(ListHandle handle){
  ListItemDesign listItem=new ListItemDesign();
  setupListingItem(listItem,handle);
  SlotHandle headerSlot=handle.getHeader();
  if (headerSlot.getCount() > 0) {
    ListBandDesign header=createListBand(headerSlot);
    header.setBandType(ListBandDesign.BAND_HEADER);
    listItem.setHeader(header);
    listItem.setRepeatHeader(handle.repeatHeader());
  }
  SlotHandle groupsSlot=handle.getGroups();
  for (int i=0; i < groupsSlot.getCount(); i++) {
    apply(groupsSlot.get(i));
    if (currentElement != null) {
      GroupDesign group=(GroupDesign)currentElement;
      group.setGroupLevel(i);
      listItem.addGroup(group);
    }
  }
  SlotHandle detailSlot=handle.getDetail();
  if (detailSlot.getCount() > 0) {
    ListBandDesign detail=createListBand(detailSlot);
    detail.setBandType(ListBandDesign.BAND_DETAIL);
    listItem.setDetail(detail);
  }
  SlotHandle footerSlot=handle.getFooter();
  if (footerSlot.getCount() > 0) {
    ListBandDesign footer=createListBand(footerSlot);
    footer.setBandType(ListBandDesign.BAND_FOOTER);
    listItem.setFooter(footer);
  }
  currentElement=listItem;
}","public void visitList(ListHandle handle){
  ListItemDesign listItem=new ListItemDesign();
  setupListingItem(listItem,handle);
  SlotHandle headerSlot=handle.getHeader();
  if (headerSlot.getCount() > 0) {
    ListBandDesign header=createListBand(headerSlot);
    header.setBandType(ListBandDesign.BAND_HEADER);
    listItem.setHeader(header);
    listItem.setRepeatHeader(handle.repeatHeader());
  }
  SlotHandle groupsSlot=handle.getGroups();
  for (int i=0; i < groupsSlot.getCount(); i++) {
    apply(groupsSlot.get(i));
    if (currentElement != null) {
      GroupDesign group=(GroupDesign)currentElement;
      group.setGroupLevel(i);
      listItem.addGroup(group);
    }
  }
  SlotHandle detailSlot=handle.getDetail();
  if (detailSlot.getCount() > 0) {
    ListBandDesign detail=createListBand(detailSlot);
    detail.setBandType(ListBandDesign.BAND_DETAIL);
    listItem.setDetail(detail);
  }
  SlotHandle footerSlot=handle.getFooter();
  if (footerSlot.getCount() > 0) {
    ListBandDesign footer=createListBand(footerSlot);
    footer.setBandType(ListBandDesign.BAND_FOOTER);
    listItem.setFooter(footer);
  }
  setCurrentElement(listItem);
}",0.9965397923875432
73833,"public void visitGraphicMasterPage(GraphicMasterPageHandle handle){
  GraphicMasterPageDesign page=new GraphicMasterPageDesign();
  setupMasterPage(page,handle);
  page.setColumns(handle.getColumnCount());
  DimensionType spacing=createDimension(handle.getColumnSpacing(),true);
  page.setColumnSpacing(spacing);
  SlotHandle contentSlot=handle.getContent();
  for (int i=0; i < contentSlot.getCount(); i++) {
    apply(contentSlot.get(i));
    if (currentElement != null) {
      page.addContent((ReportItemDesign)currentElement);
    }
  }
  currentElement=page;
  Assert.isTrue(false,""String_Node_Str"");
}","public void visitGraphicMasterPage(GraphicMasterPageHandle handle){
  GraphicMasterPageDesign page=new GraphicMasterPageDesign();
  setupMasterPage(page,handle);
  page.setColumns(handle.getColumnCount());
  DimensionType spacing=createDimension(handle.getColumnSpacing(),true);
  page.setColumnSpacing(spacing);
  SlotHandle contentSlot=handle.getContent();
  for (int i=0; i < contentSlot.getCount(); i++) {
    apply(contentSlot.get(i));
    if (currentElement != null) {
      page.addContent((ReportItemDesign)currentElement);
    }
  }
  setCurrentElement(page);
  Assert.isTrue(false,""String_Node_Str"");
}",0.9868852459016394
73834,"public void visitColumn(ColumnHandle handle){
  ColumnDesign col=new ColumnDesign();
  setupReportElement(col,handle);
  col.setColumnHeaderState(false);
  DimensionType width=createDimension(handle.getWidth(),false);
  col.setWidth(width);
  boolean supress=handle.suppressDuplicates();
  col.setSuppressDuplicate(supress);
  VisibilityDesign visibility=createVisibility(handle.visibilityRulesIterator());
  col.setVisibility(visibility);
  currentElement=col;
}","public void visitColumn(ColumnHandle handle){
  ColumnDesign col=new ColumnDesign();
  setupReportElement(col,handle);
  col.setColumnHeaderState(false);
  DimensionType width=createDimension(handle.getWidth(),false);
  col.setWidth(width);
  boolean supress=handle.suppressDuplicates();
  col.setSuppressDuplicate(supress);
  VisibilityDesign visibility=createVisibility(handle.visibilityRulesIterator());
  col.setVisibility(visibility);
  setCurrentElement(col);
}",0.9849462365591398
73835,"public void visitLabel(LabelHandle handle){
  LabelItemDesign labelItem=new LabelItemDesign();
  setupReportItem(labelItem,handle);
  String text=handle.getText();
  String textKey=handle.getTextKey();
  labelItem.setText(textKey,text);
  ActionHandle action=handle.getActionHandle();
  if (action != null) {
    labelItem.setAction(createAction(action));
  }
  labelItem.setHelpText(handle.getHelpTextKey(),handle.getHelpText());
  currentElement=labelItem;
}","public void visitLabel(LabelHandle handle){
  LabelItemDesign labelItem=new LabelItemDesign();
  setupReportItem(labelItem,handle);
  String text=handle.getText();
  String textKey=handle.getTextKey();
  labelItem.setText(textKey,text);
  ActionHandle action=handle.getActionHandle();
  if (action != null) {
    labelItem.setAction(createAction(action));
  }
  labelItem.setHelpText(handle.getHelpTextKey(),handle.getHelpText());
  setCurrentElement(labelItem);
}",0.971861471861472
73836,"/** 
 * setup report element attribute
 * @param elem engine's report element
 * @param handle DE's report element
 */
private void setupReportElement(ReportElementDesign element,DesignElementHandle handle){
  element.setHandle(handle);
  element.setName(handle.getName());
  element.setID(handle.getID());
  List list=handle.getUserProperties();
  if (list != null) {
    Iterator iter=list.iterator();
    while (iter.hasNext()) {
      UserPropertyDefn propDefn=(UserPropertyDefn)iter.next();
      String propName=propDefn.getName();
      PropertyHandle propHandle=handle.getPropertyHandle(propName);
      String propValue=propHandle.getStringValue();
      element.getCustomProperties().put(propName,propValue);
    }
  }
  setupNamedExpressions(handle,element.getNamedExpressions());
  setupElementIDMap(element);
  element.setJavaClass(handle.getEventHandlerClass());
}","/** 
 * setup report element attribute
 * @param elem engine's report element
 * @param handle DE's report element
 */
private void setupReportElement(ReportElementDesign element,DesignElementHandle handle){
  element.setHandle(handle);
  element.setName(handle.getName());
  long id=currentElementId == -1 ? handle.getID() : currentElementId;
  element.setID(id);
  List list=handle.getUserProperties();
  if (list != null) {
    Iterator iter=list.iterator();
    while (iter.hasNext()) {
      UserPropertyDefn propDefn=(UserPropertyDefn)iter.next();
      String propName=propDefn.getName();
      PropertyHandle propHandle=handle.getPropertyHandle(propName);
      String propValue=propHandle.getStringValue();
      element.getCustomProperties().put(propName,propValue);
    }
  }
  setupNamedExpressions(handle,element.getNamedExpressions());
  setupElementIDMap(element);
  element.setJavaClass(handle.getEventHandlerClass());
}",0.948180815876516
73837,"public void visitGrid(GridHandle handle){
  GridItemDesign grid=new GridItemDesign();
  setupReportItem(grid,handle);
  SlotHandle columnSlot=handle.getColumns();
  for (int i=0; i < columnSlot.getCount(); i++) {
    ColumnHandle columnHandle=(ColumnHandle)columnSlot.get(i);
    apply(columnHandle);
    if (currentElement != null) {
      ColumnDesign columnDesign=(ColumnDesign)currentElement;
      for (int j=0; j < columnHandle.getRepeatCount(); j++) {
        grid.addColumn(columnDesign);
      }
    }
  }
  SlotHandle rowSlot=handle.getRows();
  for (int i=0; i < rowSlot.getCount(); i++) {
    apply(rowSlot.get(i));
    if (currentElement != null) {
      grid.addRow((RowDesign)currentElement);
    }
  }
  newCellId=new TableItemDesignLayout().layout(grid,newCellId);
  applyColumnHighlight(grid);
  currentElement=grid;
}","public void visitGrid(GridHandle handle){
  GridItemDesign grid=new GridItemDesign();
  setupReportItem(grid,handle);
  SlotHandle columnSlot=handle.getColumns();
  for (int i=0; i < columnSlot.getCount(); i++) {
    ColumnHandle columnHandle=(ColumnHandle)columnSlot.get(i);
    apply(columnHandle);
    if (currentElement != null) {
      ColumnDesign columnDesign=(ColumnDesign)currentElement;
      for (int j=0; j < columnHandle.getRepeatCount(); j++) {
        grid.addColumn(columnDesign);
      }
    }
  }
  SlotHandle rowSlot=handle.getRows();
  for (int i=0; i < rowSlot.getCount(); i++) {
    apply(rowSlot.get(i));
    if (currentElement != null) {
      grid.addRow((RowDesign)currentElement);
    }
  }
  newCellId=new TableItemDesignLayout().layout(grid,newCellId);
  applyColumnHighlight(grid);
  setCurrentElement(grid);
}",0.9904534606205252
73838,"/** 
 * create a table group using the DE's TableGroup.
 * @param handle De's table group
 * @return engine's table group
 */
public void visitTableGroup(TableGroupHandle handle){
  TableGroupDesign tableGroup=new TableGroupDesign();
  setupGroup(tableGroup,handle);
  SlotHandle headerSlot=handle.getHeader();
  if (headerSlot.getCount() > 0) {
    TableBandDesign header=createTableBand(handle.getHeader());
    header.setBandType(TableBandDesign.GROUP_HEADER);
    header.setGroup(tableGroup);
    tableGroup.setHeader(header);
    tableGroup.setHeaderRepeat(handle.repeatHeader());
    String toc=handle.getTocExpression();
    if (null != toc && !""String_Node_Str"".equals(toc.trim())) {
      tableGroup.setTOC(createExpression(toc));
    }
  }
  SlotHandle footerSlot=handle.getFooter();
  if (footerSlot.getCount() > 0) {
    TableBandDesign footer=createTableBand(handle.getFooter());
    footer.setBandType(TableBandDesign.GROUP_FOOTER);
    footer.setGroup(tableGroup);
    tableGroup.setFooter(footer);
  }
  boolean hideDetail=handle.hideDetail();
  tableGroup.setHideDetail(hideDetail);
  currentElement=tableGroup;
}","/** 
 * create a table group using the DE's TableGroup.
 * @param handle De's table group
 * @return engine's table group
 */
public void visitTableGroup(TableGroupHandle handle){
  TableGroupDesign tableGroup=new TableGroupDesign();
  setupGroup(tableGroup,handle);
  SlotHandle headerSlot=handle.getHeader();
  if (headerSlot.getCount() > 0) {
    TableBandDesign header=createTableBand(handle.getHeader());
    header.setBandType(TableBandDesign.GROUP_HEADER);
    header.setGroup(tableGroup);
    tableGroup.setHeader(header);
    tableGroup.setHeaderRepeat(handle.repeatHeader());
    String toc=handle.getTocExpression();
    if (null != toc && !""String_Node_Str"".equals(toc.trim())) {
      tableGroup.setTOC(createExpression(toc));
    }
  }
  SlotHandle footerSlot=handle.getFooter();
  if (footerSlot.getCount() > 0) {
    TableBandDesign footer=createTableBand(handle.getFooter());
    footer.setBandType(TableBandDesign.GROUP_FOOTER);
    footer.setGroup(tableGroup);
    tableGroup.setFooter(footer);
  }
  boolean hideDetail=handle.hideDetail();
  tableGroup.setHideDetail(hideDetail);
  setCurrentElement(tableGroup);
}",0.9876325088339224
73839,"protected void visitExtendedItem(ExtendedItemHandle obj){
  ExtendedItemDesign extendedItem=new ExtendedItemDesign();
  setupReportItem(extendedItem,obj);
  extendedItem.setAltText(obj.getAltTextKey(),obj.getAltText());
  extendedItemNestingCount++;
  handleExtendedItemChildren(extendedItem,obj);
  extendedItemNestingCount--;
  currentElement=extendedItem;
}","protected void visitExtendedItem(ExtendedItemHandle obj){
  ExtendedItemDesign extendedItem=new ExtendedItemDesign();
  setupReportItem(extendedItem,obj);
  extendedItem.setAltText(obj.getAltTextKey(),obj.getAltText());
  extendedItemNestingCount++;
  handleExtendedItemChildren(extendedItem,obj);
  extendedItemNestingCount--;
  setCurrentElement(extendedItem);
}",0.9558011049723756
73840,"public void visitCell(CellHandle handle){
  CellDesign cell=new CellDesign();
  setupStyledElement(cell,handle);
  SlotHandle contentSlot=handle.getContent();
  for (int i=0; i < contentSlot.getCount(); i++) {
    apply(contentSlot.get(i));
    if (currentElement != null) {
      cell.addContent((ReportItemDesign)currentElement);
    }
  }
  cell.setColSpan(handle.getColumnSpan());
  int columnId=handle.getColumn() - 1;
  if (columnId < 0) {
    columnId=-1;
  }
  cell.setColumn(columnId);
  cell.setRowSpan(handle.getRowSpan());
  if (isCellInGroupHeader(handle)) {
    cell.setDrop(handle.getDrop());
  }
  String onCreate=handle.getOnCreate();
  String onCreateScriptText=createExpression(onCreate);
  if (null != onCreateScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_CREATE_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(onCreateScriptText,id);
    cell.setOnCreate(scriptExpr);
  }
  String OnRenderScriptText=handle.getOnRender();
  if (null != OnRenderScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_RENDER_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(OnRenderScriptText,id);
    cell.setOnRender(scriptExpr);
  }
  setupHighlight(cell,null);
  currentElement=cell;
}","public void visitCell(CellHandle handle){
  CellDesign cell=new CellDesign();
  setupStyledElement(cell,handle);
  SlotHandle contentSlot=handle.getContent();
  for (int i=0; i < contentSlot.getCount(); i++) {
    apply(contentSlot.get(i));
    if (currentElement != null) {
      cell.addContent((ReportItemDesign)currentElement);
    }
  }
  cell.setColSpan(handle.getColumnSpan());
  int columnId=handle.getColumn() - 1;
  if (columnId < 0) {
    columnId=-1;
  }
  cell.setColumn(columnId);
  cell.setRowSpan(handle.getRowSpan());
  if (isCellInGroupHeader(handle)) {
    cell.setDrop(handle.getDrop());
  }
  String onCreate=handle.getOnCreate();
  String onCreateScriptText=createExpression(onCreate);
  if (null != onCreateScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_CREATE_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(onCreateScriptText,id);
    cell.setOnCreate(scriptExpr);
  }
  String OnRenderScriptText=handle.getOnRender();
  if (null != OnRenderScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_RENDER_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(OnRenderScriptText,id);
    cell.setOnRender(scriptExpr);
  }
  setupHighlight(cell,null);
  setCurrentElement(cell);
}",0.9938603223330776
73841,"public void visitDataItem(DataItemHandle handle){
  DataItemDesign data=new DataItemDesign();
  setupReportItem(data,handle);
  String expr=handle.getResultSetColumn();
  if (expr != null && expr.trim().length() > 0) {
    data.setBindingColumn(expr);
  }
  ActionHandle action=handle.getActionHandle();
  if (action != null) {
    data.setAction(createAction(action));
  }
  data.setHelpText(handle.getHelpTextKey(),handle.getHelpText());
  setupHighlight(data,expr);
  setMap(data,expr);
  if (extendedItemNestingCount > 0) {
    data.setNeedRefreshMapping(true);
  }
  currentElement=data;
}","public void visitDataItem(DataItemHandle handle){
  DataItemDesign data=new DataItemDesign();
  setupReportItem(data,handle);
  String expr=handle.getResultSetColumn();
  if (expr != null && expr.trim().length() > 0) {
    data.setBindingColumn(expr);
  }
  ActionHandle action=handle.getActionHandle();
  if (action != null) {
    data.setAction(createAction(action));
  }
  data.setHelpText(handle.getHelpTextKey(),handle.getHelpText());
  setupHighlight(data,expr);
  setMap(data,expr);
  if (extendedItemNestingCount > 0) {
    data.setNeedRefreshMapping(true);
  }
  setCurrentElement(data);
}",0.9865771812080536
73842,"public void visitAutoText(AutoTextHandle handle){
  AutoTextItemDesign autoTextItem=new AutoTextItemDesign();
  setupReportItem(autoTextItem,handle);
  autoTextItem.setType(handle.getAutoTextType());
  currentElement=autoTextItem;
}","public void visitAutoText(AutoTextHandle handle){
  AutoTextItemDesign autoTextItem=new AutoTextItemDesign();
  setupReportItem(autoTextItem,handle);
  autoTextItem.setType(handle.getAutoTextType());
  setCurrentElement(autoTextItem);
}",0.9316239316239316
73843,"public void visitTextDataItem(TextDataHandle handle){
  DynamicTextItemDesign dynamicTextItem=new DynamicTextItemDesign();
  setupReportItem(dynamicTextItem,handle);
  String valueExpr=handle.getValueExpr();
  String contentType=handle.getContentType();
  dynamicTextItem.setContent(createExpression(valueExpr));
  dynamicTextItem.setContentType(contentType);
  setupHighlight(dynamicTextItem,valueExpr);
  setMap(dynamicTextItem,valueExpr);
  currentElement=dynamicTextItem;
}","public void visitTextDataItem(TextDataHandle handle){
  DynamicTextItemDesign dynamicTextItem=new DynamicTextItemDesign();
  setupReportItem(dynamicTextItem,handle);
  String valueExpr=handle.getValueExpr();
  String contentType=handle.getContentType();
  dynamicTextItem.setContent(createExpression(valueExpr));
  dynamicTextItem.setContentType(contentType);
  setupHighlight(dynamicTextItem,valueExpr);
  setMap(dynamicTextItem,valueExpr);
  setCurrentElement(dynamicTextItem);
}",0.9331941544885176
73844,"/** 
 * create a list group using the DE's ListGroup.
 * @param handle De's list group
 * @return engine's list group
 */
public void visitListGroup(ListGroupHandle handle){
  ListGroupDesign listGroup=new ListGroupDesign();
  setupGroup(listGroup,handle);
  SlotHandle headerSlot=handle.getHeader();
  if (headerSlot.getCount() > 0) {
    ListBandDesign header=createListBand(headerSlot);
    header.setBandType(ListBandDesign.GROUP_HEADER);
    header.setGroup(listGroup);
    listGroup.setHeader(header);
    listGroup.setHeaderRepeat(handle.repeatHeader());
    String toc=handle.getTocExpression();
    if (null != toc && !""String_Node_Str"".equals(toc.trim())) {
      listGroup.setTOC(createExpression(toc));
    }
  }
  SlotHandle footerSlot=handle.getFooter();
  if (footerSlot.getCount() > 0) {
    ListBandDesign footer=createListBand(footerSlot);
    footer.setBandType(ListBandDesign.GROUP_FOOTER);
    footer.setGroup(listGroup);
    listGroup.setFooter(footer);
  }
  boolean hideDetail=handle.hideDetail();
  listGroup.setHideDetail(hideDetail);
  currentElement=listGroup;
}","/** 
 * create a list group using the DE's ListGroup.
 * @param handle De's list group
 * @return engine's list group
 */
public void visitListGroup(ListGroupHandle handle){
  ListGroupDesign listGroup=new ListGroupDesign();
  setupGroup(listGroup,handle);
  SlotHandle headerSlot=handle.getHeader();
  if (headerSlot.getCount() > 0) {
    ListBandDesign header=createListBand(headerSlot);
    header.setBandType(ListBandDesign.GROUP_HEADER);
    header.setGroup(listGroup);
    listGroup.setHeader(header);
    listGroup.setHeaderRepeat(handle.repeatHeader());
    String toc=handle.getTocExpression();
    if (null != toc && !""String_Node_Str"".equals(toc.trim())) {
      listGroup.setTOC(createExpression(toc));
    }
  }
  SlotHandle footerSlot=handle.getFooter();
  if (footerSlot.getCount() > 0) {
    ListBandDesign footer=createListBand(footerSlot);
    footer.setBandType(ListBandDesign.GROUP_FOOTER);
    footer.setGroup(listGroup);
    listGroup.setFooter(footer);
  }
  boolean hideDetail=handle.hideDetail();
  listGroup.setHideDetail(hideDetail);
  setCurrentElement(listGroup);
}",0.988095238095238
73845,"public void visitTemplateReportItem(TemplateReportItemHandle obj){
  TemplateDesign template=new TemplateDesign();
  setupTemplateReportElement(template,obj);
  template.setPromptText(obj.getDescription());
  template.setPromptTextKey(obj.getDescriptionKey());
  template.setAllowedType(obj.getAllowedType());
  currentElement=template;
}","public void visitTemplateReportItem(TemplateReportItemHandle obj){
  TemplateDesign template=new TemplateDesign();
  setupTemplateReportElement(template,obj);
  template.setPromptText(obj.getDescription());
  template.setPromptTextKey(obj.getDescriptionKey());
  template.setAllowedType(obj.getAllowedType());
  setCurrentElement(template);
}",0.9647058823529412
73846,"public void visitSimpleMasterPage(SimpleMasterPageHandle handle){
  SimpleMasterPageDesign page=new SimpleMasterPageDesign();
  setupMasterPage(page,handle);
  page.setHeaderHeight(createDimension(handle.getHeaderHeight(),true));
  page.setFooterHeight(createDimension(handle.getFooterHeight(),true));
  page.setShowFooterOnLast(handle.showFooterOnLast());
  page.setShowHeaderOnFirst(handle.showHeaderOnFirst());
  page.setFloatingFooter(handle.isFloatingFooter());
  SlotHandle headerSlot=handle.getPageHeader();
  for (int i=0; i < headerSlot.getCount(); i++) {
    apply(headerSlot.get(i));
    if (currentElement != null) {
      page.addHeader((ReportItemDesign)currentElement);
    }
  }
  SlotHandle footerSlot=handle.getPageFooter();
  for (int i=0; i < footerSlot.getCount(); i++) {
    apply(footerSlot.get(i));
    if (currentElement != null) {
      page.addFooter((ReportItemDesign)currentElement);
    }
  }
  currentElement=page;
}","public void visitSimpleMasterPage(SimpleMasterPageHandle handle){
  SimpleMasterPageDesign page=new SimpleMasterPageDesign();
  setupMasterPage(page,handle);
  page.setHeaderHeight(createDimension(handle.getHeaderHeight(),true));
  page.setFooterHeight(createDimension(handle.getFooterHeight(),true));
  page.setShowFooterOnLast(handle.showFooterOnLast());
  page.setShowHeaderOnFirst(handle.showHeaderOnFirst());
  page.setFloatingFooter(handle.isFloatingFooter());
  SlotHandle headerSlot=handle.getPageHeader();
  for (int i=0; i < headerSlot.getCount(); i++) {
    apply(headerSlot.get(i));
    if (currentElement != null) {
      page.addHeader((ReportItemDesign)currentElement);
    }
  }
  SlotHandle footerSlot=handle.getPageFooter();
  for (int i=0; i < footerSlot.getCount(); i++) {
    apply(footerSlot.get(i));
    if (currentElement != null) {
      page.addFooter((ReportItemDesign)currentElement);
    }
  }
  setCurrentElement(page);
}",0.9915700737618546
73847,"public void visitFreeForm(FreeFormHandle handle){
  FreeFormItemDesign container=new FreeFormItemDesign();
  setupReportItem(container,handle);
  SlotHandle slot=handle.getReportItems();
  for (int i=0; i < slot.getCount(); i++) {
    apply(slot.get(i));
    if (currentElement != null) {
      container.addItem((ReportItemDesign)currentElement);
    }
  }
  currentElement=container;
}","public void visitFreeForm(FreeFormHandle handle){
  FreeFormItemDesign container=new FreeFormItemDesign();
  setupReportItem(container,handle);
  SlotHandle slot=handle.getReportItems();
  for (int i=0; i < slot.getCount(); i++) {
    apply(slot.get(i));
    if (currentElement != null) {
      container.addItem((ReportItemDesign)currentElement);
    }
  }
  setCurrentElement(container);
}",0.9665809768637532
73848,"public void visitRow(RowHandle handle){
  RowDesign row=new RowDesign();
  setupStyledElement(row,handle);
  DimensionType height=createDimension(handle.getHeight(),false);
  row.setHeight(height);
  String bookmark=handle.getBookmark();
  row.setBookmark(createExpression(bookmark));
  VisibilityDesign visibility=createVisibility(handle.visibilityRulesIterator());
  row.setVisibility(visibility);
  SlotHandle cellSlot=handle.getCells();
  for (int i=0; i < cellSlot.getCount(); i++) {
    apply(cellSlot.get(i));
    if (currentElement != null) {
      row.addCell((CellDesign)currentElement);
    }
  }
  String onCreate=handle.getOnCreate();
  String OnCreateScriptText=createExpression(onCreate);
  if (null != OnCreateScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ITableRowModel.ON_CREATE_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(OnCreateScriptText,id);
    row.setOnCreate(scriptExpr);
  }
  String OnRenderScriptText=((RowHandle)handle).getOnRender();
  if (null != OnRenderScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ITableRowModel.ON_RENDER_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(OnRenderScriptText,id);
    row.setOnRender(scriptExpr);
  }
  setupHighlight(row,null);
  currentElement=row;
}","public void visitRow(RowHandle handle){
  RowDesign row=new RowDesign();
  setupStyledElement(row,handle);
  DimensionType height=createDimension(handle.getHeight(),false);
  row.setHeight(height);
  String bookmark=handle.getBookmark();
  row.setBookmark(createExpression(bookmark));
  VisibilityDesign visibility=createVisibility(handle.visibilityRulesIterator());
  row.setVisibility(visibility);
  SlotHandle cellSlot=handle.getCells();
  for (int i=0; i < cellSlot.getCount(); i++) {
    apply(cellSlot.get(i));
    if (currentElement != null) {
      row.addCell((CellDesign)currentElement);
    }
  }
  String onCreate=handle.getOnCreate();
  String OnCreateScriptText=createExpression(onCreate);
  if (null != OnCreateScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ITableRowModel.ON_CREATE_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(OnCreateScriptText,id);
    row.setOnCreate(scriptExpr);
  }
  String OnRenderScriptText=((RowHandle)handle).getOnRender();
  if (null != OnRenderScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ITableRowModel.ON_RENDER_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(OnRenderScriptText,id);
    row.setOnRender(scriptExpr);
  }
  setupHighlight(row,null);
  setCurrentElement(row);
}",0.9946808510638298
73849,"/** 
 * parse the XML input stream.
 * @param design DE's IR
 * @return FPE's IR, null if there is any error.
 */
public Report parse(ReportDesignHandle design){
  assert(design != null);
  EngineIRVisitor visitor=new EngineIRVisitor(design);
  Report report=visitor.translate();
  report.setVersion(ReportDocumentConstants.BIRT_ENGINE_VERSION);
  return report;
}","/** 
 * parse the XML input stream.
 * @param design DE's IR
 * @return FPE's IR, null if there is any error.
 */
public Report parse(ReportDesignHandle design){
  assert(design != null);
  EngineIRVisitor visitor=new MultiViewEngineIRVisitor(design);
  Report report=visitor.translate();
  report.setVersion(ReportDocumentConstants.BIRT_ENGINE_VERSION);
  return report;
}",0.9877883310719132
73850,"public Object visitImage(IImageContent image,Object value){
  if (image.getImageSource() == IImageContent.IMAGE_FILE || image.getImageSource() == IImageContent.IMAGE_URL) {
    String strUri=image.getURI();
    ReportDesignHandle reportDesign=context.getDesign();
    URL uri=reportDesign.findResource(strUri,IResourceLocator.IMAGE);
    if (uri != null) {
      image.setURI(uri.toExternalForm());
    }
  }
  handleOnRender(image);
  processImage(image);
  return image;
}","public Object visitImage(IImageContent image,Object value){
  handleOnRender(image);
  if (image.getImageSource() == IImageContent.IMAGE_FILE || image.getImageSource() == IImageContent.IMAGE_URL) {
    String strUri=image.getURI();
    ReportDesignHandle reportDesign=context.getDesign();
    URL uri=reportDesign.findResource(strUri,IResourceLocator.IMAGE);
    if (uri != null) {
      image.setURI(uri.toExternalForm());
    }
  }
  processImage(image);
  return image;
}",0.9472573839662448
73851,"public Collection getPageEdge() throws OLAPException {
  return this.cursor.getPageEdge();
}","public Collection getPageEdge() throws OLAPException {
  return new ArrayList();
}",0.8275862068965517
73852,"protected void executeQueries() throws BirtException {
  ExtendedItemDesign extItem=(ExtendedItemDesign)design;
  IDataEngine dataEngine=context.getDataEngine();
  boolean useCache=extItem.useCachedResult();
  IDataQueryDefinition[] queries=extItem.getQueries();
  if (queries != null) {
    IBaseResultSet parent=getParentResultSet();
    rsets=new IBaseResultSet[queries.length];
    for (int i=0; i < rsets.length; i++) {
      rsets[i]=dataEngine.execute(parent,queries[i],useCache);
    }
    context.setResultSets(rsets);
  }
}","protected void executeQueries() throws BirtException {
  ExtendedItemDesign extItem=(ExtendedItemDesign)design;
  IDataEngine dataEngine=context.getDataEngine();
  boolean useCache=extItem.useCachedResult();
  IDataQueryDefinition[] queries=extItem.getQueries();
  if (queries != null) {
    IBaseResultSet parent=getParentResultSet();
    rsets=new IBaseResultSet[queries.length];
    for (int i=0; i < rsets.length; i++) {
      if (queries[i] == null) {
        rsets[i]=null;
      }
 else {
        rsets[i]=dataEngine.execute(parent,queries[i],useCache);
      }
    }
    context.setResultSets(rsets);
  }
}",0.9293809938971228
73853,"protected void executeQuery(){
  getParentResultSet();
  if (design != null) {
    boolean useCache=design.useCachedResult();
    IDataQueryDefinition[] queries=design.getQueries();
    if (queries != null) {
      rsets=new IBaseResultSet[queries.length];
      try {
        IBaseResultSet prset=restoreParentResultSet();
        for (int i=0; i < queries.length; i++) {
          rsets[i]=context.executeQuery(prset,queries[i],useCache);
        }
        context.setResultSets(rsets);
      }
 catch (      BirtException ex) {
        context.addException(this.getDesign(),ex);
      }
    }
  }
}","protected void executeQuery(){
  getParentResultSet();
  if (design != null) {
    boolean useCache=design.useCachedResult();
    IDataQueryDefinition[] queries=design.getQueries();
    if (queries != null) {
      rsets=new IBaseResultSet[queries.length];
      try {
        IBaseResultSet prset=restoreParentResultSet();
        for (int i=0; i < queries.length; i++) {
          if (queries[i] == null) {
            rsets[i]=null;
          }
 else {
            rsets[i]=context.executeQuery(prset,queries[i],useCache);
          }
        }
        context.setResultSets(rsets);
      }
 catch (      BirtException ex) {
        context.addException(this.getDesign(),ex);
      }
    }
  }
}",0.9253271747498076
73854,"/** 
 * Calculate the bookmark value which is set to <code>ReportItemContent</code> if the bookmark is not null
 * @param item the ReportItemContent object
 */
protected void processBookmark(ReportItemDesign item,IContent itemContent){
  String bookmark=item.getBookmark();
  if (bookmark != null) {
    Object tmp=evaluate(bookmark);
    if (tmp != null && !tmp.equals(""String_Node_Str"")) {
      itemContent.setBookmark(tmp.toString());
    }
  }
  String toc=item.getTOC();
  if (toc != null) {
    Object tmp=evaluate(toc);
    if (tmp != null) {
      itemContent.setTOC(tmp);
    }
  }
}","/** 
 * Calculate the bookmark value which is set to <code>ReportItemContent</code> if the bookmark is not null
 * @param item the ReportItemContent object
 */
protected void processBookmark(ReportItemDesign item,IContent itemContent){
  String bookmark=item.getBookmark();
  if (bookmark != null) {
    Object tmp=evaluate(bookmark);
    if (tmp != null && !tmp.equals(""String_Node_Str"")) {
      itemContent.setBookmark(tmp.toString());
    }
  }
  String toc=item.getTOC();
  if (toc != null) {
    Object tmp=evaluate(toc);
    if (tmp == null) {
      tmp=""String_Node_Str"";
    }
    itemContent.setTOC(tmp);
  }
}",0.966199505358615
73855,"/** 
 * @return if font is embeded
 */
public boolean isEmbededFont();","/** 
 * @return if font is embedded
 */
public boolean isEmbededFont();",0.9929078014184396
73856,"static String getElementProperty(ReportElementHandle handle,String name,boolean isColorProperty){
  FactoryPropertyHandle prop=handle.getFactoryPropertyHandle(name);
  if (prop != null && prop.isSet()) {
    if (isColorProperty) {
      return prop.getColorValue();
    }
    return prop.getStringValue();
  }
  return null;
}","static String getElementProperty(ReportElementHandle handle,String name,boolean isColorProperty){
  if (handle instanceof ExtendedItemHandle) {
    Object localValue=((ExtendedItemHandle)handle).getMetaModelProperty(name);
    if (localValue == null) {
      return null;
    }
  }
  FactoryPropertyHandle prop=handle.getFactoryPropertyHandle(name);
  if (prop != null && prop.isSet()) {
    if (isColorProperty) {
      return prop.getColorValue();
    }
    return prop.getStringValue();
  }
  return null;
}",0.7799043062200957
73857,"/** 
 * need overwrite this mothod to change default behavour. For inline leaf elements, page-break is handled by this layout manager. For block leaf elements. page-break is handled by it's block container
 */
protected boolean handlePageBreakBefore(){
  if (content != null) {
    if (PropertyUtil.isInlineElement(content)) {
      return super.handlePageBreakBefore();
    }
  }
  return false;
}","/** 
 * need overwrite this mothod to change default behavour. For inline leaf elements, page-break is handled by this layout manager. For block leaf elements. page-break is handled by it's block container
 */
protected boolean handlePageBreakBefore(){
  if (content != null) {
    return super.handlePageBreakBefore();
  }
  return false;
}",0.8849797023004059
73858,"/** 
 * @param cubeHandle
 * @return
 */
private Set needCachedDataSetToEnhancePerformance(TabularCubeHandle cubeHandle){
  Set set=new HashSet();
  set.add(cubeHandle.getDataSet());
  List dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (int i=0; i < dimHandles.size(); i++) {
    DimensionHandle dimHandle=(DimensionHandle)dimHandles.get(i);
    List hiers=dimHandle.getContents(DimensionHandle.HIERARCHIES_PROP);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)hiers.get(0);
    if (hierHandle.getDataSet() != null)     set.add(hierHandle.getDataSet());
  }
  return set;
}","/** 
 * @param cubeHandle
 * @return
 */
private List needCachedDataSetToEnhancePerformance(TabularCubeHandle cubeHandle){
  List list=new ArrayList();
  list.add(cubeHandle.getDataSet());
  List dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (int i=0; i < dimHandles.size(); i++) {
    DimensionHandle dimHandle=(DimensionHandle)dimHandles.get(i);
    List hiers=dimHandle.getContents(DimensionHandle.HIERARCHIES_PROP);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)hiers.get(0);
    if (hierHandle.getDataSet() != null)     list.add(hierHandle.getDataSet());
 else     list.add(cubeHandle.getDataSet());
  }
  return list;
}",0.9003921568627451
73859,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext,StopSign stopSign) throws IOException, BirtException, DataException {
  Set involvedDataSet=this.needCachedDataSetToEnhancePerformance(cubeHandle);
  boolean doPerfTuning=involvedDataSet.size() > 1 && (appContext == null || (appContext != null && appContext.get(DataEngine.DATA_SET_CACHE_ROW_LIMIT) == null && appContext.get(DataEngine.MEMORY_DATA_SET_CACHE) == null));
  Map candidateAppContext=new HashMap();
  if (appContext != null)   candidateAppContext.putAll(appContext);
  if (doPerfTuning) {
    candidateAppContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(-1));
    this.dataSetCache.addAll(involvedDataSet);
  }
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext,stopSign);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle,candidateAppContext),this.toStringArray(measureNames),stopSign);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext,StopSign stopSign) throws IOException, BirtException, DataException {
  List dataSetList=this.needCachedDataSetToEnhancePerformance(cubeHandle);
  Set involvedDataSet=new HashSet();
  for (int i=0; i < dataSetList.size(); i++) {
    involvedDataSet.add(dataSetList.get(i));
  }
  boolean doPerfTuning=(involvedDataSet.size() != dataSetList.size()) && (appContext == null || (appContext != null && appContext.get(DataEngine.DATA_SET_CACHE_ROW_LIMIT) == null && appContext.get(DataEngine.MEMORY_DATA_SET_CACHE) == null));
  Map candidateAppContext=new HashMap();
  if (appContext != null)   candidateAppContext.putAll(appContext);
  if (doPerfTuning) {
    candidateAppContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(-1));
    this.dataSetCache.addAll(involvedDataSet);
  }
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext,stopSign);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle,candidateAppContext),this.toStringArray(measureNames),stopSign);
}",0.9712011238585812
73860,"protected void setupPageBreak(PolicyNode node){
  ReportItemDesign item=node.design;
  String styleClass=item.getStyleName();
  if (styleClass != null) {
    IStyle style=report.findStyle(styleClass);
    CSSValue masterPage=style.getProperty(IStyle.STYLE_MASTER_PAGE);
    CSSValue pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    CSSValue pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    if (masterPage != null || pageBreakBefore != null) {
      node.breakBefore=true;
      node.execute=true;
    }
 else     if (pageBreakAfter != null) {
      node.breakAfter=true;
      node.execute=true;
    }
  }
  if (item.getJavaClass() != null || item.getOnCreate() != null || item.getOnPageBreak() != null) {
    node.breakBefore=true;
    node.breakAfter=true;
    node.execute=true;
  }
  if (node.breakBefore || node.breakAfter) {
    Iterator iter=rows.iterator();
    while (iter.hasNext()) {
      PolicyNode row=(PolicyNode)iter.next();
      row.executeAll=true;
    }
    return;
  }
  if (item.getHighlight() != null || item.getMap() != null) {
    node.execute=true;
  }
  if (item.getTOC() != null || item.getBookmark() != null || item.getAction() != null) {
    node.execute=true;
  }
  if (item.getQueries() != null) {
    node.execute=true;
  }
  if (item.getVisibility() != null) {
    node.execute=true;
  }
}","protected void setupPageBreak(PolicyNode node){
  ReportItemDesign item=node.design;
  String styleClass=item.getStyleName();
  if (styleClass != null) {
    IStyle style=report.findStyle(styleClass);
    CSSValue masterPage=style.getProperty(IStyle.STYLE_MASTER_PAGE);
    CSSValue pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    CSSValue pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    if (masterPage != null || pageBreakBefore != null) {
      node.breakBefore=true;
      node.execute=true;
    }
    if (pageBreakAfter != null) {
      node.breakAfter=true;
      node.execute=true;
    }
  }
  if (item.getJavaClass() != null || item.getOnCreate() != null || item.getOnPageBreak() != null) {
    node.breakBefore=true;
    node.breakAfter=true;
    node.execute=true;
  }
  if (node.breakBefore || node.breakAfter) {
    Iterator iter=rows.iterator();
    while (iter.hasNext()) {
      PolicyNode row=(PolicyNode)iter.next();
      row.executeAll=true;
    }
    return;
  }
  if (item.getHighlight() != null || item.getMap() != null) {
    node.execute=true;
  }
  if (item.getTOC() != null || item.getBookmark() != null || item.getAction() != null) {
    node.execute=true;
  }
  if (item.getQueries() != null) {
    node.execute=true;
  }
  if (item.getVisibility() != null) {
    node.execute=true;
  }
}",0.9977973568281938
73861,"private String getProjectOutClassPath(IProject project){
  if (!hasJavaNature(project)) {
    return null;
  }
  IJavaProject fCurrJProject=JavaCore.create(project);
  IPath path=null;
  boolean projectExists=(project.exists() && project.getFile(""String_Node_Str"").exists());
  if (projectExists) {
    if (path == null) {
      path=fCurrJProject.readOutputLocation();
      String curPath=path.toOSString();
      String directPath=project.getLocation().toOSString();
      int index=directPath.lastIndexOf(File.separator);
      String absPath=directPath.substring(0,index) + curPath;
      return absPath;
    }
  }
  return null;
}","private String getProjectOutClassPath(IProject project){
  if (!hasJavaNature(project)) {
    return null;
  }
  IJavaProject fCurrJProject=JavaCore.create(project);
  IPath path=null;
  boolean projectExists=(project.exists() && project.getFile(""String_Node_Str"").exists());
  if (projectExists) {
    if (path == null) {
      path=fCurrJProject.readOutputLocation();
      String curPath=path.toOSString();
      int index=curPath.indexOf(project.getName());
      curPath=curPath.substring(index + project.getName().length());
      String directPath=project.getLocation().toOSString();
      String absPath=directPath + curPath;
      return absPath;
    }
  }
  return null;
}",0.7481031866464339
73862,"public IReportItemExecutor createPageExecutor(long pageNumber,MasterPageDesign pageDesign){
  IPageContent pageContent=(IPageContent)pages.get(pageDesign);
  if (pageContent == null) {
    IReportItemExecutor pageExecutor=new MasterPageExecutor(manager,pageNumber,pageDesign);
    pageContent=(IPageContent)pageExecutor.execute();
    IContentEmitter domEmitter=new DOMBuilderEmitter(pageContent);
    ReportExecutorUtil.executeAll(pageExecutor,domEmitter);
    pageExecutor.close();
    pages.put(pageDesign,pageContent);
  }
 else {
    pageContent.setPageNumber(pageNumber);
  }
  return new DOMReportItemExecutor(pageContent,true);
}","public IReportItemExecutor createPageExecutor(long pageNumber,MasterPageDesign pageDesign){
  IPageContent pageContent=(IPageContent)pages.get(pageDesign);
  if (pageContent == null) {
    IReportItemExecutor pageExecutor=new MasterPageExecutor(manager,pageNumber,pageDesign);
    pageContent=(IPageContent)pageExecutor.execute();
    IContentEmitter domEmitter=new DOMBuilderEmitter(pageContent);
    ReportExecutorUtil.executeAll(pageExecutor,domEmitter);
    pageExecutor.close();
    pages.put(pageDesign,pageContent);
  }
 else {
    pageContent.setPageNumber(pageNumber);
    context.setPageNumber(pageNumber);
  }
  return new DOMReportItemExecutor(pageContent,true);
}",0.9702970297029704
73863,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
 else   if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + bookmark + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  if (svg != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
  }
  if (isDesigner != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  if (svg != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
  }
  if (isDesigner != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}",0.9683751363140676
73864,"/** 
 * Check whether the output format uses PDF Layout
 * @param format
 * @return
 */
public static boolean isPDFLayout(String format){
  if (format == null)   return false;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format))   return true;
  return false;
}","/** 
 * Check whether the output format uses PDF Layout
 * @param format
 * @return
 */
public static boolean isPDFLayout(String format){
  if (format == null)   return false;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.PPT_RENDER_FORMAT.equalsIgnoreCase(format))   return true;
  return false;
}",0.917900403768506
73865,"/** 
 * Generate document name according to report name.
 * @param reportName
 * @param id
 * @return document name.
 */
protected static String generateDocumentFromReport(String reportName,String id){
  if (reportName == null)   return null;
  String documentFile=""String_Node_Str"";
  if (reportName.indexOf('.') >= 0) {
    documentFile=reportName.substring(0,reportName.lastIndexOf('.'));
  }
  if (id != null && id.length() > 0) {
    documentFile=documentFile + id + SUFFIX_REPORT_DOCUMENT;
  }
 else {
    documentFile=documentFile + SUFFIX_REPORT_DOCUMENT;
  }
  return documentFile;
}","/** 
 * Generate document name according to report name.
 * @param reportName
 * @param id
 * @return document name.
 */
protected static String generateDocumentFromReport(String reportName,String id){
  if (reportName == null)   return null;
  String documentFile=reportName;
  if (reportName.indexOf('.') >= 0) {
    documentFile=reportName.substring(0,reportName.lastIndexOf('.'));
  }
  if (id != null && id.length() > 0) {
    documentFile=documentFile + id + SUFFIX_REPORT_DOCUMENT;
  }
 else {
    documentFile=documentFile + SUFFIX_REPORT_DOCUMENT;
  }
  return documentFile;
}",0.9770603228547152
73866,"/** 
 * move the cursor to the previous row.
 * @return
 */
boolean previous(){
  this.currentPosition--;
  this.curPosOnMap--;
  if (currentPosition >= this.traverseLength - 1 || currentPosition > 0) {
    return true;
  }
 else {
    currentPosition=-1;
    return false;
  }
}","/** 
 * move the cursor to the previous row.
 * @return
 */
boolean previous(){
  this.currentPosition--;
  this.curPosOnMap--;
  if (currentPosition >= 0) {
    return true;
  }
 else {
    currentPosition=-1;
    return false;
  }
}",0.912280701754386
73867,"public void deserialize(InputStream is){
  try {
    ObjectInputStream ois=new ObjectInputStream(is);
    Object o=ois.readObject();
    if (o instanceof RunTimeContext) {
      RunTimeContext drtc=(RunTimeContext)o;
      if (rtc != null) {
        drtc.setULocale(rtc.getULocale());
        drtc.setScale(rtc.getScale());
      }
      rtc=drtc;
      cm=rtc.getScriptContext().getChartInstance();
      if (cm != null && handle != null) {
        IReportItem item=handle.getReportItem();
        ((ChartReportItemImpl)item).setModel(cm);
        ((ChartReportItemImpl)item).setScale(rtc.getScale());
      }
      Object oMaxRow=context.getAppContext().get(EngineConstants.PROPERTY_EXTENDED_ITEM_MAX_ROW);
      if (oMaxRow != null) {
        rtc.putState(ChartUtil.CHART_MAX_ROW,oMaxRow);
      }
 else {
        oMaxRow=context.getGlobalVariable(EngineConstants.PROPERTY_EXTENDED_ITEM_MAX_ROW);
        if (oMaxRow != null) {
          rtc.putState(ChartUtil.CHART_MAX_ROW,oMaxRow);
        }
      }
    }
    ois.close();
  }
 catch (  Exception e) {
    logger.log(e);
  }
}","public void deserialize(InputStream is){
  try {
    ObjectInputStream ois=new ObjectInputStream(is){
      protected Class resolveClass(      ObjectStreamClass desc) throws IOException, ClassNotFoundException {
        if (""String_Node_Str"".equals(desc.getName())) {
          return ChartScriptContext.class;
        }
        return super.resolveClass(desc);
      }
    }
;
    Object o=ois.readObject();
    if (o instanceof RunTimeContext) {
      RunTimeContext drtc=(RunTimeContext)o;
      if (rtc != null) {
        drtc.setULocale(rtc.getULocale());
        drtc.setScale(rtc.getScale());
      }
      rtc=drtc;
      cm=rtc.getScriptContext().getChartInstance();
      if (cm != null && handle != null) {
        IReportItem item=handle.getReportItem();
        ((ChartReportItemImpl)item).setModel(cm);
        ((ChartReportItemImpl)item).setScale(rtc.getScale());
      }
      Object oMaxRow=context.getAppContext().get(EngineConstants.PROPERTY_EXTENDED_ITEM_MAX_ROW);
      if (oMaxRow != null) {
        rtc.putState(ChartUtil.CHART_MAX_ROW,oMaxRow);
      }
 else {
        oMaxRow=context.getGlobalVariable(EngineConstants.PROPERTY_EXTENDED_ITEM_MAX_ROW);
        if (oMaxRow != null) {
          rtc.putState(ChartUtil.CHART_MAX_ROW,oMaxRow);
        }
      }
    }
    ois.close();
  }
 catch (  Exception e) {
    logger.log(e);
  }
}",0.8868852459016393
73868,"public void prepare(Report report,Map appContext){
  ReportDesignHandle rptHandle=report.getReportDesign();
  List dataSetList=rptHandle.getAllDataSets();
  for (int i=0; i < dataSetList.size(); i++) {
    DataSetHandle dataset=(DataSetHandle)dataSetList.get(i);
    try {
      adapter.defineDataSet(dataset,dteSession);
    }
 catch (    BirtException be) {
      logger.log(Level.SEVERE,be.getMessage(),be);
      context.addException(dataset,be);
    }
  }
  List cubeList=rptHandle.getAllCubes();
  for (int i=0; i < cubeList.size(); i++) {
    CubeHandle cube=(CubeHandle)cubeList.get(i);
    if (cube.clientsIterator().hasNext()) {
      try {
        dteSession.defineCube(cube);
      }
 catch (      BirtException be) {
        logger.log(Level.SEVERE,be.getMessage(),be);
        context.addException(cube,be);
      }
    }
  }
  new ReportQueryBuilder(report,context).build();
  doPrepareQuery(report,appContext);
}","public void prepare(Report report,Map appContext){
  ReportDesignHandle rptHandle=report.getReportDesign();
  List dataSetList=rptHandle.getAllDataSets();
  for (int i=0; i < dataSetList.size(); i++) {
    DataSetHandle dataset=(DataSetHandle)dataSetList.get(i);
    try {
      adapter.defineDataSet(dataset,dteSession);
    }
 catch (    BirtException be) {
      logger.log(Level.SEVERE,be.getMessage(),be);
      context.addException(dataset,be);
    }
  }
  List cubeList=rptHandle.getAllCubes();
  for (int i=0; i < cubeList.size(); i++) {
    CubeHandle cube=(CubeHandle)cubeList.get(i);
    if (cube.clientsIterator().hasNext()) {
      try {
        dteSession.defineCube(cube);
      }
 catch (      BirtException be) {
        logger.log(Level.SEVERE,be.getMessage(),be);
        context.addException(cube,be);
      }
    }
  }
  new ReportQueryBuilder(report,context,dteSession).build();
  doPrepareQuery(report,appContext);
}",0.9941081949651848
73869,"/** 
 * prepare the queries defined in the report.
 */
public void prepare(Report report,Map appContext){
  new ReportQueryBuilder(report,context).build();
  doPrepareQuery(report,appContext);
}","/** 
 * prepare the queries defined in the report.
 */
public void prepare(Report report,Map appContext){
  new ReportQueryBuilder(report,context,dteSession).build();
  doPrepareQuery(report,appContext);
}",0.9724310776942356
73870,"private void createSortTestBindings(ICubeQueryDefinition cqd) throws DataException {
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  binding9.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding9.addAggregateOn(""String_Node_Str"");
  binding9.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  binding10.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  binding11.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding11.addAggregateOn(""String_Node_Str"");
  binding11.addAggregateOn(""String_Node_Str"");
  binding11.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  binding12.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding12.addAggregateOn(""String_Node_Str"");
  binding12.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding12);
  IBinding binding13=new Binding(""String_Node_Str"");
  binding13.setExpression(new ScriptExpression(""String_Node_Str""));
  binding13.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding13.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding13);
}","private void createSortTestBindings(ICubeQueryDefinition cqd) throws DataException {
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  binding5.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  binding9.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding9.addAggregateOn(""String_Node_Str"");
  binding9.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  binding10.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  binding11.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding11.addAggregateOn(""String_Node_Str"");
  binding11.addAggregateOn(""String_Node_Str"");
  binding11.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  binding12.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding12.addAggregateOn(""String_Node_Str"");
  binding12.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding12);
  IBinding binding13=new Binding(""String_Node_Str"");
  binding13.setExpression(new ScriptExpression(""String_Node_Str""));
  binding13.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding13.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding13);
}",0.8336325553560742
73871,"String printCubeAlongEdge(CubeCursor cursor,List columnEdgeBindingNames,List rowEdgeBindingNames,List measureBindingNames,List rowGrandTotal,String columnGrandTotal,String totalGrandTotal,List countryGrandTotal) throws Exception {
  EdgeCursor edge1=(EdgeCursor)(cursor.getOrdinateEdge().get(0));
  EdgeCursor edge2=(EdgeCursor)(cursor.getOrdinateEdge().get(1));
  String[] lines=new String[edge1.getDimensionCursor().size()];
  for (int i=0; i < lines.length; i++) {
    lines[i]=""String_Node_Str"";
  }
  while (edge1.next()) {
    for (int i=0; i < lines.length; i++) {
      DimensionCursor dimCursor=(DimensionCursor)edge1.getDimensionCursor().get(i);
      lines[i]+=dimCursor.getObject(columnEdgeBindingNames.get(i).toString()) + ""String_Node_Str"";
    }
  }
  String output=""String_Node_Str"";
  for (int i=0; i < lines.length; i++) {
    output+=""String_Node_Str"" + lines[i];
  }
  while (edge2.next()) {
    String line=""String_Node_Str"";
    for (int k=0; k < rowEdgeBindingNames.size(); k++) {
      DimensionCursor dimCursor=(DimensionCursor)edge2.getDimensionCursor().get(k);
      line+=dimCursor.getObject(rowEdgeBindingNames.get(k).toString()).toString() + ""String_Node_Str"";
    }
    edge1.beforeFirst();
    while (edge1.next()) {
      DimensionCursor countryCursor=(DimensionCursor)edge1.getDimensionCursor().get(0);
      if (measureBindingNames != null) {
        for (int j=0; j < measureBindingNames.size(); j++) {
          line+=cursor.getObject(measureBindingNames.get(j).toString()) + ""String_Node_Str"";
        }
        if (countryGrandTotal != null)         for (int k=0; k < countryGrandTotal.size(); k++) {
          if (edge1.getPosition() == countryCursor.getEdgeEnd() && countryGrandTotal != null) {
            line+=cursor.getObject(countryGrandTotal.get(k).toString());
          }
        }
        line+=""String_Node_Str"";
      }
    }
    if (rowGrandTotal != null)     for (int j=0; j < rowGrandTotal.size(); j++) {
      line+=cursor.getObject(rowGrandTotal.get(j).toString()) + ""String_Node_Str"";
    }
    output+=""String_Node_Str"" + line;
  }
  edge1.close();
  edge2.close();
  if (columnGrandTotal != null) {
    output+=""String_Node_Str"" + columnGrandTotal + ""String_Node_Str"";
    edge1.beforeFirst();
    while (edge1.next()) {
      output+=cursor.getObject(columnGrandTotal) + ""String_Node_Str"";
    }
  }
  if (totalGrandTotal != null)   output+=cursor.getObject(totalGrandTotal);
  cursor.close();
  System.out.print(output);
  return output;
}","String printCubeAlongEdge(CubeCursor cursor,List columnEdgeBindingNames,List rowEdgeBindingNames,List measureBindingNames,List rowGrandTotal,String columnGrandTotal,String totalGrandTotal,List countryGrandTotal) throws Exception {
  EdgeCursor edge1=(EdgeCursor)(cursor.getOrdinateEdge().get(0));
  EdgeCursor edge2=(EdgeCursor)(cursor.getOrdinateEdge().get(1));
  String[] lines=new String[edge1.getDimensionCursor().size()];
  for (int i=0; i < lines.length; i++) {
    lines[i]=""String_Node_Str"";
  }
  while (edge1.next()) {
    for (int i=0; i < lines.length; i++) {
      DimensionCursor dimCursor=(DimensionCursor)edge1.getDimensionCursor().get(i);
      lines[i]+=dimCursor.getObject(columnEdgeBindingNames.get(i).toString()) + ""String_Node_Str"";
    }
  }
  String output=""String_Node_Str"";
  for (int i=0; i < lines.length; i++) {
    output+=""String_Node_Str"" + lines[i];
  }
  while (edge2.next()) {
    String line=""String_Node_Str"";
    for (int k=0; k < rowEdgeBindingNames.size(); k++) {
      DimensionCursor dimCursor=(DimensionCursor)edge2.getDimensionCursor().get(k);
      line+=dimCursor.getObject(rowEdgeBindingNames.get(k).toString()).toString() + ""String_Node_Str"";
    }
    edge1.beforeFirst();
    while (edge1.next()) {
      DimensionCursor countryCursor=(DimensionCursor)edge1.getDimensionCursor().get(0);
      if (measureBindingNames != null) {
        for (int j=0; j < measureBindingNames.size(); j++) {
          line+=cursor.getObject(OlapExpressionUtil.createMeasureCalculateMemeberName(measureBindingNames.get(j).toString())) + ""String_Node_Str"";
        }
        if (countryGrandTotal != null)         for (int k=0; k < countryGrandTotal.size(); k++) {
          if (edge1.getPosition() == countryCursor.getEdgeEnd() && countryGrandTotal != null) {
            line+=cursor.getObject(countryGrandTotal.get(k).toString());
          }
        }
        line+=""String_Node_Str"";
      }
    }
    if (rowGrandTotal != null)     for (int j=0; j < rowGrandTotal.size(); j++) {
      line+=cursor.getObject(rowGrandTotal.get(j).toString()) + ""String_Node_Str"";
    }
    output+=""String_Node_Str"" + line;
  }
  edge1.close();
  edge2.close();
  if (columnGrandTotal != null) {
    output+=""String_Node_Str"" + columnGrandTotal + ""String_Node_Str"";
    edge1.beforeFirst();
    while (edge1.next()) {
      output+=cursor.getObject(columnGrandTotal) + ""String_Node_Str"";
    }
  }
  if (totalGrandTotal != null)   output+=cursor.getObject(totalGrandTotal);
  cursor.close();
  System.out.print(output);
  return output;
}",0.9893196202531646
73872,"String printCubeAlongDimension(CubeCursor dataCursor,DimensionCursor countryCursor,DimensionCursor cityCursor,DimensionCursor streetCursor,DimensionCursor timeCursor,DimensionCursor productCursor1,DimensionCursor productCursor2) throws OLAPException {
  String[] lines=new String[4];
  for (int i=0; i < lines.length; i++) {
    lines[i]=""String_Node_Str"";
  }
  if (countryCursor != null && cityCursor != null && timeCursor != null) {
    countryCursor.beforeFirst();
    while (countryCursor.next()) {
      cityCursor.beforeFirst();
      while (cityCursor.next()) {
        streetCursor.beforeFirst();
        while (streetCursor.next()) {
          timeCursor.beforeFirst();
          while (timeCursor.next()) {
            lines[0]+=countryCursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
            lines[1]+=cityCursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
            lines[2]+=streetCursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
            lines[3]+=timeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
          }
        }
      }
    }
  }
  String output=""String_Node_Str"";
  for (int i=0; i < lines.length; i++) {
    output+=""String_Node_Str"" + lines[i];
  }
  lines=new String[1];
  lines[0]=""String_Node_Str"";
  if (productCursor1 != null && productCursor2 != null && countryCursor != null && cityCursor != null && timeCursor != null) {
    productCursor1.beforeFirst();
    while (productCursor1.next()) {
      productCursor2.beforeFirst();
      while (productCursor2.next()) {
        lines[0]+=productCursor1.getObject(""String_Node_Str"") + ""String_Node_Str"";
        lines[0]+=productCursor2.getObject(""String_Node_Str"") + ""String_Node_Str"";
        countryCursor.beforeFirst();
        while (countryCursor.next()) {
          cityCursor.beforeFirst();
          while (cityCursor.next()) {
            timeCursor.beforeFirst();
            while (timeCursor.next()) {
              lines[0]+=dataCursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
            }
          }
        }
        lines[0]+=""String_Node_Str"";
      }
      lines[0]+=""String_Node_Str"";
    }
    productCursor1.close();
    productCursor2.close();
    countryCursor.close();
    cityCursor.close();
    timeCursor.close();
    dataCursor.close();
  }
 else   if (countryCursor != null && cityCursor != null && timeCursor != null) {
    countryCursor.beforeFirst();
    lines[0]+=""String_Node_Str"";
    while (countryCursor.next()) {
      cityCursor.beforeFirst();
      while (cityCursor.next()) {
        timeCursor.beforeFirst();
        while (timeCursor.next()) {
          lines[0]+=dataCursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
        }
      }
    }
    countryCursor.close();
    cityCursor.close();
    timeCursor.close();
    dataCursor.close();
    lines[0]+=""String_Node_Str"";
  }
 else   if (productCursor1 != null && productCursor2 != null) {
    productCursor1.beforeFirst();
    while (productCursor1.next()) {
      productCursor2.beforeFirst();
      while (productCursor2.next()) {
        lines[0]+=productCursor1.getObject(""String_Node_Str"") + ""String_Node_Str"";
        lines[0]+=productCursor2.getObject(""String_Node_Str"") + ""String_Node_Str"";
        lines[0]+=dataCursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
        lines[0]+=""String_Node_Str"";
      }
    }
    productCursor1.close();
    productCursor2.close();
    dataCursor.close();
    lines[0]+=""String_Node_Str"";
  }
  output+=""String_Node_Str"" + lines[0];
  System.out.print(output);
  return output;
}","String printCubeAlongDimension(CubeCursor dataCursor,DimensionCursor countryCursor,DimensionCursor cityCursor,DimensionCursor streetCursor,DimensionCursor timeCursor,DimensionCursor productCursor1,DimensionCursor productCursor2) throws OLAPException {
  String[] lines=new String[4];
  for (int i=0; i < lines.length; i++) {
    lines[i]=""String_Node_Str"";
  }
  if (countryCursor != null && cityCursor != null && timeCursor != null) {
    countryCursor.beforeFirst();
    while (countryCursor.next()) {
      cityCursor.beforeFirst();
      while (cityCursor.next()) {
        streetCursor.beforeFirst();
        while (streetCursor.next()) {
          timeCursor.beforeFirst();
          while (timeCursor.next()) {
            lines[0]+=countryCursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
            lines[1]+=cityCursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
            lines[2]+=streetCursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
            lines[3]+=timeCursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
          }
        }
      }
    }
  }
  String output=""String_Node_Str"";
  for (int i=0; i < lines.length; i++) {
    output+=""String_Node_Str"" + lines[i];
  }
  lines=new String[1];
  lines[0]=""String_Node_Str"";
  if (productCursor1 != null && productCursor2 != null && countryCursor != null && cityCursor != null && timeCursor != null) {
    productCursor1.beforeFirst();
    while (productCursor1.next()) {
      productCursor2.beforeFirst();
      while (productCursor2.next()) {
        lines[0]+=productCursor1.getObject(""String_Node_Str"") + ""String_Node_Str"";
        lines[0]+=productCursor2.getObject(""String_Node_Str"") + ""String_Node_Str"";
        countryCursor.beforeFirst();
        while (countryCursor.next()) {
          cityCursor.beforeFirst();
          while (cityCursor.next()) {
            timeCursor.beforeFirst();
            while (timeCursor.next()) {
              lines[0]+=dataCursor.getObject(OlapExpressionUtil.createMeasureCalculateMemeberName(""String_Node_Str"")) + ""String_Node_Str"";
            }
          }
        }
        lines[0]+=""String_Node_Str"";
      }
      lines[0]+=""String_Node_Str"";
    }
    productCursor1.close();
    productCursor2.close();
    countryCursor.close();
    cityCursor.close();
    timeCursor.close();
    dataCursor.close();
  }
 else   if (countryCursor != null && cityCursor != null && timeCursor != null) {
    countryCursor.beforeFirst();
    lines[0]+=""String_Node_Str"";
    while (countryCursor.next()) {
      cityCursor.beforeFirst();
      while (cityCursor.next()) {
        timeCursor.beforeFirst();
        while (timeCursor.next()) {
          lines[0]+=dataCursor.getObject(OlapExpressionUtil.createMeasureCalculateMemeberName(""String_Node_Str"")) + ""String_Node_Str"";
        }
      }
    }
    countryCursor.close();
    cityCursor.close();
    timeCursor.close();
    dataCursor.close();
    lines[0]+=""String_Node_Str"";
  }
 else   if (productCursor1 != null && productCursor2 != null) {
    productCursor1.beforeFirst();
    while (productCursor1.next()) {
      productCursor2.beforeFirst();
      while (productCursor2.next()) {
        lines[0]+=productCursor1.getObject(""String_Node_Str"") + ""String_Node_Str"";
        lines[0]+=productCursor2.getObject(""String_Node_Str"") + ""String_Node_Str"";
        lines[0]+=dataCursor.getObject(OlapExpressionUtil.createMeasureCalculateMemeberName(""String_Node_Str"")) + ""String_Node_Str"";
        lines[0]+=""String_Node_Str"";
      }
    }
    productCursor1.close();
    productCursor2.close();
    dataCursor.close();
    lines[0]+=""String_Node_Str"";
  }
  output+=""String_Node_Str"" + lines[0];
  System.out.print(output);
  return output;
}",0.9646381578947368
73873,"public CubeCursor getCubeCursor() throws DataException {
  if (this.cubeCursor != null)   return this.cubeCursor;
  try {
    stopSign.start();
    CubeQueryExecutor executor=new CubeQueryExecutor(this.outResults,preparedQuery.getCubeQueryDefinition(),this.session,this.scope,this.context);
    BirtCubeView bcv=new BirtCubeView(executor,appContext);
    CubeCursor cubeCursor=bcv.getCubeCursor(stopSign);
    String newResultSetId=executor.getQueryResultsId();
    if (newResultSetId != null) {
      this.queryResultsId=newResultSetId;
    }
    this.scope.put(ScriptConstants.MEASURE_SCRIPTABLE,this.scope,new JSMeasureAccessor(cubeCursor));
    this.scope.put(ScriptConstants.DIMENSION_SCRIPTABLE,this.scope,new JSLevelAccessor(this.preparedQuery.getCubeQueryDefinition(),bcv));
    this.cubeCursor=new CubeCursorImpl(outResults,cubeCursor,this.scope,this.preparedQuery.getCubeQueryDefinition());
    return this.cubeCursor;
  }
 catch (  OLAPException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","public CubeCursor getCubeCursor() throws DataException {
  if (this.cubeCursor != null)   return this.cubeCursor;
  try {
    stopSign.start();
    CubeQueryExecutor executor=new CubeQueryExecutor(this.outResults,preparedQuery.getCubeQueryDefinition(),this.session,this.scope,this.context);
    BirtCubeView bcv=new BirtCubeView(executor,appContext);
    CubeCursor cubeCursor=bcv.getCubeCursor(stopSign);
    String newResultSetId=executor.getQueryResultsId();
    if (newResultSetId != null) {
      this.queryResultsId=newResultSetId;
    }
    this.scope.put(ScriptConstants.MEASURE_SCRIPTABLE,this.scope,new JSMeasureAccessor(cubeCursor,bcv.getMeasureMapping()));
    this.scope.put(ScriptConstants.DIMENSION_SCRIPTABLE,this.scope,new JSLevelAccessor(this.preparedQuery.getCubeQueryDefinition(),bcv));
    this.cubeCursor=new CubeCursorImpl(outResults,cubeCursor,this.scope,this.preparedQuery.getCubeQueryDefinition());
    return this.cubeCursor;
  }
 catch (  OLAPException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.9883833494675702
73874,"/** 
 * Get cubeCursor for current cubeView.
 * @param stopSign
 * @return CubeCursor
 * @throws OLAPException
 * @throws DataException 
 */
public CubeCursor getCubeCursor(StopSign stopSign) throws OLAPException, DataException {
  Map relationMap=CubeQueryDefinitionUtil.getRelationWithMeasure(queryDefn);
  IResultSet result;
  try {
    result=new QueryExecutor().execute(this,executor,manager,stopSign);
  }
 catch (  IOException e) {
    throw new OLAPException(e.getLocalizedMessage());
  }
catch (  BirtException e) {
    throw new OLAPException(e.getLocalizedMessage());
  }
  CubeCursor cubeCursor;
  if (this.appContext != null && this.executor.getContext().getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    cubeCursor=new CubeCursorImpl(this,result,relationMap,manager,appContext);
  }
 else {
    cubeCursor=new CubeCursorImpl(this,result,relationMap,manager);
  }
  return cubeCursor;
}","/** 
 * Get cubeCursor for current cubeView.
 * @param stopSign
 * @return CubeCursor
 * @throws OLAPException
 * @throws DataException 
 */
public CubeCursor getCubeCursor(StopSign stopSign) throws OLAPException, DataException {
  Map relationMap=CubeQueryDefinitionUtil.getRelationWithMeasure(queryDefn,measureMapping);
  IResultSet result;
  try {
    result=new QueryExecutor().execute(this,executor,manager,stopSign);
  }
 catch (  IOException e) {
    throw new OLAPException(e.getLocalizedMessage());
  }
catch (  BirtException e) {
    throw new OLAPException(e.getLocalizedMessage());
  }
  CubeCursor cubeCursor;
  if (this.appContext != null && this.executor.getContext().getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    cubeCursor=new CubeCursorImpl(this,result,relationMap,manager,appContext);
  }
 else {
    cubeCursor=new CubeCursorImpl(this,result,relationMap,manager);
  }
  return cubeCursor;
}",0.9917987971569164
73875,"/** 
 * Get related level's info for all measure.
 * @param queryDefn
 * @return
 * @throws DataException 
 */
public static Map getRelationWithMeasure(ICubeQueryDefinition queryDefn) throws DataException {
  Map measureRelationMap=new HashMap();
  List rowLevelList=new ArrayList();
  List columnLevelList=new ArrayList();
  if (queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE) != null) {
    ILevelDefinition[] levels=getLevelsOnEdge(queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE));
    for (int i=0; i < levels.length; i++) {
      columnLevelList.add(new DimLevel(levels[i]));
    }
  }
  if (queryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE) != null) {
    ILevelDefinition[] levels=getLevelsOnEdge(queryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE));
    for (int i=0; i < levels.length; i++) {
      rowLevelList.add(new DimLevel(levels[i]));
    }
  }
  if (queryDefn.getMeasures() != null && !queryDefn.getMeasures().isEmpty()) {
    Iterator measureIter=queryDefn.getMeasures().iterator();
    while (measureIter.hasNext()) {
      IMeasureDefinition measure=(MeasureDefinition)measureIter.next();
      measureRelationMap.put(measure.getName(),new RelationShip(rowLevelList,columnLevelList));
    }
  }
  ICubeAggrDefn[] cubeAggrs=OlapExpressionUtil.getAggrDefns(queryDefn.getBindings());
  if (cubeAggrs != null && cubeAggrs.length > 0) {
    for (int i=0; i < cubeAggrs.length; i++) {
      if (cubeAggrs[i].getAggrName() == null)       continue;
      List aggrOns=cubeAggrs[i].getAggrLevels();
      List usedLevelOnRow=new ArrayList();
      List usedLevelOnColumn=new ArrayList();
      for (int j=0; j < aggrOns.size(); j++) {
        if (rowLevelList.contains(aggrOns.get(j)))         usedLevelOnRow.add(aggrOns.get(j));
 else         if (columnLevelList.contains(aggrOns.get(j)))         usedLevelOnColumn.add(aggrOns.get(j));
      }
      measureRelationMap.put(cubeAggrs[i].getName(),new RelationShip(usedLevelOnRow,usedLevelOnColumn));
    }
  }
  return measureRelationMap;
}","/** 
 * Get related level's info for all measure.
 * @param queryDefn
 * @param measureMapping 
 * @return
 * @throws DataException 
 */
public static Map getRelationWithMeasure(ICubeQueryDefinition queryDefn,Map measureMapping) throws DataException {
  Map measureRelationMap=new HashMap();
  List rowLevelList=new ArrayList();
  List columnLevelList=new ArrayList();
  if (queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE) != null) {
    ILevelDefinition[] levels=getLevelsOnEdge(queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE));
    for (int i=0; i < levels.length; i++) {
      columnLevelList.add(new DimLevel(levels[i]));
    }
  }
  if (queryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE) != null) {
    ILevelDefinition[] levels=getLevelsOnEdge(queryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE));
    for (int i=0; i < levels.length; i++) {
      rowLevelList.add(new DimLevel(levels[i]));
    }
  }
  if (queryDefn.getMeasures() != null && !queryDefn.getMeasures().isEmpty()) {
    Iterator measureIter=queryDefn.getMeasures().iterator();
    while (measureIter.hasNext()) {
      IMeasureDefinition measure=(MeasureDefinition)measureIter.next();
      measureRelationMap.put(measureMapping.get(measure.getName()),new RelationShip(rowLevelList,columnLevelList));
    }
  }
  ICubeAggrDefn[] cubeAggrs=OlapExpressionUtil.getAggrDefns(queryDefn.getBindings());
  if (cubeAggrs != null && cubeAggrs.length > 0) {
    for (int i=0; i < cubeAggrs.length; i++) {
      if (cubeAggrs[i].getAggrName() == null)       continue;
      List aggrOns=cubeAggrs[i].getAggrLevels();
      List usedLevelOnRow=new ArrayList();
      List usedLevelOnColumn=new ArrayList();
      for (int j=0; j < aggrOns.size(); j++) {
        if (rowLevelList.contains(aggrOns.get(j)))         usedLevelOnRow.add(aggrOns.get(j));
 else         if (columnLevelList.contains(aggrOns.get(j)))         usedLevelOnColumn.add(aggrOns.get(j));
      }
      measureRelationMap.put(cubeAggrs[i].getName(),new RelationShip(usedLevelOnRow,usedLevelOnColumn));
    }
  }
  return measureRelationMap;
}",0.9840490797546012
73876,"/** 
 * Populate all aggregation member in CubeQueryDefinition. For initial implementation: we only consider IMeasureDefintion we will take into consider to handle the aggregation definition in binding expression;
 * @param queryDefn
 * @return
 * @throws DataException 
 */
static CalculatedMember[] getCalculatedMembers(ICubeQueryDefinition queryDefn,Scriptable scope) throws DataException {
  List measureList=queryDefn.getMeasures();
  ICubeAggrDefn[] cubeAggrs=OlapExpressionUtil.getAggrDefns(queryDefn.getBindings());
  List cubeAggrBindingList=new ArrayList();
  for (int i=0; i < cubeAggrs.length; i++) {
    if (cubeAggrs[i].getAggrName() != null)     cubeAggrBindingList.add(cubeAggrs[i]);
  }
  populateMeasureFromBinding(queryDefn);
  populateMeasureFromFilter(queryDefn);
  populateMeasureFromSort(queryDefn);
  if (measureList == null)   return new CalculatedMember[0];
  CalculatedMember[] calculatedMember=new CalculatedMember[measureList.size() + cubeAggrBindingList.size()];
  int index=0;
  List calculatedMemberList=new ArrayList();
  if (!measureList.isEmpty()) {
    List levelList=populateMeasureAggrOns(queryDefn);
    Iterator measureIter=measureList.iterator();
    while (measureIter.hasNext()) {
      MeasureDefinition measureDefn=(MeasureDefinition)measureIter.next();
      calculatedMember[index]=new CalculatedMember(measureDefn.getName(),measureDefn.getName(),levelList,measureDefn.getAggrFunction() == null ? IBuildInAggregation.TOTAL_SUM_FUNC : measureDefn.getAggrFunction(),0);
      calculatedMemberList.add(calculatedMember[index]);
      index++;
    }
  }
  if (!cubeAggrBindingList.isEmpty()) {
    int rsID=1;
    for (int i=0; i < cubeAggrBindingList.size(); i++) {
      int id=getResultSetIndex(calculatedMemberList,((ICubeAggrDefn)cubeAggrBindingList.get(i)).getAggrLevels());
      if (id == -1) {
        calculatedMember[index]=new CalculatedMember((ICubeAggrDefn)cubeAggrBindingList.get(i),rsID);
        calculatedMemberList.add(calculatedMember[index]);
        rsID++;
      }
 else {
        calculatedMember[index]=new CalculatedMember((ICubeAggrDefn)cubeAggrBindingList.get(i),id);
      }
      if (((ICubeAggrDefn)cubeAggrBindingList.get(i)).getFilter() != null) {
        IJSMeasureFilterEvalHelper filterEvalHelper=new JSMeasureFilterEvalHelper(scope,new FilterDefinition(((ICubeAggrDefn)cubeAggrBindingList.get(i)).getFilter()));
        calculatedMember[index].setFilterEvalHelper(filterEvalHelper);
      }
      index++;
    }
  }
  return calculatedMember;
}","/** 
 * Populate all aggregation member in CubeQueryDefinition. For initial implementation: we only consider IMeasureDefintion we will take into consider to handle the aggregation definition in binding expression;
 * @param queryDefn
 * @param measureMapping 
 * @return
 * @throws DataException 
 */
static CalculatedMember[] getCalculatedMembers(ICubeQueryDefinition queryDefn,Scriptable scope,Map measureMapping) throws DataException {
  List measureList=queryDefn.getMeasures();
  ICubeAggrDefn[] cubeAggrs=OlapExpressionUtil.getAggrDefns(queryDefn.getBindings());
  List cubeAggrBindingList=new ArrayList();
  for (int i=0; i < cubeAggrs.length; i++) {
    if (cubeAggrs[i].getAggrName() != null)     cubeAggrBindingList.add(cubeAggrs[i]);
  }
  populateMeasureFromBinding(queryDefn);
  populateMeasureFromFilter(queryDefn);
  populateMeasureFromSort(queryDefn);
  if (measureList == null)   return new CalculatedMember[0];
  List measureAggrOns=populateMeasureAggrOns(queryDefn);
  List unreferencedMeasures=getUnreferencedMeasures(queryDefn,measureList,measureMapping,measureAggrOns);
  CalculatedMember[] calculatedMember=new CalculatedMember[unreferencedMeasures.size() + cubeAggrBindingList.size()];
  int index=0;
  List calculatedMemberList=new ArrayList();
  if (!unreferencedMeasures.isEmpty()) {
    Iterator measureIter=unreferencedMeasures.iterator();
    while (measureIter.hasNext()) {
      MeasureDefinition measureDefn=(MeasureDefinition)measureIter.next();
      String innerName=OlapExpressionUtil.createMeasureCalculateMemeberName(measureDefn.getName());
      measureMapping.put(measureDefn.getName(),innerName);
      calculatedMember[index]=new CalculatedMember(innerName,measureDefn.getName(),measureAggrOns,adaptAggrFunction(measureDefn),0);
      calculatedMemberList.add(calculatedMember[index]);
      index++;
    }
  }
  if (!cubeAggrBindingList.isEmpty()) {
    int rsID=index > 0 ? 1 : 0;
    for (int i=0; i < cubeAggrBindingList.size(); i++) {
      int id=getResultSetIndex(calculatedMemberList,((ICubeAggrDefn)cubeAggrBindingList.get(i)).getAggrLevels());
      if (id == -1) {
        calculatedMember[index]=new CalculatedMember((ICubeAggrDefn)cubeAggrBindingList.get(i),rsID);
        calculatedMemberList.add(calculatedMember[index]);
        rsID++;
      }
 else {
        calculatedMember[index]=new CalculatedMember((ICubeAggrDefn)cubeAggrBindingList.get(i),id);
      }
      if (((ICubeAggrDefn)cubeAggrBindingList.get(i)).getFilter() != null) {
        IJSMeasureFilterEvalHelper filterEvalHelper=new JSMeasureFilterEvalHelper(scope,new FilterDefinition(((ICubeAggrDefn)cubeAggrBindingList.get(i)).getFilter()));
        calculatedMember[index].setFilterEvalHelper(filterEvalHelper);
      }
      index++;
    }
  }
  return calculatedMember;
}",0.8644991542943056
73877,"public JSMeasureAccessor(CubeCursor cursor) throws OLAPException {
  this.cursor=cursor;
}","/** 
 * @param cursor
 * @param measureMapping
 * @throws OLAPException
 */
public JSMeasureAccessor(CubeCursor cursor,Map measureMapping) throws OLAPException {
  this.cursor=cursor;
  this.measureMapping=measureMapping;
}",0.2939297124600639
73878,"public Object get(String name,Scriptable start){
  try {
    return this.cursor.getObject(name);
  }
 catch (  OLAPException e) {
    throw new RuntimeException(new DataException(e.getLocalizedMessage()));
  }
}","public Object get(String name,Scriptable start){
  try {
    return this.cursor.getObject((String)measureMapping.get(name));
  }
 catch (  OLAPException e) {
    throw new RuntimeException(new DataException(e.getLocalizedMessage()));
  }
}",0.92
73879,"/** 
 * This method returns a list of ICubeAggrDefn instances which describes the aggregations that need to be calculated in cube query.
 * @param bindings
 * @return
 * @throws DataException 
 */
public static ICubeAggrDefn[] getAggrDefns(List bindings) throws DataException {
  if (bindings == null || bindings.size() == 0)   return new ICubeAggrDefn[0];
  List cubeAggrDefns=new ArrayList();
  for (Iterator it=bindings.iterator(); it.hasNext(); ) {
    IBinding binding=((IBinding)it.next());
    if (binding.getExpression() instanceof IScriptExpression) {
      if (binding.getAggrFunction() != null)       cubeAggrDefns.add(new CubeAggrDefn(binding.getBindingName(),getMeasure(((IScriptExpression)binding.getExpression()).getText()),convertToDimLevel(binding.getAggregatOns()),binding.getAggrFunction(),convertToDimLevelAttribute(binding.getArguments(),bindings),binding.getFilter()));
    }
  }
  ICubeAggrDefn[] result=new ICubeAggrDefn[cubeAggrDefns.size()];
  for (int i=0; i < result.length; i++) {
    result[i]=(ICubeAggrDefn)cubeAggrDefns.get(i);
  }
  return result;
}","/** 
 * This method returns a list of ICubeAggrDefn instances which describes the aggregations that need to be calculated in cube query.
 * @param bindings
 * @return
 * @throws DataException 
 */
public static ICubeAggrDefn[] getAggrDefns(List bindings) throws DataException {
  if (bindings == null || bindings.size() == 0)   return new ICubeAggrDefn[0];
  List cubeAggrDefns=new ArrayList();
  for (Iterator it=bindings.iterator(); it.hasNext(); ) {
    IBinding binding=((IBinding)it.next());
    if (binding.getExpression() instanceof IScriptExpression) {
      if (binding.getAggrFunction() != null || binding.getAggregatOns().size() != 0)       cubeAggrDefns.add(new CubeAggrDefn(binding.getBindingName(),getMeasure(((IScriptExpression)binding.getExpression()).getText()),convertToDimLevel(binding.getAggregatOns()),binding.getAggrFunction(),convertToDimLevelAttribute(binding.getArguments(),bindings),binding.getFilter()));
    }
  }
  ICubeAggrDefn[] result=new ICubeAggrDefn[cubeAggrDefns.size()];
  for (int i=0; i < result.length; i++) {
    result[i]=(ICubeAggrDefn)cubeAggrDefns.get(i);
  }
  return result;
}",0.9818676337262012
73880,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getSession().getTempDir(),dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (!isBindingReferenceSort(queryDefn.getSorts()))   return false;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return false;
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      if (groups != null && !groups.isEmpty())       runningOnRS=false;
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static int runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getSession().getTempDir(),dataEngine.getContext(),queryResultInfo);
  IBaseQueryDefinition rootQueryDefn=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  if (QueryCompUtil.isIVQueryDefnEqual(rootQueryDefn,queryDefn)) {
    return BASED_ON_PRESENTATION;
  }
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return BASED_ON_DATASET;
  runningOnRS=isCompatibleSubQuery(rootQueryDefn,queryDefn);
  if (runningOnRS == false)   return BASED_ON_DATASET;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (!isBindingReferenceSort(queryDefn.getSorts()))   return BASED_ON_DATASET;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return BASED_ON_DATASET;
    if (!QueryCompUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      if (groups != null && !groups.isEmpty())       runningOnRS=false;
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return BASED_ON_DATASET;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS ? BASED_ON_RESULTSET : BASED_ON_DATASET;
}",0.495208124731798
73881,"/** 
 * @param dataEngine
 * @param queryDefn
 * @return
 * @throws DataException
 */
private static IPreparedQuery newIVInstance(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (runQueryOnRS(dataEngine,queryDefn))   return new PreparedIVQuery(dataEngine,queryDefn);
 else   return new PreparedIVDataSourceQuery(dataEngine,queryDefn);
}","/** 
 * @param dataEngine
 * @param queryDefn
 * @return
 * @throws DataException
 */
private static IPreparedQuery newIVInstance(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
switch (runQueryOnRS(dataEngine,queryDefn)) {
case BASED_ON_RESULTSET:
    return new PreparedIVQuery(dataEngine,queryDefn);
case BASED_ON_DATASET:
  return new PreparedIVDataSourceQuery(dataEngine,queryDefn);
default :
return new DummyPreparedQuery(queryDefn,dataEngine.getSession().getTempDir(),dataEngine.getContext());
}
}",0.7973421926910299
73882,"public IQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  throw new UnsupportedOperationException();
}","public IQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  try {
    if (context == null)     return new CachedQueryResults(tempDir,this.queryDefn.getQueryResultsID());
 else     return new QueryResults(this.tempDir,this.context,this.queryDefn.getQueryResultsID(),outerResults);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.4399260628465804
73883,"/** 
 * @return
 * @throws DataException 
 */
private static boolean isCompatibleRSMap(Map oldMap,Map newMap) throws DataException {
  if (oldMap == null)   return newMap.size() == 0;
 else   if (newMap == null)   return oldMap.size() == 0;
  if (newMap.size() > oldMap.size())   return false;
  Iterator it=newMap.keySet().iterator();
  while (it.hasNext()) {
    Object key=it.next();
    Object oldObj=oldMap.get(key);
    Object newObj=newMap.get(key);
    if (oldObj != null) {
      if (!isTwoBindingEqual((IBinding)newObj,(IBinding)oldObj))       return false;
    }
 else {
      return false;
    }
  }
  return true;
}","/** 
 * @return
 * @throws DataException 
 */
private static boolean isCompatibleRSMap(Map oldMap,Map newMap) throws DataException {
  if (oldMap == null)   return newMap.size() == 0;
 else   if (newMap == null)   return oldMap.size() == 0;
  if (newMap.size() > oldMap.size())   return false;
  Iterator it=newMap.keySet().iterator();
  while (it.hasNext()) {
    Object key=it.next();
    Object oldObj=oldMap.get(key);
    Object newObj=newMap.get(key);
    if (oldObj != null) {
      if (!QueryCompUtil.isTwoBindingEqual((IBinding)newObj,(IBinding)oldObj))       return false;
    }
 else {
      return false;
    }
  }
  return true;
}",0.988976377952756
73884,"/** 
 * @param queryDefn
 * @param context
 */
public DummyPreparedQuery(IQueryDefinition queryDefn,String tempDir){
  this.queryDefn=queryDefn;
  this.tempDir=tempDir;
}","public DummyPreparedQuery(IQueryDefinition queryDefn,String tempDir,DataEngineContext context){
  this(queryDefn,tempDir);
  this.context=context;
}",0.6540880503144654
73885,"/** 
 * @param oldSubQuery
 * @param newSubQuery
 * @return
 */
private static boolean isCompatibleSubQuery(IBaseQueryDefinition oldDefn,IBaseQueryDefinition newDefn){
  boolean isComp=QueryDefnUtil.isCompatibleSQs(oldDefn.getSubqueries(),newDefn.getSubqueries());
  if (isComp == false)   return false;
  Iterator oldIt=oldDefn.getGroups().iterator();
  Iterator newIt=newDefn.getGroups().iterator();
  while (newIt.hasNext()) {
    IGroupDefinition oldGroupDefn=(IGroupDefinition)oldIt.next();
    IGroupDefinition newGroupDefn=(IGroupDefinition)newIt.next();
    isComp=QueryDefnUtil.isCompatibleSQs(oldGroupDefn.getSubqueries(),newGroupDefn.getSubqueries());
    if (isComp == false)     return false;
  }
  return true;
}","/** 
 * @param oldSubQuery
 * @param newSubQuery
 * @return
 */
private static boolean isCompatibleSubQuery(IBaseQueryDefinition oldDefn,IBaseQueryDefinition newDefn){
  boolean isComp=QueryCompUtil.isCompatibleSQs(oldDefn.getSubqueries(),newDefn.getSubqueries());
  if (isComp == false)   return false;
  Iterator oldIt=oldDefn.getGroups().iterator();
  Iterator newIt=newDefn.getGroups().iterator();
  while (newIt.hasNext()) {
    IGroupDefinition oldGroupDefn=(IGroupDefinition)oldIt.next();
    IGroupDefinition newGroupDefn=(IGroupDefinition)newIt.next();
    isComp=QueryCompUtil.isCompatibleSQs(oldGroupDefn.getSubqueries(),newGroupDefn.getSubqueries());
    if (isComp == false)     return false;
  }
  return true;
}",0.9889807162534436
73886,"public IReportItemExecutor createPageExecutor(long pageNumber,MasterPageDesign pageDesign){
  IPageContent pageContent=(IPageContent)pages.get(pageDesign);
  if (pageContent == null) {
    IReportItemExecutor pageExecutor=new MasterPageExecutor(manager,pageNumber,pageDesign);
    pageContent=(IPageContent)pageExecutor.execute();
    IContentEmitter domEmitter=new DOMBuilderEmitter(pageContent);
    ReportExecutorUtil.executeAll(pageExecutor,domEmitter);
    pageExecutor.close();
    pages.put(pageDesign,pageContent);
  }
  return new DOMReportItemExecutor(pageContent,true);
}","public IReportItemExecutor createPageExecutor(long pageNumber,MasterPageDesign pageDesign){
  IPageContent pageContent=(IPageContent)pages.get(pageDesign);
  if (pageContent == null) {
    IReportItemExecutor pageExecutor=new MasterPageExecutor(manager,pageNumber,pageDesign);
    pageContent=(IPageContent)pageExecutor.execute();
    IContentEmitter domEmitter=new DOMBuilderEmitter(pageContent);
    ReportExecutorUtil.executeAll(pageExecutor,domEmitter);
    pageExecutor.close();
    pages.put(pageDesign,pageContent);
  }
 else {
    pageContent.setPageNumber(pageNumber);
  }
  return new DOMReportItemExecutor(pageContent,true);
}",0.9548810500410172
73887,"/** 
 * process tag function
 * @throws Exception
 */
protected void __process() throws Exception {
  if (viewer == null)   return;
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  this.locale=BirtTagUtil.getLocale(request,viewer.getLocale());
  this.options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,this.locale);
  options.setOption(InputOptions.OPT_RTL,Boolean.valueOf(viewer.getRtl()));
  Collection paramDefList=viewer.getParameterDefList();
  if (paramDefList == null) {
    BirtReportServiceFactory.getReportService().setContext(pageContext.getServletContext(),options);
    IViewerReportDesignHandle designHandle=BirtTagUtil.getDesignHandle(request,viewer);
    viewer.setReportDesignHandle(designHandle);
    paramDefList=BirtReportServiceFactory.getReportService().getParameterDefinitions(designHandle,options,false);
    viewer.setParameterDefList(paramDefList);
  }
  this.paramDef=BirtUtility.findParameterDefinition(paramDefList,param.getName());
  if (paramDef == null)   return;
  String dataType=ParameterDataTypeConverter.ConvertDataType(paramDef.getDataType());
  this.pattern=param.getPattern();
  if (this.pattern == null)   this.pattern=paramDef.getPattern();
  if (""String_Node_Str"".equalsIgnoreCase(param.getIsLocale()))   this.isLocale=true;
  if (param.getValue() != null) {
    if (param.getValue() instanceof String) {
      Object valueObj=DataUtil.validateWithPattern(param.getName(),dataType,this.pattern,(String)param.getValue(),locale,isLocale);
      if (this.paramDef.isMultiValue())       param.setValue(new Object[]{valueObj});
 else       param.setValue(valueObj);
    }
 else     if (this.paramDef.isMultiValue() && param.getValue() instanceof String[]) {
      String[] sValues=(String[])param.getValue();
      Object[] values=new Object[sValues.length];
      for (int i=0; i < sValues.length; i++) {
        Object valueObj=DataUtil.validateWithPattern(param.getName(),dataType,this.pattern,sValues[i],locale,isLocale);
        values[i]=valueObj;
      }
      param.setValue(values);
    }
  }
 else {
    Object defaultValue=BirtReportServiceFactory.getReportService().getParameterDefaultValue(viewer.getReportDesignHandle(),param.getName(),options);
    if (this.paramDef.isMultiValue())     param.setValue(new Object[]{defaultValue});
 else     param.setValue(defaultValue);
  }
  if (this.paramDef.isMultiValue()) {
    this.valueStringList=new ArrayList();
    Object[] values=(Object[])param.getValue();
    if (values != null) {
      for (int i=0; i < values.length; i++) {
        String value=DataUtil.getDisplayValue(values[i]);
        this.valueStringList.add(value);
      }
    }
  }
 else {
    this.valueString=DataUtil.getDisplayValue(param.getValue());
    if (this.valueString == null)     this.valueString=""String_Node_Str"";
  }
  this.displayTextString=param.getDisplayText();
  if (this.displayTextString == null) {
    Object obj=param.getValue();
    if (obj != null) {
      if (obj instanceof Object[]) {
        Object[] objs=(Object[])obj;
        if (objs.length > 0)         obj=objs[0];
 else         obj=null;
      }
      this.displayTextString=ParameterValidationUtil.getDisplayValue(dataType,this.pattern,obj,locale);
    }
  }
  if (this.displayTextString == null)   this.displayTextString=""String_Node_Str"";
  if (param.getTitle() == null)   param.setTitle(this.displayTextString);
  requesterTag.addParameter(param.getName(),param.getValue());
  if (paramDef.isHidden()) {
    __handleHidden();
  }
 else {
switch (paramDef.getControlType()) {
case IScalarParameterDefn.TEXT_BOX:
      __handleTextBox();
    break;
case IScalarParameterDefn.LIST_BOX:
  __handleListBox();
break;
case IScalarParameterDefn.RADIO_BUTTON:
__handleRadioButton();
break;
case IScalarParameterDefn.CHECK_BOX:
__handleCheckBox();
break;
default :
break;
}
}
}","/** 
 * process tag function
 * @throws Exception
 */
protected void __process() throws Exception {
  if (viewer == null)   return;
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  this.locale=BirtTagUtil.getLocale(request,viewer.getLocale());
  this.options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,this.locale);
  options.setOption(InputOptions.OPT_RTL,Boolean.valueOf(viewer.getRtl()));
  Collection paramDefList=viewer.getParameterDefList();
  if (paramDefList == null) {
    BirtReportServiceFactory.getReportService().setContext(pageContext.getServletContext(),options);
    IViewerReportDesignHandle designHandle=BirtTagUtil.getDesignHandle(request,viewer);
    viewer.setReportDesignHandle(designHandle);
    paramDefList=BirtReportServiceFactory.getReportService().getParameterDefinitions(designHandle,options,false);
    viewer.setParameterDefList(paramDefList);
  }
  this.paramDef=BirtUtility.findParameterDefinition(paramDefList,param.getName());
  if (paramDef == null)   return;
  String dataType=ParameterDataTypeConverter.ConvertDataType(paramDef.getDataType());
  this.pattern=param.getPattern();
  if (this.pattern == null)   this.pattern=paramDef.getPattern();
  if (""String_Node_Str"".equalsIgnoreCase(param.getIsLocale()))   this.isLocale=true;
 else   this.isLocale=false;
  if (param.getValue() != null) {
    if (param.getValue() instanceof String) {
      Object valueObj=DataUtil.validateWithPattern(param.getName(),dataType,this.pattern,(String)param.getValue(),locale,isLocale);
      if (this.paramDef.isMultiValue())       param.setValue(new Object[]{valueObj});
 else       param.setValue(valueObj);
    }
 else     if (this.paramDef.isMultiValue() && param.getValue() instanceof String[]) {
      String[] sValues=(String[])param.getValue();
      Object[] values=new Object[sValues.length];
      for (int i=0; i < sValues.length; i++) {
        Object valueObj=DataUtil.validateWithPattern(param.getName(),dataType,this.pattern,sValues[i],locale,isLocale);
        values[i]=valueObj;
      }
      param.setValue(values);
    }
  }
 else {
    Object defaultValue=BirtReportServiceFactory.getReportService().getParameterDefaultValue(viewer.getReportDesignHandle(),param.getName(),options);
    if (this.paramDef.isMultiValue())     param.setValue(new Object[]{defaultValue});
 else     param.setValue(defaultValue);
  }
  if (this.paramDef.isMultiValue()) {
    this.valueStringList=new ArrayList();
    Object[] values=(Object[])param.getValue();
    if (values != null) {
      for (int i=0; i < values.length; i++) {
        String value=DataUtil.getDisplayValue(values[i]);
        this.valueStringList.add(value);
      }
    }
  }
 else {
    this.valueString=DataUtil.getDisplayValue(param.getValue());
    if (this.valueString == null)     this.valueString=""String_Node_Str"";
  }
  this.displayTextString=param.getDisplayText();
  if (this.displayTextString == null) {
    Object obj=param.getValue();
    if (obj != null) {
      if (obj instanceof Object[]) {
        Object[] objs=(Object[])obj;
        if (objs.length > 0)         obj=objs[0];
 else         obj=null;
      }
      this.displayTextString=ParameterValidationUtil.getDisplayValue(dataType,this.pattern,obj,locale);
    }
  }
  if (this.displayTextString == null)   this.displayTextString=""String_Node_Str"";
  if (param.getTitle() == null)   param.setTitle(this.displayTextString);
  requesterTag.addParameter(param.getName(),param.getValue());
  if (paramDef.isHidden()) {
    __handleHidden();
  }
 else {
switch (paramDef.getControlType()) {
case IScalarParameterDefn.TEXT_BOX:
      __handleTextBox();
    break;
case IScalarParameterDefn.LIST_BOX:
  __handleListBox();
break;
case IScalarParameterDefn.RADIO_BUTTON:
__handleRadioButton();
break;
case IScalarParameterDefn.CHECK_BOX:
__handleCheckBox();
break;
default :
break;
}
}
}",0.9963202639258976
73888,"/** 
 * Handle event before doEndTag
 */
protected void __beforeEndTag(){
  pageContext.setAttribute(ATTR_ID + param.getId(),param.getId());
  pageContext.setAttribute(ATTR_PARAM + param.getName(),param.getName());
}","/** 
 * Handle event before doEndTag
 */
protected void __beforeEndTag(){
  pageContext.setAttribute(ATTR_ID + param.getId(),param.getId());
  if (this.requesterTag == null) {
    pageContext.setAttribute(ATTR_PARAM + param.getName(),param.getName());
  }
}",0.9133192389006344
73889,"/** 
 * validate the tag
 * @return
 * @throws Exception
 */
protected boolean __validate() throws Exception {
  if (!param.validate())   return false;
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(param.getId());
  if (!m.find()) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_INVALID_ATTR_ID));
  }
  if (pageContext.findAttribute(ATTR_ID + param.getId()) != null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_ATTR_ID_DUPLICATE));
  }
  if (pageContext.findAttribute(ATTR_PARAM + param.getName()) != null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_PARAM_NAME_DUPLICATE));
  }
  return true;
}","/** 
 * validate the tag
 * @return
 * @throws Exception
 */
protected boolean __validate() throws Exception {
  if (!param.validate())   return false;
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(param.getId());
  if (!m.find()) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_INVALID_ATTR_ID));
  }
  if (pageContext.findAttribute(ATTR_ID + param.getId()) != null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_ATTR_ID_DUPLICATE));
  }
  if (this.requesterTag == null) {
    if (pageContext.findAttribute(ATTR_PARAM + param.getName()) != null) {
      throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_PARAM_NAME_DUPLICATE));
    }
  }
 else {
    if (this.requesterTag.getParameters().get(param.getName()) != null)     throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_PARAM_NAME_DUPLICATE));
  }
  return true;
}",0.8493797991730656
73890,"/** 
 * Compiles a Javascript expression to produce a subclass of CompileExpression, which contains the compiled form of the JS expression, after suitable replacement of aggregate functin occurrences in the expression. Aggregate function calls that appear in the expression are registered with the provided AggregateRegistry instance. <p> Aggregate registry can be null, in which case the provided expression is expected NOT to contain aggregates. If it does, a DteException is thrown.
 * @param expression Text of expression to compile
 * @param registry Registry for aggregate expressions. Can be null if expression is not expected to contain aggregates
 * @param context Rhino context associated with current thread
 * @return
 */
public CompiledExpression compile(String expression,AggregateRegistry registry,Context context){
  try {
    if (expression == null || expression.trim().length() == 0)     throw new DataException(ResourceConstants.EXPRESSION_CANNOT_BE_NULL_OR_BLANK);
    this.registry=registry;
    return super.compileExpression(expression,context);
  }
 catch (  Exception e) {
    DataException dataException=new DataException(ResourceConstants.INVALID_JS_EXPR,e,expression);
    return new InvalidExpression(dataException);
  }
}","/** 
 * Compiles a Javascript expression to produce a subclass of CompileExpression, which contains the compiled form of the JS expression, after suitable replacement of aggregate functin occurrences in the expression. Aggregate function calls that appear in the expression are registered with the provided AggregateRegistry instance. <p> Aggregate registry can be null, in which case the provided expression is expected NOT to contain aggregates. If it does, a DteException is thrown.
 * @param expression Text of expression to compile
 * @param registry Registry for aggregate expressions. Can be null if expression is not expected to contain aggregates
 * @param context Rhino context associated with current thread
 * @return
 */
public CompiledExpression compile(String expression,AggregateRegistry registry,Context context){
  try {
    if (expression == null || expression.trim().length() == 0)     throw new DataException(ResourceConstants.EXPRESSION_CANNOT_BE_NULL_OR_BLANK);
    this.registry=registry;
    return super.compileExpression(expression,context);
  }
 catch (  Exception e) {
    if (e instanceof DataException) {
      return new InvalidExpression((DataException)e);
    }
 else {
      DataException dataException=new DataException(ResourceConstants.INVALID_JS_EXPR,e,expression);
      return new InvalidExpression(dataException);
    }
  }
}",0.9556913674560732
73891,"/** 
 * @param expr
 * @return
 */
private static boolean flattenFilterExpression(CompiledExpression expr){
  int type=expr.getType();
switch (type) {
case CompiledExpression.TYPE_COMPLEX_EXPR:
{
      Iterator col=((ComplexExpression)expr).getSubExpressions().iterator();
      while (col.hasNext()) {
        if (!flattenFilterExpression((CompiledExpression)col.next()))         return false;
      }
      break;
    }
case CompiledExpression.TYPE_DIRECT_COL_REF:
{
    break;
  }
case CompiledExpression.TYPE_SINGLE_AGGREGATE:
{
  String aggName=((AggregateExpression)expr).getAggregation().getName();
  if (!isTopBottomN(aggName))   return false;
  break;
}
case CompiledExpression.TYPE_CONSTANT_EXPR:
case CompiledExpression.TYPE_INVALID_EXPR:
{
break;
}
}
return true;
}","/** 
 * @param expr
 * @return
 * @throws DataException 
 */
private static boolean flattenFilterExpression(CompiledExpression expr) throws DataException {
  int type=expr.getType();
switch (type) {
case CompiledExpression.TYPE_COMPLEX_EXPR:
{
      Iterator col=((ComplexExpression)expr).getSubExpressions().iterator();
      while (col.hasNext()) {
        if (!flattenFilterExpression((CompiledExpression)col.next()))         return false;
      }
      break;
    }
case CompiledExpression.TYPE_DIRECT_COL_REF:
{
    break;
  }
case CompiledExpression.TYPE_SINGLE_AGGREGATE:
{
  String aggName=((AggregateExpression)expr).getAggregation().getName();
  if (!isTopBottomN(aggName))   return false;
  break;
}
case CompiledExpression.TYPE_CONSTANT_EXPR:
{
break;
}
case CompiledExpression.TYPE_INVALID_EXPR:
{
throw (DataException)((InvalidExpression)expr).evaluate(null,null);
}
}
return true;
}",0.9223416965352448
73892,"/** 
 * Check whether filter in query contains aggregation. If aggregation is TOPN,BOTTOMN,TOPPERCENT,BOTTMEPERCENT return true. else return false;
 * @return
 */
public static boolean isValidExpressionInQueryFilter(IBaseExpression expression){
  if (expression instanceof IScriptExpression) {
    String text=((IScriptExpression)expression).getText();
    Context context=Context.enter();
    AggregateRegistry aggrReg=new AggregateRegistry(){
      public int register(      AggregateExpression aggregationExpr){
        return -1;
      }
    }
;
    try {
      ExpressionCompiler expressionCompiler=new ExpressionCompiler();
      CompiledExpression expr=expressionCompiler.compile(text,aggrReg,context);
      return flattenFilterExpression(expr);
    }
  finally {
      Context.exit();
    }
  }
 else   if (expression instanceof IConditionalExpression) {
    IScriptExpression expr=((IConditionalExpression)expression).getExpression();
    IBaseExpression oprand1=((IConditionalExpression)expression).getOperand1();
    IBaseExpression oprand2=((IConditionalExpression)expression).getOperand2();
    return isValidExpressionInQueryFilter(expr) && isValidExpressionInQueryFilter(oprand1) && isValidExpressionInQueryFilter(oprand2);
  }
  return true;
}","/** 
 * Check whether filter in query contains aggregation. If aggregation is TOPN,BOTTOMN,TOPPERCENT,BOTTMEPERCENT return true. else return false;
 * @return
 * @throws DataException 
 */
public static boolean isValidExpressionInQueryFilter(IBaseExpression expression) throws DataException {
  if (expression instanceof IScriptExpression) {
    String text=((IScriptExpression)expression).getText();
    Context context=Context.enter();
    AggregateRegistry aggrReg=new AggregateRegistry(){
      public int register(      AggregateExpression aggregationExpr){
        return -1;
      }
    }
;
    try {
      ExpressionCompiler expressionCompiler=new ExpressionCompiler();
      CompiledExpression expr=expressionCompiler.compile(text,aggrReg,context);
      return flattenFilterExpression(expr);
    }
  finally {
      Context.exit();
    }
  }
 else   if (expression instanceof IConditionalExpression) {
    IScriptExpression expr=((IConditionalExpression)expression).getExpression();
    IBaseExpression oprand1=((IConditionalExpression)expression).getOperand1();
    IBaseExpression oprand2=((IConditionalExpression)expression).getOperand2();
    return isValidExpressionInQueryFilter(expr) && isValidExpressionInQueryFilter(oprand1) && isValidExpressionInQueryFilter(oprand2);
  }
  return true;
}",0.9813084112149532
73893,"public IDataQueryDefinition[] createReportQueries(IDataQueryDefinition parent) throws BirtException {
  if (crosstabItem == null) {
    throw new CrosstabException(modelHandle == null ? null : modelHandle.getElement(),Messages.getString(""String_Node_Str""));
  }
  IDataQueryDefinition cubeQuery=CrosstabQueryUtil.createCubeQuery(crosstabItem,parent,true,true,true,true,true,true);
  String emptyValue=crosstabItem.getEmptyCellValue();
  if (context != null) {
    for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      processChildQuery(cubeQuery,mv.getCell(),emptyValue);
      processChildQuery(cubeQuery,mv.getHeader(),emptyValue);
      for (int j=0; j < mv.getAggregationCount(); j++) {
        processChildQuery(cubeQuery,mv.getAggregationCell(j),emptyValue);
      }
    }
    if (crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      for (int i=0; i < crosstabItem.getDimensionCount(ROW_AXIS_TYPE); i++) {
        DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,i);
        for (int j=0; j < dv.getLevelCount(); j++) {
          LevelViewHandle lv=dv.getLevel(j);
          processChildQuery(cubeQuery,lv.getCell(),emptyValue);
          processChildQuery(cubeQuery,lv.getAggregationHeader(),emptyValue);
        }
      }
    }
    if (crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      for (int i=0; i < crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
        DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,i);
        for (int j=0; j < dv.getLevelCount(); j++) {
          LevelViewHandle lv=dv.getLevel(j);
          processChildQuery(cubeQuery,lv.getCell(),emptyValue);
          processChildQuery(cubeQuery,lv.getAggregationHeader(),emptyValue);
        }
      }
    }
    processChildQuery(cubeQuery,crosstabItem.getGrandTotal(ROW_AXIS_TYPE),emptyValue);
    processChildQuery(cubeQuery,crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE),emptyValue);
  }
  return new IDataQueryDefinition[]{cubeQuery};
}","public IDataQueryDefinition[] createReportQueries(IDataQueryDefinition parent) throws BirtException {
  if (crosstabItem == null) {
    throw new CrosstabException(modelHandle == null ? null : modelHandle.getElement(),Messages.getString(""String_Node_Str""));
  }
  IDataQueryDefinition cubeQuery=CrosstabQueryUtil.createCubeQuery(crosstabItem,parent,true,true,true,true,true,true);
  String emptyValue=crosstabItem.getEmptyCellValue();
  if (context != null) {
    processChildQuery(cubeQuery,crosstabItem.getHeader(),emptyValue);
    for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      processChildQuery(cubeQuery,mv.getCell(),emptyValue);
      processChildQuery(cubeQuery,mv.getHeader(),emptyValue);
      for (int j=0; j < mv.getAggregationCount(); j++) {
        processChildQuery(cubeQuery,mv.getAggregationCell(j),emptyValue);
      }
    }
    if (crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      for (int i=0; i < crosstabItem.getDimensionCount(ROW_AXIS_TYPE); i++) {
        DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,i);
        for (int j=0; j < dv.getLevelCount(); j++) {
          LevelViewHandle lv=dv.getLevel(j);
          processChildQuery(cubeQuery,lv.getCell(),emptyValue);
          processChildQuery(cubeQuery,lv.getAggregationHeader(),emptyValue);
        }
      }
    }
    if (crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      for (int i=0; i < crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
        DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,i);
        for (int j=0; j < dv.getLevelCount(); j++) {
          LevelViewHandle lv=dv.getLevel(j);
          processChildQuery(cubeQuery,lv.getCell(),emptyValue);
          processChildQuery(cubeQuery,lv.getAggregationHeader(),emptyValue);
        }
      }
    }
    processChildQuery(cubeQuery,crosstabItem.getGrandTotal(ROW_AXIS_TYPE),emptyValue);
    processChildQuery(cubeQuery,crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE),emptyValue);
  }
  return new IDataQueryDefinition[]{cubeQuery};
}",0.9830999517141478
73894,"/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.isPDFLayout(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (ParameterAccessor.isPDFLayout(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    if (ParameterAccessor.isDesigner(request))     BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}",0.9604929322218196
73895,"/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}","/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    if (ParameterAccessor.isDesigner(request))     BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}",0.994595837645165
73896,"/** 
 * Log engine error message in problem view
 * @param request
 * @param errors
 */
public static void error(HttpServletRequest request,List errors){
  boolean isDesigner=ParameterAccessor.isDesigner(request);
  if (!isDesigner)   return;
  String systemId=getSystemId(request);
  if (systemId == null)   return;
  String isCleared=(String)request.getAttribute(VIEWER_MARKER_CLEARED);
  if (isCleared == null) {
    clearErrors(systemId);
    request.setAttribute(VIEWER_MARKER_CLEARED,""String_Node_Str"");
  }
  if (errors == null || errors.size() <= 0)   return;
  Iterator it=errors.iterator();
  while (it.hasNext()) {
    Exception e=(Exception)it.next();
    if (e != null) {
      error(systemId,getDetailMessage(e),IBirtConstants.UNKNOWN_POSITION);
    }
  }
}","/** 
 * Log engine error message in problem view
 * @param request
 * @param moduleHandle
 * @param errors
 */
public static void error(HttpServletRequest request,List errors){
  String systemId=getSystemId(request);
  if (systemId == null)   return;
  String isCleared=(String)request.getAttribute(VIEWER_MARKER_CLEARED);
  if (isCleared == null) {
    clearErrors(systemId);
    request.setAttribute(VIEWER_MARKER_CLEARED,""String_Node_Str"");
  }
  if (errors == null || errors.size() <= 0)   return;
  Iterator it=errors.iterator();
  while (it.hasNext()) {
    Exception e=(Exception)it.next();
    if (e != null) {
      int lineno=IBirtConstants.UNKNOWN_POSITION;
      long elementId=0;
      if (e instanceof EngineException) {
        try {
          Map options=getModuleOptions(request);
          options.put(IModuleOption.MARK_LINE_NUMBER_KEY,Boolean.TRUE);
          IReportRunnable reportRunnable=BirtUtility.getRunnableFromDesignFile(request,systemId,options);
          if (reportRunnable != null) {
            ModuleHandle moduleHandle=reportRunnable.getDesignHandle().getModuleHandle();
            elementId=((EngineException)e).getElementID();
            Object obj=moduleHandle.getElementByID(elementId);
            lineno=moduleHandle.getLineNo(obj);
          }
        }
 catch (        Exception err) {
        }
      }
      error(systemId,getDetailMessage(e),elementId,lineno);
    }
  }
}",0.5878594249201278
73897,"/** 
 * Returns if pagebreak pagination only
 * @param request
 * @return
 */
public static boolean isPagebreakOnly(HttpServletRequest request){
  String pagebreakOnly=getParameter(request,PARAM_PAGEBREAK_ONLY);
  if (""String_Node_Str"".equalsIgnoreCase(pagebreakOnly))   return true;
  return false;
}","/** 
 * Returns if pagebreak pagination only
 * @param request
 * @return
 */
public static boolean isPagebreakOnly(HttpServletRequest request){
  String pagebreakOnly=getParameter(request,PARAM_PAGEBREAK_ONLY);
  if (""String_Node_Str"".equalsIgnoreCase(pagebreakOnly))   return false;
  return true;
}",0.9767441860465116
73898,"/** 
 * Returns if fit to page
 * @param request
 * @return
 */
public static boolean isFitToPage(HttpServletRequest request){
  String fitToPage=getParameter(request,PARAM_FIT_TO_PAGE);
  if (""String_Node_Str"".equalsIgnoreCase(fitToPage))   return true;
  return false;
}","/** 
 * Returns if fit to page
 * @param request
 * @return
 */
public static boolean isFitToPage(HttpServletRequest request){
  String fitToPage=getParameter(request,PARAM_FIT_TO_PAGE);
  if (""String_Node_Str"".equalsIgnoreCase(fitToPage))   return false;
  return true;
}",0.9742647058823528
73899,"private void clearTempFile(){
  File tmpDir=new File(session.getTempDir());
  if (!tmpDir.exists() || !tmpDir.isDirectory()) {
    return;
  }
  File[] tmpFiles=tmpDir.listFiles();
  for (int i=0; i < tmpFiles.length; i++) {
    if (!tmpFiles[i].delete()) {
      tmpFiles[i].deleteOnExit();
    }
  }
  if (!tmpDir.delete()) {
    tmpDir.deleteOnExit();
  }
}","private void clearTempFile(){
  File tmpDir=new File(session.getTempDir());
  if (!tmpDir.exists() || !tmpDir.isDirectory()) {
    return;
  }
  File[] tmpFiles=tmpDir.listFiles();
  if (tmpFiles != null) {
    for (int i=0; i < tmpFiles.length; i++) {
      if (!tmpFiles[i].delete()) {
        tmpFiles[i].deleteOnExit();
      }
    }
  }
  if (!tmpDir.delete()) {
    tmpDir.deleteOnExit();
  }
}",0.9473684210526316
73900,"public List checkCompatibility(){
  List errorList=new ArrayList(1);
  if (checkVersion(handle.getExtensionVersion()) < 0) {
    try {
      handle.setExtensionVersion(CROSSTAB_CURRENT_VERSION);
    }
 catch (    SemanticException e) {
      errorList.add(e);
    }
    if (getHeader() == null) {
      PropertyHandle headerHandle=handle.getPropertyHandle(HEADER_PROP);
      if (headerHandle != null) {
        try {
          headerHandle.setValue(CrosstabExtendedItemFactory.createCrosstabCell(getModuleHandle()));
        }
 catch (        SemanticException e) {
          errorList.add(e);
        }
      }
    }
  }
  return errorList.size() == 0 ? Collections.EMPTY_LIST : errorList;
}","public CompatibilityStatus checkCompatibility(){
  compStatus=checkVersion(handle.getExtensionVersion());
  if (compStatus < 0) {
    CompatibilityStatus status=new CompatibilityStatus();
    List errorList=new ArrayList(2);
    status.setStatusType(CompatibilityStatus.CONVERT_COMPATIBILITY_TYPE);
    try {
      handle.setExtensionVersion(CROSSTAB_CURRENT_VERSION);
    }
 catch (    SemanticException e) {
      errorList.add(e);
    }
    if (getHeader() == null) {
      PropertyHandle headerHandle=handle.getPropertyHandle(HEADER_PROP);
      if (headerHandle != null) {
        try {
          headerHandle.setValue(CrosstabExtendedItemFactory.createCrosstabCell(getModuleHandle()));
        }
 catch (        SemanticException e) {
          errorList.add(e);
        }
      }
    }
    if (errorList.size() > 0) {
      status.setErrors(errorList);
    }
    return status;
  }
 else   if (compStatus > 0) {
    return new CompatibilityStatus(null,CompatibilityStatus.NOT_SUPPORTED_TYPE);
  }
  return COMP_OK_STATUS;
}",0.686012768427162
73901,"public List checkCompatibility(){
{
    ExtendedItemHandle exhandle=(ExtendedItemHandle)getModelHandle();
    Map illegalContents=exhandle.getIllegalContents();
    if (illegalContents.containsKey(IMeasureViewConstants.DETAIL_PROP)) {
      List detailInfoList=(List)illegalContents.get(IMeasureViewConstants.DETAIL_PROP);
      if (detailInfoList.size() > 0) {
        IllegalContentInfo detailInfo=(IllegalContentInfo)detailInfoList.get(0);
        ExtendedItemHandle oldDetail=(ExtendedItemHandle)detailInfo.getContent();
        if (oldDetail != null) {
          try {
            ExtendedItemHandle newDetail=CrosstabExtendedItemFactory.createAggregationCell(getModuleHandle());
            handle.getPropertyHandle(DETAIL_PROP).setValue(newDetail);
            List contents=oldDetail.getContents(ICrosstabCellConstants.CONTENT_PROP);
            for (int i=0; i < contents.size(); i++) {
              ((DesignElementHandle)contents.get(i)).moveTo(newDetail,IAggregationCellConstants.CONTENT_PROP);
            }
          }
 catch (          SemanticException e) {
            List errorList=new ArrayList(1);
            errorList.add(e);
            return errorList;
          }
        }
      }
    }
  }
  return Collections.EMPTY_LIST;
}","public CompatibilityStatus checkCompatibility(){
  if (getCrosstab().compStatus < 0) {
    ExtendedItemHandle exhandle=(ExtendedItemHandle)getModelHandle();
    Map illegalContents=exhandle.getIllegalContents();
    if (illegalContents.containsKey(IMeasureViewConstants.DETAIL_PROP)) {
      List detailInfoList=(List)illegalContents.get(IMeasureViewConstants.DETAIL_PROP);
      if (detailInfoList.size() > 0) {
        IllegalContentInfo detailInfo=(IllegalContentInfo)detailInfoList.get(0);
        ExtendedItemHandle oldDetail=(ExtendedItemHandle)detailInfo.getContent();
        if (oldDetail != null) {
          CompatibilityStatus status=new CompatibilityStatus();
          try {
            status.setStatusType(CompatibilityStatus.CONVERT_COMPATIBILITY_TYPE);
            ExtendedItemHandle newDetail=CrosstabExtendedItemFactory.createAggregationCell(getModuleHandle());
            handle.getPropertyHandle(DETAIL_PROP).setValue(newDetail);
            List contents=oldDetail.getContents(ICrosstabCellConstants.CONTENT_PROP);
            for (int i=0; i < contents.size(); i++) {
              ((DesignElementHandle)contents.get(i)).moveTo(newDetail,IAggregationCellConstants.CONTENT_PROP);
            }
          }
 catch (          SemanticException e) {
            List errorList=new ArrayList(1);
            errorList.add(e);
            status.setErrors(errorList);
          }
          return status;
        }
      }
    }
  }
  return COMP_OK_STATUS;
}",0.8963749542292201
73902,"protected ReportElementHandle getReportElementHandle(ModuleHandle moduleHandle,IMarker marker){
  Integer elementId=new Integer(0);
  try {
    elementId=(Integer)marker.getAttribute(IDEMultiPageReportEditor.ELEMENT_ID);
  }
 catch (  CoreException e) {
    ExceptionHandler.handle(e);
  }
  if (elementId.intValue() > 0) {
    DesignElementHandle elementHandle=moduleHandle.getElementByID(elementId.intValue());
    if (elementHandle == null || !(elementHandle instanceof ReportElementHandle)) {
      return null;
    }
    if (elementHandle instanceof CellHandle || elementHandle instanceof ColumnHandle || elementHandle instanceof MasterPageHandle|| elementHandle instanceof ReportItemHandle|| elementHandle instanceof RowHandle|| elementHandle instanceof TemplateElementHandle) {
      return (ReportElementHandle)elementHandle;
    }
  }
  return null;
}","protected ReportElementHandle getReportElementHandle(ModuleHandle moduleHandle,IMarker marker){
  Integer elementId=new Integer(0);
  try {
    elementId=(Integer)marker.getAttribute(IDEMultiPageReportEditor.ELEMENT_ID);
  }
 catch (  CoreException e) {
    ExceptionHandler.handle(e);
  }
  if (elementId != null && elementId.intValue() > 0) {
    DesignElementHandle elementHandle=moduleHandle.getElementByID(elementId.intValue());
    if (elementHandle == null || !(elementHandle instanceof ReportElementHandle)) {
      return null;
    }
    if (elementHandle instanceof CellHandle || elementHandle instanceof ColumnHandle || elementHandle instanceof MasterPageHandle|| elementHandle instanceof ReportItemHandle|| elementHandle instanceof RowHandle|| elementHandle instanceof TemplateElementHandle) {
      return (ReportElementHandle)elementHandle;
    }
  }
  return null;
}",0.9879379666858128
73903,"public void gotoMarker(IMarker marker){
  Assert.isNotNull(editorPart);
  if (!marker.exists()) {
    return;
  }
  ModuleHandle moduleHandle=editorPart.getModel();
  ReportElementHandle reportElementHandle=getReportElementHandle(moduleHandle,marker);
  if (reportElementHandle == null || (reportElementHandle != null && isElementTemplateParameterDefinition(reportElementHandle))) {
    gotoXMLSourcePage(marker);
  }
 else {
    if (moduleHandle instanceof ReportDesignHandle) {
      if (isElementInMasterPage(reportElementHandle)) {
        gotoLayoutPage(ReportMasterPageEditorFormPage.ID,marker,reportElementHandle);
      }
 else {
        gotoLayoutPage(ReportLayoutEditorFormPage.ID,marker,reportElementHandle);
      }
    }
 else     if (moduleHandle instanceof LibraryHandle) {
      if (isElementInMasterPage(reportElementHandle)) {
        gotoLayoutPage(LibraryMasterPageEditorFormPage.ID,marker,reportElementHandle);
      }
 else {
        gotoLibraryLayoutPage(marker,reportElementHandle);
      }
    }
  }
}","public void gotoMarker(IMarker marker){
}",0.0768509840674789
73904,"public final int getDpiResolution(){
  if (iDpiResolution == 0) {
switch (getGraphicsContext().getDeviceConfiguration().getDevice().getType()) {
case GraphicsDevice.TYPE_RASTER_SCREEN:
      iDpiResolution=computeScreenDpi();
    break;
case GraphicsDevice.TYPE_PRINTER:
  iDpiResolution=72;
break;
case GraphicsDevice.TYPE_IMAGE_BUFFER:
iDpiResolution=computeScreenDpi();
break;
}
if (iDpiResolution >= 192) {
_g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
}
 else {
_g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_OFF);
}
}
return iDpiResolution;
}","public final int getDpiResolution(){
  if (iDpiResolution == 0) {
switch (getGraphicsContext().getDeviceConfiguration().getDevice().getType()) {
case GraphicsDevice.TYPE_RASTER_SCREEN:
      iDpiResolution=computeScreenDpi();
    break;
case GraphicsDevice.TYPE_PRINTER:
  iDpiResolution=72;
break;
case GraphicsDevice.TYPE_IMAGE_BUFFER:
if (userResolution == 0) {
iDpiResolution=computeScreenDpi();
}
 else {
iDpiResolution=userResolution;
}
break;
}
if (iDpiResolution >= 192) {
_g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
}
 else {
_g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_OFF);
}
}
return iDpiResolution;
}",0.9493487698986977
73905,"/** 
 * Currently, don't support multiple GroupOnRowKeyCount
 * @throws Exception
 */
private void groupOnRowKeyCount(double intervalRange) throws Exception, IOException {
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.NO_INTERVAL);
  groupDefn[0].setIntervalRange(intervalRange);
  String[] bindingNameRow=new String[3];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[3];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition qd=this.createQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  String outputStr=getOutputStrForGroupTest(30,qd,groupDefn.length,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
}","/** 
 * Currently, don't support any other group within a rowKeyCountGroup. It's because data rows in a  rowKeyCountGroup may be not sorted according to the current group model
 * @throws Exception
 */
private void groupOnRowKeyCount(double intervalRange) throws Exception, IOException {
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.NO_INTERVAL);
  groupDefn[0].setIntervalRange(intervalRange);
  String[] bindingNameRow=new String[3];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[3];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition qd=this.createQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  String outputStr=getOutputStrForGroupTest(30,qd,groupDefn.length,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
}",0.9489100817438691
73906,"/** 
 * Remember before requesting any service, this function must be called in advance to make sure using current data source and data set.
 * @param dataSourceDesign
 * @param datasetDesign
 */
public void setDataSourceAndDataSet(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection parameterHints,Map appContext){
  this.dataSourceDesign=dataSourceDesign;
  this.dataSetDesign=dataSetDesign;
  this.parameterHints=parameterHints;
  this.appContext=appContext;
  setRowFetchLimit();
}","/** 
 * Remember before requesting any service, this function must be called in advance to make sure using current data source and data set.
 * @param dataSourceDesign
 * @param datasetDesign
 */
public void setDataSourceAndDataSet(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection parameterHints,Map appContext){
  this.dataSourceDesign=dataSourceDesign;
  this.dataSetDesign=dataSetDesign;
  this.parameterHints=parameterHints;
  this.appContext=appContext;
}",0.9782178217821782
73907,"/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  if (crosstab == null || measureView == null)   return;
  AggregationCellHandle cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  if (cell == null) {
    cell=measureView.addAggregation(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell != null && cell.getContents().size() == 0) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    column.setAggregateFunction(function != null ? function : getDefaultMeasureAggregationFunction(measureView));
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
    dataItem.setResultSetColumn(columnHandle.getName());
    cell.addContent(dataItem);
  }
}","/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel,boolean forceAdd) throws SemanticException {
  if (crosstab == null || measureView == null)   return;
  AggregationCellHandle cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  if (cell == null && forceAdd) {
    cell=measureView.addAggregation(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell != null && cell.getContents().size() == 0) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    column.setAggregateFunction(function != null ? function : getDefaultMeasureAggregationFunction(measureView));
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
    dataItem.setResultSetColumn(columnHandle.getName());
    cell.addContent(dataItem);
  }
}",0.991304347826087
73908,"public final int getDpiResolution(){
  if (iDpiResolution == 0) {
switch (getGraphicsContext().getDeviceConfiguration().getDevice().getType()) {
case GraphicsDevice.TYPE_RASTER_SCREEN:
      if (GraphicsEnvironment.isHeadless()) {
        iDpiResolution=super.getDpiResolution();
      }
 else {
        iDpiResolution=Toolkit.getDefaultToolkit().getScreenResolution();
      }
    break;
case GraphicsDevice.TYPE_PRINTER:
  iDpiResolution=72;
break;
case GraphicsDevice.TYPE_IMAGE_BUFFER:
if (userResolution == 0) {
iDpiResolution=Toolkit.getDefaultToolkit().getScreenResolution();
}
 else {
iDpiResolution=userResolution;
}
break;
}
if (iDpiResolution >= 192) {
_g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
}
 else {
_g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_OFF);
}
}
return iDpiResolution;
}","public final int getDpiResolution(){
  if (iDpiResolution == 0) {
switch (getGraphicsContext().getDeviceConfiguration().getDevice().getType()) {
case GraphicsDevice.TYPE_RASTER_SCREEN:
      iDpiResolution=computeScreenDpi();
    break;
case GraphicsDevice.TYPE_PRINTER:
  iDpiResolution=72;
break;
case GraphicsDevice.TYPE_IMAGE_BUFFER:
iDpiResolution=computeScreenDpi();
break;
}
if (iDpiResolution >= 192) {
_g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
}
 else {
_g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_OFF);
}
}
return iDpiResolution;
}",0.7565495207667732
73909,"private Composite createParamSection(ScalarParameter param,Composite parent){
  boolean isRequired=param.getHandle().isRequired();
  boolean isStringType=param.getHandle().getDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING);
  if (isRequired) {
    isRequiredParameters.add(param.getHandle().getName());
  }
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  container.setLayout(layout);
  new Label(container,SWT.NONE).setText(param.getHandle().getDisplayLabel() + ""String_Node_Str"");
  if (param instanceof StaticTextParameter) {
    final StaticTextParameter textParam=(StaticTextParameter)param;
    String value=textParam.getDefaultValue();
    dataTypeCheckList.add(textParam);
    Text input=new Text(container,SWT.BORDER);
    input.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    input.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        Text input=(Text)e.getSource();
        paramValues.put(textParam.getHandle().getName(),input.getText());
      }
    }
);
    if (paramValues.containsKey(textParam.getHandle().getName())) {
      value=paramValues.get(textParam.getHandle().getName()).toString();
    }
    if (value != null) {
      input.setText(value);
    }
  }
 else   if (param instanceof RadioParameter) {
    final RadioParameter radioParameter=(RadioParameter)param;
    Object value=null;
    try {
      value=radioParameter.converToDataType(radioParameter.getDefaultValue());
    }
 catch (    BirtException e) {
    }
    if (paramValues.containsKey(radioParameter.getHandle().getName())) {
      value=paramValues.get(radioParameter.getHandle().getName());
    }
    List list=radioParameter.getValueList();
    if (!isRequired) {
      list.add(InputParameterDialog.nullValueChoice);
    }
    for (int i=0; i < list.size(); i++) {
      if (i > 0) {
        new Label(container,SWT.NONE);
      }
      IParameterSelectionChoice choice=(IParameterSelectionChoice)list.get(i);
      Button button=new Button(container,SWT.RADIO);
      button.setText(choice.getLabel());
      button.setData(choice.getValue());
      if (choice.getValue() != null && choice.getValue().equals(value)) {
        button.setSelection(true);
      }
 else       if (value == null && choice.getLabel().equals(NULL_VALUE_STR)) {
        button.setSelection(true);
      }
      button.addSelectionListener(new SelectionListener(){
        public void widgetDefaultSelected(        SelectionEvent e){
        }
        public void widgetSelected(        SelectionEvent e){
          Button button=(Button)e.getSource();
          paramValues.put(radioParameter.getHandle().getName(),button.getData());
        }
      }
);
    }
  }
 else   if (param instanceof ListingParameter) {
    final ListingParameter listParam=(ListingParameter)param;
    Object value=null;
    try {
      value=listParam.converToDataType(listParam.getDefaultValue());
    }
 catch (    BirtException e) {
    }
    if (paramValues.containsKey(listParam.getHandle().getName())) {
      value=paramValues.get(listParam.getHandle().getName());
      if (value != null) {
        listParam.setSelectionValue(value.toString());
      }
    }
    Combo combo=new Combo(container,SWT.BORDER);
    combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    List list=new ArrayList();
    if (isStringType && !isRequired) {
      list.add(blankValueChoice);
      list.addAll(listParam.getValueList());
    }
 else {
      list=listParam.getValueList();
    }
    if (!isRequired) {
      list.add(InputParameterDialog.nullValueChoice);
    }
    for (Iterator iterator=list.iterator(); iterator.hasNext(); ) {
      IParameterSelectionChoice choice=(IParameterSelectionChoice)iterator.next();
      String label=(String)(choice.getLabel() == null ? choice.getValue() : choice.getLabel());
      if (label != null) {
        combo.add(label);
        combo.setData(label,choice.getValue());
      }
    }
    if (value == null && !isRequired) {
      combo.select(combo.getItemCount() - 1);
    }
 else {
      for (int i=0; i < combo.getItemCount(); i++) {
        if (combo.getData(combo.getItem(i)).equals(value)) {
          combo.select(i);
          break;
        }
      }
    }
    combo.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        Combo combo=(Combo)e.getSource();
        paramValues.put(listParam.getHandle().getName(),combo.getData(combo.getItem(combo.getSelectionIndex())));
        if (listParam.getParentGroup() instanceof CascadingParameterGroup) {
          CascadingParameterGroup group=(CascadingParameterGroup)listParam.getParentGroup();
          if (group.getPostParameter(listParam) != null) {
            try {
              createParameters();
            }
 catch (            RuntimeException e1) {
              e1.printStackTrace();
            }
          }
        }
      }
    }
);
  }
  return container;
}","private Composite createParamSection(ScalarParameter param,Composite parent){
  boolean isRequired=param.getHandle().isRequired();
  boolean isStringType=param.getHandle().getDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING);
  if (isRequired) {
    isRequiredParameters.add(param.getHandle().getName());
  }
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  container.setLayout(layout);
  new Label(container,SWT.NONE).setText(param.getHandle().getDisplayLabel() + ""String_Node_Str"");
  if (param instanceof StaticTextParameter) {
    final StaticTextParameter textParam=(StaticTextParameter)param;
    String value=textParam.getDefaultValue();
    dataTypeCheckList.add(textParam);
    Text input=new Text(container,SWT.BORDER);
    input.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    input.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        Text input=(Text)e.getSource();
        paramValues.put(textParam.getHandle().getName(),input.getText());
      }
    }
);
    if (paramValues.containsKey(textParam.getHandle().getName())) {
      value=paramValues.get(textParam.getHandle().getName()).toString();
    }
    if (value != null) {
      input.setText(value);
    }
  }
 else   if (param instanceof RadioParameter) {
    final RadioParameter radioParameter=(RadioParameter)param;
    Object value=null;
    try {
      value=radioParameter.converToDataType(radioParameter.getDefaultValue());
    }
 catch (    BirtException e) {
    }
    if (paramValues.containsKey(radioParameter.getHandle().getName())) {
      value=paramValues.get(radioParameter.getHandle().getName());
    }
    List list=radioParameter.getValueList();
    if (!isRequired) {
      list.add(InputParameterDialog.nullValueChoice);
    }
    for (int i=0; i < list.size(); i++) {
      if (i > 0) {
        new Label(container,SWT.NONE);
      }
      IParameterSelectionChoice choice=(IParameterSelectionChoice)list.get(i);
      Button button=new Button(container,SWT.RADIO);
      button.setText(choice.getLabel());
      button.setData(choice.getValue());
      if (choice.getValue() != null && choice.getValue().equals(value)) {
        button.setSelection(true);
      }
 else       if (value == null && choice.getLabel().equals(NULL_VALUE_STR)) {
        button.setSelection(true);
      }
      button.addSelectionListener(new SelectionListener(){
        public void widgetDefaultSelected(        SelectionEvent e){
        }
        public void widgetSelected(        SelectionEvent e){
          Button button=(Button)e.getSource();
          paramValues.put(radioParameter.getHandle().getName(),button.getData());
        }
      }
);
    }
  }
 else   if (param instanceof ListingParameter) {
    final ListingParameter listParam=(ListingParameter)param;
    Object value=null;
    try {
      value=listParam.converToDataType(listParam.getDefaultValue());
    }
 catch (    BirtException e) {
    }
    if (paramValues.containsKey(listParam.getHandle().getName())) {
      value=paramValues.get(listParam.getHandle().getName());
      if (value != null) {
        listParam.setSelectionValue(value.toString());
      }
    }
    Combo combo=new Combo(container,SWT.BORDER);
    combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    List list=new ArrayList();
    if (isStringType && !isRequired) {
      list.add(blankValueChoice);
      list.addAll(listParam.getValueList());
    }
 else {
      list=listParam.getValueList();
    }
    if (!isRequired) {
      list.add(InputParameterDialog.nullValueChoice);
    }
    for (Iterator iterator=list.iterator(); iterator.hasNext(); ) {
      IParameterSelectionChoice choice=(IParameterSelectionChoice)iterator.next();
      String label=(choice.getLabel() == null ? String.valueOf(choice.getValue()) : choice.getLabel());
      if (label != null) {
        combo.add(label);
        combo.setData(label,choice.getValue());
      }
    }
    if (value == null && !isRequired) {
      combo.select(combo.getItemCount() - 1);
    }
 else {
      for (int i=0; i < combo.getItemCount(); i++) {
        if (combo.getData(combo.getItem(i)).equals(value)) {
          combo.select(i);
          break;
        }
      }
    }
    combo.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        Combo combo=(Combo)e.getSource();
        paramValues.put(listParam.getHandle().getName(),combo.getData(combo.getItem(combo.getSelectionIndex())));
        if (listParam.getParentGroup() instanceof CascadingParameterGroup) {
          CascadingParameterGroup group=(CascadingParameterGroup)listParam.getParentGroup();
          if (group.getPostParameter(listParam) != null) {
            try {
              createParameters();
            }
 catch (            RuntimeException e1) {
              e1.printStackTrace();
            }
          }
        }
      }
    }
);
  }
  return container;
}",0.9976775691890846
73910,"protected TableContent createTableContent(){
  TableContent content=new TableContent(reportContent);
  content.setCaption(""String_Node_Str"");
  content.setCaptionKey(""String_Node_Str"");
  content.setHeaderRepeat(true);
  Column column1=new Column(reportContent);
  column1.setWidth(new DimensionType(1,""String_Node_Str""));
  content.addColumn(column1);
  Column column2=new Column(reportContent);
  column2.setWidth(new DimensionType(2,""String_Node_Str""));
  content.addColumn(column2);
  return content;
}","protected TableContent createTableContent(){
  TableContent content=(TableContent)reportContent.createTableContent();
  content.setCaption(""String_Node_Str"");
  content.setCaptionKey(""String_Node_Str"");
  content.setHeaderRepeat(true);
  Column column1=new Column(reportContent);
  column1.setWidth(new DimensionType(1,""String_Node_Str""));
  content.addColumn(column1);
  Column column2=new Column(reportContent);
  column2.setWidth(new DimensionType(2,""String_Node_Str""));
  content.addColumn(column2);
  return content;
}",0.9484936831875608
73911,"protected TableBandContent createTableBandContent(){
  TableBandContent content=new TableBandContent(reportContent);
  content.setBandType(100);
  return content;
}","protected TableBandContent createTableBandContent(){
  TableBandContent content=(TableBandContent)reportContent.createTableBandContent();
  content.setBandType(100);
  return content;
}",0.8538681948424068
73912,"protected CellContent createCellContent(){
  CellContent content=new CellContent(reportContent);
  content.setName(""String_Node_Str"");
  content.setWidth(new DimensionType(100,""String_Node_Str""));
  content.setHeight(new DimensionType(""String_Node_Str""));
  ActionContent hyperlink=new ActionContent();
  hyperlink.setHyperlink(""String_Node_Str"",""String_Node_Str"");
  Map attr=new HashMap();
  attr.put(""String_Node_Str"",""String_Node_Str"");
  hyperlink.setDrillThrough(""String_Node_Str"",true,""String_Node_Str"",attr,attr,""String_Node_Str"",""String_Node_Str"",null);
  content.setHyperlinkAction(hyperlink);
  content.setRowSpan(10);
  content.setColSpan(11);
  content.setColumn(12);
  return content;
}","protected CellContent createCellContent(){
  CellContent content=(CellContent)reportContent.createCellContent();
  content.setName(""String_Node_Str"");
  content.setWidth(new DimensionType(100,""String_Node_Str""));
  content.setHeight(new DimensionType(""String_Node_Str""));
  ActionContent hyperlink=new ActionContent();
  hyperlink.setHyperlink(""String_Node_Str"",""String_Node_Str"");
  Map attr=new HashMap();
  attr.put(""String_Node_Str"",""String_Node_Str"");
  hyperlink.setDrillThrough(""String_Node_Str"",true,""String_Node_Str"",attr,attr,""String_Node_Str"",""String_Node_Str"",null);
  content.setHyperlinkAction(hyperlink);
  content.setRowSpan(10);
  content.setColSpan(11);
  content.setColumn(12);
  return content;
}",0.9477401129943502
73913,"protected ForeignContent createForeignContent(){
  ForeignContent content=new ForeignContent(reportContent);
  content.setRawType(""String_Node_Str"");
  content.setRawValue(null);
  return content;
}","protected ForeignContent createForeignContent(){
  ForeignContent content=(ForeignContent)reportContent.createForeignContent();
  content.setRawType(""String_Node_Str"");
  content.setRawValue(null);
  return content;
}",0.8626506024096385
73914,"protected RowContent createRowContent(){
  RowContent content=new RowContent(reportContent);
  content.setRowID(100);
  return content;
}","protected RowContent createRowContent(){
  RowContent content=(RowContent)reportContent.createRowContent();
  content.setRowID(100);
  return content;
}",0.9134948096885812
73915,"protected PageContent createPageContent(){
  PageContent content=new PageContent(reportContent);
  content.setPageType(""String_Node_Str"");
  content.setPageHeight(new DimensionType(3,""String_Node_Str""));
  content.setPageNumber(100);
  return content;
}","protected PageContent createPageContent(){
  PageContent content=(PageContent)reportContent.createPageContent();
  content.setPageType(""String_Node_Str"");
  content.setPageHeight(new DimensionType(3,""String_Node_Str""));
  content.setPageNumber(100);
  return content;
}",0.8582375478927203
73916,"protected DataContent createDataContent(){
  DataContent content=new DataContent(reportContent);
  content.setValue(null);
  content.setLabelText(""String_Node_Str"");
  content.setLabelKey(""String_Node_Str"");
  content.getHelpKey();
  return content;
}","protected DataContent createDataContent(){
  DataContent content=(DataContent)reportContent.createDataContent();
  content.setValue(null);
  content.setLabelText(""String_Node_Str"");
  content.setLabelKey(""String_Node_Str"");
  content.getHelpKey();
  return content;
}",0.9073359073359072
73917,"protected ImageContent createImageContent(){
  ImageContent content=new ImageContent(reportContent);
  content.setAltText(""String_Node_Str"");
  content.setAltTextKey(""String_Node_Str"");
  content.setImageSource(1);
  return content;
}","protected ImageContent createImageContent(){
  ImageContent content=(ImageContent)reportContent.createImageContent();
  content.setAltText(""String_Node_Str"");
  content.setAltTextKey(""String_Node_Str"");
  content.setImageSource(1);
  return content;
}",0.8948453608247423
73918,"protected LabelContent createLabelContent(){
  LabelContent content=new LabelContent(reportContent);
  content.setLabelText(""String_Node_Str"");
  content.setLabelKey(""String_Node_Str"");
  return content;
}","protected LabelContent createLabelContent(){
  LabelContent content=(LabelContent)reportContent.createLabelContent();
  content.setLabelText(""String_Node_Str"");
  content.setLabelKey(""String_Node_Str"");
  return content;
}",0.8805620608899297
73919,"protected Object doRead(byte[] buffer) throws Exception {
  ByteArrayInputStream in=new ByteArrayInputStream(buffer);
  DataInputStream oi=new DataInputStream(in);
  Object object=new Object();
  int contentType=IOUtil.readInt(oi);
  int version=VERSION_1;
switch (contentType) {
case IContent.CELL_CONTENT:
    CellContent cellContent=new CellContent(reportContent);
  cellContent.setVersion(VERSION_1);
cellContent.readContent(oi);
object=cellContent;
break;
case IContent.CONTAINER_CONTENT:
ContainerContent containerContent=new ContainerContent(reportContent);
containerContent.setVersion(version);
containerContent.readContent(oi);
object=containerContent;
break;
case IContent.DATA_CONTENT:
DataContent dataContent=new DataContent(reportContent);
dataContent.setVersion(version);
dataContent.readContent(oi);
object=dataContent;
break;
case IContent.FOREIGN_CONTENT:
ForeignContent foreignContent=new ForeignContent(reportContent);
foreignContent.setVersion(version);
foreignContent.readContent(oi);
object=foreignContent;
break;
case IContent.IMAGE_CONTENT:
ImageContent imageContent=new ImageContent(reportContent);
imageContent.setVersion(version);
imageContent.readContent(oi);
object=imageContent;
break;
case IContent.LABEL_CONTENT:
LabelContent labelContent=new LabelContent(reportContent);
labelContent.setVersion(version);
labelContent.readContent(oi);
object=labelContent;
break;
case IContent.PAGE_CONTENT:
PageContent pageContent=new PageContent(reportContent);
pageContent.setVersion(version);
pageContent.readContent(oi);
object=pageContent;
break;
case IContent.ROW_CONTENT:
RowContent rowContent=new RowContent(reportContent);
rowContent.setVersion(version);
rowContent.readContent(oi);
object=rowContent;
break;
case IContent.TABLE_BAND_CONTENT:
TableBandContent tableBandContent=new TableBandContent(reportContent);
tableBandContent.setVersion(version);
tableBandContent.readContent(oi);
object=tableBandContent;
break;
case IContent.TABLE_CONTENT:
TableContent tableContent=new TableContent(reportContent);
tableContent.setVersion(version);
tableContent.readContent(oi);
object=tableContent;
break;
case IContent.TEXT_CONTENT:
TextContent textContent=new TextContent(reportContent);
textContent.setVersion(version);
textContent.readContent(oi);
object=textContent;
break;
default :
throw new ClassNotFoundException(""String_Node_Str"" + contentType);
}
return object;
}","protected Object doRead(byte[] buffer) throws Exception {
  ByteArrayInputStream in=new ByteArrayInputStream(buffer);
  DataInputStream oi=new DataInputStream(in);
  Object object=new Object();
  int contentType=IOUtil.readInt(oi);
  int version=VERSION_1;
switch (contentType) {
case IContent.CELL_CONTENT:
    CellContent cellContent=(CellContent)reportContent.createCellContent();
  cellContent.setVersion(VERSION_1);
cellContent.readContent(oi);
object=cellContent;
break;
case IContent.CONTAINER_CONTENT:
ContainerContent containerContent=(ContainerContent)reportContent.createContainerContent();
containerContent.setVersion(version);
containerContent.readContent(oi);
object=containerContent;
break;
case IContent.DATA_CONTENT:
DataContent dataContent=(DataContent)reportContent.createDataContent();
dataContent.setVersion(version);
dataContent.readContent(oi);
object=dataContent;
break;
case IContent.FOREIGN_CONTENT:
ForeignContent foreignContent=foreignContent=(ForeignContent)reportContent.createForeignContent();
foreignContent.setVersion(version);
foreignContent.readContent(oi);
object=foreignContent;
break;
case IContent.IMAGE_CONTENT:
ImageContent imageContent=(ImageContent)reportContent.createImageContent();
imageContent.setVersion(version);
imageContent.readContent(oi);
object=imageContent;
break;
case IContent.LABEL_CONTENT:
LabelContent labelContent=(LabelContent)reportContent.createLabelContent();
labelContent.setVersion(version);
labelContent.readContent(oi);
object=labelContent;
break;
case IContent.PAGE_CONTENT:
PageContent pageContent=(PageContent)reportContent.createPageContent();
pageContent.setVersion(version);
pageContent.readContent(oi);
object=pageContent;
break;
case IContent.ROW_CONTENT:
RowContent rowContent=(RowContent)reportContent.createRowContent();
rowContent.setVersion(version);
rowContent.readContent(oi);
object=rowContent;
break;
case IContent.TABLE_BAND_CONTENT:
TableBandContent tableBandContent=(TableBandContent)reportContent.createTableBandContent();
tableBandContent.setVersion(version);
tableBandContent.readContent(oi);
object=tableBandContent;
break;
case IContent.TABLE_CONTENT:
TableContent tableContent=(TableContent)reportContent.createTableContent();
tableContent.setVersion(version);
tableContent.readContent(oi);
object=tableContent;
break;
case IContent.TEXT_CONTENT:
TextContent textContent=(TextContent)reportContent.createTextContent();
textContent.setVersion(version);
textContent.readContent(oi);
object=textContent;
break;
default :
throw new ClassNotFoundException(""String_Node_Str"" + contentType);
}
return object;
}",0.916633266533066
73920,"protected ContainerContent createContainerContent(){
  ContainerContent content=new ContainerContent(reportContent);
  content.setName(""String_Node_Str"");
  content.setHeight(new DimensionType(4,""String_Node_Str""));
  ActionContent hyperlink=new ActionContent();
  hyperlink.setHyperlink(""String_Node_Str"",""String_Node_Str"");
  Map attr=new HashMap();
  attr.put(""String_Node_Str"",""String_Node_Str"");
  hyperlink.setDrillThrough(""String_Node_Str"",true,""String_Node_Str"",attr,attr,""String_Node_Str"",""String_Node_Str"",null);
  content.setHyperlinkAction(hyperlink);
  return content;
}","protected ContainerContent createContainerContent(){
  ContainerContent content=(ContainerContent)reportContent.createContainerContent();
  content.setName(""String_Node_Str"");
  content.setHeight(new DimensionType(4,""String_Node_Str""));
  ActionContent hyperlink=new ActionContent();
  hyperlink.setHyperlink(""String_Node_Str"",""String_Node_Str"");
  Map attr=new HashMap();
  attr.put(""String_Node_Str"",""String_Node_Str"");
  hyperlink.setDrillThrough(""String_Node_Str"",true,""String_Node_Str"",attr,attr,""String_Node_Str"",""String_Node_Str"",null);
  content.setHyperlinkAction(hyperlink);
  return content;
}",0.9250210614995787
73921,"protected TextContent createTextContent(){
  TextContent content=new TextContent(reportContent);
  content.setName(""String_Node_Str"");
  content.setHeight(new DimensionType(10,""String_Node_Str""));
  ActionContent hyperlink=new ActionContent();
  hyperlink.setHyperlink(""String_Node_Str"",""String_Node_Str"");
  Map attr=new HashMap();
  attr.put(""String_Node_Str"",""String_Node_Str"");
  hyperlink.setDrillThrough(""String_Node_Str"",true,""String_Node_Str"",attr,attr,""String_Node_Str"",""String_Node_Str"",null);
  content.setHyperlinkAction(hyperlink);
  return content;
}","protected TextContent createTextContent(){
  TextContent content=(TextContent)reportContent.createTextContent();
  content.setName(""String_Node_Str"");
  content.setHeight(new DimensionType(10,""String_Node_Str""));
  ActionContent hyperlink=new ActionContent();
  hyperlink.setHyperlink(""String_Node_Str"",""String_Node_Str"");
  Map attr=new HashMap();
  attr.put(""String_Node_Str"",""String_Node_Str"");
  hyperlink.setDrillThrough(""String_Node_Str"",true,""String_Node_Str"",attr,attr,""String_Node_Str"",""String_Node_Str"",null);
  content.setHyperlinkAction(hyperlink);
  return content;
}",0.9545454545454546
73922,"protected void doSaveCoreStreams() throws Exception {
  RAOutputStream out=null;
  DataOutputStream coreStream=null;
  try {
    out=archive.createRandomAccessStream(CORE_STREAM);
    coreStream=new DataOutputStream(new BufferedOutputStream(out));
    IOUtil.writeString(coreStream,REPORT_DOCUMENT_TAG);
    IOUtil.writeString(coreStream,CORE_VERSION_1);
    IOUtil.writeString(coreStream,REPORT_DOCUMENT_VERSION);
    HashMap properties=new HashMap();
    properties.put(BIRT_ENGINE_VERSION_KEY,BIRT_ENGINE_VERSION);
    properties.put(BIRT_ENGINE_BUILD_NUMBER_KEY,getBuildNumber());
    IOUtil.writeMap(coreStream,properties);
    if (checkpoint != CHECKPOINT_END) {
      checkpoint++;
    }
    IOUtil.writeInt(coreStream,checkpoint);
    IOUtil.writeLong(coreStream,pageCount);
    IOUtil.writeString(coreStream,designName);
    IOUtil.writeMap(coreStream,paramters);
    IOUtil.writeMap(coreStream,globalVariables);
    if (checkpoint == CHECKPOINT_END) {
      writeMap(coreStream,bookmarks);
      TOCBuilder.write(tocTree,coreStream);
      writeMap(coreStream,idToOffset);
      writeMap(coreStream,bookmarkToOffset);
    }
    coreStream.flush();
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
        out=null;
      }
 catch (      Exception ex) {
      }
    }
  }
}","protected void doSaveCoreStreams() throws Exception {
  RAOutputStream out=null;
  DataOutputStream coreStream=null;
  try {
    out=archive.createRandomAccessStream(CORE_STREAM);
    coreStream=new DataOutputStream(new BufferedOutputStream(out));
    IOUtil.writeString(coreStream,REPORT_DOCUMENT_TAG);
    IOUtil.writeString(coreStream,CORE_VERSION_1);
    IOUtil.writeString(coreStream,REPORT_DOCUMENT_VERSION);
    HashMap properties=new HashMap();
    properties.put(PAGE_HINT_VERSION_KEY,PAGE_HINT_VERSION_3);
    properties.put(BIRT_ENGINE_VERSION_KEY,BIRT_ENGINE_VERSION);
    properties.put(BIRT_ENGINE_BUILD_NUMBER_KEY,getBuildNumber());
    IOUtil.writeMap(coreStream,properties);
    if (checkpoint != CHECKPOINT_END) {
      checkpoint++;
    }
    IOUtil.writeInt(coreStream,checkpoint);
    IOUtil.writeLong(coreStream,pageCount);
    IOUtil.writeString(coreStream,designName);
    IOUtil.writeMap(coreStream,paramters);
    IOUtil.writeMap(coreStream,globalVariables);
    if (checkpoint == CHECKPOINT_END) {
      writeMap(coreStream,bookmarks);
      TOCBuilder.write(tocTree,coreStream);
      writeMap(coreStream,idToOffset);
      writeMap(coreStream,bookmarkToOffset);
    }
    coreStream.flush();
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
        out=null;
      }
 catch (      Exception ex) {
      }
    }
  }
}",0.9777934437786394
73923,"public AbstractBandContent(IReportContent report){
  super(report);
}","AbstractBandContent(IReportContent report){
  super(report);
}",0.9465648854961832
73924,"/** 
 * Constructor of the AbstractContent
 * @param content content can't be null
 */
public AbstractContent(IContent content){
  this.report=content.getReportContent();
  this.parent=content.getReportContent().getRoot();
  this.cssEngine=((ReportContent)content.getReportContent()).getCSSEngine();
  this.name=content.getName();
  this.x=content.getX();
  this.y=content.getY();
  this.width=content.getWidth();
  this.height=content.getHeight();
  this.hyperlink=content.getHyperlinkAction();
  this.bookmark=content.getBookmark();
  this.helpText=content.getHelpText();
  this.inlineStyle=content.getInlineStyle();
  this.generateBy=content.getGenerateBy();
  this.styleClass=content.getStyleClass();
  this.instanceId=content.getInstanceID();
  this.toc=content.getTOC();
  Object ext=content.getExtension(IContent.DOCUMENT_EXTENSION);
  if (ext != null) {
    setExtension(IContent.DOCUMENT_EXTENSION,ext);
  }
}","/** 
 * Constructor of the AbstractContent
 * @param content content can't be null
 */
AbstractContent(IContent content){
  this.report=content.getReportContent();
  this.parent=content.getReportContent().getRoot();
  this.cssEngine=((ReportContent)content.getReportContent()).getCSSEngine();
  this.name=content.getName();
  this.x=content.getX();
  this.y=content.getY();
  this.width=content.getWidth();
  this.height=content.getHeight();
  this.hyperlink=content.getHyperlinkAction();
  this.bookmark=content.getBookmark();
  this.helpText=content.getHelpText();
  this.inlineStyle=copyInlineStyle(content);
  this.generateBy=content.getGenerateBy();
  this.styleClass=content.getStyleClass();
  this.instanceId=content.getInstanceID();
  this.toc=content.getTOC();
  Object ext=content.getExtension(IContent.DOCUMENT_EXTENSION);
  if (ext != null) {
    setExtension(IContent.DOCUMENT_EXTENSION,ext);
  }
  ext=content.getExtension(IContent.LAYOUT_EXTENSION);
  if (ext != null) {
    setExtension(IContent.LAYOUT_EXTENSION,ext);
  }
}",0.9213483146067416
73925,"public Object execute(ExecutionEvent event) throws ExecutionException {
  SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
  ExtendedItemHandle handle=null;
  try {
    handle=CrosstabExtendedItemFactory.createCrosstabReportItem(SessionHandleAdapter.getInstance().getReportDesignHandle(),null);
  }
 catch (  Exception e) {
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
    throw new ExecutionException(e.getLocalizedMessage(),e);
  }
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  EditPart targetEditPart=(EditPart)context.getVariable(""String_Node_Str"");
  if (targetEditPart == null) {
    targetEditPart=UIUtil.getCurrentEditPart();
  }
  Object parentModel=DNDUtil.unwrapToModel(targetEditPart.getModel());
  CreateRequest request=(CreateRequest)context.getVariable(""String_Node_Str"");
  if (request != null) {
    request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,handle);
    try {
      targetEditPart.getCommand(request).execute();
      SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().commit();
    }
 catch (    Exception e) {
      SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
    }
  }
 else {
    Map map=new HashMap();
    map.put(DesignerConstants.KEY_NEWOBJECT,handle);
    CreateCommand command=new CreateCommand(map);
    try {
      if (parentModel instanceof DesignElementHandle) {
        DesignElementHandle parentHandle=(DesignElementHandle)parentModel;
        if (parentHandle.getDefn().isContainer() && (parentHandle.canContain(DEUtil.getDefaultSlotID(parentHandle),handle) || parentHandle.canContain(DEUtil.getDefaultContentName(parentHandle),handle))) {
          command.setParent(parentHandle);
        }
 else {
          if (parentHandle.getContainerSlotHandle() != null) {
            command.setAfter(parentHandle.getContainerSlotHandle().get(parentHandle.getIndex() + 1));
          }
 else           if (parentHandle.getContainerPropertyHandle() != null) {
            command.setAfter(parentHandle.getContainerPropertyHandle().get(parentHandle.getIndex() + 1));
          }
          command.setParent(parentHandle.getContainer());
        }
      }
 else {
        command.setParent(SessionHandleAdapter.getInstance().getReportDesignHandle());
      }
      command.execute();
      SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().commit();
    }
 catch (    Exception e) {
      SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
    }
  }
  if (parentModel instanceof LibraryHandle) {
    try {
      HandleAdapterFactory.getInstance().getLibraryHandleAdapter().setCurrentEditorModel(handle,LibraryHandleAdapter.CREATE_ELEMENT);
    }
 catch (    Exception e) {
    }
  }
  return handle;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
  ExtendedItemHandle handle=null;
  try {
    handle=CrosstabExtendedItemFactory.createCrosstabReportItem(SessionHandleAdapter.getInstance().getReportDesignHandle(),null);
  }
 catch (  Exception e) {
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
    throw new ExecutionException(e.getLocalizedMessage(),e);
  }
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  EditPart targetEditPart=(EditPart)context.getVariable(""String_Node_Str"");
  if (targetEditPart == null) {
    targetEditPart=UIUtil.getCurrentEditPart();
  }
  Object parentModel=DNDUtil.unwrapToModel(targetEditPart.getModel());
  CreateRequest request=(CreateRequest)context.getVariable(""String_Node_Str"");
  if (request != null) {
    request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,handle);
    try {
      targetEditPart.getCommand(request).execute();
      SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().commit();
    }
 catch (    Exception e) {
      SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
    }
  }
 else {
    Map map=new HashMap();
    map.put(DesignerConstants.KEY_NEWOBJECT,handle);
    CreateCommand command=new CreateCommand(map);
    try {
      if (parentModel instanceof DesignElementHandle) {
        DesignElementHandle parentHandle=(DesignElementHandle)parentModel;
        if (parentHandle.getDefn().isContainer() && (parentHandle.canContain(DEUtil.getDefaultSlotID(parentHandle),handle) || parentHandle.canContain(DEUtil.getDefaultContentName(parentHandle),handle))) {
          command.setParent(parentHandle);
        }
 else {
          if (parentHandle.getContainerSlotHandle() != null) {
            command.setAfter(parentHandle.getContainerSlotHandle().get(parentHandle.getIndex() + 1));
          }
 else           if (parentHandle.getContainerPropertyHandle() != null) {
            command.setAfter(parentHandle.getContainerPropertyHandle().get(parentHandle.getIndex() + 1));
          }
          DesignElementHandle container=parentHandle.getContainer();
          if (container instanceof ListHandle) {
            command.setParent(parentHandle.getContainerSlotHandle());
          }
 else {
            command.setParent(container);
          }
        }
      }
 else       if (parentModel instanceof SlotHandle) {
        command.setParent(parentModel);
      }
 else {
        command.setParent(SessionHandleAdapter.getInstance().getReportDesignHandle());
      }
      command.execute();
      SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().commit();
    }
 catch (    Exception e) {
      SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
    }
  }
  if (parentModel instanceof LibraryHandle) {
    try {
      HandleAdapterFactory.getInstance().getLibraryHandleAdapter().setCurrentEditorModel(handle,LibraryHandleAdapter.CREATE_ELEMENT);
    }
 catch (    Exception e) {
    }
  }
  return handle;
}",0.9507349378129544
73926,"public boolean endLine(){
  if (root != null && root.getChildrenCount() > 0) {
    closeLayout();
    parent.submit(root);
  }
  if (parent instanceof ILineStackingLayoutManager) {
    boolean ret=((ILineStackingLayoutManager)parent).endLine();
    if (ret) {
      initialize();
      return true;
    }
  }
  assert(false);
  return true;
}","public boolean endLine(){
  if (root != null && root.getChildrenCount() > 0) {
    closeLayout();
    parent.submit(root);
  }
  if (parent instanceof ILineStackingLayoutManager) {
    boolean ret=((ILineStackingLayoutManager)parent).endLine();
    if (ret) {
      initialize();
      return true;
    }
    return false;
  }
  assert(false);
  return true;
}",0.9743589743589745
73927,"private boolean layoutChildNode(IReportItemExecutor childExecutor){
  boolean hasNextPage=false;
  IContent childContent=childExecutor.execute();
  PDFAbstractLM childLM=getFactory().createLayoutManager(this,childContent,childExecutor);
  hasNextPage=childLM.layout();
  if (hasNextPage && !childLM.isFinished()) {
    currentChild=childLM;
  }
 else {
    child=null;
  }
  return hasNextPage;
}","private boolean layoutChildNode(IReportItemExecutor childExecutor){
  boolean hasNextPage=false;
  IContent childContent=childExecutor.execute();
  PDFAbstractLM childLM=getFactory().createLayoutManager(this,childContent,childExecutor);
  hasNextPage=childLM.layout();
  if (hasNextPage && !childLM.isFinished()) {
    child=childLM;
  }
 else {
    child=null;
  }
  return hasNextPage;
}",0.9910828025477708
73928,"protected boolean traverseChildren(){
  boolean hasNextPage=false;
  if (currentChild != null) {
    hasNextPage=child.layout();
    if (hasNextPage) {
      if (currentChild.isFinished()) {
        currentChild=null;
      }
      return true;
    }
  }
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=executor.getNextChild();
    if (childExecutor != null) {
      if (layoutChildNode(childExecutor)) {
        return true;
      }
    }
  }
  return false;
}","protected boolean traverseChildren(){
  boolean hasNextPage=false;
  if (child != null) {
    hasNextPage=child.layout();
    if (hasNextPage) {
      if (child.isFinished()) {
        child=null;
      }
      return true;
    }
  }
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=executor.getNextChild();
    if (childExecutor != null) {
      if (layoutChildNode(childExecutor)) {
        return true;
      }
    }
  }
  return false;
}",0.9779643231899264
73929,"protected void updateLine(){
  if (root == null) {
    return;
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
  if (lineHeight > maxAvaHeight) {
    lineHeight=0;
  }
  if (parent.isPageEmpty()) {
    height=Math.min(maxAvaHeight,Math.max(height,lineHeight));
  }
 else {
    height=Math.max(height,lineHeight);
  }
  root.setContentHeight(height);
}","protected void updateLine(){
  if (root == null) {
    return;
  }
  int height=root.getHeight();
  int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
  if (parent.isPageEmpty()) {
    height=Math.min(maxAvaHeight,Math.max(height,lineHeight));
  }
 else {
    height=Math.max(height,lineHeight);
  }
  root.setContentHeight(height);
}",0.7682458386683739
73930,"private void handleNext(){
  int freeSpace=PDFTextLM.this.getFreeSpace();
  if (isNew || currentPos == chunk.getText().length()) {
    if (cg.hasMore()) {
      chunk=cg.getNext();
      if (chunk == Chunk.HARD_LINE_BREAK) {
        FontHandler handler=new FontHandler(content,false,context.getFormat());
        Dimension d=new Dimension(0,(int)(handler.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
        IArea con=buildArea(""String_Node_Str"",content,handler.getFontInfo(),d);
        PDFTextLM.this.addSpaceHolder(con);
        PDFTextLM.this.newLine();
        currentPos=chunk.getText().length();
        vestigeIndex=-1;
        return;
      }
      if (!pdfTextWrapping) {
        String originalText=chunk.getText();
        int areaWidth=(int)(chunk.getFontInfo().getWordWidth(originalText) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * originalText.length();
        Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
        IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
        PDFTextLM.this.addTextLine(builtArea);
        PDFTextLM.this.newLine();
        currentPos=chunk.getText().length();
        vestigeIndex=-1;
        return;
      }
      currentPos=0;
      vestigeIndex=-1;
      vestigeLength=0;
      wr=new ICUWordRecognizer(chunk.getText(),context.getLocale());
    }
 else {
      return;
    }
  }
  if (isNew) {
    isNew=false;
    if (isInline) {
      AbstractArea con=(AbstractArea)AreaFactory.createInlineContainer(content,true,false);
      con.setWidth(leftBorder + leftPadding);
      con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
      PDFTextLM.this.addSpaceHolder(con);
      leftSpaceHolder=leftMargin + leftBorder + leftPadding;
      freeSpace-=leftSpaceHolder;
    }
  }
  String str=null;
  Word currentWord=null;
  if (-1 == vestigeIndex) {
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      return;
    }
    str=currentWord.getValue();
    areaStartPos=chunk.getOffset() + currentWord.getStart();
  }
 else {
    str=chunk.getText().substring(vestigeIndex,vestigeIndex + vestigeLength);
    areaStartPos=chunk.getOffset() + vestigeIndex;
  }
  int prevAreaWidth=0;
  int areaWidth=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
  if (isInline) {
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  if (maxLineSpace < chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO + letterSpacing * str.length() + wordSpacing) {
    if (0 == str.length()) {
      vestigeIndex=-1;
      vestigeLength=0;
      return;
    }
    Dimension d=new Dimension((int)(chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=str;
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    currentPos+=str.length();
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
  while (freeSpace >= areaWidth) {
    currentPos+=str.length();
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      str=null;
      break;
    }
    str=currentWord.getValue();
    prevAreaWidth=areaWidth;
    areaWidth+=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  int length=chunk.getText().length();
  if (currentPos == length) {
    Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),chunk.getText().length());
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
 else {
    Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    vestigeIndex=(null == currentWord) ? -1 : currentWord.getStart();
    vestigeLength=(null == currentWord) ? 0 : currentWord.getLength();
    return;
  }
}","private void handleNext(){
  int freeSpace=PDFTextLM.this.getFreeSpace();
  if (isNew || currentPos == chunk.getText().length()) {
    if (cg.hasMore()) {
      chunk=cg.getNext();
      if (chunk == Chunk.HARD_LINE_BREAK) {
        FontHandler handler=new FontHandler(content,false,context.getFormat());
        Dimension d=new Dimension(0,(int)(handler.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
        IArea con=buildArea(""String_Node_Str"",content,handler.getFontInfo(),d);
        PDFTextLM.this.addSpaceHolder(con);
        PDFTextLM.this.newLine();
        currentPos=chunk.getText().length();
        vestigeIndex=-1;
        return;
      }
      if (!pdfTextWrapping) {
        String originalText=chunk.getText();
        int areaWidth=(int)(chunk.getFontInfo().getWordWidth(originalText) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * originalText.length();
        Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
        IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
        PDFTextLM.this.addTextLine(builtArea);
        PDFTextLM.this.newLine();
        currentPos=chunk.getText().length();
        vestigeIndex=-1;
        return;
      }
      currentPos=0;
      vestigeIndex=-1;
      vestigeLength=0;
      wr=new ICUWordRecognizer(chunk.getText(),context.getLocale());
    }
 else {
      return;
    }
  }
  if (isNew) {
    isNew=false;
    if (isInline) {
      AbstractArea con=(AbstractArea)AreaFactory.createInlineContainer(content,true,false);
      con.setWidth(leftBorder + leftPadding);
      con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
      PDFTextLM.this.addSpaceHolder(con);
      leftSpaceHolder=leftMargin + leftBorder + leftPadding;
      freeSpace-=leftSpaceHolder;
    }
  }
  String str=null;
  Word currentWord=null;
  if (-1 == vestigeIndex) {
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      return;
    }
    str=currentWord.getValue();
    areaStartPos=chunk.getOffset() + currentWord.getStart();
  }
 else {
    str=chunk.getText().substring(vestigeIndex,vestigeIndex + vestigeLength);
    areaStartPos=chunk.getOffset() + vestigeIndex;
  }
  int prevAreaWidth=0;
  int areaWidth=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
  if (isInline) {
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  if (maxLineSpace < chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO + letterSpacing * str.length() + wordSpacing) {
    if (0 == str.length()) {
      vestigeIndex=-1;
      vestigeLength=0;
      return;
    }
    Dimension d=new Dimension((int)(chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=str;
    if (maxLineSpace != freeSpace) {
      PDFTextLM.this.newLine();
    }
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    currentPos+=str.length();
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
  while (freeSpace >= areaWidth) {
    currentPos+=str.length();
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      str=null;
      break;
    }
    str=currentWord.getValue();
    prevAreaWidth=areaWidth;
    areaWidth+=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  int length=chunk.getText().length();
  if (currentPos == length) {
    Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),chunk.getText().length());
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
 else {
    Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    if (null == currentWord) {
      if (originalText.length() == 0)       return;
      vestigeIndex=-1;
      vestigeLength=0;
    }
 else {
      vestigeIndex=currentWord.getStart();
      vestigeLength=currentWord.getLength();
    }
    return;
  }
}",0.9713796710088428
73931,"protected void calculateSpecifiedHeight(){
  if (content != null) {
    int calHeight=getDimensionValue(content.getHeight());
    if (calHeight > 0 && calHeight < context.getMaxHeight()) {
      this.specifiedHeight=calHeight;
    }
  }
}","protected void calculateSpecifiedHeight(){
  if (content != null) {
    int calHeight=getDimensionValue(content.getHeight());
    if (calHeight > 0) {
      this.specifiedHeight=Math.min(calHeight,context.getMaxHeight());
    }
  }
}",0.8110403397027601
73932,"protected void updatePageDimension(float scale){
  page.setHeight((int)(page.getHeight() / scale));
  page.setWidth((int)(page.getWidth() / scale));
  ContainerArea pageRoot=(ContainerArea)page.getRoot();
  pageRoot.setPosition((int)(pageRoot.getX() / scale),(int)(pageRoot.getY() / scale));
  pageRoot.setHeight((int)(pageRoot.getHeight() / scale));
  pageRoot.setWidth((int)(pageRoot.getWidth() / scale));
}","protected void updatePageDimension(float scale){
  page.setHeight((int)(pageContentHeight / scale));
  page.setWidth((int)(pageContentWidth / scale));
  ContainerArea pageRoot=(ContainerArea)page.getRoot();
  pageRoot.setPosition((int)(rootLeft / scale),(int)(rootTop / scale));
  pageRoot.setHeight((int)(rootHeight / scale));
  pageRoot.setWidth((int)(rootWidth / scale));
}",0.8738853503184714
73933,"protected void createRoot(){
  root=new PageArea(pageContent);
  page=(PageArea)root;
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
    page.setExtendToMultiplePages(true);
  }
  int pageWidth=getDimensionValue(pageContent.getPageWidth());
  int pageHeight=getDimensionValue(pageContent.getPageHeight());
  if (pageWidth <= 0) {
    pageWidth=DEFAULT_PAGE_WIDTH;
  }
  if (pageHeight <= 0) {
    pageHeight=DEFAULT_PAGE_HEIGHT;
  }
  page.setWidth(pageWidth);
  page.setHeight(pageHeight);
  ContainerArea pageRoot=new LogicContainerArea(report);
  if (overFlowType == IPDFRenderOption.CLIP_CONTENT) {
    pageRoot.setNeedClip(true);
  }
 else {
    pageRoot.setNeedClip(false);
  }
  int rootLeft=getDimensionValue(pageContent.getMarginLeft(),pageWidth);
  int rootTop=getDimensionValue(pageContent.getMarginTop(),pageWidth);
  rootLeft=Math.max(0,rootLeft);
  rootLeft=Math.min(pageWidth,rootLeft);
  rootTop=Math.max(0,rootTop);
  rootTop=Math.min(pageHeight,rootTop);
  pageRoot.setPosition(rootLeft,rootTop);
  int rootRight=getDimensionValue(pageContent.getMarginRight(),pageWidth);
  int rootBottom=getDimensionValue(pageContent.getMarginBottom(),pageWidth);
  rootRight=Math.max(0,rootRight);
  rootBottom=Math.max(0,rootBottom);
  if (rootLeft + rootRight > pageWidth) {
    rootRight=0;
  }
  if (rootTop + rootBottom > pageHeight) {
    rootBottom=0;
  }
  pageRoot.setWidth(pageWidth - rootLeft - rootRight);
  pageRoot.setHeight(pageHeight - rootTop - rootBottom);
  page.setRoot(pageRoot);
  int headerHeight=getDimensionValue(pageContent.getHeaderHeight(),pageRoot.getHeight());
  int headerWidth=pageRoot.getWidth();
  headerHeight=Math.max(0,headerHeight);
  headerHeight=Math.min(pageRoot.getHeight(),headerHeight);
  ContainerArea header=new LogicContainerArea(report);
  header.setHeight(headerHeight);
  header.setWidth(headerWidth);
  header.setPosition(0,0);
  pageRoot.addChild(header);
  page.setHeader(header);
  int footerHeight=getDimensionValue(pageContent.getFooterHeight(),pageRoot.getHeight());
  int footerWidth=pageRoot.getWidth();
  footerHeight=Math.max(0,footerHeight);
  footerHeight=Math.min(pageRoot.getHeight() - headerHeight,footerHeight);
  ContainerArea footer=new LogicContainerArea(report);
  footer.setHeight(footerHeight);
  footer.setWidth(footerWidth);
  footer.setPosition(0,pageRoot.getHeight() - footerHeight);
  pageRoot.addChild(footer);
  page.setFooter(footer);
  ContainerArea body=new LogicContainerArea(report);
  int bodyLeft=getDimensionValue(pageContent.getLeftWidth(),pageRoot.getWidth());
  bodyLeft=Math.max(0,bodyLeft);
  bodyLeft=Math.min(pageRoot.getWidth(),bodyLeft);
  body.setPosition(bodyLeft,headerHeight);
  int bodyRight=getDimensionValue(pageContent.getRightWidth(),pageRoot.getWidth());
  bodyRight=Math.max(0,bodyRight);
  bodyRight=Math.min(pageRoot.getWidth() - bodyLeft,bodyRight);
  body.setWidth(pageRoot.getWidth() - bodyLeft - bodyRight);
  body.setHeight(pageRoot.getHeight() - headerHeight - footerHeight);
  page.setBody(body);
  pageRoot.addChild(body);
}","protected void createRoot(){
  root=new PageArea(pageContent);
  page=(PageArea)root;
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
    page.setExtendToMultiplePages(true);
  }
  pageContentWidth=getDimensionValue(pageContent.getPageWidth());
  pageContentHeight=getDimensionValue(pageContent.getPageHeight());
  if (pageContentWidth <= 0) {
    pageContentWidth=DEFAULT_PAGE_WIDTH;
  }
  if (pageContentHeight <= 0) {
    pageContentHeight=DEFAULT_PAGE_HEIGHT;
  }
  page.setWidth(pageContentWidth);
  page.setHeight(pageContentHeight);
  ContainerArea pageRoot=new LogicContainerArea(report);
  if (overFlowType == IPDFRenderOption.CLIP_CONTENT) {
    pageRoot.setNeedClip(true);
  }
 else {
    pageRoot.setNeedClip(false);
  }
  rootLeft=getDimensionValue(pageContent.getMarginLeft(),pageContentWidth);
  rootTop=getDimensionValue(pageContent.getMarginTop(),pageContentWidth);
  rootLeft=Math.max(0,rootLeft);
  rootLeft=Math.min(pageContentWidth,rootLeft);
  rootTop=Math.max(0,rootTop);
  rootTop=Math.min(pageContentHeight,rootTop);
  pageRoot.setPosition(rootLeft,rootTop);
  int rootRight=getDimensionValue(pageContent.getMarginRight(),pageContentWidth);
  int rootBottom=getDimensionValue(pageContent.getMarginBottom(),pageContentWidth);
  rootRight=Math.max(0,rootRight);
  rootBottom=Math.max(0,rootBottom);
  if (rootLeft + rootRight > pageContentWidth) {
    rootRight=0;
  }
  if (rootTop + rootBottom > pageContentHeight) {
    rootBottom=0;
  }
  rootWidth=pageContentWidth - rootLeft - rootRight;
  rootHeight=pageContentHeight - rootTop - rootBottom;
  pageRoot.setWidth(rootWidth);
  pageRoot.setHeight(rootHeight);
  page.setRoot(pageRoot);
  int headerHeight=getDimensionValue(pageContent.getHeaderHeight(),pageRoot.getHeight());
  int headerWidth=pageRoot.getWidth();
  headerHeight=Math.max(0,headerHeight);
  headerHeight=Math.min(pageRoot.getHeight(),headerHeight);
  ContainerArea header=new LogicContainerArea(report);
  header.setHeight(headerHeight);
  header.setWidth(headerWidth);
  header.setPosition(0,0);
  pageRoot.addChild(header);
  page.setHeader(header);
  int footerHeight=getDimensionValue(pageContent.getFooterHeight(),pageRoot.getHeight());
  int footerWidth=pageRoot.getWidth();
  footerHeight=Math.max(0,footerHeight);
  footerHeight=Math.min(pageRoot.getHeight() - headerHeight,footerHeight);
  ContainerArea footer=new LogicContainerArea(report);
  footer.setHeight(footerHeight);
  footer.setWidth(footerWidth);
  footer.setPosition(0,pageRoot.getHeight() - footerHeight);
  pageRoot.addChild(footer);
  page.setFooter(footer);
  ContainerArea body=new LogicContainerArea(report);
  int bodyLeft=getDimensionValue(pageContent.getLeftWidth(),pageRoot.getWidth());
  bodyLeft=Math.max(0,bodyLeft);
  bodyLeft=Math.min(pageRoot.getWidth(),bodyLeft);
  body.setPosition(bodyLeft,headerHeight);
  int bodyRight=getDimensionValue(pageContent.getRightWidth(),pageRoot.getWidth());
  bodyRight=Math.max(0,bodyRight);
  bodyRight=Math.min(pageRoot.getWidth() - bodyLeft,bodyRight);
  body.setWidth(pageRoot.getWidth() - bodyLeft - bodyRight);
  body.setHeight(pageRoot.getHeight() - headerHeight - footerHeight);
  page.setBody(body);
  pageRoot.addChild(body);
}",0.9539329363835788
73934,"protected boolean layoutChildren(){
  initialize();
  boolean hasNextPage=false;
  hasNextPage=traverseChildren();
  if (!hasNextPage) {
    isLast=true;
    clearCache();
  }
 else   if (!context.isAutoPageBreak()) {
    clearCache();
  }
  if (!isRootEmpty() && !(context.isAutoPageBreak() && hasNextPage)) {
    closeLayout();
    hasNextPage=!submitRoot() || hasNextPage;
  }
  return hasNextPage;
}","protected boolean layoutChildren(){
  initialize();
  boolean hasNextPage=false;
  hasNextPage=traverseChildren();
  if (!hasNextPage) {
    isLast=true;
    clearCache();
  }
 else   if (!context.isAutoPageBreak()) {
    clearCache();
  }
  if (!isRootEmpty()) {
    closeLayout();
    hasNextPage=!submitRoot() || hasNextPage;
  }
  return hasNextPage;
}",0.938076416337286
73935,"public long getPageOffset(String masterPage) throws IOException {
  Object value=pages.get(masterPage);
  if (value != null && value instanceof Long) {
    return ((Long)value).longValue();
  }
 else {
    RAInputStream indexStream=null;
    try {
      indexStream=reader.getStream(ReportDocumentConstants.PAGE_INDEX_STREAM);
      DataInputStream input=new DataInputStream(indexStream);
      while (true) {
        String masterPageName=IOUtil.readString(input);
        long pageOffset=IOUtil.readLong(input);
        pages.put(masterPageName,pageOffset);
      }
    }
 catch (    EOFException eef) {
    }
catch (    IOException ex) {
      throw ex;
    }
 finally {
      if (indexStream != null) {
        try {
          indexStream.close();
        }
 catch (        IOException e) {
        }
        indexStream=null;
      }
    }
    value=pages.get(masterPage);
    if (value != null && value instanceof Long) {
      return ((Long)value).longValue();
    }
  }
  return -1;
}","public long getPageOffset(String masterPage) throws IOException {
  Object value=pages.get(masterPage);
  if (value != null && value instanceof Long) {
    return ((Long)value).longValue();
  }
 else {
    RAInputStream indexStream=null;
    try {
      indexStream=reader.getStream(ReportDocumentConstants.PAGE_INDEX_STREAM);
      DataInputStream input=new DataInputStream(indexStream);
      while (true) {
        String masterPageName=IOUtil.readString(input);
        long pageOffset=IOUtil.readLong(input);
        pages.put(masterPageName,new Long(pageOffset));
      }
    }
 catch (    EOFException eef) {
    }
catch (    IOException ex) {
      throw ex;
    }
 finally {
      if (indexStream != null) {
        try {
          indexStream.close();
        }
 catch (        IOException e) {
        }
        indexStream=null;
      }
    }
    value=pages.get(masterPage);
    if (value != null && value instanceof Long) {
      return ((Long)value).longValue();
    }
  }
  return -1;
}",0.9949849548645938
73936,"private void groupOnRowKeyCount(double intervalRange) throws Exception, IOException {
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.NO_INTERVAL);
  groupDefn[0].setIntervalRange(intervalRange);
  String[] bindingNameRow=new String[3];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[3];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition qd=this.createQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  String outputStr=getOutputStrForGroupTest(30,qd,groupDefn.length,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
}","/** 
 * Currently, don't support multiple GroupOnRowKeyCount
 * @throws Exception
 */
private void groupOnRowKeyCount(double intervalRange) throws Exception, IOException {
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.NO_INTERVAL);
  groupDefn[0].setIntervalRange(intervalRange);
  String[] bindingNameRow=new String[3];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[3];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition qd=this.createQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  String outputStr=getOutputStrForGroupTest(30,qd,groupDefn.length,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
}",0.9685442574981712
73937,"public List checkCompatibility(){
  List errorList=new ArrayList(1);
  if (!CROSSTAB_CURRENT_VERSION.equals(handle.getExtensionVersion())) {
    try {
      handle.setExtensionVersion(CROSSTAB_CURRENT_VERSION);
    }
 catch (    SemanticException e) {
      errorList.add(e);
    }
  }
  if (getHeader() == null) {
    PropertyHandle headerHandle=handle.getPropertyHandle(HEADER_PROP);
    if (headerHandle != null) {
      try {
        headerHandle.setValue(CrosstabExtendedItemFactory.createCrosstabCell(getModuleHandle()));
      }
 catch (      SemanticException e) {
        errorList.add(e);
      }
    }
  }
  return errorList.size() == 0 ? Collections.EMPTY_LIST : errorList;
}","public List checkCompatibility(){
  List errorList=new ArrayList(1);
  if (checkVersion(handle.getExtensionVersion()) < 0) {
    try {
      handle.setExtensionVersion(CROSSTAB_CURRENT_VERSION);
    }
 catch (    SemanticException e) {
      errorList.add(e);
    }
    if (getHeader() == null) {
      PropertyHandle headerHandle=handle.getPropertyHandle(HEADER_PROP);
      if (headerHandle != null) {
        try {
          headerHandle.setValue(CrosstabExtendedItemFactory.createCrosstabCell(getModuleHandle()));
        }
 catch (        SemanticException e) {
          errorList.add(e);
        }
      }
    }
  }
  return errorList.size() == 0 ? Collections.EMPTY_LIST : errorList;
}",0.7275362318840579
73938,"public List checkCompatibility(){
  ExtendedItemHandle exhandle=(ExtendedItemHandle)getModelHandle();
  Map illegalContents=exhandle.getIllegalContents();
  if (illegalContents.containsKey(IMeasureViewConstants.DETAIL_PROP)) {
    List detailInfoList=(List)illegalContents.get(IMeasureViewConstants.DETAIL_PROP);
    if (detailInfoList.size() > 0) {
      IllegalContentInfo detailInfo=(IllegalContentInfo)detailInfoList.get(0);
      ExtendedItemHandle oldDetail=(ExtendedItemHandle)detailInfo.getContent();
      if (oldDetail != null) {
        try {
          ExtendedItemHandle newDetail=CrosstabExtendedItemFactory.createAggregationCell(getModuleHandle());
          handle.getPropertyHandle(DETAIL_PROP).setValue(newDetail);
          List contents=oldDetail.getContents(ICrosstabCellConstants.CONTENT_PROP);
          for (int i=0; i < contents.size(); i++) {
            ((DesignElementHandle)contents.get(i)).moveTo(newDetail,IAggregationCellConstants.CONTENT_PROP);
          }
        }
 catch (        SemanticException e) {
          List errorList=new ArrayList(1);
          errorList.add(e);
          return errorList;
        }
      }
    }
  }
  return Collections.EMPTY_LIST;
}","public List checkCompatibility(){
{
    ExtendedItemHandle exhandle=(ExtendedItemHandle)getModelHandle();
    Map illegalContents=exhandle.getIllegalContents();
    if (illegalContents.containsKey(IMeasureViewConstants.DETAIL_PROP)) {
      List detailInfoList=(List)illegalContents.get(IMeasureViewConstants.DETAIL_PROP);
      if (detailInfoList.size() > 0) {
        IllegalContentInfo detailInfo=(IllegalContentInfo)detailInfoList.get(0);
        ExtendedItemHandle oldDetail=(ExtendedItemHandle)detailInfo.getContent();
        if (oldDetail != null) {
          try {
            ExtendedItemHandle newDetail=CrosstabExtendedItemFactory.createAggregationCell(getModuleHandle());
            handle.getPropertyHandle(DETAIL_PROP).setValue(newDetail);
            List contents=oldDetail.getContents(ICrosstabCellConstants.CONTENT_PROP);
            for (int i=0; i < contents.size(); i++) {
              ((DesignElementHandle)contents.get(i)).moveTo(newDetail,IAggregationCellConstants.CONTENT_PROP);
            }
          }
 catch (          SemanticException e) {
            List errorList=new ArrayList(1);
            errorList.add(e);
            return errorList;
          }
        }
      }
    }
  }
  return Collections.EMPTY_LIST;
}",0.963295269168026
73939,"public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  if (instance != null) {
    getSite().getWorkbenchWindow().getPartService().removePartListener(instance);
    instance.dispose();
  }
  if (input instanceof IFileEditorInput || input instanceof IURIEditorInput) {
    instance=new IDEMultiPageReportEditor();
    instance.addPropertyListener(this);
  }
 else {
    instance=new MultiPageReportEditor();
    instance.addPropertyListener(this);
  }
  instance.init(site,input);
  instance.addPropertyListener(this);
  getSite().getWorkbenchWindow().getPartService().addPartListener(this);
}","public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  cachedSite=site;
  if (instance != null) {
    getSite().getWorkbenchWindow().getPartService().removePartListener(instance);
    instance.dispose();
  }
  if (input instanceof IFileEditorInput || input instanceof IURIEditorInput) {
    instance=new IDEMultiPageReportEditor();
  }
 else {
    instance=new MultiPageReportEditor();
  }
  instance.addPropertyListener(this);
  instance.init(site,input);
  getSite().getWorkbenchWindow().getPartService().addPartListener(this);
}",0.8210347752332485
73940,"public IEditorSite getEditorSite(){
  return instance.getEditorSite();
}","public IEditorSite getEditorSite(){
  if (instance != null) {
    return instance.getEditorSite();
  }
  return cachedSite;
}",0.7309644670050761
73941,"public IWorkbenchPartSite getSite(){
  return instance.getSite();
}","public IWorkbenchPartSite getSite(){
  if (instance != null) {
    return instance.getSite();
  }
  return cachedSite;
}",0.7165775401069518
73942,"public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  if (content != null && visible) {
    ContentEmitterUtil.endContent(pageContent,emitter);
  }
}","public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  if (content != null && visible) {
    ContentEmitterUtil.endContent(content,emitter);
  }
}",0.9846938775510204
73943,"/** 
 * @throws Exception
 */
public void testWrongExtensionID() throws Exception {
  openDesign(""String_Node_Str"");
  save();
  assertTrue(compareFile(""String_Node_Str""));
}","/** 
 * If the extension id is invalid, related properties should be parsed and the file can be opened.
 * @throws Exception
 */
public void testWrongExtensionID() throws Exception {
  openDesign(""String_Node_Str"");
  save();
  OdaDataSetHandle setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  assertNull(setHandle.getProperty(""String_Node_Str""));
  assertEquals(""String_Node_Str"",setHandle.getStringProperty(""String_Node_Str""));
  assertTrue(compareFile(""String_Node_Str""));
}",0.5140324963072378
73944,"/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByNumberRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByPositionRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByStringRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}","/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DteLevelDataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByNumberRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByPositionRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByStringRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}",0.9942887152891748
73945,"/** 
 * construction
 */
CacheMapManager(String tempDir){
  this.tempDir=tempDir;
}","/** 
 * construction
 */
CacheMapManager(String tempDir,boolean useJVMLevelCache){
  this.tempDir=tempDir;
  if (useJVMLevelCache) {
    cacheMap=JVMLevelCacheMap;
  }
 else {
    cacheMap=new HashMap();
  }
}",0.5684931506849316
73946,"/** 
 * Reset for test case
 */
void resetForTest(){
synchronized (this) {
    cacheMap=new HashMap();
  }
}","/** 
 * Reset for test case
 */
void resetForTest(){
synchronized (this) {
    cacheMap.clear();
  }
}",0.9333333333333332
73947,"/** 
 * Notice, this method is only for test, it can not be called unless its use is for test.
 */
public void resetForTest(){
  dataSourceDesign=null;
  dataSetDesign=null;
  cacheOption=DataEngineContext.CACHE_USE_DEFAULT;
  alwaysCacheRowCount=0;
  this.cacheMapManager.resetForTest();
}","/** 
 * Notice, this method is only for test, it can not be called unless its use is for test.
 */
public void resetForTest(){
  dataSourceDesign=null;
  dataSetDesign=null;
  cacheOption=DataEngineContext.CACHE_USE_DEFAULT;
  alwaysCacheRowCount=0;
  if (this.cacheMapManager != null) {
    this.cacheMapManager.resetForTest();
  }
}",0.9294871794871796
73948,"/** 
 * only for test
 * @return
 */
public boolean doesLoadFromCache(){
  if (needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount) == false)   return false;
  return cacheMapManager.doesLoadFromCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints));
}","/** 
 * only for test
 * @return
 */
public boolean doesLoadFromCache(){
  if (needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount) == false)   return false;
  switchCacheMap(dataSetDesign);
  return cacheMapManager.doesLoadFromCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints));
}",0.9488372093023256
73949,"/** 
 * @param dataSetDesign
 * @param cacheDir
 */
public void registerCacheDir(IBaseDataSetDesign dataSetDesign,String cacheDir){
  cacheMapManager.getCacheDirMap().put(dataSetDesign,cacheDir);
}","/** 
 * @param dataSetDesign
 * @param cacheDir
 */
public void registerCacheDir(IBaseDataSetDesign dataSetDesign,String cacheDir){
  switchCacheMap(dataSetDesign);
  cacheMapManager.getCacheDirMap().put(dataSetDesign,cacheDir);
}",0.9227166276346604
73950,"/** 
 * Clear cache
 * @param dataSourceDesign2
 * @param dataSetDesign2
 */
public void clearCache(IBaseDataSourceDesign dataSourceDesign2,IBaseDataSetDesign dataSetDesign2){
  if (dataSourceDesign2 == null || dataSetDesign2 == null)   return;
  DataSourceAndDataSet ds=DataSourceAndDataSet.newInstance(dataSourceDesign2,dataSetDesign2,null);
  cacheMapManager.clearCache(ds);
}","/** 
 * Clear cache
 * @param dataSourceDesign2
 * @param dataSetDesign2
 */
public void clearCache(IBaseDataSourceDesign dataSourceDesign2,IBaseDataSetDesign dataSetDesign2){
  if (dataSourceDesign2 == null || dataSetDesign2 == null)   return;
  DataSourceAndDataSet ds=DataSourceAndDataSet.newInstance(dataSourceDesign2,dataSetDesign2,null);
  switchCacheMap(dataSetDesign2);
  cacheMapManager.clearCache(ds);
}",0.9570707070707072
73951,"/** 
 * @return
 */
public IDataSetCacheObject getCacheObject(){
  return cacheMapManager.getCacheObject(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints));
}","/** 
 * @return
 */
public IDataSetCacheObject getCacheObject(){
  switchCacheMap(dataSetDesign);
  return cacheMapManager.getCacheObject(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints));
}",0.9248291571753986
73952,"/** 
 * Return the cached result metadata. Please note that parameter hint will not change the returned metadata.
 * @return
 * @throws DataException
 */
public IResultMetaData getCachedResultMetadata(IBaseDataSourceDesign dataSource,IBaseDataSetDesign dataSet) throws DataException {
  IResultClass resultClass=this.cacheMapManager.getCachedResultClass(DataSourceAndDataSet.newInstance(dataSource,dataSet,null));
  if (resultClass != null)   return new ResultMetaData(resultClass);
 else   return null;
}","/** 
 * Return the cached result metadata. Please note that parameter hint will not change the returned metadata.
 * @return
 * @throws DataException
 */
public IResultMetaData getCachedResultMetadata(IBaseDataSourceDesign dataSource,IBaseDataSetDesign dataSet) throws DataException {
  switchCacheMap(dataSet);
  IResultClass resultClass=this.cacheMapManager.getCachedResultClass(DataSourceAndDataSet.newInstance(dataSource,dataSet,null));
  if (resultClass != null)   return new ResultMetaData(resultClass);
 else   return null;
}",0.973963355834137
73953,"/** 
 * Construction
 */
public DataSetCacheManager(String tempDir,DataEngine dataEngine){
  this.tempDir=tempDir;
  this.dataSourceDesign=null;
  this.dataSetDesign=null;
  this.cacheOption=DataEngineContext.CACHE_USE_DEFAULT;
  this.alwaysCacheRowCount=0;
  this.cacheMapManager=new CacheMapManager(tempDir);
  this.mode=DataEngineContext.CACHE_MODE_IN_DISK;
}","/** 
 * Construction
 */
public DataSetCacheManager(String tempDir,DataEngine dataEngine){
  this.tempDir=tempDir;
  this.dataSourceDesign=null;
  this.dataSetDesign=null;
  this.cacheOption=DataEngineContext.CACHE_USE_DEFAULT;
  this.alwaysCacheRowCount=0;
  this.JVMLevelCacheMapManager=new CacheMapManager(tempDir,true);
  this.DteLevelCacheMapManager=new CacheMapManager(tempDir,false);
  this.mode=DataEngineContext.CACHE_MODE_IN_DISK;
}",0.8980099502487562
73954,"/** 
 * @return
 * @throws DataException 
 */
public boolean doesSaveToCache() throws DataException {
  if (needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount) == false)   return false;
  return cacheMapManager.doesSaveToCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints),this.mode,this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.appContext);
}","/** 
 * @return
 * @throws DataException 
 */
public boolean doesSaveToCache() throws DataException {
  if (needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount) == false)   return false;
  switchCacheMap(dataSetDesign);
  return cacheMapManager.doesSaveToCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints),this.mode,this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.appContext);
}",0.9438717067583048
73955,"/** 
 * Adapts base data set properties
 */
public static void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null) {
    throw new AdapterException(ResourceConstants.DATASOURCE_NULL_ERROR);
  }
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  mergeHints(modelDataSet,dteDataSet);
}","/** 
 * Adapts base data set properties
 */
public static void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null) {
    throw new AdapterException(ResourceConstants.DATASOURCE_NULL_ERROR);
  }
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  dteDataSet.setNeedCache(modelDataSet.needsCache());
  mergeHints(modelDataSet,dteDataSet);
}",0.9746954076850984
73956,"void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  mergeHints(modelDataSet,dteDataSet);
}","void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  dteDataSet.setNeedCache(modelDataSet.needsCache());
  mergeHints(modelDataSet,dteDataSet);
}",0.97239263803681
73957,"/** 
 * Create a file for caching objects.
 * @param cacheIndex
 * @return
 */
private File getCacheFile(int cacheIndex){
  String tempDirStr=tempDir + this.fileNamePrefix;
  if (dir == null) {
    dir=new File(tempDirStr);
    dir.mkdir();
  }
  return new File(tempDirStr + File.separatorChar + cacheIndex+ ""String_Node_Str"");
}","/** 
 * Create a file for caching objects.
 * @param cacheIndex
 * @return
 */
private File getCacheFile(int cacheIndex){
  String tempDirStr=tempDir + this.fileNamePrefix;
  if (dir == null) {
    dir=new File(tempDirStr);
    dir.mkdirs();
  }
  return new File(tempDirStr + File.separatorChar + cacheIndex+ ""String_Node_Str"");
}",0.9984871406959152
73958,"public static String createTempRootDir(String tempDir){
  String rootDirStr=null;
  File tempDtEDir=null;
synchronized (cacheCounter1) {
    tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1);
    cacheCounter1=new Integer(cacheCounter1.intValue() + 1);
    int x=0;
    while (tempDtEDir.exists()) {
      x++;
      tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1+ ""String_Node_Str""+ x);
    }
    tempDtEDir.mkdir();
    tempDtEDir.deleteOnExit();
  }
  rootDirStr=getCanonicalPath(tempDtEDir);
  return rootDirStr;
}","public static String createTempRootDir(String tempDir){
  String rootDirStr=null;
  File tempDtEDir=null;
synchronized (cacheCounter1) {
    tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1);
    cacheCounter1=new Integer(cacheCounter1.intValue() + 1);
    int x=0;
    while (tempDtEDir.exists()) {
      x++;
      tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1+ ""String_Node_Str""+ x);
    }
    tempDtEDir.mkdirs();
    tempDtEDir.deleteOnExit();
  }
  rootDirStr=getCanonicalPath(tempDtEDir);
  return rootDirStr;
}",0.999172870140612
73959,"/** 
 * @return session temp dir
 * @throws DataException 
 * @throws IOException 
 */
public static String createSessionTempDir(String tempRootDir) throws DataException {
  final String prefix=""String_Node_Str"";
  File sessionFile=null;
synchronized (cacheCounter2) {
    String sessionTempDir=tempRootDir + File.separator + prefix+ System.currentTimeMillis()+ cacheCounter2.intValue();
    cacheCounter2=new Integer(cacheCounter2.intValue() + 1);
    sessionFile=new File(sessionTempDir);
    int i=0;
    while (sessionFile.exists() || !sessionFile.mkdir()) {
      i++;
      sessionTempDir=sessionTempDir + ""String_Node_Str"" + i;
      sessionFile=new File(sessionTempDir);
      if (i > MAX_DIR_CREATION_ATTEMPT)       throw new DataException(ResourceConstants.FAIL_TO_CREATE_TEMP_DIR,sessionFile.getAbsolutePath());
    }
    sessionFile.deleteOnExit();
  }
  return getCanonicalPath(sessionFile);
}","/** 
 * @return session temp dir
 * @throws DataException 
 * @throws IOException 
 */
public static String createSessionTempDir(String tempRootDir) throws DataException {
  final String prefix=""String_Node_Str"";
  File sessionFile=null;
synchronized (cacheCounter2) {
    String sessionTempDir=tempRootDir + File.separator + prefix+ System.currentTimeMillis()+ cacheCounter2.intValue();
    cacheCounter2=new Integer(cacheCounter2.intValue() + 1);
    sessionFile=new File(sessionTempDir);
    int i=0;
    while (sessionFile.exists() || !sessionFile.mkdirs()) {
      i++;
      sessionTempDir=sessionTempDir + ""String_Node_Str"" + i;
      sessionFile=new File(sessionTempDir);
      if (i > MAX_DIR_CREATION_ATTEMPT)       throw new DataException(ResourceConstants.FAIL_TO_CREATE_TEMP_DIR,sessionFile.getAbsolutePath());
    }
    sessionFile.deleteOnExit();
  }
  return getCanonicalPath(sessionFile);
}",0.9994484280198566
73960,"/** 
 * @param tempDirStr
 * @param resultObjectUtil
 */
MergeTempFileUtil(String tempDirStr,ResultObjectUtil resultObjectUtil){
  this.tempDirStr=tempDirStr;
  this.resultObjectUtil=resultObjectUtil;
  File tempDir=new File(tempDirStr);
  if (tempDir.exists() == false)   tempDir.mkdir();
}","/** 
 * @param tempDirStr
 * @param resultObjectUtil
 */
MergeTempFileUtil(String tempDirStr,ResultObjectUtil resultObjectUtil){
  this.tempDirStr=tempDirStr;
  this.resultObjectUtil=resultObjectUtil;
  File tempDir=new File(tempDirStr);
  if (tempDir.exists() == false)   tempDir.mkdirs();
}",0.9982847341337908
73961,"/** 
 * Construction
 * @param dataCountOfUnit
 * @param tempDirStr
 * @param goalFileStr
 */
SortDataProvider(int dataCountOfUnit,String tempDirStr,String goalFileStr,ResultObjectUtil resultObjectUtil){
  this.dataCountOfUnit=dataCountOfUnit;
  this.resultObjectUtil=resultObjectUtil;
  tempDir=new File(tempDirStr);
  if (tempDir.exists() == false)   tempDir.mkdir();
  this.tempDirStr=tempDirStr;
  goalFile=new File(goalFileStr);
}","/** 
 * Construction
 * @param dataCountOfUnit
 * @param tempDirStr
 * @param goalFileStr
 */
SortDataProvider(int dataCountOfUnit,String tempDirStr,String goalFileStr,ResultObjectUtil resultObjectUtil){
  this.dataCountOfUnit=dataCountOfUnit;
  this.resultObjectUtil=resultObjectUtil;
  tempDir=new File(tempDirStr);
  if (tempDir.exists() == false)   tempDir.mkdirs();
  this.tempDirStr=tempDirStr;
  goalFile=new File(goalFileStr);
}",0.9988518943742823
73962,"/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  Context cx=Context.enter();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(cx);
  }
  new CoreJavaScriptInitializer().initialize(cx,scope);
  Context.exit();
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode();
  File f=new File(tempDir);
  if (!f.exists() || !f.isDirectory()) {
    f.mkdir();
  }
  tempDir+=File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(tempDir,engine);
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}","/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  Context cx=Context.enter();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(cx);
  }
  new CoreJavaScriptInitializer().initialize(cx,scope);
  Context.exit();
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(tempDir,engine);
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}",0.9344581440622972
73963,"/** 
 * @throws FileNotFoundException
 */
private void createCacheOutputStream() throws FileNotFoundException {
  metaOutputStream=new BufferedOutputStream(new FileOutputStream(ResultSetCacheUtil.getMetaFile(resultService.getSession().getTempDir(),resultService.getQueryResults().getID())),1024);
  rowOutputStream=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(ResultSetCacheUtil.getDataFile(resultService.getSession().getTempDir(),resultService.getQueryResults().getID())),1024));
  File file=ResultSetCacheUtil.getDataFile(resultService.getSession().getTempDir(),resultService.getQueryResults().getID());
  file.deleteOnExit();
  file=ResultSetCacheUtil.getMetaFile(resultService.getSession().getTempDir(),resultService.getQueryResults().getID());
  file.deleteOnExit();
}","/** 
 * @throws FileNotFoundException
 */
private void createCacheOutputStream() throws FileNotFoundException {
  File tmpDir=new File(resultService.getSession().getTempDir());
  if (!tmpDir.exists() || !tmpDir.isDirectory()) {
    tmpDir.mkdirs();
  }
  metaOutputStream=new BufferedOutputStream(new FileOutputStream(ResultSetCacheUtil.getMetaFile(resultService.getSession().getTempDir(),resultService.getQueryResults().getID())),1024);
  rowOutputStream=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(ResultSetCacheUtil.getDataFile(resultService.getSession().getTempDir(),resultService.getQueryResults().getID())),1024));
  File file=ResultSetCacheUtil.getDataFile(resultService.getSession().getTempDir(),resultService.getQueryResults().getID());
  file.deleteOnExit();
  file=ResultSetCacheUtil.getMetaFile(resultService.getSession().getTempDir(),resultService.getQueryResults().getID());
  file.deleteOnExit();
}",0.9185441941074524
73964,"/** 
 * Return the Meta file
 * @return
 */
static File getMetaFile(String tempDir,String id){
  File file=new File(tempDir + CACHED_FILE_PREFIX + id+ ""String_Node_Str"");
  return file;
}","/** 
 * Return the Meta file
 * @return
 */
static File getMetaFile(String tempDir,String id){
  File tmpDir=new File(tempDir);
  if (!tmpDir.exists() || !tmpDir.isDirectory()) {
    tmpDir.mkdirs();
  }
  File file=new File(tempDir + CACHED_FILE_PREFIX + id+ ""String_Node_Str"");
  return file;
}",0.7743271221532091
73965,"/** 
 * @param documentDir
 * @param deleteOld
 * @throws DataException
 */
public DirectoryDocumentManager(String documentDir,boolean deleteOld) throws DataException {
  this.documentDir=documentDir;
  File dir=new File(documentDir);
  if (!dir.exists() || !dir.isDirectory()) {
    if (!dir.mkdir()) {
      throw new DataException(ResourceConstants.OLAPDIR_CREATE_FAIL,documentDir);
    }
  }
  if (deleteOld) {
    File[] oldFiles=dir.listFiles();
    for (int i=0; i < oldFiles.length; i++) {
      oldFiles[i].delete();
    }
  }
}","/** 
 * @param documentDir
 * @param deleteOld
 * @throws DataException
 */
public DirectoryDocumentManager(String documentDir,boolean deleteOld) throws DataException {
  this.documentDir=documentDir;
  File dir=new File(documentDir);
  if (!dir.exists() || !dir.isDirectory()) {
    if (!dir.mkdirs()) {
      throw new DataException(ResourceConstants.OLAPDIR_CREATE_FAIL,documentDir);
    }
  }
  if (deleteOld) {
    File[] oldFiles=dir.listFiles();
    for (int i=0; i < oldFiles.length; i++) {
      oldFiles[i].delete();
    }
  }
}",0.9990697674418604
73966,"/** 
 * @param dirName
 * @param managerName
 * @return
 * @throws DataException
 * @throws IOException
 */
static FileDocumentManager createManager(String dirName,String managerName,int cacheSize) throws DataException, IOException {
  FileDocumentManager manager=new FileDocumentManager(cacheSize);
  manager.create(dirName,managerName);
  return manager;
}","/** 
 * @param dirName
 * @param managerName
 * @return
 * @throws DataException
 * @throws IOException
 */
static FileDocumentManager createManager(String dirName,String managerName,int cacheSize) throws DataException, IOException {
  File tmpDir=new File(dirName);
  if (!tmpDir.exists() || !tmpDir.isDirectory()) {
    tmpDir.mkdirs();
  }
  FileDocumentManager manager=new FileDocumentManager(cacheSize);
  manager.create(dirName,managerName);
  return manager;
}",0.8678787878787879
73967,"/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DteLevelDataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByNumberRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByPositionRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByStringRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}","/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DteLevelDataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByRowKeyCountTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}",0.9846418641599364
73968,"private void executeQuery(DataEngineImpl myDataEngine) throws BirtException, DataException, Exception, IOException {
  QueryDefinition qd=this.newReportQuery();
  rowBeArray=getRowExpr();
  totalBeArray=getAggrExpr();
  bindingNameRow=getRowExprName();
  bindingExprRow=getAggrExprName();
  prepareExprNameAndQuery(rowBeArray,bindingNameRow,totalBeArray,bindingExprRow,qd);
  IQueryResults qr=myDataEngine.prepare(qd,appContextMap).execute(null);
  qr.getResultIterator().next();
  qr.close();
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.STRING_PREFIX_INTERVAL);
  qd.addResultSetExpression(bindingNameGroup[0],bindingExprGroup[0]);
  qd.addGroup(groupDefn[0]);
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String outputStr=getOutputStrForGroupTest(30,qd,0,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
  getDataSetCacheManager(myDataEngine).resetForTest();
}","private void executeQuery(DataEngineImpl myDataEngine) throws BirtException, DataException, Exception, IOException {
  QueryDefinition qd=this.newReportQuery();
  rowBeArray=getRowExpr();
  totalBeArray=getAggrExpr();
  bindingNameRow=getRowExprName();
  bindingExprRow=getAggrExprName();
  prepareExprNameAndQuery(rowBeArray,bindingNameRow,totalBeArray,bindingExprRow,qd);
  IQueryResults qr=myDataEngine.prepare(qd,appContextMap).execute(null);
  qr.getResultIterator().next();
  qr.close();
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.STRING_PREFIX_INTERVAL);
  groupDefn[0].setIntervalRange(1);
  qd.addResultSetExpression(bindingNameGroup[0],bindingExprGroup[0]);
  qd.addGroup(groupDefn[0]);
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String outputStr=getOutputStrForGroupTest(30,qd,0,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
  getDataSetCacheManager(myDataEngine).resetForTest();
}",0.986425339366516
73969,"private void groupOnNumber(Object startValue) throws Exception, IOException {
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.NUMERIC_INTERVAL);
  if (startValue != null)   groupDefn[0].setIntervalStart(startValue);
  groupDefn[0].setIntervalRange(3);
  String[] bindingNameRow=new String[3];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[3];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition qd=this.createQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  String outputStr=getOutputStrForGroupTest(30,qd,groupDefn.length,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
}","private void groupOnNumber(Object startValue,double intervalRange) throws Exception, IOException {
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.NUMERIC_INTERVAL);
  if (startValue != null)   groupDefn[0].setIntervalStart(startValue);
  groupDefn[0].setIntervalRange(intervalRange);
  String[] bindingNameRow=new String[3];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[3];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition qd=this.createQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  String outputStr=getOutputStrForGroupTest(30,qd,groupDefn.length,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
}",0.987468671679198
73970,"/** 
 * Test feature of group on number
 * @throws Exception
 */
public void testGroupOnNumber1() throws Exception {
  groupOnNumber(null);
}","/** 
 * Test feature of group on number
 * @throws Exception
 */
public void testGroupOnNumber1() throws Exception {
  groupOnNumber(null,3);
}",0.9929577464788732
73971,"/** 
 * Test feature of group on number
 * @throws Exception
 */
public void testGroupOnNumber() throws Exception {
  groupOnNumber(new Integer(10));
}","/** 
 * Test feature of group on number
 * @throws Exception
 */
public void testGroupOnNumber() throws Exception {
  groupOnNumber(new Integer(10),3);
}",0.993421052631579
73972,"/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,String driverClassPath) throws SQLException, OdaException {
  assert(url != null);
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ url);
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + url);
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  RuntimeException e) {
    throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,e.getMessage());
  }
}","/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,String driverClassPath) throws SQLException, OdaException {
  assert(url != null);
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ url);
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + url);
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  Exception e) {
    throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
  }
}",0.9842931937172776
73973,"/** 
 * Valid bindings, return a list of invalid binding.
 * @param queryDefn
 * @param suppressException
 * @return
 * @throws DataException
 */
public static List validateBinding(ICubeQueryDefinition queryDefn,boolean suppressException) throws DataException {
  List result=new ArrayList();
  Set validDimLevels=new HashSet();
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.COLUMN_EDGE);
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.ROW_EDGE);
  for (int i=0; i < queryDefn.getBindings().size(); i++) {
    boolean isValid=true;
    IBinding binding=(IBinding)queryDefn.getBindings().get(i);
    if (binding.getAggrFunction() != null && binding.getExpression() instanceof IScriptExpression) {
      String expr=((IScriptExpression)binding.getExpression()).getText();
      if (expr == null && (AggregationFactory.getInstance().getAggrInfo(binding.getAggrFunction()) != null && !AggregationFactory.getInstance().getAggrInfo(binding.getAggrFunction()).needDataField()))       continue;
    }
    Set levels=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),queryDefn.getBindings());
    if (!validDimLevels.containsAll(levels)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_DIMENSION,binding.getBindingName());
    }
    if ((binding.getAggregatOns().size() > 0 && binding.getAggrFunction() == null)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_MISSING_AGGR_FUNC,binding.getBindingName());
    }
    if (!isValid)     result.add(binding);
  }
  return result;
}","/** 
 * Valid bindings, return a list of invalid binding.
 * @param queryDefn
 * @param suppressException
 * @return
 * @throws DataException
 */
public static List validateBinding(ICubeQueryDefinition queryDefn,boolean suppressException) throws DataException {
  List result=new ArrayList();
  Set validDimLevels=new HashSet();
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.COLUMN_EDGE);
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.ROW_EDGE);
  for (int i=0; i < queryDefn.getBindings().size(); i++) {
    boolean isValid=true;
    IBinding binding=(IBinding)queryDefn.getBindings().get(i);
    if (binding.getAggrFunction() != null && binding.getExpression() instanceof IScriptExpression) {
      String expr=((IScriptExpression)binding.getExpression()).getText();
      if (expr == null && (AggregationFactory.getInstance().getAggrInfo(binding.getAggrFunction()) != null && !AggregationFactory.getInstance().getAggrInfo(binding.getAggrFunction()).needDataField()))       continue;
    }
    Set levels=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),queryDefn.getBindings());
    if (!validDimLevels.containsAll(levels)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_DIMENSION,binding.getBindingName());
    }
    if (binding.getAggregatOns().size() > 0) {
      if (binding.getAggrFunction() == null) {
        isValid=false;
        if (!suppressException)         throw new DataException(ResourceConstants.INVALID_BINDING_MISSING_AGGR_FUNC,binding.getBindingName());
      }
      Set lvls=new HashSet();
      for (int j=0; j < binding.getAggregatOns().size(); j++) {
        lvls.add(OlapExpressionUtil.getTargetDimLevel(binding.getAggregatOns().get(j).toString()));
      }
      if (!validDimLevels.containsAll(lvls)) {
        isValid=false;
        if (!suppressException)         throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_DIMENSION,binding.getBindingName());
      }
    }
    if (!isValid)     result.add(binding);
  }
  return result;
}",0.8552631578947368
73974,"/** 
 * Populate the Result Set, either by re-execution ( If it has not been executed yet ) or  get it from local time folder.
 * @param executor
 * @param aggrDefns
 * @param cubeQueryExcutorHelper
 * @return
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] populateRs(CubeQueryExecutor executor,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper,boolean saveToRD) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  String id=null;
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    rs=cubeQueryExcutorHelper.execute(aggrDefns,new StopSign());
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      id=QueryResultIDUtil.nextID();
      FileArchiveWriter writer=new FileArchiveWriter(executor.getSession().getTempDir() + ""String_Node_Str"");
      AggregationResultSetSaveUtil.save(id,rs,writer);
      writer.finish();
    }
    if (saveToRD) {
      if (id != null) {
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
 else {
        id=QueryResultIDUtil.nextID();
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
    }
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion());
  }
  executor.setQueryResultsId(id);
  return rs;
}","/** 
 * Populate the Result Set, either by re-execution ( If it has not been executed yet ) or  get it from local time folder.
 * @param executor
 * @param aggrDefns
 * @param cubeQueryExcutorHelper
 * @return
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] populateRs(CubeQueryExecutor executor,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper,boolean saveToRD) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  String id=null;
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    rs=cubeQueryExcutorHelper.execute(aggrDefns,new StopSign());
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      id=QueryResultIDUtil.nextID();
      File tmpDir=new File(executor.getSession().getTempDir());
      if (!tmpDir.exists() || !tmpDir.isDirectory()) {
        tmpDir.mkdirs();
      }
      FileArchiveWriter writer=new FileArchiveWriter(executor.getSession().getTempDir() + ""String_Node_Str"");
      AggregationResultSetSaveUtil.save(id,rs,writer);
      writer.finish();
    }
    if (saveToRD) {
      if (id != null) {
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
 else {
        id=QueryResultIDUtil.nextID();
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
    }
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion());
  }
  executor.setQueryResultsId(id);
  return rs;
}",0.9523212045169384
73975,"private static Logger createFileLogger(String dirName){
  try {
    Handler logFileHandler=new FileHandler(generateUniqueLogFileName(dirName),true);
    logFileHandler.setFormatter(new SimpleFormatter());
    logFileHandler.setLevel(Level.FINEST);
    Logger logger=Logger.getAnonymousLogger();
    logger.addHandler(logFileHandler);
    return logger;
  }
 catch (  SecurityException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  return null;
}","private static Logger createFileLogger(String dirName){
  try {
    File directory=new File(dirName);
    if (!directory.exists()) {
      if (!directory.mkdirs())       throw new IOException(""String_Node_Str"" + dirName + ""String_Node_Str"");
    }
 else {
      if (directory.isFile())       throw new IOException(""String_Node_Str"" + dirName + ""String_Node_Str"");
    }
    Handler logFileHandler=new FileHandler(generateUniqueLogFileName(dirName),true);
    logFileHandler.setFormatter(new SimpleFormatter());
    logFileHandler.setLevel(Level.FINEST);
    Logger logger=Logger.getAnonymousLogger();
    logger.addHandler(logFileHandler);
    return logger;
  }
 catch (  SecurityException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  return null;
}",0.239477503628447
73976,"public MarginsPropertyDescriptorProvider(String property,String element){
  super(property,element);
  choiceSet=ChoiceSetFactory.getElementChoiceSet(element,property);
}","public MarginsPropertyDescriptorProvider(String property,String element){
  super(property,element);
  choiceSet=ChoiceSetFactory.getDimensionChoiceSet(element,property);
}",0.9707602339181286
73977,"public List checkCompatibility(){
  if (getHeader() == null) {
    PropertyHandle headerHandle=handle.getPropertyHandle(HEADER_PROP);
    if (headerHandle != null) {
      try {
        headerHandle.setValue(CrosstabExtendedItemFactory.createCrosstabCell(getModuleHandle()));
      }
 catch (      SemanticException e) {
        List errorList=new ArrayList(1);
        errorList.add(e);
        return errorList;
      }
    }
  }
  return Collections.EMPTY_LIST;
}","public List checkCompatibility(){
  List errorList=new ArrayList(1);
  if (!CROSSTAB_CURRENT_VERSION.equals(handle.getExtensionVersion())) {
    try {
      handle.setExtensionVersion(CROSSTAB_CURRENT_VERSION);
    }
 catch (    SemanticException e) {
      errorList.add(e);
    }
  }
  if (getHeader() == null) {
    PropertyHandle headerHandle=handle.getPropertyHandle(HEADER_PROP);
    if (headerHandle != null) {
      try {
        headerHandle.setValue(CrosstabExtendedItemFactory.createCrosstabCell(getModuleHandle()));
      }
 catch (      SemanticException e) {
        errorList.add(e);
      }
    }
  }
  return errorList.size() == 0 ? Collections.EMPTY_LIST : errorList;
}",0.6175195143104943
73978,"private void validateSingleMeasureDetail(MeasureViewHandle measureView,LevelViewHandle rowLevelView,LevelViewHandle colLevelView) throws SemanticException {
  AggregationCellHandle detailCell=measureView.getCell();
  LevelHandle rowLevel=detailCell.getAggregationOnRow();
  LevelHandle colLevel=detailCell.getAggregationOnColumn();
  if (rowLevelView == null) {
    detailCell.setAggregationOnRow(null);
  }
 else   if (rowLevel == null || !rowLevel.equals(rowLevelView.getCubeLevel())) {
    detailCell.setAggregationOnRow(rowLevelView.getCubeLevel());
  }
  if (colLevelView == null) {
    detailCell.setAggregationOnColumn(null);
  }
 else   if (colLevel == null || !colLevel.equals(colLevelView.getCubeLevel())) {
    detailCell.setAggregationOnColumn(colLevelView.getCubeLevel());
  }
  rowLevel=detailCell.getAggregationOnRow();
  colLevel=detailCell.getAggregationOnColumn();
  String aggregateRowName=rowLevel == null ? null : rowLevel.getQualifiedName();
  String aggregateColumnName=colLevel == null ? null : colLevel.getQualifiedName();
  if (detailCell.getContents().size() == 0 || (detailCell.getContents().size() == 1 && detailCell.getContents().get(0) instanceof DataItemHandle)) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,aggregateColumnName,aggregateRowName);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    String measureFunc=measureView.getCubeMeasure() == null ? DEFAULT_MEASURE_FUNCTION : measureView.getCubeMeasure().getFunction();
    column.setAggregateFunction(CrosstabModelUtil.getRollUpAggregationFunction(measureFunc));
    if (aggregateRowName != null) {
      column.addAggregateOn(aggregateRowName);
    }
    if (aggregateColumnName != null) {
      column.addAggregateOn(aggregateColumnName);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    DataItemHandle dataItem;
    if (detailCell.getContents().size() == 0) {
      dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
      dataItem.setResultSetColumn(columnHandle.getName());
      detailCell.addContent(dataItem);
    }
 else {
      dataItem=(DataItemHandle)detailCell.getContents().get(0);
      dataItem.setResultSetColumn(columnHandle.getName());
    }
  }
}","private void validateSingleMeasureDetail(MeasureViewHandle measureView,LevelViewHandle rowLevelView,LevelViewHandle colLevelView) throws SemanticException {
  AggregationCellHandle detailCell=measureView.getCell();
  LevelHandle rowLevel=detailCell.getAggregationOnRow();
  LevelHandle colLevel=detailCell.getAggregationOnColumn();
  if (rowLevelView == null) {
    detailCell.setAggregationOnRow(null);
  }
 else   if (rowLevel == null || !rowLevel.equals(rowLevelView.getCubeLevel())) {
    detailCell.setAggregationOnRow(rowLevelView.getCubeLevel());
  }
  if (colLevelView == null) {
    detailCell.setAggregationOnColumn(null);
  }
 else   if (colLevel == null || !colLevel.equals(colLevelView.getCubeLevel())) {
    detailCell.setAggregationOnColumn(colLevelView.getCubeLevel());
  }
  rowLevel=detailCell.getAggregationOnRow();
  colLevel=detailCell.getAggregationOnColumn();
  String aggregateRowName=rowLevel == null ? null : rowLevel.getQualifiedName();
  String aggregateColumnName=colLevel == null ? null : colLevel.getQualifiedName();
  if (detailCell.getContents().size() == 0 || (detailCell.getContents().size() == 1 && detailCell.getContents().get(0) instanceof DataItemHandle)) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,aggregateColumnName,aggregateRowName);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    String measureFunc=CrosstabModelUtil.getAggregationFunction(crosstab,detailCell);
    if (measureFunc == null) {
      measureFunc=CrosstabModelUtil.getDefaultMeasureAggregationFunction(measureView);
    }
    column.setAggregateFunction(measureFunc);
    if (aggregateRowName != null) {
      column.addAggregateOn(aggregateRowName);
    }
    if (aggregateColumnName != null) {
      column.addAggregateOn(aggregateColumnName);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    DataItemHandle dataItem;
    if (detailCell.getContents().size() == 0) {
      dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
      dataItem.setResultSetColumn(columnHandle.getName());
      detailCell.addContent(dataItem);
    }
 else {
      dataItem=(DataItemHandle)detailCell.getContents().get(0);
      dataItem.setResultSetColumn(columnHandle.getName());
    }
  }
}",0.936203831720324
73979,"/** 
 * @param axisType
 * @param measureList
 * @param functionList
 * @param isAdd
 * @param checkCounterAxis
 * @throws SemanticException
 */
protected void addMeasureAggregations(int axisType,List measureList,List functionList,boolean checkCounterAxis) throws SemanticException {
  if (crosstab == null || measureList == null || measureList.isEmpty() || crosstab.getGrandTotal(axisType) == null)   return;
  int counterAxisType=CrosstabModelUtil.getOppositeAxisType(axisType);
  String dimensionName=null;
  String levelName=null;
  boolean isCounterAxisEmpty=true;
  for (int dimension=0; dimension < crosstab.getDimensionCount(counterAxisType); dimension++) {
    DimensionViewHandle dimensionView=crosstab.getDimension(counterAxisType,dimension);
    for (int level=0; level < dimensionView.getLevelCount(); level++) {
      isCounterAxisEmpty=false;
      LevelViewHandle levelView=dimensionView.getLevel(level);
      String rowDimension=null;
      String rowLevel=null;
      String colDimension=null;
      String colLevel=null;
      if (counterAxisType == ROW_AXIS_TYPE) {
        rowDimension=dimensionView.getCubeDimensionName();
        rowLevel=levelView.getCubeLevelName();
        colDimension=dimensionName;
        colLevel=levelName;
      }
 else       if (counterAxisType == COLUMN_AXIS_TYPE) {
        rowDimension=dimensionName;
        rowLevel=levelName;
        colDimension=dimensionView.getCubeDimensionName();
        colLevel=levelView.getCubeLevelName();
      }
      if (levelView.isInnerMost() || levelView.getAggregationHeader() != null) {
        for (int i=0; i < measureList.size(); i++) {
          MeasureViewHandle measureView=(MeasureViewHandle)measureList.get(i);
          if (measureView.getCrosstab() != crosstab)           continue;
          String function=functionList == null ? DEFAULT_MEASURE_FUNCTION : (String)functionList.get(i);
          if (checkCounterAxis && !CrosstabModelUtil.isAggregationOn(measureView,levelView.getCubeLevelName(),counterAxisType))           continue;
          CrosstabModelUtil.addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
        }
      }
    }
  }
  if (crosstab.getGrandTotal(counterAxisType) != null || isCounterAxisEmpty) {
    String rowDimension=null;
    String rowLevel=null;
    String colDimension=null;
    String colLevel=null;
    for (int i=0; i < measureList.size(); i++) {
      MeasureViewHandle measureView=(MeasureViewHandle)measureList.get(i);
      if (measureView.getCrosstab() != crosstab)       continue;
      String function=functionList == null ? DEFAULT_MEASURE_FUNCTION : (String)functionList.get(i);
      if (checkCounterAxis && !CrosstabModelUtil.isAggregationOn(measureView,null,counterAxisType))       continue;
      CrosstabModelUtil.addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
    }
  }
}","/** 
 * @param axisType
 * @param measureList
 * @param functionList
 * @param isAdd
 * @param checkCounterAxis
 * @throws SemanticException
 */
protected void addMeasureAggregations(int axisType,List measureList,List functionList,boolean checkCounterAxis) throws SemanticException {
  if (crosstab == null || measureList == null || measureList.isEmpty() || crosstab.getGrandTotal(axisType) == null)   return;
  int counterAxisType=CrosstabModelUtil.getOppositeAxisType(axisType);
  String dimensionName=null;
  String levelName=null;
  boolean isCounterAxisEmpty=true;
  for (int dimension=0; dimension < crosstab.getDimensionCount(counterAxisType); dimension++) {
    DimensionViewHandle dimensionView=crosstab.getDimension(counterAxisType,dimension);
    for (int level=0; level < dimensionView.getLevelCount(); level++) {
      isCounterAxisEmpty=false;
      LevelViewHandle levelView=dimensionView.getLevel(level);
      String rowDimension=null;
      String rowLevel=null;
      String colDimension=null;
      String colLevel=null;
      if (counterAxisType == ROW_AXIS_TYPE) {
        rowDimension=dimensionView.getCubeDimensionName();
        rowLevel=levelView.getCubeLevelName();
        colDimension=dimensionName;
        colLevel=levelName;
      }
 else       if (counterAxisType == COLUMN_AXIS_TYPE) {
        rowDimension=dimensionName;
        rowLevel=levelName;
        colDimension=dimensionView.getCubeDimensionName();
        colLevel=levelView.getCubeLevelName();
      }
      if (levelView.isInnerMost() || levelView.getAggregationHeader() != null) {
        for (int i=0; i < measureList.size(); i++) {
          MeasureViewHandle measureView=(MeasureViewHandle)measureList.get(i);
          if (measureView.getCrosstab() != crosstab)           continue;
          String function=functionList == null ? CrosstabModelUtil.getDefaultMeasureAggregationFunction(measureView) : (String)functionList.get(i);
          if (checkCounterAxis && !CrosstabModelUtil.isAggregationOn(measureView,levelView.getCubeLevelName(),counterAxisType))           continue;
          CrosstabModelUtil.addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
        }
      }
    }
  }
  if (crosstab.getGrandTotal(counterAxisType) != null || isCounterAxisEmpty) {
    String rowDimension=null;
    String rowLevel=null;
    String colDimension=null;
    String colLevel=null;
    for (int i=0; i < measureList.size(); i++) {
      MeasureViewHandle measureView=(MeasureViewHandle)measureList.get(i);
      if (measureView.getCrosstab() != crosstab)       continue;
      String function=functionList == null ? CrosstabModelUtil.getDefaultMeasureAggregationFunction(measureView) : (String)functionList.get(i);
      if (checkCounterAxis && !CrosstabModelUtil.isAggregationOn(measureView,null,counterAxisType))       continue;
      CrosstabModelUtil.addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
    }
  }
}",0.9704483695652174
73980,"/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  if (crosstab == null || measureView == null)   return;
  AggregationCellHandle cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  if (cell == null) {
    cell=measureView.addAggregation(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell != null && cell.getContents().size() == 0) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    column.setAggregateFunction(function != null ? function : DEFAULT_MEASURE_FUNCTION);
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
    dataItem.setResultSetColumn(columnHandle.getName());
    cell.addContent(dataItem);
  }
}","/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  if (crosstab == null || measureView == null)   return;
  AggregationCellHandle cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  if (cell == null) {
    cell=measureView.addAggregation(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell != null && cell.getContents().size() == 0) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    column.setAggregateFunction(function != null ? function : getDefaultMeasureAggregationFunction(measureView));
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
    dataItem.setResultSetColumn(columnHandle.getName());
    cell.addContent(dataItem);
  }
}",0.978969826272478
73981,"public final Object getMetrics(FontDefinition fd){
  return _g2d.getFontMetrics((Font)createFont(fd));
}","public final Object getMetrics(FontDefinition fd){
  return getGraphicsContext().getFontMetrics((Font)createFont(fd));
}",0.9017857142857144
73982,"/** 
 * The constructor.
 */
public SwingDisplayServer(){
  _bi=new BufferedImage(1,1,BufferedImage.TYPE_INT_ARGB);
  _g2d=(Graphics2D)_bi.getGraphics();
  _g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  _g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  _g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str"")},getULocale()));
  _simc=new SwingImageCache(this);
}","/** 
 * The constructor.
 */
public SwingDisplayServer(){
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str"")},getULocale()));
  _simc=new SwingImageCache(this);
}",0.5775401069518716
73983,"public final int getDpiResolution(){
  if (iDpiResolution == 0) {
    if (GraphicsEnvironment.isHeadless()) {
      iDpiResolution=super.getDpiResolution();
    }
 else {
      iDpiResolution=Toolkit.getDefaultToolkit().getScreenResolution();
    }
  }
  return iDpiResolution;
}","public final int getDpiResolution(){
  if (iDpiResolution == 0) {
switch (getGraphicsContext().getDeviceConfiguration().getDevice().getType()) {
case GraphicsDevice.TYPE_RASTER_SCREEN:
      if (GraphicsEnvironment.isHeadless()) {
        iDpiResolution=super.getDpiResolution();
      }
 else {
        iDpiResolution=Toolkit.getDefaultToolkit().getScreenResolution();
      }
    break;
case GraphicsDevice.TYPE_PRINTER:
  iDpiResolution=72;
break;
case GraphicsDevice.TYPE_IMAGE_BUFFER:
if (userResolution == 0) {
iDpiResolution=Toolkit.getDefaultToolkit().getScreenResolution();
}
 else {
iDpiResolution=userResolution;
}
break;
}
if (iDpiResolution >= 192) {
_g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
}
 else {
_g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_OFF);
}
}
return iDpiResolution;
}",0.4343434343434343
73984,"public void dispose(){
  _g2d.dispose();
  super.dispose();
}","public void dispose(){
  if (_bi != null) {
    this._g2d.dispose();
    this._g2d=null;
    this._bi=null;
  }
  super.dispose();
}",0.6321243523316062
73985,"public final void setDpiResolution(int dpi){
  iDpiResolution=dpi;
}","public final void setDpiResolution(int dpi){
  userResolution=dpi;
}",0.9411764705882352
73986,"public final Object createFont(FontDefinition fd){
  final Map m=new HashMap();
  m.put(TextAttribute.FAMILY,fd.getName());
  m.put(TextAttribute.SIZE,new Float(pointsToPixels(fd.getSize())));
  if (fd.isItalic()) {
    m.put(TextAttribute.POSTURE,TextAttribute.POSTURE_OBLIQUE);
  }
  if (fd.isBold()) {
    m.put(TextAttribute.WEIGHT,TextAttribute.WEIGHT_BOLD);
  }
  if (fd.isUnderline()) {
    m.put(TextAttribute.UNDERLINE,TextAttribute.UNDERLINE_ON);
  }
  if (fd.isStrikethrough()) {
    m.put(TextAttribute.STRIKETHROUGH,TextAttribute.STRIKETHROUGH_ON);
  }
  return new Font(m);
}","public final Object createFont(FontDefinition fd){
  final Map m=new HashMap();
  m.put(TextAttribute.FAMILY,fd.getName());
  m.put(TextAttribute.SIZE,new Float(fd.getSize() * getDpiResolution() / 72d));
  if (fd.isItalic()) {
    m.put(TextAttribute.POSTURE,TextAttribute.POSTURE_OBLIQUE);
  }
  if (fd.isBold()) {
    m.put(TextAttribute.WEIGHT,TextAttribute.WEIGHT_BOLD);
  }
  if (fd.isUnderline()) {
    m.put(TextAttribute.UNDERLINE,TextAttribute.UNDERLINE_ON);
  }
  if (fd.isStrikethrough()) {
    m.put(TextAttribute.STRIKETHROUGH,TextAttribute.STRIKETHROUGH_ON);
  }
  return new Font(m);
}",0.945332211942809
73987,"public ITextMetrics getTextMetrics(Label la){
  return new SwingTextMetrics(this,la);
}","public ITextMetrics getTextMetrics(Label la){
  return new SwingTextMetrics(this,la,getGraphicsContext());
}",0.8923076923076924
73988,"public void setProperty(String sProperty,Object oValue){
  if (sProperty.equals(IDeviceRenderer.UPDATE_NOTIFIER) && iv != null) {
    _iun=(IUpdateNotifier)oValue;
    iv.setUpdateNotifier(_iun);
    _lhmAllTriggers.clear();
    Object obj=_iun.peerInstance();
    if (obj instanceof JComponent) {
      JComponent jc=(JComponent)obj;
      if (_eh != null) {
        jc.removeMouseListener(_eh);
        jc.removeMouseMotionListener(_eh);
        jc.removeKeyListener(_eh);
        jc.removeFocusListener(_eh);
      }
      _eh=new SwingEventHandler(iv,_lhmAllTriggers,_iun,getULocale());
      jc.addMouseListener(_eh);
      jc.addMouseMotionListener(_eh);
      jc.addKeyListener(_eh);
      jc.addFocusListener(_eh);
    }
  }
 else   if (sProperty.equals(IDeviceRenderer.GRAPHICS_CONTEXT)) {
    _g2d=(Graphics2D)oValue;
    _g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
    _g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    _g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
    _g2d.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{_g2d},getULocale()));
  }
 else   if (sProperty.equals(IDeviceRenderer.DPI_RESOLUTION)) {
    getDisplayServer().setDpiResolution(((Integer)oValue).intValue());
  }
}","public void setProperty(String sProperty,Object oValue){
  if (sProperty.equals(IDeviceRenderer.UPDATE_NOTIFIER) && iv != null) {
    _iun=(IUpdateNotifier)oValue;
    iv.setUpdateNotifier(_iun);
    _lhmAllTriggers.clear();
    Object obj=_iun.peerInstance();
    if (obj instanceof JComponent) {
      JComponent jc=(JComponent)obj;
      if (_eh != null) {
        jc.removeMouseListener(_eh);
        jc.removeMouseMotionListener(_eh);
        jc.removeKeyListener(_eh);
        jc.removeFocusListener(_eh);
      }
      _eh=new SwingEventHandler(iv,_lhmAllTriggers,_iun,getULocale());
      jc.addMouseListener(_eh);
      jc.addMouseMotionListener(_eh);
      jc.addKeyListener(_eh);
      jc.addFocusListener(_eh);
    }
  }
 else   if (sProperty.equals(IDeviceRenderer.GRAPHICS_CONTEXT)) {
    _g2d=(Graphics2D)oValue;
    prepareGraphicsContext();
  }
 else   if (sProperty.equals(IDeviceRenderer.DPI_RESOLUTION)) {
    getDisplayServer().setDpiResolution(((Integer)oValue).intValue());
  }
}",0.7914481645824929
73989,"/** 
 * The constructor initializes a tiny image that provides a graphics context capable of performing computations in the absence of a visual component
 * @param _xs
 * @param _la
 */
public SwingTextMetrics(IDisplayServer _xs,Label _la){
  if (bi == null) {
    bi=new BufferedImage(1,1,BufferedImage.TYPE_INT_RGB);
    g2d=(Graphics2D)((BufferedImage)bi).getGraphics();
    g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
    g2d.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  }
 else {
    g2d=(Graphics2D)((BufferedImage)bi).getGraphics();
  }
  xs=_xs;
  la=_la;
  computeTextAntialiasing();
  reuse(la);
}","/** 
 * The constructor initializes a tiny image that provides a graphics context capable of performing computations in the absence of a visual component
 * @param _xs
 * @param _la
 * @param _g2d 
 */
public SwingTextMetrics(IDisplayServer _xs,Label _la,Graphics2D _g2d){
  this.g2d=_g2d;
  xs=_xs;
  la=_la;
  computeTextAntialiasing();
  reuse(la);
}",0.4872521246458923
73990,"public void dispose(){
  if (bi != null) {
    ((BufferedImage)bi).flush();
    bi=null;
    g2d.dispose();
    g2d=null;
  }
}","public void dispose(){
}",0.3178807947019867
73991,"private final void showRightValue(IPrimitiveRenderer ipr,Location lo,Label la,int iLabelPosition,boolean bShadow){
  Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  if (bShadow) {
    bShadow=la.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  final ITextMetrics itm=new SwingTextMetrics(_sxs,la);
  lo=adjustTextPosition(iLabelPosition,lo,itm,dAngleInDegrees);
  double dX=lo.getX(), dY=lo.getY();
  dY+=1;
  try {
    final double dFW=itm.getFullWidth();
    final double dH=itm.getHeight();
    final double dD=itm.getDescent();
    final double dFH=itm.getFullHeight();
    double dXOffset=0, dW=0;
    final int iLC=itm.getLineCount();
    final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(la.getCaption().getValue());
    TextLayout tl;
    final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
    double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    int iRotateX=(int)dX;
    int iRotateY=(int)(dY + dH / 2);
    dY+=dH / 2;
    double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    if (dAngleInDegrees == 0) {
      double dYHalfOffset=(dFH + dH) / 2d;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dYHalfOffset + ins.getTop() + dH * (i + 1) - dD));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dH * Math.sin(dAngleInRadians);
      double dDeltaY=dH / 2 - dH * dCosTheta / 2;
      dX-=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,iRotateX - dDeltaX,iRotateY + dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dH),dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD + dH * i) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,iRotateX - dDeltaX,iRotateY + dDeltaY);
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      double dDeltaY=-dH / 2 + dH * dCosTheta / 2;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,iRotateX,iRotateY + dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD - dH * (iLC - i - 1)) - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,iRotateX,iRotateY + dDeltaY);
    }
 else     if (dAngleInDegrees == 90) {
      double dDeltaX=dH;
      double dDeltaY=(dFW - dH) / 2;
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD + dH * i) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == -90) {
      double dDeltaX=0;
      double dDeltaY=(dFW + dH) / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD + dH * i) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
  }
  finally {
    itm.dispose();
  }
}","private final void showRightValue(IPrimitiveRenderer ipr,Location lo,Label la,int iLabelPosition,boolean bShadow){
  Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  if (bShadow) {
    bShadow=la.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  final ITextMetrics itm=_sxs.getTextMetrics(la);
  lo=adjustTextPosition(iLabelPosition,lo,itm,dAngleInDegrees);
  double dX=lo.getX(), dY=lo.getY();
  dY+=1;
  try {
    final double dFW=itm.getFullWidth();
    final double dH=itm.getHeight();
    final double dD=itm.getDescent();
    final double dFH=itm.getFullHeight();
    double dXOffset=0, dW=0;
    final int iLC=itm.getLineCount();
    final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(la.getCaption().getValue());
    TextLayout tl;
    final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
    double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    int iRotateX=(int)dX;
    int iRotateY=(int)(dY + dH / 2);
    dY+=dH / 2;
    double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    if (dAngleInDegrees == 0) {
      double dYHalfOffset=(dFH + dH) / 2d;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dYHalfOffset + ins.getTop() + dH * (i + 1) - dD));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dH * Math.sin(dAngleInRadians);
      double dDeltaY=dH / 2 - dH * dCosTheta / 2;
      dX-=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,iRotateX - dDeltaX,iRotateY + dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dH),dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD + dH * i) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,iRotateX - dDeltaX,iRotateY + dDeltaY);
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      double dDeltaY=-dH / 2 + dH * dCosTheta / 2;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,iRotateX,iRotateY + dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD - dH * (iLC - i - 1)) - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,iRotateX,iRotateY + dDeltaY);
    }
 else     if (dAngleInDegrees == 90) {
      double dDeltaX=dH;
      double dDeltaY=(dFW - dH) / 2;
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD + dH * i) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == -90) {
      double dDeltaX=0;
      double dDeltaY=(dFW + dH) / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD + dH * i) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
  }
  finally {
    itm.dispose();
  }
}",0.9987953126711204
73992,"private final void showTopValue(IPrimitiveRenderer ipr,Location lo,Label la,int iLabelPosition,boolean bShadow){
  final Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  final FontDefinition fd=la.getCaption().getFont();
  final double dAngleInDegrees=fd.getRotation();
  final Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final ITextMetrics itm=new SwingTextMetrics(_sxs,la);
  lo=adjustTextPosition(iLabelPosition,lo,itm,dAngleInDegrees);
  double dX=lo.getX(), dY=lo.getY();
  try {
    final double dFW=itm.getFullWidth();
    final double dH=itm.getHeight();
    final double dD=itm.getDescent();
    final double dFH=itm.getFullHeight();
    double dXOffset=0, dW=0;
    final int iLC=itm.getLineCount();
    final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(la.getCaption().getValue());
    TextLayout tl;
    final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
    double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
    dX-=dFW / 2;
    if (dAngleInDegrees == 0) {
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dFH),dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(iLC - i - 1);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dFW / 2 + dH * dSineTheta / 2.0;
      ;
      dX+=dDeltaX;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dFH),dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=new TextLayout(itm.getLine(iLC - i - 1),g2d.getFont().getAttributes(),g2d.getFontRenderContext());
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      dX+=-dFW * dCosTheta - dH * dSineTheta / 2.0 + dFW / 2.0;
      dY-=dFW * dSineTheta;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(iLC - i - 1);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == 90) {
      double dYHalfOffset=(dFH + dH) / 2.0;
      double dDeltaX=(dFW + dH) / 2;
      dX+=dDeltaX;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((itm.getLineCount() - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == -90) {
      double dYHalfOffset=(dFH + dH) / 2.0;
      double dDeltaX=(dFW - dH) / 2;
      double dDeltaY=dFW;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((itm.getLineCount() - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
  }
  finally {
    itm.dispose();
  }
}","private final void showTopValue(IPrimitiveRenderer ipr,Location lo,Label la,int iLabelPosition,boolean bShadow){
  final Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  final FontDefinition fd=la.getCaption().getFont();
  final double dAngleInDegrees=fd.getRotation();
  final Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final ITextMetrics itm=_sxs.getTextMetrics(la);
  lo=adjustTextPosition(iLabelPosition,lo,itm,dAngleInDegrees);
  double dX=lo.getX(), dY=lo.getY();
  try {
    final double dFW=itm.getFullWidth();
    final double dH=itm.getHeight();
    final double dD=itm.getDescent();
    final double dFH=itm.getFullHeight();
    double dXOffset=0, dW=0;
    final int iLC=itm.getLineCount();
    final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(la.getCaption().getValue());
    TextLayout tl;
    final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
    double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
    dX-=dFW / 2;
    if (dAngleInDegrees == 0) {
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dFH),dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(iLC - i - 1);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dFW / 2 + dH * dSineTheta / 2.0;
      ;
      dX+=dDeltaX;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dFH),dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=new TextLayout(itm.getLine(iLC - i - 1),g2d.getFont().getAttributes(),g2d.getFontRenderContext());
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      dX+=-dFW * dCosTheta - dH * dSineTheta / 2.0 + dFW / 2.0;
      dY-=dFW * dSineTheta;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(iLC - i - 1);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == 90) {
      double dYHalfOffset=(dFH + dH) / 2.0;
      double dDeltaX=(dFW + dH) / 2;
      dX+=dDeltaX;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((itm.getLineCount() - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == -90) {
      double dYHalfOffset=(dFH + dH) / 2.0;
      double dDeltaX=(dFW - dH) / 2;
      double dDeltaY=dFW;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((itm.getLineCount() - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
  }
  finally {
    itm.dispose();
  }
}",0.9988049972840848
73993,"/** 
 * @param g2d
 * @param f
 * @param dX
 * @param dY
 * @param sText
 * @param iAngleInDegrees
 */
private final void showCenterValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  if (bShadow) {
    bShadow=la.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=(Math.sin(dAngleInRadians));
  final double dCosTheta=(Math.cos(dAngleInRadians));
  final ITextMetrics itm=new SwingTextMetrics(_sxs,la);
  try {
    final double dFW=itm.getFullWidth();
    final double dH=itm.getHeight();
    final double dD=itm.getDescent();
    final double dFH=itm.getFullHeight();
    double dXOffset=0, dW=0;
    final int iLC=itm.getLineCount();
    final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(la.getCaption().getValue());
    TextLayout tl;
    final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
    double dRotateX=dX;
    double dRotateY=dY;
    dX-=dFW / 2;
    dY+=dH / 2;
    if (dAngleInDegrees == 0) {
      double dYHalfOffset=(dFH + dH) / 2d;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dYHalfOffset + ins.getTop() + dH * (i + 1) - dD));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dFW - dFW * dCosTheta;
      double dDeltaY=dFW * dSineTheta + dH / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(iLC - i - 1);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * i)) - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      double dDeltaX=dFW - dFW * dCosTheta - dH * dSineTheta;
      double dDeltaY=dFW * dSineTheta + dH / 2 - dH * dCosTheta;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    }
 else     if (dAngleInDegrees == 90) {
      double dDeltaX=dFW;
      double dDeltaY=(dFW - dH) / 2;
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * (iLC - i - 1))) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == -90) {
      double dDeltaX=dFW - dH;
      double dDeltaY=(dFW + dH) / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
  }
  finally {
    itm.dispose();
  }
}","/** 
 * @param g2d
 * @param f
 * @param dX
 * @param dY
 * @param sText
 * @param iAngleInDegrees
 */
private final void showCenterValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  if (bShadow) {
    bShadow=la.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=(Math.sin(dAngleInRadians));
  final double dCosTheta=(Math.cos(dAngleInRadians));
  final ITextMetrics itm=_sxs.getTextMetrics(la);
  try {
    final double dFW=itm.getFullWidth();
    final double dH=itm.getHeight();
    final double dD=itm.getDescent();
    final double dFH=itm.getFullHeight();
    double dXOffset=0, dW=0;
    final int iLC=itm.getLineCount();
    final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(la.getCaption().getValue());
    TextLayout tl;
    final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
    double dRotateX=dX;
    double dRotateY=dY;
    dX-=dFW / 2;
    dY+=dH / 2;
    if (dAngleInDegrees == 0) {
      double dYHalfOffset=(dFH + dH) / 2d;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dYHalfOffset + ins.getTop() + dH * (i + 1) - dD));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dFW - dFW * dCosTheta;
      double dDeltaY=dFW * dSineTheta + dH / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(iLC - i - 1);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * i)) - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      double dDeltaX=dFW - dFW * dCosTheta - dH * dSineTheta;
      double dDeltaY=dFW * dSineTheta + dH / 2 - dH * dCosTheta;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    }
 else     if (dAngleInDegrees == 90) {
      double dDeltaX=dFW;
      double dDeltaY=(dFW - dH) / 2;
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * (iLC - i - 1))) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == -90) {
      double dDeltaX=dFW - dH;
      double dDeltaY=(dFW + dH) / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
  }
  finally {
    itm.dispose();
  }
}",0.9988245351570848
73994,"private final void showBottomValue(IPrimitiveRenderer ipr,Location lo,Label la,int iLabelPosition,boolean bShadow){
  Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final ITextMetrics itm=new SwingTextMetrics(_sxs,la);
  lo=adjustTextPosition(iLabelPosition,lo,itm,dAngleInDegrees);
  double dX=lo.getX(), dY=lo.getY();
  try {
    final double dFW=itm.getFullWidth();
    final double dH=itm.getHeight();
    final double dD=itm.getDescent();
    final double dFH=itm.getFullHeight();
    double dXOffset=0, dW=0;
    final int iLC=itm.getLineCount();
    final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(la.getCaption().getValue());
    TextLayout tl;
    final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
    dX-=dFW / 2;
    dY+=dH;
    double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
    double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    if (dAngleInDegrees == 0) {
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD + dH * i + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dFW * dCosTheta - dH * dSineTheta / 2.0 - dFW / 2.0;
      double dDeltaY=dH * dCosTheta + dFW * dSineTheta - dH;
      dX-=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD + dH * i + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      dX+=dFW / 2 + dH * dSineTheta / 2.0;
      g2d.rotate(dAngleInRadians,dX,dY - dH);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD + dH * i + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY - dH);
    }
 else     if (dAngleInDegrees == 90) {
      double dYHalfOffset=(dFH + dH) / 2.0;
      double dDeltaX=(dFW + dH) / 2;
      double dDeltaY=(dFW - dH);
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((iLC - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == -90) {
      dX+=dFW / 2;
      dY-=dH;
      double dYHalfOffset=(dFH + dH) / 2d;
      double dDeltaX=dYHalfOffset - dFH / 2d;
      dX-=dDeltaX;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD) - dYHalfOffset + dH * (i + 1) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
  }
  finally {
    itm.dispose();
  }
}","private final void showBottomValue(IPrimitiveRenderer ipr,Location lo,Label la,int iLabelPosition,boolean bShadow){
  Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final ITextMetrics itm=_sxs.getTextMetrics(la);
  lo=adjustTextPosition(iLabelPosition,lo,itm,dAngleInDegrees);
  double dX=lo.getX(), dY=lo.getY();
  try {
    final double dFW=itm.getFullWidth();
    final double dH=itm.getHeight();
    final double dD=itm.getDescent();
    final double dFH=itm.getFullHeight();
    double dXOffset=0, dW=0;
    final int iLC=itm.getLineCount();
    final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(la.getCaption().getValue());
    TextLayout tl;
    final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
    dX-=dFW / 2;
    dY+=dH;
    double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
    double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    if (dAngleInDegrees == 0) {
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD + dH * i + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dFW * dCosTheta - dH * dSineTheta / 2.0 - dFW / 2.0;
      double dDeltaY=dH * dCosTheta + dFW * dSineTheta - dH;
      dX-=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD + dH * i + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      dX+=dFW / 2 + dH * dSineTheta / 2.0;
      g2d.rotate(dAngleInRadians,dX,dY - dH);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD + dH * i + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY - dH);
    }
 else     if (dAngleInDegrees == 90) {
      double dYHalfOffset=(dFH + dH) / 2.0;
      double dDeltaX=(dFW + dH) / 2;
      double dDeltaY=(dFW - dH);
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((iLC - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == -90) {
      dX+=dFW / 2;
      dY-=dH;
      double dYHalfOffset=(dFH + dH) / 2d;
      double dDeltaX=dYHalfOffset - dFH / 2d;
      dX-=dDeltaX;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD) - dYHalfOffset + dH * (i + 1) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
  }
  finally {
    itm.dispose();
  }
}",0.9987877452060832
73995,"private final void showLeftValue(IPrimitiveRenderer ipr,Location lo,Label la,int iLabelPosition,boolean bShadow){
  Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  if (bShadow) {
    bShadow=la.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=(Math.sin(dAngleInRadians));
  final double dCosTheta=(Math.cos(dAngleInRadians));
  final ITextMetrics itm=new SwingTextMetrics(_sxs,la);
  lo=adjustTextPosition(iLabelPosition,lo,itm,dAngleInDegrees);
  double dX=lo.getX(), dY=lo.getY();
  try {
    final double dFW=itm.getFullWidth();
    final double dH=itm.getHeight();
    final double dD=itm.getDescent();
    final double dFH=itm.getFullHeight();
    double dXOffset=0, dW=0;
    final int iLC=itm.getLineCount();
    final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(la.getCaption().getValue());
    TextLayout tl;
    final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
    double dRotateX=(dX - dFW);
    double dRotateY=(dY + dH / 2);
    dX-=dFW;
    dY+=dH / 2;
    if (dAngleInDegrees == 0) {
      double dYHalfOffset=(dFH + dH) / 2d;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dYHalfOffset + ins.getTop() + dH * (i + 1) - dD));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dFW - dFW * dCosTheta;
      double dDeltaY=dFW * dSineTheta + dH / 2 - dH * dCosTheta / 2.0;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(iLC - i - 1);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * i)) - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      double dDeltaX=dFW - dFW * dCosTheta - dH * dSineTheta;
      double dDeltaY=+dFW * dSineTheta - dH / 2 + dH * dCosTheta / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    }
 else     if (dAngleInDegrees == 90) {
      double dDeltaX=dFW;
      double dDeltaY=(dFW - dH) / 2;
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * (iLC - i - 1))) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == -90) {
      double dDeltaX=dFW - dH;
      double dDeltaY=(dFW + dH) / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
  }
  finally {
    itm.dispose();
  }
}","private final void showLeftValue(IPrimitiveRenderer ipr,Location lo,Label la,int iLabelPosition,boolean bShadow){
  Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  if (bShadow) {
    bShadow=la.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=(Math.sin(dAngleInRadians));
  final double dCosTheta=(Math.cos(dAngleInRadians));
  final ITextMetrics itm=_sxs.getTextMetrics(la);
  lo=adjustTextPosition(iLabelPosition,lo,itm,dAngleInDegrees);
  double dX=lo.getX(), dY=lo.getY();
  try {
    final double dFW=itm.getFullWidth();
    final double dH=itm.getHeight();
    final double dD=itm.getDescent();
    final double dFH=itm.getFullHeight();
    double dXOffset=0, dW=0;
    final int iLC=itm.getLineCount();
    final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(la.getCaption().getValue());
    TextLayout tl;
    final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
    double dRotateX=(dX - dFW);
    double dRotateY=(dY + dH / 2);
    dX-=dFW;
    dY+=dH / 2;
    if (dAngleInDegrees == 0) {
      double dYHalfOffset=(dFH + dH) / 2d;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dYHalfOffset + ins.getTop() + dH * (i + 1) - dD));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dFW - dFW * dCosTheta;
      double dDeltaY=dFW * dSineTheta + dH / 2 - dH * dCosTheta / 2.0;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(iLC - i - 1);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * i)) - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      double dDeltaX=dFW - dFW * dCosTheta - dH * dSineTheta;
      double dDeltaY=+dFW * dSineTheta - dH / 2 + dH * dCosTheta / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    }
 else     if (dAngleInDegrees == 90) {
      double dDeltaX=dFW;
      double dDeltaY=(dFW - dH) / 2;
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * (iLC - i - 1))) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == -90) {
      double dDeltaX=dFW - dH;
      double dDeltaY=(dFW + dH) / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
  }
  finally {
    itm.dispose();
  }
}",0.9988271670753812
73996,"/** 
 * @param g2d
 * @param f
 * @param dX
 * @param dY
 * @param sText
 * @param iAngleInDegrees
 */
private final void showCenterValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  SVGGraphics2D g2d=(SVGGraphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  if (bShadow) {
    bShadow=la.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=(Math.sin(dAngleInRadians));
  final double dCosTheta=(Math.cos(dAngleInRadians));
  final ITextMetrics itm=new SwingTextMetrics(_sxs,la);
  try {
    final double dFW=itm.getFullWidth();
    final double dH=itm.getHeight();
    final double dD=itm.getDescent();
    final double dFH=itm.getFullHeight();
    double dXOffset=0, dW=0;
    final int iLC=itm.getLineCount();
    final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(la.getCaption().getValue());
    TextLayout tl;
    final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
    double dRotateX=dX;
    double dRotateY=dY;
    dX-=dFW / 2;
    dY+=dH / 2;
    if (dAngleInDegrees == 0) {
      double dYHalfOffset=(dFH + dH) / 2d;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dYHalfOffset + ins.getTop() + dH * (i + 1) - dD));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dFW - dFW * dCosTheta;
      double dDeltaY=dFW * dSineTheta + dH / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH),false);
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(iLC - i - 1);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * i)) - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      double dDeltaX=dFW - dFW * dCosTheta - dH * dSineTheta;
      double dDeltaY=dFW * dSineTheta + dH / 2 - dH * dCosTheta;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    }
 else     if (dAngleInDegrees == 90) {
      double dDeltaX=dFW;
      double dDeltaY=(dFW - dH) / 2;
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * (iLC - i - 1))) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == -90) {
      double dDeltaX=dFW - dH;
      double dDeltaY=(dFW + dH) / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
  }
  finally {
    itm.dispose();
  }
}","/** 
 * @param g2d
 * @param f
 * @param dX
 * @param dY
 * @param sText
 * @param iAngleInDegrees
 */
private final void showCenterValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  SVGGraphics2D g2d=(SVGGraphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  if (bShadow) {
    bShadow=la.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=(Math.sin(dAngleInRadians));
  final double dCosTheta=(Math.cos(dAngleInRadians));
  final ITextMetrics itm=_sxs.getTextMetrics(la);
  try {
    final double dFW=itm.getFullWidth();
    final double dH=itm.getHeight();
    final double dD=itm.getDescent();
    final double dFH=itm.getFullHeight();
    double dXOffset=0, dW=0;
    final int iLC=itm.getLineCount();
    final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(la.getCaption().getValue());
    TextLayout tl;
    final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
    double dRotateX=dX;
    double dRotateY=dY;
    dX-=dFW / 2;
    dY+=dH / 2;
    if (dAngleInDegrees == 0) {
      double dYHalfOffset=(dFH + dH) / 2d;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dYHalfOffset + ins.getTop() + dH * (i + 1) - dD));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dFW - dFW * dCosTheta;
      double dDeltaY=dFW * dSineTheta + dH / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH),false);
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < itm.getLineCount(); i++) {
            tl=((SwingTextMetrics)itm).getLayout(iLC - i - 1);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * i)) - ins.getBottom()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      double dDeltaX=dFW - dFW * dCosTheta - dH * dSineTheta;
      double dDeltaY=dFW * dSineTheta + dH / 2 - dH * dCosTheta;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    }
 else     if (dAngleInDegrees == 90) {
      double dDeltaX=dFW;
      double dDeltaY=(dFW - dH) / 2;
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * (iLC - i - 1))) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
 else     if (dAngleInDegrees == -90) {
      double dDeltaX=dFW - dH;
      double dDeltaY=(dFW + dH) / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
        g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < iLC; i++) {
            tl=((SwingTextMetrics)itm).getLayout(i);
            if (bRightAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
            }
 else             if (bCenterAligned) {
              dW=tl.getBounds().getWidth();
              dXOffset=-ins.getLeft() + (dFW - dW) / 2;
            }
            tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
          }
        }
        renderOutline(ipr,la.getOutline(),r2d);
      }
      g2d.rotate(-dAngleInRadians,dX,dY);
    }
  }
  finally {
    itm.dispose();
  }
}",0.9988260405549626
73997,"public Object next(){
  try {
    if (!this.hasNext)     return null;
    Object result=this.currentValue;
    boolean accept=false;
    while (this.dataSetIterator.next()) {
      accept=true;
      Iterator it=this.levelValueMap.keySet().iterator();
      while (it.hasNext()) {
        String key=it.next().toString();
        Object value=this.levelValueMap.get(key);
        if (ScriptEvalUtil.compare(value,this.dataSetIterator.getValue(this.dataSetIterator.getFieldIndex(key))) != 0) {
          accept=false;
          break;
        }
      }
      if (accept) {
        this.currentValue=this.dataSetIterator.getValue(this.dataSetIterator.getFieldIndex(this.attribute == null ? this.targetLevelName : OlapExpressionUtil.getAttributeColumnName(this.targetLevelName,this.attribute)));
        break;
      }
    }
    this.hasNext=accept;
    return result;
  }
 catch (  BirtException e) {
    return null;
  }
}","public Object next(){
  try {
    if (!this.hasNext)     return null;
    Object result=this.currentValue;
    boolean accept=false;
    while (this.dataSetIterator.next()) {
      accept=true;
      Iterator it=this.levelValueMap.keySet().iterator();
      while (it.hasNext()) {
        String key=it.next().toString();
        Object value=this.levelValueMap.get(key);
        if (ScriptEvalUtil.compare(value,this.dataSetIterator.getValue(this.dataSetIterator.getFieldIndex(key))) != 0) {
          accept=false;
          break;
        }
      }
      if (accept) {
        this.currentValue=this.dataSetIterator.getValue(this.dataSetIterator.getFieldIndex(this.attribute == null ? this.targetLevelName : OlapExpressionUtil.getAttributeColumnName(this.targetLevelName,this.attribute)));
        break;
      }
    }
    this.hasNext=accept;
    return DataTypeUtil.convert(result,targetDateType);
  }
 catch (  BirtException e) {
    return null;
  }
}",0.9739222990952634
73998,"public MemberValueIterator(IDatasetIterator it,Map levelValueMap,String targetLevelName,String attribute){
  this.dataSetIterator=it;
  this.hasNext=true;
  this.levelValueMap=levelValueMap;
  this.targetLevelName=targetLevelName;
  this.attribute=attribute;
  this.next();
}","public MemberValueIterator(IDatasetIterator it,Map levelValueMap,String targetLevelName,String attribute,int targetDataType){
  this.dataSetIterator=it;
  this.hasNext=true;
  this.levelValueMap=levelValueMap;
  this.targetLevelName=targetLevelName;
  this.attribute=attribute;
  this.targetDateType=targetDataType;
  this.next();
}",0.9060955518945636
73999,"/** 
 * Found drivers in the Jar file List
 * @param file
 * @return a List of JDBCDriverInformation
 */
public static void getJdbcDriverFromFile(List fileList){
  if (!failLoadFileList.isEmpty()) {
    for (int i=0; i < failLoadFileList.size(); i++) {
      if (!fileList.contains(failLoadFileList.get(i))) {
        fileList.add(failLoadFileList.get(i));
      }
    }
  }
  URLClassLoader urlClassLoader=createClassLoader(fileList);
  jdbcDriverInfos.addAll(getJDBCDriverInfoList(fileList,urlClassLoader));
}","/** 
 * Found drivers in the Jar file List
 * @param file
 * @return a List of JDBCDriverInformation
 */
public static void getJdbcDriverFromFile(List fileList){
  if (failLoadFileList != null) {
    boolean duplicated;
    for (int i=0; i < failLoadFileList.size(); i++) {
      duplicated=false;
      File failToLoadFile=(File)failLoadFileList.get(i);
      for (int j=0; j < fileList.size(); j++) {
        if (failToLoadFile.getName().equals(((File)fileList.get(j)).getName())) {
          duplicated=true;
          break;
        }
      }
      if (!duplicated)       fileList.add(failToLoadFile);
    }
  }
  URLClassLoader urlClassLoader=createClassLoader(fileList);
  jdbcDriverInfos.addAll(getJDBCDriverInfoList(fileList,urlClassLoader));
}",0.6064924782264449
74000,"/** 
 * Valid bindings, return a list of invalid binding.
 * @param queryDefn
 * @param suppressException
 * @return
 * @throws DataException
 */
public static List validateBinding(ICubeQueryDefinition queryDefn,boolean suppressException) throws DataException {
  List result=new ArrayList();
  Set validMeasures=new HashSet();
  for (int i=0; i < queryDefn.getMeasures().size(); i++) {
    IMeasureDefinition measure=(IMeasureDefinition)queryDefn.getMeasures().get(i);
    validMeasures.add(measure.getName());
  }
  Set validDimLevels=new HashSet();
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.COLUMN_EDGE);
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.ROW_EDGE);
  for (int i=0; i < queryDefn.getBindings().size(); i++) {
    boolean isValid=true;
    IBinding binding=(IBinding)queryDefn.getBindings().get(i);
    if (binding.getAggrFunction() != null && binding.getExpression() instanceof IScriptExpression) {
      String expr=((IScriptExpression)binding.getExpression()).getText();
      if (expr == null && (AggregationFactory.getInstance().getAggrInfo(binding.getAggrFunction()) != null && !AggregationFactory.getInstance().getAggrInfo(binding.getAggrFunction()).needDataField()))       continue;
    }
    Set levels=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),queryDefn.getBindings());
    if (!validDimLevels.containsAll(levels)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_DIMENSION,binding.getBindingName());
    }
    String measureName=OlapExpressionCompiler.getReferencedScriptObject(binding.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
    if (measureName != null && !validMeasures.contains(measureName)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_MEASURE,binding.getBindingName());
    }
    if ((binding.getAggregatOns().size() > 0 && binding.getAggrFunction() == null)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_MISSING_AGGR_FUNC,binding.getBindingName());
    }
    if (!isValid)     result.add(binding);
  }
  return result;
}","/** 
 * Valid bindings, return a list of invalid binding.
 * @param queryDefn
 * @param suppressException
 * @return
 * @throws DataException
 */
public static List validateBinding(ICubeQueryDefinition queryDefn,boolean suppressException) throws DataException {
  List result=new ArrayList();
  Set validDimLevels=new HashSet();
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.COLUMN_EDGE);
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.ROW_EDGE);
  for (int i=0; i < queryDefn.getBindings().size(); i++) {
    boolean isValid=true;
    IBinding binding=(IBinding)queryDefn.getBindings().get(i);
    if (binding.getAggrFunction() != null && binding.getExpression() instanceof IScriptExpression) {
      String expr=((IScriptExpression)binding.getExpression()).getText();
      if (expr == null && (AggregationFactory.getInstance().getAggrInfo(binding.getAggrFunction()) != null && !AggregationFactory.getInstance().getAggrInfo(binding.getAggrFunction()).needDataField()))       continue;
    }
    Set levels=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),queryDefn.getBindings());
    if (!validDimLevels.containsAll(levels)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_DIMENSION,binding.getBindingName());
    }
    if ((binding.getAggregatOns().size() > 0 && binding.getAggrFunction() == null)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_MISSING_AGGR_FUNC,binding.getBindingName());
    }
    if (!isValid)     result.add(binding);
  }
  return result;
}",0.8479472883933097
