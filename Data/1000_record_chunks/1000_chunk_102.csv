record_number,buggy_code,fixed_code,code_similarity
101001,"public MapTailLOUDSTrie(MapTrie<T> orig,BvTree bvtree,TailArrayBuilder tailArrayBuilder){
  final List<T> values=new ArrayList<T>();
  setTrie(new TailLOUDSTrie(orig,bvtree,tailArrayBuilder,new NodeListener(){
    @Override @SuppressWarnings(""String_Node_Str"") public void listen(    Node node,    int id){
      if (node.isTerminate()) {
        values.add(((MapNode<T>)node).getValue());
      }
    }
  }
));
  setValues(values.toArray());
}","public MapTailLOUDSTrie(MapTrie<T> orig,TailArrayBuilder tailArrayBuilder){
  final List<T> values=new ArrayList<T>();
  setTrie(new TailLOUDSTrie(orig,tailArrayBuilder,new NodeListener(){
    @Override @SuppressWarnings(""String_Node_Str"") public void listen(    Node node,    int id){
      if (node.isTerminate()) {
        values.add(((MapNode<T>)node).getValue());
      }
    }
  }
));
  setValues(values.toArray());
}",0.9757785467128028
101002,"public TailLOUDSTrie(Trie orig,BvTree bvtree,TailArrayBuilder tailArrayBuilder,NodeListener listener){
  super(orig,bvtree,tailArrayBuilder,listener);
}","TailLOUDSTrie(Trie orig,TailArrayBuilder tailArrayBuilder,NodeListener listener,BvTree bvTree){
  super(orig,bvTree,tailArrayBuilder,listener);
}",0.8754208754208754
101003,"@Override public void writeExternal(ObjectOutput out) throws IOException {
  out.writeInt(size);
  bv.writeExternal(out);
}","@Override public void writeExternal(ObjectOutput out) throws IOException {
  out.writeObject(sbv);
  out.writeInt(size);
}",0.8
101004,"@Override public int get(int nodeId){
  if (nodeId == 0) {
    if (bv.isZero(0))     return -1;
 else     return 0;
  }
  int s=bv.select0(nodeId);
  if (bv.isZero(s + 1))   return -1;
  return bv.rank1(s);
}","@Override public int get(int nodeId){
  if (nodeId == 0) {
    if (sbv.isZero(0))     return -1;
 else     return 0;
  }
  int s=sbv.select0(nodeId);
  if (sbv.isZero(s + 1))   return -1;
  return sbv.rank1(s);
}",0.9904761904761904
101005,"public SBVTailIndex(byte[] bits,int bitSize,int size){
  this.size=size;
  this.bv=new BytesSuccinctBitVector(bits,bitSize);
}","public SBVTailIndex(byte[] bits,int bitSize,int size){
  this.sbv=new BytesSuccinctBitVector(bits,bitSize);
  this.size=size;
}",0.8616600790513834
101006,"@Override public void readExternal(ObjectInput in) throws IOException {
  size=in.readInt();
  bv.readExternal(in);
}","@Override public void readExternal(ObjectInput in) throws ClassNotFoundException, IOException {
  sbv=(SuccinctBitVector)in.readObject();
  size=in.readInt();
}",0.6787003610108303
101007,"@Override @SuppressWarnings(""String_Node_Str"") public MapNode<T> getRoot(){
  return new MapTailPatriciaTrieNodeAdapter<T>((MapTailPatriciaTrieNode<T>)super.getRoot(),getTails());
}","@Override @SuppressWarnings(""String_Node_Str"") public MapNode<T> getRoot(){
  return new MapTailPatriciaTrieNodeAdapter<T>((MapTailPatriciaTrieNode<T>)((TailPatriciaTrieNodeAdapter)super.getRoot()).getNode(),getTails());
}",0.8982630272952854
101008,"@Test public void test_termId() throws Exception {
  String[] words={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  TermIdTrie t=buildSecondTrie(trieWithWords(words));
  Set<Integer> ids=new HashSet<>();
  for (int i=0; i < words.length; i++) {
    ids.add(i);
  }
  Assert.assertEquals(words.length,ids.size());
  for (  String w : words) {
    ids.remove(t.getTermId(w));
  }
  Assert.assertEquals(0,ids.size());
}","@Test public void test_termId() throws Exception {
  String[] words={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  TermIdTrie t=buildSecondTrie(trieWithWords(words));
  Set<Integer> ids=new HashSet<Integer>();
  for (int i=0; i < words.length; i++) {
    ids.add(i);
  }
  Assert.assertEquals(words.length,ids.size());
  for (  String w : words) {
    ids.remove(t.getTermId(w));
  }
  Assert.assertEquals(0,ids.size());
}",0.992497320471597
101009,"public void unsetIfLE(int index){
  if (size <= index) {
    extend(index);
  }
  size=index + 1;
}","public void unsetIfLE(int index){
  if (index / 8 >= bytes.length) {
    extend(index);
  }
  size=index + 1;
}",0.8666666666666667
101010,"private void build(Node node,int nodeIndex,FastBitSet bs,TermNodeListener listener){
  char[] letters=node.getLetters();
  int lettersLen=letters.length;
  for (int i=1; i < lettersLen; i++) {
    int cid=getCharId(letters[i]);
    int empty=findFirstEmptyCheck();
    setCheck(empty,nodeIndex);
    base[nodeIndex]=empty - cid;
    nodeIndex=empty;
  }
  if (node.isTerminate()) {
    bs.set(nodeIndex);
    listener.listen(node,nodeIndex);
  }
 else   if (bs.size() <= nodeIndex) {
    bs.unsetIfLE(nodeIndex);
  }
  Node[] children=node.getChildren();
  int childrenLen=children.length;
  if (childrenLen == 0)   return;
  int[] heads=new int[childrenLen];
  int maxHead=0;
  int minHead=Integer.MAX_VALUE;
  for (int i=0; i < childrenLen; i++) {
    heads[i]=getCharId(children[i].getLetters()[0]);
    maxHead=Math.max(maxHead,heads[i]);
    minHead=Math.min(minHead,heads[i]);
  }
  int offset=findInsertOffset(heads,minHead,maxHead);
  base[nodeIndex]=offset;
  for (  int cid : heads) {
    setCheck(offset + cid,nodeIndex);
  }
  Map<Integer,List<Pair<Node,Integer>>> nodes=new TreeMap<Integer,List<Pair<Node,Integer>>>(new Comparator<Integer>(){
    @Override public int compare(    Integer arg0,    Integer arg1){
      return arg1 - arg0;
    }
  }
);
  for (int i=0; i < children.length; i++) {
    Node[] c=children[i].getChildren();
    int n=0;
    if (c != null) {
      n=c.length;
    }
    List<Pair<Node,Integer>> p=nodes.get(n);
    if (p == null) {
      p=new ArrayList<Pair<Node,Integer>>();
      nodes.put(n,p);
    }
    p.add(Pair.create(children[i],heads[i]));
  }
  for (  Map.Entry<Integer,List<Pair<Node,Integer>>> e : nodes.entrySet()) {
    for (    Pair<Node,Integer> e2 : e.getValue()) {
      build(e2.getFirst(),e2.getSecond() + offset,bs,listener);
    }
  }
}","private void build(Node node,int nodeIndex,FastBitSet bs,TermNodeListener listener){
  char[] letters=node.getLetters();
  int lettersLen=letters.length;
  for (int i=1; i < lettersLen; i++) {
    bs.unsetIfLE(nodeIndex);
    int cid=getCharId(letters[i]);
    int empty=findFirstEmptyCheck();
    setCheck(empty,nodeIndex);
    base[nodeIndex]=empty - cid;
    nodeIndex=empty;
  }
  if (node.isTerminate()) {
    bs.set(nodeIndex);
    listener.listen(node,nodeIndex);
  }
 else   if (bs.size() <= nodeIndex) {
    bs.unsetIfLE(nodeIndex);
  }
  Node[] children=node.getChildren();
  int childrenLen=children.length;
  if (childrenLen == 0)   return;
  int[] heads=new int[childrenLen];
  int maxHead=0;
  int minHead=Integer.MAX_VALUE;
  for (int i=0; i < childrenLen; i++) {
    heads[i]=getCharId(children[i].getLetters()[0]);
    maxHead=Math.max(maxHead,heads[i]);
    minHead=Math.min(minHead,heads[i]);
  }
  int offset=findInsertOffset(heads,minHead,maxHead);
  base[nodeIndex]=offset;
  for (  int cid : heads) {
    setCheck(offset + cid,nodeIndex);
  }
  Map<Integer,List<Pair<Node,Integer>>> nodes=new TreeMap<Integer,List<Pair<Node,Integer>>>(new Comparator<Integer>(){
    @Override public int compare(    Integer arg0,    Integer arg1){
      return arg1 - arg0;
    }
  }
);
  for (int i=0; i < children.length; i++) {
    Node[] c=children[i].getChildren();
    int n=0;
    if (c != null) {
      n=c.length;
    }
    List<Pair<Node,Integer>> p=nodes.get(n);
    if (p == null) {
      p=new ArrayList<Pair<Node,Integer>>();
      nodes.put(n,p);
    }
    p.add(Pair.create(children[i],heads[i]));
  }
  for (  Map.Entry<Integer,List<Pair<Node,Integer>>> e : nodes.entrySet()) {
    for (    Pair<Node,Integer> e2 : e.getValue()) {
      build(e2.getFirst(),e2.getSecond() + offset,bs,listener);
    }
  }
}",0.9920088178561588
101011,"@Override public char[] getLetters(){
  StringBuilder ret=new StringBuilder();
  if (firstChar != 0)   ret.append(firstChar);
  int nid=nodeId;
  while (true) {
    if (term.get(nid))     return ret.toString().toCharArray();
    CharSequence children=listupChildChars(nid);
    int n=children.length();
    if (n == 0 || n > 1)     return ret.toString().toCharArray();
    char c=children.charAt(0);
    ret.append(c);
    nid=base[nid] + charToCode[c];
  }
}","@Override public char[] getLetters(){
  StringBuilder ret=new StringBuilder();
  if (firstChar != 0)   ret.append(firstChar);
  return ret.toString().toCharArray();
}",0.5312
101012,"public BytesSuccinctBitVector(int initialCapacity){
  vector=new byte[initialCapacity / 8 + 1];
  int blockSize=CACHE_WIDTH;
  int size=initialCapacity / blockSize + 1;
  countCache0=new int[size];
  indexCache0=new int[size + 1];
}","public BytesSuccinctBitVector(byte[] bytes,int bits){
  this.vector=Arrays.copyOf(bytes,containerBytesCount(bits));
  int size=bits / CACHE_WIDTH + 1;
  countCache0=new int[size];
  indexCache0=new int[size + 1];
  throw new UnsupportedOperationException();
}",0.5091649694501018
101013,"public Rank0OnlySuccinctBitVector(byte[] bytes,int bits){
  vector=Arrays.copyOf(bytes,bits / 8 + (bits % 8 != 0 ? 1 : 0));
  int blockSize=CACHE_WIDTH;
  int size=vector.length / blockSize + 1;
  countCache0=new int[size];
  int sum=0;
  for (int i=0; i < bytes.length; i++) {
    sum+=BITCOUNTS0[bytes[i] & 0xff];
    int ci=size / CACHE_WIDTH;
    countCache0[ci]=sum;
  }
}","public Rank0OnlySuccinctBitVector(byte[] bytes,int bits){
  this.size=bits;
  this.vector=Arrays.copyOf(bytes,containerCount(bits,8));
  this.countCache0=new int[containerCount(vector.length,8)];
  int sum=0;
  int n=vector.length;
  for (int i=0; i < n; i++) {
    sum+=BITCOUNTS0[bytes[i] & 0xff];
    countCache0[i / 8]=sum;
  }
}",0.5154929577464789
101014,"public void append1(){
  int i=size / 8;
  int ci=size / CACHE_WIDTH;
  if (i >= vector.length) {
    extend();
  }
  if (size % CACHE_WIDTH == 0 && ci > 0) {
    countCache1[ci]=countCache1[ci - 1];
  }
  int r=size % 8;
  vector[i]|=BITS[r];
  size++;
}","public void append1(){
  int i=size / 8;
  int ci=size / CACHE_WIDTH;
  prepareAppend(i,ci);
  countCache1[ci]++;
  int r=size % 8;
  vector[i]|=BITS[r];
  size++;
}",0.7238095238095238
101015,"public void append0(){
  int i=size / 8;
  int ci=size / CACHE_WIDTH;
  if (i >= vector.length) {
    extend();
  }
  if (size % CACHE_WIDTH == 0 && ci > 0) {
    countCache1[ci]=countCache1[ci - 1];
  }
  countCache1[ci]++;
  size++;
}","public void append0(){
  int i=size / 8;
  int ci=size / CACHE_WIDTH;
  prepareAppend(i,ci);
  size++;
}",0.5647058823529412
101016,"public Rank1OnlySuccinctBitVector(byte[] bytes,int bits){
  this.vector=Arrays.copyOf(bytes,bits / 8 + (bits % 8 != 0 ? 1 : 0));
  this.size=bits;
  int blockSize=CACHE_WIDTH;
  int size=vector.length / blockSize + 1;
  countCache1=new int[size];
  int sum=0;
  for (int i=0; i < bytes.length; i++) {
    sum+=BITCOUNTS1[bytes[i] & 0xff];
    int ci=size / CACHE_WIDTH;
    countCache1[ci]=sum;
  }
}","public Rank1OnlySuccinctBitVector(byte[] bytes,int bits){
  this.size=bits;
  this.vector=Arrays.copyOf(bytes,containerCount(bits,8));
  this.countCache1=new int[containerCount(vector.length,8)];
  int sum=0;
  int n=vector.length;
  for (int i=0; i < n; i++) {
    sum+=BITCOUNTS1[bytes[i] & 0xff];
    countCache1[i / 8]=sum;
  }
}",0.4583901773533424
101017,"@Override public int getTermId(String text){
  int nodeIndex=0;
  int n=text.length();
  for (int i=0; i < n; i++) {
    char cid=charToCode[text.charAt(i)];
    if (cid == 0)     return -1;
    int next=base[nodeIndex] + cid;
    if (next < 0 || check[next] != nodeIndex)     return -1;
    nodeIndex=next;
  }
  return term.get(nodeIndex) ? term.rank1(nodeIndex) - 1 : -1;
}","@Override public int getTermId(String text){
  int nid=getNodeId(text);
  return term.get(nid) ? term.rank1(nid) - 1 : -1;
}",0.456
101018,"@Override public int getNodeId(){
  return nodeId;
}","public int getNodeId(String text){
  int nodeIndex=0;
  int n=text.length();
  for (int i=0; i < n; i++) {
    char cid=charToCode[text.charAt(i)];
    if (cid == 0)     return -1;
    int next=base[nodeIndex] + cid;
    if (next < 0 || check[next] != nodeIndex)     return -1;
    nodeIndex=next;
  }
  return nodeIndex;
}",0.1813333333333333
101019,"public void ensureCapacity(int index){
  if (index / 8 >= bytes.length) {
    extend(index);
  }
}","public void ensureCapacity(int index){
  if ((index / 8 + 1) >= bytes.length) {
    extend(index);
  }
}",0.9702970297029704
101020,"public void unsetIfLE(int index){
  if (index / 8 >= bytes.length) {
    extend(index);
  }
  size=index + 1;
}","public void unsetIfLE(int index){
  if ((index / 8 + 1) >= bytes.length) {
    extend(index);
  }
  size=Math.max(size,index + 1);
}",0.9135802469135802
101021,"@Override public boolean contains(String text){
  int nodeIndex=0;
  int n=text.length();
  for (int i=0; i < n; i++) {
    char cid=charToCode[text.charAt(i)];
    if (cid == 0)     return false;
    int next=base[nodeIndex] + cid;
    if (check[next] != nodeIndex)     return false;
    nodeIndex=next;
  }
  return term.get(nodeIndex);
}","@Override public boolean contains(String text){
  int nodeIndex=0;
  int n=text.length();
  for (int i=0; i < n; i++) {
    char cid=charToCode[text.charAt(i)];
    if (cid == 0)     return false;
    int next=base[nodeIndex] + cid;
    if (next < 0 || check[next] != nodeIndex)     return false;
    nodeIndex=next;
  }
  return term.get(nodeIndex);
}",0.9826589595375722
101022,"private int getIndex(String text){
  try {
    int nodeIndex=0;
    int n=text.length();
    for (int i=0; i < n; i++) {
      int cid=findCharId(text.charAt(i));
      if (cid == -1)       return -1;
      int next=base[nodeIndex] + cid;
      if (check[next] != nodeIndex)       return -1;
      nodeIndex=next;
    }
    return nodeIndex;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    return -1;
  }
}","private int getIndex(String text){
  try {
    int nodeIndex=0;
    int n=text.length();
    for (int i=0; i < n; i++) {
      int cid=findCharId(text.charAt(i));
      if (cid == -1)       return -1;
      int next=base[nodeIndex] + cid;
      if (next < 0 || check[next] != nodeIndex)       return -1;
      nodeIndex=next;
    }
    return nodeIndex;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    return -1;
  }
}",0.985645933014354
101023,"@Override public boolean contains(String text){
  int nodeIndex=0;
  FastTailCharIterator it=new FastTailCharIterator(tails,-1);
  int n=text.length();
  for (int i=0; i < n; i++) {
    char cid=charToCode[text.charAt(i)];
    if (cid == 0)     return false;
    int next=base[nodeIndex] + cid;
    if (check[next] != nodeIndex)     return false;
    nodeIndex=next;
    int ti=tail[nodeIndex];
    if (ti == -1)     continue;
    it.setIndex(ti);
    char c;
    while ((c=it.getNext()) != '\0') {
      i++;
      if (i == n)       return false;
      if (text.charAt(i) != c)       return false;
    }
  }
  return term.get(nodeIndex);
}","@Override public boolean contains(String text){
  int nodeIndex=0;
  FastTailCharIterator it=new FastTailCharIterator(tails,-1);
  int n=text.length();
  for (int i=0; i < n; i++) {
    char cid=charToCode[text.charAt(i)];
    if (cid == 0)     return false;
    int next=base[nodeIndex] + cid;
    if (next < 0 || check[next] != nodeIndex)     return false;
    nodeIndex=next;
    int ti=tail[nodeIndex];
    if (ti == -1)     continue;
    it.setIndex(ti);
    char c;
    while ((c=it.getNext()) != '\0') {
      i++;
      if (i == n)       return false;
      if (text.charAt(i) != c)       return false;
    }
  }
  return term.get(nodeIndex);
}",0.9907120743034056
101024,"@SuppressWarnings(""String_Node_Str"") private T insert(MapNode<T> node,char[] letters,int offset,T value){
  int lettersRest=letters.length - offset;
  while (true) {
    int thisLettersLength=node.getLetters().length;
    int n=Math.min(lettersRest,thisLettersLength);
    int i=0;
    while (i < n && (letters[i + offset] - node.getLetters()[i]) == 0)     i++;
    if (i != n) {
      MapNode<T> child1=new MapNode<T>(Arrays.copyOfRange(node.getLetters(),i,node.getLetters().length),node.isTerminate(),node.getChildren(),((MapNode<T>)node).getValue());
      MapNode<T> child2=new MapNode<T>(Arrays.copyOfRange(letters,i + offset,letters.length),true,value);
      node.setLetters(Arrays.copyOfRange(node.getLetters(),0,i));
      node.setTerminate(false);
      node.setChildren((child1.getLetters()[0] < child2.getLetters()[0]) ? new Node[]{child1,child2} : new Node[]{child2,child1});
      node.setValue(null);
      size++;
    }
 else     if (lettersRest == thisLettersLength) {
      if (!node.isTerminate()) {
        node.setTerminate(true);
        size++;
      }
      MapNode<T> mn=(MapNode<T>)node;
      T old=mn.getValue();
      mn.setValue(value);
      return old;
    }
 else     if (lettersRest < thisLettersLength) {
      MapNode<T> newChild=new MapNode<T>(Arrays.copyOfRange(node.getLetters(),lettersRest,thisLettersLength),node.isTerminate(),node.getChildren());
      newChild.setValue(((MapNode<T>)node).getValue());
      node.setLetters(Arrays.copyOfRange(node.getLetters(),0,i));
      node.setTerminate(true);
      node.setChildren(new Node[]{newChild});
      ((MapNode<T>)node).setValue(value);
      size++;
    }
 else {
      int index=0;
      int end=node.getChildren().length;
      boolean cont=false;
      if (end > 16) {
        int start=0;
        while (start < end) {
          index=(start + end) / 2;
          MapNode<T> child=node.getChildren()[index];
          int c=letters[i + offset] - child.getLetters()[0];
          if (c == 0) {
            node=child;
            offset+=i;
            lettersRest-=i;
            cont=true;
            break;
          }
          if (c < 0) {
            end=index;
          }
 else           if (start == index) {
            index=end;
            break;
          }
 else {
            start=index;
          }
        }
      }
 else {
        for (; index < end; index++) {
          MapNode<T> child=node.getChildren()[index];
          int c=letters[i + offset] - child.getLetters()[0];
          if (c < 0)           break;
          if (c == 0) {
            node=child;
            offset+=i;
            lettersRest-=i;
            cont=true;
            break;
          }
        }
      }
      if (cont)       continue;
      node.addChild(index,new MapNode<T>(Arrays.copyOfRange(letters,i + offset,letters.length),true,value));
      size++;
    }
    break;
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") private T insert(MapNode<T> node,char[] letters,int offset,T value){
  int lettersRest=letters.length - offset;
  while (true) {
    int thisLettersLength=node.getLetters().length;
    int n=Math.min(lettersRest,thisLettersLength);
    int i=0;
    while (i < n && (letters[i + offset] - node.getLetters()[i]) == 0)     i++;
    if (i != n) {
      MapNode<T> child1=new MapNode<T>(Arrays.copyOfRange(node.getLetters(),i,node.getLetters().length),node.isTerminate(),node.getChildren(),((MapNode<T>)node).getValue());
      MapNode<T> child2=new MapNode<T>(Arrays.copyOfRange(letters,i + offset,letters.length),true,value);
      node.setLetters(Arrays.copyOfRange(node.getLetters(),0,i));
      node.setTerminate(false);
      node.setChildren((child1.getLetters()[0] < child2.getLetters()[0]) ? new MapNode[]{child1,child2} : new MapNode[]{child2,child1});
      node.setValue(null);
      size++;
    }
 else     if (lettersRest == thisLettersLength) {
      if (!node.isTerminate()) {
        node.setTerminate(true);
        size++;
      }
      T old=node.getValue();
      node.setValue(value);
      return old;
    }
 else     if (lettersRest < thisLettersLength) {
      MapNode<T> newChild=new MapNode<T>(Arrays.copyOfRange(node.getLetters(),lettersRest,thisLettersLength),node.isTerminate(),node.getChildren());
      newChild.setValue(node.getValue());
      node.setLetters(Arrays.copyOfRange(node.getLetters(),0,i));
      node.setTerminate(true);
      node.setChildren(new MapNode[]{newChild});
      node.setValue(value);
      size++;
    }
 else {
      int index=0;
      int end=node.getChildren().length;
      boolean cont=false;
      if (end > 16) {
        int start=0;
        while (start < end) {
          index=(start + end) / 2;
          MapNode<T> child=node.getChildren()[index];
          int c=letters[i + offset] - child.getLetters()[0];
          if (c == 0) {
            node=child;
            offset+=i;
            lettersRest-=i;
            cont=true;
            break;
          }
          if (c < 0) {
            end=index;
          }
 else           if (start == index) {
            index=end;
            break;
          }
 else {
            start=index;
          }
        }
      }
 else {
        for (; index < end; index++) {
          MapNode<T> child=node.getChildren()[index];
          int c=letters[i + offset] - child.getLetters()[0];
          if (c < 0)           break;
          if (c == 0) {
            node=child;
            offset+=i;
            lettersRest-=i;
            cont=true;
            break;
          }
        }
      }
      if (cont)       continue;
      node.addChild(index,new MapNode<T>(Arrays.copyOfRange(letters,i + offset,letters.length),true,value));
      size++;
    }
    break;
  }
  return null;
}",0.4384039031190103
101025,"@SuppressWarnings(""String_Node_Str"") public MapNode<T> getNode(String text){
  MapNode<T> node=root;
  int n=text.length();
  for (int i=0; i < n; i++) {
    node=(MapNode<T>)node.getChild(text.charAt(i));
    if (node == null)     return null;
    char[] letters=node.getLetters();
    int lettersLen=letters.length;
    for (int j=1; j < lettersLen; j++) {
      i++;
      if (i == n)       return null;
      if (text.charAt(i) != letters[j])       return null;
    }
  }
  return node;
}","public MapNode<T> getNode(String text){
  MapNode<T> node=root;
  int n=text.length();
  for (int i=0; i < n; i++) {
    node=node.getChild(text.charAt(i));
    if (node == null)     return null;
    char[] letters=node.getLetters();
    int lettersLen=letters.length;
    for (int j=1; j < lettersLen; j++) {
      i++;
      if (i == n)       return null;
      if (text.charAt(i) != letters[j])       return null;
    }
  }
  return node;
}",0.9475935828877006
101026,"@Override public Node getRoot(){
  return new DoubleArrayNode(0);
}","@Override public IdNode getRoot(){
  return new DoubleArrayNode(0);
}",0.9852941176470588
101027,"public void save(OutputStream os) throws IOException {
  ObjectOutputStream out=new ObjectOutputStream(os);
  try {
    writeExternal(new ObjectOutputStream(os));
  }
  finally {
    out.flush();
  }
}","public void save(OutputStream os) throws IOException {
  ObjectOutputStream out=new ObjectOutputStream(os);
  try {
    writeExternal(out);
  }
  finally {
    out.flush();
  }
}",0.934036939313984
101028,"public void save(OutputStream os) throws IOException {
  ObjectOutputStream out=new ObjectOutputStream(os);
  try {
    writeExternal(new ObjectOutputStream(os));
  }
  finally {
    out.flush();
  }
}","public void save(OutputStream os) throws IOException {
  ObjectOutputStream out=new ObjectOutputStream(os);
  try {
    writeExternal(out);
  }
  finally {
    out.flush();
  }
}",0.934036939313984
101029,"public void save(OutputStream os) throws IOException {
  ObjectOutputStream out=new ObjectOutputStream(os);
  try {
    writeExternal(new ObjectOutputStream(os));
  }
  finally {
    out.flush();
  }
}","public void save(OutputStream os) throws IOException {
  ObjectOutputStream out=new ObjectOutputStream(os);
  try {
    writeExternal(out);
  }
  finally {
    out.flush();
  }
}",0.934036939313984
101030,"@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  char[] chars=prefix.toCharArray();
  int charsLen=chars.length;
  int checkLen=check.length;
  int nodeIndex=0;
  for (int i=0; i < charsLen; i++) {
    int cid=findCharId(chars[i]);
    if (cid == -1)     return ret;
    int next=base[nodeIndex] + cid;
    if (next < 0 || next >= checkLen || check[next] != nodeIndex)     return ret;
    nodeIndex=next;
  }
  if (term.get(nodeIndex)) {
    ret.add(prefix);
  }
  Deque<Pair<Integer,String>> q=new LinkedList<Pair<Integer,String>>();
  q.add(Pair.create(nodeIndex,prefix));
  while (!q.isEmpty()) {
    Pair<Integer,String> p=q.pop();
    int ni=p.getFirst();
    int b=base[ni];
    if (b == BASE_EMPTY)     continue;
    String c=p.getSecond();
    for (    char v : this.chars) {
      int next=b + charToCode[v];
      if (next >= checkLen)       continue;
      if (check[next] == ni) {
        String n=new StringBuilder(c).append(v).toString();
        if (term.get(next)) {
          ret.add(n);
        }
        q.push(Pair.create(next,n));
      }
    }
  }
  return ret;
}","@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  char[] chars=prefix.toCharArray();
  int charsLen=chars.length;
  int checkLen=check.length;
  int nodeIndex=0;
  for (int i=0; i < charsLen; i++) {
    int cid=findCharId(chars[i]);
    if (cid == -1)     return ret;
    int next=base[nodeIndex] + cid;
    if (next < 0 || next >= checkLen || check[next] != nodeIndex)     return ret;
    nodeIndex=next;
  }
  if (term.get(nodeIndex)) {
    ret.add(prefix);
  }
  Deque<Pair<Integer,String>> q=new LinkedList<Pair<Integer,String>>();
  q.add(Pair.create(nodeIndex,prefix));
  while (!q.isEmpty()) {
    Pair<Integer,String> p=q.pop();
    int ni=p.getFirst();
    int b=base[ni];
    if (b == BASE_EMPTY)     continue;
    String c=p.getSecond();
    for (    char v : this.chars) {
      int next=b + charToCode[v];
      if (next < 0 || next >= checkLen)       continue;
      if (check[next] == ni) {
        String n=new StringBuilder(c).append(v).toString();
        if (term.get(next)) {
          ret.add(n);
        }
        q.push(Pair.create(next,n));
      }
    }
  }
  return ret;
}",0.9948051948051948
101031,"@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  char[] chars=prefix.toCharArray();
  int charsLen=chars.length;
  int checkLen=check.length;
  int nodeIndex=0;
  for (int i=0; i < charsLen; i++) {
    int cid=findCharId(chars[i]);
    if (cid == -1)     return ret;
    int next=base[nodeIndex] + cid;
    if (next < 0 || next >= checkLen || check[next] != nodeIndex)     return ret;
    nodeIndex=next;
  }
  if (term.get(nodeIndex)) {
    ret.add(prefix);
  }
  Deque<Pair<Integer,String>> q=new LinkedList<Pair<Integer,String>>();
  q.add(Pair.create(nodeIndex,prefix));
  while (!q.isEmpty()) {
    Pair<Integer,String> p=q.pop();
    int ni=p.getFirst();
    int b=base[ni];
    if (b == BASE_EMPTY)     continue;
    String c=p.getSecond();
    for (    char v : this.chars) {
      int next=b + charToCode[v];
      if (next >= checkLen)       continue;
      if (check[next] == ni) {
        String n=new StringBuilder(c).append(v).toString();
        if (term.get(next)) {
          ret.add(n);
        }
        q.push(Pair.create(next,n));
      }
    }
  }
  return ret;
}","@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  char[] chars=prefix.toCharArray();
  int charsLen=chars.length;
  int checkLen=check.length;
  int nodeIndex=0;
  for (int i=0; i < charsLen; i++) {
    int cid=findCharId(chars[i]);
    if (cid == -1)     return ret;
    int next=base[nodeIndex] + cid;
    if (next < 0 || next >= checkLen || check[next] != nodeIndex)     return ret;
    nodeIndex=next;
  }
  if (term.get(nodeIndex)) {
    ret.add(prefix);
  }
  Deque<Pair<Integer,String>> q=new LinkedList<Pair<Integer,String>>();
  q.add(Pair.create(nodeIndex,prefix));
  while (!q.isEmpty()) {
    Pair<Integer,String> p=q.pop();
    int ni=p.getFirst();
    int b=base[ni];
    if (b == BASE_EMPTY)     continue;
    String c=p.getSecond();
    for (    char v : this.chars) {
      int next=b + charToCode[v];
      if (next < 0 || next >= checkLen)       continue;
      if (check[next] == ni) {
        String n=new StringBuilder(c).append(v).toString();
        if (term.get(next)) {
          ret.add(n);
        }
        q.push(Pair.create(next,n));
      }
    }
  }
  return ret;
}",0.9948051948051948
101032,"public DoubleArray(Trie trie,int arraySize){
  size=trie.size();
  base=new int[arraySize];
  Arrays.fill(base,BASE_EMPTY);
  check=new int[arraySize];
  Arrays.fill(check,-1);
  term=new BitSet(65536);
  build(trie.getRoot(),0);
}","public DoubleArray(Trie trie,int arraySize){
  if (arraySize <= 1)   arraySize=2;
  size=trie.size();
  base=new int[arraySize];
  Arrays.fill(base,BASE_EMPTY);
  check=new int[arraySize];
  Arrays.fill(check,-1);
  term=new BitSet(arraySize);
  build(trie.getRoot(),0);
}",0.8986083499005965
101033,"public TailDoubleArray(Trie orig,TailBuilder tb){
  size=orig.size();
  base=new int[size];
  Arrays.fill(base,BASE_EMPTY);
  check=new int[size];
  Arrays.fill(check,-1);
  tail=new int[size];
  Arrays.fill(tail,-1);
  term=new BitSet(65536);
  Arrays.fill(charToCode,(char)0);
  build(orig.getRoot(),0,tb);
  tails=tb.getTails();
}","public TailDoubleArray(Trie orig,TailBuilder tb){
  size=orig.size();
  int as=size;
  if (as <= 1)   as=2;
  base=new int[as];
  Arrays.fill(base,BASE_EMPTY);
  check=new int[as];
  Arrays.fill(check,-1);
  tail=new int[as];
  Arrays.fill(tail,-1);
  term=new BitSet(65536);
  Arrays.fill(charToCode,(char)0);
  build(orig.getRoot(),0,tb);
  tails=tb.getTails();
}",0.9197707736389684
101034,"private void extend(){
  int vectorSize=(int)(vector.length * 1.2) + 1;
  vector=Arrays.copyOf(vector,vectorSize);
  int blockSize=CACHE_WIDTH / 8;
  int size=vectorSize / blockSize + (((vectorSize % blockSize) != 0) ? 1 : 0);
  countCache0=Arrays.copyOf(countCache0,size);
  indexCache0=Arrays.copyOf(indexCache0,size);
}","private void extend(){
  int vectorSize=(int)(vector.length * 1.2) + 1;
  vector=Arrays.copyOf(vector,vectorSize);
  int blockSize=CACHE_WIDTH / 8;
  int size=vectorSize / blockSize + (((vectorSize % blockSize) != 0) ? 1 : 0);
  countCache0=Arrays.copyOf(countCache0,size);
  indexCache0=Arrays.copyOf(indexCache0,size + 1);
}",0.9938271604938272
101035,"private void extend(){
  int nsz=(int)(labels.length * 1.2);
  labels=Arrays.copyOf(labels,nsz);
  tail=Arrays.copyOf(tail,nsz);
}","private void extend(){
  int nsz=(int)(labels.length * 1.2);
  if (nsz <= labels.length)   nsz=labels.length * 2 + 1;
  labels=Arrays.copyOf(labels,nsz);
  tail=Arrays.copyOf(tail,nsz);
}",0.8201892744479495
101036,"public void save(OutputStream os) throws IOException {
  DataOutputStream dos=new DataOutputStream(os);
  dos.writeInt(size);
  dos.writeInt(size0);
  dos.writeInt(node1pos);
  dos.writeInt(node2pos);
  dos.writeInt(node3pos);
  trimToSize();
  dos.write(vector);
  for (  int e : countCache0) {
    dos.writeInt(e);
  }
  for (  int e : indexCache0) {
    dos.writeInt(e);
  }
}","public void save(OutputStream os) throws IOException {
  DataOutputStream dos=new DataOutputStream(os);
  dos.writeInt(size);
  dos.writeInt(size0);
  dos.writeInt(node1pos);
  dos.writeInt(node2pos);
  dos.writeInt(node3pos);
  trimToSize();
  dos.writeInt(vector.length);
  dos.write(vector);
  dos.writeInt(countCache0.length);
  for (  int e : countCache0) {
    dos.writeInt(e);
  }
  dos.writeInt(indexCache0.length);
  for (  int e : indexCache0) {
    dos.writeInt(e);
  }
  dos.flush();
}",0.8310502283105022
101037,"public void load(InputStream is) throws IOException {
  DataInputStream dis=new DataInputStream(is);
  size=dis.readInt();
  size0=dis.readInt();
  node1pos=dis.readInt();
  node2pos=dis.readInt();
  node3pos=dis.readInt();
  int vectorSize=size / 8 + 1;
  vector=new byte[vectorSize];
  dis.read(vector,0,vectorSize);
  int blockSize=CACHE_WIDTH / 8;
  int size=vectorSize / blockSize + (((vectorSize % blockSize) != 0) ? 1 : 0);
  countCache0=new int[size];
  for (int i=0; i < size; i++) {
    countCache0[i]=dis.readInt();
  }
  indexCache0=new int[size + 1];
  for (int i=0; i < size + 1; i++) {
    indexCache0[i]=dis.readInt();
  }
}","public void load(InputStream is) throws IOException {
  DataInputStream dis=new DataInputStream(is);
  size=dis.readInt();
  size0=dis.readInt();
  node1pos=dis.readInt();
  node2pos=dis.readInt();
  node3pos=dis.readInt();
  int vectorSize=dis.readInt();
  vector=new byte[vectorSize];
  dis.read(vector,0,vectorSize);
  int size=dis.readInt();
  countCache0=new int[size];
  for (int i=0; i < size; i++) {
    countCache0[i]=dis.readInt();
  }
  size=dis.readInt();
  indexCache0=new int[size];
  for (int i=0; i < size; i++) {
    indexCache0[i]=dis.readInt();
  }
}",0.8552522746071133
101038,"@Test public void test() throws Exception {
  Trie trie=createFirstTrie();
  System.out.println(""String_Node_Str"" + trie.getClass().getName());
  int c=0, chars=0;
  long b=0;
  LapTimer t=new LapTimer();
  for (  String word : new WikipediaTitles(wikipediaFilename)) {
    t.lap();
    trie.insert(word);
    b+=t.lap();
    ;
    c++;
    chars+=word.length();
  }
  System.out.println(String.format(""String_Node_Str"",(b / 1000000),c,chars));
  Trie second=trie;
  try {
    getClass().getMethod(""String_Node_Str"",Trie.class);
    System.out.print(""String_Node_Str"");
    t.lap();
    second=buildSecondTrie(trie);
    System.out.println(second.getClass().getName());
    System.out.println(""String_Node_Str"" + (t.lap() / 1000000) + ""String_Node_Str"");
  }
 catch (  NoSuchMethodException e) {
  }
  System.out.println(""String_Node_Str"");
  long sum=0;
  c=0;
  for (  String word : new WikipediaTitles(wikipediaFilename)) {
    t.lap();
    boolean found=second.contains(word);
    sum+=t.lap();
    c++;
    if (!found) {
      System.out.println(String.format(""String_Node_Str"",c,word));
      break;
    }
  }
  System.out.println(""String_Node_Str"" + (sum / 1000000) + ""String_Node_Str""+ c+ ""String_Node_Str"");
}","@Test public void test() throws Exception {
  Trie trie=createFirstTrie();
  System.out.println(""String_Node_Str"" + trie.getClass().getName());
  int c=0, chars=0;
  long b=0;
  LapTimer t=new LapTimer();
  for (  String word : new WikipediaTitles(wikipediaFilename)) {
    t.lap();
    trie.insert(word);
    b+=t.lap();
    ;
    c++;
    chars+=word.length();
  }
  System.out.println(String.format(""String_Node_Str"",(b / 1000000),c,chars));
  Trie second=trie;
  try {
    getClass().getDeclaredMethod(""String_Node_Str"",Trie.class);
    System.out.print(""String_Node_Str"");
    t.lap();
    second=buildSecondTrie(trie);
    System.out.println(second.getClass().getName());
    System.out.println(""String_Node_Str"" + (t.lap() / 1000000) + ""String_Node_Str"");
  }
 catch (  NoSuchMethodException e) {
  }
  System.out.println(""String_Node_Str"");
  long sum=0;
  c=0;
  for (  String word : new WikipediaTitles(wikipediaFilename)) {
    t.lap();
    boolean found=second.contains(word);
    sum+=t.lap();
    c++;
    if (!found) {
      System.out.println(String.format(""String_Node_Str"",c,word));
      break;
    }
  }
  System.out.println(""String_Node_Str"" + (sum / 1000000) + ""String_Node_Str""+ c+ ""String_Node_Str"");
  afterVerification(second);
}",0.9850384148807116
101039,"public void save(OutputStream os) throws IOException {
  BufferedOutputStream bos=new BufferedOutputStream(os);
  DataOutputStream dos=new DataOutputStream(bos);
  dos.writeInt(base.length);
  for (  int v : base) {
    dos.writeInt(v);
  }
  for (  int v : check) {
    dos.writeShort(v);
  }
  for (  int v : tail) {
    dos.writeInt(v);
  }
  dos.flush();
  ObjectOutputStream oos=new ObjectOutputStream(bos);
  oos.writeObject(term);
  oos.flush();
  dos.writeInt(firstEmptyCheck);
  dos.writeInt(tails.length());
  dos.writeChars(tails.toString());
  dos.writeInt(charCodes.size());
  for (  Map.Entry<Character,Integer> e : charCodes.entrySet()) {
    dos.writeChar(e.getKey());
    dos.writeInt(e.getValue());
  }
  dos.flush();
  bos.flush();
}","public void save(OutputStream os) throws IOException {
  BufferedOutputStream bos=new BufferedOutputStream(os);
  DataOutputStream dos=new DataOutputStream(bos);
  dos.writeInt(base.length);
  for (  int v : base) {
    dos.writeInt(v);
  }
  for (  int v : check) {
    dos.writeShort(v);
  }
  for (  int v : tail) {
    dos.writeInt(v);
  }
  dos.flush();
  ObjectOutputStream oos=new ObjectOutputStream(bos);
  oos.writeObject(term);
  oos.flush();
  dos.writeInt(tails.length());
  dos.writeChars(tails.toString());
  dos.writeInt(charCodes.size());
  for (  Map.Entry<Character,Integer> e : charCodes.entrySet()) {
    dos.writeChar(e.getKey());
    dos.writeInt(e.getValue());
  }
  dos.flush();
  bos.flush();
}",0.9775662814411964
101040,"private void setCheck(int index,short value){
  if (firstEmptyCheck == index) {
    firstEmptyCheck=findNextEmptyCheck(firstEmptyCheck);
  }
  check[index]=value;
  last=Math.max(last,index);
}","private void setCheck(int index,short value){
  check[index]=value;
  last=Math.max(last,index);
  if (base[index] == BASE_EMPTY)   base[index]--;
}",0.5747800586510264
101041,"public OptimizedTailDoubleArray(Trie trie,int arraySize,TailBuilder tb){
  base=new int[arraySize];
  Arrays.fill(base,BASE_EMPTY);
  check=new short[arraySize];
  Arrays.fill(check,(short)-1);
  tail=new int[arraySize];
  Arrays.fill(tail,-1);
  term=new BitSet(65536);
  int nodeIndex=0;
  base[0]=nodeIndex;
  Node root=trie.getRoot();
  if (root == null)   return;
  if (root.getLetters() != null) {
    if (root.getLetters().length == 0) {
      if (root.isTerminate())       term.set(0);
    }
 else {
      int c=getCharId(root.getLetters()[0]);
      check[c]=(short)c;
      nodeIndex=c;
      firstEmptyCheck=1;
    }
  }
  build(root,nodeIndex,tb);
  tails=tb.getTails();
}","public OptimizedTailDoubleArray(Trie trie,int arraySize,TailBuilder tb){
  base=new int[arraySize];
  Arrays.fill(base,BASE_EMPTY);
  check=new short[arraySize];
  Arrays.fill(check,(short)-1);
  tail=new int[arraySize];
  Arrays.fill(tail,-1);
  term=new BitSet(65536);
  int nodeIndex=0;
  base[0]=nodeIndex;
  Node root=trie.getRoot();
  if (root == null)   return;
  if (root.getLetters() != null) {
    if (root.getLetters().length == 0) {
      if (root.isTerminate())       term.set(0);
    }
 else {
      int c=getCharId(root.getLetters()[0]);
      check[c]=(short)c;
      nodeIndex=c;
    }
  }
  build(root,nodeIndex,tb);
  tails=tb.getTails();
}",0.98138495904691
101042,"public void load(InputStream is) throws IOException {
  BufferedInputStream bis=new BufferedInputStream(is);
  DataInputStream dis=new DataInputStream(bis);
  int len=dis.readInt();
  base=new int[len];
  for (int i=0; i < len; i++) {
    base[i]=dis.readInt();
  }
  check=new short[len];
  for (int i=0; i < len; i++) {
    check[i]=dis.readShort();
  }
  tail=new int[len];
  for (int i=0; i < len; i++) {
    tail[i]=dis.readInt();
  }
  ObjectInputStream ois=new ObjectInputStream(bis);
  try {
    term=(BitSet)ois.readObject();
  }
 catch (  ClassNotFoundException e) {
    throw new IOException(e);
  }
  firstEmptyCheck=dis.readInt();
  int n=dis.readInt();
  StringBuilder b=new StringBuilder(n);
  for (int i=0; i < n; i++) {
    b.append(dis.readChar());
  }
  tails=b;
  n=dis.readInt();
  for (int i=0; i < n; i++) {
    char c=dis.readChar();
    int v=dis.readInt();
    charCodes.put(c,v);
  }
}","public void load(InputStream is) throws IOException {
  BufferedInputStream bis=new BufferedInputStream(is);
  DataInputStream dis=new DataInputStream(bis);
  int len=dis.readInt();
  base=new int[len];
  for (int i=0; i < len; i++) {
    base[i]=dis.readInt();
  }
  check=new short[len];
  for (int i=0; i < len; i++) {
    check[i]=dis.readShort();
  }
  tail=new int[len];
  for (int i=0; i < len; i++) {
    tail[i]=dis.readInt();
  }
  ObjectInputStream ois=new ObjectInputStream(bis);
  try {
    term=(BitSet)ois.readObject();
  }
 catch (  ClassNotFoundException e) {
    throw new IOException(e);
  }
  int n=dis.readInt();
  StringBuilder b=new StringBuilder(n);
  for (int i=0; i < n; i++) {
    b.append(dis.readChar());
  }
  tails=b;
  n=dis.readInt();
  for (int i=0; i < n; i++) {
    char c=dis.readChar();
    int v=dis.readInt();
    charCodes.put(c,v);
  }
}",0.981574539363484
101043,"@Override public Iterable<String> commonPrefixSearch(String query){
  List<String> ret=new ArrayList<String>();
  char[] chars=query.toCharArray();
  int ci=0;
  int ni=0;
  if (tail[0] != -1) {
    TailCharIterator it=new TailCharIterator(tails,tail[0]);
    while (it.hasNext()) {
      ci++;
      if (ci >= chars.length)       return ret;
      if (it.next() != chars[ci])       return ret;
    }
    if (term.get(0))     ret.add(new String(chars,0,ci + 1));
  }
  TailCharIterator it=new TailCharIterator(tails,-1);
  for (; ci < chars.length; ci++) {
    int cid=findCharId(chars[ci]);
    if (cid == -1)     return ret;
    int b=base[ni];
    if (b == BASE_EMPTY)     return ret;
    int next=b + cid;
    if (check.length <= next || (next + check[next]) != ni)     return ret;
    ni=next;
    if (tail[ni] != -1) {
      it.setIndex(tail[ni]);
      while (it.hasNext()) {
        ci++;
        if (ci >= chars.length)         return ret;
        if (it.next() != chars[ci])         return ret;
      }
    }
    if (term.get(ni))     ret.add(new String(chars,0,ci + 1));
  }
  return ret;
}","@Override public Iterable<String> commonPrefixSearch(String query){
  List<String> ret=new ArrayList<String>();
  char[] chars=query.toCharArray();
  int ci=0;
  int ni=0;
  if (tail[0] != -1) {
    TailCharIterator it=new TailCharIterator(tails,tail[0]);
    while (it.hasNext()) {
      ci++;
      if (ci >= chars.length)       return ret;
      if (it.next() != chars[ci])       return ret;
    }
    if (term.get(0))     ret.add(new String(chars,0,ci + 1));
  }
  TailCharIterator it=new TailCharIterator(tails,-1);
  for (; ci < chars.length; ci++) {
    int cid=findCharId(chars[ci]);
    if (cid == -1)     return ret;
    int b=base[ni];
    if (b == BASE_EMPTY)     return ret;
    if (b == (BASE_EMPTY - 1))     return ret;
    int next=b + cid;
    if (check.length <= next || (next + check[next]) != ni)     return ret;
    ni=next;
    if (tail[ni] != -1) {
      it.setIndex(tail[ni]);
      while (it.hasNext()) {
        ci++;
        if (ci >= chars.length)         return ret;
        if (it.next() != chars[ci])         return ret;
      }
    }
    if (term.get(ni))     ret.add(new String(chars,0,ci + 1));
  }
  return ret;
}",0.9791018230324589
101044,"private void build(Node node,int nodeIndex,TailBuilder tb){
  char[] letters=node.getLetters();
  if (letters != null) {
    if (letters.length > 1) {
      int tailIndex=tb.insert(letters,1,letters.length - 1);
      tail[nodeIndex]=tailIndex;
    }
    if (node.isTerminate()) {
      term.set(nodeIndex);
    }
  }
  Node[] children=node.getChildren();
  if (children == null || children.length == 0)   return;
  int[] heads=new int[children.length];
  int maxHead=0;
  int minHead=Integer.MAX_VALUE;
  for (int i=0; i < children.length; i++) {
    heads[i]=getCharId(children[i].getLetters()[0]);
    maxHead=Math.max(maxHead,heads[i]);
    minHead=Math.min(minHead,heads[i]);
  }
  int empty=findFirstEmptyCheck();
  int offset=empty - minHead;
  while (true) {
    if (check.length <= (offset + maxHead)) {
      extend(offset + maxHead);
    }
    boolean found=true;
    for (    int cid : heads) {
      if (check[offset + cid] >= 0) {
        found=false;
        break;
      }
    }
    if (found)     break;
    empty=findNextEmptyCheck(empty);
    offset=empty - minHead;
  }
  base[nodeIndex]=offset;
  for (  int cid : heads) {
    if (cid > Short.MAX_VALUE) {
      throw new RuntimeException(""String_Node_Str"");
    }
    setCheck(offset + cid,(short)(nodeIndex - (offset + cid)));
  }
  Map<Integer,List<Pair<Node,Integer>>> nodes=new TreeMap<Integer,List<Pair<Node,Integer>>>(new Comparator<Integer>(){
    @Override public int compare(    Integer arg0,    Integer arg1){
      return arg1 - arg0;
    }
  }
);
  for (int i=0; i < children.length; i++) {
    Node[] c=children[i].getChildren();
    int n=0;
    if (c != null) {
      n=c.length;
    }
    List<Pair<Node,Integer>> p=nodes.get(n);
    if (p == null) {
      p=new ArrayList<Pair<Node,Integer>>();
      nodes.put(n,p);
    }
    p.add(Pair.create(children[i],heads[i]));
  }
  for (  Map.Entry<Integer,List<Pair<Node,Integer>>> e : nodes.entrySet()) {
    for (    Pair<Node,Integer> e2 : e.getValue()) {
      build(e2.getFirst(),e2.getSecond() + offset,tb);
    }
  }
}","private void build(Node node,int nodeIndex,TailBuilder tb){
  char[] letters=node.getLetters();
  if (letters != null) {
    if (letters.length > 1) {
      int tailIndex=tb.insert(letters,1,letters.length - 1);
      tail[nodeIndex]=tailIndex;
    }
    if (node.isTerminate()) {
      term.set(nodeIndex);
    }
  }
  Node[] children=node.getChildren();
  if (children == null || children.length == 0)   return;
  int[] heads=new int[children.length];
  int maxHead=0;
  int minHead=Integer.MAX_VALUE;
  for (int i=0; i < children.length; i++) {
    heads[i]=getCharId(children[i].getLetters()[0]);
    maxHead=Math.max(maxHead,heads[i]);
    minHead=Math.min(minHead,heads[i]);
  }
  int empty=findFirstEmptyCheck(nodeIndex);
  int offset=empty - minHead;
  while (true) {
    if (check.length <= (offset + maxHead)) {
      extend(offset + maxHead);
    }
    boolean found=true;
    for (    int cid : heads) {
      if (check[offset + cid] >= 0) {
        found=false;
        break;
      }
    }
    if (found)     break;
    empty=findNextEmptyCheck(nodeIndex,empty);
    offset=empty - minHead;
  }
  base[nodeIndex]=offset;
  for (  int cid : heads) {
    if (cid > Short.MAX_VALUE) {
      throw new RuntimeException(""String_Node_Str"");
    }
    setCheck(offset + cid,(short)(nodeIndex - (offset + cid)));
  }
  Map<Integer,List<Pair<Node,Integer>>> nodes=new TreeMap<Integer,List<Pair<Node,Integer>>>(new Comparator<Integer>(){
    @Override public int compare(    Integer arg0,    Integer arg1){
      return arg1 - arg0;
    }
  }
);
  for (int i=0; i < children.length; i++) {
    Node[] c=children[i].getChildren();
    int n=0;
    if (c != null) {
      n=c.length;
    }
    List<Pair<Node,Integer>> p=nodes.get(n);
    if (p == null) {
      p=new ArrayList<Pair<Node,Integer>>();
      nodes.put(n,p);
    }
    p.add(Pair.create(children[i],heads[i]));
  }
  for (  Map.Entry<Integer,List<Pair<Node,Integer>>> e : nodes.entrySet()) {
    for (    Pair<Node,Integer> e2 : e.getValue()) {
      build(e2.getFirst(),e2.getSecond() + offset,tb);
    }
  }
}",0.9954050785973396
101045,"public void dump(){
  System.out.println(""String_Node_Str"" + base.length);
  System.out.println(""String_Node_Str"" + last);
  int vc=0;
  for (int i=0; i < base.length; i++) {
    if (base[i] != BASE_EMPTY || check[i] >= 0)     vc++;
  }
  System.out.println(""String_Node_Str"" + vc);
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",i));
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (base[i] == BASE_EMPTY) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",base[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (check[i] < 0) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",check[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (tail[i] < 0) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",tail[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",term.get(i) ? 1 : 0));
  }
  System.out.println();
  int count=0;
  for (  int i : tail) {
    if (i != -1)     count++;
  }
  System.out.println(""String_Node_Str"" + count);
  System.out.println();
  System.out.print(""String_Node_Str"");
  char[] tailChars=tails.subSequence(0,Math.min(tails.length(),64)).toString().toCharArray();
  for (int i=0; i < tailChars.length; i++) {
    char c=tailChars[i];
    if (c == '\0') {
      System.out.print(""String_Node_Str"");
      continue;
    }
    if (c == '\1') {
      int index=tailChars[i + 1] + (tailChars[i + 2] << 16);
      i+=2;
      System.out.print(String.format(""String_Node_Str"",index));
      continue;
    }
    System.out.print(c);
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + tails.length());
{
    System.out.print(""String_Node_Str"");
    int c=0;
    for (    Map.Entry<Character,Integer> e : charCodes.entrySet()) {
      System.out.print(String.format(""String_Node_Str"",e.getKey(),e.getValue()));
      c++;
      if (c > 16)       break;
    }
    System.out.println();
    System.out.println(""String_Node_Str"" + charCodes.size());
  }
{
    System.out.println(""String_Node_Str"");
    int min=Integer.MAX_VALUE;
    int max=Integer.MIN_VALUE;
    int maxDelta=Integer.MIN_VALUE;
    for (int i=0; i < base.length; i++) {
      int b=base[i];
      if (b == BASE_EMPTY)       continue;
      min=Math.min(min,b);
      max=Math.max(max,b);
      maxDelta=Math.max(maxDelta,Math.abs(i - b));
    }
    System.out.println(""String_Node_Str"" + maxDelta);
    System.out.println(""String_Node_Str"" + max);
    System.out.println(""String_Node_Str"" + min);
  }
{
    System.out.println(""String_Node_Str"");
    int min=Integer.MAX_VALUE;
    for (int i=0; i < base.length; i++) {
      int b=check[i];
      if (b == BASE_EMPTY)       continue;
      min=Math.min(min,b);
    }
    System.out.println(""String_Node_Str"" + min);
  }
  System.out.println();
}","public void dump(){
  System.out.println(""String_Node_Str"" + base.length);
  System.out.println(""String_Node_Str"" + last);
  int vc=0;
  for (int i=0; i < base.length; i++) {
    if (base[i] != BASE_EMPTY || check[i] >= 0)     vc++;
  }
  System.out.println(""String_Node_Str"" + vc);
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",i));
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (base[i] == BASE_EMPTY) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",base[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",check[i]));
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (tail[i] < 0) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",tail[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",term.get(i) ? 1 : 0));
  }
  System.out.println();
  int count=0;
  for (  int i : tail) {
    if (i != -1)     count++;
  }
  System.out.println(""String_Node_Str"" + count);
  System.out.println();
  System.out.print(""String_Node_Str"");
  char[] tailChars=tails.subSequence(0,Math.min(tails.length(),64)).toString().toCharArray();
  for (int i=0; i < tailChars.length; i++) {
    char c=tailChars[i];
    if (c == '\0') {
      System.out.print(""String_Node_Str"");
      continue;
    }
    if (c == '\1') {
      int index=tailChars[i + 1] + (tailChars[i + 2] << 16);
      i+=2;
      System.out.print(String.format(""String_Node_Str"",index));
      continue;
    }
    System.out.print(c);
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + tails.length());
{
    System.out.print(""String_Node_Str"");
    int c=0;
    for (    Map.Entry<Character,Integer> e : charCodes.entrySet()) {
      System.out.print(String.format(""String_Node_Str"",e.getKey(),e.getValue()));
      c++;
      if (c > 16)       break;
    }
    System.out.println();
    System.out.println(""String_Node_Str"" + charCodes.size());
  }
{
    System.out.println(""String_Node_Str"");
    int min=Integer.MAX_VALUE;
    int max=Integer.MIN_VALUE;
    int maxDelta=Integer.MIN_VALUE;
    for (int i=0; i < base.length; i++) {
      int b=base[i];
      if (b == BASE_EMPTY)       continue;
      min=Math.min(min,b);
      max=Math.max(max,b);
      maxDelta=Math.max(maxDelta,Math.abs(i - b));
    }
    System.out.println(""String_Node_Str"" + maxDelta);
    System.out.println(""String_Node_Str"" + max);
    System.out.println(""String_Node_Str"" + min);
  }
{
    System.out.println(""String_Node_Str"");
    int min=Integer.MAX_VALUE;
    for (int i=0; i < base.length; i++) {
      int b=check[i];
      if (b == BASE_EMPTY)       continue;
      min=Math.min(min,b);
    }
    System.out.println(""String_Node_Str"" + min);
  }
  System.out.println();
}",0.9704563031709204
101046,"@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  StringBuilder current=new StringBuilder();
  char[] chars=prefix.toCharArray();
  int nodeIndex=0;
  TailCharIterator it=new TailCharIterator(tails,-1);
  for (int i=0; i < chars.length; i++) {
    int ti=tail[nodeIndex];
    if (ti != -1) {
      int first=i;
      it.setIndex(ti);
      do {
        if (!it.hasNext())         break;
        if (it.next() != chars[i])         return ret;
        i++;
      }
 while (i < chars.length);
      if (i >= chars.length)       break;
      current.append(chars,first,i - first);
    }
    int cid=findCharId(chars[i]);
    if (cid == -1)     return ret;
    int next=base[nodeIndex] + cid;
    if (next < 0 || check.length <= next || (next + check[next]) != nodeIndex)     return ret;
    nodeIndex=next;
    current.append(chars[i]);
  }
  Deque<Pair<Integer,char[]>> q=new LinkedList<Pair<Integer,char[]>>();
  q.add(Pair.create(nodeIndex,current.toString().toCharArray()));
  while (!q.isEmpty()) {
    Pair<Integer,char[]> p=q.pop();
    int ni=p.getFirst();
    StringBuilder buff=new StringBuilder().append(p.getSecond());
    int ti=tail[ni];
    if (ti != -1) {
      it.setIndex(ti);
      while (it.hasNext()) {
        buff.append(it.next());
      }
    }
    if (term.get(ni))     ret.add(buff.toString());
    for (    Map.Entry<Character,Integer> e : charCodes.entrySet()) {
      int b=base[ni];
      if (b == BASE_EMPTY)       continue;
      int next=b + e.getValue();
      if (check.length <= next)       continue;
      if (next + check[next] == ni) {
        StringBuilder bu=new StringBuilder(buff);
        bu.append(e.getKey());
        q.push(Pair.create(next,bu.toString().toCharArray()));
      }
    }
  }
  return ret;
}","@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  StringBuilder current=new StringBuilder();
  char[] chars=prefix.toCharArray();
  int nodeIndex=0;
  TailCharIterator it=new TailCharIterator(tails,-1);
  for (int i=0; i < chars.length; i++) {
    int ti=tail[nodeIndex];
    if (ti != -1) {
      int first=i;
      it.setIndex(ti);
      do {
        if (!it.hasNext())         break;
        if (it.next() != chars[i])         return ret;
        i++;
      }
 while (i < chars.length);
      if (i >= chars.length)       break;
      current.append(chars,first,i - first);
    }
    int cid=findCharId(chars[i]);
    if (cid == -1)     return ret;
    int next=base[nodeIndex] + cid;
    if (next < 0 || check.length <= next || (next + check[next]) != nodeIndex)     return ret;
    nodeIndex=next;
    current.append(chars[i]);
  }
  Deque<Pair<Integer,char[]>> q=new LinkedList<Pair<Integer,char[]>>();
  q.add(Pair.create(nodeIndex,current.toString().toCharArray()));
  while (!q.isEmpty()) {
    Pair<Integer,char[]> p=q.pop();
    int ni=p.getFirst();
    StringBuilder buff=new StringBuilder().append(p.getSecond());
    int ti=tail[ni];
    if (ti != -1) {
      it.setIndex(ti);
      while (it.hasNext()) {
        buff.append(it.next());
      }
    }
    if (term.get(ni))     ret.add(buff.toString());
    for (    Map.Entry<Character,Integer> e : charCodes.entrySet()) {
      int b=base[ni];
      if (b == BASE_EMPTY)       continue;
      if (b == (BASE_EMPTY - 1))       continue;
      int next=b + e.getValue();
      if (check.length <= next)       continue;
      if (next + check[next] == ni) {
        StringBuilder bu=new StringBuilder(buff);
        bu.append(e.getKey());
        q.push(Pair.create(next,bu.toString().toCharArray()));
      }
    }
  }
  return ret;
}",0.9866594064797168
101047,"private int findNextEmptyCheck(int i){
  int d=check[i] * -1;
  if (d <= 0) {
    throw new RuntimeException();
  }
  int prev=i;
  i+=d;
  if (check.length <= i) {
    extend(i);
    return i;
  }
  if (check[i] < 0) {
    return i;
  }
  for (i++; i < check.length; i++) {
    if (check[i] < 0) {
      int v=prev - i;
      if (v < Short.MIN_VALUE) {
        throw new RuntimeException(""String_Node_Str"");
      }
      check[prev]=(short)v;
      return i;
    }
  }
  extend(i);
  int v=prev - i;
  if (v < Short.MIN_VALUE) {
    throw new RuntimeException(""String_Node_Str"");
  }
  check[prev]=(short)v;
  return i;
}","private int findNextEmptyCheck(int baseNodeIndex,int i){
  int d=check[i] * -1;
  if (d <= 0) {
    throw new RuntimeException();
  }
  int prev=i;
  i+=d;
  if (check.length <= i) {
    extend(i);
    return i;
  }
  if (check[i] < 0) {
    return i;
  }
  for (i++; i < check.length; i++) {
    if (check[i] < 0 && base[i] == BASE_EMPTY) {
      int v=baseNodeIndex - i;
      if (v < Short.MIN_VALUE) {
        throw new RuntimeException(""String_Node_Str"");
      }
      check[prev]=(short)v;
      return i;
    }
  }
  extend(i);
  int v=prev - i;
  if (v < Short.MIN_VALUE) {
    throw new RuntimeException(""String_Node_Str"");
  }
  check[prev]=(short)v;
  return i;
}",0.9291217257318952
101048,"private int findFirstEmptyCheck(){
  int i=firstEmptyCheck;
  while (check[i] >= 0 || base[i] != BASE_EMPTY) {
    i++;
  }
  firstEmptyCheck=i;
  return i;
}","private int findFirstEmptyCheck(int baseNodeIndex){
  int i=Math.max(baseNodeIndex - Short.MAX_VALUE,0);
  while (check[i] >= 0 || base[i] != BASE_EMPTY) {
    i++;
  }
  return i;
}",0.7352941176470589
101049,"public boolean contains(String text){
  char[] chars=text.toCharArray();
  int charsIndex=0;
  int nodeIndex=0;
  TailCharIterator it=new TailCharIterator(tails,-1);
  while (charsIndex < chars.length) {
    int tailIndex=tail[nodeIndex];
    if (tailIndex != -1) {
      it.setIndex(tailIndex);
      while (it.hasNext()) {
        if (chars.length <= charsIndex)         return false;
        if (chars[charsIndex] != it.next())         return false;
        charsIndex++;
      }
      if (chars.length == charsIndex) {
        if (!it.hasNext())         return term.get(nodeIndex);
 else         return false;
      }
    }
    int cid=findCharId(chars[charsIndex]);
    if (cid == -1)     return false;
    int i=cid + base[nodeIndex];
    if (i < 0 || check.length <= i || check[i] != cid)     return false;
    charsIndex++;
    nodeIndex=i;
  }
  return term.get(nodeIndex);
}","public boolean contains(String text){
  char[] chars=text.toCharArray();
  int charsIndex=0;
  int nodeIndex=0;
  TailCharIterator it=new TailCharIterator(tails,-1);
  while (charsIndex < chars.length) {
    int tailIndex=tail[nodeIndex];
    if (tailIndex != -1) {
      it.setIndex(tailIndex);
      while (it.hasNext()) {
        if (chars.length <= charsIndex)         return false;
        if (chars[charsIndex] != it.next())         return false;
        charsIndex++;
      }
      if (chars.length == charsIndex) {
        if (!it.hasNext())         return term.get(nodeIndex);
 else         return false;
      }
    }
    int cid=findCharId(chars[charsIndex]);
    if (cid == -1)     return false;
    int i=cid + base[nodeIndex];
    if (i < 0 || check.length <= i || (i + check[i]) != nodeIndex)     return false;
    charsIndex++;
    nodeIndex=i;
  }
  return term.get(nodeIndex);
}",0.9898876404494382
101050,"@Override public Iterable<String> commonPrefixSearch(String query){
  List<String> ret=new ArrayList<String>();
  char[] chars=query.toCharArray();
  int ci=0;
  int ni=0;
  if (tail[0] != -1) {
    TailCharIterator it=new TailCharIterator(tails,tail[0]);
    while (it.hasNext()) {
      ci++;
      if (ci >= chars.length)       return ret;
      if (it.next() != chars[ci])       return ret;
    }
    if (term.get(0))     ret.add(new String(chars,0,ci + 1));
  }
  for (; ci < chars.length; ci++) {
    int cid=findCharId(chars[ci]);
    if (cid == -1)     return ret;
    int b=base[ni];
    if (b == BASE_EMPTY)     return ret;
    int next=b + cid;
    if (check.length <= next || check[next] != cid)     return ret;
    ni=next;
    if (tail[ni] != -1) {
      TailCharIterator it=new TailCharIterator(tails,tail[ni]);
      while (it.hasNext()) {
        ci++;
        if (ci >= chars.length)         return ret;
        if (it.next() != chars[ci])         return ret;
      }
    }
    if (term.get(ni))     ret.add(new String(chars,0,ci + 1));
  }
  return ret;
}","@Override public Iterable<String> commonPrefixSearch(String query){
  List<String> ret=new ArrayList<String>();
  char[] chars=query.toCharArray();
  int ci=0;
  int ni=0;
  if (tail[0] != -1) {
    TailCharIterator it=new TailCharIterator(tails,tail[0]);
    while (it.hasNext()) {
      ci++;
      if (ci >= chars.length)       return ret;
      if (it.next() != chars[ci])       return ret;
    }
    if (term.get(0))     ret.add(new String(chars,0,ci + 1));
  }
  TailCharIterator it=new TailCharIterator(tails,-1);
  for (; ci < chars.length; ci++) {
    int cid=findCharId(chars[ci]);
    if (cid == -1)     return ret;
    int b=base[ni];
    if (b == BASE_EMPTY)     return ret;
    int next=b + cid;
    if (check.length <= next || (next + check[next]) != ni)     return ret;
    ni=next;
    if (tail[ni] != -1) {
      it.setIndex(tail[ni]);
      while (it.hasNext()) {
        ci++;
        if (ci >= chars.length)         return ret;
        if (it.next() != chars[ci])         return ret;
      }
    }
    if (term.get(ni))     ret.add(new String(chars,0,ci + 1));
  }
  return ret;
}",0.942528735632184
101051,"private void build(Node node,int nodeIndex,TailBuilder tb){
  char[] letters=node.getLetters();
  if (letters != null) {
    if (letters.length > 1) {
      int tailIndex=tb.insert(letters,1,letters.length - 1);
      tail[nodeIndex]=tailIndex;
    }
    if (node.isTerminate()) {
      term.set(nodeIndex);
    }
  }
  Node[] children=node.getChildren();
  if (children == null || children.length == 0)   return;
  int[] heads=new int[children.length];
  int maxHead=0;
  int minHead=Integer.MAX_VALUE;
  for (int i=0; i < children.length; i++) {
    heads[i]=getCharId(children[i].getLetters()[0]);
    maxHead=Math.max(maxHead,heads[i]);
    minHead=Math.min(minHead,heads[i]);
  }
  int empty=findFirstEmptyCheck();
  int offset=empty - minHead;
  while (true) {
    if (check.length <= (offset + maxHead)) {
      extend(offset + maxHead);
    }
    boolean found=true;
    for (    int cid : heads) {
      if (check[offset + cid] >= 0) {
        found=false;
        break;
      }
    }
    if (found)     break;
    empty=findNextEmptyCheck(empty);
    offset=empty - minHead;
  }
  base[nodeIndex]=offset;
  for (  int cid : heads) {
    if (cid > Short.MAX_VALUE) {
      throw new RuntimeException(""String_Node_Str"");
    }
    setCheck(offset + cid,(short)cid);
  }
  Map<Integer,List<Pair<Node,Integer>>> nodes=new TreeMap<Integer,List<Pair<Node,Integer>>>(new Comparator<Integer>(){
    @Override public int compare(    Integer arg0,    Integer arg1){
      return arg1 - arg0;
    }
  }
);
  for (int i=0; i < children.length; i++) {
    Node[] c=children[i].getChildren();
    int n=0;
    if (c != null) {
      n=c.length;
    }
    List<Pair<Node,Integer>> p=nodes.get(n);
    if (p == null) {
      p=new ArrayList<Pair<Node,Integer>>();
      nodes.put(n,p);
    }
    p.add(Pair.create(children[i],heads[i]));
  }
  for (  Map.Entry<Integer,List<Pair<Node,Integer>>> e : nodes.entrySet()) {
    for (    Pair<Node,Integer> e2 : e.getValue()) {
      build(e2.getFirst(),e2.getSecond() + offset,tb);
    }
  }
}","private void build(Node node,int nodeIndex,TailBuilder tb){
  char[] letters=node.getLetters();
  if (letters != null) {
    if (letters.length > 1) {
      int tailIndex=tb.insert(letters,1,letters.length - 1);
      tail[nodeIndex]=tailIndex;
    }
    if (node.isTerminate()) {
      term.set(nodeIndex);
    }
  }
  Node[] children=node.getChildren();
  if (children == null || children.length == 0)   return;
  int[] heads=new int[children.length];
  int maxHead=0;
  int minHead=Integer.MAX_VALUE;
  for (int i=0; i < children.length; i++) {
    heads[i]=getCharId(children[i].getLetters()[0]);
    maxHead=Math.max(maxHead,heads[i]);
    minHead=Math.min(minHead,heads[i]);
  }
  int empty=findFirstEmptyCheck();
  int offset=empty - minHead;
  while (true) {
    if (check.length <= (offset + maxHead)) {
      extend(offset + maxHead);
    }
    boolean found=true;
    for (    int cid : heads) {
      if (check[offset + cid] >= 0) {
        found=false;
        break;
      }
    }
    if (found)     break;
    empty=findNextEmptyCheck(empty);
    offset=empty - minHead;
  }
  base[nodeIndex]=offset;
  for (  int cid : heads) {
    if (cid > Short.MAX_VALUE) {
      throw new RuntimeException(""String_Node_Str"");
    }
    setCheck(offset + cid,(short)(nodeIndex - (offset + cid)));
  }
  Map<Integer,List<Pair<Node,Integer>>> nodes=new TreeMap<Integer,List<Pair<Node,Integer>>>(new Comparator<Integer>(){
    @Override public int compare(    Integer arg0,    Integer arg1){
      return arg1 - arg0;
    }
  }
);
  for (int i=0; i < children.length; i++) {
    Node[] c=children[i].getChildren();
    int n=0;
    if (c != null) {
      n=c.length;
    }
    List<Pair<Node,Integer>> p=nodes.get(n);
    if (p == null) {
      p=new ArrayList<Pair<Node,Integer>>();
      nodes.put(n,p);
    }
    p.add(Pair.create(children[i],heads[i]));
  }
  for (  Map.Entry<Integer,List<Pair<Node,Integer>>> e : nodes.entrySet()) {
    for (    Pair<Node,Integer> e2 : e.getValue()) {
      build(e2.getFirst(),e2.getSecond() + offset,tb);
    }
  }
}",0.992422390613542
101052,"public void dump(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + base.length);
  System.out.println(""String_Node_Str"" + last);
  int vc=0;
  for (int i=0; i < base.length; i++) {
    if (base[i] != BASE_EMPTY || check[i] >= 0)     vc++;
  }
  System.out.println(""String_Node_Str"" + vc);
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",i));
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (base[i] == BASE_EMPTY) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",base[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (check[i] < 0) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",check[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (tail[i] < 0) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",tail[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",term.get(i) ? 1 : 0));
  }
  System.out.println();
  int count=0;
  for (  int i : tail) {
    if (i != -1)     count++;
  }
  System.out.println(""String_Node_Str"" + count);
  System.out.println();
  System.out.print(""String_Node_Str"");
  char[] tailChars=tails.subSequence(0,Math.min(tails.length(),64)).toString().toCharArray();
  for (int i=0; i < tailChars.length; i++) {
    char c=tailChars[i];
    if (c == '\0') {
      System.out.print(""String_Node_Str"");
      continue;
    }
    if (c == '\1') {
      int index=tailChars[i + 1] + (tailChars[i + 2] << 16);
      i+=2;
      System.out.print(String.format(""String_Node_Str"",index));
      continue;
    }
    System.out.print(c);
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + tails.length());
{
    System.out.print(""String_Node_Str"");
    int c=0;
    for (    Map.Entry<Character,Integer> e : charCodes.entrySet()) {
      System.out.print(String.format(""String_Node_Str"",e.getKey(),e.getValue()));
      c++;
      if (c > 16)       break;
    }
    System.out.println();
    System.out.println(""String_Node_Str"" + charCodes.size());
  }
{
    System.out.println(""String_Node_Str"");
    int min=Integer.MAX_VALUE;
    int max=Integer.MIN_VALUE;
    int maxDelta=Integer.MIN_VALUE;
    for (int i=0; i < base.length; i++) {
      int b=base[i];
      if (b == BASE_EMPTY)       continue;
      min=Math.min(min,b);
      max=Math.max(max,b);
      maxDelta=Math.max(maxDelta,Math.abs(i - b));
    }
    System.out.println(""String_Node_Str"" + maxDelta);
    System.out.println(""String_Node_Str"" + max);
    System.out.println(""String_Node_Str"" + min);
  }
{
    System.out.println(""String_Node_Str"");
    int min=Integer.MAX_VALUE;
    for (int i=0; i < base.length; i++) {
      int b=check[i];
      if (b == BASE_EMPTY)       continue;
      min=Math.min(min,b);
    }
    System.out.println(""String_Node_Str"" + min);
  }
  System.out.println();
}","public void dump(){
  System.out.println(""String_Node_Str"" + base.length);
  System.out.println(""String_Node_Str"" + last);
  int vc=0;
  for (int i=0; i < base.length; i++) {
    if (base[i] != BASE_EMPTY || check[i] >= 0)     vc++;
  }
  System.out.println(""String_Node_Str"" + vc);
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",i));
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (base[i] == BASE_EMPTY) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",base[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (check[i] < 0) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",check[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (tail[i] < 0) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",tail[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",term.get(i) ? 1 : 0));
  }
  System.out.println();
  int count=0;
  for (  int i : tail) {
    if (i != -1)     count++;
  }
  System.out.println(""String_Node_Str"" + count);
  System.out.println();
  System.out.print(""String_Node_Str"");
  char[] tailChars=tails.subSequence(0,Math.min(tails.length(),64)).toString().toCharArray();
  for (int i=0; i < tailChars.length; i++) {
    char c=tailChars[i];
    if (c == '\0') {
      System.out.print(""String_Node_Str"");
      continue;
    }
    if (c == '\1') {
      int index=tailChars[i + 1] + (tailChars[i + 2] << 16);
      i+=2;
      System.out.print(String.format(""String_Node_Str"",index));
      continue;
    }
    System.out.print(c);
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + tails.length());
{
    System.out.print(""String_Node_Str"");
    int c=0;
    for (    Map.Entry<Character,Integer> e : charCodes.entrySet()) {
      System.out.print(String.format(""String_Node_Str"",e.getKey(),e.getValue()));
      c++;
      if (c > 16)       break;
    }
    System.out.println();
    System.out.println(""String_Node_Str"" + charCodes.size());
  }
{
    System.out.println(""String_Node_Str"");
    int min=Integer.MAX_VALUE;
    int max=Integer.MIN_VALUE;
    int maxDelta=Integer.MIN_VALUE;
    for (int i=0; i < base.length; i++) {
      int b=base[i];
      if (b == BASE_EMPTY)       continue;
      min=Math.min(min,b);
      max=Math.max(max,b);
      maxDelta=Math.max(maxDelta,Math.abs(i - b));
    }
    System.out.println(""String_Node_Str"" + maxDelta);
    System.out.println(""String_Node_Str"" + max);
    System.out.println(""String_Node_Str"" + min);
  }
{
    System.out.println(""String_Node_Str"");
    int min=Integer.MAX_VALUE;
    for (int i=0; i < base.length; i++) {
      int b=check[i];
      if (b == BASE_EMPTY)       continue;
      min=Math.min(min,b);
    }
    System.out.println(""String_Node_Str"" + min);
  }
  System.out.println();
}",0.9937831690674752
101053,"@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  StringBuilder current=new StringBuilder();
  char[] chars=prefix.toCharArray();
  int nodeIndex=0;
  for (int i=0; i < chars.length; i++) {
    int ti=tail[nodeIndex];
    if (ti != -1) {
      TailCharIterator it=new TailCharIterator(tails,ti);
      do {
        if (!it.hasNext())         break;
        if (it.next() != chars[i])         return ret;
        i++;
      }
 while (i < chars.length);
      if (i >= chars.length)       break;
      current.append(tails.subSequence(tail[nodeIndex],it.getNextIndex()));
    }
    int cid=findCharId(chars[i]);
    if (cid == -1)     return ret;
    int next=base[nodeIndex] + cid;
    if (next < 0 || check.length <= next || check[next] != cid)     return ret;
    nodeIndex=next;
    current.append(chars[i]);
  }
  Deque<Pair<Integer,char[]>> q=new LinkedList<Pair<Integer,char[]>>();
  q.add(Pair.create(nodeIndex,current.toString().toCharArray()));
  while (!q.isEmpty()) {
    Pair<Integer,char[]> p=q.pop();
    int ni=p.getFirst();
    StringBuilder buff=new StringBuilder().append(p.getSecond());
    int ti=tail[ni];
    if (ti != -1) {
      TailCharIterator it=new TailCharIterator(tails,ti);
      while (it.hasNext()) {
        buff.append(it.next());
      }
    }
    if (term.get(ni))     ret.add(buff.toString());
    for (    Map.Entry<Character,Integer> e : charCodes.entrySet()) {
      int b=base[ni];
      if (b == BASE_EMPTY)       continue;
      int next=b + e.getValue();
      if (check.length <= next)       continue;
      if (check[next] == e.getValue()) {
        StringBuilder bu=new StringBuilder(buff);
        bu.append(e.getKey());
        q.push(Pair.create(next,bu.toString().toCharArray()));
      }
    }
  }
  return ret;
}","@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  StringBuilder current=new StringBuilder();
  char[] chars=prefix.toCharArray();
  int nodeIndex=0;
  TailCharIterator it=new TailCharIterator(tails,-1);
  for (int i=0; i < chars.length; i++) {
    int ti=tail[nodeIndex];
    if (ti != -1) {
      int first=i;
      it.setIndex(ti);
      do {
        if (!it.hasNext())         break;
        if (it.next() != chars[i])         return ret;
        i++;
      }
 while (i < chars.length);
      if (i >= chars.length)       break;
      current.append(chars,first,i - first);
    }
    int cid=findCharId(chars[i]);
    if (cid == -1)     return ret;
    int next=base[nodeIndex] + cid;
    if (next < 0 || check.length <= next || (next + check[next]) != nodeIndex)     return ret;
    nodeIndex=next;
    current.append(chars[i]);
  }
  Deque<Pair<Integer,char[]>> q=new LinkedList<Pair<Integer,char[]>>();
  q.add(Pair.create(nodeIndex,current.toString().toCharArray()));
  while (!q.isEmpty()) {
    Pair<Integer,char[]> p=q.pop();
    int ni=p.getFirst();
    StringBuilder buff=new StringBuilder().append(p.getSecond());
    int ti=tail[ni];
    if (ti != -1) {
      it.setIndex(ti);
      while (it.hasNext()) {
        buff.append(it.next());
      }
    }
    if (term.get(ni))     ret.add(buff.toString());
    for (    Map.Entry<Character,Integer> e : charCodes.entrySet()) {
      int b=base[ni];
      if (b == BASE_EMPTY)       continue;
      int next=b + e.getValue();
      if (check.length <= next)       continue;
      if (next + check[next] == ni) {
        StringBuilder bu=new StringBuilder(buff);
        bu.append(e.getKey());
        q.push(Pair.create(next,bu.toString().toCharArray()));
      }
    }
  }
  return ret;
}",0.9175824175824177
101054,"@Override public Iterable<String> predictiveSearch(String query){
  List<String> ret=new ArrayList<String>();
  char[] chars=query.toCharArray();
  int charsLen=chars.length;
  int nodeId=0;
  TailCharIterator tci=new TailCharIterator(tails,-1);
  String pfx=null;
  for (int charsIndex=0; charsIndex < charsLen; charsIndex++) {
    int child=getChildNode(nodeId,chars[charsIndex]);
    if (child == -1)     return ret;
    int ti=tail[child];
    if (ti != -1) {
      tci.setIndex(ti);
      int charsIndexBack=charsIndex;
      while (tci.hasNext()) {
        charsIndex++;
        if (charsIndex >= charsLen) {
          pfx=new String(chars,0,charsIndexBack);
          break;
        }
        if (chars[charsIndex] != tci.next())         return ret;
      }
    }
    nodeId=child;
  }
  if (pfx == null)   pfx=query;
  Deque<Pair<Integer,String>> queue=new LinkedList<Pair<Integer,String>>();
  queue.offerLast(Pair.create(nodeId,pfx));
  while (queue.size() > 0) {
    Pair<Integer,String> element=queue.pollFirst();
    int nid=element.getFirst();
    StringBuilder b=new StringBuilder(element.getSecond());
    b.append(labels[nid]);
    int ti=tail[nid];
    if (ti != -1) {
      tci.setIndex(ti);
      while (tci.hasNext())       b.append(tci.next());
    }
    String letter=b.toString();
    if (term.get(nid))     ret.add(letter);
    int s=bv.select0(nid) + 1;
    int e=bv.next0(s);
    int lastNodeId=bv.rank1(s) + e - s - 1;
    for (int i=(e - 1); i >= s; i--) {
      queue.offerFirst(Pair.create(lastNodeId--,letter));
    }
  }
  return ret;
}","@Override public Iterable<String> predictiveSearch(String query){
  List<String> ret=new ArrayList<String>();
  char[] chars=query.toCharArray();
  int charsLen=chars.length;
  int nodeId=0;
  TailCharIterator tci=new TailCharIterator(tails,-1);
  String pfx=null;
  int charsIndexBack=0;
  for (int charsIndex=0; charsIndex < charsLen; charsIndex++) {
    charsIndexBack=charsIndex;
    int child=getChildNode(nodeId,chars[charsIndex]);
    if (child == -1)     return ret;
    int ti=tail[child];
    if (ti != -1) {
      tci.setIndex(ti);
      while (tci.hasNext()) {
        charsIndex++;
        if (charsIndex >= charsLen)         break;
        if (chars[charsIndex] != tci.next())         return ret;
      }
    }
    nodeId=child;
  }
  pfx=new String(chars,0,charsIndexBack);
  Deque<Pair<Integer,String>> queue=new LinkedList<Pair<Integer,String>>();
  queue.offerLast(Pair.create(nodeId,pfx));
  while (queue.size() > 0) {
    Pair<Integer,String> element=queue.pollFirst();
    int nid=element.getFirst();
    StringBuilder b=new StringBuilder(element.getSecond());
    b.append(labels[nid]);
    int ti=tail[nid];
    if (ti != -1) {
      tci.setIndex(ti);
      while (tci.hasNext())       b.append(tci.next());
    }
    String letter=b.toString();
    if (term.get(nid))     ret.add(letter);
    int s=bv.select0(nid) + 1;
    int e=bv.next0(s);
    int lastNodeId=bv.rank1(s) + e - s - 1;
    for (int i=(e - 1); i >= s; i--) {
      queue.offerFirst(Pair.create(lastNodeId--,letter));
    }
  }
  return ret;
}",0.8781431334622823
101055,"public boolean contains(String word){
  char[] chars=word.toCharArray();
  int charsIndex=0;
  int nodeId=1;
  int start=0;
  while (true) {
    start=bv.select0(nodeId) + 1;
    int end=bv.next0(start);
    int baseNodeId=bv.rank1(start) - start;
    while (start != end) {
      int i=(start + end) / 2;
      int index=baseNodeId + i;
      int d=chars[charsIndex] - labels[index];
      if (d < 0) {
        end=i;
      }
 else       if (d > 0) {
        if (start == i)         return false;
 else         start=i;
      }
 else {
        charsIndex++;
        int ti=tail[index];
        if (charsIndex == chars.length) {
          return (ti == -1) && term.get(index);
        }
        if (ti != -1) {
          TailCharIterator tci=new TailCharIterator(tails,ti);
          while (tci.hasNext()) {
            if (charsIndex == chars.length)             return false;
            if (tci.next() != chars[charsIndex])             return false;
            charsIndex++;
          }
          if (charsIndex == chars.length)           return term.get(index);
        }
        nodeId=baseNodeId + i;
        break;
      }
    }
    if (start == end)     return false;
  }
}","public boolean contains(String word){
  char[] chars=word.toCharArray();
  int charsIndex=0;
  int nodeId=1;
  TailCharIterator tci=new TailCharIterator(tails,-1);
  while (true) {
    int start=bv.select0(nodeId) + 1;
    int end=bv.next0(start);
    if (end == -1)     end=start + 1;
    int baseNodeId=bv.rank1(start) - start;
    do {
      int i=(start + end) / 2;
      int index=baseNodeId + i;
      int d=chars[charsIndex] - labels[index];
      if (d < 0) {
        end=i;
      }
 else       if (d > 0) {
        if (start == i)         return false;
 else         start=i;
      }
 else {
        charsIndex++;
        int ti=tail[index];
        if (charsIndex == chars.length) {
          return (ti == -1) && term.get(index);
        }
        if (ti != -1) {
          tci.setIndex(ti);
          while (tci.hasNext()) {
            if (charsIndex == chars.length)             return false;
            if (tci.next() != chars[charsIndex])             return false;
            charsIndex++;
          }
          if (charsIndex == chars.length)           return term.get(index);
        }
        nodeId=baseNodeId + i;
        break;
      }
    }
 while (start != end);
    if (start == end)     return false;
  }
}",0.9097682119205298
101056,"@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  char[] chars=prefix.toCharArray();
  int charsIndex=0;
  int nodeId=1;
  int start=0;
  int rootNodeId=-1;
  String pfx=null;
  while (true) {
    start=bv.select0(nodeId) + 1;
    int end=bv.next0(start);
    int baseNodeId=bv.rank1(start) - start;
    while (start != end) {
      int i=(start + end) / 2;
      int index=baseNodeId + i;
      int d=chars[charsIndex] - labels[index];
      int prevCharsIndex=charsIndex;
      if (d < 0) {
        end=i;
      }
 else       if (d > 0) {
        if (start == i)         return ret;
 else         start=i;
      }
 else {
        charsIndex++;
        if (charsIndex == chars.length) {
          rootNodeId=baseNodeId + i;
          pfx=new String(chars,0,prevCharsIndex);
          break;
        }
        int ti=tail[index];
        if (ti != -1) {
          TailCharIterator tci=new TailCharIterator(tails,ti);
          while (tci.hasNext()) {
            if (charsIndex == chars.length) {
              rootNodeId=baseNodeId + i;
              pfx=new String(chars,0,prevCharsIndex);
              break;
            }
            if (tci.next() != chars[charsIndex])             return ret;
            charsIndex++;
          }
        }
        nodeId=baseNodeId + i;
        break;
      }
    }
    if (pfx != null)     break;
    if (start == end)     return ret;
  }
  if (pfx == null)   return ret;
  Deque<Pair<Integer,String>> queue=new LinkedList<Pair<Integer,String>>();
  queue.offerLast(Pair.create(rootNodeId,pfx));
  while (queue.size() > 0) {
    Pair<Integer,String> element=queue.pollFirst();
    int nid=element.getFirst();
    StringBuilder b=new StringBuilder(element.getSecond());
    b.append(labels[nid]);
    int ti=tail[nid];
    if (ti != -1) {
      TailCharIterator it=new TailCharIterator(tails,tail[nid]);
      while (it.hasNext()) {
        b.append(it.next());
      }
    }
    String letter=b.toString();
    if (term.get(nid))     ret.add(letter);
    int s=bv.select0(nid) + 1;
    int e=bv.next0(s);
    int lastNodeId=bv.rank1(s) + e - s - 1;
    for (int i=(e - 1); i >= s; i--) {
      queue.offerFirst(Pair.create(lastNodeId--,letter));
    }
  }
  return ret;
}","@Override public Iterable<String> predictiveSearch(String query){
  List<String> ret=new ArrayList<String>();
  char[] chars=query.toCharArray();
  int charsLen=chars.length;
  int nodeId=0;
  TailCharIterator tci=new TailCharIterator(tails,-1);
  String pfx=null;
  for (int charsIndex=0; charsIndex < charsLen; charsIndex++) {
    int child=getChildNode(nodeId,chars[charsIndex]);
    if (child == -1)     return ret;
    int ti=tail[child];
    if (ti != -1) {
      tci.setIndex(ti);
      int charsIndexBack=charsIndex;
      while (tci.hasNext()) {
        charsIndex++;
        if (charsIndex >= charsLen) {
          pfx=new String(chars,0,charsIndexBack);
          break;
        }
        if (chars[charsIndex] != tci.next())         return ret;
      }
    }
    nodeId=child;
  }
  if (pfx == null)   pfx=query;
  Deque<Pair<Integer,String>> queue=new LinkedList<Pair<Integer,String>>();
  queue.offerLast(Pair.create(nodeId,pfx));
  while (queue.size() > 0) {
    Pair<Integer,String> element=queue.pollFirst();
    int nid=element.getFirst();
    StringBuilder b=new StringBuilder(element.getSecond());
    b.append(labels[nid]);
    int ti=tail[nid];
    if (ti != -1) {
      tci.setIndex(ti);
      while (tci.hasNext())       b.append(tci.next());
    }
    String letter=b.toString();
    if (term.get(nid))     ret.add(letter);
    int s=bv.select0(nid) + 1;
    int e=bv.next0(s);
    int lastNodeId=bv.rank1(s) + e - s - 1;
    for (int i=(e - 1); i >= s; i--) {
      queue.offerFirst(Pair.create(lastNodeId--,letter));
    }
  }
  return ret;
}",0.3182527301092043
101057,"@Override public void dump(){
  System.out.println(""String_Node_Str"" + getClass().getName() + ""String_Node_Str"");
  final AtomicInteger c=new AtomicInteger();
  visit(new TrieVisitor(){
    @Override public void accept(    Node node,    int nest){
      int cur=c.get();
      if (cur > 100)       return;
      for (int i=0; i < nest; i++) {
        System.out.print(""String_Node_Str"");
      }
      if (cur == 100) {
        System.out.println(""String_Node_Str"");
        return;
      }
      c.incrementAndGet();
      char[] letters=node.getLetters();
      if (letters != null && letters.length > 0) {
        System.out.print(letters);
      }
 else       if (node instanceof LabelTrieNode) {
        LabelNode ln=((LabelTrieNode)node).getLettersNode();
        if (ln != null) {
          do {
            System.out.print(""String_Node_Str"");
            char[] l=ln.getLetters();
            for (int i=0; i < l.length; i++) {
              System.out.print(l[l.length - i - 1]);
            }
            ln=ln.getParent();
          }
 while (ln != null);
        }
 else {
          System.out.print(""String_Node_Str"");
        }
      }
      if (node.isTerminate()) {
        System.out.print(""String_Node_Str"");
      }
      System.out.println();
    }
  }
);
}","@Override public void dump(){
  System.out.println(""String_Node_Str"" + getClass().getName() + ""String_Node_Str"");
  Algorithms.dump(getRoot());
}",0.1883345045678144
101058,"public boolean contains(String word){
  char[] chars=word.toCharArray();
  int charsIndex=0;
  int nodeId=1;
  TailCharIterator tci=new TailCharIterator(tails,-1);
  while (true) {
    int start=bv.select0(nodeId) + 1;
    int end=bv.next0(start);
    if (end == -1)     end=start + 1;
    int baseNodeId=bv.rank1(start) - start;
    do {
      int i=(start + end) / 2;
      int index=baseNodeId + i;
      int d=chars[charsIndex] - labels[index];
      if (d < 0) {
        end=i;
      }
 else       if (d > 0) {
        if (start == i)         return false;
 else         start=i;
      }
 else {
        charsIndex++;
        int ti=tail[index];
        if (charsIndex == chars.length) {
          return (ti == -1) && term.get(index);
        }
        if (ti != -1) {
          tci.setIndex(ti);
          while (tci.hasNext()) {
            if (charsIndex == chars.length)             return false;
            if (tci.next() != chars[charsIndex])             return false;
            charsIndex++;
          }
          if (charsIndex == chars.length)           return term.get(index);
        }
        nodeId=baseNodeId + i;
        break;
      }
    }
 while (start != end);
    if (start == end)     return false;
  }
}","@Override public boolean contains(String word){
  char[] chars=word.toCharArray();
  int charsIndex=0;
  int nodeId=0;
  TailCharIterator tci=new TailCharIterator(tails,-1);
  while (true) {
    int start=bv.select0(nodeId) + 1;
    int end=bv.next0(start);
    if (end == -1)     return false;
    int baseNodeId=bv.rank1(start) - start;
    do {
      int i=(start + end) / 2;
      int index=baseNodeId + i;
      int d=chars[charsIndex] - labels[index];
      if (d < 0) {
        end=i;
      }
 else       if (d > 0) {
        if (start == i)         return false;
 else         start=i;
      }
 else {
        charsIndex++;
        int ti=tail[index];
        if (charsIndex == chars.length) {
          return (ti == -1) && term.get(index);
        }
        if (ti != -1) {
          tci.setIndex(ti);
          while (tci.hasNext()) {
            if (charsIndex == chars.length)             return false;
            if (tci.next() != chars[charsIndex])             return false;
            charsIndex++;
          }
          if (charsIndex == chars.length)           return term.get(index);
        }
        nodeId=baseNodeId + i;
        break;
      }
    }
 while (start != end);
    if (start == end)     return false;
  }
}",0.985062575696407
101059,"public LOUDSTrie(Trie orig){
  int sz=2000;
  bv=new SuccinctBitVector(sz);
  labels=new char[sz];
  tail=new int[sz];
  term=new BitSet(sz);
  LinkedList<Node> queue=new LinkedList<Node>();
  int count=0;
  bv.append(true);
  bv.append(false);
  labels[0]=0xffff;
  tail[0]=-1;
  count++;
  TailBuilder tb=new SuffixTrieTailBuilder();
  if (orig.getRoot() != null)   queue.add(orig.getRoot());
  while (!queue.isEmpty()) {
    Node node=queue.pollFirst();
    int index=count++;
    if (index >= labels.length) {
      extend();
    }
    if (node.isTerminate()) {
      term.set(index);
    }
    Node[] children=node.getChildren();
    if (children != null) {
      for (      Node c : children) {
        bv.append(true);
        queue.offerLast(c);
      }
    }
    bv.append(false);
    char[] letters=node.getLetters();
    if (letters.length == 0) {
      labels[index]=0xffff;
      tail[index]=-1;
    }
 else {
      labels[index]=letters[0];
      if (letters.length >= 2) {
        tail[index]=tb.insert(letters,1,letters.length - 1);
      }
 else {
        tail[index]=-1;
      }
    }
  }
  size=count;
  tails=tb.getTails();
}","public LOUDSTrie(Trie orig){
  int sz=2000;
  bv=new SuccinctBitVector(sz);
  labels=new char[sz];
  tail=new int[sz];
  term=new BitSet(sz);
  LinkedList<Node> queue=new LinkedList<Node>();
  int count=0;
  TailBuilder tb=new SuffixTrieTailBuilder();
  if (orig.getRoot() != null)   queue.add(orig.getRoot());
  while (!queue.isEmpty()) {
    Node node=queue.pollFirst();
    int index=count++;
    if (index >= labels.length) {
      extend();
    }
    if (node.isTerminate()) {
      term.set(index);
    }
    Node[] children=node.getChildren();
    if (children != null) {
      for (      Node c : children) {
        bv.append(true);
        queue.offerLast(c);
      }
    }
    bv.append(false);
    char[] letters=node.getLetters();
    if (letters.length == 0) {
      labels[index]=0xffff;
      tail[index]=-1;
    }
 else {
      labels[index]=letters[0];
      if (letters.length >= 2) {
        tail[index]=tb.insert(letters,1,letters.length - 1);
      }
 else {
        tail[index]=-1;
      }
    }
  }
  size=count;
  tails=tb.getTails();
}",0.4061650045330915
101060,"public Node getRoot(){
  return new LOUDSNode(1);
}","public Node getRoot(){
  return new LOUDSNode(0);
}",0.9803921568627452
101061,"public void visit(TrieVisitor visitor){
  root.visit(visitor,0);
}","public void visit(NodeVisitor visitor){
  root.visit(visitor,0);
}",0.9545454545454546
101062,"public abstract void visit(TrieVisitor visitor,int nest);","public abstract void visit(NodeVisitor visitor,int nest);",0.9473684210526316
101063,"public void visit(TrieVisitor visitor,int nest){
  super.visit(visitor,nest);
  if (children != null) {
    nest++;
    for (    LabelNode n : children) {
      n.visit(visitor,nest);
    }
  }
}","public void visit(NodeVisitor visitor,int nest){
  super.visit(visitor,nest);
  if (children != null) {
    nest++;
    for (    LabelNode n : children) {
      n.visit(visitor,nest);
    }
  }
}",0.9846153846153848
101064,"public void visit(TrieVisitor visitor,int nest){
  visitor.accept(this,nest);
}","public void visit(NodeVisitor visitor,int nest){
  visitor.visit(this,nest);
}",0.9044585987261148
101065,"@Override public Iterable<String> commonPrefixSearch(String query){
  List<String> ret=new ArrayList<String>();
  char[] chars=query.toCharArray();
  int charsIndex=0;
  int nodeId=1;
  int start=0;
  while (true) {
    start=bv.select0(nodeId) + 1;
    int end=bv.next0(start);
    int baseNodeId=bv.rank1(start) - start;
    while (start != end) {
      int i=(start + end) / 2;
      int index=baseNodeId + i;
      int d=chars[charsIndex] - labels[index];
      if (d < 0) {
        end=i;
      }
 else       if (d > 0) {
        if (start == i)         return ret;
 else         start=i;
      }
 else {
        int ti=tail[index];
        boolean tm=term.get(index);
        if (ti != -1) {
          TailCharIterator tci=new TailCharIterator(tails,ti);
          while (tci.hasNext()) {
            charsIndex++;
            if (charsIndex == chars.length)             return ret;
            if (tci.next() != chars[charsIndex])             return ret;
          }
        }
 else {
          charsIndex++;
          if (charsIndex == chars.length)           return ret;
        }
        if (tm)         ret.add(new String(chars,0,charsIndex));
        nodeId=baseNodeId + i;
        break;
      }
    }
    if (start == end)     return ret;
  }
}","@Override public Iterable<String> commonPrefixSearch(String query){
  List<String> ret=new ArrayList<String>();
  char[] chars=query.toCharArray();
  int charsIndex=0;
  int nodeId=0;
  int start=0;
  TailCharIterator tci=new TailCharIterator(tails,-1);
  while (true) {
    start=bv.select0(nodeId) + 1;
    int end=bv.next0(start);
    int baseNodeId=bv.rank1(start) - start;
    while (start != end) {
      int i=(start + end) / 2;
      int index=baseNodeId + i;
      int d=chars[charsIndex] - labels[index];
      if (d < 0) {
        end=i;
      }
 else       if (d > 0) {
        if (start == i)         return ret;
 else         start=i;
      }
 else {
        int ti=tail[index];
        boolean tm=term.get(index);
        charsIndex++;
        if (ti != -1) {
          tci.setIndex(ti);
          while (tci.hasNext()) {
            if (charsIndex == chars.length)             return ret;
            if (tci.next() != chars[charsIndex++])             return ret;
          }
        }
 else {
          if (charsIndex == chars.length)           return ret;
        }
        if (tm)         ret.add(new String(chars,0,charsIndex));
        nodeId=baseNodeId + i;
        break;
      }
    }
    if (start == end)     return ret;
  }
}",0.8278884462151395
101066,"@Override public void dump(){
  super.dump();
  System.out.println(""String_Node_Str"" + bv.toString());
  System.out.print(""String_Node_Str"");
  for (  char c : labels)   System.out.print(c);
  System.out.println();
}","@Override public void dump(){
  super.dump();
  String bvs=bv.toString();
  System.out.println(""String_Node_Str"" + ((bvs.length() > 100) ? bvs.substring(0,100) : bvs));
  System.out.print(""String_Node_Str"");
  int count=0;
  for (  char c : labels) {
    System.out.print(c);
    if (count++ == 99)     break;
  }
  System.out.println();
}",0.7351351351351352
101067,"public int next0(int pos){
  if (pos <= node3pos) {
    if (pos <= node1pos)     return node1pos;
 else     if (pos <= node2pos)     return node2pos;
 else     return node3pos;
  }
 else   if ((pos + 1) == size) {
    return size;
  }
  int i=pos / 8;
  int s=pos % 8;
  if (s != 0) {
    for (    byte b : BITPOS0[vector[i] & 0xff]) {
      if (s <= b)       return i * 8 + b;
    }
    i++;
  }
  int n=size / 8 + 1;
  for (; i < n; i++) {
    byte[] poss=BITPOS0[vector[i] & 0xff];
    if (poss.length > 0) {
      return poss[0] + i * 8;
    }
  }
  return -1;
}","public int next0(int pos){
  if (pos <= node3pos) {
    if (pos <= node1pos)     return node1pos;
 else     if (pos <= node2pos)     return node2pos;
 else     return node3pos;
  }
  int i=pos / 8;
  int s=pos % 8;
  if (s != 0) {
    for (    byte b : BITPOS0[vector[i] & 0xff]) {
      if (s <= b)       return i * 8 + b;
    }
    i++;
  }
  int n=size / 8 + 1;
  for (; i < n; i++) {
    byte[] poss=BITPOS0[vector[i] & 0xff];
    if (poss.length > 0) {
      return poss[0] + i * 8;
    }
  }
  return -1;
}",0.9499072356215214
101068,"public Node insertChild(char[] letters,int offset,CharSequence tails,TailBuilder tailBuilder){
  TailCharIterator it=new TailCharIterator(tails,tailIndex);
  int count=0;
  while (it.hasNext() && offset < letters.length) {
    if (letters[offset] != it.next())     break;
    offset++;
    count++;
  }
  if (offset == letters.length) {
    if (it.hasNext()) {
      char c=it.next();
      int idx=(it.hasNext()) ? it.getNextIndex() : -1;
      Node newChild=new Node(c,idx,this.terminate,this.children);
      this.tailIndex=(offset < letters.length) ? tailBuilder.insert(Arrays.copyOfRange(letters,offset - count,offset)) : -1;
      this.terminate=true;
      this.children=new Node[]{newChild};
      return this;
    }
 else {
      terminate=true;
      return this;
    }
  }
 else {
    if (it.current() != '\0') {
      int firstOffset=offset - count;
      char n1Fc=it.current();
      int n1Idx=(it.hasNext()) ? it.getNextIndex() : -1;
      Node n1=new Node(n1Fc,n1Idx,terminate,children);
      char n2Fc=letters[offset++];
      int n2Idx=(offset < letters.length) ? tailBuilder.insert(Arrays.copyOfRange(letters,offset,letters.length)) : -1;
      Node n2=new Node(n2Fc,n2Idx,true,null);
      if (count > 0) {
        this.tailIndex=tailBuilder.insert(letters,firstOffset,count);
      }
 else {
        this.tailIndex=-1;
      }
      this.terminate=false;
      if (n1.getFirstLetter() < n2.getFirstLetter()) {
        this.children=new Node[]{n1,n2};
      }
 else {
        this.children=new Node[]{n2,n1};
      }
      return this;
    }
 else {
      char fc=letters[offset++];
      if (children == null) {
        int idx=(offset < letters.length) ? tailBuilder.insert(Arrays.copyOfRange(letters,offset,letters.length)) : -1;
        this.children=new Node[]{new Node(fc,idx,true,null)};
      }
 else {
        Pair<Node,Integer> ret=findNode(fc);
        if (ret.getFirst() != null) {
          Node child=ret.getFirst().insertChild(letters,offset,tails,tailBuilder);
          children[ret.getSecond()]=child;
        }
 else {
          int idx=(offset < letters.length) ? tailBuilder.insert(letters,offset,letters.length - offset) : -1;
          addChild(ret.getSecond(),new Node(fc,idx,true,null));
        }
      }
      return this;
    }
  }
}","public Node insertChild(char[] letters,int offset,CharSequence tails,TailBuilder tailBuilder){
  TailCharIterator it=new TailCharIterator(tails,tailIndex);
  int count=0;
  boolean matchComplete=true;
  while (it.hasNext() && offset < letters.length) {
    if (letters[offset] != it.next()) {
      matchComplete=false;
      break;
    }
    offset++;
    count++;
  }
  if (offset == letters.length) {
    if (it.hasNext()) {
      char c=it.next();
      int idx=it.getNextIndex();
      if (!it.hasNext()) {
        idx=-1;
      }
      Node newChild=new Node(c,idx,this.terminate,this.children);
      this.tailIndex=(offset < letters.length) ? tailBuilder.insert(Arrays.copyOfRange(letters,offset - count,offset)) : -1;
      this.terminate=true;
      this.children=new Node[]{newChild};
      return this;
    }
 else {
      terminate=true;
      return this;
    }
  }
 else {
    if (!matchComplete) {
      int firstOffset=offset - count;
      char n1Fc=it.current();
      int n1Idx=it.getNextIndex();
      if (!it.hasNext()) {
        n1Idx=-1;
      }
      Node n1=new Node(n1Fc,n1Idx,terminate,children);
      char n2Fc=letters[offset++];
      int n2Idx=(offset < letters.length) ? tailBuilder.insert(Arrays.copyOfRange(letters,offset,letters.length)) : -1;
      Node n2=new Node(n2Fc,n2Idx,true,null);
      if (count > 0) {
        this.tailIndex=tailBuilder.insert(letters,firstOffset,count);
      }
 else {
        this.tailIndex=-1;
      }
      this.terminate=false;
      if (n1.getFirstLetter() < n2.getFirstLetter()) {
        this.children=new Node[]{n1,n2};
      }
 else {
        this.children=new Node[]{n2,n1};
      }
      return this;
    }
 else {
      char fc=letters[offset++];
      if (children == null) {
        int idx=(offset < letters.length) ? tailBuilder.insert(Arrays.copyOfRange(letters,offset,letters.length)) : -1;
        this.children=new Node[]{new Node(fc,idx,true,null)};
      }
 else {
        Pair<Node,Integer> ret=findNode(fc);
        Node child=ret.getFirst();
        if (child != null) {
          Node newChild=child.insertChild(letters,offset,tails,tailBuilder);
          children[ret.getSecond()]=newChild;
        }
 else {
          int idx=(offset < letters.length) ? tailBuilder.insert(letters,offset,letters.length - offset) : -1;
          addChild(ret.getSecond(),new Node(fc,idx,true,null));
        }
      }
      return this;
    }
  }
}",0.8942225998300765
101069,"public TailPatriciaTrie(){
  tailBuilder=new SuffixTrieTailBuilder();
  tails=tailBuilder.getTails();
}","public TailPatriciaTrie(TailBuilder builder){
  this.tailBuilder=builder;
  this.tails=builder.getTails();
}",0.7298578199052133
101070,"public char next(){
  if (!fetched)   fetchNext();
  if (next == '\0') {
    throw new NoSuchElementException();
  }
  fetched=false;
  return next;
}","public char next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  current=next;
  index++;
  char c=chars.charAt(index);
  if (c == '\0') {
    index=-1;
  }
  if (c == '\1') {
    int i=chars.charAt(index + 1);
    i+=chars.charAt(index + 2) << 16;
    index=i;
    c=chars.charAt(index);
  }
  next=c;
  return current;
}",0.2190669371196754
101071,"public boolean hasNext(){
  if (!fetched)   fetchNext();
  return next > '\0';
}","public boolean hasNext(){
  return index != -1;
}",0.6666666666666666
101072,"public TailCharIterator(CharSequence chars,int index){
  this.chars=chars;
  this.index=index;
  if (index != -1) {
    this.next=chars.charAt(index);
  }
 else {
    this.next='\0';
  }
  this.fetched=true;
  this.current=this.next;
}","public TailCharIterator(CharSequence chars,int index){
  this.chars=chars;
  this.index=index;
  if (this.index != -1) {
    this.next=chars.charAt(index);
  }
}",0.7878787878787878
101073,"@Test public void test() throws Exception {
  Trie trie=new TailPatriciaTrie();
  insert(trie,new WikipediaTitles(""String_Node_Str""),18);
  dump(trie);
  check(trie,new WikipediaTitles(""String_Node_Str""),18);
}","@Test public void test() throws Exception {
  Trie trie=new TailPatriciaTrie();
  insert(trie,new WikipediaTitles(""String_Node_Str""),2000000);
  check(trie,new WikipediaTitles(""String_Node_Str""),2000000);
}",0.6826923076923077
101074,"private void insert(Trie trie,Iterable<String> source,int maxCount){
  int c=0;
  for (  String w : source) {
    trie.insert(w);
    c++;
    if (c == maxCount)     return;
  }
}","private void insert(Trie trie,Iterable<String> source,int maxCount){
  int c=0;
  for (  String w : source) {
    trie.insert(w);
    if (!trie.contains(w)) {
      dump(trie);
      Assert.fail(""String_Node_Str"" + c + ""String_Node_Str""+ w);
    }
    c++;
    if (c == maxCount)     return;
  }
}",0.7521008403361344
101075,"@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  StringBuilder current=new StringBuilder();
  char[] chars=prefix.toCharArray();
  int nodeIndex=0;
  for (int i=0; i < chars.length; i++) {
    int ti=tail[nodeIndex];
    if (ti != -1) {
      TailCharIterator it=new TailCharIterator(tails,ti);
      do {
        if (!it.hasNext())         break;
        if (it.next() != chars[i])         return ret;
        i++;
      }
 while (i < chars.length);
      if (i >= chars.length)       break;
      current.append(tails.subSequence(tail[nodeIndex],it.getNextIndex()));
    }
    int cid=findCharId(chars[i]);
    if (cid == -1)     return ret;
    int next=base[nodeIndex] + cid;
    if (next < 0 || check.length <= next || check[next] != nodeIndex)     return ret;
    nodeIndex=next;
    current.append(chars[i]);
  }
  Deque<Pair<Integer,char[]>> q=new LinkedList<Pair<Integer,char[]>>();
  q.add(Pair.create(nodeIndex,current.toString().toCharArray()));
  while (!q.isEmpty()) {
    Pair<Integer,char[]> p=q.pop();
    int ni=p.getFirst();
    StringBuilder buff=new StringBuilder().append(p.getSecond());
    int ti=tail[ni];
    if (ti != -1) {
      TailCharIterator it=new TailCharIterator(tails,ti);
      while (it.hasNext()) {
        buff.append(it.next());
      }
    }
    if (term.get(ni))     ret.add(buff.toString());
    for (    Character v : this.chars) {
      int b=base[ni];
      if (b == BASE_EMPTY)       continue;
      int next=b + charToCode[v];
      if (check.length <= next)       continue;
      if (check[next] == ni) {
        StringBuilder bu=new StringBuilder(buff);
        bu.append(v);
        q.push(Pair.create(next,bu.toString().toCharArray()));
      }
    }
  }
  return ret;
}","@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  StringBuilder current=new StringBuilder();
  char[] chars=prefix.toCharArray();
  int nodeIndex=0;
  TailCharIterator it=new TailCharIterator(tails,-1);
  for (int i=0; i < chars.length; i++) {
    int ti=tail[nodeIndex];
    if (ti != -1) {
      int first=i;
      it.setIndex(ti);
      do {
        if (!it.hasNext())         break;
        if (it.next() != chars[i])         return ret;
        i++;
      }
 while (i < chars.length);
      if (i >= chars.length)       break;
      current.append(chars,first,i - first);
    }
    int cid=findCharId(chars[i]);
    if (cid == -1)     return ret;
    int next=base[nodeIndex] + cid;
    if (next < 0 || check.length <= next || check[next] != nodeIndex)     return ret;
    nodeIndex=next;
    current.append(chars[i]);
  }
  Deque<Pair<Integer,char[]>> q=new LinkedList<Pair<Integer,char[]>>();
  q.add(Pair.create(nodeIndex,current.toString().toCharArray()));
  while (!q.isEmpty()) {
    Pair<Integer,char[]> p=q.pop();
    int ni=p.getFirst();
    StringBuilder buff=new StringBuilder().append(p.getSecond());
    int ti=tail[ni];
    if (ti != -1) {
      it.setIndex(ti);
      while (it.hasNext()) {
        buff.append(it.next());
      }
    }
    if (term.get(ni))     ret.add(buff.toString());
    for (    Character v : this.chars) {
      int b=base[ni];
      if (b == BASE_EMPTY)       continue;
      int next=b + charToCode[v];
      if (check.length <= next)       continue;
      if (check[next] == ni) {
        StringBuilder bu=new StringBuilder(buff);
        bu.append(v);
        q.push(Pair.create(next,bu.toString().toCharArray()));
      }
    }
  }
  return ret;
}",0.9272419627749576
101076,"@Override public Iterable<String> commonPrefixSearch(String query){
  List<String> ret=new ArrayList<String>();
  char[] chars=query.toCharArray();
  int charsIndex=0;
  int nodeId=0;
  int start=0;
  TailCharIterator tci=new TailCharIterator(tails,-1);
  while (true) {
    start=bv.select0(nodeId) + 1;
    int end=bv.next0(start);
    int baseNodeId=bv.rank1(start) - start;
    while (start != end) {
      int i=(start + end) / 2;
      int index=baseNodeId + i;
      int d=chars[charsIndex] - labels[index];
      if (d < 0) {
        end=i;
      }
 else       if (d > 0) {
        if (start == i)         return ret;
 else         start=i;
      }
 else {
        int ti=tail[index];
        boolean tm=term.get(index);
        charsIndex++;
        if (ti != -1) {
          tci.setIndex(ti);
          while (tci.hasNext()) {
            if (charsIndex == chars.length)             return ret;
            if (tci.next() != chars[charsIndex++])             return ret;
          }
        }
 else {
          if (charsIndex == chars.length)           return ret;
        }
        if (tm)         ret.add(new String(chars,0,charsIndex));
        nodeId=baseNodeId + i;
        break;
      }
    }
    if (start == end)     return ret;
  }
}","@Override public Iterable<String> commonPrefixSearch(String query){
  List<String> ret=new ArrayList<String>();
  char[] chars=query.toCharArray();
  int charsIndex=0;
  int nodeId=0;
  int start=0;
  TailCharIterator tci=new TailCharIterator(tails,-1);
  while (true) {
    start=bv.select0(nodeId) + 1;
    int end=bv.next0(start);
    int baseNodeId=bv.rank1(start) - start;
    while (start != end) {
      int i=(start + end) / 2;
      int index=baseNodeId + i;
      int d=chars[charsIndex] - labels[index];
      if (d < 0) {
        end=i;
      }
 else       if (d > 0) {
        if (start == i)         return ret;
 else         start=i;
      }
 else {
        charsIndex++;
        if (charsIndex == chars.length)         return ret;
        int ti=tail[index];
        if (ti != -1) {
          tci.setIndex(ti);
          while (tci.hasNext()) {
            if (charsIndex == chars.length)             return ret;
            if (tci.next() != chars[charsIndex])             return ret;
            charsIndex++;
          }
        }
        if (term.get(index))         ret.add(new String(chars,0,charsIndex));
        if (charsIndex == chars.length)         return ret;
        nodeId=baseNodeId + i;
        break;
      }
    }
    if (start == end)     return ret;
  }
}",0.6842312229650019
101077,"public void append0(){
  int i=size / 8;
  int ci=size / CACHE_WIDTH;
  if (i >= vector.length) {
    extend();
  }
  if (size % CACHE_WIDTH == 0 && ci > 0) {
    countCache[ci]=countCache[ci - 1];
  }
  int r=size % 8;
  vector[i]&=~BITS[r];
  size0++;
  if (size0 == 2) {
    node2pos=size;
  }
  if (size0 % CACHE_WIDTH == 0) {
    indexCache[size0 / CACHE_WIDTH]=size;
  }
  size++;
}","public void append0(){
  int i=size / 8;
  int ci=size / CACHE_WIDTH;
  if (i >= vector.length) {
    extend();
  }
  if (size % CACHE_WIDTH == 0 && ci > 0) {
    countCache[ci]=countCache[ci - 1];
  }
  int r=size % 8;
  vector[i]&=~BITS[r];
  size0++;
  if (size0 == 1) {
    node1pos=size;
  }
 else   if (size0 == 2) {
    node2pos=size;
  }
  if (size0 % CACHE_WIDTH == 0) {
    indexCache[size0 / CACHE_WIDTH]=size;
  }
  size++;
}",0.9406060606060606
101078,"public int select0(int offset,int count){
  if (count == 1)   return 1;
  if (count == 2)   return node2pos;
  int start=indexCache[count / CACHE_WIDTH] / CACHE_WIDTH;
  int end=countCache.length;
  int ici=count / CACHE_WIDTH + 1;
  if (indexCache.length > ici) {
    end=(indexCache[ici]) / CACHE_WIDTH + 1;
  }
  int m=0;
  int d=0;
  while (start != end) {
    m=(start + end) / 2;
    d=count - (CACHE_WIDTH * (m + 1) - countCache[m]);
    if (m == (countCache.length - 1)) {
      d+=CACHE_WIDTH - (size % CACHE_WIDTH);
    }
    if (d < 0) {
      end=m;
      continue;
    }
 else     if (d > 0) {
      if (start != m)       start=m;
 else       break;
    }
 else {
      break;
    }
  }
  if (d > 0) {
    count=d;
    for (int i=(m + 1) * CACHE_WIDTH / 8; i < vector.length; i++) {
      if (i * 8 >= size)       return -1;
      int c=8 - BITCOUNTS[vector[i] & 0xff];
      if (count <= c) {
        int v=vector[i] & 0xff;
        for (int j=0; j < 8; j++) {
          if (i * 8 + j >= size)           return -1;
          if ((v & 0x80) == 0) {
            count--;
            if (count == 0) {
              return i * 8 + j;
            }
          }
          v<<=1;
        }
      }
      count-=c;
    }
  }
 else {
    count=d - 1;
    int i=Math.min(((m + 1) * CACHE_WIDTH) - 1,size - 1);
    int v=vector[i / 8] & 0xff;
    v>>=8 - (i % 8) - 1;
    while (i >= 0) {
      if ((v & 0x01) == 0) {
        count++;
        if (count == 0) {
          return i;
        }
      }
      if (i % 8 == 0) {
        v=vector[(i - 1) / 8] & 0xff;
      }
 else {
        v>>=1;
      }
      i--;
    }
  }
  return -1;
}","public int select0(int offset,int count){
  if (count == 1)   return node1pos;
  if (count == 2)   return node2pos;
  int start=indexCache[count / CACHE_WIDTH] / CACHE_WIDTH;
  int end=countCache.length;
  int ici=count / CACHE_WIDTH + 1;
  if (indexCache.length > ici) {
    end=(indexCache[ici]) / CACHE_WIDTH + 1;
  }
  int m=0;
  int d=0;
  while (start != end) {
    m=(start + end) / 2;
    d=count - (CACHE_WIDTH * (m + 1) - countCache[m]);
    if (m == (countCache.length - 1)) {
      d+=CACHE_WIDTH - (size % CACHE_WIDTH);
    }
    if (d < 0) {
      end=m;
      continue;
    }
 else     if (d > 0) {
      if (start != m)       start=m;
 else       break;
    }
 else {
      break;
    }
  }
  if (d > 0) {
    count=d;
    for (int i=(m + 1) * CACHE_WIDTH / 8; i < vector.length; i++) {
      if (i * 8 >= size)       return -1;
      int c=8 - BITCOUNTS[vector[i] & 0xff];
      if (count <= c) {
        int v=vector[i] & 0xff;
        for (int j=0; j < 8; j++) {
          if (i * 8 + j >= size)           return -1;
          if ((v & 0x80) == 0) {
            count--;
            if (count == 0) {
              return i * 8 + j;
            }
          }
          v<<=1;
        }
      }
      count-=c;
    }
  }
 else {
    count=d - 1;
    int i=Math.min(((m + 1) * CACHE_WIDTH) - 1,size - 1);
    int v=vector[i / 8] & 0xff;
    v>>=8 - (i % 8) - 1;
    while (i >= 0) {
      if ((v & 0x01) == 0) {
        count++;
        if (count == 0) {
          return i;
        }
      }
      if (i % 8 == 0) {
        v=vector[(i - 1) / 8] & 0xff;
      }
 else {
        v>>=1;
      }
      i--;
    }
  }
  return -1;
}",0.9972602739726028
101079,"public void append(boolean bit){
  int i=size / 8;
  if (i >= vector.length) {
    byte[] n=new byte[(int)(vector.length * 1.2)];
    System.arraycopy(vector,0,n,0,vector.length);
    n[vector.length]=0;
    vector=n;
  }
  int r=size % 8;
  if (bit) {
    vector[i]|=BITS[r];
  }
 else {
    vector[i]&=~BITS[r];
  }
  size++;
}","public void append(boolean bit){
  int i=size / 8;
  if (i >= vector.length) {
    byte[] n=new byte[(int)(vector.length * 1.2) + 1];
    System.arraycopy(vector,0,n,0,vector.length);
    n[vector.length]=0;
    vector=n;
  }
  int r=size % 8;
  if (bit) {
    vector[i]|=BITS[r];
  }
 else {
    vector[i]&=~BITS[r];
  }
  size++;
}",0.9939577039274924
101080,"private void build(Node node,int nodeIndex){
  char[] letters=node.getLetters();
  if (letters != null) {
    for (int i=1; i < letters.length; i++) {
      char c=letters[i];
      int cid=getCharId(c);
      int empty=findFirstEmptyCheck();
      setCheck(empty,nodeIndex);
      base[nodeIndex]=empty - cid;
      nodeIndex=empty;
    }
    if (node.isTerminated()) {
      term.set(nodeIndex);
    }
  }
  Node[] children=node.getChildren();
  if (children == null || children.length == 0)   return;
  int[] heads=new int[children.length];
  int maxHead=0;
  for (int i=0; i < children.length; i++) {
    heads[i]=getCharId(children[i].getLetters()[0]);
    maxHead=Math.max(maxHead,heads[i]);
  }
  int empty=findFirstEmptyCheck();
  int offset=empty - heads[0];
  while (true) {
    if (check.length <= (offset + maxHead)) {
      extend(offset + maxHead);
    }
    boolean found=true;
    for (    int cid : heads) {
      if (check[offset + cid] >= 0) {
        found=false;
        break;
      }
    }
    if (found)     break;
    empty=findNextEmptyCheck(empty);
    offset=empty - heads[0];
  }
  base[nodeIndex]=offset;
  for (  int cid : heads) {
    setCheck(offset + cid,nodeIndex);
  }
  Map<Integer,List<Pair<Node,Integer>>> nodes=new TreeMap<Integer,List<Pair<Node,Integer>>>(new Comparator<Integer>(){
    @Override public int compare(    Integer arg0,    Integer arg1){
      return arg1 - arg0;
    }
  }
);
  for (int i=0; i < children.length; i++) {
    Node[] c=children[i].getChildren();
    int n=0;
    if (c != null) {
      n=c.length;
    }
    List<Pair<Node,Integer>> p=nodes.get(n);
    if (p == null) {
      p=new ArrayList<Pair<Node,Integer>>();
      nodes.put(n,p);
    }
    p.add(Pair.create(children[i],heads[i]));
  }
  for (  Map.Entry<Integer,List<Pair<Node,Integer>>> e : nodes.entrySet()) {
    for (    Pair<Node,Integer> e2 : e.getValue()) {
      build(e2.getFirst(),e2.getSecond() + offset);
    }
  }
}","private void build(Node node,int nodeIndex){
  char[] letters=node.getLetters();
  if (letters != null) {
    for (int i=1; i < letters.length; i++) {
      char c=letters[i];
      int cid=getCharId(c);
      int empty=findFirstEmptyCheck();
      setCheck(empty,nodeIndex);
      base[nodeIndex]=empty - cid;
      nodeIndex=empty;
    }
    if (node.isTerminated()) {
      term.set(nodeIndex);
    }
  }
  Node[] children=node.getChildren();
  if (children == null || children.length == 0)   return;
  int[] heads=new int[children.length];
  int maxHead=0;
  for (int i=0; i < children.length; i++) {
    heads[i]=getCharId(children[i].getLetters()[0]);
    maxHead=Math.max(maxHead,heads[i]);
  }
  int empty=findFirstEmptyCheck();
  int offset=empty - heads[0];
  while (true) {
    if (check.length <= (offset + maxHead)) {
      extend(offset + maxHead);
    }
    boolean found=true;
    for (    int cid : heads) {
      if (check[offset + cid] >= 0) {
        found=false;
        break;
      }
    }
    if (found)     break;
    empty=findNextEmptyCheck(empty);
    offset=empty - heads[0];
  }
  base[nodeIndex]=offset;
  for (  int cid : heads) {
    setCheck(offset + cid,nodeIndex);
  }
  for (int i=0; i < children.length; i++) {
    build(children[i],offset + heads[i]);
  }
}",0.7798277982779828
101081,"public void dump(){
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",i));
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (base[i] == BASE_EMPTY) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",base[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (check[i] < 0) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",check[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",term.get(i) ? 1 : 0));
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (  Map.Entry<Character,Integer> e : charCodes.entrySet()) {
    System.out.print(String.format(""String_Node_Str"",e.getKey(),e.getValue()));
  }
  System.out.println();
}","public void dump(){
  System.out.println(""String_Node_Str"" + base.length);
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",i));
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (base[i] == BASE_EMPTY) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",base[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    if (check[i] < 0) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.print(String.format(""String_Node_Str"",check[i]));
    }
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    System.out.print(String.format(""String_Node_Str"",term.get(i) ? 1 : 0));
  }
  System.out.println();
  System.out.print(""String_Node_Str"");
  for (  Map.Entry<Character,Integer> e : charCodes.entrySet()) {
    System.out.print(String.format(""String_Node_Str"",e.getKey(),e.getValue()));
  }
  System.out.println();
}",0.9750792931581332
101082,"@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  char[] chars=prefix.toCharArray();
  int nodeIndex=0;
  for (int i=0; i < chars.length; i++) {
    int cid=findCharId(chars[i]);
    if (cid == -1)     return ret;
    int next=base[nodeIndex] + cid;
    if (next < 0 || check.length <= next || check[next] != nodeIndex)     return ret;
    nodeIndex=next;
  }
  if (term.get(nodeIndex)) {
    ret.add(prefix);
  }
  Deque<Pair<Integer,char[]>> q=new LinkedList<Pair<Integer,char[]>>();
  q.add(Pair.create(nodeIndex,chars));
  while (!q.isEmpty()) {
    Pair<Integer,char[]> p=q.pop();
    int ni=p.getFirst();
    char[] c=p.getSecond();
    for (    Map.Entry<Character,Integer> e : charCodes.entrySet()) {
      int b=base[ni];
      if (b == BASE_EMPTY)       continue;
      int next=b + e.getValue();
      if (check.length <= next)       continue;
      if (check[next] == ni) {
        if (term.get(ni)) {
          ret.add(new StringBuilder().append(c).append(e.getKey()).toString());
        }
        q.push(Pair.create(next,c.clone()));
      }
    }
  }
  return ret;
}","@Override public Iterable<String> predictiveSearch(String prefix){
  List<String> ret=new ArrayList<String>();
  char[] chars=prefix.toCharArray();
  int nodeIndex=0;
  for (int i=0; i < chars.length; i++) {
    int cid=findCharId(chars[i]);
    if (cid == -1)     return ret;
    int next=base[nodeIndex] + cid;
    if (next < 0 || check.length <= next || check[next] != nodeIndex)     return ret;
    nodeIndex=next;
  }
  if (term.get(nodeIndex)) {
    ret.add(prefix);
  }
  Deque<Pair<Integer,char[]>> q=new LinkedList<Pair<Integer,char[]>>();
  q.add(Pair.create(nodeIndex,chars));
  while (!q.isEmpty()) {
    Pair<Integer,char[]> p=q.pop();
    int ni=p.getFirst();
    int b=base[ni];
    if (b == BASE_EMPTY)     continue;
    char[] c=p.getSecond();
    for (    Map.Entry<Character,Integer> e : charCodes.entrySet()) {
      int next=b + e.getValue();
      if (check.length <= next)       continue;
      if (check[next] == ni) {
        String n=new StringBuilder().append(c).append(e.getKey()).toString();
        if (term.get(next)) {
          ret.add(n);
        }
        q.push(Pair.create(next,n.toCharArray()));
      }
    }
  }
  return ret;
}",0.8494809688581315
101083,"@Override public Iterable<String> predictiveSearch(String prefix){
  char[] queryChars=prefix.toCharArray();
  int cur=0;
  Node node=root;
  while (node != null) {
    char[] letters=node.getLetters();
    if (letters.length > (queryChars.length - cur))     return Collections.emptyList();
    for (int i=0; i < letters.length; i++) {
      if (letters[i] != queryChars[cur + i]) {
        return Collections.emptyList();
      }
    }
    cur+=letters.length;
    if (queryChars.length == cur) {
      List<String> ret=new ArrayList<String>();
      if (node.isTerminated())       ret.add(prefix);
      enumLetters(node,prefix,ret);
      return ret;
    }
    node=node.getChild(queryChars[cur]);
  }
  return Collections.emptyList();
}","@Override public Iterable<String> predictiveSearch(String prefix){
  char[] queryChars=prefix.toCharArray();
  int cur=0;
  Node node=root;
  while (node != null) {
    char[] letters=node.getLetters();
    int n=Math.min(letters.length,queryChars.length - cur);
    for (int i=0; i < n; i++) {
      if (letters[i] != queryChars[cur + i]) {
        return Collections.emptyList();
      }
    }
    cur+=n;
    if (queryChars.length == cur) {
      List<String> ret=new ArrayList<String>();
      int rest=letters.length - n;
      if (rest > 0) {
        prefix+=new String(letters,n,rest);
      }
      if (node.isTerminated()) {
        ret.add(prefix);
      }
      enumLetters(node,prefix,ret);
      return ret;
    }
    node=node.getChild(queryChars[cur]);
  }
  return Collections.emptyList();
}",0.4201680672268907
101084,"public Iterable<String> predictiveSearch(String prefix){
  char[] queryChars=prefix.toCharArray();
  int cur=0;
  Node node=root;
  while (node != null) {
    char[] letters=node.getLetters();
    if (letters.length > (queryChars.length - cur))     return Collections.emptyList();
    for (int i=0; i < letters.length; i++) {
      if (letters[i] != queryChars[cur + i]) {
        return Collections.emptyList();
      }
    }
    cur+=letters.length;
    if (queryChars.length == cur) {
      List<String> ret=new ArrayList<String>();
      if (node.isTerminated())       ret.add(prefix);
      enumLetters(node,prefix,ret);
      return ret;
    }
    node=node.getChild(queryChars[cur]);
  }
  return Collections.emptyList();
}","public Iterable<String> predictiveSearch(String prefix){
  char[] queryChars=prefix.toCharArray();
  int cur=0;
  Node node=root;
  while (node != null) {
    char[] letters=node.getLetters();
    int n=Math.min(letters.length,queryChars.length - cur);
    for (int i=0; i < n; i++) {
      if (letters[i] != queryChars[cur + i]) {
        return Collections.emptyList();
      }
    }
    cur+=n;
    if (queryChars.length == cur) {
      List<String> ret=new ArrayList<String>();
      int rest=letters.length - n;
      if (rest > 0) {
        prefix+=new String(letters,n,rest);
      }
      if (node.isTerminated())       ret.add(prefix);
      enumLetters(node,prefix,ret);
      return ret;
    }
    node=node.getChild(queryChars[cur]);
  }
  return Collections.emptyList();
}",0.8514851485148515
101085,"/** 
 * Constructor used by ExoContainer.
 * @param {@link InitParams} params
 * @param {@link ConfigurationManager} confManager
 */
public ExtendedPropertyConfigurator(InitParams params,ConfigurationManager confManager){
  super(loadPropertiesParams(params),confManager);
  ValuesParam exts=params.getValuesParam(""String_Node_Str"");
  if (exts != null) {
    for (    Object val : exts.getValues()) {
      String path=(String)val;
      if (path != null) {
        URL url=null;
        try {
          url=confManager.getURL(path);
          url.openStream().close();
          LOG.info(""String_Node_Str"" + url + ""String_Node_Str"");
          Map<String,String> props=ContainerUtil.loadProperties(url);
          if (props != null) {
            for (            Map.Entry<String,String> entry : props.entrySet()) {
              String propertyName=entry.getKey();
              String propertyValue=entry.getValue();
              PropertyManager.setProperty(propertyName,propertyValue);
            }
          }
        }
 catch (        FileNotFoundException fne) {
          LOG.info(""String_Node_Str"" + path + ""String_Node_Str"");
        }
catch (        Exception e) {
          LOG.error(""String_Node_Str"" + path + (url != null ? ""String_Node_Str"" + url : ""String_Node_Str""),e);
        }
      }
    }
  }
}","/** 
 * Constructor used by ExoContainer.
 * @param params
 * @param confManager
 */
public ExtendedPropertyConfigurator(InitParams params,ConfigurationManager confManager){
  super(loadPropertiesParams(params),confManager);
  ValuesParam exts=params.getValuesParam(""String_Node_Str"");
  if (exts != null) {
    for (    Object val : exts.getValues()) {
      String path=(String)val;
      if (path != null) {
        URL url=null;
        try {
          url=confManager.getURL(path);
          url.openStream().close();
          LOG.info(""String_Node_Str"" + url + ""String_Node_Str"");
          Map<String,String> props=ContainerUtil.loadProperties(url);
          if (props != null) {
            for (            Map.Entry<String,String> entry : props.entrySet()) {
              String propertyName=entry.getKey();
              String propertyValue=entry.getValue();
              PropertyManager.setProperty(propertyName,propertyValue);
            }
          }
        }
 catch (        FileNotFoundException fne) {
          LOG.info(""String_Node_Str"" + path + ""String_Node_Str"");
        }
catch (        Exception e) {
          LOG.error(""String_Node_Str"" + path + (url != null ? ""String_Node_Str"" + url : ""String_Node_Str""),e);
        }
      }
    }
  }
}",0.972993827160494
101086,"/** 
 * Serves   {@link #DISABLED_JSP} if the portlet is not a valid dependencyof the current portal container.
 */
public void doFilter(RenderRequest request,RenderResponse response,FilterChain chain) throws IOException, PortletException {
  PortletConfig portletConfig=(PortletConfig)request.getAttribute(""String_Node_Str"");
  String portletName=portletConfig.getPortletName();
  String portletID=context.getPortletContextName() + ""String_Node_Str"" + portletName;
  if (getModuleRegistry().isPortletActive(portletID)) {
    chain.doFilter(request,response);
  }
 else {
    LOG.info(""String_Node_Str"" + portletID + ""String_Node_Str"");
    String html=getPortletSpecificMessage(request,portletName,portletID);
    response.getWriter().print(html);
  }
}","/** 
 * Serves a page with a message if the portlet is not a valid dependency of the current portal container.
 */
public void doFilter(RenderRequest request,RenderResponse response,FilterChain chain) throws IOException, PortletException {
  PortletConfig portletConfig=(PortletConfig)request.getAttribute(""String_Node_Str"");
  String portletName=portletConfig.getPortletName();
  String portletID=context.getPortletContextName() + ""String_Node_Str"" + portletName;
  if (getModuleRegistry().isPortletActive(portletID)) {
    chain.doFilter(request,response);
  }
 else {
    LOG.info(""String_Node_Str"" + portletID + ""String_Node_Str"");
    String html=getPortletSpecificMessage(request,portletName,portletID);
    response.getWriter().print(html);
  }
}",0.9701393497013936
101087,"/** 
 * Allows superusers to switch on or off a feature, then redirects them to the portal homepage.
 * @param featureName Name of the feature.
 * @param active Its value must be ""yes"" or ""no"" that switches on or off the feature respectively.
 * @authentication
 * @request GET: http://localhost:8080/rest/homepage/intranet/features?name=notification&active=no
 * @return Redirects to the portal homepage.
 * @throws Exception
 */
@GET public Response featureSwitch(@QueryParam(""String_Node_Str"") String featureName,@QueryParam(""String_Node_Str"") String active) throws Exception {
  ExoContainer container=ExoContainerContext.getCurrentContainer();
  UserACL acl=(UserACL)container.getComponentInstanceOfType(UserACL.class);
  String currentUser=ConversationState.getCurrent().getIdentity().getUserId();
  if (!acl.getSuperUser().equals(currentUser)) {
    LOG.warn(""String_Node_Str"");
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  boolean isActive=(""String_Node_Str"".equals(active)) ? false : true;
  ExoFeatureService featureService=CommonsUtils.getService(ExoFeatureService.class);
  featureService.saveActiveFeature(featureName,isActive);
  String domain=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  return Response.seeOther(URI.create(domain + LinkProvider.getRedirectUri(""String_Node_Str""))).build();
}","/** 
 * Allows superusers to switch on or off a feature, then redirects them to the portal homepage.
 * @param featureName Name of the feature.
 * @param active Its value must be ""yes"" or ""no"" that switches on or off the feature respectively.
 * @return Redirects to the portal homepage.
 * @throws Exception
 */
@GET public Response featureSwitch(@QueryParam(""String_Node_Str"") String featureName,@QueryParam(""String_Node_Str"") String active) throws Exception {
  ExoContainer container=ExoContainerContext.getCurrentContainer();
  UserACL acl=(UserACL)container.getComponentInstanceOfType(UserACL.class);
  String currentUser=ConversationState.getCurrent().getIdentity().getUserId();
  if (!acl.getSuperUser().equals(currentUser)) {
    LOG.warn(""String_Node_Str"");
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  boolean isActive=(""String_Node_Str"".equals(active)) ? false : true;
  ExoFeatureService featureService=CommonsUtils.getService(ExoFeatureService.class);
  featureService.saveActiveFeature(featureName,isActive);
  String domain=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  return Response.seeOther(URI.create(domain + LinkProvider.getRedirectUri(""String_Node_Str""))).build();
}",0.9542280837858804
101088,"/** 
 * Instantiates a new XML deployment plugin.
 * @param initParams the init params
 * @param configurationManager the configuration manager
 * @param repositoryService the repository service
 * @param nodeHierarchyCreator the nodeHierarchyCreator service
 */
public XMLDeploymentPlugin(InitParams initParams,SpaceCustomizationService spaceCustomizationService_,NodeHierarchyCreator nodeHierarchyCreator){
  this.spaceCustomizationService=spaceCustomizationService_;
  this.initParams=initParams;
}","/** 
 * Instantiates a new XML deployment plugin.
 * @param initParams the init params
 * @param spaceCustomizationService the space customization service
 * @param nodeHierarchyCreator the nodeHierarchyCreator service
 */
public XMLDeploymentPlugin(InitParams initParams,SpaceCustomizationService spaceCustomizationService,NodeHierarchyCreator nodeHierarchyCreator){
  this.spaceCustomizationService=spaceCustomizationService;
  this.initParams=initParams;
}",0.8541666666666666
101089,"/** 
 * Return the   {@link Page} that have a dashbord of user that name isprovided <br/>
 * @param userId The user name.
 * @throws Exception
 */
private Page getUserDashboardPage(String userId) throws Exception {
  return dataStorageService.getPage(SiteType.USER.getName() + ""String_Node_Str"" + userId+ ""String_Node_Str""+ DEFAULT_TAB_NAME);
}","/** 
 * Return the   {@link Page} that have a dashbord of user that name isprovided <br>
 * @param userId The user name.
 * @throws Exception
 */
private Page getUserDashboardPage(String userId) throws Exception {
  return dataStorageService.getPage(SiteType.USER.getName() + ""String_Node_Str"" + userId+ ""String_Node_Str""+ DEFAULT_TAB_NAME);
}",0.9985443959243084
101090,"/** 
 * Apply OrganizationService listeners on selected User
 * @param username The user name
 * @param eventType ADDED/UPDATED/DELETED
 */
@Managed @ManagedDescription(""String_Node_Str"") @Impact(ImpactType.READ) public String isUserSync(@ManagedDescription(""String_Node_Str"") @ManagedName(""String_Node_Str"") String username) throws Exception {
  Session session=null;
  try {
    session=repositoryService.getCurrentRepository().getSystemSession(Util.WORKSPACE);
    return ""String_Node_Str"" + Util.hasUserFolder(session,username);
  }
  finally {
    if (session != null) {
      session.logout();
    }
  }
}","/** 
 * Apply OrganizationService listeners on selected User
 * @param username The user name
 */
@Managed @ManagedDescription(""String_Node_Str"") @Impact(ImpactType.READ) public String isUserSync(@ManagedDescription(""String_Node_Str"") @ManagedName(""String_Node_Str"") String username) throws Exception {
  Session session=null;
  try {
    session=repositoryService.getCurrentRepository().getSystemSession(Util.WORKSPACE);
    return ""String_Node_Str"" + Util.hasUserFolder(session,username);
  }
  finally {
    if (session != null) {
      session.logout();
    }
  }
}",0.964406779661017
101091,"/** 
 * @param url
 * @return URL of the page with selected URI in the current portal
 */
public static String getURLInCurrentPortal(String uri){
  RequestContext ctx=RequestContext.getCurrentInstance();
  NodeURL nodeURL=ctx.createURL(NodeURL.TYPE);
  NavigationResource resource=new NavigationResource(SiteType.PORTAL,Util.getPortalRequestContext().getPortalOwner(),uri);
  return nodeURL.setResource(resource).toString();
}","/** 
 * @param uri
 * @return URL of the page with selected URI in the current portal
 */
public static String getURLInCurrentPortal(String uri){
  RequestContext ctx=RequestContext.getCurrentInstance();
  NodeURL nodeURL=ctx.createURL(NodeURL.TYPE);
  NavigationResource resource=new NavigationResource(SiteType.PORTAL,Util.getPortalRequestContext().getPortalOwner(),uri);
  return nodeURL.setResource(resource).toString();
}",0.9976525821596244
101092,"/** 
 * @param portalName
 * @param url
 * @return URL of the page with selected URI in the selected portal
 */
public static String getPortalURL(String portalName,String uri){
  RequestContext ctx=RequestContext.getCurrentInstance();
  NodeURL nodeURL=ctx.createURL(NodeURL.TYPE);
  NavigationResource resource=new NavigationResource(SiteKey.portal(portalName),uri);
  return nodeURL.setResource(resource).toString();
}","/** 
 * @param portalName
 * @param uri
 * @return URL of the page with selected URI in the selected portal
 */
public static String getPortalURL(String portalName,String uri){
  RequestContext ctx=RequestContext.getCurrentInstance();
  NodeURL nodeURL=ctx.createURL(NodeURL.TYPE);
  NavigationResource resource=new NavigationResource(SiteKey.portal(portalName),uri);
  return nodeURL.setResource(resource).toString();
}",0.9976190476190476
101093,"/** 
 * get Top {maxcount} rated of topics by permission of userId
 * @param userId String is userId of user login
 * @param maxcount maximum of result
 * @return top {maxcount} rated of topics
 * @throws Exception
 */
public List<TopicBean> getTopRateTopicByUser(List<String> allInfoOfUser,int maxcount) throws Exception {
  SessionProvider sProvider=SessionProvider.createSystemProvider();
  List<TopicBean> topicBeans=new ArrayList<TopicBean>();
  try {
    long roleUser=getUserRoleOfForum(sProvider,(allInfoOfUser.size() > 0) ? allInfoOfUser.get(0) : ""String_Node_Str"");
    NodeIterator iter=getTopVoteTopicByUser(sProvider,(roleUser <= 1) ? true : false);
    TopicBean bean;
    PropertyReader reader;
    while (iter.hasNext()) {
      Node node=iter.nextNode();
      if (hasPermissionInForum(sProvider,node,allInfoOfUser,roleUser)) {
        reader=new PropertyReader(node);
        bean=new TopicBean(node.getName());
        bean.setOwner(reader.string(""String_Node_Str""));
        bean.setCreateDate(reader.date(""String_Node_Str""));
        bean.setLink(reader.string(""String_Node_Str""));
        bean.setTitle(reader.string(""String_Node_Str""));
        bean.setVoteRating(reader.d(""String_Node_Str""));
        bean.setNumberOfUserVoteRating(reader.list(""String_Node_Str"").size());
        topicBeans.add(bean);
        if (topicBeans.size() == maxcount)         break;
      }
    }
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"");
  }
 finally {
    sProvider.close();
  }
  return topicBeans;
}","/** 
 * get Top {maxcount} rated of topics by permission of userId
 * @param allInfoOfUser List of users ids
 * @param maxcount maximum of result
 * @return top {maxcount} rated of topics
 * @throws Exception
 */
public List<TopicBean> getTopRateTopicByUser(List<String> allInfoOfUser,int maxcount) throws Exception {
  SessionProvider sProvider=SessionProvider.createSystemProvider();
  List<TopicBean> topicBeans=new ArrayList<TopicBean>();
  try {
    long roleUser=getUserRoleOfForum(sProvider,(allInfoOfUser.size() > 0) ? allInfoOfUser.get(0) : ""String_Node_Str"");
    NodeIterator iter=getTopVoteTopicByUser(sProvider,(roleUser <= 1) ? true : false);
    TopicBean bean;
    PropertyReader reader;
    while (iter.hasNext()) {
      Node node=iter.nextNode();
      if (hasPermissionInForum(sProvider,node,allInfoOfUser,roleUser)) {
        reader=new PropertyReader(node);
        bean=new TopicBean(node.getName());
        bean.setOwner(reader.string(""String_Node_Str""));
        bean.setCreateDate(reader.date(""String_Node_Str""));
        bean.setLink(reader.string(""String_Node_Str""));
        bean.setTitle(reader.string(""String_Node_Str""));
        bean.setVoteRating(reader.d(""String_Node_Str""));
        bean.setNumberOfUserVoteRating(reader.list(""String_Node_Str"").size());
        topicBeans.add(bean);
        if (topicBeans.size() == maxcount)         break;
      }
    }
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"");
  }
 finally {
    sProvider.close();
  }
  return topicBeans;
}",0.9783180026281209
101094,"/** 
 * Get user login history <p/> REST service URL: /loginhistory/{userId}/{fromTime}/{toTime}
 * @return : Login history entries from {fromTime} to {toTime} (in JSON data format) of user {userId}
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response loginhistory(@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") Long fromTime,@PathParam(""String_Node_Str"") Long toTime) throws Exception {
  try {
    List<LoginHistoryBean> loginHis=loginHistoryService.getLoginHistory(userId,fromTime,toTime);
    List<Object> loginHisData=new ArrayList<Object>();
    loginHisData.add(loginHis.size());
    loginHisData.add(loginHis);
    MessageBean data=new MessageBean();
    data.setData(loginHisData);
    return Response.ok(data,MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"" + e.getMessage(),e);
    return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cacheControl).build();
  }
}","/** 
 * Get user login history <br> REST service URL: /loginhistory/{userId}/{fromTime}/{toTime}
 * @return : Login history entries from {fromTime} to {toTime} (in JSON data format) of user {userId}
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response loginhistory(@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") Long fromTime,@PathParam(""String_Node_Str"") Long toTime) throws Exception {
  try {
    List<LoginHistoryBean> loginHis=loginHistoryService.getLoginHistory(userId,fromTime,toTime);
    List<Object> loginHisData=new ArrayList<Object>();
    loginHisData.add(loginHis.size());
    loginHisData.add(loginHis);
    MessageBean data=new MessageBean();
    data.setData(loginHisData);
    return Response.ok(data,MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"" + e.getMessage(),e);
    return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cacheControl).build();
  }
}",0.9980430528375732
101095,"/** 
 * Get login count statistic in a week <p/> REST service URL: /loginhistory/weekstats/{userId}/{week}
 * @return : List of login count per days in week {week} (in JSON data format) of user {userId}
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response weekstats(@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") String week) throws Exception {
  try {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    List<LoginCounterBean> loginCounts=loginHistoryService.getLoginCountPerDaysInWeek(userId,sdf.parse(week).getTime());
    List<Object> loginCountsData=new ArrayList<Object>();
    loginCountsData.add(loginCounts.size());
    loginCountsData.add(loginCounts);
    MessageBean data=new MessageBean();
    data.setData(loginCountsData);
    return Response.ok(data,MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"" + e.getMessage(),e);
    return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cacheControl).build();
  }
}","/** 
 * Get login count statistic in a week <br> REST service URL: /loginhistory/weekstats/{userId}/{week}
 * @return : List of login count per days in week {week} (in JSON data format) of user {userId}
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response weekstats(@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") String week) throws Exception {
  try {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    List<LoginCounterBean> loginCounts=loginHistoryService.getLoginCountPerDaysInWeek(userId,sdf.parse(week).getTime());
    List<Object> loginCountsData=new ArrayList<Object>();
    loginCountsData.add(loginCounts.size());
    loginCountsData.add(loginCounts);
    MessageBean data=new MessageBean();
    data.setData(loginCountsData);
    return Response.ok(data,MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"" + e.getMessage(),e);
    return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cacheControl).build();
  }
}",0.9981600735970562
101096,"/** 
 * Get login count statistic in months <p/> REST service URL: /loginhistory/monthstats/{userId}/{fromMonth/{numOfMonth}}
 * @return : List of login count per weeks in {numOfMonths} months start from {fromMonth} (in JSON data format) of user {userId}
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response monthstats(@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") String fromMonth,@PathParam(""String_Node_Str"") int numOfMonths) throws Exception {
  try {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    List<LoginCounterBean> loginCounts=loginHistoryService.getLoginCountPerWeeksInMonths(userId,sdf.parse(fromMonth).getTime(),numOfMonths);
    List<Object> loginCountsData=new ArrayList<Object>();
    loginCountsData.add(loginCounts.size());
    loginCountsData.add(loginCounts);
    MessageBean data=new MessageBean();
    data.setData(loginCountsData);
    return Response.ok(data,MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"" + e.getMessage(),e);
    return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cacheControl).build();
  }
}","/** 
 * Get login count statistic in months <br> REST service URL: /loginhistory/monthstats/{userId}/{fromMonth/{numOfMonth}}
 * @return : List of login count per weeks in {numOfMonths} months start from {fromMonth} (in JSON data format) of user {userId}
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response monthstats(@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") String fromMonth,@PathParam(""String_Node_Str"") int numOfMonths) throws Exception {
  try {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    List<LoginCounterBean> loginCounts=loginHistoryService.getLoginCountPerWeeksInMonths(userId,sdf.parse(fromMonth).getTime(),numOfMonths);
    List<Object> loginCountsData=new ArrayList<Object>();
    loginCountsData.add(loginCounts.size());
    loginCountsData.add(loginCounts);
    MessageBean data=new MessageBean();
    data.setData(loginCountsData);
    return Response.ok(data,MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"" + e.getMessage(),e);
    return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cacheControl).build();
  }
}",0.9983484723369116
101097,"/** 
 * Get last {numItems} login history entries <p/> REST service URL: /loginhistory/lastlogins/{numItems}/{userIdFilter}
 * @return : The list of last {numItems} login history entries (filtered by {userIdFilter}) in JSON data format
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response lastlogins(@PathParam(""String_Node_Str"") int numItems,@PathParam(""String_Node_Str"") String userIdFilter) throws Exception {
  try {
    List lastLogins=loginHistoryService.getLastLogins(numItems,userIdFilter);
    MessageBean data=new MessageBean();
    data.setData(lastLogins);
    return Response.ok(data,MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"" + e.getMessage(),e);
    return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cacheControl).build();
  }
}","/** 
 * Get last {numItems} login history entries <br> REST service URL: /loginhistory/lastlogins/{numItems}/{userIdFilter}
 * @return : The list of last {numItems} login history entries (filtered by {userIdFilter}) in JSON data format
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response lastlogins(@PathParam(""String_Node_Str"") int numItems,@PathParam(""String_Node_Str"") String userIdFilter) throws Exception {
  try {
    List lastLogins=loginHistoryService.getLastLogins(numItems,userIdFilter);
    MessageBean data=new MessageBean();
    data.setData(lastLogins);
    return Response.ok(data,MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"" + e.getMessage(),e);
    return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cacheControl).build();
  }
}",0.997709049255441
101098,"/** 
 * Get login count statistic in a year <p/> REST service URL: /loginhistory/yearstats/{userId}/{year}
 * @return : List of login count per months in year {year} (in JSON data format) of user {userId}
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response yearstats(@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") String year) throws Exception {
  try {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    List<LoginCounterBean> loginCounts=loginHistoryService.getLoginCountPerMonthsInYear(userId,sdf.parse(year).getTime());
    List<Object> loginCountsData=new ArrayList<Object>();
    loginCountsData.add(loginCounts.size());
    loginCountsData.add(loginCounts);
    MessageBean data=new MessageBean();
    data.setData(loginCountsData);
    return Response.ok(data,MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"" + e.getMessage(),e);
    return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cacheControl).build();
  }
}","/** 
 * Get login count statistic in a year <br> REST service URL: /loginhistory/yearstats/{userId}/{year}
 * @return : List of login count per months in year {year} (in JSON data format) of user {userId}
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response yearstats(@PathParam(""String_Node_Str"") String userId,@PathParam(""String_Node_Str"") String year) throws Exception {
  try {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    List<LoginCounterBean> loginCounts=loginHistoryService.getLoginCountPerMonthsInYear(userId,sdf.parse(year).getTime());
    List<Object> loginCountsData=new ArrayList<Object>();
    loginCountsData.add(loginCounts.size());
    loginCountsData.add(loginCounts);
    MessageBean data=new MessageBean();
    data.setData(loginCountsData);
    return Response.ok(data,MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"" + e.getMessage(),e);
    return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cacheControl).build();
  }
}",0.998166819431714
101099,"@Override public Boolean call() throws Exception {
  int start=idx * threadSize;
  int end=start + threadSize;
  if (idx == threadNum - 1) {
    end+=odd;
  }
  ExoContainerContext.setCurrentContainer(container);
  int startBatch=start;
  int endBatch=startBatch + batchSize;
  while (endBatch <= totalSize && endBatch <= end && startBatch < endBatch) {
    LOG.info(""String_Node_Str"",Thread.currentThread(),startBatch,endBatch);
    RequestLifeCycle.begin(impl);
    IdentitySession session=idmService.getIdentitySession();
    User[] tmp=usrs.load(startBatch,endBatch - startBatch);
    try {
      for (      User u : tmp) {
        enableUser(u,session);
      }
      count.addAndGet(endBatch - startBatch);
      startBatch=endBatch;
      endBatch=startBatch + batchSize;
      endBatch=endBatch > end ? end : endBatch;
      LOG.info(""String_Node_Str"",Thread.currentThread());
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
      return false;
    }
 finally {
      RequestLifeCycle.end();
    }
  }
  return true;
}","@Override public Boolean call() throws Exception {
  int start=idx * threadSize;
  int end=start + threadSize;
  if (idx == threadNum - 1) {
    end+=odd;
  }
  ExoContainerContext.setCurrentContainer(container);
  int startBatch=start;
  int endBatch=startBatch + batchSize;
  endBatch=endBatch > end ? end : endBatch;
  while (endBatch <= totalSize && endBatch <= end && startBatch < endBatch) {
    LOG.info(""String_Node_Str"",Thread.currentThread(),startBatch,endBatch);
    RequestLifeCycle.begin(impl);
    IdentitySession session=idmService.getIdentitySession();
    User[] tmp=usrs.load(startBatch,endBatch - startBatch);
    try {
      for (      User u : tmp) {
        enableUser(u,session);
      }
      count.addAndGet(endBatch - startBatch);
      startBatch=endBatch;
      endBatch=startBatch + batchSize;
      endBatch=endBatch > end ? end : endBatch;
      LOG.info(""String_Node_Str"",Thread.currentThread());
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
      return false;
    }
 finally {
      RequestLifeCycle.end();
    }
  }
  return true;
}",0.9794584500466852
101100,"@Override public void processUpgrade(String oldVersion,String newVersion){
  LOG.info(""String_Node_Str"",this.getClass().getName());
  if (service instanceof PicketLinkIDMOrganizationServiceImpl) {
    final PicketLinkIDMOrganizationServiceImpl impl=(PicketLinkIDMOrganizationServiceImpl)service;
    if (!impl.getConfiguration().isDisableUserActived()) {
      LOG.info(""String_Node_Str"");
      return;
    }
    final UserHandler handler=service.getUserHandler();
    ListAccess<User> users=null;
    int size=0;
    try {
      RequestLifeCycle.begin(impl);
      users=handler.findAllUsers(UserStatus.ANY);
      size=users.getSize();
    }
 catch (    Exception ex) {
      LOG.error(ex);
    }
 finally {
      RequestLifeCycle.end();
    }
    batchSize=batchSize > size ? size : batchSize;
    int tSize=size / threadNum;
    tSize=tSize > 0 ? tSize : size;
    final int odd=tSize == size ? 0 : size % threadNum;
    LOG.info(""String_Node_Str"",size,threadNum,batchSize);
    ExecutorService execService=Executors.newFixedThreadPool(threadNum);
    final AtomicLong count=new AtomicLong();
    List<Future<Boolean>> results=new LinkedList<Future<Boolean>>();
    final ExoContainer container=ExoContainerContext.getCurrentContainer();
    final PicketLinkIDMService idmService=container.getComponentInstanceOfType(PicketLinkIDMService.class);
    final int threadSize=tSize;
    final ListAccess<User> usrs=users;
    final int totalSize=size;
    for (int i=0; i < threadNum; i++) {
      final int idx=i;
      results.add(execService.submit(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          int start=idx * threadSize;
          int end=start + threadSize;
          if (idx == threadNum - 1) {
            end+=odd;
          }
          ExoContainerContext.setCurrentContainer(container);
          int startBatch=start;
          int endBatch=startBatch + batchSize;
          while (endBatch <= totalSize && endBatch <= end && startBatch < endBatch) {
            LOG.info(""String_Node_Str"",Thread.currentThread(),startBatch,endBatch);
            RequestLifeCycle.begin(impl);
            IdentitySession session=idmService.getIdentitySession();
            User[] tmp=usrs.load(startBatch,endBatch - startBatch);
            try {
              for (              User u : tmp) {
                enableUser(u,session);
              }
              count.addAndGet(endBatch - startBatch);
              startBatch=endBatch;
              endBatch=startBatch + batchSize;
              endBatch=endBatch > end ? end : endBatch;
              LOG.info(""String_Node_Str"",Thread.currentThread());
            }
 catch (            Exception e) {
              LOG.error(""String_Node_Str"",e);
              return false;
            }
 finally {
              RequestLifeCycle.end();
            }
          }
          return true;
        }
      }
));
    }
    try {
      for (      Future<Boolean> r : results) {
        if (!r.get()) {
          LOG.error(""String_Node_Str"");
        }
      }
      LOG.info(""String_Node_Str"",count.get());
    }
 catch (    Exception ex) {
      LOG.error(ex);
    }
  }
 else {
    LOG.info(""String_Node_Str"");
  }
}","@Override public void processUpgrade(String oldVersion,String newVersion){
  LOG.info(""String_Node_Str"",this.getClass().getName());
  if (service instanceof PicketLinkIDMOrganizationServiceImpl) {
    final PicketLinkIDMOrganizationServiceImpl impl=(PicketLinkIDMOrganizationServiceImpl)service;
    if (!impl.getConfiguration().isDisableUserActived()) {
      LOG.info(""String_Node_Str"");
      return;
    }
    final UserHandler handler=service.getUserHandler();
    ListAccess<User> users=null;
    int size=0;
    try {
      RequestLifeCycle.begin(impl);
      users=handler.findAllUsers(UserStatus.ANY);
      size=users.getSize();
    }
 catch (    Exception ex) {
      LOG.error(ex);
    }
 finally {
      RequestLifeCycle.end();
    }
    batchSize=batchSize > size ? size : batchSize;
    int tSize=size / threadNum;
    tSize=tSize > 0 ? tSize : size;
    final int odd=tSize == size ? 0 : size % threadNum;
    LOG.info(""String_Node_Str"",size,threadNum,batchSize);
    ExecutorService execService=Executors.newFixedThreadPool(threadNum);
    final AtomicLong count=new AtomicLong();
    List<Future<Boolean>> results=new LinkedList<Future<Boolean>>();
    final ExoContainer container=ExoContainerContext.getCurrentContainer();
    final PicketLinkIDMService idmService=container.getComponentInstanceOfType(PicketLinkIDMService.class);
    final int threadSize=tSize;
    final ListAccess<User> usrs=users;
    final int totalSize=size;
    for (int i=0; i < threadNum; i++) {
      final int idx=i;
      results.add(execService.submit(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          int start=idx * threadSize;
          int end=start + threadSize;
          if (idx == threadNum - 1) {
            end+=odd;
          }
          ExoContainerContext.setCurrentContainer(container);
          int startBatch=start;
          int endBatch=startBatch + batchSize;
          endBatch=endBatch > end ? end : endBatch;
          while (endBatch <= totalSize && endBatch <= end && startBatch < endBatch) {
            LOG.info(""String_Node_Str"",Thread.currentThread(),startBatch,endBatch);
            RequestLifeCycle.begin(impl);
            IdentitySession session=idmService.getIdentitySession();
            User[] tmp=usrs.load(startBatch,endBatch - startBatch);
            try {
              for (              User u : tmp) {
                enableUser(u,session);
              }
              count.addAndGet(endBatch - startBatch);
              startBatch=endBatch;
              endBatch=startBatch + batchSize;
              endBatch=endBatch > end ? end : endBatch;
              LOG.info(""String_Node_Str"",Thread.currentThread());
            }
 catch (            Exception e) {
              LOG.error(""String_Node_Str"",e);
              return false;
            }
 finally {
              RequestLifeCycle.end();
            }
          }
          return true;
        }
      }
));
    }
    try {
      for (      Future<Boolean> r : results) {
        if (!r.get()) {
          LOG.error(""String_Node_Str"");
        }
      }
      LOG.info(""String_Node_Str"",count.get());
    }
 catch (    Exception ex) {
      LOG.error(ex);
    }
  }
 else {
    LOG.info(""String_Node_Str"");
  }
}",0.991977784634372
101101,"private boolean isOnProfilePage() throws Exception {
  System.out.println(Util.getPortalRequestContext().getRequest().getRequestURL().toString());
  return Util.getPortalRequestContext().getRequest().getRequestURL().toString().contains(PROFILE_PATH);
}","private boolean isOnProfilePage() throws Exception {
  return Util.getPortalRequestContext().getRequest().getRequestURL().toString().contains(PROFILE_PATH);
}",0.7707317073170732
101102,"@Override public void processRender(WebuiApplication app,WebuiRequestContext context) throws Exception {
  if (isUserUrl() || isEditProfilePage()) {
    if (isOwner() || isEditProfilePage()) {
      ResourceBundle resApp=context.getApplicationResourceBundle();
      String title=resApp.getString(MY_PROFILE_TITLE);
      Util.getPortalRequestContext().getRequest().setAttribute(PortalRequestContext.REQUEST_TITLE,title);
    }
 else {
      Util.getPortalRequestContext().getRequest().setAttribute(PortalRequestContext.REQUEST_TITLE,getOwnerProfile().getFullName());
    }
  }
  super.processRender(app,context);
}","@Override public void processRender(WebuiApplication app,WebuiRequestContext context) throws Exception {
  if (isUserUrl() && isOnProfilePage() || isEditProfilePage()) {
    if (isOwner() || isEditProfilePage()) {
      ResourceBundle resApp=context.getApplicationResourceBundle();
      String title=resApp.getString(MY_PROFILE_TITLE);
      Util.getPortalRequestContext().getRequest().setAttribute(PortalRequestContext.REQUEST_TITLE,title);
    }
 else {
      Util.getPortalRequestContext().getRequest().setAttribute(PortalRequestContext.REQUEST_TITLE,getOwnerProfile().getFullName());
    }
  }
  super.processRender(app,context);
}",0.9832134292565948
101103,"@Override public MessageInfo buildMessageInfo(NotificationMessage message){
  MessageInfo messageInfo=new MessageInfo();
  messageInfo.setFrom(getFrom(message)).setTo(getTo(message));
  Provider provider=providerService.getProvider(message.getProviderType());
  String language=getLanguage(message);
  String body=getTemplate(provider,language);
  String subject=getSubject(provider,language);
  PROVIDER_TYPE type=PROVIDER_TYPE.valueOf(message.getProviderType());
switch (type) {
case ActivityMentionProvider:
{
      String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
      ExoSocialActivity activity=activityManager.getActivity(activityId);
      Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,activity.getPosterId(),true);
      messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())));
      break;
    }
case ActivityCommentProvider:
{
    String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
    ExoSocialActivity activity=activityManager.getActivity(activityId);
    ExoSocialActivity parentActivity=activityManager.getParentActivity(activity);
    Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,activity.getPosterId(),true);
    messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",parentActivity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())));
    break;
  }
case ActivityPostProvider:
{
  String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
  ExoSocialActivity activity=activityManager.getActivity(activityId);
  Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,activity.getPosterId(),true);
  messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())));
  break;
}
case ActivityPostSpaceProvider:
{
String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
ExoSocialActivity activity=activityManager.getActivity(activityId);
Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,activity.getPosterId(),true);
Identity spaceIdentity=identityManager.getOrCreateIdentity(SpaceIdentityProvider.NAME,activity.getStreamOwner(),true);
messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",spaceIdentity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",spaceIdentity.getProfile().getFullName()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())));
break;
}
case InvitedJoinSpace:
{
String spaceId=message.getOwnerParameter().get(SPACE_ID);
Space space=spaceService.getSpaceById(spaceId);
messageInfo.setSubject(subject.replace(""String_Node_Str"",space.getPrettyName())).setBody(body.replace(""String_Node_Str"",space.getPrettyName()).replace(""String_Node_Str"",space.getAvatarUrl()).replace(""String_Node_Str"",LinkProviderUtils.getAcceptInvitationToJoinSpaceUrl(space.getId(),getTo(message))).replace(""String_Node_Str"",LinkProviderUtils.getIgnoreInvitationToJoinSpaceUrl(space.getId(),getTo(message))));
break;
}
case RequestJoinSpace:
{
String spaceId=message.getOwnerParameter().get(SPACE_ID);
Space space=spaceService.getSpaceById(spaceId);
Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,getFrom(message),true);
Profile userProfile=identity.getProfile();
messageInfo.setSubject(subject.replace(""String_Node_Str"",space.getPrettyName()).replace(""String_Node_Str"",userProfile.getFullName())).setBody(body.replace(""String_Node_Str"",space.getPrettyName()).replace(""String_Node_Str"",userProfile.getFullName()).replace(""String_Node_Str"",userProfile.getAvatarUrl()).replace(""String_Node_Str"",LinkProviderUtils.getValidateRequestToJoinSpaceUrl(space.getId(),identity.getRemoteId())));
break;
}
case NewUserJoinSocialIntranet:
{
break;
}
case ReceiceConnectionRequest:
{
Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,getFrom(message),true);
Profile userProfile=identity.getProfile();
messageInfo.setSubject(subject.replace(""String_Node_Str"",userProfile.getFullName())).setBody(body.replace(""String_Node_Str"",userProfile.getFullName()).replace(""String_Node_Str"",userProfile.getAvatarUrl()).replace(""String_Node_Str"",LinkProviderUtils.getConfirmInvitationToConnectUrl(getFrom(message),getTo(message))).replace(""String_Node_Str"",LinkProviderUtils.getIgnoreInvitationToConnectUrl(getFrom(message),getTo(message))));
break;
}
}
return messageInfo;
}","@Override public MessageInfo buildMessageInfo(NotificationMessage message){
  MessageInfo messageInfo=new MessageInfo();
  messageInfo.setFrom(getFrom(message)).setTo(getTo(message));
  Provider provider=providerService.getProvider(message.getProviderType());
  String language=getLanguage(message);
  String body=getTemplate(provider,language);
  String subject=getSubject(provider,language);
  PROVIDER_TYPE type=PROVIDER_TYPE.valueOf(message.getProviderType());
switch (type) {
case ActivityMentionProvider:
{
      String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
      ExoSocialActivity activity=activityManager.getActivity(activityId);
      Identity identity=identityManager.getIdentity(activity.getPosterId(),true);
      messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())));
      break;
    }
case ActivityCommentProvider:
{
    String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
    ExoSocialActivity activity=activityManager.getActivity(activityId);
    ExoSocialActivity parentActivity=activityManager.getParentActivity(activity);
    Identity identity=identityManager.getIdentity(activity.getPosterId(),true);
    messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",parentActivity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())));
    break;
  }
case ActivityLikeProvider:
{
  String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
  ExoSocialActivity activity=activityManager.getActivity(activityId);
  Identity identity=identityManager.getIdentity(getFrom(message),true);
  messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())));
  break;
}
case ActivityPostProvider:
{
String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
ExoSocialActivity activity=activityManager.getActivity(activityId);
Identity identity=identityManager.getIdentity(activity.getPosterId(),true);
messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())));
break;
}
case ActivityPostSpaceProvider:
{
String activityId=message.getOwnerParameter().get(ACTIVITY_ID);
ExoSocialActivity activity=activityManager.getActivity(activityId);
Identity identity=identityManager.getIdentity(activity.getPosterId(),true);
Identity spaceIdentity=identityManager.getOrCreateIdentity(SpaceIdentityProvider.NAME,activity.getStreamOwner(),true);
messageInfo.setSubject(subject.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",spaceIdentity.getProfile().getFullName())).setBody(body.replace(""String_Node_Str"",identity.getProfile().getFullName()).replace(""String_Node_Str"",activity.getTitle()).replace(""String_Node_Str"",spaceIdentity.getProfile().getFullName()).replace(""String_Node_Str"",LinkProviderUtils.getReplyActivityUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())).replace(""String_Node_Str"",LinkProviderUtils.getViewFullDiscussionUrl(activity.getId(),Util.getPortalRequestContext().getRemoteUser())));
break;
}
case InvitedJoinSpace:
{
String spaceId=message.getOwnerParameter().get(SPACE_ID);
Space space=spaceService.getSpaceById(spaceId);
messageInfo.setSubject(subject.replace(""String_Node_Str"",space.getPrettyName())).setBody(body.replace(""String_Node_Str"",space.getPrettyName()).replace(""String_Node_Str"",space.getAvatarUrl()).replace(""String_Node_Str"",LinkProviderUtils.getAcceptInvitationToJoinSpaceUrl(space.getId(),getTo(message))).replace(""String_Node_Str"",LinkProviderUtils.getIgnoreInvitationToJoinSpaceUrl(space.getId(),getTo(message))));
break;
}
case RequestJoinSpace:
{
String spaceId=message.getOwnerParameter().get(SPACE_ID);
Space space=spaceService.getSpaceById(spaceId);
Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,getFrom(message),true);
Profile userProfile=identity.getProfile();
messageInfo.setSubject(subject.replace(""String_Node_Str"",space.getPrettyName()).replace(""String_Node_Str"",userProfile.getFullName())).setBody(body.replace(""String_Node_Str"",space.getPrettyName()).replace(""String_Node_Str"",userProfile.getFullName()).replace(""String_Node_Str"",userProfile.getAvatarUrl()).replace(""String_Node_Str"",LinkProviderUtils.getValidateRequestToJoinSpaceUrl(space.getId(),identity.getRemoteId())));
break;
}
case NewUserJoinSocialIntranet:
{
break;
}
case ReceiceConnectionRequest:
{
Identity identity=identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME,getFrom(message),true);
Profile userProfile=identity.getProfile();
messageInfo.setSubject(subject.replace(""String_Node_Str"",userProfile.getFullName())).setBody(body.replace(""String_Node_Str"",userProfile.getFullName()).replace(""String_Node_Str"",userProfile.getAvatarUrl()).replace(""String_Node_Str"",LinkProviderUtils.getConfirmInvitationToConnectUrl(getFrom(message),getTo(message))).replace(""String_Node_Str"",LinkProviderUtils.getIgnoreInvitationToConnectUrl(getFrom(message),getTo(message))));
break;
}
}
return messageInfo;
}",0.2974547195404133
101104,"/** 
 * The controller method index() is the name of the default method that Juzu will call. set localization and put into parameters
 * @param httpContext
 * @return Response
 */
@View public Response index(HttpContext httpContext){
  Map<String,Object> parameters=new HashMap<String,Object>();
  parameters.put(""String_Node_Str"",BrandingController_.uploadFile(null));
  parameters.put(""String_Node_Str"",getLogoUrl(httpContext,true));
  Locale locale=RequestContext.getCurrentInstance().getLocale();
  ResourceBundle rs=RequestContext.getCurrentInstance().getApplicationResourceBundle();
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  return index.ok(parameters);
}","/** 
 * The controller method index() is the name of the default method that Juzu will call. set localization and put into parameters
 * @param httpContext
 * @return Response
 */
@View public Response index(HttpContext httpContext,RenderContext renderContext){
  Map<String,Object> parameters=new HashMap<String,Object>();
  parameters.put(""String_Node_Str"",BrandingController_.uploadFile(null));
  parameters.put(""String_Node_Str"",getLogoUrl(httpContext,true));
  ResourceBundle rs=renderContext.getApplicationContext().resolveBundle(renderContext.getUserContext().getLocale());
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
  return index.ok(parameters);
}",0.3747980613893376
101105,"@Resource @Route(""String_Node_Str"") public Response.Content save(FileItem file,String style) throws IOException {
  if (file != null && file.getContentType().startsWith(""String_Node_Str"")) {
    dataStorageService.saveFile(file);
  }
  if (style != null && style != ""String_Node_Str"") {
    settingService.set(Context.GLOBAL,Scope.GLOBAL,BAR_NAVIGATION_STYLE_KEY,SettingValue.create(style));
    this.style=style;
  }
  return Response.ok(""String_Node_Str"");
}","@Resource public Response.Content save(HttpContext httpContext,FileItem file,String style) throws IOException {
  if (file != null && file.getContentType().startsWith(""String_Node_Str"")) {
    dataStorageService.saveFile(file);
  }
  if (style != null && style != ""String_Node_Str"") {
    settingService.set(Context.GLOBAL,Scope.GLOBAL,BAR_NAVIGATION_STYLE_KEY,SettingValue.create(style));
    this.style=style;
  }
  return getResource(httpContext);
}",0.8793859649122807
101106,"@Resource @Route(""String_Node_Str"") public Response.Content save(FileItem file) throws IOException {
  if (file != null && file.getContentType().startsWith(""String_Node_Str"")) {
    dataStorageService.saveFile(file);
  }
  return Response.ok(""String_Node_Str"");
}","@Resource @Route(""String_Node_Str"") public Response.Content save(FileItem file,String style) throws IOException {
  if (file != null && file.getContentType().startsWith(""String_Node_Str"")) {
    dataStorageService.saveFile(file);
  }
  if (style != null && style != ""String_Node_Str"") {
    settingService.set(Context.GLOBAL,Scope.GLOBAL,BAR_NAVIGATION_STYLE_KEY,SettingValue.create(style));
    this.style=style;
  }
  return Response.ok(""String_Node_Str"");
}",0.7081604426002767
101107,"@View @Route(""String_Node_Str"") public Response index(HttpContext httpContext){
  Map<String,Object> parameters=new HashMap<String,Object>();
  parameters.put(""String_Node_Str"",BrandingControler_.save());
  String logoUrl=getLogoUrl(httpContext);
  if (!verifyUrl(logoUrl)) {
    parameters.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    parameters.put(""String_Node_Str"",logoUrl);
  }
  parameters.put(""String_Node_Str"",settingService.get(Context.GLOBAL,Scope.GLOBAL,BAR_NAVIGATION_STYLE_KEY));
  return index.render(parameters);
}","@View @Route(""String_Node_Str"") public Response index(HttpContext httpContext){
  Map<String,Object> parameters=new HashMap<String,Object>();
  parameters.put(""String_Node_Str"",BrandingControler_.save(null));
  String logoUrl=getLogoUrl(httpContext);
  if (!isExiste(logoUrl)) {
    parameters.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    parameters.put(""String_Node_Str"",logoUrl);
  }
  return index.render(parameters);
}",0.5649948822927329
101108,"public void initSEOForm(PageMetadataModel pageModel) throws Exception {
  if (pageModel != null) {
    description=pageModel.getDescription();
    keywords=pageModel.getKeywords();
    frequency=pageModel.getFrequency();
    if (pageModel.getPriority() >= 0)     priority=String.valueOf(pageModel.getPriority());
    if (pageModel.getRobotsContent() != null && pageModel.getRobotsContent().length() > 0) {
      index=pageModel.getRobotsContent().split(""String_Node_Str"")[0];
      follow=pageModel.getRobotsContent().split(""String_Node_Str"")[1];
    }
    sitemap=pageModel.getSitemap();
  }
  ExoContainer container=ExoContainerContext.getCurrentContainer();
  SEOService seoService=(SEOService)container.getComponentInstanceOfType(SEOService.class);
  UIFormTextAreaInput uiDescription=new UIFormTextAreaInput(DESCRIPTION,DESCRIPTION,null);
  uiDescription.setValue(description);
  addUIFormInput(uiDescription);
  UIFormTextAreaInput uiKeywords=new UIFormTextAreaInput(KEYWORDS,KEYWORDS,null);
  uiKeywords.setValue(keywords);
  addUIFormInput(uiKeywords);
  if (!onContent) {
    List<SelectItemOption<String>> robotIndexItemOptions=new ArrayList<SelectItemOption<String>>();
    String robotsindexOptions=seoService.getRobotsIndexOptions();
    String robotsfollowOptions=seoService.getRobotsFollowOptions();
    String frequencyOptions=seoService.getFrequencyOptions();
    if (robotsindexOptions != null && robotsindexOptions.length() > 0) {
      String[] arrOptions=robotsindexOptions.split(""String_Node_Str"");
      for (int i=0; i < arrOptions.length; i++) {
        robotIndexItemOptions.add(new SelectItemOption<String>((arrOptions[i])));
      }
    }
    UIFormSelectBox robots_index=new UIFormSelectBox(ROBOTS_INDEX,null,robotIndexItemOptions);
    if (index != null && index.length() > 0)     robots_index.setValue(index);
 else     robots_index.setValue(ROBOTS_INDEX);
    addUIFormInput(robots_index);
    List<SelectItemOption<String>> robotFollowItemOptions=new ArrayList<SelectItemOption<String>>();
    if (robotsfollowOptions != null && robotsfollowOptions.length() > 0) {
      String[] arrOptions=robotsfollowOptions.split(""String_Node_Str"");
      for (int i=0; i < arrOptions.length; i++) {
        robotFollowItemOptions.add(new SelectItemOption<String>((arrOptions[i])));
      }
    }
    UIFormSelectBox robots_follow=new UIFormSelectBox(ROBOTS_FOLLOW,null,robotFollowItemOptions);
    if (follow != null && follow.length() > 0)     robots_follow.setValue(follow);
 else     robots_follow.setValue(ROBOTS_FOLLOW);
    addUIFormInput(robots_follow);
    UICheckBoxInput visibleSitemapCheckbox=new UICheckBoxInput(SITEMAP,SITEMAP,null);
    visibleSitemapCheckbox.setChecked(sitemap);
    addUIFormInput(visibleSitemapCheckbox);
    UIFormStringInput uiPrority=new UIFormStringInput(PRIORITY,null);
    if (priority == null || priority.length() == 0) {
      WebuiRequestContext rc=WebuiRequestContext.getCurrentInstance();
      priority=rc.getApplicationResourceBundle().getString(""String_Node_Str"");
    }
    uiPrority.setValue(priority);
    addUIFormInput(uiPrority.addValidator(FloatNumberValidator.class));
    List<SelectItemOption<String>> frequencyItemOptions=new ArrayList<SelectItemOption<String>>();
    if (frequencyOptions != null && frequencyOptions.length() > 0) {
      String[] arrOptions=frequencyOptions.split(""String_Node_Str"");
      for (int i=0; i < arrOptions.length; i++) {
        frequencyItemOptions.add(new SelectItemOption<String>(arrOptions[i],(arrOptions[i])));
      }
    }
    UIFormSelectBox frequencySelectbox=new UIFormSelectBox(FREQUENCY,null,frequencyItemOptions);
    if (frequency != null && frequency.length() > 0)     frequencySelectbox.setValue(frequency);
 else     frequencySelectbox.setValue(FREQUENCY_DEFAULT_VALUE);
    addUIFormInput(frequencySelectbox);
  }
}","public void initSEOForm(PageMetadataModel pageModel) throws Exception {
  if (pageModel != null) {
    description=pageModel.getDescription();
    keywords=pageModel.getKeywords();
    frequency=pageModel.getFrequency();
    if (pageModel.getPriority() >= 0)     priority=String.valueOf(pageModel.getPriority());
    if (pageModel.getRobotsContent() != null && pageModel.getRobotsContent().length() > 0) {
      index=pageModel.getRobotsContent().split(""String_Node_Str"")[0];
      follow=pageModel.getRobotsContent().split(""String_Node_Str"")[1];
    }
    sitemap=pageModel.getSitemap();
  }
  ExoContainer container=ExoContainerContext.getCurrentContainer();
  SEOService seoService=(SEOService)container.getComponentInstanceOfType(SEOService.class);
  UIFormTextAreaInput uiDescription=new UIFormTextAreaInput(DESCRIPTION,DESCRIPTION,null);
  uiDescription.setValue(description);
  addUIFormInput(uiDescription);
  UIFormTextAreaInput uiKeywords=new UIFormTextAreaInput(KEYWORDS,KEYWORDS,null);
  uiKeywords.setValue(keywords);
  addUIFormInput(uiKeywords);
  if (!onContent) {
    List<SelectItemOption<String>> robotIndexItemOptions=new ArrayList<SelectItemOption<String>>();
    List<String> robotsindexOptions=seoService.getRobotsIndexOptions();
    List<String> robotsfollowOptions=seoService.getRobotsFollowOptions();
    List<String> frequencyOptions=seoService.getFrequencyOptions();
    if (robotsindexOptions != null && robotsindexOptions.size() > 0) {
      for (int i=0; i < robotsindexOptions.size(); i++) {
        robotIndexItemOptions.add(new SelectItemOption<String>((robotsindexOptions.get(i).toString())));
      }
    }
    UIFormSelectBox robots_index=new UIFormSelectBox(ROBOTS_INDEX,null,robotIndexItemOptions);
    if (index != null && index.length() > 0)     robots_index.setValue(index);
 else     robots_index.setValue(ROBOTS_INDEX);
    addUIFormInput(robots_index);
    List<SelectItemOption<String>> robotFollowItemOptions=new ArrayList<SelectItemOption<String>>();
    if (robotsfollowOptions != null && robotsfollowOptions.size() > 0) {
      for (int i=0; i < robotsfollowOptions.size(); i++) {
        robotFollowItemOptions.add(new SelectItemOption<String>((robotsfollowOptions.get(i).toString())));
      }
    }
    UIFormSelectBox robots_follow=new UIFormSelectBox(ROBOTS_FOLLOW,null,robotFollowItemOptions);
    if (follow != null && follow.length() > 0)     robots_follow.setValue(follow);
 else     robots_follow.setValue(ROBOTS_FOLLOW);
    addUIFormInput(robots_follow);
    UICheckBoxInput visibleSitemapCheckbox=new UICheckBoxInput(SITEMAP,SITEMAP,null);
    visibleSitemapCheckbox.setChecked(sitemap);
    addUIFormInput(visibleSitemapCheckbox);
    UIFormStringInput uiPrority=new UIFormStringInput(PRIORITY,null);
    if (priority == null || priority.length() == 0) {
      WebuiRequestContext rc=WebuiRequestContext.getCurrentInstance();
      priority=rc.getApplicationResourceBundle().getString(""String_Node_Str"");
    }
    uiPrority.setValue(priority);
    addUIFormInput(uiPrority.addValidator(FloatNumberValidator.class));
    List<SelectItemOption<String>> frequencyItemOptions=new ArrayList<SelectItemOption<String>>();
    if (frequencyOptions != null && frequencyOptions.size() > 0) {
      for (int i=0; i < frequencyOptions.size(); i++) {
        frequencyItemOptions.add(new SelectItemOption<String>(frequencyOptions.get(i).toString(),(frequencyOptions.get(i).toString())));
      }
    }
    UIFormSelectBox frequencySelectbox=new UIFormSelectBox(FREQUENCY,null,frequencyItemOptions);
    if (frequency != null && frequency.length() > 0)     frequencySelectbox.setValue(frequency);
 else     frequencySelectbox.setValue(FREQUENCY_DEFAULT_VALUE);
    addUIFormInput(frequencySelectbox);
  }
}",0.9200210470928702
101109,"/** 
 * This method should remove the PortalConfig, Page and PageNavigation that belong to the portal in the database. The method should broadcast the event UserPortalConfigService.portal.onRemove
 * @param config
 * @throws Exception
 */
public void removeUserPortalConfig(String portalName) throws Exception {
  Query<Page> query=new Query<Page>(PortalConfig.PORTAL_TYPE,portalName,null,null,Page.class);
  LazyPageList pageList=storage_.find(query);
  pageList.setPageSize(10);
  int i=1;
  while (i <= pageList.getAvailablePage()) {
    List<?> list=pageList.getPage(i);
    Iterator<?> itr=list.iterator();
    while (itr.hasNext()) {
      Page page=(Page)itr.next();
      remove(page);
    }
    i++;
  }
  PageNavigation navigation=storage_.getPageNavigation(PortalConfig.PORTAL_TYPE,portalName);
  if (navigation != null)   remove(navigation);
  Query<PortletPreferences> portletPrefQuery=new Query<PortletPreferences>(PortalConfig.PORTAL_TYPE,portalName,null,null,PortletPreferences.class);
  pageList=storage_.find(portletPrefQuery);
  pageList.setPageSize(10);
  i=1;
  while (i <= pageList.getAvailablePage()) {
    List<?> list=pageList.getPage(i);
    for (int j=0, n=list.size(); j < n; j++) {
      PortletPreferences portletPreferences=(PortletPreferences)list.get(j);
      storage_.remove(portletPreferences);
    }
    i++;
  }
  PortalConfig config=storage_.getPortalConfig(portalName);
  portalConfigCache_.remove(config.getName());
  if (config != null)   storage_.remove(config);
}","/** 
 * This method should remove the PortalConfig, Page and PageNavigation that belong to the portal in the database. The method should broadcast the event UserPortalConfigService.portal.onRemove
 * @param config
 * @throws Exception
 */
public void removeUserPortalConfig(String portalName) throws Exception {
  Query<Page> query=new Query<Page>(PortalConfig.PORTAL_TYPE,portalName,null,null,Page.class);
  LazyPageList pageList=storage_.find(query);
  pageList.setPageSize(10);
  int i=1;
  while (i <= pageList.getAvailablePage()) {
    List<?> list=pageList.getPage(i);
    Iterator<?> itr=list.iterator();
    while (itr.hasNext()) {
      Page page=(Page)itr.next();
      remove(page);
    }
    i++;
  }
  PageNavigation navigation=storage_.getPageNavigation(PortalConfig.PORTAL_TYPE,portalName);
  if (navigation != null)   remove(navigation);
  Query<PortletPreferences> portletPrefQuery=new Query<PortletPreferences>(PortalConfig.PORTAL_TYPE,portalName,null,null,PortletPreferences.class);
  pageList=storage_.find(portletPrefQuery);
  pageList.setPageSize(10);
  i=1;
  while (i <= pageList.getAvailablePage()) {
    List<?> list=pageList.getPage(i);
    while (list.size() > 0) {
      PortletPreferences portletPreferences=(PortletPreferences)list.get(0);
      storage_.remove(portletPreferences);
    }
    i++;
  }
  PortalConfig config=storage_.getPortalConfig(portalName);
  portalConfigCache_.remove(config.getName());
  if (config != null)   storage_.remove(config);
}",0.7881214547881215
101110,"public UIContainerForm() throws Exception {
  super(""String_Node_Str"");
  UIFormInputSet infoInputSet=new UIFormInputSet(""String_Node_Str"");
  infoInputSet.addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(MandatoryValidator.class).addValidator(StringLengthValidator.class,3,30).addValidator(NameValidator.class)).addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(StringLengthValidator.class,3,30)).addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(ExpressionValidator.class,""String_Node_Str"",""String_Node_Str"")).addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(ExpressionValidator.class,""String_Node_Str"",""String_Node_Str""));
  addChild(infoInputSet);
  setSelectedTab(infoInputSet.getId());
  UIListPermissionSelector uiListPermissionSelector=createUIComponent(UIListPermissionSelector.class,null,null);
  uiListPermissionSelector.configure(""String_Node_Str"",""String_Node_Str"");
  uiListPermissionSelector.addValidator(EmptyIteratorValidator.class);
  addChild(uiListPermissionSelector);
}","public UIContainerForm() throws Exception {
  super(""String_Node_Str"");
  UIFormInputSet infoInputSet=new UIFormInputSet(""String_Node_Str"");
  infoInputSet.addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(MandatoryValidator.class).addValidator(StringLengthValidator.class,3,30).addValidator(NameValidator.class)).addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(StringLengthValidator.class,3,30)).addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(ExpressionValidator.class,""String_Node_Str"",""String_Node_Str"")).addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(ExpressionValidator.class,""String_Node_Str"",""String_Node_Str""));
  addChild(infoInputSet);
  setSelectedTab(infoInputSet.getId());
  UIListPermissionSelector uiListPermissionSelector=createUIComponent(UIListPermissionSelector.class,null,null);
  uiListPermissionSelector.configure(""String_Node_Str"",""String_Node_Str"");
  uiListPermissionSelector.addValidator(EmptyIteratorValidator.class);
  UIFormInputSet uiPermissionSet=createUIComponent(UIFormInputSet.class,""String_Node_Str"",null);
  uiPermissionSet.addChild(uiListPermissionSelector);
  addUIFormInput(uiPermissionSet);
}",0.940032414910859
101111,"public void testResourceBundleServiceRemove() throws Exception {
  ResourceBundle res=service_.getResourceBundle(fileRes,Locale.ENGLISH);
  createResourceBundle(databaseRes,PROPERTIES,Locale.ENGLISH.getLanguage());
  createResourceBundle(databaseRes,PROPERTIES_FR,Locale.FRANCE.getLanguage());
  res=service_.getResourceBundle(databaseRes,Locale.ENGLISH);
  assertTrue(""String_Node_Str"",res != null);
  res=service_.getResourceBundle(databaseRes,Locale.FRANCE);
  assertTrue(""String_Node_Str"",res != null);
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  Query q=new Query(null,null);
  List l=service_.findResourceDescriptions(q).getAll();
  int sizeBeforeRemove=l.size();
  ResourceBundleData data=service_.getResourceBundleData(databaseRes + ""String_Node_Str"");
  service_.removeResourceBundleData(data.getId());
  l=service_.findResourceDescriptions(q).getAll();
  assertEquals(""String_Node_Str"",sizeBeforeRemove - 1,l.size());
  assertTrue(""String_Node_Str"",service_.getResourceBundleData(databaseRes + ""String_Node_Str"") == null);
  tearDown();
}","public void testResourceBundleServiceRemove() throws Exception {
  ResourceBundle res=service_.getResourceBundle(fileRes,Locale.ENGLISH);
  createResourceBundle(databaseRes,PROPERTIES,Locale.ENGLISH.getLanguage());
  createResourceBundle(databaseRes,PROPERTIES_FR,Locale.FRANCE.getLanguage());
  res=service_.getResourceBundle(databaseRes,Locale.ENGLISH);
  assertTrue(""String_Node_Str"",res != null);
  res=service_.getResourceBundle(databaseRes,Locale.FRANCE);
  assertTrue(""String_Node_Str"",res != null);
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  Query q=new Query(null,null);
  List l=service_.findResourceDescriptions(q).getAll();
  int sizeBeforeRemove=l.size();
  ResourceBundleData data=service_.getResourceBundleData(databaseRes + ""String_Node_Str"");
  service_.removeResourceBundleData(data.getId());
  l=service_.findResourceDescriptions(q).getAll();
  assertEquals(""String_Node_Str"",sizeBeforeRemove - 1,l.size());
  assertTrue(""String_Node_Str"",service_.getResourceBundleData(databaseRes + ""String_Node_Str"") == null);
}",0.9940222032450896
101112,"public void testResourceBundleServiceUpdate() throws Exception {
  ResourceBundle res=service_.getResourceBundle(fileRes,Locale.ENGLISH);
  createResourceBundle(databaseRes,PROPERTIES,Locale.ENGLISH.getLanguage());
  createResourceBundle(databaseRes,PROPERTIES_FR,Locale.FRANCE.getLanguage());
  res=service_.getResourceBundle(databaseRes,Locale.ENGLISH);
  assertTrue(""String_Node_Str"",res != null);
  res=service_.getResourceBundle(databaseRes,Locale.FRANCE);
  assertTrue(""String_Node_Str"",res != null);
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  createResourceBundle(databaseRes,PROPERTIES_FR_UPDATE,Locale.FRANCE.getLanguage());
  res=service_.getResourceBundle(databaseRes,Locale.FRANCE);
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  String datas=""String_Node_Str"";
  createResourceBundle(fileRes,datas,Locale.FRANCE.getLanguage());
  res=service_.getResourceBundle(fileRes,Locale.FRANCE);
  assertTrue(""String_Node_Str"",res != null);
  assertTrue(""String_Node_Str"",res.getString(""String_Node_Str"").equals(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  datas=""String_Node_Str"";
  createResourceBundle(fileRes,datas,Locale.FRANCE.getLanguage());
  res=service_.getResourceBundle(fileRes,Locale.FRANCE);
  assertTrue(""String_Node_Str"",res != null);
  assertTrue(""String_Node_Str"",res.getString(""String_Node_Str"").equals(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  tearDown();
}","public void testResourceBundleServiceUpdate() throws Exception {
  ResourceBundle res=service_.getResourceBundle(fileRes,Locale.ENGLISH);
  createResourceBundle(databaseRes,PROPERTIES,Locale.ENGLISH.getLanguage());
  createResourceBundle(databaseRes,PROPERTIES_FR,Locale.FRANCE.getLanguage());
  res=service_.getResourceBundle(databaseRes,Locale.ENGLISH);
  assertTrue(""String_Node_Str"",res != null);
  res=service_.getResourceBundle(databaseRes,Locale.FRANCE);
  assertTrue(""String_Node_Str"",res != null);
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  createResourceBundle(databaseRes,PROPERTIES_FR_UPDATE,Locale.FRANCE.getLanguage());
  res=service_.getResourceBundle(databaseRes,Locale.FRANCE);
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  String datas=""String_Node_Str"";
  createResourceBundle(fileRes,datas,Locale.FRANCE.getLanguage());
  res=service_.getResourceBundle(fileRes,Locale.FRANCE);
  assertTrue(""String_Node_Str"",res != null);
  assertTrue(""String_Node_Str"",res.getString(""String_Node_Str"").equals(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  datas=""String_Node_Str"";
  createResourceBundle(fileRes,datas,Locale.FRANCE.getLanguage());
  res=service_.getResourceBundle(fileRes,Locale.FRANCE);
  assertTrue(""String_Node_Str"",res != null);
  assertTrue(""String_Node_Str"",res.getString(""String_Node_Str"").equals(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
}",0.995820895522388
101113,"public void testResourceBundleServiceList() throws Exception {
  Query q=new Query(null,null);
  List l=service_.findResourceDescriptions(q).getAll();
  assertTrue(""String_Node_Str"",l.size() == 0);
  ResourceBundle res=service_.getResourceBundle(fileRes,Locale.ENGLISH);
  createResourceBundle(databaseRes,PROPERTIES,Locale.ENGLISH.getLanguage());
  createResourceBundle(databaseRes,PROPERTIES_FR,Locale.FRANCE.getLanguage());
  res=service_.getResourceBundle(databaseRes,Locale.ENGLISH);
  assertTrue(""String_Node_Str"",res != null);
  res=service_.getResourceBundle(databaseRes,Locale.FRANCE);
  assertTrue(""String_Node_Str"",res != null);
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  q=new Query(null,null);
  l=service_.findResourceDescriptions(q).getAll();
  assertTrue(""String_Node_Str"",l.size() == 2);
  tearDown();
}","public void testResourceBundleServiceList() throws Exception {
  Query q=new Query(null,null);
  List l=service_.findResourceDescriptions(q).getAll();
  ResourceBundle res=service_.getResourceBundle(fileRes,Locale.ENGLISH);
  createResourceBundle(databaseRes,PROPERTIES,Locale.ENGLISH.getLanguage());
  createResourceBundle(databaseRes,PROPERTIES_FR,Locale.FRANCE.getLanguage());
  res=service_.getResourceBundle(databaseRes,Locale.ENGLISH);
  assertTrue(""String_Node_Str"",res != null);
  res=service_.getResourceBundle(databaseRes,Locale.FRANCE);
  assertTrue(""String_Node_Str"",res != null);
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",res.getString(""String_Node_Str""));
  q=new Query(null,null);
  l=service_.findResourceDescriptions(q).getAll();
  assertTrue(""String_Node_Str"",l.size() >= 2);
}",0.9657794676806084
101114,"public Set<UIComponent> getDefaultUIComponentToUpdateByAjax(WebuiRequestContext context){
  Set<UIComponent> list=new HashSet<UIComponent>(3);
  list.add(context.getUIApplication());
  return list;
}","public Set<UIComponent> getDefaultUIComponentToUpdateByAjax(WebuiRequestContext context){
  Set<UIComponent> list=new LinkedHashSet<UIComponent>(3);
  list.add(context.getUIApplication());
  return list;
}",0.9851485148514852
101115,"public void addUIComponentToUpdateByAjax(UIComponent uicomponent){
  if (uicomponentToUpdateByAjax == null) {
    uicomponentToUpdateByAjax=new HashSet<UIComponent>();
  }
  uicomponentToUpdateByAjax.add(uicomponent);
}","public void addUIComponentToUpdateByAjax(UIComponent uicomponent){
  if (uicomponentToUpdateByAjax == null) {
    uicomponentToUpdateByAjax=new LinkedHashSet<UIComponent>();
  }
  uicomponentToUpdateByAjax.add(uicomponent);
}",0.9864864864864864
101116,"public void print(Object o){
  try {
    if (o instanceof Text) {
      ((Text)o).writeTo(this);
    }
 else {
      write(String.valueOf(o));
    }
  }
 catch (  IOException e) {
  }
}","public void print(Object o){
  try {
    if (o == null) {
      write(""String_Node_Str"");
    }
 else     if (o instanceof Text) {
      ((Text)o).writeTo(this);
    }
 else {
      write(String.valueOf(o));
    }
  }
 catch (  IOException e) {
  }
}",0.8505747126436781
101117,"public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  String uri=URLDecoder.decode(httpRequest.getRequestURI(),""String_Node_Str"");
  final HttpServletResponse httpResponse=(HttpServletResponse)response;
  ExoContainer portalContainer=ExoContainerContext.getCurrentContainer();
  SkinService skinService=(SkinService)portalContainer.getComponentInstanceOfType(SkinService.class);
  if (uri.endsWith(""String_Node_Str"")) {
    final OutputStream out=response.getOutputStream();
    final Appendable app=new Appendable(){
      public Appendable append(      CharSequence csq) throws IOException {
        String s=(String)csq;
        byte[] bytes=null;
        try {
          bytes=(byte[])cssCache.get(s);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        if (bytes == null) {
          ByteArrayOutputStream baos=new ByteArrayOutputStream(s.length() * 2);
          encoder.encode(s,0,s.length(),baos);
          baos.flush();
          bytes=baos.toByteArray();
          try {
            cssCache.put(s,bytes);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        out.write(bytes);
        return this;
      }
      public Appendable append(      CharSequence csq,      int start,      int end) throws IOException {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
      public Appendable append(      char c) throws IOException {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
    }
;
    ResourceRenderer renderer=new ResourceRenderer(){
      public Appendable getAppendable(){
        return app;
      }
      public void setExpiration(      long seconds){
        if (seconds > 0) {
          httpResponse.addHeader(""String_Node_Str"",""String_Node_Str"" + seconds + ""String_Node_Str""+ seconds);
        }
 else {
          httpResponse.setHeader(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
;
    try {
      skinService.renderCSS(renderer,uri);
      log.debug(""String_Node_Str"" + uri);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + uri,e);
      httpResponse.setStatus(HttpServletResponse.SC_NOT_FOUND);
    }
  }
 else {
    final int len=uri.length();
    if (len >= 7 && uri.charAt(len - 7) == '-' && uri.charAt(len - 6) == 'r' && uri.charAt(len - 5) == 't') {
      for (      final ImageType imageType : imageTypes) {
        if (imageType.matches(uri)) {
          final String resource=uri.substring(httpRequest.getContextPath().length(),len - 7) + uri.substring(len - 4);
          FutureTask<Image> futureImg=mirroredImageCache.get(resource);
          if (futureImg == null) {
            FutureTask<Image> tmp=new FutureTask<Image>(new Callable<Image>(){
              public Image call() throws Exception {
                InputStream in=cfg.getServletContext().getResourceAsStream(resource);
                if (in == null) {
                  return null;
                }
                BufferedImage img=ImageIO.read(in);
                AffineTransform tx=AffineTransform.getScaleInstance(-1,1);
                tx.translate(-img.getWidth(null),0);
                AffineTransformOp op=new AffineTransformOp(tx,AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
                img=op.filter(img,null);
                ByteArrayOutputStream baos=new ByteArrayOutputStream(1000);
                ImageIO.write(img,imageType.getFormat(),baos);
                baos.close();
                return new Image(imageType,baos.toByteArray());
              }
            }
);
            futureImg=mirroredImageCache.putIfAbsent(resource,tmp);
            if (futureImg == null) {
              futureImg=tmp;
              futureImg.run();
            }
          }
          try {
            Image img=futureImg.get();
            if (img != null) {
              httpResponse.setContentType(img.type.getMimeType());
              httpResponse.setContentLength(img.bytes.length);
              OutputStream out=httpResponse.getOutputStream();
              out.write(img.bytes);
              out.close();
            }
 else {
              mirroredImageCache.remove(resource);
              httpResponse.setStatus(HttpServletResponse.SC_NOT_FOUND);
            }
            return;
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
catch (          ExecutionException e) {
            e.printStackTrace();
            mirroredImageCache.remove(resource);
          }
        }
      }
    }
    if (!PropertyManager.isDevelopping()) {
      httpResponse.addHeader(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      if (uri.endsWith(""String_Node_Str"") || uri.endsWith(""String_Node_Str"")) {
        httpResponse.setHeader(""String_Node_Str"",""String_Node_Str"");
      }
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + uri);
    }
    chain.doFilter(request,response);
  }
}","public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  String uri=URLDecoder.decode(httpRequest.getRequestURI(),""String_Node_Str"");
  final HttpServletResponse httpResponse=(HttpServletResponse)response;
  ExoContainer portalContainer=ExoContainerContext.getCurrentContainer();
  SkinService skinService=(SkinService)portalContainer.getComponentInstanceOfType(SkinService.class);
  if (uri.endsWith(""String_Node_Str"")) {
    final OutputStream out=response.getOutputStream();
    final Appendable app=new Appendable(){
      public Appendable append(      CharSequence csq) throws IOException {
        String s=(String)csq;
        byte[] bytes=null;
        try {
          bytes=(byte[])cssCache.get(s);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        if (bytes == null) {
          ByteArrayOutputStream baos=new ByteArrayOutputStream(s.length() * 2);
          encoder.encode(s,0,s.length(),baos);
          baos.flush();
          bytes=baos.toByteArray();
          try {
            cssCache.put(s,bytes);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        out.write(bytes);
        return this;
      }
      public Appendable append(      CharSequence csq,      int start,      int end) throws IOException {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
      public Appendable append(      char c) throws IOException {
        encoder.encode(c,out);
        return this;
      }
    }
;
    ResourceRenderer renderer=new ResourceRenderer(){
      public Appendable getAppendable(){
        return app;
      }
      public void setExpiration(      long seconds){
        if (seconds > 0) {
          httpResponse.addHeader(""String_Node_Str"",""String_Node_Str"" + seconds + ""String_Node_Str""+ seconds);
        }
 else {
          httpResponse.setHeader(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
;
    try {
      skinService.renderCSS(renderer,uri);
      log.debug(""String_Node_Str"" + uri);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + uri,e);
      httpResponse.setStatus(HttpServletResponse.SC_NOT_FOUND);
    }
  }
 else {
    final int len=uri.length();
    if (len >= 7 && uri.charAt(len - 7) == '-' && uri.charAt(len - 6) == 'r' && uri.charAt(len - 5) == 't') {
      for (      final ImageType imageType : imageTypes) {
        if (imageType.matches(uri)) {
          final String resource=uri.substring(httpRequest.getContextPath().length(),len - 7) + uri.substring(len - 4);
          FutureTask<Image> futureImg=mirroredImageCache.get(resource);
          if (futureImg == null) {
            FutureTask<Image> tmp=new FutureTask<Image>(new Callable<Image>(){
              public Image call() throws Exception {
                InputStream in=cfg.getServletContext().getResourceAsStream(resource);
                if (in == null) {
                  return null;
                }
                BufferedImage img=ImageIO.read(in);
                AffineTransform tx=AffineTransform.getScaleInstance(-1,1);
                tx.translate(-img.getWidth(null),0);
                AffineTransformOp op=new AffineTransformOp(tx,AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
                img=op.filter(img,null);
                ByteArrayOutputStream baos=new ByteArrayOutputStream(1000);
                ImageIO.write(img,imageType.getFormat(),baos);
                baos.close();
                return new Image(imageType,baos.toByteArray());
              }
            }
);
            futureImg=mirroredImageCache.putIfAbsent(resource,tmp);
            if (futureImg == null) {
              futureImg=tmp;
              futureImg.run();
            }
          }
          try {
            Image img=futureImg.get();
            if (img != null) {
              httpResponse.setContentType(img.type.getMimeType());
              httpResponse.setContentLength(img.bytes.length);
              OutputStream out=httpResponse.getOutputStream();
              out.write(img.bytes);
              out.close();
            }
 else {
              mirroredImageCache.remove(resource);
              httpResponse.setStatus(HttpServletResponse.SC_NOT_FOUND);
            }
            return;
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
catch (          ExecutionException e) {
            e.printStackTrace();
            mirroredImageCache.remove(resource);
          }
        }
      }
    }
    if (!PropertyManager.isDevelopping()) {
      httpResponse.addHeader(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      if (uri.endsWith(""String_Node_Str"") || uri.endsWith(""String_Node_Str"")) {
        httpResponse.setHeader(""String_Node_Str"",""String_Node_Str"");
      }
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + uri);
    }
    chain.doFilter(request,response);
  }
}",0.9901710241792804
101118,"public Appendable append(char c) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public Appendable append(char c) throws IOException {
  encoder.encode(c,out);
  return this;
}",0.6226415094339622
101119,"public UIUserInGroup() throws Exception {
  UIGrid uiGrid=addChild(UIGridUser.class,""String_Node_Str"",null);
  uiGrid.configure(""String_Node_Str"",USER_BEAN_FIELD,USER_ACTION);
  uiGrid.getUIPageIterator().setId(""String_Node_Str"");
  addChild(UIGroupMembershipForm.class,null,null);
  UIPopupWindow searchUserPopup=addChild(UIPopupWindow.class,null,""String_Node_Str"");
  searchUserPopup.setWindowSize(400,0);
}","public UIUserInGroup() throws Exception {
  UIGrid uiGrid=addChild(UIGridUser.class,""String_Node_Str"",null);
  uiGrid.configure(""String_Node_Str"",USER_BEAN_FIELD,USER_ACTION);
  uiGrid.getUIPageIterator().setId(""String_Node_Str"");
  addChild(UIGroupMembershipForm.class,null,null);
  UIPopupWindow editMemberPopup=addChild(UIPopupWindow.class,null,""String_Node_Str"");
  editMemberPopup.setWindowSize(400,0);
}",0.960880195599022
101120,"public UIGadgetEditMode() throws Exception {
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  options.add(new SelectItemOption<String>(REMOTE_TYPE,REMOTE_TYPE));
  options.add(new SelectItemOption<String>(LOCAL_TYPE,LOCAL_TYPE));
  UIFormSelectBox typeSelector=new UIFormSelectBox(TYPE_SELECTOR,null,options);
  typeSelector.setOnChange(""String_Node_Str"");
  addUIFormInput(typeSelector);
  addUIFormInput(new UIFormStringInput(FIELD_URL,FIELD_URL,pref.getValue(""String_Node_Str"",""String_Node_Str"")));
  UIFormSelectBox gadgetSelector=new UIFormSelectBox(GADGET_SELECTOR,null,new ArrayList<SelectItemOption<String>>());
  gadgetSelector.setRendered(false);
  addUIFormInput(gadgetSelector);
  setActions(new String[]{""String_Node_Str""});
}","public UIGadgetEditMode() throws Exception {
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  options.add(new SelectItemOption<String>(REMOTE_TYPE,REMOTE_TYPE));
  options.add(new SelectItemOption<String>(LOCAL_TYPE,LOCAL_TYPE));
  UIFormSelectBox typeSelector=new UIFormSelectBox(TYPE_SELECTOR,null,options);
  typeSelector.setOnChange(""String_Node_Str"");
  addUIFormInput(typeSelector);
  addUIFormInput(new UIFormStringInput(FIELD_URL,FIELD_URL,pref.getValue(""String_Node_Str"",""String_Node_Str"")).addValidator(MandatoryValidator.class).addValidator(URLValidator.class));
  UIFormSelectBox gadgetSelector=new UIFormSelectBox(GADGET_SELECTOR,null,new ArrayList<SelectItemOption<String>>());
  gadgetSelector.setRendered(false);
  gadgetSelector.addValidator(MandatoryValidator.class);
  addUIFormInput(gadgetSelector);
  setActions(new String[]{""String_Node_Str""});
}",0.935788949726232
101121,"public void processRender(WebuiRequestContext context) throws Exception {
  initData();
  PortalLayoutService service=getApplicationComponent(PortalLayoutService.class);
  DashboardParent parent=(DashboardParent)((UIComponent)getParent()).getParent();
  Container container=service.getContainer(ROOT_CONTAINER + ""String_Node_Str"" + windowId,parent.getDashboardOwner());
  UIContainer uiRoot=getChild(UIContainer.class);
  toUIContainer(uiRoot,container);
  JavascriptManager jsmanager=context.getJavascriptManager();
  jsmanager.addCustomizedOnLoadScript(""String_Node_Str"" + windowId + ""String_Node_Str"");
  super.processRender(context);
}","public void processRender(WebuiRequestContext context) throws Exception {
  initData();
  PortalLayoutService service=getApplicationComponent(PortalLayoutService.class);
  DashboardParent parent=(DashboardParent)((UIComponent)getParent()).getParent();
  Container container=service.getContainer(ROOT_CONTAINER + ""String_Node_Str"" + windowId,parent.getDashboardOwner());
  UIContainer uiRoot=getChild(UIContainer.class);
  toUIContainer(uiRoot,container);
  JavascriptManager jsmanager=context.getJavascriptManager();
  jsmanager.addCustomizedOnLoadScript(""String_Node_Str"" + windowId + ""String_Node_Str""+ parent.canEdit()+ ""String_Node_Str"");
  super.processRender(context);
}",0.9718631178707224
101122,"public boolean canEdit(){
  if (""String_Node_Str"".equals(owner)) {
    return true;
  }
  PortletRequestContext context=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  context.getRemoteUser();
  if (isPrivate) {
    if (context.getRemoteUser().equals(owner))     return true;
    return false;
  }
  return true;
}","public boolean canEdit(){
  PortletRequestContext context=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  String accessUser=context.getRemoteUser();
  if (accessUser == null || accessUser.equals(""String_Node_Str""))   return false;
  if (""String_Node_Str"".equals(owner)) {
    return true;
  }
  if (isPrivate) {
    if (accessUser.equals(owner))     return true;
  }
  return false;
}",0.375
101123,"public void renderChildren() throws Exception {
  if (maximizedUIComponent != null) {
    maximizedUIComponent.processRender((WebuiRequestContext)WebuiRequestContext.getCurrentInstance());
    return;
  }
  if (uicomponent_ == null) {
    setPageBody(Util.getUIPortal().getSelectedNode(),Util.getUIPortal());
  }
  if (uicomponent_ != null) {
    uicomponent_.processRender((WebuiRequestContext)WebuiRequestContext.getCurrentInstance());
  }
}","public void renderChildren() throws Exception {
  uicomponent_.processRender((WebuiRequestContext)WebuiRequestContext.getCurrentInstance());
}",0.4854700854700854
101124,"public final List<ApplicationCategory> getCategories() throws Exception {
  ApplicationRegistryService service=getApplicationComponent(ApplicationRegistryService.class);
  String remoteUser=((WebuiRequestContext)WebuiRequestContext.getCurrentInstance()).getRemoteUser();
  List<ApplicationCategory> listCategories=service.getApplicationCategories(remoteUser,org.exoplatform.web.application.Application.EXO_GAGGET_TYPE);
  gadgets=new Hashtable<ApplicationCategory,List<Application>>();
  for (int i=0; i < listCategories.size(); i++) {
    ApplicationCategory cate=listCategories.get(i);
    List<Application> listGadgets=service.getApplications(cate,org.exoplatform.web.application.Application.EXO_GAGGET_TYPE);
    if (listGadgets == null || listGadgets.size() == 0) {
      listCategories.remove(i);
      i--;
    }
 else {
      gadgets.put(cate,listGadgets);
    }
  }
  categories=listCategories;
  return categories;
}","public final List<ApplicationCategory> getCategories() throws Exception {
  ApplicationRegistryService service=getApplicationComponent(ApplicationRegistryService.class);
  String remoteUser=((WebuiRequestContext)WebuiRequestContext.getCurrentInstance()).getRemoteUser();
  List<ApplicationCategory> listCategories=service.getApplicationCategories(remoteUser,org.exoplatform.web.application.Application.EXO_GAGGET_TYPE);
  gadgets=new Hashtable<ApplicationCategory,List<Application>>();
  for (int i=0; i < listCategories.size(); i++) {
    ApplicationCategory cate=listCategories.get(i);
    List<Application> listGadgets=service.getApplications(cate,org.exoplatform.web.application.Application.EXO_GAGGET_TYPE);
    if (listGadgets == null || listGadgets.size() == 0) {
      listCategories.remove(i);
      i--;
    }
 else {
      gadgets.put(cate,listGadgets);
    }
  }
  Collections.sort(listCategories,new Comparator<ApplicationCategory>(){
    public int compare(    ApplicationCategory cate1,    ApplicationCategory cate2){
      return cate1.getDisplayName().compareToIgnoreCase(cate2.getDisplayName());
    }
  }
);
  categories=listCategories;
  return categories;
}",0.8802281368821293
101125,"public List<Application> getGadgetsOfCategory(final ApplicationCategory appCategory) throws Exception {
  List<Application> listGadgets=gadgets.get(appCategory);
  if (listGadgets == null || listGadgets.size() == 0) {
    return null;
  }
  return listGadgets;
}","public List<Application> getGadgetsOfCategory(final ApplicationCategory appCategory) throws Exception {
  List<Application> listGadgets=gadgets.get(appCategory);
  if (listGadgets == null || listGadgets.size() == 0) {
    return null;
  }
  Collections.sort(listGadgets,new Comparator<Application>(){
    public int compare(    Application app1,    Application app2){
      return app1.getDisplayName().compareToIgnoreCase(app2.getDisplayName());
    }
  }
);
  return listGadgets;
}",0.6550335570469799
101126,"public void execute(Event<UILanguageSelector> event) throws Exception {
  String language=event.getRequestContext().getRequestParameter(""String_Node_Str"");
  UIPortalApplication uiApp=Util.getUIPortalApplication();
  UIMaskWorkspace uiMaskWS=uiApp.getChildById(UIPortalApplication.UI_MASK_WS_ID);
  uiMaskWS.setUIComponent(null);
  Util.getPortalRequestContext().setFullRender(false);
  if (language == null || language.trim().length() < 1)   return;
  LocaleConfigService localeConfigService=event.getSource().getApplicationComponent(LocaleConfigService.class);
  LocaleConfig localeConfig=localeConfigService.getLocaleConfig(language);
  if (localeConfig == null)   localeConfig=localeConfigService.getDefaultLocaleConfig();
  uiApp.setLocale(localeConfig.getLocale());
  UIPortal uiPortal=uiApp.findFirstComponentOfType(UIPortal.class);
  uiPortal.refreshNavigation(localeConfig.getLocale());
  OrganizationService orgService=event.getSource().getApplicationComponent(OrganizationService.class);
  String remoteUser=event.getRequestContext().getRemoteUser();
  if (remoteUser != null) {
    UserProfile userProfile=orgService.getUserProfileHandler().findUserProfileByName(remoteUser);
    userProfile.getUserInfoMap().put(""String_Node_Str"",language);
  }
}","public void execute(Event<UILanguageSelector> event) throws Exception {
  String language=event.getRequestContext().getRequestParameter(""String_Node_Str"");
  UIPortalApplication uiApp=Util.getUIPortalApplication();
  UIMaskWorkspace uiMaskWS=uiApp.getChildById(UIPortalApplication.UI_MASK_WS_ID);
  uiMaskWS.setUIComponent(null);
  Util.getPortalRequestContext().setFullRender(false);
  if (language == null || language.trim().length() < 1)   return;
  LocaleConfigService localeConfigService=event.getSource().getApplicationComponent(LocaleConfigService.class);
  LocaleConfig localeConfig=localeConfigService.getLocaleConfig(language);
  if (localeConfig == null)   localeConfig=localeConfigService.getDefaultLocaleConfig();
  uiApp.setLocale(localeConfig.getLocale());
  UIPortal uiPortal=uiApp.findFirstComponentOfType(UIPortal.class);
  uiPortal.refreshNavigation(localeConfig.getLocale());
  OrganizationService orgService=event.getSource().getApplicationComponent(OrganizationService.class);
  String remoteUser=event.getRequestContext().getRemoteUser();
  if (remoteUser != null) {
    UserProfile userProfile=orgService.getUserProfileHandler().findUserProfileByName(remoteUser);
    userProfile.getUserInfoMap().put(""String_Node_Str"",language);
    UserProfileHandler hanlder=orgService.getUserProfileHandler();
    hanlder.saveUserProfile(userProfile,true);
  }
}",0.9566869300911854
101127,"public UIIFrameEditMode() throws Exception {
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  addUIFormInput(new UIFormStringInput(FIELD_URL,FIELD_URL,pref.getValue(""String_Node_Str"",""String_Node_Str"")).addValidator(MandatoryValidator.class).addValidator(URLValidator.class));
}","public UIIFrameEditMode() throws Exception {
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  addUIFormInput(new UIFormStringInput(FIELD_URL,FIELD_URL,pref.getValue(""String_Node_Str"",""String_Node_Str"")));
}",0.8997214484679665
101128,"public void execute(Event<UIIFrameEditMode> event) throws Exception {
  UIIFrameEditMode uiForm=event.getSource();
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  pref.setValue(""String_Node_Str"",uiForm.getUIStringInput(FIELD_URL).getValue());
  pref.store();
  pcontext.setApplicationMode(PortletMode.VIEW);
}","public void execute(Event<UIIFrameEditMode> event) throws Exception {
  UIIFrameEditMode uiForm=event.getSource();
  String url=uiForm.getUIStringInput(FIELD_URL).getValue();
  UIIFramePortlet uiPortlet=uiForm.getParent();
  if (url == null || url.length() == 0) {
    Object args[]={uiForm.getLabel(uiForm.getUIStringInput(FIELD_URL).getId())};
    uiPortlet.addMessage(new ApplicationMessage(""String_Node_Str"",args));
    uiForm.getUIStringInput(FIELD_URL).setValue(uiPortlet.getURL());
    return;
  }
  if (!url.trim().matches(URLValidator.URL_REGEX)) {
    uiForm.getUIStringInput(FIELD_URL).setValue(uiPortlet.getURL());
    Object[] args={FIELD_URL,""String_Node_Str""};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  pref.setValue(""String_Node_Str"",uiForm.getUIStringInput(FIELD_URL).getValue());
  pref.store();
  pcontext.setApplicationMode(PortletMode.VIEW);
}",0.5697131420947298
101129,"public void execute(Event<UIForgetPassword> event) throws Exception {
  UILogin uilogin=event.getSource().getParent();
  uilogin.getChild(UILoginForm.class).setRendered(false);
  uilogin.getChild(UIForgetPasswordWizard.class).setRendered(true);
  uilogin.getChild(UIForgetPassword.class).setRendered(false);
  event.getRequestContext().addUIComponentToUpdateByAjax(uilogin);
}","public void execute(Event<UIForgetPassword> event) throws Exception {
  UILogin uilogin=event.getSource().getParent();
  uilogin.getChild(UILoginForm.class).setRendered(false);
  uilogin.getChild(UIForgetPasswordWizard.class).setRendered(true);
  uilogin.getChild(UIForgetPassword.class).setRendered(false);
  event.getSource().reset();
  event.getRequestContext().addUIComponentToUpdateByAjax(uilogin);
}",0.9628681177976952
101130,"public byte[] getUploadData() throws Exception {
  if (uploadResource_ == null)   return null;
  File file=new File(uploadResource_.getStoreLocation());
  FileInputStream inputStream=new FileInputStream(file);
  FileChannel fchan=inputStream.getChannel();
  long fsize=fchan.size();
  ByteBuffer buff=ByteBuffer.allocate((int)fsize);
  fchan.read(buff);
  buff.rewind();
  byte[] data=buff.array();
  buff.clear();
  fchan.close();
  inputStream.close();
  return data;
}","@Deprecated public byte[] getUploadData() throws Exception {
  if (uploadResource_ == null)   return null;
  File file=new File(uploadResource_.getStoreLocation());
  FileInputStream inputStream=new FileInputStream(file);
  FileChannel fchan=inputStream.getChannel();
  long fsize=fchan.size();
  ByteBuffer buff=ByteBuffer.allocate((int)fsize);
  fchan.read(buff);
  buff.rewind();
  byte[] data=buff.array();
  buff.clear();
  fchan.close();
  inputStream.close();
  return data;
}",0.9874213836477987
101131,"public boolean isSelected(Object obj) throws Exception {
  if (selected == null)   return false;
  return obj.equals(selected);
}","public boolean isSelected(Object obj) throws Exception {
  if (selected == null)   return false;
  return getId(obj).equals(getId(selected));
}",0.9485294117647058
101132,"public void execute(final Event<UIAddGadgetForm> event) throws Exception {
  WebuiRequestContext context=event.getRequestContext();
  UIAddGadgetForm uiForm=event.getSource();
  UIDashboard uiDashboard=uiForm.getAncestorOfType(UIDashboard.class);
  UIDashboardContainer uiContainer=uiDashboard.getChild(UIDashboardContainer.class);
  GadgetRegistryService service=uiForm.getApplicationComponent(GadgetRegistryService.class);
  String url=uiForm.getUIStringInput(FIELD_URL).getValue();
  try {
    new URL(url);
  }
 catch (  Exception e) {
    UIApplication uiApplication=context.getUIApplication();
    uiApplication.addMessage(new ApplicationMessage(""String_Node_Str"",null));
    context.addUIComponentToUpdateByAjax(uiApplication.getUIPopupMessages());
    return;
  }
  Gadget gadget;
  UIGadget uiGadget;
  try {
    String name=""String_Node_Str"" + url.hashCode();
    gadget=GadgetUtil.toGadget(name,url,false);
    service.saveGadget(gadget);
    StringBuilder windowId=new StringBuilder(PortalConfig.USER_TYPE);
    windowId.append(""String_Node_Str"").append(context.getRemoteUser());
    windowId.append(""String_Node_Str"").append(gadget.getName()).append('/');
    uiGadget=uiForm.createUIComponent(context,UIGadget.class,null,null);
    uiGadget.setId(Integer.toString(uiGadget.hashCode() + 1));
    windowId.append(uiGadget.hashCode());
    uiGadget.setApplicationInstanceId(windowId.toString());
  }
 catch (  Exception e) {
    gadget=service.getGadget(""String_Node_Str"");
    StringBuilder windowId=new StringBuilder(PortalConfig.USER_TYPE);
    windowId.append(""String_Node_Str"").append(context.getRemoteUser());
    windowId.append(""String_Node_Str"").append(gadget.getName()).append('/');
    uiGadget=uiForm.createUIComponent(context,UIGadget.class,null,null);
    uiGadget.setId(Integer.toString(url.hashCode() + 1));
    windowId.append(url.hashCode());
    uiGadget.setApplicationInstanceId(windowId.toString());
    String params=""String_Node_Str"" + url + ""String_Node_Str"";
    UserGadgetStorage userGadgetStorage=uiForm.getApplicationComponent(UserGadgetStorage.class);
    userGadgetStorage.save(Util.getPortalRequestContext().getRemoteUser(),gadget.getName(),""String_Node_Str"" + url.hashCode(),UIGadget.PREF_KEY,params);
  }
  uiContainer.addUIGadget(uiGadget,0,0);
  uiContainer.save();
  uiForm.reset();
  context.addUIComponentToUpdateByAjax(uiForm);
  context.addUIComponentToUpdateByAjax(uiContainer);
}","public void execute(final Event<UIAddGadgetForm> event) throws Exception {
  WebuiRequestContext context=event.getRequestContext();
  UIAddGadgetForm uiForm=event.getSource();
  UIDashboard uiDashboard=uiForm.getAncestorOfType(UIDashboard.class);
  UIDashboardContainer uiContainer=uiDashboard.getChild(UIDashboardContainer.class);
  GadgetRegistryService service=uiForm.getApplicationComponent(GadgetRegistryService.class);
  String url=uiForm.getUIStringInput(FIELD_URL).getValue();
  UIApplication uiApplication=context.getUIApplication();
  if (url == null || url.trim().length() == 0) {
    uiApplication.addMessage(new ApplicationMessage(""String_Node_Str"",null));
    context.addUIComponentToUpdateByAjax(uiApplication.getUIPopupMessages());
    return;
  }
  try {
    new URL(url);
  }
 catch (  Exception e) {
    uiApplication.addMessage(new ApplicationMessage(""String_Node_Str"",null));
    context.addUIComponentToUpdateByAjax(uiApplication.getUIPopupMessages());
    return;
  }
  Gadget gadget;
  UIGadget uiGadget;
  try {
    String name=""String_Node_Str"" + url.hashCode();
    gadget=GadgetUtil.toGadget(name,url,false);
    service.saveGadget(gadget);
    StringBuilder windowId=new StringBuilder(PortalConfig.USER_TYPE);
    windowId.append(""String_Node_Str"").append(context.getRemoteUser());
    windowId.append(""String_Node_Str"").append(gadget.getName()).append('/');
    uiGadget=uiForm.createUIComponent(context,UIGadget.class,null,null);
    uiGadget.setId(Integer.toString(uiGadget.hashCode() + 1));
    windowId.append(uiGadget.hashCode());
    uiGadget.setApplicationInstanceId(windowId.toString());
  }
 catch (  Exception e) {
    gadget=service.getGadget(""String_Node_Str"");
    StringBuilder windowId=new StringBuilder(PortalConfig.USER_TYPE);
    windowId.append(""String_Node_Str"").append(context.getRemoteUser());
    windowId.append(""String_Node_Str"").append(gadget.getName()).append('/');
    uiGadget=uiForm.createUIComponent(context,UIGadget.class,null,null);
    uiGadget.setId(Integer.toString(url.hashCode() + 1));
    windowId.append(url.hashCode());
    uiGadget.setApplicationInstanceId(windowId.toString());
    String params=""String_Node_Str"" + url + ""String_Node_Str"";
    UserGadgetStorage userGadgetStorage=uiForm.getApplicationComponent(UserGadgetStorage.class);
    userGadgetStorage.save(Util.getPortalRequestContext().getRemoteUser(),gadget.getName(),""String_Node_Str"" + url.hashCode(),UIGadget.PREF_KEY,params);
  }
  uiContainer.addUIGadget(uiGadget,0,0);
  uiContainer.save();
  uiForm.reset();
  context.addUIComponentToUpdateByAjax(uiForm);
  context.addUIComponentToUpdateByAjax(uiContainer);
}",0.933307102105056
101133,"public void execute(final Event<UIAddGadgetForm> event) throws Exception {
  WebuiRequestContext context=event.getRequestContext();
  UIAddGadgetForm uiForm=event.getSource();
  UIDashboard uiDashboard=uiForm.getAncestorOfType(UIDashboard.class);
  UIDashboardContainer uiContainer=uiDashboard.getChild(UIDashboardContainer.class);
  GadgetRegistryService service=uiForm.getApplicationComponent(GadgetRegistryService.class);
  String url=uiForm.getUIStringInput(FIELD_URL).getValue();
  String name=""String_Node_Str"" + url.hashCode();
  Gadget gadget=GadgetUtil.toGadget(name,url,false);
  service.saveGadget(gadget);
  StringBuilder windowId=new StringBuilder(PortalConfig.USER_TYPE);
  windowId.append(""String_Node_Str"").append(context.getRemoteUser());
  windowId.append(""String_Node_Str"").append(gadget.getName()).append('/');
  UIGadget uiGadget=uiForm.createUIComponent(context,UIGadget.class,null,null);
  uiGadget.setId(Integer.toString(uiGadget.hashCode() + 1));
  windowId.append(uiGadget.hashCode());
  uiGadget.setApplicationInstanceId(windowId.toString());
  uiContainer.addUIGadget(uiGadget,0,0);
  uiContainer.save();
  context.addUIComponentToUpdateByAjax(uiContainer);
}","public void execute(final Event<UIAddGadgetForm> event) throws Exception {
  WebuiRequestContext context=event.getRequestContext();
  UIAddGadgetForm uiForm=event.getSource();
  UIDashboard uiDashboard=uiForm.getAncestorOfType(UIDashboard.class);
  UIDashboardContainer uiContainer=uiDashboard.getChild(UIDashboardContainer.class);
  GadgetRegistryService service=uiForm.getApplicationComponent(GadgetRegistryService.class);
  String url=uiForm.getUIStringInput(FIELD_URL).getValue();
  try {
    new URL(url);
  }
 catch (  Exception e) {
    UIApplication uiApplication=context.getUIApplication();
    uiApplication.addMessage(new ApplicationMessage(""String_Node_Str"",null));
    context.addUIComponentToUpdateByAjax(uiApplication.getUIPopupMessages());
    return;
  }
  String name=""String_Node_Str"" + url.hashCode();
  Gadget gadget=GadgetUtil.toGadget(name,url,false);
  service.saveGadget(gadget);
  StringBuilder windowId=new StringBuilder(PortalConfig.USER_TYPE);
  windowId.append(""String_Node_Str"").append(context.getRemoteUser());
  windowId.append(""String_Node_Str"").append(gadget.getName()).append('/');
  UIGadget uiGadget=uiForm.createUIComponent(context,UIGadget.class,null,null);
  uiGadget.setId(Integer.toString(uiGadget.hashCode() + 1));
  windowId.append(uiGadget.hashCode());
  uiGadget.setApplicationInstanceId(windowId.toString());
  uiContainer.addUIGadget(uiGadget,0,0);
  uiContainer.save();
  uiForm.reset();
  context.addUIComponentToUpdateByAjax(uiForm);
  context.addUIComponentToUpdateByAjax(uiContainer);
}",0.8705537220388706
101134,"public void processRender(WebuiRequestContext context) throws Exception {
  initData();
  PortalLayoutService service=getApplicationComponent(PortalLayoutService.class);
  DashboardParent parent=(DashboardParent)((UIComponent)getParent()).getParent();
  Container container=service.getContainer(ROOT_CONTAINER + ""String_Node_Str"" + windowId,parent.getDashboardOwner());
  UIContainer uiRoot=getChild(UIContainer.class);
  uiRoot.getChildren().clear();
  PortalDataMapper.toUIContainer(uiRoot,container);
  super.processRender(context);
}","public void processRender(WebuiRequestContext context) throws Exception {
  initData();
  PortalLayoutService service=getApplicationComponent(PortalLayoutService.class);
  DashboardParent parent=(DashboardParent)((UIComponent)getParent()).getParent();
  Container container=service.getContainer(ROOT_CONTAINER + ""String_Node_Str"" + windowId,parent.getDashboardOwner());
  UIContainer uiRoot=getChild(UIContainer.class);
  uiRoot.getChildren().clear();
  PortalDataMapper.toUIContainer(uiRoot,container);
  JavascriptManager jsmanager=context.getJavascriptManager();
  jsmanager.addCustomizedOnLoadScript(""String_Node_Str"" + windowId + ""String_Node_Str"");
  super.processRender(context);
}",0.8440816326530612
101135,"public final void execute(final Event<org.exoplatform.webui.core.UIContainer> event) throws Exception {
  WebuiRequestContext context=event.getRequestContext();
  org.exoplatform.webui.core.UIContainer uiPortlet=event.getSource();
  String objectId=context.getRequestParameter(OBJECTID);
  String minimized=context.getRequestParameter(""String_Node_Str"");
  UIGadget uiGadget=uiPortlet.getChild(UIDashboardContainer.class).getUIGadget(objectId);
  uiGadget.getProperties().setProperty(""String_Node_Str"",minimized);
  uiPortlet.getChild(UIDashboardContainer.class).save();
}","public final void execute(final Event<org.exoplatform.webui.core.UIContainer> event) throws Exception {
  WebuiRequestContext context=event.getRequestContext();
  org.exoplatform.webui.core.UIContainer uiPortlet=event.getSource();
  String objectId=context.getRequestParameter(OBJECTID);
  String minimized=context.getRequestParameter(""String_Node_Str"");
  UIGadget uiGadget=uiPortlet.getChild(UIDashboardContainer.class).getUIGadget(objectId);
  uiGadget.getProperties().setProperty(""String_Node_Str"",minimized);
  uiPortlet.getChild(UIDashboardContainer.class).save();
  context.addUIComponentToUpdateByAjax(uiGadget);
}",0.9581239530988276
101136,"public final List<ApplicationCategory> getCategories() throws Exception {
  ApplicationRegistryService service=getApplicationComponent(ApplicationRegistryService.class);
  service.importExoGadgets();
  String remoteUser=((WebuiRequestContext)WebuiRequestContext.getCurrentInstance()).getRemoteUser();
  List<ApplicationCategory> listCategories=service.getApplicationCategories(remoteUser,org.exoplatform.web.application.Application.EXO_GAGGET_TYPE);
  gadgets=new Hashtable<ApplicationCategory,List<Application>>();
  for (int i=0; i < listCategories.size(); i++) {
    ApplicationCategory cate=listCategories.get(i);
    List<Application> listGadgets=service.getApplications(cate,org.exoplatform.web.application.Application.EXO_GAGGET_TYPE);
    if (listGadgets == null || listGadgets.size() == 0) {
      listCategories.remove(i);
      i--;
    }
 else {
      gadgets.put(cate,listGadgets);
    }
  }
  categories=listCategories;
  return categories;
}","public final List<ApplicationCategory> getCategories() throws Exception {
  ApplicationRegistryService service=getApplicationComponent(ApplicationRegistryService.class);
  String remoteUser=((WebuiRequestContext)WebuiRequestContext.getCurrentInstance()).getRemoteUser();
  List<ApplicationCategory> listCategories=service.getApplicationCategories(remoteUser,org.exoplatform.web.application.Application.EXO_GAGGET_TYPE);
  gadgets=new Hashtable<ApplicationCategory,List<Application>>();
  for (int i=0; i < listCategories.size(); i++) {
    ApplicationCategory cate=listCategories.get(i);
    List<Application> listGadgets=service.getApplications(cate,org.exoplatform.web.application.Application.EXO_GAGGET_TYPE);
    if (listGadgets == null || listGadgets.size() == 0) {
      listCategories.remove(i);
      i--;
    }
 else {
      gadgets.put(cate,listGadgets);
    }
  }
  categories=listCategories;
  return categories;
}",0.9840595111583422
101137,"public UIGadgetEditMode() throws Exception {
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  addUIFormInput(new UIFormStringInput(FIELD_URL,FIELD_URL,pref.getValue(""String_Node_Str"",""String_Node_Str"")));
}","public UIGadgetEditMode() throws Exception {
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  options.add(new SelectItemOption<String>(REMOTE_TYPE,REMOTE_TYPE));
  options.add(new SelectItemOption<String>(LOCAL_TYPE,LOCAL_TYPE));
  UIFormSelectBox typeSelector=new UIFormSelectBox(TYPE_SELECTOR,null,options);
  typeSelector.setOnChange(""String_Node_Str"");
  addUIFormInput(typeSelector);
  addUIFormInput(new UIFormStringInput(FIELD_URL,FIELD_URL,pref.getValue(""String_Node_Str"",""String_Node_Str"")));
  UIFormSelectBox gadgetSelector=new UIFormSelectBox(GADGET_SELECTOR,null,new ArrayList<SelectItemOption<String>>());
  gadgetSelector.setRendered(false);
  addUIFormInput(gadgetSelector);
}",0.53125
101138,"public void execute(final Event<UIGadgetEditMode> event) throws Exception {
  UIGadgetEditMode uiGadgetEditMode=event.getSource();
  String url=uiGadgetEditMode.getUIStringInput(FIELD_URL).getValue();
  UIGadgetPortlet uiPortlet=uiGadgetEditMode.getParent();
  if (url == null || url.length() == 0) {
    uiGadgetEditMode.getUIStringInput(FIELD_URL).setValue(uiPortlet.getUrl());
    return;
  }
  try {
    PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
    PortletPreferences pref=pcontext.getRequest().getPreferences();
    new URL(url);
    pref.setValue(""String_Node_Str"",url);
    pref.store();
    pcontext.setApplicationMode(PortletMode.VIEW);
  }
 catch (  Exception e) {
    uiGadgetEditMode.getUIStringInput(FIELD_URL).setValue(uiPortlet.getUrl());
  }
}","public void execute(final Event<UIGadgetEditMode> event) throws Exception {
  UIGadgetEditMode uiGadgetEdit=event.getSource();
  UIFormSelectBox typeSelector=uiGadgetEdit.getUIFormSelectBox(TYPE_SELECTOR);
  String selectedValue=typeSelector.getValue();
  UIFormStringInput urlInput=uiGadgetEdit.getUIStringInput(FIELD_URL);
  UIFormSelectBox gadgetSelector=uiGadgetEdit.getUIFormSelectBox(GADGET_SELECTOR);
  if (selectedValue.equals(REMOTE_TYPE)) {
    urlInput.setRendered(true);
    gadgetSelector.setRendered(false);
  }
 else {
    urlInput.setRendered(false);
    gadgetSelector.setRendered(true);
    List<SelectItemOption<String>> gadgetItems=gadgetSelector.getOptions();
    gadgetItems.clear();
    String userName=event.getRequestContext().getRemoteUser();
    ApplicationRegistryService service=uiGadgetEdit.getApplicationComponent(ApplicationRegistryService.class);
    UserACL acl=uiGadgetEdit.getApplicationComponent(UserACL.class);
    List<Application> appList=service.getAllApplications();
    for (    Application app : appList) {
      if (app.getApplicationType().equals(org.exoplatform.web.application.Application.EXO_GAGGET_TYPE)) {
        for (        String per : app.getAccessPermissions()) {
          if (acl.hasPermission(userName,per)) {
            gadgetItems.add(new SelectItemOption<String>(app.getDisplayName(),app.getId()));
            break;
          }
        }
      }
    }
  }
  event.getRequestContext().addUIComponentToUpdateByAjax(uiGadgetEdit);
}",0.1706366392377652
101139,"public Query(String ownerType,String ownerId,String name,Class<T> clazz){
  ownerType_=ownerType;
  ownerId_=ownerId;
  classType_=clazz;
  name_=name;
}","public Query(String ownerType,String ownerId,String name,String title,Class<T> clazz){
  ownerType_=ownerType;
  ownerId_=ownerId;
  classType_=clazz;
  name_=name;
  try {
    Method method=clazz.getMethod(""String_Node_Str"",null);
    if (method != null)     title_=title;
  }
 catch (  Exception e) {
  }
}",0.6637744034707158
101140,"/** 
 * This method should remove the PortalConfig, Page and PageNavigation  that  belong to the portal  in the database. The method should broadcast the event UserPortalConfigService.portal.onRemove
 * @param config
 * @throws Exception
 */
public void removeUserPortalConfig(String portalName) throws Exception {
  Query<Page> query=new Query<Page>(null,null,null,Page.class);
  query.setOwnerType(PortalConfig.PORTAL_TYPE);
  query.setOwnerId(portalName);
  PageList pageList=storage_.find(query);
  pageList.setPageSize(10);
  int i=1;
  while (i <= pageList.getAvailablePage()) {
    List<?> list=pageList.getPage(i);
    Iterator<?> itr=list.iterator();
    while (itr.hasNext()) {
      Page page=(Page)itr.next();
      remove(page);
    }
    i++;
  }
  PageNavigation navigation=storage_.getPageNavigation(PortalConfig.PORTAL_TYPE,portalName);
  if (navigation != null)   remove(navigation);
  Query<PortletPreferences> portletPrefQuery=new Query<PortletPreferences>(null,null,null,PortletPreferences.class);
  portletPrefQuery.setOwnerType(PortalConfig.PORTAL_TYPE);
  portletPrefQuery.setOwnerId(portalName);
  pageList=storage_.find(portletPrefQuery);
  pageList.setPageSize(10);
  i=1;
  while (i <= pageList.getAvailablePage()) {
    List<?> list=pageList.getPage(i);
    Iterator<?> itr=list.iterator();
    while (itr.hasNext()) {
      PortletPreferences portletPreferences=(PortletPreferences)itr.next();
      storage_.remove(portletPreferences);
    }
    i++;
  }
  PortalConfig config=storage_.getPortalConfig(portalName);
  portalConfigCache_.remove(config.getName());
  if (config != null)   storage_.remove(config);
}","/** 
 * This method should remove the PortalConfig, Page and PageNavigation  that  belong to the portal  in the database. The method should broadcast the event UserPortalConfigService.portal.onRemove
 * @param config
 * @throws Exception
 */
public void removeUserPortalConfig(String portalName) throws Exception {
  Query<Page> query=new Query<Page>(null,null,null,null,Page.class);
  query.setOwnerType(PortalConfig.PORTAL_TYPE);
  query.setOwnerId(portalName);
  PageList pageList=storage_.find(query);
  pageList.setPageSize(10);
  int i=1;
  while (i <= pageList.getAvailablePage()) {
    List<?> list=pageList.getPage(i);
    Iterator<?> itr=list.iterator();
    while (itr.hasNext()) {
      Page page=(Page)itr.next();
      remove(page);
    }
    i++;
  }
  PageNavigation navigation=storage_.getPageNavigation(PortalConfig.PORTAL_TYPE,portalName);
  if (navigation != null)   remove(navigation);
  Query<PortletPreferences> portletPrefQuery=new Query<PortletPreferences>(null,null,null,null,PortletPreferences.class);
  portletPrefQuery.setOwnerType(PortalConfig.PORTAL_TYPE);
  portletPrefQuery.setOwnerId(portalName);
  pageList=storage_.find(portletPrefQuery);
  pageList.setPageSize(10);
  i=1;
  while (i <= pageList.getAvailablePage()) {
    List<?> list=pageList.getPage(i);
    Iterator<?> itr=list.iterator();
    while (itr.hasNext()) {
      PortletPreferences portletPreferences=(PortletPreferences)itr.next();
      storage_.remove(portletPreferences);
    }
    i++;
  }
  PortalConfig config=storage_.getPortalConfig(portalName);
  portalConfigCache_.remove(config.getName());
  if (config != null)   storage_.remove(config);
}",0.9969660194174758
101141,"@SuppressWarnings(""String_Node_Str"") public PageList find(Query q,Comparator sortComparator) throws Exception {
  SessionProvider sessionProvider=SessionProvider.createSystemProvider();
  StringBuilder builder=new StringBuilder(""String_Node_Str"" + DataMapper.EXO_REGISTRYENTRY_NT);
  String registryNodePath=regService_.getRegistry(sessionProvider).getNode().getPath();
  generateScript(builder,""String_Node_Str"",registryNodePath + ""String_Node_Str"");
  generateScript(builder,DataMapper.EXO_DATA_TYPE,q.getClassType().getSimpleName());
  generateScript(builder,DataMapper.EXO_NAME,q.getName());
  generateScript(builder,DataMapper.EXO_OWNER_TYPE,q.getOwnerType());
  generateScript(builder,DataMapper.EXO_OWNER_ID,q.getOwnerId());
  Session session=regService_.getRegistry(sessionProvider).getNode().getSession();
  QueryManager queryManager=session.getWorkspace().getQueryManager();
  javax.jcr.query.Query query=queryManager.createQuery(builder.toString(),""String_Node_Str"");
  QueryResult result=query.execute();
  ArrayList<Object> list=new ArrayList<Object>();
  NodeIterator itr=result.getNodes();
  while (itr.hasNext()) {
    Node node=itr.nextNode();
    String entryPath=node.getPath().substring(registryNodePath.length() + 1);
    RegistryEntry entry=regService_.getEntry(sessionProvider,entryPath);
    list.add(mapper_.fromDocument(entry.getDocument(),q.getClassType()));
  }
  sessionProvider.close();
  if (sortComparator != null)   Collections.sort(list,sortComparator);
  return new ObjectPageList(list,10);
}","@SuppressWarnings(""String_Node_Str"") public PageList find(Query q,Comparator sortComparator) throws Exception {
  SessionProvider sessionProvider=SessionProvider.createSystemProvider();
  StringBuilder builder=new StringBuilder(""String_Node_Str"" + DataMapper.EXO_REGISTRYENTRY_NT);
  String registryNodePath=regService_.getRegistry(sessionProvider).getNode().getPath();
  generateScript(builder,""String_Node_Str"",registryNodePath + ""String_Node_Str"");
  generateScript(builder,DataMapper.EXO_DATA_TYPE,q.getClassType().getSimpleName());
  generateScript(builder,DataMapper.EXO_NAME,q.getName());
  generateScript(builder,DataMapper.EXO_OWNER_TYPE,q.getOwnerType());
  generateScript(builder,DataMapper.EXO_OWNER_ID,q.getOwnerId());
  try {
    Method method=q.getClassType().getMethod(""String_Node_Str"",null);
    if (method != null)     generateScript(builder,DataMapper.EXO_TITLE,q.getTitle());
  }
 catch (  Exception e) {
  }
  Session session=regService_.getRegistry(sessionProvider).getNode().getSession();
  QueryManager queryManager=session.getWorkspace().getQueryManager();
  javax.jcr.query.Query query=queryManager.createQuery(builder.toString(),""String_Node_Str"");
  QueryResult result=query.execute();
  ArrayList<Object> list=new ArrayList<Object>();
  NodeIterator itr=result.getNodes();
  while (itr.hasNext()) {
    Node node=itr.nextNode();
    String entryPath=node.getPath().substring(registryNodePath.length() + 1);
    RegistryEntry entry=regService_.getEntry(sessionProvider,entryPath);
    list.add(mapper_.fromDocument(entry.getDocument(),q.getClassType()));
  }
  sessionProvider.close();
  if (sortComparator != null)   Collections.sort(list,sortComparator);
  return new ObjectPageList(list,10);
}",0.9391143911439116
101142,"public Query(String ownerType,String ownerId,String name,String title,Class<T> clazz){
  ownerType_=ownerType;
  ownerId_=ownerId;
  classType_=clazz;
  name_=name;
  try {
    Method method=clazz.getMethod(""String_Node_Str"",null);
    if (method != null)     title_=title;
  }
 catch (  Exception e) {
  }
}","public Query(String ownerType,String ownerId,String name,String title,Class<T> clazz){
  ownerType_=ownerType;
  ownerId_=ownerId;
  classType_=clazz;
  name_=name;
  title_=title;
}",0.7428571428571429
101143,"@SuppressWarnings(""String_Node_Str"") public PageList find(Query q,Comparator sortComparator) throws Exception {
  SessionProvider sessionProvider=SessionProvider.createSystemProvider();
  StringBuilder builder=new StringBuilder(""String_Node_Str"" + DataMapper.EXO_REGISTRYENTRY_NT);
  String registryNodePath=regService_.getRegistry(sessionProvider).getNode().getPath();
  generateScript(builder,""String_Node_Str"",registryNodePath + ""String_Node_Str"");
  generateScript(builder,DataMapper.EXO_DATA_TYPE,q.getClassType().getSimpleName());
  generateScript(builder,DataMapper.EXO_NAME,q.getName());
  generateScript(builder,DataMapper.EXO_OWNER_TYPE,q.getOwnerType());
  generateScript(builder,DataMapper.EXO_OWNER_ID,q.getOwnerId());
  try {
    Method method=q.getClassType().getMethod(""String_Node_Str"",null);
    if (method != null)     generateScript(builder,DataMapper.EXO_TITLE,q.getTitle());
  }
 catch (  Exception e) {
  }
  Session session=regService_.getRegistry(sessionProvider).getNode().getSession();
  QueryManager queryManager=session.getWorkspace().getQueryManager();
  javax.jcr.query.Query query=queryManager.createQuery(builder.toString(),""String_Node_Str"");
  QueryResult result=query.execute();
  ArrayList<Object> list=new ArrayList<Object>();
  NodeIterator itr=result.getNodes();
  while (itr.hasNext()) {
    Node node=itr.nextNode();
    String entryPath=node.getPath().substring(registryNodePath.length() + 1);
    RegistryEntry entry=regService_.getEntry(sessionProvider,entryPath);
    list.add(mapper_.fromDocument(entry.getDocument(),q.getClassType()));
  }
  sessionProvider.close();
  if (sortComparator != null)   Collections.sort(list,sortComparator);
  return new ObjectPageList(list,10);
}","@SuppressWarnings(""String_Node_Str"") public PageList find(Query q,Comparator sortComparator) throws Exception {
  SessionProvider sessionProvider=SessionProvider.createSystemProvider();
  StringBuilder builder=new StringBuilder(""String_Node_Str"" + DataMapper.EXO_REGISTRYENTRY_NT);
  String registryNodePath=regService_.getRegistry(sessionProvider).getNode().getPath();
  generateScript(builder,""String_Node_Str"",registryNodePath + ""String_Node_Str"");
  generateScript(builder,DataMapper.EXO_DATA_TYPE,q.getClassType().getSimpleName());
  generateScript(builder,DataMapper.EXO_NAME,q.getName());
  generateScript(builder,DataMapper.EXO_OWNER_TYPE,q.getOwnerType());
  generateScript(builder,DataMapper.EXO_OWNER_ID,q.getOwnerId());
  generateScript(builder,DataMapper.EXO_TITLE,q.getTitle());
  Session session=regService_.getRegistry(sessionProvider).getNode().getSession();
  QueryManager queryManager=session.getWorkspace().getQueryManager();
  javax.jcr.query.Query query=queryManager.createQuery(builder.toString(),""String_Node_Str"");
  QueryResult result=query.execute();
  ArrayList<Object> list=new ArrayList<Object>();
  NodeIterator itr=result.getNodes();
  while (itr.hasNext()) {
    Node node=itr.nextNode();
    String entryPath=node.getPath().substring(registryNodePath.length() + 1);
    RegistryEntry entry=regService_.getEntry(sessionProvider,entryPath);
    list.add(mapper_.fromDocument(entry.getDocument(),q.getClassType()));
  }
  sessionProvider.close();
  if (sortComparator != null)   Collections.sort(list,sortComparator);
  return new ObjectPageList(list,10);
}",0.9586477512828252
101144,"public void execute(Event<UIDropDownControl> event) throws Exception {
  String id=event.getRequestContext().getRequestParameter(OBJECTID);
  UIDropDownControl uiDropDownControl=event.getSource();
  UIPageNodeSelector uiPageNodeSelector=uiDropDownControl.getParent();
  event.getRequestContext().addUIComponentToUpdateByAjax(uiPageNodeSelector.getParent());
  if (id != null)   uiPageNodeSelector.selectNavigation(Integer.parseInt(id));
}","public void execute(Event<UIDropDownControl> event) throws Exception {
  String id=event.getRequestContext().getRequestParameter(OBJECTID);
  UIDropDownControl uiDropDownControl=event.getSource();
  UIPageNodeSelector uiPageNodeSelector=uiDropDownControl.getParent();
  event.getRequestContext().addUIComponentToUpdateByAjax(uiPageNodeSelector.getParent());
  if (id != null)   uiPageNodeSelector.selectNavigation(Integer.parseInt(id));
  uiPageNodeSelector.<UIComponent>getParent().broadcast(event,event.getExecutionPhase());
}",0.906832298136646
101145,"public void processRender(WebuiRequestContext context) throws Exception {
  super.processRender(context);
}","public void processRender(WebuiRequestContext context) throws Exception {
  if (isEditMode && getChild(UIPageNodeSelector.class).getSelectedPageNode() == null)   reset();
  super.processRender(context);
}",0.6881028938906752
101146,"public void execute(Event<UIWizardPageSetInfo> event) throws Exception {
  UIWizardPageSetInfo uiForm=event.getSource();
  boolean isCheck=uiForm.getUIFormCheckBoxInput(SHOW_PUBLICATION_DATE).isChecked();
  uiForm.getUIFormDateTimeInput(START_PUBLICATION_DATE).setRendered(isCheck);
  uiForm.getUIFormDateTimeInput(END_PUBLICATION_DATE).setRendered(isCheck);
  UIWizard uiWizard=uiForm.getAncestorOfType(UIWizard.class);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiWizard);
}","public void execute(Event<UIDropDownControl> event) throws Exception {
  UIDropDownControl uiDropDownControl=event.getSource();
  UIWizardPageSetInfo uiForm=uiDropDownControl.getAncestorOfType(UIWizardPageSetInfo.class);
  if (uiForm.isEditMode()) {
    uiForm.reset();
    uiForm.setShowPublicationDate(false);
  }
}",0.3197026022304832
101147,"public void reset(){
  super.reset();
  getUIFormCheckBoxInput(SHOW_PUBLICATION_DATE).setChecked(false);
  getUIFormDateTimeInput(START_PUBLICATION_DATE).setRendered(false);
  getUIFormDateTimeInput(END_PUBLICATION_DATE).setRendered(false);
}","public void reset(){
  super.reset();
}",0.2775800711743772
101148,"public void execute(Event<UILanguageSelector> event) throws Exception {
  String language=event.getRequestContext().getRequestParameter(""String_Node_Str"");
  UIPortalApplication uiApp=Util.getUIPortalApplication();
  UIMaskWorkspace uiMaskWS=uiApp.getChildById(UIPortalApplication.UI_MASK_WS_ID);
  uiMaskWS.setUIComponent(null);
  Util.getPortalRequestContext().setFullRender(false);
  if (language == null || language.trim().length() < 1)   return;
  LocaleConfigService localeConfigService=event.getSource().getApplicationComponent(LocaleConfigService.class);
  LocaleConfig localeConfig=localeConfigService.getLocaleConfig(language);
  if (localeConfig == null)   localeConfig=localeConfigService.getDefaultLocaleConfig();
  uiApp.setLocale(localeConfig.getLocale());
  UIPortal uiPortal=uiApp.findFirstComponentOfType(UIPortal.class);
  uiPortal.refreshNavigation(localeConfig.getLanguage());
  OrganizationService orgService=event.getSource().getApplicationComponent(OrganizationService.class);
  String remoteUser=event.getRequestContext().getRemoteUser();
  if (remoteUser != null) {
    UserProfile userProfile=orgService.getUserProfileHandler().findUserProfileByName(remoteUser);
    userProfile.getUserInfoMap().put(""String_Node_Str"",language);
  }
}","public void execute(Event<UILanguageSelector> event) throws Exception {
  String language=event.getRequestContext().getRequestParameter(""String_Node_Str"");
  UIPortalApplication uiApp=Util.getUIPortalApplication();
  UIMaskWorkspace uiMaskWS=uiApp.getChildById(UIPortalApplication.UI_MASK_WS_ID);
  uiMaskWS.setUIComponent(null);
  Util.getPortalRequestContext().setFullRender(false);
  if (language == null || language.trim().length() < 1)   return;
  LocaleConfigService localeConfigService=event.getSource().getApplicationComponent(LocaleConfigService.class);
  LocaleConfig localeConfig=localeConfigService.getLocaleConfig(language);
  if (localeConfig == null)   localeConfig=localeConfigService.getDefaultLocaleConfig();
  uiApp.setLocale(localeConfig.getLocale());
  UIPortal uiPortal=uiApp.findFirstComponentOfType(UIPortal.class);
  uiPortal.refreshNavigation(localeConfig.getLocale());
  OrganizationService orgService=event.getSource().getApplicationComponent(OrganizationService.class);
  String remoteUser=event.getRequestContext().getRemoteUser();
  if (remoteUser != null) {
    UserProfile userProfile=orgService.getUserProfileHandler().findUserProfileByName(remoteUser);
    userProfile.getUserInfoMap().put(""String_Node_Str"",language);
  }
}",0.996031746031746
101149,"public void refreshNavigation(String lcl){
  LocaleConfig localeConfig=getApplicationComponent(LocaleConfigService.class).getLocaleConfig(lcl);
  for (  PageNavigation nav : navigations) {
    if (nav.getOwnerType().equals(PortalConfig.USER_TYPE))     continue;
    ResourceBundle res=localeConfig.getNavigationResourceBundle(nav.getOwnerType(),nav.getOwnerId());
    for (    PageNode node : nav.getNodes()) {
      resolveLabel(res,node);
    }
  }
}","public void refreshNavigation(Locale locale){
  LocaleConfig localeConfig=getApplicationComponent(LocaleConfigService.class).getLocaleConfig(locale.getLanguage());
  for (  PageNavigation nav : navigations) {
    if (nav.getOwnerType().equals(PortalConfig.USER_TYPE))     continue;
    ResourceBundle res=localeConfig.getNavigationResourceBundle(nav.getOwnerType(),nav.getOwnerId());
    for (    PageNode node : nav.getNodes()) {
      resolveLabel(res,node);
    }
  }
}",0.7402597402597403
101150,"public void setNavigation(List<PageNavigation> navs) throws Exception {
  navigations=navs;
  selectedPaths_=new ArrayList<PageNode>();
  if (navigations == null || navigations.size() < 1)   return;
  PageNavigation pNav=navigations.get(0);
  if (pNav.getNodes() == null || pNav.getNodes().size() < 1)   return;
  selectedNode_=pNav.getNodes().get(0);
  selectedPaths_.add(selectedNode_);
  UIPageBody uiPageBody=findFirstComponentOfType(UIPageBody.class);
  if (uiPageBody == null)   return;
  uiPageBody.setPageBody(selectedNode_,this);
  refreshNavigation();
}","public void setNavigation(List<PageNavigation> navs) throws Exception {
  navigations=navs;
  selectedPaths_=new ArrayList<PageNode>();
  if (navigations == null || navigations.size() < 1)   return;
  PageNavigation pNav=navigations.get(0);
  if (pNav.getNodes() == null || pNav.getNodes().size() < 1)   return;
  selectedNode_=pNav.getNodes().get(0);
  selectedPaths_.add(selectedNode_);
  UIPageBody uiPageBody=findFirstComponentOfType(UIPageBody.class);
  if (uiPageBody == null)   return;
  uiPageBody.setPageBody(selectedNode_,this);
  UIPortalApplication uiApp=Util.getUIPortalApplication();
  refreshNavigation(uiApp.getLocale());
}",0.9367720465890182
101151,"public void save() throws Exception {
  UIPortal uiPortal=Util.getUIPortal();
  UIPortalApplication uiPortalApp=getAncestorOfType(UIPortalApplication.class);
  PortalConfig portalConfig=PortalDataMapper.toPortal(uiPortal);
  UserPortalConfigService configService=getApplicationComponent(UserPortalConfigService.class);
  configService.update(portalConfig);
  uiPortalApp.getUserPortalConfig().setPortal(portalConfig);
  PortalRequestContext prContext=Util.getPortalRequestContext();
  String remoteUser=prContext.getRemoteUser();
  String ownerUser=prContext.getPortalOwner();
  UserPortalConfig userPortalConfig=configService.getUserPortalConfig(ownerUser,remoteUser);
  if (userPortalConfig != null) {
    uiPortal.setModifiable(userPortalConfig.getPortalConfig().isModifiable());
  }
 else {
    uiPortal.setModifiable(false);
  }
  LocaleConfigService localeConfigService=uiPortalApp.getApplicationComponent(LocaleConfigService.class);
  LocaleConfig localeConfig=localeConfigService.getLocaleConfig(portalConfig.getLocale());
  if (localeConfig == null)   localeConfig=localeConfigService.getDefaultLocaleConfig();
  uiPortalApp.setLocale(localeConfig.getLocale());
  uiPortalApp.setSkin(uiPortal.getSkin());
  prContext.refreshResourceBundle();
  SkinService skinService=getApplicationComponent(SkinService.class);
  skinService.invalidatePortalSkinCache(uiPortal.getName(),uiPortal.getSkin());
}","public void save() throws Exception {
  UIPortal uiPortal=Util.getUIPortal();
  UIPortalApplication uiPortalApp=getAncestorOfType(UIPortalApplication.class);
  PortalConfig portalConfig=PortalDataMapper.toPortal(uiPortal);
  UserPortalConfigService configService=getApplicationComponent(UserPortalConfigService.class);
  configService.update(portalConfig);
  uiPortalApp.getUserPortalConfig().setPortal(portalConfig);
  PortalRequestContext prContext=Util.getPortalRequestContext();
  String remoteUser=prContext.getRemoteUser();
  String ownerUser=prContext.getPortalOwner();
  UserPortalConfig userPortalConfig=configService.getUserPortalConfig(ownerUser,remoteUser);
  if (userPortalConfig != null) {
    uiPortal.setModifiable(userPortalConfig.getPortalConfig().isModifiable());
  }
 else {
    uiPortal.setModifiable(false);
  }
  LocaleConfigService localeConfigService=uiPortalApp.getApplicationComponent(LocaleConfigService.class);
  LocaleConfig localeConfig=localeConfigService.getLocaleConfig(portalConfig.getLocale());
  if (localeConfig == null)   localeConfig=localeConfigService.getDefaultLocaleConfig();
  String portalAppLanguage=uiPortalApp.getLocale().getLanguage();
  OrganizationService orgService=getApplicationComponent(OrganizationService.class);
  UserProfile userProfile=orgService.getUserProfileHandler().findUserProfileByName(remoteUser);
  String userLanguage=userProfile.getUserInfoMap().get(""String_Node_Str"");
  String browserLanguage=prContext.getRequest().getLocale().getLanguage();
  if (!portalAppLanguage.equals(userLanguage) && !portalAppLanguage.equals(browserLanguage)) {
    uiPortalApp.setLocale(localeConfig.getLocale());
    uiPortal.refreshNavigation(localeConfig.getLocale());
  }
  uiPortalApp.setSkin(uiPortal.getSkin());
  prContext.refreshResourceBundle();
  SkinService skinService=getApplicationComponent(SkinService.class);
  skinService.invalidatePortalSkinCache(uiPortal.getName(),uiPortal.getSkin());
}",0.8184523809523809
101152,"/** 
 * The constructor of this class is used to build the tree of UI components that will be aggregated in the portal page.  1) The component is stored in the current PortalRequestContext ThreadLocal  2) The configuration for the portal associated with the current user request is extracted from the  PortalRequestContext 3) Then according to the context path, either a public or private portal is initiated. Usually a public portal does not contain the left column and only the private one has it. 4) The skin to use is setup 5) Finally, the current component is associated with the current portal owner      
 * @param initParams
 * @throws Exception
 */
public UIPortalApplication() throws Exception {
  log=ExoLogger.getLogger(""String_Node_Str"");
  PortalRequestContext context=PortalRequestContext.getCurrentInstance();
  context.setUIApplication(this);
  userPortalConfig_=(UserPortalConfig)context.getAttribute(UserPortalConfig.class);
  if (userPortalConfig_ == null)   throw new Exception(""String_Node_Str"");
  UserACL acl=getApplicationComponent(UserACL.class);
  if (acl.hasAccessControlWorkspacePermission(context.getRemoteUser()))   addChild(UIControlWorkspace.class,UIPortalApplication.UI_CONTROL_WS_ID,null);
  addWorkingWorkspace();
  String currentSkin=userPortalConfig_.getPortalConfig().getSkin();
  if (currentSkin != null && currentSkin.trim().length() > 0)   skin_=currentSkin;
  setOwner(context.getPortalOwner());
  String portalLanguage=null;
  LocaleConfigService localeConfigService=getApplicationComponent(LocaleConfigService.class);
  OrganizationService orgService=getApplicationComponent(OrganizationService.class);
  LocaleConfig localeConfig=localeConfigService.getLocaleConfig(userPortalConfig_.getPortalConfig().getLocale());
  UIPortal uiPortal=findFirstComponentOfType(UIPortal.class);
  if (context.getRemoteUser() != null) {
    UserProfile userProfile=orgService.getUserProfileHandler().findUserProfileByName(context.getRemoteUser());
    portalLanguage=userProfile.getUserInfoMap().get(""String_Node_Str"");
  }
  localeConfig=localeConfigService.getLocaleConfig(portalLanguage);
  if (portalLanguage != null && portalLanguage.equals(localeConfig.getLanguage())) {
    setLocale(localeConfig.getLocale());
    uiPortal.refreshNavigation(portalLanguage);
    return;
  }
  portalLanguage=context.getRequest().getLocale().getLanguage();
  localeConfig=localeConfigService.getLocaleConfig(portalLanguage);
  if (!portalLanguage.equals(localeConfig.getLanguage())) {
    localeConfig=localeConfigService.getLocaleConfig(uiPortal.getLocale());
    portalLanguage=uiPortal.getLocale();
  }
  setLocale(localeConfig.getLocale());
  uiPortal.refreshNavigation(portalLanguage);
}","/** 
 * The constructor of this class is used to build the tree of UI components that will be aggregated in the portal page.  1) The component is stored in the current PortalRequestContext ThreadLocal  2) The configuration for the portal associated with the current user request is extracted from the  PortalRequestContext 3) Then according to the context path, either a public or private portal is initiated. Usually a public portal does not contain the left column and only the private one has it. 4) The skin to use is setup 5) Finally, the current component is associated with the current portal owner      
 * @param initParams
 * @throws Exception
 */
public UIPortalApplication() throws Exception {
  log=ExoLogger.getLogger(""String_Node_Str"");
  PortalRequestContext context=PortalRequestContext.getCurrentInstance();
  userPortalConfig_=(UserPortalConfig)context.getAttribute(UserPortalConfig.class);
  if (userPortalConfig_ == null)   throw new Exception(""String_Node_Str"");
  String portalLanguage=null;
  LocaleConfigService localeConfigService=getApplicationComponent(LocaleConfigService.class);
  OrganizationService orgService=getApplicationComponent(OrganizationService.class);
  LocaleConfig localeConfig=localeConfigService.getLocaleConfig(userPortalConfig_.getPortalConfig().getLocale());
  if (context.getRemoteUser() != null) {
    UserProfile userProfile=orgService.getUserProfileHandler().findUserProfileByName(context.getRemoteUser());
    portalLanguage=userProfile.getUserInfoMap().get(""String_Node_Str"");
  }
  localeConfig=localeConfigService.getLocaleConfig(portalLanguage);
  if (portalLanguage == null || !portalLanguage.equals(localeConfig.getLanguage())) {
    portalLanguage=context.getRequest().getLocale().getLanguage();
    localeConfig=localeConfigService.getLocaleConfig(portalLanguage);
    if (!portalLanguage.equals(localeConfig.getLanguage())) {
      localeConfig=localeConfigService.getLocaleConfig(userPortalConfig_.getPortalConfig().getLocale());
    }
  }
  setLocale(localeConfig.getLocale());
  context.setUIApplication(this);
  UserACL acl=getApplicationComponent(UserACL.class);
  if (acl.hasAccessControlWorkspacePermission(context.getRemoteUser()))   addChild(UIControlWorkspace.class,UIPortalApplication.UI_CONTROL_WS_ID,null);
  addWorkingWorkspace();
  String currentSkin=userPortalConfig_.getPortalConfig().getSkin();
  if (currentSkin != null && currentSkin.trim().length() > 0)   skin_=currentSkin;
  setOwner(context.getPortalOwner());
}",0.4919354838709677
101153,"public void loadSelectedPath(){
  List<PageNode> nodes=Util.getUIPortal().getSelectedPaths();
  List<LocalPath> paths=new ArrayList<LocalPath>();
  for (  PageNode node : nodes) {
    paths.add(new LocalPath(node.getUri(),node.getResolvedLabel()));
  }
  UIBreadcumbs uiBreadCumbs=getChild(UIBreadcumbs.class);
  uiBreadCumbs.setPath(paths);
}","public void loadSelectedPath(){
  List<PageNode> nodes=Util.getUIPortal().getSelectedPaths();
  List<LocalPath> paths=new ArrayList<LocalPath>();
  for (  PageNode node : nodes) {
    if (node.getPageReference() == null) {
      paths.add(new LocalPath(null,node.getResolvedLabel()));
    }
 else {
      paths.add(new LocalPath(node.getUri(),node.getResolvedLabel()));
    }
  }
  UIBreadcumbs uiBreadCumbs=getChild(UIBreadcumbs.class);
  uiBreadCumbs.setPath(paths);
}",0.8437884378843789
101154,"public NewPortalConfigListener(DataStorage pdcService,ConfigurationManager cmanager,InitParams params) throws Exception {
  cmanager_=cmanager;
  pdcService_=pdcService;
  ObjectParameter objectParam=params.getObjectParam(""String_Node_Str"");
  if (objectParam != null)   pageTemplateConfig_=(PageTemplateConfig)objectParam.getObject();
  String checkPortal=""String_Node_Str"";
  ValueParam valueParam=params.getValueParam(""String_Node_Str"");
  if (valueParam != null)   checkPortal=valueParam.getValue();
  if (checkPortal == null || checkPortal.trim().length() == 0)   checkPortal=""String_Node_Str"";
  if (isInitedDB(checkPortal))   return;
  configs=params.getObjectParamValues(NewPortalConfig.class);
  for (  Object ele : configs) {
    NewPortalConfig portalConfig=(NewPortalConfig)ele;
    if (portalConfig.getOwnerType().equals(""String_Node_Str"")) {
      initUserTypeDB(portalConfig);
    }
 else     if (portalConfig.getOwnerType().equals(PortalConfig.GROUP_TYPE)) {
      initGroupTypeDB(portalConfig);
    }
 else {
      initPortalTypeDB(portalConfig);
    }
    portalConfig.getPredefinedOwner().clear();
  }
}","public NewPortalConfigListener(DataStorage pdcService,ConfigurationManager cmanager,InitParams params) throws Exception {
  cmanager_=cmanager;
  pdcService_=pdcService;
  ObjectParameter objectParam=params.getObjectParam(""String_Node_Str"");
  if (objectParam != null)   pageTemplateConfig_=(PageTemplateConfig)objectParam.getObject();
  String checkPortal=""String_Node_Str"";
  ValueParam valueParam=params.getValueParam(""String_Node_Str"");
  if (valueParam != null)   checkPortal=valueParam.getValue();
  if (checkPortal == null || checkPortal.trim().length() == 0)   checkPortal=""String_Node_Str"";
  configs=params.getObjectParamValues(NewPortalConfig.class);
  if (isInitedDB(checkPortal))   return;
  for (  Object ele : configs) {
    NewPortalConfig portalConfig=(NewPortalConfig)ele;
    if (portalConfig.getOwnerType().equals(""String_Node_Str"")) {
      initUserTypeDB(portalConfig);
    }
 else     if (portalConfig.getOwnerType().equals(PortalConfig.GROUP_TYPE)) {
      initGroupTypeDB(portalConfig);
    }
 else {
      initPortalTypeDB(portalConfig);
    }
    portalConfig.getPredefinedOwner().clear();
  }
}",0.9447415329768272
101155,"public PortalRequestContext(WebuiApplication app,HttpServletRequest req,HttpServletResponse res) throws Exception {
  super(app);
  request_=req;
  response_=res;
  setSessionId(req.getSession().getId());
  ajaxRequest_=""String_Node_Str"".equals(req.getParameter(""String_Node_Str""));
  String cache=req.getParameter(CACHE_LEVEL);
  if (cache != null)   cacheLevel_=cache;
  nodeURI_=req.getRequestURI();
  String pathInfo=req.getPathInfo();
  if (pathInfo == null)   pathInfo=""String_Node_Str"";
  int colonIndex=pathInfo.indexOf(""String_Node_Str"",1);
  if (colonIndex < 0)   colonIndex=pathInfo.length();
  portalOwner_=pathInfo.substring(1,colonIndex);
  nodePath_=pathInfo.substring(colonIndex,pathInfo.length());
  portalURI=nodeURI_.substring(0,nodeURI_.lastIndexOf(nodePath_)) + ""String_Node_Str"";
  if (nodeURI_.indexOf(""String_Node_Str"") >= 0)   accessPath=PUBLIC_ACCESS;
 else   if (nodeURI_.indexOf(""String_Node_Str"") >= 0)   accessPath=PRIVATE_ACCESS;
  response_.setContentType(""String_Node_Str"");
  try {
    request_.setCharacterEncoding(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"",e);
  }
  urlBuilder=new PortalURLBuilder(nodeURI_);
}","public PortalRequestContext(WebuiApplication app,HttpServletRequest req,HttpServletResponse res) throws Exception {
  super(app);
  request_=req;
  response_=res;
  setSessionId(req.getSession().getId());
  ajaxRequest_=""String_Node_Str"".equals(req.getParameter(""String_Node_Str""));
  String cache=req.getParameter(CACHE_LEVEL);
  if (cache != null)   cacheLevel_=cache;
  requestURI_=URLDecoder.decode(req.getRequestURI(),""String_Node_Str"");
  String pathInfo=req.getPathInfo();
  if (pathInfo == null)   pathInfo=""String_Node_Str"";
  int colonIndex=pathInfo.indexOf(""String_Node_Str"",1);
  if (colonIndex < 0)   colonIndex=pathInfo.length();
  portalOwner_=pathInfo.substring(1,colonIndex);
  nodePath_=pathInfo.substring(colonIndex,pathInfo.length());
  portalURI=requestURI_.substring(0,requestURI_.lastIndexOf(nodePath_)) + ""String_Node_Str"";
  if (requestURI_.indexOf(""String_Node_Str"") >= 0)   accessPath=PUBLIC_ACCESS;
 else   if (requestURI_.indexOf(""String_Node_Str"") >= 0)   accessPath=PRIVATE_ACCESS;
  response_.setContentType(""String_Node_Str"");
  try {
    request_.setCharacterEncoding(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"",e);
  }
  urlBuilder=new PortalURLBuilder(requestURI_);
}",0.9451887941534712
101156,"/** 
 * This method is called when the javax.portlet.Event is supported by the current portlet stored in the Portlet Caontainer The processEvent() method can also generates IPC events and hence the portal itself will call the ProcessEventsActionListener once again
 */
public static List<javax.portlet.Event> processEvent(UIPortlet uiPortlet,javax.portlet.Event event){
  log.info(""String_Node_Str"" + event.getName() + ""String_Node_Str""+ uiPortlet.getWindowId());
  try {
    PortletContainerService service=uiPortlet.getApplicationComponent(PortletContainerService.class);
    PortalRequestContext context=(PortalRequestContext)WebuiRequestContext.getCurrentInstance();
    EventInput input=new EventInput();
    String baseUrl=new StringBuilder(context.getNodeURI()).append(""String_Node_Str"" + PortalRequestContext.UI_COMPONENT_ID).append(""String_Node_Str"").append(uiPortlet.getId()).toString();
    input.setBaseURL(baseUrl);
    UIPortal uiPortal=Util.getUIPortal();
    OrganizationService organizationService=uiPortlet.getApplicationComponent(OrganizationService.class);
    UserProfile userProfile=organizationService.getUserProfileHandler().findUserProfileByName(uiPortal.getOwner());
    if (userProfile != null)     input.setUserAttributes(userProfile.getUserInfoMap());
 else     input.setUserAttributes(new HashMap());
    input.setPortletMode(uiPortlet.getCurrentPortletMode());
    input.setWindowState(uiPortlet.getCurrentWindowState());
    input.setInternalWindowID(uiPortlet.getExoWindowID());
    input.setMarkup(""String_Node_Str"");
    input.setEvent(event);
    EventOutput output=service.processEvent((HttpServletRequest)context.getRequest(),(HttpServletResponse)context.getResponse(),input);
    setNextState(uiPortlet,output.getNextState());
    setNextMode(uiPortlet,output.getNextMode());
    return output.getEvents();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + uiPortlet.getWindowId(),e);
  }
  return null;
}","/** 
 * This method is called when the javax.portlet.Event is supported by the current portlet stored in the Portlet Caontainer The processEvent() method can also generates IPC events and hence the portal itself will call the ProcessEventsActionListener once again
 */
public static List<javax.portlet.Event> processEvent(UIPortlet uiPortlet,javax.portlet.Event event){
  log.info(""String_Node_Str"" + event.getName() + ""String_Node_Str""+ uiPortlet.getWindowId());
  try {
    PortletContainerService service=uiPortlet.getApplicationComponent(PortletContainerService.class);
    PortalRequestContext context=(PortalRequestContext)WebuiRequestContext.getCurrentInstance();
    EventInput input=new EventInput();
    String baseUrl=new StringBuilder(context.getRequestURI()).append(""String_Node_Str"" + PortalRequestContext.UI_COMPONENT_ID).append(""String_Node_Str"").append(uiPortlet.getId()).toString();
    input.setBaseURL(baseUrl);
    UIPortal uiPortal=Util.getUIPortal();
    OrganizationService organizationService=uiPortlet.getApplicationComponent(OrganizationService.class);
    UserProfile userProfile=organizationService.getUserProfileHandler().findUserProfileByName(uiPortal.getOwner());
    if (userProfile != null)     input.setUserAttributes(userProfile.getUserInfoMap());
 else     input.setUserAttributes(new HashMap());
    input.setPortletMode(uiPortlet.getCurrentPortletMode());
    input.setWindowState(uiPortlet.getCurrentWindowState());
    input.setInternalWindowID(uiPortlet.getExoWindowID());
    input.setMarkup(""String_Node_Str"");
    input.setEvent(event);
    EventOutput output=service.processEvent((HttpServletRequest)context.getRequest(),(HttpServletResponse)context.getResponse(),input);
    setNextState(uiPortlet,output.getNextState());
    setNextMode(uiPortlet,output.getNextMode());
    return output.getEvents();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + uiPortlet.getWindowId(),e);
  }
  return null;
}",0.9971917283635436
101157,"public String getEditModeContent(){
  StringBuilder portletContent=new StringBuilder();
  try {
    PortalRequestContext prcontext=(PortalRequestContext)WebuiRequestContext.getCurrentInstance();
    prcontext.setFullRender(true);
    ExoContainer container=prcontext.getApplication().getApplicationServiceContainer();
    PortletContainerService portletContainer=(PortletContainerService)container.getComponentInstanceOfType(PortletContainerService.class);
    RenderInput input=new RenderInput();
    String baseUrl=new StringBuilder(prcontext.getNodeURI()).append(""String_Node_Str"" + PortalRequestContext.UI_COMPONENT_ID).append(""String_Node_Str"").append(uiPortlet_.getId()).toString();
    input.setBaseURL(baseUrl);
    input.setUserAttributes(new HashMap<String,String>());
    input.setPortletMode(PortletMode.EDIT);
    input.setWindowState(uiPortlet_.getCurrentWindowState());
    input.setMarkup(""String_Node_Str"");
    input.setTitle(uiPortlet_.getTitle());
    input.setInternalWindowID(uiPortlet_.getExoWindowID());
    input.setRenderParameters(getRenderParameterMap(uiPortlet_));
    input.setPublicParamNames(uiPortlet_.getPublicRenderParamNames());
    RenderOutput output=portletContainer.render(prcontext.getRequest(),prcontext.getResponse(),input);
    if (output.getContent() == null) {
      portletContent.append(""String_Node_Str"").append(uiPortlet_.getId()).append(""String_Node_Str"");
    }
 else {
      portletContent.setLength(0);
      portletContent.append(output.getContent());
    }
  }
 catch (  Throwable ex) {
    ex=ExceptionUtil.getRootCause(ex);
    portletContent.append(ExceptionUtil.getStackTrace(ex,100));
    System.err.println(""String_Node_Str"" + portletContent);
  }
  return portletContent.toString();
}","public String getEditModeContent(){
  StringBuilder portletContent=new StringBuilder();
  try {
    PortalRequestContext prcontext=(PortalRequestContext)WebuiRequestContext.getCurrentInstance();
    prcontext.setFullRender(true);
    ExoContainer container=prcontext.getApplication().getApplicationServiceContainer();
    PortletContainerService portletContainer=(PortletContainerService)container.getComponentInstanceOfType(PortletContainerService.class);
    RenderInput input=new RenderInput();
    String baseUrl=new StringBuilder(prcontext.getRequestURI()).append(""String_Node_Str"" + PortalRequestContext.UI_COMPONENT_ID).append(""String_Node_Str"").append(uiPortlet_.getId()).toString();
    input.setBaseURL(baseUrl);
    input.setUserAttributes(new HashMap<String,String>());
    input.setPortletMode(PortletMode.EDIT);
    input.setWindowState(uiPortlet_.getCurrentWindowState());
    input.setMarkup(""String_Node_Str"");
    input.setTitle(uiPortlet_.getTitle());
    input.setInternalWindowID(uiPortlet_.getExoWindowID());
    input.setRenderParameters(getRenderParameterMap(uiPortlet_));
    input.setPublicParamNames(uiPortlet_.getPublicRenderParamNames());
    RenderOutput output=portletContainer.render(prcontext.getRequest(),prcontext.getResponse(),input);
    if (output.getContent() == null) {
      portletContent.append(""String_Node_Str"").append(uiPortlet_.getId()).append(""String_Node_Str"");
    }
 else {
      portletContent.setLength(0);
      portletContent.append(output.getContent());
    }
  }
 catch (  Throwable ex) {
    ex=ExceptionUtil.getRootCause(ex);
    portletContent.append(ExceptionUtil.getStackTrace(ex,100));
    System.err.println(""String_Node_Str"" + portletContent);
  }
  return portletContent.toString();
}",0.996854446668573
101158,"/** 
 * This methods of the Lifecycle writes into the output writer the content of the portlet 1) Create a RenderInput object and fill it with all the Request information 2) Call the portletContainer.render() method of the Portlet Container to get the HTML generated fragment 3) Then if the current request is an AJAX one, just write in the buffer the content returned by the portlet container 4) If not AJAX, then merge the content with the UIPortlet.gtmpl
 */
public void processRender(UIComponent uicomponent,WebuiRequestContext context) throws Exception {
  UIPortlet uiPortlet=(UIPortlet)uicomponent;
  PortalRequestContext prcontext=(PortalRequestContext)context;
  ExoContainer container=context.getApplication().getApplicationServiceContainer();
  UIPortal uiPortal=Util.getUIPortal();
  PortletContainerService portletContainer=(PortletContainerService)container.getComponentInstanceOfType(PortletContainerService.class);
  OrganizationService service=uicomponent.getApplicationComponent(OrganizationService.class);
  UserProfile userProfile=service.getUserProfileHandler().findUserProfileByName(uiPortal.getOwner());
  RenderInput input=new RenderInput();
  String baseUrl=new StringBuilder(prcontext.getNodeURI()).append(""String_Node_Str"" + PortalRequestContext.UI_COMPONENT_ID).append(""String_Node_Str"").append(uiPortlet.getId()).toString();
  input.setBaseURL(baseUrl);
  if (userProfile != null)   input.setUserAttributes(userProfile.getUserInfoMap());
 else   input.setUserAttributes(new HashMap());
  input.setPortletMode(uiPortlet.getCurrentPortletMode());
  input.setWindowState(uiPortlet.getCurrentWindowState());
  input.setMarkup(""String_Node_Str"");
  input.setTitle(uiPortlet.getTitle());
  input.setInternalWindowID(uiPortlet.getExoWindowID());
  input.setRenderParameters(getRenderParameterMap(uiPortlet));
  input.setPublicParamNames(uiPortlet.getPublicRenderParamNames());
  RenderOutput output=null;
  StringBuilder portletContent=new StringBuilder();
  String portletTitle=null;
  try {
    if (uiPortlet.getCurrentWindowState() != WindowState.MINIMIZED) {
      output=portletContainer.render(prcontext.getRequest(),prcontext.getResponse(),input);
      if (output.getContent() == null) {
        portletContent.append(""String_Node_Str"").append(uiPortlet.getId()).append(""String_Node_Str"");
      }
 else {
        portletContent.setLength(0);
        portletContent.append(output.getContent());
      }
    }
  }
 catch (  Throwable ex) {
    ex=ExceptionUtil.getRootCause(ex);
    portletContent.append(ExceptionUtil.getStackTrace(ex,100));
    log.error(""String_Node_Str"",ex);
  }
  if (output != null) {
    portletTitle=output.getTitle();
    prcontext.setHeaders(output.getHeaderProperties());
  }
  if (portletTitle == null)   portletTitle=""String_Node_Str"";
  if (context.useAjax() && !prcontext.getFullRender()) {
    context.getWriter().write(portletContent.toString());
  }
 else {
    WebuiApplication app=(WebuiApplication)context.getApplication();
    ApplicationResourceResolver resolver=app.getResourceResolver();
    WebuiBindingContext bcontext=new WebuiBindingContext(resolver,context.getWriter(),uicomponent,context);
    bcontext.put(""String_Node_Str"",uicomponent);
    bcontext.put(""String_Node_Str"",portletContent);
    bcontext.put(""String_Node_Str"",portletTitle);
    try {
      renderTemplate(uicomponent.getTemplate(),bcontext);
    }
 catch (    Throwable ex) {
    }
  }
  try {
    prcontext.getResponse().flushBuffer();
  }
 catch (  Throwable ex) {
  }
}","/** 
 * This methods of the Lifecycle writes into the output writer the content of the portlet 1) Create a RenderInput object and fill it with all the Request information 2) Call the portletContainer.render() method of the Portlet Container to get the HTML generated fragment 3) Then if the current request is an AJAX one, just write in the buffer the content returned by the portlet container 4) If not AJAX, then merge the content with the UIPortlet.gtmpl
 */
public void processRender(UIComponent uicomponent,WebuiRequestContext context) throws Exception {
  UIPortlet uiPortlet=(UIPortlet)uicomponent;
  PortalRequestContext prcontext=(PortalRequestContext)context;
  ExoContainer container=context.getApplication().getApplicationServiceContainer();
  UIPortal uiPortal=Util.getUIPortal();
  PortletContainerService portletContainer=(PortletContainerService)container.getComponentInstanceOfType(PortletContainerService.class);
  OrganizationService service=uicomponent.getApplicationComponent(OrganizationService.class);
  UserProfile userProfile=service.getUserProfileHandler().findUserProfileByName(uiPortal.getOwner());
  RenderInput input=new RenderInput();
  String baseUrl=new StringBuilder(prcontext.getRequestURI()).append(""String_Node_Str"" + PortalRequestContext.UI_COMPONENT_ID).append(""String_Node_Str"").append(uiPortlet.getId()).toString();
  input.setBaseURL(baseUrl);
  if (userProfile != null)   input.setUserAttributes(userProfile.getUserInfoMap());
 else   input.setUserAttributes(new HashMap());
  input.setPortletMode(uiPortlet.getCurrentPortletMode());
  input.setWindowState(uiPortlet.getCurrentWindowState());
  input.setMarkup(""String_Node_Str"");
  input.setTitle(uiPortlet.getTitle());
  input.setInternalWindowID(uiPortlet.getExoWindowID());
  input.setRenderParameters(getRenderParameterMap(uiPortlet));
  input.setPublicParamNames(uiPortlet.getPublicRenderParamNames());
  RenderOutput output=null;
  StringBuilder portletContent=new StringBuilder();
  String portletTitle=null;
  try {
    if (uiPortlet.getCurrentWindowState() != WindowState.MINIMIZED) {
      output=portletContainer.render(prcontext.getRequest(),prcontext.getResponse(),input);
      if (output.getContent() == null) {
        portletContent.append(""String_Node_Str"").append(uiPortlet.getId()).append(""String_Node_Str"");
      }
 else {
        portletContent.setLength(0);
        portletContent.append(output.getContent());
      }
    }
  }
 catch (  Throwable ex) {
    ex=ExceptionUtil.getRootCause(ex);
    portletContent.append(ExceptionUtil.getStackTrace(ex,100));
    log.error(""String_Node_Str"",ex);
  }
  if (output != null) {
    portletTitle=output.getTitle();
    prcontext.setHeaders(output.getHeaderProperties());
  }
  if (portletTitle == null)   portletTitle=""String_Node_Str"";
  if (context.useAjax() && !prcontext.getFullRender()) {
    context.getWriter().write(portletContent.toString());
  }
 else {
    WebuiApplication app=(WebuiApplication)context.getApplication();
    ApplicationResourceResolver resolver=app.getResourceResolver();
    WebuiBindingContext bcontext=new WebuiBindingContext(resolver,context.getWriter(),uicomponent,context);
    bcontext.put(""String_Node_Str"",uicomponent);
    bcontext.put(""String_Node_Str"",portletContent);
    bcontext.put(""String_Node_Str"",portletTitle);
    try {
      renderTemplate(uicomponent.getTemplate(),bcontext);
    }
 catch (    Throwable ex) {
    }
  }
  try {
    prcontext.getResponse().flushBuffer();
  }
 catch (  Throwable ex) {
  }
}",0.9984363894811656
101159,"public void setMode(ManagementMode mode,Event<? extends UIComponent> event) throws Exception {
  mode_=mode;
  if (mode == ManagementMode.EDIT) {
    UIPageNodeSelector uiNodeSelector=getChild(UIPageNodeSelector.class);
    UITree uiTree=uiNodeSelector.getChild(UITree.class);
    getChild(UIDescription.class).setRendered(false);
    uiTree.createEvent(""String_Node_Str"",event.getExecutionPhase(),event.getRequestContext()).broadcast();
    return;
  }
  UIWorkingWorkspace uiWorkingWS=Util.updateUIApplication(event);
  getChild(UIPageNodeSelector.class).setRendered(false);
  getChild(UIPageNavigationControlBar.class).setRendered(false);
  getChild(UIDescription.class).setRendered(true);
  UIPortalToolPanel uiToolPanel=uiWorkingWS.findFirstComponentOfType(UIPortalToolPanel.class);
  uiToolPanel.setShowMaskLayer(false);
  UIPageBrowser uiPageBrowser=uiToolPanel.createUIComponent(UIPageBrowser.class,null,null);
  uiToolPanel.setUIComponent(uiPageBrowser);
  uiPageBrowser.setShowAddNewPage(true);
  uiWorkingWS.setRenderedChild(UIPortalToolPanel.class);
}","public void setMode(ManagementMode mode,Event<? extends UIComponent> event) throws Exception {
  mode_=mode;
  if (mode == ManagementMode.EDIT) {
    UIPageNodeSelector uiNodeSelector=getChild(UIPageNodeSelector.class);
    UITree uiTree=uiNodeSelector.getChild(UITree.class);
    getChild(UIDescription.class).setRendered(false);
    uiTree.createEvent(""String_Node_Str"",event.getExecutionPhase(),event.getRequestContext()).broadcast();
    return;
  }
  UIWorkingWorkspace uiWorkingWS=Util.updateUIApplication(event);
  getChild(UIPageNodeSelector.class).setRendered(false);
  getChild(UIPageNavigationControlBar.class).setRendered(false);
  getChild(UIDescription.class).setRendered(true);
  UIPortalToolPanel uiToolPanel=uiWorkingWS.findFirstComponentOfType(UIPortalToolPanel.class);
  uiToolPanel.setShowMaskLayer(false);
  UIPageBrowser uiPageBrowser=uiToolPanel.findFirstComponentOfType(UIPageBrowser.class);
  if (uiPageBrowser == null)   uiPageBrowser=uiToolPanel.createUIComponent(UIPageBrowser.class,null,null);
  uiToolPanel.setUIComponent(uiPageBrowser);
  uiPageBrowser.setShowAddNewPage(true);
  uiWorkingWS.setRenderedChild(UIPortalToolPanel.class);
}",0.9533632286995516
101160,"public void execute(Event<UIPageBrowseControlBar> event) throws Exception {
  UIPageBrowseControlBar uiBrowseControlBar=event.getSource();
  UIPageManagement pageManagement=uiBrowseControlBar.getParent();
  UIPageEditBar uiEditBar=pageManagement.getChild(UIPageEditBar.class);
  uiEditBar.savePage();
  UIPortalToolPanel uiToolPanel=Util.getUIPortalToolPanel();
  uiToolPanel.setShowMaskLayer(false);
  UIPageBrowser uiPageBrowser=(UIPageBrowser)uiBrowseControlBar.getBackComponent();
  uiPageBrowser.reset();
  uiToolPanel.setUIComponent(uiPageBrowser);
  UIPortalApplication uiPortalApp=event.getSource().getAncestorOfType(UIPortalApplication.class);
  UIWorkingWorkspace uiWorkingWS=uiPortalApp.getChildById(UIPortalApplication.UI_WORKING_WS_ID);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiWorkingWS);
  UIPageManagement uiManagement=uiBrowseControlBar.getParent();
  uiManagement.setRenderedChild(UIDescription.class);
  uiManagement.setMode(ManagementMode.BROWSE,event);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiManagement);
}","public void execute(Event<UIPageBrowseControlBar> event) throws Exception {
  UIPageBrowseControlBar uiBrowseControlBar=event.getSource();
  UIPageManagement pageManagement=uiBrowseControlBar.getParent();
  UIPageEditBar uiEditBar=pageManagement.getChild(UIPageEditBar.class);
  uiEditBar.savePage();
  UIPortalToolPanel uiToolPanel=Util.getUIPortalToolPanel();
  uiToolPanel.setShowMaskLayer(false);
  UIPageBrowser uiPageBrowser=(UIPageBrowser)uiBrowseControlBar.getBackComponent();
  uiPageBrowser.defaultValue(uiPageBrowser.getLastQuery());
  uiToolPanel.setUIComponent(uiPageBrowser);
  UIPortalApplication uiPortalApp=event.getSource().getAncestorOfType(UIPortalApplication.class);
  UIWorkingWorkspace uiWorkingWS=uiPortalApp.getChildById(UIPortalApplication.UI_WORKING_WS_ID);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiWorkingWS);
  UIPageManagement uiManagement=uiBrowseControlBar.getParent();
  uiManagement.setRenderedChild(UIDescription.class);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiManagement);
}",0.9526515151515152
101161,"public void setPageBody(PageNode pageNode,UIPortal uiPortal) throws Exception {
  WebuiRequestContext context=Util.getPortalRequestContext();
  ExoContainer appContainer=context.getApplication().getApplicationServiceContainer();
  UserPortalConfigService userPortalConfigService=(UserPortalConfigService)appContainer.getComponentInstanceOfType(UserPortalConfigService.class);
  Page page=null;
  UIPage uiPage=null;
  if (pageNode != null) {
    try {
      page=userPortalConfigService.getPage(pageNode.getPageReference(),context.getRemoteUser());
    }
 catch (    Exception e) {
      UIPortalApplication uiApp=getAncestorOfType(UIPortalApplication.class);
      uiApp.addMessage(new ApplicationMessage(e.getMessage(),new Object[]{}));
    }
  }
  if (page != null) {
    if (Page.DESKTOP_PAGE.equals(page.getFactoryId())) {
      uiPage=createUIComponent(context,UIDesktopPage.class,null,null);
    }
 else {
      uiPage=createUIComponent(context,UIPage.class,null,null);
    }
    PortalDataMapper.toUIPage(uiPage,page);
    if (uiPage.isShowMaxWindow()) {
      uiPortal.setMaximizedUIComponent(uiPage);
    }
 else {
      uiPortal.setMaximizedUIComponent(null);
    }
  }
  setUIComponent(uiPage);
}","public void setPageBody(PageNode pageNode,UIPortal uiPortal) throws Exception {
  WebuiRequestContext context=Util.getPortalRequestContext();
  ExoContainer appContainer=context.getApplication().getApplicationServiceContainer();
  UserPortalConfigService userPortalConfigService=(UserPortalConfigService)appContainer.getComponentInstanceOfType(UserPortalConfigService.class);
  Page page=null;
  UIPage uiPage=null;
  if (pageNode != null) {
    try {
      if (pageNode.getPageReference() != null) {
        page=userPortalConfigService.getPage(pageNode.getPageReference(),context.getRemoteUser());
      }
    }
 catch (    Exception e) {
      UIPortalApplication uiApp=getAncestorOfType(UIPortalApplication.class);
      uiApp.addMessage(new ApplicationMessage(e.getMessage(),new Object[]{}));
    }
  }
  if (page != null) {
    if (Page.DESKTOP_PAGE.equals(page.getFactoryId())) {
      uiPage=createUIComponent(context,UIDesktopPage.class,null,null);
    }
 else {
      uiPage=createUIComponent(context,UIPage.class,null,null);
    }
    PortalDataMapper.toUIPage(uiPage,page);
    if (uiPage.isShowMaxWindow()) {
      uiPortal.setMaximizedUIComponent(uiPage);
    }
 else {
      uiPortal.setMaximizedUIComponent(null);
    }
  }
  setUIComponent(uiPage);
}",0.972929292929293
101162,"public void setVisible(boolean b){
  visible=b;
}","public void setVisible(Boolean b){
  visible=b.booleanValue();
}",0.8495575221238938
101163,"private void updateUI(){
  WebuiRequestContext contextres=WebuiRequestContext.getCurrentInstance();
  ResourceBundle res=contextres.getApplicationResourceBundle();
  String navValueEnd=res.getString(""String_Node_Str"");
  if (navigations == null || navigations.size() < 1) {
    getChild(UIDropDownControl.class).setOptions(null);
    getChild(UITree.class).setSibbling(null);
    return;
  }
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  for (  PageNavigation navigation : navigations) {
    String label=navigation.getOwnerId() + navValueEnd;
    options.add(new SelectItemOption<String>(navigation.getOwnerType() + ""String_Node_Str"" + label,navigation.getId()));
  }
  UIDropDownControl uiNavigationSelector=getChild(UIDropDownControl.class);
  uiNavigationSelector.setOptions(options);
  if (options.size() > 0)   uiNavigationSelector.setValue(0);
}","private void updateUI(){
  WebuiRequestContext contextres=WebuiRequestContext.getCurrentInstance();
  ResourceBundle res=contextres.getApplicationResourceBundle();
  String navValueEnd=res.getString(""String_Node_Str"");
  if (navigations == null || navigations.size() < 1) {
    getChild(UIDropDownControl.class).setOptions(null);
    getChild(UITree.class).setSibbling(null);
    return;
  }
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  for (  PageNavigation navigation : navigations) {
    String label=navValueEnd.replace(""String_Node_Str"",navigation.getOwnerType() + ""String_Node_Str"" + navigation.getOwnerId());
    options.add(new SelectItemOption<String>(label,navigation.getId()));
  }
  UIDropDownControl uiNavigationSelector=getChild(UIDropDownControl.class);
  uiNavigationSelector.setOptions(options);
  if (options.size() > 0)   uiNavigationSelector.setValue(0);
}",0.9187396351575456
101164,"private void processNormalRequest(UIForm uiForm,WebuiRequestContext context) throws Exception {
  List<UIFormInputBase> inputs=new ArrayList<UIFormInputBase>();
  uiForm.findComponentOfType(inputs,UIFormInputBase.class);
  uiForm.setSubmitAction(context.getRequestParameter(UIForm.ACTION));
  for (  UIFormInputBase input : inputs) {
    if (!checkVisible(input))     continue;
    String inputValue=context.getRequestParameter(input.getId());
    if (inputValue == null || inputValue.trim().length() == 0) {
      inputValue=context.getRequestParameter(input.getName());
    }
    input.decode(inputValue,context);
  }
}","private void processNormalRequest(UIForm uiForm,WebuiRequestContext context) throws Exception {
  List<UIFormInputBase> inputs=new ArrayList<UIFormInputBase>();
  uiForm.findComponentOfType(inputs,UIFormInputBase.class);
  uiForm.setSubmitAction(context.getRequestParameter(UIForm.ACTION));
  for (  UIFormInputBase input : inputs) {
    if (input.isValid())     continue;
    String inputValue=context.getRequestParameter(input.getId());
    if (inputValue == null || inputValue.trim().length() == 0) {
      inputValue=context.getRequestParameter(input.getName());
    }
    input.decode(inputValue,context);
  }
}",0.9749393694421988
101165,"public boolean isMandatory(){
  List<Validator> validators=this.getValidators();
  if (validators == null)   return false;
  for (  Validator validator : validators)   if (validator instanceof MandatoryValidator)   return true;
  return false;
}","public boolean isMandatory(){
  if (validators == null)   return false;
  for (  Validator validator : validators) {
    if (validator instanceof MandatoryValidator)     return true;
  }
  return false;
}",0.8641425389755011
101166,"public void processRender(WebuiRequestContext context) throws Exception {
  Writer w=context.getWriter();
  w.write(""String_Node_Str"");
  w.write(getName());
  w.write('\'');
  if (type_ == PASSWORD_TYPE)   w.write(""String_Node_Str"");
 else   w.write(""String_Node_Str"");
  w.write(""String_Node_Str"");
  w.write(getId());
  w.write('\'');
  if (value_ != null && value_.length() > 0) {
    w.write(""String_Node_Str"");
    w.write(encodeValue(value_).toString());
    w.write('\'');
  }
  if (maxLength > 0)   w.write(""String_Node_Str"" + maxLength + ""String_Node_Str"");
  if (readonly_)   w.write(""String_Node_Str"");
  w.write(""String_Node_Str"");
  if (this.isMandatory())   w.write(""String_Node_Str"");
}","public void processRender(WebuiRequestContext context) throws Exception {
  Writer w=context.getWriter();
  w.write(""String_Node_Str"");
  w.write(getName());
  w.write('\'');
  if (type_ == PASSWORD_TYPE)   w.write(""String_Node_Str"");
 else   w.write(""String_Node_Str"");
  w.write(""String_Node_Str"");
  w.write(getId());
  w.write('\'');
  if (value_ != null && value_.length() > 0) {
    w.write(""String_Node_Str"");
    w.write(encodeValue(value_).toString());
    w.write('\'');
  }
  if (maxLength > 0)   w.write(""String_Node_Str"" + maxLength + ""String_Node_Str"");
  if (readonly_)   w.write(""String_Node_Str"");
  if (!enable_)   w.write(""String_Node_Str"");
  w.write(""String_Node_Str"");
  if (this.isMandatory())   w.write(""String_Node_Str"");
}",0.9682758620689657
101167,"@SuppressWarnings(""String_Node_Str"") public void processDecode(WebuiRequestContext context) throws Exception {
  List<UIComponent> children=uiIterator_.getCurrentPageData();
  for (  UIComponent child : children) {
    List<UIFormInputBase> inputs=new ArrayList<UIFormInputBase>();
    child.findComponentOfType(inputs,UIFormInputBase.class);
    for (    UIFormInputBase input : inputs) {
      String inputValue=context.getRequestParameter(input.getId());
      if (inputValue == null || inputValue.trim().length() == 0) {
        inputValue=context.getRequestParameter(input.getName());
      }
      input.decode(inputValue,context);
    }
    child.processDecode(context);
  }
}","@SuppressWarnings(""String_Node_Str"") public void processDecode(WebuiRequestContext context) throws Exception {
  List<UIComponent> children=uiIterator_.getCurrentPageData();
  for (  UIComponent child : children) {
    List<UIFormInputBase> inputs=new ArrayList<UIFormInputBase>();
    child.findComponentOfType(inputs,UIFormInputBase.class);
    for (    UIFormInputBase input : inputs) {
      if (!input.isValid())       continue;
      String inputValue=context.getRequestParameter(input.getId());
      if (inputValue == null || inputValue.trim().length() == 0) {
        inputValue=context.getRequestParameter(input.getName());
      }
      input.decode(inputValue,context);
    }
    child.processDecode(context);
  }
}",0.9687943262411348
101168,"@SuppressWarnings(""String_Node_Str"") private void validateChildren(List<UIComponent> children,UIApplication uiApp,WebuiRequestContext context){
  for (  UIComponent uiChild : children) {
    if (uiChild instanceof UIFormInputBase) {
      UIFormInputBase uiInput=(UIFormInputBase)uiChild;
      if (!checkVisible(uiInput))       continue;
      List<Validator> validators=uiInput.getValidators();
      if (validators == null)       continue;
      try {
        for (        Validator validator : validators)         validator.validate(uiInput);
      }
 catch (      MessageException ex) {
        uiApp.addMessage(ex.getDetailMessage());
        context.setProcessRender(true);
      }
catch (      Exception ex) {
        uiApp.addMessage(new ApplicationMessage(ex.getMessage(),null));
        context.setProcessRender(true);
      }
    }
 else     if (uiChild instanceof UIFormInputSet) {
      UIFormInputSet uiInputSet=(UIFormInputSet)uiChild;
      validateChildren(uiInputSet.getChildren(),uiApp,context);
    }
 else     if (uiChild instanceof UIFormInputContainer) {
      UIFormInputContainer uiInput=(UIFormInputContainer)uiChild;
      List<Validator> validators=uiInput.getValidators();
      if (validators == null)       continue;
      try {
        for (        Validator validator : validators)         validator.validate(uiInput);
      }
 catch (      MessageException ex) {
        uiApp.addMessage(ex.getDetailMessage());
        context.setProcessRender(true);
      }
catch (      Exception ex) {
        uiApp.addMessage(new ApplicationMessage(ex.getMessage(),null));
        context.setProcessRender(true);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void validateChildren(List<UIComponent> children,UIApplication uiApp,WebuiRequestContext context){
  for (  UIComponent uiChild : children) {
    if (uiChild instanceof UIFormInputBase) {
      UIFormInputBase uiInput=(UIFormInputBase)uiChild;
      if (!uiInput.isValid())       continue;
      List<Validator> validators=uiInput.getValidators();
      if (validators == null)       continue;
      try {
        for (        Validator validator : validators)         validator.validate(uiInput);
      }
 catch (      MessageException ex) {
        uiApp.addMessage(ex.getDetailMessage());
        context.setProcessRender(true);
      }
catch (      Exception ex) {
        uiApp.addMessage(new ApplicationMessage(ex.getMessage(),null));
        context.setProcessRender(true);
      }
    }
 else     if (uiChild instanceof UIFormInputSet) {
      UIFormInputSet uiInputSet=(UIFormInputSet)uiChild;
      validateChildren(uiInputSet.getChildren(),uiApp,context);
    }
 else     if (uiChild instanceof UIFormInputContainer) {
      UIFormInputContainer uiInput=(UIFormInputContainer)uiChild;
      List<Validator> validators=uiInput.getValidators();
      if (validators == null)       continue;
      try {
        for (        Validator validator : validators)         validator.validate(uiInput);
      }
 catch (      MessageException ex) {
        uiApp.addMessage(ex.getDetailMessage());
        context.setProcessRender(true);
      }
catch (      Exception ex) {
        uiApp.addMessage(new ApplicationMessage(ex.getMessage(),null));
        context.setProcessRender(true);
      }
    }
  }
}",0.9897156684815488
101169,"private void processNormalRequest(UIForm uiForm,WebuiRequestContext context) throws Exception {
  List<UIFormInputBase> inputs=new ArrayList<UIFormInputBase>();
  uiForm.findComponentOfType(inputs,UIFormInputBase.class);
  uiForm.setSubmitAction(context.getRequestParameter(UIForm.ACTION));
  for (  UIFormInputBase input : inputs) {
    if (input.isValid())     continue;
    String inputValue=context.getRequestParameter(input.getId());
    if (inputValue == null || inputValue.trim().length() == 0) {
      inputValue=context.getRequestParameter(input.getName());
    }
    input.decode(inputValue,context);
  }
}","private void processNormalRequest(UIForm uiForm,WebuiRequestContext context) throws Exception {
  List<UIFormInputBase> inputs=new ArrayList<UIFormInputBase>();
  uiForm.findComponentOfType(inputs,UIFormInputBase.class);
  uiForm.setSubmitAction(context.getRequestParameter(UIForm.ACTION));
  for (  UIFormInputBase input : inputs) {
    if (!input.isValid())     continue;
    String inputValue=context.getRequestParameter(input.getId());
    if (inputValue == null || inputValue.trim().length() == 0) {
      inputValue=context.getRequestParameter(input.getName());
    }
    input.decode(inputValue,context);
  }
}",0.9991889699918896
101170,"/** 
 * The processrender() method handles the creation of the returned HTML either for a full page render or in the case of an AJAX call The first request, Ajax is not enabled (means no ajaxRequest parameter in the request) and  hence the super.processRender() method is called. This will hence call the processrender() of  the Lifecycle object as this method is not overidden in UIPortalApplicationLifecycle. There we  simply render the bounded template (groovy usually). Note that bounded template are also defined in component annotations, so for the current class it is UIPortalApplication.gtmpl On second calls, request have the ""ajaxRequest"" parameter set to true in the URL. In that case  the algorithm is a bit more complex: a) The list of components that should be updated is extracted using the  context.getUIComponentToUpdateByAjax() method. That list was setup during the process action phase b) Portlets and other UI components to update are split in 2 different lists c) Portlets full content are returned and set with the tag <div class=""PortalResponse""> d) Block to updates (which are UI components) are set within  the <div class=""PortalResponseData""> tag e) Then the scripts and the skins to reload are set in the <div class=""PortalResponseScript"">
 */
public void processRender(WebuiRequestContext context) throws Exception {
  Writer w=context.getWriter();
  if (!context.useAjax()) {
    super.processRender(context);
  }
 else {
    PortalRequestContext pcontext=(PortalRequestContext)context;
    UIMaskWorkspace uiMaskWS=getChildById(UIPortalApplication.UI_MASK_WS_ID);
    if (uiMaskWS.isUpdated())     pcontext.addUIComponentToUpdateByAjax(uiMaskWS);
    List<UIComponent> list=context.getUIComponentToUpdateByAjax();
    List<UIPortlet> uiPortlets=new ArrayList<UIPortlet>(3);
    List<UIComponent> uiDataComponents=new ArrayList<UIComponent>(5);
    if (list != null) {
      for (      UIComponent uicomponent : list) {
        if (uicomponent instanceof UIPortlet)         uiPortlets.add((UIPortlet)uicomponent);
 else         uiDataComponents.add(uicomponent);
      }
    }
    w.write(""String_Node_Str"");
    if (!context.getFullRender()) {
      for (      UIPortlet uiPortlet : uiPortlets) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + uiPortlet.getWindowId());
        w.write(""String_Node_Str"");
        w.append(""String_Node_Str"" + uiPortlet.getExoWindowID().getUniqueID() + ""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        uiPortlet.processRender(context);
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.write(""String_Node_Str"");
      }
    }
    w.write(""String_Node_Str"");
    for (    UIComponent uicomponent : uiDataComponents) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + uicomponent.getName());
      renderBlockToUpdate(uicomponent,context,w);
    }
    w.write(""String_Node_Str"");
    w.write(""String_Node_Str"");
    w.write(pcontext.getJavascriptManager().getJavascript());
    w.write(""String_Node_Str"");
    w.write(pcontext.getJavascriptManager().getCustomizedOnLoadScript());
    String skin=getAddSkinScript(list);
    if (skin != null) {
      w.write(skin);
    }
    w.write(""String_Node_Str"");
    w.write(""String_Node_Str"");
  }
}","/** 
 * The processrender() method handles the creation of the returned HTML either for a full page render or in the case of an AJAX call The first request, Ajax is not enabled (means no ajaxRequest parameter in the request) and  hence the super.processRender() method is called. This will hence call the processrender() of  the Lifecycle object as this method is not overidden in UIPortalApplicationLifecycle. There we  simply render the bounded template (groovy usually). Note that bounded template are also defined in component annotations, so for the current class it is UIPortalApplication.gtmpl On second calls, request have the ""ajaxRequest"" parameter set to true in the URL. In that case  the algorithm is a bit more complex: a) The list of components that should be updated is extracted using the  context.getUIComponentToUpdateByAjax() method. That list was setup during the process action phase b) Portlets and other UI components to update are split in 2 different lists c) Portlets full content are returned and set with the tag <div class=""PortalResponse""> d) Block to updates (which are UI components) are set within  the <div class=""PortalResponseData""> tag e) Then the scripts and the skins to reload are set in the <div class=""PortalResponseScript"">
 */
public void processRender(WebuiRequestContext context) throws Exception {
  Writer w=context.getWriter();
  if (!context.useAjax()) {
    super.processRender(context);
  }
 else {
    PortalRequestContext pcontext=(PortalRequestContext)context;
    UIMaskWorkspace uiMaskWS=getChildById(UIPortalApplication.UI_MASK_WS_ID);
    if (uiMaskWS.isUpdated())     pcontext.addUIComponentToUpdateByAjax(uiMaskWS);
    List<UIComponent> list=context.getUIComponentToUpdateByAjax();
    List<UIPortlet> uiPortlets=new ArrayList<UIPortlet>(3);
    List<UIComponent> uiDataComponents=new ArrayList<UIComponent>(5);
    if (list != null) {
      for (      UIComponent uicomponent : list) {
        if (uicomponent instanceof UIPortlet)         uiPortlets.add((UIPortlet)uicomponent);
 else         uiDataComponents.add(uicomponent);
      }
    }
    w.write(""String_Node_Str"");
    w.write(""String_Node_Str"");
    for (    UIComponent uicomponent : uiDataComponents) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + uicomponent.getName());
      renderBlockToUpdate(uicomponent,context,w);
    }
    w.write(""String_Node_Str"");
    if (!context.getFullRender()) {
      for (      UIPortlet uiPortlet : uiPortlets) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + uiPortlet.getWindowId());
        w.write(""String_Node_Str"");
        w.append(""String_Node_Str"" + uiPortlet.getExoWindowID().getUniqueID() + ""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        uiPortlet.processRender(context);
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.write(""String_Node_Str"");
      }
    }
    w.write(""String_Node_Str"");
    w.write(pcontext.getJavascriptManager().getJavascript());
    w.write(""String_Node_Str"");
    w.write(pcontext.getJavascriptManager().getCustomizedOnLoadScript());
    String skin=getAddSkinScript(list);
    if (skin != null) {
      w.write(skin);
    }
    w.write(""String_Node_Str"");
    w.write(""String_Node_Str"");
  }
}",0.920457880833578
101171,"public boolean isEnable(){
  if (showPublicationDate) {
    if (endPublicationDate == null)     enable=true;
 else     if (endPublicationDate.compareTo(Calendar.getInstance().getTime()) < 0)     enable=false;
 else     enable=true;
  }
  return enable;
}","public boolean isEnable(){
  if (enable && showPublicationDate) {
    if (endPublicationDate == null)     return true;
 else     if (endPublicationDate.compareTo(Calendar.getInstance().getTime()) < 0)     return false;
  }
  return enable;
}",0.8080808080808081
101172,"public UIWelcomeComponent() throws Exception {
  WebuiRequestContext rcontext=Util.getPortalRequestContext();
  UIPortalApplication uiPortalApplication=(UIPortalApplication)rcontext.getUIApplication();
  UserPortalConfig userPortalConfig=uiPortalApplication.getUserPortalConfig();
  if (userPortalConfig == null)   return;
  Gadgets gadgets=userPortalConfig.getGadgets();
  if (gadgets == null) {
    gadgets=new Gadgets();
    gadgets.setOwnerType(PortalConfig.USER_TYPE);
    gadgets.setOwnerId(rcontext.getRemoteUser());
    gadgets.setChildren(new ArrayList<Container>());
    UserPortalConfigService configService=getApplicationComponent(UserPortalConfigService.class);
    configService.create(gadgets);
  }
  UIGadgets uiGadgets=addChild(UIGadgets.class,null,null);
  PortalDataMapper.toUIGadgets(uiGadgets,gadgets);
}","public UIWelcomeComponent() throws Exception {
  WebuiRequestContext rcontext=Util.getPortalRequestContext();
  UIPortalApplication uiPortalApplication=(UIPortalApplication)rcontext.getUIApplication();
  UserPortalConfig userPortalConfig=uiPortalApplication.getUserPortalConfig();
  if (userPortalConfig == null)   return;
  Gadgets gadgets=userPortalConfig.getGadgets();
  if (gadgets == null) {
    gadgets=new Gadgets();
    gadgets.setOwnerType(PortalConfig.USER_TYPE);
    gadgets.setOwnerId(rcontext.getRemoteUser());
    gadgets.setChildren(new ArrayList<Container>());
    UserPortalConfigService configService=getApplicationComponent(UserPortalConfigService.class);
    configService.create(gadgets);
    userPortalConfig.setGadgets(gadgets);
  }
  UIGadgets uiGadgets=addChild(UIGadgets.class,null,null);
  PortalDataMapper.toUIGadgets(uiGadgets,gadgets);
}",0.975177304964539
101173,"private String renderOption(SelectOption option,String label){
  StringBuffer buf=new StringBuffer();
  buf.append(""String_Node_Str"");
  buf.append(option.getValue());
  if (option.isSelected())   buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(label);
  buf.append(""String_Node_Str"");
  return buf.toString();
}","private String renderOption(SelectOption option,String label){
  StringBuffer buf=new StringBuffer();
  buf.append(""String_Node_Str"");
  buf.append(option.getValue());
  buf.append(""String_Node_Str"");
  if (option.isSelected())   buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(label);
  buf.append(""String_Node_Str"");
  return buf.toString();
}",0.953846153846154
101174,"@SuppressWarnings(""String_Node_Str"") public void decode(Object input,WebuiRequestContext context) throws Exception {
  String[] values=context.getRequestParameterValues(getId());
  if (values == null) {
    value_=null;
    for (    SelectItem option : options_) {
      if (option instanceof SelectOption)       ((SelectOption)option).setSelected(false);
 else       if (option instanceof SelectOptionGroup) {
        for (        SelectOption opt : ((SelectOptionGroup)option).getOptions()) {
          opt.setSelected(false);
        }
      }
    }
    return;
  }
  int i=0;
  value_=values[0];
  for (  SelectItem item : options_) {
    if (item instanceof SelectOption) {
      if (i > -1 && ((SelectOption)item).getValue().equals(values[i])) {
        ((SelectOption)item).setSelected(true);
        if (values.length == ++i)         i=-1;
      }
 else       ((SelectOption)item).setSelected(false);
    }
 else     if (item instanceof SelectOptionGroup) {
      for (      SelectOption opt : ((SelectOptionGroup)item).getOptions()) {
        if (i > -1 && ((SelectOption)opt).getValue().equals(values[i])) {
          ((SelectOption)opt).setSelected(true);
        }
        if (values.length == ++i)         i=-1;
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void decode(Object input,WebuiRequestContext context) throws Exception {
  String[] values=context.getRequestParameterValues(getId());
  if (values == null) {
    value_=null;
    for (    SelectItem option : options_) {
      if (option instanceof SelectOption)       ((SelectOption)option).setSelected(false);
 else       if (option instanceof SelectOptionGroup) {
        for (        SelectOption opt : ((SelectOptionGroup)option).getOptions()) {
          opt.setSelected(false);
        }
      }
    }
    return;
  }
  int i=0;
  value_=values[0];
  for (  SelectItem item : options_) {
    if (item instanceof SelectOption) {
      if (i > -1 && ((SelectOption)item).getValue().equals(values[i])) {
        ((SelectOption)item).setSelected(true);
        if (values.length == ++i)         i=-1;
      }
 else       ((SelectOption)item).setSelected(false);
    }
 else     if (item instanceof SelectOptionGroup) {
      for (      SelectOption opt : ((SelectOptionGroup)item).getOptions()) {
        if (i > -1 && ((SelectOption)opt).getValue().equals(values[i])) {
          ((SelectOption)opt).setSelected(true);
          if (values.length == ++i)           i=-1;
        }
 else {
          ((SelectOption)opt).setSelected(false);
        }
      }
    }
  }
}",0.965625
101175,"public void validate(UIFormInput uiInput) throws Exception {
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label=uiForm.getLabel(uiInput.getName());
  if (label == null)   label=uiInput.getName();
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  String s=(String)uiInput.getValue();
  if (s.matches(EMAIL_REGEX))   return;
  Object[] args={label,uiInput.getBindingField()};
  throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
}","public void validate(UIFormInput uiInput) throws Exception {
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label;
  try {
    label=uiForm.getLabel(uiInput.getName());
  }
 catch (  Exception e) {
    label=uiInput.getName();
  }
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  String s=(String)uiInput.getValue();
  if (s.matches(EMAIL_REGEX))   return;
  Object[] args={label,uiInput.getBindingField()};
  throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
}",0.9530292716133424
101176,"public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  if ((uiInput.getValue() != null)) {
    String value=((String)uiInput.getValue()).trim();
    if (value.matches(expression_))     return;
  }
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label=uiForm.getLabel(uiInput.getName());
  if (label == null)   label=uiInput.getName();
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  Object[] args={label};
  throw new MessageException(new ApplicationMessage(key_,args,ApplicationMessage.WARNING));
}","public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  if ((uiInput.getValue() != null)) {
    String value=((String)uiInput.getValue()).trim();
    if (value.matches(expression_))     return;
  }
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label;
  try {
    label=uiForm.getLabel(uiInput.getName());
  }
 catch (  Exception e) {
    label=uiInput.getName();
  }
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  Object[] args={label};
  throw new MessageException(new ApplicationMessage(key_,args,ApplicationMessage.WARNING));
}",0.9546351084812624
101177,"public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label=uiForm.getLabel(uiInput.getName());
  if (label == null)   label=uiInput.getName();
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  if (Character.isDigit(s.charAt(0)) || s.charAt(0) == '-') {
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-') {
      continue;
    }
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
}","public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label;
  try {
    label=uiForm.getLabel(uiInput.getName());
  }
 catch (  Exception e) {
    label=uiInput.getName();
  }
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  if (Character.isDigit(s.charAt(0)) || s.charAt(0) == '-') {
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-') {
      continue;
    }
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
}",0.968478757423481
101178,"public void validate(UIFormInput uiInput) throws Exception {
  if ((uiInput.getValue() != null) && ((String)uiInput.getValue()).trim().length() > 0) {
    return;
  }
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label=uiForm.getLabel(uiInput.getName());
  if (label == null)   label=uiInput.getName();
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  Object[] args={label,uiInput.getBindingField()};
  throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
}","public void validate(UIFormInput uiInput) throws Exception {
  if ((uiInput.getValue() != null) && ((String)uiInput.getValue()).trim().length() > 0) {
    return;
  }
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label;
  try {
    label=uiForm.getLabel(uiInput.getName());
  }
 catch (  Exception e) {
    label=uiInput.getName();
  }
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  Object[] args={label,uiInput.getBindingField()};
  throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
}",0.948081264108352
101179,"public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label=uiForm.getLabel(uiInput.getName());
  if (label == null)   label=uiInput.getName();
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-' || c == '.' || c == '*') {
      continue;
    }
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}","public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label;
  try {
    label=uiForm.getLabel(uiInput.getName());
  }
 catch (  Exception e) {
    label=uiInput.getName();
  }
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-' || c == '.' || c == '*') {
      continue;
    }
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}",0.9601386481802426
101180,"public void validate(UIFormInput uiInput) throws Exception {
  if ((uiInput.getValue() != null))   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label=uiForm.getLabel(uiInput.getName());
  if (label == null)   label=uiInput.getName();
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  Object[] args={label,uiInput.getBindingField()};
  throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
}","public void validate(UIFormInput uiInput) throws Exception {
  if ((uiInput.getValue() != null))   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label;
  try {
    label=uiForm.getLabel(uiInput.getName());
  }
 catch (  Exception e) {
    label=uiInput.getName();
  }
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  Object[] args={label,uiInput.getBindingField()};
  throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
}",0.9402597402597402
101181,"public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label=uiForm.getLabel(uiInput.getName());
  if (label == null)   label=uiInput.getName();
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isDigit(c) || (s.charAt(0) == '-' && i == 0 && s.length() > 1)) {
      continue;
    }
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}","public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label;
  try {
    label=uiForm.getLabel(uiInput.getName());
  }
 catch (  Exception e) {
    label=uiInput.getName();
  }
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isDigit(c) || (s.charAt(0) == '-' && i == 0 && s.length() > 1)) {
      continue;
    }
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}",0.9588059701492536
101182,"public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label=uiForm.getLabel(uiInput.getName());
  if (label == null)   label=uiInput.getName();
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  boolean error=false;
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isDigit(c) || (s.charAt(0) == '-' && i == 0)) {
      error=true;
      continue;
    }
    error=false;
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
  if (error) {
    int num=Integer.parseInt(s);
    if (min_ > num || max_ < num) {
      Object[] args={label,min_.toString(),max_.toString()};
      throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
    }
  }
}","public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label;
  try {
    label=uiForm.getLabel(uiInput.getName());
  }
 catch (  Exception e) {
    label=uiInput.getName();
  }
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  boolean error=false;
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isDigit(c) || (s.charAt(0) == '-' && i == 0)) {
      error=true;
      continue;
    }
    error=false;
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
  if (error) {
    int num=Integer.parseInt(s);
    if (min_ > num || max_ < num) {
      Object[] args={label,min_.toString(),max_.toString()};
      throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
    }
  }
}",0.9706507868991918
101183,"public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label=uiForm.getLabel(uiInput.getName());
  if (label == null)   label=uiInput.getName();
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  boolean error=false;
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isDigit(c) || (s.charAt(0) == '-' && i == 0)) {
      error=true;
      continue;
    }
    error=false;
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
  if (error == true && s.charAt(0) == '-') {
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}","public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label;
  try {
    label=uiForm.getLabel(uiInput.getName());
  }
 catch (  Exception e) {
    label=uiInput.getName();
  }
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  boolean error=false;
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isDigit(c) || (s.charAt(0) == '-' && i == 0)) {
      error=true;
      continue;
    }
    error=false;
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
  if (error == true && s.charAt(0) == '-') {
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}",0.9674374705049552
101184,"public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label=uiForm.getLabel(uiInput.getName());
  if (label == null)   label=uiInput.getName();
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  if (Character.isDigit(s.charAt(0)) || s.charAt(0) == '-' || s.charAt(0) == '.' || s.charAt(0) == '_') {
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-' || c == '.') {
      continue;
    }
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
}","public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label;
  try {
    label=uiForm.getLabel(uiInput.getName());
  }
 catch (  Exception e) {
    label=uiInput.getName();
  }
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  if (Character.isDigit(s.charAt(0)) || s.charAt(0) == '-' || s.charAt(0) == '.' || s.charAt(0) == '_') {
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-' || c == '.') {
      continue;
    }
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
}",0.9697235629662132
101185,"public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label=uiForm.getLabel(uiInput.getName());
  if (label == null)   label=uiInput.getName();
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-' || Character.isSpaceChar(c)) {
      continue;
    }
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
}","public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label;
  try {
    label=uiForm.getLabel(uiInput.getName());
  }
 catch (  Exception e) {
    label=uiInput.getName();
  }
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  String s=(String)uiInput.getValue();
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-' || Character.isSpaceChar(c)) {
      continue;
    }
    Object[] args={label,uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
}",0.9615170105967652
101186,"public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  if ((uiInput.getValue() != null)) {
    int length=((String)uiInput.getValue()).trim().length();
    if (min_ <= length && max_ >= length)     return;
  }
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label=uiForm.getLabel(uiInput.getName());
  if (label == null)   label=uiInput.getName();
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  Object[] args={label,min_.toString(),max_.toString()};
  throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
}","public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  if ((uiInput.getValue() != null)) {
    int length=((String)uiInput.getValue()).trim().length();
    if (min_ <= length && max_ >= length)     return;
  }
  UIComponent uiComponent=(UIComponent)uiInput;
  UIForm uiForm=uiComponent.getAncestorOfType(UIForm.class);
  String label;
  try {
    label=uiForm.getLabel(uiInput.getName());
  }
 catch (  Exception e) {
    label=uiInput.getName();
  }
  label=label.trim();
  if (label.charAt(label.length() - 1) == ':')   label=label.substring(0,label.length() - 1);
  Object[] args={label,min_.toString(),max_.toString()};
  throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
}",0.9578497251069028
101187,"public UIExoStart(InitParams initParams) throws Exception {
  PortalRequestContext context=WebuiRequestContext.getCurrentInstance();
  logged=context.getAccessPath() == PortalRequestContext.PRIVATE_ACCESS;
  List<MenuItemContainer> menu=null;
  if (logged) {
    menu=initParams.getParam(""String_Node_Str"").getMapGroovyObject(context);
    menus.add(menu);
  }
}","public UIExoStart(InitParams initParams) throws Exception {
  PortalRequestContext context=WebuiRequestContext.getCurrentInstance();
  if (context.getRemoteUser() != null) {
    List<MenuItemContainer> menu=initParams.getParam(""String_Node_Str"").getMapGroovyObject(context);
    menus.add(menu);
  }
}",0.7903469079939668
101188,"/** 
 * The constructor of this class is used to build the tree of UI components that will be aggregated in the portal page.  1) The component is stored in the current PortalRequestContext ThreadLocal  2) The configuration for the portal associated with the current user request is extracted from the  PortalRequestContext 3) Then according to the context path, either a public or private portal is initiated. Usually a public portal does not contain the left column and only the private one has it. 4) The skin to use is setup 5) Finally, the current component is associated with the current portal owner      
 * @param initParams
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") public UIPortalApplication(InitParams initParams) throws Exception {
  log=ExoLogger.getLogger(""String_Node_Str"");
  PortalRequestContext context=PortalRequestContext.getCurrentInstance();
  context.setUIApplication(this);
  userPortalConfig_=(UserPortalConfig)context.getAttribute(UserPortalConfig.class);
  if (userPortalConfig_ == null)   throw new Exception(""String_Node_Str"");
  if (context.getAccessPath() == PortalRequestContext.PUBLIC_ACCESS) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    initPublicPortal(initParams);
  }
 else {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    initPrivatePortal(context.getRemoteUser());
  }
  String currentSkin=userPortalConfig_.getPortalConfig().getSkin();
  if (currentSkin != null && currentSkin.trim().length() > 0)   skin_=currentSkin;
  LocaleConfigService localeConfigService=getApplicationComponent(LocaleConfigService.class);
  LocaleConfig localeConfig=localeConfigService.getLocaleConfig(userPortalConfig_.getPortalConfig().getLocale());
  if (localeConfig == null)   localeConfig=localeConfigService.getDefaultLocaleConfig();
  setLocale(localeConfig.getLocale());
  setOwner(context.getPortalOwner());
}","/** 
 * The constructor of this class is used to build the tree of UI components that will be aggregated in the portal page.  1) The component is stored in the current PortalRequestContext ThreadLocal  2) The configuration for the portal associated with the current user request is extracted from the  PortalRequestContext 3) Then according to the context path, either a public or private portal is initiated. Usually a public portal does not contain the left column and only the private one has it. 4) The skin to use is setup 5) Finally, the current component is associated with the current portal owner      
 * @param initParams
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") public UIPortalApplication() throws Exception {
  log=ExoLogger.getLogger(""String_Node_Str"");
  PortalRequestContext context=PortalRequestContext.getCurrentInstance();
  context.setUIApplication(this);
  userPortalConfig_=(UserPortalConfig)context.getAttribute(UserPortalConfig.class);
  if (userPortalConfig_ == null)   throw new Exception(""String_Node_Str"");
  UserACL acl=getApplicationComponent(UserACL.class);
  String test=context.getRemoteUser();
  if (acl.hasAccessControlWorkspacePermission(test))   addChild(UIControlWorkspace.class,UIPortalApplication.UI_CONTROL_WS_ID,null);
  addWorkingWorkspace();
  String currentSkin=userPortalConfig_.getPortalConfig().getSkin();
  if (currentSkin != null && currentSkin.trim().length() > 0)   skin_=currentSkin;
  LocaleConfigService localeConfigService=getApplicationComponent(LocaleConfigService.class);
  LocaleConfig localeConfig=localeConfigService.getLocaleConfig(userPortalConfig_.getPortalConfig().getLocale());
  if (localeConfig == null)   localeConfig=localeConfigService.getDefaultLocaleConfig();
  setLocale(localeConfig.getLocale());
  setOwner(context.getPortalOwner());
}",0.656308598982052
101189,"private void updateUI(){
  if (navigations == null || navigations.size() < 1) {
    getChild(UIDropDownControl.class).setOptions(null);
    getChild(UITree.class).setSibbling(null);
    return;
  }
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  for (  PageNavigation navigation : navigations) {
    String label=navigation.getOwnerId() + ""String_Node_Str"";
    options.add(new SelectItemOption<String>(navigation.getOwnerType() + ""String_Node_Str"" + label,navigation.getId()));
  }
  UIDropDownControl uiNavigationSelector=getChild(UIDropDownControl.class);
  uiNavigationSelector.setOptions(options);
  if (options.size() > 0)   uiNavigationSelector.setValue(0);
}","private void updateUI(){
  WebuiRequestContext contextres=WebuiRequestContext.getCurrentInstance();
  ResourceBundle res=contextres.getApplicationResourceBundle();
  String navValueEnd=res.getString(""String_Node_Str"");
  if (navigations == null || navigations.size() < 1) {
    getChild(UIDropDownControl.class).setOptions(null);
    getChild(UITree.class).setSibbling(null);
    return;
  }
  List<SelectItemOption<String>> options=new ArrayList<SelectItemOption<String>>();
  for (  PageNavigation navigation : navigations) {
    String label=navigation.getOwnerId() + navValueEnd;
    options.add(new SelectItemOption<String>(navigation.getOwnerType() + ""String_Node_Str"" + label,navigation.getId()));
  }
  UIDropDownControl uiNavigationSelector=getChild(UIDropDownControl.class);
  uiNavigationSelector.setOptions(options);
  if (options.size() > 0)   uiNavigationSelector.setValue(0);
}",0.7669172932330827
101190,"public UIAccountEditInputSet(String name) throws Exception {
  super(name);
  addUIFormInput(new UIFormStringInput(USERNAME,""String_Node_Str"",null).setEditable(false).addValidator(MandatoryValidator.class).addValidator(IdentifierValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).setMaxLength(45).addValidator(MandatoryValidator.class).addValidator(SpecialCharacterValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).setMaxLength(45).addValidator(MandatoryValidator.class).addValidator(SpecialCharacterValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(MandatoryValidator.class).addValidator(EmailAddressValidator.class));
  UIFormCheckBoxInput<Boolean> uiCheckbox=new UIFormCheckBoxInput<Boolean>(CHANGEPASS,null,false);
  uiCheckbox.setOnChange(""String_Node_Str"",""String_Node_Str"");
  addUIFormInput(uiCheckbox);
  UIFormInputBase<String> uiInput=new UIFormStringInput(PASSWORD1X,null,null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(StringLengthValidator.class,6,30).addValidator(MandatoryValidator.class);
  uiInput.setRendered(false);
  addUIFormInput(uiInput);
  uiInput=new UIFormStringInput(PASSWORD2X,null,null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(MandatoryValidator.class).addValidator(StringLengthValidator.class,6,30);
  uiInput.setRendered(false);
  addUIFormInput(uiInput);
}","public UIAccountEditInputSet(String name) throws Exception {
  super(name);
  addUIFormInput(new UIFormStringInput(USERNAME,""String_Node_Str"",null).setEditable(false).addValidator(MandatoryValidator.class).addValidator(ExpressionValidator.class,""String_Node_Str"",""String_Node_Str"").addValidator(ResourceValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).setMaxLength(45).addValidator(MandatoryValidator.class).addValidator(SpecialCharacterValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).setMaxLength(45).addValidator(MandatoryValidator.class).addValidator(SpecialCharacterValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(MandatoryValidator.class).addValidator(EmailAddressValidator.class));
  UIFormCheckBoxInput<Boolean> uiCheckbox=new UIFormCheckBoxInput<Boolean>(CHANGEPASS,null,false);
  uiCheckbox.setOnChange(""String_Node_Str"",""String_Node_Str"");
  addUIFormInput(uiCheckbox);
  UIFormInputBase<String> uiInput=new UIFormStringInput(PASSWORD1X,null,null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(StringLengthValidator.class,6,30).addValidator(MandatoryValidator.class);
  uiInput.setRendered(false);
  addUIFormInput(uiInput);
  uiInput=new UIFormStringInput(PASSWORD2X,null,null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(MandatoryValidator.class).addValidator(StringLengthValidator.class,6,30);
  uiInput.setRendered(false);
  addUIFormInput(uiInput);
}",0.9689564068692206
101191,"public UIIFrameEditMode() throws Exception {
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  addUIFormInput(new UIFormStringInput(FIELD_URL,FIELD_URL,pref.getValue(""String_Node_Str"",""String_Node_Str"")).addValidator(PositiveNumberFormatValidator.class));
}","public UIIFrameEditMode() throws Exception {
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  addUIFormInput(new UIFormStringInput(FIELD_URL,FIELD_URL,pref.getValue(""String_Node_Str"",""String_Node_Str"")));
}",0.9281609195402298
101192,"public void execute(Event<UIIFrameEditMode> event) throws Exception {
  String url=event.getSource().getUIStringInput(FIELD_URL).getValue();
  try {
    new URL(url);
    PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
    PortletPreferences pref=pcontext.getRequest().getPreferences();
    pref.setValue(""String_Node_Str"",event.getSource().getUIStringInput(FIELD_URL).getValue());
    pref.store();
    pcontext.setApplicationMode(PortletMode.VIEW);
  }
 catch (  Exception e) {
    Object[] args={FIELD_URL,""String_Node_Str""};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}","public void execute(Event<UIIFrameEditMode> event) throws Exception {
  UIIFrameEditMode uiForm=event.getSource();
  String url=uiForm.getUIStringInput(FIELD_URL).getValue();
  if (url == null || url.length() == 0) {
    UIIFramePortlet uiPortlet=uiForm.getParent();
    Object args[]={uiForm.getLabel(uiForm.getUIStringInput(FIELD_URL).getId())};
    uiPortlet.addMessage(new ApplicationMessage(""String_Node_Str"",args));
    uiForm.getUIStringInput(FIELD_URL).setValue(uiPortlet.getURL());
    return;
  }
  try {
    PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
    PortletPreferences pref=pcontext.getRequest().getPreferences();
    new URL(url);
    pref.setValue(""String_Node_Str"",uiForm.getUIStringInput(FIELD_URL).getValue());
    pref.store();
    pcontext.setApplicationMode(PortletMode.VIEW);
  }
 catch (  Exception e) {
    Object[] args={FIELD_URL,""String_Node_Str""};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}",0.3335318642048838
101193,"public void execute(Event<UIIFrameEditMode> event) throws Exception {
  UIIFrameEditMode uiForm=event.getSource();
  String url=uiForm.getUIStringInput(FIELD_URL).getValue();
  if (url == null || url.length() == 0) {
    UIIFramePortlet uiPortlet=uiForm.getParent();
    Object args[]={uiForm.getLabel(uiForm.getUIStringInput(FIELD_URL).getId())};
    uiPortlet.addMessage(new ApplicationMessage(""String_Node_Str"",args));
    uiForm.getUIStringInput(FIELD_URL).setValue(uiPortlet.getURL());
    return;
  }
  try {
    PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
    PortletPreferences pref=pcontext.getRequest().getPreferences();
    new URL(url);
    pref.setValue(""String_Node_Str"",uiForm.getUIStringInput(FIELD_URL).getValue());
    pref.store();
    pcontext.setApplicationMode(PortletMode.VIEW);
  }
 catch (  Exception e) {
    Object[] args={FIELD_URL,""String_Node_Str""};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}","public void execute(Event<UIIFrameEditMode> event) throws Exception {
  UIIFrameEditMode uiForm=event.getSource();
  String url=uiForm.getUIStringInput(FIELD_URL).getValue();
  UIIFramePortlet uiPortlet=uiForm.getParent();
  if (url == null || url.length() == 0) {
    Object args[]={uiForm.getLabel(uiForm.getUIStringInput(FIELD_URL).getId())};
    uiPortlet.addMessage(new ApplicationMessage(""String_Node_Str"",args));
    uiForm.getUIStringInput(FIELD_URL).setValue(uiPortlet.getURL());
    return;
  }
  try {
    PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
    PortletPreferences pref=pcontext.getRequest().getPreferences();
    new URL(url);
    pref.setValue(""String_Node_Str"",uiForm.getUIStringInput(FIELD_URL).getValue());
    pref.store();
    pcontext.setApplicationMode(PortletMode.VIEW);
  }
 catch (  Exception e) {
    uiForm.getUIStringInput(FIELD_URL).setValue(uiPortlet.getURL());
    Object[] args={FIELD_URL,""String_Node_Str""};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}",0.9205140409328892
101194,"@SuppressWarnings(""String_Node_Str"") public void execute(WebAppController controller,HttpServletRequest req,HttpServletResponse res) throws Exception {
  res.setHeader(""String_Node_Str"",""String_Node_Str"");
  ExoContainer container=PortalContainer.getInstance();
  DownloadService dservice=(DownloadService)container.getComponentInstanceOfType(DownloadService.class);
  DownloadResource dresource=dservice.getDownloadResource(resourceId);
  if (dresource == null) {
    res.setContentType(""String_Node_Str"");
    res.getWriter().write(""String_Node_Str"");
    return;
  }
  if (dresource.getDownloadName() != null) {
    String fileName=dresource.getDownloadName();
    fileName=URLEncoder.encode(fileName,""String_Node_Str"");
    res.setHeader(""String_Node_Str"",""String_Node_Str"" + fileName);
  }
  res.setContentType(dresource.getResourceMimeType());
  InputStream is=dresource.getInputStream();
  byte[] buf=new byte[is.available()];
  is.read(buf);
  res.setContentType(dresource.getResourceMimeType());
  res.getOutputStream().write(buf);
  is.close();
}","@SuppressWarnings(""String_Node_Str"") public void execute(WebAppController controller,HttpServletRequest req,HttpServletResponse res) throws Exception {
  res.setHeader(""String_Node_Str"",""String_Node_Str"");
  ExoContainer container=PortalContainer.getInstance();
  DownloadService dservice=(DownloadService)container.getComponentInstanceOfType(DownloadService.class);
  DownloadResource dresource=dservice.getDownloadResource(resourceId);
  if (dresource == null) {
    res.setContentType(""String_Node_Str"");
    res.getWriter().write(""String_Node_Str"");
    return;
  }
  if (dresource.getDownloadName() != null) {
    res.setHeader(""String_Node_Str"",""String_Node_Str"" + dresource.getDownloadName() + ""String_Node_Str"");
  }
  res.setContentType(dresource.getResourceMimeType());
  InputStream is=dresource.getInputStream();
  byte[] buf=new byte[is.available()];
  is.read(buf);
  res.setContentType(dresource.getResourceMimeType());
  res.getOutputStream().write(buf);
  is.close();
}",0.8736532810969637
101195,"public Collection<SkinConfig> getPortalSkins(String skinName){
  Collection<SkinConfig> test=portalSkins_.values();
  Collection<SkinConfig> result=new ArrayList<SkinConfig>();
  for (  SkinConfig a : test) {
    if (a.getCSSPath().endsWith(""String_Node_Str"" + skinName))     result.add(a);
  }
  return result;
}","public Collection<SkinConfig> getPortalSkins(String skinName){
  Set<String> keys=portalSkins_.keySet();
  Collection<SkinConfig> portalSkins=new ArrayList<SkinConfig>();
  for (  String key : keys) {
    if (key.endsWith(""String_Node_Str"" + skinName))     portalSkins.add(portalSkins_.get(key));
  }
  return portalSkins;
}",0.7441130298273155
101196,"/** 
 * The constructor of this class is used to build the tree of UI components that will be aggregated in the portal page.  1) The component is stored in the current PortalRequestContext ThreadLocal  2) The configuration for the portal associated with the current user request is extracted from the  PortalRequestContext 3) Then according to the context path, either a public or private portal is initiated. Usually a public portal does not contain the left column and only the private one has it. 4) The skin to use is setup 5) Finally, the current component is associated with the current portal owner      
 * @param initParams
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") public UIPortalApplication(InitParams initParams) throws Exception {
  PortalRequestContext context=PortalRequestContext.getCurrentInstance();
  context.setUIApplication(this);
  userPortalConfig_=(UserPortalConfig)context.getAttribute(UserPortalConfig.class);
  if (userPortalConfig_ == null)   throw new Exception(""String_Node_Str"");
  if (context.getAccessPath() == PortalRequestContext.PUBLIC_ACCESS) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    initPublicPortal(initParams);
  }
 else {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    initPrivatePortal(context.getRemoteUser());
  }
  String currentSkin=userPortalConfig_.getPortalConfig().getSkin();
  if (currentSkin != null && currentSkin.trim().length() > 0)   skin_=currentSkin;
  LocaleConfigService localeConfigService=getApplicationComponent(LocaleConfigService.class);
  LocaleConfig localeConfig=localeConfigService.getLocaleConfig(userPortalConfig_.getPortalConfig().getLocale());
  if (localeConfig == null)   localeConfig=localeConfigService.getDefaultLocaleConfig();
  setLocale(localeConfig.getLocale());
  setOwner(context.getPortalOwner());
}","/** 
 * The constructor of this class is used to build the tree of UI components that will be aggregated in the portal page.  1) The component is stored in the current PortalRequestContext ThreadLocal  2) The configuration for the portal associated with the current user request is extracted from the  PortalRequestContext 3) Then according to the context path, either a public or private portal is initiated. Usually a public portal does not contain the left column and only the private one has it. 4) The skin to use is setup 5) Finally, the current component is associated with the current portal owner      
 * @param initParams
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") public UIPortalApplication(InitParams initParams) throws Exception {
  log=ExoLogger.getLogger(""String_Node_Str"");
  PortalRequestContext context=PortalRequestContext.getCurrentInstance();
  context.setUIApplication(this);
  userPortalConfig_=(UserPortalConfig)context.getAttribute(UserPortalConfig.class);
  if (userPortalConfig_ == null)   throw new Exception(""String_Node_Str"");
  if (context.getAccessPath() == PortalRequestContext.PUBLIC_ACCESS) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    initPublicPortal(initParams);
  }
 else {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    initPrivatePortal(context.getRemoteUser());
  }
  String currentSkin=userPortalConfig_.getPortalConfig().getSkin();
  if (currentSkin != null && currentSkin.trim().length() > 0)   skin_=currentSkin;
  LocaleConfigService localeConfigService=getApplicationComponent(LocaleConfigService.class);
  LocaleConfig localeConfig=localeConfigService.getLocaleConfig(userPortalConfig_.getPortalConfig().getLocale());
  if (localeConfig == null)   localeConfig=localeConfigService.getDefaultLocaleConfig();
  setLocale(localeConfig.getLocale());
  setOwner(context.getPortalOwner());
}",0.9877464038359084
101197,"public void execute(Event<UIPortlet> event) throws Exception {
  UIPortal uiPortal=Util.getUIPortal();
  UIPortalApplication uiApp=uiPortal.getAncestorOfType(UIPortalApplication.class);
  UIMaskWorkspace uiMaskWS=uiApp.getChildById(UIPortalApplication.UI_MASK_WS_ID);
  UIPortlet uiPortlet=event.getSource();
  UIPortletForm uiPortletForm=uiMaskWS.createUIComponent(UIPortletForm.class,null,null);
  uiPortletForm.setValues(uiPortlet);
  uiMaskWS.setWindowSize(800,-1);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiMaskWS);
}","public void execute(Event<UIPortlet> event) throws Exception {
  UIPortal uiPortal=Util.getUIPortal();
  UIPortalApplication uiApp=uiPortal.getAncestorOfType(UIPortalApplication.class);
  UIMaskWorkspace uiMaskWS=uiApp.getChildById(UIPortalApplication.UI_MASK_WS_ID);
  uiMaskWS.setUpdated(true);
  UIPortlet uiPortlet=event.getSource();
  UIPortletForm uiPortletForm=uiMaskWS.createUIComponent(UIPortletForm.class,null,null);
  uiPortletForm.setValues(uiPortlet);
  uiMaskWS.setWindowSize(800,-1);
}",0.906641000962464
101198,"public void setUIComponent(UIComponent uicomponent){
  super.setUIComponent(uicomponent);
  this.isShow=(uicomponent != null);
}","public void setUIComponent(UIComponent uicomponent){
  super.setUIComponent(uicomponent);
  setShow(uicomponent != null);
}",0.9641434262948207
101199,"public void execute(Event<UIComponent> event) throws Exception {
  UIMaskWorkspace uiMaskWorkspace=null;
  UIComponent uiSource=event.getSource();
  if (uiSource instanceof UIMaskWorkspace) {
    uiMaskWorkspace=(UIMaskWorkspace)uiSource;
  }
 else {
    uiMaskWorkspace=uiSource.getAncestorOfType(UIMaskWorkspace.class);
  }
  if (uiMaskWorkspace == null || !uiMaskWorkspace.isShow())   return;
  uiMaskWorkspace.setUIComponent(null);
  uiMaskWorkspace.setShow(false);
  uiMaskWorkspace.setWindowSize(-1,-1);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiMaskWorkspace);
}","public void execute(Event<UIComponent> event) throws Exception {
  UIMaskWorkspace uiMaskWorkspace=null;
  UIComponent uiSource=event.getSource();
  if (uiSource instanceof UIMaskWorkspace) {
    uiMaskWorkspace=(UIMaskWorkspace)uiSource;
  }
 else {
    uiMaskWorkspace=uiSource.getAncestorOfType(UIMaskWorkspace.class);
  }
  if (uiMaskWorkspace == null || !uiMaskWorkspace.isShow())   return;
  uiMaskWorkspace.setUIComponent(null);
  uiMaskWorkspace.setWindowSize(-1,-1);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiMaskWorkspace);
}",0.9701230228471002
101200,"public void setShow(boolean isShow){
  this.isShow=isShow;
}","public void setShow(boolean bln){
  this.isShow=bln;
  if (bln == false)   isUpdated=false;
}",0.6535947712418301
101201,"/** 
 * The processrender() method handles the creation of the returned HTML either for a full page render or in the case of an AJAX call The first request, Ajax is not enabled (means no ajaxRequest parameter in the request) and  hence the super.processRender() method is called. This will hence call the processrender() of  the Lifecycle object as this method is not overidden in UIPortalApplicationLifecycle. There we  simply render the bounded template (groovy usually). Note that bounded template are also defined in component annotations, so for the current class it is UIPortalApplication.gtmpl On second calls, request have the ""ajaxRequest"" parameter set to true in the URL. In that case  the algorithm is a bit more complex: a) The list of components that should be updated is extracted using the  context.getUIComponentToUpdateByAjax() method. That list was setup during the process action phase b) Portlets and other UI components to update are split in 2 different lists c) Portlets full content are returned and set with the tag <div class=""PortalResponse""> d) Block to updates (which are UI components) are set within  the <div class=""PortalResponseData""> tag e) Then the scripts and the skins to reload are set in the <div class=""PortalResponseScript"">
 */
public void processRender(WebuiRequestContext context) throws Exception {
  Writer w=context.getWriter();
  if (!context.useAjax()) {
    super.processRender(context);
  }
 else {
    PortalRequestContext pcontext=(PortalRequestContext)context;
    List<UIComponent> list=context.getUIComponentToUpdateByAjax();
    List<UIPortlet> uiPortlets=new ArrayList<UIPortlet>(3);
    List<UIComponent> uiDataComponents=new ArrayList<UIComponent>(5);
    if (list != null) {
      for (      UIComponent uicomponent : list) {
        if (uicomponent instanceof UIPortlet)         uiPortlets.add((UIPortlet)uicomponent);
 else         uiDataComponents.add(uicomponent);
      }
    }
    w.write(""String_Node_Str"");
    if (!context.getFullRender()) {
      for (      UIPortlet uiPortlet : uiPortlets) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + uiPortlet.getWindowId());
        w.write(""String_Node_Str"");
        w.append(""String_Node_Str"" + uiPortlet.getExoWindowID().getUniqueID() + ""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        uiPortlet.processRender(context);
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.write(""String_Node_Str"");
      }
    }
    w.write(""String_Node_Str"");
    for (    UIComponent uicomponent : uiDataComponents) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + uicomponent.getName());
      renderBlockToUpdate(uicomponent,context,w);
    }
    w.write(""String_Node_Str"");
    w.write(""String_Node_Str"");
    w.write(pcontext.getJavascriptManager().getJavascript());
    w.write(""String_Node_Str"");
    w.write(pcontext.getJavascriptManager().getCustomizedOnLoadScript());
    String skin=getAddSkinScript(list);
    if (skin != null) {
      w.write(skin);
    }
    w.write(""String_Node_Str"");
    w.write(""String_Node_Str"");
  }
}","/** 
 * The processrender() method handles the creation of the returned HTML either for a full page render or in the case of an AJAX call The first request, Ajax is not enabled (means no ajaxRequest parameter in the request) and  hence the super.processRender() method is called. This will hence call the processrender() of  the Lifecycle object as this method is not overidden in UIPortalApplicationLifecycle. There we  simply render the bounded template (groovy usually). Note that bounded template are also defined in component annotations, so for the current class it is UIPortalApplication.gtmpl On second calls, request have the ""ajaxRequest"" parameter set to true in the URL. In that case  the algorithm is a bit more complex: a) The list of components that should be updated is extracted using the  context.getUIComponentToUpdateByAjax() method. That list was setup during the process action phase b) Portlets and other UI components to update are split in 2 different lists c) Portlets full content are returned and set with the tag <div class=""PortalResponse""> d) Block to updates (which are UI components) are set within  the <div class=""PortalResponseData""> tag e) Then the scripts and the skins to reload are set in the <div class=""PortalResponseScript"">
 */
public void processRender(WebuiRequestContext context) throws Exception {
  Writer w=context.getWriter();
  if (!context.useAjax()) {
    super.processRender(context);
  }
 else {
    PortalRequestContext pcontext=(PortalRequestContext)context;
    UIMaskWorkspace uiMaskWS=getChildById(UIPortalApplication.UI_MASK_WS_ID);
    if (uiMaskWS.isUpdated())     pcontext.addUIComponentToUpdateByAjax(uiMaskWS);
    List<UIComponent> list=context.getUIComponentToUpdateByAjax();
    List<UIPortlet> uiPortlets=new ArrayList<UIPortlet>(3);
    List<UIComponent> uiDataComponents=new ArrayList<UIComponent>(5);
    if (list != null) {
      for (      UIComponent uicomponent : list) {
        if (uicomponent instanceof UIPortlet)         uiPortlets.add((UIPortlet)uicomponent);
 else         uiDataComponents.add(uicomponent);
      }
    }
    w.write(""String_Node_Str"");
    if (!context.getFullRender()) {
      for (      UIPortlet uiPortlet : uiPortlets) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + uiPortlet.getWindowId());
        w.write(""String_Node_Str"");
        w.append(""String_Node_Str"" + uiPortlet.getExoWindowID().getUniqueID() + ""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        uiPortlet.processRender(context);
        w.append(""String_Node_Str"");
        w.append(""String_Node_Str"");
        w.write(""String_Node_Str"");
      }
    }
    w.write(""String_Node_Str"");
    for (    UIComponent uicomponent : uiDataComponents) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + uicomponent.getName());
      renderBlockToUpdate(uicomponent,context,w);
    }
    w.write(""String_Node_Str"");
    w.write(""String_Node_Str"");
    w.write(pcontext.getJavascriptManager().getJavascript());
    w.write(""String_Node_Str"");
    w.write(pcontext.getJavascriptManager().getCustomizedOnLoadScript());
    String skin=getAddSkinScript(list);
    if (skin != null) {
      w.write(skin);
    }
    w.write(""String_Node_Str"");
    w.write(""String_Node_Str"");
  }
}",0.9758003908011424
101202,"public void execute(Event<UIIFrameEditMode> event) throws Exception {
  String url=event.getSource().getUIStringInput(FIELD_URL).getValue();
  try {
    new URL(url);
    PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
    PortletPreferences pref=pcontext.getRequest().getPreferences();
    pref.setValue(""String_Node_Str"",event.getSource().getUIStringInput(FIELD_URL).getValue());
    pref.store();
    pcontext.setApplicationMode(PortletRequestContext.VIEW_MODE);
  }
 catch (  Exception e) {
    Object[] args={FIELD_URL,""String_Node_Str""};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}","public void execute(Event<UIIFrameEditMode> event) throws Exception {
  String url=event.getSource().getUIStringInput(FIELD_URL).getValue();
  try {
    new URL(url);
    PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
    PortletPreferences pref=pcontext.getRequest().getPreferences();
    pref.setValue(""String_Node_Str"",event.getSource().getUIStringInput(FIELD_URL).getValue());
    pref.store();
    pcontext.setApplicationMode(PortletMode.VIEW);
  }
 catch (  Exception e) {
    Object[] args={FIELD_URL,""String_Node_Str""};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}",0.982823002240478
101203,"public UIIFrameEditMode() throws Exception {
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  addUIFormInput(new UIFormStringInput(FIELD_URL,FIELD_URL,pref.getValue(""String_Node_Str"",""String_Node_Str"")));
}","public UIIFrameEditMode() throws Exception {
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  addUIFormInput(new UIFormStringInput(FIELD_URL,FIELD_URL,pref.getValue(""String_Node_Str"",""String_Node_Str"")).addValidator(NullFieldValidator.class));
}",0.9430656934306568
101204,"public void execute(Event<UIIFrameEditMode> event) throws Exception {
  PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
  PortletPreferences pref=pcontext.getRequest().getPreferences();
  pref.setValue(""String_Node_Str"",event.getSource().getUIStringInput(FIELD_URL).getValue());
  pref.store();
  pcontext.setApplicationMode(PortletRequestContext.VIEW_MODE);
}","public void execute(Event<UIIFrameEditMode> event) throws Exception {
  String url=event.getSource().getUIStringInput(FIELD_URL).getValue();
  try {
    new URL(url);
    PortletRequestContext pcontext=(PortletRequestContext)WebuiRequestContext.getCurrentInstance();
    PortletPreferences pref=pcontext.getRequest().getPreferences();
    pref.setValue(""String_Node_Str"",event.getSource().getUIStringInput(FIELD_URL).getValue());
    pref.store();
    pcontext.setApplicationMode(PortletRequestContext.VIEW_MODE);
  }
 catch (  Exception e) {
    Object[] args={FIELD_URL,""String_Node_Str""};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}",0.752073732718894
101205,"@SuppressWarnings(""String_Node_Str"") public void decode(Object input,WebuiRequestContext context) throws Exception {
  String val=(String)input;
  if ((val == null || val.length() == 0) && type_ == PASSWORD_TYPE)   return;
  value_=val;
  if (value_ != null && value_.length() == 0)   value_=null;
}","@SuppressWarnings(""String_Node_Str"") public void decode(Object input,WebuiRequestContext context) throws Exception {
  String val=(String)input;
  if (val == null)   return;
  value_=val;
  if (value_ != null && value_.length() == 0)   value_=null;
}",0.7030965391621129
101206,"public UIAccountChangePass() throws Exception {
  super();
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(MandatoryValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(StringLengthValidator.class,6,30).addValidator(MandatoryValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(MandatoryValidator.class));
}","public UIAccountChangePass() throws Exception {
  super();
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(MandatoryValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(StringLengthValidator.class,6,30).addValidator(MandatoryValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(StringLengthValidator.class,6,30).addValidator(MandatoryValidator.class));
}",0.9620661824051656
101207,"public void init(Writer writer,PortletRequest req,PortletResponse res){
  request_=req;
  response_=res;
  writer_=new HtmlValidator(writer);
  windowId_=req.getWindowID();
  PortletMode mode=req.getPortletMode();
  if (mode.equals(PortletMode.VIEW))   applicationMode_=VIEW_MODE;
 else   if (mode.equals(PortletMode.EDIT))   applicationMode_=EDIT_MODE;
 else   if (mode.equals(PortletMode.HELP))   applicationMode_=HELP_MODE;
 else   applicationMode_=VIEW_MODE;
}","public void init(Writer writer,PortletRequest req,PortletResponse res){
  request_=req;
  response_=res;
  writer_=new HtmlValidator(writer);
}",0.471169686985173
101208,"public PortletRequestContext(WebuiApplication app,Writer writer,PortletRequest req,PortletResponse res){
  super(app);
  init(writer,req,res);
  setSessionId(req.getPortletSession(true).getId());
  urlBuilder=new PortletURLBuilder();
}","public PortletRequestContext(WebuiApplication app,Writer writer,PortletRequest req,PortletResponse res){
  super(app);
  windowId_=req.getWindowID();
  init(writer,req,res);
  setSessionId(req.getPortletSession(true).getId());
  urlBuilder=new PortletURLBuilder();
  PortletMode mode=req.getPortletMode();
  if (mode.equals(PortletMode.VIEW))   applicationMode_=VIEW_MODE;
 else   if (mode.equals(PortletMode.EDIT))   applicationMode_=EDIT_MODE;
 else   if (mode.equals(PortletMode.HELP))   applicationMode_=HELP_MODE;
 else   applicationMode_=VIEW_MODE;
}",0.5941845764854614
101209,"public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  String s=(String)uiInput.getValue();
  if (s.matches(EMAIL_REGEX))   return;
  throw new MessageException(new ApplicationMessage(""String_Node_Str"",null));
}","public void validate(UIFormInput uiInput) throws Exception {
  if (uiInput.getValue() == null || ((String)uiInput.getValue()).trim().length() == 0)   return;
  String s=(String)uiInput.getValue();
  if (s.matches(EMAIL_REGEX))   return;
  Object[] args={uiInput.getName(),uiInput.getBindingField()};
  throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
}",0.8642659279778393
101210,"public void processRender(UIWidget uiWidget,Writer w) throws Exception {
  PortalRequestContext pContext=Util.getPortalRequestContext();
  MVCRequestContext appReqContext=new MVCRequestContext(this,pContext);
  String instanceId=uiWidget.getApplicationInstanceUniqueId();
  String userName=pContext.getRemoteUser();
  int posX=uiWidget.getProperties().getIntValue(""String_Node_Str"");
  int posY=uiWidget.getProperties().getIntValue(""String_Node_Str"");
  int zIndex=uiWidget.getProperties().getIntValue(""String_Node_Str"");
  w.write(""String_Node_Str"" + userName + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ posX+ ""String_Node_Str""+ posY+ ""String_Node_Str""+ zIndex+ ""String_Node_Str"");
  String script=""String_Node_Str"" + instanceId + ""String_Node_Str"";
  appReqContext.getJavascriptManager().addCustomizedOnLoadScript(script);
}","public void processRender(UIWidget uiWidget,Writer w) throws Exception {
  PortalRequestContext pContext=Util.getPortalRequestContext();
  MVCRequestContext appReqContext=new MVCRequestContext(this,pContext);
  String instanceId=uiWidget.getApplicationInstanceUniqueId();
  String userName=pContext.getRemoteUser();
  String portalName=URLEncoder.encode(Util.getUIPortal().getName(),""String_Node_Str"");
  String logOutAction=pContext.getRequestContextPath() + ""String_Node_Str"" + portalName+ ""String_Node_Str"";
  int posX=uiWidget.getProperties().getIntValue(""String_Node_Str"");
  int posY=uiWidget.getProperties().getIntValue(""String_Node_Str"");
  int zIndex=uiWidget.getProperties().getIntValue(""String_Node_Str"");
  w.write(""String_Node_Str"" + userName + ""String_Node_Str""+ logOutAction+ ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ posX+ ""String_Node_Str""+ posY+ ""String_Node_Str""+ zIndex+ ""String_Node_Str"");
  String script=""String_Node_Str"" + instanceId + ""String_Node_Str"";
  appReqContext.getJavascriptManager().addCustomizedOnLoadScript(script);
}",0.879746835443038
101211,"public ApplicationRegistryControlArea() throws Exception {
  UIPopupWindow addCategoryPopup=addChild(UIPopupWindow.class,null,""String_Node_Str"");
  addCategoryPopup.setWindowSize(640,0);
  UICategoryForm uiCategoryForm=createUIComponent(UICategoryForm.class,null,null);
  addCategoryPopup.setUIComponent(uiCategoryForm);
  uiCategoryForm.setValue(null);
}","public ApplicationRegistryControlArea() throws Exception {
}",0.2891566265060241
101212,"public boolean isInUse(ApplicationCategory category){
  UIPopupWindow uiPopup=getChild(UIPopupWindow.class);
  UIComponent uiComponent=uiPopup.getUIComponent();
  if (uiComponent != null && uiComponent instanceof UICategoryForm) {
    UICategoryForm uiForm=(UICategoryForm)uiComponent;
    ApplicationCategory existingCategory=uiForm.getCategory();
    return (existingCategory != null && existingCategory.getName().equals(category.getName()));
  }
  return false;
}","public boolean isInUse(ApplicationCategory category){
  UIPortletRegistryPortlet uiParent=getAncestorOfType(UIPortletRegistryPortlet.class);
  UIPopupWindow uiPopup=uiParent.getChild(UIPopupContainer.class).getChild(UIPopupWindow.class);
  UIComponent uiComponent=uiPopup.getUIComponent();
  if (uiComponent != null && uiComponent instanceof UICategoryForm) {
    UICategoryForm uiForm=(UICategoryForm)uiComponent;
    ApplicationCategory existingCategory=uiForm.getCategory();
    return (existingCategory != null && existingCategory.getName().equals(category.getName()));
  }
  return false;
}",0.8784165881244109
101213,"public ApplicationRegistryWorkingArea() throws Exception {
  UIPopupWindow addCategoryPopup=addChild(UIPopupWindow.class,null,""String_Node_Str"");
  addCategoryPopup.setWindowSize(660,0);
}","public ApplicationRegistryWorkingArea() throws Exception {
}",0.4838709677419355
101214,"public void execute(Event<ApplicationRegistryWorkingArea> event) throws Exception {
  String categoryName=event.getRequestContext().getRequestParameter(OBJECTID);
  ApplicationRegistryWorkingArea workingArea=event.getSource();
  workingArea.setSeletcApplication(categoryName);
  Application selectedPortlet=workingArea.getSelectApplication();
  if (selectedPortlet == null)   return;
  ApplicationRegistryService service=workingArea.getApplicationComponent(ApplicationRegistryService.class);
  UIPopupWindow uiPopup=workingArea.getChild(UIPopupWindow.class);
  UIComponent uiComponent=uiPopup.getUIComponent();
  if (uiComponent != null && uiComponent instanceof UIInfoPortletForm) {
    UIInfoPortletForm uiInfoForm=(UIInfoPortletForm)uiComponent;
    Application existingApp=uiInfoForm.getPortlet();
    if (existingApp != null && existingApp.getId().equals(selectedPortlet.getId())) {
      UIApplication uiApp=event.getRequestContext().getUIApplication();
      uiApp.addMessage(new ApplicationMessage(""String_Node_Str"",new String[]{existingApp.getApplicationName()}));
      return;
    }
  }
  service.remove(selectedPortlet);
  workingArea.getPortlets().remove(selectedPortlet);
  workingArea.setSeletcApplication((Application)null);
}","public void execute(Event<ApplicationRegistryWorkingArea> event) throws Exception {
  String categoryName=event.getRequestContext().getRequestParameter(OBJECTID);
  ApplicationRegistryWorkingArea workingArea=event.getSource();
  workingArea.setSeletcApplication(categoryName);
  Application selectedPortlet=workingArea.getSelectApplication();
  if (selectedPortlet == null)   return;
  ApplicationRegistryService service=workingArea.getApplicationComponent(ApplicationRegistryService.class);
  UIPopupContainer uiPopup=workingArea.getAncestorOfType(UIPortletRegistryPortlet.class).getChild(UIPopupContainer.class);
  UIComponent uiComponent=uiPopup.getChild(UIPopupWindow.class).getUIComponent();
  if (uiComponent != null && uiComponent instanceof UIInfoPortletForm) {
    UIInfoPortletForm uiInfoForm=(UIInfoPortletForm)uiComponent;
    Application existingApp=uiInfoForm.getPortlet();
    if (existingApp != null && existingApp.getId().equals(selectedPortlet.getId())) {
      UIApplication uiApp=event.getRequestContext().getUIApplication();
      uiApp.addMessage(new ApplicationMessage(""String_Node_Str"",new String[]{existingApp.getApplicationName()}));
      return;
    }
  }
  service.remove(selectedPortlet);
  workingArea.getPortlets().remove(selectedPortlet);
  workingArea.setSeletcApplication((Application)null);
}",0.9346303501945524
101215,"public UIPortletRegistryPortlet() throws Exception {
  addChild(ApplicationRegistryWorkingArea.class,null,null);
  ApplicationRegistryControlArea uiControlArea=addChild(ApplicationRegistryControlArea.class,null,null);
  uiControlArea.initApplicationCategories();
}","public UIPortletRegistryPortlet() throws Exception {
  addChild(ApplicationRegistryWorkingArea.class,null,null);
  ApplicationRegistryControlArea uiControlArea=addChild(ApplicationRegistryControlArea.class,null,null);
  uiControlArea.initApplicationCategories();
  UIPopupContainer uiPopup=addChild(UIPopupContainer.class,null,null);
  uiPopup.setId(""String_Node_Str"");
}",0.831496062992126
101216,"public UIAccountEditInputSet(String name) throws Exception {
  super(name);
  addUIFormInput(new UIFormStringInput(USERNAME,""String_Node_Str"",null).setEditable(false).addValidator(MandatoryValidator.class).addValidator(IdentifierValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(MandatoryValidator.class).addValidator(IdentifierValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(MandatoryValidator.class).addValidator(IdentifierValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(MandatoryValidator.class).addValidator(EmailAddressValidator.class));
  UIFormCheckBoxInput<Boolean> uiCheckbox=new UIFormCheckBoxInput<Boolean>(CHANGEPASS,null,false);
  uiCheckbox.setOnChange(""String_Node_Str"",""String_Node_Str"");
  addUIFormInput(uiCheckbox);
  UIFormInputBase<String> uiInput=new UIFormStringInput(PASSWORD1X,null,null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(StringLengthValidator.class,6,30);
  uiInput.setRendered(false);
  addUIFormInput(uiInput);
  uiInput=new UIFormStringInput(PASSWORD2X,null,null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(MandatoryValidator.class);
  uiInput.setRendered(false);
  addUIFormInput(uiInput);
}","public UIAccountEditInputSet(String name) throws Exception {
  super(name);
  addUIFormInput(new UIFormStringInput(USERNAME,""String_Node_Str"",null).setEditable(false).addValidator(MandatoryValidator.class).addValidator(IdentifierValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(MandatoryValidator.class).addValidator(IdentifierValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(MandatoryValidator.class).addValidator(IdentifierValidator.class));
  addUIFormInput(new UIFormStringInput(""String_Node_Str"",""String_Node_Str"",null).addValidator(MandatoryValidator.class).addValidator(EmailAddressValidator.class));
  UIFormCheckBoxInput<Boolean> uiCheckbox=new UIFormCheckBoxInput<Boolean>(CHANGEPASS,null,false);
  uiCheckbox.setOnChange(""String_Node_Str"",""String_Node_Str"");
  addUIFormInput(uiCheckbox);
  UIFormInputBase<String> uiInput=new UIFormStringInput(PASSWORD1X,null,null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(StringLengthValidator.class,6,30).addValidator(MandatoryValidator.class);
  uiInput.setRendered(false);
  addUIFormInput(uiInput);
  uiInput=new UIFormStringInput(PASSWORD2X,null,null).setType(UIFormStringInput.PASSWORD_TYPE).addValidator(MandatoryValidator.class);
  uiInput.setRendered(false);
  addUIFormInput(uiInput);
}",0.9857090509344082
101217,"public void execute(Event<UIPageCreationWizard> event) throws Exception {
  UIPageCreationWizard uiWizard=event.getSource();
  UIPortalApplication uiPortalApp=event.getSource().getAncestorOfType(UIPortalApplication.class);
  uiWizard.saveData();
  uiWizard.updateUIPortal(uiPortalApp,event);
}","public void execute(Event<UIPageCreationWizard> event) throws Exception {
  UIPageCreationWizard uiWizard=event.getSource();
  UIPortalApplication uiPortalApp=event.getSource().getAncestorOfType(UIPortalApplication.class);
  uiPortalApp.setEditting(false);
  uiWizard.saveData();
  uiWizard.updateUIPortal(uiPortalApp,event);
}",0.9451612903225808
101218,"public void execute(Event<UIPageWizard> event) throws Exception {
  UIPageWizard uiWizard=event.getSource();
  UIPortalApplication uiPortalApp=event.getSource().getAncestorOfType(UIPortalApplication.class);
  PortalRequestContext pcontext=(PortalRequestContext)event.getRequestContext();
  UIControlWorkspace uiControl=uiPortalApp.findComponentById(UIPortalApplication.UI_CONTROL_WS_ID);
  UIComponentDecorator uiWorkingArea=uiControl.getChildById(UIControlWorkspace.WORKING_AREA_ID);
  uiWorkingArea.setUIComponent(uiWorkingArea.createUIComponent(UIWelcomeComponent.class,null,null));
  pcontext.addUIComponentToUpdateByAjax(uiControl);
  UIPortal uiPortal=Util.getUIPortal();
  uiPortal.setMode(UIPortal.COMPONENT_VIEW_MODE);
  uiPortal.setRenderSibbling(UIPortal.class);
  pcontext.setFullRender(true);
  UIWorkspace uiWorkingWS=uiPortalApp.findComponentById(UIPortalApplication.UI_WORKING_WS_ID);
  pcontext.addUIComponentToUpdateByAjax(uiWorkingWS);
}","public void execute(Event<UIPageWizard> event) throws Exception {
  UIPortalApplication uiPortalApp=event.getSource().getAncestorOfType(UIPortalApplication.class);
  uiPortalApp.setEditting(false);
  PortalRequestContext pcontext=(PortalRequestContext)event.getRequestContext();
  UIControlWorkspace uiControl=uiPortalApp.findComponentById(UIPortalApplication.UI_CONTROL_WS_ID);
  UIComponentDecorator uiWorkingArea=uiControl.getChildById(UIControlWorkspace.WORKING_AREA_ID);
  uiWorkingArea.setUIComponent(uiWorkingArea.createUIComponent(UIWelcomeComponent.class,null,null));
  pcontext.addUIComponentToUpdateByAjax(uiControl);
  UIPortal uiPortal=Util.getUIPortal();
  uiPortal.setMode(UIPortal.COMPONENT_VIEW_MODE);
  uiPortal.setRenderSibbling(UIPortal.class);
  pcontext.setFullRender(true);
  UIWorkspace uiWorkingWS=uiPortalApp.findComponentById(UIPortalApplication.UI_WORKING_WS_ID);
  pcontext.addUIComponentToUpdateByAjax(uiWorkingWS);
}",0.9595375722543352
101219,"public void validate(UIFormInput uiInput) throws Exception {
  String s=(String)uiInput.getValue();
  if (Character.isDigit(s.charAt(0)) || s.charAt(0) == '-') {
    Object[] args={uiInput.getName(),uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-') {
      continue;
    }
    Object[] args={uiInput.getName(),uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}","public void validate(UIFormInput uiInput) throws Exception {
  String s=(String)uiInput.getValue();
  if (Character.isDigit(s.charAt(0)) || s.charAt(0) == '-') {
    Object[] args={uiInput.getName(),uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-') {
      continue;
    }
    Object[] args={uiInput.getName(),uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
}",0.9797752808988764
101220,"public void validate(UIFormInput uiInput) throws Exception {
  String s=(String)uiInput.getValue();
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-' || Character.isSpaceChar(c)) {
      continue;
    }
    Object[] args={uiInput.getName(),uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args));
  }
}","public void validate(UIFormInput uiInput) throws Exception {
  String s=(String)uiInput.getValue();
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-' || Character.isSpaceChar(c)) {
      continue;
    }
    Object[] args={uiInput.getName(),uiInput.getBindingField()};
    throw new MessageException(new ApplicationMessage(""String_Node_Str"",args,ApplicationMessage.WARNING));
  }
}",0.9704918032786886
101221,"public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  String uri=httpRequest.getRequestURI();
  if (cacheResource_) {
    HttpServletResponse httpResponse=(HttpServletResponse)response;
    httpResponse.addHeader(""String_Node_Str"",""String_Node_Str"");
    if (uri.endsWith(""String_Node_Str"")) {
      RootContainer rootContainer=RootContainer.getInstance();
      PortalContainer portalContainer=rootContainer.getPortalContainer(""String_Node_Str"");
      SkinService skinService=(SkinService)portalContainer.getComponentInstanceOfType(SkinService.class);
      String mergedCSS=skinService.getMergedCSS(uri);
      if (mergedCSS != null) {
        log.info(""String_Node_Str"" + uri);
        response.getWriter().print(mergedCSS);
        return;
      }
    }
  }
 else {
    if (uri.endsWith(""String_Node_Str"") || uri.endsWith(""String_Node_Str"") || uri.endsWith(""String_Node_Str"")) {
      HttpServletResponse httpResponse=(HttpServletResponse)response;
      httpResponse.setHeader(""String_Node_Str"",""String_Node_Str"");
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + uri);
  }
  chain.doFilter(request,response);
}","public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  String uri=URLDecoder.decode(httpRequest.getRequestURI(),""String_Node_Str"");
  if (cacheResource_) {
    HttpServletResponse httpResponse=(HttpServletResponse)response;
    httpResponse.addHeader(""String_Node_Str"",""String_Node_Str"");
    if (uri.endsWith(""String_Node_Str"")) {
      RootContainer rootContainer=RootContainer.getInstance();
      PortalContainer portalContainer=rootContainer.getPortalContainer(""String_Node_Str"");
      SkinService skinService=(SkinService)portalContainer.getComponentInstanceOfType(SkinService.class);
      String mergedCSS=skinService.getMergedCSS(uri);
      if (mergedCSS != null) {
        log.info(""String_Node_Str"" + uri);
        response.getWriter().print(mergedCSS);
        return;
      }
    }
  }
 else {
    if (uri.endsWith(""String_Node_Str"") || uri.endsWith(""String_Node_Str"") || uri.endsWith(""String_Node_Str"")) {
      HttpServletResponse httpResponse=(HttpServletResponse)response;
      httpResponse.setHeader(""String_Node_Str"",""String_Node_Str"");
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + uri);
  }
  chain.doFilter(request,response);
}",0.9856977193660612
101222,"private void resolveLabel(ResourceBundle res,PageNode node){
  node.setResolvedLabel(res);
  if (node.getChildren() == null)   return;
  for (  PageNode childNode : node.getChildren()) {
    childNode.setResolvedLabel(res);
  }
}","private void resolveLabel(ResourceBundle res,PageNode node){
  node.setResolvedLabel(res);
  if (node.getChildren() == null)   return;
  for (  PageNode childNode : node.getChildren()) {
    resolveLabel(res,childNode);
  }
}",0.9162995594713657
101223,"public void processRender(UIWidget uiWidget,Writer w) throws Exception {
  PortalContainer container=PortalContainer.getInstance();
  UserWidgetStorage service=(UserWidgetStorage)container.getComponentInstanceOfType(UserWidgetStorage.class);
  PortalRequestContext pContext=Util.getPortalRequestContext();
  MVCRequestContext appReqContext=new MVCRequestContext(this,pContext);
  String instanceId=uiWidget.getApplicationInstanceUniqueId();
  int posX=uiWidget.getProperties().getIntValue(""String_Node_Str"");
  int posY=uiWidget.getProperties().getIntValue(""String_Node_Str"");
  int zIndex=uiWidget.getProperties().getIntValue(""String_Node_Str"");
  byte[] bytes=(byte[])service.get(pContext.getRemoteUser(),getApplicationName(),instanceId);
  String content=""String_Node_Str"";
  if (bytes != null)   content=new String(bytes);
  if (content == null)   content=""String_Node_Str"";
  content=content.trim();
  w.append(""String_Node_Str"" + instanceId).append(""String_Node_Str"").append(String.valueOf(posX)).append(""String_Node_Str"").append(String.valueOf(posY)).append(""String_Node_Str"").append(String.valueOf(zIndex)).append(""String_Node_Str"").append(content).append(""String_Node_Str"");
  String script=""String_Node_Str"" + instanceId + ""String_Node_Str"";
  appReqContext.getJavascriptManager().addCustomizedOnLoadScript(script);
}","public void processRender(UIWidget uiWidget,Writer w) throws Exception {
  PortalContainer container=PortalContainer.getInstance();
  UserWidgetStorage service=(UserWidgetStorage)container.getComponentInstanceOfType(UserWidgetStorage.class);
  PortalRequestContext pContext=Util.getPortalRequestContext();
  MVCRequestContext appReqContext=new MVCRequestContext(this,pContext);
  String instanceId=uiWidget.getApplicationInstanceUniqueId();
  int posX=uiWidget.getProperties().getIntValue(""String_Node_Str"");
  int posY=uiWidget.getProperties().getIntValue(""String_Node_Str"");
  int zIndex=uiWidget.getProperties().getIntValue(""String_Node_Str"");
  String userName=pContext.getRemoteUser();
  byte[] bytes=null;
  if (userName != null && userName.trim().length() > 0) {
    bytes=(byte[])service.get(pContext.getRemoteUser(),getApplicationName(),instanceId);
  }
  String content=null;
  if (bytes != null)   content=new String(bytes);
  if (content == null)   content=""String_Node_Str"";
  content=content.trim();
  w.append(""String_Node_Str"" + instanceId).append(""String_Node_Str"").append(String.valueOf(posX)).append(""String_Node_Str"").append(String.valueOf(posY)).append(""String_Node_Str"").append(String.valueOf(zIndex)).append(""String_Node_Str"").append(content).append(""String_Node_Str"");
  String script=""String_Node_Str"" + instanceId + ""String_Node_Str"";
  appReqContext.getJavascriptManager().addCustomizedOnLoadScript(script);
}",0.936663047412233
101224,"public void execute(Event<UIPageForm> event) throws Exception {
  UIPageForm uiPageForm=event.getSource();
  UIPortalApplication uiPortalApp=event.getSource().getAncestorOfType(UIPortalApplication.class);
  PortalRequestContext pcontext=Util.getPortalRequestContext();
  UIPage uiPage=uiPageForm.getUIPage();
  Page page=new Page();
  uiPageForm.invokeSetBindingBean(page);
  UserPortalConfigService configService=uiPageForm.getApplicationComponent(UserPortalConfigService.class);
  UIMaskWorkspace uiMaskWS=uiPortalApp.getChildById(UIPortalApplication.UI_MASK_WS_ID);
  uiMaskWS.setUIComponent(null);
  uiMaskWS.setShow(false);
  pcontext.addUIComponentToUpdateByAjax(uiMaskWS);
  if (uiPage == null) {
    DataStorage dataStorage=uiPageForm.getApplicationComponent(DataStorage.class);
    Page existPage=dataStorage.getPage(page.getPageId());
    if (existPage != null) {
      uiPortalApp.addMessage(new ApplicationMessage(""String_Node_Str"",null));
      pcontext.addUIComponentToUpdateByAjax(uiPortalApp.getUIPopupMessages());
      return;
    }
    page.setCreator(pcontext.getRemoteUser());
    page.setModifiable(true);
    if (page.getChildren() == null)     page.setChildren(new ArrayList<Object>());
    configService.create(page);
    UIPortalToolPanel uiToolPanel=Util.getUIPortalToolPanel();
    UIPageBrowser uiBrowser=(UIPageBrowser)uiToolPanel.getUIComponent();
    uiBrowser.reset();
    pcontext.addUIComponentToUpdateByAjax(uiBrowser);
    return;
  }
  page.setOwnerType(uiPage.getOwnerType());
  List<UIPortlet> uiPortlets=new ArrayList<UIPortlet>();
  findAllPortlet(uiPortlets,uiPage);
  ArrayList<Object> applications=new ArrayList<Object>();
  for (  UIPortlet uiPortlet : uiPortlets) {
    applications.add(PortalDataMapper.toPortletModel(uiPortlet));
  }
  if (Page.DESKTOP_PAGE.equals(uiPage.getFactoryId()) && !Page.DESKTOP_PAGE.equals(page.getFactoryId())) {
    page.setShowMaxWindow(false);
    uiPage.getChildren().clear();
    page.setChildren(applications);
    page.setModifier(pcontext.getRemoteUser());
    PortalDataMapper.toUIPage(uiPage,page);
    if (page.getTemplate() == null)     page.setTemplate(uiPage.getTemplate());
    if (page.getChildren() == null)     page.setChildren(new ArrayList<Object>());
    configService.update(page);
    UIPortalToolPanel uiToolPanel=Util.getUIPortalToolPanel();
    UIPageBrowser uiBrowser=(UIPageBrowser)uiToolPanel.getUIComponent();
    uiBrowser.reset();
    pcontext.addUIComponentToUpdateByAjax(uiBrowser);
    return;
  }
  List<UIComponent> uiChildren=uiPage.getChildren();
  if (uiChildren == null)   return;
  ArrayList<Object> children=new ArrayList<Object>();
  for (  UIComponent child : uiChildren) {
    Object component=PortalDataMapper.buildChild(child);
    if (component != null)     children.add(component);
  }
  page.setChildren(children);
  uiPage.getChildren().clear();
  page.setModifier(pcontext.getRemoteUser());
  PortalDataMapper.toUIPage(uiPage,page);
  if (page.getTemplate() == null)   page.setTemplate(uiPage.getTemplate());
  if (page.getChildren() == null)   page.setChildren(new ArrayList<Object>());
  if (Page.DESKTOP_PAGE.equals(uiPage.getFactoryId())) {
    configService.update(page);
    UIPortalToolPanel uiToolPanel=Util.getUIPortalToolPanel();
    UIPageBrowser uiBrowser=(UIPageBrowser)uiToolPanel.getUIComponent();
    uiBrowser.reset();
    pcontext.addUIComponentToUpdateByAjax(uiBrowser);
  }
}","public void execute(Event<UIPageForm> event) throws Exception {
  UIPageForm uiPageForm=event.getSource();
  UIPortalApplication uiPortalApp=uiPageForm.getAncestorOfType(UIPortalApplication.class);
  PortalRequestContext pcontext=Util.getPortalRequestContext();
  UIPage uiPage=uiPageForm.getUIPage();
  Page page=new Page();
  uiPageForm.invokeSetBindingBean(page);
  UserPortalConfigService configService=uiPageForm.getApplicationComponent(UserPortalConfigService.class);
  if (uiPage == null) {
    DataStorage dataStorage=uiPageForm.getApplicationComponent(DataStorage.class);
    Page existPage=dataStorage.getPage(page.getPageId());
    if (existPage != null) {
      uiPortalApp.addMessage(new ApplicationMessage(""String_Node_Str"",null));
      pcontext.addUIComponentToUpdateByAjax(uiPortalApp.getUIPopupMessages());
      return;
    }
    page.setCreator(pcontext.getRemoteUser());
    page.setModifiable(true);
    if (page.getChildren() == null)     page.setChildren(new ArrayList<Object>());
    configService.create(page);
    postSave(uiPortalApp,pcontext);
    return;
  }
  page.setOwnerType(uiPage.getOwnerType());
  List<UIPortlet> uiPortlets=new ArrayList<UIPortlet>();
  findAllPortlet(uiPortlets,uiPage);
  ArrayList<Object> applications=new ArrayList<Object>();
  for (  UIPortlet uiPortlet : uiPortlets) {
    applications.add(PortalDataMapper.toPortletModel(uiPortlet));
  }
  if (Page.DESKTOP_PAGE.equals(uiPage.getFactoryId()) && !Page.DESKTOP_PAGE.equals(page.getFactoryId())) {
    page.setShowMaxWindow(false);
    uiPage.getChildren().clear();
    page.setChildren(applications);
    page.setModifier(pcontext.getRemoteUser());
    PortalDataMapper.toUIPage(uiPage,page);
    if (page.getTemplate() == null)     page.setTemplate(uiPage.getTemplate());
    if (page.getChildren() == null)     page.setChildren(new ArrayList<Object>());
    configService.update(page);
    postSave(uiPortalApp,pcontext);
    return;
  }
  List<UIComponent> uiChildren=uiPage.getChildren();
  if (uiChildren == null)   return;
  ArrayList<Object> children=new ArrayList<Object>();
  for (  UIComponent child : uiChildren) {
    Object component=PortalDataMapper.buildChild(child);
    if (component != null)     children.add(component);
  }
  page.setChildren(children);
  uiPage.getChildren().clear();
  page.setModifier(pcontext.getRemoteUser());
  PortalDataMapper.toUIPage(uiPage,page);
  if (page.getTemplate() == null)   page.setTemplate(uiPage.getTemplate());
  if (page.getChildren() == null)   page.setChildren(new ArrayList<Object>());
  if (Page.DESKTOP_PAGE.equals(uiPage.getFactoryId())) {
    configService.update(page);
    postSave(uiPortalApp,pcontext);
  }
}",0.7678717487322101
101225,"public void setMode(ManagementMode mode,Event<? extends UIComponent> event) throws Exception {
  if (mode == ManagementMode.EDIT) {
    UIPortalManagementEditBar uiEditBar=getChild(UIPortalManagementEditBar.class);
    uiEditBar.createEvent(""String_Node_Str"",Phase.PROCESS,event.getRequestContext()).broadcast();
    return;
  }
  getChild(UIPortalManagementEditBar.class).setRendered(false);
  getChild(UIPortalManagementControlBar.class).setRendered(false);
  getChild(UIDescription.class).setRendered(true);
  UIWorkspace uiWorkingWS=Util.updateUIApplication(event);
  UIPortalToolPanel uiToolPanel=uiWorkingWS.findFirstComponentOfType(UIPortalToolPanel.class);
  uiToolPanel.setShowMaskLayer(false);
  UIPortalBrowser uiPortalBrowser=uiToolPanel.createUIComponent(UIPortalBrowser.class,null,null);
  uiToolPanel.setUIComponent(uiPortalBrowser);
  uiWorkingWS.setRenderedChild(UIPortalToolPanel.class);
}","public void setMode(ManagementMode mode,Event<? extends UIComponent> event) throws Exception {
  if (mode == ManagementMode.EDIT) {
    UIPageBody uiPageBody=Util.getUIPortal().findFirstComponentOfType(UIPageBody.class);
    if (uiPageBody != null) {
      if (uiPageBody.getMaximizedUIComponent() != null) {
        UIPortlet uiMaximizedPortlet=(UIPortlet)uiPageBody.getMaximizedUIComponent();
        uiMaximizedPortlet.setCurrentWindowState(WindowState.NORMAL);
        uiPageBody.setMaximizedUIComponent(null);
      }
    }
    UIPortalManagementEditBar uiEditBar=getChild(UIPortalManagementEditBar.class);
    uiEditBar.createEvent(""String_Node_Str"",Phase.PROCESS,event.getRequestContext()).broadcast();
    return;
  }
  getChild(UIPortalManagementEditBar.class).setRendered(false);
  getChild(UIPortalManagementControlBar.class).setRendered(false);
  getChild(UIDescription.class).setRendered(true);
  UIWorkspace uiWorkingWS=Util.updateUIApplication(event);
  UIPortalToolPanel uiToolPanel=uiWorkingWS.findFirstComponentOfType(UIPortalToolPanel.class);
  uiToolPanel.setShowMaskLayer(false);
  UIPortalBrowser uiPortalBrowser=uiToolPanel.createUIComponent(UIPortalBrowser.class,null,null);
  uiToolPanel.setUIComponent(uiPortalBrowser);
  uiWorkingWS.setRenderedChild(UIPortalToolPanel.class);
}",0.8204432383536862
101226,"public void loadNavigations() throws Exception {
  String remoteUser=Util.getPortalRequestContext().getRemoteUser();
  navigations=new ArrayList<PageNavigation>();
  List<PageNavigation> pnavigations=Util.getUIPortal().getNavigations();
  UserACL userACL=getApplicationComponent(UserACL.class);
  for (  PageNavigation nav : pnavigations) {
    if (PortalConfig.PORTAL_TYPE.equals(nav.getOwnerType())) {
      if (userACL.hasPermission(remoteUser,Util.getUIPortal().getEditPermission())) {
        navigations.add(nav.clone());
      }
    }
 else     if (userACL.hasEditPermission(nav,remoteUser)) {
      navigations.add(nav);
    }
  }
  updateUI();
  PageNavigation portalSelectedNav=Util.getUIPortal().getSelectedNavigation();
  if (getPageNavigation(portalSelectedNav.getId()) != null) {
    selectNavigation(portalSelectedNav.getId());
    PageNode portalSelectedNode=Util.getUIPortal().getSelectedNode();
    selectPageNodeByUri(portalSelectedNode.getUri());
    return;
  }
  selectNavigation();
}","public void loadNavigations() throws Exception {
  String remoteUser=Util.getPortalRequestContext().getRemoteUser();
  navigations=new ArrayList<PageNavigation>();
  List<PageNavigation> pnavigations=getExistedNavigation(Util.getUIPortal().getNavigations());
  UserACL userACL=getApplicationComponent(UserACL.class);
  for (  PageNavigation nav : pnavigations) {
    if (PortalConfig.PORTAL_TYPE.equals(nav.getOwnerType())) {
      if (userACL.hasPermission(remoteUser,Util.getUIPortal().getEditPermission())) {
        navigations.add(nav.clone());
      }
    }
 else     if (userACL.hasEditPermission(nav,remoteUser)) {
      navigations.add(nav);
    }
  }
  updateUI();
  PageNavigation portalSelectedNav=Util.getUIPortal().getSelectedNavigation();
  if (getPageNavigation(portalSelectedNav.getId()) != null) {
    selectNavigation(portalSelectedNav.getId());
    PageNode portalSelectedNode=Util.getUIPortal().getSelectedNode();
    selectPageNodeByUri(portalSelectedNode.getUri());
    return;
  }
  selectNavigation();
}",0.9891838741396264
101227,"private static Application getApplication(UIPortal uiPortal,String id) throws Exception {
  List<ApplicationCategory> pCategories=getApplicationCategories();
  for (  ApplicationCategory pCategory : pCategories) {
    List<Application> applications=pCategory.getApplications();
    for (    Application application : applications) {
      if (application.getId().equals(id))       return application;
    }
  }
  return null;
}","private Application getApplication(String id) throws Exception {
  List<ApplicationCategory> pCategories=getApplicationCategories();
  for (  ApplicationCategory pCategory : pCategories) {
    List<Application> applications=pCategory.getApplications();
    for (    Application application : applications) {
      if (application.getId().equals(id))       return application;
    }
  }
  return null;
}",0.9047044632086853
101228,"/** 
 * Add Application to UiPage
 * @param event
 * @throws Exception
 */
private void addApplicationToPage(Event<UIAddNewApplication> event) throws Exception {
  UIPortal uiPortal=Util.getUIPortal();
  UIPortalApplication uiPortalApp=uiPortal.getAncestorOfType(UIPortalApplication.class);
  UIPage uiPage=null;
  if (uiPortal.isRendered()) {
    uiPage=uiPortal.findFirstComponentOfType(UIPage.class);
  }
 else {
    UIPortalToolPanel uiPortalToolPanel=uiPortalApp.findFirstComponentOfType(UIPortalToolPanel.class);
    uiPage=uiPortalToolPanel.findFirstComponentOfType(UIPage.class);
  }
  String applicationId=event.getRequestContext().getRequestParameter(UIComponent.OBJECTID);
  Application application=getApplication(uiPortal,applicationId);
  if (org.exoplatform.web.application.Application.EXO_PORTLET_TYPE.equals(application.getApplicationType())) {
    UIPortlet uiPortlet=uiPage.createUIComponent(UIPortlet.class,null,null);
    StringBuilder windowId=new StringBuilder(uiPage.getOwnerType());
    windowId.append('#').append(uiPage.getOwnerId());
    windowId.append(""String_Node_Str"").append(applicationId).append('/').append(uiPortlet.hashCode());
    uiPortlet.setWindowId(windowId.toString());
    if (application != null) {
      if (application.getDisplayName() != null) {
        uiPortlet.setTitle(application.getDisplayName());
      }
 else       if (application.getApplicationName() != null) {
        uiPortlet.setTitle(application.getApplicationName());
      }
      uiPortlet.setDescription(application.getDescription());
    }
    uiPage.addChild(uiPortlet);
  }
 else   if (org.exoplatform.web.application.Application.EXO_WIDGET_TYPE.equals(application.getApplicationType())) {
    UIWidget uiWidget=uiPage.createUIComponent(event.getRequestContext(),UIWidget.class,null,null);
    StringBuilder windowId=new StringBuilder(Util.getUIPortal().getOwner());
    windowId.append(""String_Node_Str"").append(applicationId).append('/').append(uiWidget.hashCode());
    uiWidget.setApplicationInstanceId(windowId.toString());
    uiWidget.setApplicationName(application.getApplicationName());
    uiWidget.setApplicationGroup(application.getApplicationGroup());
    uiWidget.setApplicationOwnerType(application.getApplicationType());
    int posX=(int)(Math.random() * 400);
    int posY=(int)(Math.random() * 200);
    uiWidget.getProperties().put(UIApplication.locationX,String.valueOf(posX));
    uiWidget.getProperties().put(UIApplication.locationY,String.valueOf(posY));
    uiPage.addChild(uiWidget);
  }
 else {
    UIExoApplication uiExoApp=uiPage.createUIComponent(UIExoApplication.class,null,null);
    StringBuilder windowId=new StringBuilder(Util.getUIPortal().getOwner());
    windowId.append(""String_Node_Str"").append(applicationId).append('/').append(uiExoApp.hashCode());
    uiExoApp.setApplicationInstanceId(windowId.toString());
    uiExoApp.init();
    uiPage.addChild(uiExoApp);
  }
  if (uiPage.isModifiable()) {
    Page page=PortalDataMapper.toPageModel(uiPage);
    UserPortalConfigService configService=uiPortalApp.getApplicationComponent(UserPortalConfigService.class);
    if (page.getChildren() == null)     page.setChildren(new ArrayList<Object>());
    configService.update(page);
  }
  PortalRequestContext pcontext=Util.getPortalRequestContext();
  UIWorkspace uiWorkingWS=uiPortalApp.findComponentById(UIPortalApplication.UI_WORKING_WS_ID);
  pcontext.addUIComponentToUpdateByAjax(uiWorkingWS);
  pcontext.setFullRender(true);
}","/** 
 * Add Application to UiPage
 * @param event
 * @throws Exception
 */
private void addApplicationToPage(Event<UIAddNewApplication> event) throws Exception {
  UIPortal uiPortal=Util.getUIPortal();
  UIPortalApplication uiPortalApp=uiPortal.getAncestorOfType(UIPortalApplication.class);
  UIPage uiPage=null;
  if (uiPortal.isRendered()) {
    uiPage=uiPortal.findFirstComponentOfType(UIPage.class);
  }
 else {
    UIPortalToolPanel uiPortalToolPanel=uiPortalApp.findFirstComponentOfType(UIPortalToolPanel.class);
    uiPage=uiPortalToolPanel.findFirstComponentOfType(UIPage.class);
  }
  String applicationId=event.getRequestContext().getRequestParameter(UIComponent.OBJECTID);
  Application application=event.getSource().getApplication(applicationId);
  if (org.exoplatform.web.application.Application.EXO_PORTLET_TYPE.equals(application.getApplicationType())) {
    UIPortlet uiPortlet=uiPage.createUIComponent(UIPortlet.class,null,null);
    StringBuilder windowId=new StringBuilder(uiPage.getOwnerType());
    windowId.append('#').append(uiPage.getOwnerId());
    windowId.append(""String_Node_Str"").append(applicationId).append('/').append(uiPortlet.hashCode());
    uiPortlet.setWindowId(windowId.toString());
    if (application != null) {
      if (application.getDisplayName() != null) {
        uiPortlet.setTitle(application.getDisplayName());
      }
 else       if (application.getApplicationName() != null) {
        uiPortlet.setTitle(application.getApplicationName());
      }
      uiPortlet.setDescription(application.getDescription());
    }
    uiPage.addChild(uiPortlet);
  }
 else   if (org.exoplatform.web.application.Application.EXO_WIDGET_TYPE.equals(application.getApplicationType())) {
    UIWidget uiWidget=uiPage.createUIComponent(event.getRequestContext(),UIWidget.class,null,null);
    StringBuilder windowId=new StringBuilder(Util.getUIPortal().getOwner());
    windowId.append(""String_Node_Str"").append(applicationId).append('/').append(uiWidget.hashCode());
    uiWidget.setApplicationInstanceId(windowId.toString());
    uiWidget.setApplicationName(application.getApplicationName());
    uiWidget.setApplicationGroup(application.getApplicationGroup());
    uiWidget.setApplicationOwnerType(application.getApplicationType());
    int posX=(int)(Math.random() * 400);
    int posY=(int)(Math.random() * 200);
    uiWidget.getProperties().put(UIApplication.locationX,String.valueOf(posX));
    uiWidget.getProperties().put(UIApplication.locationY,String.valueOf(posY));
    uiPage.addChild(uiWidget);
  }
  if (uiPage.isModifiable()) {
    Page page=PortalDataMapper.toPageModel(uiPage);
    UserPortalConfigService configService=uiPortalApp.getApplicationComponent(UserPortalConfigService.class);
    if (page.getChildren() == null)     page.setChildren(new ArrayList<Object>());
    configService.update(page);
  }
  PortalRequestContext pcontext=Util.getPortalRequestContext();
  UIWorkspace uiWorkingWS=uiPortalApp.findComponentById(UIPortalApplication.UI_WORKING_WS_ID);
  pcontext.addUIComponentToUpdateByAjax(uiWorkingWS);
  pcontext.setFullRender(true);
}",0.9316524908869988
101229,"/** 
 * Add Widget to Left Container
 * @param event
 * @throws Exception
 */
private void addApplicationToContainer(Event<UIAddNewApplication> event) throws Exception {
  if (UIAddNewApplication.UI_COMPONENT_PARENT == null)   return;
  UIContainer uiWidgetContainer=(UIContainer)UIAddNewApplication.UI_COMPONENT_PARENT;
  String applicationId=event.getRequestContext().getRequestParameter(UIComponent.OBJECTID);
  StringBuilder windowId=new StringBuilder(PortalConfig.USER_TYPE);
  windowId.append(""String_Node_Str"").append(event.getRequestContext().getRemoteUser());
  windowId.append(""String_Node_Str"").append(applicationId).append('/');
  ApplicationRegistryService service=uiWidgetContainer.getApplicationComponent(ApplicationRegistryService.class);
  Application application=service.getApplication(applicationId);
  if (application == null)   return;
  UIWidget uiWidget=uiWidgetContainer.createUIComponent(event.getRequestContext(),UIWidget.class,null,null);
  windowId.append(uiWidget.hashCode());
  uiWidget.setApplicationInstanceId(windowId.toString());
  uiWidget.setApplicationName(application.getApplicationName());
  uiWidget.setApplicationGroup(application.getApplicationGroup());
  uiWidget.setApplicationOwnerType(application.getApplicationType());
  uiWidgetContainer.addChild(uiWidget);
  UIWidgets uiWidgets=uiWidgetContainer.getAncestorOfType(UIWidgets.class);
  Widgets widgets=PortalDataMapper.toWidgets(uiWidgets);
  UserPortalConfigService configService=uiWidgetContainer.getApplicationComponent(UserPortalConfigService.class);
  configService.update(widgets);
  UIPortalApplication uiPortalApp=(UIPortalApplication)event.getRequestContext().getUIApplication();
  uiPortalApp.getUserPortalConfig().setWidgets(widgets);
  UIWelcomeComponent uiWelcomeComponent=uiWidgetContainer.getAncestorOfType(UIWelcomeComponent.class);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiWelcomeComponent);
}","/** 
 * Add Widget to Left Container
 * @param event
 * @throws Exception
 */
private void addApplicationToContainer(Event<UIAddNewApplication> event) throws Exception {
  UIContainer uiWidgetContainer=(UIContainer)event.getSource().getUiComponentParent();
  String applicationId=event.getRequestContext().getRequestParameter(UIComponent.OBJECTID);
  StringBuilder windowId=new StringBuilder(PortalConfig.USER_TYPE);
  windowId.append(""String_Node_Str"").append(event.getRequestContext().getRemoteUser());
  windowId.append(""String_Node_Str"").append(applicationId).append('/');
  ApplicationRegistryService service=uiWidgetContainer.getApplicationComponent(ApplicationRegistryService.class);
  Application application=service.getApplication(applicationId);
  if (application == null)   return;
  UIWidget uiWidget=uiWidgetContainer.createUIComponent(event.getRequestContext(),UIWidget.class,null,null);
  windowId.append(uiWidget.hashCode());
  uiWidget.setApplicationInstanceId(windowId.toString());
  uiWidget.setApplicationName(application.getApplicationName());
  uiWidget.setApplicationGroup(application.getApplicationGroup());
  uiWidget.setApplicationOwnerType(application.getApplicationType());
  uiWidgetContainer.addChild(uiWidget);
  UIWidgets uiWidgets=uiWidgetContainer.getAncestorOfType(UIWidgets.class);
  Widgets widgets=PortalDataMapper.toWidgets(uiWidgets);
  UserPortalConfigService configService=uiWidgetContainer.getApplicationComponent(UserPortalConfigService.class);
  configService.update(widgets);
  UIPortalApplication uiPortalApp=(UIPortalApplication)event.getRequestContext().getUIApplication();
  uiPortalApp.getUserPortalConfig().setWidgets(widgets);
  UIWelcomeComponent uiWelcomeComponent=uiWidgetContainer.getAncestorOfType(UIWelcomeComponent.class);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiWelcomeComponent);
}",0.9398099260823654
101230,"public void execute(Event<UIAddNewApplication> event) throws Exception {
  String strUIContainerClass=""String_Node_Str"";
  String strUIPageClass=""String_Node_Str"";
  if (UI_COMPONENT_PARENT.getClass().getName().equals(strUIContainerClass)) {
    addApplicationToContainer(event);
  }
 else   if (UI_COMPONENT_PARENT.getClass().getName().equals(strUIPageClass)) {
    addApplicationToPage(event);
  }
}","public void execute(Event<UIAddNewApplication> event) throws Exception {
  if (event.getSource().isInPage()) {
    addApplicationToPage(event);
  }
 else {
    addApplicationToContainer(event);
  }
}",0.4566666666666666
101231,"@Override public void execute(Event<UIContainer> event) throws Exception {
  UIPortal uiPortal=Util.getUIPortal();
  UIPortalApplication uiApp=uiPortal.getAncestorOfType(UIPortalApplication.class);
  UIMaskWorkspace uiMaskWorkspace=uiApp.getChildById(UIPortalApplication.UI_MASK_WS_ID);
  UIAddNewApplication uiAddApplication=uiPortal.createUIComponent(UIAddNewApplication.class,null,null);
  String[] applicationTypes={""String_Node_Str""};
  UIAddNewApplication.UI_COMPONENT_PARENT=event.getSource();
  uiAddApplication.getApplicationCategories(event.getRequestContext().getRemoteUser(),applicationTypes);
  uiMaskWorkspace.setWindowSize(700,375);
  uiMaskWorkspace.setUIComponent(uiAddApplication);
  uiMaskWorkspace.setShow(true);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiMaskWorkspace);
}","@Override public void execute(Event<UIContainer> event) throws Exception {
  UIPortal uiPortal=Util.getUIPortal();
  UIPortalApplication uiApp=uiPortal.getAncestorOfType(UIPortalApplication.class);
  UIMaskWorkspace uiMaskWorkspace=uiApp.getChildById(UIPortalApplication.UI_MASK_WS_ID);
  UIAddNewApplication uiAddApplication=uiPortal.createUIComponent(UIAddNewApplication.class,null,null);
  String[] applicationTypes={org.exoplatform.web.application.Application.EXO_WIDGET_TYPE};
  uiAddApplication.setInPage(false);
  uiAddApplication.setUiComponentParent(event.getSource());
  uiAddApplication.getApplicationCategories(event.getRequestContext().getRemoteUser(),applicationTypes);
  uiMaskWorkspace.setWindowSize(700,375);
  uiMaskWorkspace.setUIComponent(uiAddApplication);
  uiMaskWorkspace.setShow(true);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiMaskWorkspace);
}",0.8867924528301887
101232,"@Override public void execute(Event<UIPage> event) throws Exception {
  UIPage uiPage=event.getSource();
  UIPortalApplication uiPortalApp=uiPage.getAncestorOfType(UIPortalApplication.class);
  UIMaskWorkspace uiMaskWorkspace=uiPortalApp.getChildById(UIPortalApplication.UI_MASK_WS_ID);
  UIAddNewApplication uiAddApplication=uiPage.createUIComponent(UIAddNewApplication.class,null,null);
  UIAddNewApplication.UI_COMPONENT_PARENT=uiPage;
  uiAddApplication.getApplicationCategories(event.getRequestContext().getRemoteUser(),null);
  uiMaskWorkspace.setWindowSize(700,375);
  uiMaskWorkspace.setUIComponent(uiAddApplication);
  uiMaskWorkspace.setShow(true);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiMaskWorkspace);
}","@Override public void execute(Event<UIPage> event) throws Exception {
  UIPage uiPage=event.getSource();
  UIPortalApplication uiPortalApp=uiPage.getAncestorOfType(UIPortalApplication.class);
  UIMaskWorkspace uiMaskWorkspace=uiPortalApp.getChildById(UIPortalApplication.UI_MASK_WS_ID);
  UIAddNewApplication uiAddApplication=uiPage.createUIComponent(UIAddNewApplication.class,null,null);
  uiAddApplication.setInPage(true);
  uiAddApplication.setUiComponentParent(uiPage);
  uiAddApplication.getApplicationCategories(event.getRequestContext().getRemoteUser(),null);
  uiMaskWorkspace.setWindowSize(700,375);
  uiMaskWorkspace.setUIComponent(uiAddApplication);
  uiMaskWorkspace.setShow(true);
  event.getRequestContext().addUIComponentToUpdateByAjax(uiMaskWorkspace);
}",0.9169435215946844
101233,"@SuppressWarnings(""String_Node_Str"") private RunStats collectAndWriteRunStats(final URI test,final ScriptInstrumenter instrumenter,final NativeObject allCoverageData) throws IOException {
  final RunStats runStats=new RunStats(test);
  runStats.setSortBy(config.getSortBy());
  runStats.setOrder(config.getOrder());
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Map<Integer,Double> coverageData=(Map<Integer,Double>)allCoverageData.get(data.getSourceName());
    final FileStats fileStats=data.generateFileStats(config.getBaseUri(),coverageData);
    runStats.add(fileStats);
  }
  return runStats;
}","@SuppressWarnings(""String_Node_Str"") private RunStats collectAndWriteRunStats(final URI test,final ScriptInstrumenter instrumenter,final NativeObject allCoverageData) throws IOException {
  final RunStats runStats=new RunStats(test);
  runStats.setSortBy(config.getSortBy());
  runStats.setOrder(config.getOrder());
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Map<Integer,Double> coverageData=(Map<Integer,Double>)allCoverageData.get(data.getSourceUriAsString());
    final FileStats fileStats=data.generateFileStats(config.getBaseUri(),coverageData);
    runStats.add(fileStats);
  }
  return runStats;
}",0.9882168106834248
101234,"public String getParentName(){
  return normalizeFileSeparators(parentName);
}","public String getParentName(){
  return parentName;
}",0.8091603053435115
101235,"private String generateId(){
  return Hashing.md5().hashString(fullName).toString();
}","private String generateId(){
  return Hashing.md5().hashString(fileUri.toString()).toString();
}",0.8901098901098901
101236,"public String getRelativeName(){
  return normalizeFileSeparators(relativeName);
}","public String getRelativeName(){
  return isSeparateFile() ? ResourceUtil.getRelativePath(fileUri.toString(),baseUri.toString(),""String_Node_Str"") : fileUri.toString();
}",0.5158730158730159
101237,"FileStats(final URI baseUri,final String fullName,final List<LineCoverageRecord> lineCoverageRecords,final boolean separateFile){
  this.baseUri=baseUri;
  this.fullName=fullName;
  this.separateFile=separateFile;
  this.relativeName=getRelativeName(fullName);
  final File file=new File(relativeName);
  fileName=file.getName();
  parentName=file.getParent();
  this.id=generateId();
  this.lineCoverageRecords=lineCoverageRecords;
}","FileStats(final URI baseUri,final URI fileUri,final List<LineCoverageRecord> lineCoverageRecords,final boolean separateFile){
  this.baseUri=baseUri;
  this.fileUri=fileUri;
  this.separateFile=separateFile;
  parentName=new File(getRelativeName()).getParent();
  this.id=generateId();
  this.lineCoverageRecords=lineCoverageRecords;
}",0.6319895968790638
101238,"static FileStats merge(final FileStats s1,final FileStats s2){
  final List<LineCoverageRecord> r1=s1.getLineCoverageRecords();
  final List<LineCoverageRecord> r2=s2.getLineCoverageRecords();
  Preconditions.checkArgument(s1.fullName.equals(s2.fullName),""String_Node_Str"",s1,s2);
  Preconditions.checkArgument(r1.size() == r2.size(),""String_Node_Str"",s1,s2);
  final List<LineCoverageRecord> mergedRecords=Lists.newLinkedList();
  for (int i=0; i < r1.size(); i++) {
    final LineCoverageRecord l1=r1.get(i);
    final LineCoverageRecord l2=r2.get(i);
    try {
      mergedRecords.add(LineCoverageRecord.merge(l1,l2));
    }
 catch (    final Exception e) {
      throw new RuntimeException(""String_Node_Str"" + s1.fullName + ""String_Node_Str""+ s2.fullName,e);
    }
  }
  return new FileStats(s1.baseUri,s1.fullName,mergedRecords,s1.separateFile);
}","static FileStats merge(final FileStats s1,final FileStats s2){
  final List<LineCoverageRecord> r1=s1.getLineCoverageRecords();
  final List<LineCoverageRecord> r2=s2.getLineCoverageRecords();
  Preconditions.checkArgument(s1.fileUri.equals(s2.fileUri),""String_Node_Str"",s1,s2);
  Preconditions.checkArgument(r1.size() == r2.size(),""String_Node_Str"",s1,s2);
  final List<LineCoverageRecord> mergedRecords=Lists.newLinkedList();
  for (int i=0; i < r1.size(); i++) {
    final LineCoverageRecord l1=r1.get(i);
    final LineCoverageRecord l2=r2.get(i);
    try {
      mergedRecords.add(LineCoverageRecord.merge(l1,l2));
    }
 catch (    final Exception e) {
      throw new RuntimeException(""String_Node_Str"" + s1.fileUri + ""String_Node_Str""+ s2.fileUri,e);
    }
  }
  return new FileStats(s1.baseUri,s1.fileUri,mergedRecords,s1.separateFile);
}",0.8640376692171866
101239,"@Override public String toString(){
  return getFullName();
}","@Override public String toString(){
  return fileUri.toString();
}",0.8031496062992126
101240,"public String getFileName(){
  return normalizeFileSeparators(fileName);
}","public String getFileName(){
  return UriUtil.getLastSegmentOrHost(fileUri);
}",0.7368421052631579
101241,"public String getFullName(){
  return normalizeFileSeparators(fullName);
}","public String getFullName(){
  return UriUtil.getPath(fileUri);
}",0.6906474820143885
101242,"@Override public void preloadSources(final Config config,final ScriptInstrumenter instrumenter,final RunStats totalStats) throws IOException {
  final String sourcesToPreload=config.getSourcesToPreload();
  final URI baseUri=config.getBaseUri();
  if (sourcesToPreload == null || !config.getOutputStrategy().contains(OutputStrategy.TOTAL) || !UriUtil.isFileUri(baseUri)) {
    return;
  }
  final String sourcesToPreloadEncoding=config.getSourcesToPreloadEncoding();
  logger.info(""String_Node_Str"",sourcesToPreloadEncoding);
  final List<File> filesToPreload=FileUtils.getFiles(new File(baseUri),sourcesToPreload,null);
  logger.info(""String_Node_Str"",filesToPreload.size());
  for (  final File file : filesToPreload) {
    logger.debug(""String_Node_Str"",file);
    final String source=CharStreams.toString(Files.newReaderSupplier(file,Charset.forName(sourcesToPreloadEncoding)));
    instrumenter.preProcess(null,source,file.getAbsolutePath(),0,null);
  }
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Map<Integer,Double> coverageData=Maps.newHashMap();
    for (    final Integer lineNumber : data.getLineNumbersOfAllStatements()) {
      coverageData.put(lineNumber,0.0);
    }
    totalStats.add(data.generateFileStats(baseUri,coverageData));
  }
}","@Override public void preloadSources(final Config config,final ScriptInstrumenter instrumenter,final RunStats totalStats) throws IOException {
  final String sourcesToPreload=config.getSourcesToPreload();
  final URI baseUri=config.getBaseUri();
  if (sourcesToPreload == null || !config.getOutputStrategy().contains(OutputStrategy.TOTAL) || !UriUtil.isFileUri(baseUri)) {
    return;
  }
  final String sourcesToPreloadEncoding=config.getSourcesToPreloadEncoding();
  logger.info(""String_Node_Str"",sourcesToPreloadEncoding);
  final List<File> filesToPreload=FileUtils.getFiles(new File(baseUri),sourcesToPreload,null);
  logger.info(""String_Node_Str"",filesToPreload.size());
  for (  final File file : filesToPreload) {
    logger.debug(""String_Node_Str"",file);
    final String source=CharStreams.toString(Files.newReaderSupplier(file,Charset.forName(sourcesToPreloadEncoding)));
    instrumenter.preProcess(null,source,file.toURI().toString(),0,null);
  }
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Map<Integer,Double> coverageData=Maps.newHashMap();
    for (    final Integer lineNumber : data.getLineNumbersOfAllStatements()) {
      coverageData.put(lineNumber,0.0);
    }
    totalStats.add(data.generateFileStats(baseUri,coverageData));
  }
}",0.9879611650485436
101243,"void add(final FileStats newStats){
  final String key=newStats.getFullName();
  final FileStats oldStats=fileStatsMap.get(key);
  if (oldStats != null) {
    fileStatsMap.put(key,FileStats.merge(newStats,oldStats));
  }
 else {
    fileStatsMap.put(key,newStats);
  }
}","void add(final FileStats newStats){
  final URI key=newStats.getFileUri();
  final FileStats oldStats=fileStatsMap.get(key);
  if (oldStats != null) {
    fileStatsMap.put(key,FileStats.merge(newStats,oldStats));
  }
 else {
    fileStatsMap.put(key,newStats);
  }
}",0.8992537313432836
101244,"public String getTestName(){
  final Optional<String> lastSegment=UriUtil.getLastSegment(test);
  if (lastSegment.isPresent()) {
    return lastSegment.get();
  }
  return test.getHost();
}","public String getTestName(){
  return UriUtil.getLastSegmentOrHost(test);
}",0.4848484848484848
101245,"ScriptData(final String sourceName,final String sourceCode,final boolean separateFile){
  this.sourceName=sourceName;
  this.sourceCode=sourceCode;
  this.separateFile=separateFile;
}","ScriptData(final URI sourceUri,final String sourceCode,final boolean separateFile){
  this.sourceUri=sourceUri;
  this.sourceCode=sourceCode;
  this.separateFile=separateFile;
}",0.9166666666666666
101246,"public FileStats generateFileStats(final URI baseUri,final Map<Integer,Double> coverageData){
  final Scanner in=new Scanner(getSourceCode());
  final List<LineCoverageRecord> lineCoverageRecords=Lists.newArrayList();
  if (!getLineNumbersOfAllStatements().isEmpty()) {
    for (int lineNr=1; lineNr < getLineNumberOfFirstStatement() && in.hasNext(); lineNr++) {
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
    }
    for (int lineNr=getLineNumberOfFirstStatement(), lengthCountdown=0; in.hasNext(); lineNr++) {
      final String line=in.nextLine();
      final Double coverageEntry=coverageData.get(lineNr);
      final int timesLineExecuted;
      if (coverageEntry == null) {
        final int lineLength=line.trim().length();
        if (lengthCountdown > 0 && lineLength > 0) {
          lengthCountdown-=lineLength;
          timesLineExecuted=-1;
        }
 else {
          timesLineExecuted=hasStatement(lineNr) ? 0 : -1;
        }
      }
 else {
        timesLineExecuted=coverageEntry.intValue();
        if (getStatementLength(lineNr) != null) {
          lengthCountdown=getStatementLength(lineNr);
        }
      }
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,timesLineExecuted,line));
    }
  }
 else {
    for (int lineNr=1; in.hasNext(); lineNr++) {
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
    }
  }
  return new FileStats(baseUri,getSourceName(),lineCoverageRecords,isSeparateFile());
}","public FileStats generateFileStats(final URI baseUri,final Map<Integer,Double> coverageData){
  final Scanner in=new Scanner(getSourceCode());
  final List<LineCoverageRecord> lineCoverageRecords=Lists.newArrayList();
  if (!getLineNumbersOfAllStatements().isEmpty()) {
    for (int lineNr=1; lineNr < getLineNumberOfFirstStatement() && in.hasNext(); lineNr++) {
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
    }
    for (int lineNr=getLineNumberOfFirstStatement(), lengthCountdown=0; in.hasNext(); lineNr++) {
      final String line=in.nextLine();
      final Double coverageEntry=coverageData.get(lineNr);
      final int timesLineExecuted;
      if (coverageEntry == null) {
        final int lineLength=line.trim().length();
        if (lengthCountdown > 0 && lineLength > 0) {
          lengthCountdown-=lineLength;
          timesLineExecuted=-1;
        }
 else {
          timesLineExecuted=hasStatement(lineNr) ? 0 : -1;
        }
      }
 else {
        timesLineExecuted=coverageEntry.intValue();
        if (getStatementLength(lineNr) != null) {
          lengthCountdown=getStatementLength(lineNr);
        }
      }
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,timesLineExecuted,line));
    }
  }
 else {
    for (int lineNr=1; in.hasNext(); lineNr++) {
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
    }
  }
  return new FileStats(baseUri,getSourceUri(),lineCoverageRecords,isSeparateFile());
}",0.9976612094888072
101247,"private AstNode newInstrumentationNode(final int lineNr){
  final ExpressionStatement instrumentationNode=new ExpressionStatement();
  final UnaryExpression inc=new UnaryExpression();
  inc.setIsPostfix(true);
  inc.setOperator(Token.INC);
  final ElementGet outer=new ElementGet();
  final ElementGet inner=new ElementGet();
  outer.setTarget(inner);
  final Name covDataVar=new Name();
  covDataVar.setIdentifier(coverageVariableName);
  inner.setTarget(covDataVar);
  final StringLiteral fileName=new StringLiteral();
  fileName.setValue(data.getSourceName());
  fileName.setQuoteCharacter('\'');
  inner.setElement(fileName);
  final NumberLiteral index=new NumberLiteral();
  index.setNumber(lineNr);
  index.setValue(Integer.toString(lineNr));
  outer.setElement(index);
  inc.setOperand(outer);
  instrumentationNode.setExpression(inc);
  instrumentationNode.setHasResult();
  return instrumentationNode;
}","private AstNode newInstrumentationNode(final int lineNr){
  final ExpressionStatement instrumentationNode=new ExpressionStatement();
  final UnaryExpression inc=new UnaryExpression();
  inc.setIsPostfix(true);
  inc.setOperator(Token.INC);
  final ElementGet outer=new ElementGet();
  final ElementGet inner=new ElementGet();
  outer.setTarget(inner);
  final Name covDataVar=new Name();
  covDataVar.setIdentifier(coverageVariableName);
  inner.setTarget(covDataVar);
  final StringLiteral fileName=new StringLiteral();
  fileName.setValue(data.getSourceUriAsString());
  fileName.setQuoteCharacter('\'');
  inner.setElement(fileName);
  final NumberLiteral index=new NumberLiteral();
  index.setNumber(lineNr);
  index.setValue(Integer.toString(lineNr));
  outer.setElement(index);
  inc.setOperand(outer);
  instrumentationNode.setExpression(inc);
  instrumentationNode.setHasResult();
  return instrumentationNode;
}",0.9918166939443536
101248,"@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  try {
    final String normalizedSourceName=handleEvals(handleInlineScripts(sourceName));
    if (shouldIgnore(normalizedSourceName)) {
      return sourceCode;
    }
    final boolean separateFile=isSeparateFile(sourceName,normalizedSourceName);
    final URI sourceUri=URI.create(normalizedSourceName).normalize();
    if (config.isCacheInstrumentedCode() && instrumentedScriptCache.containsKey(sourceUri)) {
      final ScriptData data=instrumentedScriptCache.get(sourceUri);
      scriptDataList.add(data);
      return data.getInstrumentedSourceCode();
    }
    final ScriptData data=new ScriptData(sourceUri.toString(),sourceCode,separateFile);
    scriptDataList.add(data);
    final CompilerEnvirons environs=new CompilerEnvirons();
    environs.initFromContext(contextFactory.enterContext());
    final AstRoot root=new Parser(environs).parse(data.getSourceCode(),data.getSourceName(),lineNumber);
    root.visit(new InstrumentingVisitor(data,lineNumber - 1));
    final String treeSource=root.toSource();
    final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
    buf.append(initializingCode);
    buf.append(String.format(""String_Node_Str"",coverageVariableName,escapePath(data.getSourceName())));
    for (    final Integer i : data.getLineNumbersOfAllStatements()) {
      buf.append(String.format(arrayInitializer,escapePath(data.getSourceName()),i));
    }
    buf.append(treeSource);
    final String instrumentedCode=buf.toString();
    data.setInstrumentedSourceCode(instrumentedCode);
    if (config.isCacheInstrumentedCode()) {
      instrumentedScriptCache.putIfAbsent(URI.create(data.getSourceName()),data);
    }
    if (config.isOutputInstrumentedFiles() && separateFile) {
synchronized (writtenToDisk) {
        try {
          if (!writtenToDisk.contains(data.getSourceName())) {
            final File file=new File(data.getSourceName());
            final File fileOutputDir=new File(instrumentedFileDirectory,Hashing.md5().hashString(file.getParent()).toString());
            FileUtils.mkdir(fileOutputDir.getAbsolutePath());
            final File outputFile=new File(fileOutputDir,file.getName());
            logger.info(""String_Node_Str"",outputFile.getAbsolutePath());
            ByteStreams.write(instrumentedCode.getBytes(""String_Node_Str""),Files.newOutputStreamSupplier(outputFile));
            writtenToDisk.add(data.getSourceName());
          }
        }
 catch (        final IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
    return instrumentedCode;
  }
 catch (  final RuntimeException e) {
    logger.error(""String_Node_Str"",e);
    return sourceCode;
  }
}","@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  try {
    final String normalizedSourceName=handleEvals(handleInlineScripts(sourceName));
    if (shouldIgnore(normalizedSourceName)) {
      return sourceCode;
    }
    final boolean separateFile=isSeparateFile(sourceName,normalizedSourceName);
    final URI sourceUri=URI.create(normalizedSourceName).normalize();
    if (config.isCacheInstrumentedCode() && instrumentedScriptCache.containsKey(sourceUri)) {
      final ScriptData data=instrumentedScriptCache.get(sourceUri);
      scriptDataList.add(data);
      return data.getInstrumentedSourceCode();
    }
    final ScriptData data=new ScriptData(sourceUri,sourceCode,separateFile);
    scriptDataList.add(data);
    final CompilerEnvirons environs=new CompilerEnvirons();
    environs.initFromContext(contextFactory.enterContext());
    final AstRoot root=new Parser(environs).parse(data.getSourceCode(),data.getSourceUriAsString(),lineNumber);
    root.visit(new InstrumentingVisitor(data,lineNumber - 1));
    final String treeSource=root.toSource();
    final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
    buf.append(initializingCode);
    buf.append(String.format(""String_Node_Str"",coverageVariableName,escapePath(data.getSourceUriAsString())));
    for (    final Integer i : data.getLineNumbersOfAllStatements()) {
      buf.append(String.format(arrayInitializer,escapePath(data.getSourceUriAsString()),i));
    }
    buf.append(treeSource);
    final String instrumentedCode=buf.toString();
    data.setInstrumentedSourceCode(instrumentedCode);
    if (config.isCacheInstrumentedCode()) {
      instrumentedScriptCache.putIfAbsent(sourceUri,data);
    }
    if (config.isOutputInstrumentedFiles() && separateFile) {
synchronized (writtenToDisk) {
        try {
          if (!writtenToDisk.contains(sourceUri)) {
            final String parent=UriUtil.getParentOfLastSegmentOrHost(sourceUri);
            final String fileName=UriUtil.getLastSegmentOrHost(sourceUri);
            final File fileOutputDir=new File(instrumentedFileDirectory,Hashing.md5().hashString(parent).toString());
            FileUtils.mkdir(fileOutputDir.getAbsolutePath());
            final File outputFile=new File(fileOutputDir,fileName);
            logger.info(""String_Node_Str"",outputFile.getAbsolutePath());
            ByteStreams.write(instrumentedCode.getBytes(""String_Node_Str""),Files.newOutputStreamSupplier(outputFile));
            writtenToDisk.add(sourceUri);
          }
        }
 catch (        final IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
    return instrumentedCode;
  }
 catch (  final RuntimeException e) {
    logger.error(""String_Node_Str"",e);
    return sourceCode;
  }
}",0.9334701556353686
101249,"@Override public List<URI> fetch(final URI baseUri,final String includes,final String excludes){
  return ImmutableList.of(baseUri);
}","@Override public List<URI> fetch(final URI baseUri,final String includes,final String excludes){
  if (StringUtils.isNotBlank(includes) || StringUtils.isNotBlank(excludes)) {
    logger.warn(""String_Node_Str"");
  }
  return ImmutableList.of(baseUri);
}",0.694300518134715
101250,"/** 
 * fix the fact that NumberLiteral outputs hexadecimal numbers without the '0x' part (e.g. 0xFF becomes FF when toSource() is called), which results in invalid JS syntax. Using the actual number value instead to fix this (shouldn't break anything)
 */
private void handleNumberLiteralBug(final AstNode node){
  if (node.getType() == Token.NUMBER) {
    final NumberLiteral numberLiteral=(NumberLiteral)node;
    numberLiteral.setValue(getValue(numberLiteral));
    handleVoidBug(node.getParent());
  }
}","/** 
 * fix the fact that NumberLiteral outputs hexadecimal numbers without the '0x' part (e.g. 0xFF becomes FF when toSource() is called), which results in invalid JS syntax. Using the actual number value instead to fix this (shouldn't break anything)
 */
private void handleNumberLiteralBug(final AstNode node){
  if (node.getType() == Token.NUMBER) {
    final NumberLiteral numberLiteral=(NumberLiteral)node;
    numberLiteral.setValue(getValue(numberLiteral));
  }
}",0.96220633299285
101251,"@Override public boolean visit(final AstNode node){
  handleVoidBug(node);
  handleNumberLiteralBug(node);
  if (isExecutableBlock(node)) {
    addInstrumentationSnippetFor(node);
  }
  return true;
}","@Override public boolean visit(final AstNode node){
  handleNumberLiteralBug(node);
  if (isExecutableBlock(node)) {
    addInstrumentationSnippetFor(node);
  }
  return true;
}",0.9389920424403184
101252,"public void run() throws IOException {
  FileUtils.mkdir(outputDir.getAbsolutePath());
  @SuppressWarnings(""String_Node_Str"") final List<File> tests=FileUtils.getFiles(baseDir,includes,excludes);
  if (tests.isEmpty()) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"",tests.size());
  threadCount=Math.min(threadCount,tests.size());
  logger.info(""String_Node_Str"",threadCount);
  logger.info(""String_Node_Str"",outputStrategy);
  if (!includeInlineScripts) {
    noInstrumentPatterns.add(inlineScriptRe);
    noInstrumentPatterns.add(""String_Node_Str"");
    noInstrumentPatterns.add(""String_Node_Str"");
  }
  if (!noInstrumentPatterns.isEmpty()) {
    logger.info(""String_Node_Str"",StringUtils.join(noInstrumentPatterns,""String_Node_Str""));
  }
  final Set<Pattern> ignorePatterns=createPatterns();
  final ExecutorService executorService=Executors.newFixedThreadPool(threadCount);
  final CompletionService<RunStats> completionService=new ExecutorCompletionService<RunStats>(executorService);
  for (  final File test : tests) {
    completionService.submit(new Callable<RunStats>(){
      @Override public RunStats call(){
        logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
        try {
          final RunStats runStats=runTest(test,ignorePatterns);
          if (runStats == RunStats.EMPTY) {
            logger.warn(""String_Node_Str"",test);
          }
 else           if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
            writeRunStats(runStats);
          }
          return runStats;
        }
 catch (        final IOException e) {
          return RunStats.EMPTY;
        }
      }
    }
);
  }
  final List<RunStats> allRunStats=Lists.newLinkedList();
  try {
    for (    final File test : tests) {
      try {
        final Future<RunStats> future=completionService.take();
        final RunStats runStats=future.get();
        allRunStats.add(runStats);
      }
 catch (      final Exception e) {
        logger.warn(""String_Node_Str"",test.getAbsolutePath(),e.getMessage());
        logger.debug(e.getMessage(),e);
      }
    }
  }
  finally {
    executorService.shutdown();
  }
  logger.info(""String_Node_Str"");
  if (outputStrategy.contains(OutputStrategy.TOTAL)) {
    final RunStats totalStats=new RunStats(new File(outputDir,reportName),""String_Node_Str"");
    if (sourcesToPreload != null) {
      @SuppressWarnings(""String_Node_Str"") final List<File> filesToPreload=FileUtils.getFiles(baseDir,sourcesToPreload,null);
      final WebClient webClient=localClient.get();
      final ScriptInstrumenter instrumenter=new ScriptInstrumenter(webClient.getJavaScriptEngine().getContextFactory(),coverageVariableName);
      for (      final File file : filesToPreload) {
        instrumenter.preProcess(null,org.apache.commons.io.FileUtils.readFileToString(file),""String_Node_Str"" + file.getAbsolutePath(),0,null);
      }
      for (      final ScriptData data : instrumenter.getScriptDataList()) {
        final FileStats fileStats=getFileStatsFromScriptData(emptyCoverageMapOfFiles,data);
        totalStats.add(fileStats);
      }
    }
    for (    final RunStats runStats : allRunStats) {
      if (runStats != RunStats.EMPTY) {
        for (        final FileStats fileStats : runStats) {
          totalStats.add(fileStats);
        }
      }
    }
    writeRunStats(totalStats);
  }
}","public void run() throws IOException {
  FileUtils.mkdir(outputDir.getAbsolutePath());
  @SuppressWarnings(""String_Node_Str"") final List<File> tests=FileUtils.getFiles(baseDir,includes,excludes);
  if (tests.isEmpty()) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"",tests.size());
  threadCount=Math.min(threadCount,tests.size());
  logger.info(""String_Node_Str"",threadCount);
  logger.info(""String_Node_Str"",outputStrategy);
  if (!includeInlineScripts) {
    noInstrumentPatterns.add(inlineScriptRe);
    noInstrumentPatterns.add(""String_Node_Str"");
    noInstrumentPatterns.add(""String_Node_Str"");
  }
  if (!noInstrumentPatterns.isEmpty()) {
    logger.info(""String_Node_Str"",StringUtils.join(noInstrumentPatterns,""String_Node_Str""));
  }
  final Set<Pattern> ignorePatterns=createPatterns();
  final ExecutorService executorService=Executors.newFixedThreadPool(threadCount);
  final CompletionService<RunStats> completionService=new ExecutorCompletionService<RunStats>(executorService);
  for (  final File test : tests) {
    completionService.submit(new Callable<RunStats>(){
      @Override public RunStats call(){
        logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
        try {
          final RunStats runStats=runTest(test,ignorePatterns);
          if (runStats == RunStats.EMPTY) {
            logger.warn(""String_Node_Str"",test);
          }
 else           if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
            writeRunStats(runStats);
          }
          return runStats;
        }
 catch (        final IOException e) {
          return RunStats.EMPTY;
        }
      }
    }
);
  }
  final List<RunStats> allRunStats=Lists.newLinkedList();
  try {
    for (    final File test : tests) {
      try {
        final Future<RunStats> future=completionService.take();
        final RunStats runStats=future.get();
        allRunStats.add(runStats);
      }
 catch (      final Exception e) {
        logger.warn(""String_Node_Str"",test.getAbsolutePath(),e.getMessage());
        logger.debug(e.getMessage(),e);
      }
    }
  }
  finally {
    executorService.shutdown();
  }
  logger.info(""String_Node_Str"");
  if (outputStrategy.contains(OutputStrategy.TOTAL)) {
    final RunStats totalStats=new RunStats(new File(outputDir,reportName),""String_Node_Str"");
    if (sourcesToPreload != null) {
      @SuppressWarnings(""String_Node_Str"") final List<File> filesToPreload=FileUtils.getFiles(baseDir,sourcesToPreload,null);
      final WebClient webClient=localClient.get();
      final ScriptInstrumenter instrumenter=new ScriptInstrumenter(webClient.getJavaScriptEngine().getContextFactory(),coverageVariableName);
      for (      final File file : filesToPreload) {
        instrumenter.preProcess(null,org.apache.commons.io.FileUtils.readFileToString(file),""String_Node_Str"" + file.getAbsolutePath(),0,null);
      }
      for (      final ScriptData data : instrumenter.getScriptDataList()) {
        final Map<Integer,Double> coverageData=Maps.newHashMap();
        for (        final Integer lineNumber : data.getLineNumbersOfAllStatements()) {
          coverageData.put(lineNumber,0D);
        }
        final FileStats fileStats=getFileStatsFromScriptData(coverageData,data);
        totalStats.add(fileStats);
      }
    }
    for (    final RunStats runStats : allRunStats) {
      if (runStats != RunStats.EMPTY) {
        for (        final FileStats fileStats : runStats) {
          totalStats.add(fileStats);
        }
      }
    }
    writeRunStats(totalStats);
  }
}",0.9674285714285714
101253,"private FileStats getFileStatsFromScriptData(final Map<String,Map<Integer,Double>> allCoverageData,final ScriptData data){
  final Scanner in=new Scanner(data.getSourceCode());
  final Map<Integer,Double> coverageData=allCoverageData.get(data.getSourceName());
  final List<LineCoverageRecord> lineCoverageRecords=Lists.newArrayList();
  if (!data.getLineNumbersOfAllStatements().isEmpty()) {
    for (int lineNr=1; lineNr < data.getLineNumberOfFirstStatement() && in.hasNext(); lineNr++) {
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
    }
    for (int lineNr=data.getLineNumberOfFirstStatement(), lengthCountdown=0; in.hasNext(); lineNr++) {
      final String line=in.nextLine();
      final Double coverageEntry=coverageData.get(lineNr);
      final int timesLineExecuted;
      if (coverageEntry == null) {
        final int lineLength=line.trim().length();
        if (lengthCountdown > 0 && lineLength > 0) {
          lengthCountdown-=lineLength;
          timesLineExecuted=-1;
        }
 else {
          timesLineExecuted=data.hasStatement(lineNr) ? 0 : -1;
        }
      }
 else {
        timesLineExecuted=coverageEntry.intValue();
        if (data.getStatementLength(lineNr) != null) {
          lengthCountdown=data.getStatementLength(lineNr);
        }
      }
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,timesLineExecuted,line));
    }
  }
 else {
    for (int lineNr=1; in.hasNext(); lineNr++) {
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
    }
  }
  return new FileStats(data.getSourceName(),lineCoverageRecords,data.isSeparateFile());
}","private FileStats getFileStatsFromScriptData(final Map<Integer,Double> coverageData,final ScriptData data){
  final Scanner in=new Scanner(data.getSourceCode());
  final List<LineCoverageRecord> lineCoverageRecords=Lists.newArrayList();
  if (!data.getLineNumbersOfAllStatements().isEmpty()) {
    for (int lineNr=1; lineNr < data.getLineNumberOfFirstStatement() && in.hasNext(); lineNr++) {
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
    }
    for (int lineNr=data.getLineNumberOfFirstStatement(), lengthCountdown=0; in.hasNext(); lineNr++) {
      final String line=in.nextLine();
      final Double coverageEntry=coverageData.get(lineNr);
      final int timesLineExecuted;
      if (coverageEntry == null) {
        final int lineLength=line.trim().length();
        if (lengthCountdown > 0 && lineLength > 0) {
          lengthCountdown-=lineLength;
          timesLineExecuted=-1;
        }
 else {
          timesLineExecuted=data.hasStatement(lineNr) ? 0 : -1;
        }
      }
 else {
        timesLineExecuted=coverageEntry.intValue();
        if (data.getStatementLength(lineNr) != null) {
          lengthCountdown=data.getStatementLength(lineNr);
        }
      }
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,timesLineExecuted,line));
    }
  }
 else {
    for (int lineNr=1; in.hasNext(); lineNr++) {
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
    }
  }
  return new FileStats(data.getSourceName(),lineCoverageRecords,data.isSeparateFile());
}",0.9164319248826291
101254,"@SuppressWarnings(""String_Node_Str"") private RunStats collectAndWriteRunStats(final File test,final ScriptInstrumenter instrumenter,final NativeObject allCoverageData) throws IOException {
  final RunStats runStats=new RunStats(test);
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final FileStats fileStats=getFileStatsFromScriptData(allCoverageData,data);
    runStats.add(fileStats);
  }
  return runStats;
}","@SuppressWarnings(""String_Node_Str"") private RunStats collectAndWriteRunStats(final File test,final ScriptInstrumenter instrumenter,final NativeObject allCoverageData) throws IOException {
  final RunStats runStats=new RunStats(test);
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Map<Integer,Double> coverageData=(Map)allCoverageData.get(data.getSourceName());
    final FileStats fileStats=getFileStatsFromScriptData(coverageData,data);
    runStats.add(fileStats);
  }
  return runStats;
}",0.9002079002079002
101255,"@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  try {
    final String normalizedSourceName=handleEvals(handleInlineScripts(sourceName));
    if (shouldIgnore(normalizedSourceName)) {
      return sourceCode;
    }
    final boolean separateFile=isSeparateFile(sourceName,normalizedSourceName);
    final String fullSourcePath;
    if (separateFile) {
      if (htmlPage != null) {
        fullSourcePath=getFullSourcePath(htmlPage,sourceName);
      }
 else {
        fullSourcePath=new File(normalizedSourceName).getAbsolutePath();
      }
    }
 else {
      fullSourcePath=normalizedSourceName;
    }
    if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(fullSourcePath)) {
      final ScriptData data=instrumentedScriptCache.get(fullSourcePath);
      scriptDataList.add(data);
      return data.getInstrumentedSourceCode();
    }
    final ScriptData data=new ScriptData(fullSourcePath,sourceCode,separateFile);
    scriptDataList.add(data);
    final CompilerEnvirons environs=new CompilerEnvirons();
    environs.initFromContext(contextFactory.enterContext());
    final AstRoot root=new Parser(environs).parse(sourceCode,fullSourcePath,lineNumber);
    root.visit(new InstrumentingVisitor(data,lineNumber - 1));
    final String treeSource=root.toSource();
    final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
    buf.append(initializingCode);
    buf.append(String.format(""String_Node_Str"",coverageVariableName,fullSourcePath));
    for (    final Integer i : data.getLineNumbersOfAllStatements()) {
      buf.append(String.format(arrayInitializer,data.getSourceName(),i));
    }
    buf.append(treeSource);
    final String instrumentedCode=buf.toString();
    data.setInstrumentedSourceCode(instrumentedCode);
    if (cacheInstrumentedCode) {
      instrumentedScriptCache.putIfAbsent(fullSourcePath,data);
    }
    if (outputInstrumentedFiles && separateFile) {
synchronized (writtenToDisk) {
        try {
          if (!writtenToDisk.contains(fullSourcePath)) {
            final File file=new File(fullSourcePath);
            final File fileOutputDir=new File(outputDir,Hashing.md5().hashString(file.getParent()).toString());
            FileUtils.mkdir(fileOutputDir.getAbsolutePath());
            final File outputFile=new File(fileOutputDir,file.getName());
            logger.info(""String_Node_Str"",outputFile.getAbsolutePath());
            ByteStreams.write(instrumentedCode.getBytes(""String_Node_Str""),Files.newOutputStreamSupplier(outputFile));
            writtenToDisk.add(fullSourcePath);
          }
        }
 catch (        final IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
    return instrumentedCode;
  }
 catch (  final RuntimeException e) {
    logger.error(""String_Node_Str"",e);
    return sourceCode;
  }
}","@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  try {
    final String normalizedSourceName=handleEvals(handleInlineScripts(sourceName));
    if (shouldIgnore(normalizedSourceName)) {
      return sourceCode;
    }
    final boolean separateFile=isSeparateFile(sourceName,normalizedSourceName);
    final String fullSourcePath;
    if (separateFile) {
      if (htmlPage != null) {
        fullSourcePath=getFullSourcePath(htmlPage,sourceName);
      }
 else {
        fullSourcePath=new File(normalizedSourceName).getAbsolutePath();
      }
    }
 else {
      fullSourcePath=normalizedSourceName;
    }
    if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(fullSourcePath)) {
      final ScriptData data=instrumentedScriptCache.get(fullSourcePath);
      scriptDataList.add(data);
      return data.getInstrumentedSourceCode();
    }
    final ScriptData data=new ScriptData(fullSourcePath,sourceCode,separateFile);
    scriptDataList.add(data);
    final CompilerEnvirons environs=new CompilerEnvirons();
    environs.initFromContext(contextFactory.enterContext());
    final AstRoot root=new Parser(environs).parse(data.getSourceCode(),data.getSourceName(),lineNumber);
    root.visit(new InstrumentingVisitor(data,lineNumber - 1));
    final String treeSource=root.toSource();
    final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
    buf.append(initializingCode);
    buf.append(String.format(""String_Node_Str"",coverageVariableName,escapePath(data.getSourceName())));
    for (    final Integer i : data.getLineNumbersOfAllStatements()) {
      buf.append(String.format(arrayInitializer,escapePath(data.getSourceName()),i));
    }
    buf.append(treeSource);
    final String instrumentedCode=buf.toString();
    data.setInstrumentedSourceCode(instrumentedCode);
    if (cacheInstrumentedCode) {
      instrumentedScriptCache.putIfAbsent(data.getSourceName(),data);
    }
    if (outputInstrumentedFiles && separateFile) {
synchronized (writtenToDisk) {
        try {
          if (!writtenToDisk.contains(data.getSourceName())) {
            final File file=new File(data.getSourceName());
            final File fileOutputDir=new File(outputDir,Hashing.md5().hashString(file.getParent()).toString());
            FileUtils.mkdir(fileOutputDir.getAbsolutePath());
            final File outputFile=new File(fileOutputDir,file.getName());
            logger.info(""String_Node_Str"",outputFile.getAbsolutePath());
            ByteStreams.write(instrumentedCode.getBytes(""String_Node_Str""),Files.newOutputStreamSupplier(outputFile));
            writtenToDisk.add(data.getSourceName());
          }
        }
 catch (        final IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
    return instrumentedCode;
  }
 catch (  final RuntimeException e) {
    logger.error(""String_Node_Str"",e);
    return sourceCode;
  }
}",0.9622827156444737
101256,"public void run() throws IOException {
  FileUtils.mkdir(outputDir.getAbsolutePath());
  @SuppressWarnings(""String_Node_Str"") final List<File> tests=FileUtils.getFiles(baseDir,includes,excludes);
  if (tests.isEmpty()) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"",tests.size());
  threadCount=Math.min(threadCount,tests.size());
  logger.info(""String_Node_Str"",threadCount);
  logger.info(""String_Node_Str"",outputStrategy);
  if (!includeInlineScripts) {
    noInstrumentPatterns.add(inlineScriptRe);
    noInstrumentPatterns.add(""String_Node_Str"");
    noInstrumentPatterns.add(""String_Node_Str"");
  }
  if (!noInstrumentPatterns.isEmpty()) {
    logger.info(""String_Node_Str"",StringUtils.join(noInstrumentPatterns,""String_Node_Str""));
  }
  final Collection<Pattern> ignorePatterns=createPatterns();
  final ExecutorService executorService=Executors.newFixedThreadPool(threadCount);
  final CompletionService<RunStats> completionService=new ExecutorCompletionService<RunStats>(executorService);
  for (  final File test : tests) {
    completionService.submit(new Callable<RunStats>(){
      @Override public RunStats call(){
        logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
        try {
          final RunStats runStats=runTest(test,ignorePatterns);
          if (runStats == RunStats.EMPTY) {
            logger.warn(""String_Node_Str"",test);
          }
 else           if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
            writeRunStats(runStats);
          }
          return runStats;
        }
 catch (        final IOException e) {
          return RunStats.EMPTY;
        }
      }
    }
);
  }
  final List<RunStats> allRunStats=Lists.newLinkedList();
  try {
    for (    final File test : tests) {
      try {
        final Future<RunStats> future=completionService.take();
        final RunStats runStats=future.get();
        allRunStats.add(runStats);
      }
 catch (      final Exception e) {
        logger.warn(""String_Node_Str"",test.getAbsolutePath(),e.getMessage());
        logger.debug(e.getMessage(),e);
      }
    }
  }
  finally {
    executorService.shutdown();
  }
  logger.info(""String_Node_Str"");
  if (outputStrategy.contains(OutputStrategy.TOTAL)) {
    final RunStats totalStats=new RunStats(new File(outputDir,reportName),""String_Node_Str"");
    if (sourcesToPreload != null) {
      logger.info(""String_Node_Str"",sourcesToPreloadEncoding);
      @SuppressWarnings(""String_Node_Str"") final List<File> filesToPreload=FileUtils.getFiles(baseDir,sourcesToPreload,null);
      logger.info(""String_Node_Str"",filesToPreload.size());
      final WebClient webClient=localClient.get();
      final ScriptInstrumenter instrumenter=new ScriptInstrumenter(webClient.getJavaScriptEngine().getContextFactory(),coverageVariableName);
      for (      final File file : filesToPreload) {
        final String source=CharStreams.toString(Files.newReaderSupplier(file,Charset.forName(sourcesToPreloadEncoding)));
        instrumenter.preProcess(null,source,""String_Node_Str"" + file.getAbsolutePath(),0,null);
      }
      for (      final ScriptData data : instrumenter.getScriptDataList()) {
        final Map<Integer,Double> coverageData=Maps.newHashMap();
        for (        final Integer lineNumber : data.getLineNumbersOfAllStatements()) {
          coverageData.put(lineNumber,0.0);
        }
        final FileStats fileStats=getFileStatsFromScriptData(coverageData,data);
        totalStats.add(fileStats);
      }
    }
    for (    final RunStats runStats : allRunStats) {
      if (runStats != RunStats.EMPTY) {
        for (        final FileStats fileStats : runStats) {
          totalStats.add(fileStats);
        }
      }
    }
    writeRunStats(totalStats);
  }
}","public void run() throws IOException {
  FileUtils.mkdir(outputDir.getAbsolutePath());
  @SuppressWarnings(""String_Node_Str"") final List<File> tests=FileUtils.getFiles(baseDir,includes,excludes);
  if (tests.isEmpty()) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"",tests.size());
  threadCount=Math.min(threadCount,tests.size());
  logger.info(""String_Node_Str"",threadCount);
  logger.info(""String_Node_Str"",outputStrategy);
  if (!includeInlineScripts) {
    noInstrumentPatterns.add(inlineScriptRe);
    noInstrumentPatterns.add(""String_Node_Str"");
    noInstrumentPatterns.add(""String_Node_Str"");
  }
  if (!noInstrumentPatterns.isEmpty()) {
    logger.info(""String_Node_Str"",StringUtils.join(noInstrumentPatterns,""String_Node_Str""));
  }
  final Collection<Pattern> ignorePatterns=createPatterns();
  final RunStats totalStats=new RunStats(new File(outputDir,reportName),""String_Node_Str"");
  if (outputStrategy.contains(OutputStrategy.TOTAL) && sourcesToPreload != null) {
    logger.info(""String_Node_Str"",sourcesToPreloadEncoding);
    @SuppressWarnings(""String_Node_Str"") final List<File> filesToPreload=FileUtils.getFiles(baseDir,sourcesToPreload,null);
    logger.info(""String_Node_Str"",filesToPreload.size());
    final WebClient webClient=localClient.get();
    final ScriptInstrumenter instrumenter=new ScriptInstrumenter(webClient.getJavaScriptEngine().getContextFactory(),coverageVariableName);
    for (    final File file : filesToPreload) {
      logger.debug(""String_Node_Str"",file);
      final String source=CharStreams.toString(Files.newReaderSupplier(file,Charset.forName(sourcesToPreloadEncoding)));
      instrumenter.preProcess(null,source,file.getAbsolutePath(),0,null);
    }
    for (    final ScriptData data : instrumenter.getScriptDataList()) {
      final Map<Integer,Double> coverageData=Maps.newHashMap();
      for (      final Integer lineNumber : data.getLineNumbersOfAllStatements()) {
        coverageData.put(lineNumber,0.0);
      }
      final FileStats fileStats=getFileStatsFromScriptData(coverageData,data);
      totalStats.add(fileStats);
    }
  }
  final ExecutorService executorService=Executors.newFixedThreadPool(threadCount);
  final CompletionService<RunStats> completionService=new ExecutorCompletionService<RunStats>(executorService);
  for (  final File test : tests) {
    completionService.submit(new Callable<RunStats>(){
      @Override public RunStats call(){
        logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
        try {
          final RunStats runStats=runTest(test,ignorePatterns);
          if (runStats == RunStats.EMPTY) {
            logger.warn(""String_Node_Str"",test);
          }
 else           if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
            writeRunStats(runStats);
          }
          return runStats;
        }
 catch (        final IOException e) {
          return RunStats.EMPTY;
        }
      }
    }
);
  }
  final List<RunStats> allRunStats=Lists.newLinkedList();
  try {
    for (    final File test : tests) {
      try {
        final Future<RunStats> future=completionService.take();
        final RunStats runStats=future.get();
        allRunStats.add(runStats);
      }
 catch (      final Exception e) {
        logger.warn(""String_Node_Str"",test.getAbsolutePath(),e.getMessage());
        logger.debug(e.getMessage(),e);
      }
    }
  }
  finally {
    executorService.shutdown();
  }
  logger.info(""String_Node_Str"");
  if (outputStrategy.contains(OutputStrategy.TOTAL)) {
    for (    final RunStats runStats : allRunStats) {
      if (runStats != RunStats.EMPTY) {
        for (        final FileStats fileStats : runStats) {
          totalStats.add(fileStats);
        }
      }
    }
    writeRunStats(totalStats);
  }
}",0.6645710543549443
101257,"void add(final FileStats newStats){
  String key;
  try {
    key=newStats.getFilePath();
  }
 catch (  final IllegalArgumentException e) {
    logger.debug(""String_Node_Str"",e);
    key=newStats.getFullName();
  }
  final FileStats oldStats=fileStatsMap.get(key);
  if (oldStats != null) {
    fileStatsMap.put(key,FileStats.merge(newStats,oldStats));
  }
 else {
    fileStatsMap.put(key,newStats);
  }
}","void add(final FileStats newStats){
  final String key=newStats.getFullName();
  final FileStats oldStats=fileStatsMap.get(key);
  if (oldStats != null) {
    fileStatsMap.put(key,FileStats.merge(newStats,oldStats));
  }
 else {
    fileStatsMap.put(key,newStats);
  }
}",0.757396449704142
101258,"@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  final String normalizedSourceName=handleEvals(handleInlineScripts(sourceName));
  if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(normalizedSourceName)) {
    final ScriptData data=instrumentedScriptCache.get(normalizedSourceName);
    scriptDataList.add(data);
    return data.getInstrumentedSourceCode();
  }
  if (shouldIgnore(normalizedSourceName)) {
    return sourceCode;
  }
  final boolean separateFile=isSeparateFile(sourceName,normalizedSourceName);
  final ScriptData data=new ScriptData(normalizedSourceName,sourceCode,separateFile);
  scriptDataList.add(data);
  final CompilerEnvirons environs=new CompilerEnvirons();
  environs.initFromContext(contextFactory.enterContext());
  final AstRoot root=new Parser(environs).parse(sourceCode,normalizedSourceName,lineNumber);
  root.visit(new InstrumentingVisitor(data,lineNumber - 1));
  final String treeSource=root.toSource();
  final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
  buf.append(initializingCode);
  buf.append(String.format(""String_Node_Str"",coverageVariableName,normalizedSourceName));
  for (  final Integer i : data.getLineNumbersOfAllStatements()) {
    buf.append(String.format(arrayInitializer,data.getSourceName(),i));
  }
  buf.append(treeSource);
  final String instrumentedCode=buf.toString();
  data.setInstrumentedSourceCode(instrumentedCode);
  if (cacheInstrumentedCode) {
    instrumentedScriptCache.putIfAbsent(normalizedSourceName,data);
  }
  if (outputInstrumentedFiles && separateFile) {
synchronized (writtenToDisk) {
      try {
        if (!writtenToDisk.contains(normalizedSourceName)) {
          final File file=new File(normalizedSourceName);
          final File fileOutputDir=new File(outputDir,Hashing.md5().hashString(file.getParent()).toString());
          FileUtils.mkdir(fileOutputDir.getAbsolutePath());
          final File outputFile=new File(fileOutputDir,file.getName());
          logger.info(""String_Node_Str"",outputFile.getAbsolutePath());
          ByteStreams.write(instrumentedCode.getBytes(""String_Node_Str""),Files.newOutputStreamSupplier(outputFile));
          writtenToDisk.add(normalizedSourceName);
        }
      }
 catch (      final IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return instrumentedCode;
}","@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  final String normalizedSourceName=handleEvals(handleInlineScripts(sourceName));
  final boolean separateFile=isSeparateFile(sourceName,normalizedSourceName);
  final String fullSourcePath;
  if (separateFile) {
    if (htmlPage != null) {
      fullSourcePath=getFullSourcePath(htmlPage,sourceName);
    }
 else {
      fullSourcePath=new File(normalizedSourceName).getAbsolutePath();
    }
  }
 else {
    fullSourcePath=normalizedSourceName;
  }
  if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(fullSourcePath)) {
    final ScriptData data=instrumentedScriptCache.get(fullSourcePath);
    scriptDataList.add(data);
    return data.getInstrumentedSourceCode();
  }
  if (shouldIgnore(fullSourcePath)) {
    return sourceCode;
  }
  final ScriptData data=new ScriptData(fullSourcePath,sourceCode,separateFile);
  scriptDataList.add(data);
  final CompilerEnvirons environs=new CompilerEnvirons();
  environs.initFromContext(contextFactory.enterContext());
  final AstRoot root=new Parser(environs).parse(sourceCode,fullSourcePath,lineNumber);
  root.visit(new InstrumentingVisitor(data,lineNumber - 1));
  final String treeSource=root.toSource();
  final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
  buf.append(initializingCode);
  buf.append(String.format(""String_Node_Str"",coverageVariableName,fullSourcePath));
  for (  final Integer i : data.getLineNumbersOfAllStatements()) {
    buf.append(String.format(arrayInitializer,data.getSourceName(),i));
  }
  buf.append(treeSource);
  final String instrumentedCode=buf.toString();
  data.setInstrumentedSourceCode(instrumentedCode);
  if (cacheInstrumentedCode) {
    instrumentedScriptCache.putIfAbsent(fullSourcePath,data);
  }
  if (outputInstrumentedFiles && separateFile) {
synchronized (writtenToDisk) {
      try {
        if (!writtenToDisk.contains(fullSourcePath)) {
          final File file=new File(fullSourcePath);
          final File fileOutputDir=new File(outputDir,Hashing.md5().hashString(file.getParent()).toString());
          FileUtils.mkdir(fileOutputDir.getAbsolutePath());
          final File outputFile=new File(fileOutputDir,file.getName());
          logger.info(""String_Node_Str"",outputFile.getAbsolutePath());
          ByteStreams.write(instrumentedCode.getBytes(""String_Node_Str""),Files.newOutputStreamSupplier(outputFile));
          writtenToDisk.add(fullSourcePath);
        }
      }
 catch (      final IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return instrumentedCode;
}",0.7606163096580233
101259,"private void addInstrumentationSnippetFor(final AstNode node){
  final AstNode parent=node.getParent();
  final int type=node.getType();
  final int parentType=parent.getType();
  if (type == WHILE || type == FOR || type == DO) {
    fixLoops((Loop)node);
  }
  if (type == CASE) {
    handleSwitchCase((SwitchCase)node);
  }
 else   if (type == IF && parentType == IF) {
    final IfStatement elseIfStatement=(IfStatement)node;
    final IfStatement ifStatement=(IfStatement)parent;
    if (ifStatement.getElsePart() == elseIfStatement) {
      flattenElseIf(elseIfStatement,ifStatement);
      data.addExecutableLine(getActualLineNumber(node),node.getLength());
    }
  }
 else   if (parentType != CASE) {
    if (parent.hasChildren()) {
      parent.addChildBefore(newInstrumentationNode(getActualLineNumber(node)),node);
    }
 else {
      final Block block=newInstrumentedBlock(node);
      if (parentType == IF) {
        final IfStatement ifStatement=(IfStatement)parent;
        if (ifStatement.getThenPart() == node) {
          ifStatement.setThenPart(block);
        }
 else         if (ifStatement.getElsePart() == node) {
          ifStatement.setElsePart(block);
        }
      }
 else       if (parentType == WHILE || parentType == FOR || parentType == DO) {
        ((Loop)parent).setBody(block);
      }
 else {
        logger.warn(""String_Node_Str"",parent.toSource());
      }
    }
    data.addExecutableLine(getActualLineNumber(node),node.getLength());
  }
}","private void addInstrumentationSnippetFor(final AstNode node){
  final AstNode parent=node.getParent();
  final int type=node.getType();
  final int parentType=parent.getType();
  if (type == WHILE || type == FOR || type == DO) {
    fixLoops((Loop)node);
  }
  if (type == IF) {
    fixIf((IfStatement)node);
  }
  if (type == CASE) {
    handleSwitchCase((SwitchCase)node);
  }
 else   if (type == IF && parentType == IF) {
    final IfStatement elseIfStatement=(IfStatement)node;
    final IfStatement ifStatement=(IfStatement)parent;
    if (ifStatement.getElsePart() == elseIfStatement) {
      flattenElseIf(elseIfStatement,ifStatement);
      data.addExecutableLine(getActualLineNumber(node),node.getLength());
    }
  }
 else   if (parentType != CASE) {
    if (parent.hasChildren()) {
      parent.addChildBefore(newInstrumentationNode(getActualLineNumber(node)),node);
    }
 else {
      final Block block=newInstrumentedBlock(node);
      if (parentType == IF) {
        final IfStatement ifStatement=(IfStatement)parent;
        if (ifStatement.getThenPart() == node) {
          ifStatement.setThenPart(block);
        }
 else         if (ifStatement.getElsePart() == node) {
          ifStatement.setElsePart(block);
        }
      }
 else       if (parentType == WHILE || parentType == FOR || parentType == DO) {
        ((Loop)parent).setBody(block);
      }
 else {
        logger.warn(""String_Node_Str"",parent.toSource());
      }
    }
    data.addExecutableLine(getActualLineNumber(node),node.getLength());
  }
}",0.982083609820836
101260,"@Test public void preProcess(){
  final String sourceName=""String_Node_Str"";
  final ScriptInstrumenter instrumenter=new ScriptInstrumenter(factory,COVERAGE_VARIABLE_NAME);
  instrumenter.preProcess(htmlPage,Data.getClassJsSourceCode(),sourceName,1,htmlElement);
  assertEquals(1,instrumenter.getScriptDataList().size());
  final ScriptData classJsData=instrumenter.getScriptDataList().get(0);
  assertEquals(""String_Node_Str"",classJsData.getSourceName());
  assertEquals(5,classJsData.getLineNumberOfFirstStatement());
  assertEquals(106,classJsData.getNumberOfStatements());
  assertEquals(Data.getClassJsInstrumented(),classJsData.getInstrumentedSourceCode());
}","@Test public void preProcess(){
  final String sourceName=""String_Node_Str"";
  final ScriptInstrumenter instrumenter=new ScriptInstrumenter(factory,COVERAGE_VARIABLE_NAME);
  instrumenter.preProcess(htmlPage,Data.getClassJsSourceCode(),sourceName,1,htmlElement);
  assertEquals(1,instrumenter.getScriptDataList().size());
  final ScriptData classJsData=instrumenter.getScriptDataList().get(0);
  assertEquals(""String_Node_Str"",classJsData.getSourceName());
  assertEquals(5,classJsData.getLineNumberOfFirstStatement());
  assertEquals(110,classJsData.getNumberOfStatements());
  assertEquals(Data.getClassJsInstrumented(),classJsData.getInstrumentedSourceCode());
}",0.9984962406015038
101261,"private String getRelativeName(String fullName){
  String relativeName;
  try {
    relativeName=ResourceUtils.getRelativePath(fullName,new File(System.getProperty(""String_Node_Str"")).toURI().toString(),File.separator);
  }
 catch (  final Exception e) {
    logger.debug(e.getMessage(),e);
    relativeName=fullName;
  }
  return relativeName;
}","public String getRelativeName(){
  return normalizeFileSeparators(relativeName);
}",0.2336448598130841
101262,"void add(final FileStats newStats){
  final String key=newStats.fullName;
  final FileStats oldStats=fileStatsMap.get(key);
  if (oldStats != null) {
    fileStatsMap.put(key,FileStats.merge(newStats,oldStats));
  }
 else {
    fileStatsMap.put(key,newStats);
  }
}","void add(final FileStats newStats){
  final String key=newStats.getFullName();
  final FileStats oldStats=fileStatsMap.get(key);
  if (oldStats != null) {
    fileStatsMap.put(key,FileStats.merge(newStats,oldStats));
  }
 else {
    fileStatsMap.put(key,newStats);
  }
}",0.9869158878504672
101263,"private RunStats collectAndWriteRunStats(final File test,final ScriptInstrumenter instrumenter,final NativeObject allCoverageData) throws IOException {
  final RunStats runStats=new RunStats(test);
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Scanner in=new Scanner(data.getSourceCode());
    final NativeObject coverageData=(NativeObject)allCoverageData.get(data.getSourceName());
    final List<LineCoverageRecord> lineCoverageRecords=Lists.newArrayList();
    if (!data.getLineNumbersOfAllStatements().isEmpty()) {
      for (int lineNr=1; lineNr < data.getLineNumberOfFirstStatement() && in.hasNext(); lineNr++) {
        lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
      }
      for (int lineNr=data.getLineNumberOfFirstStatement(), lengthCountdown=0; in.hasNext(); lineNr++) {
        final String line=in.nextLine();
        final Double coverageEntry=(Double)coverageData.get(lineNr);
        final int timesLineExecuted;
        if (coverageEntry == null) {
          final int lineLength=line.trim().length();
          if (lengthCountdown > 0 && lineLength > 0) {
            lengthCountdown-=lineLength;
            timesLineExecuted=-1;
          }
 else {
            timesLineExecuted=data.hasStatement(lineNr) ? 0 : -1;
          }
        }
 else {
          timesLineExecuted=coverageEntry.intValue();
          lengthCountdown=data.getStatementLength(lineNr);
        }
        lineCoverageRecords.add(new LineCoverageRecord(lineNr,timesLineExecuted,line));
      }
    }
    runStats.add(new FileStats(data.getSourceName(),lineCoverageRecords));
  }
  return runStats;
}","private RunStats collectAndWriteRunStats(final File test,final ScriptInstrumenter instrumenter,final NativeObject allCoverageData) throws IOException {
  final RunStats runStats=new RunStats(test);
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Scanner in=new Scanner(data.getSourceCode());
    final NativeObject coverageData=(NativeObject)allCoverageData.get(data.getSourceName());
    final List<LineCoverageRecord> lineCoverageRecords=Lists.newArrayList();
    if (!data.getLineNumbersOfAllStatements().isEmpty()) {
      for (int lineNr=1; lineNr < data.getLineNumberOfFirstStatement() && in.hasNext(); lineNr++) {
        lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
      }
      for (int lineNr=data.getLineNumberOfFirstStatement(), lengthCountdown=0; in.hasNext(); lineNr++) {
        final String line=in.nextLine();
        final Double coverageEntry=(Double)coverageData.get(lineNr);
        final int timesLineExecuted;
        if (coverageEntry == null) {
          final int lineLength=line.trim().length();
          if (lengthCountdown > 0 && lineLength > 0) {
            lengthCountdown-=lineLength;
            timesLineExecuted=-1;
          }
 else {
            timesLineExecuted=data.hasStatement(lineNr) ? 0 : -1;
          }
        }
 else {
          timesLineExecuted=coverageEntry.intValue();
          lengthCountdown=data.getStatementLength(lineNr);
        }
        lineCoverageRecords.add(new LineCoverageRecord(lineNr,timesLineExecuted,line));
      }
    }
 else {
      for (int lineNr=1; in.hasNext(); lineNr++) {
        lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
      }
    }
    runStats.add(new FileStats(data.getSourceName(),lineCoverageRecords));
  }
  return runStats;
}",0.9494657811146404
101264,"public CoverageGenerator(final File baseDir,final String includes,final String excludes,final File outputDir){
  Validate.isTrue(baseDir.exists(),""String_Node_Str"");
  this.baseDir=baseDir;
  this.includes=includes;
  this.excludes=excludes;
  this.outputDir=outputDir;
  stringTemplateGroup=new STGroupDir(""String_Node_Str"",'$','$');
}","public CoverageGenerator(final File baseDir,final String includes,final String excludes,final File outputDir){
  Validate.isTrue(baseDir.exists(),""String_Node_Str"");
  this.baseDir=baseDir;
  this.includes=includes;
  this.excludes=excludes;
  this.outputDir=outputDir;
  stringTemplateGroup=new STGroupDir(""String_Node_Str"",'$','$');
  LogFactory.getFactory().setAttribute(""String_Node_Str"",""String_Node_Str"");
  java.util.logging.Logger.getLogger(""String_Node_Str"").setLevel(Level.OFF);
  java.util.logging.Logger.getLogger(""String_Node_Str"").setLevel(Level.OFF);
}",0.7441860465116279
101265,"public void run() throws IOException {
  FileUtils.mkdir(outputDir.getAbsolutePath());
  @SuppressWarnings(""String_Node_Str"") final List<File> tests=FileUtils.getFiles(baseDir,includes,excludes);
  if (tests.isEmpty()) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"",threadCount);
  logger.info(""String_Node_Str"",outputStrategy);
  final ExecutorService executorService=Executors.newFixedThreadPool(threadCount);
  final CompletionService<RunStats> completionService=new ExecutorCompletionService<RunStats>(executorService);
  for (  final File test : tests) {
    completionService.submit(new Callable<RunStats>(){
      @Override public RunStats call(){
        logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
        try {
          final RunStats runStats=runTest(test);
          if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
            writeRunStats(runStats);
          }
          return runStats;
        }
 catch (        final IOException e) {
          logger.error(e.getMessage(),e);
          return null;
        }
      }
    }
);
  }
  final List<RunStats> allRunStats=Lists.newLinkedList();
  try {
    for (int i=0; i < tests.size(); i++) {
      final Future<RunStats> future=completionService.take();
      final RunStats runStats=future.get();
      allRunStats.add(runStats);
    }
  }
 catch (  final Exception e) {
    logger.debug(e.getMessage(),e);
  }
 finally {
    executorService.shutdown();
  }
  logger.info(""String_Node_Str"");
  if (outputStrategy.contains(OutputStrategy.TOTAL)) {
    final RunStats totalStats=new RunStats(new File(outputDir,reportName),""String_Node_Str"");
    for (    final RunStats runStats : allRunStats) {
      for (      final FileStats fileStats : runStats) {
        totalStats.add(fileStats);
      }
    }
    writeRunStats(totalStats);
  }
}","public void run() throws IOException {
  FileUtils.mkdir(outputDir.getAbsolutePath());
  @SuppressWarnings(""String_Node_Str"") final List<File> tests=FileUtils.getFiles(baseDir,includes,excludes);
  if (tests.isEmpty()) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"",threadCount);
  logger.info(""String_Node_Str"",outputStrategy);
  final ExecutorService executorService=Executors.newFixedThreadPool(threadCount);
  final CompletionService<RunStats> completionService=new ExecutorCompletionService<RunStats>(executorService);
  for (  final File test : tests) {
    completionService.submit(new Callable<RunStats>(){
      @Override public RunStats call(){
        logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
        try {
          final RunStats runStats=runTest(test);
          if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
            writeRunStats(runStats);
          }
          return runStats;
        }
 catch (        final IOException e) {
          return RunStats.EMPTY;
        }
      }
    }
);
  }
  final List<RunStats> allRunStats=Lists.newLinkedList();
  try {
    for (    final File test : tests) {
      try {
        final Future<RunStats> future=completionService.take();
        final RunStats runStats=future.get();
        allRunStats.add(runStats);
      }
 catch (      final Exception e) {
        logger.warn(""String_Node_Str"",test.getAbsolutePath(),e.getMessage());
        logger.debug(e.getMessage(),e);
      }
    }
  }
  finally {
    executorService.shutdown();
  }
  logger.info(""String_Node_Str"");
  if (outputStrategy.contains(OutputStrategy.TOTAL)) {
    final RunStats totalStats=new RunStats(new File(outputDir,reportName),""String_Node_Str"");
    for (    final RunStats runStats : allRunStats) {
      if (runStats != RunStats.EMPTY) {
        for (        final FileStats fileStats : runStats) {
          totalStats.add(fileStats);
        }
      }
    }
    writeRunStats(totalStats);
  }
}",0.898521162672106
101266,"@Override public RunStats call(){
  logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
  try {
    final RunStats runStats=runTest(test);
    if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
      writeRunStats(runStats);
    }
    return runStats;
  }
 catch (  final IOException e) {
    logger.error(e.getMessage(),e);
    return null;
  }
}","@Override public RunStats call(){
  logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
  try {
    final RunStats runStats=runTest(test);
    if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
      writeRunStats(runStats);
    }
    return runStats;
  }
 catch (  final IOException e) {
    return RunStats.EMPTY;
  }
}",0.9112903225806452
101267,"private RunStats runTest(final File test) throws IOException {
  final WebClient client=localClient.get();
  final File instrumentedFileDirectory=new File(outputDir,instrumentedFileDirectoryName);
  final ScriptInstrumenter instrumenter=new ScriptInstrumenter(client.getJavaScriptEngine().getContextFactory(),coverageVariableName);
  instrumenter.setIgnorePatterns(noInstrumentPatterns);
  if (outputInstrumentedFiles) {
    FileUtils.mkdir(instrumentedFileDirectory.getAbsolutePath());
    instrumenter.setOutputDir(instrumentedFileDirectory);
    instrumenter.setOutputInstrumentedFiles(outputInstrumentedFiles);
  }
  instrumenter.setCacheInstrumentedCode(cacheInstrumentedCode);
  client.setScriptPreProcessor(instrumenter);
  final Page page=client.getPage(test.toURI().toURL());
  if (page instanceof HtmlPage) {
    final HtmlPage htmlPage=(HtmlPage)page;
    client.waitForBackgroundJavaScript(30000);
    client.setScriptPreProcessor(null);
    final NativeObject coverageData=(NativeObject)htmlPage.executeJavaScript(coverageVariableName).getJavaScriptResult();
    return collectAndWriteRunStats(test,instrumenter,coverageData);
  }
  return null;
}","private RunStats runTest(final File test) throws IOException {
  final WebClient client=localClient.get();
  final File instrumentedFileDirectory=new File(outputDir,instrumentedFileDirectoryName);
  final ScriptInstrumenter instrumenter=new ScriptInstrumenter(client.getJavaScriptEngine().getContextFactory(),coverageVariableName);
  instrumenter.setIgnorePatterns(noInstrumentPatterns);
  if (outputInstrumentedFiles) {
    FileUtils.mkdir(instrumentedFileDirectory.getAbsolutePath());
    instrumenter.setOutputDir(instrumentedFileDirectory);
    instrumenter.setOutputInstrumentedFiles(outputInstrumentedFiles);
  }
  instrumenter.setCacheInstrumentedCode(cacheInstrumentedCode);
  client.setScriptPreProcessor(instrumenter);
  final Page page=client.getPage(test.toURI().toURL());
  if (page instanceof HtmlPage) {
    final HtmlPage htmlPage=(HtmlPage)page;
    client.waitForBackgroundJavaScript(30000);
    client.setScriptPreProcessor(null);
    final Object javaScriptResult=htmlPage.executeJavaScript(""String_Node_Str"" + coverageVariableName).getJavaScriptResult();
    if (!(javaScriptResult instanceof Undefined)) {
      return collectAndWriteRunStats(test,instrumenter,(NativeObject)javaScriptResult);
    }
  }
  return RunStats.EMPTY;
}",0.8349917081260365
101268,"@Override public void loadScriptError(final HtmlPage htmlPage,final URL scriptUrl,final Exception e){
  logger.error(""String_Node_Str"",new Object[]{htmlPage.getUrl(),scriptUrl,e.getMessage()});
  logger.debug(e.getMessage(),e);
}","@Override public void loadScriptError(final HtmlPage htmlPage,final URL scriptUrl,final Exception e){
  logger.warn(""String_Node_Str"",new Object[]{htmlPage.getUrl(),scriptUrl,e.getMessage()});
  logger.debug(e.getMessage(),e);
}",0.9803063457330417
101269,"@Override protected WebClient initialValue(){
  final WebClient client=new WebClient(BrowserVersion.FIREFOX_3_6);
  client.setIncorrectnessListener(quietIncorrectnessListener);
  client.setJavaScriptErrorListener(loggingJsErrorListener);
  client.setHTMLParserListener(quietHtmlParserListener);
  client.setCssErrorHandler(quietCssErrorHandler);
  client.setJavaScriptEnabled(true);
  client.setAjaxController(new NicelyResynchronizingAjaxController());
  client.setThrowExceptionOnScriptError(false);
  client.setThrowExceptionOnFailingStatusCode(false);
  client.setPrintContentOnFailingStatusCode(false);
  return client;
}","@Override protected WebClient initialValue(){
  final WebClient client=new WebClient(BrowserVersion.FIREFOX_3_6){
    @Override public WebResponse loadWebResponse(    final WebRequest webRequest) throws IOException {
      return new WebResponseProxy(super.loadWebResponse(webRequest));
    }
  }
;
  client.setIncorrectnessListener(quietIncorrectnessListener);
  client.setJavaScriptErrorListener(loggingJsErrorListener);
  client.setHTMLParserListener(quietHtmlParserListener);
  client.setCssErrorHandler(quietCssErrorHandler);
  client.setJavaScriptEnabled(true);
  client.setAjaxController(new NicelyResynchronizingAjaxController());
  client.setThrowExceptionOnScriptError(false);
  client.setThrowExceptionOnFailingStatusCode(false);
  client.setPrintContentOnFailingStatusCode(false);
  client.setWebConnection(new HttpWebConnection(client){
    @Override protected WebResponse newWebResponseInstance(    final WebResponseData responseData,    final long loadTime,    final WebRequest request){
      return new WebResponseProxy(super.newWebResponseInstance(responseData,loadTime,request));
    }
  }
);
  return client;
}",0.6958997722095672
101270,"public void run() throws IOException {
  FileUtils.mkdir(outputDir.getAbsolutePath());
  @SuppressWarnings(""String_Node_Str"") final List<File> tests=FileUtils.getFiles(baseDir,includes,excludes);
  if (tests.isEmpty()) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"",threadCount);
  logger.info(""String_Node_Str"",outputStrategy);
  final ExecutorService executorService=Executors.newFixedThreadPool(threadCount);
  final CompletionService<RunStats> completionService=new ExecutorCompletionService<RunStats>(executorService);
  for (  final File test : tests) {
    completionService.submit(new Callable<RunStats>(){
      @Override public RunStats call(){
        logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
        try {
          final RunStats runStats=runTest(test);
          if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
            writeRunStats(runStats);
          }
          return runStats;
        }
 catch (        final IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
  final List<RunStats> allRunStats=Lists.newLinkedList();
  try {
    for (int i=0; i < tests.size(); i++) {
      final Future<RunStats> future=completionService.take();
      final RunStats runStats=future.get();
      allRunStats.add(runStats);
    }
  }
 catch (  final InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  final ExecutionException e) {
    throw new RuntimeException(e);
  }
 finally {
    executorService.shutdown();
  }
  logger.info(""String_Node_Str"");
  if (outputStrategy.contains(OutputStrategy.TOTAL)) {
    final RunStats totalStats=new RunStats(new File(outputDir,reportName),""String_Node_Str"");
    for (    final RunStats runStats : allRunStats) {
      for (      final FileStats fileStats : runStats) {
        totalStats.add(fileStats);
      }
    }
    writeRunStats(totalStats);
  }
}","public void run() throws IOException {
  FileUtils.mkdir(outputDir.getAbsolutePath());
  @SuppressWarnings(""String_Node_Str"") final List<File> tests=FileUtils.getFiles(baseDir,includes,excludes);
  if (tests.isEmpty()) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"",threadCount);
  logger.info(""String_Node_Str"",outputStrategy);
  final ExecutorService executorService=Executors.newFixedThreadPool(threadCount);
  final CompletionService<RunStats> completionService=new ExecutorCompletionService<RunStats>(executorService);
  for (  final File test : tests) {
    completionService.submit(new Callable<RunStats>(){
      @Override public RunStats call(){
        logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
        try {
          final RunStats runStats=runTest(test);
          if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
            writeRunStats(runStats);
          }
          return runStats;
        }
 catch (        final IOException e) {
          logger.error(e.getMessage(),e);
          return null;
        }
      }
    }
);
  }
  final List<RunStats> allRunStats=Lists.newLinkedList();
  try {
    for (int i=0; i < tests.size(); i++) {
      final Future<RunStats> future=completionService.take();
      final RunStats runStats=future.get();
      allRunStats.add(runStats);
    }
  }
 catch (  final Exception e) {
    logger.debug(e.getMessage(),e);
  }
 finally {
    executorService.shutdown();
  }
  logger.info(""String_Node_Str"");
  if (outputStrategy.contains(OutputStrategy.TOTAL)) {
    final RunStats totalStats=new RunStats(new File(outputDir,reportName),""String_Node_Str"");
    for (    final RunStats runStats : allRunStats) {
      for (      final FileStats fileStats : runStats) {
        totalStats.add(fileStats);
      }
    }
    writeRunStats(totalStats);
  }
}",0.7806652806652806
101271,"@Override public RunStats call(){
  logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
  try {
    final RunStats runStats=runTest(test);
    if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
      writeRunStats(runStats);
    }
    return runStats;
  }
 catch (  final IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public RunStats call(){
  logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
  try {
    final RunStats runStats=runTest(test);
    if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
      writeRunStats(runStats);
    }
    return runStats;
  }
 catch (  final IOException e) {
    logger.error(e.getMessage(),e);
    return null;
  }
}",0.898936170212766
101272,"private void writeRunStats(final RunStats stats) throws IOException {
  final URI relativeTestUri=baseDir.toURI().relativize(stats.test.toURI());
  final File fileOutputDir=new File(new File(outputDir.toURI().resolve(relativeTestUri)).getParent());
  FileUtils.mkdir(fileOutputDir.getAbsolutePath());
  final File outputFile=new File(fileOutputDir,stats.getReportName());
  logger.info(""String_Node_Str"",outputFile.getAbsoluteFile());
synchronized (stringTemplateGroup) {
    stringTemplateGroup.getInstanceOf(""String_Node_Str"").add(""String_Node_Str"",stats).add(""String_Node_Str"",config.getString(""String_Node_Str"")).add(""String_Node_Str"",config.getString(""String_Node_Str"")).add(""String_Node_Str"",config.getString(""String_Node_Str"")).write(outputFile,new ErrorLogger());
  }
}","private void writeRunStats(final RunStats stats) throws IOException {
  final URI relativeTestUri=baseDir.toURI().relativize(stats.test.toURI());
  final File fileOutputDir=new File(new File(outputDir.toURI().resolve(relativeTestUri)).getParent());
  FileUtils.mkdir(fileOutputDir.getAbsolutePath());
  final File outputFile=new File(fileOutputDir,stats.getReportName());
  logger.info(""String_Node_Str"",outputFile.getAbsoluteFile());
synchronized (stringTemplateGroup) {
    stringTemplateGroup.getInstanceOf(""String_Node_Str"").add(""String_Node_Str"",stats).add(""String_Node_Str"",config.getString(""String_Node_Str"")).add(""String_Node_Str"",config.getString(""String_Node_Str"")).add(""String_Node_Str"",config.getString(""String_Node_Str"")).write(outputFile,new LoggingStringTemplateErrorListener());
  }
}",0.9816106531388712
101273,"private RunStats collectAndWriteRunStats(final File test,final ScriptInstrumenter instrumenter,final NativeObject allCoverageData) throws IOException {
  final RunStats runStats=new RunStats(test);
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Scanner in=new Scanner(data.getSourceCode());
    final NativeObject coverageData=(NativeObject)allCoverageData.get(data.getSourceName());
    final List<LineCoverageRecord> lineCoverageRecords=Lists.newArrayList();
    for (int lineNr=1; lineNr < data.getLineNumberOfFirstStatement() && in.hasNext(); lineNr++) {
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
    }
    for (int lineNr=data.getLineNumberOfFirstStatement(), lengthCountdown=0; in.hasNext(); lineNr++) {
      final String line=in.nextLine();
      final Double coverageEntry=(Double)coverageData.get(lineNr);
      final int timesLineExecuted;
      if (coverageEntry == null) {
        final int lineLength=line.trim().length();
        if (lengthCountdown > 0 && lineLength > 0) {
          lengthCountdown-=lineLength;
          timesLineExecuted=-1;
        }
 else {
          timesLineExecuted=data.hasStatement(lineNr) ? 0 : -1;
        }
      }
 else {
        timesLineExecuted=coverageEntry.intValue();
        lengthCountdown=data.getStatementLength(lineNr);
      }
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,timesLineExecuted,line));
    }
    runStats.add(new FileStats(data.getSourceName(),lineCoverageRecords));
  }
  return runStats;
}","private RunStats collectAndWriteRunStats(final File test,final ScriptInstrumenter instrumenter,final NativeObject allCoverageData) throws IOException {
  final RunStats runStats=new RunStats(test);
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Scanner in=new Scanner(data.getSourceCode());
    final NativeObject coverageData=(NativeObject)allCoverageData.get(data.getSourceName());
    final List<LineCoverageRecord> lineCoverageRecords=Lists.newArrayList();
    if (!data.getLineNumbersOfAllStatements().isEmpty()) {
      for (int lineNr=1; lineNr < data.getLineNumberOfFirstStatement() && in.hasNext(); lineNr++) {
        lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
      }
      for (int lineNr=data.getLineNumberOfFirstStatement(), lengthCountdown=0; in.hasNext(); lineNr++) {
        final String line=in.nextLine();
        final Double coverageEntry=(Double)coverageData.get(lineNr);
        final int timesLineExecuted;
        if (coverageEntry == null) {
          final int lineLength=line.trim().length();
          if (lengthCountdown > 0 && lineLength > 0) {
            lengthCountdown-=lineLength;
            timesLineExecuted=-1;
          }
 else {
            timesLineExecuted=data.hasStatement(lineNr) ? 0 : -1;
          }
        }
 else {
          timesLineExecuted=coverageEntry.intValue();
          lengthCountdown=data.getStatementLength(lineNr);
        }
        lineCoverageRecords.add(new LineCoverageRecord(lineNr,timesLineExecuted,line));
      }
    }
    runStats.add(new FileStats(data.getSourceName(),lineCoverageRecords));
  }
  return runStats;
}",0.9665729459543893
101274,"public void run() throws IOException {
  FileUtils.mkdir(outputDir.getAbsolutePath());
  @SuppressWarnings(""String_Node_Str"") final List<File> tests=FileUtils.getFiles(baseDir,includes,excludes);
  if (tests.isEmpty()) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"",threadCount);
  logger.info(""String_Node_Str"",outputStrategy);
  final ExecutorService executorService=Executors.newFixedThreadPool(threadCount);
  final CompletionService<RunStats> completionService=new ExecutorCompletionService<RunStats>(executorService);
  for (  final File test : tests) {
    completionService.submit(new Callable<RunStats>(){
      @Override public RunStats call(){
        logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
        try {
          final RunStats runStats=runTest(test);
          if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
            writeRunStats(runStats);
          }
          return runStats;
        }
 catch (        final IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
  final List<RunStats> allRunStats=Lists.newLinkedList();
  for (int i=0; i < tests.size(); i++) {
    try {
      final Future<RunStats> future=completionService.take();
      final RunStats runStats=future.get();
      allRunStats.add(runStats);
    }
 catch (    final InterruptedException e) {
      throw new RuntimeException(e);
    }
catch (    final ExecutionException e) {
      throw new RuntimeException(e);
    }
  }
  logger.info(""String_Node_Str"");
  executorService.shutdown();
  if (outputStrategy.contains(OutputStrategy.TOTAL)) {
    final RunStats totalStats=new RunStats(new File(outputDir,reportName),""String_Node_Str"");
    for (    final RunStats runStats : allRunStats) {
      for (      final FileStats fileStats : runStats) {
        totalStats.add(fileStats);
      }
    }
    writeRunStats(totalStats);
  }
}","public void run() throws IOException {
  FileUtils.mkdir(outputDir.getAbsolutePath());
  @SuppressWarnings(""String_Node_Str"") final List<File> tests=FileUtils.getFiles(baseDir,includes,excludes);
  if (tests.isEmpty()) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"",threadCount);
  logger.info(""String_Node_Str"",outputStrategy);
  final ExecutorService executorService=Executors.newFixedThreadPool(threadCount);
  final CompletionService<RunStats> completionService=new ExecutorCompletionService<RunStats>(executorService);
  for (  final File test : tests) {
    completionService.submit(new Callable<RunStats>(){
      @Override public RunStats call(){
        logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
        try {
          final RunStats runStats=runTest(test);
          if (outputStrategy.contains(OutputStrategy.PER_TEST)) {
            writeRunStats(runStats);
          }
          return runStats;
        }
 catch (        final IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
  final List<RunStats> allRunStats=Lists.newLinkedList();
  try {
    for (int i=0; i < tests.size(); i++) {
      final Future<RunStats> future=completionService.take();
      final RunStats runStats=future.get();
      allRunStats.add(runStats);
    }
  }
 catch (  final InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  final ExecutionException e) {
    throw new RuntimeException(e);
  }
 finally {
    executorService.shutdown();
  }
  logger.info(""String_Node_Str"");
  if (outputStrategy.contains(OutputStrategy.TOTAL)) {
    final RunStats totalStats=new RunStats(new File(outputDir,reportName),""String_Node_Str"");
    for (    final RunStats runStats : allRunStats) {
      for (      final FileStats fileStats : runStats) {
        totalStats.add(fileStats);
      }
    }
    writeRunStats(totalStats);
  }
}",0.9721013565395444
101275,"private void addInstrumentationSnippetFor(final AstNode node){
  final AstNode parent=node.getParent();
  final int type=node.getType();
  final int parentType=parent.getType();
  if (type == CASE) {
    handleSwitchCase((SwitchCase)node);
  }
 else   if (type == IF && parentType == IF) {
    flattenElseIf((IfStatement)node,(IfStatement)parent);
    data.addExecutableLine(getActualLineNumber(node),node.getLength());
  }
 else   if (parentType != CASE) {
    if (parent.hasChildren()) {
      parent.addChildBefore(newInstrumentationNode(getActualLineNumber(node)),node);
    }
 else {
      final Block block=newInstrumentedBlock(node);
      if (parentType == IF) {
        final IfStatement ifStatement=(IfStatement)parent;
        if (ifStatement.getThenPart() == node) {
          ifStatement.setThenPart(block);
        }
 else         if (ifStatement.getElsePart() == node) {
          ifStatement.setElsePart(block);
        }
      }
 else       if (parentType == WHILE || parentType == FOR || parentType == DO) {
        ((Loop)parent).setBody(block);
      }
 else {
        logger.warn(""String_Node_Str"",parent.toSource());
      }
    }
    data.addExecutableLine(getActualLineNumber(node),node.getLength());
  }
}","private void addInstrumentationSnippetFor(final AstNode node){
  final AstNode parent=node.getParent();
  final int type=node.getType();
  final int parentType=parent.getType();
  if (type == WHILE || type == FOR || type == DO) {
    fixLoops((Loop)node);
  }
  if (type == CASE) {
    handleSwitchCase((SwitchCase)node);
  }
 else   if (type == IF && parentType == IF) {
    final IfStatement elseIfStatement=(IfStatement)node;
    final IfStatement ifStatement=(IfStatement)parent;
    if (ifStatement.getElsePart() == elseIfStatement) {
      flattenElseIf(elseIfStatement,ifStatement);
      data.addExecutableLine(getActualLineNumber(node),node.getLength());
    }
  }
 else   if (parentType != CASE) {
    if (parent.hasChildren()) {
      parent.addChildBefore(newInstrumentationNode(getActualLineNumber(node)),node);
    }
 else {
      final Block block=newInstrumentedBlock(node);
      if (parentType == IF) {
        final IfStatement ifStatement=(IfStatement)parent;
        if (ifStatement.getThenPart() == node) {
          ifStatement.setThenPart(block);
        }
 else         if (ifStatement.getElsePart() == node) {
          ifStatement.setElsePart(block);
        }
      }
 else       if (parentType == WHILE || parentType == FOR || parentType == DO) {
        ((Loop)parent).setBody(block);
      }
 else {
        logger.warn(""String_Node_Str"",parent.toSource());
      }
    }
    data.addExecutableLine(getActualLineNumber(node),node.getLength());
  }
}",0.8723247232472324
101276,"@Test public void preProcess(){
  final String sourceName=""String_Node_Str"";
  final ScriptInstrumenter instrumenter=new ScriptInstrumenter(factory,COVERAGE_VARIABLE_NAME);
  instrumenter.preProcess(htmlPage,Data.getClassJsSourceCode(),sourceName,1,htmlElement);
  assertEquals(1,instrumenter.getScriptDataList().size());
  final ScriptData classJsData=instrumenter.getScriptDataList().get(0);
  assertEquals(""String_Node_Str"",classJsData.getSourceName());
  assertEquals(5,classJsData.getLineNumberOfFirstStatement());
  assertEquals(96,classJsData.getNumberOfStatements());
  assertEquals(Data.getClassJsInstrumented(),classJsData.getInstrumentedSourceCode());
}","@Test public void preProcess(){
  final String sourceName=""String_Node_Str"";
  final ScriptInstrumenter instrumenter=new ScriptInstrumenter(factory,COVERAGE_VARIABLE_NAME);
  instrumenter.preProcess(htmlPage,Data.getClassJsSourceCode(),sourceName,1,htmlElement);
  assertEquals(1,instrumenter.getScriptDataList().size());
  final ScriptData classJsData=instrumenter.getScriptDataList().get(0);
  assertEquals(""String_Node_Str"",classJsData.getSourceName());
  assertEquals(5,classJsData.getLineNumberOfFirstStatement());
  assertEquals(106,classJsData.getNumberOfStatements());
  assertEquals(Data.getClassJsInstrumented(),classJsData.getInstrumentedSourceCode());
}",0.9977426636568848
101277,"private RunStats collectAndWriteRunStats(final File test,final ScriptInstrumenter instrumenter,final NativeObject allCoverageData) throws IOException {
  final RunStats runStats=new RunStats(test);
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Scanner in=new Scanner(data.getSourceCode());
    final NativeObject coverageData=(NativeObject)allCoverageData.get(data.getSourceName());
    final List<LineCoverageRecord> lineCoverageRecords=Lists.newArrayList();
    for (int lineCount=1, lineNr=data.getLineNumberOfFirstStatement(), lengthCountdown=0; in.hasNext(); lineCount++, lineNr++) {
      final String line=in.nextLine();
      final Double coverageEntry=(Double)coverageData.get(lineNr);
      final int timesLineExecuted;
      if (coverageEntry == null) {
        final int lineLength=line.trim().length();
        if (lengthCountdown > 0 && lineLength > 0) {
          lengthCountdown-=lineLength;
          timesLineExecuted=-1;
        }
 else {
          timesLineExecuted=data.hasStatement(lineNr) ? 0 : -1;
        }
      }
 else {
        timesLineExecuted=coverageEntry.intValue();
        lengthCountdown=data.getStatementLength(lineNr);
      }
      lineCoverageRecords.add(new LineCoverageRecord(lineCount,timesLineExecuted,line));
    }
    runStats.add(new FileStats(data.getSourceName(),lineCoverageRecords));
  }
  return runStats;
}","private RunStats collectAndWriteRunStats(final File test,final ScriptInstrumenter instrumenter,final NativeObject allCoverageData) throws IOException {
  final RunStats runStats=new RunStats(test);
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Scanner in=new Scanner(data.getSourceCode());
    final NativeObject coverageData=(NativeObject)allCoverageData.get(data.getSourceName());
    final List<LineCoverageRecord> lineCoverageRecords=Lists.newArrayList();
    for (int lineNr=1; lineNr < data.getLineNumberOfFirstStatement() && in.hasNext(); lineNr++) {
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,-1,in.nextLine()));
    }
    for (int lineNr=data.getLineNumberOfFirstStatement(), lengthCountdown=0; in.hasNext(); lineNr++) {
      final String line=in.nextLine();
      final Double coverageEntry=(Double)coverageData.get(lineNr);
      final int timesLineExecuted;
      if (coverageEntry == null) {
        final int lineLength=line.trim().length();
        if (lengthCountdown > 0 && lineLength > 0) {
          lengthCountdown-=lineLength;
          timesLineExecuted=-1;
        }
 else {
          timesLineExecuted=data.hasStatement(lineNr) ? 0 : -1;
        }
      }
 else {
        timesLineExecuted=coverageEntry.intValue();
        lengthCountdown=data.getStatementLength(lineNr);
      }
      lineCoverageRecords.add(new LineCoverageRecord(lineNr,timesLineExecuted,line));
    }
    runStats.add(new FileStats(data.getSourceName(),lineCoverageRecords));
  }
  return runStats;
}",0.9309288873766588
101278,"private Block newInstrumentedBlock(final AstNode node){
  final Block block=new Block();
  block.addChild(node);
  block.addChildBefore(newInstrumentationNode(node.getLineno()),node);
  return block;
}","private Block newInstrumentedBlock(final AstNode node){
  final Block block=new Block();
  block.addChild(node);
  block.addChildBefore(newInstrumentationNode(getActualLineNumber(node)),node);
  return block;
}",0.9391727493917276
101279,"public InstrumentingVisitor(final ScriptData data){
  this.data=data;
}","public InstrumentingVisitor(final ScriptData data,final int lineNumberOffset){
  this.data=data;
  this.lineNumberOffset=lineNumberOffset;
}",0.6729857819905213
101280,"private void addInstrumentationSnippetFor(final AstNode node){
  final AstNode parent=node.getParent();
  final int type=node.getType();
  final int parentType=parent.getType();
  if (type == CASE) {
    handleSwitchCase((SwitchCase)node);
  }
 else   if (type == IF && parentType == IF) {
    flattenElseIf((IfStatement)node,(IfStatement)parent);
    data.addExecutableLine(node.getLineno(),node.getLength());
  }
 else   if (parentType != CASE) {
    if (parent.hasChildren()) {
      parent.addChildBefore(newInstrumentationNode(node.getLineno()),node);
    }
 else {
      final Block block=newInstrumentedBlock(node);
      if (parentType == IF) {
        final IfStatement ifStatement=(IfStatement)parent;
        if (ifStatement.getThenPart() == node) {
          ifStatement.setThenPart(block);
        }
 else         if (ifStatement.getElsePart() == node) {
          ifStatement.setElsePart(block);
        }
      }
 else       if (parentType == WHILE || parentType == FOR || parentType == DO) {
        ((Loop)parent).setBody(block);
      }
 else {
        logger.warn(""String_Node_Str"",parent.toSource());
      }
    }
    data.addExecutableLine(node.getLineno(),node.getLength());
  }
}","private void addInstrumentationSnippetFor(final AstNode node){
  final AstNode parent=node.getParent();
  final int type=node.getType();
  final int parentType=parent.getType();
  if (type == CASE) {
    handleSwitchCase((SwitchCase)node);
  }
 else   if (type == IF && parentType == IF) {
    flattenElseIf((IfStatement)node,(IfStatement)parent);
    data.addExecutableLine(getActualLineNumber(node),node.getLength());
  }
 else   if (parentType != CASE) {
    if (parent.hasChildren()) {
      parent.addChildBefore(newInstrumentationNode(getActualLineNumber(node)),node);
    }
 else {
      final Block block=newInstrumentedBlock(node);
      if (parentType == IF) {
        final IfStatement ifStatement=(IfStatement)parent;
        if (ifStatement.getThenPart() == node) {
          ifStatement.setThenPart(block);
        }
 else         if (ifStatement.getElsePart() == node) {
          ifStatement.setElsePart(block);
        }
      }
 else       if (parentType == WHILE || parentType == FOR || parentType == DO) {
        ((Loop)parent).setBody(block);
      }
 else {
        logger.warn(""String_Node_Str"",parent.toSource());
      }
    }
    data.addExecutableLine(getActualLineNumber(node),node.getLength());
  }
}",0.9617755856966708
101281,"/** 
 * 'switch' statement cases are special in the sense that their children are not actually their children, meaning the children have a reference to their parent, but the parent only has a List of all its children, so we can't just addChildBefore() like we do for all other cases. They do, however, retain a list of all statements per each case, which we're using here
 */
private void handleSwitchCase(final SwitchCase switchCase){
  if (switchCase.getStatements() == null) {
    return;
  }
  final List<AstNode> newStatements=Lists.newArrayList();
  for (  final AstNode statement : switchCase.getStatements()) {
    final int lineNr=statement.getLineno();
    data.addExecutableLine(lineNr,switchCase.getLength());
    newStatements.add(newInstrumentationNode(lineNr));
    newStatements.add(statement);
  }
  switchCase.setStatements(newStatements);
}","/** 
 * 'switch' statement cases are special in the sense that their children are not actually their children, meaning the children have a reference to their parent, but the parent only has a List of all its children, so we can't just addChildBefore() like we do for all other cases. They do, however, retain a list of all statements per each case, which we're using here
 */
private void handleSwitchCase(final SwitchCase switchCase){
  if (switchCase.getStatements() == null) {
    return;
  }
  final List<AstNode> newStatements=Lists.newArrayList();
  for (  final AstNode statement : switchCase.getStatements()) {
    final int lineNr=getActualLineNumber(statement);
    data.addExecutableLine(lineNr,switchCase.getLength());
    newStatements.add(newInstrumentationNode(lineNr));
    newStatements.add(statement);
  }
  switchCase.setStatements(newStatements);
}",0.7782281412854661
101282,"@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  final String normalizedSourceName=INLINE_SCRIPT_RE.matcher(sourceName).replaceAll(""String_Node_Str"");
  if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(normalizedSourceName)) {
    final ScriptData data=instrumentedScriptCache.get(normalizedSourceName);
    scriptDataList.add(data);
    return data.getInstrumentedSourceCode();
  }
  if (shouldIgnore(normalizedSourceName)) {
    return sourceCode;
  }
  final ScriptData data;
  data=new ScriptData(normalizedSourceName,sourceCode);
  scriptDataList.add(data);
  final CompilerEnvirons environs=new CompilerEnvirons();
  environs.initFromContext(contextFactory.enterContext());
  final AstRoot root=new Parser(environs).parse(sourceCode,normalizedSourceName,lineNumber);
  root.visit(new InstrumentingVisitor(data));
  final String treeSource=root.toSource();
  final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
  buf.append(initializingCode);
  buf.append(String.format(""String_Node_Str"",coverageVariableName,normalizedSourceName));
  for (  final Integer i : data.getLineNumbersOfAllStatements()) {
    buf.append(String.format(arrayInitializer,data.getSourceName(),i));
  }
  buf.append(treeSource);
  final String instrumentedCode=buf.toString();
  data.setInstrumentedSourceCode(instrumentedCode);
  if (cacheInstrumentedCode) {
    instrumentedScriptCache.putIfAbsent(normalizedSourceName,data);
  }
  if (outputInstrumentedFiles) {
synchronized (writtenToDisk) {
      try {
        if (!writtenToDisk.contains(normalizedSourceName)) {
          final File file=new File(normalizedSourceName);
          final File fileOutputDir=new File(outputDir,DigestUtils.md5Hex(file.getParent()));
          FileUtils.mkdir(fileOutputDir.getAbsolutePath());
          final File outputFile=new File(fileOutputDir,file.getName());
          logger.info(""String_Node_Str"",outputFile.getAbsolutePath());
          IOUtils.write(instrumentedCode,new FileOutputStream(outputFile));
          writtenToDisk.add(normalizedSourceName);
        }
      }
 catch (      final IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return instrumentedCode;
}","@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  final String normalizedSourceName=INLINE_SCRIPT_RE.matcher(sourceName).replaceAll(""String_Node_Str"");
  if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(normalizedSourceName)) {
    final ScriptData data=instrumentedScriptCache.get(normalizedSourceName);
    scriptDataList.add(data);
    return data.getInstrumentedSourceCode();
  }
  if (shouldIgnore(normalizedSourceName)) {
    return sourceCode;
  }
  final ScriptData data;
  data=new ScriptData(normalizedSourceName,sourceCode);
  scriptDataList.add(data);
  final CompilerEnvirons environs=new CompilerEnvirons();
  environs.initFromContext(contextFactory.enterContext());
  final AstRoot root=new Parser(environs).parse(sourceCode,normalizedSourceName,lineNumber);
  root.visit(new InstrumentingVisitor(data,lineNumber - 1));
  final String treeSource=root.toSource();
  final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
  buf.append(initializingCode);
  buf.append(String.format(""String_Node_Str"",coverageVariableName,normalizedSourceName));
  for (  final Integer i : data.getLineNumbersOfAllStatements()) {
    buf.append(String.format(arrayInitializer,data.getSourceName(),i));
  }
  buf.append(treeSource);
  final String instrumentedCode=buf.toString();
  data.setInstrumentedSourceCode(instrumentedCode);
  if (cacheInstrumentedCode) {
    instrumentedScriptCache.putIfAbsent(normalizedSourceName,data);
  }
  if (outputInstrumentedFiles) {
synchronized (writtenToDisk) {
      try {
        if (!writtenToDisk.contains(normalizedSourceName)) {
          final File file=new File(normalizedSourceName);
          final File fileOutputDir=new File(outputDir,DigestUtils.md5Hex(file.getParent()));
          FileUtils.mkdir(fileOutputDir.getAbsolutePath());
          final File outputFile=new File(fileOutputDir,file.getName());
          logger.info(""String_Node_Str"",outputFile.getAbsolutePath());
          IOUtils.write(instrumentedCode,new FileOutputStream(outputFile));
          writtenToDisk.add(normalizedSourceName);
        }
      }
 catch (      final IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return instrumentedCode;
}",0.9968795506552944
101283,"/** 
 * In order to make it possible to cover else-if blocks, we're flattening the shorthand else-if <pre>  {@literal}if (cond1)  doIf(); } else if (cond2) { doElseIf(); } else { doElse(); } } </pre> into <pre>  {@literal}if (cond1)  doIf(); } else { if (cond2) { doElseIf(); } else { doElse(); } } } </pre>
 */
private void flattenElseIf(final IfStatement elseIfStatement,final IfStatement ifStatement){
  final Block block=new Block();
  block.addChild(elseIfStatement);
  ifStatement.setElsePart(block);
  final int lineNr=elseIfStatement.getLineno();
  data.addExecutableLine(lineNr,elseIfStatement.getLength());
  block.addChildBefore(newInstrumentationNode(lineNr),elseIfStatement);
}","/** 
 * In order to make it possible to cover else-if blocks, we're flattening the shorthand else-if <pre>  {@literal}if (cond1)  doIf(); } else if (cond2) { doElseIf(); } else { doElse(); } } </pre> into <pre>  {@literal}if (cond1)  doIf(); } else { if (cond2) { doElseIf(); } else { doElse(); } } } </pre>
 */
private void flattenElseIf(final IfStatement elseIfStatement,final IfStatement ifStatement){
  final Block block=new Block();
  block.addChild(elseIfStatement);
  ifStatement.setElsePart(block);
  final int lineNr=getActualLineNumber(elseIfStatement);
  data.addExecutableLine(lineNr,elseIfStatement.getLength());
  block.addChildBefore(newInstrumentationNode(lineNr),elseIfStatement);
}",0.9056875449964004
101284,"public void execute() throws MojoExecutionException {
  final CoverageGenerator gen=new CoverageGenerator(baseDir,includes,excludes,outputDir);
  gen.setOutputInstrumentedFiles(outputInstrumentedFiles);
  gen.setCacheInstrumentedCode(cacheInstrumentedCode);
  gen.setNoInstrumentPatterns(ImmutableList.copyOf(noInstrumentPatterns));
  gen.setOutputStrategy(outputStrategy);
  gen.setThreadCount(threadCount);
  try {
    gen.run();
  }
 catch (  final IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
}","public void execute() throws MojoExecutionException {
  final CoverageGenerator gen=new CoverageGenerator(baseDir,includes,excludes,outputDir);
  gen.setOutputInstrumentedFiles(outputInstrumentedFiles);
  gen.setCacheInstrumentedCode(cacheInstrumentedCode);
  gen.setNoInstrumentPatterns(noInstrumentPatterns);
  gen.setOutputStrategy(outputStrategy);
  gen.setThreadCount(threadCount);
  try {
    gen.run();
  }
 catch (  final IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
}",0.9636015325670498
101285,"public CoverageGenerator(final File baseDir,final String includes,final String excludes,final File outputDir){
  this.baseDir=baseDir;
  this.includes=includes;
  this.excludes=excludes;
  this.outputDir=outputDir;
  stringTemplateGroup=new STGroupDir(""String_Node_Str"",'$','$');
}","public CoverageGenerator(final File baseDir,final String includes,final String excludes,final File outputDir){
  Validate.isTrue(baseDir.exists(),""String_Node_Str"");
  this.baseDir=baseDir;
  this.includes=includes;
  this.excludes=excludes;
  this.outputDir=outputDir;
  stringTemplateGroup=new STGroupDir(""String_Node_Str"",'$','$');
}",0.9108589951377634
101286,"public void execute() throws MojoExecutionException {
  final CoverageGenerator gen=new CoverageGenerator(baseDir,includes,excludes,outputDir);
  gen.setOutputInstrumentedFiles(outputInstrumentedFiles);
  gen.setCacheInstrumentedCode(cacheInstrumentedCode);
  gen.setNoInstrumentPatterns(noInstrumentPatterns);
  gen.setOutputStrategy(outputStrategy);
  gen.setThreadCount(threadCount);
  try {
    gen.run();
  }
 catch (  final IOException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
}","public void execute() throws MojoExecutionException {
  try {
    final CoverageGenerator gen=new CoverageGenerator(baseDir,includes,excludes,outputDir);
    gen.setOutputInstrumentedFiles(outputInstrumentedFiles);
    gen.setCacheInstrumentedCode(cacheInstrumentedCode);
    gen.setNoInstrumentPatterns(noInstrumentPatterns);
    gen.setOutputStrategy(outputStrategy);
    gen.setThreadCount(threadCount);
    try {
      gen.run();
    }
 catch (    final IOException e) {
      throw new MojoExecutionException(""String_Node_Str"",e);
    }
  }
 catch (  final IllegalArgumentException e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
}",0.8757497857754927
101287,"private RunStats collectAndWriteRunStats(final File test,final ScriptInstrumenter instrumenter,final NativeObject allCoverageData) throws IOException {
  final RunStats runStats=new RunStats(test);
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Scanner in=new Scanner(data.getSourceCode());
    final NativeObject coverageData=(NativeObject)allCoverageData.get(data.getSourceName());
    final String jsFileName=data.getSourceName();
    final List<LineCoverageRecord> lineCoverageRecords=Lists.newArrayList();
    for (int lineCount=1, lineNr=data.getLineNumberOfFirstStatement(), lengthCountdown=0; in.hasNext(); lineCount++, lineNr++) {
      final String line=in.nextLine();
      final Double coverageEntry=(Double)coverageData.get(lineNr);
      final int timesLineExecuted;
      if (coverageEntry == null) {
        final int lineLength=line.trim().length();
        if (lengthCountdown > 0 && lineLength > 0) {
          lengthCountdown-=lineLength;
          timesLineExecuted=-1;
        }
 else {
          timesLineExecuted=data.hasStatement(lineNr) ? 0 : -1;
        }
      }
 else {
        timesLineExecuted=coverageEntry.intValue();
        lengthCountdown=data.getStatementLength(lineNr);
      }
      lineCoverageRecords.add(new LineCoverageRecord(lineCount,timesLineExecuted,line));
    }
    try {
      final String name=jsFileName.startsWith(""String_Node_Str"") ? jsFileName : new URI(jsFileName).normalize().toString();
      runStats.add(new FileStats(name,lineCoverageRecords));
    }
 catch (    final URISyntaxException e) {
      throw new RuntimeException(e);
    }
  }
  return runStats;
}","private RunStats collectAndWriteRunStats(final File test,final ScriptInstrumenter instrumenter,final NativeObject allCoverageData) throws IOException {
  final RunStats runStats=new RunStats(test);
  for (  final ScriptData data : instrumenter.getScriptDataList()) {
    final Scanner in=new Scanner(data.getSourceCode());
    final NativeObject coverageData=(NativeObject)allCoverageData.get(data.getSourceName());
    final List<LineCoverageRecord> lineCoverageRecords=Lists.newArrayList();
    for (int lineCount=1, lineNr=data.getLineNumberOfFirstStatement(), lengthCountdown=0; in.hasNext(); lineCount++, lineNr++) {
      final String line=in.nextLine();
      final Double coverageEntry=(Double)coverageData.get(lineNr);
      final int timesLineExecuted;
      if (coverageEntry == null) {
        final int lineLength=line.trim().length();
        if (lengthCountdown > 0 && lineLength > 0) {
          lengthCountdown-=lineLength;
          timesLineExecuted=-1;
        }
 else {
          timesLineExecuted=data.hasStatement(lineNr) ? 0 : -1;
        }
      }
 else {
        timesLineExecuted=coverageEntry.intValue();
        lengthCountdown=data.getStatementLength(lineNr);
      }
      lineCoverageRecords.add(new LineCoverageRecord(lineCount,timesLineExecuted,line));
    }
    runStats.add(new FileStats(data.getSourceName(),lineCoverageRecords));
  }
  return runStats;
}",0.8617405582922825
101288,"FileStats(final String fullName,final List<LineCoverageRecord> lineCoverageRecords){
  this.fullName=fullName;
  final File file=new File(fullName);
  fileName=file.getName();
  parentName=file.getParent();
  this.id=generateId();
  this.lineCoverageRecords=lineCoverageRecords;
}","FileStats(final String fullName,final List<LineCoverageRecord> lineCoverageRecords){
  this.fullName=fullName;
  this.relativeName=getRelativeName(fullName);
  final File file=new File(relativeName);
  fileName=file.getName();
  parentName=file.getParent();
  this.id=generateId();
  this.lineCoverageRecords=lineCoverageRecords;
}",0.9034369885433716
101289,"@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  String resolvedSourceName;
  if (sourceName.startsWith(""String_Node_Str"")) {
    resolvedSourceName=sourceName;
  }
 else {
    try {
      resolvedSourceName=ResourceUtils.getRelativePath(sourceName,htmlPage.getWebResponse().getWebRequest().getUrl().toString(),File.separator);
    }
 catch (    final Exception e) {
      logger.error(e.getMessage(),e);
      resolvedSourceName=sourceName;
    }
  }
  if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(resolvedSourceName)) {
    final ScriptData data=instrumentedScriptCache.get(resolvedSourceName);
    scriptDataList.add(data);
    return data.getInstrumentedSourceCode();
  }
  if (shouldIgnore(resolvedSourceName)) {
    return sourceCode;
  }
  final ScriptData data;
  data=new ScriptData(resolvedSourceName,sourceCode);
  scriptDataList.add(data);
  final CompilerEnvirons environs=new CompilerEnvirons();
  environs.initFromContext(contextFactory.enterContext());
  final AstRoot root=new Parser(environs).parse(sourceCode,resolvedSourceName,lineNumber);
  root.visit(new InstrumentingVisitor(data));
  final String treeSource=root.toSource();
  final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
  buf.append(initializingCode);
  buf.append(String.format(""String_Node_Str"",coverageVariableName,resolvedSourceName));
  for (  final Integer i : data.getLineNumbersOfAllStatements()) {
    buf.append(String.format(arrayInitializer,data.getSourceName(),i));
  }
  buf.append(treeSource);
  final String instrumentedCode=buf.toString();
  data.setInstrumentedSourceCode(instrumentedCode);
  if (cacheInstrumentedCode) {
    instrumentedScriptCache.putIfAbsent(resolvedSourceName,data);
  }
  if (outputInstrumentedFiles) {
synchronized (writtenToDisk) {
      try {
        if (!writtenToDisk.contains(resolvedSourceName)) {
          final File file=new File(resolvedSourceName);
          final File fileOutputDir=new File(outputDir,DigestUtils.md5Hex(file.getParent()));
          FileUtils.mkdir(fileOutputDir.getAbsolutePath());
          final File outputFile=new File(fileOutputDir,file.getName());
          logger.info(""String_Node_Str"",outputFile.getAbsolutePath());
          IOUtils.write(instrumentedCode,new FileOutputStream(outputFile));
          writtenToDisk.add(resolvedSourceName);
        }
      }
 catch (      final IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return instrumentedCode;
}","@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  final String normalizedSourceName=INLINE_SCRIPT_RE.matcher(sourceName).replaceAll(""String_Node_Str"");
  if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(normalizedSourceName)) {
    final ScriptData data=instrumentedScriptCache.get(normalizedSourceName);
    scriptDataList.add(data);
    return data.getInstrumentedSourceCode();
  }
  if (shouldIgnore(normalizedSourceName)) {
    return sourceCode;
  }
  final ScriptData data;
  data=new ScriptData(normalizedSourceName,sourceCode);
  scriptDataList.add(data);
  final CompilerEnvirons environs=new CompilerEnvirons();
  environs.initFromContext(contextFactory.enterContext());
  final AstRoot root=new Parser(environs).parse(sourceCode,normalizedSourceName,lineNumber);
  root.visit(new InstrumentingVisitor(data));
  final String treeSource=root.toSource();
  final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
  buf.append(initializingCode);
  buf.append(String.format(""String_Node_Str"",coverageVariableName,normalizedSourceName));
  for (  final Integer i : data.getLineNumbersOfAllStatements()) {
    buf.append(String.format(arrayInitializer,data.getSourceName(),i));
  }
  buf.append(treeSource);
  final String instrumentedCode=buf.toString();
  data.setInstrumentedSourceCode(instrumentedCode);
  if (cacheInstrumentedCode) {
    instrumentedScriptCache.putIfAbsent(normalizedSourceName,data);
  }
  if (outputInstrumentedFiles) {
synchronized (writtenToDisk) {
      try {
        if (!writtenToDisk.contains(normalizedSourceName)) {
          final File file=new File(normalizedSourceName);
          final File fileOutputDir=new File(outputDir,DigestUtils.md5Hex(file.getParent()));
          FileUtils.mkdir(fileOutputDir.getAbsolutePath());
          final File outputFile=new File(fileOutputDir,file.getName());
          logger.info(""String_Node_Str"",outputFile.getAbsolutePath());
          IOUtils.write(instrumentedCode,new FileOutputStream(outputFile));
          writtenToDisk.add(normalizedSourceName);
        }
      }
 catch (      final IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return instrumentedCode;
}",0.6891385767790262
101290,"public void run() throws IOException {
  if (!outputDir.exists() && !outputDir.mkdirs()) {
    throw new IOException(""String_Node_Str"");
  }
  totalStats=new RunStats(reportName);
  for (  final File test : tests) {
    logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
    runTest(test.toURI().toURL());
  }
  logger.info(""String_Node_Str"");
  if (outputStrategy.contains(OutputStrategy.TOTAL)) {
    writeRunStats(totalStats);
  }
}","public void run() throws IOException {
  if (!outputDir.exists() && !outputDir.mkdirs()) {
    throw new IOException(""String_Node_Str"");
  }
  totalStats=new RunStats(reportName);
  for (  final File test : tests) {
    logger.info(""String_Node_Str"",test.getAbsoluteFile().toURI().normalize().getPath());
    try {
      runTest(test.toURI().toURL());
    }
 catch (    final EcmaError e) {
      if (outputEcmaErrors) {
        logger.warn(e.getMessage(),e);
      }
    }
  }
  logger.info(""String_Node_Str"");
  if (outputStrategy.contains(OutputStrategy.TOTAL)) {
    writeRunStats(totalStats);
  }
}",0.875
101291,"@Override protected WebClient initialValue(){
  final WebClient client=new WebClient();
  client.setIncorrectnessListener(quietIncorrectnessListener);
  return client;
}","@Override protected WebClient initialValue(){
  final WebClient client=new WebClient(BrowserVersion.FIREFOX_3_6);
  client.setIncorrectnessListener(quietIncorrectnessListener);
  return client;
}",0.9285714285714286
101292,"@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(sourceName)) {
    return instrumentedScriptCache.get(sourceName);
  }
  if (shouldIgnore(sourceName)) {
    return sourceCode;
  }
  final ScriptData data=new ScriptData(sourceName,sourceCode);
  scriptDataList.add(data);
  final AstRoot root=new Parser().parse(sourceCode,sourceName,lineNumber);
  root.visit(new InstrumentingVisitor(data));
  final String treeSource=root.toSource();
  final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
  buf.append(initializingCode);
  buf.append(String.format(""String_Node_Str"",coverageVariableName,data.getSourceName()));
  for (  final Integer i : data.getLineNumbersOfAllStatements()) {
    buf.append(String.format(arrayInitializer,data.getSourceName(),i));
  }
  buf.append(treeSource);
  final String instrumentedCode=buf.toString();
  if (cacheInstrumentedCode) {
    instrumentedScriptCache.put(sourceName,instrumentedCode);
  }
  if (outputInstrumentedFiles) {
    try {
      final File outputFile=new File(outputDir,new File(sourceName).getName() + ""String_Node_Str"");
      IOUtils.write(instrumentedCode,new FileOutputStream(outputFile));
    }
 catch (    final IOException e) {
      throw new RuntimeException(e);
    }
  }
  return instrumentedCode;
}","@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(sourceName)) {
    final ScriptData data=instrumentedScriptCache.get(sourceName);
    scriptDataList.add(data);
    return data.getInstrumentedSourceCode();
  }
  if (shouldIgnore(sourceName)) {
    return sourceCode;
  }
  final ScriptData data=new ScriptData(sourceName,sourceCode);
  scriptDataList.add(data);
  final AstRoot root=new Parser().parse(sourceCode,sourceName,lineNumber);
  root.visit(new InstrumentingVisitor(data));
  final String treeSource=root.toSource();
  final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
  buf.append(initializingCode);
  buf.append(String.format(""String_Node_Str"",coverageVariableName,sourceName));
  for (  final Integer i : data.getLineNumbersOfAllStatements()) {
    buf.append(String.format(arrayInitializer,data.getSourceName(),i));
  }
  buf.append(treeSource);
  final String instrumentedCode=buf.toString();
  data.setInstrumentedSourceCode(instrumentedCode);
  if (cacheInstrumentedCode) {
    instrumentedScriptCache.put(sourceName,data);
  }
  if (outputInstrumentedFiles) {
    try {
      final File outputFile=new File(outputDir,new File(sourceName).getName() + ""String_Node_Str"");
      IOUtils.write(instrumentedCode,new FileOutputStream(outputFile));
    }
 catch (    final IOException e) {
      throw new RuntimeException(e);
    }
  }
  return instrumentedCode;
}",0.9353826850690088
101293,"@Override protected WebClient initialValue(){
  final WebClient client=new WebClient(BrowserVersion.FIREFOX_3_6);
  client.setIncorrectnessListener(quietIncorrectnessListener);
  return client;
}","@Override protected WebClient initialValue(){
  final WebClient client=new WebClient(BrowserVersion.FIREFOX_3_6);
  client.setIncorrectnessListener(quietIncorrectnessListener);
  client.setJavaScriptEnabled(true);
  client.setAjaxController(new NicelyResynchronizingAjaxController());
  return client;
}",0.7710843373493976
101294,"private void runTest(final URL test) throws IOException {
  final WebClient client=localClient.get();
  final File instrumentedFileDirectory=new File(outputDir,instrumentedFileDirectoryName);
  final ScriptInstrumenter instrumenter=new ScriptInstrumenter(coverageVariableName);
  if (noInstrumentPatterns != null) {
    instrumenter.setIgnorePatterns(noInstrumentPatterns);
  }
  if (outputInstrumentedFiles) {
    if (!instrumentedFileDirectory.exists() && !instrumentedFileDirectory.mkdirs()) {
      throw new RuntimeException(""String_Node_Str"" + instrumentedFileDirectory);
    }
    instrumenter.setOutputDir(instrumentedFileDirectory);
    instrumenter.setOutputInstrumentedFiles(outputInstrumentedFiles);
  }
  instrumenter.setCacheInstrumentedCode(cacheInstrumentedCode);
  client.setScriptPreProcessor(instrumenter);
  final Page page=client.getPage(test);
  if (page instanceof HtmlPage) {
    final HtmlPage htmlPage=(HtmlPage)page;
    client.waitForBackgroundJavaScript(30000);
    client.setScriptPreProcessor(null);
    final String runName=new File(test.toString()).getName();
    final NativeObject coverageData=(NativeObject)htmlPage.executeJavaScript(coverageVariableName).getJavaScriptResult();
    collectAndWriteRunStats(runName,instrumenter,coverageData);
  }
}","private void runTest(final URL test) throws IOException {
  final WebClient client=localClient.get();
  final File instrumentedFileDirectory=new File(outputDir,instrumentedFileDirectoryName);
  final ScriptInstrumenter instrumenter=new ScriptInstrumenter(client.getJavaScriptEngine().getContextFactory(),coverageVariableName);
  if (noInstrumentPatterns != null) {
    instrumenter.setIgnorePatterns(noInstrumentPatterns);
  }
  if (outputInstrumentedFiles) {
    if (!instrumentedFileDirectory.exists() && !instrumentedFileDirectory.mkdirs()) {
      throw new RuntimeException(""String_Node_Str"" + instrumentedFileDirectory);
    }
    instrumenter.setOutputDir(instrumentedFileDirectory);
    instrumenter.setOutputInstrumentedFiles(outputInstrumentedFiles);
  }
  instrumenter.setCacheInstrumentedCode(cacheInstrumentedCode);
  client.setScriptPreProcessor(instrumenter);
  final Page page=client.getPage(test);
  if (page instanceof HtmlPage) {
    final HtmlPage htmlPage=(HtmlPage)page;
    client.waitForBackgroundJavaScript(30000);
    client.setScriptPreProcessor(null);
    final String runName=new File(test.toString()).getName();
    final NativeObject coverageData=(NativeObject)htmlPage.executeJavaScript(coverageVariableName).getJavaScriptResult();
    collectAndWriteRunStats(runName,instrumenter,coverageData);
  }
}",0.9812762705387847
101295,"public ScriptInstrumenter(final String coverageVariableName){
  this.coverageVariableName=coverageVariableName;
  initializingCode=String.format(""String_Node_Str"",coverageVariableName,coverageVariableName);
  arrayInitializer=String.format(""String_Node_Str"",coverageVariableName);
}","public ScriptInstrumenter(HtmlUnitContextFactory contextFactory,final String coverageVariableName){
  this.contextFactory=contextFactory;
  this.coverageVariableName=coverageVariableName;
  initializingCode=String.format(""String_Node_Str"",coverageVariableName,coverageVariableName);
  arrayInitializer=String.format(""String_Node_Str"",coverageVariableName);
}",0.88125
101296,"@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(sourceName)) {
    final ScriptData data=instrumentedScriptCache.get(sourceName);
    scriptDataList.add(data);
    return data.getInstrumentedSourceCode();
  }
  if (shouldIgnore(sourceName)) {
    return sourceCode;
  }
  final ScriptData data=new ScriptData(sourceName,sourceCode);
  scriptDataList.add(data);
  final AstRoot root=new Parser().parse(sourceCode,sourceName,lineNumber);
  root.visit(new InstrumentingVisitor(data));
  final String treeSource=root.toSource();
  final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
  buf.append(initializingCode);
  buf.append(String.format(""String_Node_Str"",coverageVariableName,sourceName));
  for (  final Integer i : data.getLineNumbersOfAllStatements()) {
    buf.append(String.format(arrayInitializer,data.getSourceName(),i));
  }
  buf.append(treeSource);
  final String instrumentedCode=buf.toString();
  data.setInstrumentedSourceCode(instrumentedCode);
  if (cacheInstrumentedCode) {
    instrumentedScriptCache.put(sourceName,data);
  }
  if (outputInstrumentedFiles) {
    try {
      final File outputFile=new File(outputDir,new File(sourceName).getName() + ""String_Node_Str"");
      IOUtils.write(instrumentedCode,new FileOutputStream(outputFile));
    }
 catch (    final IOException e) {
      throw new RuntimeException(e);
    }
  }
  return instrumentedCode;
}","@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(sourceName)) {
    final ScriptData data=instrumentedScriptCache.get(sourceName);
    scriptDataList.add(data);
    return data.getInstrumentedSourceCode();
  }
  if (shouldIgnore(sourceName)) {
    return sourceCode;
  }
  final ScriptData data=new ScriptData(sourceName,sourceCode);
  scriptDataList.add(data);
  final CompilerEnvirons environs=new CompilerEnvirons();
  environs.initFromContext(contextFactory.enterContext());
  final AstRoot root=new Parser(environs).parse(sourceCode,sourceName,lineNumber);
  root.visit(new InstrumentingVisitor(data));
  final String treeSource=root.toSource();
  final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
  buf.append(initializingCode);
  buf.append(String.format(""String_Node_Str"",coverageVariableName,sourceName));
  for (  final Integer i : data.getLineNumbersOfAllStatements()) {
    buf.append(String.format(arrayInitializer,data.getSourceName(),i));
  }
  buf.append(treeSource);
  final String instrumentedCode=buf.toString();
  data.setInstrumentedSourceCode(instrumentedCode);
  if (cacheInstrumentedCode) {
    instrumentedScriptCache.put(sourceName,data);
  }
  if (outputInstrumentedFiles) {
    try {
      final File outputFile=new File(outputDir,new File(sourceName).getName() + ""String_Node_Str"");
      IOUtils.write(instrumentedCode,new FileOutputStream(outputFile));
    }
 catch (    final IOException e) {
      throw new RuntimeException(e);
    }
  }
  return instrumentedCode;
}",0.963588697931838
101297,"@Override public boolean visit(final AstNode node){
  if (isExecutableBlock(node)) {
    addInstrumentationSnippetFor(node);
  }
  return true;
}","@Override public boolean visit(final AstNode node){
  handleVoidBug(node);
  handleNumberLiteralBug(node);
  if (isExecutableBlock(node)) {
    addInstrumentationSnippetFor(node);
  }
  return true;
}",0.8405797101449275
101298,"static FileStats merge(final FileStats s1,final FileStats s2){
  final List<LineCoverageRecord> r1=s1.getLineCoverageRecords();
  final List<LineCoverageRecord> r2=s2.getLineCoverageRecords();
  isTrue(s1.name.equals(s2.name));
  isTrue(r1.size() == r2.size());
  final List<LineCoverageRecord> mergedRecords=Lists.newLinkedList();
  for (int i=0; i < r1.size(); i++) {
    final LineCoverageRecord l1=r1.get(i);
    final LineCoverageRecord l2=r2.get(i);
    mergedRecords.add(LineCoverageRecord.merge(l1,l2));
  }
  return new FileStats(s1.name,mergedRecords);
}","static FileStats merge(final FileStats s1,final FileStats s2){
  final List<LineCoverageRecord> r1=s1.getLineCoverageRecords();
  final List<LineCoverageRecord> r2=s2.getLineCoverageRecords();
  Validate.isTrue(s1.name.equals(s2.name));
  Validate.isTrue(r1.size() == r2.size());
  final List<LineCoverageRecord> mergedRecords=Lists.newLinkedList();
  for (int i=0; i < r1.size(); i++) {
    final LineCoverageRecord l1=r1.get(i);
    final LineCoverageRecord l2=r2.get(i);
    mergedRecords.add(LineCoverageRecord.merge(l1,l2));
  }
  return new FileStats(s1.name,mergedRecords);
}",0.9842931937172776
101299,"public static LineCoverageRecord merge(final LineCoverageRecord l1,final LineCoverageRecord l2){
  isTrue(l1.lineNr == l2.lineNr);
  isTrue(l1.line.equals(l2.line));
  final LineCoverageRecord merged=new LineCoverageRecord();
  merged.lineNr=l1.lineNr;
  merged.timesExecuted=l1.timesExecuted + l2.timesExecuted;
  merged.line=l1.line;
  return merged;
}","public static LineCoverageRecord merge(final LineCoverageRecord l1,final LineCoverageRecord l2){
  Validate.isTrue(l1.lineNr == l2.lineNr);
  Validate.isTrue(l1.line.equals(l2.line));
  final LineCoverageRecord merged=new LineCoverageRecord();
  merged.lineNr=l1.lineNr;
  merged.timesExecuted=l1.timesExecuted == -1 ? -1 : l1.timesExecuted + l2.timesExecuted;
  merged.line=l1.line;
  return merged;
}",0.925925925925926
101300,"private AstNode newInstrumentationNode(final int lineNr){
  final ExpressionStatement instrumentationNode=new ExpressionStatement();
  final UnaryExpression inc=new UnaryExpression();
  inc.setIsPostfix(true);
  inc.setOperator(Token.INC);
  final ElementGet outer=new ElementGet();
  final ElementGet inner=new ElementGet();
  outer.setTarget(inner);
  final Name covDataVar=new Name();
  covDataVar.setIdentifier(coverageVariableName);
  inner.setTarget(covDataVar);
  final StringLiteral fileName=new StringLiteral();
  fileName.setValue(data.getSourceName());
  fileName.setQuoteCharacter('\'');
  inner.setElement(fileName);
  final NumberLiteral index=new NumberLiteral();
  index.setValue(Integer.toString(lineNr));
  outer.setElement(index);
  inc.setOperand(outer);
  instrumentationNode.setExpression(inc);
  instrumentationNode.setHasResult();
  return instrumentationNode;
}","private AstNode newInstrumentationNode(final int lineNr){
  final ExpressionStatement instrumentationNode=new ExpressionStatement();
  final UnaryExpression inc=new UnaryExpression();
  inc.setIsPostfix(true);
  inc.setOperator(Token.INC);
  final ElementGet outer=new ElementGet();
  final ElementGet inner=new ElementGet();
  outer.setTarget(inner);
  final Name covDataVar=new Name();
  covDataVar.setIdentifier(coverageVariableName);
  inner.setTarget(covDataVar);
  final StringLiteral fileName=new StringLiteral();
  fileName.setValue(data.getSourceName());
  fileName.setQuoteCharacter('\'');
  inner.setElement(fileName);
  final NumberLiteral index=new NumberLiteral();
  index.setNumber(lineNr);
  index.setValue(Integer.toString(lineNr));
  outer.setElement(index);
  inc.setOperand(outer);
  instrumentationNode.setExpression(inc);
  instrumentationNode.setHasResult();
  return instrumentationNode;
}",0.9849916620344636
101301,"private void addInstrumentationSnippetFor(final AstNode node){
  final AstNode parent=node.getParent();
  final int type=node.getType();
  final int parentType=parent.getType();
  if (type == CASE) {
    handleSwitchCase((SwitchCase)node);
  }
 else   if (type == IF && parentType == IF) {
    flattenElseIf((IfStatement)node,(IfStatement)parent);
  }
 else   if (parentType != CASE) {
    if (parent.hasChildren()) {
      parent.addChildBefore(newInstrumentationNode(node.getLineno()),node);
    }
 else {
      final Block block=newInstrumentedBlock(node);
      if (parentType == IF) {
        final IfStatement ifStatement=(IfStatement)parent;
        if (ifStatement.getThenPart() == node) {
          ifStatement.setThenPart(block);
        }
 else         if (ifStatement.getElsePart() == node) {
          ifStatement.setElsePart(block);
        }
      }
 else       if (parentType == WHILE || parentType == FOR || parentType == DO) {
        ((Loop)parent).setBody(block);
      }
 else {
        logger.warn(""String_Node_Str"",parent.toSource());
      }
    }
  }
  data.addExecutableLine(node.getLineno(),node.getLength());
}","private void addInstrumentationSnippetFor(final AstNode node){
  final AstNode parent=node.getParent();
  final int type=node.getType();
  final int parentType=parent.getType();
  if (type == CASE) {
    handleSwitchCase((SwitchCase)node);
  }
 else   if (type == IF && parentType == IF) {
    flattenElseIf((IfStatement)node,(IfStatement)parent);
    data.addExecutableLine(node.getLineno(),node.getLength());
  }
 else   if (parentType != CASE) {
    if (parent.hasChildren()) {
      parent.addChildBefore(newInstrumentationNode(node.getLineno()),node);
    }
 else {
      final Block block=newInstrumentedBlock(node);
      if (parentType == IF) {
        final IfStatement ifStatement=(IfStatement)parent;
        if (ifStatement.getThenPart() == node) {
          ifStatement.setThenPart(block);
        }
 else         if (ifStatement.getElsePart() == node) {
          ifStatement.setElsePart(block);
        }
      }
 else       if (parentType == WHILE || parentType == FOR || parentType == DO) {
        ((Loop)parent).setBody(block);
      }
 else {
        logger.warn(""String_Node_Str"",parent.toSource());
      }
    }
    data.addExecutableLine(node.getLineno(),node.getLength());
  }
}",0.97052541648868
101302,"public ScriptInstrumenter(HtmlUnitContextFactory contextFactory,final String coverageVariableName){
  this.contextFactory=contextFactory;
  this.coverageVariableName=coverageVariableName;
  initializingCode=String.format(""String_Node_Str"",coverageVariableName,coverageVariableName);
  arrayInitializer=String.format(""String_Node_Str"",coverageVariableName);
}","public ScriptInstrumenter(final HtmlUnitContextFactory contextFactory,final String coverageVariableName){
  this.contextFactory=contextFactory;
  this.coverageVariableName=coverageVariableName;
  initializingCode=String.format(""String_Node_Str"",coverageVariableName,coverageVariableName);
  arrayInitializer=String.format(""String_Node_Str"",coverageVariableName);
}",0.9916897506925209
101303,"@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(sourceName)) {
    final ScriptData data=instrumentedScriptCache.get(sourceName);
    scriptDataList.add(data);
    return data.getInstrumentedSourceCode();
  }
  if (shouldIgnore(sourceName)) {
    return sourceCode;
  }
  final ScriptData data=new ScriptData(sourceName,sourceCode);
  scriptDataList.add(data);
  final CompilerEnvirons environs=new CompilerEnvirons();
  environs.initFromContext(contextFactory.enterContext());
  final AstRoot root=new Parser(environs).parse(sourceCode,sourceName,lineNumber);
  root.visit(new InstrumentingVisitor(data));
  final String treeSource=root.toSource();
  final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
  buf.append(initializingCode);
  buf.append(String.format(""String_Node_Str"",coverageVariableName,sourceName));
  for (  final Integer i : data.getLineNumbersOfAllStatements()) {
    buf.append(String.format(arrayInitializer,data.getSourceName(),i));
  }
  buf.append(treeSource);
  final String instrumentedCode=buf.toString();
  data.setInstrumentedSourceCode(instrumentedCode);
  if (cacheInstrumentedCode) {
    instrumentedScriptCache.put(sourceName,data);
  }
  if (outputInstrumentedFiles) {
    try {
      final File outputFile=new File(outputDir,new File(sourceName).getName() + ""String_Node_Str"");
      logger.info(""String_Node_Str"",outputFile.getAbsolutePath());
      IOUtils.write(instrumentedCode,new FileOutputStream(outputFile));
    }
 catch (    final IOException e) {
      throw new RuntimeException(e);
    }
  }
  return instrumentedCode;
}","@Override public String preProcess(final HtmlPage htmlPage,final String sourceCode,final String sourceName,final int lineNumber,final HtmlElement htmlElement){
  if (cacheInstrumentedCode && instrumentedScriptCache.containsKey(sourceName)) {
    final ScriptData data=instrumentedScriptCache.get(sourceName);
    scriptDataList.add(data);
    return data.getInstrumentedSourceCode();
  }
  if (shouldIgnore(sourceName)) {
    return sourceCode;
  }
  final ScriptData data=new ScriptData(sourceName,sourceCode);
  scriptDataList.add(data);
  final CompilerEnvirons environs=new CompilerEnvirons();
  environs.initFromContext(contextFactory.enterContext());
  final AstRoot root=new Parser(environs).parse(sourceCode,sourceName,lineNumber);
  root.visit(new InstrumentingVisitor(data));
  final String treeSource=root.toSource();
  final StringBuilder buf=new StringBuilder(initializingCode.length() + data.getNumberOfStatements() * arrayInitializer.length() + treeSource.length());
  buf.append(initializingCode);
  buf.append(String.format(""String_Node_Str"",coverageVariableName,sourceName));
  for (  final Integer i : data.getLineNumbersOfAllStatements()) {
    buf.append(String.format(arrayInitializer,data.getSourceName(),i));
  }
  buf.append(treeSource);
  final String instrumentedCode=buf.toString();
  data.setInstrumentedSourceCode(instrumentedCode);
  if (cacheInstrumentedCode) {
    instrumentedScriptCache.putIfAbsent(sourceName,data);
  }
  if (outputInstrumentedFiles) {
    try {
      if (!writtenToDisk.contains(sourceName)) {
        final File outputFile=new File(outputDir,new File(sourceName).getName() + ""String_Node_Str"");
        logger.info(""String_Node_Str"",outputFile.getAbsolutePath());
        IOUtils.write(instrumentedCode,new FileOutputStream(outputFile));
        writtenToDisk.add(sourceName);
      }
    }
 catch (    final IOException e) {
      throw new RuntimeException(e);
    }
  }
  return instrumentedCode;
}",0.9710678590215676
101304,"@Override public void onReceive(Object message) throws Exception {
  if (message instanceof CodePointOpenCsvEntry) {
    CodePointOpenCsvEntry entry=(CodePointOpenCsvEntry)message;
    PostcodeUnit unit=new PostcodeUnit(CharMatcher.WHITESPACE.removeFrom(entry.getPostcode()));
    unit.pqi=entry.getPositionalQualityIndicator();
    unit.cartesianLocation=new CartesianLocation(Integer.parseInt(entry.getEastings()),Integer.parseInt(entry.getNorthings()));
    final TimerContext latLongCtx=latLongTransform.time();
    try {
      DirectPosition eastNorth=new GeneralDirectPosition(Integer.parseInt(entry.getEastings()),Integer.parseInt(entry.getNorthings()));
      DirectPosition latLng=osgbToWgs84Transform.transform(eastNorth,eastNorth);
      unit.location=new Location(round(latLng.getOrdinate(0),8),round(latLng.getOrdinate(1),8));
    }
  finally {
      latLongCtx.stop();
    }
    final TimerContext saveCtx=savePostcodeUnit.time();
    try {
      unit.save();
      postcodesProcessed.inc();
    }
 catch (    MongoException.DuplicateKey e) {
    }
 finally {
      saveCtx.stop();
    }
  }
}","@Override public void onReceive(Object message) throws Exception {
  if (message instanceof CodePointOpenCsvEntry) {
    CodePointOpenCsvEntry entry=(CodePointOpenCsvEntry)message;
    PostcodeUnit unit=new PostcodeUnit(CharMatcher.WHITESPACE.removeFrom(entry.getPostcode()));
    unit.pqi=entry.getPositionalQualityIndicator();
    unit.cartesianLocation=new CartesianLocation(Integer.parseInt(entry.getEastings()),Integer.parseInt(entry.getNorthings()));
    final TimerContext latLongCtx=latLongTransform.time();
    try {
      DirectPosition eastNorth=new GeneralDirectPosition(Integer.parseInt(entry.getEastings()),Integer.parseInt(entry.getNorthings()));
      DirectPosition latLng=osgbToWgs84Transform.transform(eastNorth,eastNorth);
      unit.location=new Location(round(latLng.getOrdinate(1),8),round(latLng.getOrdinate(0),8));
    }
  finally {
      latLongCtx.stop();
    }
    final TimerContext saveCtx=savePostcodeUnit.time();
    try {
      unit.save();
      postcodesProcessed.inc();
    }
 catch (    MongoException.DuplicateKey e) {
    }
 finally {
      saveCtx.stop();
    }
  }
}",0.998193315266486
101305,"public static Result ll(){
  Form<Geocode> geocodeForm=form(Geocode.class).bindFromRequest();
  if (geocodeForm.hasErrors()) {
    return badRequest(index.render(form(DistanceCalc.class),geocodeForm,new ArrayList<PostcodeUnit>()));
  }
 else {
    Geocode geocode=geocodeForm.get();
    PostcodeUnit unit=PostcodeUnit.find.field(""String_Node_Str"").equal(CharMatcher.WHITESPACE.removeFrom(geocode.postcode)).get();
    return ok(toJson(unit.location));
  }
}","public static Result ll(){
  Form<Geocode> geocodeForm=form(Geocode.class).bindFromRequest();
  if (geocodeForm.hasErrors()) {
    return badRequest(index.render(form(DistanceCalc.class),geocodeForm,new ArrayList<PostcodeUnit>()));
  }
 else {
    Geocode geocode=geocodeForm.get();
    PostcodeUnit unit=PostcodeUnit.find.field(""String_Node_Str"").equal(CharMatcher.WHITESPACE.removeFrom(geocode.postcode.toUpperCase())).get();
    return ok(toJson(unit.location));
  }
}",0.9849137931034484
101306,"public static Result eastingsNorthings(String postcode){
  if (postcode == null)   return notFound();
  PostcodeUnit unit=PostcodeUnit.find.field(""String_Node_Str"").equal(CharMatcher.WHITESPACE.removeFrom(postcode.toUpperCase())).get();
  if (unit == null) {
    return notFound();
  }
 else {
    return ok(toJson(unit.cartesianLocation));
  }
}","public static Result eastingsNorthings(String postcode){
  if (Strings.isNullOrEmpty(postcode))   return badRequest(""String_Node_Str"");
  postcode=CharMatcher.WHITESPACE.removeFrom(postcode.toUpperCase());
  if (postcode.length() < 5 || postcode.length() > 7)   return badRequest(""String_Node_Str"");
  PostcodeUnit unit=PostcodeUnit.find.field(""String_Node_Str"").equal(postcode).get();
  if (unit == null) {
    return notFound();
  }
 else {
    return ok(toJson(unit.cartesianLocation));
  }
}",0.5683709869203329
101307,"public static Result en(){
  Form<Geocode> geocodeForm=form(Geocode.class).bindFromRequest();
  if (geocodeForm.hasErrors()) {
    return badRequest(index.render(form(DistanceCalc.class),geocodeForm,new ArrayList<PostcodeUnit>()));
  }
 else {
    Geocode geocode=geocodeForm.get();
    PostcodeUnit unit=PostcodeUnit.find.field(""String_Node_Str"").equal(CharMatcher.WHITESPACE.removeFrom(geocode.postcode)).get();
    return ok(toJson(unit.cartesianLocation));
  }
}","public static Result en(){
  Form<Geocode> geocodeForm=form(Geocode.class).bindFromRequest();
  if (geocodeForm.hasErrors()) {
    return badRequest(index.render(form(DistanceCalc.class),geocodeForm,new ArrayList<PostcodeUnit>()));
  }
 else {
    Geocode geocode=geocodeForm.get();
    PostcodeUnit unit=PostcodeUnit.find.field(""String_Node_Str"").equal(CharMatcher.WHITESPACE.removeFrom(geocode.postcode.toUpperCase())).get();
    return ok(toJson(unit.cartesianLocation));
  }
}",0.985200845665962
101308,"public static Result latLng(String postcode){
  if (postcode == null)   return notFound();
  PostcodeUnit unit=PostcodeUnit.find.field(""String_Node_Str"").equal(CharMatcher.WHITESPACE.removeFrom(postcode.toUpperCase())).get();
  if (unit == null) {
    return notFound();
  }
 else {
    return ok(toJson(unit.location));
  }
}","public static Result latLng(String postcode){
  if (Strings.isNullOrEmpty(postcode))   return badRequest(""String_Node_Str"");
  postcode=CharMatcher.WHITESPACE.removeFrom(postcode.toUpperCase());
  if (postcode.length() < 5 || postcode.length() > 7)   return badRequest(""String_Node_Str"");
  PostcodeUnit unit=PostcodeUnit.find.field(""String_Node_Str"").equal(postcode).get();
  if (unit == null) {
    return notFound();
  }
 else {
    return ok(toJson(unit.location));
  }
}",0.5468164794007491
101309,"public WriteResult delete(WriteConcern wc){
  return datastore.delete(this,wc);
}","public WriteResult delete(){
  return datastore.delete(this);
}",0.875
101310,"public void getAdditionalKeys(Map<String,ManagedSecretKey> keys) throws OpsException {
  ItemBase model=getModel();
  if (model.links != null) {
    for (    Link link : model.links.getLinks()) {
      ItemBase item=platformLayer.getItem(link.getTarget());
      LinkTarget linkTarget=providers.toInterface(item,LinkTarget.class);
      PlatformLayerKey caPath=linkTarget.getCaForClientKey();
      if (caPath != null) {
        String alias=links.buildKeyName(link);
        keys.put(alias,findCaSignedKey(caPath,alias));
      }
    }
  }
}","public void getAdditionalKeys(Map<String,ManagedSecretKey> keys) throws OpsException {
  for (  Link link : getLinks()) {
    ItemBase item=platformLayer.getItem(link.getTarget());
    LinkTarget linkTarget=providers.toInterface(item,LinkTarget.class);
    PlatformLayerKey caPath=linkTarget.getCaForClientKey();
    if (caPath != null) {
      String alias=links.buildKeyName(link);
      keys.put(alias,findCaSignedKey(caPath,alias));
    }
  }
}",0.4545454545454545
101311,"public void resolveKeys(Object item) throws OpsException {
  Class<? extends Object> itemClass=item.getClass();
  for (  Field field : itemClass.getFields()) {
    Class<?> fieldType=field.getType();
    if (fieldType == PlatformLayerKey.class) {
      PlatformLayerKey key;
      try {
        key=(PlatformLayerKey)field.get(item);
      }
 catch (      IllegalAccessException e) {
        throw new IllegalStateException(""String_Node_Str"" + field,e);
      }
      if (key != null) {
        PlatformLayerKey newKey=resolveKey(key);
        if (newKey != key) {
          try {
            field.set(item,key);
          }
 catch (          IllegalAccessException e) {
            throw new IllegalStateException(""String_Node_Str"" + field,e);
          }
        }
      }
    }
    if (fieldType == List.class) {
      Type genericFieldType=field.getGenericType();
      if (genericFieldType instanceof ParameterizedType) {
        ParameterizedType aType=(ParameterizedType)genericFieldType;
        Type[] fieldArgTypes=aType.getActualTypeArguments();
        if (fieldArgTypes.length == 1) {
          Type fieldArgType=fieldArgTypes[0];
          if (fieldArgType instanceof Class) {
            Class fieldArg=(Class)fieldArgType;
            if (fieldArg.equals(PlatformLayerKey.class)) {
              List<PlatformLayerKey> list;
              try {
                list=(List<PlatformLayerKey>)field.get(item);
              }
 catch (              IllegalAccessException e) {
                throw new IllegalStateException(""String_Node_Str"" + field,e);
              }
              if (list != null) {
                for (int i=0; i < list.size(); i++) {
                  PlatformLayerKey key=list.get(i);
                  PlatformLayerKey newKey=resolveKey(key);
                  if (newKey != key) {
                    list.set(i,newKey);
                  }
                }
                try {
                  field.set(item,list);
                }
 catch (                IllegalAccessException e) {
                  throw new IllegalStateException(""String_Node_Str"" + field,e);
                }
              }
            }
          }
        }
      }
    }
  }
}","public void resolveKeys(Object item) throws OpsException {
  Class<? extends Object> itemClass=item.getClass();
  for (  Field field : itemClass.getFields()) {
    Class<?> fieldType=field.getType();
    if (fieldType == PlatformLayerKey.class) {
      PlatformLayerKey key;
      try {
        key=(PlatformLayerKey)field.get(item);
      }
 catch (      IllegalAccessException e) {
        throw new IllegalStateException(""String_Node_Str"" + field,e);
      }
      if (key != null) {
        PlatformLayerKey newKey=resolveKey(key);
        if (newKey != key) {
          try {
            field.set(item,newKey);
          }
 catch (          IllegalAccessException e) {
            throw new IllegalStateException(""String_Node_Str"" + field,e);
          }
        }
      }
    }
    if (fieldType == List.class) {
      Type genericFieldType=field.getGenericType();
      if (genericFieldType instanceof ParameterizedType) {
        ParameterizedType aType=(ParameterizedType)genericFieldType;
        Type[] fieldArgTypes=aType.getActualTypeArguments();
        if (fieldArgTypes.length == 1) {
          Type fieldArgType=fieldArgTypes[0];
          if (fieldArgType instanceof Class) {
            Class fieldArg=(Class)fieldArgType;
            if (fieldArg.equals(PlatformLayerKey.class)) {
              List<PlatformLayerKey> list;
              try {
                list=(List<PlatformLayerKey>)field.get(item);
              }
 catch (              IllegalAccessException e) {
                throw new IllegalStateException(""String_Node_Str"" + field,e);
              }
              if (list != null) {
                for (int i=0; i < list.size(); i++) {
                  PlatformLayerKey key=list.get(i);
                  PlatformLayerKey newKey=resolveKey(key);
                  if (newKey != key) {
                    list.set(i,newKey);
                  }
                }
                try {
                  field.set(item,list);
                }
 catch (                IllegalAccessException e) {
                  throw new IllegalStateException(""String_Node_Str"" + field,e);
                }
              }
            }
          }
        }
      }
    }
  }
}",0.9988649262202044
101312,"public void addString(String valueName,String value){
  MetricTreeBase child=findChild(key);
  if (child != null) {
    throw new IllegalStateException();
  }
 else {
    child=new MetricTreeString(key,value);
    children.add(child);
  }
}","public void addString(String key,String value){
  MetricTreeBase child=findChild(key);
  if (child != null) {
    throw new IllegalStateException();
  }
 else {
    child=new MetricTreeString(key,value);
    children.add(child);
  }
}",0.9746835443037974
101313,"@Override public Object runCommand() throws PlatformLayerClientException, JSONException, IOException {
  PlatformLayerClient client=getPlatformLayerClient();
  if (stdin) {
    if (value != null) {
      throw new CliException(""String_Node_Str"");
    }
    InputStream stream=new NoCloseInputStream(System.in);
    byte[] data=IoUtils.readAllBinary(stream);
    if (format.equals(""String_Node_Str"")) {
      value=CryptoUtils.toBase64(data);
    }
 else {
      throw new CliException(""String_Node_Str"" + format);
    }
  }
 else {
    throw new CliException(""String_Node_Str"");
  }
  PlatformLayerKey resolved=path.resolve(getContext());
  UntypedItem item=client.getItemUntyped(resolved);
  Element element=item.getRoot();
  List<String> tokens=Lists.newArrayList(Splitter.on(""String_Node_Str"").split(key));
  for (int i=0; i < tokens.size(); i++) {
    String token=tokens.get(i);
    Node child=XmlHelper.getChildElement(element,token);
    if (child == null) {
      if (i == tokens.size() - 1) {
        child=element.getOwnerDocument().createElement(token);
        element.appendChild(child);
      }
 else {
        throw new CliException(""String_Node_Str"" + token);
      }
    }
    element=(Element)child;
  }
  element.setTextContent(value);
  String xml=item.serialize();
  UntypedItem updated=client.putItem(resolved,xml,Format.XML);
  return updated;
}","@Override public Object runCommand() throws PlatformLayerClientException, JSONException, IOException {
  PlatformLayerClient client=getPlatformLayerClient();
  if (stdin) {
    if (value != null) {
      throw new CliException(""String_Node_Str"");
    }
    InputStream stream=new NoCloseInputStream(System.in);
    byte[] data=IoUtils.readAllBinary(stream);
    if (""String_Node_Str"".equals(format)) {
      value=CryptoUtils.toBase64(data);
    }
 else {
      value=new String(data);
    }
  }
 else   if (value == null) {
    throw new CliException(""String_Node_Str"");
  }
  PlatformLayerKey resolved=path.resolve(getContext());
  UntypedItem item=client.getItemUntyped(resolved);
  Element element=item.getRoot();
  List<String> tokens=Lists.newArrayList(Splitter.on(""String_Node_Str"").split(key));
  for (int i=0; i < tokens.size(); i++) {
    String token=tokens.get(i);
    Node child=XmlHelper.getChildElement(element,token);
    if (child == null) {
      if (i == tokens.size() - 1) {
        child=element.getOwnerDocument().createElement(token);
        element.appendChild(child);
      }
 else {
        throw new CliException(""String_Node_Str"" + token);
      }
    }
    element=(Element)child;
  }
  element.setTextContent(value);
  String xml=item.serialize();
  UntypedItem updated=client.putItem(resolved,xml,Format.XML);
  return updated;
}",0.9454012458776108
101314,"@Override protected void addChildren() throws OpsException {
  final CloudInstanceMapper cloudHost;
{
    cloudHost=injected(CloudInstanceMapper.class);
    cloudHost.createInstance=false;
    cloudHost.instance=backendItem;
    addChild(cloudHost);
  }
  final SocketAddressPoolAssignment assignPublicAddress;
{
    assignPublicAddress=addChild(SocketAddressPoolAssignment.class);
    assignPublicAddress.holder=DirectCloudUtils.getInstanceDir(backendItem);
    if (Objects.equal(transport,Transport.Ipv6)) {
      assignPublicAddress.poolProvider=DirectCloudUtils.getAddressPool6();
    }
 else {
      assignPublicAddress.poolProvider=DirectCloudUtils.getPublicAddressPool4(publicPort);
    }
  }
{
    ForwardPort forward=injected(ForwardPort.class);
    forward.publicAddress=assignPublicAddress;
    forward.uuid=uuid;
    forward.privateAddress=new OpsProvider<String>(){
      @Override public String get() throws OpsException {
        backendItem=platformLayerClient.getItem(OpsSystem.toKey(backendItem),DirectInstance.class);
        PlatformLayerCloudMachine instanceMachine=(PlatformLayerCloudMachine)instanceHelpers.getMachine(backendItem);
        DirectInstance instance=(DirectInstance)instanceMachine.getInstance();
        return DirectCloudUtils.getNetworkAddress(instance);
      }
    }
;
    forward.privatePort=backendPort;
    cloudHost.addChild(forward);
  }
{
    OpsProvider<TagChanges> tagChanges=new OpsProvider<TagChanges>(){
      @Override public TagChanges get(){
        TagChanges tagChanges=new TagChanges();
        InetSocketAddress socketAddress=assignPublicAddress.get();
        if (socketAddress.getPort() != publicPort) {
          throw new IllegalStateException();
        }
        EndpointInfo endpoint=new EndpointInfo(socketAddress);
        tagChanges.addTags.add(endpoint.toTag());
        return tagChanges;
      }
    }
;
    for (    ItemBase tagItem : tagItems) {
      Tagger tagger=addChild(Tagger.class);
      tagger.platformLayerKey=OpsSystem.toKey(tagItem);
      tagger.tagChangesProvider=tagChanges;
    }
  }
}","@Override protected void addChildren() throws OpsException {
  final CloudInstanceMapper cloudHost;
{
    cloudHost=injected(CloudInstanceMapper.class);
    cloudHost.createInstance=false;
    cloudHost.instance=backendItem;
    addChild(cloudHost);
  }
  final SocketAddressPoolAssignment assignPublicAddress;
{
    assignPublicAddress=cloudHost.addChild(SocketAddressPoolAssignment.class);
    assignPublicAddress.holder=DirectCloudUtils.getInstanceDir(backendItem);
    if (Objects.equal(transport,Transport.Ipv6)) {
      assignPublicAddress.poolProvider=DirectCloudUtils.getAddressPool6();
    }
 else {
      assignPublicAddress.poolProvider=DirectCloudUtils.getPublicAddressPool4(publicPort);
    }
  }
{
    ForwardPort forward=injected(ForwardPort.class);
    forward.publicAddress=assignPublicAddress;
    forward.uuid=uuid;
    forward.privateAddress=new OpsProvider<String>(){
      @Override public String get() throws OpsException {
        backendItem=platformLayerClient.getItem(OpsSystem.toKey(backendItem),DirectInstance.class);
        PlatformLayerCloudMachine instanceMachine=(PlatformLayerCloudMachine)instanceHelpers.getMachine(backendItem);
        DirectInstance instance=(DirectInstance)instanceMachine.getInstance();
        return DirectCloudUtils.getNetworkAddress(instance);
      }
    }
;
    forward.privatePort=backendPort;
    cloudHost.addChild(forward);
  }
{
    OpsProvider<TagChanges> tagChanges=new OpsProvider<TagChanges>(){
      @Override public TagChanges get(){
        TagChanges tagChanges=new TagChanges();
        InetSocketAddress socketAddress=assignPublicAddress.get();
        if (socketAddress.getPort() != publicPort) {
          throw new IllegalStateException();
        }
        EndpointInfo endpoint=new EndpointInfo(socketAddress);
        tagChanges.addTags.add(endpoint.toTag());
        return tagChanges;
      }
    }
;
    for (    ItemBase tagItem : tagItems) {
      Tagger tagger=addChild(Tagger.class);
      tagger.platformLayerKey=OpsSystem.toKey(tagItem);
      tagger.tagChangesProvider=tagChanges;
    }
  }
}",0.9975973089860644
101315,"public static Node getChildElement(Node parent,String elementName){
  NodeList childNodes=parent.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node childNode=childNodes.item(i);
    if (elementName.equals(childNode.getNodeName())) {
      return childNode;
    }
  }
  return null;
}","public static Node getChildElement(Node parent,String elementName){
  NodeList childNodes=parent.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node childNode=childNodes.item(i);
    String nodeName=childNode.getLocalName();
    if (elementName.equals(nodeName)) {
      return childNode;
    }
  }
  return null;
}",0.8813559322033898
101316,"String buildEnvironmentString(){
  if (environment.isEmpty()) {
    return null;
  }
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<String,String> entry : properties.entrySet()) {
    if (sb.length() != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(entry.getKey() + ""String_Node_Str"" + entry.getValue()+ ""String_Node_Str"");
  }
  return sb.toString();
}","String buildEnvironmentString(){
  if (environment.isEmpty()) {
    return null;
  }
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<String,String> entry : environment.entrySet()) {
    if (sb.length() != 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(entry.getKey() + ""String_Node_Str"" + entry.getValue()+ ""String_Node_Str"");
  }
  return sb.toString();
}",0.9724047306176083
101317,"private ServerLine readResponseLine() throws IOException {
  StringBuffer sb=new StringBuffer();
  int lineType=fromStdout.read();
  if (lineType < 0) {
    throw new EOFException();
  }
  if (lineType == 0 || lineType == 2) {
    return new ServerLine(lineType,null);
  }
  while (true) {
    int c=fromStdout.read();
    if (c < 0) {
      throw new EOFException();
    }
    if (c == '\n') {
      break;
    }
    sb.append((char)c);
  }
  ServerLine serverLine=new ServerLine(lineType,sb.toString());
  log.debug(""String_Node_Str"" + serverLine.lineType + ""String_Node_Str""+ serverLine.data);
  return serverLine;
}","private ServerLine readResponseLine() throws IOException {
  log.debug(""String_Node_Str"");
  StringBuffer sb=new StringBuffer();
  int lineType=fromStdout.read();
  if (lineType < 0) {
    throw new EOFException();
  }
  if (lineType == 0 || lineType == 2) {
    return new ServerLine(lineType,null);
  }
  while (true) {
    int c=fromStdout.read();
    if (c < 0) {
      throw new EOFException();
    }
    if (c == '\n') {
      break;
    }
    sb.append((char)c);
  }
  ServerLine serverLine=new ServerLine(lineType,sb.toString());
  log.debug(""String_Node_Str"" + serverLine.lineType + ""String_Node_Str""+ serverLine.data);
  return serverLine;
}",0.9748031496062992
101318,"public ScpChannel(ClientSession clientSession,String cmd) throws IOException {
  this.toStdin=new PipedOutputStream();
  this.fromStdout=new PipedInputStream();
  try {
    channel=BugFixChannelExec.createExecChannel(clientSession,cmd);
  }
 catch (  Exception e1) {
    throw new IOException(""String_Node_Str"",e1);
  }
  this.stderr=new ByteArrayOutputStream();
  channel.setIn(new PipedInputStream(toStdin));
  channel.setOut(new PipedOutputStream(fromStdout));
  channel.setErr(stderr);
}","public ScpChannel(ClientSession clientSession,String cmd) throws IOException {
  this.toStdin=new PipedOutputStream();
  this.fromStdout=new PipedInputStream();
  log.debug(""String_Node_Str"" + cmd);
  try {
    channel=BugFixChannelExec.createExecChannel(clientSession,cmd);
  }
 catch (  Exception e1) {
    throw new IOException(""String_Node_Str"",e1);
  }
  this.stderr=new ByteArrayOutputStream();
  channel.setIn(new PipedInputStream(toStdin));
  channel.setOut(new PipedOutputStream(fromStdout));
  channel.setErr(stderr);
}",0.9627450980392156
101319,"public void connect(TimeSpan connectTimeout) throws SshException {
  try {
    channel.open().await(connectTimeout.getTotalMilliseconds());
  }
 catch (  Exception e) {
    ExceptionUtils.handleInterrupted(e);
    throw new SshException(""String_Node_Str"",e);
  }
}","public void connect(TimeSpan connectTimeout) throws SshException {
  try {
    log.debug(""String_Node_Str"");
    channel.open().await(connectTimeout.getTotalMilliseconds());
  }
 catch (  Exception e) {
    ExceptionUtils.handleInterrupted(e);
    throw new SshException(""String_Node_Str"",e);
  }
}",0.9395017793594306
101320,"@Override protected ItemBase buildItemTemplate() throws OpsException {
  InstanceBase instance=OpsContext.get().getInstance(InstanceBase.class);
  PlatformLayerKey instanceKey=OpsSystem.toKey(instance);
  PublicEndpointBase publicEndpoint=platformLayerCloudHelpers.createPublicEndpoint(instance,parentItem);
  publicEndpoint.publicPort=publicPort;
  publicEndpoint.backendPort=backendPort;
  publicEndpoint.instance=instanceKey;
  publicEndpoint.key=PlatformLayerKey.fromId(instance.getId() + ""String_Node_Str"" + publicPort);
  Tag uniqueTag=UniqueTag.build(instance);
  publicEndpoint.getTags().add(uniqueTag);
  return publicEndpoint;
}","@Override protected PublicEndpointBase buildItemTemplate() throws OpsException {
  InstanceBase instance=OpsContext.get().getInstance(InstanceBase.class);
  PlatformLayerKey instanceKey=OpsSystem.toKey(instance);
  PublicEndpointBase publicEndpoint=platformLayerCloudHelpers.createPublicEndpoint(instance,parentItem);
  publicEndpoint.publicPort=publicPort;
  publicEndpoint.backendPort=backendPort;
  publicEndpoint.instance=instanceKey;
  publicEndpoint.key=PlatformLayerKey.fromId(instance.getId() + ""String_Node_Str"" + publicPort);
  Tag uniqueTag=UniqueTag.build(instance);
  publicEndpoint.getTags().add(uniqueTag);
  return publicEndpoint;
}",0.9860031104199068
101321,"@Override public TagChanges get() throws OpsException {
  TagChanges tagChanges=new TagChanges();
  EndpointInfo endpointInfo=endpointHelpers.findEndpoint(endpoint.getTags(),publicPort);
  if (endpointInfo == null) {
    throw new OpsException(""String_Node_Str"" + publicPort);
  }
  tagChanges.addTags.add(new Tag(Tag.PUBLIC_ENDPOINT,endpointInfo.publicIp + ""String_Node_Str"" + endpointInfo.port));
  return tagChanges;
}","@Override public TagChanges get() throws OpsException {
  TagChanges tagChanges=new TagChanges();
  PublicEndpointBase item=endpoint.getItem();
  if (item == null) {
    if (!OpsContext.isDelete()) {
      throw new OpsException(""String_Node_Str"");
    }
 else {
      log.warn(""String_Node_Str"");
      return null;
    }
  }
  EndpointInfo endpointInfo=endpointHelpers.findEndpoint(item.getTags(),publicPort);
  if (endpointInfo == null) {
    throw new OpsException(""String_Node_Str"" + publicPort);
  }
  tagChanges.addTags.add(new Tag(Tag.PUBLIC_ENDPOINT,endpointInfo.publicIp + ""String_Node_Str"" + endpointInfo.port));
  return tagChanges;
}",0.7422680412371134
101322,"@Override protected void addChildren() throws OpsException {
  if (!Strings.isNullOrEmpty(dnsName)) {
    EndpointDnsRecord dns=injected(EndpointDnsRecord.class);
    dns.destinationPort=publicPort;
    dns.endpointProvider=new Provider<PublicEndpointBase>(){
      @Override public PublicEndpointBase get(){
        return endpoint;
      }
    }
;
    dns.dnsName=dnsName;
    addChild(dns);
  }
  if (tagItem != null) {
    Tagger tagger=injected(Tagger.class);
    OpsProvider<TagChanges> tagChanges=new OpsProvider<TagChanges>(){
      @Override public TagChanges get() throws OpsException {
        TagChanges tagChanges=new TagChanges();
        EndpointInfo endpointInfo=endpointHelpers.findEndpoint(endpoint.getTags(),publicPort);
        if (endpointInfo == null) {
          throw new OpsException(""String_Node_Str"" + publicPort);
        }
        tagChanges.addTags.add(new Tag(Tag.PUBLIC_ENDPOINT,endpointInfo.publicIp + ""String_Node_Str"" + endpointInfo.port));
        return tagChanges;
      }
    }
;
    tagger.platformLayerKey=tagItem;
    tagger.tagChangesProvider=tagChanges;
    addChild(tagger);
  }
  if (defaultBlocked) {
    addChild(FirewallEntry.build(FirewallRecord.buildBlockPort(protocol,backendPort)));
  }
{
    OwnedEndpoint endpoint=injected(OwnedEndpoint.class);
    endpoint.publicPort=publicPort;
    endpoint.backendPort=backendPort;
    endpoint.parentItem=parentItem;
    addChild(endpoint);
  }
}","@Override protected void addChildren() throws OpsException {
  final OwnedEndpoint endpoint;
{
    endpoint=injected(OwnedEndpoint.class);
    endpoint.publicPort=publicPort;
    endpoint.backendPort=backendPort;
    endpoint.parentItem=parentItem;
    addChild(endpoint);
  }
  if (!Strings.isNullOrEmpty(dnsName)) {
    EndpointDnsRecord dns=injected(EndpointDnsRecord.class);
    dns.destinationPort=publicPort;
    dns.endpointProvider=new Provider<PublicEndpointBase>(){
      @Override public PublicEndpointBase get(){
        return endpoint.getItem();
      }
    }
;
    dns.dnsName=dnsName;
    addChild(dns);
  }
  if (tagItem != null) {
    Tagger tagger=injected(Tagger.class);
    OpsProvider<TagChanges> tagChanges=new OpsProvider<TagChanges>(){
      @Override public TagChanges get() throws OpsException {
        TagChanges tagChanges=new TagChanges();
        PublicEndpointBase item=endpoint.getItem();
        if (item == null) {
          if (!OpsContext.isDelete()) {
            throw new OpsException(""String_Node_Str"");
          }
 else {
            log.warn(""String_Node_Str"");
            return null;
          }
        }
        EndpointInfo endpointInfo=endpointHelpers.findEndpoint(item.getTags(),publicPort);
        if (endpointInfo == null) {
          throw new OpsException(""String_Node_Str"" + publicPort);
        }
        tagChanges.addTags.add(new Tag(Tag.PUBLIC_ENDPOINT,endpointInfo.publicIp + ""String_Node_Str"" + endpointInfo.port));
        return tagChanges;
      }
    }
;
    tagger.platformLayerKey=tagItem;
    tagger.tagChangesProvider=tagChanges;
    addChild(tagger);
  }
  if (defaultBlocked) {
    addChild(FirewallEntry.build(FirewallRecord.buildBlockPort(protocol,backendPort)));
  }
}",0.7717425431711146
101323,"@Handler public void handler() throws OpsException {
  ItemBase itemTemplate=buildItemTemplate();
  Tag uniqueTag=getUniqueTag(itemTemplate);
  if (OpsContext.isConfigure()) {
    try {
      platformLayer.putItemByTag(itemTemplate,uniqueTag);
    }
 catch (    PlatformLayerClientException e) {
      throw new OpsException(""String_Node_Str"",e);
    }
  }
  if (OpsContext.isDelete()) {
    List<? extends ItemBase> items=platformLayer.listItems(itemTemplate.getClass(),Filter.byTag(uniqueTag));
    if (items.size() != 0) {
      if (items.size() != 1) {
        throw new OpsException(""String_Node_Str"" + uniqueTag);
      }
      try {
        platformLayer.deleteItem(items.get(0).getKey());
      }
 catch (      PlatformLayerClientException e) {
        throw new OpsException(""String_Node_Str"",e);
      }
    }
  }
}","@Handler public void handler() throws OpsException {
  T itemTemplate=buildItemTemplate();
  Tag uniqueTag=getUniqueTag(itemTemplate);
  if (OpsContext.isConfigure()) {
    try {
      item=platformLayer.putItemByTag(itemTemplate,uniqueTag);
    }
 catch (    PlatformLayerClientException e) {
      throw new OpsException(""String_Node_Str"",e);
    }
  }
  if (OpsContext.isDelete()) {
    List<? extends ItemBase> items=platformLayer.listItems(itemTemplate.getClass(),Filter.byTag(uniqueTag));
    if (items.size() != 0) {
      if (items.size() != 1) {
        throw new OpsException(""String_Node_Str"" + uniqueTag);
      }
      item=(T)items.get(0);
      try {
        platformLayer.deleteItem(items.get(0).getKey());
      }
 catch (      PlatformLayerClientException e) {
        throw new OpsException(""String_Node_Str"",e);
      }
    }
  }
}",0.9749403341288784
101324,protected abstract ItemBase buildItemTemplate() throws OpsException ;,protected abstract T buildItemTemplate() throws OpsException ;,0.931297709923664
101325,"private void postResponseCleanup(){
  RequestContext context=requests.poll();
  currentResponse=null;
  listener.requestFinished(this,context);
  if (disconnectIfNonKeepAliveRequest && !HttpHeaders.isKeepAlive(currentResponse))   channel.close();
}","private void postResponseCleanup(){
  RequestContext context=requests.poll();
  boolean keepAlive=isKeepAlive(context.getRequest()) && isKeepAlive(currentResponse);
  currentResponse=null;
  listener.requestFinished(this,context);
  if (!keepAlive) {
    if (terminate == null)     terminate(RequestFuture.SHUTTING_DOWN,true);
    if (disconnectIfNonKeepAliveRequest && channel.isOpen())     channel.close();
  }
}",0.5438066465256798
101326,"@Override public void channelClosed(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {
  if (channel == null)   listener.connectionFailed(this);
}","@Override public void channelClosed(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {
  terminate(RequestFuture.CONNECTION_LOST,true);
}",0.7412140575079872
101327,"@Override public void exceptionCaught(ChannelHandlerContext ctx,ExceptionEvent e) throws Exception {
  if (channel == null)   return;
  RequestContext current;
synchronized (mutex) {
    willClose=true;
    current=requests.poll();
  }
  if (current != null) {
    current.getFuture().failedWithCause(e.getCause());
    listener.requestFinished(this,current);
  }
  if (channel.isConnected())   channel.close();
}","@Override public void exceptionCaught(ChannelHandlerContext ctx,ExceptionEvent e) throws Exception {
  terminate(e.getCause(),true);
}",0.4680073126142596
101328,"@Override public void run(){
  try {
    channel.write(context.getRequest());
  }
 catch (  Exception e) {
synchronized (mutex) {
      requests.remove(context);
    }
    context.getFuture().failedWithCause(e);
  }
}","@Override public void run(){
  try {
    channel.write(context.getRequest());
  }
 catch (  Exception e) {
    handleWriteFailed(context,e);
  }
}",0.721763085399449
101329,"@Override public boolean execute(final RequestContext context){
  Utils.ensureValue(context != null,""String_Node_Str"");
  if (context.getFuture().isDone()) {
    listener.requestFinished(this,context);
    return true;
  }
  if (!context.isIdempotent() && !allowNonIdempotentPipelining) {
    context.getFuture().failedWithCause(RequestFuture.EXECUTION_REJECTED);
    listener.requestFinished(this,context);
    return true;
  }
synchronized (mutex) {
    if (!isAvailable()) {
      context.getFuture().failedWithCause(RequestFuture.EXECUTION_REJECTED);
      listener.requestFinished(this,context);
      return true;
    }
 else     if ((terminate != null) || !channel.isConnected()) {
      return false;
    }
    requests.add(context);
    if (!HttpHeaders.isKeepAlive(context.getRequest()))     willClose=true;
  }
  context.getFuture().markExecutionStart();
  if (executor != null) {
    executor.execute(new Runnable(){
      @Override public void run(){
        try {
          channel.write(context.getRequest());
        }
 catch (        Exception e) {
synchronized (mutex) {
            requests.remove(context);
          }
          context.getFuture().failedWithCause(e);
        }
      }
    }
);
  }
 else {
    try {
      channel.write(context.getRequest());
    }
 catch (    Exception e) {
synchronized (mutex) {
        requests.remove(context);
      }
      context.getFuture().failedWithCause(e);
      return true;
    }
  }
  context.getFuture().attachConnection(this);
  if (context.getTimeout() > 0)   timeoutController.controlTimeout(context);
  return true;
}","@Override public boolean execute(final RequestContext context){
  Utils.ensureValue(context != null,""String_Node_Str"");
  if (context.getFuture().isDone()) {
    listener.requestFinished(this,context);
    return true;
  }
  if (!context.isIdempotent() && !allowNonIdempotentPipelining) {
    context.getFuture().failedWithCause(RequestFuture.EXECUTION_REJECTED);
    listener.requestFinished(this,context);
    return true;
  }
synchronized (mutex) {
    if ((terminate != null) || (channel == null) || !channel.isConnected()) {
      return false;
    }
 else     if (!isAvailable()) {
      context.getFuture().failedWithCause(RequestFuture.EXECUTION_REJECTED);
      listener.requestFinished(this,context);
      return true;
    }
    requests.add(context);
    if (!isKeepAlive(context.getRequest()))     willClose=true;
  }
  context.getFuture().markExecutionStart();
  if (executor != null) {
    executor.execute(new Runnable(){
      @Override public void run(){
        try {
          channel.write(context.getRequest());
        }
 catch (        Exception e) {
          handleWriteFailed(context,e);
        }
      }
    }
);
  }
 else {
    try {
      channel.write(context.getRequest());
    }
 catch (    Exception e) {
      handleWriteFailed(context,e);
      return true;
    }
  }
  context.getFuture().attachConnection(this);
  if (context.getTimeout() > 0)   timeoutController.controlTimeout(context);
  return true;
}",0.6210075732630885
101330,"@Override public void terminate(Throwable reason){
synchronized (mutex) {
    if (terminate != null)     return;
    terminate=reason;
    willClose=true;
  }
  if ((channel != null) && channel.isConnected())   channel.close();
}","private void terminate(Throwable reason,boolean restoreCurrent){
synchronized (mutex) {
    if (terminate != null)     return;
    terminate=reason;
    willClose=true;
  }
  if (channel == null) {
    listener.connectionFailed(this);
  }
 else {
    if (channel.isConnected())     try {
      channel.close();
    }
 catch (    Exception ignored) {
    }
    Collection<RequestContext> requestsToRestore=new ArrayList<>();
    for (    RequestContext request : requests) {
      if (request.getFuture().isDone())       continue;
      boolean shouldRestore=restoreCurrent && (request.isIdempotent() || restoreNonIdempotentOperations);
      if (shouldRestore)       requestsToRestore.add(request);
 else       request.getFuture().failedWithCause(reason);
    }
    if (requestsToRestore.isEmpty())     listener.connectionTerminated(this);
 else     listener.connectionTerminated(this,requestsToRestore);
  }
}",0.2247585601404741
101331,"@Override public boolean cancel(){
synchronized (this) {
    if (done)     return false;
    executionEnd=System.nanoTime();
    cause=CANCELLED;
    done=true;
    connection.terminate(CANCELLED);
    if (waiters > 0)     notifyAll();
  }
  notifyListeners();
  return true;
}","@Override public boolean cancel(){
synchronized (this) {
    if (done)     return false;
    executionEnd=System.nanoTime();
    cause=CANCELLED;
    done=true;
    if (connection != null)     connection.terminate(CANCELLED);
    if (waiters > 0)     notifyAll();
  }
  notifyListeners();
  return true;
}",0.9518900343642612
101332,"@Override public boolean willProcessResponse(HttpResponse response) throws Exception {
  if (!isAcceptableResponse(response))   return false;
  if ((response.getContent() != null) && (response.getContent().readableBytes() > 0)) {
    result=convertBufferToResult(response.getContent());
    finished=true;
    return true;
  }
  long length=HttpHeaders.getContentLength(response,-1);
  if (length > Integer.MAX_VALUE) {
    finished=true;
    return false;
  }
  if (length == 0) {
    finished=true;
    return false;
  }
  if (response.isChunked()) {
    if (length == -1) {
      buffer=ChannelBuffers.dynamicBuffer(2048);
    }
 else {
      buffer=ChannelBuffers.dynamicBuffer((int)length);
    }
    return true;
  }
  finished=true;
  return false;
}","@Override public boolean willProcessResponse(HttpResponse response) throws Exception {
  if (!isAcceptableResponse(response))   return false;
  if ((response.getContent() != null) && (response.getContent().readableBytes() > 0)) {
    result=convertBufferToResult(response.getContent());
    finished=true;
    return true;
  }
  long length=HttpHeaders.getContentLength(response,-1);
  if ((length > Integer.MAX_VALUE) || (length < -1)) {
    finished=true;
    return false;
  }
  if (length == 0) {
    finished=true;
    return false;
  }
  if (response.isChunked()) {
    if (length < 0) {
      buffer=ChannelBuffers.dynamicBuffer(2048);
    }
 else {
      buffer=ChannelBuffers.dynamicBuffer((int)length);
    }
    return true;
  }
  finished=true;
  return false;
}",0.790333115610712
101333,"@Override public HttpClient createClient(){
  AbstractHttpClient client;
  if (gatherStats)   client=new StatsGatheringHttpClient();
 else   client=new DefaultHttpClient();
  client.setUseSsl(useSsl);
  client.setRequestCompressionLevel(requestCompressionLevel);
  client.setAutoInflate(autoInflate);
  client.setConnectionTimeout(connectionTimeout);
  client.setRequestInactivityTimeout(requestInactivityTimeout);
  client.setMaxConnectionsPerHost(maxConnectionsPerHost);
  client.setMaxQueuedRequests(maxQueuedRequests);
  client.setUseNio(useNio);
  client.setMaxIoWorkerThreads(maxIoWorkerThreads);
  client.setMaxHelperThreads(maxHelperThreads);
  client.setHostContextFactory(hostContextFactory);
  client.setConnectionFactory(connectionFactory);
  client.setTimeoutManager(timeoutController);
  client.setCleanupInactiveHostContexts(cleanupInactiveHostContexts);
  client.setSslContextFactory(sslContextFactory);
  return client;
}","@Override public HttpClient createClient(){
  AbstractHttpClient client;
  if (gatherStats)   client=new StatsGatheringHttpClient();
 else   client=new DefaultHttpClient();
  client.setUseSsl(useSsl);
  client.setRequestCompressionLevel(requestCompressionLevel);
  client.setAutoInflate(autoInflate);
  client.setConnectionTimeout(connectionTimeout);
  client.setRequestInactivityTimeout(requestInactivityTimeout);
  client.setMaxConnectionsPerHost(maxConnectionsPerHost);
  client.setMaxQueuedRequests(maxQueuedRequests);
  client.setUseNio(useNio);
  client.setMaxIoWorkerThreads(maxIoWorkerThreads);
  client.setMaxHelperThreads(maxHelperThreads);
  client.setHostContextFactory(hostContextFactory);
  client.setConnectionFactory(connectionFactory);
  client.setFutureFactory(futureFactory);
  client.setTimeoutManager(timeoutController);
  client.setCleanupInactiveHostContexts(cleanupInactiveHostContexts);
  client.setSslContextFactory(sslContextFactory);
  return client;
}",0.978102189781022
101334,"@Override public Card addNewCard(String idList,String name,Map<String,String> keyValueMap){
  validateObjectId(idList);
  final String url=TrelloURL.create(apiKey,TrelloURL.CARD_POST_URL).token(token).build();
  if (keyValueMap == null)   keyValueMap=new HashMap<String,String>();
  if (keyValueMap.containsKey(""String_Node_Str""))   keyValueMap.remove(""String_Node_Str"");
  keyValueMap.put(""String_Node_Str"",name);
  return trelloObjFactory.createObject(new TypeToken<Card>(){
  }
,doApiPost(url,keyValueMap));
}","@Override public Card addNewCard(String idList,String name,Map<String,String> keyValueMap){
  validateObjectId(idList);
  final String url=TrelloURL.create(apiKey,TrelloURL.CARD_POST_URL).token(token).build();
  if (keyValueMap == null)   keyValueMap=new HashMap<String,String>();
  if (keyValueMap.containsKey(""String_Node_Str""))   keyValueMap.remove(""String_Node_Str"");
  keyValueMap.put(""String_Node_Str"",name);
  keyValueMap.put(""String_Node_Str"",idList);
  return trelloObjFactory.createObject(new TypeToken<Card>(){
  }
,doApiPost(url,keyValueMap));
}",0.9579045837231056
101335,"public TrelloURL filter(String... filters){
  this.filters=filters;
  return this;
}","public TrelloURL filter(String... filters){
  this.filters=isArrayEmpty(filters) ? null : filters;
  return this;
}",0.8442211055276382
101336,"@Override public void init(){
  SessionService.setDatabaseInfo(ConsoleFilter.getDatabase());
  consoleService=new ConsoleService();
  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Thread thread,    Throwable throwable){
      SessionService.cleanSessions();
      System.gc();
    }
  }
);
  post(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      final String query=request.body();
      if (query != null && !query.isEmpty()) {
        LOG.warn(""String_Node_Str"" + query);
      }
      return new Gson().toJson(consoleService.execute(service,null,query,null));
    }
  }
);
  post(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      final String version=request.body();
      service.setVersion(version);
      return new Gson().toJson(map(""String_Node_Str"",service.getVersion()));
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      String query=param(request,""String_Node_Str"",""String_Node_Str"");
      return service.cypherQueryResults(query).toString();
    }
  }
);
  post(new Route(""String_Node_Str""){
    @Override protected void doBefore(    Request request,    Response response){
      Neo4jService service=SessionService.getService(request.raw(),true);
      if (service.isInitialized()) {
        reset(request);
      }
    }
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      final Map input=requestBodyToMap(request);
      final String id=param(input,""String_Node_Str"",null);
      final Map<String,Object> result;
      if (id != null) {
        result=consoleService.init(service,id);
      }
 else {
        result=consoleService.init(service,input);
      }
      return new Gson().toJson(result);
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      String query=request.queryParams(""String_Node_Str"");
      return new Gson().toJson(service.cypherQueryViz(query));
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      return service.exportToGeoff();
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      String query=param(request,""String_Node_Str"",""String_Node_Str"");
      String[] props=param(request,""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      final String type=param(request,""String_Node_Str"",""String_Node_Str"");
      final String scale=param(request,""String_Node_Str"",""String_Node_Str"");
      SubGraph graph;
      if (query.trim().isEmpty() || !service.isCypherQuery(query) || service.isMutatingQuery(query)) {
        graph=SubGraph.from(service.getGraphDatabase());
      }
 else {
        final CypherQueryExecutor.CypherResult result=service.cypherQuery(query);
        graph=SubGraph.from(result);
      }
      final String yuml=new YumlExport().toYuml(graph,props);
      return String.format(""String_Node_Str"",scale,yuml,type);
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      return service.exportToCypher();
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service) throws IOException {
      final String uri=baseUri(request.raw(),""String_Node_Str"" + URLEncoder.encode(service.exportToGeoff(),""String_Node_Str"") + hasRootNodeParam(service),null);
      return consoleService.shortenUrl(uri);
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service) throws IOException {
      return consoleService.shortenUrl(request.queryParams(""String_Node_Str""));
    }
  }
);
  delete(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      reset(request);
      return ""String_Node_Str"";
    }
  }
);
  post(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service) throws SyntaxError, SubgraphError {
      String geoff=request.body();
      if (geoff != null && !geoff.isEmpty()) {
        LOG.warn(""String_Node_Str"" + geoff);
      }
      Map res=service.mergeGeoff(geoff);
      return new Gson().toJson(res);
    }
  }
);
}","@Override public void init(){
  SessionService.setDatabaseInfo(ConsoleFilter.getDatabase());
  consoleService=new ConsoleService();
  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Thread thread,    Throwable throwable){
      SessionService.cleanSessions();
      System.gc();
    }
  }
);
  post(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      final String query=request.body();
      if (query != null && !query.isEmpty()) {
        LOG.warn(""String_Node_Str"" + query);
      }
      return new Gson().toJson(consoleService.execute(service,null,query,null));
    }
  }
);
  post(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      final String version=request.body();
      service.setVersion(version);
      return new Gson().toJson(map(""String_Node_Str"",service.getVersion()));
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      String query=param(request,""String_Node_Str"",""String_Node_Str"");
      return service.cypherQueryResults(query).toString();
    }
  }
);
  post(new Route(""String_Node_Str""){
    @Override protected void doBefore(    Request request,    Response response){
      Neo4jService service=SessionService.getService(request.raw(),true);
      if (service.isInitialized()) {
        reset(request);
      }
    }
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      final Map input=requestBodyToMap(request);
      final String id=param(input,""String_Node_Str"",null);
      final Map<String,Object> result;
      if (id != null) {
        result=consoleService.init(service,id);
      }
 else {
        result=consoleService.init(service,input);
      }
      return new Gson().toJson(result);
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      String query=request.queryParams(""String_Node_Str"");
      return new Gson().toJson(service.cypherQueryViz(query));
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      return service.exportToGeoff();
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      String query=param(request,""String_Node_Str"",""String_Node_Str"");
      String[] props=param(request,""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      final String type=param(request,""String_Node_Str"",""String_Node_Str"");
      final String scale=param(request,""String_Node_Str"",""String_Node_Str"");
      SubGraph graph;
      if (query.trim().isEmpty() || !service.isCypherQuery(query) || service.isMutatingQuery(query)) {
        graph=SubGraph.from(service.getGraphDatabase());
      }
 else {
        final CypherQueryExecutor.CypherResult result=service.cypherQuery(query);
        graph=SubGraph.from(service.getGraphDatabase(),result);
      }
      final String yuml=new YumlExport().toYuml(graph,props);
      return String.format(""String_Node_Str"",scale,yuml,type);
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      return service.exportToCypher();
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service) throws IOException {
      final String uri=baseUri(request.raw(),""String_Node_Str"" + URLEncoder.encode(service.exportToGeoff(),""String_Node_Str"") + hasRootNodeParam(service),null);
      return consoleService.shortenUrl(uri);
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service) throws IOException {
      return consoleService.shortenUrl(request.queryParams(""String_Node_Str""));
    }
  }
);
  delete(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      reset(request);
      return ""String_Node_Str"";
    }
  }
);
  post(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service) throws SyntaxError, SubgraphError {
      String geoff=request.body();
      if (geoff != null && !geoff.isEmpty()) {
        LOG.warn(""String_Node_Str"" + geoff);
      }
      Map res=service.mergeGeoff(geoff);
      return new Gson().toJson(res);
    }
  }
);
}",0.9972116079727356
101337,"@Test public void testFromSimpleCypherResult() throws Exception {
  final CypherQueryExecutor.CypherResult result=result(""String_Node_Str"",gdb.getReferenceNode());
  final SubGraph graph=SubGraph.from(result);
  assertRefNodeGraph(graph);
}","@Test public void testFromSimpleCypherResult() throws Exception {
  final CypherQueryExecutor.CypherResult result=result(""String_Node_Str"",aNode);
  final SubGraph graph=SubGraph.from(gdb,result);
  assertRefNodeGraph(graph);
}",0.6509635974304069
101338,"@Test public void testFromSimpleGraph() throws Exception {
  final Node n1=gdb.createNode();
  n1.setProperty(""String_Node_Str"",""String_Node_Str"");
  final Node n0=gdb.getReferenceNode();
  final Relationship relationship=n0.createRelationshipTo(n1,DynamicRelationshipType.withName(""String_Node_Str""));
  relationship.setProperty(""String_Node_Str"",true);
  final SubGraph graph=SubGraph.from(gdb);
  final Map<Long,Map<String,Object>> nodes=graph.getNodes();
  assertEquals(2,nodes.size());
  final Map<String,Object> node=nodes.get(n1.getId());
  assertEquals(2,node.size());
  assertEquals(n1.getId(),node.get(""String_Node_Str""));
  assertEquals(n1.getProperty(""String_Node_Str""),node.get(""String_Node_Str""));
  final Map<Long,Map<String,Object>> rels=graph.getRelationships();
  assertEquals(1,rels.size());
  final Map<String,Object> rel=rels.get(relationship.getId());
  assertEquals(7,rel.size());
  assertEquals(relationship.getId(),rel.get(""String_Node_Str""));
  assertEquals(relationship.getProperty(""String_Node_Str""),rel.get(""String_Node_Str""));
  assertEquals(relationship.getType().name(),rel.get(""String_Node_Str""));
  assertEquals(n0.getId(),rel.get(""String_Node_Str""));
  assertEquals(n1.getId(),rel.get(""String_Node_Str""));
  assertEquals(0,rel.get(""String_Node_Str""));
  assertEquals(1,rel.get(""String_Node_Str""));
}","@Test public void testFromSimpleGraph() throws Exception {
  final Node n1=gdb.createNode();
  n1.setProperty(""String_Node_Str"",""String_Node_Str"");
  final Node n0=aNode;
  final Relationship relationship=n0.createRelationshipTo(n1,DynamicRelationshipType.withName(""String_Node_Str""));
  relationship.setProperty(""String_Node_Str"",true);
  final SubGraph graph=SubGraph.from(gdb);
  final Map<Long,Map<String,Object>> nodes=graph.getNodes();
  assertEquals(2,nodes.size());
  final Map<String,Object> node=nodes.get(n1.getId());
  assertEquals(2,node.size());
  assertEquals(n1.getId(),node.get(""String_Node_Str""));
  assertEquals(n1.getProperty(""String_Node_Str""),node.get(""String_Node_Str""));
  final Map<Long,Map<String,Object>> rels=graph.getRelationships();
  assertEquals(1,rels.size());
  final Map<String,Object> rel=rels.get(relationship.getId());
  assertEquals(7,rel.size());
  assertEquals(relationship.getId(),rel.get(""String_Node_Str""));
  assertEquals(relationship.getProperty(""String_Node_Str""),rel.get(""String_Node_Str""));
  assertEquals(relationship.getType().name(),rel.get(""String_Node_Str""));
  assertEquals(n0.getId(),rel.get(""String_Node_Str""));
  assertEquals(n1.getId(),rel.get(""String_Node_Str""));
  assertEquals(0,rel.get(""String_Node_Str""));
  assertEquals(1,rel.get(""String_Node_Str""));
}",0.989815164089023
101339,"@Test public void testFromRelCypherResult() throws Exception {
  final Relationship rel=gdb.getReferenceNode().createRelationshipTo(gdb.getReferenceNode(),DynamicRelationshipType.withName(""String_Node_Str""));
  final CypherQueryExecutor.CypherResult result=result(""String_Node_Str"",rel);
  final SubGraph graph=SubGraph.from(result);
  assertEquals(1,graph.getNodes().size());
  final Map<Long,Map<String,Object>> rels=graph.getRelationships();
  assertEquals(1,rels.size());
  assertEquals(true,rels.containsKey(rel.getId()));
}","@Test public void testFromRelCypherResult() throws Exception {
  final Relationship rel=aNode.createRelationshipTo(aNode,DynamicRelationshipType.withName(""String_Node_Str""));
  final CypherQueryExecutor.CypherResult result=result(""String_Node_Str"",rel);
  final SubGraph graph=SubGraph.from(gdb,result);
  assertEquals(1,graph.getNodes().size());
  final Map<Long,Map<String,Object>> rels=graph.getRelationships();
  assertEquals(1,rels.size());
  assertEquals(true,rels.containsKey(rel.getId()));
}",0.943579766536965
101340,"@Test public void testMarkRelationshipsFromVariableLength() throws Exception {
  final Node n1=gdb.createNode();
  final Node n0=gdb.getReferenceNode();
  final Relationship relationship=n0.createRelationshipTo(n1,DynamicRelationshipType.withName(""String_Node_Str""));
  final SubGraph graph=SubGraph.from(gdb);
  final CypherQueryExecutor executor=new CypherQueryExecutor(gdb,null);
  final CypherQueryExecutor.CypherResult result=executor.cypherQuery(""String_Node_Str"",null);
  graph.markSelection(result);
  final Map<String,Object> nodeData=graph.getNodes().get(n0.getId());
  System.out.println(""String_Node_Str"" + nodeData);
  assertEquals(true,nodeData.containsKey(""String_Node_Str""));
  final Map<String,Object> relData=graph.getRelationships().get(relationship.getId());
  System.out.println(""String_Node_Str"" + relData);
  assertEquals(true,relData.containsKey(""String_Node_Str""));
}","@Test public void testMarkRelationshipsFromVariableLength() throws Exception {
  final Node n1=gdb.createNode();
  final Node n0=aNode;
  final Relationship relationship=n0.createRelationshipTo(n1,DynamicRelationshipType.withName(""String_Node_Str""));
  final SubGraph graph=SubGraph.from(gdb);
  final CypherQueryExecutor executor=new CypherQueryExecutor(gdb,null);
  final CypherQueryExecutor.CypherResult result=executor.cypherQuery(""String_Node_Str"",null);
  graph.markSelection(result);
  final Map<String,Object> nodeData=graph.getNodes().get(n0.getId());
  System.out.println(""String_Node_Str"" + nodeData);
  assertEquals(true,nodeData.containsKey(""String_Node_Str""));
  final Map<String,Object> relData=graph.getRelationships().get(relationship.getId());
  System.out.println(""String_Node_Str"" + relData);
  assertEquals(true,relData.containsKey(""String_Node_Str""));
}",0.9847198641765704
101341,"@Before public void setUp() throws Exception {
  gdb=new ImpermanentGraphDatabase();
  gdb.beginTx();
}","@Before public void setUp() throws Exception {
  gdb=new TestGraphDatabaseFactory().newImpermanentDatabase();
  gdb.beginTx();
  aNode=gdb.createNode();
}",0.7626459143968871
101342,"@Test public void testFromPathCypherResult() throws Exception {
  final Relationship rel=gdb.getReferenceNode().createRelationshipTo(gdb.getReferenceNode(),DynamicRelationshipType.withName(""String_Node_Str""));
  final Path path=new PathImpl.Builder(gdb.getReferenceNode()).push(rel).build();
  final CypherQueryExecutor.CypherResult result=result(""String_Node_Str"",path);
  final SubGraph graph=SubGraph.from(result);
  assertEquals(1,graph.getNodes().size());
  final Map<Long,Map<String,Object>> rels=graph.getRelationships();
  assertEquals(1,rels.size());
  assertEquals(true,rels.containsKey(rel.getId()));
}","@Test public void testFromPathCypherResult() throws Exception {
  final Relationship rel=aNode.createRelationshipTo(aNode,DynamicRelationshipType.withName(""String_Node_Str""));
  final Path path=new PathImpl.Builder(aNode).push(rel).build();
  final CypherQueryExecutor.CypherResult result=result(""String_Node_Str"",path);
  final SubGraph graph=SubGraph.from(gdb,result);
  assertEquals(1,graph.getNodes().size());
  final Map<Long,Map<String,Object>> rels=graph.getRelationships();
  assertEquals(1,rels.size());
  assertEquals(true,rels.containsKey(rel.getId()));
}",0.916030534351145
101343,"private Object toJsonCompatible(Object value){
  if (value instanceof Node) {
    final Node node=(Node)value;
    final Map<String,Object> result=SubGraph.toMap(node);
    result.put(""String_Node_Str"",node.getId());
    final List<String> labelNames=SubGraph.getLabelNames(node);
    if (!labelNames.isEmpty())     result.put(""String_Node_Str"",labelNames);
    return result;
  }
  if (value instanceof Relationship) {
    final Relationship relationship=(Relationship)value;
    final Map<String,Object> result=SubGraph.toMap(relationship);
    result.put(""String_Node_Str"",relationship.getId());
    result.put(""String_Node_Str"",relationship.getStartNode().getId());
    result.put(""String_Node_Str"",relationship.getEndNode().getId());
    result.put(""String_Node_Str"",relationship.getType().name());
    return result;
  }
  if (value instanceof Iterable) {
    final List<Object> result=new ArrayList<Object>();
    for (    Object inner : (Iterable)value) {
      result.add(toJsonCompatible(inner));
    }
    return result;
  }
  return value;
}","private Object toJsonCompatible(Object value){
  if (value instanceof Node) {
    final Node node=(Node)value;
    final Map<String,Object> result=SubGraph.toMap((PropertyContainer)node);
    result.put(""String_Node_Str"",node.getId());
    final List<String> labelNames=SubGraph.getLabelNames(node);
    if (!labelNames.isEmpty())     result.put(""String_Node_Str"",labelNames);
    return result;
  }
  if (value instanceof Relationship) {
    final Relationship relationship=(Relationship)value;
    final Map<String,Object> result=SubGraph.toMap((PropertyContainer)relationship);
    result.put(""String_Node_Str"",relationship.getId());
    result.put(""String_Node_Str"",relationship.getStartNode().getId());
    result.put(""String_Node_Str"",relationship.getEndNode().getId());
    result.put(""String_Node_Str"",relationship.getType().name());
    return result;
  }
  if (value instanceof Iterable) {
    final List<Object> result=new ArrayList<Object>();
    for (    Object inner : (Iterable)value) {
      result.add(toJsonCompatible(inner));
    }
    return result;
  }
  return value;
}",0.9822761194029852
101344,"public Map mergeGeoff(String geoff){
  try {
    final Map<String,Object> result=new LinkedHashMap<String,Object>();
    for (    Map.Entry<String,PropertyContainer> entry : geoffService.mergeGeoff(geoff).entrySet()) {
      result.put(entry.getKey(),geoffExportService.toMap(entry.getValue()));
    }
    return result;
  }
 catch (  SubgraphError subgraphError) {
    throw new RuntimeException(""String_Node_Str"" + geoff,subgraphError);
  }
catch (  SyntaxError syntaxError) {
    throw new RuntimeException(""String_Node_Str"" + geoff,syntaxError);
  }
}","public Map<String,Object> mergeGeoff(String geoff){
  try {
    final Map<String,Object> result=new LinkedHashMap<String,Object>();
    for (    Map.Entry<String,PropertyContainer> entry : geoffService.mergeGeoff(geoff).entrySet()) {
      result.put(entry.getKey(),geoffExportService.toMap(entry.getValue()));
    }
    return result;
  }
 catch (  SubgraphError subgraphError) {
    throw new RuntimeException(""String_Node_Str"" + geoff,subgraphError);
  }
catch (  SyntaxError syntaxError) {
    throw new RuntimeException(""String_Node_Str"" + geoff,syntaxError);
  }
}",0.9866666666666668
101345,"public Map<String,Object> add(Relationship rel){
  final long id=rel.getId();
  if (relationships.containsKey(id)) {
    return relationships.get(id);
  }
  final Map<String,Object> data=toMap(rel);
  addRel(id,data);
  add(rel.getStartNode());
  add(rel.getEndNode());
  return data;
}","public Map<String,Object> add(Relationship rel){
  final long id=rel.getId();
  if (relationships.containsKey(id)) {
    return relationships.get(id);
  }
  final Map<String,Object> data=toMap(rel);
  addResolvedNodeIndexes(data,rel);
  addRel(id,data);
  add(rel.getStartNode());
  add(rel.getEndNode());
  return data;
}",0.9276315789473684
101346,"public CypherQueryExecutor(GraphDatabaseService gdb,Index index){
  this.index=index;
  executionEngine=new ExecutionEngine(gdb,StringLogger.SYSTEM);
}","public CypherQueryExecutor(GraphDatabaseService gdb,Index index){
  this.gdb=gdb;
  this.index=index;
  executionEngine=new ExecutionEngine(gdb,StringLogger.SYSTEM);
}",0.949685534591195
101347,"private CypherResult cypherQuery(String query){
  if (isMutatingQuery(query)) {
    registerProperties(query);
  }
  query=removeSemicolon(query);
  long time=System.currentTimeMillis();
  final ExecutionResult result=executionEngine.profile(query);
  final Collection<Map<String,Object>> data=IteratorUtil.asCollection(result);
  time=System.currentTimeMillis() - time;
  return new CypherResult(result.columns(),data,result.getQueryStatistics(),time,result.executionPlanDescription());
}","private CypherResult cypherQuery(String query){
  if (isMutatingQuery(query)) {
    registerProperties(query);
  }
  query=removeSemicolon(query);
  long time=System.currentTimeMillis();
  Transaction tx=gdb.beginTx();
  try {
    final ExecutionResult result=executionEngine.profile(query);
    final Collection<Map<String,Object>> data=IteratorUtil.asCollection(result);
    time=System.currentTimeMillis() - time;
    CypherResult cypherResult=new CypherResult(result.columns(),data,result.getQueryStatistics(),time,result.executionPlanDescription());
    tx.success();
    return cypherResult;
  }
  finally {
    tx.finish();
  }
}",0.8568888888888889
101348,"private void enableAutoIndex(AutoIndexer<? extends PropertyContainer> autoIndexer){
  autoIndexer.setEnabled(true);
  autoIndexer.getAutoIndex();
}","private void enableAutoIndex(AutoIndexer<? extends PropertyContainer> autoIndexer){
  autoIndexer.setEnabled(true);
}",0.8863636363636364
101349,"public static Neo4jService getService(final HttpServletRequest request){
  HttpSession session=request.getSession(true);
  Neo4jService service=(Neo4jService)session.getAttribute(SERVICE);
  if (service != null)   return service;
  service=databaseInfo.shouldCreateNew() ? new Neo4jService() : new Neo4jService(databaseInfo.getDatabase());
  if (databaseInfo.shouldImport()) {
    service.initializeFrom(SubGraph.from(databaseInfo.getDatabase()));
  }
  session.setAttribute(SERVICE,service);
  return service;
}","public static Neo4jService getService(final HttpServletRequest request){
  try {
    HttpSession session=request.getSession(true);
    Neo4jService service=(Neo4jService)session.getAttribute(SERVICE);
    if (service != null)     return service;
    service=databaseInfo.shouldCreateNew() ? new Neo4jService() : new Neo4jService(databaseInfo.getDatabase());
    if (databaseInfo.shouldImport()) {
      service.initializeFrom(SubGraph.from(databaseInfo.getDatabase()));
    }
    session.setAttribute(SERVICE,service);
    return service;
  }
 catch (  LifecycleException lce) {
    reset(request);
    SessionHoldingListener.cleanSessions();
    throw new RuntimeException(lce);
  }
catch (  OutOfMemoryError oom) {
    reset(request);
    SessionHoldingListener.cleanSessions();
    throw new RuntimeException(oom);
  }
}",0.7191011235955056
101350,"@Override public void init(){
  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Thread thread,    Throwable throwable){
      SessionHoldingListener.cleanSessions();
      System.gc();
    }
  }
);
  post(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      final String query=request.body();
      return service.cypherQuery(query);
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      String query=request.queryParams(""String_Node_Str"");
      return new Gson().toJson(service.cypherQueryResults(query));
    }
  }
);
  get(new Route(""String_Node_Str""){
    @Override protected void doBefore(    Request request,    Response response){
      reset(request);
    }
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      long start=System.currentTimeMillis(), time=start;
      time=trace(""String_Node_Str"",time);
      String init=param(request,""String_Node_Str"",DEFAULT_GRAPH);
      final Map geoff=service.mergeGeoff(init);
      time=trace(""String_Node_Str"",time);
      String query=param(request,""String_Node_Str"",DEFAULT_QUERY);
      final String result=service.cypherQuery(query);
      time=trace(""String_Node_Str"",time);
      final Map visualization=service.cypherQueryViz(query);
      trace(""String_Node_Str"",time);
      time=trace(""String_Node_Str"",start);
      return new Gson().toJson(map(""String_Node_Str"",init,""String_Node_Str"",geoff,""String_Node_Str"",query,""String_Node_Str"",result,""String_Node_Str"",visualization,""String_Node_Str"",time));
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      String query=request.queryParams(""String_Node_Str"");
      return new Gson().toJson(service.cypherQueryViz(query));
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      return service.toGeoff();
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service) throws IOException {
      final String uri=""String_Node_Str"" + URLEncoder.encode(service.toGeoff(),""String_Node_Str"");
      return shortenUrl(uri);
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service) throws IOException {
      return shortenUrl(request.queryParams(""String_Node_Str""));
    }
  }
);
  delete(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      reset(request);
      return ""String_Node_Str"";
    }
  }
);
  post(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service) throws SyntaxError, SubgraphError {
      Map res=service.mergeGeoff(request.body());
      return new Gson().toJson(res);
    }
  }
);
}","@Override public void init(){
  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Thread thread,    Throwable throwable){
      SessionHoldingListener.cleanSessions();
      System.gc();
    }
  }
);
  post(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      final String query=request.body();
      return service.cypherQuery(query);
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      String query=request.queryParams(""String_Node_Str"");
      return new Gson().toJson(service.cypherQueryResults(query));
    }
  }
);
  get(new Route(""String_Node_Str""){
    @Override protected void doBefore(    Request request,    Response response){
      reset(request);
    }
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      String init=param(request,""String_Node_Str"",DEFAULT_GRAPH);
      String query=param(request,""String_Node_Str"",DEFAULT_QUERY);
      final Map<String,Object> data=map(""String_Node_Str"",init,""String_Node_Str"",query);
      long start=System.currentTimeMillis(), time=start;
      try {
        time=trace(""String_Node_Str"",time);
        data.put(""String_Node_Str"",service.mergeGeoff(init));
        time=trace(""String_Node_Str"",time);
        data.put(""String_Node_Str"",service.cypherQuery(query));
        time=trace(""String_Node_Str"",time);
        data.put(""String_Node_Str"",service.cypherQueryViz(query));
        trace(""String_Node_Str"",time);
      }
 catch (      Exception e) {
        data.put(""String_Node_Str"",e.getMessage());
      }
      time=trace(""String_Node_Str"",start);
      data.put(""String_Node_Str"",time);
      return new Gson().toJson(data);
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      String query=request.queryParams(""String_Node_Str"");
      return new Gson().toJson(service.cypherQueryViz(query));
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      return service.toGeoff();
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service) throws IOException {
      final String uri=""String_Node_Str"" + URLEncoder.encode(service.toGeoff(),""String_Node_Str"");
      return shortenUrl(uri);
    }
  }
);
  get(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service) throws IOException {
      return shortenUrl(request.queryParams(""String_Node_Str""));
    }
  }
);
  delete(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service){
      reset(request);
      return ""String_Node_Str"";
    }
  }
);
  post(new Route(""String_Node_Str""){
    protected Object doHandle(    Request request,    Response response,    Neo4jService service) throws SyntaxError, SubgraphError {
      Map res=service.mergeGeoff(request.body());
      return new Gson().toJson(res);
    }
  }
);
}",0.8653875207735308
101351,"public PagesBean(JSONObject json) throws ParseException {
  try {
    title=json.getString(""String_Node_Str"");
    columns=json.getInt(""String_Node_Str"");
    JSONArray layout=json.getJSONArray(""String_Node_Str"");
    this.layout=new ColumnBean[layout.length()];
    for (int i=0; i < layout.length(); i++) {
      ColumnBean c=new ColumnBean(layout.getJSONArray(i));
      this.layout[i]=c;
    }
  }
 catch (  JSONException e) {
    log.error(ExceptionUtil.getStackTrace(e));
    throw new ParseException(ExceptionUtil.getStackTrace(e),0);
  }
}","public PagesBean(JSONObject json) throws ParseException {
  try {
    title=json.getString(""String_Node_Str"");
    columns=json.getInt(""String_Node_Str"");
    JSONArray layout=json.getJSONArray(""String_Node_Str"");
    this.layout=new ColumnBean[layout.length()];
    for (int i=0; i < layout.length(); i++) {
      ColumnBean c=new ColumnBean(layout.getJSONArray(i));
      this.layout[i]=c;
    }
    if (json.has(""String_Node_Str"")) {
      JSONArray ja=json.getJSONArray(""String_Node_Str"");
      columnSizes=new int[ja.length()];
      for (int i=0; i < ja.length(); i++) {
        columnSizes[i]=ja.getInt(i);
      }
    }
  }
 catch (  JSONException e) {
    log.error(ExceptionUtil.getStackTrace(e));
    throw new ParseException(ExceptionUtil.getStackTrace(e),0);
  }
}",0.8256603773584905
101352,"public ParametersBean(JSONObject json) throws ParseException {
  try {
    name=json.getString(""String_Node_Str"");
    type=json.getString(""String_Node_Str"");
    value=json.getString(""String_Node_Str"");
    if (json.has(""String_Node_Str"")) {
      label=json.getString(""String_Node_Str"");
    }
 else {
      label=json.getString(""String_Node_Str"");
    }
    if (json.get(""String_Node_Str"").toString().intern() == ""String_Node_Str"".intern()) {
      control=json.getString(""String_Node_Str"");
    }
    if (json.has(""String_Node_Str"")) {
      JSONArray aj=json.getJSONArray(""String_Node_Str"");
      options=new OptionBean[aj.length()];
      for (int i=0; i < aj.length(); i++) {
        OptionBean o=new OptionBean(aj.getJSONObject(i));
        options[i]=o;
      }
    }
  }
 catch (  Exception e) {
    log.error(ExceptionUtil.getStackTrace(e));
    throw new ParseException(ExceptionUtil.getStackTrace(e),0);
  }
}","public ParametersBean(JSONObject json) throws ParseException {
  try {
    name=json.getString(""String_Node_Str"");
    type=json.getString(""String_Node_Str"");
    if (json.has(""String_Node_Str"")) {
      if (json.get(""String_Node_Str"").getClass() == JSONArray.class) {
        JSONArray ja=json.getJSONArray(""String_Node_Str"");
        Collection<String> c=new HashSet<String>();
        for (int i=0; i < ja.length(); i++) {
          c.add(ja.getString(i));
        }
        this.value=c;
      }
 else {
        Collection<String> c=new HashSet<String>();
        c.add(json.getString(""String_Node_Str""));
        this.value=c;
      }
    }
    if (json.has(""String_Node_Str"")) {
      label=json.getString(""String_Node_Str"");
    }
 else {
      label=json.getString(""String_Node_Str"");
    }
    if (json.get(""String_Node_Str"").toString().intern() == ""String_Node_Str"".intern()) {
      control=json.getString(""String_Node_Str"");
    }
    if (json.has(""String_Node_Str"")) {
      callback=json.getString(""String_Node_Str"");
    }
    if (json.has(""String_Node_Str"")) {
      JSONArray aj=json.getJSONArray(""String_Node_Str"");
      options=new OptionBean[aj.length()];
      for (int i=0; i < aj.length(); i++) {
        OptionBean o=new OptionBean(aj.getJSONObject(i));
        options[i]=o;
      }
    }
    if (json.has(""String_Node_Str"")) {
      edit=json.getInt(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    log.error(ExceptionUtil.getStackTrace(e));
    throw new ParseException(ExceptionUtil.getStackTrace(e),0);
  }
}",0.7195467422096318
101353,"@XmlElement public String getValue(){
  return value;
}","@XmlElement public Collection<String> getValue(){
  return value;
}",0.9016393442622952
101354,"public void setValue(String value){
  this.value=value;
}","public void setValue(Collection<String> value){
  this.value=value;
}",0.9047619047619048
101355,"public JSONObject deserialize(){
  JSONObject json=new JSONObject();
  try {
    json.put(""String_Node_Str"",this.name);
    json.put(""String_Node_Str"",this.type);
    json.put(""String_Node_Str"",this.value);
    if (control != null) {
      json.put(""String_Node_Str"",this.control);
    }
    json.put(""String_Node_Str"",this.label);
    if (options != null) {
      JSONArray ja=new JSONArray();
      for (int i=0; i < options.length; i++) {
        ja.put(this.options[i].deserialize());
      }
      json.put(""String_Node_Str"",(JSONArray)ja);
    }
  }
 catch (  Exception e) {
    log.error(ExceptionUtil.getStackTrace(e));
  }
  return json;
}","public JSONObject deserialize(){
  JSONObject json=new JSONObject();
  try {
    json.put(""String_Node_Str"",this.name);
    json.put(""String_Node_Str"",this.type);
    if (this.value != null) {
      JSONArray ja=new JSONArray();
      for (      String s : this.value) {
        ja.put(s);
      }
      json.put(""String_Node_Str"",ja);
    }
    if (control != null) {
      json.put(""String_Node_Str"",this.control);
    }
    json.put(""String_Node_Str"",this.label);
    json.put(""String_Node_Str"",this.edit);
    if (this.callback != null) {
      json.put(""String_Node_Str"",callback);
    }
    if (options != null) {
      JSONArray ja=new JSONArray();
      for (int i=0; i < options.length; i++) {
        ja.put(this.options[i].deserialize());
      }
      json.put(""String_Node_Str"",ja);
    }
  }
 catch (  Exception e) {
    log.error(ExceptionUtil.getStackTrace(e));
  }
  return json;
}",0.684346701164295
101356,"private JRadioButton getImperialButton(){
  if (myImperialButton == null) {
    myImperialButton=new JRadioButton(""String_Node_Str"");
    myImperialButton.setSelected(true);
    myImperialButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      final ActionEvent e){
        if (myImperialButton.isSelected()) {
          getMetricButton().setSelected(false);
          if (myAoolpathsProcessor != null) {
            myAoolpathsProcessor.setOutputMetricCoordinates(false);
          }
        }
      }
    }
);
  }
  return myImperialButton;
}","private JRadioButton getImperialButton(){
  if (myImperialButton == null) {
    myImperialButton=new JRadioButton(""String_Node_Str"");
    myImperialButton.setSelected(true);
    myImperialButton.setToolTipText(""String_Node_Str"");
    myImperialButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      final ActionEvent e){
        if (myImperialButton.isSelected()) {
          getMetricButton().setSelected(false);
          if (myAoolpathsProcessor != null) {
            myAoolpathsProcessor.setOutputMetricCoordinates(false);
          }
        }
      }
    }
);
  }
  return myImperialButton;
}",0.9543230016313212
101357,"private JRadioButton getMetricButton(){
  if (myMetricButton == null) {
    myMetricButton=new JRadioButton(""String_Node_Str"");
    myMetricButton.setSelected(false);
    myMetricButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      final ActionEvent e){
        if (myMetricButton.isSelected()) {
          getImperialButton().setSelected(false);
          if (myAoolpathsProcessor != null) {
            myAoolpathsProcessor.setOutputMetricCoordinates(true);
          }
        }
      }
    }
);
  }
  return myMetricButton;
}","private JRadioButton getMetricButton(){
  if (myMetricButton == null) {
    myMetricButton=new JRadioButton(""String_Node_Str"");
    myMetricButton.setSelected(false);
    myMetricButton.setToolTipText(""String_Node_Str"");
    myMetricButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      final ActionEvent e){
        if (myMetricButton.isSelected()) {
          getImperialButton().setSelected(false);
          if (myAoolpathsProcessor != null) {
            myAoolpathsProcessor.setOutputMetricCoordinates(true);
          }
        }
      }
    }
);
  }
  return myMetricButton;
}",0.955
101358,"private JPanel getInitialYPanel(){
  if (myInitialYPanel == null) {
    myInitialYPanel=new JPanel();
    myInitialYPanel.setLayout(new BorderLayout());
    myInitialYPanel.add(new JLabel(""String_Node_Str""),BorderLayout.WEST);
    final JTextField field=new JTextField(NumberFormat.getInstance().format(0.0));
    myInitialYPanel.add(field,BorderLayout.CENTER);
    myInitialYPanel.addPropertyChangeListener(""String_Node_Str"",new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent evt){
        field.setEnabled(myInitialYPanel.isEnabled());
      }
    }
);
    myInitialYPanel.setEnabled(false);
    field.getDocument().addUndoableEditListener(new UndoableEditListener(){
      @Override public void undoableEditHappened(      UndoableEditEvent evt){
        try {
          selectedInitialYCoordinate=NumberFormat.getInstance().parse(field.getText()).doubleValue();
          if (myAoolpathsProcessor != null) {
            myAoolpathsProcessor.setAbsoluteYStart(selectedInitialYCoordinate);
          }
        }
 catch (        ParseException e) {
          evt.getEdit().undo();
        }
      }
    }
);
  }
  return myInitialYPanel;
}","private JPanel getInitialYPanel(){
  if (myInitialYPanel == null) {
    myInitialYPanel=new JPanel();
    myInitialYPanel.setLayout(new BorderLayout());
    myInitialYPanel.add(new JLabel(""String_Node_Str""),BorderLayout.WEST);
    final JTextField field=new JTextField(NumberFormat.getInstance().format(0.0));
    myInitialYPanel.add(field,BorderLayout.CENTER);
    myInitialYPanel.setToolTipText(""String_Node_Str"");
    myInitialYPanel.addPropertyChangeListener(""String_Node_Str"",new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent evt){
        field.setEnabled(myInitialYPanel.isEnabled());
      }
    }
);
    myInitialYPanel.setEnabled(false);
    field.getDocument().addUndoableEditListener(new UndoableEditListener(){
      @Override public void undoableEditHappened(      UndoableEditEvent evt){
        try {
          selectedInitialYCoordinate=NumberFormat.getInstance().parse(field.getText()).doubleValue();
          if (myAoolpathsProcessor != null) {
            myAoolpathsProcessor.setAbsoluteYStart(selectedInitialYCoordinate);
          }
        }
 catch (        ParseException e) {
          evt.getEdit().undo();
        }
      }
    }
);
  }
  return myInitialYPanel;
}",0.956772334293948
101359,"private JPanel getZCuttingHeightPanel(){
  if (myZCuttingHeightPanel == null) {
    myZCuttingHeightPanel=new JPanel();
    myZCuttingHeightPanel.setLayout(new BorderLayout());
    myZCuttingHeightPanel.add(new JLabel(""String_Node_Str""),BorderLayout.WEST);
    final JTextField field=new JTextField(NumberFormat.getInstance().format(0.0));
    myZCuttingHeightPanel.add(field,BorderLayout.CENTER);
    myZCuttingHeightPanel.addPropertyChangeListener(""String_Node_Str"",new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent evt){
        field.setEnabled(myZCuttingHeightPanel.isEnabled());
      }
    }
);
    myZCuttingHeightPanel.setEnabled(false);
    field.getDocument().addUndoableEditListener(new UndoableEditListener(){
      @Override public void undoableEditHappened(      UndoableEditEvent evt){
        try {
          selectedZCuttingHeight=NumberFormat.getInstance().parse(field.getText()).doubleValue();
          if (myAoolpathsProcessor != null) {
            myAoolpathsProcessor.setZCuttingHeight(selectedZCuttingHeight);
          }
        }
 catch (        ParseException e) {
          evt.getEdit().undo();
        }
      }
    }
);
  }
  return myZCuttingHeightPanel;
}","private JPanel getZCuttingHeightPanel(){
  if (myZCuttingHeightPanel == null) {
    myZCuttingHeightPanel=new JPanel();
    myZCuttingHeightPanel.setLayout(new BorderLayout());
    myZCuttingHeightPanel.add(new JLabel(""String_Node_Str""),BorderLayout.WEST);
    myZCuttingHeightPanel.setToolTipText(""String_Node_Str"");
    final JTextField field=new JTextField(NumberFormat.getInstance().format(0.0));
    myZCuttingHeightPanel.add(field,BorderLayout.CENTER);
    myZCuttingHeightPanel.addPropertyChangeListener(""String_Node_Str"",new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent evt){
        field.setEnabled(myZCuttingHeightPanel.isEnabled());
      }
    }
);
    myZCuttingHeightPanel.setEnabled(false);
    field.getDocument().addUndoableEditListener(new UndoableEditListener(){
      @Override public void undoableEditHappened(      UndoableEditEvent evt){
        try {
          selectedZCuttingHeight=NumberFormat.getInstance().parse(field.getText()).doubleValue();
          if (myAoolpathsProcessor != null) {
            myAoolpathsProcessor.setZCuttingHeight(selectedZCuttingHeight);
          }
        }
 catch (        ParseException e) {
          evt.getEdit().undo();
        }
      }
    }
);
  }
  return myZCuttingHeightPanel;
}",0.9759747932256794
101360,"private JPanel getInitialXPanel(){
  if (myInitialXPanel == null) {
    myInitialXPanel=new JPanel();
    myInitialXPanel.setLayout(new BorderLayout());
    myInitialXPanel.add(new JLabel(""String_Node_Str""),BorderLayout.WEST);
    final JTextField field=new JTextField(NumberFormat.getInstance().format(0.0));
    myInitialXPanel.add(field,BorderLayout.CENTER);
    myInitialXPanel.addPropertyChangeListener(""String_Node_Str"",new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent evt){
        field.setEnabled(myInitialXPanel.isEnabled());
      }
    }
);
    myInitialXPanel.setEnabled(false);
    field.getDocument().addUndoableEditListener(new UndoableEditListener(){
      @Override public void undoableEditHappened(      UndoableEditEvent evt){
        try {
          selectedInitialXCoordinate=NumberFormat.getInstance().parse(field.getText()).doubleValue();
          if (myAoolpathsProcessor != null) {
            myAoolpathsProcessor.setAbsoluteXStart(selectedInitialXCoordinate);
          }
        }
 catch (        ParseException e) {
          evt.getEdit().undo();
        }
      }
    }
);
  }
  return myInitialXPanel;
}","private JPanel getInitialXPanel(){
  if (myInitialXPanel == null) {
    myInitialXPanel=new JPanel();
    myInitialXPanel.setLayout(new BorderLayout());
    myInitialXPanel.add(new JLabel(""String_Node_Str""),BorderLayout.WEST);
    final JTextField field=new JTextField(NumberFormat.getInstance().format(0.0));
    myInitialXPanel.add(field,BorderLayout.CENTER);
    myInitialYPanel.setToolTipText(""String_Node_Str"");
    myInitialXPanel.addPropertyChangeListener(""String_Node_Str"",new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent evt){
        field.setEnabled(myInitialXPanel.isEnabled());
      }
    }
);
    myInitialXPanel.setEnabled(false);
    field.getDocument().addUndoableEditListener(new UndoableEditListener(){
      @Override public void undoableEditHappened(      UndoableEditEvent evt){
        try {
          selectedInitialXCoordinate=NumberFormat.getInstance().parse(field.getText()).doubleValue();
          if (myAoolpathsProcessor != null) {
            myAoolpathsProcessor.setAbsoluteXStart(selectedInitialXCoordinate);
          }
        }
 catch (        ParseException e) {
          evt.getEdit().undo();
        }
      }
    }
);
  }
  return myInitialXPanel;
}",0.9510086455331412
101361,"private Component getZDownMovementPanel(){
  if (myZDownMovementPanel == null) {
    myZDownMovementPanel=new JPanel();
    myZDownMovementPanel.setLayout(new BorderLayout());
    myZDownMovementPanel.add(new JLabel(""String_Node_Str""),BorderLayout.WEST);
    final JTextField field=new JTextField(NumberFormat.getInstance().format(ToolpathsProcessor.CLEARANCE_Z));
    myZDownMovementPanel.add(field,BorderLayout.CENTER);
    field.getDocument().addUndoableEditListener(new UndoableEditListener(){
      @Override public void undoableEditHappened(      UndoableEditEvent evt){
        try {
          selectedZClearance=NumberFormat.getInstance().parse(field.getText()).doubleValue();
          if (myAoolpathsProcessor != null) {
            myAoolpathsProcessor.setZClearance(selectedZClearance);
          }
        }
 catch (        ParseException e) {
          evt.getEdit().undo();
        }
      }
    }
);
  }
  return myZDownMovementPanel;
}","private Component getZDownMovementPanel(){
  if (myZDownMovementPanel == null) {
    myZDownMovementPanel=new JPanel();
    myZDownMovementPanel.setLayout(new BorderLayout());
    myZDownMovementPanel.add(new JLabel(""String_Node_Str""),BorderLayout.WEST);
    myZDownMovementPanel.setToolTipText(""String_Node_Str"");
    final JTextField field=new JTextField(NumberFormat.getInstance().format(ToolpathsProcessor.CLEARANCE_Z));
    myZDownMovementPanel.add(field,BorderLayout.CENTER);
    field.getDocument().addUndoableEditListener(new UndoableEditListener(){
      @Override public void undoableEditHappened(      UndoableEditEvent evt){
        try {
          selectedZClearance=NumberFormat.getInstance().parse(field.getText()).doubleValue();
          if (myAoolpathsProcessor != null) {
            myAoolpathsProcessor.setZClearance(selectedZClearance);
          }
        }
 catch (        ParseException e) {
          evt.getEdit().undo();
        }
      }
    }
);
  }
  return myZDownMovementPanel;
}",0.9694501018329938
101362,"private void gCodeCutterUp(Writer w,final Point3d p) throws IOException {
  if (w != null) {
    if (isOutputAbsoluteCoordinates()) {
      w.write(""String_Node_Str"" + gCodeFormat.format(p.x + getAbsoluteXStart()) + ""String_Node_Str""+ gCodeFormat.format(p.y + getAbsoluteYStart())+ ""String_Node_Str""+ gCodeFormat.format(getZCuttingHeight() + getZClearance())+ ""String_Node_Str"");
      p.z=getZClearance();
    }
 else {
      w.write(""String_Node_Str"" + gCodeFormat.format(getZClearance()) + ""String_Node_Str"");
    }
  }
  gCodeStrokes.add(new GCodeStroke(new Vector3f(0.0f,0.0f,(float)getZClearance()),G_CODE_COLOR_NORMAL));
}","private void gCodeCutterUp(Writer w,final Point3d p) throws IOException {
  if (w != null) {
    if (isOutputAbsoluteCoordinates()) {
      w.write(""String_Node_Str"" + gCodeFormat.format(convertUnits(p.x) + getAbsoluteXStart()) + ""String_Node_Str""+ gCodeFormat.format(convertUnits(p.y) + getAbsoluteYStart())+ ""String_Node_Str""+ gCodeFormat.format(getZCuttingHeight() + getZClearance())+ ""String_Node_Str"");
      p.z=getZClearance();
    }
 else {
      w.write(""String_Node_Str"" + gCodeFormat.format(getZClearance()) + ""String_Node_Str"");
    }
  }
  gCodeStrokes.add(new GCodeStroke(new Vector3f(0.0f,0.0f,(float)getZClearance()),G_CODE_COLOR_NORMAL));
}",0.9782270606531882
101363,"private void gCodeCutterDown(final Writer w,final Point3d p) throws IOException {
  if (w != null) {
    if (isOutputAbsoluteCoordinates()) {
      w.write(""String_Node_Str"" + gCodeFormat.format(p.x + getAbsoluteXStart()) + ""String_Node_Str""+ gCodeFormat.format(p.y + getAbsoluteYStart())+ ""String_Node_Str""+ gCodeFormat.format(getZCuttingHeight())+ ""String_Node_Str"");
      p.z=0.0;
    }
 else {
      w.write(""String_Node_Str"" + gCodeFormat.format(-1 * getZClearance()) + ""String_Node_Str"");
    }
  }
  gCodeStrokes.add(new GCodeStroke(new Vector3f(0.0f,0.0f,(float)(-1 * getZClearance())),G_CODE_COLOR_NORMAL));
}","private void gCodeCutterDown(final Writer w,final Point3d p) throws IOException {
  if (w != null) {
    if (isOutputAbsoluteCoordinates()) {
      w.write(""String_Node_Str"" + gCodeFormat.format(convertUnits(p.x) + getAbsoluteXStart()) + ""String_Node_Str""+ gCodeFormat.format(convertUnits(p.y) + getAbsoluteYStart())+ ""String_Node_Str""+ gCodeFormat.format(getZCuttingHeight())+ ""String_Node_Str"");
      p.z=0.0;
    }
 else {
      w.write(""String_Node_Str"" + gCodeFormat.format(-1 * getZClearance()) + ""String_Node_Str"");
    }
  }
  gCodeStrokes.add(new GCodeStroke(new Vector3f(0.0f,0.0f,(float)(-1 * getZClearance())),G_CODE_COLOR_NORMAL));
}",0.9778830963665088
101364,"/** 
 * Simplistic loading of YAML initial data file.
 */
public void loadInitialData(){
  Logger.info(""String_Node_Str"");
  Map<String,List<Object>> data=(Map<String,List<Object>>)Yaml.load(""String_Node_Str"");
  if (PlayVersion.count() == 0) {
    final List<Object> versions=data.get(""String_Node_Str"");
    Logger.debug(String.format(""String_Node_Str"",versions.size()));
    Ebean.save(versions);
  }
  if (User.count() <= 1) {
    final List<User> users=CollectionUtils.castTo(data.get(""String_Node_Str""),User.class);
    for (    User user : users) {
      user.rates=new ArrayList<Rate>();
    }
    Logger.debug(String.format(""String_Node_Str"",users.size()));
    Ebean.save(users);
  }
  if (Module.count() == 0) {
    final List<Module> modules=CollectionUtils.castTo(data.get(""String_Node_Str""),Module.class);
    Logger.debug(String.format(""String_Node_Str"",modules.size()));
    for (    Module module : modules) {
      module.rating=new Rating(true);
    }
    Ebean.save(modules);
  }
  if (ModuleVersion.count() == 0) {
    final List<Object> versions=data.get(""String_Node_Str"");
    Logger.debug(String.format(""String_Node_Str"",versions.size()));
    Ebean.save(versions);
  }
}","/** 
 * Simplistic loading of YAML initial data file.
 */
public void loadInitialData(){
  Logger.info(""String_Node_Str"");
  Map<String,List<Object>> data=(Map<String,List<Object>>)Yaml.load(""String_Node_Str"");
  if (PlayVersion.count() == 0) {
    final List<Object> versions=data.get(""String_Node_Str"");
    Logger.debug(String.format(""String_Node_Str"",versions.size()));
    Ebean.save(versions);
  }
  if (User.count() <= 1) {
    final List<User> users=CollectionUtils.castTo(data.get(""String_Node_Str""),User.class);
    for (    User user : users) {
      user.rates=new ArrayList<Rate>();
    }
    Logger.debug(String.format(""String_Node_Str"",users.size()));
    Ebean.save(users);
  }
  if (Module.count() == 0) {
    final List<Module> modules=CollectionUtils.castTo(data.get(""String_Node_Str""),Module.class);
    Logger.debug(String.format(""String_Node_Str"",modules.size()));
    for (    Module module : modules) {
      module.rating=new Rating(true);
    }
    Ebean.save(modules);
  }
  if (ModuleVersion.count() == 0) {
    final List<ModuleVersion> versions=CollectionUtils.castTo(data.get(""String_Node_Str""),ModuleVersion.class);
    Logger.debug(String.format(""String_Node_Str"",versions.size()));
    for (int i=0, versionsSize=versions.size(); i < versionsSize; i++) {
      ModuleVersion version=versions.get(i);
      BinaryContent binaryContent=new BinaryContent();
      binaryContent.content=new byte[0];
      binaryContent.contentLength=0;
      version.binaryFile=binaryContent;
    }
    Ebean.save(versions);
  }
}",0.8686131386861314
101365,"@Before public void setUp() throws Exception {
  System.out.println(""String_Node_Str"");
  t=new Todo();
}","@Before public void setUp() throws Exception {
  System.out.println(""String_Node_Str"");
}",0.9175257731958762
101366,"public MergeChanges(int anInt,String s){
  aDouble=1.0;
  this.anInt=anInt;
  this.flag=false;
  this.anInt=anInt + 2;
  this.aFloat=2F;
  this.string=s + ""String_Node_Str"";
}","public MergeChanges(int anInt,String s){
  aDouble=1.0;
  this.anInt=anInt;
  this.flag=false;
  this.anInt=anInt + 1;
  this.aFloat=2F;
  this.string=s + ""String_Node_Str"";
}",0.9942857142857144
101367,"/** 
 * FIXME timeout intelligently. FIXME test whether we can declare a type conversion for a Map.
 */
public static void amqpPublish(int brokerId,String exchange,String routingKey,String message,Map<String,String> properties){
  Connection connection=null;
  Channel channel=null;
  try {
    BrokerConnectionState connectionState=getConnectionState(brokerId);
    connection=openConnection(connectionState);
    channel=connection.createChannel();
    channel.basicPublish(exchange,routingKey,false,false,null,message.getBytes());
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
 finally {
    try {
      if (channel != null) {
        channel.close();
      }
      if (connection != null) {
        connection.close(CONNECTION_CLOSE_TIMEOUT);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * FIXME timeout intelligently. FIXME test whether we can declare a type conversion for a Map.
 */
public static void amqpPublish(int brokerId,String exchange,String routingKey,String message,Map<String,String> properties){
  Connection connection=null;
  Channel channel=null;
  try {
    BrokerConnectionState connectionState=getConnectionState(brokerId);
    connection=openConnection(connectionState);
    channel=connection.createChannel();
    channel.basicPublish(exchange,routingKey,false,false,null,message.getBytes());
    state.put(brokerId,connectionState.currentAddress);
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
 finally {
    try {
      if (channel != null) {
        channel.close();
      }
      if (connection != null) {
        connection.close(CONNECTION_CLOSE_TIMEOUT);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.9679633867276888
101368,"public static void amqpPrintFullConfiguration(int brokerId){
  BrokerConnectionState connectionState=new BrokerConnectionState();
  fillAllAdresses(connectionState,brokerId);
  if (connectionState.addresses != null) {
    Iterator<FullAddress> fullAddressesIter=connectionState.addresses.iterator();
    while (fullAddressesIter.hasNext()) {
      FullAddress currFullAddress=(FullAddress)fullAddressesIter.next();
      System.out.println(currFullAddress);
    }
  }
}","public static void amqpPrintFullConfiguration(int brokerId){
  BrokerConnectionState connectionState=new BrokerConnectionState();
  fillAllAdresses(connectionState,brokerId);
  FullAddress activeBroker=state.get(brokerId);
  boolean foundActiveInDb=false;
  if (connectionState.addresses != null) {
    Iterator<FullAddress> fullAddressesIter=connectionState.addresses.iterator();
    while (fullAddressesIter.hasNext()) {
      FullAddress currFullAddress=(FullAddress)fullAddressesIter.next();
      if (currFullAddress.equals(activeBroker)) {
        System.out.println(currFullAddress + ""String_Node_Str"");
        foundActiveInDb=true;
      }
 else {
        System.out.println(currFullAddress);
      }
    }
  }
  if (activeBroker == null) {
    System.out.println(""String_Node_Str"");
  }
 else   if (!foundActiveInDb) {
    System.out.println(""String_Node_Str"" + activeBroker + ""String_Node_Str"");
  }
}",0.6748732802317161
101369,"private static BrokerConnectionState getConnectionState(int brokerId){
  BrokerConnectionState connectionState=new BrokerConnectionState();
  fillAllAdresses(connectionState,brokerId);
  return connectionState;
}","private static BrokerConnectionState getConnectionState(int brokerId){
  BrokerConnectionState connectionState=new BrokerConnectionState();
  fillAllAdresses(connectionState,brokerId);
  connectionState.currentAddress=state.get(brokerId);
  return connectionState;
}",0.8744769874476988
101370,"@Test public void testIsTemplate(){
  ScanConfiguration configuration=mock(ScanConfiguration.class);
  when(configuration.getMasterLocale()).thenReturn(""String_Node_Str"");
  assertTrue(getFixture().isTemplate(new File(""String_Node_Str""),configuration));
  assertFalse(getFixture().isTemplate(new File(""String_Node_Str""),configuration));
  assertFalse(getFixture().isTemplate(new File(""String_Node_Str""),configuration));
}","@Test public void testIsTemplate(){
  ScanConfiguration configuration=mock(ScanConfiguration.class);
  when(configuration.getMasterLocale()).thenReturn(""String_Node_Str"");
  assertTrue(getFixture().isTemplate(new File(""String_Node_Str""),configuration.getMasterLocale()));
  assertFalse(getFixture().isTemplate(new File(""String_Node_Str""),configuration.getMasterLocale()));
  assertFalse(getFixture().isTemplate(new File(""String_Node_Str""),configuration.getMasterLocale()));
}",0.9397321428571428
101371,"public static URI computeLocaleResourceLocation(Locale locale,ProjectVersion version,URI templateLocation){
  PropertyScanner scanner=createScanner(version);
  File path=scanner.computeTranslationPath(new File(templateLocation.toFileString()),version.getTemplate().getLocale(),locale);
  URI location=URI.createFileURI(path.getAbsolutePath());
  location=location.deresolve(templateLocation);
  return location;
}","public static URI computeLocaleResourceLocation(Locale locale,ProjectVersion version,URI templateLocation){
  PropertyScanner scanner=createScanner(version);
  URI parentPath=version.absoluteFilePath();
  File path=scanner.computeTranslationPath(new File(parentPath.toFileString() + templateLocation.toString()),version.getTemplate().getLocale(),locale);
  URI location=URI.createFileURI(path.getAbsolutePath());
  URI trimmedLocation=URI.createURI(location.segment(parentPath.segmentCount()));
  for (int i=parentPath.segmentCount() + 1; i < location.segmentCount(); i++) {
    trimmedLocation=trimmedLocation.appendSegment(location.segment(i));
  }
  return trimmedLocation;
}",0.6232813932172319
101372,"@Override public R getObject(){
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public List<R> getObject(){
  CDOObject model=getDomainObject();
  EStructuralFeature feature=model.eClass().getEStructuralFeature(featureName);
  List<R> result=(List<R>)model.eGet(feature);
  return result;
}",0.2426229508196721
101373,"@Override public void setObject(R object){
}","@Override public void setObject(List<R> object){
}",0.9361702127659576
101374,"public ProjectConfigSection(String id,IModel<Project> model){
  super(id,model);
  ListView<ProjectVersion> project=new ListView<ProjectVersion>(""String_Node_Str"",getModelObject().getChildren()){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<ProjectVersion> item){
      item.add(new Label(""String_Node_Str"",item.getModelObject().getName()));
    }
  }
;
  add(project);
}","public ProjectConfigSection(String id,IModel<Project> model){
  super(id,model);
  ComplexEObjectListDataProvider<ProjectVersion> provider=new ComplexEObjectListDataProvider<ProjectVersion>(model.getObject(),PropertiesPackage.Literals.RESOLVABLE__CHILDREN);
  ListView<ProjectVersion> project=new ListView<ProjectVersion>(""String_Node_Str"",provider){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<ProjectVersion> item){
      item.add(new Label(""String_Node_Str"",item.getModelObject().getName()));
    }
  }
;
  add(project);
}",0.78900883218842
101375,"public WorkspaceConfigSection(String id,IModel<Workspace> object){
  super(id,object);
  ListView<Project> project=new ListView<Project>(""String_Node_Str"",getModelObject().getChildren()){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<Project> item){
      item.add(new Label(""String_Node_Str"",item.getModelObject().getName()));
    }
  }
;
  add(project);
}","public WorkspaceConfigSection(String id,IModel<Workspace> object){
  super(id,object);
  ComplexEObjectListDataProvider<Project> provider=new ComplexEObjectListDataProvider<Project>(object.getObject(),PropertiesPackage.Literals.RESOLVABLE__CHILDREN);
  ListView<Project> project=new ListView<Project>(""String_Node_Str"",provider){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<Project> item){
      item.add(new Label(""String_Node_Str"",item.getModelObject().getName()));
    }
  }
;
  add(project);
}",0.7930327868852459
101376,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
@Override public int internalUpdatePercentComplete(){
  int translatedProps=0;
  for (  PropertyFileDescriptor descriptor : getDescriptors()) {
    translatedProps+=descriptor.getKeys();
  }
  setPropertyCount(translatedProps);
  if (!isMaster()) {
    int totalProps=getProjectVersion().getTemplate().getPropertyCount();
    return Math.min(100,(int)Math.floor(((translatedProps / (double)totalProps) * 100)));
  }
 else   return 100;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
@Override public int internalUpdatePercentComplete(){
  int translatedProps=0;
  for (  PropertyFileDescriptor descriptor : getDescriptors()) {
    translatedProps+=descriptor.getKeys();
  }
  setPropertyCount(translatedProps);
  if (!isMaster()) {
    int totalProps=getParent().getTemplate().getPropertyCount();
    return Math.min(100,(int)Math.floor(((translatedProps / (double)totalProps) * 100)));
  }
 else   return 100;
}",0.9823182711198428
101377,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public boolean isMaster(){
  return getProjectVersion() != null && getProjectVersion().getTemplate() == this;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public boolean isMaster(){
  return getParent() != null && getParent().getTemplate() == this;
}",0.9329608938547486
101378,"@Override public void newMatch(File file){
  URI location=URI.createFileURI(file.getAbsolutePath());
  location=location.deresolve(absolutPath());
  location=URI.createHierarchicalURI(location.scheme(),location.authority(),location.device(),location.segmentsList().subList(1,location.segmentCount()).toArray(new String[location.segmentCount() - 1]),location.query(),location.fragment());
  if (getTemplate() == null) {
    setTemplate(PropertiesFactory.eINSTANCE.createProjectLocale());
    getTemplate().setName(""String_Node_Str"");
    getChildren().add(getTemplate());
  }
  PropertyFileDescriptor descriptor=createDescriptor(getTemplate(),location);
  getTemplate().getDescriptors().add(descriptor);
  PropertyFile propertyFile=descriptor.loadProperties();
  descriptor.setKeys(propertyFile.getProperties().size());
  descriptor.updatePercentComplete();
  String localeString=getLocaleString(file.getName());
  if (!localeString.isEmpty()) {
    Locale locale=createVariant(localeString.substring(1));
    descriptor.setVariant(locale);
  }
  Pattern pattern=buildPatternFrom(file.getName().replace(localeString,""String_Node_Str""));
  File folder=file.getParentFile();
  String[] childNames=folder.list();
  for (  String child : childNames) {
    if (child.equals(file.getName()))     continue;
    Matcher matcher=pattern.matcher(child);
    if (matcher.matches()) {
      Locale locale=createVariant(matcher.group(1).substring(1));
      ProjectLocale projectLocale=getOrCreateProjectLocale(locale);
      URI childURI=location.trimSegments(1).appendSegment(child);
      PropertyFileDescriptor fileDescriptor=createDescriptor(projectLocale,childURI);
      fileDescriptor.setMaster(descriptor);
      PropertyFile translatedFile=fileDescriptor.loadProperties();
      fileDescriptor.setKeys(translatedFile.getProperties().size());
    }
  }
}","@Override public void newMatch(File file){
  URI location=URI.createFileURI(file.getAbsolutePath());
  location=location.deresolve(absolutPath());
  location=URI.createHierarchicalURI(location.scheme(),location.authority(),location.device(),location.segmentsList().subList(1,location.segmentCount()).toArray(new String[location.segmentCount() - 1]),location.query(),location.fragment());
  if (getTemplate() == null) {
    setTemplate(PropertiesFactory.eINSTANCE.createProjectLocale());
    getTemplate().setName(""String_Node_Str"");
    getChildren().add(getTemplate());
  }
  PropertyFileDescriptor descriptor=createDescriptor(getTemplate(),location);
  getTemplate().getDescriptors().add(descriptor);
  getTemplate().getChildren().add(descriptor);
  PropertyFile propertyFile=descriptor.loadProperties();
  descriptor.setKeys(propertyFile.getProperties().size());
  descriptor.updatePercentComplete();
  String localeString=getLocaleString(file.getName());
  if (!localeString.isEmpty()) {
    Locale locale=createVariant(localeString.substring(1));
    descriptor.setVariant(locale);
  }
  Pattern pattern=buildPatternFrom(file.getName().replace(localeString,""String_Node_Str""));
  File folder=file.getParentFile();
  String[] childNames=folder.list();
  for (  String child : childNames) {
    if (child.equals(file.getName()))     continue;
    Matcher matcher=pattern.matcher(child);
    if (matcher.matches()) {
      Locale locale=createVariant(matcher.group(1).substring(1));
      ProjectLocale projectLocale=getOrCreateProjectLocale(locale);
      URI childURI=location.trimSegments(1).appendSegment(child);
      PropertyFileDescriptor fileDescriptor=createDescriptor(projectLocale,childURI);
      fileDescriptor.setMaster(descriptor);
      PropertyFile translatedFile=fileDescriptor.loadProperties();
      fileDescriptor.setKeys(translatedFile.getProperties().size());
    }
  }
}",0.9874499332443256
101379,"private PropertyFileDescriptor createDescriptor(ProjectLocale projectLocale,URI childURI){
  PropertyFileDescriptor fileDescriptor=PropertiesFactory.eINSTANCE.createPropertyFileDescriptor();
  fileDescriptor.setLocation(childURI);
  fileDescriptor.setVariant(projectLocale.getLocale());
  projectLocale.getDescriptors().add(fileDescriptor);
  return fileDescriptor;
}","private PropertyFileDescriptor createDescriptor(ProjectLocale projectLocale,URI childURI){
  PropertyFileDescriptor fileDescriptor=PropertiesFactory.eINSTANCE.createPropertyFileDescriptor();
  fileDescriptor.setLocation(childURI);
  fileDescriptor.setVariant(projectLocale.getLocale());
  projectLocale.getDescriptors().add(fileDescriptor);
  projectLocale.getChildren().add(fileDescriptor);
  return fileDescriptor;
}",0.935031847133758
101380,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public ProjectLocale getProjectLocale(){
  return (ProjectLocale)eContainer();
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public ProjectLocale getProjectLocale(){
  return (ProjectLocale)eDynamicGet(PropertiesPackage.PROPERTY_FILE_DESCRIPTOR__PROJECT_LOCALE,PropertiesPackage.Literals.PROPERTY_FILE_DESCRIPTOR__PROJECT_LOCALE,true,true);
}",0.6426966292134831
101381,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public C getChild(String name){
  throw new UnsupportedOperationException();
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public C getChild(String name){
  for (  C child : getChildren()) {
    if (child.getName().equals(name))     return child;
  }
  return null;
}",0.6
101382,"@Override public void commit(Preferences config){
  form.commit();
  String newName=version.getParent().getName();
  if (!newName.equals(projectName)) {
    renameProject(projectName,newName);
  }
}","@Override public void commit(Preferences config){
  form.commit();
  String newName=getDomainObject().getName();
  if (!newName.equals(projectName)) {
    renameProject(projectName,newName);
  }
}",0.949238578680203
101383,"private void renameProject(String oldName,String newName){
  URI uri=version.getParent().getParent().absolutPath();
  File workspaceDir=new File(uri.toFileString());
  File projectDirectory=new File(workspaceDir,oldName);
  projectDirectory.renameTo(new File(workspaceDir,newName));
}","private void renameProject(String oldName,String newName){
  URI uri=getDomainObject().getParent().absolutPath();
  File workspaceDir=new File(uri.toFileString());
  File projectDirectory=new File(workspaceDir,oldName);
  projectDirectory.renameTo(new File(workspaceDir,newName));
}",0.9469964664310954
101384,"@Override public int size(){
  return super.size() + 1;
}","@Override public int size(){
  return super.size();
}",0.9636363636363636
101385,"public Property getLocale(){
  if (locale == null) {
    Locale userLocale=Locale.getDefault();
    if (MainDashboard.getCurrent() != null) {
      userLocale=MainDashboard.getCurrent().getLocale();
    }
    String displayName=projectLocale.getLocale().getDisplayName(userLocale);
    Button button=new SortableButton(displayName);
    button.setStyleName(Reindeer.BUTTON_LINK);
    button.addListener(new ClickListener(){
      @Override public void buttonClick(      ClickEvent event){
        ProjectVersion projectVersion=projectLocale.getParent();
        Project project=projectVersion.getParent();
        String version=""String_Node_Str"" + projectVersion.getName();
        MainDashboard.getCurrent().getBreadcrumbs().setPath(project.getName(),version,projectLocale.getLocale().toString());
      }
    }
);
    locale=new GenericProperty<Button>(Button.class,button);
  }
  return locale;
}","public Property getLocale(){
  if (locale == null) {
    Locale userLocale=Locale.getDefault();
    if (MainDashboard.getCurrent() != null) {
      userLocale=MainDashboard.getCurrent().getLocale();
    }
    String displayName=projectLocale.isMaster() ? ""String_Node_Str"" : projectLocale.getLocale().getDisplayName(userLocale);
    Button button=new SortableButton(displayName);
    button.setStyleName(Reindeer.BUTTON_LINK);
    button.addListener(new ClickListener(){
      @Override public void buttonClick(      ClickEvent event){
        ProjectVersion projectVersion=projectLocale.getParent();
        Project project=projectVersion.getParent();
        String version=""String_Node_Str"" + projectVersion.getName();
        MainDashboard.getCurrent().getBreadcrumbs().setPath(project.getName(),version,projectLocale.getLocale().toString());
      }
    }
);
    locale=new GenericProperty<Button>(Button.class,button);
  }
  return locale;
}",0.9745533297238764
101386,"private ProjectVersion getProjectVersion(Project project,String version){
  return project.getChild(version);
}","private ProjectVersion getProjectVersion(Project project,String version){
  if (version == null)   return project.getChildren().get(0);
  return project.getChild(version);
}",0.7816901408450704
101387,"private void createEditorArea(){
  Panel editorArea=new Panel();
  GridLayout grid=new GridLayout(2,3);
  grid.setSizeFull();
  grid.setSpacing(true);
  keyLabel=new Label();
  keyLabel.setValue(Messages.getString(""String_Node_Str""));
  grid.addComponent(keyLabel,0,0,1,0);
  grid.setColumnExpandRatio(0,1.0f);
  grid.setColumnExpandRatio(1,1.0f);
  orignal=new TextArea();
  orignal.setRows(3);
  orignal.setReadOnly(true);
  orignal.setWidth(100,TextArea.UNITS_PERCENTAGE);
  grid.addComponent(orignal);
  translated=new TextArea();
  translated.setRows(3);
  translated.setWidth(100,TextArea.UNITS_PERCENTAGE);
  translated.setNullRepresentation(""String_Node_Str"");
  translated.addListener((TextChangeListener)this);
  translated.setWriteThrough(true);
  translated.setImmediate(true);
  grid.addComponent(translated);
  orignalComment=new TextArea();
  orignalComment.setReadOnly(true);
  orignalComment.setWidth(100,TextArea.UNITS_PERCENTAGE);
  orignalComment.setRows(3);
  orignalComment.setNullRepresentation(""String_Node_Str"");
  grid.addComponent(orignalComment);
  translatedComment=new TextArea();
  translatedComment.setImmediate(true);
  translatedComment.setWidth(100,TextArea.UNITS_PERCENTAGE);
  translatedComment.setRows(3);
  translatedComment.setNullRepresentation(""String_Node_Str"");
  translatedComment.setInputPrompt(Messages.getString(""String_Node_Str""));
  translatedComment.setWriteThrough(true);
  grid.addComponent(translatedComment);
  safeButton=new Button();
  safeButton.setEnabled(false);
  safeButton.setCaption(Messages.getString(""String_Node_Str""));
  safeButton.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      setDirty(false);
      PropertyPersistenceService propertyPersistence=MainDashboard.getCurrent().getPropertyPersistence();
      propertyPersistence.saveProperties(descriptor,target);
      layout.getWindow().showNotification(Messages.getString(""String_Node_Str""),descriptor.getLocation().lastSegment());
    }
  }
);
  editorArea.setContent(grid);
  HorizontalLayout buttonArea=new HorizontalLayout();
  buttonArea.setSpacing(true);
  layout.addComponent(editorArea);
  layout.setExpandRatio(editorArea,0);
  buttonArea.addComponent(safeButton);
  Button editTemplate=new Button(Messages.getString(""String_Node_Str""));
  editTemplate.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      BreadCrumb crumb=MainDashboard.getCurrent().getBreadcrumbs();
      crumb.walkTo(""String_Node_Str"");
    }
  }
);
  buttonArea.addComponent(editTemplate);
  layout.addComponent(buttonArea);
  layout.setExpandRatio(buttonArea,0);
}","private void createEditorArea(){
  Panel editorArea=new Panel();
  GridLayout grid=new GridLayout(2,3);
  grid.setSizeFull();
  grid.setSpacing(true);
  keyLabel=new Label();
  keyLabel.setValue(Messages.getString(""String_Node_Str""));
  grid.addComponent(keyLabel,0,0,1,0);
  grid.setColumnExpandRatio(0,1.0f);
  grid.setColumnExpandRatio(1,1.0f);
  orignal=new TextArea();
  orignal.setRows(3);
  orignal.setReadOnly(true);
  orignal.setWidth(100,TextArea.UNITS_PERCENTAGE);
  grid.addComponent(orignal);
  translated=new TextArea();
  translated.setRows(3);
  translated.setInvalidCommitted(true);
  translated.setWidth(100,TextArea.UNITS_PERCENTAGE);
  translated.setNullRepresentation(""String_Node_Str"");
  translated.addListener((TextChangeListener)this);
  translated.setWriteThrough(true);
  translated.setImmediate(true);
  translated.setTextChangeEventMode(TextChangeEventMode.LAZY);
  translated.setTextChangeTimeout(500);
  grid.addComponent(translated);
  orignalComment=new TextArea();
  orignalComment.setReadOnly(true);
  orignalComment.setWidth(100,TextArea.UNITS_PERCENTAGE);
  orignalComment.setRows(3);
  orignalComment.setNullRepresentation(""String_Node_Str"");
  grid.addComponent(orignalComment);
  translatedComment=new TextArea();
  translatedComment.setImmediate(true);
  translatedComment.setWidth(100,TextArea.UNITS_PERCENTAGE);
  translatedComment.setRows(3);
  translatedComment.setNullRepresentation(""String_Node_Str"");
  translatedComment.setInputPrompt(Messages.getString(""String_Node_Str""));
  translatedComment.setWriteThrough(true);
  translatedComment.addListener((TextChangeListener)this);
  grid.addComponent(translatedComment);
  safeButton=new Button();
  safeButton.setEnabled(false);
  safeButton.setCaption(Messages.getString(""String_Node_Str""));
  safeButton.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      setDirty(false);
      PropertyPersistenceService propertyPersistence=MainDashboard.getCurrent().getPropertyPersistence();
      propertyPersistence.saveProperties(descriptor,target);
      layout.getWindow().showNotification(Messages.getString(""String_Node_Str""),descriptor.getLocation().lastSegment());
    }
  }
);
  editorArea.setContent(grid);
  HorizontalLayout buttonArea=new HorizontalLayout();
  buttonArea.setSpacing(true);
  layout.addComponent(editorArea);
  layout.setExpandRatio(editorArea,0);
  buttonArea.addComponent(safeButton);
  Button editTemplate=new Button(Messages.getString(""String_Node_Str""));
  editTemplate.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      BreadCrumb crumb=MainDashboard.getCurrent().getBreadcrumbs();
      crumb.walkTo(""String_Node_Str"");
    }
  }
);
  buttonArea.addComponent(editTemplate);
  layout.addComponent(buttonArea);
  layout.setExpandRatio(buttonArea,0);
}",0.9634851771511208
101388,"@Override public void valueChange(ValueChangeEvent event){
  Object value=event.getProperty().getValue();
  if (value == null)   return;
  Item theItem=propertyPairContainer.getItem(value);
  currentItem=(PropertyPairItem)theItem;
  propertyToolArea.selectionChanged(currentItem,reviews.get((String)currentItem.getKey()),this);
  currentItem.getSourceProperty();
  keyLabel.setValue(currentItem.getKey());
  translated.setPropertyDataSource(currentItem.getTarget());
  orignal.setPropertyDataSource(currentItem.getSource());
  translatedComment.setPropertyDataSource(currentItem.getTargetComment());
  orignalComment.setPropertyDataSource(currentItem.getSourceComment());
  translated.setComponentError(null);
}","@Override public void valueChange(ValueChangeEvent event){
  Object value=event.getProperty().getValue();
  if (value == null)   return;
  Item theItem=propertyPairContainer.getItem(value);
  currentItem=(PropertyPairItem)theItem;
  propertyToolArea.selectionChanged(currentItem,reviews.get((String)currentItem.getKey()),this);
  currentItem.getSourceProperty();
  keyLabel.setValue(currentItem.getKey());
  translated.setPropertyDataSource(currentItem.getTarget());
  orignal.setPropertyDataSource(currentItem.getSource());
  translatedComment.setPropertyDataSource(currentItem.getTargetComment());
  orignalComment.setPropertyDataSource(currentItem.getSourceComment());
  applyValidation(currentItem.getTargetProperty());
}",0.945682451253482
101389,"@Override public void textChange(TextChangeEvent event){
  setDirty(true);
  if (currentItem == null)   return;
  reviews.removeAll(currentItem.getKey());
  translated.setComponentError(null);
  currentItem.getTargetProperty().setValue(event.getText());
  Collection<Review> reviewList=reviewService.review(descriptor,currentItem.getSourceProperty(),currentItem.getTargetProperty());
  if (!reviewList.isEmpty()) {
    reviews.putAll((String)currentItem.getKey(),reviewList);
    List<ErrorMessage> errors=new ArrayList<ErrorMessage>(reviewList.size());
    for (    Review review : reviewList) {
      UserError error=new UserError(review.getMessage(),UserError.CONTENT_TEXT,ErrorMessage.ERROR);
      errors.add(error);
    }
    CompositeErrorMessage message=new CompositeErrorMessage(errors);
    translated.setComponentError(message);
  }
  table.refreshRowCache();
}","@Override public void textChange(TextChangeEvent event){
  setDirty(true);
  if (event.getComponent() != translated || currentItem == null)   return;
  de.jutzig.jabylon.properties.Property copy=EcoreUtil.copy(currentItem.getTargetProperty());
  copy.setValue(event.getText());
  applyValidation(copy);
}",0.2176870748299319
101390,"@Override public void saveProperties(PropertyFileDescriptor descriptor,PropertyFile file,boolean autoTranslate){
  try {
    queue.put(new PropertyTuple(descriptor,file,autoTranslate));
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"" + descriptor.fullPath(),e);
  }
}","@Override public void saveProperties(PropertyFileDescriptor descriptor,PropertyFile file,boolean autoTranslate){
  try {
    PropertyFileDescriptor adaptedDescriptor=workspace.cdoView().getObject(descriptor);
    queue.put(new PropertyTuple(adaptedDescriptor,file,autoTranslate));
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"" + descriptor.fullPath(),e);
  }
}",0.8635724331926864
101391,"private void createEditorArea(){
  Panel editorArea=new Panel();
  GridLayout grid=new GridLayout(2,3);
  grid.setSizeFull();
  grid.setSpacing(true);
  keyLabel=new Label();
  keyLabel.setValue(""String_Node_Str"");
  grid.addComponent(keyLabel,0,0,1,0);
  grid.setColumnExpandRatio(0,1.0f);
  grid.setColumnExpandRatio(1,1.0f);
  orignal=new TextArea();
  orignal.setRows(3);
  orignal.setReadOnly(true);
  orignal.setWidth(100,TextArea.UNITS_PERCENTAGE);
  grid.addComponent(orignal);
  translated=new TextArea();
  translated.setRows(3);
  translated.setWidth(100,TextArea.UNITS_PERCENTAGE);
  translated.setNullRepresentation(""String_Node_Str"");
  translated.addListener((TextChangeListener)this);
  translated.setWriteThrough(true);
  translated.setImmediate(true);
  grid.addComponent(translated);
  orignalComment=new TextArea();
  orignalComment.setReadOnly(true);
  orignalComment.setWidth(100,TextArea.UNITS_PERCENTAGE);
  orignalComment.setRows(3);
  orignalComment.setNullRepresentation(""String_Node_Str"");
  grid.addComponent(orignalComment);
  translatedComment=new TextArea();
  translatedComment.setImmediate(true);
  translatedComment.setWidth(100,TextArea.UNITS_PERCENTAGE);
  translatedComment.setRows(3);
  translatedComment.setNullRepresentation(""String_Node_Str"");
  translatedComment.addListener((TextChangeListener)this);
  translatedComment.setInputPrompt(""String_Node_Str"");
  translatedComment.setWriteThrough(true);
  grid.addComponent(translatedComment);
  safeButton=new Button();
  safeButton.setEnabled(false);
  safeButton.setCaption(""String_Node_Str"");
  safeButton.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      PropertyPersistenceService propertyPersistence=MainDashboard.getCurrent().getPropertyPersistence();
      propertyPersistence.saveProperties(descriptor,target);
      final int filledKeys=getFilledKeys(target);
      try {
        descriptor=TransactionUtil.commit(descriptor,new Modification<PropertyFileDescriptor,PropertyFileDescriptor>(){
          @Override public PropertyFileDescriptor apply(          PropertyFileDescriptor object){
            object.setKeys(filledKeys);
            object.updatePercentComplete();
            return object;
          }
        }
);
        setDirty(false);
        layout.getWindow().showNotification(""String_Node_Str"",descriptor.getLocation().lastSegment());
      }
 catch (      CommitException e) {
        e.printStackTrace();
      }
    }
  }
);
  editorArea.setContent(grid);
  HorizontalLayout buttonArea=new HorizontalLayout();
  buttonArea.setSpacing(true);
  layout.addComponent(editorArea);
  layout.setExpandRatio(editorArea,0);
  buttonArea.addComponent(safeButton);
  Button editTemplate=new Button(""String_Node_Str"");
  editTemplate.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      BreadCrumb crumb=MainDashboard.getCurrent().getBreadcrumbs();
      crumb.walkTo(""String_Node_Str"");
    }
  }
);
  buttonArea.addComponent(editTemplate);
  layout.addComponent(buttonArea);
  layout.setExpandRatio(buttonArea,0);
}","private void createEditorArea(){
  Panel editorArea=new Panel();
  GridLayout grid=new GridLayout(2,3);
  grid.setSizeFull();
  grid.setSpacing(true);
  keyLabel=new Label();
  keyLabel.setValue(""String_Node_Str"");
  grid.addComponent(keyLabel,0,0,1,0);
  grid.setColumnExpandRatio(0,1.0f);
  grid.setColumnExpandRatio(1,1.0f);
  orignal=new TextArea();
  orignal.setRows(3);
  orignal.setReadOnly(true);
  orignal.setWidth(100,TextArea.UNITS_PERCENTAGE);
  grid.addComponent(orignal);
  translated=new TextArea();
  translated.setRows(3);
  translated.setWidth(100,TextArea.UNITS_PERCENTAGE);
  translated.setNullRepresentation(""String_Node_Str"");
  translated.addListener((TextChangeListener)this);
  translated.setWriteThrough(true);
  translated.setImmediate(true);
  grid.addComponent(translated);
  orignalComment=new TextArea();
  orignalComment.setReadOnly(true);
  orignalComment.setWidth(100,TextArea.UNITS_PERCENTAGE);
  orignalComment.setRows(3);
  orignalComment.setNullRepresentation(""String_Node_Str"");
  grid.addComponent(orignalComment);
  translatedComment=new TextArea();
  translatedComment.setImmediate(true);
  translatedComment.setWidth(100,TextArea.UNITS_PERCENTAGE);
  translatedComment.setRows(3);
  translatedComment.setNullRepresentation(""String_Node_Str"");
  translatedComment.addListener((TextChangeListener)this);
  translatedComment.setInputPrompt(""String_Node_Str"");
  translatedComment.setWriteThrough(true);
  grid.addComponent(translatedComment);
  safeButton=new Button();
  safeButton.setEnabled(false);
  safeButton.setCaption(""String_Node_Str"");
  safeButton.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      final int filledKeys=getFilledKeys(target);
      try {
        descriptor=TransactionUtil.commit(descriptor,new Modification<PropertyFileDescriptor,PropertyFileDescriptor>(){
          @Override public PropertyFileDescriptor apply(          PropertyFileDescriptor object){
            object.setKeys(filledKeys);
            object.updatePercentComplete();
            return object;
          }
        }
);
        setDirty(false);
        PropertyPersistenceService propertyPersistence=MainDashboard.getCurrent().getPropertyPersistence();
        propertyPersistence.saveProperties(descriptor,target);
        layout.getWindow().showNotification(""String_Node_Str"",descriptor.getLocation().lastSegment());
      }
 catch (      CommitException e) {
        e.printStackTrace();
      }
    }
  }
);
  editorArea.setContent(grid);
  HorizontalLayout buttonArea=new HorizontalLayout();
  buttonArea.setSpacing(true);
  layout.addComponent(editorArea);
  layout.setExpandRatio(editorArea,0);
  buttonArea.addComponent(safeButton);
  Button editTemplate=new Button(""String_Node_Str"");
  editTemplate.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      BreadCrumb crumb=MainDashboard.getCurrent().getBreadcrumbs();
      crumb.walkTo(""String_Node_Str"");
    }
  }
);
  buttonArea.addComponent(editTemplate);
  layout.addComponent(buttonArea);
  layout.setExpandRatio(buttonArea,0);
}",0.9459373000639796
101392,"@Override public void buttonClick(ClickEvent event){
  PropertyPersistenceService propertyPersistence=MainDashboard.getCurrent().getPropertyPersistence();
  propertyPersistence.saveProperties(descriptor,source);
  final int filledKeys=getFilledKeys(source);
  try {
    descriptor=TransactionUtil.commit(descriptor,new Modification<PropertyFileDescriptor,PropertyFileDescriptor>(){
      @Override public PropertyFileDescriptor apply(      PropertyFileDescriptor object){
        object.setKeys(filledKeys);
        object.updatePercentComplete();
        return object;
      }
    }
);
    setDirty(false);
    layout.getWindow().showNotification(""String_Node_Str"",descriptor.getLocation().lastSegment());
  }
 catch (  CommitException e) {
    e.printStackTrace();
  }
}","@Override public void buttonClick(ClickEvent event){
  final int filledKeys=getFilledKeys(source);
  try {
    descriptor=TransactionUtil.commit(descriptor,new Modification<PropertyFileDescriptor,PropertyFileDescriptor>(){
      @Override public PropertyFileDescriptor apply(      PropertyFileDescriptor object){
        object.setKeys(filledKeys);
        object.updatePercentComplete();
        return object;
      }
    }
);
    PropertyPersistenceService propertyPersistence=MainDashboard.getCurrent().getPropertyPersistence();
    propertyPersistence.saveProperties(descriptor,source);
    setDirty(false);
    layout.getWindow().showNotification(""String_Node_Str"",descriptor.getLocation().lastSegment());
  }
 catch (  CommitException e) {
    e.printStackTrace();
  }
}",0.792258064516129
101393,"private void createEditorArea(){
  Panel editorArea=new Panel();
  GridLayout grid=new GridLayout(2,2);
  grid.setSizeFull();
  grid.setSpacing(true);
  keyLabel=new TextField();
  keyLabel.setValue(""String_Node_Str"");
  keyLabel.setWriteThrough(true);
  keyLabel.setImmediate(true);
  keyLabel.addListener((TextChangeListener)this);
  grid.addComponent(keyLabel,0,0,0,0);
  grid.setColumnExpandRatio(0,0.0f);
  grid.setColumnExpandRatio(1,0.0f);
  grid.setRowExpandRatio(0,0);
  grid.setRowExpandRatio(1,0);
  orignalComment=new TextArea();
  orignalComment.setWidth(100,TextArea.UNITS_PERCENTAGE);
  orignalComment.setRows(3);
  orignalComment.setNullRepresentation(""String_Node_Str"");
  orignalComment.setInputPrompt(""String_Node_Str"");
  orignalComment.addListener((TextChangeListener)this);
  orignalComment.setWriteThrough(true);
  orignalComment.setImmediate(true);
  grid.addComponent(orignalComment,0,1,0,1);
  orignal=new TextArea();
  orignal.setRows(5);
  orignal.setWidth(100,TextArea.UNITS_PERCENTAGE);
  orignal.setInputPrompt(""String_Node_Str"");
  orignal.addListener((TextChangeListener)this);
  orignal.setImmediate(true);
  orignal.setWriteThrough(true);
  orignal.setNullRepresentation(""String_Node_Str"");
  grid.addComponent(orignal,1,0,1,1);
  safeButton=new Button();
  safeButton.setEnabled(false);
  safeButton.setCaption(""String_Node_Str"");
  safeButton.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      PropertyPersistenceService propertyPersistence=MainDashboard.getCurrent().getPropertyPersistence();
      propertyPersistence.saveProperties(descriptor,source);
      final int filledKeys=getFilledKeys(source);
      try {
        descriptor=TransactionUtil.commit(descriptor,new Modification<PropertyFileDescriptor,PropertyFileDescriptor>(){
          @Override public PropertyFileDescriptor apply(          PropertyFileDescriptor object){
            object.setKeys(filledKeys);
            object.updatePercentComplete();
            return object;
          }
        }
);
        setDirty(false);
        layout.getWindow().showNotification(""String_Node_Str"",descriptor.getLocation().lastSegment());
      }
 catch (      CommitException e) {
        e.printStackTrace();
      }
    }
  }
);
  editorArea.setContent(grid);
  layout.addComponent(editorArea);
  layout.setExpandRatio(editorArea,0);
  layout.addComponent(safeButton);
  layout.setExpandRatio(safeButton,0);
}","private void createEditorArea(){
  Panel editorArea=new Panel();
  GridLayout grid=new GridLayout(2,2);
  grid.setSizeFull();
  grid.setSpacing(true);
  keyLabel=new TextField();
  keyLabel.setValue(""String_Node_Str"");
  keyLabel.setWriteThrough(true);
  keyLabel.setImmediate(true);
  keyLabel.addListener((TextChangeListener)this);
  grid.addComponent(keyLabel,0,0,0,0);
  grid.setColumnExpandRatio(0,0.0f);
  grid.setColumnExpandRatio(1,0.0f);
  grid.setRowExpandRatio(0,0);
  grid.setRowExpandRatio(1,0);
  orignalComment=new TextArea();
  orignalComment.setWidth(100,TextArea.UNITS_PERCENTAGE);
  orignalComment.setRows(3);
  orignalComment.setNullRepresentation(""String_Node_Str"");
  orignalComment.setInputPrompt(""String_Node_Str"");
  orignalComment.addListener((TextChangeListener)this);
  orignalComment.setWriteThrough(true);
  orignalComment.setImmediate(true);
  grid.addComponent(orignalComment,0,1,0,1);
  orignal=new TextArea();
  orignal.setRows(5);
  orignal.setWidth(100,TextArea.UNITS_PERCENTAGE);
  orignal.setInputPrompt(""String_Node_Str"");
  orignal.addListener((TextChangeListener)this);
  orignal.setImmediate(true);
  orignal.setWriteThrough(true);
  orignal.setNullRepresentation(""String_Node_Str"");
  grid.addComponent(orignal,1,0,1,1);
  safeButton=new Button();
  safeButton.setEnabled(false);
  safeButton.setCaption(""String_Node_Str"");
  safeButton.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      final int filledKeys=getFilledKeys(source);
      try {
        descriptor=TransactionUtil.commit(descriptor,new Modification<PropertyFileDescriptor,PropertyFileDescriptor>(){
          @Override public PropertyFileDescriptor apply(          PropertyFileDescriptor object){
            object.setKeys(filledKeys);
            object.updatePercentComplete();
            return object;
          }
        }
);
        PropertyPersistenceService propertyPersistence=MainDashboard.getCurrent().getPropertyPersistence();
        propertyPersistence.saveProperties(descriptor,source);
        setDirty(false);
        layout.getWindow().showNotification(""String_Node_Str"",descriptor.getLocation().lastSegment());
      }
 catch (      CommitException e) {
        e.printStackTrace();
      }
    }
  }
);
  editorArea.setContent(grid);
  layout.addComponent(editorArea);
  layout.setExpandRatio(editorArea,0);
  layout.addComponent(safeButton);
  layout.setExpandRatio(safeButton,0);
}",0.93130081300813
101394,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @model
 * @generated
 */
void computeLocation();","/** 
 * <!-- begin-user-doc --> Computes the location according to the current locale and the location of the master. Does nothing if this is the master, or there is no master available <!-- end-user-doc -->
 * @model
 * @generated
 * @see #isMaster()
 * @see #getLocation()
 * @see #getVariant()
 */
void computeLocation();",0.4895104895104895
101395,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public void computeLocation(){
  if (isMaster())   return;
  Locale locale=getVariant();
  URI location=getMaster().getLocation();
  String filename=location.lastSegment();
  String extension=location.fileExtension();
  if (extension != null) {
    filename=filename.substring(0,filename.length() - extension.length() - 1);
    filename+=""String_Node_Str"";
    filename+=locale.toString();
    filename+=""String_Node_Str"";
    filename+=extension;
  }
  setLocation(location.trimSegments(1).appendSegment(filename));
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public void computeLocation(){
  if (isMaster() || getMaster() == null)   return;
  Locale locale=getVariant();
  URI location=getMaster().getLocation();
  String filename=location.lastSegment();
  String extension=location.fileExtension();
  if (extension != null) {
    filename=filename.substring(0,filename.length() - extension.length() - 1);
    Locale masterLocale=getMaster().getVariant();
    if (masterLocale != null) {
      filename=filename.substring(0,filename.length() - (masterLocale.toString().length() + 1));
    }
    filename+=""String_Node_Str"";
    filename+=locale.toString();
    filename+=""String_Node_Str"";
    filename+=extension;
  }
  setLocation(location.trimSegments(1).appendSegment(filename));
}",0.8510028653295129
101396,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public boolean isMaster(){
  return !eIsSet(PropertiesPackage.Literals.PROPERTY_FILE_DESCRIPTOR__VARIANT);
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public boolean isMaster(){
  ProjectLocale locale=getProjectLocale();
  if (locale == null)   return false;
  return locale.isMaster();
}",0.5793450881612091
101397,"/** 
 * Tests the '  {@link de.jutzig.jabylon.properties.PropertyFileDescriptor#isMaster() <em>Master</em>}' feature getter. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @see de.jutzig.jabylon.properties.PropertyFileDescriptor#isMaster()
 * @generated NOT
 */
public void testIsMaster(){
  assertTrue(getFixture().isMaster());
  getFixture().setVariant(Locale.FRENCH);
  assertFalse(getFixture().isMaster());
  getFixture().setVariant(null);
  assertTrue(getFixture().isMaster());
}","/** 
 * Tests the '  {@link de.jutzig.jabylon.properties.PropertyFileDescriptor#isMaster() <em>Master</em>}' feature getter. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @see de.jutzig.jabylon.properties.PropertyFileDescriptor#isMaster()
 * @generated NOT
 */
public void testIsMaster(){
  assertFalse(getFixture().isMaster());
  getFixture().setVariant(Locale.FRENCH);
  assertFalse(getFixture().isMaster());
  getFixture().setVariant(null);
  assertFalse(getFixture().isMaster());
  ProjectVersion version=PropertiesFactory.eINSTANCE.createProjectVersion();
  ProjectLocale master=PropertiesFactory.eINSTANCE.createProjectLocale();
  version.setMaster(master);
  master.getDescriptors().add(getFixture());
  assertTrue(getFixture().isMaster());
  ProjectLocale slave=PropertiesFactory.eINSTANCE.createProjectLocale();
  version.getLocales().add(slave);
  slave.getDescriptors().add(getFixture());
  assertFalse(getFixture().isMaster());
}",0.6713286713286714
101398,"/** 
 * Tests the '  {@link de.jutzig.jabylon.properties.PropertyFileDescriptor#computeLocation() <em>Compute Location</em>}' operation. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @see de.jutzig.jabylon.properties.PropertyFileDescriptor#computeLocation()
 * @generated
 */
public void testComputeLocation(){
  fail();
}","/** 
 * Tests the '  {@link de.jutzig.jabylon.properties.PropertyFileDescriptor#computeLocation() <em>Compute Location</em>}' operation. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @see de.jutzig.jabylon.properties.PropertyFileDescriptor#computeLocation()
 * @generated NOT
 */
public void testComputeLocation(){
  PropertyFileDescriptor master=PropertiesFactory.eINSTANCE.createPropertyFileDescriptor();
  master.setLocation(URI.createURI(""String_Node_Str""));
  getFixture().setVariant(new Locale(""String_Node_Str"",""String_Node_Str""));
  getFixture().computeLocation();
  assertNull(getFixture().getLocation());
  getFixture().setMaster(master);
  getFixture().computeLocation();
  assertEquals(""String_Node_Str"",getFixture().getLocation().toString());
}",0.591705069124424
101399,"private Component createHeader(){
  Label title=new Label();
  title.setCaption(""String_Node_Str"");
  title.setStyleName(Reindeer.LABEL_H1);
  HorizontalLayout header=new HorizontalLayout();
  header.setWidth(""String_Node_Str"");
  header.setMargin(true);
  header.setSpacing(true);
  CssLayout titleLayout=new CssLayout();
  titleLayout.addComponent(title);
  Label description=new Label();
  description.setStyleName(Reindeer.LABEL_SMALL);
  description.setSizeUndefined();
  description.setCaption(""String_Node_Str"");
  titleLayout.addComponent(description);
  header.addComponent(titleLayout);
  BreadCrumbImpl crumbs=new BreadCrumbImpl();
  breadcrumbs=crumbs;
  titleLayout.addComponent(crumbs);
  return header;
}","private Component createHeader(){
  Label title=new Label();
  title.setCaption(""String_Node_Str"");
  title.setStyleName(Reindeer.LABEL_H1);
  HorizontalLayout header=new HorizontalLayout();
  header.setMargin(true);
  header.setSpacing(true);
  header.addComponent(title);
  BreadCrumbImpl crumbs=new BreadCrumbImpl();
  breadcrumbs=crumbs;
  header.addComponent(crumbs);
  return header;
}",0.4576576576576576
101400,"public void setMainComponent(Component c){
  horizontalSplit.setSecondComponent(c);
}","public void setMainComponent(Component c){
  if (mainComponent != null) {
    contentArea.removeComponent(mainComponent);
  }
  mainComponent=c;
  contentArea.addComponent(mainComponent);
}",0.5328467153284672
101401,"private void buildMainLayout(){
  setMainWindow(new Window(""String_Node_Str""));
  VerticalLayout layout=new VerticalLayout();
  layout.setSizeFull();
  horizontalSplit=new HorizontalSplitPanel();
  layout.addComponent(createToolbar());
  Component header=createHeader();
  layout.addComponent(header);
  layout.addComponent(horizontalSplit);
  layout.setExpandRatio(horizontalSplit,1);
  horizontalSplit.setSplitPosition(200,Sizeable.UNITS_PIXELS);
  horizontalSplit.setCaption(""String_Node_Str"");
  horizontalSplit.setDescription(""String_Node_Str"");
  getMainWindow().setContent(layout);
  addProject=new Button();
  addProject.setCaption(""String_Node_Str"");
  addProject.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      setMainComponent(new NewProjectForm(workspace,MainDashboard.this));
    }
  }
);
  horizontalSplit.addComponent(addProject);
  setMainComponent(new ProjectListPanel());
}","private void buildMainLayout(){
  setMainWindow(new Window(""String_Node_Str""));
  mainLayout=new VerticalLayout();
  contentArea=new GridLayout();
  contentArea.setSizeUndefined();
  Component header=createHeader();
  mainLayout.addComponent(header);
  mainLayout.setComponentAlignment(header,Alignment.TOP_LEFT);
  mainLayout.setExpandRatio(header,0f);
  mainLayout.addComponent(contentArea);
  getMainWindow().setContent(mainLayout);
}",0.2768115942028985
101402,"public NewProjectForm(Workspace theWorkspace,final MainDashboard dashboard){
  this.workspace=theWorkspace;
  this.project=PropertiesFactory.eINSTANCE.createProject();
  EObjectItem item=new EObjectItem(project);
  final Form projectForm=new Form();
  projectForm.setCaption(""String_Node_Str"");
  projectForm.setWriteThrough(false);
  projectForm.setInvalidCommitted(false);
  projectForm.setFormFieldFactory(new ProjectFieldFactory());
  projectForm.setItemDataSource(item);
  projectForm.setVisibleItemProperties(Arrays.asList(new EStructuralFeature[]{PropertiesPackage.Literals.PROJECT__NAME}));
  addComponent(projectForm);
  HorizontalLayout buttons=new HorizontalLayout();
  buttons.setSpacing(true);
  Button discardChanges=new Button(""String_Node_Str"",new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      projectForm.discard();
    }
  }
);
  discardChanges.setStyleName(BaseTheme.BUTTON_LINK);
  buttons.addComponent(discardChanges);
  buttons.setComponentAlignment(discardChanges,Alignment.MIDDLE_LEFT);
  Button apply=new Button(""String_Node_Str"",new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      try {
        projectForm.commit();
        project=TransactionUtil.commit(workspace,new Modification<Workspace,Project>(){
          @Override public Project apply(          Workspace object){
            object.getProjects().add(project);
            return project;
          }
        }
);
        MainDashboard.getCurrent().getBreadcrumbs().walkTo(project.getName());
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  buttons.addComponent(apply);
  projectForm.getFooter().addComponent(buttons);
  projectForm.getFooter().setMargin(false,false,true,true);
}","public NewProjectForm(final MainDashboard dashboard){
  this.project=PropertiesFactory.eINSTANCE.createProject();
  EObjectItem item=new EObjectItem(project);
  this.workspace=dashboard.getWorkspace();
  final Form projectForm=new Form();
  projectForm.setCaption(""String_Node_Str"");
  projectForm.setWriteThrough(false);
  projectForm.setInvalidCommitted(false);
  projectForm.setFormFieldFactory(new ProjectFieldFactory());
  projectForm.setItemDataSource(item);
  projectForm.setVisibleItemProperties(Arrays.asList(new EStructuralFeature[]{PropertiesPackage.Literals.PROJECT__NAME}));
  addComponent(projectForm);
  HorizontalLayout buttons=new HorizontalLayout();
  buttons.setSpacing(true);
  Button discardChanges=new Button(""String_Node_Str"",new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      projectForm.discard();
    }
  }
);
  discardChanges.setStyleName(BaseTheme.BUTTON_LINK);
  buttons.addComponent(discardChanges);
  buttons.setComponentAlignment(discardChanges,Alignment.MIDDLE_LEFT);
  Button apply=new Button(""String_Node_Str"",new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      try {
        projectForm.commit();
        project=TransactionUtil.commit(workspace,new Modification<Workspace,Project>(){
          @Override public Project apply(          Workspace object){
            object.getProjects().add(project);
            return project;
          }
        }
);
        MainDashboard.getCurrent().getBreadcrumbs().walkTo(project.getName());
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  buttons.addComponent(apply);
  projectForm.getFooter().addComponent(buttons);
  projectForm.getFooter().setMargin(false,false,true,true);
}",0.961310364303869
101403,"private void createContents(){
  Workspace workspace=MainDashboard.getCurrent().getWorkspace();
  EList<Project> projects=workspace.getProjects();
  setColumns(2);
  setRows(projects.size());
  buildHeader();
  Random random=new Random();
  for (  Project project : projects) {
    Button projectName=new Button(project.getName());
    projectName.setStyleName(Reindeer.BUTTON_LINK);
    addComponent(projectName);
    projectName.setData(project);
    projectName.addListener(this);
    StaticProgressIndicator progress=new StaticProgressIndicator();
    progress.setPercentage(random.nextInt(100));
    addComponent(progress);
  }
}","private void createContents(){
  Workspace workspace=MainDashboard.getCurrent().getWorkspace();
  EList<Project> projects=workspace.getProjects();
  setColumns(2);
  setRows(projects.size());
  buildHeader();
  Random random=new Random();
  for (  Project project : projects) {
    Button projectName=new Button(project.getName());
    projectName.setStyleName(Reindeer.BUTTON_LINK);
    addComponent(projectName);
    projectName.setData(project);
    projectName.addListener(this);
    StaticProgressIndicator progress=new StaticProgressIndicator();
    progress.setPercentage(random.nextInt(100));
    addComponent(progress);
  }
  Button addProject=new Button();
  addProject.setCaption(""String_Node_Str"");
  addProject.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      MainDashboard dashboard=MainDashboard.getCurrent();
      dashboard.setMainComponent(new NewProjectForm(dashboard));
    }
  }
);
  addComponent(addProject);
}",0.7841682127396413
101404,"public Property readProperty(BufferedReader reader) throws IOException {
  String line=null;
  Property property=null;
  StringBuilder comment=new StringBuilder();
  StringBuilder propertyValue=new StringBuilder();
  while ((line=reader.readLine()) != null) {
    line=line.trim();
    if (line.length() == 0)     continue;
    if (isComment(line) && line.length() > 1) {
      if (comment.length() > 0)       comment.append(""String_Node_Str"");
      comment.append(line.substring(1).trim());
    }
 else {
      propertyValue.append(NativeToAsciiConverter.convertEncodedToUnicode(line));
      if (line.endsWith(""String_Node_Str"")) {
        propertyValue.append(""String_Node_Str"");
        continue;
      }
      property=PropertiesFactory.eINSTANCE.createProperty();
      if (comment.length() > 0)       property.setComment(comment.toString());
      String[] parts=split(propertyValue.toString());
      property.setKey(parts[0]);
      property.setValue(parts[1]);
      return property;
    }
  }
  return property;
}","public Property readProperty(BufferedReader reader) throws IOException {
  String line=null;
  Property property=null;
  StringBuilder comment=new StringBuilder();
  StringBuilder propertyValue=new StringBuilder();
  while ((line=reader.readLine()) != null) {
    line=line.trim();
    if (line.length() == 0)     continue;
    if (isComment(line) && line.length() > 1) {
      if (comment.length() > 0)       comment.append(""String_Node_Str"");
      comment.append(line.substring(1).trim());
    }
 else {
      propertyValue.append(NativeToAsciiConverter.convertEncodedToUnicode(line));
      if (line.endsWith(""String_Node_Str"")) {
        propertyValue.append(""String_Node_Str"");
        continue;
      }
      property=PropertiesFactory.eINSTANCE.createProperty();
      if (comment.length() > 0)       property.setComment(comment.toString());
      String[] parts=split(propertyValue.toString());
      if (parts[0] == null)       continue;
      property.setKey(parts[0]);
      property.setValue(parts[1]);
      return property;
    }
  }
  return property;
}",0.9646609360076408
101405,"/** 
 * Produces TokenStream instance for tokenizing input text.  First, a language is determined, because a special treatment needs to be taken for Chinese. Then, the individual filters (length, stemming, stopword  removal) are hooked up and the corresponding TokenStream instance is returned.
 * @param fieldName
 * @param reader
 * @return 
 */
@Override public TokenStream tokenStream(String fieldName,Reader reader){
  if (lang == null || !lang.equals(""String_Node_Str"")) {
    Tokenizer tokenizer=new WikipediaTokenizer(reader);
    TokenStream stream=new StandardFilter(Version.LUCENE_30,tokenizer);
    stream=new LengthFilter(true,stream,3,100);
    stream=new LowerCaseFilter(Version.LUCENE_30,stream);
    if (stopWordSet != null) {
      stream=new StopFilter(Version.LUCENE_30,stream,stopWordSet);
    }
    if (snowballStemmer != null) {
      try {
        Class<SnowballProgram> stemmer=(Class<SnowballProgram>)Class.forName(snowballStemmer);
        stream=new SnowballFilter(stream,stemmer.newInstance());
      }
 catch (      InstantiationException ex) {
        Logger.getLogger(LUCENEWikipediaAnalyzer.class.getName()).log(Level.SEVERE,null,ex);
      }
catch (      IllegalAccessException ex) {
        Logger.getLogger(LUCENEWikipediaAnalyzer.class.getName()).log(Level.SEVERE,null,ex);
      }
catch (      ClassNotFoundException ex) {
        Logger.getLogger(LUCENEWikipediaAnalyzer.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
    return stream;
  }
 else   if (lang.equals(""String_Node_Str"")) {
    try {
      MediaWikiParserFactory pf=new MediaWikiParserFactory();
      MediaWikiParser parser=pf.createParser();
      StringWriter sw=new StringWriter();
      IOUtils.copy(reader,sw);
      ParsedPage p=parser.parse(sw.toString());
      reader=new StringReader(p.getText());
    }
 catch (    IOException ex) {
      Logger.getLogger(LUCENEWikipediaAnalyzer.class.getName()).log(Level.SEVERE,null,ex);
      reader=new StringReader(""String_Node_Str"");
    }
    Tokenizer tokenizer=new SentenceTokenizer(reader);
    TokenStream stream=new WordTokenFilter(tokenizer);
    stream=new PorterStemFilter(stream);
    stream=new StopFilter(Version.LUCENE_30,stream,stopWordSet);
    return stream;
  }
 else {
    return null;
  }
}","/** 
 * Produces TokenStream instance for tokenizing input text.  First, a language is determined, because a special treatment needs to be taken for Chinese. Then, the individual filters (length, stemming, stopword  removal) are hooked up and the corresponding TokenStream instance is returned.
 * @param fieldName
 * @param reader
 * @return 
 */
@Override public TokenStream tokenStream(String fieldName,Reader reader){
  if (lang == null || !lang.equals(""String_Node_Str"")) {
    Tokenizer tokenizer=new WikipediaTokenizer(reader);
    TokenStream stream=new StandardFilter(Version.LUCENE_30,tokenizer);
    stream=new LowerCaseFilter(Version.LUCENE_30,stream);
    if (stopWordSet != null) {
      stream=new StopFilter(Version.LUCENE_30,stream,stopWordSet);
    }
    if (snowballStemmer != null) {
      try {
        Class<SnowballProgram> stemmer=(Class<SnowballProgram>)Class.forName(snowballStemmer);
        stream=new SnowballFilter(stream,stemmer.newInstance());
      }
 catch (      InstantiationException ex) {
        Logger.getLogger(LUCENEWikipediaAnalyzer.class.getName()).log(Level.SEVERE,null,ex);
      }
catch (      IllegalAccessException ex) {
        Logger.getLogger(LUCENEWikipediaAnalyzer.class.getName()).log(Level.SEVERE,null,ex);
      }
catch (      ClassNotFoundException ex) {
        Logger.getLogger(LUCENEWikipediaAnalyzer.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
    return stream;
  }
 else   if (lang.equals(""String_Node_Str"")) {
    try {
      MediaWikiParserFactory pf=new MediaWikiParserFactory();
      MediaWikiParser parser=pf.createParser();
      StringWriter sw=new StringWriter();
      IOUtils.copy(reader,sw);
      ParsedPage p=parser.parse(sw.toString());
      reader=new StringReader(p.getText());
    }
 catch (    IOException ex) {
      Logger.getLogger(LUCENEWikipediaAnalyzer.class.getName()).log(Level.SEVERE,null,ex);
      reader=new StringReader(""String_Node_Str"");
    }
    Tokenizer tokenizer=new SentenceTokenizer(reader);
    TokenStream stream=new WordTokenFilter(tokenizer);
    stream=new PorterStemFilter(stream);
    stream=new StopFilter(Version.LUCENE_30,stream,stopWordSet);
    return stream;
  }
 else {
    return null;
  }
}",0.9893333333333332
101406,"/** 
 * Projects the query into the concept space.
 * @param query
 * @return Returns concept vector results exist, otherwise null 
 * @throws IOException
 * @throws SQLException
 */
public IConceptVector getConceptVector(String query) throws IOException, SQLException {
  if (caching && esaCache.containsKey(query)) {
    return esaCache.get(query);
  }
  String strTerm;
  int numTerms=0;
  ResultSet rs;
  int doc;
  double score;
  int vint;
  double vdouble;
  double tf;
  double vsum;
  int plen;
  this.clean();
  values.clear();
  query=Utils.removeDiacriticalMarks(query);
  TokenStream ts=analyzer.tokenStream(""String_Node_Str"",new StringReader(query));
  ts.reset();
  while (ts.incrementToken()) {
    TermAttribute t=ts.getAttribute(TermAttribute.class);
    strTerm=t.term();
    if (strTerm.equals(""String_Node_Str"") || strTerm.equals(""String_Node_Str"")) {
      continue;
    }
    termList.add(strTerm);
    numTerms++;
  }
  ts.end();
  ts.close();
  ByteArrayInputStream bais;
  DataInputStream dis;
  if (!loadToMemory) {
    db.executeUpdate(""String_Node_Str"");
    db.executeUpdate(""String_Node_Str"");
    PreparedStatement psTTerms=db.getConnection().prepareStatement(""String_Node_Str"");
    for (    String t : termList) {
      psTTerms.setBytes(1,t.getBytes(""String_Node_Str""));
      psTTerms.addBatch();
    }
    psTTerms.executeBatch();
    psTTerms.close();
    ResultSet res;
    esaNdx.clear();
    esaIdf.clear();
    res=db.executeSelect(""String_Node_Str"" + lang + ""String_Node_Str"");
    while (res.next()) {
      esaNdx.put(new String(res.getBytes(""String_Node_Str""),""String_Node_Str""),res.getBytes(""String_Node_Str""));
    }
    res.close();
    res=db.executeSelect(""String_Node_Str"" + lang + ""String_Node_Str"");
    while (res.next()) {
      esaIdf.put(new String(res.getBytes(""String_Node_Str""),""String_Node_Str""),res.getFloat(""String_Node_Str""));
    }
    res.close();
  }
  for (  String t : termList) {
    if (!idfMap.containsKey(t)) {
      Float idf=esaIdf.get(t);
      if (idf != null) {
        idfMap.put(t,idf);
      }
    }
    if (freqMap.containsKey(t)) {
      vint=freqMap.get(t);
      freqMap.put(t,vint + 1);
    }
 else {
      freqMap.put(t,1);
    }
  }
  if (numTerms == 0) {
    return null;
  }
  vsum=0;
  for (  String tk : idfMap.keySet()) {
    tf=1.0 + Math.log(freqMap.get(tk));
    vdouble=(idfMap.get(tk) * tf);
    tfidfMap.put(tk,vdouble);
    vsum+=vdouble * vdouble;
  }
  vsum=Math.sqrt(vsum);
  for (  String tk : idfMap.keySet()) {
    vdouble=tfidfMap.get(tk);
    tfidfMap.put(tk,vdouble / vsum);
  }
  score=0;
  for (  String tk : termList) {
    byte[] rss=esaNdx.get(tk);
    score=0;
    if (rss != null) {
      bais=new ByteArrayInputStream(rss);
      dis=new DataInputStream(bais);
      plen=dis.readInt();
      for (int k=0; k < plen; k++) {
        doc=dis.readInt();
        score=dis.readFloat();
        float scoreF=(float)(score * tfidfMap.get(tk));
        values.adjustOrPutValue(doc,scoreF,scoreF);
      }
      dis.close();
      bais.close();
    }
  }
  float[] valuesF=values.getValues();
  ids=values.keys();
  HeapSort.heapSort(valuesF,ids);
  IConceptVector newCv=new TroveConceptVector(ids.length);
  for (int i=ids.length - 1; i >= 0 && valuesF[i] > 0; i--) {
    newCv.set(ids[i],valuesF[i] / numTerms);
  }
  if (caching) {
    esaCache.put(query,newCv);
  }
  return newCv;
}","/** 
 * Projects the query into the concept space.
 * @param query
 * @return Returns concept vector results exist, otherwise null 
 * @throws IOException
 * @throws SQLException
 */
public IConceptVector getConceptVector(String query) throws IOException, SQLException {
  if (caching && esaCache.containsKey(query)) {
    return esaCache.get(query);
  }
  String strTerm;
  int numTerms=0;
  ResultSet rs;
  int doc;
  double score;
  int vint;
  double vdouble;
  double tf;
  double vsum;
  int plen;
  this.clean();
  values.clear();
  query=Utils.removeDiacriticalMarks(query);
  TokenStream ts=analyzer.tokenStream(""String_Node_Str"",new StringReader(query));
  ts.reset();
  while (ts.incrementToken()) {
    TermAttribute t=ts.getAttribute(TermAttribute.class);
    strTerm=t.term();
    if (strTerm.equals(""String_Node_Str"") || strTerm.equals(""String_Node_Str"")) {
      continue;
    }
    termList.add(strTerm);
    numTerms++;
  }
  ts.end();
  ts.close();
  ByteArrayInputStream bais;
  DataInputStream dis;
  if (!loadToMemory) {
    db.executeUpdate(""String_Node_Str"");
    db.executeUpdate(""String_Node_Str"");
    PreparedStatement psTTerms=db.getConnection().prepareStatement(""String_Node_Str"");
    for (    String t : termList) {
      psTTerms.setBytes(1,t.getBytes(""String_Node_Str""));
      psTTerms.addBatch();
    }
    psTTerms.executeBatch();
    psTTerms.close();
    ResultSet res;
    esaNdx.clear();
    esaIdf.clear();
    res=db.executeSelect(""String_Node_Str"" + lang + ""String_Node_Str"");
    while (res.next()) {
      esaNdx.put(new String(res.getBytes(""String_Node_Str""),""String_Node_Str""),res.getBytes(""String_Node_Str""));
    }
    res.close();
    res=db.executeSelect(""String_Node_Str"" + lang + ""String_Node_Str"");
    while (res.next()) {
      esaIdf.put(new String(res.getBytes(""String_Node_Str""),""String_Node_Str""),res.getFloat(""String_Node_Str""));
    }
    res.close();
  }
  for (  String t : termList) {
    if (!idfMap.containsKey(t)) {
      Float idf=esaIdf.get(t);
      if (idf != null) {
        idfMap.put(t,idf);
      }
    }
    if (freqMap.containsKey(t)) {
      vint=freqMap.get(t);
      freqMap.put(t,vint + 1);
    }
 else {
      freqMap.put(t,1);
    }
  }
  if (numTerms == 0) {
    return null;
  }
  vsum=0;
  for (  String tk : idfMap.keySet()) {
    tf=1.0 + Math.log(freqMap.get(tk));
    vdouble=(idfMap.get(tk) * tf);
    tfidfMap.put(tk,vdouble);
    vsum+=vdouble * vdouble;
  }
  vsum=Math.sqrt(vsum);
  for (  String tk : idfMap.keySet()) {
    vdouble=tfidfMap.get(tk);
    tfidfMap.put(tk,vdouble / vsum);
  }
  score=0;
  for (  String tk : termList) {
    byte[] rss=esaNdx.get(tk);
    score=0;
    if (rss != null) {
      bais=new ByteArrayInputStream(rss);
      dis=new DataInputStream(bais);
      plen=dis.readInt();
      for (int k=0; k < plen; k++) {
        doc=dis.readInt();
        score=dis.readFloat();
        float scoreF=(float)(score * tfidfMap.get(tk));
        values.adjustOrPutValue(doc,scoreF,scoreF);
      }
      dis.close();
      bais.close();
    }
  }
  float[] valuesF=values.getValues();
  ids=values.keys();
  HeapSort.heapSort(valuesF,ids);
  IConceptVector newCv=new TroveConceptVector(ids.length);
  for (int i=ids.length - 1; i >= 0 && valuesF[i] > 0; i--) {
    newCv.set(ids[i],valuesF[i] / numTerms);
  }
  if (caching) {
    esaCache.put(query,newCv);
  }
  if (newCv.count() > 0)   return newCv;
 else   return null;
}",0.9912280701754386
101407,"/** 
 * Calculate semantic relatedness between documents
 * @param doc1
 * @param doc2
 * @return returns relatedness if successful, -1 otherwise
 */
public double getRelatedness(String doc1,String doc2){
  try {
    IConceptVector c1;
    if ((c1=esaCache.get(doc1)) == null) {
      c1=getConceptVector(doc1);
      esaCache.put(doc1,c1);
    }
    IConceptVector c2;
    if ((c2=esaCache.get(doc2)) == null) {
      c2=getConceptVector(doc2);
      esaCache.put(doc2,c2);
    }
    System.err.println(""String_Node_Str"" + c1.count());
    System.err.println(""String_Node_Str"" + c2.count());
    return getRelatedness(c1,c2);
  }
 catch (  IOException ex) {
    Logger.getLogger(ESAAnalyzer.class.getName()).log(Level.SEVERE,null,ex);
    return -1;
  }
catch (  SQLException ex) {
    Logger.getLogger(ESAAnalyzer.class.getName()).log(Level.SEVERE,null,ex);
    return -1;
  }
}","/** 
 * Calculate semantic relatedness between documents
 * @param doc1
 * @param doc2
 * @return returns relatedness if successful, -1 otherwise
 */
public double getRelatedness(String doc1,String doc2){
  try {
    IConceptVector c1;
    if ((c1=esaCache.get(doc1)) == null) {
      c1=getConceptVector(doc1);
      esaCache.put(doc1,c1);
    }
    IConceptVector c2;
    if ((c2=esaCache.get(doc2)) == null) {
      c2=getConceptVector(doc2);
      esaCache.put(doc2,c2);
    }
    if (c1 == null || c2 == null)     return Double.NaN;
    System.err.println(""String_Node_Str"" + c1.count());
    System.err.println(""String_Node_Str"" + c2.count());
    return getRelatedness(c1,c2);
  }
 catch (  IOException ex) {
    Logger.getLogger(ESAAnalyzer.class.getName()).log(Level.SEVERE,null,ex);
    return -1;
  }
catch (  SQLException ex) {
    Logger.getLogger(ESAAnalyzer.class.getName()).log(Level.SEVERE,null,ex);
    return -1;
  }
}",0.96862960924601
101408,"public static <T>T gmock(Class<T> classToMock){
  return Mockito.mock(classToMock,new GroovyAnswer(Mockito.RETURNS_DEFAULTS));
}","public static <T>T gmock(Class<T> classToMock){
  MockSettingsImpl mockSettings=(MockSettingsImpl)Mockito.withSettings().defaultAnswer(new GroovyAnswer(Mockito.RETURNS_DEFAULTS));
  T mock=Mockito.mock(classToMock,mockSettings);
  injectGroovyInterceptor((Factory)mock,mockSettings);
  return mock;
}",0.4532710280373832
101409,"@Override public Object intercept(Object proxy,Method method,Object[] args,MethodProxy methodProxy) throws Throwable {
  if (objectMethodsGuru.isGetMetaClass(method)) {
    return GroovySystem.getMetaClassRegistry().getMetaClass(method.getDeclaringClass());
  }
  return super.intercept(proxy,method,args,methodProxy);
}","@Override public Object intercept(Object proxy,Method method,Object[] args,MethodProxy methodProxy) throws Throwable {
  if (objectMethodsGuru.isGetMetaClass(method)) {
    return GroovySystem.getMetaClassRegistry().getMetaClass(typeToMock);
  }
  return super.intercept(proxy,method,args,methodProxy);
}",0.7564102564102564
101410,"public MethodInterceptorForGroovyFilter(InternalMockHandler handler,MockCreationSettings mockSettings){
  super(handler,mockSettings);
}","public MethodInterceptorForGroovyFilter(InternalMockHandler handler,MockCreationSettings mockSettings){
  super(handler,mockSettings);
  typeToMock=mockSettings.getTypeToMock();
}",0.8634920634920635
101411,"/** 
 * Construct a data entry.
 * @param name A name used for diagnostics.
 * @param data The data for this entry.
 * @param charset The character encoding for this entry.
 */
public DataEntry(String name,byte[] data,String charset){
  this.name=name;
  this.data=data.clone();
  this.charset=charset;
  this.keyEnd=SwordUtil.findByte(this.data,SEPARATOR);
}","/** 
 * Construct a data entry.
 * @param name A name used for diagnostics.
 * @param data The data for this entry.
 * @param charset The character encoding for this entry.
 */
public DataEntry(String name,byte[] data,String charset){
  this.name=name;
  this.data=data.clone();
  this.charset=charset;
  this.keyEnd=SwordUtil.findByte(this.data,SEP_NL);
}",0.9874125874125874
101412,"/** 
 * Get the key from this DataEntry.
 * @return the key
 */
public String getKey(){
  if (key == null) {
    if (keyEnd < 0) {
      log.error(""String_Node_Str"",name);
      return ""String_Node_Str"";
    }
    key=SwordUtil.decode(name,data,keyEnd,charset).trim();
    if (key.endsWith(""String_Node_Str"")) {
      key=key.substring(0,key.length() - 1);
    }
  }
  return key;
}","/** 
 * Get the key from this DataEntry.
 * @return the key
 */
public String getKey(){
  if (key == null) {
    if (data.length == 0) {
      key=""String_Node_Str"";
      return key;
    }
    if (keyEnd < 0) {
      key=""String_Node_Str"";
      return key;
    }
    int end=keyEnd;
    if (end > 0 && data[end - 1] == SEP_CR) {
      --end;
    }
    if (end > 0 && data[end - 1] == SEP_BSLASH) {
      --end;
    }
    if (end == 0) {
      key=""String_Node_Str"";
      return key;
    }
    key=SwordUtil.decode(name,data,end,charset);
  }
  return key;
}",0.4607218683651805
101413,"/** 
 * Get the position of the second \n in the data. This represents the end of the link and the start of the rest of the data.
 * @return the end of the link or -1 if not found.
 */
private int getLinkEnd(){
  if (linkEnd == 0) {
    linkEnd=SwordUtil.findByte(data,keyEnd + 1,SEPARATOR);
    if (linkEnd == -1) {
      linkEnd=data.length - 1;
    }
  }
  return linkEnd;
}","/** 
 * Get the position of the second \n in the data. This represents the end of the link and the start of the rest of the data.
 * @return the end of the link or -1 if not found.
 */
private int getLinkEnd(){
  if (linkEnd == 0) {
    linkEnd=SwordUtil.findByte(data,keyEnd + 1,SEP_NL);
    if (linkEnd == -1) {
      linkEnd=data.length - 1;
    }
  }
  return linkEnd;
}",0.9880159786950732
101414,"/** 
 * A helper class for the SwordInstaller to tell us that it has copied a new Book into our install directory
 * @param sbmd The SwordBookMetaData object for the new Book
 * @throws BookException
 */
public static void registerNewBook(SwordBookMetaData sbmd) throws BookException {
  BookDriver[] drivers=Books.installed().getDriversByClass(SwordBookDriver.class);
  for (int i=0; i < drivers.length; i++) {
    SwordBookDriver sdriver=(SwordBookDriver)drivers[i];
    Book book=sdriver.createBook(sbmd);
    Books.installed().addBook(book);
  }
}","/** 
 * A helper class for the SwordInstaller to tell us that it has copied a new Book into our install directory
 * @param sbmd The SwordBookMetaData object for the new Book
 * @throws BookException
 */
public static void registerNewBook(SwordBookMetaData sbmd) throws BookException {
  SwordBookMetaData bmd=null;
  URI bookDirURI=sbmd.getLibrary();
  File mods=new File(bookDirURI.getPath(),SwordConstants.DIR_CONF);
  String bookConf=sbmd.getBookConf();
  File configfile=new File(mods,bookConf);
  if (configfile.exists()) {
    try {
      bmd=new SwordBookMetaData(configfile,bookDirURI);
    }
 catch (    IOException e) {
      LOGGER.warn(""String_Node_Str"",e);
    }
  }
  if (bmd == null) {
    LOGGER.error(""String_Node_Str"");
    return;
  }
  if (!bmd.isSupported()) {
    LOGGER.error(""String_Node_Str"",bmd.getInitials(),bmd.getDriver(),bmd.getProperty(BookMetaData.KEY_VERSIFICATION),bmd.getBookType(),bmd.getBookCategory());
    return;
  }
  SwordBookDriver d=(SwordBookDriver)sbmd.getDriver();
  bmd.setDriver(d);
  Book book=d.createBook(bmd);
  Books.installed().addBook(book);
}",0.3803755299818292
101415,"private void load(Reader in,Filter<String> filter) throws IOException {
  BufferedReader bin=null;
  try {
    if (in instanceof BufferedReader) {
      bin=(BufferedReader)in;
    }
 else {
      bin=new BufferedReader(in,MAX_BUFF_SIZE);
    }
    while (true) {
      String line=advance(bin);
      if (line == null) {
        break;
      }
      if (isSectionLine(line)) {
        name=line.substring(1,line.length() - 1);
        continue;
      }
      int splitPos=getSplitPos(line);
      if (splitPos < 0) {
        warnings.append(""String_Node_Str"").append(line).append('\n');
        continue;
      }
      String key=line.substring(0,splitPos).trim();
      String value=more(bin,line.substring(splitPos + 1).trim());
      if (filter != null && filter.test(key)) {
        add(key,value);
      }
    }
    report=warnings.toString();
    warnings.setLength(0);
    warnings.trimToSize();
  }
  finally {
    if (bin != null) {
      bin.close();
      bin=null;
    }
  }
}","private void load(Reader in,Filter<String> filter) throws IOException {
  BufferedReader bin=null;
  try {
    if (in instanceof BufferedReader) {
      bin=(BufferedReader)in;
    }
 else {
      bin=new BufferedReader(in,MAX_BUFF_SIZE);
    }
    while (true) {
      String line=advance(bin);
      if (line == null) {
        break;
      }
      if (isSectionLine(line)) {
        name=line.substring(1,line.length() - 1);
        continue;
      }
      int splitPos=getSplitPos(line);
      if (splitPos < 0) {
        warnings.append(""String_Node_Str"").append(line).append('\n');
        continue;
      }
      String key=line.substring(0,splitPos).trim();
      String value=more(bin,line.substring(splitPos + 1).trim());
      if (filter == null || filter.test(key)) {
        add(key,value);
      }
    }
    report=warnings.toString();
    warnings.setLength(0);
    warnings.trimToSize();
  }
  finally {
    if (bin != null) {
      bin.close();
      bin=null;
    }
  }
}",0.9898887765419616
101416,"/** 
 * Load the conf from a buffer. This is used to load conf entries from the mods.d.tar.gz file.
 * @param buffer the buffer to load
 * @throws IOException
 */
private IniSection load(byte[] buffer,org.crosswire.common.util.Filter<String> keepers) throws IOException {
  IniSection config=new IniSection();
  config.load(buffer,ENCODING_UTF8,keepers);
  String encoding=config.get(KEY_ENCODING);
  if (!ENCODING_UTF8.equalsIgnoreCase(encoding)) {
    config.clear();
    config.load(buffer,ENCODING_LATIN1);
  }
  return config;
}","/** 
 * Load the conf from a buffer. This is used to load conf entries from the mods.d.tar.gz file.
 * @param buffer the buffer to load
 * @throws IOException
 */
private IniSection load(byte[] buffer,org.crosswire.common.util.Filter<String> keepers) throws IOException {
  IniSection config=new IniSection();
  config.load(buffer,ENCODING_UTF8,keepers);
  String encoding=config.get(KEY_ENCODING);
  if (!ENCODING_UTF8.equalsIgnoreCase(encoding)) {
    config.clear();
    config.load(buffer,ENCODING_LATIN1,keepers);
  }
  return config;
}",0.9925512104283054
101417,"/** 
 * This is default package access for forcing the use of the OpenFileStateManager to manage the creation. Not doing so may result in new instances of OpenFileState being created for no reason, and as a result, if they are released to the OpenFileStateManager by mistake this would result in leakage
 * @param bookMetaData the appropriate metadata for the book
 */
GenBookBackendState(SwordBookMetaData bookMetaData){
  URI path=null;
  try {
    path=SwordUtil.getExpandedDataPath(bookMetaData);
  }
 catch (  BookException e) {
    Reporter.informUser(this,e);
    return;
  }
  bdtFile=new File(path.getPath() + EXTENSION_BDT);
  if (!bdtFile.canRead()) {
    Reporter.informUser(this,new BookException(JSMsg.gettext(""String_Node_Str"",bdtFile.getAbsolutePath())));
    return;
  }
  try {
    bdtRaf=new RandomAccessFile(bdtFile,FileUtil.MODE_READ);
  }
 catch (  IOException ex) {
    IOUtil.close(bdtRaf);
    log.error(""String_Node_Str"",ex);
    bdtRaf=null;
  }
}","/** 
 * This is default package access for forcing the use of the OpenFileStateManager to manage the creation. Not doing so may result in new instances of OpenFileState being created for no reason, and as a result, if they are released to the OpenFileStateManager by mistake this would result in leakage
 * @param bookMetaData the appropriate metadata for the book
 */
GenBookBackendState(SwordBookMetaData bookMetaData){
  this.bookMetaData=bookMetaData;
  URI path=null;
  try {
    path=SwordUtil.getExpandedDataPath(bookMetaData);
  }
 catch (  BookException e) {
    Reporter.informUser(this,e);
    return;
  }
  bdtFile=new File(path.getPath() + EXTENSION_BDT);
  if (!bdtFile.canRead()) {
    Reporter.informUser(this,new BookException(JSMsg.gettext(""String_Node_Str"",bdtFile.getAbsolutePath())));
    return;
  }
  try {
    bdtRaf=new RandomAccessFile(bdtFile,FileUtil.MODE_READ);
  }
 catch (  IOException ex) {
    IOUtil.close(bdtRaf);
    log.error(""String_Node_Str"",ex);
    bdtRaf=null;
  }
}",0.98284561049445
101418,"public static RawBackendState getRawBackendState(SwordBookMetaData metadata) throws BookException {
  ensureNotShuttingDown();
  RawBackendState state=getInstance(metadata);
  if (state == null) {
    state=new RawBackendState(metadata);
  }
  return state;
}","public static RawBackendState getRawBackendState(SwordBookMetaData metadata) throws BookException {
  ensureNotShuttingDown();
  RawBackendState state=getInstance(metadata);
  if (state == null) {
    LOGGER.trace(""String_Node_Str"",metadata.getInitials());
    return new RawBackendState(metadata);
  }
  LOGGER.trace(""String_Node_Str"",metadata.getInitials());
  return state;
}",0.7943485086342229
101419,"public static ZVerseBackendState getZVerseBackendState(SwordBookMetaData metadata,BlockType blockType) throws BookException {
  ensureNotShuttingDown();
  ZVerseBackendState state=getInstance(metadata);
  if (state == null) {
    state=new ZVerseBackendState(metadata,blockType);
  }
  return state;
}","public static ZVerseBackendState getZVerseBackendState(SwordBookMetaData metadata,BlockType blockType) throws BookException {
  ensureNotShuttingDown();
  ZVerseBackendState state=getInstance(metadata);
  if (state == null) {
    LOGGER.trace(""String_Node_Str"",metadata.getInitials());
    return new ZVerseBackendState(metadata,blockType);
  }
  LOGGER.trace(""String_Node_Str"",metadata.getInitials());
  return state;
}",0.8183079056865464
101420,"public static void release(OpenFileState fileState){
  if (fileState == null) {
    return;
  }
  Queue<OpenFileState> queueForMeta=getQueueForMeta(fileState.getBookMetaData());
  boolean offered=queueForMeta.offer(fileState);
  if (!offered) {
    fileState.releaseResources();
  }
}","public static void release(OpenFileState fileState){
  if (fileState == null) {
    return;
  }
  SwordBookMetaData bmd=fileState.getBookMetaData();
  Queue<OpenFileState> queueForMeta=getQueueForMeta(bmd);
  LOGGER.trace(""String_Node_Str"",bmd.getInitials());
  boolean offered=queueForMeta.offer(fileState);
  if (!offered) {
    LOGGER.trace(""String_Node_Str"",bmd.getInitials());
    fileState.releaseResources();
  }
}",0.6723404255319149
101421,"public static ZLDBackendState getZLDBackendState(SwordBookMetaData metadata) throws BookException {
  ensureNotShuttingDown();
  ZLDBackendState state=getInstance(metadata);
  if (state == null) {
    state=new ZLDBackendState(metadata);
  }
  return state;
}","public static ZLDBackendState getZLDBackendState(SwordBookMetaData metadata) throws BookException {
  ensureNotShuttingDown();
  ZLDBackendState state=getInstance(metadata);
  if (state == null) {
    LOGGER.trace(""String_Node_Str"",metadata.getInitials());
    return new ZLDBackendState(metadata);
  }
  LOGGER.trace(""String_Node_Str"",metadata.getInitials());
  return state;
}",0.7943485086342229
101422,"public static GenBookBackendState getGenBookBackendState(SwordBookMetaData metadata) throws BookException {
  ensureNotShuttingDown();
  GenBookBackendState state=getInstance(metadata);
  if (state == null) {
    state=new GenBookBackendState(metadata);
  }
  return state;
}","public static GenBookBackendState getGenBookBackendState(SwordBookMetaData metadata) throws BookException {
  ensureNotShuttingDown();
  GenBookBackendState state=getInstance(metadata);
  if (state == null) {
    LOGGER.trace(""String_Node_Str"",metadata.getInitials());
    return new GenBookBackendState(metadata);
  }
  LOGGER.trace(""String_Node_Str"",metadata.getInitials());
  return state;
}",0.804185351270553
101423,"@SuppressWarnings(""String_Node_Str"") private static <T extends OpenFileState>T getInstance(SwordBookMetaData metadata){
  Queue<OpenFileState> availableStates=getQueueForMeta(metadata);
  return (T)availableStates.poll();
}","@SuppressWarnings(""String_Node_Str"") private static <T extends OpenFileState>T getInstance(SwordBookMetaData metadata){
  Queue<OpenFileState> availableStates=getQueueForMeta(metadata);
  T queue=(T)availableStates.poll();
  return queue;
}",0.9330453563714904
101424,"public static RawFileBackendState getRawFileBackendState(SwordBookMetaData metadata) throws BookException {
  ensureNotShuttingDown();
  RawFileBackendState state=getInstance(metadata);
  if (state == null) {
    state=new RawFileBackendState(metadata);
  }
  return state;
}","public static RawFileBackendState getRawFileBackendState(SwordBookMetaData metadata) throws BookException {
  ensureNotShuttingDown();
  RawFileBackendState state=getInstance(metadata);
  if (state == null) {
    LOGGER.trace(""String_Node_Str"",metadata.getInitials());
    return new RawFileBackendState(metadata);
  }
  LOGGER.trace(""String_Node_Str"",metadata.getInitials());
  return state;
}",0.804185351270553
101425,"public static RawLDBackendState getRawLDBackendState(SwordBookMetaData metadata) throws BookException {
  ensureNotShuttingDown();
  RawLDBackendState state=getInstance(metadata);
  if (state == null) {
    state=new RawLDBackendState(metadata);
  }
  return state;
}","public static RawLDBackendState getRawLDBackendState(SwordBookMetaData metadata) throws BookException {
  ensureNotShuttingDown();
  RawLDBackendState state=getInstance(metadata);
  if (state == null) {
    LOGGER.trace(""String_Node_Str"",metadata.getInitials());
    return new RawLDBackendState(metadata);
  }
  LOGGER.trace(""String_Node_Str"",metadata.getInitials());
  return state;
}",0.7993874425727412
101426,"@Override public final void activate(Lock lock){
  super.activate(lock);
  set=getBackend().readIndex();
  map=new HashMap<String,Key>();
  for (  Key key : set) {
    map.put(key.getName(),key);
  }
  global=new ReadOnlyKeyList(set,false);
  active=true;
}","@Override public final void activate(Lock lock){
  super.activate(lock);
  set=getBackend().readIndex();
  map=new HashMap<String,Key>();
  for (  Key key : set) {
    map.put(key.getOsisRef(),key);
  }
  global=new ReadOnlyKeyList(set,false);
  active=true;
}",0.9787234042553192
101427,"@Override public String getOsisID(){
  StringBuilder b=new StringBuilder(100);
  b.append(osisify(getName()));
  for (Key parentKey=this.getParent(); parentKey != null && parentKey.getName().length() > 0; parentKey=parentKey.getParent()) {
    b.insert(0,""String_Node_Str"");
    b.insert(0,osisify(parentKey.getName()));
  }
  return b.toString();
}","@Override public String getOsisID(){
  StringBuilder b=new StringBuilder(100);
  b.append(getName());
  for (Key parentKey=this.getParent(); parentKey != null && parentKey.getName().length() > 0; parentKey=parentKey.getParent()) {
    b.insert(0,""String_Node_Str"");
    b.insert(0,parentKey.getName());
  }
  return b.toString();
}",0.8323529411764706
101428,"public final void close(){
  try {
    if (searcher != null) {
      searcher.close();
    }
  }
 catch (  IOException ex) {
    Reporter.informUser(this,ex);
  }
  try {
    if (directory == null) {
      directory.close();
    }
  }
 catch (  IOException ex) {
    Reporter.informUser(this,ex);
  }
  searcher=null;
  directory=null;
}","public final void close(){
  IOUtil.close(searcher);
  searcher=null;
  IOUtil.close(directory);
  directory=null;
}",0.3487858719646799
101429,"/** 
 * Reads a passage as OSIS
 * @param key the given key
 * @param processor a processor for which to do things with
 * @param content a list of content to be appended to (i.e. the OSIS data)
 * @param openFileState the open file state, from which we read things
 * @throws BookException a book exception if we failed to read the book
 */
private Verse readPassageOsis(Key key,RawTextToXmlProcessor processor,final List<Content> content,T openFileState) throws BookException {
  Verse currentVerse=null;
  try {
    final Passage ref=KeyUtil.getPassage(key);
    final Iterator<Key> rit=ref.rangeIterator(RestrictionType.CHAPTER);
    while (rit.hasNext()) {
      VerseRange range=(VerseRange)rit.next();
      processor.preRange(range,content);
      for (      Key verseInRange : range) {
        currentVerse=KeyUtil.getVerse(verseInRange);
        String rawText=readRawContent(openFileState,currentVerse);
        processor.postVerse(verseInRange,content,rawText);
      }
    }
  }
 catch (  IOException e) {
    throwFailedKeyException(key,currentVerse,e);
  }
  return currentVerse;
}","/** 
 * Reads a passage as OSIS
 * @param key           the given key
 * @param processor     a processor for which to do things with
 * @param content       a list of content to be appended to (i.e. the OSIS data)
 * @param openFileState the open file state, from which we read things
 * @throws BookException a book exception if we failed to read the book
 */
private Verse readPassageOsis(Key key,RawTextToXmlProcessor processor,final List<Content> content,T openFileState) throws BookException {
  Verse currentVerse=null;
  final Passage ref=KeyUtil.getPassage(key);
  final Iterator<Key> rit=ref.rangeIterator(RestrictionType.CHAPTER);
  while (rit.hasNext()) {
    VerseRange range=(VerseRange)rit.next();
    processor.preRange(range,content);
    for (    Key verseInRange : range) {
      currentVerse=KeyUtil.getVerse(verseInRange);
      try {
        String rawText=readRawContent(openFileState,currentVerse);
        processor.postVerse(verseInRange,content,rawText);
      }
 catch (      IOException e) {
        LOGGER.debug(e.getMessage(),e);
      }
    }
  }
  return currentVerse;
}",0.9076853115052296
101430,"/** 
 * Get the text allotted for the given entry
 * @param key The key to fetch
 * @param processor processor that executes before/after the content is read from disk or another kind of backend
 * @return String The data for the verse in question
 * @throws BookException If the data can not be read.
 */
public List<Content> readToOsis(Key key,RawTextToXmlProcessor processor) throws BookException {
  final List<Content> content=new ArrayList<Content>();
  T openFileState=null;
  try {
    openFileState=initState();
switch (this.bmd.getKeyType()) {
case LIST:
case TREE:
      readNormalOsis(key,processor,content,openFileState);
    break;
case VERSE:
  readPassageOsis(key,processor,content,openFileState);
break;
default :
throw new BookException(""String_Node_Str"");
}
return content;
}
  finally {
IOUtil.close(openFileState);
}
}","/** 
 * Get the text allotted for the given entry
 * @param key       The key to fetch
 * @param processor processor that executes before/after the content is read fromdisk or another kind of backend
 * @return String The data for the verse in question
 * @throws BookException If the data can not be read.
 */
public List<Content> readToOsis(Key key,RawTextToXmlProcessor processor) throws BookException {
  final List<Content> content=new ArrayList<Content>();
  T openFileState=null;
  try {
    openFileState=initState();
switch (this.bmd.getKeyType()) {
case LIST:
case TREE:
      readNormalOsis(key,processor,content,openFileState);
    break;
case VERSE:
  readPassageOsis(key,processor,content,openFileState);
break;
default :
throw new BookException(""String_Node_Str"");
}
return content;
}
  finally {
IOUtil.close(openFileState);
}
}",0.995840760546643
101431,"/** 
 * Reads a passage as OSIS
 * @param key the given key
 * @param processor a processor for which to do things with
 * @param content a list of content to be appended to (i.e. the OSIS data)
 * @param openFileState the open file state, from which we read things
 * @throws BookException a book exception if we failed to read the book
 */
private Verse readPassageOsis(Key key,RawTextToXmlProcessor processor,final List<Content> content,T openFileState) throws BookException {
  Verse currentVerse=null;
  try {
    final Passage ref=KeyUtil.getPassage(key);
    final Iterator<Key> rit=ref.rangeIterator(RestrictionType.CHAPTER);
    while (rit.hasNext()) {
      VerseRange range=(VerseRange)rit.next();
      processor.preRange(range,content);
      for (      Key verseInRange : range) {
        currentVerse=KeyUtil.getVerse(verseInRange);
        String rawText=readRawContent(openFileState,currentVerse);
        processor.postVerse(verseInRange,content,rawText);
      }
    }
  }
 catch (  IOException e) {
    throwFailedKeyException(key,currentVerse,e);
  }
  return currentVerse;
}","/** 
 * Reads a passage as OSIS
 * @param key           the given key
 * @param processor     a processor for which to do things with
 * @param content       a list of content to be appended to (i.e. the OSIS data)
 * @param openFileState the open file state, from which we read things
 * @throws BookException a book exception if we failed to read the book
 */
private Verse readPassageOsis(Key key,RawTextToXmlProcessor processor,final List<Content> content,T openFileState) throws BookException {
  Verse currentVerse=null;
  final Passage ref=KeyUtil.getPassage(key);
  final Iterator<Key> rit=ref.rangeIterator(RestrictionType.CHAPTER);
  while (rit.hasNext()) {
    VerseRange range=(VerseRange)rit.next();
    processor.preRange(range,content);
    for (    Key verseInRange : range) {
      currentVerse=KeyUtil.getVerse(verseInRange);
      try {
        String rawText=readRawContent(openFileState,currentVerse);
        processor.postVerse(verseInRange,content,rawText);
      }
 catch (      IOException e) {
        LOGGER.debug(e.getMessage(),e);
      }
    }
  }
  return currentVerse;
}",0.9076853115052296
101432,"/** 
 * Get the text allotted for the given entry
 * @param key The key to fetch
 * @param processor processor that executes before/after the content is read from disk or another kind of backend
 * @return String The data for the verse in question
 * @throws BookException If the data can not be read.
 */
public List<Content> readToOsis(Key key,RawTextToXmlProcessor processor) throws BookException {
  final List<Content> content=new ArrayList<Content>();
  T openFileState=null;
  try {
    openFileState=initState();
switch (this.bmd.getKeyType()) {
case LIST:
case TREE:
      readNormalOsis(key,processor,content,openFileState);
    break;
case VERSE:
  readPassageOsis(key,processor,content,openFileState);
break;
default :
throw new BookException(""String_Node_Str"");
}
return content;
}
  finally {
IOUtil.close(openFileState);
}
}","/** 
 * Get the text allotted for the given entry
 * @param key       The key to fetch
 * @param processor processor that executes before/after the content is read fromdisk or another kind of backend
 * @return String The data for the verse in question
 * @throws BookException If the data can not be read.
 */
public List<Content> readToOsis(Key key,RawTextToXmlProcessor processor) throws BookException {
  final List<Content> content=new ArrayList<Content>();
  T openFileState=null;
  try {
    openFileState=initState();
switch (this.bmd.getKeyType()) {
case LIST:
case TREE:
      readNormalOsis(key,processor,content,openFileState);
    break;
case VERSE:
  readPassageOsis(key,processor,content,openFileState);
break;
default :
throw new BookException(""String_Node_Str"");
}
return content;
}
  finally {
IOUtil.close(openFileState);
}
}",0.995840760546643
101433,"@Override public boolean contains(Key key){
  ZVerseBackendState rafBook=null;
  try {
    rafBook=initState();
    String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
    Versification v11n=Versifications.instance().getVersification(v11nName);
    Verse verse=KeyUtil.getVerse(key);
    int index=verse.getOrdinal();
    Testament testament=v11n.getTestament(index);
    index=v11n.getTestamentOrdinal(index);
    RandomAccessFile compRaf=testament == Testament.NEW ? rafBook.getNtCompRaf() : rafBook.getOtCompRaf();
    if (compRaf == null) {
      return false;
    }
    byte[] temp=SwordUtil.readRAF(compRaf,1L * index * COMP_ENTRY_SIZE,COMP_ENTRY_SIZE);
    if (temp == null || temp.length == 0) {
      return false;
    }
    int verseSize=SwordUtil.decodeLittleEndian16(temp,8);
    return verseSize > 0;
  }
 catch (  IOException e) {
    return false;
  }
catch (  BookException e) {
    log.error(""String_Node_Str"",e);
    return false;
  }
 finally {
    IOUtil.close(rafBook);
  }
}","@Override public boolean contains(Key key){
  ZVerseBackendState rafBook=null;
  try {
    rafBook=initState();
    String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
    Versification v11n=Versifications.instance().getVersification(v11nName);
    Verse verse=KeyUtil.getVerse(key);
    int index=verse.getOrdinal();
    Testament testament=v11n.getTestament(index);
    index=v11n.getTestamentOrdinal(index);
    RandomAccessFile idxRaf=testament == Testament.NEW ? rafBook.getNtIdxRaf() : rafBook.getOtIdxRaf();
    if (idxRaf == null) {
      return false;
    }
    byte[] temp=SwordUtil.readRAF(idxRaf,1L * index * IDX_ENTRY_SIZE,IDX_ENTRY_SIZE);
    if (temp == null || temp.length == 0) {
      return false;
    }
    int verseSize=SwordUtil.decodeLittleEndian16(temp,8);
    return verseSize > 0;
  }
 catch (  IOException e) {
    return false;
  }
catch (  BookException e) {
    log.error(""String_Node_Str"",e);
    return false;
  }
 finally {
    IOUtil.close(rafBook);
  }
}",0.976202039825158
101434,"@Override public Key getGlobalKeyList() throws BookException {
  ZVerseBackendState rafBook=null;
  try {
    rafBook=initState();
    String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
    Versification v11n=Versifications.instance().getVersification(v11nName);
    Testament[] testaments=new Testament[]{Testament.OLD,Testament.NEW};
    BitwisePassage passage=new RocketPassage(v11n);
    passage.raiseEventSuppresion();
    passage.raiseNormalizeProtection();
    for (    Testament currentTestament : testaments) {
      RandomAccessFile compRaf=currentTestament == Testament.NEW ? rafBook.getNtCompRaf() : rafBook.getOtCompRaf();
      if (compRaf == null) {
        continue;
      }
      int maxIndex=v11n.getCount(currentTestament) - 1;
      byte[] temp=SwordUtil.readRAF(compRaf,0,COMP_ENTRY_SIZE * maxIndex);
      for (int ii=0; ii < temp.length; ii+=COMP_ENTRY_SIZE) {
        int verseSize=SwordUtil.decodeLittleEndian16(temp,ii + 8);
        if (verseSize > 0) {
          int ordinal=ii / COMP_ENTRY_SIZE;
          passage.addVersifiedOrdinal(ordinal);
        }
      }
    }
    passage.lowerNormalizeProtection();
    passage.lowerEventSuppressionAndTest();
    return passage;
  }
 catch (  IOException e) {
    throw new BookException(JSMsg.gettext(""String_Node_Str""));
  }
 finally {
    IOUtil.close(rafBook);
  }
}","@Override public Key getGlobalKeyList() throws BookException {
  ZVerseBackendState rafBook=null;
  try {
    rafBook=initState();
    String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
    Versification v11n=Versifications.instance().getVersification(v11nName);
    Testament[] testaments=new Testament[]{Testament.OLD,Testament.NEW};
    BitwisePassage passage=new RocketPassage(v11n);
    passage.raiseEventSuppresion();
    passage.raiseNormalizeProtection();
    for (    Testament currentTestament : testaments) {
      RandomAccessFile idxRaf=currentTestament == Testament.NEW ? rafBook.getNtIdxRaf() : rafBook.getOtIdxRaf();
      if (idxRaf == null) {
        continue;
      }
      int maxIndex=v11n.getCount(currentTestament) - 1;
      byte[] temp=SwordUtil.readRAF(idxRaf,0,IDX_ENTRY_SIZE * maxIndex);
      for (int ii=0; ii < temp.length; ii+=IDX_ENTRY_SIZE) {
        if (temp[ii + 8] != 0 || temp[ii + 9] != 0) {
          int ordinal=ii / IDX_ENTRY_SIZE;
          passage.addVersifiedOrdinal(v11n.getOrdinal(currentTestament,ordinal));
        }
      }
    }
    passage.lowerNormalizeProtection();
    passage.lowerEventSuppressionAndTest();
    return passage;
  }
 catch (  IOException e) {
    throw new BookException(JSMsg.gettext(""String_Node_Str""));
  }
 finally {
    IOUtil.close(rafBook);
  }
}",0.9226841721371262
101435,"/** 
 * Experimental code.
 * @param raf
 */
public void dumpIdxRaf(RandomAccessFile raf){
  long end=-1;
  try {
    end=raf.length();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int blockNum=0;
  StringBuilder buf=new StringBuilder();
  System.out.println(""String_Node_Str"");
  for (long offset=0; offset < end; offset+=IDX_ENTRY_SIZE) {
    byte[] temp=null;
    try {
      temp=SwordUtil.readRAF(raf,offset,IDX_ENTRY_SIZE);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    int blockStart=-1;
    int blockSize=-1;
    int uncompressedSize=-1;
    if (temp != null && temp.length > 0) {
      blockStart=SwordUtil.decodeLittleEndian32(temp,0);
      blockSize=SwordUtil.decodeLittleEndian32(temp,4);
      uncompressedSize=SwordUtil.decodeLittleEndian32(temp,8);
    }
    buf.setLength(0);
    buf.append(blockNum);
    buf.append('\t');
    buf.append(blockStart);
    buf.append('\t');
    buf.append(blockSize);
    buf.append('\t');
    buf.append(uncompressedSize);
    System.out.println(buf.toString());
  }
}","/** 
 * Experimental code.
 * @param v11n
 * @param ordinalStart
 * @param raf
 */
public void dumpIdxRaf(Versification v11n,int ordinalStart,RandomAccessFile raf){
  long end=-1;
  try {
    end=raf.length();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int i=ordinalStart;
  StringBuilder buf=new StringBuilder();
  System.out.println(""String_Node_Str"");
  for (long offset=0; offset < end; offset+=IDX_ENTRY_SIZE) {
    byte[] temp=null;
    try {
      temp=SwordUtil.readRAF(raf,offset,IDX_ENTRY_SIZE);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    long blockNum=-1;
    int verseStart=-1;
    int verseSize=-1;
    if (temp != null && temp.length > 0) {
      blockNum=SwordUtil.decodeLittleEndian32(temp,0);
      verseStart=SwordUtil.decodeLittleEndian32(temp,4);
      verseSize=SwordUtil.decodeLittleEndian16(temp,8);
    }
    buf.setLength(0);
    buf.append(v11n.decodeOrdinal(i++).getOsisID());
    buf.append('\t');
    buf.append(blockNum);
    buf.append('\t');
    buf.append(verseStart);
    buf.append('\t');
    buf.append(verseSize);
    System.out.println(buf.toString());
  }
}",0.8422484134179511
101436,"/** 
 * Experimental code.
 * @param v11n
 * @param ordinalStart
 * @param raf
 */
public void dumpCompRaf(Versification v11n,int ordinalStart,RandomAccessFile raf){
  long end=-1;
  try {
    end=raf.length();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int i=ordinalStart;
  StringBuilder buf=new StringBuilder();
  System.out.println(""String_Node_Str"");
  for (long offset=0; offset < end; offset+=COMP_ENTRY_SIZE) {
    byte[] temp=null;
    try {
      temp=SwordUtil.readRAF(raf,offset,COMP_ENTRY_SIZE);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    long blockNum=-1;
    int verseStart=-1;
    int verseSize=-1;
    if (temp != null && temp.length > 0) {
      blockNum=SwordUtil.decodeLittleEndian32(temp,0);
      verseStart=SwordUtil.decodeLittleEndian32(temp,4);
      verseSize=SwordUtil.decodeLittleEndian16(temp,8);
    }
    buf.setLength(0);
    buf.append(v11n.decodeOrdinal(i++).getOsisID());
    buf.append('\t');
    buf.append(blockNum);
    buf.append('\t');
    buf.append(verseStart);
    buf.append('\t');
    buf.append(verseSize);
    System.out.println(buf.toString());
  }
}","/** 
 * Experimental code.
 * @param raf
 */
public void dumpCompRaf(RandomAccessFile raf){
  long end=-1;
  try {
    end=raf.length();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int blockNum=0;
  StringBuilder buf=new StringBuilder();
  System.out.println(""String_Node_Str"");
  for (long offset=0; offset < end; offset+=COMP_ENTRY_SIZE) {
    byte[] temp=null;
    try {
      temp=SwordUtil.readRAF(raf,offset,COMP_ENTRY_SIZE);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    int blockStart=-1;
    int blockSize=-1;
    int uncompressedSize=-1;
    if (temp != null && temp.length > 0) {
      blockStart=SwordUtil.decodeLittleEndian32(temp,0);
      blockSize=SwordUtil.decodeLittleEndian32(temp,4);
      uncompressedSize=SwordUtil.decodeLittleEndian32(temp,8);
    }
    buf.setLength(0);
    buf.append(blockNum);
    buf.append('\t');
    buf.append(blockStart);
    buf.append('\t');
    buf.append(blockSize);
    buf.append('\t');
    buf.append(uncompressedSize);
    System.out.println(buf.toString());
  }
}",0.6320072332730561
101437,"public String readRawContent(ZVerseBackendState rafBook,Key key) throws IOException {
  SwordBookMetaData bookMetaData=getBookMetaData();
  final String charset=bookMetaData.getBookCharset();
  final String compressType=(String)bookMetaData.getProperty(ConfigEntryType.COMPRESS_TYPE);
  final String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  final Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse verse=KeyUtil.getVerse(key);
  int index=verse.getOrdinal();
  final Testament testament=v11n.getTestament(index);
  index=v11n.getTestamentOrdinal(index);
  final RandomAccessFile compRaf;
  final RandomAccessFile idxRaf;
  final RandomAccessFile textRaf;
  if (testament == Testament.OLD) {
    compRaf=rafBook.getOtCompRaf();
    idxRaf=rafBook.getOtIdxRaf();
    textRaf=rafBook.getOtTextRaf();
  }
 else {
    compRaf=rafBook.getNtCompRaf();
    idxRaf=rafBook.getNtIdxRaf();
    textRaf=rafBook.getNtTextRaf();
  }
  if (compRaf == null) {
    return ""String_Node_Str"";
  }
  byte[] temp=SwordUtil.readRAF(compRaf,1L * index * COMP_ENTRY_SIZE,COMP_ENTRY_SIZE);
  if (temp == null || temp.length == 0) {
    return ""String_Node_Str"";
  }
  final long blockNum=SwordUtil.decodeLittleEndian32(temp,0);
  final int verseStart=SwordUtil.decodeLittleEndian32(temp,4);
  final int verseSize=SwordUtil.decodeLittleEndian16(temp,8);
  byte[] uncompressed=null;
  if (blockNum == rafBook.getLastBlockNum() && testament == rafBook.getLastTestament()) {
    uncompressed=rafBook.getLastUncompressed();
  }
 else {
    temp=SwordUtil.readRAF(idxRaf,blockNum * IDX_ENTRY_SIZE,IDX_ENTRY_SIZE);
    if (temp == null || temp.length == 0) {
      return ""String_Node_Str"";
    }
    final int blockStart=SwordUtil.decodeLittleEndian32(temp,0);
    final int blockSize=SwordUtil.decodeLittleEndian32(temp,4);
    final int uncompressedSize=SwordUtil.decodeLittleEndian32(temp,8);
    final byte[] data=SwordUtil.readRAF(textRaf,blockStart,blockSize);
    decipher(data);
    uncompressed=CompressorType.fromString(compressType).getCompressor(data).uncompress(uncompressedSize).toByteArray();
    rafBook.setLastBlockNum(blockNum);
    rafBook.setLastTestament(testament);
    rafBook.setLastUncompressed(uncompressed);
  }
  final byte[] chopped=new byte[verseSize];
  System.arraycopy(uncompressed,verseStart,chopped,0,verseSize);
  return SwordUtil.decode(key.getName(),chopped,charset);
}","public String readRawContent(ZVerseBackendState rafBook,Key key) throws IOException {
  SwordBookMetaData bookMetaData=getBookMetaData();
  final String charset=bookMetaData.getBookCharset();
  final String compressType=(String)bookMetaData.getProperty(ConfigEntryType.COMPRESS_TYPE);
  final String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  final Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse verse=KeyUtil.getVerse(key);
  int index=verse.getOrdinal();
  final Testament testament=v11n.getTestament(index);
  index=v11n.getTestamentOrdinal(index);
  final RandomAccessFile idxRaf;
  final RandomAccessFile compRaf;
  final RandomAccessFile textRaf;
  if (testament == Testament.OLD) {
    idxRaf=rafBook.getOtIdxRaf();
    compRaf=rafBook.getOtCompRaf();
    textRaf=rafBook.getOtTextRaf();
  }
 else {
    idxRaf=rafBook.getNtIdxRaf();
    compRaf=rafBook.getNtCompRaf();
    textRaf=rafBook.getNtTextRaf();
  }
  if (idxRaf == null) {
    return ""String_Node_Str"";
  }
  byte[] temp=SwordUtil.readRAF(idxRaf,1L * index * IDX_ENTRY_SIZE,IDX_ENTRY_SIZE);
  if (temp == null || temp.length == 0) {
    return ""String_Node_Str"";
  }
  final long blockNum=SwordUtil.decodeLittleEndian32(temp,0);
  final int verseStart=SwordUtil.decodeLittleEndian32(temp,4);
  final int verseSize=SwordUtil.decodeLittleEndian16(temp,8);
  byte[] uncompressed=null;
  if (blockNum == rafBook.getLastBlockNum() && testament == rafBook.getLastTestament()) {
    uncompressed=rafBook.getLastUncompressed();
  }
 else {
    temp=SwordUtil.readRAF(compRaf,blockNum * COMP_ENTRY_SIZE,COMP_ENTRY_SIZE);
    if (temp == null || temp.length == 0) {
      return ""String_Node_Str"";
    }
    final int blockStart=SwordUtil.decodeLittleEndian32(temp,0);
    final int blockSize=SwordUtil.decodeLittleEndian32(temp,4);
    final int uncompressedSize=SwordUtil.decodeLittleEndian32(temp,8);
    final byte[] data=SwordUtil.readRAF(textRaf,blockStart,blockSize);
    decipher(data);
    uncompressed=CompressorType.fromString(compressType).getCompressor(data).uncompress(uncompressedSize).toByteArray();
    rafBook.setLastBlockNum(blockNum);
    rafBook.setLastTestament(testament);
    rafBook.setLastUncompressed(uncompressed);
  }
  final byte[] chopped=new byte[verseSize];
  System.arraycopy(uncompressed,verseStart,chopped,0,verseSize);
  return SwordUtil.decode(key.getName(),chopped,charset);
}",0.7306514192362671
101438,"/** 
 * Where does this verse come in the Bible. The value that this returns should be treated as opaque, useful for a bit set. The introductions to the Book, OT/NT Testaments, Bible books and chapters are included here. <ul> <li>0 - INTRO_BIBLE 0:0 - The Book introduction</li> <li>1 - INTRO_OT 0:0 - The OT Testament introduction</li> <li>2 - Gen 0:0 - The introduction to the book of Genesis</li> <li>3 - Gen 1:0 - The introduction to Genesis chapter 1</li> <li>4 - Gen 1:1</li> <li>...</li> <li>35 - Gen 1:31</li> <li>36 - Gen 2:0 - The introduction to Genesis chapter 2</li> <li>37 - Gen 2:1</li> <li>...</li> <li>n - last verse in the OT</li> <li>n + 1 - INTRO_NT, 0, 0 - The New Testament introduction</li> <li>n + 2 - Matt 0:0 - The introduction to Matt</li> <li>n + 3 - Matt 1:0 - The introduction to Matt 1</li> <li>n + 4 - Matt 1:1</li> <li>...</li> </ul> If the verse is not in this versification, return 0.
 * @param verse The verse to convert
 * @return The ordinal number of verses
 */
public int getOrdinal(Verse verse){
  try {
    return chapterStarts[bookList.getOrdinal(verse.getBook())][verse.getChapter()] + verse.getVerse();
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    return 0;
  }
}","/** 
 * Determine the ordinal value for this versification given the ordinal value in a testament. If the ordinal is out of bounds it is constrained to be within the boundaries of the testament. This unwinds getTestamentOrdinal.
 * @param testament the testament in which the ordinal value pertains
 * @param testamentOrdinal the ordinal value within the testament
 * @return the ordinal value for the versification as a whole
 */
public int getOrdinal(Testament testament,int testamentOrdinal){
  int ordinal=testamentOrdinal >= 0 ? testamentOrdinal : 0;
  if (Testament.NEW == testament) {
    ordinal=otMaxOrdinal + testamentOrdinal;
    return ordinal <= ntMaxOrdinal ? ordinal : ntMaxOrdinal;
  }
  return ordinal <= otMaxOrdinal ? ordinal : otMaxOrdinal;
}",0.0798383021728145
101439,"/** 
 * Create a stack trace of the code at this point
 * @param ex The Throwable containing the Stack Trace
 * @param discard The number of uppermost stack frames to ignore
 */
private void init(Throwable ex,int discard){
  StringWriter sout=new StringWriter();
  ex.printStackTrace(new PrintWriter(sout));
  String msg=new String(sout.getBuffer());
  String[] calls=StringUtil.split(msg,""String_Node_Str"");
  int total=0;
  for (int i=0; i < calls.length - discard; i++) {
    String call=calls[i + discard];
    if (!(call.startsWith(""String_Node_Str"") || call.indexOf(""String_Node_Str"") >= 0)) {
      total++;
    }
  }
  classNames=new String[total];
  methodNames=new String[total];
  fileNames=new String[total];
  lineNumbers=new int[total];
  int j=0;
  for (int i=0; i < calls.length - discard; i++) {
    String call=calls[i + discard];
    try {
      if (!(call.startsWith(""String_Node_Str"") || call.indexOf(""String_Node_Str"") >= 0)) {
        int spcIndex=call.indexOf(' ');
        int lhsIndex=call.indexOf('(');
        int clnIndex=call.indexOf(':');
        int rhsIndex=call.indexOf(')');
        String fullFn=call.substring(spcIndex + 1,lhsIndex).trim();
        int lastDot=fullFn.lastIndexOf('.');
        classNames[j]=fullFn.substring(0,lastDot).replace('/','.');
        methodNames[j]=fullFn.substring(lastDot + 1);
        if (clnIndex != -1 && lhsIndex < clnIndex) {
          fileNames[j]=call.substring(lhsIndex + 1,clnIndex);
          lineNumbers[j]=Integer.parseInt(call.substring(clnIndex + 1,rhsIndex));
        }
 else {
          fileNames[j]=call.substring(lhsIndex + 1,rhsIndex);
          lineNumbers[j]=0;
        }
        j++;
      }
    }
 catch (    NumberFormatException ex2) {
      classNames[j]=""String_Node_Str"";
      methodNames[j]=call;
      fileNames[j]=""String_Node_Str"";
      lineNumbers[j]=0;
      j++;
    }
  }
}","/** 
 * Create a stack trace of the code at this point
 * @param ex The Throwable containing the Stack Trace
 * @param discard The number of uppermost stack frames to ignore
 */
private void init(Throwable ex,int discard){
  StringWriter sout=new StringWriter();
  ex.printStackTrace(new PrintWriter(sout));
  String msg=new String(sout.getBuffer());
  String[] calls=StringUtil.split(msg,""String_Node_Str"");
  int total=0;
  for (int i=0; i < calls.length - discard; i++) {
    String call=calls[i + discard];
    if (!(call.startsWith(""String_Node_Str"") || call.indexOf(""String_Node_Str"") >= 0)) {
      total++;
    }
  }
  classNames=new String[total];
  methodNames=new String[total];
  fileNames=new String[total];
  lineNumbers=new int[total];
  int j=0;
  for (int i=0; i < calls.length - discard; i++) {
    String call=calls[i + discard];
    boolean oops=false;
    try {
      if (!(call.startsWith(""String_Node_Str"") || call.indexOf(""String_Node_Str"") >= 0)) {
        int spcIndex=call.indexOf(' ');
        int lhsIndex=call.indexOf('(');
        int clnIndex=call.indexOf(':');
        int rhsIndex=call.indexOf(')');
        String fullFn=call.substring(spcIndex + 1,lhsIndex).trim();
        int lastDot=fullFn.lastIndexOf('.');
        classNames[j]=fullFn.substring(0,lastDot).replace('/','.');
        methodNames[j]=fullFn.substring(lastDot + 1);
        if (clnIndex != -1 && lhsIndex < clnIndex) {
          fileNames[j]=call.substring(lhsIndex + 1,clnIndex);
          lineNumbers[j]=Integer.parseInt(call.substring(clnIndex + 1,rhsIndex));
        }
 else {
          fileNames[j]=call.substring(lhsIndex + 1,rhsIndex);
          lineNumbers[j]=0;
        }
        j++;
      }
    }
 catch (    NumberFormatException ex2) {
      oops=true;
    }
catch (    StringIndexOutOfBoundsException ex2) {
      oops=true;
    }
    if (oops) {
      classNames[j]=""String_Node_Str"";
      methodNames[j]=call;
      fileNames[j]=""String_Node_Str"";
      lineNumbers[j]=0;
      j++;
    }
  }
}",0.9650565262076052
101440,"@Override public Element processTag(Book book,Key key,Element ele,Attributes attrs){
  Element reference=null;
  String refstr=attrs.getValue(""String_Node_Str"");
  if (refstr != null) {
    Passage ref=null;
    try {
      ref=(Passage)book.getKey(refstr);
    }
 catch (    NoSuchKeyException ex) {
      DataPolice.report(book,key,""String_Node_Str"" + refstr + ""String_Node_Str""+ ex.getMessage());
    }
    String osisname=ref != null ? ref.getOsisRef() : refstr;
    reference=OSISUtil.factory().createReference();
    reference.setAttribute(OSISUtil.OSIS_ATTR_REF,osisname);
  }
 else {
    reference=OSISUtil.factory().createReference();
  }
  if (ele != null) {
    ele.addContent(reference);
  }
  return reference;
}","@Override public Element processTag(Book book,Key key,Element ele,Attributes attrs){
  Element reference=null;
  String refstr=attrs.getValue(""String_Node_Str"");
  if (refstr != null) {
    Passage ref=null;
    try {
      ref=(Passage)PassageKeyFactory.instance().getKey(Versifications.instance().getDefaultVersification(),refstr);
    }
 catch (    NoSuchKeyException ex) {
      DataPolice.report(book,key,""String_Node_Str"" + refstr + ""String_Node_Str""+ ex.getMessage());
    }
    String osisname=ref != null ? ref.getOsisRef() : refstr;
    reference=OSISUtil.factory().createReference();
    reference.setAttribute(OSISUtil.OSIS_ATTR_REF,osisname);
  }
 else {
    reference=OSISUtil.factory().createReference();
  }
  if (ele != null) {
    ele.addContent(reference);
  }
  return reference;
}",0.9384010484927916
101441,"@Override public void processContent(Book book,Key key,Element ele){
  String refstr=ele.getValue();
  try {
    if (ele.getAttribute(OSISUtil.OSIS_ATTR_REF) == null) {
      Passage ref=(Passage)book.getKey(refstr);
      String osisname=ref.getOsisRef();
      ele.setAttribute(OSISUtil.OSIS_ATTR_REF,osisname);
    }
  }
 catch (  NoSuchKeyException ex) {
    DataPolice.report(book,key,""String_Node_Str"" + refstr + ""String_Node_Str""+ ex.getMessage());
  }
}","@Override public void processContent(Book book,Key key,Element ele){
  String refstr=ele.getValue();
  try {
    if (ele.getAttribute(OSISUtil.OSIS_ATTR_REF) == null) {
      Key refKey=PassageKeyFactory.instance().getKey(Versifications.instance().getDefaultVersification(),refstr);
      if (refKey instanceof Passage) {
        Passage ref=(Passage)refKey;
        String osisname=ref.getOsisRef();
        ele.setAttribute(OSISUtil.OSIS_ATTR_REF,osisname);
      }
 else {
        DataPolice.report(book,key,""String_Node_Str"");
      }
    }
  }
 catch (  NoSuchKeyException ex) {
    DataPolice.report(book,key,""String_Node_Str"" + refstr + ""String_Node_Str""+ ex.getMessage());
  }
}",0.7707061900610288
101442,"/** 
 * Reads a passage as OSIS
 * @param key the given key
 * @param processor a processor for which to do things with
 * @param content a list of content to be appended to (i.e. the OSIS data)
 * @param openFileState the open file state, from which we read things
 * @throws BookException a book exception if we failed to read the book
 */
private Verse readPassageOsis(Key key,RawTextToXmlProcessor processor,final List<Content> content,T openFileState) throws BookException {
  Verse currentVerse=null;
  try {
    final Passage ref=KeyUtil.getPassage(key);
    final Iterator<Key> rit=ref.rangeIterator(RestrictionType.CHAPTER);
    while (rit.hasNext()) {
      VerseRange range=(VerseRange)rit.next();
      processor.preRange(range,content);
      for (      Key verseInRange : range) {
        currentVerse=KeyUtil.getVerse(verseInRange);
        final String keyName=verseInRange.getName();
        String rawText=readRawContent(openFileState,currentVerse,keyName);
        processor.postVerse(verseInRange,content,rawText);
      }
    }
  }
 catch (  IOException e) {
    throwFailedKeyException(key,currentVerse,e);
  }
  return currentVerse;
}","/** 
 * Reads a passage as OSIS
 * @param key the given key
 * @param processor a processor for which to do things with
 * @param content a list of content to be appended to (i.e. the OSIS data)
 * @param openFileState the open file state, from which we read things
 * @throws BookException a book exception if we failed to read the book
 */
private Verse readPassageOsis(Key key,RawTextToXmlProcessor processor,final List<Content> content,T openFileState) throws BookException {
  Verse currentVerse=null;
  try {
    final Passage ref=KeyUtil.getPassage(key);
    final Iterator<Key> rit=ref.rangeIterator(RestrictionType.CHAPTER);
    while (rit.hasNext()) {
      VerseRange range=(VerseRange)rit.next();
      processor.preRange(range,content);
      for (      Key verseInRange : range) {
        currentVerse=KeyUtil.getVerse(verseInRange);
        String rawText=readRawContent(openFileState,currentVerse);
        processor.postVerse(verseInRange,content,rawText);
      }
    }
  }
 catch (  IOException e) {
    throwFailedKeyException(key,currentVerse,e);
  }
  return currentVerse;
}",0.972924988903684
101443,"private void readNormalOsis(Key key,RawTextToXmlProcessor processor,List<Content> content,T openFileState) throws BookException {
  Iterator<Key> iterator=key.iterator();
  while (iterator.hasNext()) {
    Key next=iterator.next();
    String rawText;
    try {
      rawText=readRawContent(openFileState,next,next.getName());
      processor.postVerse(next,content,rawText);
    }
 catch (    IOException e) {
      throwFailedKeyException(key,next,e);
    }
  }
}","private void readNormalOsis(Key key,RawTextToXmlProcessor processor,List<Content> content,T openFileState) throws BookException {
  Iterator<Key> iterator=key.iterator();
  while (iterator.hasNext()) {
    Key next=iterator.next();
    String rawText;
    try {
      rawText=readRawContent(openFileState,next);
      processor.postVerse(next,content,rawText);
    }
 catch (    IOException e) {
      throwFailedKeyException(key,next,e);
    }
  }
}",0.9836065573770492
101444,"/** 
 * Construct a data entry.
 * @param name A name used for diagnostics.
 * @param data The data for this entry.
 * @param charset The character encoding for this entry.
 */
public DataEntry(String name,byte[] data,String charset){
  this.name=name;
  this.data=data.clone();
  this.charset=charset;
}","/** 
 * Construct a data entry.
 * @param name A name used for diagnostics.
 * @param data The data for this entry.
 * @param charset The character encoding for this entry.
 */
public DataEntry(String name,byte[] data,String charset){
  this.name=name;
  this.data=data.clone();
  this.charset=charset;
  this.keyEnd=SwordUtil.findByte(this.data,SEPARATOR);
}",0.9170437405731524
101445,"/** 
 * Get the key from this DataEntry.
 * @return the key
 */
public String getKey(){
  if (key == null) {
    keyEnd=SwordUtil.findByte(data,SEPARATOR);
    if (keyEnd < 0) {
      log.error(""String_Node_Str"" + name + ""String_Node_Str"");
      return ""String_Node_Str"";
    }
    key=SwordUtil.decode(name,data,keyEnd,charset).trim();
    if (key.endsWith(""String_Node_Str"")) {
      key=key.substring(0,key.length() - 1);
    }
  }
  return key;
}","/** 
 * Get the key from this DataEntry.
 * @return the key
 */
public String getKey(){
  if (key == null) {
    if (keyEnd < 0) {
      log.error(""String_Node_Str"" + name + ""String_Node_Str"");
      return ""String_Node_Str"";
    }
    key=SwordUtil.decode(name,data,keyEnd,charset).trim();
    if (key.endsWith(""String_Node_Str"")) {
      key=key.substring(0,key.length() - 1);
    }
  }
  return key;
}",0.945029239766082
101446,"/** 
 * Get the raw text from this entry.
 * @param cipherKey the key, if any, to (un)lock the text
 * @return the raw text
 */
public String getRawText(byte[] cipherKey){
  int textStart=getKeyEnd() + 1;
  cipher(cipherKey,textStart);
  return SwordUtil.decode(name,data,textStart,data.length - textStart,charset).trim();
}","/** 
 * Get the raw text from this entry.
 * @param cipherKey the key, if any, to (un)lock the text
 * @return the raw text
 */
public String getRawText(byte[] cipherKey){
  int textStart=keyEnd + 1;
  cipher(cipherKey,textStart);
  return SwordUtil.decode(name,data,textStart,data.length - textStart,charset).trim();
}",0.989113530326594
101447,"/** 
 * Get the position of the second \n in the data. This represents the end of the link and the start of the rest of the data.
 * @return the end of the link or -1 if not found.
 */
private int getLinkEnd(){
  if (linkEnd == 0) {
    linkEnd=SwordUtil.findByte(data,getKeyEnd() + 1,SEPARATOR);
  }
  return linkEnd;
}","/** 
 * Get the position of the second \n in the data. This represents the end of the link and the start of the rest of the data.
 * @return the end of the link or -1 if not found.
 */
private int getLinkEnd(){
  if (linkEnd == 0) {
    linkEnd=SwordUtil.findByte(data,keyEnd + 1,SEPARATOR);
    if (linkEnd == -1) {
      linkEnd=data.length - 1;
    }
  }
  return linkEnd;
}",0.9010043041606888
101448,"/** 
 * Determine whether this entry is an alias for another.
 * @return whether this is an alias entry
 */
public boolean isLinkEntry(){
  if (data.length >= 5) {
    String linkCheck=SwordUtil.decode(name,data,getKeyEnd() + 1,5,charset);
    return ""String_Node_Str"".equals(linkCheck);
  }
  return false;
}","/** 
 * Determine whether this entry is an alias for another.
 * @return whether this is an alias entry
 */
public boolean isLinkEntry(){
  return keyEnd + 6 < data.length && data[keyEnd + 1] == '@' && data[keyEnd + 2] == 'L' && data[keyEnd + 3] == 'I' && data[keyEnd + 4] == 'N' && data[keyEnd + 5] == 'K';
}",0.511326860841424
101449,"/** 
 * Get the link target for this entry. One entry can be chained to another. If the entry is not linked then it is an error to call this method.
 * @return the key to look up
 * @see #isLinkEntry()
 */
public String getLinkTarget(){
  int linkStart=getKeyEnd() + 6;
  int len=getLinkEnd() - linkStart + 1;
  return SwordUtil.decode(name,data,linkStart,len,charset).trim();
}","/** 
 * Get the link target for this entry. One entry can be chained to another. If the entry is not linked then it is an error to call this method.
 * @return the key to look up
 * @see #isLinkEntry()
 */
public String getLinkTarget(){
  int linkStart=keyEnd + 6;
  int len=getLinkEnd() - linkStart + 1;
  return SwordUtil.decode(name,data,linkStart,len,charset).trim();
}",0.9906790945406124
101450,"/** 
 * Get the block start and entry position.
 * @return the index of the block
 */
public DataIndex getBlockIndex(){
  int start=getKeyEnd() + 1;
  return new DataIndex(SwordUtil.decodeLittleEndian32(data,start),SwordUtil.decodeLittleEndian32(data,start + 4));
}","/** 
 * Get the block start and entry position.
 * @return the index of the block
 */
public DataIndex getBlockIndex(){
  int start=keyEnd + 1;
  return new DataIndex(SwordUtil.decodeLittleEndian32(data,start),SwordUtil.decodeLittleEndian32(data,start + 4));
}",0.9866666666666668
101451,"public String readRawContent(GenBookBackendState state,Key key,String keyName) throws IOException, BookException {
  TreeNode node=find(key);
  if (node == null) {
    throw new BookException(JSMsg.gettext(""String_Node_Str"",keyName,getBookMetaData().getInitials()));
  }
  byte[] userData=node.getUserData();
  if (userData.length == 8) {
    int start=SwordUtil.decodeLittleEndian32(userData,0);
    int size=SwordUtil.decodeLittleEndian32(userData,4);
    byte[] data=SwordUtil.readRAF(state.getBdtRaf(),start,size);
    decipher(data);
    return SwordUtil.decode(keyName,data,getBookMetaData().getBookCharset());
  }
  return ""String_Node_Str"";
}","public String readRawContent(GenBookBackendState state,Key key) throws IOException, BookException {
  TreeNode node=find(key);
  if (node == null) {
    throw new BookException(JSMsg.gettext(""String_Node_Str"",key.getName(),getBookMetaData().getInitials()));
  }
  byte[] userData=node.getUserData();
  if (userData.length == 8) {
    int start=SwordUtil.decodeLittleEndian32(userData,0);
    int size=SwordUtil.decodeLittleEndian32(userData,4);
    byte[] data=SwordUtil.readRAF(state.getBdtRaf(),start,size);
    decipher(data);
    return SwordUtil.decode(key.getName(),data,getBookMetaData().getBookCharset());
  }
  return ""String_Node_Str"";
}",0.979182729375482
101452,"public String getRawText(RawBackendState state,Key key) throws IOException {
  return readRawContent(state,key,key.getName());
}","public String getRawText(RawBackendState state,Key key) throws IOException {
  return readRawContent(state,key);
}",0.9421487603305784
101453,"public String readRawContent(RawBackendState state,Key key,String keyName) throws IOException {
  String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse verse=KeyUtil.getVerse(key);
  int index=verse.getOrdinal();
  Testament testament=v11n.getTestament(index);
  index=v11n.getTestamentOrdinal(index);
  RawBackendState initState=null;
  try {
    initState=initState();
    RandomAccessFile idxRaf=testament == Testament.NEW ? state.getNtIdxRaf() : state.getOtIdxRaf();
    if (idxRaf == null) {
      return ""String_Node_Str"";
    }
    return getEntry(state,verse.getName(),testament,index);
  }
 catch (  BookException e) {
    return ""String_Node_Str"";
  }
 finally {
    OpenFileStateManager.release(initState);
  }
}","public String readRawContent(RawBackendState state,Key key) throws IOException {
  String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse verse=KeyUtil.getVerse(key);
  int index=verse.getOrdinal();
  Testament testament=v11n.getTestament(index);
  index=v11n.getTestamentOrdinal(index);
  RawBackendState initState=null;
  try {
    initState=initState();
    RandomAccessFile idxRaf=testament == Testament.NEW ? state.getNtIdxRaf() : state.getOtIdxRaf();
    if (idxRaf == null) {
      return ""String_Node_Str"";
    }
    return getEntry(state,verse.getName(),testament,index);
  }
 catch (  BookException e) {
    return ""String_Node_Str"";
  }
 finally {
    OpenFileStateManager.release(initState);
  }
}",0.991001799640072
101454,"/** 
 * Gets the resource bundle for a particular class
 * @param implementingClass the implementing class
 * @param className the class name
 * @param shortClassName the short class name
 * @param currentUserLocale the current user locale
 * @param localisedResourceMap the localised resource map
 * @return the resource bundle for class
 */
private ResourceBundle getResourceBundleForClass(Class<? extends MsgBase> implementingClass,String className,String shortClassName,Locale currentUserLocale,Map<String,ResourceBundle> localisedResourceMap){
  ResourceBundle resourceBundle;
synchronized (getClass()) {
    resourceBundle=localisedResourceMap.get(className);
    if (resourceBundle == null) {
      try {
        resourceBundle=ResourceBundle.getBundle(shortClassName,currentUserLocale,CWClassLoader.instance(implementingClass));
        localisedResourceMap.put(className,resourceBundle);
      }
 catch (      MissingResourceException ex) {
        log.warn(""String_Node_Str"" + className);
      }
    }
  }
  return resourceBundle;
}","/** 
 * Gets the resource bundle for a particular class
 * @param implementingClass the implementing class
 * @param className the class name
 * @param shortClassName the short class name
 * @param currentUserLocale the current user locale
 * @param localisedResourceMap the localised resource map
 * @return the resource bundle for class
 */
private ResourceBundle getResourceBundleForClass(Class<? extends MsgBase> implementingClass,String className,String shortClassName,Locale currentUserLocale,Map<String,ResourceBundle> localisedResourceMap){
  ResourceBundle resourceBundle;
synchronized (MsgBase.class) {
    resourceBundle=localisedResourceMap.get(className);
    if (resourceBundle == null) {
      try {
        resourceBundle=ResourceBundle.getBundle(shortClassName,currentUserLocale,CWClassLoader.instance(implementingClass));
        localisedResourceMap.put(className,resourceBundle);
      }
 catch (      MissingResourceException ex) {
        log.warn(""String_Node_Str"" + className);
      }
    }
  }
  return resourceBundle;
}",0.9889899473432264
101455,"public Iterator<Content> getOsisIterator(Key key,final boolean allowEmpty) throws BookException {
  final Filter filter=getFilter();
  Passage ref=KeyUtil.getPassage(getVersification(),key);
  final boolean showTitles=ref.hasRanges(RestrictionType.CHAPTER) || !allowEmpty;
  RawTextToXmlProcessor processor=new RawTextToXmlProcessor(){
    public void preRange(    VerseRange range,    List<Content> partialDom){
      if (showTitles) {
        Element title=OSISUtil.factory().createTitle();
        title.setAttribute(OSISUtil.OSIS_ATTR_TYPE,OSISUtil.GENERATED_CONTENT);
        title.addContent(range.getName());
        partialDom.add(title);
      }
    }
    public void postVerse(    Key verse,    List<Content> partialDom,    String rawText){
      if (allowEmpty || rawText.length() > 0) {
        List<Content> osisContent=filter.toOSIS(AbstractPassageBook.this,verse,rawText);
        addOSIS(verse,partialDom,osisContent);
      }
    }
    public void init(    List<Content> partialDom){
    }
  }
;
  return getOsis(ref,processor).iterator();
}","public Iterator<Content> getOsisIterator(Key key,final boolean allowEmpty) throws BookException {
  final Filter filter=getFilter();
  Passage ref=KeyUtil.getPassage(key);
  final boolean showTitles=ref.hasRanges(RestrictionType.CHAPTER) || !allowEmpty;
  RawTextToXmlProcessor processor=new RawTextToXmlProcessor(){
    public void preRange(    VerseRange range,    List<Content> partialDom){
      if (showTitles) {
        Element title=OSISUtil.factory().createTitle();
        title.setAttribute(OSISUtil.OSIS_ATTR_TYPE,OSISUtil.GENERATED_CONTENT);
        title.addContent(range.getName());
        partialDom.add(title);
      }
    }
    public void postVerse(    Key verse,    List<Content> partialDom,    String rawText){
      if (allowEmpty || rawText.length() > 0) {
        List<Content> osisContent=filter.toOSIS(AbstractPassageBook.this,verse,rawText);
        addOSIS(verse,partialDom,osisContent);
      }
    }
    public void init(    List<Content> partialDom){
    }
  }
;
  return getOsis(ref,processor).iterator();
}",0.9909394372913686
101456,"/** 
 * Reads a passage as OSIS
 * @param key the given key
 * @param processor a processor for which to do things with
 * @param content a list of content to be appended to (i.e. the OSIS data)
 * @param openFileState the open file state, from which we read things
 * @throws BookException a book exception if we failed to read the book
 */
private Verse readPassageOsis(Key key,RawTextToXmlProcessor processor,final List<Content> content,T openFileState) throws BookException {
  Verse currentVerse=null;
  try {
    final Passage ref=key instanceof Passage ? (Passage)key : KeyUtil.getPassage(getVersification(),key);
    final Iterator<Key> rit=ref.rangeIterator(RestrictionType.CHAPTER);
    while (rit.hasNext()) {
      VerseRange range=(VerseRange)rit.next();
      processor.preRange(range,content);
      for (      Key verseInRange : range) {
        currentVerse=KeyUtil.getVerse(getVersification(),verseInRange);
        final String keyName=verseInRange.getName();
        String rawText=readRawContent(openFileState,currentVerse,keyName);
        processor.postVerse(verseInRange,content,rawText);
      }
    }
  }
 catch (  IOException e) {
    throwFailedKeyException(key,currentVerse,e);
  }
  return currentVerse;
}","/** 
 * Reads a passage as OSIS
 * @param key the given key
 * @param processor a processor for which to do things with
 * @param content a list of content to be appended to (i.e. the OSIS data)
 * @param openFileState the open file state, from which we read things
 * @throws BookException a book exception if we failed to read the book
 */
private Verse readPassageOsis(Key key,RawTextToXmlProcessor processor,final List<Content> content,T openFileState) throws BookException {
  Verse currentVerse=null;
  try {
    final Passage ref=KeyUtil.getPassage(key);
    final Iterator<Key> rit=ref.rangeIterator(RestrictionType.CHAPTER);
    while (rit.hasNext()) {
      VerseRange range=(VerseRange)rit.next();
      processor.preRange(range,content);
      for (      Key verseInRange : range) {
        currentVerse=KeyUtil.getVerse(verseInRange);
        final String keyName=verseInRange.getName();
        String rawText=readRawContent(openFileState,currentVerse,keyName);
        processor.postVerse(verseInRange,content,rawText);
      }
    }
  }
 catch (  IOException e) {
    throwFailedKeyException(key,currentVerse,e);
  }
  return currentVerse;
}",0.9573578595317724
101457,"@Override public boolean contains(Key key){
  String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse verse=KeyUtil.getVerse(v11n,key);
  RawBackendState initState=null;
  try {
    int index=verse.getOrdinal();
    Testament testament=v11n.getTestament(index);
    index=v11n.getTestamentOrdinal(index);
    initState=initState();
    RandomAccessFile idxRaf=testament == Testament.NEW ? initState.getNtIdxRaf() : initState.getOtIdxRaf();
    if (idxRaf == null) {
      return false;
    }
    DataIndex dataIndex=getIndex(idxRaf,index);
    return dataIndex.getSize() > 0;
  }
 catch (  IOException ex) {
    return false;
  }
catch (  BookException e) {
    return false;
  }
 finally {
    OpenFileStateManager.release(initState);
  }
}","@Override public boolean contains(Key key){
  String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse verse=KeyUtil.getVerse(key);
  RawBackendState initState=null;
  try {
    int index=verse.getOrdinal();
    Testament testament=v11n.getTestament(index);
    index=v11n.getTestamentOrdinal(index);
    initState=initState();
    RandomAccessFile idxRaf=testament == Testament.NEW ? initState.getNtIdxRaf() : initState.getOtIdxRaf();
    if (idxRaf == null) {
      return false;
    }
    DataIndex dataIndex=getIndex(idxRaf,index);
    return dataIndex.getSize() > 0;
  }
 catch (  IOException ex) {
    return false;
  }
catch (  BookException e) {
    return false;
  }
 finally {
    OpenFileStateManager.release(initState);
  }
}",0.9970743124634288
101458,"public String readRawContent(RawBackendState state,Key key,String keyName) throws IOException {
  String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse verse=KeyUtil.getVerse(v11n,key);
  int index=verse.getOrdinal();
  Testament testament=v11n.getTestament(index);
  index=v11n.getTestamentOrdinal(index);
  RandomAccessFile idxRaf=testament == Testament.NEW ? state.getNtIdxRaf() : state.getOtIdxRaf();
  if (idxRaf == null) {
    return ""String_Node_Str"";
  }
  return getEntry(state,verse.getName(),testament,index);
}","public String readRawContent(RawBackendState state,Key key,String keyName) throws IOException {
  String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse verse=KeyUtil.getVerse(key);
  int index=verse.getOrdinal();
  Testament testament=v11n.getTestament(index);
  index=v11n.getTestamentOrdinal(index);
  RandomAccessFile idxRaf=testament == Testament.NEW ? state.getNtIdxRaf() : state.getOtIdxRaf();
  if (idxRaf == null) {
    return ""String_Node_Str"";
  }
  return getEntry(state,verse.getName(),testament,index);
}",0.996078431372549
101459,"public void setRawText(RawFileBackendState state,Key key,String text) throws BookException, IOException {
  String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse verse=KeyUtil.getVerse(v11n,key);
  int index=verse.getOrdinal();
  Testament testament=v11n.getTestament(index);
  index=v11n.getTestamentOrdinal(index);
  RandomAccessFile idxRaf;
  RandomAccessFile txtRaf;
  File txtFile;
  if (testament == Testament.NEW) {
    idxRaf=state.getNtIdxRaf();
    txtRaf=state.getNtTextRaf();
    txtFile=state.getNtTextFile();
  }
 else {
    idxRaf=state.getOtIdxRaf();
    txtRaf=state.getOtTextRaf();
    txtFile=state.getOtTextFile();
  }
  DataIndex dataIndex=getIndex(idxRaf,index);
  File dataFile;
  if (dataIndex.getSize() == 0) {
    dataFile=createDataTextFile(state.getIncfileValue());
    updateIndexFile(idxRaf,index,txtRaf.length());
    updateDataFile(state.getIncfileValue(),txtFile);
    checkAndIncrementIncfile(state,state.getIncfileValue());
  }
 else {
    dataFile=getDataTextFile(txtRaf,dataIndex);
  }
  byte[] textData=text.getBytes(""String_Node_Str"");
  encipher(textData);
  writeTextDataFile(dataFile,textData);
}","public void setRawText(RawFileBackendState state,Key key,String text) throws BookException, IOException {
  String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse verse=KeyUtil.getVerse(key);
  int index=verse.getOrdinal();
  Testament testament=v11n.getTestament(index);
  index=v11n.getTestamentOrdinal(index);
  RandomAccessFile idxRaf;
  RandomAccessFile txtRaf;
  File txtFile;
  if (testament == Testament.NEW) {
    idxRaf=state.getNtIdxRaf();
    txtRaf=state.getNtTextRaf();
    txtFile=state.getNtTextFile();
  }
 else {
    idxRaf=state.getOtIdxRaf();
    txtRaf=state.getOtTextRaf();
    txtFile=state.getOtTextFile();
  }
  DataIndex dataIndex=getIndex(idxRaf,index);
  File dataFile;
  if (dataIndex.getSize() == 0) {
    dataFile=createDataTextFile(state.getIncfileValue());
    updateIndexFile(idxRaf,index,txtRaf.length());
    updateDataFile(state.getIncfileValue(),txtFile);
    checkAndIncrementIncfile(state,state.getIncfileValue());
  }
 else {
    dataFile=getDataTextFile(txtRaf,dataIndex);
  }
  byte[] textData=text.getBytes(""String_Node_Str"");
  encipher(textData);
  writeTextDataFile(dataFile,textData);
}",0.9341842840047866
101460,"public void setAliasKey(RawFileBackendState state,Key alias,Key source) throws IOException {
  String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse aliasVerse=KeyUtil.getVerse(v11n,alias);
  Verse sourceVerse=KeyUtil.getVerse(v11n,source);
  int aliasIndex=aliasVerse.getOrdinal();
  Testament testament=v11n.getTestament(aliasIndex);
  aliasIndex=v11n.getTestamentOrdinal(aliasIndex);
  RandomAccessFile idxRaf=testament == Testament.NEW ? state.getNtIdxRaf() : state.getOtIdxRaf();
  int sourceOIndex=sourceVerse.getOrdinal();
  sourceOIndex=v11n.getTestamentOrdinal(sourceOIndex);
  DataIndex dataIndex=getIndex(idxRaf,sourceOIndex);
  updateIndexFile(idxRaf,aliasIndex,dataIndex.getOffset());
}","public void setAliasKey(RawFileBackendState state,Key alias,Key source) throws IOException {
  String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse aliasVerse=KeyUtil.getVerse(alias);
  Verse sourceVerse=KeyUtil.getVerse(source);
  int aliasIndex=aliasVerse.getOrdinal();
  Testament testament=v11n.getTestament(aliasIndex);
  aliasIndex=v11n.getTestamentOrdinal(aliasIndex);
  RandomAccessFile idxRaf=testament == Testament.NEW ? state.getNtIdxRaf() : state.getOtIdxRaf();
  int sourceOIndex=sourceVerse.getOrdinal();
  sourceOIndex=v11n.getTestamentOrdinal(sourceOIndex);
  DataIndex dataIndex=getIndex(idxRaf,sourceOIndex);
  updateIndexFile(idxRaf,aliasIndex,dataIndex.getOffset());
}",0.9938423645320196
101461,"private void createIncfile(RawFileBackendState state) throws IOException, BookException {
  File tempIncfile=new File(SwordUtil.getExpandedDataPath(getBookMetaData()).getPath() + File.separator + INCFILE);
  if (!tempIncfile.exists() && !tempIncfile.createNewFile()) {
    throw new IOException(""String_Node_Str"");
  }
  state.setIncfile(tempIncfile);
}","private void createIncfile(RawFileBackendState state) throws IOException, BookException {
  File tempIncfile=new File(SwordUtil.getExpandedDataPath(getBookMetaData()).getPath() + File.separator + RawFileBackendState.INCFILE);
  if (!tempIncfile.exists() && !tempIncfile.createNewFile()) {
    throw new IOException(""String_Node_Str"");
  }
  state.setIncfile(tempIncfile);
}",0.9724517906336088
101462,"@Override public void addOSIS(Key key,List<Content> contentList,List<Content> osisContent){
  for (  Content content : osisContent) {
    if (content instanceof Element) {
      Element ele=(Element)content;
      if (ele.getName().equals(OSISUtil.OSIS_ELEMENT_VERSE)) {
        super.addOSIS(key,contentList,osisContent);
        return;
      }
    }
  }
  if (KeyUtil.getPassage(getVersification(),key).getVerseAt(0).getVerse() == 0) {
    super.addOSIS(key,contentList,osisContent);
  }
 else {
    Element everse=OSISUtil.factory().createVerse();
    everse.setAttribute(OSISUtil.OSIS_ATTR_OSISID,key.getOsisID());
    super.addOSIS(key,everse,osisContent);
    contentList.add(everse);
  }
}","@Override public void addOSIS(Key key,List<Content> contentList,List<Content> osisContent){
  for (  Content content : osisContent) {
    if (content instanceof Element) {
      Element ele=(Element)content;
      if (ele.getName().equals(OSISUtil.OSIS_ELEMENT_VERSE)) {
        super.addOSIS(key,contentList,osisContent);
        return;
      }
    }
  }
  if (KeyUtil.getVerse(key).getVerse() == 0) {
    super.addOSIS(key,contentList,osisContent);
  }
 else {
    Element everse=OSISUtil.factory().createVerse();
    everse.setAttribute(OSISUtil.OSIS_ATTR_OSISID,key.getOsisID());
    super.addOSIS(key,everse,osisContent);
    contentList.add(everse);
  }
}",0.9713024282560706
101463,"@Override public boolean contains(Key key){
  ZVerseBackendState rafBook=null;
  try {
    rafBook=initState();
    String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
    Versification v11n=Versifications.instance().getVersification(v11nName);
    Verse verse=KeyUtil.getVerse(v11n,key);
    int index=verse.getOrdinal();
    Testament testament=v11n.getTestament(index);
    index=v11n.getTestamentOrdinal(index);
    RandomAccessFile compRaf=testament == Testament.NEW ? rafBook.getNtCompRaf() : rafBook.getOtCompRaf();
    if (compRaf == null) {
      return false;
    }
    byte[] temp=SwordUtil.readRAF(compRaf,1L * index * COMP_ENTRY_SIZE,COMP_ENTRY_SIZE);
    if (temp == null || temp.length == 0) {
      return false;
    }
    int verseSize=SwordUtil.decodeLittleEndian16(temp,8);
    return verseSize > 0;
  }
 catch (  IOException e) {
    return false;
  }
catch (  BookException e) {
    log.fatal(""String_Node_Str"",e);
    return false;
  }
 finally {
    IOUtil.close(rafBook);
  }
}","@Override public boolean contains(Key key){
  ZVerseBackendState rafBook=null;
  try {
    rafBook=initState();
    String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
    Versification v11n=Versifications.instance().getVersification(v11nName);
    Verse verse=KeyUtil.getVerse(key);
    int index=verse.getOrdinal();
    Testament testament=v11n.getTestament(index);
    index=v11n.getTestamentOrdinal(index);
    RandomAccessFile compRaf=testament == Testament.NEW ? rafBook.getNtCompRaf() : rafBook.getOtCompRaf();
    if (compRaf == null) {
      return false;
    }
    byte[] temp=SwordUtil.readRAF(compRaf,1L * index * COMP_ENTRY_SIZE,COMP_ENTRY_SIZE);
    if (temp == null || temp.length == 0) {
      return false;
    }
    int verseSize=SwordUtil.decodeLittleEndian16(temp,8);
    return verseSize > 0;
  }
 catch (  IOException e) {
    return false;
  }
catch (  BookException e) {
    log.fatal(""String_Node_Str"",e);
    return false;
  }
 finally {
    IOUtil.close(rafBook);
  }
}",0.9975857073877354
101464,"public String readRawContent(ZVerseBackendState rafBook,Key key,String keyName) throws IOException {
  SwordBookMetaData bookMetaData=getBookMetaData();
  final String charset=bookMetaData.getBookCharset();
  final String compressType=(String)bookMetaData.getProperty(ConfigEntryType.COMPRESS_TYPE);
  final String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  final Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse verse=KeyUtil.getVerse(v11n,key);
  int index=verse.getOrdinal();
  final Testament testament=v11n.getTestament(index);
  index=v11n.getTestamentOrdinal(index);
  final RandomAccessFile compRaf;
  final RandomAccessFile idxRaf;
  final RandomAccessFile textRaf;
  if (testament == Testament.OLD) {
    compRaf=rafBook.getOtCompRaf();
    idxRaf=rafBook.getOtIdxRaf();
    textRaf=rafBook.getOtTextRaf();
  }
 else {
    compRaf=rafBook.getNtCompRaf();
    idxRaf=rafBook.getNtIdxRaf();
    textRaf=rafBook.getNtTextRaf();
  }
  if (compRaf == null) {
    return ""String_Node_Str"";
  }
  byte[] temp=SwordUtil.readRAF(compRaf,1L * index * COMP_ENTRY_SIZE,COMP_ENTRY_SIZE);
  if (temp == null || temp.length == 0) {
    return ""String_Node_Str"";
  }
  final long blockNum=SwordUtil.decodeLittleEndian32(temp,0);
  final int verseStart=SwordUtil.decodeLittleEndian32(temp,4);
  final int verseSize=SwordUtil.decodeLittleEndian16(temp,8);
  byte[] uncompressed=null;
  if (blockNum == rafBook.getLastBlockNum() && testament == rafBook.getLastTestament()) {
    uncompressed=rafBook.getLastUncompressed();
  }
 else {
    temp=SwordUtil.readRAF(idxRaf,blockNum * IDX_ENTRY_SIZE,IDX_ENTRY_SIZE);
    if (temp == null || temp.length == 0) {
      return ""String_Node_Str"";
    }
    final int blockStart=SwordUtil.decodeLittleEndian32(temp,0);
    final int blockSize=SwordUtil.decodeLittleEndian32(temp,4);
    final int uncompressedSize=SwordUtil.decodeLittleEndian32(temp,8);
    final byte[] data=SwordUtil.readRAF(textRaf,blockStart,blockSize);
    decipher(data);
    uncompressed=CompressorType.fromString(compressType).getCompressor(data).uncompress(uncompressedSize).toByteArray();
    rafBook.setLastBlockNum(blockNum);
    rafBook.setLastTestament(testament);
    rafBook.setLastUncompressed(uncompressed);
  }
  final byte[] chopped=new byte[verseSize];
  System.arraycopy(uncompressed,verseStart,chopped,0,verseSize);
  return SwordUtil.decode(keyName,chopped,charset);
}","public String readRawContent(ZVerseBackendState rafBook,Key key,String keyName) throws IOException {
  SwordBookMetaData bookMetaData=getBookMetaData();
  final String charset=bookMetaData.getBookCharset();
  final String compressType=(String)bookMetaData.getProperty(ConfigEntryType.COMPRESS_TYPE);
  final String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  final Versification v11n=Versifications.instance().getVersification(v11nName);
  Verse verse=KeyUtil.getVerse(key);
  int index=verse.getOrdinal();
  final Testament testament=v11n.getTestament(index);
  index=v11n.getTestamentOrdinal(index);
  final RandomAccessFile compRaf;
  final RandomAccessFile idxRaf;
  final RandomAccessFile textRaf;
  if (testament == Testament.OLD) {
    compRaf=rafBook.getOtCompRaf();
    idxRaf=rafBook.getOtIdxRaf();
    textRaf=rafBook.getOtTextRaf();
  }
 else {
    compRaf=rafBook.getNtCompRaf();
    idxRaf=rafBook.getNtIdxRaf();
    textRaf=rafBook.getNtTextRaf();
  }
  if (compRaf == null) {
    return ""String_Node_Str"";
  }
  byte[] temp=SwordUtil.readRAF(compRaf,1L * index * COMP_ENTRY_SIZE,COMP_ENTRY_SIZE);
  if (temp == null || temp.length == 0) {
    return ""String_Node_Str"";
  }
  final long blockNum=SwordUtil.decodeLittleEndian32(temp,0);
  final int verseStart=SwordUtil.decodeLittleEndian32(temp,4);
  final int verseSize=SwordUtil.decodeLittleEndian16(temp,8);
  byte[] uncompressed=null;
  if (blockNum == rafBook.getLastBlockNum() && testament == rafBook.getLastTestament()) {
    uncompressed=rafBook.getLastUncompressed();
  }
 else {
    temp=SwordUtil.readRAF(idxRaf,blockNum * IDX_ENTRY_SIZE,IDX_ENTRY_SIZE);
    if (temp == null || temp.length == 0) {
      return ""String_Node_Str"";
    }
    final int blockStart=SwordUtil.decodeLittleEndian32(temp,0);
    final int blockSize=SwordUtil.decodeLittleEndian32(temp,4);
    final int uncompressedSize=SwordUtil.decodeLittleEndian32(temp,8);
    final byte[] data=SwordUtil.readRAF(textRaf,blockStart,blockSize);
    decipher(data);
    uncompressed=CompressorType.fromString(compressType).getCompressor(data).uncompress(uncompressedSize).toByteArray();
    rafBook.setLastBlockNum(blockNum);
    rafBook.setLastTestament(testament);
    rafBook.setLastUncompressed(uncompressed);
  }
  final byte[] chopped=new byte[verseSize];
  System.arraycopy(uncompressed,verseStart,chopped,0,verseSize);
  return SwordUtil.decode(keyName,chopped,charset);
}",0.9989839463523674
101465,"/** 
 * Call with &lt;operation&gt; book. Where operation can be one of: <ul> <li>check - returns ""TRUE"" or ""FALSE"" indicating whether the index exists or not</li> <li>create - (re)create the index</li> <li>delete - delete the index if it exists</li> </ul> And book is the initials of a book, e.g. KJV.
 * @param args
 */
public static void main(String[] args){
  if (args.length != 2) {
    usage();
    return;
  }
  System.err.println(""String_Node_Str"" + args[0] + ""String_Node_Str""+ args[1]);
  String operation=args[0];
  Book b=Books.installed().getBook(args[1]);
  if (b == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  BookIndexer indexer=new BookIndexer(b);
  if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      indexer.createIndex();
    }
 catch (    BookException e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      indexer.deleteIndex();
    }
 catch (    BookException e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(indexer.isIndexed());
  }
 else {
    usage();
  }
}","/** 
 * Call with &lt;operation&gt; book. Where operation can be one of: <ul> <li>check - returns ""TRUE"" or ""FALSE"" indicating whether the index exists or not</li> <li>create - (re)create the index</li> <li>delete - delete the index if it exists</li> </ul> And book is the initials of a book, e.g. KJV.
 * @param args
 */
public static void main(String[] args){
  if (args.length != 2) {
    usage();
    return;
  }
  System.err.println(""String_Node_Str"" + args[0] + ""String_Node_Str""+ args[1]);
  String operation=args[0];
  Book b=Books.installed().getBook(args[1]);
  if (b == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  BookIndexer indexer=new BookIndexer(b);
  if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    try {
      indexer.createIndex();
    }
 catch (    BookException e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    try {
      indexer.deleteIndex();
    }
 catch (    BookException e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    System.err.println(indexer.isIndexed());
  }
 else {
    usage();
  }
}",0.9379968203497616
101466,"/** 
 * BookInstaller can manage the installation of books with the following capabilities. Usage: BookInstaller [option]<br/> Options: <table border=""0""> <tr> <td>uninstall</td> <td>bookName</td> <td>Uninstall book</td> </tr> <tr> <td>sources</td> <td>&nbsp;</td> <td>List source repositories</td> </tr> <tr> <td>list</td> <td>&nbsp;</td> <td>List installed books</td> </tr> <tr> <td>list</td> <td>repositoryName</td> <td>list available books from a repository</td> </tr> <tr> <td>reload</td> <td>repositoryName</td> <td>Reload the local cache for a repository</td> </tr> <tr> <td>install</td> <td>repositoryName bookName</td> <td>Install a book from a repository</td> </tr> </table>
 * @param args
 */
public static void main(String[] args){
  if (args.length < 1) {
    usage();
    return;
  }
  System.err.print(""String_Node_Str"");
  for (int i=0; i < args.length; i++) {
    System.err.print(' ');
    System.err.print(args[i]);
  }
  System.err.print('\n');
  BookInstaller installer=new BookInstaller();
  String operation=args[0];
  if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 2) {
      Book b=Books.installed().getBook(args[1]);
      if (b == null) {
        System.err.println(""String_Node_Str"");
        return;
      }
      try {
        installer.deleteBook(b);
      }
 catch (      BookException e) {
        e.printStackTrace();
      }
    }
 else {
      usage();
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    Map<String,Installer> installers=installer.getInstallers();
    for (    String name : installers.keySet()) {
      System.out.println(name);
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 1) {
      for (      Book book : BookInstaller.getInstalledBooks()) {
        System.out.println(book.getInitials());
      }
    }
 else     if (args.length == 2) {
      for (      Book book : installer.getRepositoryBooks(args[1])) {
        System.out.println(book.getInitials());
      }
    }
 else {
      usage();
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 2) {
      try {
        installer.reloadBookList(args[1]);
      }
 catch (      InstallException e) {
        e.printStackTrace();
      }
    }
 else {
      usage();
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 3) {
      Book b=installer.getBook(args[1],args[2]);
      if (b == null) {
        System.err.println(""String_Node_Str"");
        return;
      }
      try {
        installer.installBook(args[1],b);
      }
 catch (      BookException e) {
        e.printStackTrace();
      }
catch (      InstallException e) {
        e.printStackTrace();
      }
    }
 else {
      usage();
    }
  }
 else {
    usage();
  }
}","/** 
 * BookInstaller can manage the installation of books with the following capabilities. Usage: BookInstaller [option]<br/> Options: <table border=""0""> <tr> <td>uninstall</td> <td>bookName</td> <td>Uninstall book</td> </tr> <tr> <td>sources</td> <td>&nbsp;</td> <td>List source repositories</td> </tr> <tr> <td>list</td> <td>&nbsp;</td> <td>List installed books</td> </tr> <tr> <td>list</td> <td>repositoryName</td> <td>list available books from a repository</td> </tr> <tr> <td>reload</td> <td>repositoryName</td> <td>Reload the local cache for a repository</td> </tr> <tr> <td>install</td> <td>repositoryName bookName</td> <td>Install a book from a repository</td> </tr> </table>
 * @param args
 */
public static void main(String[] args){
  if (args.length < 1) {
    usage();
    return;
  }
  System.err.print(""String_Node_Str"");
  for (int i=0; i < args.length; i++) {
    System.err.print(' ');
    System.err.print(args[i]);
  }
  System.err.print('\n');
  BookInstaller installer=new BookInstaller();
  String operation=args[0];
  if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    if (args.length == 2) {
      Book b=Books.installed().getBook(args[1]);
      if (b == null) {
        System.err.println(""String_Node_Str"");
        return;
      }
      try {
        installer.deleteBook(b);
      }
 catch (      BookException e) {
        e.printStackTrace();
      }
    }
 else {
      usage();
    }
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    Map<String,Installer> installers=installer.getInstallers();
    for (    String name : installers.keySet()) {
      System.out.println(name);
    }
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    if (args.length == 1) {
      for (      Book book : BookInstaller.getInstalledBooks()) {
        System.out.println(book.getInitials());
      }
    }
 else     if (args.length == 2) {
      for (      Book book : installer.getRepositoryBooks(args[1])) {
        System.out.println(book.getInitials());
      }
    }
 else {
      usage();
    }
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    if (args.length == 2) {
      try {
        installer.reloadBookList(args[1]);
      }
 catch (      InstallException e) {
        e.printStackTrace();
      }
    }
 else {
      usage();
    }
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    if (args.length == 3) {
      Book b=installer.getBook(args[1],args[2]);
      if (b == null) {
        System.err.println(""String_Node_Str"");
        return;
      }
      try {
        installer.installBook(args[1],b);
      }
 catch (      BookException e) {
        e.printStackTrace();
      }
catch (      InstallException e) {
        e.printStackTrace();
      }
    }
 else {
      usage();
    }
  }
 else {
    usage();
  }
}",0.8987968860580325
101467,"/** 
 * When called from a method it will return the i-th class calling that method, up the call chain. If used with a -1 it will return the class making the call -2 and -3 will return this class
 * @throws ArrayIndexOutOfBoundsException if the index is not valid
 */
public static Class<?> getCallingClass(int i){
  return Thread.currentThread().getStackTrace()[CALL_CONTEXT_OFFSET + i].getClass();
}","/** 
 * When called from a method it will return the i-th class calling that method, up the call chain. If used with a -1 it will return the class making the call -2 and -3 will return this class
 * @throws ArrayIndexOutOfBoundsException if the index is not valid
 */
public static Class<?> getCallingClass(int i){
  try {
    return Class.forName(Thread.currentThread().getStackTrace()[CALL_CONTEXT_OFFSET + i].getClassName());
  }
 catch (  ClassNotFoundException e) {
    return CallContext.class;
  }
}",0.8687982359426681
101468,"/** 
 * Get the language name from the language code. If the code is null or empty then it is considered to be DEFAULT_LANG_CODE (that is, English). If it starts with x- or is too long then it will return unknown. If the code's name cannot be found, it will return the code. If a locale is used for the iso639Code, it will use the part before the '_'. Thus, this code does not support dialects, except as found in the iso639.
 * @param iso639Code
 * @return the name of the language
 */
public static String getLanguageName(String iso639Code){
  String code=getLanguageCode(iso639Code);
  try {
    return getLocalisedCommonLanguages().getString(code);
  }
 catch (  MissingResourceException e) {
    try {
      return allLangs.getString(code);
    }
 catch (    MissingResourceException e1) {
      return code;
    }
  }
}","/** 
 * Get the language name for the code. If the language name is not known then return the code.
 * @param languageCode
 * @return the name for the language.
 */
public static String getLanguageName(String languageCode){
  String name=instance.get(languageCode);
  if (name != null) {
    return name;
  }
  return languageCode;
}",0.3229706390328152
101469,"/** 
 * Split the specification on '-' into 1 to 3 parts.
 * @param specification
 */
private void parse(String specification){
  int len=specification.length();
  if (len < 2 || specification.charAt(0) == '-' || specification.charAt(1) == '-') {
    valid=false;
    code=UNKNOWN_LANG_CODE;
    return;
  }
  int partLen=0;
  int start=2;
  int split;
  for (split=start; split < len; ++split) {
    char c=specification.charAt(split);
    if (c == '-') {
      break;
    }
  }
  code=Language.toCanonicalLanguage(specification,start,split);
  partLen=split - start;
  valid=partLen == 2 || partLen == 3;
  start=split + 1;
  if (split < len) {
    for (split=start; split < len; ++split) {
      char c=specification.charAt(split);
      if (c == '-') {
        break;
      }
    }
    partLen=split - start;
    if (partLen == 4) {
      script=Language.toCanonicalScript(specification,start,split);
    }
 else     if (partLen == 2) {
      country=Language.toCanonicalCountry(specification,start,split);
    }
 else {
      valid=false;
    }
    start=split + 1;
  }
  if (country == null && split < len) {
    for (split=start; split < len; ++split) {
      char c=specification.charAt(split);
      if (c == '-') {
        break;
      }
    }
    partLen=split - start;
    if (partLen == 2) {
      country=Language.toCanonicalCountry(specification,start,split);
    }
 else {
      valid=false;
    }
    start=split + 1;
  }
  if (start <= len) {
    valid=false;
  }
}","/** 
 * Split the specification on '-' into 1 to 3 parts.
 * @param spec
 */
private void parse(String spec){
  String specification=spec;
  if (specification == null) {
    specification=DEFAULT_LANG_CODE;
  }
  int len=specification.length();
  if (len < 2 || specification.charAt(0) == '-' || specification.charAt(1) == '-') {
    valid=false;
    code=UNKNOWN_LANG_CODE;
    return;
  }
  int partLen=0;
  int start=0;
  int split;
  for (split=2; split < len; ++split) {
    char c=specification.charAt(split);
    if (c == '-') {
      break;
    }
  }
  code=Language.toCanonicalLanguage(specification,start,split);
  partLen=split - start;
  valid=partLen == 2 || partLen == 3;
  start=split + 1;
  if (split < len) {
    for (split=start; split < len; ++split) {
      char c=specification.charAt(split);
      if (c == '-') {
        break;
      }
    }
    partLen=split - start;
    if (partLen == 4) {
      script=Language.toCanonicalScript(specification,start,split);
    }
 else     if (partLen == 2) {
      country=Language.toCanonicalCountry(specification,start,split);
    }
 else {
      valid=false;
    }
    start=split + 1;
  }
  if (country == null && split < len) {
    for (split=start; split < len; ++split) {
      char c=specification.charAt(split);
      if (c == '-') {
        break;
      }
    }
    partLen=split - start;
    if (partLen == 2) {
      country=Language.toCanonicalCountry(specification,start,split);
    }
 else {
      valid=false;
    }
    start=split + 1;
  }
  if (start <= len) {
    valid=false;
  }
}",0.9392446633825944
101470,"private void adjustLanguage(){
  Language lang=(Language)getValue(ConfigEntryType.LANG);
  if (lang == null) {
    lang=Language.DEFAULT_LANG;
    add(ConfigEntryType.LANG,lang.toString());
  }
  testLanguage(internal,lang);
  Language langFrom=(Language)getValue(ConfigEntryType.GLOSSARY_FROM);
  Language langTo=(Language)getValue(ConfigEntryType.GLOSSARY_TO);
  if (langFrom != null || langTo != null) {
    if (langFrom == null) {
      log.warn(""String_Node_Str"" + internal + ""String_Node_Str""+ ConfigEntryType.GLOSSARY_FROM.getName()+ '='+ Languages.DEFAULT_LANG_CODE);
      langFrom=Language.DEFAULT_LANG;
      add(ConfigEntryType.GLOSSARY_FROM,lang.getCode());
    }
    testLanguage(internal,langFrom);
    if (langTo == null) {
      log.warn(""String_Node_Str"" + internal + ""String_Node_Str""+ ConfigEntryType.GLOSSARY_TO.getName()+ '='+ Languages.DEFAULT_LANG_CODE);
      langTo=Language.DEFAULT_LANG;
      add(ConfigEntryType.GLOSSARY_TO,lang.getCode());
    }
    testLanguage(internal,langTo);
    if (!langFrom.equals(lang) && !langTo.equals(lang)) {
      log.error(""String_Node_Str"" + internal + ""String_Node_Str""+ ConfigEntryType.GLOSSARY_FROM.getName()+ ""String_Node_Str""+ ConfigEntryType.GLOSSARY_FROM.getName()+ ""String_Node_Str""+ ConfigEntryType.LANG.getName());
    }
 else     if (!langFrom.equals(lang)) {
      lang=langFrom;
      add(ConfigEntryType.LANG,lang.getCode());
    }
  }
}","private void adjustLanguage(){
  Language lang=(Language)getValue(ConfigEntryType.LANG);
  if (lang == null) {
    lang=Language.DEFAULT_LANG;
    add(ConfigEntryType.LANG,lang.toString());
  }
  testLanguage(internal,lang);
  Language langFrom=(Language)getValue(ConfigEntryType.GLOSSARY_FROM);
  Language langTo=(Language)getValue(ConfigEntryType.GLOSSARY_TO);
  if (langFrom != null || langTo != null) {
    if (langFrom == null) {
      log.warn(""String_Node_Str"" + internal + ""String_Node_Str""+ ConfigEntryType.GLOSSARY_FROM.getName()+ '='+ Language.DEFAULT_LANG_CODE);
      langFrom=Language.DEFAULT_LANG;
      add(ConfigEntryType.GLOSSARY_FROM,lang.getCode());
    }
    testLanguage(internal,langFrom);
    if (langTo == null) {
      log.warn(""String_Node_Str"" + internal + ""String_Node_Str""+ ConfigEntryType.GLOSSARY_TO.getName()+ '='+ Language.DEFAULT_LANG_CODE);
      langTo=Language.DEFAULT_LANG;
      add(ConfigEntryType.GLOSSARY_TO,lang.getCode());
    }
    testLanguage(internal,langTo);
    if (!langFrom.equals(lang) && !langTo.equals(lang)) {
      log.error(""String_Node_Str"" + internal + ""String_Node_Str""+ ConfigEntryType.GLOSSARY_FROM.getName()+ ""String_Node_Str""+ ConfigEntryType.GLOSSARY_FROM.getName()+ ""String_Node_Str""+ ConfigEntryType.LANG.getName());
    }
 else     if (!langFrom.equals(lang)) {
      lang=langFrom;
      add(ConfigEntryType.LANG,lang.getCode());
    }
  }
}",0.9992922859164898
101471,"/** 
 * Do the actual parsing.
 * @param input
 * @return true when the input looks like a Strong's Number
 */
private boolean parse(String input){
  String text=input;
  language='U';
  strongsNumber=9999;
  part=""String_Node_Str"";
  Matcher m=STRONGS_PATTERN.matcher(text);
  if (!m.lookingAt()) {
    return false;
  }
  String lang=m.group(1);
  language=lang.charAt(0);
switch (language) {
case 'g':
    language='G';
  break;
case 'h':
language='H';
break;
default :
return false;
}
try {
strongsNumber=Short.parseShort(m.group(2));
}
 catch (NumberFormatException e) {
strongsNumber=0;
return false;
}
part=m.group(3);
return true;
}","/** 
 * Do the actual parsing.
 * @param input
 * @return true when the input looks like a Strong's Number
 */
private boolean parse(String input){
  String text=input;
  language='U';
  strongsNumber=9999;
  part=""String_Node_Str"";
  Matcher m=STRONGS_PATTERN.matcher(text);
  if (!m.lookingAt()) {
    return false;
  }
  String lang=m.group(1);
  language=lang.charAt(0);
switch (language) {
case 'g':
    language='G';
  break;
case 'h':
language='H';
break;
default :
}
try {
strongsNumber=Short.parseShort(m.group(2));
}
 catch (NumberFormatException e) {
strongsNumber=0;
return false;
}
part=m.group(3);
return true;
}",0.9889415481832544
101472,"/** 
 * Get the localized language name.
 * @return the name of the language
 */
public String getName(){
  if (name == null) {
    StringBuilder sb=new StringBuilder();
    if (script != null && country != null) {
      sb.append(code);
      sb.append('-');
      sb.append(script);
      sb.append('-');
      sb.append(country);
      found=sb.toString();
      name=Languages.getName(found);
    }
    if (code.equals(name) && script != null) {
      sb.setLength(0);
      sb.append(code);
      sb.append('-');
      sb.append(script);
      found=sb.toString();
      name=Languages.getName(found);
    }
    if (code.equals(name) && country != null) {
      sb.setLength(0);
      sb.append(code);
      sb.append('-');
      sb.append(country);
      found=sb.toString();
      name=Languages.getName(found);
    }
    if (code.equals(name)) {
      found=code;
      name=Languages.getName(code);
    }
    if (code.equals(name)) {
      name=new Locale(code).getDisplayLanguage();
    }
    if (code.equals(name)) {
      name=Languages.AllLanguages.getName(code);
    }
  }
  return name;
}","/** 
 * Get the localized language name.
 * @return the name of the language
 */
public String getName(){
  if (name == null) {
    name=code;
    StringBuilder sb=new StringBuilder();
    if (script != null && country != null) {
      sb.append(code);
      sb.append('-');
      sb.append(script);
      sb.append('-');
      sb.append(country);
      found=sb.toString();
      name=Languages.getName(found);
    }
    if (code.equals(name) && script != null) {
      sb.setLength(0);
      sb.append(code);
      sb.append('-');
      sb.append(script);
      found=sb.toString();
      name=Languages.getName(found);
    }
    if (code.equals(name) && country != null) {
      sb.setLength(0);
      sb.append(code);
      sb.append('-');
      sb.append(country);
      found=sb.toString();
      name=Languages.getName(found);
    }
    if (code.equals(name)) {
      found=code;
      name=Languages.getName(code);
    }
    if (code.equals(name)) {
      name=new Locale(code).getDisplayLanguage();
    }
    if (code.equals(name)) {
      name=Languages.AllLanguages.getName(code);
    }
  }
  return name;
}",0.9932462854570012
101473,"/** 
 * Ctor with some default values. A call to setBook() is still required after this ctor is called
 */
public DefaultBookMetaData(BookDriver driver,String name,BookCategory type){
  setDriver(driver);
  setName(name);
  setBookCategory(type);
  setLanguage(new Language(null));
}","/** 
 * Ctor with some default values. A call to setBook() is still required after this ctor is called
 */
public DefaultBookMetaData(BookDriver driver,String name,BookCategory type){
  setDriver(driver);
  setName(name);
  setBookCategory(type);
  setLanguage(Language.DEFAULT_LANG);
}",0.9314586994727592
101474,"public void deleteIndex(Book book) throws BookException {
  File tempPath=null;
  try {
    File storage=NetUtil.getAsFile(getStorageArea(book));
    String finalCanonicalPath=storage.getCanonicalPath();
    tempPath=new File(finalCanonicalPath + '.' + IndexStatus.CREATING.toString());
    FileUtil.delete(tempPath);
    if (!storage.renameTo(tempPath)) {
      throw new BookException(JSMsg.gettext(""String_Node_Str""));
    }
    book.setIndexStatus(IndexStatus.UNDONE);
  }
 catch (  IOException ex) {
    throw new BookException(JSMsg.gettext(""String_Node_Str""),ex);
  }
  FileUtil.delete(tempPath);
}","public void deleteIndex(Book book) throws BookException {
  File tempPath=null;
  try {
    Index index=INDEXES.get(book);
    if (index != null) {
      index.close();
    }
    File storage=NetUtil.getAsFile(getStorageArea(book));
    String finalCanonicalPath=storage.getCanonicalPath();
    tempPath=new File(finalCanonicalPath + '.' + IndexStatus.CREATING.toString());
    if (tempPath.exists()) {
      FileUtil.delete(tempPath);
    }
    tempPath=new File(finalCanonicalPath + '.' + IndexStatus.CREATING.toString());
    if (!storage.renameTo(tempPath)) {
      throw new BookException(JSMsg.gettext(""String_Node_Str""));
    }
    book.setIndexStatus(IndexStatus.UNDONE);
  }
 catch (  IOException ex) {
    throw new BookException(JSMsg.gettext(""String_Node_Str""),ex);
  }
  FileUtil.delete(tempPath);
}",0.8539167254763586
101475,"public void deleteIndex(Book book) throws BookException {
  File tempPath=null;
  try {
    File storage=NetUtil.getAsFile(getStorageArea(book));
    String finalCanonicalPath=storage.getCanonicalPath();
    tempPath=new File(finalCanonicalPath + '.' + IndexStatus.CREATING.toString());
    FileUtil.delete(tempPath);
    if (!storage.renameTo(tempPath)) {
      throw new BookException(JSMsg.gettext(""String_Node_Str""));
    }
    book.setIndexStatus(IndexStatus.UNDONE);
  }
 catch (  IOException ex) {
    throw new BookException(JSMsg.gettext(""String_Node_Str""),ex);
  }
  FileUtil.delete(tempPath);
}","public void deleteIndex(Book book) throws BookException {
  File tempPath=null;
  try {
    Index index=INDEXES.get(book);
    if (index != null) {
      index.close();
    }
    File storage=NetUtil.getAsFile(getStorageArea(book));
    String finalCanonicalPath=storage.getCanonicalPath();
    tempPath=new File(finalCanonicalPath + '.' + IndexStatus.CREATING.toString());
    if (tempPath.exists()) {
      FileUtil.delete(tempPath);
    }
    tempPath=new File(finalCanonicalPath + '.' + IndexStatus.CREATING.toString());
    if (!storage.renameTo(tempPath)) {
      throw new BookException(JSMsg.gettext(""String_Node_Str""));
    }
    book.setIndexStatus(IndexStatus.UNDONE);
  }
 catch (  IOException ex) {
    throw new BookException(JSMsg.gettext(""String_Node_Str""),ex);
  }
  FileUtil.delete(tempPath);
}",0.8539167254763586
101476,"@Override public boolean contains(Key obj){
  Versification v11n=getVersification();
  for (  Key aKey : obj) {
    Verse verse=(Verse)aKey;
    if (!store.get(v11n.getOrdinal(verse))) {
      return false;
    }
  }
  return true;
}","@Override public boolean contains(Key obj){
  Versification v11n=getVersification();
  for (  Key aKey : obj) {
    Verse verse=(Verse)aKey;
    if (verse.getVerse() == 0) {
      continue;
    }
    if (!store.get(v11n.getOrdinal(verse))) {
      return false;
    }
  }
  return true;
}",0.8944337811900192
101477,"@Override public boolean contains(Key obj){
  Versification v11n=getVersification();
  for (  Key aKey : obj) {
    Verse verse=(Verse)aKey;
    if (!store.get(v11n.getOrdinal(verse))) {
      return false;
    }
  }
  return true;
}","@Override public boolean contains(Key obj){
  Versification v11n=getVersification();
  for (  Key aKey : obj) {
    Verse verse=(Verse)aKey;
    if (verse.getVerse() == 0) {
      continue;
    }
    if (!store.get(v11n.getOrdinal(verse))) {
      return false;
    }
  }
  return true;
}",0.8944337811900192
101478,"@Override public String getRawText(Key key) throws BookException {
  checkActive();
  Verse verse=KeyUtil.getVerse(key);
  try {
    String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
    Versification v11n=Versifications.instance().getVersification(v11nName);
    int index=v11n.getOrdinal(verse);
    Testament testament=v11n.getTestament(index);
    index=v11n.getTestamentOrdinal(index);
    RandomAccessFile idxRaf=otIdxRaf;
    if (testament == Testament.OLD) {
      idxRaf=ntIdxRaf;
    }
    if (idxRaf == null) {
      return ""String_Node_Str"";
    }
    return getEntry(key.getName(),testament,index);
  }
 catch (  IOException ex) {
    throw new BookException(JSMsg.gettext(""String_Node_Str"",verse.getName()),ex);
  }
}","@Override public String getRawText(Key key) throws BookException {
  checkActive();
  Verse verse=KeyUtil.getVerse(key);
  try {
    String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
    Versification v11n=Versifications.instance().getVersification(v11nName);
    int index=v11n.getOrdinal(verse);
    Testament testament=v11n.getTestament(index);
    index=v11n.getTestamentOrdinal(index);
    RandomAccessFile idxRaf=otIdxRaf;
    if (testament == Testament.NEW) {
      idxRaf=ntIdxRaf;
    }
    if (idxRaf == null) {
      return ""String_Node_Str"";
    }
    return getEntry(key.getName(),testament,index);
  }
 catch (  IOException ex) {
    throw new BookException(JSMsg.gettext(""String_Node_Str"",verse.getName()),ex);
  }
}",0.9961038961038962
101479,"@Override public boolean contains(Key key){
  checkActive();
  Verse verse=KeyUtil.getVerse(key);
  try {
    String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
    Versification v11n=Versifications.instance().getVersification(v11nName);
    int index=v11n.getOrdinal(verse);
    Testament testament=v11n.getTestament(index);
    index=v11n.getTestamentOrdinal(index);
    RandomAccessFile idxRaf=otIdxRaf;
    if (testament == Testament.OLD) {
      idxRaf=ntIdxRaf;
    }
    if (idxRaf == null) {
      return false;
    }
    DataIndex dataIndex=getIndex(idxRaf,index);
    return dataIndex.getSize() > 0;
  }
 catch (  IOException ex) {
    return false;
  }
}","@Override public boolean contains(Key key){
  checkActive();
  Verse verse=KeyUtil.getVerse(key);
  try {
    String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
    Versification v11n=Versifications.instance().getVersification(v11nName);
    int index=v11n.getOrdinal(verse);
    Testament testament=v11n.getTestament(index);
    index=v11n.getTestamentOrdinal(index);
    RandomAccessFile idxRaf=otIdxRaf;
    if (testament == Testament.NEW) {
      idxRaf=ntIdxRaf;
    }
    if (idxRaf == null) {
      return false;
    }
    DataIndex dataIndex=getIndex(idxRaf,index);
    return dataIndex.getSize() > 0;
  }
 catch (  IOException ex) {
    return false;
  }
}",0.9957325746799432
101480,"/** 
 * Get the text for an indexed entry in the book.
 * @param index the entry to get
 * @param name name of the entry
 * @param testament the testament for the entry
 * @return the text for the entry.
 * @throws IOException on a IO problem
 */
protected String getEntry(String name,Testament testament,long index) throws IOException {
  RandomAccessFile idxRaf=otIdxRaf;
  RandomAccessFile txtRaf=otTxtRaf;
  if (testament == Testament.OLD) {
    idxRaf=ntIdxRaf;
    txtRaf=ntTxtRaf;
  }
  DataIndex dataIndex=getIndex(idxRaf,index);
  int size=dataIndex.getSize();
  if (size == 0) {
    return ""String_Node_Str"";
  }
  if (size < 0) {
    log.error(""String_Node_Str"" + getBookMetaData().getInitials() + ""String_Node_Str""+ name+ ""String_Node_Str""+ size);
    return ""String_Node_Str"";
  }
  byte[] data=SwordUtil.readRAF(txtRaf,dataIndex.getOffset(),size);
  decipher(data);
  return SwordUtil.decode(name,data,getBookMetaData().getBookCharset());
}","/** 
 * Get the text for an indexed entry in the book.
 * @param index the entry to get
 * @param name name of the entry
 * @param testament the testament for the entry
 * @return the text for the entry.
 * @throws IOException on a IO problem
 */
protected String getEntry(String name,Testament testament,long index) throws IOException {
  RandomAccessFile idxRaf=otIdxRaf;
  RandomAccessFile txtRaf=otTxtRaf;
  if (testament == Testament.NEW) {
    idxRaf=ntIdxRaf;
    txtRaf=ntTxtRaf;
  }
  DataIndex dataIndex=getIndex(idxRaf,index);
  int size=dataIndex.getSize();
  if (size == 0) {
    return ""String_Node_Str"";
  }
  if (size < 0) {
    log.error(""String_Node_Str"" + getBookMetaData().getInitials() + ""String_Node_Str""+ name+ ""String_Node_Str""+ size);
    return ""String_Node_Str"";
  }
  byte[] data=SwordUtil.readRAF(txtRaf,dataIndex.getOffset(),size);
  decipher(data);
  return SwordUtil.decode(name,data,getBookMetaData().getBookCharset());
}",0.9968553459119496
101481,"@Override public void setAliasKey(Key alias,Key source) throws IOException {
  Verse aliasVerse=KeyUtil.getVerse(alias);
  Verse sourceVerse=KeyUtil.getVerse(source);
  String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  int aliasIndex=v11n.getOrdinal(aliasVerse);
  Testament testament=v11n.getTestament(aliasIndex);
  aliasIndex=v11n.getTestamentOrdinal(aliasIndex);
  RandomAccessFile idxRaf=otIdxRaf;
  if (testament == Testament.NEW) {
    idxRaf=ntIdxRaf;
  }
  int sourceOIndex=sourceVerse.getOrdinal();
  sourceOIndex=v11n.getTestamentOrdinal(sourceOIndex);
  DataIndex dataIndex=getIndex(idxRaf,sourceOIndex);
  updateIndexFile(idxRaf,aliasIndex,dataIndex.getOffset());
}","@Override public void setAliasKey(Key alias,Key source) throws IOException {
  Verse aliasVerse=KeyUtil.getVerse(alias);
  Verse sourceVerse=KeyUtil.getVerse(source);
  String v11nName=getBookMetaData().getProperty(ConfigEntryType.VERSIFICATION).toString();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  int aliasIndex=v11n.getOrdinal(aliasVerse);
  Testament testament=v11n.getTestament(aliasIndex);
  aliasIndex=v11n.getTestamentOrdinal(aliasIndex);
  RandomAccessFile idxRaf=otIdxRaf;
  if (testament == Testament.NEW) {
    idxRaf=ntIdxRaf;
  }
  int sourceOIndex=v11n.getOrdinal(sourceVerse);
  sourceOIndex=v11n.getTestamentOrdinal(sourceOIndex);
  DataIndex dataIndex=getIndex(idxRaf,sourceOIndex);
  updateIndexFile(idxRaf,aliasIndex,dataIndex.getOffset());
}",0.9685929648241206
101482,"/** 
 * Write out the object to the given ObjectOutputStream. There are 3 ways of doing this - according to the 3 implementations of Passage. <ul> <li>Distinct: If we write out a list if verse ordinals then the space used is 4 bytes per verse. <li>Bitwise: If we write out a bitmap then the space used is something like 31104/8 = 4k bytes. <li>Ranged: The we write a list of start/end pairs then the space used is 8 bytes per range. </ul> Since we can take our time about this section, we calculate the optimal storage method before we do the saving. If some methods come out equal first then bitwise is preferred, then distinct, then ranged, because I imagine that for speed of deserialization this is the sensible order. I've not tested it though.
 * @param out The stream to write our state to
 * @throws IOException if the read fails
 */
protected void writeObjectSupport(ObjectOutputStream out) throws IOException {
  int bitwise_size=getVersification().maximumOrdinal();
  int ranged_size=8 * countRanges(RestrictionType.NONE);
  int distinct_size=4 * countVerses();
  if (bitwise_size <= ranged_size && bitwise_size <= distinct_size) {
    out.writeInt(BITWISE);
    BitSet store=new BitSet(bitwise_size);
    for (    Key aKey : this) {
      Verse verse=(Verse)aKey;
      store.set(verse.getOrdinal() - 1);
    }
    out.writeObject(store);
  }
 else   if (distinct_size <= ranged_size) {
    out.writeInt(DISTINCT);
    out.writeInt(countVerses());
    for (    Key aKey : this) {
      Verse verse=(Verse)aKey;
      out.writeInt(verse.getOrdinal());
    }
  }
 else {
    out.writeInt(RANGED);
    out.writeInt(countRanges(RestrictionType.NONE));
    Iterator<Key> it=rangeIterator(RestrictionType.NONE);
    while (it.hasNext()) {
      VerseRange range=(VerseRange)it.next();
      out.writeInt(range.getStart().getOrdinal());
      out.writeInt(range.getCardinality());
    }
  }
}","/** 
 * Write out the object to the given ObjectOutputStream. There are 3 ways of doing this - according to the 3 implementations of Passage. <ul> <li>Distinct: If we write out a list if verse ordinals then the space used is 4 bytes per verse. <li>Bitwise: If we write out a bitmap then the space used is something like 31104/8 = 4k bytes. <li>Ranged: The we write a list of start/end pairs then the space used is 8 bytes per range. </ul> Since we can take our time about this section, we calculate the optimal storage method before we do the saving. If some methods come out equal first then bitwise is preferred, then distinct, then ranged, because I imagine that for speed of deserialization this is the sensible order. I've not tested it though.
 * @param out The stream to write our state to
 * @throws IOException if the read fails
 */
protected void writeObjectSupport(ObjectOutputStream out) throws IOException {
  out.writeUTF(v11n.getName());
  int bitwise_size=v11n.maximumOrdinal();
  int ranged_size=8 * countRanges(RestrictionType.NONE);
  int distinct_size=4 * countVerses();
  if (bitwise_size <= ranged_size && bitwise_size <= distinct_size) {
    out.writeInt(BITWISE);
    BitSet store=new BitSet(bitwise_size);
    for (    Key aKey : this) {
      Verse verse=(Verse)aKey;
      store.set(v11n.getOrdinal(verse) - 1);
    }
    out.writeObject(store);
  }
 else   if (distinct_size <= ranged_size) {
    out.writeInt(DISTINCT);
    out.writeInt(countVerses());
    for (    Key aKey : this) {
      Verse verse=(Verse)aKey;
      out.writeInt(v11n.getOrdinal(verse));
    }
  }
 else {
    out.writeInt(RANGED);
    out.writeInt(countRanges(RestrictionType.NONE));
    Iterator<Key> it=rangeIterator(RestrictionType.NONE);
    while (it.hasNext()) {
      VerseRange range=(VerseRange)it.next();
      out.writeInt(v11n.getOrdinal(range.getStart()));
      out.writeInt(range.getCardinality());
    }
  }
}",0.9722803347280334
101483,"/** 
 * Write out the object to the given ObjectOutputStream
 * @param is The stream to read our state from
 * @throws IOException if the read fails
 * @throws ClassNotFoundException If the read data is incorrect
 */
protected void readObjectSupport(ObjectInputStream is) throws IOException, ClassNotFoundException {
  raiseEventSuppresion();
  raiseNormalizeProtection();
  int type=is.readInt();
switch (type) {
case BITWISE:
    BitSet store=(BitSet)is.readObject();
  for (int i=0; i < v11n.maximumOrdinal(); i++) {
    if (store.get(i)) {
      add(v11n.decodeOrdinal(i + 1));
    }
  }
break;
case DISTINCT:
int verses=is.readInt();
for (int i=0; i < verses; i++) {
int ord=is.readInt();
add(v11n.decodeOrdinal(ord));
}
break;
case RANGED:
int ranges=is.readInt();
for (int i=0; i < ranges; i++) {
int ord=is.readInt();
int count=is.readInt();
add(RestrictionType.NONE.toRange(getVersification(),v11n.decodeOrdinal(ord),count));
}
break;
default :
throw new ClassCastException(JSOtherMsg.lookupText(""String_Node_Str""));
}
lowerEventSuppresionAndTest();
lowerNormalizeProtection();
}","/** 
 * Write out the object to the given ObjectOutputStream
 * @param is The stream to read our state from
 * @throws IOException if the read fails
 * @throws ClassNotFoundException If the read data is incorrect
 */
protected void readObjectSupport(ObjectInputStream is) throws IOException, ClassNotFoundException {
  raiseEventSuppresion();
  raiseNormalizeProtection();
  String v11nName=is.readUTF();
  v11n=Versifications.instance().getVersification(v11nName);
  int type=is.readInt();
switch (type) {
case BITWISE:
    BitSet store=(BitSet)is.readObject();
  for (int i=0; i < v11n.maximumOrdinal(); i++) {
    if (store.get(i)) {
      add(v11n.decodeOrdinal(i + 1));
    }
  }
break;
case DISTINCT:
int verses=is.readInt();
for (int i=0; i < verses; i++) {
int ord=is.readInt();
add(v11n.decodeOrdinal(ord));
}
break;
case RANGED:
int ranges=is.readInt();
for (int i=0; i < ranges; i++) {
int ord=is.readInt();
int count=is.readInt();
add(RestrictionType.NONE.toRange(getVersification(),v11n.decodeOrdinal(ord),count));
}
break;
default :
throw new ClassCastException(JSOtherMsg.lookupText(""String_Node_Str""));
}
lowerEventSuppresionAndTest();
lowerNormalizeProtection();
}",0.9590127809607756
101484,"/** 
 * iterate, amalgamating Verses into VerseRanges
 */
protected VerseRangeIterator(Versification v11n,Iterator<Key> it,RestrictionType restrict){
  this.referenceSystem=v11n;
  this.it=it;
  this.restrict=restrict;
  if (it.hasNext()) {
    next_verse=(Verse)it.next();
  }
  calculateNext();
}","/** 
 * iterate, amalgamating Verses into VerseRanges
 */
protected VerseRangeIterator(Versification v11n,Iterator<Key> it,RestrictionType restrict){
  this.v11n=v11n;
  this.it=it;
  this.restrict=restrict;
  if (it.hasNext()) {
    next_verse=(Verse)it.next();
  }
  calculateNext();
}",0.9675213675213676
101485,"/** 
 * Find the next VerseRange
 */
private void calculateNext(){
  if (next_verse == null) {
    next_range=null;
    return;
  }
  Verse start=next_verse;
  Verse end=next_verse;
  findnext:   while (true) {
    if (!it.hasNext()) {
      next_verse=null;
      break;
    }
    next_verse=(Verse)it.next();
    if (!end.adjacentTo(next_verse)) {
      break;
    }
    if (!restrict.isSameScope(end,next_verse)) {
      break findnext;
    }
    end=next_verse;
  }
  next_range=new VerseRange(referenceSystem,start,end);
}","/** 
 * Find the next VerseRange
 */
private void calculateNext(){
  if (next_verse == null) {
    next_range=null;
    return;
  }
  Verse start=next_verse;
  Verse end=next_verse;
  findnext:   while (true) {
    if (!it.hasNext()) {
      next_verse=null;
      break;
    }
    next_verse=(Verse)it.next();
    if (!v11n.adjacentTo(end,next_verse)) {
      break;
    }
    if (!restrict.isSameScope(v11n,end,next_verse)) {
      break findnext;
    }
    end=next_verse;
  }
  next_range=new VerseRange(v11n,start,end);
}",0.9610636277302944
101486,"public void add(Key obj){
  optimizeWrites();
  Verse firstVerse=null;
  Verse lastVerse=null;
  for (  Key aKey : obj) {
    lastVerse=(Verse)aKey;
    if (firstVerse == null) {
      firstVerse=lastVerse;
    }
    store.set(lastVerse.getOrdinal());
  }
  if (suppressEvents == 0) {
    fireIntervalAdded(this,firstVerse,lastVerse);
  }
}","public void add(Key obj){
  Versification v11n=getVersification();
  optimizeWrites();
  Verse firstVerse=null;
  Verse lastVerse=null;
  for (  Key aKey : obj) {
    lastVerse=(Verse)aKey;
    if (firstVerse == null) {
      firstVerse=lastVerse;
    }
    store.set(v11n.getOrdinal(lastVerse));
  }
  if (suppressEvents == 0) {
    fireIntervalAdded(this,firstVerse,lastVerse);
  }
}",0.913103448275862
101487,"/** 
 * Call the support mechanism in AbstractPassage
 * @param out The stream to write our state to
 * @serialData Write the ordinal number of this verse
 * @see AbstractPassage#writeObjectSupport(ObjectOutputStream)
 * @throws IOException if the read fails
 */
private void writeObject(ObjectOutputStream out) throws IOException {
  out.defaultWriteObject();
  writeObjectSupport(out);
}","/** 
 * Call the support mechanism in AbstractPassage
 * @param out The stream to write our state to
 * @serialData Write the ordinal number of this verse
 * @see AbstractPassage#writeObjectSupport(ObjectOutputStream)
 * @throws IOException if the read fails
 */
private void writeObject(ObjectOutputStream out) throws IOException {
  out.defaultWriteObject();
  out.writeUTF(getVersification().getName());
  writeObjectSupport(out);
}",0.9441747572815534
101488,"/** 
 * Call the support mechanism in AbstractPassage
 * @param in The stream to read our state from
 * @throws IOException if the read fails
 * @throws ClassNotFoundException If the read data is incorrect
 * @serialData Write the ordinal number of this verse
 * @see AbstractPassage#readObjectSupport(ObjectInputStream)
 */
private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  optimizeWrites();
  in.defaultReadObject();
  store=new BitSet(getVersification().maximumOrdinal() + 1);
  readObjectSupport(in);
}","/** 
 * Call the support mechanism in AbstractPassage
 * @param in The stream to read our state from
 * @throws IOException if the read fails
 * @throws ClassNotFoundException If the read data is incorrect
 * @serialData Write the ordinal number of this verse
 * @see AbstractPassage#readObjectSupport(ObjectInputStream)
 */
private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  optimizeWrites();
  in.defaultReadObject();
  String v11nName=in.readUTF();
  Versification v11n=Versifications.instance().getVersification(v11nName);
  store=new BitSet(v11n.maximumOrdinal() + 1);
  readObjectSupport(in);
}",0.8849706129303107
101489,"@Override public boolean contains(Key obj){
  for (  Key aKey : obj) {
    Verse verse=(Verse)aKey;
    if (!store.get(verse.getOrdinal())) {
      return false;
    }
  }
  return true;
}","@Override public boolean contains(Key obj){
  Versification v11n=getVersification();
  for (  Key aKey : obj) {
    Verse verse=(Verse)aKey;
    if (!store.get(v11n.getOrdinal(verse))) {
      return false;
    }
  }
  return true;
}",0.8741092636579573
101490,"@Override public void retainAll(Key key){
  Passage that=KeyUtil.getPassage(key);
  optimizeWrites();
  BitSet thatStore=null;
  if (that instanceof BitwisePassage) {
    thatStore=((BitwisePassage)that).store;
  }
 else {
    thatStore=new BitSet(getVersification().maximumOrdinal() + 1);
    for (    Key aKey : that) {
      int ord=((Verse)aKey).getOrdinal();
      if (store.get(ord)) {
        thatStore.set(ord);
      }
    }
  }
  store.and(thatStore);
  fireIntervalRemoved(this,null,null);
}","@Override public void retainAll(Key key){
  Versification v11n=getVersification();
  Passage that=KeyUtil.getPassage(key);
  optimizeWrites();
  BitSet thatStore=null;
  if (that instanceof BitwisePassage) {
    thatStore=((BitwisePassage)that).store;
  }
 else {
    thatStore=new BitSet(v11n.maximumOrdinal() + 1);
    for (    Key aKey : that) {
      int ord=v11n.getOrdinal((Verse)aKey);
      if (store.get(ord)) {
        thatStore.set(ord);
      }
    }
  }
  store.and(thatStore);
  fireIntervalRemoved(this,null,null);
}",0.9119070667957404
101491,"/** 
 * Constructs a PassageEvent object.
 * @param source the source Object (typically <code>this</code>)
 * @param versesChanged an int specifying VERSES_CHANGED, VERSES_ADDED, VERSES_REMOVED
 * @param lower an int specifying the bottom of a range
 * @param upper an int specifying the top of a range
 */
public PassageEvent(Object source,EventType versesChanged,Verse lower,Verse upper){
  super(source);
  this.type=versesChanged;
  this.lower=lower;
  this.upper=upper;
  if (this.lower == null) {
    this.lower=VERSE_LOWEST;
  }
  if (this.upper == null) {
    this.upper=VERSE_HIGHEST;
  }
}","/** 
 * Constructs a PassageEvent object.
 * @param source the source Object (typically <code>this</code>)
 * @param versesChanged an int specifying VERSES_CHANGED, VERSES_ADDED, VERSES_REMOVED
 * @param lower an int specifying the bottom of a range
 * @param upper an int specifying the top of a range
 */
public PassageEvent(Object source,EventType versesChanged,Verse lower,Verse upper){
  super(source);
  this.type=versesChanged;
  this.lower=lower;
  this.upper=upper;
}",0.8855813953488372
101492,"/** 
 * Convert us to a binary representation. There are some distinctly endianist happenings here, but that is OK because we are reading the stuff we write here just below.
 * @param ref The Passage to convert
 * @return a byte array
 */
static byte[] toBinaryRepresentation(Passage ref){
  int maxOrdinal=ref.getVersification().maximumOrdinal();
  int verses=ref.countVerses();
  int ranges=ref.countRanges(RestrictionType.NONE);
  int bitwise_size=maxOrdinal / 8;
  int ranged_size=(ranges * 4) + 1;
  int distinct_size=(verses * 2) + 1;
  if (bitwise_size <= ranged_size && bitwise_size <= distinct_size) {
    int array_size=binarySize(AbstractPassage.METHOD_COUNT) + (maxOrdinal / 8) + 1;
    byte[] buffer=new byte[array_size];
    int index=0;
    index+=toBinary(buffer,index,AbstractPassage.BITWISE,AbstractPassage.METHOD_COUNT);
    for (    Key aKey : ref) {
      Verse verse=(Verse)aKey;
      int ord=verse.getOrdinal();
      int idx0=(ord / 8) + index;
      int bit=(ord % 8) - 1;
      buffer[idx0]|=1 << bit;
    }
    return buffer;
  }
 else   if (distinct_size <= ranged_size) {
    int array_size=binarySize(AbstractPassage.METHOD_COUNT) + binarySize(maxOrdinal) + (verses * binarySize(maxOrdinal));
    byte[] buffer=new byte[array_size];
    int index=0;
    index+=toBinary(buffer,index,AbstractPassage.DISTINCT,AbstractPassage.METHOD_COUNT);
    index+=toBinary(buffer,index,verses,maxOrdinal);
    for (    Key aKey : ref) {
      Verse verse=(Verse)aKey;
      int ord=verse.getOrdinal();
      index+=toBinary(buffer,index,ord,maxOrdinal);
    }
    return buffer;
  }
 else {
    int array_size=binarySize(AbstractPassage.METHOD_COUNT) + binarySize(maxOrdinal / 2) + (2 * ranges * binarySize(maxOrdinal));
    byte[] buffer=new byte[array_size];
    int index=0;
    index+=toBinary(buffer,index,AbstractPassage.RANGED,AbstractPassage.METHOD_COUNT);
    index+=toBinary(buffer,index,ranges,maxOrdinal / 2);
    Iterator<Key> it=ref.rangeIterator(RestrictionType.NONE);
    while (it.hasNext()) {
      VerseRange range=(VerseRange)it.next();
      index+=toBinary(buffer,index,range.getStart().getOrdinal(),maxOrdinal);
      index+=toBinary(buffer,index,range.getCardinality(),maxOrdinal);
    }
    return buffer;
  }
}","/** 
 * Convert us to a binary representation. There are some distinctly endianist happenings here, but that is OK because we are reading the stuff we write here just below.
 * @param ref The Passage to convert
 * @return a byte array
 */
static byte[] toBinaryRepresentation(Passage ref){
  Versification v11n=ref.getVersification();
  int maxOrdinal=v11n.maximumOrdinal();
  int verses=ref.countVerses();
  int ranges=ref.countRanges(RestrictionType.NONE);
  int bitwise_size=maxOrdinal / 8;
  int ranged_size=(ranges * 4) + 1;
  int distinct_size=(verses * 2) + 1;
  if (bitwise_size <= ranged_size && bitwise_size <= distinct_size) {
    int array_size=binarySize(AbstractPassage.METHOD_COUNT) + (maxOrdinal / 8) + 1;
    byte[] buffer=new byte[array_size];
    int index=0;
    index+=toBinary(buffer,index,AbstractPassage.BITWISE,AbstractPassage.METHOD_COUNT);
    for (    Key aKey : ref) {
      Verse verse=(Verse)aKey;
      int ord=v11n.getOrdinal(verse);
      int idx0=(ord / 8) + index;
      int bit=(ord % 8) - 1;
      buffer[idx0]|=1 << bit;
    }
    return buffer;
  }
 else   if (distinct_size <= ranged_size) {
    int array_size=binarySize(AbstractPassage.METHOD_COUNT) + binarySize(maxOrdinal) + (verses * binarySize(maxOrdinal));
    byte[] buffer=new byte[array_size];
    int index=0;
    index+=toBinary(buffer,index,AbstractPassage.DISTINCT,AbstractPassage.METHOD_COUNT);
    index+=toBinary(buffer,index,verses,maxOrdinal);
    for (    Key aKey : ref) {
      Verse verse=(Verse)aKey;
      int ord=v11n.getOrdinal(verse);
      index+=toBinary(buffer,index,ord,maxOrdinal);
    }
    return buffer;
  }
 else {
    int array_size=binarySize(AbstractPassage.METHOD_COUNT) + binarySize(maxOrdinal / 2) + (2 * ranges * binarySize(maxOrdinal));
    byte[] buffer=new byte[array_size];
    int index=0;
    index+=toBinary(buffer,index,AbstractPassage.RANGED,AbstractPassage.METHOD_COUNT);
    index+=toBinary(buffer,index,ranges,maxOrdinal / 2);
    Iterator<Key> it=ref.rangeIterator(RestrictionType.NONE);
    while (it.hasNext()) {
      VerseRange range=(VerseRange)it.next();
      index+=toBinary(buffer,index,v11n.getOrdinal(range.getStart()),maxOrdinal);
      index+=toBinary(buffer,index,range.getCardinality(),maxOrdinal);
    }
    return buffer;
  }
}",0.9452145214521452
101493,"/** 
 * A space separate string containing osisID from the reference element.
 * @return The references in the text
 */
public static String getReferences(Element root){
  KeyFactory keyf=PassageKeyFactory.instance();
  Key collector=keyf.createEmptyKeyList();
  for (  Content content : getDeepContent(root,OSISUtil.OSIS_ELEMENT_TITLE)) {
    Element ele=(Element)content;
    String attr=ele.getAttributeValue(OSISUtil.OSIS_ATTR_REF);
    if (attr != null) {
      try {
        Key key=keyf.getKey(attr);
        collector.addAll(key);
      }
 catch (      NoSuchKeyException e) {
        log.warn(""String_Node_Str"" + attr,e);
      }
    }
  }
  return collector.getOsisID();
}","/** 
 * A space separate string containing osisID from the reference element.
 * @return The references in the text
 */
public static String getReferences(Element root){
  KeyFactory keyf=PassageKeyFactory.instance();
  Key collector=keyf.createEmptyKeyList();
  for (  Content content : getDeepContent(root,OSISUtil.OSIS_ELEMENT_REFERENCE)) {
    Element ele=(Element)content;
    String attr=ele.getAttributeValue(OSISUtil.OSIS_ATTR_REF);
    if (attr != null) {
      try {
        Key key=keyf.getKey(attr);
        collector.addAll(key);
      }
 catch (      NoSuchKeyException e) {
        log.warn(""String_Node_Str"" + attr,e);
      }
    }
  }
  return collector.getOsisID();
}",0.9912280701754386
101494,"/** 
 * The text of non-reference notes.
 * @return The references in the text
 */
public static String getNotes(Element root){
  StringBuilder buffer=new StringBuilder();
  for (  Content content : getDeepContent(root,OSISUtil.OSIS_ELEMENT_TITLE)) {
    Element ele=(Element)content;
    String attr=ele.getAttributeValue(OSISUtil.OSIS_ATTR_TYPE);
    if (attr == null || !attr.equals(NOTETYPE_REFERENCE)) {
      if (buffer.length() > 0) {
        buffer.append(' ');
      }
      buffer.append(OSISUtil.getTextContent(ele.getContent()));
    }
  }
  return buffer.toString();
}","/** 
 * The text of non-reference notes.
 * @return The references in the text
 */
public static String getNotes(Element root){
  StringBuilder buffer=new StringBuilder();
  for (  Content content : getDeepContent(root,OSISUtil.OSIS_ELEMENT_NOTE)) {
    Element ele=(Element)content;
    String attr=ele.getAttributeValue(OSISUtil.OSIS_ATTR_TYPE);
    if (attr == null || !attr.equals(NOTETYPE_REFERENCE)) {
      if (buffer.length() > 0) {
        buffer.append(' ');
      }
      buffer.append(OSISUtil.getTextContent(ele.getContent()));
    }
  }
  return buffer.toString();
}",0.9939707149009476
101495,"/** 
 * A space separate string containing Strong's numbers.
 * @return The Strong's numbers in the text
 */
public static String getStrongsNumbers(Element root){
  StringBuilder buffer=new StringBuilder();
  for (  Content content : getDeepContent(root,OSISUtil.OSIS_ELEMENT_TITLE)) {
    Element ele=(Element)content;
    String attr=ele.getAttributeValue(OSISUtil.ATTRIBUTE_W_LEMMA);
    if (attr != null) {
      Matcher matcher=strongsNumberPattern.matcher(attr);
      while (matcher.find()) {
        String strongsNum=matcher.group(1);
        if (buffer.length() > 0) {
          buffer.append(' ');
        }
        buffer.append(strongsNum);
      }
    }
  }
  return buffer.toString().trim();
}","/** 
 * A space separate string containing Strong's numbers.
 * @return The Strong's numbers in the text
 */
public static String getStrongsNumbers(Element root){
  StringBuilder buffer=new StringBuilder();
  for (  Content content : getDeepContent(root,OSISUtil.OSIS_ELEMENT_W)) {
    Element ele=(Element)content;
    String attr=ele.getAttributeValue(OSISUtil.ATTRIBUTE_W_LEMMA);
    if (attr != null) {
      Matcher matcher=strongsNumberPattern.matcher(attr);
      while (matcher.find()) {
        String strongsNum=matcher.group(1);
        if (buffer.length() > 0) {
          buffer.append(' ');
        }
        buffer.append(strongsNum);
      }
    }
  }
  return buffer.toString().trim();
}",0.9957507082152974
101496,"public void testAddConfigEntry(){
  ConfigEntryTable table=new ConfigEntryTable(""String_Node_Str"");
  assertNotNull(table);
  table.add(ConfigEntryType.LANG,""String_Node_Str"");
  assertEquals(""String_Node_Str"",((Language)table.getValue(ConfigEntryType.LANG)).getCode());
}","public void testAddConfigEntry(){
  ConfigEntryTable table=new ConfigEntryTable(""String_Node_Str"");
  assertNotNull(table);
  table.add(ConfigEntryType.LANG,""String_Node_Str"");
  assertEquals(""String_Node_Str"",((Language)table.getValue(ConfigEntryType.LANG)).getCode());
  FeatureType feature=FeatureType.STRONGS_NUMBERS;
  table.add(ConfigEntryType.FEATURE,FeatureType.STRONGS_NUMBERS.toString());
  if (table.match(ConfigEntryType.FEATURE,feature.toString())) {
    assertTrue(""String_Node_Str"",true);
  }
 else {
    StringBuilder buffer=new StringBuilder((String)table.getValue(ConfigEntryType.SOURCE_TYPE));
    buffer.append(feature);
    if (table.match(ConfigEntryType.GLOBAL_OPTION_FILTER,buffer.toString())) {
      assertTrue(""String_Node_Str"",true);
    }
 else {
      assertTrue(""String_Node_Str"",table.match(ConfigEntryType.GLOBAL_OPTION_FILTER,feature.toString()));
    }
  }
  Book book=Books.installed().getBook(""String_Node_Str"");
  assertTrue(""String_Node_Str"",book.getBookMetaData().hasFeature(FeatureType.STRONGS_NUMBERS));
  try {
    Key key=book.getKey(""String_Node_Str"");
    BookData data=new BookData(book,key);
    try {
      Element osis=data.getOsisFragment();
      String strongsNumbers=OSISUtil.getStrongsNumbers(osis);
      assertTrue(""String_Node_Str"",strongsNumbers.length() > 0);
    }
 catch (    BookException e) {
      fail(""String_Node_Str"");
    }
  }
 catch (  NoSuchKeyException e1) {
    fail(""String_Node_Str"");
  }
}",0.312823461759632
101497,"@Override public boolean contains(Key key){
  checkActive();
  try {
    DataPolice.setKey(key);
    TreeNode node=find(key);
    if (node == null) {
      return false;
    }
    byte[] userData=node.getUserData();
    return userData.length == 8;
  }
 catch (  IOException e) {
    return false;
  }
 finally {
    DataPolice.setKey(null);
  }
}","@Override public boolean contains(Key key){
  checkActive();
  try {
    DataPolice.setKey(key);
    return null != find(key);
  }
 catch (  IOException e) {
    return false;
  }
 finally {
    DataPolice.setKey(null);
  }
}",0.7062937062937062
101498,"@Override public boolean contains(Key key){
  checkActive();
  try {
    DataPolice.setKey(key);
    TreeNode node=find(key);
    byte[] userData=node.getUserData();
    return userData.length == 8;
  }
 catch (  IOException e) {
    return false;
  }
 finally {
    DataPolice.setKey(null);
  }
}","@Override public boolean contains(Key key){
  checkActive();
  try {
    DataPolice.setKey(key);
    TreeNode node=find(key);
    if (node == null) {
      return false;
    }
    byte[] userData=node.getUserData();
    return userData.length == 8;
  }
 catch (  IOException e) {
    return false;
  }
 finally {
    DataPolice.setKey(null);
  }
}",0.922360248447205
101499,"/** 
 * Turn the string into a list of tags in the order that they appear in the original string.
 */
private List parseTags(Book book,Key key,String aRemains){
  String remains=aRemains;
  List taglist=new ArrayList();
  while (true) {
    int ltpos=remains.indexOf('<');
    int gtpos=remains.indexOf('>',ltpos + 1);
    if (ltpos == -1 || gtpos == -1) {
      if (ltpos >= 0 && ltpos < remains.length() && Character.isUpperCase(remains.charAt(ltpos + 1))) {
        DataPolice.report(""String_Node_Str"" + remains);
      }
      if (gtpos != -1 && ltpos >= 0) {
        DataPolice.report(""String_Node_Str"" + remains);
      }
      int pos=Math.max(ltpos,gtpos) + 1;
      if (pos == 0 || pos == remains.length()) {
        taglist.add(GBFTagBuilders.getTextTag(remains));
        break;
      }
      taglist.add(GBFTagBuilders.getTextTag(remains.substring(0,pos)));
      remains=remains.substring(pos);
      continue;
    }
    char firstChar=remains.charAt(ltpos + 1);
    if (!Character.isUpperCase(firstChar)) {
      taglist.add(GBFTagBuilders.getTextTag(remains.substring(0,gtpos + 1)));
      remains=remains.substring(gtpos + 1);
      continue;
    }
    String start=remains.substring(0,ltpos);
    int strLen=start.length();
    if (strLen > 0) {
      int beginIndex=0;
      boolean inSepStr=SEPARATORS.indexOf(start.charAt(0)) >= 0;
      for (int i=1; inSepStr && i < strLen; i++) {
        char currentChar=start.charAt(i);
        if (!(SEPARATORS.indexOf(currentChar) >= 0)) {
          taglist.add(GBFTagBuilders.getTextTag(start.substring(beginIndex,i)));
          beginIndex=i;
          inSepStr=false;
        }
      }
      if (beginIndex < strLen) {
        taglist.add(GBFTagBuilders.getTextTag(start.substring(beginIndex)));
      }
    }
    String tag=remains.substring(ltpos + 1,gtpos);
    int length=tag.length();
    if (length > 0) {
      Tag reply=GBFTagBuilders.getTag(book,key,tag);
      if (reply != null) {
        taglist.add(reply);
      }
    }
    remains=remains.substring(gtpos + 1);
  }
  return taglist;
}","/** 
 * Turn the string into a list of tags in the order that they appear in the original string.
 */
private List parseTags(Book book,Key key,String aRemains){
  String remains=aRemains;
  List taglist=new ArrayList();
  while (true) {
    int ltpos=remains.indexOf('<');
    int gtpos=remains.indexOf('>',ltpos + 1);
    if (ltpos == -1 || gtpos == -1) {
      if (ltpos >= 0 && ltpos < remains.length() + 1 && Character.isUpperCase(remains.charAt(ltpos + 1))) {
        DataPolice.report(""String_Node_Str"" + remains);
      }
      if (gtpos != -1 && ltpos >= 0) {
        DataPolice.report(""String_Node_Str"" + remains);
      }
      int pos=Math.max(ltpos,gtpos) + 1;
      if (pos == 0 || pos == remains.length()) {
        taglist.add(GBFTagBuilders.getTextTag(remains));
        break;
      }
      taglist.add(GBFTagBuilders.getTextTag(remains.substring(0,pos)));
      remains=remains.substring(pos);
      continue;
    }
    char firstChar=remains.charAt(ltpos + 1);
    if (!Character.isUpperCase(firstChar)) {
      taglist.add(GBFTagBuilders.getTextTag(remains.substring(0,gtpos + 1)));
      remains=remains.substring(gtpos + 1);
      continue;
    }
    String start=remains.substring(0,ltpos);
    int strLen=start.length();
    if (strLen > 0) {
      int beginIndex=0;
      boolean inSepStr=SEPARATORS.indexOf(start.charAt(0)) >= 0;
      for (int i=1; inSepStr && i < strLen; i++) {
        char currentChar=start.charAt(i);
        if (!(SEPARATORS.indexOf(currentChar) >= 0)) {
          taglist.add(GBFTagBuilders.getTextTag(start.substring(beginIndex,i)));
          beginIndex=i;
          inSepStr=false;
        }
      }
      if (beginIndex < strLen) {
        taglist.add(GBFTagBuilders.getTextTag(start.substring(beginIndex)));
      }
    }
    String tag=remains.substring(ltpos + 1,gtpos);
    int length=tag.length();
    if (length > 0) {
      Tag reply=GBFTagBuilders.getTag(book,key,tag);
      if (reply != null) {
        taglist.add(reply);
      }
    }
    remains=remains.substring(gtpos + 1);
  }
  return taglist;
}",0.999031007751938
101500,"/** 
 * Build's a SWORD conf file as a string. The result is not identical to the original, cleaning up problems in the original and re-arranging the entries into a predictable order.
 * @return the well-formed conf.
 */
public String toConf(){
  StringBuffer buf=new StringBuffer();
  if (value != null) {
    buf.append(getName());
    buf.append('=');
    if (allowsContinuation()) {
      String text=value.toString();
      String[] lines=StringUtil.splitAll(text,'\n');
      for (int i=0; i < lines.length; i++) {
        if (i > 0) {
          buf.append(""String_Node_Str"");
        }
        buf.append(lines[i]);
      }
      buf.append('\n');
    }
 else {
      buf.append(value.toString());
      buf.append('\n');
    }
  }
 else   if (type.equals(ConfigEntryType.CIPHER_KEY)) {
    buf.append(getName());
    buf.append('=');
  }
  if (values != null) {
    if (type.equals(ConfigEntryType.HISTORY)) {
      Iterator iter=values.iterator();
      while (iter.hasNext()) {
        String text=(String)iter.next();
        buf.append(getName());
        buf.append('_');
        buf.append(text.replaceFirst(""String_Node_Str"",""String_Node_Str""));
        buf.append('\n');
      }
    }
 else {
      Iterator iter=values.iterator();
      while (iter.hasNext()) {
        String text=(String)iter.next();
        buf.append(getName());
        buf.append('=');
        buf.append(text);
        buf.append('\n');
      }
    }
  }
  return buf.toString();
}","/** 
 * Build's a SWORD conf file as a string. The result is not identical to the original, cleaning up problems in the original and re-arranging the entries into a predictable order.
 * @return the well-formed conf.
 */
public String toConf(){
  StringBuffer buf=new StringBuffer();
  if (value != null) {
    buf.append(getName());
    buf.append('=');
    if (allowsContinuation()) {
      String text=getConfValue(value);
      String[] lines=StringUtil.splitAll(text,'\n');
      for (int i=0; i < lines.length; i++) {
        if (i > 0) {
          buf.append(""String_Node_Str"");
        }
        buf.append(lines[i]);
      }
      buf.append('\n');
    }
 else {
      buf.append(getConfValue(value));
      buf.append('\n');
    }
  }
 else   if (type.equals(ConfigEntryType.CIPHER_KEY)) {
    buf.append(getName());
    buf.append('=');
  }
  if (values != null) {
    if (type.equals(ConfigEntryType.HISTORY)) {
      Iterator iter=values.iterator();
      while (iter.hasNext()) {
        String text=(String)iter.next();
        buf.append(getName());
        buf.append('_');
        buf.append(text.replaceFirst(""String_Node_Str"",""String_Node_Str""));
        buf.append('\n');
      }
    }
 else {
      Iterator iter=values.iterator();
      while (iter.hasNext()) {
        buf.append(getName());
        buf.append('=');
        buf.append(getConfValue(iter.next()));
        buf.append('\n');
      }
    }
  }
  return buf.toString();
}",0.9167235494880546
101501,public abstract boolean contains(Key key);,"/** 
 * Determine whether this Book contains the key in question
 * @param key The key whose presense is desired.
 * @return true if the Book contains the key
 */
public abstract boolean contains(Key key);",0.340080971659919
101502,"public void create() throws IOException, BookException {
  File dataPath=new File(getExpandedDataPath());
  if (!dataPath.exists()) {
    if (!dataPath.mkdirs()) {
      throw new IOException(""String_Node_Str"");
    }
  }
}","/** 
 * Create the directory to hold the Book if it does not exist.
 * @throws IOException
 * @throws BookException
 */
public void create() throws IOException, BookException {
  File dataPath=new File(getExpandedDataPath());
  if (!dataPath.exists()) {
    if (!dataPath.mkdirs()) {
      throw new IOException(""String_Node_Str"");
    }
  }
}",0.7879858657243817
101503,"private byte[] readTextDataFile(File dataFile) throws IOException {
  try {
    byte[] textData=new byte[(int)dataFile.length()];
    BufferedInputStream inStream=new BufferedInputStream(new FileInputStream(dataFile));
    inStream.read(textData);
    inStream.close();
    return textData;
  }
 catch (  FileNotFoundException ex) {
    log.error(ex.getMessage());
    throw new IOException(""String_Node_Str"" + dataFile.getName());
  }
}","private byte[] readTextDataFile(File dataFile) throws IOException {
  BufferedInputStream inStream=null;
  try {
    int len=(int)dataFile.length();
    byte[] textData=new byte[len];
    inStream=new BufferedInputStream(new FileInputStream(dataFile));
    if (inStream.read(textData) != len) {
      log.error(""String_Node_Str"" + len + ""String_Node_Str"");
      throw new IOException(""String_Node_Str"" + len + ""String_Node_Str"");
    }
    return textData;
  }
 catch (  FileNotFoundException ex) {
    log.error(ex.getMessage());
    throw new IOException(""String_Node_Str"" + dataFile.getName());
  }
 finally {
    if (inStream != null) {
      inStream.close();
    }
  }
}",0.3518850987432675
101504,"private void initIncFile(){
  try {
    File tempIncfile=new File(getExpandedDataPath().getPath() + File.separator + ""String_Node_Str"");
    if (tempIncfile.exists()) {
      this.incfile=tempIncfile;
    }
  }
 catch (  BookException e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
}","private void initIncFile(){
  try {
    File tempIncfile=new File(getExpandedDataPath().getPath() + File.separator + INCFILE);
    if (tempIncfile.exists()) {
      this.incfile=tempIncfile;
    }
  }
 catch (  BookException e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
}",0.9621993127147768
101505,"private void createDataFiles() throws IOException, BookException {
  String path=getExpandedDataPath().getPath();
  File otTextFile=new File(path + File.separator + SwordConstants.FILE_OT);
  otTextFile.createNewFile();
  File ntTextFile=new File(path + File.separator + SwordConstants.FILE_NT);
  ntTextFile.createNewFile();
}","private void createDataFiles() throws IOException, BookException {
  String path=getExpandedDataPath().getPath();
  File otTextFile=new File(path + File.separator + SwordConstants.FILE_OT);
  if (!otTextFile.exists() && !otTextFile.createNewFile()) {
    throw new IOException(""String_Node_Str"");
  }
  File ntTextFile=new File(path + File.separator + SwordConstants.FILE_NT);
  if (!ntTextFile.exists() && !ntTextFile.createNewFile()) {
    throw new IOException(""String_Node_Str"");
  }
}",0.8014705882352942
101506,"private File createDataTextFile(int index) throws BookException, IOException {
  String dataPath=getExpandedDataPath().getPath();
  dataPath+=File.separator + new DecimalFormat(""String_Node_Str"").format(index);
  File dataFile=new File(dataPath);
  if (!dataFile.createNewFile()) {
    log.info(""String_Node_Str"" + dataPath);
  }
  return dataFile;
}","private File createDataTextFile(int index) throws BookException, IOException {
  String dataPath=getExpandedDataPath().getPath();
  dataPath+=File.separator + new DecimalFormat(""String_Node_Str"").format(index);
  File dataFile=new File(dataPath);
  if (!dataFile.exists() && !dataFile.createNewFile()) {
    throw new IOException(""String_Node_Str"");
  }
  return dataFile;
}",0.914364640883978
101507,"private void createIndexFiles() throws IOException, BookException {
  String path=getExpandedDataPath().getPath();
  File otIndexFile=new File(path + File.separator + SwordConstants.FILE_OT+ SwordConstants.EXTENSION_VSS);
  otIndexFile.createNewFile();
  File ntIndexFile=new File(path + File.separator + SwordConstants.FILE_NT+ SwordConstants.EXTENSION_VSS);
  ntIndexFile.createNewFile();
}","private void createIndexFiles() throws IOException, BookException {
  String path=getExpandedDataPath().getPath();
  File otIndexFile=new File(path + File.separator + SwordConstants.FILE_OT+ SwordConstants.EXTENSION_VSS);
  if (!otIndexFile.exists() && !otIndexFile.createNewFile()) {
    throw new IOException(""String_Node_Str"");
  }
  File ntIndexFile=new File(path + File.separator + SwordConstants.FILE_NT+ SwordConstants.EXTENSION_VSS);
  if (!ntIndexFile.exists() && !ntIndexFile.createNewFile()) {
    throw new IOException(""String_Node_Str"");
  }
}",0.7172995780590717
101508,"private void createIncfile() throws IOException, BookException {
  File tempIncfile=new File(getExpandedDataPath().getPath() + File.separator + ""String_Node_Str"");
  tempIncfile.createNewFile();
  this.incfile=tempIncfile;
}","private void createIncfile() throws IOException, BookException {
  File tempIncfile=new File(getExpandedDataPath().getPath() + File.separator + INCFILE);
  if (!tempIncfile.exists() && !tempIncfile.createNewFile()) {
    throw new IOException(""String_Node_Str"");
  }
  this.incfile=tempIncfile;
}",0.65
101509,"protected void updateDataFile(int testament,long ordinal) throws IOException {
  StringBuffer buf=new StringBuffer();
  buf.append(new DecimalFormat(""String_Node_Str"").format(ordinal));
  buf.append(""String_Node_Str"");
  String fileName=buf.toString();
  BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(txtFile[testament],true));
  bos.write(fileName.getBytes());
  bos.close();
}","protected void updateDataFile(int testament,long ordinal) throws IOException {
  StringBuffer buf=new StringBuffer();
  buf.append(new DecimalFormat(""String_Node_Str"").format(ordinal));
  buf.append(""String_Node_Str"");
  String fileName=buf.toString();
  BufferedOutputStream bos=null;
  try {
    bos=new BufferedOutputStream(new FileOutputStream(txtFile[testament],true));
    bos.write(fileName.getBytes());
  }
  finally {
    if (bos != null) {
      bos.close();
    }
  }
}",0.912797281993205
101510,"private int readIncfile() throws IOException {
  int ret=-1;
  if (this.incfile != null) {
    FileInputStream fis=null;
    try {
      fis=new FileInputStream(this.incfile);
      byte[] buffer=new byte[4];
      fis.read(buffer);
      ret=SwordUtil.decodeLittleEndian32(buffer,0);
    }
 catch (    FileNotFoundException e) {
      log.error(""String_Node_Str"");
      log.error(e.getMessage());
    }
 finally {
      fis.close();
    }
  }
  return ret;
}","private int readIncfile() throws IOException {
  int ret=-1;
  if (this.incfile != null) {
    FileInputStream fis=null;
    try {
      fis=new FileInputStream(this.incfile);
      byte[] buffer=new byte[4];
      if (fis.read(buffer) != 4) {
        log.error(""String_Node_Str"");
        throw new IOException(""String_Node_Str"");
      }
      ret=SwordUtil.decodeLittleEndian32(buffer,0);
    }
 catch (    FileNotFoundException e) {
      log.error(""String_Node_Str"");
      log.error(e.getMessage());
    }
 finally {
      if (fis != null) {
        fis.close();
      }
    }
  }
  return ret;
}",0.8173258003766478
101511,"private void writeTextDataFile(File dataFile,byte[] textData) throws IOException {
  BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(dataFile,false));
  bos.write(textData);
  bos.close();
}","private void writeTextDataFile(File dataFile,byte[] textData) throws IOException {
  BufferedOutputStream bos=null;
  try {
    bos=new BufferedOutputStream(new FileOutputStream(dataFile,false));
    bos.write(textData);
  }
  finally {
    if (bos != null) {
      bos.close();
    }
  }
}",0.8429423459244533
101512,"private void prepopulateIndexFiles() throws IOException {
  try {
    File ntIndexFile=idxFile[SwordConstants.TESTAMENT_NEW];
    BufferedOutputStream ntIdxBos=new BufferedOutputStream(new FileOutputStream(ntIndexFile,false));
    File otIndexFile=idxFile[SwordConstants.TESTAMENT_OLD];
    BufferedOutputStream otIdxBos=new BufferedOutputStream(new FileOutputStream(otIndexFile,false));
    for (int i=0; i < BibleInfo.versesInBible(); i++) {
      if ((i + 1) >= SwordConstants.ORDINAL_MAT11) {
        writeInitialIndex(ntIdxBos);
      }
 else {
        writeInitialIndex(otIdxBos);
      }
    }
    ntIdxBos.close();
    otIdxBos.close();
  }
 catch (  FileNotFoundException e) {
    throw new IOException(e.getMessage());
  }
}","private void prepopulateIndexFiles() throws IOException {
  File otIndexFile=idxFile[SwordConstants.TESTAMENT_OLD];
  BufferedOutputStream otIdxBos=new BufferedOutputStream(new FileOutputStream(otIndexFile,false));
  try {
    for (int i=0; i < SwordConstants.ORDINAL_MAT11; i++) {
      writeInitialIndex(otIdxBos);
    }
  }
  finally {
    otIdxBos.close();
  }
  File ntIndexFile=idxFile[SwordConstants.TESTAMENT_NEW];
  BufferedOutputStream ntIdxBos=new BufferedOutputStream(new FileOutputStream(ntIndexFile,false));
  try {
    int totVerses=BibleInfo.versesInBible();
    for (int i=SwordConstants.ORDINAL_MAT11; i < totVerses; i++) {
      writeInitialIndex(ntIdxBos);
    }
  }
  finally {
    ntIdxBos.close();
  }
}",0.4520547945205479
101513,"private void parse(){
  int nargs=args.length;
  for (int i=0; i < nargs; i++) {
    String nextArg=args[i];
    if (nextArg.length() < 2 || nextArg.charAt(0) != '-') {
      nonOptionArgs.add(nextArg);
      continue;
    }
    if (""String_Node_Str"".equals(nextArg)) {
      for (int j=i + 1; j < nargs; j++) {
        nonOptionArgs.add(args[j]);
      }
      return;
    }
    if (nextArg.charAt(1) == '-') {
      int equalPos=nextArg.indexOf('=');
      String flag=(equalPos != -1) ? nextArg.substring(2,equalPos) : nextArg.substring(2);
      List opts=programOptions.getLongOptions(flag);
      if (opts.size() == 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + flag);
      }
      if (opts.size() > 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + flag);
      }
      Option option=(Option)opts.get(0);
      if (option.getArgumentType().equals(ArgumentType.NO_ARGUMENT)) {
        suppliedOptions.put(option,null);
        continue;
      }
      if (equalPos != -1) {
        String argument=(equalPos + 1 < nextArg.length()) ? nextArg.substring(equalPos + 1) : ""String_Node_Str"";
        suppliedOptions.put(option,argument);
        continue;
      }
      if (option.getArgumentType().equals(ArgumentType.REQUIRED_ARGUMENT)) {
        if (i + 1 < nargs) {
          String argument=args[i++];
          suppliedOptions.put(option,argument);
          continue;
        }
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else {
      int shortSeqSize=nextArg.length();
      for (int j=1; j < shortSeqSize; j++) {
        char curChar=nextArg.charAt(j);
        Option option=programOptions.getShortOption(curChar);
        if (option == null) {
          throw new IllegalArgumentException(""String_Node_Str"" + curChar);
        }
        if (option.getArgumentType().equals(ArgumentType.NO_ARGUMENT)) {
          suppliedOptions.put(option,null);
          continue;
        }
        if (j < shortSeqSize) {
          String argument=nextArg.substring(j + 1);
          suppliedOptions.put(option,argument);
          continue;
        }
        if (option.getArgumentType().equals(ArgumentType.REQUIRED_ARGUMENT)) {
          if (i + 1 < nargs) {
            String argument=args[i++];
            suppliedOptions.put(option,argument);
            continue;
          }
          throw new IllegalArgumentException(""String_Node_Str"");
        }
      }
    }
  }
}","private void parse(){
  int nargs=args.length;
  int skip=0;
  for (int i=0; i < nargs; i+=1 + skip) {
    skip=0;
    String nextArg=args[i];
    if (nextArg.length() < 2 || nextArg.charAt(0) != '-') {
      nonOptionArgs.add(nextArg);
      continue;
    }
    if (""String_Node_Str"".equals(nextArg)) {
      for (int j=i + 1; j < nargs; j++) {
        nonOptionArgs.add(args[j]);
      }
      return;
    }
    if (nextArg.charAt(1) == '-') {
      int equalPos=nextArg.indexOf('=');
      String flag=(equalPos != -1) ? nextArg.substring(2,equalPos) : nextArg.substring(2);
      List opts=programOptions.getLongOptions(flag);
      if (opts.size() == 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + flag);
      }
      if (opts.size() > 1) {
        throw new IllegalArgumentException(""String_Node_Str"" + flag);
      }
      Option option=(Option)opts.get(0);
      if (option.getArgumentType().equals(ArgumentType.NO_ARGUMENT)) {
        suppliedOptions.put(option,null);
        continue;
      }
      if (equalPos != -1) {
        String argument=(equalPos + 1 < nextArg.length()) ? nextArg.substring(equalPos + 1) : ""String_Node_Str"";
        suppliedOptions.put(option,argument);
        continue;
      }
      if (option.getArgumentType().equals(ArgumentType.REQUIRED_ARGUMENT)) {
        if (i + 1 < nargs) {
          String argument=args[i];
          skip=1;
          suppliedOptions.put(option,argument);
          continue;
        }
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else {
      int shortSeqSize=nextArg.length();
      for (int j=1; j < shortSeqSize; j++) {
        char curChar=nextArg.charAt(j);
        Option option=programOptions.getShortOption(curChar);
        if (option == null) {
          throw new IllegalArgumentException(""String_Node_Str"" + curChar);
        }
        if (option.getArgumentType().equals(ArgumentType.NO_ARGUMENT)) {
          suppliedOptions.put(option,null);
          continue;
        }
        if (j < shortSeqSize) {
          String argument=nextArg.substring(j + 1);
          suppliedOptions.put(option,argument);
          continue;
        }
        if (option.getArgumentType().equals(ArgumentType.REQUIRED_ARGUMENT)) {
          if (i + 1 < nargs) {
            String argument=args[i];
            skip=1;
            suppliedOptions.put(option,argument);
            continue;
          }
          throw new IllegalArgumentException(""String_Node_Str"");
        }
      }
    }
  }
}",0.9847020933977456
101514,"/** 
 * Migrates the user's project dir, if necessary and possible.
 * @param oldPath the path to the old, deprecated location
 * @param newPath the path to the new location
 * @return newPath if the migration was possible or not needed.
 */
private URI migrateUserProjectDir(URI oldPath,URI newPath){
  if (oldPath.toString().equals(newPath.toString())) {
    return newPath;
  }
  if (NetUtil.isDirectory(oldPath)) {
    File oldDir=new File(oldPath.getPath());
    File newDir=new File(newPath.getPath());
    oldDir.renameTo(newDir);
    if (NetUtil.isDirectory(newPath)) {
      return newPath;
    }
    return oldPath;
  }
  return newPath;
}","/** 
 * Migrates the user's project dir, if necessary and possible.
 * @param oldPath the path to the old, deprecated location
 * @param newPath the path to the new location
 * @return newPath if the migration was possible or not needed.
 */
private URI migrateUserProjectDir(URI oldPath,URI newPath){
  if (oldPath.toString().equals(newPath.toString())) {
    return newPath;
  }
  if (NetUtil.isDirectory(oldPath)) {
    File oldDir=new File(oldPath.getPath());
    File newDir=new File(newPath.getPath());
    if (!NetUtil.isDirectory(newPath)) {
      if (oldDir.renameTo(newDir)) {
        return newPath;
      }
      return oldPath;
    }
  }
  return newPath;
}",0.8840030326004549
101515,"/** 
 * Unpack a zip file to a given directory. Honor the paths as given in the zip file.
 * @param file The zip file to download
 * @param destdir The directory to unpack up
 * @throws IOException If there is an file error
 */
public static void unpackZip(File file,File destdir) throws IOException {
  byte[] dbuf=new byte[4096];
  ZipFile zf=new ZipFile(file);
  Enumeration entries=zf.entries();
  while (entries.hasMoreElements()) {
    ZipEntry entry=(ZipEntry)entries.nextElement();
    String entrypath=entry.getName();
    File entryFile=new File(destdir,entrypath);
    File parentDir=entryFile.getParentFile();
    if (!parentDir.isDirectory()) {
      parentDir.mkdirs();
      if (!parentDir.isDirectory()) {
        throw new MalformedURLException(UserMsg.CREATE_DIR_FAIL.toString(parentDir.toString()));
      }
    }
    URI child=NetUtil.getURI(entryFile);
    OutputStream dataOut=NetUtil.getOutputStream(child);
    InputStream dataIn=zf.getInputStream(entry);
    while (true) {
      int count=dataIn.read(dbuf);
      if (count == -1) {
        break;
      }
      dataOut.write(dbuf,0,count);
    }
    dataOut.close();
  }
}","/** 
 * Unpack a zip file to a given directory. Honor the paths as given in the zip file.
 * @param file The zip file to download
 * @param destdir The directory to unpack up
 * @throws IOException If there is an file error
 */
public static void unpackZip(File file,File destdir) throws IOException {
  byte[] dbuf=new byte[4096];
  ZipFile zf=new ZipFile(file);
  Enumeration entries=zf.entries();
  while (entries.hasMoreElements()) {
    ZipEntry entry=(ZipEntry)entries.nextElement();
    String entrypath=entry.getName();
    File entryFile=new File(destdir,entrypath);
    File parentDir=entryFile.getParentFile();
    if (!parentDir.isDirectory()) {
      if (!parentDir.mkdirs()) {
        throw new MalformedURLException(UserMsg.CREATE_DIR_FAIL.toString(parentDir.toString()));
      }
    }
    URI child=NetUtil.getURI(entryFile);
    OutputStream dataOut=NetUtil.getOutputStream(child);
    InputStream dataIn=zf.getInputStream(entry);
    while (true) {
      int count=dataIn.read(dbuf);
      if (count == -1) {
        break;
      }
      dataOut.write(dbuf,0,count);
    }
    dataOut.close();
  }
}",0.9819144243493604
101516,"/** 
 * If the directory does not exist, create it. Note this currently only works with file: type URIs
 * @param orig The directory URI to create
 */
public static void makeDirectory(URI orig) throws MalformedURLException {
  checkFileURI(orig);
  File file=new File(orig.getPath());
  if (file.isFile()) {
    throw new MalformedURLException(UserMsg.IS_FILE.toString(orig));
  }
  if (!file.isDirectory()) {
    file.mkdirs();
    if (!file.isDirectory()) {
      throw new MalformedURLException(UserMsg.CREATE_DIR_FAIL.toString(orig));
    }
  }
}","/** 
 * If the directory does not exist, create it. Note this currently only works with file: type URIs
 * @param orig The directory URI to create
 */
public static void makeDirectory(URI orig) throws MalformedURLException {
  checkFileURI(orig);
  File file=new File(orig.getPath());
  if (file.isFile()) {
    throw new MalformedURLException(UserMsg.IS_FILE.toString(orig));
  }
  if (!file.isDirectory()) {
    if (!file.mkdirs()) {
      throw new MalformedURLException(UserMsg.CREATE_DIR_FAIL.toString(orig));
    }
  }
}",0.9684014869888476
101517,"public void startElement(String uri,String localname,String qname,Attributes attrs) throws SAXException {
  Element ele=null;
  if (stack.size() > 0) {
    Object top=stack.getFirst();
    if (top instanceof Element) {
      ele=(Element)top;
      if (ele == null) {
        return;
      }
    }
  }
  Tag t=getTag(localname,qname);
  if (t != null) {
    stack.addFirst(t.processTag(ele,attrs));
  }
}","public void startElement(String uri,String localname,String qname,Attributes attrs) throws SAXException {
  Element ele=null;
  if (stack.size() > 0) {
    Object top=stack.getFirst();
    if (top == null) {
      return;
    }
    if (top instanceof Element) {
      ele=(Element)top;
    }
  }
  Tag t=getTag(localname,qname);
  if (t != null) {
    stack.addFirst(t.processTag(ele,attrs));
  }
}",0.773067331670823
101518,"private static boolean migrate(File oldPath,File newPath){
  if (oldPath.equals(newPath) || !oldPath.exists()) {
    return true;
  }
  File parent=newPath.getParentFile();
  if (!parent.exists()) {
    parent.mkdirs();
  }
  return oldPath.renameTo(newPath);
}","private static boolean migrate(File oldPath,File newPath){
  if (oldPath.equals(newPath) || !oldPath.exists()) {
    return true;
  }
  File parent=newPath.getParentFile();
  if (!parent.exists() && !parent.mkdirs()) {
    return false;
  }
  return oldPath.renameTo(newPath);
}",0.9387755102040816
101519,"/** 
 * Generate an index to use, telling the job about progress as you go.
 * @throws BookException If we fail to read the index files
 */
public LuceneIndex(Book book,URI storage,boolean create) throws BookException {
  assert create;
  this.book=book;
  File finalPath=null;
  try {
    finalPath=NetUtil.getAsFile(storage);
    this.path=finalPath.getCanonicalPath();
  }
 catch (  IOException ex) {
    throw new BookException(UserMsg.LUCENE_INIT,ex);
  }
  DataPolice.setBook(book.getBookMetaData());
  Progress job=JobManager.createJob(UserMsg.INDEX_START.toString(book.getInitials()),Thread.currentThread(),false);
  IndexStatus finalStatus=IndexStatus.UNDONE;
  Analyzer analyzer=new LuceneAnalyzer(book);
  List errors=new ArrayList();
  File tempPath=new File(path + '.' + IndexStatus.CREATING.toString());
  try {
synchronized (CREATING) {
      book.setIndexStatus(IndexStatus.CREATING);
      RAMDirectory ramDir=new RAMDirectory();
      IndexWriter writer=new IndexWriter(ramDir,analyzer,true);
      generateSearchIndexImpl(job,errors,writer,book.getGlobalKeyList(),0);
      job.setSectionName(UserMsg.OPTIMIZING.toString());
      job.setWork(95);
      writer.close();
      IndexWriter fsWriter=new IndexWriter(tempPath.getCanonicalPath(),analyzer,true);
      fsWriter.addIndexes(new Directory[]{ramDir});
      fsWriter.close();
      ramDir.close();
      job.setCancelable(false);
      if (!job.isFinished()) {
        tempPath.renameTo(finalPath);
      }
      if (finalPath.exists()) {
        finalStatus=IndexStatus.DONE;
      }
      if (errors.size() > 0) {
        StringBuffer buf=new StringBuffer();
        Iterator iter=errors.iterator();
        while (iter.hasNext()) {
          buf.append(iter.next());
          buf.append('\n');
        }
        Reporter.informUser(this,UserMsg.BAD_VERSE,buf);
      }
    }
  }
 catch (  IOException ex) {
    job.cancel();
    throw new BookException(UserMsg.LUCENE_INIT,ex);
  }
 finally {
    book.setIndexStatus(finalStatus);
    job.done();
  }
}","/** 
 * Generate an index to use, telling the job about progress as you go.
 * @throws BookException If we fail to read the index files
 */
public LuceneIndex(Book book,URI storage,boolean create) throws BookException {
  assert create;
  this.book=book;
  File finalPath=null;
  try {
    finalPath=NetUtil.getAsFile(storage);
    this.path=finalPath.getCanonicalPath();
  }
 catch (  IOException ex) {
    throw new BookException(UserMsg.LUCENE_INIT,ex);
  }
  DataPolice.setBook(book.getBookMetaData());
  Progress job=JobManager.createJob(UserMsg.INDEX_START.toString(book.getInitials()),Thread.currentThread(),false);
  IndexStatus finalStatus=IndexStatus.UNDONE;
  Analyzer analyzer=new LuceneAnalyzer(book);
  List errors=new ArrayList();
  File tempPath=new File(path + '.' + IndexStatus.CREATING.toString());
  try {
synchronized (CREATING) {
      book.setIndexStatus(IndexStatus.CREATING);
      RAMDirectory ramDir=new RAMDirectory();
      IndexWriter writer=new IndexWriter(ramDir,analyzer,true);
      generateSearchIndexImpl(job,errors,writer,book.getGlobalKeyList(),0);
      job.setSectionName(UserMsg.OPTIMIZING.toString());
      job.setWork(95);
      writer.close();
      IndexWriter fsWriter=new IndexWriter(tempPath.getCanonicalPath(),analyzer,true);
      fsWriter.addIndexes(new Directory[]{ramDir});
      fsWriter.close();
      ramDir.close();
      job.setCancelable(false);
      if (!job.isFinished()) {
        if (!tempPath.renameTo(finalPath)) {
          throw new BookException(UserMsg.INSTALL_FAIL);
        }
      }
      if (finalPath.exists()) {
        finalStatus=IndexStatus.DONE;
      }
      if (errors.size() > 0) {
        StringBuffer buf=new StringBuffer();
        Iterator iter=errors.iterator();
        while (iter.hasNext()) {
          buf.append(iter.next());
          buf.append('\n');
        }
        Reporter.informUser(this,UserMsg.BAD_VERSE,buf);
      }
    }
  }
 catch (  IOException ex) {
    job.cancel();
    throw new BookException(UserMsg.LUCENE_INIT,ex);
  }
 finally {
    book.setIndexStatus(finalStatus);
    job.done();
  }
}",0.9816336394393428
101520,"public void deleteIndex(Book book) throws BookException {
  File tempPath=null;
  try {
    File storage=NetUtil.getAsFile(getStorageArea(book));
    String finalCanonicalPath=storage.getCanonicalPath();
    tempPath=new File(finalCanonicalPath + '.' + IndexStatus.CREATING.toString());
    FileUtil.delete(tempPath);
    storage.renameTo(tempPath);
    book.setIndexStatus(IndexStatus.UNDONE);
  }
 catch (  IOException ex) {
    throw new BookException(UserMsg.DELETE_FAILED,ex);
  }
  FileUtil.delete(tempPath);
}","public void deleteIndex(Book book) throws BookException {
  File tempPath=null;
  try {
    File storage=NetUtil.getAsFile(getStorageArea(book));
    String finalCanonicalPath=storage.getCanonicalPath();
    tempPath=new File(finalCanonicalPath + '.' + IndexStatus.CREATING.toString());
    FileUtil.delete(tempPath);
    if (!storage.renameTo(tempPath)) {
      throw new BookException(UserMsg.DELETE_FAILED);
    }
    book.setIndexStatus(IndexStatus.UNDONE);
  }
 catch (  IOException ex) {
    throw new BookException(UserMsg.DELETE_FAILED,ex);
  }
  FileUtil.delete(tempPath);
}",0.9372156505914468
101521,"public boolean equals(Object obj){
  return list.equals(obj);
}","public boolean equals(Object obj){
  if (obj instanceof SetKeyList) {
    SetKeyList that=(SetKeyList)obj;
    return list.equals(that.list);
  }
  return false;
}",0.5309734513274337
101522,"/** 
 * Given the name of a stemmer, use that one.
 * @param language
 */
public void pickStemmer(String language){
  stemmerName=language;
  if (stemmerName != null) {
    stemmerName=book.getLanguage().getName();
    if (!allowedStemmers.matcher(stemmerName).matches()) {
      throw new IllegalArgumentException(""String_Node_Str"" + stemmerName);
    }
    if (defaultStopWordMap.containsKey(stemmerName)) {
      stopSet=StopFilter.makeStopSet((String[])defaultStopWordMap.get(stemmerName));
    }
  }
}","/** 
 * Given the name of a stemmer, use that one.
 * @param language
 */
public void pickStemmer(String language){
  stemmerName=language;
  if (stemmerName != null) {
    if (!allowedStemmers.matcher(stemmerName).matches()) {
      throw new IllegalArgumentException(""String_Node_Str"" + stemmerName);
    }
    if (defaultStopWordMap.containsKey(stemmerName)) {
      stopSet=StopFilter.makeStopSet((String[])defaultStopWordMap.get(stemmerName));
    }
  }
}",0.9523809523809524
101523,"public boolean incrementToken() throws IOException {
  return super.incrementToken();
}","public boolean incrementToken() throws IOException {
  return input.incrementToken();
}",0.9540229885057472
101524,"public boolean incrementToken() throws IOException {
  if (number == null) {
    if (super.incrementToken()) {
      try {
        String tokenText=termAtt.term();
        number=new StrongsNumber(tokenText);
        String s=number.getStrongsNumber();
        if (!s.equals(tokenText)) {
          termAtt.setTermBuffer(s);
          if (!number.isPart()) {
            number=null;
          }
        }
      }
 catch (      BookException e) {
        DataPolice.report(e.getDetailedMessage());
      }
      return true;
    }
    return false;
  }
  termAtt.setTermBuffer(number.getFullStrongsNumber());
  number=null;
  return true;
}","public boolean incrementToken() throws IOException {
  if (number == null) {
    if (input.incrementToken()) {
      try {
        String tokenText=termAtt.term();
        number=new StrongsNumber(tokenText);
        String s=number.getStrongsNumber();
        if (!s.equals(tokenText)) {
          termAtt.setTermBuffer(s);
          if (!number.isPart()) {
            number=null;
          }
        }
      }
 catch (      BookException e) {
        DataPolice.report(e.getDetailedMessage());
      }
      return true;
    }
    return false;
  }
  termAtt.setTermBuffer(number.getFullStrongsNumber());
  number=null;
  return true;
}",0.99375
101525,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.addTestSuite(org.crosswire.jsword.passage.BibleInfoTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageConstantsTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageMixTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageSizeTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageSpeedTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageTallyTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageTally2Test.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageUtilTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageWriteSpeedTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.VerseTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.VerseRangeTest.class);
  suite.addTestSuite(org.crosswire.jsword.book.BooksTest.class);
  suite.addTestSuite(org.crosswire.jsword.book.BookMetaDataTest.class);
  suite.addTestSuite(org.crosswire.jsword.book.SentanceUtilTest.class);
  suite.addTestSuite(org.crosswire.jsword.index.lucene.analysis.AnalyzerFactoryTest.class);
  suite.addTestSuite(org.crosswire.jsword.index.lucene.analysis.ChineseLuceneAnalyzerTest.class);
  suite.addTestSuite(org.crosswire.jsword.index.lucene.analysis.ConfigurableSnowballAnalyzerTest.class);
  suite.addTestSuite(org.crosswire.jsword.index.lucene.analysis.EnglishLuceneAnalyzerTest.class);
  suite.addTestSuite(org.crosswire.jsword.index.lucene.analysis.GreekLuceneAnalyzerTest.class);
  suite.addTestSuite(org.crosswire.jsword.index.lucene.analysis.ThaiLuceneAnalyzerTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.addTestSuite(org.crosswire.jsword.passage.BibleInfoTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageConstantsTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageMixTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageSizeTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageSpeedTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageTallyTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageTally2Test.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageUtilTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.PassageWriteSpeedTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.VerseTest.class);
  suite.addTestSuite(org.crosswire.jsword.passage.VerseRangeTest.class);
  suite.addTestSuite(org.crosswire.jsword.book.BooksTest.class);
  suite.addTestSuite(org.crosswire.jsword.book.BookMetaDataTest.class);
  suite.addTestSuite(org.crosswire.jsword.book.SentanceUtilTest.class);
  suite.addTestSuite(org.crosswire.jsword.book.sword.ConfigEntryTableTest.class);
  suite.addTestSuite(org.crosswire.jsword.book.sword.RawFileBackendTest.class);
  suite.addTestSuite(org.crosswire.jsword.book.sword.SwordBookDriverTest.class);
  suite.addTestSuite(org.crosswire.jsword.book.sword.SwordBookMetaDataTest.class);
  suite.addTestSuite(org.crosswire.jsword.book.sword.SwordBookTest.class);
  suite.addTestSuite(org.crosswire.jsword.bridge.DwrBridgeTest.class);
  suite.addTestSuite(org.crosswire.jsword.index.lucene.analysis.AnalyzerFactoryTest.class);
  suite.addTestSuite(org.crosswire.jsword.index.lucene.analysis.ChineseLuceneAnalyzerTest.class);
  suite.addTestSuite(org.crosswire.jsword.index.lucene.analysis.ConfigurableSnowballAnalyzerTest.class);
  suite.addTestSuite(org.crosswire.jsword.index.lucene.analysis.EnglishLuceneAnalyzerTest.class);
  suite.addTestSuite(org.crosswire.jsword.index.lucene.analysis.GreekLuceneAnalyzerTest.class);
  suite.addTestSuite(org.crosswire.jsword.index.lucene.analysis.ThaiLuceneAnalyzerTest.class);
  return suite;
}",0.8775933609958506
101526,"public void testMetaData() throws Exception {
  for (int i=0; i < bmds.length; i++) {
    BookMetaData bmd=bmds[i];
    assertTrue(bmd.getInitials() != null);
    assertTrue(bmd.getInitials().length() > 0);
    assertTrue(bmd.getName() != null);
    assertTrue(bmd.getName().length() > 0);
    assertTrue(bmd.getName().length() > bmd.getInitials().length());
  }
}","public void testMetaData() throws Exception {
  for (int i=0; i < bmds.length; i++) {
    BookMetaData bmd=bmds[i];
    assertTrue(bmd.getInitials() != null);
    assertTrue(bmd.getInitials().length() > 0);
    assertTrue(bmd.getName() != null);
    assertTrue(bmd.getName().length() > 0);
  }
}",0.8952959028831563
101527,"/** 
 * Read all the books that we can get our hands on.
 */
public static void main(String[] args) throws IOException, JDOMException {
  Logger.outputEverything();
  CWProject.setHome(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ChoiceFactory.getDataMap().put(""String_Node_Str"",new String[]{});
  ChoiceFactory.getDataMap().put(""String_Node_Str"",new String[]{});
  Config config=new Config(""String_Node_Str"");
  Document xmlconfig=XMLUtil.getDocument(""String_Node_Str"");
  Locale defaultLocale=Locale.getDefault();
  ResourceBundle configResources=ResourceBundle.getBundle(""String_Node_Str"",defaultLocale,CWClassLoader.instance(ReadEverything.class));
  config.add(xmlconfig,configResources);
  config.setProperties(ResourceUtil.getProperties(""String_Node_Str""));
  config.localToApplication();
  log.warn(""String_Node_Str"");
  List comments=Books.installed().getBooks();
  for (Iterator cit=comments.iterator(); cit.hasNext(); ) {
    Book book=(Book)cit.next();
    log.warn(""String_Node_Str"" + book.getInitials());
    Key set=book.getGlobalKeyList();
    testReadMultiple(book,set);
  }
}","/** 
 * Read all the books that we can get our hands on.
 */
public static void main(String[] args){
  Logger.outputEverything();
  log.warn(""String_Node_Str"");
  List comments=Books.installed().getBooks();
  for (Iterator cit=comments.iterator(); cit.hasNext(); ) {
    Book book=(Book)cit.next();
    if (!book.isLocked()) {
      log.warn(""String_Node_Str"" + book.getInitials());
      Key set=book.getGlobalKeyList();
      testReadMultiple(book,set);
    }
  }
}",0.3076923076923077
101528,"public void testAddConfigEntry(){
  ConfigEntryTable table=new ConfigEntryTable(""String_Node_Str"");
  assertNotNull(table);
  table.add(ConfigEntryType.LANG,""String_Node_Str"");
  assertEquals(table.getValue(ConfigEntryType.LANG),""String_Node_Str"");
}","public void testAddConfigEntry(){
  ConfigEntryTable table=new ConfigEntryTable(""String_Node_Str"");
  assertNotNull(table);
  table.add(ConfigEntryType.LANG,""String_Node_Str"");
  assertEquals(""String_Node_Str"",((Language)table.getValue(ConfigEntryType.LANG)).getCode());
}",0.8888888888888888
101529,"public void testSearch(){
  try {
    String result=dwrBridge.search(""String_Node_Str"",""String_Node_Str"");
    assertEquals(result,""String_Node_Str"");
  }
 catch (  BookException e) {
    fail();
  }
}","public void testSearch(){
  try {
    String result=dwrBridge.search(""String_Node_Str"",""String_Node_Str"");
    assertEquals(""String_Node_Str"",result);
  }
 catch (  BookException e) {
    fail();
  }
}",0.8855721393034826
101530,"/** 
 * BookInstaller can manage the installation of books with the following capabilities. Usage: BookInstaller [option]<br/> Options: <table border=""0""> <tr><td>uninstall</td><td>bookName               </td><td>Uninstall book</td></tr> <tr><td>sources  </td><td>&nbsp;                 </td><td>List source repositories</td></tr> <tr><td>list     </td><td>&nbsp;                 </td><td>List installed books</td></tr> <tr><td>list     </td><td>repositoryName         </td><td>list available books from a repository</td></tr> <tr><td>reload   </td><td>repositoryName         </td><td>Reload the local cache for a repository</td></tr> <tr><td>install  </td><td>repositoryName bookName</td><td>Install a book from a repository</td></tr> </table>
 * @param args
 */
public static void main(String[] args){
  if (args.length < 1) {
    usage();
  }
  System.err.print(""String_Node_Str"" + args[0]);
  for (int i=1; i < args.length; i++) {
    System.err.print(' ');
    System.err.print(args[i]);
  }
  BookInstaller installer=new BookInstaller();
  String operation=args[0];
  if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    Book b=Books.installed().getBook(args[1]);
    if (b == null) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
    try {
      installer.deleteBook(b);
    }
 catch (    BookException e) {
      e.printStackTrace();
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    Map installers=installer.getInstallers();
    Iterator iter=installers.keySet().iterator();
    while (iter.hasNext()) {
      System.out.println(iter.next());
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 1) {
      Iterator iter=BookInstaller.getInstalledBooks().iterator();
      while (iter.hasNext()) {
        Book book=(Book)iter.next();
        System.out.println(book.getInitials());
      }
    }
 else     if (args.length == 2) {
      Iterator iter=installer.getRepositoryBooks(args[1]).iterator();
      while (iter.hasNext()) {
        Book book=(Book)iter.next();
        System.out.println(book.getInitials());
      }
    }
 else {
      usage();
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 2) {
      try {
        installer.reloadBookList(args[1]);
      }
 catch (      InstallException e) {
        e.printStackTrace();
      }
    }
 else {
      usage();
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 3) {
      Book b=installer.getBook(args[1],args[2]);
      if (b == null) {
        System.err.println(""String_Node_Str"");
        System.exit(1);
      }
      try {
        installer.installBook(args[1],b);
      }
 catch (      BookException e) {
        e.printStackTrace();
      }
catch (      InstallException e) {
        e.printStackTrace();
      }
    }
 else {
      usage();
    }
  }
 else {
    usage();
  }
}","/** 
 * BookInstaller can manage the installation of books with the following capabilities. Usage: BookInstaller [option]<br/> Options: <table border=""0""> <tr><td>uninstall</td><td>bookName               </td><td>Uninstall book</td></tr> <tr><td>sources  </td><td>&nbsp;                 </td><td>List source repositories</td></tr> <tr><td>list     </td><td>&nbsp;                 </td><td>List installed books</td></tr> <tr><td>list     </td><td>repositoryName         </td><td>list available books from a repository</td></tr> <tr><td>reload   </td><td>repositoryName         </td><td>Reload the local cache for a repository</td></tr> <tr><td>install  </td><td>repositoryName bookName</td><td>Install a book from a repository</td></tr> </table>
 * @param args
 */
public static void main(String[] args){
  if (args.length < 1) {
    usage();
  }
  System.err.print(""String_Node_Str"");
  for (int i=0; i < args.length; i++) {
    System.err.print(' ');
    System.err.print(args[i]);
  }
  System.err.print('\n');
  BookInstaller installer=new BookInstaller();
  String operation=args[0];
  if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 2) {
      Book b=Books.installed().getBook(args[1]);
      if (b == null) {
        System.err.println(""String_Node_Str"");
        System.exit(1);
      }
      try {
        installer.deleteBook(b);
      }
 catch (      BookException e) {
        e.printStackTrace();
      }
    }
 else {
      usage();
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    Map installers=installer.getInstallers();
    Iterator iter=installers.keySet().iterator();
    while (iter.hasNext()) {
      System.out.println(iter.next());
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 1) {
      Iterator iter=BookInstaller.getInstalledBooks().iterator();
      while (iter.hasNext()) {
        Book book=(Book)iter.next();
        System.out.println(book.getInitials());
      }
    }
 else     if (args.length == 2) {
      Iterator iter=installer.getRepositoryBooks(args[1]).iterator();
      while (iter.hasNext()) {
        Book book=(Book)iter.next();
        System.out.println(book.getInitials());
      }
    }
 else {
      usage();
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 2) {
      try {
        installer.reloadBookList(args[1]);
      }
 catch (      InstallException e) {
        e.printStackTrace();
      }
    }
 else {
      usage();
    }
  }
 else   if (operation.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 3) {
      Book b=installer.getBook(args[1],args[2]);
      if (b == null) {
        System.err.println(""String_Node_Str"");
        System.exit(1);
      }
      try {
        installer.installBook(args[1],b);
      }
 catch (      BookException e) {
        e.printStackTrace();
      }
catch (      InstallException e) {
        e.printStackTrace();
      }
    }
 else {
      usage();
    }
  }
 else {
    usage();
  }
}",0.922999832971438
101531,"/** 
 * Determine whether this entry is an alias for another.
 * @return whether this is an alias entry
 */
public boolean isLinkEntry(){
  String linkCheck=SwordUtil.decode(name,data,getKeyEnd() + 1,5,charset);
  return ""String_Node_Str"".equals(linkCheck);
}","/** 
 * Determine whether this entry is an alias for another.
 * @return whether this is an alias entry
 */
public boolean isLinkEntry(){
  if (data.length >= 5) {
    String linkCheck=SwordUtil.decode(name,data,getKeyEnd() + 1,5,charset);
    return ""String_Node_Str"".equals(linkCheck);
  }
  return false;
}",0.9119718309859156
101532,"/** 
 * Take the data stored permanently and copy it to the local storage area, using the specified stream
 */
public void setProperties(Properties prop){
  Iterator iter=prop.keySet().iterator();
  while (iter.hasNext()) {
    String key=(String)iter.next();
    String value=prop.getProperty(key);
    Choice model=getChoice(key);
    if (value != null && model.isSaveable()) {
      local.put(key,value);
    }
  }
}","/** 
 * Take the data stored permanently and copy it to the local storage area, using the specified stream
 */
public void setProperties(Properties prop){
  Iterator iter=prop.keySet().iterator();
  while (iter.hasNext()) {
    String key=(String)iter.next();
    String value=prop.getProperty(key);
    Choice model=getChoice(key);
    if (value != null && model != null && model.isSaveable()) {
      local.put(key,value);
    }
  }
}",0.9801169590643276
101533,"private static void getCanonicalContent(Element parent,String sID,Iterator iter,StringBuffer buffer){
  if (!isCanonical(parent)) {
    return;
  }
  Object data=null;
  Element ele=null;
  String eleName=null;
  String eID=null;
  while (iter.hasNext()) {
    data=iter.next();
    if (data instanceof Element) {
      ele=(Element)data;
      eleName=ele.getName();
      eID=ele.getAttributeValue(OSISUtil.OSIS_ATTR_SID);
      if (eID != null && eID.equals(sID) && eleName.equals(parent.getName())) {
        break;
      }
      OSISUtil.getCanonicalContent(ele,sID,ele.getContent().iterator(),buffer);
    }
 else     if (data instanceof Text) {
      int lastIndex=buffer.length() - 1;
      String text=((Text)data).getText();
      if (lastIndex >= 0 && !Character.isWhitespace(buffer.charAt(lastIndex)) && !Character.isWhitespace(text.charAt(0))) {
        buffer.append(' ');
      }
      buffer.append(text);
    }
  }
}","private static void getCanonicalContent(Element parent,String sID,Iterator iter,StringBuffer buffer){
  if (!isCanonical(parent)) {
    return;
  }
  Object data=null;
  Element ele=null;
  String eleName=null;
  String eID=null;
  while (iter.hasNext()) {
    data=iter.next();
    if (data instanceof Element) {
      ele=(Element)data;
      eleName=ele.getName();
      eID=ele.getAttributeValue(OSISUtil.OSIS_ATTR_SID);
      if (eID != null && eID.equals(sID) && eleName.equals(parent.getName())) {
        break;
      }
      OSISUtil.getCanonicalContent(ele,sID,ele.getContent().iterator(),buffer);
    }
 else     if (data instanceof Text) {
      int lastIndex=buffer.length() - 1;
      String text=((Text)data).getText();
      if (lastIndex >= 0 && !Character.isWhitespace(buffer.charAt(lastIndex)) && (text.length() == 0 || !Character.isWhitespace(text.charAt(0)))) {
        buffer.append(' ');
      }
      buffer.append(text);
    }
  }
}",0.9873015873015872
101534,"/** 
 * Singleton classes have private constructors.
 */
private Translations(){
  try {
    Properties props=ResourceUtil.getProperties(getClass());
    translation=props.getProperty(TRANSLATION_KEY,DEFAULT_TRANSLATION);
  }
 catch (  IOException e) {
    translation=DEFAULT_TRANSLATION;
  }
}","/** 
 * Singleton classes have private constructors.
 */
private Translations(){
  try {
    loadSupportedTranslations();
    Locale defaultLocale=Locale.getDefault();
    Properties props=ResourceUtil.getProperties(getClass());
    translation=props.getProperty(TRANSLATION_KEY);
    if (translation == null) {
      for (int i=0; i < translations.length; i++) {
        Locale supportedLocale=new Locale(translations[i]);
        if (supportedLocale.getLanguage().equals(defaultLocale.getLanguage()) && supportedLocale.getCountry().equals(defaultLocale.getCountry())) {
          translation=translations[i];
          return;
        }
      }
      for (int i=0; i < translations.length; i++) {
        Locale supportedLocale=new Locale(translations[i]);
        if (supportedLocale.getLanguage().equals(defaultLocale.getLanguage())) {
          translation=translations[i];
          return;
        }
      }
      translation=DEFAULT_TRANSLATION;
    }
  }
 catch (  IOException e) {
    translation=DEFAULT_TRANSLATION;
  }
}",0.4397590361445783
101535,"/** 
 * Given a SwordBookMetaData determine whether this BookType will work for it.
 * @param sbmd the BookMetaData that this BookType works upon
 * @return true if this is a useable BookType
 */
public boolean isSupported(SwordBookMetaData sbmd){
  return type != null && sbmd != null;
}","/** 
 * Given a SwordBookMetaData determine whether this BookType will work for it.
 * @param sbmd the BookMetaData that this BookType works upon
 * @return true if this is a usable BookType
 */
public boolean isSupported(SwordBookMetaData sbmd){
  return type != null && sbmd != null;
}",0.9982608695652174
101536,"/** 
 * Find a matching entry, returning it's index. Otherwise return < 0, such that (-pos - 1) gives the insertion index.
 * @param key
 * @return
 * @throws IOException
 */
private int search(String key) throws IOException {
  if (!checkActive()) {
    return -1;
  }
  SwordBookMetaData bmd=getBookMetaData();
  boolean isDailyDevotional=bmd.getBookCategory().equals(BookCategory.DAILY_DEVOTIONS);
  Calendar greg=new GregorianCalendar();
  DateFormatter nameDF=DateFormatter.getDateInstance();
  String target=key.toUpperCase(Locale.US);
  int low=1;
  int high=getCardinality() - 1;
  while (low <= high) {
    int mid=(low + high) >> 1;
    DataEntry entry=getEntry(key,mid);
    String midVal=entry.getKey();
    if (isDailyDevotional && midVal.length() >= 3) {
      String[] spec=StringUtil.splitAll(midVal,'.');
      greg.set(Calendar.MONTH,Integer.parseInt(spec[0]) - 1);
      greg.set(Calendar.DATE,Integer.parseInt(spec[1]));
      midVal=nameDF.format(greg.getTime());
    }
    int cmp=midVal.toUpperCase(Locale.US).compareTo(target);
    if (cmp < 0) {
      low=mid + 1;
    }
 else     if (cmp > 0) {
      high=mid - 1;
    }
 else {
      return mid;
    }
  }
  DataEntry entry=getEntry(key,0);
  String midVal=entry.getKey();
  if (isDailyDevotional && midVal.length() >= 3) {
    String[] spec=StringUtil.splitAll(midVal,'.');
    greg.set(Calendar.MONTH,Integer.parseInt(spec[0]) - 1);
    greg.set(Calendar.DATE,Integer.parseInt(spec[1]));
    midVal=nameDF.format(greg.getTime());
  }
  int cmp=midVal.toUpperCase(Locale.US).compareTo(target);
  if (cmp == 0) {
    return 0;
  }
  return -(low + 1);
}","/** 
 * Find a matching entry, returning it's index. Otherwise return < 0, such that (-pos - 1) gives the insertion index.
 * @param key
 * @return
 * @throws IOException
 */
private int search(String key) throws IOException {
}",0.2454251883745963
101537,"public Key get(int index){
  if (checkActive()) {
    try {
      if (index < getCardinality()) {
        DataEntry entry=getEntry(getBookMetaData().getInitials(),index);
        return new DefaultLeafKeyList(entry.getKey());
      }
    }
 catch (    IOException e) {
    }
  }
  throw new ArrayIndexOutOfBoundsException(index);
}","public Key get(int index){
  if (checkActive()) {
    try {
      if (index < getCardinality()) {
        DataEntry entry=getEntry(getBookMetaData().getInitials(),index);
        SwordBookMetaData bmd=getBookMetaData();
        boolean isDailyDevotional=bmd.getBookCategory().equals(BookCategory.DAILY_DEVOTIONS);
        Calendar greg=new GregorianCalendar();
        DateFormatter nameDF=DateFormatter.getDateInstance();
        String keytitle=entry.getKey();
        if (isDailyDevotional && keytitle.length() >= 3) {
          String[] spec=StringUtil.splitAll(keytitle,'.');
          greg.set(Calendar.MONTH,Integer.parseInt(spec[0]) - 1);
          greg.set(Calendar.DATE,Integer.parseInt(spec[1]));
          keytitle=nameDF.format(greg.getTime());
        }
        return new DefaultLeafKeyList(keytitle);
      }
    }
 catch (    IOException e) {
    }
  }
  throw new ArrayIndexOutOfBoundsException(index);
}",0.5059856344772546
101538,"private Key getStrongsKey(String txt){
  String text=txt;
  Matcher m=STRONGS_PATTERN.matcher(text);
  if (!m.matches()) {
    return null;
  }
  int pos=text.length() - 1;
  if (Character.isLetter(text.charAt(pos))) {
    text=text.substring(0,pos);
  }
  int strongsNumber=Integer.parseInt(text.substring(1));
  Key key=null;
  String internalName=sbmd.getInitials();
  if (""String_Node_Str"".equals(internalName)) {
    key=backend.get(backend.indexOf(new DefaultLeafKeyList(ZERO_PAD.format(strongsNumber))));
  }
 else   if (""String_Node_Str"".equals(internalName)) {
    key=backend.get(backend.indexOf(new DefaultLeafKeyList(ZERO_PAD.format(strongsNumber))));
  }
  return key;
}","private Key getStrongsKey(String txt){
  String text=txt;
  Matcher m=STRONGS_PATTERN.matcher(text);
  if (!m.matches()) {
    return null;
  }
  int pos=text.length() - 1;
  if (Character.isLetter(text.charAt(pos))) {
    text=text.substring(0,pos);
  }
  Key key=null;
  String internalName=sbmd.getInitials();
  if (""String_Node_Str"".equals(internalName)) {
    int strongsNumber=Integer.parseInt(text.substring(1));
    key=backend.get(backend.indexOf(new DefaultLeafKeyList(ZERO_PAD.format(strongsNumber))));
  }
 else   if (""String_Node_Str"".equals(internalName)) {
    int strongsNumber=Integer.parseInt(text.substring(1));
    key=backend.get(backend.indexOf(new DefaultLeafKeyList(ZERO_PAD.format(strongsNumber))));
  }
  return key;
}",0.7834618079887876
101539,"/** 
 * Copy this WebResource to the destination.
 * @param dest
 * @throws LucidException
 */
public void copy(URI dest) throws LucidException {
  InputStream in=null;
  OutputStream out=null;
  HttpMethod method=new GetMethod(uri.getPath());
  try {
    if (client.executeMethod(method) == HttpStatus.SC_OK) {
      in=method.getResponseBodyAsStream();
      out=NetUtil.getOutputStream(dest);
      byte[] buf=new byte[4096];
      int count=in.read(buf);
      while (-1 != count) {
        out.write(buf,0,count);
        count=in.read(buf);
      }
    }
  }
 catch (  IOException e) {
    throw new LucidException(UserMsg.MISSING_FILE,e);
  }
 finally {
    method.releaseConnection();
    IOUtil.close(in);
    IOUtil.close(out);
  }
}","/** 
 * Copy this WebResource to the destination.
 * @param dest
 * @throws LucidException
 */
public void copy(URI dest) throws LucidException {
  InputStream in=null;
  OutputStream out=null;
  HttpMethod method=new GetMethod(uri.getPath());
  try {
    int status=client.executeMethod(method);
    if (status == HttpStatus.SC_OK) {
      in=method.getResponseBodyAsStream();
      out=NetUtil.getOutputStream(dest);
      byte[] buf=new byte[4096];
      int count=in.read(buf);
      while (-1 != count) {
        out.write(buf,0,count);
        count=in.read(buf);
      }
    }
 else {
      String reason=HttpStatus.getStatusText(status);
      Reporter.informUser(this,UserMsg.MISSING_FILE,new Object[]{reason + ':' + uri.getPath()});
    }
  }
 catch (  IOException e) {
    throw new LucidException(UserMsg.MISSING_FILE,e,new Object[]{uri.toString()});
  }
 finally {
    method.releaseConnection();
    IOUtil.close(in);
    IOUtil.close(out);
  }
}",0.7704051673517323
101540,"protected void download(Progress job,String dir,String file,URI dest) throws InstallException {
}","protected void download(Progress job,String dir,String file,URI dest) throws InstallException {
  URI uri;
  try {
    uri=new URI(NetUtil.PROTOCOL_HTTP,host,dir + '/' + file,null);
  }
 catch (  URISyntaxException e1) {
    throw new InstallException(UserMsg.MISSING_FILE,e1,new Object[]{dir + '/' + file});
  }
  try {
    copy(job,uri,dest);
  }
 catch (  LucidException ex) {
    throw new InstallException(UserMsg.MISSING_FILE,ex,new Object[]{uri.toString()});
  }
}",0.3380281690140845
101541,"public static List rtfToOsis(String rtf){
  Element div=factory().createDiv();
  Stack stack=new Stack();
  stack.push(div);
  int strlen=rtf.length();
  StringBuffer text=new StringBuffer(strlen);
  int i=0;
  for (i=0; i < strlen; i++) {
    char curChar=rtf.charAt(i);
    if (curChar != '\\') {
      text.append(curChar);
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i)) {
      Element currentElement=(Element)stack.pop();
      currentElement.addContent(text.toString());
      text.delete(0,text.length());
      stack.clear();
      stack.push(div);
      i+=(i + 5 < strlen && rtf.charAt(i + 5) == ' ') ? 5 : 4;
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i)) {
      Element currentElement=(Element)stack.peek();
      currentElement.addContent(text.toString());
      text.delete(0,text.length());
      currentElement.addContent(OSISUtil.factory.createLB());
      i+=(i + 4 < strlen && rtf.charAt(i + 4) == ' ') ? 4 : 3;
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i)) {
      Element centerDiv=OSISUtil.factory.createDiv();
      centerDiv.setAttribute(OSIS_ATTR_TYPE,""String_Node_Str"");
      Element currentElement=(Element)stack.peek();
      currentElement.addContent(text.toString());
      text.delete(0,text.length());
      currentElement.addContent(centerDiv);
      stack.push(centerDiv);
      i+=(i + 3 < strlen && rtf.charAt(i + 3) == ' ') ? 3 : 2;
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i)) {
      StringBuffer buf=new StringBuffer();
      i+=2;
      while (i < strlen) {
        char curDigit=rtf.charAt(i);
        if (curDigit != '-' && !Character.isDigit(curDigit)) {
          break;
        }
        buf.append(curDigit);
        i++;
      }
      int value=Integer.parseInt(buf.toString());
      if (value < 0) {
        value+=65536;
      }
      text.append((char)value);
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i) || rtf.startsWith(""String_Node_Str"",i)) {
      Element currentElement=(Element)stack.pop();
      currentElement.addContent(text.toString());
      text.delete(0,text.length());
      i+=(i + 3 < strlen && rtf.charAt(i + 3) == ' ') ? 3 : 2;
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i) || rtf.startsWith(""String_Node_Str"",i)) {
      i+=1;
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i)) {
      Element hiElement=OSISUtil.factory.createHI();
      hiElement.setAttribute(OSIS_ATTR_TYPE,HI_ITALIC);
      Element currentElement=(Element)stack.peek();
      currentElement.addContent(text.toString());
      text.delete(0,text.length());
      currentElement.addContent(hiElement);
      stack.push(hiElement);
      i+=(i + 2 < strlen && rtf.charAt(i + 2) == ' ') ? 2 : 1;
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i)) {
      Element hiElement=OSISUtil.factory.createHI();
      hiElement.setAttribute(OSIS_ATTR_TYPE,HI_BOLD);
      Element currentElement=(Element)stack.peek();
      currentElement.addContent(text.toString());
      text.delete(0,text.length());
      currentElement.addContent(hiElement);
      stack.push(hiElement);
      i+=(i + 2 < strlen && rtf.charAt(i + 2) == ' ') ? 2 : 1;
      continue;
    }
  }
  return div.cloneContent();
}","public static List rtfToOsis(String rtf){
  Element div=factory().createDiv();
  Stack stack=new Stack();
  stack.push(div);
  int strlen=rtf.length();
  StringBuffer text=new StringBuffer(strlen);
  int i=0;
  for (i=0; i < strlen; i++) {
    char curChar=rtf.charAt(i);
    if (curChar != '\\') {
      text.append(curChar);
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i)) {
      Element currentElement=(Element)stack.pop();
      currentElement.addContent(text.toString());
      text.delete(0,text.length());
      stack.clear();
      stack.push(div);
      i+=(i + 5 < strlen && rtf.charAt(i + 5) == ' ') ? 5 : 4;
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i)) {
      Element currentElement=(Element)stack.peek();
      currentElement.addContent(text.toString());
      text.delete(0,text.length());
      currentElement.addContent(OSISUtil.factory.createLB());
      i+=(i + 4 < strlen && rtf.charAt(i + 4) == ' ') ? 4 : 3;
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i)) {
      Element centerDiv=OSISUtil.factory.createDiv();
      centerDiv.setAttribute(OSIS_ATTR_TYPE,""String_Node_Str"");
      Element currentElement=(Element)stack.peek();
      currentElement.addContent(text.toString());
      text.delete(0,text.length());
      currentElement.addContent(centerDiv);
      stack.push(centerDiv);
      i+=(i + 3 < strlen && rtf.charAt(i + 3) == ' ') ? 3 : 2;
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i)) {
      StringBuffer buf=new StringBuffer();
      i+=2;
      while (i < strlen) {
        char curDigit=rtf.charAt(i);
        if (curDigit != '-' && !Character.isDigit(curDigit)) {
          break;
        }
        buf.append(curDigit);
        i++;
      }
      int value=Integer.parseInt(buf.toString());
      if (value < 0) {
        value+=65536;
      }
      text.append((char)value);
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i) || rtf.startsWith(""String_Node_Str"",i)) {
      Element currentElement=(Element)stack.pop();
      currentElement.addContent(text.toString());
      text.delete(0,text.length());
      i+=(i + 3 < strlen && rtf.charAt(i + 3) == ' ') ? 3 : 2;
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i) || rtf.startsWith(""String_Node_Str"",i)) {
      i+=1;
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i)) {
      Element hiElement=OSISUtil.factory.createHI();
      hiElement.setAttribute(OSIS_ATTR_TYPE,HI_ITALIC);
      Element currentElement=(Element)stack.peek();
      currentElement.addContent(text.toString());
      text.delete(0,text.length());
      currentElement.addContent(hiElement);
      stack.push(hiElement);
      i+=(i + 2 < strlen && rtf.charAt(i + 2) == ' ') ? 2 : 1;
      continue;
    }
    if (rtf.startsWith(""String_Node_Str"",i)) {
      Element hiElement=OSISUtil.factory.createHI();
      hiElement.setAttribute(OSIS_ATTR_TYPE,HI_BOLD);
      Element currentElement=(Element)stack.peek();
      currentElement.addContent(text.toString());
      text.delete(0,text.length());
      currentElement.addContent(hiElement);
      stack.push(hiElement);
      i+=(i + 2 < strlen && rtf.charAt(i + 2) == ' ') ? 2 : 1;
      continue;
    }
  }
  if (text.length() > 0) {
    div.addContent(text.toString());
  }
  return div.cloneContent();
}",0.9855290925535122
101542,"/** 
 * Find a matching entry, returning it's index. Otherwise return < 0, such that (-pos - 1) gives the insertion index.
 * @param key
 * @return
 * @throws IOException
 */
private int search(String key) throws IOException {
  if (!checkActive()) {
    return -1;
  }
  String target=external2internal(key);
  int total=getCardinality();
  int low=-1;
  int high=total;
  while (high - low > 1) {
    int mid=(low + high) >>> 1;
    if (normalizeForSearch(getEntry(key,mid).getKey()).compareTo(target) < 0) {
      low=mid;
    }
 else {
      high=mid;
    }
  }
  if (high < total && normalizeForSearch(getEntry(key,high).getKey()).compareTo(target) == 0) {
    return high;
  }
  if (normalizeForSearch(getEntry(key,0).getKey()).compareTo(target) == 0) {
    return 0;
  }
  return -(high + 1);
}","/** 
 * Find a matching entry, returning it's index. Otherwise return < 0, such that (-pos - 1) gives the insertion index.
 * @param key
 * @return
 * @throws IOException
 */
private int search(String key) throws IOException {
  if (!checkActive()) {
    return -1;
  }
  String target=external2internal(key);
  int total=getCardinality();
  int low=-1;
  int high=total;
  int match=-1;
  while (high - low > 1) {
    int mid=(low + high) >>> 1;
    int cmp=normalizeForSearch(getEntry(key,mid).getKey()).compareTo(target);
    if (cmp < 0) {
      low=mid;
    }
 else     if (cmp > 0) {
      high=mid;
    }
 else {
      match=mid;
      break;
    }
  }
  if (match >= 0) {
    return match;
  }
  if (normalizeForSearch(getEntry(key,0).getKey()).compareTo(target) == 0) {
    return 0;
  }
  return -(high + 1);
}",0.7180752621838371
101543,"/** 
 * Convert the Gregorian Calendar to a string.
 * @param externalKey
 * @return
 */
private String external2internal(String externalKey){
}","/** 
 * Convert the supplied key to something that can be understood by the module.
 * @param externalKey
 * @return the internal representation of the key.
 */
private String external2internal(String externalKey){
}",0.6388888888888888
101544,"/** 
 * Find a matching entry, returning it's index. Otherwise return < 0, such that (-pos - 1) gives the insertion index.
 * @param key
 * @return
 * @throws IOException
 */
private int search(String key) throws IOException {
  if (!checkActive()) {
    return -1;
  }
  String target=external2internal(key);
  int total=getCardinality();
  int low=-1;
  int high=total;
  while (high - low > 1) {
    int mid=(low + high) >>> 1;
    if (normalizeForSearch(getEntry(key,mid).getKey()).compareTo(target) < 0) {
      low=mid;
    }
 else {
      high=mid;
    }
  }
  if (high < total && normalizeForSearch(getEntry(key,high).getKey()).compareTo(target) == 0) {
    return high;
  }
  if (normalizeForSearch(getEntry(key,0).getKey()).compareTo(target) == 0) {
    return 0;
  }
  return -(high - 1);
}","/** 
 * Find a matching entry, returning it's index. Otherwise return < 0, such that (-pos - 1) gives the insertion index.
 * @param key
 * @return
 * @throws IOException
 */
private int search(String key) throws IOException {
  if (!checkActive()) {
    return -1;
  }
  String target=external2internal(key);
  int total=getCardinality();
  int low=-1;
  int high=total;
  while (high - low > 1) {
    int mid=(low + high) >>> 1;
    if (normalizeForSearch(getEntry(key,mid).getKey()).compareTo(target) < 0) {
      low=mid;
    }
 else {
      high=mid;
    }
  }
  if (high < total && normalizeForSearch(getEntry(key,high).getKey()).compareTo(target) == 0) {
    return high;
  }
  if (normalizeForSearch(getEntry(key,0).getKey()).compareTo(target) == 0) {
    return 0;
  }
  return -(high + 1);
}",0.9987515605493134
101545,"/** 
 * Lookup method to convert from a String
 */
public static OSType fromString(String name){
  for (int i=0; i < VALUES.length; i++) {
    OSType o=VALUES[i];
    if (o.name.startsWith(name)) {
      return o;
    }
  }
  return DEFAULT;
}","/** 
 * Lookup method to convert from a String
 */
public static OSType fromString(String name){
  for (int i=0; i < VALUES.length; i++) {
    OSType o=VALUES[i];
    if (name.startsWith(o.name)) {
      return o;
    }
  }
  return DEFAULT;
}",0.9917695473251028
101546,"public boolean requiresRestart(){
  return false;
}","public boolean requiresRestart(){
  return restart;
}",0.903846153846154
101547,"public boolean isSaveable(){
  return true;
}","public boolean isSaveable(){
  return !external;
}",0.9052631578947368
101548,"/** 
 * @param newShown Whether this WebWarning should be shown.
 */
public static void setWarningShown(boolean newShown){
  WebWarning.instance().setShown(newShown);
}","/** 
 * From configuration set the state.
 * @param newShown Whether this WebWarning should be shown.
 */
public static void setWarningShown(boolean newShown){
  WebWarning.instance().setShown(newShown);
}",0.900804289544236
101549,"public Element processTag(Element ele,Attributes attrs){
  String typeAttr=attrs.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equals(typeAttr)) {
    Element seg=OSISUtil.factory().createSeg();
    seg.setAttribute(OSISUtil.OSIS_ATTR_TYPE,OSISUtil.VARIANT_TYPE);
    String classAttr=attrs.getValue(""String_Node_Str"");
    if (classAttr != null) {
      seg.setAttribute(OSISUtil.OSIS_ATTR_SUBTYPE,OSISUtil.VARIANT_CLASS + classAttr);
    }
    if (ele != null) {
      ele.addContent(seg);
    }
    return seg;
  }
  Element div=OSISUtil.factory().createDiv();
  if (ele != null) {
    ele.addContent(div);
  }
  return div;
}","public Element processTag(Element ele,Attributes attrs){
  String typeAttr=attrs.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equals(typeAttr)) {
    Element seg=OSISUtil.factory().createSeg();
    seg.setAttribute(OSISUtil.OSIS_ATTR_TYPE,OSISUtil.VARIANT_TYPE);
    String classAttr=attrs.getValue(""String_Node_Str"");
    if (classAttr != null) {
      seg.setAttribute(OSISUtil.OSIS_ATTR_SUBTYPE,OSISUtil.VARIANT_CLASS + '-' + classAttr);
    }
    if (ele != null) {
      ele.addContent(seg);
    }
    return seg;
  }
  Element div=OSISUtil.factory().createDiv();
  if (ele != null) {
    ele.addContent(div);
  }
  return div;
}",0.9953051643192488
101550,"private static void getCanonicalContent(Element parent,String sID,Iterator iter,StringBuffer buffer){
  if (!isCanonical(parent)) {
    return;
  }
  Object data=null;
  Element ele=null;
  String eleName=null;
  String eID=null;
  while (iter.hasNext()) {
    data=iter.next();
    if (data instanceof Element) {
      ele=(Element)data;
      eleName=ele.getName();
      eID=ele.getAttributeValue(OSISUtil.OSIS_ATTR_SID);
      if (eID != null && eID.equals(sID) && eleName.equals(parent.getName())) {
        break;
      }
      OSISUtil.getCanonicalContent(ele,sID,ele.getContent().iterator(),buffer);
    }
 else     if (data instanceof Text) {
      buffer.append(((Text)data).getText());
    }
  }
}","private static void getCanonicalContent(Element parent,String sID,Iterator iter,StringBuffer buffer){
  if (!isCanonical(parent)) {
    return;
  }
  Object data=null;
  Element ele=null;
  String eleName=null;
  String eID=null;
  while (iter.hasNext()) {
    data=iter.next();
    if (data instanceof Element) {
      ele=(Element)data;
      eleName=ele.getName();
      eID=ele.getAttributeValue(OSISUtil.OSIS_ATTR_SID);
      if (eID != null && eID.equals(sID) && eleName.equals(parent.getName())) {
        break;
      }
      OSISUtil.getCanonicalContent(ele,sID,ele.getContent().iterator(),buffer);
    }
 else     if (data instanceof Text) {
      int lastIndex=buffer.length() - 1;
      String text=((Text)data).getText();
      if (lastIndex >= 0 && !Character.isWhitespace(buffer.charAt(lastIndex)) && !Character.isWhitespace(text.charAt(0))) {
        buffer.append(' ');
      }
      buffer.append(text);
    }
  }
}",0.8324192565508836
101551,"/** 
 * Get the canonical text from an osis document consisting of a single fragment. The document is assumed to be valid OSIS2.0 XML. While xml valid is rigidly defined as meaning that an xml parser can validate the document, it does not mean that the document is valid OSIS. This is a semantic problem that is not validated. This method assumes that the root element is also semantically valid. <p>This means that the top level element's tagname is osis. This can contain either a osisText or an osisCorpus. If it is an osisCorpus, then it contains an osisText. However, as a simplification, since JSword constructs the whole doc for the fragment, osisCorpus can be ignored. <p>The osisText element contains a div element that is either a container or a milestone. Again, JSword is providing the div element and it will be provided as a container. It is this div that ""contains"" the actual fragment.</p> <p>A verse element may either be a container or a milestone. Sword OSIS books differ in whether they provide the verse element. Most do not. The few that do are using the container model, but it has been proposed that milestones are the best practice.</p> <p>The fragment may contain elements that are not a part of the original text. These are things such as notes.</p> <p>Milestones require special handling. Beginning milestones elements have an sID attribute, while ending milestones have an eID with the same value as the opening. So everything between the start and the corresponding end is the content of the element. Also, for a given element, say div, they have to be properly nested as if they were container elements.</p>
 * @param root the whole osis document.
 * @return The canonical text without markup
 */
public static String getCanonicalText(Element root){
  StringBuffer buffer=new StringBuffer();
  List frag=OSISUtil.getFragment(root);
  Iterator dit=frag.iterator();
  String sID=null;
  Object data=null;
  Element ele=null;
  while (dit.hasNext()) {
    data=dit.next();
    if (data instanceof Element) {
      ele=(Element)data;
      if (!isCanonical(ele)) {
        continue;
      }
      if (ele.getName().equals(OSISUtil.OSIS_ELEMENT_VERSE)) {
        sID=ele.getAttributeValue(OSISUtil.OSIS_ATTR_SID);
      }
      if (sID != null) {
        getCanonicalContent(ele,sID,dit,buffer);
      }
 else {
        getCanonicalContent(ele,null,ele.getContent().iterator(),buffer);
      }
    }
 else     if (data instanceof Text) {
      buffer.append(((Text)data).getText());
    }
  }
  return buffer.toString().trim();
}","/** 
 * Get the canonical text from an osis document consisting of a single fragment. The document is assumed to be valid OSIS2.0 XML. While xml valid is rigidly defined as meaning that an xml parser can validate the document, it does not mean that the document is valid OSIS. This is a semantic problem that is not validated. This method assumes that the root element is also semantically valid. <p>This means that the top level element's tagname is osis. This can contain either a osisText or an osisCorpus. If it is an osisCorpus, then it contains an osisText. However, as a simplification, since JSword constructs the whole doc for the fragment, osisCorpus can be ignored. <p>The osisText element contains a div element that is either a container or a milestone. Again, JSword is providing the div element and it will be provided as a container. It is this div that ""contains"" the actual fragment.</p> <p>A verse element may either be a container or a milestone. Sword OSIS books differ in whether they provide the verse element. Most do not. The few that do are using the container model, but it has been proposed that milestones are the best practice.</p> <p>The fragment may contain elements that are not a part of the original text. These are things such as notes.</p> <p>Milestones require special handling. Beginning milestones elements have an sID attribute, while ending milestones have an eID with the same value as the opening. So everything between the start and the corresponding end is the content of the element. Also, for a given element, say div, they have to be properly nested as if they were container elements.</p>
 * @param root the whole osis document.
 * @return The canonical text without markup
 */
public static String getCanonicalText(Element root){
  StringBuffer buffer=new StringBuffer();
  List frag=OSISUtil.getFragment(root);
  Iterator dit=frag.iterator();
  String sID=null;
  Object data=null;
  Element ele=null;
  while (dit.hasNext()) {
    data=dit.next();
    if (data instanceof Element) {
      ele=(Element)data;
      if (!isCanonical(ele)) {
        continue;
      }
      if (ele.getName().equals(OSISUtil.OSIS_ELEMENT_VERSE)) {
        sID=ele.getAttributeValue(OSISUtil.OSIS_ATTR_SID);
      }
      if (sID != null) {
        getCanonicalContent(ele,sID,dit,buffer);
      }
 else {
        getCanonicalContent(ele,null,ele.getContent().iterator(),buffer);
      }
    }
 else     if (data instanceof Text) {
      int lastIndex=buffer.length() - 1;
      String text=((Text)data).getText();
      if (lastIndex >= 0 && !Character.isWhitespace(buffer.charAt(lastIndex)) && !Character.isWhitespace(text.charAt(0))) {
        buffer.append(' ');
      }
      buffer.append(text);
    }
  }
  return buffer.toString().trim();
}",0.9548266166822869
101552,"/** 
 * Generate an index to use, telling the job about progress as you go.
 * @throws BookException If we fail to read the index files
 */
public LuceneIndex(Book book,URI storage,boolean create) throws BookException {
  assert create;
  this.book=book;
  File finalPath=null;
  try {
    finalPath=NetUtil.getAsFile(storage);
    this.path=finalPath.getCanonicalPath();
  }
 catch (  IOException ex) {
    throw new BookException(UserMsg.LUCENE_INIT,ex);
  }
  DataPolice.setBook(book.getBookMetaData());
  Progress job=JobManager.createJob(UserMsg.INDEX_START.toString(),Thread.currentThread(),false);
  IndexStatus finalStatus=IndexStatus.UNDONE;
  String bookLang=book.getLanguage().getName();
  Analyzer analyzer=new LuceneAnalyzer(bookLang);
  List errors=new ArrayList();
  File tempPath=new File(path + '.' + IndexStatus.CREATING.toString());
  try {
synchronized (CREATING) {
      book.setIndexStatus(IndexStatus.CREATING);
      RAMDirectory ramDir=new RAMDirectory();
      IndexWriter writer=new IndexWriter(ramDir,analyzer,true);
      generateSearchIndexImpl(job,errors,writer,book.getGlobalKeyList(),0);
      job.setSectionName(UserMsg.OPTIMIZING.toString());
      job.setWork(95);
      writer.close();
      IndexWriter fsWriter=new IndexWriter(tempPath.getCanonicalPath(),analyzer,true);
      fsWriter.addIndexes(new Directory[]{ramDir});
      fsWriter.close();
      ramDir.close();
      job.setCancelable(false);
      if (!job.isFinished()) {
        tempPath.renameTo(finalPath);
      }
      if (finalPath.exists()) {
        finalStatus=IndexStatus.DONE;
      }
      if (errors.size() > 0) {
        StringBuffer buf=new StringBuffer();
        Iterator iter=errors.iterator();
        while (iter.hasNext()) {
          buf.append(iter.next());
          buf.append('\n');
        }
        Reporter.informUser(this,UserMsg.BAD_VERSE,buf);
      }
    }
  }
 catch (  IOException ex) {
    job.cancel();
    throw new BookException(UserMsg.LUCENE_INIT,ex);
  }
 finally {
    book.setIndexStatus(finalStatus);
    job.done();
  }
}","/** 
 * Generate an index to use, telling the job about progress as you go.
 * @throws BookException If we fail to read the index files
 */
public LuceneIndex(Book book,URI storage,boolean create) throws BookException {
  assert create;
  this.book=book;
  File finalPath=null;
  try {
    finalPath=NetUtil.getAsFile(storage);
    this.path=finalPath.getCanonicalPath();
  }
 catch (  IOException ex) {
    throw new BookException(UserMsg.LUCENE_INIT,ex);
  }
  DataPolice.setBook(book.getBookMetaData());
  Progress job=JobManager.createJob(UserMsg.INDEX_START.toString(book.getInitials()),Thread.currentThread(),false);
  IndexStatus finalStatus=IndexStatus.UNDONE;
  String bookLang=book.getLanguage().getName();
  Analyzer analyzer=new LuceneAnalyzer(bookLang);
  List errors=new ArrayList();
  File tempPath=new File(path + '.' + IndexStatus.CREATING.toString());
  try {
synchronized (CREATING) {
      book.setIndexStatus(IndexStatus.CREATING);
      RAMDirectory ramDir=new RAMDirectory();
      IndexWriter writer=new IndexWriter(ramDir,analyzer,true);
      generateSearchIndexImpl(job,errors,writer,book.getGlobalKeyList(),0);
      job.setSectionName(UserMsg.OPTIMIZING.toString());
      job.setWork(95);
      writer.close();
      IndexWriter fsWriter=new IndexWriter(tempPath.getCanonicalPath(),analyzer,true);
      fsWriter.addIndexes(new Directory[]{ramDir});
      fsWriter.close();
      ramDir.close();
      job.setCancelable(false);
      if (!job.isFinished()) {
        tempPath.renameTo(finalPath);
      }
      if (finalPath.exists()) {
        finalStatus=IndexStatus.DONE;
      }
      if (errors.size() > 0) {
        StringBuffer buf=new StringBuffer();
        Iterator iter=errors.iterator();
        while (iter.hasNext()) {
          buf.append(iter.next());
          buf.append('\n');
        }
        Reporter.informUser(this,UserMsg.BAD_VERSE,buf);
      }
    }
  }
 catch (  IOException ex) {
    job.cancel();
    throw new BookException(UserMsg.LUCENE_INIT,ex);
  }
 finally {
    book.setIndexStatus(finalStatus);
    job.done();
  }
}",0.9956626506024095
101553,"/** 
 * Get BookData representing one or more Book entries, but capped to a maximum number of entries.
 * @param bookInitials the book to use
 * @param reference a reference, appropriate for the book, of one or more entries
 * @param maxKeyCount the maximum number of entries to use
 * @throws NoSuchKeyException 
 */
private BookData getBookData(String bookInitials,String reference,int maxKeyCount) throws NoSuchKeyException {
  Book book=BookInstaller.getInstalledBook(bookInitials);
  if (book == null || reference == null || maxKeyCount < 1) {
    return null;
  }
  Key key=null;
  if (BookCategory.BIBLE.equals(book.getBookCategory())) {
    key=book.getKey(reference);
    ((Passage)key).trimVerses(maxKeyCount);
  }
 else   if (BookCategory.GENERAL_BOOK.equals(book.getBookCategory())) {
    key=book.getKey(reference);
  }
 else {
    key=book.createEmptyKeyList();
    Iterator iter=book.getKey(reference).iterator();
    int count=0;
    while (iter.hasNext()) {
      if (++count >= maxKeyCount) {
        break;
      }
      key.addAll((Key)iter.next());
    }
  }
  return new BookData(book,key);
}","/** 
 * Get BookData representing one or more Book entries, but capped to a maximum number of entries.
 * @param bookInitials the book to use
 * @param reference a reference, appropriate for the book, of one or more entries
 * @param maxKeyCount the maximum number of entries to use
 * @throws NoSuchKeyException 
 */
private BookData getBookData(String bookInitials,String reference,int maxKeyCount) throws NoSuchKeyException {
  Book book=BookInstaller.getInstalledBook(bookInitials);
  if (book == null || reference == null || maxKeyCount < 1) {
    return null;
  }
  Key key=null;
  if (BookCategory.BIBLE.equals(book.getBookCategory())) {
    key=book.getKey(reference);
    ((Passage)key).trimVerses(maxKeyCount);
  }
 else   if (BookCategory.GENERAL_BOOK.equals(book.getBookCategory())) {
    key=book.getKey(reference);
  }
 else {
    key=book.getKey(reference);
    if (key.getCardinality() > maxKeyCount) {
      Iterator iter=key.iterator();
      key=book.createEmptyKeyList();
      int count=0;
      while (iter.hasNext()) {
        if (++count >= maxKeyCount) {
          break;
        }
        key.addAll((Key)iter.next());
      }
    }
  }
  return new BookData(book,key);
}",0.9138900908697534
101554,"/** 
 * Accessor for the Sword directory
 * @return The new Sword directory
 */
public static File[] getAugmentPath(){
  return (File[])augmentPath.clone();
}","/** 
 * Retrieve the additional locations that Sword may hold Books.
 * @return The new Sword directory
 */
public static File[] getAugmentPath(){
  return (File[])augmentPath.clone();
}",0.8197674418604651
101555,"public static String[] getBookList(File bookDir){
  return bookDir.list(new CustomFilenameFilter());
}","/** 
 * Get a list of books in a given location.
 * @param bookDir the directory in which to look
 * @return the list of books in that location
 */
public static String[] getBookList(File bookDir){
  return bookDir.list(new CustomFilenameFilter());
}",0.5795454545454546
101556,"/** 
 * Accessor for the Sword directory
 * @param theNewDirs The new Sword directory
 * @throws BookException
 */
public static void setAugmentPath(File[] theNewDirs) throws BookException {
  File[] newDirs=theNewDirs;
  if (newDirs == null) {
    return;
  }
  SwordBookPath.augmentPath=(File[])newDirs.clone();
  Books.installed().registerDriver(SwordBookDriver.instance());
}","/** 
 * Establish additional locations that Sword may hold books.
 * @param theNewDirs The new Sword directories
 * @throws BookException
 */
public static void setAugmentPath(File[] theNewDirs) throws BookException {
  File[] newDirs=theNewDirs;
  if (newDirs == null) {
    return;
  }
  SwordBookPath.augmentPath=(File[])newDirs.clone();
  Books.installed().registerDriver(SwordBookDriver.instance());
}",0.9019108280254776
101557,"public String toString(){
  StringBuffer txt=new StringBuffer();
  txt.append(""String_Node_Str"");
  txt.append(getCoordinates(sourceStart,sourceLength));
  txt.append(""String_Node_Str"");
  txt.append(getCoordinates(targetStart,targetLength));
  txt.append(""String_Node_Str"");
  Iterator iter=diffs.iterator();
  while (iter.hasNext()) {
    Difference diff=(Difference)iter.next();
    txt.append(diff.getEditType().getSymbol());
    txt.append(diff.getText());
    txt.append('\n');
  }
  return txt.toString();
}","public String toString(){
  StringBuffer txt=new StringBuffer();
  txt.append(""String_Node_Str"");
  txt.append(getCoordinates(sourceStart,sourceLength));
  txt.append(""String_Node_Str"");
  txt.append(getCoordinates(targetStart,targetLength));
  txt.append(""String_Node_Str"");
  Iterator iter=diffs.iterator();
  while (iter.hasNext()) {
    Difference diff=(Difference)iter.next();
    txt.append(diff.getEditType().getSymbol());
    txt.append(encode(diff.getText()));
    txt.append('\n');
  }
  return txt.toString();
}",0.9922779922779924
101558,"public void testMatchFromText(){
  String strp=""String_Node_Str"";
  assertEquals(""String_Node_Str"",strp,new PatchEntry(strp).toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  String text1=""String_Node_Str"";
  String text2=""String_Node_Str"";
  Patch patch=new Patch(text1,text2);
  String patchText=patch.toText();
  Patch patch2=new Patch();
  patch2=patch2.fromText(patchText);
  System.out.println(patch2.apply(text1).getText());
}","public void testMatchFromText(){
  String strp=""String_Node_Str"";
  assertEquals(""String_Node_Str"",strp,new PatchEntry(strp).toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
}",0.6013619696176008
101559,"public void testMatchFromText(){
  String strp=""String_Node_Str"";
  assertEquals(""String_Node_Str"",strp,new PatchEntry(strp).toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
}","public void testMatchFromText(){
  String strp=""String_Node_Str"";
  assertEquals(""String_Node_Str"",strp,new PatchEntry(strp).toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new PatchEntry(""String_Node_Str"").toString());
  String text1=""String_Node_Str"";
  String text2=""String_Node_Str"";
  Patch patch=new Patch(text1,text2);
  String patchText=patch.toText();
  Patch patch2=new Patch();
  patch2=patch2.fromText(patchText);
  System.out.println(patch2.apply(text1).getText());
}",0.7080948487326247
101560,"/** 
 * Locate the best instance of 'pattern' in 'text' near 'loc'.
 * @return Best match index or -1, if no match found
 */
public int locate(){
  if (text.length() == 0) {
    return -1;
  }
  if (text.equals(pattern)) {
    return 0;
  }
  loc=Math.max(0,Math.min(loc,text.length() - pattern.length()));
  if (text.substring(loc,loc + pattern.length()).equals(pattern)) {
    return loc;
  }
  return locator.locate();
}","/** 
 * Locate the best instance of 'pattern' in 'text' near 'loc'.
 * @return Best match index or -1, if no match found
 */
public int locate(){
  if (text.equals(pattern)) {
    return 0;
  }
  if (text.length() == 0) {
    return -1;
  }
  loc=Math.max(0,Math.min(loc,text.length() - pattern.length()));
  if (text.substring(loc,loc + pattern.length()).equals(pattern)) {
    return loc;
  }
  return locator.locate();
}",0.8865248226950354
101561,"/** 
 * Parse a textual representation of patches and return a List of Patch objects.
 * @param input Text representation of patches
 * @return List of Patch objects
 */
public Patch fromText(String input){
  patches.clear();
  String[] text=patchBoundaryPattern.split(input);
  StringBuffer buf=new StringBuffer();
  for (int patchCount=0; patchCount < text.length; patchCount++) {
    if (patchCount > 0) {
      buf.replace(0,buf.length(),""String_Node_Str"").append(text[patchCount]);
      text[patchCount]=buf.toString();
    }
    patches.add(new PatchEntry(text[patchCount]));
  }
  return this;
}","/** 
 * Parse a textual representation of patches and return a List of Patch objects.
 * @param input Text representation of patches
 * @return List of Patch objects
 */
public Patch fromText(String input){
  patches.clear();
  Matcher m=patchBoundaryPattern.matcher(input);
  int index=0;
  while (m.find()) {
    int start=m.start();
    String match=input.substring(index,start);
    patches.add(new PatchEntry(match));
    index=start + 1;
  }
  if (index == 0) {
    patches.add(new PatchEntry(input));
  }
 else {
    patches.add(new PatchEntry(input.substring(index)));
  }
  return this;
}",0.415
101562,"public void testMatchApply(){
  Patch p=new Patch(""String_Node_Str"",""String_Node_Str"");
  PatchResults results=p.apply(""String_Node_Str"");
  boolean[] boolArray=results.getResults();
  String resultStr=results.getText() + ""String_Node_Str"" + boolArray[0]+ ""String_Node_Str""+ boolArray[1];
  assertEquals(""String_Node_Str"",""String_Node_Str"",resultStr);
  results=p.apply(""String_Node_Str"");
  boolArray=results.getResults();
  resultStr=results.getText() + ""String_Node_Str"" + boolArray[0]+ ""String_Node_Str""+ boolArray[1];
  assertEquals(""String_Node_Str"",""String_Node_Str"",resultStr);
  results=p.apply(""String_Node_Str"");
  boolArray=results.getResults();
  resultStr=results.getText() + ""String_Node_Str"" + boolArray[0]+ ""String_Node_Str""+ boolArray[1];
  assertEquals(""String_Node_Str"",""String_Node_Str"",resultStr);
}","public void testMatchApply(){
  Patch p=new Patch(""String_Node_Str"",""String_Node_Str"");
  PatchResults results=p.apply(""String_Node_Str"");
  boolean[] boolArray=results.getResults();
  String resultStr=results.getText() + ""String_Node_Str"" + boolArray[0]+ ""String_Node_Str""+ boolArray[1];
  assertEquals(""String_Node_Str"",""String_Node_Str"",resultStr);
  results=p.apply(""String_Node_Str"");
  boolArray=results.getResults();
  resultStr=results.getText() + ""String_Node_Str"" + boolArray[0]+ ""String_Node_Str""+ boolArray[1];
  assertEquals(""String_Node_Str"",""String_Node_Str"",resultStr);
  results=p.apply(""String_Node_Str"");
  boolArray=results.getResults();
  resultStr=results.getText() + ""String_Node_Str"" + boolArray[0]+ ""String_Node_Str""+ boolArray[1];
  assertEquals(""String_Node_Str"",""String_Node_Str"",resultStr);
  p=new Patch(""String_Node_Str"",""String_Node_Str"");
  results=p.apply(""String_Node_Str"");
  boolArray=results.getResults();
  resultStr=results.getText() + ""String_Node_Str"" + boolArray[0];
  assertEquals(""String_Node_Str"",""String_Node_Str"",resultStr);
  p=new Patch(""String_Node_Str"",""String_Node_Str"");
  results=p.apply(""String_Node_Str"");
  boolArray=results.getResults();
  resultStr=results.getText() + ""String_Node_Str"" + boolArray[0];
  assertEquals(""String_Node_Str"",""String_Node_Str"",resultStr);
}",0.7644320297951583
101563,"/** 
 * Establishes the user's project directory.
 */
public URI getUserProjectDir(){
  if (home == null) {
    String jswordhome=System.getProperty(PROPERTY_JSWORD_HOME);
    if (jswordhome != null) {
      try {
        home=new URI(NetUtil.PROTOCOL_FILE,null,jswordhome,null);
        if (!NetUtil.canWrite(home)) {
          home=null;
        }
      }
 catch (      URISyntaxException e) {
        home=null;
      }
    }
  }
  if (home == null) {
    URI path=getUserProjectDir(DIR_PROJECT,DIR_PROJECT_ALT);
    URI oldPath=getDeprecatedUserProjectDir();
    home=migrateUserProjectDir(oldPath,path);
  }
  return home;
}","/** 
 * Establishes the user's project directory.
 */
public URI getUserProjectDir(){
  if (home == null) {
    String jswordhome=System.getProperty(PROPERTY_JSWORD_HOME);
    if (jswordhome != null) {
      home=NetUtil.getURI(new File(jswordhome));
      if (!NetUtil.canWrite(home)) {
        home=null;
      }
    }
  }
  if (home == null) {
    URI path=getUserProjectDir(DIR_PROJECT,DIR_PROJECT_ALT);
    URI oldPath=getDeprecatedUserProjectDir();
    home=migrateUserProjectDir(oldPath,path);
  }
  return home;
}",0.8573913043478261
101564,"/** 
 * Get a the URI of a (potentially non-existant) properties file that we can write to. This method of aquiring properties files is preferred over getResourceProperties() as this is writable and can take into account user preferences. This method makes no promise that the URI returned is valid. It is totally untested, so reading may well cause errors.
 * @param subject The name (minus the .properties extension)
 * @return The resource as a URI
 */
public URI getWritablePropertiesURI(String subject){
  return NetUtil.lengthenURI(getUserProjectDir(),subject + FileUtil.EXTENSION_PROPERTIES);
}","/** 
 * Get a the URI of a (potentially non-existent) properties file that we can write to. This method of acquiring properties files is preferred over getResourceProperties() as this is writable and can take into account user preferences. This method makes no promise that the URI returned is valid. It is totally untested, so reading may well cause errors.
 * @param subject The name (minus the .properties extension)
 * @return The resource as a URI
 */
public URI getWritablePropertiesURI(String subject){
  return NetUtil.lengthenURI(getUserProjectDir(),subject + FileUtil.EXTENSION_PROPERTIES);
}",0.9975062344139652
101565,"public void setString(String value) throws ConfigException {
  Exception ex=null;
  try {
    Object object=convertToObject(value);
    setter.invoke(null,new Object[]{object.toString()});
  }
 catch (  InvocationTargetException e) {
    ex=e;
  }
catch (  IllegalArgumentException e) {
    ex=e;
  }
catch (  IllegalAccessException e) {
    ex=e;
  }
  if (ex != null) {
    log.info(""String_Node_Str"" + setter.toString());
    throw new ConfigException(Msg.CONFIG_SETFAIL,ex,new Object[]{setter});
  }
}","public void setString(String value) throws ConfigException {
  Exception ex=null;
  try {
    Object object=convertToObject(value);
    if (object != null) {
      setter.invoke(null,new Object[]{object});
    }
  }
 catch (  InvocationTargetException e) {
    ex=e;
  }
catch (  IllegalArgumentException e) {
    ex=e;
  }
catch (  IllegalAccessException e) {
    ex=e;
  }
catch (  NullPointerException e) {
    ex=e;
  }
  if (ex != null) {
    log.info(""String_Node_Str"" + setter.toString());
    throw new ConfigException(Msg.CONFIG_SETFAIL,ex,new Object[]{setter});
  }
}",0.9075785582255084
101566,"public Object convertToObject(String orig){
  try {
    return new Integer(orig);
  }
 catch (  NumberFormatException ex) {
    Iterator iter=options.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry mapEntry=(Map.Entry)iter.next();
      if (mapEntry.getValue().equals(orig)) {
        return mapEntry.getKey();
      }
    }
    Reporter.informUser(this,Msg.IGNORE,new Object[]{orig});
    return null;
  }
}","public Object convertToObject(String orig){
  try {
    return new Integer(orig);
  }
 catch (  NumberFormatException ex) {
    Iterator iter=options.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry mapEntry=(Map.Entry)iter.next();
      if (mapEntry.getValue().equals(orig)) {
        return mapEntry.getKey();
      }
    }
    return new Integer(0);
  }
}",0.8695652173913043
101567,"public Object convertToObject(String orig){
  Iterator iter=options.entrySet().iterator();
  Map.Entry mapEntry=null;
  while (iter.hasNext()) {
    mapEntry=(Map.Entry)iter.next();
    if (mapEntry.getValue().toString().equals(orig) || mapEntry.getKey().toString().equals(orig)) {
      return mapEntry.getKey();
    }
  }
  Reporter.informUser(this,Msg.IGNORE,new Object[]{orig});
  return ""String_Node_Str"";
}","public Object convertToObject(String orig){
  Iterator iter=options.entrySet().iterator();
  Map.Entry mapEntry=null;
  while (iter.hasNext()) {
    mapEntry=(Map.Entry)iter.next();
    if (mapEntry.getValue().toString().equals(orig) || mapEntry.getKey().toString().equals(orig)) {
      return mapEntry.getKey().toString();
    }
  }
  Reporter.informUser(this,Msg.IGNORE,new Object[]{orig});
  return ""String_Node_Str"";
}",0.9868263473053892
101568,"/** 
 * Parse a textual representation of patches and return a List of Patch objects.
 * @param input Text representation of patches
 * @return List of Patch objects
 */
public Patch fromText(String input){
  patches.clear();
  String[] text=patchBoundaryPattern.split(input);
  for (int patchCount=0; patchCount < text.length; patchCount++) {
    patches.add(new PatchEntry(text[patchCount]));
  }
  return this;
}","/** 
 * Parse a textual representation of patches and return a List of Patch objects.
 * @param input Text representation of patches
 * @return List of Patch objects
 */
public Patch fromText(String input){
  patches.clear();
  String[] text=patchBoundaryPattern.split(input);
  StringBuffer buf=new StringBuffer();
  for (int patchCount=0; patchCount < text.length; patchCount++) {
    if (patchCount > 0) {
      buf.replace(0,buf.length(),""String_Node_Str"").append(text[patchCount]);
      text[patchCount]=buf.toString();
    }
    patches.add(new PatchEntry(text[patchCount]));
  }
  return this;
}",0.8153241650294696
101569,"public void testMatchFromText(){
  String strp=""String_Node_Str"";
  assertEquals(""String_Node_Str"",strp,new Patch(strp).toText());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new Patch(""String_Node_Str"").toText());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new Patch(""String_Node_Str"").toText());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new Patch(""String_Node_Str"").toText());
}","public void testMatchFromText(){
  String strp=""String_Node_Str"";
  assertEquals(""String_Node_Str"",strp,new Patch(strp).toText());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new Patch(""String_Node_Str"").toText());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new Patch(""String_Node_Str"").toText());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new Patch(""String_Node_Str"").toText());
  assertEquals(""String_Node_Str"",""String_Node_Str"",new Patch(""String_Node_Str"").toText());
}",0.8990011098779135
101570,"/** 
 * Set the timeout for the diff operation. 0 for infinity. Default is 1 second.
 * @param newTimeout
 */
public static void setTimeout(float newTimeout){
  timeout=newTimeout;
}","/** 
 * Set the timeout for the diff operation. The default is 1 second. Use 0 for infinity.
 * @param newTimeout
 */
public static void setTimeout(float newTimeout){
  timeout=newTimeout;
}",0.8924731182795699
101571,"/** 
 * Merge a set of patches onto the text.  Return a patched text, as well as an array of true/false values indicating which patches were applied.
 * @param patches Array of patch objects
 * @param text Old text
 * @return the patch result
 */
public PatchResults apply(String text){
  splitMax();
  boolean[] results=new boolean[patches.size()];
  String resultText=text;
  int delta=0;
  int expectedLoc=0;
  int startLoc=-1;
  String text1=""String_Node_Str"";
  String text2=""String_Node_Str"";
  List diffs;
  int index1=0;
  int index2=0;
  int x=0;
  Iterator patchIter=patches.iterator();
  while (patchIter.hasNext()) {
    PatchEntry aPatch=(PatchEntry)patchIter.next();
    expectedLoc=aPatch.getTargetStart() + delta;
    text1=aPatch.getSourceText();
    Match match=new Match(resultText,text1,expectedLoc);
    startLoc=match.locate();
    if (startLoc == -1) {
      results[x]=false;
    }
 else {
      results[x]=true;
      delta=startLoc - expectedLoc;
      text2=resultText.substring(startLoc,startLoc + text1.length());
      if (text1.equals(text2)) {
        resultText=resultText.substring(0,startLoc) + aPatch.getTargetText() + resultText.substring(startLoc + text1.length());
      }
 else {
        Diff diff=new Diff(text1,text2,false);
        diffs=diff.compare();
        index1=0;
        Iterator diffIter=aPatch.iterator();
        while (diffIter.hasNext()) {
          Difference aDiff=(Difference)diffIter.next();
          EditType editType=aDiff.getEditType();
          if (!EditType.EQUAL.equals(editType)) {
            index2=diff.xIndex(diffs,index1);
          }
          if (EditType.INSERT.equals(editType)) {
            resultText=resultText.substring(0,startLoc + index2) + aDiff.getText() + resultText.substring(startLoc + index2);
          }
 else           if (EditType.DELETE.equals(editType)) {
            resultText=resultText.substring(0,startLoc + index2) + resultText.substring(startLoc + diff.xIndex(diffs,index1 + aDiff.getText().length()));
          }
          if (!EditType.DELETE.equals(editType)) {
            index1+=aDiff.getText().length();
          }
        }
      }
    }
    x++;
  }
  return new PatchResults(resultText,results);
}","/** 
 * Merge this patch onto the text.  Return a patched text, as well as an array of true/false values indicating which patches were applied.
 * @param text Old text
 * @return the patch result
 */
public PatchResults apply(String text){
  splitMax();
  boolean[] results=new boolean[patches.size()];
  String resultText=text;
  int delta=0;
  int expectedLoc=0;
  int startLoc=-1;
  String text1=""String_Node_Str"";
  String text2=""String_Node_Str"";
  List diffs;
  int index1=0;
  int index2=0;
  int x=0;
  Iterator patchIter=patches.iterator();
  while (patchIter.hasNext()) {
    PatchEntry aPatch=(PatchEntry)patchIter.next();
    expectedLoc=aPatch.getTargetStart() + delta;
    text1=aPatch.getSourceText();
    Match match=new Match(resultText,text1,expectedLoc);
    startLoc=match.locate();
    if (startLoc == -1) {
      results[x]=false;
    }
 else {
      results[x]=true;
      delta=startLoc - expectedLoc;
      text2=resultText.substring(startLoc,startLoc + text1.length());
      if (text1.equals(text2)) {
        resultText=resultText.substring(0,startLoc) + aPatch.getTargetText() + resultText.substring(startLoc + text1.length());
      }
 else {
        Diff diff=new Diff(text1,text2,false);
        diffs=diff.compare();
        index1=0;
        Iterator diffIter=aPatch.iterator();
        while (diffIter.hasNext()) {
          Difference aDiff=(Difference)diffIter.next();
          EditType editType=aDiff.getEditType();
          if (!EditType.EQUAL.equals(editType)) {
            index2=diff.xIndex(diffs,index1);
          }
          if (EditType.INSERT.equals(editType)) {
            resultText=resultText.substring(0,startLoc + index2) + aDiff.getText() + resultText.substring(startLoc + index2);
          }
 else           if (EditType.DELETE.equals(editType)) {
            resultText=resultText.substring(0,startLoc + index2) + resultText.substring(startLoc + diff.xIndex(diffs,index1 + aDiff.getText().length()));
          }
          if (!EditType.DELETE.equals(editType)) {
            index1+=aDiff.getText().length();
          }
        }
      }
    }
    x++;
  }
  return new PatchResults(resultText,results);
}",0.984706687970783
101572,"/** 
 * Compute a list of patches to turn text1 into text2. Use the diffs provided.
 * @param source Old text
 * @param target New text
 * @param diffs Optional array of diff tuples for text1 to text2.
 * @return this patch
 */
public Patch make(String source,String target,List diffList){
  List diffs=diffList;
  if (diffs == null) {
    Diff diff=new Diff(source,target);
    diffs=diff.compare();
    if (diffs.size() > 2) {
      DiffCleanup.cleanupSemantic(diffs);
      DiffCleanup.cleanupEfficiency(diffs);
    }
  }
  patches.clear();
  if (diffs.size() == 0) {
    return this;
  }
  PatchEntry patch=new PatchEntry();
  int charCount1=0;
  int charCount2=0;
  String prePatchText=source;
  String postPatchText=source;
  Iterator iter=diffs.iterator();
  int x=0;
  while (iter.hasNext()) {
    Difference diff=(Difference)iter.next();
    EditType editType=diff.getEditType();
    String diffText=diff.getText();
    int len=diffText.length();
    if (!patch.hasDifferences() && !EditType.EQUAL.equals(editType)) {
      patch.setSourceStart(charCount1);
      patch.setTargetStart(charCount2);
    }
    if (EditType.INSERT.equals(editType)) {
      patch.addDifference(diff);
      patch.adjustTargetLength(len);
      postPatchText=postPatchText.substring(0,charCount2) + diffText + postPatchText.substring(charCount2);
    }
 else     if (EditType.DELETE.equals(editType)) {
      patch.adjustSourceLength(len);
      patch.addDifference(diff);
      postPatchText=postPatchText.substring(0,charCount2) + postPatchText.substring(charCount2 + len);
    }
 else     if (EditType.EQUAL.equals(editType) && len <= 2 * margin && patch.hasDifferences() && diffs.size() != x + 1) {
      patch.addDifference(diff);
      patch.adjustSourceLength(len);
      patch.adjustTargetLength(len);
    }
    if (EditType.EQUAL.equals(editType) && len >= 2 * margin && patch.hasDifferences()) {
      patch.addContext(prePatchText);
      patches.add(patch);
      patch=new PatchEntry();
      prePatchText=postPatchText;
    }
    if (!EditType.INSERT.equals(editType)) {
      charCount1+=len;
    }
    if (!EditType.DELETE.equals(editType)) {
      charCount2+=len;
    }
    x++;
  }
  if (patch.hasDifferences()) {
    patch.addContext(prePatchText);
    patches.add(patch);
  }
  return this;
}","/** 
 * Compute a list of patches to turn text1 into text2. Use the diffs provided.
 * @param source Old text
 * @param target New text
 * @param diffList Optional array of diff tuples for text1 to text2.
 * @return this patch
 */
public Patch make(String source,String target,List diffList){
  List diffs=diffList;
  if (diffs == null) {
    Diff diff=new Diff(source,target);
    diffs=diff.compare();
    if (diffs.size() > 2) {
      DiffCleanup.cleanupSemantic(diffs);
      DiffCleanup.cleanupEfficiency(diffs);
    }
  }
  patches.clear();
  if (diffs.size() == 0) {
    return this;
  }
  PatchEntry patch=new PatchEntry();
  int charCount1=0;
  int charCount2=0;
  String prePatchText=source;
  String postPatchText=source;
  Iterator iter=diffs.iterator();
  int x=0;
  while (iter.hasNext()) {
    Difference diff=(Difference)iter.next();
    EditType editType=diff.getEditType();
    String diffText=diff.getText();
    int len=diffText.length();
    if (!patch.hasDifferences() && !EditType.EQUAL.equals(editType)) {
      patch.setSourceStart(charCount1);
      patch.setTargetStart(charCount2);
    }
    if (EditType.INSERT.equals(editType)) {
      patch.addDifference(diff);
      patch.adjustTargetLength(len);
      postPatchText=postPatchText.substring(0,charCount2) + diffText + postPatchText.substring(charCount2);
    }
 else     if (EditType.DELETE.equals(editType)) {
      patch.adjustSourceLength(len);
      patch.addDifference(diff);
      postPatchText=postPatchText.substring(0,charCount2) + postPatchText.substring(charCount2 + len);
    }
 else     if (EditType.EQUAL.equals(editType) && len <= 2 * margin && patch.hasDifferences() && diffs.size() != x + 1) {
      patch.addDifference(diff);
      patch.adjustSourceLength(len);
      patch.adjustTargetLength(len);
    }
    if (EditType.EQUAL.equals(editType) && len >= 2 * margin && patch.hasDifferences()) {
      patch.addContext(prePatchText);
      patches.add(patch);
      patch=new PatchEntry();
      prePatchText=postPatchText;
    }
    if (!EditType.INSERT.equals(editType)) {
      charCount1+=len;
    }
    if (!EditType.DELETE.equals(editType)) {
      charCount2+=len;
    }
    x++;
  }
  if (patch.hasDifferences()) {
    patch.addContext(prePatchText);
    patches.add(patch);
  }
  return this;
}",0.998914223669924
101573,"/** 
 * Add the OSIS elements to the div element. Note, this assumes that the data is fully marked up.
 * @param key The key being added
 * @param div The div element to which the key is being added
 * @param osisContent The OSIS representation of the key being added.
 */
public void addOSIS(Key key,List content,List osisContent){
}","/** 
 * Add the OSIS elements to the div element. Note, this assumes that the data is fully marked up.
 * @param key The key being added
 * @param content The list to which the key's OSIS representation is being added
 * @param osisContent The OSIS representation of the key being added.
 */
public void addOSIS(Key key,List content,List osisContent){
}",0.9344978165938864
101574,"/** 
 * Get the preferred name of a book. Altered by the case setting (see setBookCase() and isLongBookName())
 * @param book The book number (1-66)
 * @return The full name of the book
 * @exception NoSuchVerseException If the book number is not valid
 */
public String getPreferredName(){
  if (BibleInfo.isFullBookName()) {
    return getLongName();
  }
  return getShortName();
}","/** 
 * Get the preferred name of a book. Altered by the case setting (see setBookCase() and isLongBookName())
 * @return The preferred name of the book
 */
public String getPreferredName(){
  if (BibleInfo.isFullBookName()) {
    return getLongName();
  }
  return getShortName();
}",0.3873873873873873
101575,"/** 
 * Create a BookName for a Book of the Bible in a given language.
 * @param locale the language of this BookName
 * @param bookNumber the Book's canonical number
 * @param longName the Book's long name
 * @param shortName the Book's short name, if any
 * @param alternateNames optional alternates for the Book
 */
public BookName(Locale locale,int bookNumber,String longName,String shortName,String alternateNames){
  this.locale=locale;
  this.bookNumber=bookNumber;
  this.longName=longName;
  this.normalizedLongName=normalize(longName,locale);
  this.shortName=shortName;
  this.normalizedShortName=normalize(shortName,locale);
  if (alternateNames != null) {
    this.alternateNames=StringUtil.split(normalize(alternateNames,locale),',');
  }
}","/** 
 * Create a BookName for a Book of the Bible in a given language.
 * @param locale the language of this BookName
 * @param bookNumber the Book's canonical number
 * @param longName the Book's long name
 * @param shortName the Book's short name, if any
 * @param alternateNames optional comma separated list of alternates for the Book
 */
public BookName(Locale locale,int bookNumber,String longName,String shortName,String alternateNames){
  this.locale=locale;
  this.bookNumber=bookNumber;
  this.longName=longName;
  this.normalizedLongName=normalize(longName,locale);
  this.shortName=shortName;
  this.normalizedShortName=normalize(shortName,locale);
  if (alternateNames != null) {
    this.alternateNames=StringUtil.split(normalize(alternateNames,locale),',');
  }
}",0.9843342036553524
101576,"/** 
 * @param name
 * @return return a GBF Tag for the given tag name
 */
public static Tag getTag(Book book,Key key,String name){
  Tag tag=null;
  int length=name.length();
  if (length > 0) {
    TagBuilder builder=null;
    if (length == 2) {
      builder=(TagBuilder)BUILDERS.get(name);
    }
 else {
      builder=(TagBuilder)BUILDERS.get(name.substring(0,2));
    }
    Tag reply=null;
    if (builder != null) {
      reply=builder.createTag(name);
    }
    if (reply == null) {
      log.warn(""String_Node_Str"" + book.getInitials() + ""String_Node_Str""+ key.getName()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
    }
  }
  return tag;
}","/** 
 * @param name
 * @return return a GBF Tag for the given tag name
 */
public static Tag getTag(Book book,Key key,String name){
  Tag tag=null;
  int length=name.length();
  if (length > 0) {
    TagBuilder builder=null;
    if (length == 2) {
      builder=(TagBuilder)BUILDERS.get(name);
    }
 else {
      builder=(TagBuilder)BUILDERS.get(name.substring(0,2));
    }
    if (builder != null) {
      tag=builder.createTag(name);
    }
    if (tag == null) {
      log.warn(""String_Node_Str"" + book.getInitials() + ""String_Node_Str""+ key.getName()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
    }
  }
  return tag;
}",0.6206896551724138
101577,"/** 
 * Take the data stored permanently and copy it to the local storage area, using the configured storage area
 * @throws IOException
 */
public void permanentToLocal(URI uri) throws IOException {
  InputStream is=null;
  try {
    is=NetUtil.getInputStream(uri);
    Properties prop=new Properties();
    prop.load(is);
    is.close();
    setProperties(prop);
  }
  finally {
    IOUtil.close(is);
  }
}","/** 
 * Take the data stored permanently and copy it to the local storage area, using the configured storage area
 * @throws IOException
 */
public void permanentToLocal(URI uri) throws IOException {
  setProperties(NetUtil.loadProperties(uri));
}",0.665648854961832
101578,"/** 
 * Take the data in the local storage area and store it permanently, using the configured storage area.
 */
public void localToPermanent(URI url) throws IOException {
  OutputStream out=null;
  try {
    out=new FileOutputStream(url.getPath());
    getProperties().store(out,title);
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
}","/** 
 * Take the data in the local storage area and store it permanently, using the configured storage area.
 */
public void localToPermanent(URI uri) throws IOException {
  NetUtil.storeProperties(getProperties(),uri,title);
}",0.6301369863013698
101579,"/** 
 * Load the predictive timings if any
 */
private synchronized void loadPredictions(){
  InputStream in=null;
  try {
    in=NetUtil.getInputStream(predictURI);
    if (in != null) {
      predicted=new HashMap();
      Properties temp=new Properties();
      temp.load(in);
      Iterator iter=temp.keySet().iterator();
      while (iter.hasNext()) {
        String title=(String)iter.next();
        String timestr=temp.getProperty(title);
        try {
          Integer time=new Integer(timestr);
          predicted.put(title,time);
          int age=time.intValue();
          if (age > predictedLength) {
            predictedLength=age;
          }
        }
 catch (        NumberFormatException ex) {
          log.error(""String_Node_Str"",ex);
        }
      }
    }
  }
 catch (  IOException ex) {
    log.debug(""String_Node_Str"");
  }
 finally {
    IOUtil.close(in);
  }
}","/** 
 * Load the predictive timings if any
 */
private synchronized void loadPredictions(){
  try {
    predicted=new HashMap();
    Properties temp=NetUtil.loadProperties(predictURI);
    Iterator iter=temp.keySet().iterator();
    while (iter.hasNext()) {
      String title=(String)iter.next();
      String timestr=temp.getProperty(title);
      try {
        Integer time=new Integer(timestr);
        predicted.put(title,time);
        int age=time.intValue();
        if (age > predictedLength) {
          predictedLength=age;
        }
      }
 catch (      NumberFormatException ex) {
        log.error(""String_Node_Str"",ex);
      }
    }
  }
 catch (  IOException ex) {
    log.debug(""String_Node_Str"");
  }
}",0.8126550868486352
101580,"/** 
 * Save the known timings to a properties file.
 */
private synchronized void savePredictions(){
  long end=start;
  Iterator iter=current.keySet().iterator();
  while (iter.hasNext()) {
    String message=(String)iter.next();
    int age=getAgeFromMap(current,message);
    if (age > end) {
      end=age;
    }
  }
  Properties predictions=new Properties();
  iter=current.keySet().iterator();
  while (iter.hasNext()) {
    String message=(String)iter.next();
    int age=getAgeFromMap(current,message);
    predictions.setProperty(message,Integer.toString(age));
  }
  try {
    OutputStream out=NetUtil.getOutputStream(predictURI);
    predictions.store(out,""String_Node_Str"");
  }
 catch (  IOException ex) {
    log.error(""String_Node_Str"",ex);
  }
}","/** 
 * Save the known timings to a properties file.
 */
private synchronized void savePredictions(){
  long end=start;
  Iterator iter=current.keySet().iterator();
  while (iter.hasNext()) {
    String message=(String)iter.next();
    int age=getAgeFromMap(current,message);
    if (age > end) {
      end=age;
    }
  }
  Properties predictions=new Properties();
  iter=current.keySet().iterator();
  while (iter.hasNext()) {
    String message=(String)iter.next();
    int age=getAgeFromMap(current,message);
    predictions.setProperty(message,Integer.toString(age));
  }
  try {
    NetUtil.storeProperties(predictions,predictURI,""String_Node_Str"");
  }
 catch (  IOException ex) {
    log.error(""String_Node_Str"",ex);
  }
}",0.9403085177733064
101581,"public static Map properties2Map(URI propUri) throws IOException {
  InputStream in=null;
  try {
    in=NetUtil.getInputStream(propUri);
    Properties prop=new Properties();
    prop.load(in);
    in.close();
    return properties2Map(prop);
  }
  finally {
    IOUtil.close(in);
  }
}","/** 
 * Convert a <code>Properties</code> located at <code>propURI</code> into a <code>Map</code>.
 * @param propUri The URI of the Properties to convert
 * @return The map
 */
public static Map properties2Map(URI propUri) throws IOException {
  return properties2Map(NetUtil.loadProperties(propUri));
}",0.3050847457627119
101582,"/** 
 * Save all properties to the user's local area. Uses the same property name so as to override it.
 */
public void save(){
  Properties props=new Properties();
  StringBuffer buf=new StringBuffer();
  int i=1;
  for (Iterator it=installers.keySet().iterator(); it.hasNext(); ) {
    String name=(String)it.next();
    Installer installer=(Installer)installers.get(name);
    buf.delete(0,buf.length());
    buf.append(installer.getType());
    buf.append(',');
    buf.append(name);
    buf.append(',');
    buf.append(installer.getInstallerDefinition());
    props.setProperty(PREFIX + i++,buf.toString());
  }
  URI outputURI=Project.instance().getWritablePropertiesURI(getClass().getName());
  try {
    OutputStream out=NetUtil.getOutputStream(outputURI);
    props.store(out,""String_Node_Str"");
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}","/** 
 * Save all properties to the user's local area. Uses the same property name so as to override it.
 */
public void save(){
  Properties props=new Properties();
  StringBuffer buf=new StringBuffer();
  int i=1;
  for (Iterator it=installers.keySet().iterator(); it.hasNext(); ) {
    String name=(String)it.next();
    Installer installer=(Installer)installers.get(name);
    buf.delete(0,buf.length());
    buf.append(installer.getType());
    buf.append(',');
    buf.append(name);
    buf.append(',');
    buf.append(installer.getInstallerDefinition());
    props.setProperty(PREFIX + i++,buf.toString());
  }
  URI outputURI=Project.instance().getWritablePropertiesURI(getClass().getName());
  try {
    NetUtil.storeProperties(props,outputURI,""String_Node_Str"");
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}",0.9552585705984892
101583,"/** 
 * Create a Book appropriate for the BookMetaData
 */
private Book createBook(SwordBookMetaData sbmd) throws BookException {
  BookType modtype=sbmd.getBookType();
  if (modtype.getBookCategory() == null) {
    throw new BookException(Msg.TYPE_UNSUPPORTED);
  }
  return modtype.createBook(sbmd);
}","/** 
 * Create a Book appropriate for the BookMetaData
 */
private Book createBook(SwordBookMetaData sbmd) throws BookException {
  BookType modtype=sbmd.getBookType();
  if (modtype == null || modtype.getBookCategory() == null) {
    throw new BookException(Msg.TYPE_UNSUPPORTED);
  }
  return modtype.createBook(sbmd);
}",0.9696
101584,"private void getBooks(List valid,File bookDir){
  File mods=new File(bookDir,SwordConstants.DIR_CONF);
  if (mods.isDirectory()) {
    String[] bookConfs=SwordBookPath.getBookList(mods);
    for (int i=0; i < bookConfs.length; i++) {
      String bookConf=bookConfs[i];
      try {
        File configfile=new File(mods,bookConf);
        String internal=bookConf;
        if (internal.endsWith(SwordConstants.EXTENSION_CONF)) {
          internal=internal.substring(0,internal.length() - 5);
        }
        SwordBookMetaData sbmd=new SwordBookMetaData(configfile,internal,NetUtil.getURI(bookDir));
        sbmd.setDriver(this);
        Book book=createBook(sbmd);
        if (!valid.contains(book)) {
          valid.add(book);
          IndexManager imanager=IndexManagerFactory.getIndexManager();
          if (imanager.isIndexed(book)) {
            sbmd.setIndexStatus(IndexStatus.DONE);
          }
 else {
            sbmd.setIndexStatus(IndexStatus.UNDONE);
          }
        }
      }
 catch (      IOException e) {
        log.warn(""String_Node_Str"",e);
      }
catch (      BookException e) {
        log.warn(""String_Node_Str"",e);
      }
    }
  }
 else {
    log.debug(""String_Node_Str"" + mods + ""String_Node_Str"");
  }
}","private void getBooks(List valid,File bookDir){
  File mods=new File(bookDir,SwordConstants.DIR_CONF);
  if (mods.isDirectory()) {
    String[] bookConfs=SwordBookPath.getBookList(mods);
    for (int i=0; i < bookConfs.length; i++) {
      String bookConf=bookConfs[i];
      try {
        File configfile=new File(mods,bookConf);
        String internal=bookConf;
        if (internal.endsWith(SwordConstants.EXTENSION_CONF)) {
          internal=internal.substring(0,internal.length() - 5);
        }
        SwordBookMetaData sbmd=new SwordBookMetaData(configfile,internal,NetUtil.getURI(bookDir));
        if (!sbmd.isSupported()) {
          continue;
        }
        sbmd.setDriver(this);
        Book book=createBook(sbmd);
        if (!valid.contains(book)) {
          valid.add(book);
          IndexManager imanager=IndexManagerFactory.getIndexManager();
          if (imanager.isIndexed(book)) {
            sbmd.setIndexStatus(IndexStatus.DONE);
          }
 else {
            sbmd.setIndexStatus(IndexStatus.UNDONE);
          }
        }
      }
 catch (      IOException e) {
        log.warn(""String_Node_Str"",e);
      }
catch (      BookException e) {
        log.warn(""String_Node_Str"",e);
      }
    }
  }
 else {
    log.debug(""String_Node_Str"" + mods + ""String_Node_Str"");
  }
}",0.974459724950884
101585,"public void setLibrary(URI library){
  cet.add(ConfigEntryType.LIBRARY_URL,library.toString());
  super.setLibrary(library);
  String datapath=getProperty(ConfigEntryType.DATA_PATH);
  int lastSlash=datapath.lastIndexOf('/');
  if (lastSlash == -1) {
    return;
  }
  datapath=datapath.substring(0,lastSlash);
  URI location=NetUtil.lengthenURI(library,datapath);
  cet.add(ConfigEntryType.LOCATION_URL,location.toString());
  super.setLocation(location);
}","public void setLibrary(URI library){
  if (!isSupported()) {
    return;
  }
  cet.add(ConfigEntryType.LIBRARY_URL,library.toString());
  super.setLibrary(library);
  String datapath=getProperty(ConfigEntryType.DATA_PATH);
  int lastSlash=datapath.lastIndexOf('/');
  if (lastSlash == -1) {
    return;
  }
  datapath=datapath.substring(0,lastSlash);
  URI location=NetUtil.lengthenURI(library,datapath);
  cet.add(ConfigEntryType.LOCATION_URL,location.toString());
  super.setLocation(location);
}",0.9581589958158996
101586,"/** 
 * Return the orientation of the language of the Book. If a book contains more than one language, it refers to the dominate language of the book. This will be used to present Arabic and Hebrew in their propper orientation.
 * @return true if the orientation for the dominate language is LeftToRight.
 */
boolean isLeftToRight();","/** 
 * Return the orientation of the language of the Book. If a book contains more than one language, it refers to the dominate language of the book. This will be used to present Arabic and Hebrew in their proper orientation.
 * @return true if the orientation for the dominate language is LeftToRight.
 */
boolean isLeftToRight();",0.9984962406015038
101587,"private void adjustDataPath(){
  String datapath=(String)getValue(ConfigEntryType.DATA_PATH);
  if (datapath.startsWith(""String_Node_Str"")) {
    add(ConfigEntryType.DATA_PATH,datapath.substring(2));
  }
}","private void adjustDataPath(){
  String datapath=(String)getValue(ConfigEntryType.DATA_PATH);
  if (datapath == null) {
    datapath=""String_Node_Str"";
  }
  if (datapath.startsWith(""String_Node_Str"")) {
    add(ConfigEntryType.DATA_PATH,datapath.substring(2));
  }
}",0.8686440677966102
101588,"/** 
 * Loads a sword config from a buffer. The returned BookMetaData object will not be associated with a Book so setBook() should be called before getBook() is expected to return anything other than null.
 * @param buffer
 * @param internal
 * @throws IOException
 */
public SwordBookMetaData(byte[] buffer,String internal) throws IOException {
  cet=new ConfigEntryTable(internal);
  cet.load(buffer);
  buildProperties();
}","/** 
 * Loads a sword config from a buffer.
 * @param buffer
 * @param internal
 * @throws IOException
 */
public SwordBookMetaData(byte[] buffer,String internal) throws IOException {
  cet=new ConfigEntryTable(internal);
  cet.load(buffer);
  buildProperties();
}",0.76410998552822
101589,"public void setLibrary(URI library){
  String datapath=getProperty(ConfigEntryType.DATA_PATH);
  int lastSlash=datapath.lastIndexOf('/');
  if (lastSlash == -1) {
    return;
  }
  datapath=datapath.substring(0,lastSlash);
  URI location=NetUtil.lengthenURI(library,datapath);
  cet.add(ConfigEntryType.LIBRARY_URL,library.toString());
  super.setLibrary(library);
  cet.add(ConfigEntryType.LOCATION_URL,location.toString());
  super.setLocation(location);
}","public void setLibrary(URI library){
  cet.add(ConfigEntryType.LIBRARY_URL,library.toString());
  super.setLibrary(library);
  String datapath=getProperty(ConfigEntryType.DATA_PATH);
  int lastSlash=datapath.lastIndexOf('/');
  if (lastSlash == -1) {
    return;
  }
  datapath=datapath.substring(0,lastSlash);
  URI location=NetUtil.lengthenURI(library,datapath);
  cet.add(ConfigEntryType.LOCATION_URL,location.toString());
  super.setLocation(location);
}",0.8078602620087336
101590,"public Key find(Index index) throws BookException {
  Key left=getLeftQuery().find(index);
  if (left.isEmpty()) {
    return left;
  }
  Key right=getRightQuery().find(index);
  if (right.isEmpty()) {
    return right;
  }
  left.retainAll(right);
  return left;
}","public Key find(Index index) throws BookException {
  Key left=getLeftQuery().find(index);
  if (left.isEmpty()) {
    return left;
  }
  Key right=getRightQuery().find(index);
  if (right.isEmpty()) {
    return right;
  }
  if (right instanceof PassageTally) {
    right.retainAll(left);
    return right;
  }
  left.retainAll(right);
  return left;
}",0.7734627831715211
101591,"public Key find(Index index) throws BookException {
  Key left=getLeftQuery().find(index);
  Key right=getRightQuery().find(index);
  if (left.isEmpty()) {
    return right;
  }
  if (right.isEmpty()) {
    return left;
  }
  left.addAll(right);
  return left;
}","public Key find(Index index) throws BookException {
  Key left=getLeftQuery().find(index);
  Key right=getRightQuery().find(index);
  if (left.isEmpty()) {
    return right;
  }
  if (right.isEmpty()) {
    return left;
  }
  if (right instanceof PassageTally) {
    right.addAll(left);
    return right;
  }
  left.addAll(right);
  return left;
}",0.7750410509031199
101592,"/** 
 * Do the actual parsing. Anything that does not match causes a BookException.
 * @param input
 * @throws BookException
 */
private void parse(String input) throws BookException {
}","/** 
 * Do the actual parsing. Anything that does not match causes a BookException.
 * @param input
 * @throws BookException
 */
private void parse(String input) throws BookException {
  String text=input;
  Matcher m=STRONGS_PATTERN.matcher(text);
  if (!m.lookingAt()) {
    throw new BookException(Msg.STRONGS_ERROR_NUMBER,new Object[]{input});
  }
  String lang=m.group(1);
  language=lang.charAt(0);
switch (language) {
case 'g':
    language='G';
  break;
case 'h':
language='H';
break;
default :
}
strongsNumber=Short.parseShort(m.group(2));
}",0.5054347826086957
101593,"/** 
 * Add an element to history. If there is any ""forward"" list, the element replaces it.
 * @param obj
 */
public void add(Object obj){
  if (nav.size() > 0) {
    nav.subList(backCount,nav.size()).clear();
  }
  nav.add(obj);
  backCount++;
  visit(obj);
  fireHistoryChanged();
}","/** 
 * Add an element to history. If the element is in the forward list, then it replaces everything in the forward list upto it. Otherwise, it replaces the forward list.
 * @param obj the object to add
 */
public void add(Object obj){
  Object current=getCurrent();
  if (obj == null || obj.equals(current)) {
    return;
  }
  int size=nav.size();
  if (size > backCount) {
    int pos=backCount;
    while (pos < size && !obj.equals(nav.get(pos))) {
      pos++;
    }
    nav.subList(backCount,Math.min(pos++,size)).clear();
  }
  if (!obj.equals(peek(1))) {
    nav.add(backCount,obj);
  }
  backCount++;
  visit(obj);
  fireHistoryChanged();
}",0.3468950749464668
101594,"/** 
 * Make a particular element in the navigation list the current item in history.
 * @param index the index of item to make the last one in the back list,-1 (or lower) will put everything in the forward list. Indexes beyond the end of the list will put everything in the back list.
 */
public Object select(int index){
  int i=index;
  int size=nav.size();
  if (i > size) {
    i=size;
  }
 else   if (i < 1) {
    i=1;
  }
  backCount=i;
  fireHistoryChanged();
  return getCurrent();
}","/** 
 * Make a particular element in the navigation list the current item in history.
 * @param index the index of item to make the last one in the back list,-1 (or lower) will put everything in the forward list. Indexes beyond the end of the list will put everything in the back list.
 */
public Object select(int index){
  int i=index;
  int size=nav.size();
  if (i > size) {
    i=size;
  }
 else   if (i < 1) {
    i=1;
  }
  if (i != backCount) {
    backCount=i;
    fireHistoryChanged();
  }
  return getCurrent();
}",0.968503937007874
101595,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.addTest(org.crosswire.common.util.AllTests.suite());
  suite.addTest(org.crosswire.common.progress.AllTests.suite());
  suite.addTest(org.crosswire.common.diff.AllTests.suite());
  suite.addTest(org.crosswire.common.xml.AllTests.suite());
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.addTest(org.crosswire.common.util.AllTests.suite());
  suite.addTest(org.crosswire.common.progress.AllTests.suite());
  suite.addTest(org.crosswire.common.diff.AllTests.suite());
  suite.addTest(org.crosswire.common.history.AllTests.suite());
  suite.addTest(org.crosswire.common.xml.AllTests.suite());
  return suite;
}",0.9108635097493036
101596,"public URI getLocation(){
  URI uri=null;
  try {
    String loc=getProperty(KEY_LOCATION_URL);
    if (loc != null) {
      uri=new URI(loc);
    }
    return uri;
  }
 catch (  URISyntaxException e) {
    return null;
  }
}","public URI getLocation(){
  URI uri=null;
  try {
    String loc=getProperty(KEY_LOCATION_URI);
    if (loc != null) {
      uri=new URI(loc);
    }
    return uri;
  }
 catch (  URISyntaxException e) {
    return null;
  }
}",0.9955555555555556
101597,"public void setLocation(URI location){
  putProperty(KEY_LOCATION_URL,location.toString());
}","public void setLocation(URI location){
  putProperty(KEY_LOCATION_URI,location.toString());
}",0.989247311827957
101598,"public void setLibrary(URI library){
  putProperty(KEY_LIBRARY_URL,library.toString());
}","public void setLibrary(URI library){
  putProperty(KEY_LIBRARY_URI,library.toString());
}",0.9887640449438202
101599,"public URI getLibrary(){
  URI uri=null;
  try {
    String loc=getProperty(KEY_LIBRARY_URL);
    if (loc != null) {
      uri=new URI(loc);
    }
    return uri;
  }
 catch (  URISyntaxException e) {
    return null;
  }
}","public URI getLibrary(){
  URI uri=null;
  try {
    String loc=getProperty(KEY_LIBRARY_URI);
    if (loc != null) {
      uri=new URI(loc);
    }
    return uri;
  }
 catch (  URISyntaxException e) {
    return null;
  }
}",0.9955156950672646
101600,"public void run(){
  URI predicturl=Project.instance().getWritablePropertiesURI(""String_Node_Str"");
  Progress job=JobManager.createJob(Msg.INSTALLING.toString(sbmd.getName()),predicturl,this,true);
  yield();
  try {
    job.setSectionName(Msg.JOB_INIT.toString());
    URI temp=NetUtil.getTemporaryURI(""String_Node_Str"",ZIP_SUFFIX);
    download(job,packageDirectory,sbmd.getInitials() + ZIP_SUFFIX,temp);
    job.setCancelable(false);
    if (!job.isFinished()) {
      File dldir=SwordBookPath.getSwordDownloadDir();
      IOUtil.unpackZip(NetUtil.getAsFile(temp),dldir);
      job.setSectionName(Msg.JOB_CONFIG.toString());
      sbmd.setLibrary(NetUtil.getURI(dldir));
      SwordBookDriver.registerNewBook(sbmd);
    }
  }
 catch (  IOException e) {
    Reporter.informUser(this,e);
    job.cancel();
  }
catch (  InstallException e) {
    Reporter.informUser(this,e);
    job.cancel();
  }
catch (  BookException e) {
    Reporter.informUser(this,e);
    job.cancel();
  }
 finally {
    job.done();
  }
}","public void run(){
  URI predictURI=Project.instance().getWritablePropertiesURI(""String_Node_Str"");
  Progress job=JobManager.createJob(Msg.INSTALLING.toString(sbmd.getName()),predictURI,this,true);
  yield();
  try {
    job.setSectionName(Msg.JOB_INIT.toString());
    URI temp=NetUtil.getTemporaryURI(""String_Node_Str"",ZIP_SUFFIX);
    download(job,packageDirectory,sbmd.getInitials() + ZIP_SUFFIX,temp);
    job.setCancelable(false);
    if (!job.isFinished()) {
      File dldir=SwordBookPath.getSwordDownloadDir();
      IOUtil.unpackZip(NetUtil.getAsFile(temp),dldir);
      job.setSectionName(Msg.JOB_CONFIG.toString());
      sbmd.setLibrary(NetUtil.getURI(dldir));
      SwordBookDriver.registerNewBook(sbmd);
    }
  }
 catch (  IOException e) {
    Reporter.informUser(this,e);
    job.cancel();
  }
catch (  InstallException e) {
    Reporter.informUser(this,e);
    job.cancel();
  }
catch (  BookException e) {
    Reporter.informUser(this,e);
    job.cancel();
  }
 finally {
    job.done();
  }
}",0.9940769990128332
101601,"public boolean isNewer(Book book){
}","public boolean isNewer(Book book){
  File dldir=SwordBookPath.getSwordDownloadDir();
  SwordBookMetaData sbmd=(SwordBookMetaData)book.getBookMetaData();
  File conf=new File(dldir,sbmd.getConfPath());
  if (!conf.exists()) {
    return false;
  }
  URI configURI=NetUtil.getURI(conf);
  URI remote=toRemoteURI(book);
  return NetUtil.isNewer(remote,configURI,proxyHost,proxyPort);
}",0.1722488038277512
101602,"public void install(Book book){
  if (Books.installed().getBook(book.getName()) != null) {
    return;
  }
  final SwordBookMetaData sbmd=(SwordBookMetaData)book.getBookMetaData();
  final Thread worker=new Thread(""String_Node_Str""){
    public void run(){
      URI predicturl=Project.instance().getWritablePropertiesURI(""String_Node_Str"");
      Progress job=JobManager.createJob(Msg.INSTALLING.toString(sbmd.getName()),predicturl,this,true);
      yield();
      try {
        job.setSectionName(Msg.JOB_INIT.toString());
        URI temp=NetUtil.getTemporaryURI(""String_Node_Str"",ZIP_SUFFIX);
        download(job,packageDirectory,sbmd.getInitials() + ZIP_SUFFIX,temp);
        job.setCancelable(false);
        if (!job.isFinished()) {
          File dldir=SwordBookPath.getSwordDownloadDir();
          IOUtil.unpackZip(NetUtil.getAsFile(temp),dldir);
          job.setSectionName(Msg.JOB_CONFIG.toString());
          sbmd.setLibrary(NetUtil.getURI(dldir));
          SwordBookDriver.registerNewBook(sbmd);
        }
      }
 catch (      IOException e) {
        Reporter.informUser(this,e);
        job.cancel();
      }
catch (      InstallException e) {
        Reporter.informUser(this,e);
        job.cancel();
      }
catch (      BookException e) {
        Reporter.informUser(this,e);
        job.cancel();
      }
 finally {
        job.done();
      }
    }
  }
;
  worker.setPriority(Thread.MIN_PRIORITY);
  worker.start();
}","public void install(Book book){
  if (Books.installed().getBook(book.getName()) != null) {
    return;
  }
  final SwordBookMetaData sbmd=(SwordBookMetaData)book.getBookMetaData();
  final Thread worker=new Thread(""String_Node_Str""){
    public void run(){
      URI predictURI=Project.instance().getWritablePropertiesURI(""String_Node_Str"");
      Progress job=JobManager.createJob(Msg.INSTALLING.toString(sbmd.getName()),predictURI,this,true);
      yield();
      try {
        job.setSectionName(Msg.JOB_INIT.toString());
        URI temp=NetUtil.getTemporaryURI(""String_Node_Str"",ZIP_SUFFIX);
        download(job,packageDirectory,sbmd.getInitials() + ZIP_SUFFIX,temp);
        job.setCancelable(false);
        if (!job.isFinished()) {
          File dldir=SwordBookPath.getSwordDownloadDir();
          IOUtil.unpackZip(NetUtil.getAsFile(temp),dldir);
          job.setSectionName(Msg.JOB_CONFIG.toString());
          sbmd.setLibrary(NetUtil.getURI(dldir));
          SwordBookDriver.registerNewBook(sbmd);
        }
      }
 catch (      IOException e) {
        Reporter.informUser(this,e);
        job.cancel();
      }
catch (      InstallException e) {
        Reporter.informUser(this,e);
        job.cancel();
      }
catch (      BookException e) {
        Reporter.informUser(this,e);
        job.cancel();
      }
 finally {
        job.done();
      }
    }
  }
;
  worker.setPriority(Thread.MIN_PRIORITY);
  worker.start();
}",0.9958448753462604
101603,"/** 
 * Get a list of the available readings sets
 */
public String[] getInstalledReadingsSets(){
  try {
    URL index=ResourceUtil.getResource(ReadingsBookDriver.class,""String_Node_Str"");
    return NetUtil.listByIndexFile(NetUtil.toURI(index),new URLFilter(){
      public boolean accept(      String name){
        return true;
      }
    }
);
  }
 catch (  IOException ex) {
    return new String[0];
  }
}","/** 
 * Get a list of the available readings sets
 */
public String[] getInstalledReadingsSets(){
  try {
    URL index=ResourceUtil.getResource(ReadingsBookDriver.class,""String_Node_Str"");
    return NetUtil.listByIndexFile(NetUtil.toURI(index),new URIFilter(){
      public boolean accept(      String name){
        return true;
      }
    }
);
  }
 catch (  IOException ex) {
    return new String[0];
  }
}",0.9975728155339806
101604,"/** 
 * We have downloaded a search index to a zip file. It should be installed from here.
 * @param book The book that we downloaded an index for
 * @param tempDest The URL of a zip file to install
 */
void installDownloadedIndex(Book book,URI tempDest) throws BookException ;","/** 
 * We have downloaded a search index to a zip file. It should be installed from here.
 * @param book The book that we downloaded an index for
 * @param tempDest The URI of a zip file to install
 */
void installDownloadedIndex(Book book,URI tempDest) throws BookException ;",0.9963898916967509
101605,"/** 
 * Determine where an index should be stored
 * @param book The book to be indexed
 * @return A URL to store stuff in
 * @throws IOException If there is a problem in finding where to store stuff
 */
protected URI getStorageArea(Book book) throws IOException {
}","/** 
 * Determine where an index should be stored
 * @param book The book to be indexed
 * @return A URI to store stuff in
 * @throws IOException If there is a problem in finding where to store stuff
 */
protected URI getStorageArea(Book book) throws IOException {
}",0.9962406015037594
101606,"/** 
 * Prevent Instansiation. <p>The biggest job is trying to work out which resource bundle to load to work out where the config and data files are stored. We construct a name from the projectname, hostname and any other info and then try to use that.
 */
private Project(){
  CWClassLoader.setHome(getUserProjectDir());
  try {
    URI urlcache=getTempScratchSpace(DIR_NETCACHE,true);
    File filecache=new File(urlcache.getPath());
    NetUtil.setURICacheDir(filecache);
  }
 catch (  IOException ex) {
    log.warn(""String_Node_Str"",ex);
  }
}","/** 
 * Prevent Instansiation. <p>The biggest job is trying to work out which resource bundle to load to work out where the config and data files are stored. We construct a name from the projectname, hostname and any other info and then try to use that.
 */
private Project(){
  CWClassLoader.setHome(getUserProjectDir());
  try {
    URI uricache=getTempScratchSpace(DIR_NETCACHE,true);
    File filecache=new File(uricache.getPath());
    NetUtil.setURICacheDir(filecache);
  }
 catch (  IOException ex) {
    log.warn(""String_Node_Str"",ex);
  }
}",0.9963570127504554
101607,"/** 
 * Create a new Job. This will automatically fire a workProgressed event to all WorkListeners, with the work property of this job set to 0.
 * @param description Short description of this job
 * @param predicturl Optional URI to save/load prediction times from
 * @param worker Optional thread to use in request to stop worker
 * @param totalWork the size of the work to do
 */
protected Job(String description,URI predicturl,Thread worker,int totalWork){
  this.predictURI=predicturl;
  this.workerThread=worker;
  this.listeners=new ArrayList();
  this.start=-1;
  this.predictedLength=-1;
  beginJob(description,totalWork);
}","/** 
 * Create a new Job. This will automatically fire a workProgressed event to all WorkListeners, with the work property of this job set to 0.
 * @param description Short description of this job
 * @param predictURI Optional URI to save/load prediction times from
 * @param worker Optional thread to use in request to stop worker
 * @param totalWork the size of the work to do
 */
protected Job(String description,URI predictURI,Thread worker,int totalWork){
  this.predictURI=predictURI;
  this.workerThread=worker;
  this.listeners=new ArrayList();
  this.start=-1;
  this.predictedLength=-1;
  beginJob(description,totalWork);
}",0.985781990521327
101608,"/** 
 * Get and instansiate the preferred implementor of some interface or abstract class.
 * @param clazz The class or interface to find an implementation of.
 * @return The configured implementing class.
 * @throws MalformedURLException if the properties file can not be found
 * @throws IOException if there is a problem reading the found file
 * @throws ClassNotFoundException if the read contents are not found
 * @throws ClassCastException if the read contents are not valid
 * @throws InstantiationException if the new object can not be instansiated
 * @throws IllegalAccessException if the new object can not be instansiated
 * @see ClassUtil#getImplementors(Class)
 */
public static Object getImplementation(Class clazz) throws MalformedURLException, ClassCastException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
  return getImplementor(clazz).newInstance();
}","/** 
 * Get and instantiate the preferred implementor of some interface or abstract class.
 * @param clazz The class or interface to find an implementation of.
 * @return The configured implementing class.
 * @throws MalformedURLException if the properties file can not be found
 * @throws IOException if there is a problem reading the found file
 * @throws ClassNotFoundException if the read contents are not found
 * @throws ClassCastException if the read contents are not valid
 * @throws InstantiationException if the new object can not be instantiated
 * @throws IllegalAccessException if the new object can not be instantiated
 * @see ClassUtil#getImplementors(Class)
 */
public static Object getImplementation(Class clazz) throws MalformedURLException, ClassCastException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
  return getImplementor(clazz).newInstance();
}",0.9967141292442496
101609,"public int locate(){
  alphabet();
  scoreTextLength=Math.max(text.length(),Bitap.MINLENGTH);
  scoreTextLength=Math.min(scoreTextLength,Bitap.MAXLENGTH);
  double scoreThreshold=Bitap.THRESHOLD;
  int bestLoc=text.indexOf(pattern,loc);
  if (bestLoc != -1) {
    scoreThreshold=Math.min(bitapScore(0,bestLoc),scoreThreshold);
  }
  bestLoc=text.lastIndexOf(pattern,loc + pattern.length());
  if (bestLoc != -1) {
    scoreThreshold=Math.min(bitapScore(0,bestLoc),scoreThreshold);
  }
  int matchmask=(int)Math.pow(2,pattern.length() - 1);
  bestLoc=-1;
  int binMin;
  int binMid;
  int binMax=Math.max(loc + loc,text.length());
  int[] lastrd=new int[0];
  for (int d=0; d < pattern.length(); d++) {
    int[] rd=new int[text.length()];
    binMin=loc;
    binMid=binMax;
    while (binMin < binMid) {
      if (bitapScore(d,binMid) < scoreThreshold) {
        binMin=binMid;
      }
 else {
        binMax=binMid;
      }
      binMid=(binMax - binMin) / 2 + binMin;
    }
    binMax=binMid;
    int start=Math.max(0,loc - (binMid - loc) - 1);
    int finish=Math.min(text.length() - 1,pattern.length() + binMid);
    if (text.charAt(finish) == pattern.charAt(pattern.length() - 1)) {
      rd[finish]=(int)Math.pow(2,d + 1) - 1;
    }
 else {
      rd[finish]=(int)Math.pow(2,d) - 1;
    }
    for (int j=finish - 1; j >= start; j--) {
      Character curChar=new Character(text.charAt(j));
      int mask=alphabet.containsKey(curChar) ? ((Integer)alphabet.get(curChar)).intValue() : 0;
      if (d == 0) {
        rd[j]=((rd[j + 1] << 1) | 1) & mask;
      }
 else {
        rd[j]=((rd[j + 1] << 1) | 1) & mask | ((lastrd[j + 1] << 1) | 1) | ((lastrd[j] << 1) | 1) | lastrd[j + 1];
      }
      if ((rd[j] & matchmask) != 0) {
        double score=bitapScore(d,j);
        if (score <= scoreThreshold) {
          scoreThreshold=score;
          bestLoc=j;
          if (j > loc) {
            start=Math.max(0,loc - (j - loc));
          }
 else {
            break;
          }
        }
      }
    }
    if (bitapScore(d + 1,loc) > scoreThreshold) {
      break;
    }
    lastrd=rd;
  }
  return bestLoc;
}","public int locate(){
  alphabet();
  scoreTextLength=Math.max(text.length(),Bitap.minLength);
  scoreTextLength=Math.min(scoreTextLength,Bitap.maxLength);
  double scoreThreshold=Bitap.threshold;
  int bestLoc=text.indexOf(pattern,loc);
  if (bestLoc != -1) {
    scoreThreshold=Math.min(bitapScore(0,bestLoc),scoreThreshold);
  }
  bestLoc=text.lastIndexOf(pattern,loc + pattern.length());
  if (bestLoc != -1) {
    scoreThreshold=Math.min(bitapScore(0,bestLoc),scoreThreshold);
  }
  int matchmask=(int)Math.pow(2,pattern.length() - 1);
  bestLoc=-1;
  int binMin;
  int binMid;
  int binMax=Math.max(loc + loc,text.length());
  int[] lastrd=new int[0];
  for (int d=0; d < pattern.length(); d++) {
    int[] rd=new int[text.length()];
    binMin=loc;
    binMid=binMax;
    while (binMin < binMid) {
      if (bitapScore(d,binMid) < scoreThreshold) {
        binMin=binMid;
      }
 else {
        binMax=binMid;
      }
      binMid=(binMax - binMin) / 2 + binMin;
    }
    binMax=binMid;
    int start=Math.max(0,loc - (binMid - loc) - 1);
    int finish=Math.min(text.length() - 1,pattern.length() + binMid);
    if (text.charAt(finish) == pattern.charAt(pattern.length() - 1)) {
      rd[finish]=(int)Math.pow(2,d + 1) - 1;
    }
 else {
      rd[finish]=(int)Math.pow(2,d) - 1;
    }
    for (int j=finish - 1; j >= start; j--) {
      Character curChar=new Character(text.charAt(j));
      int mask=alphabet.containsKey(curChar) ? ((Integer)alphabet.get(curChar)).intValue() : 0;
      if (d == 0) {
        rd[j]=((rd[j + 1] << 1) | 1) & mask;
      }
 else {
        rd[j]=((rd[j + 1] << 1) | 1) & mask | ((lastrd[j + 1] << 1) | 1) | ((lastrd[j] << 1) | 1) | lastrd[j + 1];
      }
      if ((rd[j] & matchmask) != 0) {
        double score=bitapScore(d,j);
        if (score <= scoreThreshold) {
          scoreThreshold=score;
          bestLoc=j;
          if (j > loc) {
            start=Math.max(0,loc - (j - loc));
          }
 else {
            break;
          }
        }
      }
    }
    if (bitapScore(d + 1,loc) > scoreThreshold) {
      break;
    }
    lastrd=rd;
  }
  return bestLoc;
}",0.9801606046291924
101610,"/** 
 * Compute and return the score for a match with e errors and x location.
 * @param e Number of errors in match
 * @param x Location of match
 * @return Overall score for match
 */
private double bitapScore(int e,int x){
  int d=Math.abs(loc - x);
  return (e / (float)pattern.length() / Bitap.BALANCE) + (d / (float)scoreTextLength / (1.0 - Bitap.BALANCE));
}","/** 
 * Compute and return the score for a match with e errors and x location.
 * @param e Number of errors in match
 * @param x Location of match
 * @return Overall score for match
 */
private double bitapScore(int e,int x){
  int d=Math.abs(loc - x);
  return (e / (float)pattern.length() / Bitap.balance) + (d / (float)scoreTextLength / (1.0 - Bitap.balance));
}",0.8356164383561644
101611,"public int hashCode(){
  final int PRIME=31;
  int result=1;
  result=PRIME * result + ((commonality == null) ? 0 : commonality.hashCode());
  result=PRIME * result + ((sourceEnd == null) ? 0 : sourceEnd.hashCode());
  result=PRIME * result + ((sourceStart == null) ? 0 : sourceStart.hashCode());
  result=PRIME * result + ((targetEnd == null) ? 0 : targetEnd.hashCode());
  result=PRIME * result + ((targetStart == null) ? 0 : targetStart.hashCode());
  return result;
}","public int hashCode(){
  final int PRIME=31;
  int result=1;
  result=PRIME * result + ((sourcePrefix == null) ? 0 : sourcePrefix.hashCode());
  result=PRIME * result + ((sourceSuffix == null) ? 0 : sourceSuffix.hashCode());
  result=PRIME * result + ((targetPrefix == null) ? 0 : targetPrefix.hashCode());
  result=PRIME * result + ((targetSuffix == null) ? 0 : targetSuffix.hashCode());
  result=PRIME * result + ((commonality == null) ? 0 : commonality.hashCode());
  return result;
}",0.3319415448851774
101612,"public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  final CommonMiddle other=(CommonMiddle)obj;
  return commonality.equals(other.commonality) && sourceEnd.equals(other.sourceEnd) && sourceStart.equals(other.sourceStart)&& targetEnd.equals(other.targetEnd)&& targetStart.equals(other.targetStart);
}","public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  final CommonMiddle other=(CommonMiddle)obj;
  return sourcePrefix.equals(other.sourcePrefix) && sourceSuffix.equals(other.sourceSuffix) && targetPrefix.equals(other.targetPrefix)&& targetSuffix.equals(other.targetSuffix)&& commonality.equals(other.commonality);
}",0.6039119804400978
101613,"public String toString(){
  StringBuffer buf=new StringBuffer();
  buf.append(sourceStart);
  buf.append(',');
  buf.append(targetStart);
  buf.append(',');
  buf.append(commonality);
  buf.append(',');
  buf.append(sourceEnd);
  buf.append(',');
  buf.append(targetEnd);
  return buf.toString();
}","public String toString(){
  StringBuffer buf=new StringBuffer();
  buf.append(sourcePrefix);
  buf.append(',');
  buf.append(sourceSuffix);
  buf.append(',');
  buf.append(targetPrefix);
  buf.append(',');
  buf.append(targetSuffix);
  buf.append(',');
  buf.append(commonality);
  return buf.toString();
}",0.6423841059602649
101614,"/** 
 * A CommonMiddle represents an overlap between a baseline/source text and a changed/target text.
 * @param sourceStart The text before the commonality form the source
 * @param targetStart The text before the commonality form the target
 * @param commonality The text in common
 * @param sourceEnd The text after the commonality form the source
 * @param targetEnd The text after the commonality form the target
 */
public CommonMiddle(String sourceStart,String targetStart,String commonality,String sourceEnd,String targetEnd){
}","/** 
 * A CommonMiddle represents an overlap between a baseline/source text and a changed/target text.
 * @param sourcePrefix The text before the commonality form the source
 * @param sourceSuffix The text after the commonality form the source
 * @param targetPrefix The text before the commonality form the target
 * @param targetSuffix The text after the commonality form the target
 * @param commonality The text in common
 */
public CommonMiddle(String sourcePrefix,String sourceSuffix,String targetPrefix,String targetSuffix,String commonality){
}",0.6176470588235294
101615,"/** 
 * Does a substring of shortText exist within longText such that the substring is at least half the length of longText?
 * @param longText Longer string
 * @param shortText Shorter string
 * @param startIndex Start index of quarter length substring within longText
 * @return Five element String array, containing the prefix of longText, thesuffix of longText, the prefix of shortText, the suffix of shortText and the common middle.  Or null if there was no match.
 */
private static CommonMiddle halfMatch(final String longText,final String shortText,final int startIndex){
  String seed=longText.substring(startIndex,startIndex + (longText.length() / 4));
  int j=-1;
  String bestCommon=""String_Node_Str"";
  String bestLongTextA=""String_Node_Str"";
  String bestLongTextB=""String_Node_Str"";
  String bestShortTextA=""String_Node_Str"";
  String bestShortTextB=""String_Node_Str"";
  while ((j=shortText.indexOf(seed,j + 1)) != -1) {
    int prefixLength=Commonality.prefix(longText.substring(startIndex),shortText.substring(j));
    int suffixLength=Commonality.suffix(longText.substring(0,startIndex),shortText.substring(0,j));
    if (bestCommon.length() < (prefixLength + suffixLength)) {
      bestCommon=shortText.substring(j - suffixLength,j) + shortText.substring(j,j + prefixLength);
      bestLongTextA=longText.substring(0,startIndex - suffixLength);
      bestLongTextB=longText.substring(startIndex + prefixLength);
      bestShortTextA=shortText.substring(0,j - suffixLength);
      bestShortTextB=shortText.substring(j + prefixLength);
    }
  }
  if (bestCommon.length() >= longText.length() / 2) {
    return new CommonMiddle(bestLongTextA,bestLongTextB,bestCommon,bestShortTextA,bestShortTextB);
  }
  return null;
}","/** 
 * Does a substring of shortText exist within longText such that the substring is at least half the length of longText?
 * @param longText Longer string
 * @param shortText Shorter string
 * @param startIndex Start index of quarter length substring within longText
 * @return Five element String array, containing the prefix of longText, thesuffix of longText, the prefix of shortText, the suffix of shortText and the common middle.  Or null if there was no match.
 */
private static CommonMiddle halfMatch(final String longText,final String shortText,final int startIndex){
  String seed=longText.substring(startIndex,startIndex + (longText.length() / 4));
  int j=-1;
  String common=""String_Node_Str"";
  String longTextPrefix=""String_Node_Str"";
  String longTextSuffix=""String_Node_Str"";
  String shortTextPrefix=""String_Node_Str"";
  String shortTextSuffix=""String_Node_Str"";
  while ((j=shortText.indexOf(seed,j + 1)) != -1) {
    int prefixLength=Commonality.prefix(longText.substring(startIndex),shortText.substring(j));
    int suffixLength=Commonality.suffix(longText.substring(0,startIndex),shortText.substring(0,j));
    if (common.length() < (prefixLength + suffixLength)) {
      common=shortText.substring(j - suffixLength,j) + shortText.substring(j,j + prefixLength);
      longTextPrefix=longText.substring(0,startIndex - suffixLength);
      longTextSuffix=longText.substring(startIndex + prefixLength);
      shortTextPrefix=shortText.substring(0,j - suffixLength);
      shortTextSuffix=shortText.substring(j + prefixLength);
    }
  }
  if (common.length() >= longText.length() / 2) {
    return new CommonMiddle(longTextPrefix,longTextSuffix,shortTextPrefix,shortTextSuffix,common);
  }
  return null;
}",0.7234411085450346
101616,"/** 
 * Find the differences between two texts.
 * @param text1 Old string to be diffed
 * @param text2 New string to be diffed
 * @param checkLines Speedup flag.  If false, then don't run aline-level diff first to identify the changed areas. If true, then run a faster slightly less optimal diff
 * @return List of Difference objects
 */
private List compute(){
  List diffs=new ArrayList();
  if (text1.equals(""String_Node_Str"")) {
    diffs.add(new Difference(EditType.INSERT,text2));
    return diffs;
  }
  if (text2.equals(""String_Node_Str"")) {
    diffs.add(new Difference(EditType.DELETE,text1));
    return diffs;
  }
  String longText=text1.length() > text2.length() ? text1 : text2;
  String shortText=text1.length() > text2.length() ? text2 : text1;
  int i=longText.indexOf(shortText);
  if (i != -1) {
    EditType editType=(text1.length() > text2.length()) ? EditType.DELETE : EditType.INSERT;
    diffs.add(new Difference(editType,longText.substring(0,i)));
    diffs.add(new Difference(EditType.EQUAL,shortText));
    diffs.add(new Difference(editType,longText.substring(i + shortText.length())));
    return diffs;
  }
  longText=null;
  shortText=null;
  CommonMiddle middleMatch=Commonality.halfMatch(text1,text2);
  if (middleMatch != null) {
    Diff startDiff=new Diff(middleMatch.getSourceStart(),middleMatch.getTargetStart(),checkLines);
    Diff endDiff=new Diff(middleMatch.getSourceEnd(),middleMatch.getTargetEnd(),checkLines);
    diffs=startDiff.compare();
    diffs.add(new Difference(EditType.EQUAL,middleMatch.getCommonality()));
    diffs.addAll(endDiff.compare());
    return diffs;
  }
  if (checkLines && text1.length() + text2.length() < 250) {
    checkLines=false;
  }
  LineMap lineMap=null;
  if (checkLines) {
    lineMap=new LineMap(text1,text2);
    text1=lineMap.getSourceMap();
    text2=lineMap.getTargetMap();
  }
  diffs=new DifferenceEngine(text1,text2).generate();
  if (diffs == null) {
    diffs=new ArrayList();
    diffs.add(new Difference(EditType.DELETE,text1));
    diffs.add(new Difference(EditType.INSERT,text2));
  }
  if (checkLines && lineMap != null) {
    lineMap.restore(diffs);
    DiffCleanup.cleanupSemantic(diffs);
    diffs.add(new Difference(EditType.EQUAL,""String_Node_Str""));
    int countDeletes=0;
    int countInserts=0;
    String textDelete=""String_Node_Str"";
    String textInsert=""String_Node_Str"";
    ListIterator pointer=diffs.listIterator();
    Difference curDiff=(Difference)pointer.next();
    while (curDiff != null) {
      EditType editType=curDiff.getEditType();
      if (EditType.INSERT.equals(editType)) {
        countInserts++;
        textInsert+=curDiff.getText();
      }
 else       if (EditType.DELETE.equals(editType)) {
        countDeletes++;
        textDelete+=curDiff.getText();
      }
 else {
        if (countDeletes >= 1 && countInserts >= 1) {
          pointer.previous();
          for (int j=0; j < countDeletes + countInserts; j++) {
            pointer.previous();
            pointer.remove();
          }
          Diff newDiff=new Diff(textDelete,textInsert,false);
          Iterator iter=newDiff.compare().iterator();
          while (iter.hasNext()) {
            pointer.add(iter.next());
          }
        }
        countInserts=0;
        countDeletes=0;
        textDelete=""String_Node_Str"";
        textInsert=""String_Node_Str"";
      }
      curDiff=pointer.hasNext() ? (Difference)pointer.next() : null;
    }
    diffs.remove(diffs.size() - 1);
  }
  return diffs;
}","/** 
 * Find the differences between two texts.
 * @param text1 Old string to be diffed
 * @param text2 New string to be diffed
 * @param checkLines Speedup flag.  If false, then don't run aline-level diff first to identify the changed areas. If true, then run a faster slightly less optimal diff
 * @return List of Difference objects
 */
private List compute(){
  List diffs=new ArrayList();
  if (text1.equals(""String_Node_Str"")) {
    diffs.add(new Difference(EditType.INSERT,text2));
    return diffs;
  }
  if (text2.equals(""String_Node_Str"")) {
    diffs.add(new Difference(EditType.DELETE,text1));
    return diffs;
  }
  String longText=text1.length() > text2.length() ? text1 : text2;
  String shortText=text1.length() > text2.length() ? text2 : text1;
  int i=longText.indexOf(shortText);
  if (i != -1) {
    EditType editType=(text1.length() > text2.length()) ? EditType.DELETE : EditType.INSERT;
    diffs.add(new Difference(editType,longText.substring(0,i)));
    diffs.add(new Difference(EditType.EQUAL,shortText));
    diffs.add(new Difference(editType,longText.substring(i + shortText.length())));
    return diffs;
  }
  longText=null;
  shortText=null;
  CommonMiddle middleMatch=Commonality.halfMatch(text1,text2);
  if (middleMatch != null) {
    Diff startDiff=new Diff(middleMatch.getSourcePrefix(),middleMatch.getTargetPrefix(),checkLines);
    Diff endDiff=new Diff(middleMatch.getSourceSuffix(),middleMatch.getTargetSuffix(),checkLines);
    diffs=startDiff.compare();
    diffs.add(new Difference(EditType.EQUAL,middleMatch.getCommonality()));
    diffs.addAll(endDiff.compare());
    return diffs;
  }
  if (checkLines && text1.length() + text2.length() < 250) {
    checkLines=false;
  }
  LineMap lineMap=null;
  if (checkLines) {
    lineMap=new LineMap(text1,text2);
    text1=lineMap.getSourceMap();
    text2=lineMap.getTargetMap();
  }
  diffs=new DifferenceEngine(text1,text2).generate();
  if (diffs == null) {
    diffs=new ArrayList();
    diffs.add(new Difference(EditType.DELETE,text1));
    diffs.add(new Difference(EditType.INSERT,text2));
  }
  if (checkLines && lineMap != null) {
    lineMap.restore(diffs);
    DiffCleanup.cleanupSemantic(diffs);
    diffs.add(new Difference(EditType.EQUAL,""String_Node_Str""));
    int countDeletes=0;
    int countInserts=0;
    String textDelete=""String_Node_Str"";
    String textInsert=""String_Node_Str"";
    ListIterator pointer=diffs.listIterator();
    Difference curDiff=(Difference)pointer.next();
    while (curDiff != null) {
      EditType editType=curDiff.getEditType();
      if (EditType.INSERT.equals(editType)) {
        countInserts++;
        textInsert+=curDiff.getText();
      }
 else       if (EditType.DELETE.equals(editType)) {
        countDeletes++;
        textDelete+=curDiff.getText();
      }
 else {
        if (countDeletes >= 1 && countInserts >= 1) {
          pointer.previous();
          for (int j=0; j < countDeletes + countInserts; j++) {
            pointer.previous();
            pointer.remove();
          }
          Diff newDiff=new Diff(textDelete,textInsert,false);
          Iterator iter=newDiff.compare().iterator();
          while (iter.hasNext()) {
            pointer.add(iter.next());
          }
        }
        countInserts=0;
        countDeletes=0;
        textDelete=""String_Node_Str"";
        textInsert=""String_Node_Str"";
      }
      curDiff=pointer.hasNext() ? (Difference)pointer.next() : null;
    }
    diffs.remove(diffs.size() - 1);
  }
  return diffs;
}",0.9942938659058488
101617,"/** 
 * Reduce the number of edits by eliminating operationally trivial equalities.
 * @param diffs List of Difference objects
 */
public static void cleanupEfficiency(final List diffs){
  if (diffs.isEmpty()) {
    return;
  }
  boolean changes=false;
  Stack equalities=new Stack();
  String lastEquality=null;
  int preInsert=0;
  int preDelete=0;
  int postInsert=0;
  int postDelete=0;
  ListIterator pointer=diffs.listIterator();
  Difference curDiff=pointer.hasNext() ? (Difference)pointer.next() : null;
  Difference safeDiff=curDiff;
  while (curDiff != null) {
    EditType editType=curDiff.getEditType();
    if (EditType.EQUAL.equals(editType)) {
      if (curDiff.getText().length() < editCost && (postInsert + postDelete) > 0) {
        equalities.push(curDiff);
        preInsert=postInsert;
        preDelete=postDelete;
        lastEquality=curDiff.getText();
      }
 else {
        equalities.clear();
        lastEquality=""String_Node_Str"";
        safeDiff=curDiff;
      }
      postInsert=0;
      postDelete=0;
    }
 else {
      if (EditType.DELETE.equals(editType)) {
        postDelete=1;
      }
 else {
        postInsert=1;
      }
      if (lastEquality != null && (((preInsert + preDelete + postInsert+ postDelete) > 0) || ((lastEquality.length() < editCost / 2) && (preInsert + preDelete + postInsert+ postDelete) == 3))) {
        while (curDiff != equalities.lastElement()) {
          curDiff=(Difference)pointer.previous();
        }
        pointer.next();
        pointer.set(new Difference(EditType.DELETE,lastEquality));
        curDiff=new Difference(EditType.INSERT,lastEquality);
        pointer.add(curDiff);
        equalities.pop();
        lastEquality=null;
        if (preInsert == 1 && preDelete == 1) {
          postInsert=1;
          postDelete=1;
          equalities.clear();
          safeDiff=curDiff;
        }
 else {
          if (!equalities.empty()) {
            equalities.pop();
          }
          if (equalities.empty()) {
            curDiff=safeDiff;
          }
 else {
            curDiff=(Difference)equalities.lastElement();
          }
          while (curDiff != pointer.previous()) {
          }
          postInsert=0;
          postDelete=0;
        }
        changes=true;
      }
    }
    curDiff=pointer.hasNext() ? (Difference)pointer.next() : null;
  }
  if (changes) {
    cleanupMerge(diffs);
  }
}","/** 
 * Reduce the number of edits by eliminating operationally trivial equalities.
 * @param diffs List of Difference objects
 */
public static void cleanupEfficiency(final List diffs){
  if (diffs.isEmpty()) {
    return;
  }
  boolean changes=false;
  Stack equalities=new Stack();
  String lastEquality=null;
  int preInsert=0;
  int preDelete=0;
  int postInsert=0;
  int postDelete=0;
  ListIterator pointer=diffs.listIterator();
  Difference curDiff=pointer.hasNext() ? (Difference)pointer.next() : null;
  Difference safeDiff=curDiff;
  while (curDiff != null) {
    EditType editType=curDiff.getEditType();
    if (EditType.EQUAL.equals(editType)) {
      if (curDiff.getText().length() < editCost && (postInsert + postDelete) > 0) {
        equalities.push(curDiff);
        preInsert=postInsert;
        preDelete=postDelete;
        lastEquality=curDiff.getText();
      }
 else {
        equalities.clear();
        lastEquality=null;
        safeDiff=curDiff;
      }
      postInsert=0;
      postDelete=0;
    }
 else {
      if (EditType.DELETE.equals(editType)) {
        postDelete=1;
      }
 else {
        postInsert=1;
      }
      if (lastEquality != null && (((preInsert + preDelete + postInsert+ postDelete) > 0) || ((lastEquality.length() < editCost / 2) && (preInsert + preDelete + postInsert+ postDelete) == 3))) {
        while (curDiff != equalities.lastElement()) {
          curDiff=(Difference)pointer.previous();
        }
        pointer.next();
        pointer.set(new Difference(EditType.DELETE,lastEquality));
        curDiff=new Difference(EditType.INSERT,lastEquality);
        pointer.add(curDiff);
        equalities.pop();
        lastEquality=null;
        if (preInsert == 1 && preDelete == 1) {
          postInsert=1;
          postDelete=1;
          equalities.clear();
          safeDiff=curDiff;
        }
 else {
          if (!equalities.empty()) {
            equalities.pop();
          }
          if (equalities.empty()) {
            curDiff=safeDiff;
          }
 else {
            curDiff=(Difference)equalities.lastElement();
          }
          while (curDiff != pointer.previous()) {
          }
          postInsert=0;
          postDelete=0;
        }
        changes=true;
      }
    }
    curDiff=pointer.hasNext() ? (Difference)pointer.next() : null;
  }
  if (changes) {
    cleanupMerge(diffs);
  }
}",0.9955928646379854
101618,"/** 
 * Reduce the number of edits by eliminating semantically trivial equalities.
 * @param diffs List of Difference objects
 */
public static void cleanupSemantic(final List diffs){
  boolean changes=false;
  Stack equalities=new Stack();
  String lastEquality=""String_Node_Str"";
  int lengthChangesPre=0;
  int lengthChangesPost=0;
  ListIterator pointer=diffs.listIterator();
  Difference curDiff=pointer.hasNext() ? (Difference)pointer.next() : null;
  while (curDiff != null) {
    EditType editType=curDiff.getEditType();
    if (EditType.EQUAL.equals(editType)) {
      equalities.push(curDiff);
      lengthChangesPre=lengthChangesPost;
      lengthChangesPost=0;
      lastEquality=curDiff.getText();
    }
 else {
      lengthChangesPost+=curDiff.getText().length();
      int lastLen=lastEquality != null ? lastEquality.length() : 0;
      if (lastEquality != null && (lastLen <= lengthChangesPre) && (lastLen <= lengthChangesPost)) {
        while (curDiff != equalities.lastElement()) {
          curDiff=(Difference)pointer.previous();
        }
        pointer.next();
        pointer.set(new Difference(EditType.DELETE,lastEquality));
        pointer.add(new Difference(EditType.INSERT,lastEquality));
        equalities.pop();
        if (!equalities.empty()) {
          equalities.pop();
        }
        if (equalities.empty()) {
          while (pointer.hasPrevious()) {
            pointer.previous();
          }
        }
 else {
          curDiff=(Difference)equalities.lastElement();
          while (curDiff != pointer.previous()) {
          }
        }
        lengthChangesPre=0;
        lengthChangesPost=0;
        lastEquality=null;
        changes=true;
      }
    }
    curDiff=pointer.hasNext() ? (Difference)pointer.next() : null;
  }
  if (changes) {
    cleanupMerge(diffs);
  }
}","/** 
 * Reduce the number of edits by eliminating semantically trivial equalities.
 * @param diffs List of Difference objects
 */
public static void cleanupSemantic(final List diffs){
  boolean changes=false;
  Stack equalities=new Stack();
  String lastEquality=null;
  int lengthChangesPre=0;
  int lengthChangesPost=0;
  ListIterator pointer=diffs.listIterator();
  Difference curDiff=pointer.hasNext() ? (Difference)pointer.next() : null;
  while (curDiff != null) {
    EditType editType=curDiff.getEditType();
    if (EditType.EQUAL.equals(editType)) {
      equalities.push(curDiff);
      lengthChangesPre=lengthChangesPost;
      lengthChangesPost=0;
      lastEquality=curDiff.getText();
    }
 else {
      lengthChangesPost+=curDiff.getText().length();
      int lastLen=lastEquality != null ? lastEquality.length() : 0;
      if (lastEquality != null && (lastLen <= lengthChangesPre) && (lastLen <= lengthChangesPost)) {
        while (curDiff != equalities.lastElement()) {
          curDiff=(Difference)pointer.previous();
        }
        pointer.next();
        pointer.set(new Difference(EditType.DELETE,lastEquality));
        pointer.add(new Difference(EditType.INSERT,lastEquality));
        equalities.pop();
        if (!equalities.empty()) {
          equalities.pop();
        }
        if (equalities.empty()) {
          while (pointer.hasPrevious()) {
            pointer.previous();
          }
        }
 else {
          curDiff=(Difference)equalities.lastElement();
          while (curDiff != pointer.previous()) {
          }
        }
        lengthChangesPre=0;
        lengthChangesPost=0;
        lastEquality=null;
        changes=true;
      }
    }
    curDiff=pointer.hasNext() ? (Difference)pointer.next() : null;
  }
  if (changes) {
    cleanupMerge(diffs);
  }
}",0.994216469292206
101619,"public int compareTo(Object obj){
  Key that=(Key)obj;
  int ret=this.getName().compareTo(that.getName());
  if (ret != 0) {
    return ret;
  }
  Iterator thisIter=this.iterator();
  Iterator thatIter=that.iterator();
  Key thisfirst=null;
  Key thatfirst=null;
  if (thisIter.hasNext()) {
    thisfirst=(Key)thisIter.next();
  }
  if (thatIter.hasNext()) {
    thatfirst=(Key)thatIter.next();
  }
  if (thisfirst == null) {
    if (thatfirst == null) {
      return 0;
    }
    return 1;
  }
  if (thatfirst == null) {
    return -1;
  }
  return thisfirst.compareTo(thatfirst);
}","public int compareTo(Object obj){
  Key that=(Key)obj;
  if (this == that) {
    return 0;
  }
  if (that == null) {
    return -1;
  }
  int ret=this.getName().compareTo(that.getName());
  if (ret != 0) {
    return ret;
  }
  Iterator thisIter=this.iterator();
  Iterator thatIter=that.iterator();
  Key thisfirst=null;
  Key thatfirst=null;
  if (thisIter.hasNext()) {
    thisfirst=(Key)thisIter.next();
  }
  if (thatIter.hasNext()) {
    thatfirst=(Key)thatIter.next();
  }
  if (thisfirst == null) {
    if (thatfirst == null) {
      return 0;
    }
    return 1;
  }
  if (thatfirst == null) {
    return -1;
  }
  return thisfirst.getName().compareTo(thatfirst.getName());
}",0.9139700078926598
101620,"/** 
 * Output a minimum of stuff
 */
public static void outputInfoMinimum(){
  java.util.logging.Logger.getLogger(ROOT_LOGGER).setLevel(Level.WARNING);
}","/** 
 * Output a minimum of stuff
 */
public static void outputInfoMinimum(){
  level=Level.WARNING;
}",0.7890625
101621,"/** 
 * Log a message object with the DEBUG level.
 * @param message the message object to log.
 */
public void debug(String message){
  logger.fine(message);
}","/** 
 * Log a message object with the DEBUG level.
 * @param message the message object to log.
 */
public void debug(String message){
  initialize();
  logger.fine(message);
}",0.9523809523809524
101622,"/** 
 * Output everything
 */
public static void outputEverything(){
  java.util.logging.Logger.getLogger(ROOT_LOGGER).setLevel(Level.FINEST);
}","/** 
 * Output everything
 */
public static void outputEverything(){
  level=Level.FINEST;
}",0.7711864406779662
101623,"/** 
 * Stop all logging output
 */
public static void outputNothing(){
  java.util.logging.Logger.getLogger(ROOT_LOGGER).setLevel(Level.OFF);
}","/** 
 * Stop all logging output
 */
public static void outputNothing(){
  level=Level.OFF;
}",0.7711864406779662
101624,"private void doLogging(Level level,String message,Throwable th){
  String className=null;
  String methodName=null;
  int lineNumber=-1;
  StackTraceElement[] stack=(new Throwable()).getStackTrace();
  int ix=0;
  while (ix < stack.length) {
    StackTraceElement frame=stack[ix];
    String cname=frame.getClassName();
    if (cname.equals(CLASS_NAME)) {
      break;
    }
    ix++;
  }
  while (ix < stack.length) {
    StackTraceElement frame=stack[ix];
    String cname=frame.getClassName();
    if (!cname.equals(CLASS_NAME)) {
      className=cname;
      methodName=frame.getMethodName();
      lineNumber=frame.getLineNumber();
      break;
    }
    ix++;
  }
  LogRecord logRecord=new LogRecord(level,message);
  logRecord.setLoggerName(logger.getName());
  logRecord.setSourceClassName(className);
  logRecord.setSourceMethodName(methodName);
  logRecord.setThrown(th);
  logRecord.setSequenceNumber(lineNumber);
  logger.log(logRecord);
}","private void doLogging(Level theLevel,String message,Throwable th){
  initialize();
  String className=null;
  String methodName=null;
  int lineNumber=-1;
  StackTraceElement[] stack=(new Throwable()).getStackTrace();
  int ix=0;
  while (ix < stack.length) {
    StackTraceElement frame=stack[ix];
    String cname=frame.getClassName();
    if (cname.equals(CLASS_NAME)) {
      break;
    }
    ix++;
  }
  while (ix < stack.length) {
    StackTraceElement frame=stack[ix];
    String cname=frame.getClassName();
    if (!cname.equals(CLASS_NAME)) {
      className=cname;
      methodName=frame.getMethodName();
      lineNumber=frame.getLineNumber();
      break;
    }
    ix++;
  }
  LogRecord logRecord=new LogRecord(theLevel,message);
  logRecord.setLoggerName(logger.getName());
  logRecord.setSourceClassName(className);
  logRecord.setSourceMethodName(methodName);
  logRecord.setThrown(th);
  logRecord.setSequenceNumber(lineNumber);
  logger.log(logRecord);
}",0.9864864864864864
101625,"/** 
 * Simple ctor
 */
private Logger(Class id){
  logger=java.util.logging.Logger.getLogger(id.getName());
}","/** 
 * Simple ctor
 */
private Logger(Class id){
  clazz=id;
}",0.6820809248554913
101626,"/** 
 * Constructor for ReadingsBook.
 */
public ReadingsBook(ReadingsBookDriver driver,BookCategory type){
  super(null);
  hash=new TreeMap();
  String setname=ReadingsBookDriver.getReadingsSet();
  Locale defaultLocale=Locale.getDefault();
  ResourceBundle prop=ResourceBundle.getBundle(setname,defaultLocale,CWClassLoader.instance(ReadingsBookDriver.class));
  String name=Msg.TITLE.toString();
  try {
    name=prop.getString(""String_Node_Str"");
  }
 catch (  MissingResourceException e) {
    log.warn(""String_Node_Str"" + setname);
  }
  DefaultBookMetaData bmd=new DefaultBookMetaData(driver,name,type);
  bmd.setInitials(setname);
  setBookMetaData(bmd);
  Calendar greg=new GregorianCalendar(1972,Calendar.JANUARY,1);
  while (greg.get(Calendar.YEAR) == 1972) {
    String internalKey=ReadingsKey.external2internal(greg);
    String readings=""String_Node_Str"";
    try {
      readings=prop.getString(internalKey);
    }
 catch (    MissingResourceException e) {
      log.warn(""String_Node_Str"" + internalKey + ""String_Node_Str""+ setname);
    }
    hash.put(new ReadingsKey(greg.getTime()),readings);
    greg.add(Calendar.DATE,1);
  }
  global=new SetKeyList(hash.keySet(),getName());
}","/** 
 * Constructor for ReadingsBook.
 */
public ReadingsBook(ReadingsBookDriver driver,String setname,BookCategory type){
  super(null);
  hash=new TreeMap();
  Locale defaultLocale=Locale.getDefault();
  ResourceBundle prop=ResourceBundle.getBundle(setname,defaultLocale,CWClassLoader.instance(ReadingsBookDriver.class));
  String name=Msg.TITLE.toString();
  try {
    name=prop.getString(""String_Node_Str"");
  }
 catch (  MissingResourceException e) {
    log.warn(""String_Node_Str"" + setname);
  }
  DefaultBookMetaData bmd=new DefaultBookMetaData(driver,name,type);
  bmd.setInitials(setname);
  setBookMetaData(bmd);
  Calendar greg=new GregorianCalendar(1972,Calendar.JANUARY,1);
  while (greg.get(Calendar.YEAR) == 1972) {
    String internalKey=ReadingsKey.external2internal(greg);
    String readings=""String_Node_Str"";
    try {
      readings=prop.getString(internalKey);
    }
 catch (    MissingResourceException e) {
      log.warn(""String_Node_Str"" + internalKey + ""String_Node_Str""+ setname);
    }
    hash.put(new ReadingsKey(greg.getTime()),readings);
    greg.add(Calendar.DATE,1);
  }
  global=new SetKeyList(hash.keySet(),getName());
}",0.9707254985150616
101627,"/** 
 * Setup the array of BookMetaDatas
 */
public ReadingsBookDriver(){
  books=new Book[]{new ReadingsBook(this,BookCategory.DAILY_DEVOTIONS)};
}","/** 
 * Setup the array of BookMetaDatas
 */
public ReadingsBookDriver(){
  List bookList=new ArrayList();
  String[] installedBooks=getInstalledReadingsSets();
  for (int i=0; i < installedBooks.length; i++) {
    bookList.add(new ReadingsBook(this,installedBooks[i],BookCategory.DAILY_DEVOTIONS));
  }
  books=(Book[])bookList.toArray(new Book[bookList.size()]);
}",0.5408560311284046
101628,"/** 
 * Get a list of the available readings sets
 */
public static String[] getInstalledReadingsSets(){
  try {
    URL index=ResourceUtil.getResource(ReadingsBookDriver.class,""String_Node_Str"");
    return NetUtil.listByIndexFile(index,new URLFilter(){
      public boolean accept(      String name){
        return true;
      }
    }
);
  }
 catch (  IOException ex) {
    return new String[0];
  }
}","/** 
 * Get a list of the available readings sets
 */
public String[] getInstalledReadingsSets(){
  try {
    URL index=ResourceUtil.getResource(ReadingsBookDriver.class,""String_Node_Str"");
    return NetUtil.listByIndexFile(index,new URLFilter(){
      public boolean accept(      String name){
        return true;
      }
    }
);
  }
 catch (  IOException ex) {
    return new String[0];
  }
}",0.9912609238451936
101629,"/** 
 * Migrates the user's project dir, if necessary and possible.
 * @param oldPath the path to the old, deprecated location
 * @param newPath the path to the new location
 * @return newPath if the migration was possible or not needed.
 */
private URL migrateUserProjectDir(URL oldPath,URL newPath){
  if (oldPath.toExternalForm().equals(newPath.toExternalForm())) {
    return newPath;
  }
  if (NetUtil.isDirectory(oldPath)) {
    File oldDir=new File(oldPath.getFile());
    File newDir=new File(newPath.getFile());
    if (oldDir.renameTo(newDir)) {
      return newPath;
    }
    return oldPath;
  }
  return newPath;
}","/** 
 * Migrates the user's project dir, if necessary and possible.
 * @param oldPath the path to the old, deprecated location
 * @param newPath the path to the new location
 * @return newPath if the migration was possible or not needed.
 */
private URL migrateUserProjectDir(URL oldPath,URL newPath){
  if (oldPath.toExternalForm().equals(newPath.toExternalForm())) {
    return newPath;
  }
  if (NetUtil.isDirectory(oldPath)) {
    File oldDir=new File(oldPath.getFile());
    File newDir=new File(newPath.getFile());
    oldDir.renameTo(newDir);
    if (NetUtil.isDirectory(newPath)) {
      return newPath;
    }
    return oldPath;
  }
  return newPath;
}",0.9440993788819876
101630,"public Key readIndex(){
  checkActive();
  SwordBookMetaData bmd=getBookMetaData();
  String charset=bmd.getBookCharset();
  keys=new DefaultKeyList(null,bmd.getName());
  boolean isDailyDevotional=bmd.getBookCategory().equals(BookCategory.DAILY_DEVOTIONS);
  Calendar greg=new GregorianCalendar(1972,Calendar.JANUARY,1);
  DateFormat nameDF=new SimpleDateFormat(""String_Node_Str"");
  long entries;
  try {
    entries=idxRaf.length() / IDX_ENTRY_SIZE;
  }
 catch (  IOException ex) {
    Reporter.informUser(this,ex);
    return keys;
  }
  for (long entry=0; entry < entries; entry++) {
    try {
      byte[] buffer=SwordUtil.readRAF(idxRaf,entry * IDX_ENTRY_SIZE,IDX_ENTRY_SIZE);
      int offset=SwordUtil.decodeLittleEndian32(buffer,0);
      int size=SwordUtil.decodeLittleEndian32(buffer,4);
      byte[] data=SwordUtil.readRAF(datRaf,offset,size);
      int keyend=SwordUtil.findByte(data,SEPARATOR);
      if (keyend == -1) {
        DataPolice.report(""String_Node_Str"" + offset + ""String_Node_Str""+ new String(data)+ ""String_Node_Str"");
        continue;
      }
      byte[] keydata=new byte[keyend];
      System.arraycopy(data,0,keydata,0,keyend);
      String keytitle=SwordUtil.decode(keys,keydata,charset).trim();
      if (keytitle.endsWith(""String_Node_Str"")) {
        keytitle=keytitle.substring(0,keytitle.length() - 1);
      }
      if (isDailyDevotional) {
        String[] parts=StringUtil.splitAll(keytitle,'.');
        greg.set(Calendar.MONTH,Integer.parseInt(parts[0]) - 1);
        greg.set(Calendar.DATE,Integer.parseInt(parts[1]));
        keytitle=nameDF.format(greg.getTime());
      }
      Key key=new IndexKey(keytitle,offset,size,keys);
      keys.addAll(key);
    }
 catch (    IOException ex) {
      log.error(""String_Node_Str"",ex);
    }
catch (    NumberFormatException e) {
      log.error(""String_Node_Str"",e);
    }
  }
  return keys;
}","public Key readIndex(){
  checkActive();
  SwordBookMetaData bmd=getBookMetaData();
  String charset=bmd.getBookCharset();
  keys=new DefaultKeyList(null,bmd.getName());
  boolean isDailyDevotional=bmd.getBookCategory().equals(BookCategory.DAILY_DEVOTIONS);
  Calendar greg=new GregorianCalendar();
  DateFormat nameDF=DateFormat.getDateInstance(DateFormat.MEDIUM);
  long entries;
  try {
    entries=idxRaf.length() / IDX_ENTRY_SIZE;
  }
 catch (  IOException ex) {
    Reporter.informUser(this,ex);
    return keys;
  }
  for (long entry=0; entry < entries; entry++) {
    try {
      byte[] buffer=SwordUtil.readRAF(idxRaf,entry * IDX_ENTRY_SIZE,IDX_ENTRY_SIZE);
      int offset=SwordUtil.decodeLittleEndian32(buffer,0);
      int size=SwordUtil.decodeLittleEndian32(buffer,4);
      byte[] data=SwordUtil.readRAF(datRaf,offset,size);
      int keyend=SwordUtil.findByte(data,SEPARATOR);
      if (keyend == -1) {
        DataPolice.report(""String_Node_Str"" + offset + ""String_Node_Str""+ new String(data)+ ""String_Node_Str"");
        continue;
      }
      byte[] keydata=new byte[keyend];
      System.arraycopy(data,0,keydata,0,keyend);
      String keytitle=SwordUtil.decode(keys,keydata,charset).trim();
      if (keytitle.endsWith(""String_Node_Str"")) {
        keytitle=keytitle.substring(0,keytitle.length() - 1);
      }
      if (isDailyDevotional) {
        String[] parts=StringUtil.splitAll(keytitle,'.');
        greg.set(Calendar.MONTH,Integer.parseInt(parts[0]) - 1);
        greg.set(Calendar.DATE,Integer.parseInt(parts[1]));
        keytitle=nameDF.format(greg.getTime());
      }
      Key key=new IndexKey(keytitle,offset,size,keys);
      if (keys.contains(key)) {
        keys.removeAll(key);
      }
      keys.addAll(key);
    }
 catch (    IOException ex) {
      log.error(""String_Node_Str"",ex);
    }
catch (    NumberFormatException e) {
      log.error(""String_Node_Str"",e);
    }
  }
  return keys;
}",0.9429020429544264
101631,"public Element processTag(Element ele,Attributes attrs){
  Element seg=OSISUtil.factory().createSeg();
  StringBuffer buf=new StringBuffer();
  String color=attrs.getValue(""String_Node_Str"");
  if (color != null) {
    buf.append(OSISUtil.SEG_COLORPREFIX);
    buf.append(color);
    buf.append(';');
  }
  String size=attrs.getValue(""String_Node_Str"");
  if (size != null) {
    buf.append(OSISUtil.SEG_SIZEPREFIX);
    buf.append(size);
    buf.append(';');
  }
  String type=buf.toString();
  if (type != null) {
    seg.setAttribute(OSISUtil.OSIS_ATTR_TYPE,type);
  }
 else {
    DataPolice.report(""String_Node_Str"");
    XMLUtil.debugSAXAttributes(attrs);
  }
  if (ele != null) {
    ele.addContent(seg);
  }
  return seg;
}","public Element processTag(Element ele,Attributes attrs){
  Element seg=OSISUtil.factory().createSeg();
  StringBuffer buf=new StringBuffer();
  String color=attrs.getValue(""String_Node_Str"");
  if (color != null) {
    buf.append(OSISUtil.SEG_COLORPREFIX);
    buf.append(color);
    buf.append(';');
  }
  String size=attrs.getValue(""String_Node_Str"");
  if (size != null) {
    buf.append(OSISUtil.SEG_SIZEPREFIX);
    buf.append(size);
    buf.append(';');
  }
  String type=buf.toString();
  if (type.length() > 0) {
    seg.setAttribute(OSISUtil.OSIS_ATTR_TYPE,type);
  }
 else {
    DataPolice.report(""String_Node_Str"");
    XMLUtil.debugSAXAttributes(attrs);
  }
  if (ele != null) {
    ele.addContent(seg);
  }
  return seg;
}",0.985665529010239
101632,"/** 
 * Migrates the user's project dir, if necessary and possible.
 * @param oldPath the path to the old, deprecated location
 * @param newPath the path to the new location
 * @return newPath if the migration was possible or not needed.
 */
private URL migrateUserProjectDir(URL oldPath,URL newPath){
  if (oldPath.equals(newPath)) {
    return newPath;
  }
  if (NetUtil.isDirectory(oldPath)) {
    File oldDir=new File(oldPath.getFile());
    File newDir=new File(newPath.getFile());
    if (oldDir.renameTo(newDir)) {
      return newPath;
    }
    return oldPath;
  }
  return newPath;
}","/** 
 * Migrates the user's project dir, if necessary and possible.
 * @param oldPath the path to the old, deprecated location
 * @param newPath the path to the new location
 * @return newPath if the migration was possible or not needed.
 */
private URL migrateUserProjectDir(URL oldPath,URL newPath){
  if (oldPath.toExternalForm().equals(newPath.toExternalForm())) {
    return newPath;
  }
  if (NetUtil.isDirectory(oldPath)) {
    File oldDir=new File(oldPath.getFile());
    File newDir=new File(newPath.getFile());
    if (oldDir.renameTo(newDir)) {
      return newPath;
    }
    return oldPath;
  }
  return newPath;
}",0.9721311475409836
101633,"/** 
 * Take a string representation of a verse and parse it into an Array of Strings where each part is likely to be a verse part. The goal is to allow the greatest possible variations in user input. <p>Parts can be separated by pretty much anything. No distinction is made between them. While chapter and verse need to be separated, a separator is assumed between digits and non-digits. Adjacent words, (i.e. sequences of non-digits) are understood to be a book reference. If a number runs up against a book name, it is considered to be either part of the book name (i.e. it is before it) or a chapter number (i.e. it stands after it.)</p> <p>Note: ff and $ are considered to be digits.</p> <p>Note: it is not necessary for this to be a BCV (book, chapter, verse), it may just be BC, B, C, V or CV. No distinction is needed here for a number that stands alone.</p>
 * @param input The string to parse.
 * @return The string array
 * @throws NoSuchVerseException 
 */
public static String[] tokenize(String input) throws NoSuchVerseException {
  String[] args={null,null,null,null,null,null,null,null};
  int length=input.length();
  char[] normalized=new char[length * 2];
  char lastChar='0';
  char curChar=' ';
  int tokenCount=0;
  int normalizedLength=0;
  int startIndex=0;
  String token=null;
  boolean foundBoundary=false;
  for (int i=0; i < length; i++) {
    curChar=input.charAt(i);
    boolean charIsDigit=curChar == '$' || Character.isDigit(curChar) || (curChar == 'f' && (i + 1 < length ? input.charAt(i + 1) : ' ') == 'f');
    if (charIsDigit || Character.isLetter(curChar)) {
      foundBoundary=true;
      boolean charWasDigit=lastChar == '$' || Character.isDigit(lastChar) || (lastChar == 'f' && (i > 2 ? input.charAt(i - 2) : '0') == 'f');
      if (charWasDigit || Character.isLetter(lastChar)) {
        foundBoundary=false;
        if (normalizedLength > 0 && charWasDigit != charIsDigit) {
          foundBoundary=true;
        }
      }
      if (foundBoundary) {
        if (charIsDigit) {
          if (tokenCount >= args.length) {
            throw new NoSuchVerseException(Msg.VERSE_PARTS,new Object[]{input});
          }
          token=new String(normalized,startIndex,normalizedLength - startIndex);
          args[tokenCount++]=token;
          normalizedLength=0;
        }
 else {
          normalized[normalizedLength++]=' ';
        }
      }
      normalized[normalizedLength++]=curChar;
    }
    if (normalizedLength > 0) {
      lastChar=curChar;
    }
  }
  if (tokenCount >= args.length) {
    throw new NoSuchVerseException(Msg.VERSE_PARTS,new Object[]{input});
  }
  token=new String(normalized,startIndex,normalizedLength - startIndex);
  args[tokenCount++]=token;
  String[] results=new String[tokenCount];
  System.arraycopy(args,0,results,0,tokenCount);
  return results;
}","/** 
 * Take a string representation of a verse and parse it into an Array of Strings where each part is likely to be a verse part. The goal is to allow the greatest possible variations in user input. <p>Parts can be separated by pretty much anything. No distinction is made between them. While chapter and verse need to be separated, a separator is assumed between digits and non-digits. Adjacent words, (i.e. sequences of non-digits) are understood to be a book reference. If a number runs up against a book name, it is considered to be either part of the book name (i.e. it is before it) or a chapter number (i.e. it stands after it.)</p> <p>Note: ff and $ are considered to be digits.</p> <p>Note: it is not necessary for this to be a BCV (book, chapter, verse), it may just be BC, B, C, V or CV. No distinction is needed here for a number that stands alone.</p>
 * @param input The string to parse.
 * @return The string array
 * @throws NoSuchVerseException 
 */
public static String[] tokenize(String input) throws NoSuchVerseException {
  String[] args={null,null,null,null,null,null,null,null};
  int length=input.length();
  char[] normalized=new char[length * 2];
  char lastChar='0';
  char curChar=' ';
  int tokenCount=0;
  int normalizedLength=0;
  int startIndex=0;
  String token=null;
  boolean foundBoundary=false;
  for (int i=0; i < length; i++) {
    curChar=input.charAt(i);
    boolean charIsDigit=curChar == '$' || Character.isDigit(curChar) || (curChar == 'f' && (i + 1 < length ? input.charAt(i + 1) : ' ') == 'f' && !Character.isLetter(lastChar));
    if (charIsDigit || Character.isLetter(curChar)) {
      foundBoundary=true;
      boolean charWasDigit=lastChar == '$' || Character.isDigit(lastChar) || (lastChar == 'f' && (i > 2 ? input.charAt(i - 2) : '0') == 'f');
      if (charWasDigit || Character.isLetter(lastChar)) {
        foundBoundary=false;
        if (normalizedLength > 0 && charWasDigit != charIsDigit) {
          foundBoundary=true;
        }
      }
      if (foundBoundary) {
        if (charIsDigit) {
          if (tokenCount >= args.length) {
            throw new NoSuchVerseException(Msg.VERSE_PARTS,new Object[]{input});
          }
          token=new String(normalized,startIndex,normalizedLength - startIndex);
          args[tokenCount++]=token;
          normalizedLength=0;
        }
 else {
          normalized[normalizedLength++]=' ';
        }
      }
      normalized[normalizedLength++]=curChar;
    }
    if (normalizedLength > 0) {
      lastChar=curChar;
    }
  }
  if (tokenCount >= args.length) {
    throw new NoSuchVerseException(Msg.VERSE_PARTS,new Object[]{input});
  }
  token=new String(normalized,startIndex,normalizedLength - startIndex);
  args[tokenCount++]=token;
  String[] results=new String[tokenCount];
  System.arraycopy(args,0,results,0,tokenCount);
  return results;
}",0.994199332044296
101634,"public void setFeatureStates(String[] argv){
  for (int i=0; i < argv.length; i++) {
    String arg=argv[i];
    if (arg.charAt(0) == '=') {
      String option=arg.substring(1);
      String key=option.toLowerCase(Locale.ENGLISH);
      XMLFeatureState feature=(XMLFeatureState)features.get(key);
      if (feature != null) {
        feature.setState(option.equals(key));
      }
    }
  }
}","public void setFeatureStates(String[] argv){
  for (int i=0; i < argv.length; i++) {
    String arg=argv[i];
    if (arg.charAt(0) == '-') {
      String option=arg.substring(1);
      String key=option.toLowerCase(Locale.ENGLISH);
      XMLFeatureState feature=(XMLFeatureState)features.get(key);
      if (feature != null) {
        feature.setState(option.equals(key));
      }
    }
  }
}",0.9974489795918368
101635,"private void createAdapter(String adapterName){
  if (adapter != null) {
    return;
  }
  try {
    adapter=(XMLHandlerAdapter)Class.forName(adapterName).newInstance();
  }
 catch (  ClassNotFoundException e) {
    System.err.println(""String_Node_Str"" + adapterName + ""String_Node_Str"");
  }
catch (  InstantiationException e) {
    System.err.println(""String_Node_Str"" + adapterName + ""String_Node_Str"");
  }
catch (  IllegalAccessException e) {
    System.err.println(""String_Node_Str"" + adapterName + ""String_Node_Str"");
  }
}","private void createAdapter(){
  if (adapter != null) {
    return;
  }
  try {
    adapter=(XMLHandlerAdapter)Class.forName(adapterName).newInstance();
  }
 catch (  ClassNotFoundException e) {
    System.err.println(""String_Node_Str"" + adapterName + ""String_Node_Str"");
  }
catch (  InstantiationException e) {
    System.err.println(""String_Node_Str"" + adapterName + ""String_Node_Str"");
  }
catch (  IllegalAccessException e) {
    System.err.println(""String_Node_Str"" + adapterName + ""String_Node_Str"");
  }
}",0.982725527831094
101636,"private void bind(){
  createParser(DEFAULT_PARSER_NAME);
  createAdapter(DEFAULT_HANDLER_NAME);
  setHandlers();
  features.setFeatures(parser);
}","private void bind(){
  createParser();
  createAdapter();
  setHandlers();
  features.setFeatures(parser);
}",0.8470588235294118
101637,"private void initialize(String[] argv){
  int i=0;
  for (i=0; i < argv.length; i++) {
    String arg=argv[i];
    if (arg.charAt(0) == '-') {
      String option=arg.substring(1);
      if (""String_Node_Str"".equals(option)) {
        if (++i == argv.length) {
          System.err.println(""String_Node_Str"");
        }
        String parserName=argv[i];
        createParser(parserName);
        continue;
      }
      if (""String_Node_Str"".equals(option)) {
        if (++i == argv.length) {
          System.err.println(""String_Node_Str"");
        }
        String adapterName=argv[i];
        createAdapter(adapterName);
        continue;
      }
    }
  }
  features.setFeatureStates(argv);
}","private void initialize(String[] argv){
  int i=0;
  for (i=0; i < argv.length; i++) {
    String arg=argv[i];
    if (arg.charAt(0) == '-') {
      String option=arg.substring(1);
      if (""String_Node_Str"".equals(option)) {
        if (++i == argv.length) {
          System.err.println(""String_Node_Str"");
        }
        parserName=argv[i];
        createParser();
        continue;
      }
      if (""String_Node_Str"".equals(option)) {
        if (++i == argv.length) {
          System.err.println(""String_Node_Str"");
        }
        adapterName=argv[i];
        createAdapter();
        continue;
      }
    }
  }
  features.setFeatureStates(argv);
}",0.9742836149889786
101638,"private void createParser(String parserName){
  if (parser != null) {
    return;
  }
  try {
    parser=XMLReaderFactory.createXMLReader(parserName);
  }
 catch (  SAXException e) {
    System.err.println(""String_Node_Str"" + parserName + ""String_Node_Str"");
  }
}","private void createParser(){
  if (parser != null) {
    return;
  }
  try {
    parser=XMLReaderFactory.createXMLReader(parserName);
  }
 catch (  SAXException e) {
    System.err.println(""String_Node_Str"" + parserName + ""String_Node_Str"");
  }
}",0.9667318982387476
101639,"public void parse(String xmlFile){
  bind();
  try {
    parser.parse(xmlFile);
  }
 catch (  SAXException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    Exception nested=e.getException();
    if (nested != null) {
      nested.printStackTrace(System.err);
    }
 else {
      e.printStackTrace(System.err);
    }
  }
catch (  IOException e) {
    e.printStackTrace(System.err);
  }
}","public void parse(String xmlFile){
  bind();
  try {
    System.out.println(""String_Node_Str"");
    parser.parse(xmlFile);
    System.out.println(""String_Node_Str"");
  }
 catch (  SAXException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    Exception nested=e.getException();
    if (nested != null) {
      nested.printStackTrace(System.err);
    }
 else {
      e.printStackTrace(System.err);
    }
  }
catch (  IOException e) {
    e.printStackTrace(System.err);
  }
}",0.9042316258351892
101640,"/** 
 * Reports bound property changes. If <code>oldValue</code> and <code>newValue</code> are not equal and the <code>PropertyChangeEvent</code> listener list isn't empty, then fire a <code>PropertyChange</code> event to each listener.
 * @param oldStatus the old value of the property (as an Object)
 * @param newStatus the new value of the property (as an Object)
 */
protected void firePropertyChange(IndexStatus oldStatus,IndexStatus newStatus){
  if (listeners != null) {
    if (oldStatus != null && newStatus != null && oldStatus.equals(newStatus)) {
      return;
    }
    Object[] listenerList=listeners.getListenerList();
    for (int i=0; i <= listenerList.length - 2; i+=2) {
      if (listenerList[i] == PropertyChangeListener.class) {
        IndexStatusEvent ev=new IndexStatusEvent(this,newStatus);
        IndexStatusListener li=(IndexStatusListener)listenerList[i + 1];
        li.statusChanged(ev);
      }
    }
  }
}","/** 
 * Reports bound property changes. If <code>oldValue</code> and <code>newValue</code> are not equal and the <code>PropertyChangeEvent</code> listener list isn't empty, then fire a <code>PropertyChange</code> event to each listener.
 * @param oldStatus the old value of the property (as an Object)
 * @param newStatus the new value of the property (as an Object)
 */
protected void firePropertyChange(IndexStatus oldStatus,IndexStatus newStatus){
  if (listeners != null) {
    if (oldStatus != null && newStatus != null && oldStatus.equals(newStatus)) {
      return;
    }
    Object[] listenerList=listeners.getListenerList();
    for (int i=0; i <= listenerList.length - 2; i+=2) {
      if (listenerList[i] == IndexStatusListener.class) {
        IndexStatusEvent ev=new IndexStatusEvent(this,newStatus);
        IndexStatusListener li=(IndexStatusListener)listenerList[i + 1];
        li.statusChanged(ev);
      }
    }
  }
}",0.9866666666666668
101641,"public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (!obj.getClass().equals(this.getClass())) {
    return false;
  }
  DefaultLeafKeyList that=(DefaultLeafKeyList)obj;
  return name.equals(that.name) && osisName.equals(that.osisName);
}","public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!obj.getClass().equals(this.getClass())) {
    return false;
  }
  DefaultLeafKeyList that=(DefaultLeafKeyList)obj;
  return name.equals(that.name);
}",0.8492647058823529
101642,"public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!obj.getClass().equals(this.getClass())) {
    return false;
  }
  ReadingsKey that=(ReadingsKey)obj;
  return date.equals(that.date);
}","public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!obj.getClass().equals(this.getClass())) {
    return false;
  }
  ReadingsKey that=(ReadingsKey)obj;
  return getName().equals(that.getName());
}",0.9363295880149812
101643,"/** 
 * Create a new Job. This will automatically fire a workProgressed event to all WorkListeners, with the work property of this job set to 0.
 * @param description Short description of this job
 * @param predictURL Optional URL to save/load prediction times from
 * @param workerThread Optional thread to use in request to stop workerThread
 */
protected Job(String description,URL predicturl,Thread worker,int totalWork){
  this.predictURL=predicturl;
  this.workerThread=worker;
  this.listeners=new ArrayList();
  this.start=-1;
  this.predictedLength=-1;
  beginJob(description,totalWork);
}","/** 
 * Create a new Job. This will automatically fire a workProgressed event to all WorkListeners, with the work property of this job set to 0.
 * @param description Short description of this job
 * @param predicturl Optional URL to save/load prediction times from
 * @param worker Optional thread to use in request to stop worker
 * @param totalwork the size of the work to do
 */
protected Job(String description,URL predicturl,Thread worker,int totalWork){
  this.predictURL=predicturl;
  this.workerThread=worker;
  this.listeners=new ArrayList();
  this.start=-1;
  this.predictedLength=-1;
  beginJob(description,totalWork);
}",0.9309504467912266
101644,"/** 
 * Loads a sword config from a given buffer. This is used to load conf entries from the mods.d.tar.gz file.
 * @throws IOException
 */
public ConfigEntryTable(byte[] buffer,String bookName) throws IOException {
  internal=bookName;
  supported=true;
  table=new HashMap();
  BufferedReader in=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(buffer),ENCODING_LATIN1));
  loadInitials(in);
  loadContents(in);
  in.close();
  if (getValue(ConfigEntryType.ENCODING).equals(ENCODING_UTF8)) {
    supported=true;
    bookType=null;
    questionable=false;
    readahead=null;
    table.clear();
    in=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(buffer),ENCODING_UTF8));
    loadInitials(in);
    loadContents(in);
    in.close();
  }
  adjustDataPath();
  adjustLanguage();
  adjustBookType();
  adjustName();
  validate();
}","/** 
 * Create an empty Sword config for the named book.
 * @param bookName the name of the book
 */
public ConfigEntryTable(String bookName){
  table=new HashMap();
  internal=bookName;
  supported=true;
}",0.208955223880597
101645,"/** 
 * Loads a sword config from a buffer. The returned BookMetaData object will not be associated with a Book so setBook() should be called before getBook() is expected to return anything other than null.
 * @param buffer
 * @param internal
 * @throws IOException
 */
public SwordBookMetaData(byte[] buffer,String internal) throws IOException {
  cet=new ConfigEntryTable(buffer,internal);
  buildProperties();
}","/** 
 * Loads a sword config from a buffer. The returned BookMetaData object will not be associated with a Book so setBook() should be called before getBook() is expected to return anything other than null.
 * @param buffer
 * @param internal
 * @throws IOException
 */
public SwordBookMetaData(byte[] buffer,String internal) throws IOException {
  cet=new ConfigEntryTable(internal);
  cet.load(buffer);
  buildProperties();
}",0.967895362663496
101646,"public void setFeatureStates(String[] argv){
  for (int i=0; i < argv.length; i++) {
    String arg=argv[i];
    if (arg.startsWith(""String_Node_Str"")) {
      String option=arg.substring(1);
      String key=option.toLowerCase();
      XMLFeatureState feature=(XMLFeatureState)features.get(key);
      if (feature != null) {
        feature.setState(option.equals(key));
      }
    }
  }
}","public void setFeatureStates(String[] argv){
  for (int i=0; i < argv.length; i++) {
    String arg=argv[i];
    if (arg.startsWith(""String_Node_Str"")) {
      String option=arg.substring(1);
      String key=option.toLowerCase(Locale.ENGLISH);
      XMLFeatureState feature=(XMLFeatureState)features.get(key);
      if (feature != null) {
        feature.setState(option.equals(key));
      }
    }
  }
}",0.9824120603015076
101647,"/** 
 * From a sentence get a list of words (in original order) without any punctuation, and all in lower case.
 * @param aSentence The string to parse.
 * @return The words split up as an array
 */
public static String[] getWords(String aSentence){
  String sentence=aSentence;
  sentence=sentence.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sentence=sentence.replace('.',' ');
  sentence=sentence.replace('!',' ');
  sentence=sentence.replace('?',' ');
  sentence=sentence.replace(':',' ');
  sentence=sentence.replace(';',' ');
  sentence=sentence.replace('""',' ');
  sentence=sentence.replace('\'',' ');
  sentence=sentence.replace('(',' ');
  sentence=sentence.replace(')',' ');
  String[] words=StringUtil.split(sentence,""String_Node_Str"");
  String[] retcode=new String[words.length];
  for (int i=0; i < words.length; i++) {
    retcode[i]=stripPunctuationWord(words[i]).toLowerCase();
  }
  return retcode;
}","/** 
 * From a sentence get a list of words (in original order) without any punctuation, and all in lower case.
 * @param aSentence The string to parse.
 * @return The words split up as an array
 */
public static String[] getWords(String aSentence){
  String sentence=aSentence;
  sentence=sentence.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sentence=sentence.replace('.',' ');
  sentence=sentence.replace('!',' ');
  sentence=sentence.replace('?',' ');
  sentence=sentence.replace(':',' ');
  sentence=sentence.replace(';',' ');
  sentence=sentence.replace('""',' ');
  sentence=sentence.replace('\'',' ');
  sentence=sentence.replace('(',' ');
  sentence=sentence.replace(')',' ');
  String[] words=StringUtil.split(sentence,""String_Node_Str"");
  String[] retcode=new String[words.length];
  for (int i=0; i < words.length; i++) {
    retcode[i]=stripPunctuationWord(words[i]).toLowerCase(Locale.ENGLISH);
  }
  return retcode;
}",0.9924812030075189
101648,"private Tag getTag(String localname,String qname){
  Tag t=(Tag)TAG_MAP.get(qname);
  if (t == null) {
    t=(Tag)TAG_MAP.get(qname.toLowerCase());
    if (t == null) {
      log.warn(""String_Node_Str"" + localname + ""String_Node_Str""+ qname);
      return t;
    }
    DataPolice.report(""String_Node_Str"" + qname);
  }
  return t;
}","private Tag getTag(String localname,String qname){
  Tag t=(Tag)TAG_MAP.get(qname);
  if (t == null) {
    t=(Tag)TAG_MAP.get(qname.toLowerCase(Locale.ENGLISH));
    if (t == null) {
      log.warn(""String_Node_Str"" + localname + ""String_Node_Str""+ qname);
      return t;
    }
    DataPolice.report(""String_Node_Str"" + qname);
  }
  return t;
}",0.9793510324483776
101649,"/** 
 * @return Returns the relative path of the book's conf.
 */
public String getConfPath(){
  return SwordConstants.DIR_CONF + '/' + getInitials().toLowerCase()+ SwordConstants.EXTENSION_CONF;
}","/** 
 * @return Returns the relative path of the book's conf.
 */
public String getConfPath(){
  return SwordConstants.DIR_CONF + '/' + getInitials().toLowerCase(Locale.ENGLISH)+ SwordConstants.EXTENSION_CONF;
}",0.965686274509804
101650,"public Element processTag(Element ele,Attributes attrs){
  Element hi=OSISUtil.factory().createHI();
  hi.setAttribute(OSISUtil.OSIS_ATTR_TYPE,OSISUtil.HI_SMALL_CAPS);
  ele.addContent(hi);
  return hi;
}","public Element processTag(Element ele,Attributes attrs){
  Element hi=OSISUtil.factory().createHI();
  hi.setAttribute(OSISUtil.OSIS_ATTR_TYPE,OSISUtil.HI_X_SMALL);
  ele.addContent(hi);
  return hi;
}",0.982716049382716
101651,"public void setString(String value) throws Exception {
  try {
    Object object=convertToObject(value);
    setter.invoke(null,new Object[]{object});
  }
 catch (  InvocationTargetException ex) {
    log.info(""String_Node_Str"" + setter.toString());
    Throwable orig=ex.getTargetException();
    if (orig instanceof Exception) {
      throw (Exception)orig;
    }
    throw ex;
  }
catch (  Exception ex) {
    log.info(""String_Node_Str"" + setter.toString());
    throw ex;
  }
}","public void setString(String value) throws ConfigException {
  Exception ex=null;
  try {
    Object object=convertToObject(value);
    setter.invoke(null,new Object[]{object});
  }
 catch (  InvocationTargetException e) {
    ex=e;
  }
catch (  IllegalArgumentException e) {
    ex=e;
  }
catch (  IllegalAccessException e) {
    ex=e;
  }
  if (ex != null) {
    log.info(""String_Node_Str"" + setter.toString());
    throw new ConfigException(Msg.CONFIG_SETFAIL,ex,new Object[]{setter});
  }
}",0.5005128205128205
101652,"/** 
 * String value to associate with this Field. This method can throw any Exception since almost anything could go wrong at this point. The Config dialog ought to cope with any errors.
 * @param value The new value for this Choice
 */
void setString(String value) throws Exception ;","/** 
 * String value to associate with this Field. This method can throw any Exception since almost anything could go wrong at this point. The Config dialog ought to cope with any errors.
 * @param value The new value for this Choice
 */
void setString(String value) throws ConfigException ;",0.9895833333333334
101653,"/** 
 * Add the set of configuration options specified in the xml file.
 * @param xmlconfig The JDOM document to read.
 * @param configResources contains the user level text for this config
 */
public void add(Document xmlconfig,ResourceBundle configResources){
  Element root=xmlconfig.getRootElement();
  Iterator iter=root.getChildren().iterator();
  while (iter.hasNext()) {
    Element element=(Element)iter.next();
    String key=element.getAttributeValue(""String_Node_Str"");
    try {
      Choice choice=ChoiceFactory.getChoice(element,configResources);
      add(key,choice);
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"" + key,ex);
    }
  }
}","/** 
 * Add the set of configuration options specified in the xml file.
 * @param xmlconfig The JDOM document to read.
 * @param configResources contains the user level text for this config
 */
public void add(Document xmlconfig,ResourceBundle configResources){
  Element root=xmlconfig.getRootElement();
  Iterator iter=root.getChildren().iterator();
  while (iter.hasNext()) {
    Element element=(Element)iter.next();
    String key=element.getAttributeValue(""String_Node_Str"");
    Exception ex=null;
    try {
      Choice choice=ChoiceFactory.getChoice(element,configResources);
      add(key,choice);
    }
 catch (    StartupException e) {
      ex=e;
    }
catch (    ClassNotFoundException e) {
      ex=e;
    }
catch (    IllegalAccessException e) {
      ex=e;
    }
catch (    InstantiationException e) {
      ex=e;
    }
    if (ex != null) {
      log.warn(""String_Node_Str"" + key,ex);
    }
  }
}",0.8476070528967254
101654,"/** 
 * Take the data in the local storage area and copy it to the application.
 */
public void localToApplication(){
  Iterator iter=keys.iterator();
  while (iter.hasNext()) {
    String key=(String)iter.next();
    Choice choice=getChoice(key);
    String oldValue=choice.getString();
    String newValue=local.getProperty(key);
    if (newValue == null || newValue.length() == 0) {
      if (oldValue == null) {
        continue;
      }
      local.setProperty(key,oldValue);
      newValue=oldValue;
    }
    try {
      if (!newValue.equals(oldValue)) {
        log.info(""String_Node_Str"" + key + ""String_Node_Str""+ newValue+ ""String_Node_Str""+ oldValue+ ""String_Node_Str"");
        choice.setString(newValue);
      }
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"" + key + ""String_Node_Str""+ newValue,ex);
      Reporter.informUser(this,new ConfigException(Msg.CONFIG_SETFAIL,ex,new Object[]{choice.getFullPath()}));
    }
  }
}","/** 
 * Take the data in the local storage area and copy it to the application.
 */
public void localToApplication(){
  Iterator iter=keys.iterator();
  while (iter.hasNext()) {
    String key=(String)iter.next();
    Choice choice=getChoice(key);
    String oldValue=choice.getString();
    String newValue=local.getProperty(key);
    if (newValue == null || newValue.length() == 0) {
      if (oldValue == null) {
        continue;
      }
      local.setProperty(key,oldValue);
      newValue=oldValue;
    }
    if (!newValue.equals(oldValue)) {
      log.info(""String_Node_Str"" + key + ""String_Node_Str""+ newValue+ ""String_Node_Str""+ oldValue+ ""String_Node_Str"");
      try {
        choice.setString(newValue);
      }
 catch (      LucidException ex) {
        log.warn(""String_Node_Str"" + key + ""String_Node_Str""+ newValue,ex);
        Reporter.informUser(this,new ConfigException(Msg.CONFIG_SETFAIL,ex,new Object[]{choice.getFullPath()}));
      }
    }
  }
}",0.7979220779220779
101655,"/** 
 * Take the data in the application and copy it to the local storage area.
 */
public void applicationToLocal(){
  Iterator iter=keys.iterator();
  while (iter.hasNext()) {
    String key=(String)iter.next();
    try {
      Choice model=getChoice(key);
      String value=model.getString();
      local.put(key,value);
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"" + key);
      Reporter.informUser(this,ex);
    }
  }
}","/** 
 * Take the data in the application and copy it to the local storage area.
 */
public void applicationToLocal(){
  Iterator iter=keys.iterator();
  while (iter.hasNext()) {
    String key=(String)iter.next();
    Choice model=getChoice(key);
    String value=model.getString();
    local.put(key,value);
  }
}",0.8252299605781866
101656,"protected void fireStateChanged(){
  final WorkEvent ev=new WorkEvent(this);
  final List temp=new ArrayList();
synchronized (this) {
    temp.addAll(listeners);
  }
  if (listeners != null) {
    int count=temp.size();
    for (int i=0; i < count; i++) {
      ((WorkListener)temp.get(i)).workStateChanged(ev);
    }
  }
}","protected void fireStateChanged(){
  final WorkEvent ev=new WorkEvent(this);
  final List temp=new ArrayList();
synchronized (this) {
    if (listeners != null) {
      temp.addAll(listeners);
    }
  }
  int count=temp.size();
  for (int i=0; i < count; i++) {
    ((WorkListener)temp.get(i)).workStateChanged(ev);
  }
}",0.8633540372670807
101657,"/** 
 * Creates a class loader that finds resources for the calling class that may not be in the class' package. Use this only within classes that are directly looking up their resources.
 */
public CWClassLoader(){
  owner=CallContext.instance().getCallingClass();
}","/** 
 * Creates a class loader that finds resources for the calling class that may not be in the class' package. Use this only within classes that are directly looking up their resources.
 */
public CWClassLoader(){
  owner=CallContext.getCallingClass();
}",0.9789674952198852
101658,"/** 
 * When called from a method it will return the i-th class calling that method, up the call chain. If used with a -1 it will return the class making the call -2 and -3 will return this class
 * @throws ArrayIndexOutOfBoundsException if the index is not valid
 */
public Class getCallingClass(int i){
  return resolver.getClassContext()[CALL_CONTEXT_OFFSET + i];
}","/** 
 * When called from a method it will return the i-th class calling that method, up the call chain. If used with a -1 it will return the class making the call -2 and -3 will return this class
 * @throws ArrayIndexOutOfBoundsException if the index is not valid
 */
public static Class getCallingClass(int i){
  return instance().getClassContext()[CALL_CONTEXT_OFFSET + i];
}",0.9664429530201344
101659,"/** 
 * Get a map of known implementors of some interface or abstract class. This is currently done by looking up a properties file by the name of the given class, and assuming that values are implementors of said class. Those that are not are warned, but ignored. The reply is in the form of a map of keys=strings, and values=classes in case you need to get at the names given to the classes in the properties file.
 * @see ClassUtil#getImplementors(Class)
 * @param clazz The class or interface to find implementors of.
 * @return The map of implementing classes.
 */
public static Map getImplementorsMap(Class clazz){
  Map matches=new HashMap();
  try {
    Properties props=ResourceUtil.getProperties(clazz);
    Iterator it=props.keySet().iterator();
    while (it.hasNext()) {
      try {
        String key=(String)it.next();
        String value=props.getProperty(key);
        Class impl=Class.forName(value);
        if (clazz.isAssignableFrom(impl)) {
          matches.put(key,impl);
        }
 else {
          log.warn(""String_Node_Str"" + impl.getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str"");
        }
      }
 catch (      Exception ex) {
        log.warn(""String_Node_Str"" + clazz.getName(),ex);
      }
    }
    log.debug(""String_Node_Str"" + matches.size() + ""String_Node_Str""+ clazz.getName());
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"",ex);
  }
  return matches;
}","/** 
 * Get a map of known implementors of some interface or abstract class. This is currently done by looking up a properties file by the name of the given class, and assuming that values are implementors of said class. Those that are not are warned, but ignored. The reply is in the form of a map of keys=strings, and values=classes in case you need to get at the names given to the classes in the properties file.
 * @see ClassUtil#getImplementors(Class)
 * @param clazz The class or interface to find implementors of.
 * @return The map of implementing classes.
 */
public static Map getImplementorsMap(Class clazz){
  Map matches=new HashMap();
  try {
    Properties props=ResourceUtil.getProperties(clazz);
    Iterator it=props.keySet().iterator();
    while (it.hasNext()) {
      try {
        String key=(String)it.next();
        String value=props.getProperty(key);
        Class impl=Class.forName(value);
        if (clazz.isAssignableFrom(impl)) {
          matches.put(key,impl);
        }
 else {
          log.warn(""String_Node_Str"" + impl.getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str"");
        }
      }
 catch (      ClassNotFoundException ex) {
        log.warn(""String_Node_Str"" + clazz.getName(),ex);
      }
    }
    log.debug(""String_Node_Str"" + matches.size() + ""String_Node_Str""+ clazz.getName());
  }
 catch (  IOException ex) {
    log.error(""String_Node_Str"",ex);
  }
  return matches;
}",0.9947643979057592
101660,"/** 
 * Get the known implementors of some interface or abstract class. This is currently done by looking up a properties file by the name of the given class, and assuming that values are implementors of said class. Those that are not are warned, but ignored.
 * @param clazz The class or interface to find implementors of.
 * @return The list of implementing classes.
 */
public static Class[] getImplementors(Class clazz){
  try {
    List matches=new ArrayList();
    Properties props=ResourceUtil.getProperties(clazz);
    Iterator it=props.values().iterator();
    while (it.hasNext()) {
      try {
        String name=(String)it.next();
        Class impl=Class.forName(name);
        if (clazz.isAssignableFrom(impl)) {
          matches.add(impl);
        }
 else {
          log.warn(""String_Node_Str"" + impl.getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str"");
        }
      }
 catch (      Exception ex) {
        log.warn(""String_Node_Str"" + clazz.getName(),ex);
      }
    }
    log.debug(""String_Node_Str"" + matches.size() + ""String_Node_Str""+ clazz.getName());
    return (Class[])matches.toArray(new Class[matches.size()]);
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"",ex);
    return new Class[0];
  }
}","/** 
 * Get the known implementors of some interface or abstract class. This is currently done by looking up a properties file by the name of the given class, and assuming that values are implementors of said class. Those that are not are warned, but ignored.
 * @param clazz The class or interface to find implementors of.
 * @return The list of implementing classes.
 */
public static Class[] getImplementors(Class clazz){
  try {
    List matches=new ArrayList();
    Properties props=ResourceUtil.getProperties(clazz);
    Iterator it=props.values().iterator();
    while (it.hasNext()) {
      try {
        String name=(String)it.next();
        Class impl=Class.forName(name);
        if (clazz.isAssignableFrom(impl)) {
          matches.add(impl);
        }
 else {
          log.warn(""String_Node_Str"" + impl.getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str"");
        }
      }
 catch (      ClassNotFoundException ex) {
        log.warn(""String_Node_Str"" + clazz.getName(),ex);
      }
    }
    log.debug(""String_Node_Str"" + matches.size() + ""String_Node_Str""+ clazz.getName());
    return (Class[])matches.toArray(new Class[matches.size()]);
  }
 catch (  IOException ex) {
    log.error(""String_Node_Str"",ex);
    return new Class[0];
  }
}",0.9940641076375148
101661,"/** 
 * Creates a class loader that finds resources for the calling class that may not be in the class' package. Use this only within classes that are directly looking up their resources.
 */
public CWClassLoader(){
  owner=CallContext.getCallingClass();
}","/** 
 * Creates a class loader that finds resources for the calling class that may not be in the class' package. Use this only within classes that are directly looking up their resources.
 */
CWClassLoader(){
  owner=CallContext.getCallingClass();
}",0.986138613861386
101662,"/** 
 * Initialise any resource bundles
 */
protected final void loadResources(){
  Class implementingClass=getClass();
  String className=implementingClass.getName();
synchronized (MsgBase.class) {
    resources=(ResourceBundle)resourceMap.get(className);
    if (resources == null) {
      Locale defaultLocale=Locale.getDefault();
      try {
        resources=ResourceBundle.getBundle(className,defaultLocale,new CWClassLoader(implementingClass));
        resourceMap.put(className,resources);
      }
 catch (      MissingResourceException ex) {
        log.warn(""String_Node_Str"" + className + ""String_Node_Str""+ name);
      }
    }
  }
}","/** 
 * Initialise any resource bundles
 */
protected final void loadResources(){
  Class implementingClass=getClass();
  String className=implementingClass.getName();
synchronized (MsgBase.class) {
    resources=(ResourceBundle)resourceMap.get(className);
    if (resources == null) {
      Locale defaultLocale=Locale.getDefault();
      try {
        resources=ResourceBundle.getBundle(className,defaultLocale,CWClassLoader.instance(implementingClass));
        resourceMap.put(className,resources);
      }
 catch (      MissingResourceException ex) {
        log.warn(""String_Node_Str"" + className + ""String_Node_Str""+ name);
      }
    }
  }
}",0.98996138996139
101663,"/** 
 * Generic resource URL fetcher. One way or the other we'll find it! Either as a relative or an absolute reference.
 * @param clazz The resource to find
 * @return The requested resource
 * @throws MissingResourceException if the resource can not be found
 */
public static URL getResource(Class clazz,String resourceName) throws MissingResourceException {
  URL resource=new CWClassLoader(clazz).findResource(resourceName);
  if (resource == null) {
    throw new MissingResourceException(Msg.NO_RESOURCE.toString(resourceName),clazz.getName(),resourceName);
  }
  return resource;
}","/** 
 * Generic resource URL fetcher. One way or the other we'll find it! Either as a relative or an absolute reference.
 * @param clazz The resource to find
 * @return The requested resource
 * @throws MissingResourceException if the resource can not be found
 */
public static URL getResource(Class clazz,String resourceName) throws MissingResourceException {
  URL resource=CWClassLoader.instance(clazz).findResource(resourceName);
  if (resource == null) {
    throw new MissingResourceException(Msg.NO_RESOURCE.toString(resourceName),clazz.getName(),resourceName);
  }
  return resource;
}",0.989010989010989
101664,"public List toOSIS(Key key,String plain){
  DataPolice.setKey(key);
  Element ele=null;
  Exception ex=null;
  try {
    ele=parse(XMLUtil.cleanAllEntities(plain));
  }
 catch (  JDOMException e) {
    ex=e;
  }
catch (  IOException e) {
    ex=e;
  }
 finally {
    if (ex != null) {
      DataPolice.report(""String_Node_Str"" + ex.getMessage() + ""String_Node_Str""+ plain);
    }
    DataPolice.setKey(null);
  }
  if (ex != null) {
    ele=cleanTags(plain);
  }
  if (ele == null) {
    ele=OSISUtil.factory().createP();
  }
  return ele.removeContent();
}","public List toOSIS(Key key,String plain){
  DataPolice.setKey(key);
  Element ele=null;
  Exception ex=null;
  try {
    ele=parse(XMLUtil.cleanAllEntities(plain));
  }
 catch (  JDOMException e) {
    ex=e;
  }
catch (  IOException e) {
    ex=e;
  }
 finally {
    DataPolice.setKey(null);
  }
  if (ex != null) {
    DataPolice.report(""String_Node_Str"" + ex.getMessage() + ""String_Node_Str""+ plain);
    ele=cleanTags(plain);
  }
  if (ele == null) {
    ele=OSISUtil.factory().createP();
  }
  return ele.removeContent();
}",0.7675276752767528
101665,"public List toOSIS(Key key,String plain){
  DataPolice.setKey(key);
  Element ele=null;
  Exception ex=null;
  try {
    ele=parse(XMLUtil.cleanAllEntities(plain));
  }
 catch (  SAXException e) {
    ex=e;
  }
catch (  IOException e) {
    ex=e;
  }
catch (  ParserConfigurationException e) {
    ex=e;
  }
 finally {
    if (ex != null) {
      DataPolice.report(""String_Node_Str"" + ex.getMessage() + ""String_Node_Str""+ plain);
    }
    DataPolice.setKey(null);
  }
  if (ex != null) {
    ele=cleanTags(plain);
  }
  if (ele == null) {
    ele=OSISUtil.factory().createP();
  }
  return ele.removeContent();
}","public List toOSIS(Key key,String plain){
  DataPolice.setKey(key);
  Element ele=null;
  Exception ex=null;
  try {
    ele=parse(XMLUtil.cleanAllEntities(plain));
  }
 catch (  SAXException e) {
    ex=e;
  }
catch (  IOException e) {
    ex=e;
  }
catch (  ParserConfigurationException e) {
    ex=e;
  }
 finally {
    DataPolice.setKey(null);
  }
  if (ex != null) {
    DataPolice.report(""String_Node_Str"" + ex.getMessage() + ""String_Node_Str""+ plain);
    ele=cleanTags(plain);
  }
  if (ele == null) {
    ele=OSISUtil.factory().createP();
  }
  return ele.removeContent();
}",0.7892976588628763
101666,"/** 
 * Constructor for ReadingsBook.
 */
public ReadingsBook(ReadingsBookDriver driver,BookCategory type){
  super(null);
  String setname=ReadingsBookDriver.getReadingsSet();
  Locale defaultLocale=Locale.getDefault();
  ResourceBundle prop=ResourceBundle.getBundle(setname,defaultLocale,new CWClassLoader(ReadingsBookDriver.class));
  String name=Msg.TITLE.toString();
  try {
    name=prop.getString(""String_Node_Str"");
  }
 catch (  MissingResourceException e) {
    log.warn(""String_Node_Str"" + setname);
  }
  DefaultBookMetaData bmd=new DefaultBookMetaData(driver,name,type);
  bmd.setInitials(setname);
  setBookMetaData(bmd);
  Calendar greg=new GregorianCalendar(1972,Calendar.JANUARY,1);
  while (greg.get(Calendar.YEAR) == 1972) {
    String internalKey=ReadingsKey.external2internal(greg);
    String readings=""String_Node_Str"";
    try {
      readings=prop.getString(internalKey);
    }
 catch (    MissingResourceException e) {
      log.warn(""String_Node_Str"" + internalKey + ""String_Node_Str""+ setname);
    }
    hash.put(new ReadingsKey(greg.getTime()),readings);
    greg.add(Calendar.DATE,1);
  }
  global=new SetKeyList(hash.keySet(),getName());
}","/** 
 * Constructor for ReadingsBook.
 */
public ReadingsBook(ReadingsBookDriver driver,BookCategory type){
  super(null);
  String setname=ReadingsBookDriver.getReadingsSet();
  Locale defaultLocale=Locale.getDefault();
  ResourceBundle prop=ResourceBundle.getBundle(setname,defaultLocale,CWClassLoader.instance(ReadingsBookDriver.class));
  String name=Msg.TITLE.toString();
  try {
    name=prop.getString(""String_Node_Str"");
  }
 catch (  MissingResourceException e) {
    log.warn(""String_Node_Str"" + setname);
  }
  DefaultBookMetaData bmd=new DefaultBookMetaData(driver,name,type);
  bmd.setInitials(setname);
  setBookMetaData(bmd);
  Calendar greg=new GregorianCalendar(1972,Calendar.JANUARY,1);
  while (greg.get(Calendar.YEAR) == 1972) {
    String internalKey=ReadingsKey.external2internal(greg);
    String readings=""String_Node_Str"";
    try {
      readings=prop.getString(internalKey);
    }
 catch (    MissingResourceException e) {
      log.warn(""String_Node_Str"" + internalKey + ""String_Node_Str""+ setname);
    }
    hash.put(new ReadingsKey(greg.getTime()),readings);
    greg.add(Calendar.DATE,1);
  }
  global=new SetKeyList(hash.keySet(),getName());
}",0.9944610140605028
101667,"public String getRawText(Key key) throws BookException {
  checkActive();
  String charset=getBookMetaData().getBookCharset();
  if (!(key instanceof IndexKey)) {
    throw new BookException(Msg.BAD_KEY,new Object[]{ClassUtil.getShortClassName(key.getClass()),key.getName()});
  }
  IndexKey ikey=(IndexKey)key;
  try {
    byte[] data=SwordUtil.readRAF(datRaf,ikey.offset,ikey.size);
    int keyend=SwordUtil.findByte(data,SEPARATOR);
    if (keyend == -1) {
      throw new BookException(Msg.READ_FAIL);
    }
    int remainder=data.length - (keyend + 1);
    byte[] reply=new byte[remainder];
    System.arraycopy(data,keyend + 1,reply,0,remainder);
    return SwordUtil.decode(key,reply,charset).trim();
  }
 catch (  IOException ex) {
    throw new BookException(Msg.READ_FAIL,ex);
  }
}","public String getRawText(Key key) throws BookException {
  checkActive();
  String charset=getBookMetaData().getBookCharset();
  if (!(key instanceof IndexKey)) {
    throw new BookException(Msg.BAD_KEY,new Object[]{ClassUtil.getShortClassName(key.getClass()),key.getName()});
  }
  IndexKey ikey=(IndexKey)key;
  try {
    byte[] data=SwordUtil.readRAF(datRaf,ikey.getOffset(),ikey.getSize());
    int keyend=SwordUtil.findByte(data,SEPARATOR);
    if (keyend == -1) {
      throw new BookException(Msg.READ_FAIL);
    }
    int remainder=data.length - (keyend + 1);
    byte[] reply=new byte[remainder];
    System.arraycopy(data,keyend + 1,reply,0,remainder);
    return SwordUtil.decode(key,reply,charset).trim();
  }
 catch (  IOException ex) {
    throw new BookException(Msg.READ_FAIL,ex);
  }
}",0.9836888331242158
101668,"/** 
 * Take a string representation of a verse and parse it into an Array of Strings where each part is likely to be a verse part. The goal is to allow the greatest possible variations in user input. <p>Parts can be separated by pretty much anything. No distinction is made between them. While chapter and verse need to be separated, a separator is assumed between digits and non-digits. Adjacent words, (i.e. sequences of non-digits) are understood to be a book reference. If a number runs up against a book name, it is considered to be either part of the book name (i.e. it is before it) or a chapter number (i.e. it stands after it.)</p> <p>Note: ff and $ are considered to be digits.</p> <p>Note: it is not necessary for this to be a BCV (book, chapter, verse), it may just be BC, B, C, V or CV. No distinction is needed here for a number that stands alone.</p>
 * @param input The string to parse.
 * @return The string array
 */
public static String[] tokenize(String input){
  String[] args={null,null,null,null,null,null,null,null};
  int length=input.length();
  char[] normalized=new char[length * 2];
  char lastChar='0';
  char curChar=' ';
  int tokenCount=0;
  int normalizedLength=0;
  int startIndex=0;
  String token=null;
  boolean foundBoundary=false;
  for (int i=0; i < length; i++) {
    curChar=input.charAt(i);
    boolean charIsDigit=curChar == '$' || Character.isDigit(curChar) || (curChar == 'f' && (i + 1 < length ? input.charAt(i + 1) : ' ') == 'f');
    if (charIsDigit || Character.isLetter(curChar)) {
      foundBoundary=true;
      boolean charWasDigit=lastChar == '$' || Character.isDigit(lastChar) || (lastChar == 'f' && (i > 2 ? input.charAt(i - 2) : '0') == 'f');
      if (charWasDigit || Character.isLetter(lastChar)) {
        foundBoundary=false;
        if (normalizedLength > 0 && charWasDigit != charIsDigit) {
          foundBoundary=true;
        }
      }
      if (foundBoundary) {
        if (charIsDigit) {
          token=new String(normalized,startIndex,normalizedLength - startIndex);
          args[tokenCount++]=token;
          normalizedLength=0;
        }
 else {
          normalized[normalizedLength++]=' ';
        }
      }
      normalized[normalizedLength++]=curChar;
    }
    if (normalizedLength > 0) {
      lastChar=curChar;
    }
  }
  token=new String(normalized,startIndex,normalizedLength - startIndex);
  args[tokenCount++]=token;
  String[] results=new String[tokenCount];
  System.arraycopy(args,0,results,0,tokenCount);
  return results;
}","/** 
 * Take a string representation of a verse and parse it into an Array of Strings where each part is likely to be a verse part. The goal is to allow the greatest possible variations in user input. <p>Parts can be separated by pretty much anything. No distinction is made between them. While chapter and verse need to be separated, a separator is assumed between digits and non-digits. Adjacent words, (i.e. sequences of non-digits) are understood to be a book reference. If a number runs up against a book name, it is considered to be either part of the book name (i.e. it is before it) or a chapter number (i.e. it stands after it.)</p> <p>Note: ff and $ are considered to be digits.</p> <p>Note: it is not necessary for this to be a BCV (book, chapter, verse), it may just be BC, B, C, V or CV. No distinction is needed here for a number that stands alone.</p>
 * @param input The string to parse.
 * @return The string array
 * @throws NoSuchVerseException 
 */
public static String[] tokenize(String input) throws NoSuchVerseException {
  String[] args={null,null,null,null,null,null,null,null};
  int length=input.length();
  char[] normalized=new char[length * 2];
  char lastChar='0';
  char curChar=' ';
  int tokenCount=0;
  int normalizedLength=0;
  int startIndex=0;
  String token=null;
  boolean foundBoundary=false;
  for (int i=0; i < length; i++) {
    curChar=input.charAt(i);
    boolean charIsDigit=curChar == '$' || Character.isDigit(curChar) || (curChar == 'f' && (i + 1 < length ? input.charAt(i + 1) : ' ') == 'f');
    if (charIsDigit || Character.isLetter(curChar)) {
      foundBoundary=true;
      boolean charWasDigit=lastChar == '$' || Character.isDigit(lastChar) || (lastChar == 'f' && (i > 2 ? input.charAt(i - 2) : '0') == 'f');
      if (charWasDigit || Character.isLetter(lastChar)) {
        foundBoundary=false;
        if (normalizedLength > 0 && charWasDigit != charIsDigit) {
          foundBoundary=true;
        }
      }
      if (foundBoundary) {
        if (charIsDigit) {
          if (tokenCount >= args.length) {
            throw new NoSuchVerseException(Msg.VERSE_PARTS,new Object[]{input});
          }
          token=new String(normalized,startIndex,normalizedLength - startIndex);
          args[tokenCount++]=token;
          normalizedLength=0;
        }
 else {
          normalized[normalizedLength++]=' ';
        }
      }
      normalized[normalizedLength++]=curChar;
    }
    if (normalizedLength > 0) {
      lastChar=curChar;
    }
  }
  if (tokenCount >= args.length) {
    throw new NoSuchVerseException(Msg.VERSE_PARTS,new Object[]{input});
  }
  token=new String(normalized,startIndex,normalizedLength - startIndex);
  args[tokenCount++]=token;
  String[] results=new String[tokenCount];
  System.arraycopy(args,0,results,0,tokenCount);
  return results;
}",0.9420127197904976
101669,"public Key getKey(String name) throws NoSuchKeyException {
  return createPassage(name);
}","public Key getKey(String name) throws NoSuchKeyException {
  try {
    return defaultType.createPassage(name);
  }
 catch (  Exception e) {
    return defaultType.createPassage(normalize(name));
  }
}",0.5724137931034483
101670,"/** 
 * Set the default reference type. Must be one of:<ul> <li>PassageFactory.SPEED <li>PassageFactory.WRITE_SPEED <li>PassageFactory.SIZE <li>PassageFactory.MIX <li>PassageFactory.TALLY </ul>
 * @param defaultType The new default type.
 */
public static void setDefaultPassage(int defaultType){
  PassageKeyFactory.defaultType=defaultType;
}","/** 
 * Set the default reference type. Must be one of:<ul> <li>PassageType.SPEED <li>PassageType.WRITE_SPEED <li>PassageType.SIZE <li>PassageType.MIX <li>PassageType.TALLY </ul>
 * @param newDefaultType The new default type.
 */
public static void setDefaultPassage(int newDefaultType){
  PassageKeyFactory.defaultType=PassageType.fromInteger(newDefaultType);
}",0.6468085106382979
101671,"/** 
 * Convert us to a binary representation. There are sme distinctly endianist happenings here, but that is OK because we are reading the stuff we write here just below.
 * @param ref The Passage to convert
 * @return a byte array
 */
public static byte[] toBinaryRepresentation(Passage ref){
  int verses=ref.countVerses();
  int ranges=ref.countRanges(RestrictionType.NONE);
  int bitwise_size=BibleInfo.versesInBible() / 8;
  int ranged_size=(ranges * 4) + 1;
  int distinct_size=(verses * 2) + 1;
  if (bitwise_size <= ranged_size && bitwise_size <= distinct_size) {
    int array_size=binarySize(AbstractPassage.METHOD_COUNT) + (BibleInfo.versesInBible() / 8) + 1;
    byte[] buffer=new byte[array_size];
    int index=0;
    index+=toBinary(buffer,index,AbstractPassage.BITWISE,AbstractPassage.METHOD_COUNT);
    Iterator it=ref.iterator();
    while (it.hasNext()) {
      Verse verse=(Verse)it.next();
      int ord=verse.getOrdinal();
      int idx0=(ord / 8) + index;
      int bit=(ord % 8) - 1;
      buffer[idx0]|=1 << bit;
    }
    return buffer;
  }
 else   if (distinct_size <= ranged_size) {
    int array_size=binarySize(AbstractPassage.METHOD_COUNT) + binarySize(BibleInfo.versesInBible()) + (verses * binarySize(BibleInfo.versesInBible()));
    byte[] buffer=new byte[array_size];
    int index=0;
    index+=toBinary(buffer,index,AbstractPassage.DISTINCT,AbstractPassage.METHOD_COUNT);
    index+=toBinary(buffer,index,verses,BibleInfo.versesInBible());
    Iterator it=ref.iterator();
    while (it.hasNext()) {
      Verse verse=(Verse)it.next();
      int ord=verse.getOrdinal();
      index+=toBinary(buffer,index,ord,BibleInfo.versesInBible());
    }
    return buffer;
  }
 else {
    int array_size=binarySize(AbstractPassage.METHOD_COUNT) + binarySize(BibleInfo.versesInBible() / 2) + (2 * ranges * binarySize(BibleInfo.versesInBible()));
    byte[] buffer=new byte[array_size];
    int index=0;
    index+=toBinary(buffer,index,AbstractPassage.RANGED,AbstractPassage.METHOD_COUNT);
    index+=toBinary(buffer,index,ranges,BibleInfo.versesInBible() / 2);
    Iterator it=ref.rangeIterator(RestrictionType.NONE);
    while (it.hasNext()) {
      VerseRange range=(VerseRange)it.next();
      index+=toBinary(buffer,index,range.getStart().getOrdinal(),BibleInfo.versesInBible());
      index+=toBinary(buffer,index,range.getVerseCount(),BibleInfo.versesInBible());
    }
    return buffer;
  }
}","/** 
 * Convert us to a binary representation. There are some distinctly endianist happenings here, but that is OK because we are reading the stuff we write here just below.
 * @param ref The Passage to convert
 * @return a byte array
 */
public static byte[] toBinaryRepresentation(Passage ref){
  int verses=ref.countVerses();
  int ranges=ref.countRanges(RestrictionType.NONE);
  int bitwise_size=BibleInfo.versesInBible() / 8;
  int ranged_size=(ranges * 4) + 1;
  int distinct_size=(verses * 2) + 1;
  if (bitwise_size <= ranged_size && bitwise_size <= distinct_size) {
    int array_size=binarySize(AbstractPassage.METHOD_COUNT) + (BibleInfo.versesInBible() / 8) + 1;
    byte[] buffer=new byte[array_size];
    int index=0;
    index+=toBinary(buffer,index,AbstractPassage.BITWISE,AbstractPassage.METHOD_COUNT);
    Iterator it=ref.iterator();
    while (it.hasNext()) {
      Verse verse=(Verse)it.next();
      int ord=verse.getOrdinal();
      int idx0=(ord / 8) + index;
      int bit=(ord % 8) - 1;
      buffer[idx0]|=1 << bit;
    }
    return buffer;
  }
 else   if (distinct_size <= ranged_size) {
    int array_size=binarySize(AbstractPassage.METHOD_COUNT) + binarySize(BibleInfo.versesInBible()) + (verses * binarySize(BibleInfo.versesInBible()));
    byte[] buffer=new byte[array_size];
    int index=0;
    index+=toBinary(buffer,index,AbstractPassage.DISTINCT,AbstractPassage.METHOD_COUNT);
    index+=toBinary(buffer,index,verses,BibleInfo.versesInBible());
    Iterator it=ref.iterator();
    while (it.hasNext()) {
      Verse verse=(Verse)it.next();
      int ord=verse.getOrdinal();
      index+=toBinary(buffer,index,ord,BibleInfo.versesInBible());
    }
    return buffer;
  }
 else {
    int array_size=binarySize(AbstractPassage.METHOD_COUNT) + binarySize(BibleInfo.versesInBible() / 2) + (2 * ranges * binarySize(BibleInfo.versesInBible()));
    byte[] buffer=new byte[array_size];
    int index=0;
    index+=toBinary(buffer,index,AbstractPassage.RANGED,AbstractPassage.METHOD_COUNT);
    index+=toBinary(buffer,index,ranges,BibleInfo.versesInBible() / 2);
    Iterator it=ref.rangeIterator(RestrictionType.NONE);
    while (it.hasNext()) {
      VerseRange range=(VerseRange)it.next();
      index+=toBinary(buffer,index,range.getStart().getOrdinal(),BibleInfo.versesInBible());
      index+=toBinary(buffer,index,range.getVerseCount(),BibleInfo.versesInBible());
    }
    return buffer;
  }
}",0.9997939418916134
101672,"public Key createEmptyKeyList(){
  return createPassage();
}","public Key createEmptyKeyList(){
  return defaultType.createEmptyPassage();
}",0.8759124087591241
101673,"/** 
 * Get the default reference type.
 * @return default_type The new default type.
 * @see PassageKeyFactory#setDefaultPassage
 */
public static int getDefaultPassage(){
  return defaultType;
}","/** 
 * Get the default reference type.
 * @return default_type The new default type.
 * @see PassageKeyFactory#setDefaultPassage
 */
public static int getDefaultPassage(){
  return PassageType.toInteger(defaultType);
}",0.910843373493976
101674,"public void run(){
  URL predicturl=Project.instance().getWritablePropertiesURL(""String_Node_Str"");
  Job job=JobManager.createJob(Msg.INSTALLING.toString(sbmd.getName()),predicturl,this,true);
  yield();
  try {
    job.setProgress(Msg.JOB_INIT.toString());
    URL temp=NetUtil.getTemporaryURL(""String_Node_Str"",ZIP_SUFFIX);
    download(job,directory + '/' + PACKAGE_DIR,sbmd.getInitials() + ZIP_SUFFIX,temp);
    job.setInterruptable(false);
    File dldir=SwordBookPath.getDownloadDir();
    if (!job.isFinished()) {
      IOUtil.unpackZip(NetUtil.getAsFile(temp),dldir);
      job.setProgress(Msg.JOB_CONFIG.toString());
      SwordBookDriver.registerNewBook(sbmd);
    }
  }
 catch (  IOException e) {
    Reporter.informUser(this,e);
    job.ignoreTimings();
  }
catch (  InstallException e) {
    Reporter.informUser(this,e);
    job.ignoreTimings();
  }
catch (  BookException e) {
    Reporter.informUser(this,e);
    job.ignoreTimings();
  }
 finally {
    job.done();
  }
}","public void run(){
  URL predicturl=Project.instance().getWritablePropertiesURL(""String_Node_Str"");
  Job job=JobManager.createJob(Msg.INSTALLING.toString(sbmd.getName()),predicturl,this,true);
  yield();
  try {
    job.setProgress(Msg.JOB_INIT.toString());
    URL temp=NetUtil.getTemporaryURL(""String_Node_Str"",ZIP_SUFFIX);
    download(job,directory + '/' + PACKAGE_DIR,sbmd.getInitials() + ZIP_SUFFIX,temp);
    job.setInterruptable(false);
    if (!job.isFinished()) {
      File dldir=SwordBookPath.getDownloadDir();
      IOUtil.unpackZip(NetUtil.getAsFile(temp),dldir);
      job.setProgress(Msg.JOB_CONFIG.toString());
      sbmd.setLibrary(NetUtil.getURL(dldir));
      SwordBookDriver.registerNewBook(sbmd);
    }
  }
 catch (  IOException e) {
    Reporter.informUser(this,e);
    job.ignoreTimings();
  }
catch (  InstallException e) {
    Reporter.informUser(this,e);
    job.ignoreTimings();
  }
catch (  BookException e) {
    Reporter.informUser(this,e);
    job.ignoreTimings();
  }
 finally {
    job.done();
  }
}",0.9475247524752476
101675,"public void install(Book book){
  if (Books.installed().getBook(book.getName()) != null) {
    return;
  }
  final SwordBookMetaData sbmd=(SwordBookMetaData)book.getBookMetaData();
  final Thread worker=new Thread(""String_Node_Str""){
    public void run(){
      URL predicturl=Project.instance().getWritablePropertiesURL(""String_Node_Str"");
      Job job=JobManager.createJob(Msg.INSTALLING.toString(sbmd.getName()),predicturl,this,true);
      yield();
      try {
        job.setProgress(Msg.JOB_INIT.toString());
        URL temp=NetUtil.getTemporaryURL(""String_Node_Str"",ZIP_SUFFIX);
        download(job,directory + '/' + PACKAGE_DIR,sbmd.getInitials() + ZIP_SUFFIX,temp);
        job.setInterruptable(false);
        File dldir=SwordBookPath.getDownloadDir();
        if (!job.isFinished()) {
          IOUtil.unpackZip(NetUtil.getAsFile(temp),dldir);
          job.setProgress(Msg.JOB_CONFIG.toString());
          SwordBookDriver.registerNewBook(sbmd);
        }
      }
 catch (      IOException e) {
        Reporter.informUser(this,e);
        job.ignoreTimings();
      }
catch (      InstallException e) {
        Reporter.informUser(this,e);
        job.ignoreTimings();
      }
catch (      BookException e) {
        Reporter.informUser(this,e);
        job.ignoreTimings();
      }
 finally {
        job.done();
      }
    }
  }
;
  worker.setPriority(Thread.MIN_PRIORITY);
  worker.start();
}","public void install(Book book){
  if (Books.installed().getBook(book.getName()) != null) {
    return;
  }
  final SwordBookMetaData sbmd=(SwordBookMetaData)book.getBookMetaData();
  final Thread worker=new Thread(""String_Node_Str""){
    public void run(){
      URL predicturl=Project.instance().getWritablePropertiesURL(""String_Node_Str"");
      Job job=JobManager.createJob(Msg.INSTALLING.toString(sbmd.getName()),predicturl,this,true);
      yield();
      try {
        job.setProgress(Msg.JOB_INIT.toString());
        URL temp=NetUtil.getTemporaryURL(""String_Node_Str"",ZIP_SUFFIX);
        download(job,directory + '/' + PACKAGE_DIR,sbmd.getInitials() + ZIP_SUFFIX,temp);
        job.setInterruptable(false);
        if (!job.isFinished()) {
          File dldir=SwordBookPath.getDownloadDir();
          IOUtil.unpackZip(NetUtil.getAsFile(temp),dldir);
          job.setProgress(Msg.JOB_CONFIG.toString());
          sbmd.setLibrary(NetUtil.getURL(dldir));
          SwordBookDriver.registerNewBook(sbmd);
        }
      }
 catch (      IOException e) {
        Reporter.informUser(this,e);
        job.ignoreTimings();
      }
catch (      InstallException e) {
        Reporter.informUser(this,e);
        job.ignoreTimings();
      }
catch (      BookException e) {
        Reporter.informUser(this,e);
        job.ignoreTimings();
      }
 finally {
        job.done();
      }
    }
  }
;
  worker.setPriority(Thread.MIN_PRIORITY);
  worker.start();
}",0.9464906184850592
101676,"public Key readIndex(){
  checkActive();
  SwordBookMetaData bmd=getBookMetaData();
  String charset=bmd.getBookCharset();
  keys=new DefaultKeyList(null,bmd.getName());
  boolean isDailyDevotional=bmd.getBookCategory().equals(BookCategory.DAILY_DEVOTIONS);
  Calendar greg=new GregorianCalendar(1972,Calendar.JANUARY,1);
  DateFormat nameDF=new SimpleDateFormat(""String_Node_Str"");
  long entries;
  try {
    entries=idxRaf.length() / IDX_ENTRY_SIZE;
  }
 catch (  IOException ex) {
    Reporter.informUser(this,ex);
    return keys;
  }
  for (int entry=0; entry < entries; entry++) {
    try {
      byte[] buffer=SwordUtil.readRAF(idxRaf,entry * IDX_ENTRY_SIZE,IDX_ENTRY_SIZE);
      int offset=SwordUtil.decodeLittleEndian32(buffer,0);
      int size=SwordUtil.decodeLittleEndian32(buffer,4);
      byte[] data=SwordUtil.readRAF(datRaf,offset,size);
      decipher(data);
      int keyend=SwordUtil.findByte(data,SEPARATOR);
      if (keyend == -1) {
        DataPolice.report(""String_Node_Str"" + offset + ""String_Node_Str""+ new String(data)+ ""String_Node_Str"");
        continue;
      }
      byte[] keydata=new byte[keyend];
      System.arraycopy(data,0,keydata,0,keyend);
      String keytitle=SwordUtil.decode(keys,keydata,charset).trim();
      if (keytitle.endsWith(""String_Node_Str"")) {
        keytitle=keytitle.substring(0,keytitle.length() - 1);
      }
      if (isDailyDevotional) {
        String[] parts=StringUtil.splitAll(keytitle,'.');
        greg.set(Calendar.MONTH,Integer.parseInt(parts[0]) - 1);
        greg.set(Calendar.DATE,Integer.parseInt(parts[1]));
        keytitle=nameDF.format(greg.getTime());
      }
      Key key=new IndexKey(keytitle,offset,size,keys);
      keys.addAll(key);
    }
 catch (    IOException ex) {
      log.error(""String_Node_Str"",ex);
    }
catch (    NumberFormatException e) {
      log.error(""String_Node_Str"",e);
    }
  }
  return keys;
}","public Key readIndex(){
  checkActive();
  SwordBookMetaData bmd=getBookMetaData();
  String charset=bmd.getBookCharset();
  keys=new DefaultKeyList(null,bmd.getName());
  boolean isDailyDevotional=bmd.getBookCategory().equals(BookCategory.DAILY_DEVOTIONS);
  Calendar greg=new GregorianCalendar(1972,Calendar.JANUARY,1);
  DateFormat nameDF=new SimpleDateFormat(""String_Node_Str"");
  long entries;
  try {
    entries=idxRaf.length() / IDX_ENTRY_SIZE;
  }
 catch (  IOException ex) {
    Reporter.informUser(this,ex);
    return keys;
  }
  for (int entry=0; entry < entries; entry++) {
    try {
      byte[] buffer=SwordUtil.readRAF(idxRaf,entry * IDX_ENTRY_SIZE,IDX_ENTRY_SIZE);
      int offset=SwordUtil.decodeLittleEndian32(buffer,0);
      int size=SwordUtil.decodeLittleEndian32(buffer,4);
      byte[] data=SwordUtil.readRAF(datRaf,offset,size);
      int keyend=SwordUtil.findByte(data,SEPARATOR);
      if (keyend == -1) {
        DataPolice.report(""String_Node_Str"" + offset + ""String_Node_Str""+ new String(data)+ ""String_Node_Str"");
        continue;
      }
      byte[] keydata=new byte[keyend];
      System.arraycopy(data,0,keydata,0,keyend);
      String keytitle=SwordUtil.decode(keys,keydata,charset).trim();
      if (keytitle.endsWith(""String_Node_Str"")) {
        keytitle=keytitle.substring(0,keytitle.length() - 1);
      }
      if (isDailyDevotional) {
        String[] parts=StringUtil.splitAll(keytitle,'.');
        greg.set(Calendar.MONTH,Integer.parseInt(parts[0]) - 1);
        greg.set(Calendar.DATE,Integer.parseInt(parts[1]));
        keytitle=nameDF.format(greg.getTime());
      }
      Key key=new IndexKey(keytitle,offset,size,keys);
      keys.addAll(key);
    }
 catch (    IOException ex) {
      log.error(""String_Node_Str"",ex);
    }
catch (    NumberFormatException e) {
      log.error(""String_Node_Str"",e);
    }
  }
  return keys;
}",0.99418911780243
101677,"/** 
 * Load the cached index file into memory
 */
private void loadCachedIndex() throws InstallException {
  BookDriver fake=SwordBookDriver.instance();
  entries.clear();
  URL cache=getCachedIndexFile();
  if (!NetUtil.isFile(cache)) {
    reloadBookList();
  }
  InputStream in=null;
  GZIPInputStream gin=null;
  TarInputStream tin=null;
  try {
    ConfigEntry.resetStatistics();
    in=cache.openStream();
    gin=new GZIPInputStream(in);
    tin=new TarInputStream(gin);
    while (true) {
      TarEntry entry=tin.getNextEntry();
      if (entry == null) {
        break;
      }
      String internal=entry.getName();
      if (!entry.isDirectory()) {
        try {
          int size=(int)entry.getSize();
          byte[] buffer=new byte[size];
          if (tin.read(buffer) != size) {
            log.warn(""String_Node_Str"" + internal);
          }
          if (internal.endsWith(SwordConstants.EXTENSION_CONF)) {
            internal=internal.substring(0,internal.length() - 5);
          }
          if (internal.startsWith(SwordConstants.DIR_CONF + '/')) {
            internal=internal.substring(7);
          }
          Reader rin=new InputStreamReader(new ByteArrayInputStream(buffer));
          SwordBookMetaData sbmd=new SwordBookMetaData(rin,internal);
          sbmd.setDriver(fake);
          Book book=new SwordBook(sbmd,null);
          entries.put(book.getName(),book);
        }
 catch (        Exception ex) {
          log.warn(""String_Node_Str"" + internal,ex);
        }
      }
    }
    loaded=true;
    ConfigEntry.dumpStatistics();
  }
 catch (  IOException ex) {
    throw new InstallException(Msg.CACHE_ERROR,ex);
  }
 finally {
    IOUtil.close(tin);
    IOUtil.close(gin);
    IOUtil.close(in);
  }
}","/** 
 * Load the cached index file into memory
 */
private void loadCachedIndex() throws InstallException {
  BookDriver fake=SwordBookDriver.instance();
  entries.clear();
  URL cache=getCachedIndexFile();
  if (!NetUtil.isFile(cache)) {
    reloadBookList();
  }
  InputStream in=null;
  GZIPInputStream gin=null;
  TarInputStream tin=null;
  try {
    ConfigEntry.resetStatistics();
    in=cache.openStream();
    gin=new GZIPInputStream(in);
    tin=new TarInputStream(gin);
    while (true) {
      TarEntry entry=tin.getNextEntry();
      if (entry == null) {
        break;
      }
      String internal=entry.getName();
      if (!entry.isDirectory()) {
        try {
          int size=(int)entry.getSize();
          byte[] buffer=new byte[size];
          if (tin.read(buffer) != size) {
            log.warn(""String_Node_Str"" + internal);
          }
          if (internal.endsWith(SwordConstants.EXTENSION_CONF)) {
            internal=internal.substring(0,internal.length() - 5);
          }
          if (internal.startsWith(SwordConstants.DIR_CONF + '/')) {
            internal=internal.substring(7);
          }
          SwordBookMetaData sbmd=new SwordBookMetaData(buffer,internal);
          sbmd.setDriver(fake);
          Book book=new SwordBook(sbmd,null);
          entries.put(book.getName(),book);
        }
 catch (        Exception ex) {
          log.warn(""String_Node_Str"" + internal,ex);
        }
      }
    }
    loaded=true;
    ConfigEntry.dumpStatistics();
  }
 catch (  IOException ex) {
    throw new InstallException(Msg.CACHE_ERROR,ex);
  }
 finally {
    IOUtil.close(tin);
    IOUtil.close(gin);
    IOUtil.close(in);
  }
}",0.9744942832014072
101678,"/** 
 * Loads a sword config from a given Reader. The returned BookMetaData object will not be associated with a Book so setBook() should be called before getBook() is expected to return anything other than null.
 */
public SwordBookMetaData(Reader in,String internal) throws IOException {
  cet=new ConfigEntryTable(in,internal);
  buildProperties();
}","/** 
 * Loads a sword config from a buffer. The returned BookMetaData object will not be associated with a Book so setBook() should be called before getBook() is expected to return anything other than null.
 * @param buffer
 * @param internal
 * @throws IOException
 */
public SwordBookMetaData(byte[] buffer,String internal) throws IOException {
  Reader in=new InputStreamReader(new ByteArrayInputStream(buffer),ENCODING_LATIN1);
  cet=new ConfigEntryTable(in,internal);
  if (!ENCODING_LATIN1.equals(getBookCharset())) {
    in=new InputStreamReader(new ByteArrayInputStream(buffer),ENCODING_UTF8);
    cet=new ConfigEntryTable(in,internal);
  }
  buildProperties();
}",0.564453125
101679,"private int keyrand(int limit,byte[] key){
  int u;
  if (limit == 0) {
    return 0;
  }
  int retry_limiter=0;
  int mask=1;
  while (mask < limit) {
    mask=(mask << 1) + 1;
  }
  do {
    rsum=(cards[rsum] + (key[keypos++] & 0xFF)) & 0xFF;
    if (keypos >= key.length) {
      keypos=0;
      rsum+=key.length;
    }
    u=mask & rsum;
    if (++retry_limiter > 11) {
      u%=limit;
    }
  }
 while (u > limit);
  return u;
}","private int keyrand(int limit,byte[] key){
  int u;
  if (limit == 0) {
    return 0;
  }
  int retry_limiter=0;
  int mask=1;
  while (mask < limit) {
    mask=(mask << 1) + 1;
  }
  do {
    rsum=(cards[rsum] + (key[keypos++] & 0xFF)) & 0xFF;
    if (keypos >= key.length) {
      keypos=0;
      rsum+=key.length;
      rsum&=0xFF;
    }
    u=mask & rsum;
    if (++retry_limiter > 11) {
      u%=limit;
    }
  }
 while (u > limit);
  return u;
}",0.9796380090497736
101680,"public Element processTag(Element ele,Attributes attrs){
  Element q=OSISUtil.factory().createQ();
  ele.addContent(q);
  return q;
}","public Element processTag(Element ele,Attributes attrs){
  Element q=OSISUtil.factory().createQ();
  ele.setAttribute(OSISUtil.ATTRIBUTE_Q_TYPE,OSISUtil.Q_BLOCK);
  ele.addContent(q);
  return q;
}",0.806060606060606
101681,"public Element processTag(Element ele,Attributes attrs){
  Element p=OSISUtil.factory().createP();
  ele.addContent(p);
  return p;
}","public Element processTag(Element ele,Attributes attrs){
  Element lb=OSISUtil.factory().createLB();
  ele.addContent(lb);
  return lb;
}",0.9555555555555556
101682,"public Element processTag(Element ele,Attributes attrs){
  Element q=OSISUtil.factory().createQ();
  ele.addContent(q);
  return q;
}","public Element processTag(Element ele,Attributes attrs){
  Element q=OSISUtil.factory().createQ();
  ele.setAttribute(OSISUtil.ATTRIBUTE_Q_TYPE,OSISUtil.Q_BLOCK);
  ele.addContent(q);
  return q;
}",0.806060606060606
101683,"public void endElement(String uri,String localname,String qname){
  Element finished=(Element)stack.removeFirst();
  if (stack.size() == 0) {
    rootElement=finished;
  }
}","public void endElement(String uri,String localname,String qname){
  Element finished=(Element)stack.removeFirst();
  Tag t=getTag(localname,qname);
  t.processContent(finished);
  if (stack.size() == 0) {
    rootElement=finished;
  }
}",0.8459657701711492
101684,"public void startElement(String uri,String localname,String qname,Attributes attrs) throws SAXException {
  Element ele=null;
  if (stack.size() > 0) {
    ele=(Element)stack.getFirst();
    if (ele == null) {
      return;
    }
  }
  Tag t=(Tag)TAG_MAP.get(qname);
  if (t == null) {
    t=(Tag)TAG_MAP.get(qname.toLowerCase());
    if (t == null) {
      log.warn(""String_Node_Str"" + localname + ""String_Node_Str""+ qname);
      return;
    }
    DataPolice.report(""String_Node_Str"" + qname);
  }
  stack.addFirst(t.processTag(ele,attrs));
}","public void startElement(String uri,String localname,String qname,Attributes attrs) throws SAXException {
  Element ele=null;
  if (stack.size() > 0) {
    ele=(Element)stack.getFirst();
    if (ele == null) {
      return;
    }
  }
  Tag t=getTag(localname,qname);
  stack.addFirst(t.processTag(ele,attrs));
}",0.6947368421052632
101685,"public Element processTag(Element ele,Attributes attrs){
  Element list=OSISUtil.factory().createList();
  ele.addContent(list);
  return list;
}","public Element processTag(Element ele,Attributes attrs){
  Element list=OSISUtil.factory().createList();
  ele.setAttribute(OSISUtil.ATTRIBUTE_LIST_TYPE,OSISUtil.LIST_ORDERED);
  ele.addContent(list);
  return list;
}",0.8011049723756906
101686,"public void provideSAXEvents(ContentHandler handler) throws SAXException {
  try {
    Source src_in=new SAXSource(new SAXEventProviderXMLReader(xmlsep),new SAXEventProviderInputSource());
    TemplateInfo tinfo=getTemplateInfo();
    SAXResult res_out=new SAXResult(handler);
    Transformer transformer=tinfo.getTemplates().newTransformer();
    for (Iterator it=outputs.keySet().iterator(); it.hasNext(); ) {
      String key=(String)it.next();
      String val=getOutputProperty(key);
      transformer.setOutputProperty(key,val);
    }
    for (Iterator it=params.keySet().iterator(); it.hasNext(); ) {
      String key=(String)it.next();
      Object val=params.get(key);
      transformer.setParameter(key,val);
    }
    if (errors != null) {
      transformer.setErrorListener(errors);
    }
    if (resolver != null) {
      transformer.setURIResolver(resolver);
    }
    transformer.transform(src_in,res_out);
  }
 catch (  IOException ex) {
    throw new SAXException(ex);
  }
catch (  TransformerConfigurationException ex) {
    throw new SAXException(ex);
  }
catch (  TransformerException ex) {
    throw new SAXException(ex);
  }
}","public void provideSAXEvents(ContentHandler handler) throws SAXException {
  try {
    Source xmlSource=new SAXSource(new SAXEventProviderXMLReader(xmlsep),new SAXEventProviderInputSource());
    SAXResult outputTarget=new SAXResult(handler);
    transform(xmlSource,outputTarget);
  }
 catch (  TransformerException ex) {
    throw new SAXException(ex);
  }
}",0.2652519893899204
101687,"/** 
 * @param antiAliasing The new anti aliasing status.
 */
public static void setAntiAliasing(boolean antiAliasing){
  AntiAliasedTextPane.antiAliasing=antiAliasing;
}","/** 
 * @param antiAliasing The new anti aliasing status.
 */
public static void setAntiAliasing(boolean antiAliasing){
  AntiAliasedTextPane.antiAliasing=antiAliasing;
  System.setProperty(""String_Node_Str"",Boolean.toString(antiAliasing));
}",0.8252427184466019
101688,"/** 
 * Install Windows platform specific UI defaults.
 */
protected void initPlatformUIDefaults(){
  Border tabbedPanePanelBorder=null;
  Color standardBorderColor=null;
  Object windowsScrollPaneborder=UIManager.get(""String_Node_Str"");
  if (windowsScrollPaneborder != null) {
    standardBorderColor=((LineBorder)windowsScrollPaneborder).getLineColor();
    tabbedPanePanelBorder=new LineBorder(standardBorderColor);
  }
  Border panelSelectBorder=BorderFactory.createCompoundBorder(BorderFactory.createMatteBorder(1,1,0,1,standardBorderColor),BorderFactory.createEmptyBorder(5,5,5,5));
  Object[] windowsUIDefaults=new Object[]{""String_Node_Str"",WindowsBorderlessTabbedPaneUI.createUI(null),""String_Node_Str"",tabbedPanePanelBorder,""String_Node_Str"",standardBorderColor,""String_Node_Str"",panelSelectBorder};
  UIManager.getDefaults().putDefaults(windowsUIDefaults);
}","/** 
 * Install Windows platform specific UI defaults.
 */
protected void initPlatformUIDefaults(){
  Border tabbedPanePanelBorder=null;
  Color standardBorderColor=null;
  Object windowsScrollPaneborder=UIManager.get(""String_Node_Str"");
  if (windowsScrollPaneborder != null) {
    if (windowsScrollPaneborder instanceof LineBorder) {
      standardBorderColor=((LineBorder)windowsScrollPaneborder).getLineColor();
      tabbedPanePanelBorder=new LineBorder(standardBorderColor);
    }
 else {
      tabbedPanePanelBorder=BorderFactory.createEmptyBorder(1,1,1,1);
    }
  }
  Border panelSelectBorder=BorderFactory.createCompoundBorder(BorderFactory.createMatteBorder(1,1,0,1,standardBorderColor),BorderFactory.createEmptyBorder(5,5,5,5));
  Object[] windowsUIDefaults=new Object[]{""String_Node_Str"",WindowsBorderlessTabbedPaneUI.createUI(null),""String_Node_Str"",tabbedPanePanelBorder,""String_Node_Str"",standardBorderColor,""String_Node_Str"",panelSelectBorder};
  UIManager.getDefaults().putDefaults(windowsUIDefaults);
}",0.9201480698043364
101689,"/** 
 * Copy this WebResource to the destination.
 * @param dest
 * @throws LucidException
 */
public void copy(URL dest) throws LucidException {
  InputStream in=null;
  OutputStream out=null;
  HttpMethod method=new GetMethod(url.getPath());
  try {
    if (client.executeMethod(method) == HttpStatus.SC_OK) {
      in=method.getResponseBodyAsStream();
      out=NetUtil.getOutputStream(dest);
      byte[] buf=new byte[4096];
      for (int count=0; -1 != (count=in.read(buf)); ) {
        out.write(buf,0,count);
      }
    }
  }
 catch (  Exception e) {
    throw new LucidException(Msg.MISSING_FILE,e);
  }
 finally {
    method.releaseConnection();
    IOUtil.close(in);
    IOUtil.close(out);
  }
}","/** 
 * Copy this WebResource to the destination.
 * @param dest
 * @throws LucidException
 */
public void copy(URL dest) throws LucidException {
  InputStream in=null;
  OutputStream out=null;
  HttpMethod method=new GetMethod(url.getPath());
  try {
    if (client.executeMethod(method) == HttpStatus.SC_OK) {
      in=method.getResponseBodyAsStream();
      out=NetUtil.getOutputStream(dest);
      byte[] buf=new byte[4096];
      int count=in.read(buf);
      while (-1 != count) {
        out.write(buf,0,count);
        count=in.read(buf);
      }
    }
  }
 catch (  Exception e) {
    throw new LucidException(Msg.MISSING_FILE,e);
  }
 finally {
    method.releaseConnection();
    IOUtil.close(in);
    IOUtil.close(out);
  }
}",0.925207756232687
101690,"/** 
 * Load the cached index file into memory
 */
private void loadCachedIndex() throws InstallException {
  BookDriver fake=SwordBookDriver.instance();
  entries.clear();
  URL cache=getCachedIndexFile();
  if (!NetUtil.isFile(cache)) {
    reloadBookList();
  }
  InputStream in=null;
  GZIPInputStream gin=null;
  TarInputStream tin=null;
  try {
    ConfigEntry.resetStatistics();
    in=cache.openStream();
    gin=new GZIPInputStream(in);
    tin=new TarInputStream(gin);
    while (true) {
      TarEntry entry=tin.getNextEntry();
      if (entry == null) {
        break;
      }
      String internal=entry.getName();
      if (!entry.isDirectory()) {
        try {
          int size=(int)entry.getSize();
          byte[] buffer=new byte[size];
          if (tin.read(buffer) != size) {
            log.warn(""String_Node_Str"" + internal);
          }
          if (internal.endsWith(SwordConstants.EXTENSION_CONF)) {
            internal=internal.substring(0,internal.length() - 5);
          }
          if (internal.startsWith(SwordConstants.DIR_CONF + '/')) {
            internal=internal.substring(7);
          }
          Reader rin=new InputStreamReader(new ByteArrayInputStream(buffer));
          SwordBookMetaData sbmd=new SwordBookMetaData(rin,internal);
          sbmd.setDriver(fake);
          Book book=new SwordBook(sbmd,null);
          if (sbmd.isSupported()) {
            entries.put(book.getName(),book);
          }
        }
 catch (        Exception ex) {
          log.warn(""String_Node_Str"" + internal,ex);
        }
      }
    }
    loaded=true;
    ConfigEntry.dumpStatistics();
  }
 catch (  IOException ex) {
    throw new InstallException(Msg.CACHE_ERROR,ex);
  }
 finally {
    IOUtil.close(tin);
    IOUtil.close(gin);
    IOUtil.close(in);
  }
}","/** 
 * Load the cached index file into memory
 */
private void loadCachedIndex() throws InstallException {
  BookDriver fake=SwordBookDriver.instance();
  entries.clear();
  URL cache=getCachedIndexFile();
  if (!NetUtil.isFile(cache)) {
    reloadBookList();
  }
  InputStream in=null;
  GZIPInputStream gin=null;
  TarInputStream tin=null;
  try {
    ConfigEntry.resetStatistics();
    in=cache.openStream();
    gin=new GZIPInputStream(in);
    tin=new TarInputStream(gin);
    while (true) {
      TarEntry entry=tin.getNextEntry();
      if (entry == null) {
        break;
      }
      String internal=entry.getName();
      if (!entry.isDirectory()) {
        try {
          int size=(int)entry.getSize();
          byte[] buffer=new byte[size];
          if (tin.read(buffer) != size) {
            log.warn(""String_Node_Str"" + internal);
          }
          if (internal.endsWith(SwordConstants.EXTENSION_CONF)) {
            internal=internal.substring(0,internal.length() - 5);
          }
          if (internal.startsWith(SwordConstants.DIR_CONF + '/')) {
            internal=internal.substring(7);
          }
          Reader rin=new InputStreamReader(new ByteArrayInputStream(buffer));
          SwordBookMetaData sbmd=new SwordBookMetaData(rin,internal);
          sbmd.setDriver(fake);
          Book book=new SwordBook(sbmd,null);
          entries.put(book.getName(),book);
        }
 catch (        Exception ex) {
          log.warn(""String_Node_Str"" + internal,ex);
        }
      }
    }
    loaded=true;
    ConfigEntry.dumpStatistics();
  }
 catch (  IOException ex) {
    throw new InstallException(Msg.CACHE_ERROR,ex);
  }
 finally {
    IOUtil.close(tin);
    IOUtil.close(gin);
    IOUtil.close(in);
  }
}",0.9858597285067874
101691,"/** 
 * Cause a component to refresh its contents when it is changed by the program and needs to be redrawn.
 * @param c the component to refresh
 */
public static void refresh(Component c){
  c.invalidate();
  c.validate();
  c.repaint();
}","/** 
 * Cause a component to refresh its contents when it is changed by the program and needs to be redrawn.
 * @param c the component to refresh
 */
public static void refresh(Component c){
  c.invalidate();
  c.validate();
  c.repaint();
  if (c instanceof JComponent) {
    ((JComponent)c).revalidate();
  }
}",0.8716094032549728
101692,"/** 
 * Create a stack trace of the code at this point
 * @param ex The Throwable containing the Stack Trace
 * @param disgard The number of uppermost stack frames to ignore
 */
private void init(Throwable ex,int disgard){
  StringWriter sout=new StringWriter();
  ex.printStackTrace(new PrintWriter(sout));
  String msg=new String(sout.getBuffer());
  String[] calls=StringUtil.split(msg,""String_Node_Str"");
  classNames=new String[calls.length - disgard];
  methodNames=new String[calls.length - disgard];
  fileNames=new String[calls.length - disgard];
  lineNumbers=new int[calls.length - disgard];
  for (int i=0; i < classNames.length; i++) {
    String call=calls[i + disgard];
    try {
      int spcIndex=call.indexOf(' ');
      int lhsIndex=call.indexOf('(');
      int clnIndex=call.indexOf(':');
      int rhsIndex=call.indexOf(')');
      String fullFn=call.substring(spcIndex + 1,lhsIndex).trim();
      int lastDot=fullFn.lastIndexOf('.');
      classNames[i]=fullFn.substring(0,lastDot).replace('/','.');
      methodNames[i]=fullFn.substring(lastDot + 1);
      if (clnIndex != -1) {
        fileNames[i]=call.substring(lhsIndex + 1,clnIndex);
        lineNumbers[i]=Integer.parseInt(call.substring(clnIndex + 1,rhsIndex));
      }
 else {
        fileNames[i]=call.substring(lhsIndex + 1,rhsIndex);
        lineNumbers[i]=0;
      }
    }
 catch (    Exception ex2) {
      classNames[i]=""String_Node_Str"";
      methodNames[i]=call;
      fileNames[i]=""String_Node_Str"";
      lineNumbers[i]=0;
    }
  }
}","/** 
 * Create a stack trace of the code at this point
 * @param ex The Throwable containing the Stack Trace
 * @param discard The number of uppermost stack frames to ignore
 */
private void init(Throwable ex,int discard){
  StringWriter sout=new StringWriter();
  ex.printStackTrace(new PrintWriter(sout));
  String msg=new String(sout.getBuffer());
  String[] calls=StringUtil.split(msg,""String_Node_Str"");
  classNames=new String[calls.length - discard];
  methodNames=new String[calls.length - discard];
  fileNames=new String[calls.length - discard];
  lineNumbers=new int[calls.length - discard];
  for (int i=0; i < classNames.length; i++) {
    String call=calls[i + discard];
    try {
      int spcIndex=call.indexOf(' ');
      int lhsIndex=call.indexOf('(');
      int clnIndex=call.indexOf(':');
      int rhsIndex=call.indexOf(')');
      String fullFn=call.substring(spcIndex + 1,lhsIndex).trim();
      int lastDot=fullFn.lastIndexOf('.');
      classNames[i]=fullFn.substring(0,lastDot).replace('/','.');
      methodNames[i]=fullFn.substring(lastDot + 1);
      if (clnIndex != -1) {
        fileNames[i]=call.substring(lhsIndex + 1,clnIndex);
        lineNumbers[i]=Integer.parseInt(call.substring(clnIndex + 1,rhsIndex));
      }
 else {
        fileNames[i]=call.substring(lhsIndex + 1,rhsIndex);
        lineNumbers[i]=0;
      }
    }
 catch (    Exception ex2) {
      classNames[i]=""String_Node_Str"";
      methodNames[i]=call;
      fileNames[i]=""String_Node_Str"";
      lineNumbers[i]=0;
    }
  }
}",0.9954128440366972
101693,"/** 
 * A parse has failed so we can try to kill the broken entities and then have another go.
 */
public static String cleanAllEntities(String broken){
  if (broken == null) {
    return null;
  }
  String working=broken;
  int cleanfrom=0;
  allEntities:   while (true) {
    int amp=working.indexOf('&',cleanfrom);
    if (amp == -1) {
      break allEntities;
    }
    int i=amp + 1;
    singleEntity:     while (true) {
      if (i >= working.length()) {
        String entity=working.substring(amp);
        String replace=guessEntity(entity);
        working=working.substring(0,amp) + replace;
        break singleEntity;
      }
      char c=working.charAt(i);
      if (c == ';') {
        String entity=working.substring(amp,i + 1);
        String replace=guessEntity(entity);
        working=working.substring(0,amp) + replace + working.substring(i + 1);
        break singleEntity;
      }
      if (!Character.isLetterOrDigit(c) && c != '-') {
        String entity=working.substring(amp,i);
        String replace=guessEntity(entity);
        working=working.substring(0,amp) + replace + working.substring(i);
        break singleEntity;
      }
      i++;
    }
    cleanfrom=amp + 1;
  }
  return working;
}","/** 
 * A parse has failed so we can try to kill the broken entities and then have another go.
 */
public static String cleanAllEntities(String broken){
  if (broken == null) {
    return null;
  }
  String working=broken;
  int cleanfrom=0;
  while (true) {
    int amp=working.indexOf('&',cleanfrom);
    if (amp == -1) {
      break;
    }
    if (validCharacterEntityPattern.matcher(working.substring(amp)).find()) {
      cleanfrom=working.indexOf(';',amp) + 1;
      continue;
    }
    int i=amp + 1;
    while (true) {
      if (i >= working.length()) {
        String entity=working.substring(amp);
        String replace=guessEntity(entity);
        working=working.substring(0,amp) + replace;
        break;
      }
      char c=working.charAt(i);
      if (c == ';') {
        String entity=working.substring(amp,i + 1);
        String replace=guessEntity(entity);
        working=working.substring(0,amp) + replace + working.substring(i + 1);
        break;
      }
      if (!Character.isLetterOrDigit(c) && c != '-') {
        String entity=working.substring(amp,i);
        String replace=guessEntity(entity);
        working=working.substring(0,amp) + replace + working.substring(i);
        break;
      }
      i++;
    }
    cleanfrom=amp + 1;
  }
  return working;
}",0.9124203821656052
101694,"/** 
 * Take a string and tokenize it using "" "" and ""--"" as delimiters into an Array of Strings. There is a question mark over what to do with initial spaces. This algorithm disgards them, I'm not sure if this is the right thing to do.
 * @param sentence The string to parse.
 * @return The string array
 */
public static String[] tokenize(String sentence){
  List tokens=new ArrayList();
  int pos=0;
  String temp;
  boolean alive=true;
  while (alive) {
    int nextSpace=sentence.indexOf(""String_Node_Str"",pos);
    int nextDDash=sentence.indexOf(""String_Node_Str"",pos);
    if (nextSpace == nextDDash + 2) {
      nextDDash=-1;
    }
    if (nextDDash == nextSpace + 1) {
      nextSpace=-1;
    }
    if (nextSpace == -1 && nextDDash == -1) {
      temp=sentence.substring(pos);
      alive=false;
    }
 else     if ((nextSpace != -1 && nextSpace < nextDDash) || (nextDDash == -1)) {
      temp=sentence.substring(pos,nextSpace) + ' ';
      pos=nextSpace + 1;
    }
 else {
      temp=sentence.substring(pos,nextDDash) + ""String_Node_Str"";
      pos=nextDDash + 2;
    }
    if (temp != null && !temp.trim().equals(""String_Node_Str"")) {
      tokens.add(temp);
    }
  }
  String[] retcode=new String[tokens.size()];
  int i=0;
  for (Iterator it=tokens.iterator(); it.hasNext(); ) {
    retcode[i++]=(String)it.next();
  }
  return retcode;
}","/** 
 * Take a string and tokenize it using "" "" and ""--"" as delimiters into an Array of Strings. There is a question mark over what to do with initial spaces. This algorithm discards them, I'm not sure if this is the right thing to do.
 * @param sentence The string to parse.
 * @return The string array
 */
public static String[] tokenize(String sentence){
  List tokens=new ArrayList();
  int pos=0;
  String temp;
  boolean alive=true;
  while (alive) {
    int nextSpace=sentence.indexOf(""String_Node_Str"",pos);
    int nextDDash=sentence.indexOf(""String_Node_Str"",pos);
    if (nextSpace == nextDDash + 2) {
      nextDDash=-1;
    }
    if (nextDDash == nextSpace + 1) {
      nextSpace=-1;
    }
    if (nextSpace == -1 && nextDDash == -1) {
      temp=sentence.substring(pos);
      alive=false;
    }
 else     if ((nextSpace != -1 && nextSpace < nextDDash) || (nextDDash == -1)) {
      temp=sentence.substring(pos,nextSpace) + ' ';
      pos=nextSpace + 1;
    }
 else {
      temp=sentence.substring(pos,nextDDash) + ""String_Node_Str"";
      pos=nextDDash + 2;
    }
    if (temp != null && !temp.trim().equals(""String_Node_Str"")) {
      tokens.add(temp);
    }
  }
  String[] retcode=new String[tokens.size()];
  int i=0;
  for (Iterator it=tokens.iterator(); it.hasNext(); ) {
    retcode[i++]=(String)it.next();
  }
  return retcode;
}",0.999259807549963
101695,"public List toOSIS(Key key,String plain) throws FilterException {
  DataPolice.setKey(key);
  Element ele=null;
  try {
    ele=parse(plain);
  }
 catch (  Exception ex1) {
    DataPolice.report(""String_Node_Str"" + ex1.getMessage() + ""String_Node_Str""+ plain);
    String cropped=XMLUtil.cleanAllEntities(plain);
    try {
      ele=parse(cropped);
    }
 catch (    Exception ex2) {
      log.warn(""String_Node_Str"" + ex2.getMessage());
      String shawn=XMLUtil.cleanAllTags(cropped);
      try {
        ele=parse(shawn);
      }
 catch (      Exception ex3) {
        log.warn(""String_Node_Str"" + ex3.getMessage());
        try {
          ele=OSISUtil.factory().createP();
          ele.addContent(plain);
        }
 catch (        Exception ex4) {
          log.warn(""String_Node_Str"" + ex4.getMessage());
        }
      }
    }
  }
 finally {
    if (ele == null) {
      ele=OSISUtil.factory().createP();
    }
    DataPolice.setKey(null);
  }
  return ele.removeContent();
}","public List toOSIS(Key key,String plain){
  DataPolice.setKey(key);
  Element ele=null;
  try {
    ele=parse(XMLUtil.cleanAllEntities(plain));
  }
 catch (  Exception ex1) {
    DataPolice.report(""String_Node_Str"" + ex1.getMessage() + ""String_Node_Str""+ plain);
    String shawn=XMLUtil.cleanAllTags(plain);
    try {
      ele=parse(shawn);
    }
 catch (    Exception ex2) {
      log.warn(""String_Node_Str"" + ex2.getMessage());
      try {
        ele=OSISUtil.factory().createP();
        ele.addContent(plain);
      }
 catch (      Exception ex4) {
        log.warn(""String_Node_Str"" + ex4.getMessage());
      }
    }
  }
 finally {
    if (ele == null) {
      ele=OSISUtil.factory().createP();
    }
    DataPolice.setKey(null);
  }
  return ele.removeContent();
}",0.7458783399658897
101696,"public List toOSIS(Key key,String plain){
  DataPolice.setKey(key);
  Element ele=null;
  try {
    ele=parse(plain);
  }
 catch (  Exception ex1) {
    DataPolice.report(""String_Node_Str"" + ex1.getMessage() + ""String_Node_Str""+ plain);
    String cropped=XMLUtil.cleanAllEntities(plain);
    try {
      ele=parse(cropped);
    }
 catch (    Exception ex2) {
      log.warn(""String_Node_Str"" + ex2.getMessage());
      String shawn=XMLUtil.cleanAllTags(cropped);
      try {
        ele=parse(shawn);
      }
 catch (      Exception ex3) {
        log.warn(""String_Node_Str"" + ex3.getMessage());
        ele=OSISUtil.factory().createP();
        ele.addContent(plain);
      }
    }
  }
 finally {
    if (ele == null) {
      ele=OSISUtil.factory().createP();
      ele.addContent(plain);
    }
    DataPolice.setKey(null);
  }
  return ele.removeContent();
}","public List toOSIS(Key key,String plain){
  DataPolice.setKey(key);
  Element ele=null;
  try {
    ele=parse(XMLUtil.cleanAllEntities(plain));
  }
 catch (  Exception ex1) {
    DataPolice.report(""String_Node_Str"" + ex1.getMessage() + ""String_Node_Str""+ plain);
    String shawn=XMLUtil.cleanAllTags(plain);
    try {
      ele=parse(shawn);
    }
 catch (    Exception ex2) {
      log.warn(""String_Node_Str"" + ex2.getMessage());
      try {
        ele=OSISUtil.factory().createP();
        ele.addContent(plain);
      }
 catch (      Exception ex4) {
        log.warn(""String_Node_Str"" + ex4.getMessage());
      }
    }
  }
 finally {
    if (ele == null) {
      ele=OSISUtil.factory().createP();
    }
    DataPolice.setKey(null);
  }
  return ele.removeContent();
}",0.6996941896024464
101697,"public String getRawText(Key key) throws BookException {
  checkActive();
  String charset=getBookMetaData().getModuleCharset();
  Verse verse=KeyUtil.getVerse(key);
  try {
    int testament=SwordConstants.getTestament(verse);
    long index=SwordConstants.getIndex(verse);
    if (compRaf[testament] == null) {
      return ""String_Node_Str"";
    }
    byte[] temp=SwordUtil.readRAF(compRaf[testament],index * COMP_ENTRY_SIZE,COMP_ENTRY_SIZE);
    if (temp == null || temp.length == 0) {
      return ""String_Node_Str"";
    }
    int blockNum=SwordUtil.decodeLittleEndian32AsInt(temp,0);
    int verseStart=SwordUtil.decodeLittleEndian32AsInt(temp,4);
    int verseSize=SwordUtil.decodeLittleEndian16(temp,8);
    byte[] uncompressed=null;
    if (blockNum == lastBlockNum && testament == lastTestament) {
      uncompressed=lastUncompressed;
    }
 else {
      temp=SwordUtil.readRAF(idxRaf[testament],blockNum * IDX_ENTRY_SIZE,IDX_ENTRY_SIZE);
      if (temp == null || temp.length == 0) {
        return ""String_Node_Str"";
      }
      long blockStart=SwordUtil.decodeLittleEndian32(temp,0);
      int blockSize=SwordUtil.decodeLittleEndian32AsInt(temp,4);
      int uncompressedSize=SwordUtil.decodeLittleEndian32AsInt(temp,8);
      byte[] data=SwordUtil.readRAF(textRaf[testament],blockStart,blockSize);
      decipher(data);
      uncompressed=SwordUtil.uncompress(data,uncompressedSize);
      lastBlockNum=blockNum;
      lastTestament=testament;
      lastUncompressed=uncompressed;
    }
    byte[] chopped=new byte[verseSize];
    System.arraycopy(uncompressed,verseStart,chopped,0,verseSize);
    return SwordUtil.decode(key,chopped,charset);
  }
 catch (  Exception ex) {
    throw new BookException(Msg.READ_FAIL,ex,new Object[]{verse.getName()});
  }
}","public String getRawText(Key key) throws BookException {
  checkActive();
  String charset=getBookMetaData().getModuleCharset();
  Verse verse=KeyUtil.getVerse(key);
  try {
    int testament=SwordConstants.getTestament(verse);
    int index=SwordConstants.getIndex(verse);
    if (compRaf[testament] == null) {
      return ""String_Node_Str"";
    }
    byte[] temp=SwordUtil.readRAF(compRaf[testament],index * COMP_ENTRY_SIZE,COMP_ENTRY_SIZE);
    if (temp == null || temp.length == 0) {
      return ""String_Node_Str"";
    }
    int blockNum=SwordUtil.decodeLittleEndian32(temp,0);
    int verseStart=SwordUtil.decodeLittleEndian32(temp,4);
    int verseSize=SwordUtil.decodeLittleEndian16(temp,8);
    byte[] uncompressed=null;
    if (blockNum == lastBlockNum && testament == lastTestament) {
      uncompressed=lastUncompressed;
    }
 else {
      temp=SwordUtil.readRAF(idxRaf[testament],blockNum * IDX_ENTRY_SIZE,IDX_ENTRY_SIZE);
      if (temp == null || temp.length == 0) {
        return ""String_Node_Str"";
      }
      int blockStart=SwordUtil.decodeLittleEndian32(temp,0);
      int blockSize=SwordUtil.decodeLittleEndian32(temp,4);
      int uncompressedSize=SwordUtil.decodeLittleEndian32(temp,8);
      byte[] data=SwordUtil.readRAF(textRaf[testament],blockStart,blockSize);
      decipher(data);
      uncompressed=SwordUtil.uncompress(data,uncompressedSize);
      lastBlockNum=blockNum;
      lastTestament=testament;
      lastUncompressed=uncompressed;
    }
    byte[] chopped=new byte[verseSize];
    System.arraycopy(uncompressed,verseStart,chopped,0,verseSize);
    return SwordUtil.decode(key,chopped,charset);
  }
 catch (  Exception ex) {
    throw new BookException(Msg.READ_FAIL,ex,new Object[]{verse.getName()});
  }
}",0.9903463940942646
101698,"public String getRawText(Key key) throws BookException {
  checkActive();
  String charset=getBookMetaData().getModuleCharset();
  Verse verse=KeyUtil.getVerse(key);
  try {
    int testament=SwordConstants.getTestament(verse);
    long index=SwordConstants.getIndex(verse);
    if (idxRaf[testament] == null) {
      return ""String_Node_Str"";
    }
    byte[] read=SwordUtil.readRAF(idxRaf[testament],index * ENTRY_SIZE,ENTRY_SIZE);
    if (read == null || read.length == 0) {
      return ""String_Node_Str"";
    }
    long start=SwordUtil.decodeLittleEndian32(read,0);
    int size=SwordUtil.decodeLittleEndian16(read,4);
    byte[] data=SwordUtil.readRAF(txtRaf[testament],start,size);
    decipher(data);
    return SwordUtil.decode(key,data,charset);
  }
 catch (  IOException ex) {
    throw new BookException(Msg.READ_FAIL,ex,new Object[]{verse.getName()});
  }
}","public String getRawText(Key key) throws BookException {
  checkActive();
  String charset=getBookMetaData().getModuleCharset();
  Verse verse=KeyUtil.getVerse(key);
  try {
    int testament=SwordConstants.getTestament(verse);
    int index=SwordConstants.getIndex(verse);
    if (idxRaf[testament] == null) {
      return ""String_Node_Str"";
    }
    byte[] read=SwordUtil.readRAF(idxRaf[testament],index * ENTRY_SIZE,ENTRY_SIZE);
    if (read == null || read.length == 0) {
      return ""String_Node_Str"";
    }
    int start=SwordUtil.decodeLittleEndian32(read,0);
    int size=SwordUtil.decodeLittleEndian16(read,4);
    if (size < 1) {
      log.error(""String_Node_Str"" + verse.getName() + ""String_Node_Str""+ size);
    }
    byte[] data=SwordUtil.readRAF(txtRaf[testament],start,size);
    decipher(data);
    return SwordUtil.decode(key,data,charset);
  }
 catch (  IOException ex) {
    throw new BookException(Msg.READ_FAIL,ex,new Object[]{verse.getName()});
  }
}",0.9349240780911064
101699,"/** 
 * Setup with the key name and positions of data in the file
 */
protected IndexKey(String text,long offset,int size,Key parent){
  super(text,text,parent);
  this.offset=offset;
  this.size=size;
}","/** 
 * Setup with the key name and positions of data in the file
 */
protected IndexKey(String text,int offset,int size,Key parent){
  super(text,text,parent);
  this.offset=offset;
  this.size=size;
}",0.982716049382716
101700,"/** 
 * Get the sword index of the given verse
 */
static long getIndex(Verse v){
  int ord=v.getOrdinal();
  int book=v.getBook();
  int chapter=v.getChapter();
  int verse=v.getVerse();
  int testament=-1;
  if (ord >= SwordConstants.ORDINAL_MAT11) {
    testament=SwordConstants.TESTAMENT_NEW;
    book=book - BibleInfo.Names.MALACHI;
  }
 else {
    testament=SwordConstants.TESTAMENT_OLD;
  }
  int bookOffset=SwordConstants.bks[testament][book];
  long chapOffset=SwordConstants.cps[testament][bookOffset + chapter];
  return verse + chapOffset;
}","/** 
 * Get the sword index of the given verse
 */
static int getIndex(Verse v){
  int ord=v.getOrdinal();
  int book=v.getBook();
  int chapter=v.getChapter();
  int verse=v.getVerse();
  int testament=-1;
  if (ord >= SwordConstants.ORDINAL_MAT11) {
    testament=SwordConstants.TESTAMENT_NEW;
    book=book - BibleInfo.Names.MALACHI;
  }
 else {
    testament=SwordConstants.TESTAMENT_OLD;
  }
  short bookOffset=SwordConstants.bks[testament][book];
  short chapOffset=SwordConstants.cps[testament][bookOffset + chapter];
  return verse + chapOffset;
}",0.98014440433213
101701,"/** 
 * Read a RandomAccessFile
 * @param raf The file to read
 * @param offset The record to read
 * @param size The number of bytes to read
 * @return the read data
 */
protected static byte[] readRAF(RandomAccessFile raf,long offset,int size) throws IOException {
  if (offset + size > raf.length()) {
    DataPolice.report(""String_Node_Str"" + offset + ""String_Node_Str""+ size+ ""String_Node_Str""+ raf.length());
    size=(int)(raf.length() - offset);
  }
  if (size < 1) {
    DataPolice.report(""String_Node_Str"" + size);
    return new byte[0];
  }
  raf.seek(offset);
  byte[] read=new byte[size];
  raf.readFully(read);
  return read;
}","/** 
 * Read a RandomAccessFile
 * @param raf The file to read
 * @param offset The record to read
 * @param size The number of bytes to read
 * @return the read data
 */
protected static byte[] readRAF(RandomAccessFile raf,int offset,int size) throws IOException {
  if (offset + size > raf.length()) {
    DataPolice.report(""String_Node_Str"" + offset + ""String_Node_Str""+ size+ ""String_Node_Str""+ raf.length());
    size=(int)(raf.length() - offset);
  }
  if (size < 1) {
    DataPolice.report(""String_Node_Str"" + offset + ""String_Node_Str""+ size);
    return new byte[0];
  }
  raf.seek(offset);
  byte[] read=new byte[size];
  raf.readFully(read);
  return read;
}",0.973302822273074
101702,"/** 
 * Decode little endian data from a byte array
 * @param data the byte[] from which to read 4 bytes
 * @param offset the offset into the array
 * @return The decoded data
 */
protected static long decodeLittleEndian32(byte[] data,int offset){
  long byte1=data[0 + offset] & 0xFF;
  long byte2=(data[1 + offset] & 0xFF) << 8;
  long byte3=(data[2 + offset] & 0xFF) << 16;
  long byte4=(data[3 + offset] & 0xFF) << 24;
  return byte4 | byte3 | byte2| byte1;
}","/** 
 * Decode little endian data from a byte array. This assumes that the high order bit is not set as this is used solely for an offset in a file in bytes. For a practical limit, 2**31 is way bigger than any document that we can have.
 * @param data the byte[] from which to read 4 bytes
 * @param offset the offset into the array
 * @return The decoded data
 */
protected static int decodeLittleEndian32(byte[] data,int offset){
  int byte1=data[0 + offset] & 0xFF;
  int byte2=(data[1 + offset] & 0xFF) << 8;
  int byte3=(data[2 + offset] & 0xFF) << 16;
  int byte4=(data[3 + offset] & 0xFF) << 24;
  return byte4 | byte3 | byte2| byte1;
}",0.8010849909584087
101703,"public Element processTag(Element ele,Attributes attrs){
  Element div=OSISUtil.factory().createDiv();
  ele.addContent(div);
  return div;
}","public Element processTag(Element ele,Attributes attrs){
  String typeAttr=attrs.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equals(typeAttr)) {
    Element seg=OSISUtil.factory().createSeg();
    seg.setAttribute(OSISUtil.ATTRIBUTE_SEG_TYPE,OSISUtil.VARIANT_TYPE);
    String classAttr=attrs.getValue(""String_Node_Str"");
    if (classAttr != null) {
      seg.setAttribute(OSISUtil.ATTRIBUTE_SEG_SUBTYPE,OSISUtil.VARIANT_CLASS + classAttr);
    }
    ele.addContent(seg);
    return seg;
  }
  Element div=OSISUtil.factory().createDiv();
  ele.addContent(div);
  return div;
}",0.3878954607977992
101704,"public Element processTag(Element ele,Attributes attrs){
  String type=attrs.getValue(""String_Node_Str"");
  String value=attrs.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equals(type)) {
    Element w=OSISUtil.factory().createW();
    w.setAttribute(OSISUtil.ATTRIBUTE_W_LEMMA,OSISUtil.LEMMA_STRONGS + value);
    ele.addContent(w);
    return w;
  }
  if (""String_Node_Str"".equals(type)) {
    Element div=OSISUtil.factory().createDiv();
    div.setAttribute(OSISUtil.ATTRIBUTE_DIV_OSISID,""String_Node_Str"" + value);
    ele.addContent(div);
    return div;
  }
  if (""String_Node_Str"".equals(type)) {
    Element div=OSISUtil.factory().createDiv();
    div.setAttribute(OSISUtil.ATTRIBUTE_DIV_OSISID,""String_Node_Str"" + value);
    ele.addContent(div);
    return div;
  }
  DataPolice.report(""String_Node_Str"" + type + ""String_Node_Str""+ value);
  return null;
}","public Element processTag(Element ele,Attributes attrs){
  String type=attrs.getValue(""String_Node_Str"");
  String value=attrs.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equals(type)) {
    List siblings=ele.getContent();
    int size=siblings.size();
    if (size == 0) {
      return null;
    }
    Content lastEle=(Content)siblings.get(size - 1);
    if (lastEle instanceof Text) {
      Element w=OSISUtil.factory().createW();
      w.setAttribute(OSISUtil.ATTRIBUTE_W_LEMMA,OSISUtil.LEMMA_STRONGS + value);
      siblings.set(size - 1,w);
      w.addContent(lastEle);
    }
 else     if (lastEle instanceof Element) {
      Element wEle=(Element)lastEle;
      if (wEle.getName().equals(OSISUtil.OSIS_ELEMENT_W)) {
        StringBuffer buf=new StringBuffer();
        String strongsAttr=wEle.getAttributeValue(OSISUtil.ATTRIBUTE_W_LEMMA);
        if (strongsAttr != null) {
          buf.append(strongsAttr);
          buf.append(' ');
        }
        buf.append(OSISUtil.LEMMA_STRONGS);
        buf.append(value);
        wEle.setAttribute(OSISUtil.ATTRIBUTE_W_LEMMA,buf.toString());
      }
    }
    return null;
  }
  if (""String_Node_Str"".equals(type)) {
    List siblings=ele.getContent();
    int size=siblings.size();
    if (size == 0) {
      return null;
    }
    Content lastEle=(Content)siblings.get(size - 1);
    if (lastEle instanceof Text) {
      Element w=OSISUtil.factory().createW();
      w.setAttribute(OSISUtil.ATTRIBUTE_W_MORPH,OSISUtil.MORPH_ROBINSONS + value);
      siblings.set(size - 1,w);
      w.addContent(lastEle);
    }
 else     if (lastEle instanceof Element) {
      Element wEle=(Element)lastEle;
      if (wEle.getName().equals(OSISUtil.OSIS_ELEMENT_W)) {
        StringBuffer buf=new StringBuffer();
        String strongsAttr=wEle.getAttributeValue(OSISUtil.ATTRIBUTE_W_MORPH);
        if (strongsAttr != null) {
          buf.append(strongsAttr);
          buf.append(' ');
        }
        buf.append(OSISUtil.MORPH_ROBINSONS);
        buf.append(value);
        wEle.setAttribute(OSISUtil.ATTRIBUTE_W_MORPH,buf.toString());
      }
    }
    return null;
  }
  if (""String_Node_Str"".equals(type)) {
    Element div=OSISUtil.factory().createDiv();
    div.setAttribute(OSISUtil.ATTRIBUTE_DIV_OSISID,""String_Node_Str"" + value);
    ele.addContent(div);
    return div;
  }
  DataPolice.report(""String_Node_Str"" + type + ""String_Node_Str""+ value);
  return null;
}",0.3787878787878788
101705,"public Key find(String search) throws BookException {
  checkActive();
  SearchModifier modifier=getSearchModifier();
  Key results=null;
  if (search != null) {
    try {
      Analyzer analyzer=new SimpleAnalyzer();
      Query query=QueryParser.parse(search,LuceneIndex.FIELD_BODY,analyzer);
      Hits hits=searcher.search(query);
      if (modifier != null && modifier.isRanked()) {
        PassageTally tally=new PassageTally();
        results=tally;
        for (int i=0; i < hits.length(); i++) {
          Verse verse=VerseFactory.fromString(hits.doc(i).get(LuceneIndex.FIELD_NAME));
          int score=(int)(hits.score(i) * 100);
          tally.add(verse,score);
        }
      }
 else {
        results=book.createEmptyKeyList();
        for (int i=0; i < hits.length(); i++) {
          Verse verse=VerseFactory.fromString(hits.doc(i).get(LuceneIndex.FIELD_NAME));
          results.addAll(verse);
        }
      }
    }
 catch (    Exception ex) {
      throw new BookException(Msg.SEARCH_FAILED,ex);
    }
 finally {
      Activator.deactivate(this);
    }
  }
  if (results == null) {
    if (modifier != null && modifier.isRanked()) {
      results=new PassageTally();
    }
 else {
      results=book.createEmptyKeyList();
    }
  }
  return results;
}","public Key find(String search) throws BookException {
  checkActive();
  SearchModifier modifier=getSearchModifier();
  Key results=null;
  if (search != null) {
    try {
      Analyzer analyzer=new SimpleAnalyzer();
      Query query=QueryParser.parse(search,LuceneIndex.FIELD_BODY,analyzer);
      Hits hits=searcher.search(query);
      if (modifier != null && modifier.isRanked()) {
        PassageTally tally=new PassageTally();
        results=tally;
        for (int i=0; i < hits.length(); i++) {
          Verse verse=VerseFactory.fromString(hits.doc(i).get(LuceneIndex.FIELD_NAME));
          int score=(int)(hits.score(i) * 100 + 1);
          tally.add(verse,score);
        }
      }
 else {
        results=book.createEmptyKeyList();
        for (int i=0; i < hits.length(); i++) {
          Verse verse=VerseFactory.fromString(hits.doc(i).get(LuceneIndex.FIELD_NAME));
          results.addAll(verse);
        }
      }
    }
 catch (    Exception ex) {
      throw new BookException(Msg.SEARCH_FAILED,ex);
    }
 finally {
      Activator.deactivate(this);
    }
  }
  if (results == null) {
    if (modifier != null && modifier.isRanked()) {
      results=new PassageTally();
    }
 else {
      results=book.createEmptyKeyList();
    }
  }
  return results;
}",0.9984326018808778
101706,"/** 
 * A simplified plain text version of the data in this document with all the markup stripped out.
 * @return The Bible text without markup
 */
public String getPlainText(){
  StringBuffer buffer=new StringBuffer();
  Element osisText=getOsis().getChild(OSISUtil.OSIS_ELEMENT_OSISTEXT);
  List divs=osisText.getChildren(OSISUtil.OSIS_ELEMENT_DIV);
  for (Iterator oit=divs.iterator(); oit.hasNext(); ) {
    Element div=(Element)oit.next();
    Iterator dit=div.getContent().iterator();
    while (dit.hasNext()) {
      Object data=dit.next();
      if (data instanceof Element) {
        Element ele=(Element)data;
        if (ele.getName().equals(OSISUtil.OSIS_ELEMENT_VERSE)) {
          String txt=OSISUtil.getPlainText((Element)data);
          buffer.append(txt);
        }
      }
    }
  }
  return buffer.toString().trim();
}","/** 
 * A simplified plain text version of the data in this document with all the markup stripped out. This is not as simple as it seems. TODO(DMS): push this into OSISUtil
 * @return The text without markup
 */
public String getPlainText(){
  return OSISUtil.getPlainText(getOsis());
}",0.2702222222222222
101707,"/** 
 * A simplified plain text version of the data in this Element with all the markup stripped out.
 * @return The Bible text without markup
 */
public static String getPlainText(Element ele){
  StringBuffer buffer=new StringBuffer();
  List content=ele.getContent();
  for (Iterator it=content.iterator(); it.hasNext(); ) {
    Object next=it.next();
    recurseElement(next,buffer);
  }
  return buffer.toString();
}","/** 
 * A simplified plain text version of the data in this Element with all the markup stripped out.
 * @return The Bible text without markup
 */
public static String getPlainText(Element root){
  StringBuffer buffer=new StringBuffer();
  Element osisText=root.getChild(OSISUtil.OSIS_ELEMENT_OSISTEXT);
  List divs=osisText.getChildren(OSISUtil.OSIS_ELEMENT_DIV);
  for (Iterator oit=divs.iterator(); oit.hasNext(); ) {
    Element div=(Element)oit.next();
    Iterator dit=div.getContent().iterator();
    while (dit.hasNext()) {
      Object data=dit.next();
      if (data instanceof Element) {
        Element ele=(Element)data;
        if (ele.getName().equals(OSISUtil.OSIS_ELEMENT_VERSE)) {
          String txt=OSISUtil.getTextContent((Element)data);
          buffer.append(txt);
        }
      }
    }
  }
  return buffer.toString().trim();
}",0.4960753532182103
101708,"public void endElement(String uri,String localname,String qname){
  depth--;
  if (formatting.isClassic()) {
    emitWhitespace(depth);
  }
  write(getEndTagStart());
  write(decorateTagName(localname));
  if (formatting.isAnalytic()) {
    emitWhitespace(depth);
  }
  write(getTagEnd());
  pendingEndTag=false;
  lookingForChars=false;
}","public void endElement(String uri,String localname,String qname){
  depth--;
  if (pendingEndTag) {
    if (formatting.isAnalytic() && depth > 0) {
      emitWhitespace(depth - 1);
    }
    write(getTagEnd());
  }
  if (formatting.isClassic()) {
    emitWhitespace(depth);
  }
  write(getEndTagStart());
  write(decorateTagName(localname));
  if (formatting.isAnalytic()) {
    emitWhitespace(depth);
  }
  write(getTagEnd());
  pendingEndTag=false;
  lookingForChars=false;
}",0.8308823529411765
101709,"/** 
 * Create a new set of components for the new Job
 */
protected synchronized void addJob(Job job){
  job.addPropertyChangeListener(this);
  int i=findEmptyPosition();
  log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ job.getJobDescription());
  JProgressBar progress=new JProgressBar();
  progress.setStringPainted(true);
  progress.setToolTipText(job.getJobDescription());
  progress.setBorder(null);
  progress.setBackground(getBackground());
  progress.setForeground(getForeground());
  if (font != null) {
    progress.setFont(font);
  }
  JobData jobdata=new JobData(job,i,progress);
  jobs.put(job,jobdata);
  if (i >= positions.size()) {
    positions.add(jobdata);
  }
 else {
    positions.set(i,jobdata);
  }
  this.add(jobdata.getComponent(),i);
  this.revalidate();
}","/** 
 * Create a new set of components for the new Job
 */
protected synchronized void addJob(Job job){
  job.addPropertyChangeListener(this);
  int i=findEmptyPosition();
  log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ job.getJobDescription());
  JProgressBar progress=new JProgressBar();
  progress.setStringPainted(true);
  progress.setToolTipText(job.getJobDescription());
  progress.setBorder(null);
  progress.setBackground(getBackground());
  progress.setForeground(getForeground());
  if (font != null) {
    progress.setFont(font);
  }
  JobData jobdata=new JobData(job,i,progress);
  jobs.put(job,jobdata);
  if (i >= positions.size()) {
    positions.add(jobdata);
  }
 else {
    positions.set(i,jobdata);
  }
  this.add(jobdata.getComponent(),i);
  GuiUtil.refresh(this);
}",0.9785082174462706
101710,"/** 
 * Remove the set of components from the panel
 */
protected synchronized void removeJob(Job job){
  job.addPropertyChangeListener(this);
  JobData jobdata=(JobData)jobs.get(job);
  positions.set(jobdata.getIndex(),null);
  jobs.remove(job);
  log.debug(""String_Node_Str"" + jobdata.getJob().getJobDescription());
  this.remove(jobdata.getComponent());
  this.revalidate();
  jobdata.invalidate();
}","/** 
 * Remove the set of components from the panel
 */
protected synchronized void removeJob(Job job){
  job.addPropertyChangeListener(this);
  JobData jobdata=(JobData)jobs.get(job);
  positions.set(jobdata.getIndex(),null);
  jobs.remove(job);
  log.debug(""String_Node_Str"" + jobdata.getJob().getJobDescription());
  this.remove(jobdata.getComponent());
  GuiUtil.refresh(this);
  jobdata.invalidate();
}",0.9555555555555556
101711,"/** 
 * Create a new set of components for the new Job
 */
protected void addJob(final Job job){
  int i=findEmptyPosition();
  log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ job.getJobDescription());
  JProgressBar progress=new JProgressBar();
  progress.setStringPainted(true);
  progress.setString(""String_Node_Str"");
  progress.setToolTipText(job.getJobDescription());
  progress.setValue(0);
  JLabel label=new JLabel(job.getJobDescription() + ""String_Node_Str"");
  JButton cancel=new JButton(Msg.CANCEL.toString());
  if (!job.isInterruptable()) {
    cancel.setEnabled(false);
  }
  cancel.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      job.interrupt();
    }
  }
);
  jobsPanel.add(label,new GridBagConstraints(0,i,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.BOTH,new Insets(5,5,5,5),0,0));
  jobsPanel.add(progress,new GridBagConstraints(1,i,1,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  jobsPanel.add(cancel,new GridBagConstraints(2,i,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));
  this.revalidate();
  JobData jobdata=new JobData(job,i,label,progress,cancel);
  jobs.put(job,jobdata);
  if (i >= positions.size()) {
    positions.add(jobdata);
  }
 else {
    positions.set(i,jobdata);
  }
}","/** 
 * Create a new set of components for the new Job
 */
protected void addJob(final Job job){
  int i=findEmptyPosition();
  log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ job.getJobDescription());
  JProgressBar progress=new JProgressBar();
  progress.setStringPainted(true);
  progress.setString(""String_Node_Str"");
  progress.setToolTipText(job.getJobDescription());
  progress.setValue(0);
  JLabel label=new JLabel(job.getJobDescription() + ""String_Node_Str"");
  JButton cancel=new JButton(Msg.CANCEL.toString());
  if (!job.isInterruptable()) {
    cancel.setEnabled(false);
  }
  cancel.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      job.interrupt();
    }
  }
);
  jobsPanel.add(label,new GridBagConstraints(0,i,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.BOTH,new Insets(5,5,5,5),0,0));
  jobsPanel.add(progress,new GridBagConstraints(1,i,1,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  jobsPanel.add(cancel,new GridBagConstraints(2,i,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));
  GuiUtil.refresh(this);
  JobData jobdata=new JobData(job,i,label,progress,cancel);
  jobs.put(job,jobdata);
  if (i >= positions.size()) {
    positions.add(jobdata);
  }
 else {
    positions.set(i,jobdata);
  }
}",0.9875730994152048
101712,"/** 
 * Add the ""no jobs"" label
 */
protected void addEmptyLabel(){
  jobsPanel.add(noJobLabel,new GridBagConstraints(0,0,3,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.BOTH,new Insets(5,5,5,5),0,0));
  this.revalidate();
}","/** 
 * Add the ""no jobs"" label
 */
protected void addEmptyLabel(){
  jobsPanel.add(noJobLabel,new GridBagConstraints(0,0,3,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.BOTH,new Insets(5,5,5,5),0,0));
  GuiUtil.refresh(this);
}",0.927038626609442
101713,"/** 
 * Remove the set of components from the panel
 */
protected void removeJob(Job job){
  JobData jobdata=(JobData)jobs.get(job);
  log.debug(""String_Node_Str"" + jobdata.getIndex() + ""String_Node_Str""+ job.getJobDescription());
  positions.set(jobdata.getIndex(),null);
  jobs.remove(job);
  jobsPanel.remove(jobdata.getLabel());
  jobsPanel.remove(jobdata.getProgress());
  jobsPanel.remove(jobdata.getCancel());
  this.revalidate();
  jobdata.invalidate();
}","/** 
 * Remove the set of components from the panel
 */
protected void removeJob(Job job){
  JobData jobdata=(JobData)jobs.get(job);
  log.debug(""String_Node_Str"" + jobdata.getIndex() + ""String_Node_Str""+ job.getJobDescription());
  positions.set(jobdata.getIndex(),null);
  jobs.remove(job);
  jobsPanel.remove(jobdata.getLabel());
  jobsPanel.remove(jobdata.getProgress());
  jobsPanel.remove(jobdata.getCancel());
  GuiUtil.refresh(this);
  jobdata.invalidate();
}",0.9634408602150538
101714,"/** 
 * Get rid of the ""no jobs"" label
 */
protected void removeEmptyLabel(){
  jobsPanel.remove(noJobLabel);
  this.revalidate();
}","/** 
 * Get rid of the ""no jobs"" label
 */
protected void removeEmptyLabel(){
  jobsPanel.remove(noJobLabel);
  GuiUtil.refresh(this);
}",0.8955223880597015
101715,"/** 
 * @param abean The new bean to introspect and edit
 */
public void setBean(Object abean) throws IntrospectionException {
  this.bean=abean;
  removeAll();
  editors.clear();
  int y=0;
  if (bean != null) {
    BeanInfo info=Introspector.getBeanInfo(bean.getClass());
    PropertyDescriptor[] properties=info.getPropertyDescriptors();
    for (int i=0; i < properties.length; i++) {
      PropertyDescriptor property=properties[i];
      if (!property.isHidden() && property.getWriteMethod() != null) {
        JLabel label=new JLabel();
        JTextField text=new JTextField();
        String title=property.getDisplayName();
        title=StringUtil.createTitle(title);
        label.setText(title + ""String_Node_Str"");
        label.setLabelFor(text);
        Method writer=property.getWriteMethod();
        text.getDocument().addDocumentListener(new CustomDocumentListener(text,writer));
        try {
          Method reader=property.getReadMethod();
          Object reply=reader.invoke(bean,null);
          if (reply == null) {
            text.setText(""String_Node_Str"");
          }
 else {
            text.setText(reply.toString());
          }
        }
 catch (        Exception ex) {
          text.setText(Msg.ERROR_READING.toString(ex.getMessage()));
          log.warn(""String_Node_Str"",ex);
        }
        editors.add(text);
        this.add(label,new GridBagConstraints(0,y,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,10,2,2),0,0));
        this.add(text,new GridBagConstraints(1,y,1,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(2,2,2,10),0,0));
        y++;
      }
    }
  }
  invalidate();
  repaint();
}","/** 
 * @param abean The new bean to introspect and edit
 */
public void setBean(Object abean) throws IntrospectionException {
  this.bean=abean;
  removeAll();
  editors.clear();
  int y=0;
  if (bean != null) {
    BeanInfo info=Introspector.getBeanInfo(bean.getClass());
    PropertyDescriptor[] properties=info.getPropertyDescriptors();
    for (int i=0; i < properties.length; i++) {
      PropertyDescriptor property=properties[i];
      if (!property.isHidden() && property.getWriteMethod() != null) {
        JLabel label=new JLabel();
        JTextField text=new JTextField();
        String title=property.getDisplayName();
        title=StringUtil.createTitle(title);
        label.setText(title + ""String_Node_Str"");
        label.setLabelFor(text);
        Method writer=property.getWriteMethod();
        text.getDocument().addDocumentListener(new CustomDocumentListener(text,writer));
        try {
          Method reader=property.getReadMethod();
          Object reply=reader.invoke(bean,null);
          if (reply == null) {
            text.setText(""String_Node_Str"");
          }
 else {
            text.setText(reply.toString());
          }
        }
 catch (        Exception ex) {
          text.setText(Msg.ERROR_READING.toString(ex.getMessage()));
          log.warn(""String_Node_Str"",ex);
        }
        editors.add(text);
        this.add(label,new GridBagConstraints(0,y,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,10,2,2),0,0));
        this.add(text,new GridBagConstraints(1,y,1,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(2,2,2,10),0,0));
        y++;
      }
    }
  }
  GuiUtil.refresh(this);
}",0.9870359457866824
101716,"/** 
 * A more restricted version of pack() for component responding to live component tweaks. Assuming that the window already has a sensible on screen size, do a pack, but don't let the window grow or shrink by more than 10%.
 * @param win The window to be packed
 */
public static void restrainedRePack(Window win){
  Dimension orig=win.getSize();
  Dimension max=new Dimension((int)(orig.width * 1.1),(int)(orig.height * 1.1));
  Dimension min=new Dimension((int)(orig.width / 1.1),(int)(orig.height / 1.1));
  win.pack();
  if (win.getSize().width > max.width) {
    win.setSize(max.width,win.getSize().height);
  }
  if (win.getSize().height > max.height) {
    win.setSize(win.getSize().width,max.height);
  }
  if (win.getSize().width < min.width) {
    win.setSize(min.width,win.getSize().height);
  }
  if (win.getSize().height < min.height) {
    win.setSize(win.getSize().width,min.height);
  }
  Dimension screenDim=Toolkit.getDefaultToolkit().getScreenSize();
  if (screenDim.width < win.getSize().width) {
    win.setSize(screenDim.width,win.getSize().height);
  }
  if (screenDim.height < win.getSize().height) {
    win.setSize(win.getSize().width,screenDim.height);
  }
  win.invalidate();
  win.validate();
}","/** 
 * A more restricted version of pack() for component responding to live component tweaks. Assuming that the window already has a sensible on screen size, do a pack, but don't let the window grow or shrink by more than 10%.
 * @param win The window to be packed
 */
public static void restrainedRePack(Window win){
  Dimension orig=win.getSize();
  Dimension max=new Dimension((int)(orig.width * 1.1),(int)(orig.height * 1.1));
  Dimension min=new Dimension((int)(orig.width / 1.1),(int)(orig.height / 1.1));
  win.pack();
  if (win.getSize().width > max.width) {
    win.setSize(max.width,win.getSize().height);
  }
  if (win.getSize().height > max.height) {
    win.setSize(win.getSize().width,max.height);
  }
  if (win.getSize().width < min.width) {
    win.setSize(min.width,win.getSize().height);
  }
  if (win.getSize().height < min.height) {
    win.setSize(win.getSize().width,min.height);
  }
  Dimension screenDim=Toolkit.getDefaultToolkit().getScreenSize();
  if (screenDim.width < win.getSize().width) {
    win.setSize(screenDim.width,win.getSize().height);
  }
  if (screenDim.height < win.getSize().height) {
    win.setSize(win.getSize().width,screenDim.height);
  }
  refresh(win);
}",0.981907894736842
101717,"/** 
 * A more restricted version of pack() when the component is being pack()ed for the first time. Since this is a 'first time only' pack we are only concerned with screen size, and not any growths/shrinkages like restrainedRePack(Window).
 * @param win The window to be packed
 * @param maxx The maximum fraction (0.0 to 1.0) of the screen to be takenup horizontally (-1 means no restrictions to the horizontal alterations)
 * @param maxy The maximum fraction (0.0 to 1.0) of the screen to be takenup vertically (-1 means no restrictions to the vertical alterations)
 * @see GuiUtil#restrainedRePack(Window)
 */
public static void restrainedPack(Window win,float maxx,float maxy){
  win.pack();
  Dimension screen_dim=Toolkit.getDefaultToolkit().getScreenSize();
  if (maxx != -1 && win.getSize().width > (screen_dim.width * maxx)) {
    win.setSize((int)(screen_dim.width * maxx),win.getSize().height);
  }
  if (maxy != -1 && win.getSize().height > (screen_dim.height * maxy)) {
    win.setSize(win.getSize().width,(int)(screen_dim.height * maxy));
  }
  win.invalidate();
  win.validate();
}","/** 
 * A more restricted version of pack() when the component is being pack()ed for the first time. Since this is a 'first time only' pack we are only concerned with screen size, and not any growths/shrinkages like restrainedRePack(Window).
 * @param win The window to be packed
 * @param maxx The maximum fraction (0.0 to 1.0) of the screen to be takenup horizontally (-1 means no restrictions to the horizontal alterations)
 * @param maxy The maximum fraction (0.0 to 1.0) of the screen to be takenup vertically (-1 means no restrictions to the vertical alterations)
 * @see GuiUtil#restrainedRePack(Window)
 */
public static void restrainedPack(Window win,float maxx,float maxy){
  win.pack();
  Dimension screen_dim=Toolkit.getDefaultToolkit().getScreenSize();
  if (maxx != -1 && win.getSize().width > (screen_dim.width * maxx)) {
    win.setSize((int)(screen_dim.width * maxx),win.getSize().height);
  }
  if (maxy != -1 && win.getSize().height > (screen_dim.height * maxy)) {
    win.setSize(win.getSize().width,(int)(screen_dim.height * maxy));
  }
  refresh(win);
}",0.9797421731123388
101718,"/** 
 * Convenience method to generate a Vector of SearchWords
 * @param sought The text to parse
 * @param commands The Hashtable of SearchWords to select from
 * @return A List of selected SearchWords
 */
public static List tokenize(String sought,Map commands) throws BookException {
  List output=new ArrayList();
  String commandChars=getSingleCharWords(commands);
  char firstChar=sought.charAt(0);
  int currentType=charType(firstChar,commandChars);
  int startIndex=0;
  if (sought.length() > 0 && (firstChar == '[' || firstChar == ':')) {
    sought=' ' + sought;
  }
  for (int i=1; i <= sought.length(); i++) {
    if (i != sought.length() && sought.charAt(i) == '[') {
      int end=sought.indexOf(']',i);
      if (end == -1) {
        throw new BookException(Msg.UNMATCHED_ESCAPE);
      }
      addWord(output,commands,""String_Node_Str"");
      addWord(output,commands,sought.substring(i + 1,end));
      addWord(output,commands,""String_Node_Str"");
      currentType=CHAR_SPACE;
      i=end + 1;
    }
    if (i != sought.length() && sought.indexOf(""String_Node_Str"",i) == i) {
      int end=sought.indexOf(""String_Node_Str"",i + 2);
      if (end == -1) {
        addWord(output,commands,sought.substring(i + 2));
        i=sought.length();
      }
 else {
        addWord(output,commands,sought.substring(i + 2,end));
        i=end + 2;
      }
      currentType=CHAR_SPACE;
    }
    if (i == sought.length()) {
      if (currentType != CHAR_SPACE) {
        addWord(output,commands,sought.substring(startIndex));
      }
    }
 else {
      int new_type=charType(sought.charAt(i),commandChars);
      if (currentType != new_type || new_type == CHAR_COMMAND) {
        if (currentType != CHAR_SPACE) {
          addWord(output,commands,sought.substring(startIndex,i));
        }
        startIndex=i;
        currentType=charType(sought.charAt(i),commandChars);
      }
    }
  }
  return output;
}","/** 
 * Convenience method to generate a Vector of SearchWords
 * @param sought The text to parse
 * @param commands The Hashtable of SearchWords to select from
 * @return A List of selected SearchWords
 */
public static List tokenize(String sought,Map commands) throws BookException {
  List output=new ArrayList();
  if (sought == null || sought.length() == 0) {
    return output;
  }
  String commandChars=getSingleCharWords(commands);
  char firstChar=sought.charAt(0);
  int currentType=charType(firstChar,commandChars);
  int startIndex=0;
  if (sought.length() > 0 && (firstChar == '[' || firstChar == ':')) {
    sought=' ' + sought;
  }
  for (int i=1; i <= sought.length(); i++) {
    if (i != sought.length() && sought.charAt(i) == '[') {
      int end=sought.indexOf(']',i);
      if (end == -1) {
        throw new BookException(Msg.UNMATCHED_ESCAPE);
      }
      addWord(output,commands,""String_Node_Str"");
      addWord(output,commands,sought.substring(i + 1,end));
      addWord(output,commands,""String_Node_Str"");
      currentType=CHAR_SPACE;
      i=end + 1;
    }
    if (i != sought.length() && sought.indexOf(""String_Node_Str"",i) == i) {
      int end=sought.indexOf(""String_Node_Str"",i + 2);
      if (end == -1) {
        addWord(output,commands,sought.substring(i + 2));
        i=sought.length();
      }
 else {
        addWord(output,commands,sought.substring(i + 2,end));
        i=end + 2;
      }
      currentType=CHAR_SPACE;
    }
    if (i == sought.length()) {
      if (currentType != CHAR_SPACE) {
        addWord(output,commands,sought.substring(startIndex));
      }
    }
 else {
      int new_type=charType(sought.charAt(i),commandChars);
      if (currentType != new_type || new_type == CHAR_COMMAND) {
        if (currentType != CHAR_SPACE) {
          addWord(output,commands,sought.substring(startIndex,i));
        }
        startIndex=i;
        currentType=charType(sought.charAt(i),commandChars);
      }
    }
  }
  return output;
}",0.9817902026160554
101719,"/** 
 * Convenience method to generate a Vector of SearchWords
 * @param sought The text to parse
 * @param commands The Hashtable of SearchWords to select from
 * @return A List of selected SearchWords
 */
public static List tokenize(String sought,Map commands) throws BookException {
  List output=new ArrayList();
  String commandChars=getSingleCharWords(commands);
  char firstChar=sought.charAt(0);
  int currentType=charType(firstChar,commandChars);
  int startIndex=0;
  if (sought.length() > 0 && (firstChar == '[' || firstChar == ':')) {
    sought=' ' + sought;
  }
  for (int i=1; i <= sought.length(); i++) {
    if (i != sought.length() && sought.charAt(i) == '[') {
      int end=sought.indexOf(']',i);
      if (end == -1) {
        throw new BookException(Msg.UNMATCHED_ESCAPE);
      }
      addWord(output,commands,""String_Node_Str"");
      addWord(output,commands,sought.substring(i + 1,end));
      addWord(output,commands,""String_Node_Str"");
      currentType=CHAR_SPACE;
      i=end + 1;
    }
    if (i < sought.length() - 4 && sought.indexOf(""String_Node_Str"",i) == i) {
      int end=sought.indexOf(""String_Node_Str"",i + 2);
      if (end == -1) {
        addWord(output,commands,sought.substring(i + 2));
        i=sought.length();
      }
 else {
        addWord(output,commands,sought.substring(i + 1,end));
        i=end + 2;
      }
      currentType=CHAR_SPACE;
    }
    if (i == sought.length()) {
      if (currentType != CHAR_SPACE) {
        addWord(output,commands,sought.substring(startIndex));
      }
    }
 else {
      int new_type=charType(sought.charAt(i),commandChars);
      if (currentType != new_type || new_type == CHAR_COMMAND) {
        if (currentType != CHAR_SPACE) {
          addWord(output,commands,sought.substring(startIndex,i));
        }
        startIndex=i;
        currentType=charType(sought.charAt(i),commandChars);
      }
    }
  }
  return output;
}","/** 
 * Convenience method to generate a Vector of SearchWords
 * @param sought The text to parse
 * @param commands The Hashtable of SearchWords to select from
 * @return A List of selected SearchWords
 */
public static List tokenize(String sought,Map commands) throws BookException {
  List output=new ArrayList();
  String commandChars=getSingleCharWords(commands);
  char firstChar=sought.charAt(0);
  int currentType=charType(firstChar,commandChars);
  int startIndex=0;
  if (sought.length() > 0 && (firstChar == '[' || firstChar == ':')) {
    sought=' ' + sought;
  }
  for (int i=1; i <= sought.length(); i++) {
    if (i != sought.length() && sought.charAt(i) == '[') {
      int end=sought.indexOf(']',i);
      if (end == -1) {
        throw new BookException(Msg.UNMATCHED_ESCAPE);
      }
      addWord(output,commands,""String_Node_Str"");
      addWord(output,commands,sought.substring(i + 1,end));
      addWord(output,commands,""String_Node_Str"");
      currentType=CHAR_SPACE;
      i=end + 1;
    }
    if (i != sought.length() && sought.indexOf(""String_Node_Str"",i) == i) {
      int end=sought.indexOf(""String_Node_Str"",i + 2);
      if (end == -1) {
        addWord(output,commands,sought.substring(i + 2));
        i=sought.length();
      }
 else {
        addWord(output,commands,sought.substring(i + 2,end));
        i=end + 2;
      }
      currentType=CHAR_SPACE;
    }
    if (i == sought.length()) {
      if (currentType != CHAR_SPACE) {
        addWord(output,commands,sought.substring(startIndex));
      }
    }
 else {
      int new_type=charType(sought.charAt(i),commandChars);
      if (currentType != new_type || new_type == CHAR_COMMAND) {
        if (currentType != CHAR_SPACE) {
          addWord(output,commands,sought.substring(startIndex,i));
        }
        startIndex=i;
        currentType=charType(sought.charAt(i),commandChars);
      }
    }
  }
  return output;
}",0.9976507439310884
101720,"/** 
 * Turn the string into a list of tags in the order that they appear in the original string.
 */
private List parseTags(String remains){
  List taglist=new ArrayList();
  while (true) {
    int ltpos=remains.indexOf('<');
    int gtpos=remains.indexOf('>');
    if (ltpos == -1 && gtpos == -1) {
      taglist.add(createText(remains));
      remains=null;
      break;
    }
    if (ltpos == -1 || gtpos == -1) {
      DataPolice.report(""String_Node_Str"" + remains);
      taglist.add(createText(remains));
      remains=null;
      break;
    }
    if (ltpos > gtpos) {
      DataPolice.report(""String_Node_Str"" + remains);
      taglist.add(createText(remains));
      remains=null;
      break;
    }
    String start=remains.substring(0,ltpos);
    int strLen=start.length();
    if (strLen > 0) {
      int beginIndex=0;
      boolean inSepStr=SEPARATORS.indexOf(start.charAt(0)) >= 0;
      for (int i=1; inSepStr && i < strLen; i++) {
        char currentChar=start.charAt(i);
        if (!(SEPARATORS.indexOf(currentChar) >= 0)) {
          taglist.add(createText(start.substring(beginIndex,i)));
          beginIndex=i;
          inSepStr=false;
        }
      }
      if (beginIndex < strLen) {
        taglist.add(createText(start.substring(beginIndex)));
      }
    }
    String tag=remains.substring(ltpos + 1,gtpos);
    if (tag.length() > 0) {
      Tag reply=null;
      for (int i=0; i < BUILDERS.length; i++) {
        reply=BUILDERS[i].createTag(tag);
        if (reply != null) {
          break;
        }
      }
      if (reply == null) {
        log.warn(""String_Node_Str"" + tag + ""String_Node_Str"");
      }
      taglist.add(reply);
    }
    remains=remains.substring(gtpos + 1);
  }
  return taglist;
}","/** 
 * Turn the string into a list of tags in the order that they appear in the original string.
 */
private List parseTags(String remains){
  List taglist=new ArrayList();
  while (true) {
    int ltpos=remains.indexOf('<');
    int gtpos=remains.indexOf('>');
    if (ltpos == -1 && gtpos == -1) {
      taglist.add(createText(remains));
      remains=null;
      break;
    }
    if (ltpos == -1 || gtpos == -1) {
      DataPolice.report(""String_Node_Str"" + remains);
      taglist.add(createText(remains));
      remains=null;
      break;
    }
    if (ltpos > gtpos) {
      DataPolice.report(""String_Node_Str"" + remains);
      taglist.add(createText(remains));
      remains=null;
      break;
    }
    String start=remains.substring(0,ltpos);
    int strLen=start.length();
    if (strLen > 0) {
      int beginIndex=0;
      boolean inSepStr=SEPARATORS.indexOf(start.charAt(0)) >= 0;
      for (int i=1; inSepStr && i < strLen; i++) {
        char currentChar=start.charAt(i);
        if (!(SEPARATORS.indexOf(currentChar) >= 0)) {
          taglist.add(createText(start.substring(beginIndex,i)));
          beginIndex=i;
          inSepStr=false;
        }
      }
      if (beginIndex < strLen) {
        taglist.add(createText(start.substring(beginIndex)));
      }
    }
    String tag=remains.substring(ltpos + 1,gtpos);
    if (tag.length() > 0) {
      Tag reply=null;
      for (int i=0; i < BUILDERS.length; i++) {
        reply=BUILDERS[i].createTag(tag);
        if (reply != null) {
          break;
        }
      }
      if (reply == null) {
        log.warn(""String_Node_Str"" + tag + ""String_Node_Str"");
      }
 else {
        taglist.add(reply);
      }
    }
    remains=remains.substring(gtpos + 1);
  }
  return taglist;
}",0.9948453608247424
101721,"/** 
 * Generate an index to use, telling the job about progress as you go.
 * @throws BookException If we fail to read the index files
 */
public LuceneIndex(Book book,URL storage,boolean create) throws BookException {
  assert create;
  this.book=book;
  File finalPath=null;
  try {
    finalPath=NetUtil.getAsFile(storage);
    this.path=finalPath.getCanonicalPath();
  }
 catch (  IOException ex) {
    throw new BookException(Msg.LUCENE_INIT,ex);
  }
  Job job=JobManager.createJob(Msg.INDEX_START.toString(),Thread.currentThread(),false);
  IndexStatus finalStatus=IndexStatus.UNDONE;
  try {
synchronized (CREATING) {
      book.setIndexStatus(IndexStatus.CREATING);
      File tempPath=new File(path + '.' + IndexStatus.CREATING.toString());
      IndexWriter writer=new IndexWriter(tempPath.getCanonicalPath(),new SimpleAnalyzer(),true);
      generateSearchIndexImpl(job,writer,book.getGlobalKeyList());
      job.setProgress(95,Msg.OPTIMIZING.toString());
      writer.optimize();
      writer.close();
      job.setInterruptable(false);
      if (!job.isFinished()) {
        tempPath.renameTo(finalPath);
      }
      if (finalPath.exists()) {
        finalStatus=IndexStatus.DONE;
      }
    }
  }
 catch (  Exception ex) {
    job.ignoreTimings();
    throw new BookException(Msg.LUCENE_INIT,ex);
  }
 finally {
    book.setIndexStatus(finalStatus);
    job.done();
  }
}","/** 
 * Generate an index to use, telling the job about progress as you go.
 * @throws BookException If we fail to read the index files
 */
public LuceneIndex(Book book,URL storage,boolean create) throws BookException {
  assert create;
  this.book=book;
  File finalPath=null;
  try {
    finalPath=NetUtil.getAsFile(storage);
    this.path=finalPath.getCanonicalPath();
  }
 catch (  IOException ex) {
    throw new BookException(Msg.LUCENE_INIT,ex);
  }
  Job job=JobManager.createJob(Msg.INDEX_START.toString(),Thread.currentThread(),false);
  IndexStatus finalStatus=IndexStatus.UNDONE;
  try {
synchronized (CREATING) {
      book.setIndexStatus(IndexStatus.CREATING);
      File tempPath=new File(path + '.' + IndexStatus.CREATING.toString());
      IndexWriter writer=new IndexWriter(tempPath.getCanonicalPath(),new SimpleAnalyzer(),true);
      List errors=new ArrayList();
      generateSearchIndexImpl(job,errors,writer,book.getGlobalKeyList());
      job.setProgress(95,Msg.OPTIMIZING.toString());
      writer.optimize();
      writer.close();
      job.setInterruptable(false);
      if (!job.isFinished()) {
        tempPath.renameTo(finalPath);
      }
      if (finalPath.exists()) {
        finalStatus=IndexStatus.DONE;
      }
      if (errors.size() > 0) {
        StringBuffer buf=new StringBuffer();
        Iterator iter=errors.iterator();
        while (iter.hasNext()) {
          buf.append(iter.next());
          buf.append('\n');
        }
        Reporter.informUser(this,Msg.BAD_VERSE,buf);
      }
    }
  }
 catch (  Exception ex) {
    job.ignoreTimings();
    throw new BookException(Msg.LUCENE_INIT,ex);
  }
 finally {
    book.setIndexStatus(finalStatus);
    job.done();
  }
}",0.8949742268041238
101722,"/** 
 * Dig down into a Key indexing as we go.
 */
private void generateSearchIndexImpl(Job job,IndexWriter writer,Key key) throws BookException, IOException {
}","/** 
 * Dig down into a Key indexing as we go.
 */
private void generateSearchIndexImpl(Job job,List errors,IndexWriter writer,Key key) throws BookException, IOException {
}",0.9640718562874252
101723,"/** 
 * Get the full name of a book (e.g. ""Genesis""). Altered by the case setting (see setBookCase())
 * @param book The book number (1-66)
 * @return The full name of the book
 * @exception NoSuchVerseException If the book number is not valid
 */
public static final String getLongBookName(int book) throws NoSuchVerseException {
  try {
    if (bookCase.equals(CaseType.LOWER)) {
      return fullBooksLower[book - 1];
    }
    if (bookCase.equals(CaseType.UPPER)) {
      return fullBooksUpper[book - 1];
    }
    return fullBooks[book - 1];
  }
 catch (  ArrayIndexOutOfBoundsException ex) {
    throw new NoSuchVerseException(Msg.BOOKS_BOOK,new Object[]{new Integer(book)});
  }
}","/** 
 * Get the full name of a book (e.g. ""Genesis""). Altered by the case setting (see setBookCase())
 * @param book The book number (1-66)
 * @return The full name of the book
 * @exception NoSuchVerseException If the book number is not valid
 */
public static final String getLongBookName(int book) throws NoSuchVerseException {
  try {
    if (bookCase == CaseType.LOWER) {
      return fullBooksLower[book - 1];
    }
    if (bookCase == CaseType.UPPER) {
      return fullBooksUpper[book - 1];
    }
    return fullBooks[book - 1];
  }
 catch (  ArrayIndexOutOfBoundsException ex) {
    throw new NoSuchVerseException(Msg.BOOKS_BOOK,new Object[]{new Integer(book)});
  }
}",0.9809384164222874
101724,"/** 
 * All LucidExceptions are constructed with references to resources in an i18n properties file. This version allows us to add parameters
 * @param msg The resource id to read
 * @param params An array of parameters
 */
public LucidException(MsgBase msg,Throwable cause,Object[] params){
  super(msg.toString(),cause);
  this.deprecated=false;
  this.params=(Object[])params.clone();
}","/** 
 * All LucidExceptions are constructed with references to resources in an i18n properties file. This version allows us to add parameters
 * @param msg The resource id to read
 * @param params An array of parameters
 */
public LucidException(MsgBase msg,Throwable cause,Object[] params){
  super(msg.toString(),cause);
  this.deprecated=false;
  if (params != null) {
    this.params=(Object[])params.clone();
  }
 else {
    this.params=null;
  }
}",0.9239904988123516
101725,"/** 
 * Gets a short HTML description of an Exception for display in a window
 */
public static String getHTMLDescription(Throwable ex){
  StringBuffer retcode=new StringBuffer();
  String msg=ex.getMessage();
  if (msg == null || msg.equals(""String_Node_Str"")) {
    msg=Msg.NO_DESC.toString();
  }
  String orig=msg;
  msg=orig.replaceAll(""String_Node_Str"",""String_Node_Str"");
  retcode.append(""String_Node_Str"");
  retcode.append(msg);
  Throwable nex=ex.getCause();
  if (nex != null) {
    retcode.append(""String_Node_Str"" + Msg.CAUSED_BY + ""String_Node_Str"");
    retcode.append(getHTMLDescription(nex));
  }
  return retcode.toString();
}","/** 
 * Gets a short HTML description of an Exception for display in a window
 */
public static String getHTMLDescription(Throwable ex){
  StringBuffer retcode=new StringBuffer();
  String msg=ex.getMessage();
  if (msg == null || msg.equals(""String_Node_Str"")) {
    msg=Msg.NO_DESC.toString();
  }
  String orig=XMLUtil.escape(msg);
  msg=orig.replaceAll(""String_Node_Str"",""String_Node_Str"");
  retcode.append(""String_Node_Str"");
  retcode.append(msg);
  Throwable nex=ex.getCause();
  if (nex != null) {
    retcode.append(""String_Node_Str"" + Msg.CAUSED_BY + ""String_Node_Str"");
    retcode.append(getHTMLDescription(nex));
  }
  return retcode.toString();
}",0.987748851454824
101726,"/** 
 * Convenience method to generate a Vector of SearchWords
 * @param sought The text to parse
 * @param commands The Hashtable of SearchWords to select from
 * @return A List of selected SearchWords
 */
public static List tokenize(String sought,Map commands) throws BookException {
  List output=new ArrayList();
  String commandChars=getSingleCharWords(commands);
  int currentType=charType(sought.charAt(0),commandChars);
  int startIndex=0;
  if (sought.length() > 0 && sought.charAt(0) == '[') {
    sought=""String_Node_Str"" + sought;
  }
  for (int i=1; i <= sought.length(); i++) {
    if (i != sought.length() && sought.charAt(i) == '[') {
      int end=sought.indexOf(']',i);
      if (end == -1) {
        throw new BookException(Msg.UNMATCHED_ESCAPE);
      }
      addWord(output,commands,""String_Node_Str"");
      addWord(output,commands,sought.substring(i + 1,end));
      addWord(output,commands,""String_Node_Str"");
      currentType=CHAR_SPACE;
      i=end + 1;
    }
    if (i < sought.length() - 4 && sought.indexOf(""String_Node_Str"",i) != -1) {
      int end=sought.indexOf(""String_Node_Str"",i + 2);
      if (end == -1) {
        addWord(output,commands,sought.substring(i + 1));
        i=sought.length();
      }
 else {
        addWord(output,commands,sought.substring(i + 1,end));
        i=end + 2;
      }
      currentType=CHAR_SPACE;
    }
    if (i == sought.length()) {
      if (currentType != CHAR_SPACE) {
        addWord(output,commands,sought.substring(startIndex));
      }
    }
 else {
      int new_type=charType(sought.charAt(i),commandChars);
      if (currentType != new_type || new_type == CHAR_COMMAND) {
        if (currentType != CHAR_SPACE) {
          addWord(output,commands,sought.substring(startIndex,i));
        }
        startIndex=i;
        currentType=charType(sought.charAt(i),commandChars);
      }
    }
  }
  return output;
}","/** 
 * Convenience method to generate a Vector of SearchWords
 * @param sought The text to parse
 * @param commands The Hashtable of SearchWords to select from
 * @return A List of selected SearchWords
 */
public static List tokenize(String sought,Map commands) throws BookException {
  List output=new ArrayList();
  String commandChars=getSingleCharWords(commands);
  char firstChar=sought.charAt(0);
  int currentType=charType(firstChar,commandChars);
  int startIndex=0;
  if (sought.length() > 0 && (firstChar == '[' || firstChar == ':')) {
    sought=' ' + sought;
  }
  for (int i=1; i <= sought.length(); i++) {
    if (i != sought.length() && sought.charAt(i) == '[') {
      int end=sought.indexOf(']',i);
      if (end == -1) {
        throw new BookException(Msg.UNMATCHED_ESCAPE);
      }
      addWord(output,commands,""String_Node_Str"");
      addWord(output,commands,sought.substring(i + 1,end));
      addWord(output,commands,""String_Node_Str"");
      currentType=CHAR_SPACE;
      i=end + 1;
    }
    if (i < sought.length() - 4 && sought.indexOf(""String_Node_Str"",i) == i) {
      int end=sought.indexOf(""String_Node_Str"",i + 2);
      if (end == -1) {
        addWord(output,commands,sought.substring(i + 2));
        i=sought.length();
      }
 else {
        addWord(output,commands,sought.substring(i + 1,end));
        i=end + 2;
      }
      currentType=CHAR_SPACE;
    }
    if (i == sought.length()) {
      if (currentType != CHAR_SPACE) {
        addWord(output,commands,sought.substring(startIndex));
      }
    }
 else {
      int new_type=charType(sought.charAt(i),commandChars);
      if (currentType != new_type || new_type == CHAR_COMMAND) {
        if (currentType != CHAR_SPACE) {
          addWord(output,commands,sought.substring(startIndex,i));
        }
        startIndex=i;
        currentType=charType(sought.charAt(i),commandChars);
      }
    }
  }
  return output;
}",0.906463478717814
101727,"public void endElement(String uri,String localname,String qname){
  depth--;
  if (pendingEndTag) {
    if (formatting.isAnalytic() && depth > 0) {
      emitWhitespace(depth - 1);
    }
    if (localname.equalsIgnoreCase(""String_Node_Str"")) {
      write(getTagEnd());
    }
 else {
      write(getEmptyTagEnd());
    }
  }
 else {
    if (formatting.isClassic()) {
      emitWhitespace(depth);
    }
    write(getEndTagStart());
    write(decorateTagName(localname));
    if (formatting.isAnalytic()) {
      emitWhitespace(depth);
    }
    write(getTagEnd());
  }
  pendingEndTag=false;
  lookingForChars=false;
}","public void endElement(String uri,String localname,String qname){
  depth--;
  if (formatting.isClassic()) {
    emitWhitespace(depth);
  }
  write(getEndTagStart());
  write(decorateTagName(localname));
  if (formatting.isAnalytic()) {
    emitWhitespace(depth);
  }
  write(getTagEnd());
  pendingEndTag=false;
  lookingForChars=false;
}",0.2615062761506276
101728,"protected void download(Job job,String dir,String file,URL dest) throws InstallException {
  try {
    URL url=new URL(""String_Node_Str"" + host + dir+ '/'+ file);
    copy(job,dest,url);
  }
 catch (  IOException ex) {
    throw new InstallException(Msg.UNKNOWN_ERROR,ex);
  }
}","protected void download(Job job,String dir,String file,URL dest) throws InstallException {
  try {
    URL url=new URL(""String_Node_Str"" + host + dir+ '/'+ file);
    copy(job,url,dest);
  }
 catch (  IOException ex) {
    throw new InstallException(Msg.UNKNOWN_ERROR,ex);
  }
}",0.9820143884892086
101729,"/** 
 */
public void save(){
}","/** 
 * Save all properties to the user's local area. Uses the same property name so as to override it.
 */
public void save(){
  Properties props=new Properties();
  for (Iterator it=installers.keySet().iterator(); it.hasNext(); ) {
    String name=(String)it.next();
    Installer installer=(Installer)installers.get(name);
    props.setProperty(name,installer.getURL());
  }
  URL outputURL=Project.instance().getWritablePropertiesURL(getClass().getName());
  try {
    OutputStream out=NetUtil.getOutputStream(outputURL);
    props.store(out,""String_Node_Str"");
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}",0.0898203592814371
101730,"/** 
 * Load the cached index file into memory
 */
private void loadCachedIndex() throws InstallException {
  entries.clear();
  URL cache=getCachedIndexFile();
  if (!NetUtil.isFile(cache)) {
    reloadBookList();
  }
  try {
    InputStream in=cache.openStream();
    GZIPInputStream gin=new GZIPInputStream(in);
    TarInputStream tin=new TarInputStream(gin);
    while (true) {
      TarEntry entry=tin.getNextEntry();
      if (entry == null) {
        break;
      }
      String internal=entry.getName();
      if (!entry.isDirectory()) {
        try {
          int size=(int)entry.getSize();
          byte[] buffer=new byte[size];
          tin.read(buffer);
          if (internal.endsWith(SwordConstants.EXTENSION_CONF)) {
            internal=internal.substring(0,internal.length() - 5);
          }
          if (internal.startsWith(SwordConstants.DIR_CONF + '/')) {
            internal=internal.substring(7);
          }
          Reader rin=new InputStreamReader(new ByteArrayInputStream(buffer));
          SwordBookMetaData sbmd=new SwordBookMetaData(rin,internal);
          if (sbmd.isSupported()) {
            entries.put(sbmd.getName(),sbmd);
          }
        }
 catch (        Exception ex) {
          log.warn(""String_Node_Str"" + internal,ex);
        }
      }
    }
    IOUtil.close(tin);
    IOUtil.close(gin);
    IOUtil.close(in);
    loaded=true;
  }
 catch (  IOException ex) {
    throw new InstallException(Msg.CACHE_ERROR,ex);
  }
}","/** 
 * Load the cached index file into memory
 */
private void loadCachedIndex() throws InstallException {
  BookDriver fake=new SwordBookDriver();
  entries.clear();
  URL cache=getCachedIndexFile();
  if (!NetUtil.isFile(cache)) {
    reloadBookList();
  }
  try {
    InputStream in=cache.openStream();
    GZIPInputStream gin=new GZIPInputStream(in);
    TarInputStream tin=new TarInputStream(gin);
    while (true) {
      TarEntry entry=tin.getNextEntry();
      if (entry == null) {
        break;
      }
      String internal=entry.getName();
      if (!entry.isDirectory()) {
        try {
          int size=(int)entry.getSize();
          byte[] buffer=new byte[size];
          tin.read(buffer);
          if (internal.endsWith(SwordConstants.EXTENSION_CONF)) {
            internal=internal.substring(0,internal.length() - 5);
          }
          if (internal.startsWith(SwordConstants.DIR_CONF + '/')) {
            internal=internal.substring(7);
          }
          Reader rin=new InputStreamReader(new ByteArrayInputStream(buffer));
          SwordBookMetaData sbmd=new SwordBookMetaData(rin,internal);
          sbmd.setDriver(fake);
          if (sbmd.isSupported()) {
            entries.put(sbmd.getName(),sbmd);
          }
        }
 catch (        Exception ex) {
          log.warn(""String_Node_Str"" + internal,ex);
        }
      }
    }
    IOUtil.close(tin);
    IOUtil.close(gin);
    IOUtil.close(in);
    loaded=true;
  }
 catch (  IOException ex) {
    throw new InstallException(Msg.CACHE_ERROR,ex);
  }
}",0.9758037785880014
101731,"/** 
 * @param driver The driver to set.
 */
protected void setDriver(BookDriver driver){
  this.driver=driver;
}","/** 
 * This setter is public because access is needed from *SwordInstallers as well as the normal sword drivers. Where is C++ friend when you need it!
 * @param driver The driver to set.
 */
public void setDriver(BookDriver driver){
  this.driver=driver;
}",0.5675675675675675
101732,"/** 
 * Unpack a zip file to a given directory
 * @param file The zip file to download
 * @param destdir The directory to unpack up
 * @throws IOException If there is an file error
 */
public static void unpackZip(File file,URL destdir) throws IOException {
  byte[] dbuf=new byte[4096];
  ZipFile zf=new ZipFile(file);
  Enumeration entries=zf.entries();
  while (entries.hasMoreElements()) {
    ZipEntry entry=(ZipEntry)entries.nextElement();
    String entrypath=entry.getName();
    String filename=entrypath.substring(entrypath.lastIndexOf('/') + 1);
    URL child=NetUtil.lengthenURL(destdir,filename);
    OutputStream dataOut=NetUtil.getOutputStream(child);
    InputStream dataIn=zf.getInputStream(entry);
    while (true) {
      int count=dataIn.read(dbuf);
      if (count == -1) {
        break;
      }
      dataOut.write(dbuf,0,count);
    }
    dataOut.close();
  }
}","/** 
 * Unpack a zip file to a given directory. Honor the paths as given in the zip file.
 * @param file The zip file to download
 * @param destdir The directory to unpack up
 * @throws IOException If there is an file error
 */
public static void unpackZip(File file,File destdir) throws IOException {
  byte[] dbuf=new byte[4096];
  ZipFile zf=new ZipFile(file);
  Enumeration entries=zf.entries();
  while (entries.hasMoreElements()) {
    ZipEntry entry=(ZipEntry)entries.nextElement();
    String entrypath=entry.getName();
    File entryFile=new File(destdir,entrypath);
    File parentDir=entryFile.getParentFile();
    if (!parentDir.isDirectory()) {
      parentDir.mkdirs();
      if (!parentDir.isDirectory()) {
        throw new MalformedURLException(Msg.CREATE_DIR_FAIL.toString(parentDir.toString()));
      }
    }
    URL child=NetUtil.getURL(entryFile);
    OutputStream dataOut=NetUtil.getOutputStream(child);
    InputStream dataIn=zf.getInputStream(entry);
    while (true) {
      int count=dataIn.read(dbuf);
      if (count == -1) {
        break;
      }
      dataOut.write(dbuf,0,count);
    }
    dataOut.close();
  }
}",0.761576354679803
101733,"public boolean isNewer(BookMetaData bmd){
  URL local=toLocalURL(bmd);
  SwordBookMetaData sbmd=(SwordBookMetaData)bmd;
  URL conf=NetUtil.lengthenURL(local,sbmd.getDiskName() + SwordConstants.EXTENSION_CONF);
  URL remote=toRemoteURL(bmd);
  return NetUtil.isNewer(remote,conf);
}","public boolean isNewer(BookMetaData bmd){
}",0.2654320987654321
101734,"/** 
 * The URL for the cached index file for this installer
 */
protected URL getCachedIndexFile() throws InstallException {
  try {
    URL scratchdir=Project.instance().getTempScratchSpace(getTempFileExtension(host,directory),false);
    return NetUtil.lengthenURL(scratchdir,FILE_LIST_GZ);
  }
 catch (  IOException ex) {
    throw new InstallException(Msg.URL_FAILED,ex);
  }
}","/** 
 * The URL for the cached index file for this installer
 */
protected URL getCachedIndexFile() throws InstallException {
  try {
    URL scratchdir=Project.instance().getTempScratchSpace(getTempFileExtension(host,directory),true);
    return NetUtil.lengthenURL(scratchdir,FILE_LIST_GZ);
  }
 catch (  IOException ex) {
    throw new InstallException(Msg.URL_FAILED,ex);
  }
}",0.9908256880733946
101735,"public void reloadBookList() throws InstallException {
  Job job=JobManager.createJob(Msg.JOB_DOWNLOADING.toString(),Thread.currentThread(),false);
  try {
    URL scratchfile=getCachedIndexFile();
    download(job,LIST_DIR + '/' + directory,FILE_LIST_GZ,scratchfile);
    loaded=false;
  }
 catch (  InstallException ex) {
    job.ignoreTimings();
    throw ex;
  }
 finally {
    job.done();
  }
}","public void reloadBookList() throws InstallException {
  Job job=JobManager.createJob(Msg.JOB_DOWNLOADING.toString(),Thread.currentThread(),false);
  try {
    URL scratchfile=getCachedIndexFile();
    download(job,directory + '/' + LIST_DIR,FILE_LIST_GZ,scratchfile);
    loaded=false;
  }
 catch (  InstallException ex) {
    job.ignoreTimings();
    throw ex;
  }
 finally {
    job.done();
  }
}",0.9573934837092732
101736,"protected void download(Job job,String dir,String file,URL dest) throws InstallException {
  try {
    URL url=new URL(""String_Node_Str"" + host + dir+ '/'+ file);
    copy(job,url,dest);
  }
 catch (  IOException ex) {
    throw new InstallException(Msg.UNKNOWN_ERROR,ex);
  }
}","protected void download(Job job,String dir,String file,URL dest) throws InstallException {
  try {
    URL url=new URL(NetUtil.PROTOCOL_HTTP,host,dir + '/' + file);
    copy(job,url,dest);
  }
 catch (  IOException ex) {
    throw new InstallException(Msg.UNKNOWN_ERROR,ex);
  }
}",0.8924731182795699
101737,"public void installDownloadedIndex(BookMetaData bmd,URL tempDest) throws BookException {
  try {
    URL storage=getStorageArea(bmd);
    File zip=NetUtil.getAsFile(tempDest);
    IOUtil.unpackZip(zip,storage);
  }
 catch (  IOException ex) {
    throw new BookException(Msg.INSTALL_FAIL,ex);
  }
}","public void installDownloadedIndex(BookMetaData bmd,URL tempDest) throws BookException {
  try {
    URL storage=getStorageArea(bmd);
    File zip=NetUtil.getAsFile(tempDest);
    IOUtil.unpackZip(zip,NetUtil.getAsFile(storage));
  }
 catch (  IOException ex) {
    throw new BookException(Msg.INSTALL_FAIL,ex);
  }
}",0.946341463414634
101738,"/** 
 * If the application has set the home, it will return the application's home directory, otherwise it returns null.
 * @return Returns the home.
 */
public static synchronized URL getHome(){
  return home;
}","/** 
 * If the application has set the home, it will return the application's home directory, otherwise it returns null.
 * @return Returns the home.
 */
public static synchronized URL getHome(){
}",0.9633251833740832
101739,"/** 
 * Look for the resource in the home directory
 * @param search must be non-null, non-empty
 */
public static URL findHomeResource(String search){
  URL reply=null;
  if (home != null) {
    String ssearch=null;
    if (search.charAt(0) == '/') {
      ssearch=search;
    }
 else {
      ssearch='/' + search;
    }
    URL override=null;
synchronized (CWClassLoader.class) {
      override=NetUtil.lengthenURL(home,ssearch);
    }
    File f=new File(override.getFile());
    if (f.canRead()) {
      reply=override;
    }
  }
  return reply;
}","/** 
 * Look for the resource in the home directory
 * @param search must be non-null, non-empty
 */
public static URL findHomeResource(String search){
  URL reply=null;
  URL homeURL=getHome();
  if (homeURL != null) {
    URL override=NetUtil.lengthenURL(homeURL,search);
    File f=new File(override.getFile());
    if (f.canRead()) {
      reply=override;
    }
  }
  return reply;
}",0.652452025586354
101740,"/** 
 * Utility to strip a string from the end of a URL.
 * @param orig The URL to strip
 * @param strip The text to strip from the end of the URL
 * @return The stripped URL
 * @exception MalformedURLException If the URL does not end in the given text
 */
public static URL shortenURL(URL orig,String strip) throws MalformedURLException {
  String file=orig.getFile();
  if (file.endsWith(SEPARATOR)) {
    file=file.substring(0,file.length() - 1);
  }
  if (file.endsWith(""String_Node_Str"")) {
    file=file.substring(0,file.length() - 1);
  }
  String test=file.substring(file.length() - strip.length());
  if (!test.equals(strip)) {
    throw new MalformedURLException(Msg.CANT_STRIP.toString(new Object[]{orig,strip}));
  }
  String newFile=file.substring(0,file.length() - strip.length());
  return new URL(orig.getProtocol(),orig.getHost(),orig.getPort(),newFile);
}","/** 
 * Utility to strip a string from the end of a URL.
 * @param orig The URL to strip
 * @param strip The text to strip from the end of the URL
 * @return The stripped URL
 * @exception MalformedURLException If the URL does not end in the given text
 */
public static URL shortenURL(URL orig,String strip) throws MalformedURLException {
  String file=orig.getFile();
  char lastChar=file.charAt(file.length() - 1);
  if (isSeparator(lastChar)) {
    file=file.substring(0,file.length() - 1);
  }
  String test=file.substring(file.length() - strip.length());
  if (!test.equals(strip)) {
    throw new MalformedURLException(Msg.CANT_STRIP.toString(new Object[]{orig,strip}));
  }
  String newFile=file.substring(0,file.length() - strip.length());
  return new URL(orig.getProtocol(),orig.getHost(),orig.getPort(),newFile);
}",0.8887580929958799
101741,"/** 
 * Utility to add a string to the end of a URL.
 * @param orig The URL to strip
 * @param extra1 The text to add to the end of the URL
 * @param extra2 The next bit of text to add to the end of the URL
 * @param extra3 The next bit of text to add to the end of the URL
 * @return The stripped URL
 */
public static URL lengthenURL(URL orig,String extra1,String extra2,String extra3){
}","/** 
 * Utility to add a string to the end of a URL.
 * @param orig The URL to strip
 * @param extra The text to add to the end of the URL
 * @return The stripped URL
 */
public static URL lengthenURL(URL orig,String extra){
}",0.7337662337662337
101742,"/** 
 * Compile the XSL or retrieve it from the cache
 */
private TemplateInfo getTemplateInfo() throws IOException, TransformerConfigurationException {
  long modtime=NetUtil.getLastModified(xslurl);
  TemplateInfo tinfo=null;
  if (cache) {
    tinfo=(TemplateInfo)txers.get(xslurl);
    if (tinfo != null) {
      if (modtime > tinfo.getModtime()) {
        txers.remove(xslurl);
        tinfo=null;
        log.debug(""String_Node_Str"" + xslurl.toExternalForm());
      }
    }
  }
  if (tinfo == null) {
    log.debug(""String_Node_Str"" + xslurl.toExternalForm());
    InputStream xsl_in=xslurl.openStream();
    Templates templates=transfact.newTemplates(new StreamSource(xsl_in));
    tinfo=new TemplateInfo(templates,modtime);
    if (cache) {
      txers.put(xslurl,tinfo);
    }
  }
  return tinfo;
}","/** 
 * Compile the XSL or retrieve it from the cache
 */
private TemplateInfo getTemplateInfo() throws IOException, TransformerConfigurationException {
  long modtime=NetUtil.getLastModified(xslurl);
  TemplateInfo tinfo=(TemplateInfo)txers.get(xslurl);
  if (tinfo != null) {
    if (modtime > tinfo.getModtime()) {
      txers.remove(xslurl);
      tinfo=null;
      log.debug(""String_Node_Str"" + xslurl.toExternalForm());
    }
  }
  if (tinfo == null) {
    log.debug(""String_Node_Str"" + xslurl.toExternalForm());
    InputStream xsl_in=xslurl.openStream();
    Templates templates=transfact.newTemplates(new StreamSource(xsl_in));
    tinfo=new TemplateInfo(templates,modtime);
    txers.put(xslurl,tinfo);
  }
  return tinfo;
}",0.8093385214007782
101743,"/** 
 * Simple ctor
 */
public ModuleType(String name,String install,BookType type,boolean compressed){
  super(name);
  this.install=install;
  this.type=type;
  this.compressed=compressed;
}","/** 
 * Simple ctor
 */
public ModuleType(String name,String install,BookType type){
  this.name=name;
  this.install=install;
  this.type=type;
}",0.8106508875739645
101744,"/** 
 * Find a ModuleType from a name.
 * @param name The name of the ModuleType to look up
 * @return The found ModuleType or null if the name is not found
 */
public static ModuleType getModuleType(String name){
  return (ModuleType)Enum.getEnum(ModuleType.class,name);
}","/** 
 * Find a ModuleType from a name.
 * @param name The name of the ModuleType to look up
 * @return The found ModuleType or null if the name is not found
 */
public static ModuleType getModuleType(String name){
  for (int i=0; i < VALUES.length; i++) {
    ModuleType obj=VALUES[i];
    if (obj.name.equalsIgnoreCase(name)) {
      return obj;
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str"");
}",0.6377622377622377
101745,"/** 
 * Read all the modules that we can get our hands on.
 */
public static void main(String[] args) throws IOException, JDOMException {
  Logger.outputInfoMinimum();
  JAXBUtil.getJAXBContext();
  Config config=new Config(""String_Node_Str"");
  Document xmlconfig=Project.resource().getDocument(""String_Node_Str"");
  config.add(xmlconfig);
  config.setProperties(Project.resource().getProperties(""String_Node_Str""));
  config.localToApplication(true);
  List dicts=Books.getBooks(BookFilters.getDictionaries());
  for (Iterator dit=dicts.iterator(); dit.hasNext(); ) {
    DictionaryMetaData dmd=(DictionaryMetaData)dit.next();
    if (dmd.getInitials().compareTo(""String_Node_Str"") < 1) {
      continue;
    }
    Dictionary dict=dmd.getDictionary();
    SortedSet set=dict.getIndex(null);
    Iterator it=set.iterator();
    testReadMultiple(dmd,it);
  }
  List comments=Books.getBooks(BookFilters.getCommentaries());
  for (Iterator cit=comments.iterator(); cit.hasNext(); ) {
    BookMetaData bmd=(BookMetaData)cit.next();
    Iterator it=new KeyIterator(WHOLE.verseIterator());
    testReadMultiple(bmd,it);
  }
  List bibles=Books.getBooks(BookFilters.getBibles());
  for (Iterator bit=bibles.iterator(); bit.hasNext(); ) {
    BookMetaData bmd=(BookMetaData)bit.next();
    Iterator it=new KeyIterator(WHOLE.verseIterator());
    testReadMultiple(bmd,it);
  }
}","/** 
 * Read all the modules that we can get our hands on.
 */
public static void main(String[] args) throws IOException, JDOMException {
  Logger.outputInfoMinimum();
  JAXBUtil.getJAXBContext();
  Config config=new Config(""String_Node_Str"");
  Document xmlconfig=Project.resource().getDocument(""String_Node_Str"");
  config.add(xmlconfig);
  config.setProperties(Project.resource().getProperties(""String_Node_Str""));
  config.localToApplication(true);
  List bibles=Books.getBooks(BookFilters.getBibles());
  for (Iterator bit=bibles.iterator(); bit.hasNext(); ) {
    BookMetaData bmd=(BookMetaData)bit.next();
    Iterator it=new KeyIterator(WHOLE.verseIterator());
    testReadMultiple(bmd,it);
  }
  List dicts=Books.getBooks(BookFilters.getDictionaries());
  for (Iterator dit=dicts.iterator(); dit.hasNext(); ) {
    DictionaryMetaData dmd=(DictionaryMetaData)dit.next();
    if (dmd.getInitials().compareTo(""String_Node_Str"") < 1) {
      continue;
    }
    Dictionary dict=dmd.getDictionary();
    SortedSet set=dict.getIndex(null);
    Iterator it=set.iterator();
    testReadMultiple(dmd,it);
  }
  List comments=Books.getBooks(BookFilters.getCommentaries());
  for (Iterator cit=comments.iterator(); cit.hasNext(); ) {
    BookMetaData bmd=(BookMetaData)cit.next();
    Iterator it=new KeyIterator(WHOLE.verseIterator());
    testReadMultiple(bmd,it);
  }
}",0.6467153284671533
101746,"/** 
 * XML parse failed, so we can try getting rid of all the tags and having another go. We define a tag to start at a &lt; and end at the end of the next word (where a word is what comes in between spaces) that does not contain an = sign, or at a >, whichever is earlier.
 */
public static String cleanAllTags(String broken){
  if (broken == null) {
    return null;
  }
  String working=broken;
  allTags:   while (true) {
    int lt=working.indexOf('<');
    if (lt == -1) {
      break allTags;
    }
    int i=lt;
    int startattr=-1;
    singletag:     while (true) {
      i++;
      if (i >= working.length()) {
        i--;
        break singletag;
      }
      char c=working.charAt(i);
      if (c == '>') {
        break singletag;
      }
      if (c == ' ') {
        if (startattr == -1) {
          startattr=i;
        }
 else {
          String value=working.substring(startattr,i);
          if (value.indexOf(""String_Node_Str"") == -1) {
            break singletag;
          }
        }
      }
    }
    DataPolice.report(""String_Node_Str"" + working.substring(lt,i + 1));
    working=working.substring(0,lt) + working.substring(i + 1);
  }
  return working;
}","/** 
 * XML parse failed, so we can try getting rid of all the tags and having another go. We define a tag to start at a &lt; and end at the end of the next word (where a word is what comes in between spaces) that does not contain an = sign, or at a >, whichever is earlier.
 */
public static String cleanAllTags(String broken){
  if (broken == null) {
    return null;
  }
  String working=broken;
  allTags:   while (true) {
    int lt=working.indexOf('<');
    if (lt == -1) {
      break allTags;
    }
    int i=lt;
    int startattr=-1;
    singletag:     while (true) {
      i++;
      if (i >= working.length()) {
        i--;
        break singletag;
      }
      char c=working.charAt(i);
      if (c == '>') {
        break singletag;
      }
      if (c == ' ') {
        if (startattr == -1) {
          startattr=i;
        }
 else {
          String value=working.substring(startattr,i);
          if (value.indexOf(""String_Node_Str"") == -1) {
            break singletag;
          }
        }
      }
    }
    working=working.substring(0,lt) + working.substring(i + 1);
  }
  return working;
}",0.9355961705831156
101747,"/** 
 * A parse has failed so we can try to kill the broken entities and then have another go.
 */
public static String cleanAllEntities(String broken){
  if (broken == null) {
    return null;
  }
  String working=broken;
  int cleanfrom=0;
  allEntities:   while (true) {
    int amp=working.indexOf('&',cleanfrom);
    if (amp == -1) {
      break allEntities;
    }
    int i=amp + 1;
    singleEntity:     while (true) {
      if (i >= working.length()) {
        String entity=working.substring(amp);
        String replace=guessEntity(entity);
        DataPolice.report(""String_Node_Str"" + entity + ""String_Node_Str""+ replace+ ""String_Node_Str"");
        working=working.substring(0,amp) + replace;
        break singleEntity;
      }
      char c=working.charAt(i);
      if (c == ';') {
        String entity=working.substring(amp,i + 1);
        String replace=guessEntity(entity);
        DataPolice.report(""String_Node_Str"" + entity + ""String_Node_Str""+ replace+ ""String_Node_Str"");
        working=working.substring(0,amp) + replace + working.substring(i + 1);
        break singleEntity;
      }
      if (!Character.isLetterOrDigit(c) && c != '-') {
        String entity=working.substring(amp,i);
        String replace=guessEntity(entity);
        DataPolice.report(""String_Node_Str"" + entity + ""String_Node_Str""+ replace+ ""String_Node_Str"");
        working=working.substring(0,amp) + replace + working.substring(i);
        break singleEntity;
      }
      i++;
    }
    cleanfrom=amp + 1;
  }
  return working;
}","/** 
 * A parse has failed so we can try to kill the broken entities and then have another go.
 */
public static String cleanAllEntities(String broken){
  if (broken == null) {
    return null;
  }
  String working=broken;
  int cleanfrom=0;
  allEntities:   while (true) {
    int amp=working.indexOf('&',cleanfrom);
    if (amp == -1) {
      break allEntities;
    }
    int i=amp + 1;
    singleEntity:     while (true) {
      if (i >= working.length()) {
        String entity=working.substring(amp);
        String replace=guessEntity(entity);
        working=working.substring(0,amp) + replace;
        break singleEntity;
      }
      char c=working.charAt(i);
      if (c == ';') {
        String entity=working.substring(amp,i + 1);
        String replace=guessEntity(entity);
        working=working.substring(0,amp) + replace + working.substring(i + 1);
        break singleEntity;
      }
      if (!Character.isLetterOrDigit(c) && c != '-') {
        String entity=working.substring(amp,i);
        String replace=guessEntity(entity);
        working=working.substring(0,amp) + replace + working.substring(i);
        break singleEntity;
      }
      i++;
    }
    cleanfrom=amp + 1;
  }
  return working;
}",0.8880028996013049
101748,"/** 
 * The parser failed, and it might be because there are control characters that are not valid in XML in the string, so this method strips them out
 */
public static String cleanInvalidCharacters(String broken){
  if (broken == null) {
    return null;
  }
  StringBuffer buffer=new StringBuffer();
  for (int i=0; i < broken.length(); i++) {
    char c=broken.charAt(i);
    if (c < 32 && c != 9 && c != 10 && c != 13) {
      int num=c;
      DataPolice.report(""String_Node_Str"" + num);
    }
 else {
      buffer.append(c);
    }
  }
  return buffer.toString();
}","/** 
 * The parser failed, and it might be because there are control characters that are not valid in XML in the string, so this method strips them out
 */
public static String cleanInvalidCharacters(String broken){
  if (broken == null) {
    return null;
  }
  StringBuffer buffer=new StringBuffer();
  for (int i=0; i < broken.length(); i++) {
    char c=broken.charAt(i);
    if (c < 32 && c != 9 && c != 10 && c != 13) {
    }
 else {
      buffer.append(c);
    }
  }
  return buffer.toString();
}",0.9375582479030756
101749,"/** 
 * Flush the stream.  If the stream has saved any characters from the various write() methods in a buffer, write them immediately to their intended destination.  Then, if that destination is another character or byte stream, flush it.  Thus one flush() invocation will flush all the buffers in a chain of Writers and OutputStreams.
 * @exception IOException  If an I/O error occurs
 */
public void flush() throws IOException {
  if (updater != null) {
    try {
      SwingUtilities.invokeAndWait(updater);
    }
 catch (    InterruptedException ex) {
      throw new IOException(""String_Node_Str"" + ex);
    }
catch (    InvocationTargetException ex) {
      throw new IOException(""String_Node_Str"" + ex);
    }
  }
}","public void flush() throws IOException {
  if (updater != null) {
    try {
      SwingUtilities.invokeAndWait(updater);
    }
 catch (    InterruptedException ex) {
      throw new IOException(""String_Node_Str"" + ex);
    }
catch (    InvocationTargetException ex) {
      throw new IOException(""String_Node_Str"" + ex);
    }
  }
}",0.6293838862559241
101750,"/** 
 * Write a portion of a string.
 * @param str A String
 * @param off Offset from which to start writing characters
 * @param len Number of characters to write
 * @exception IOException If an I/O error occurs
 */
public void write(String str,int off,int len) throws IOException {
synchronized (lock) {
    queue=queue + str.substring(off,off + len);
    update();
  }
}","public void write(String str,int off,int len){
synchronized (lock) {
    queue=queue + str.substring(off,off + len);
    update();
  }
}",0.5343811394891945
101751,"/** 
 * Close the stream, flushing it first.  Once a stream has been closed, further write() or flush() invocations will cause an IOException to be thrown.  Closing a previously-closed stream, however, has no effect.
 * @exception IOException If an I/O error occurs
 */
public void close() throws IOException {
  closed=true;
}","public void close(){
  closed=true;
}",0.2032967032967033
101752,"/** 
 * Setter for the main body of text
 */
public void setText(final InputStream in) throws IOException {
  Thread work=new Thread(new Runnable(){
    public void run(){
      try {
        InputStream pmin=new ProgressMonitorInputStream(TextViewPanel.this,""String_Node_Str"",in);
        Reader rin=new InputStreamReader(pmin);
        final String data=StringUtil.read(rin);
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            setText(data);
          }
        }
);
      }
 catch (      IOException ex) {
        Reporter.informUser(TextViewPanel.this,ex);
      }
    }
  }
);
  work.start();
  work.setPriority(Thread.MIN_PRIORITY);
}","/** 
 * Setter for the main body of text
 */
public void setText(final InputStream in){
  Thread work=new Thread(new Runnable(){
    public void run(){
      try {
        InputStream pmin=new ProgressMonitorInputStream(TextViewPanel.this,""String_Node_Str"",in);
        Reader rin=new InputStreamReader(pmin);
        final String data=StringUtil.read(rin);
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            setText(data);
          }
        }
);
      }
 catch (      IOException ex) {
        Reporter.informUser(TextViewPanel.this,ex);
      }
    }
  }
);
  work.start();
  work.setPriority(Thread.MIN_PRIORITY);
}",0.985096870342772
101753,"public Object getProperty(String arg0) throws SAXNotRecognizedException, SAXNotSupportedException {
  return null;
}","public Object getProperty(String arg0){
  return null;
}",0.6511627906976745
101754,"public void parse(String arg0) throws IOException, SAXException {
  throw new SAXException(""String_Node_Str"");
}","public void parse(String arg0) throws SAXException {
  throw new SAXException(""String_Node_Str"");
}",0.9383886255924172
101755,"public boolean getFeature(String arg0) throws SAXNotRecognizedException, SAXNotSupportedException {
  return false;
}","public boolean getFeature(String arg0){
  return false;
}",0.6551724137931034
101756,"public void setFeature(String arg0,boolean arg1) throws SAXNotRecognizedException, SAXNotSupportedException {
}","public void setFeature(String arg0,boolean arg1){
}",0.6296296296296297
101757,"public void setProperty(String arg0,Object arg1) throws SAXNotRecognizedException, SAXNotSupportedException {
}","public void setProperty(String arg0,Object arg1){
}",0.6296296296296297
101758,"public void testCleanAllTags(){
  assertNull(XMLUtil.cleanAllTags(null));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
}","public void testCleanAllTags(){
  assertNull(XMLUtil.cleanAllTags(null));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
  assertEquals(""String_Node_Str"",XMLUtil.cleanAllTags(""String_Node_Str""));
}",0.7547169811320755
101759,"/** 
 * XML parse failed, so we can try getting rid of all the tags and having another go. We define a tag to start at a &lt; and end at the end of the next word (where a word is what comes in between spaces) that does not contain an = sign, or at a >, whichever is earlier.
 */
public static String cleanAllTags(String broken){
  String working=broken;
  allTags:   while (true) {
    int lt=working.indexOf('<');
    if (lt == -1) {
      break allTags;
    }
    int gt=working.indexOf('>',lt);
    String lton=working.substring(lt);
    String[] parts=StringUtils.split(lton,' ');
    int noeqword=-1;
    for (int i=0; i < parts.length; i++) {
      if (parts[i].indexOf('=') == -1) {
        noeqword=working.indexOf(parts[i]);
      }
    }
    if (gt == -1) {
      gt=Integer.MAX_VALUE;
    }
    if (noeqword == -1) {
      noeqword=Integer.MAX_VALUE;
    }
    int min=gt;
    if (noeqword < min) {
      min=noeqword;
    }
    if (working.length() < min) {
      min=working.length();
    }
    working=working.substring(lt,min);
  }
  return working;
}","/** 
 * XML parse failed, so we can try getting rid of all the tags and having another go. We define a tag to start at a &lt; and end at the end of the next word (where a word is what comes in between spaces) that does not contain an = sign, or at a >, whichever is earlier.
 */
public static String cleanAllTags(String broken){
  if (broken == null) {
    return null;
  }
  String working=broken;
  allTags:   while (true) {
    int lt=working.indexOf('<');
    if (lt == -1) {
      break allTags;
    }
    int gt=working.indexOf('>',lt);
    int noeqword=-1;
    int nextspc=working.indexOf(' ',lt);
    if (nextspc != -1) {
      String lton=working.substring(nextspc);
      String[] parts=StringUtils.split(lton,' ');
      for (int i=0; i < parts.length; i++) {
        if (parts[i].indexOf('=') == -1) {
          noeqword=working.indexOf(parts[i],lt) - 2;
        }
      }
    }
    if (gt == -1) {
      gt=Integer.MAX_VALUE;
    }
    if (noeqword == -1) {
      noeqword=Integer.MAX_VALUE;
    }
    int min=gt;
    if (noeqword < min) {
      min=noeqword;
    }
    if (working.length() < min) {
      min=working.length() - 1;
    }
    DataPolice.report(""String_Node_Str"" + working.substring(lt,min + 1));
    working=working.substring(0,lt) + working.substring(min + 1);
  }
  return working;
}",0.7831932773109244
101760,"/** 
 * A parse has failed so we can try to kill the entities and then have another go.
 */
public static String cleanAllEntities(String broken){
  String working=broken;
  allEntities:   while (true) {
    int amp=working.indexOf('&');
    if (amp == -1) {
      break allEntities;
    }
    int i=amp + 1;
    singleEntity:     while (true) {
      char c=working.charAt(i);
      if (c == ';') {
        working=working.substring(0,amp) + working.substring(i);
        break singleEntity;
      }
      if (!Character.isLetterOrDigit(c) && c != '-') {
        working=working.substring(0,amp) + working.substring(i);
        break singleEntity;
      }
      i++;
      if (i >= working.length()) {
        break singleEntity;
      }
    }
  }
  return working;
}","/** 
 * A parse has failed so we can try to kill the entities and then have another go.
 */
public static String cleanAllEntities(String broken){
  if (broken == null) {
    return null;
  }
  String working=broken;
  allEntities:   while (true) {
    int amp=working.indexOf('&');
    if (amp == -1) {
      break allEntities;
    }
    int i=amp + 1;
    singleEntity:     while (true) {
      if (i >= working.length()) {
        DataPolice.report(""String_Node_Str"" + working.substring(amp));
        working=working.substring(0,amp);
        break singleEntity;
      }
      char c=working.charAt(i);
      if (c == ';') {
        DataPolice.report(""String_Node_Str"" + working.substring(amp,i + 1));
        working=working.substring(0,amp) + working.substring(i + 1);
        break singleEntity;
      }
      if (!Character.isLetterOrDigit(c) && c != '-') {
        DataPolice.report(""String_Node_Str"" + working.substring(amp,i));
        working=working.substring(0,amp) + working.substring(i);
        break singleEntity;
      }
      i++;
    }
  }
  return working;
}",0.6890574214517876
101761,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.addTest(org.crosswire.common.util.AllTests.suite());
  suite.addTest(org.crosswire.common.progress.AllTests.suite());
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.addTest(org.crosswire.common.util.AllTests.suite());
  suite.addTest(org.crosswire.common.progress.AllTests.suite());
  suite.addTest(org.crosswire.common.xml.AllTests.suite());
  return suite;
}",0.8728813559322034
101762,"/** 
 * Handle AWT exceptions
 */
public void handle(final Throwable ex){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      ExceptionPane.showExceptionDialog(comp,ex);
    }
  }
);
}","/** 
 * Handle AWT exceptions
 */
public void handle(final Throwable ex){
  Reporter.informUser(this,ex);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      ExceptionPane.showExceptionDialog(comp,ex);
    }
  }
);
}",0.927927927927928
101763,"/** 
 * @see Remoter#execute(RemoteMethod)
 */
public Document execute(RemoteMethod method) throws RemoterException {
  String methodname=method.getMethodName();
  try {
    if (RemoteConstants.METHOD_GETBIBLES.equals(methodname)) {
      List lbmds=Books.getBooks(BookFilters.getFaster(Books.SPEED_SLOWEST));
      BibleMetaData[] bmds=(BibleMetaData[])lbmds.toArray(new BibleMetaData[lbmds.size()]);
      String[] uids=getUIDs(bmds);
      return Converter.convertBibleMetaDatasToDocument(bmds,uids);
    }
 else     if (RemoteConstants.METHOD_GETDATA.equals(methodname)) {
      String uid=method.getParameter(RemoteConstants.PARAM_BIBLE);
      BibleMetaData bmd=lookupBibleMetaData(uid);
      Bible bible=bmd.getBible();
      String refstr=method.getParameter(RemoteConstants.PARAM_PASSAGE);
      Passage ref=PassageFactory.createPassage(refstr);
      BibleData data=bible.getData(ref);
      SAXEventProvider provider=OsisUtil.getSAXEventProvider(data);
      SAXHandler handler=new SAXHandler();
      provider.provideSAXEvents(handler);
      return handler.getDocument();
    }
 else     if (RemoteConstants.METHOD_FINDPASSAGE.equals(methodname)) {
      String uid=method.getParameter(RemoteConstants.PARAM_BIBLE);
      BibleMetaData bmd=lookupBibleMetaData(uid);
      Bible bible=bmd.getBible();
      String word=method.getParameter(RemoteConstants.PARAM_FINDSTRING);
      boolean match=Boolean.getBoolean(method.getParameter(RemoteConstants.PARAM_FINDMATCH));
      String refstr=method.getParameter(RemoteConstants.PARAM_FINDRANGE);
      Passage range=PassageFactory.createPassage(refstr);
      Search search=new Search(word,match);
      search.setRange(range);
      Passage ref=bible.findPassage(search);
      return Converter.convertPassageToDocument(ref);
    }
 else {
      throw new RemoterException(""String_Node_Str"" + methodname);
    }
  }
 catch (  RemoterException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new RemoterException(""String_Node_Str"",ex);
  }
}","/** 
 * @see Remoter#execute(RemoteMethod)
 */
public Document execute(RemoteMethod method) throws RemoterException {
  String methodname=method.getMethodName();
  try {
    if (RemoteConstants.METHOD_GETBIBLES.equals(methodname)) {
      List lbmds=Books.getBooks(BookFilters.getFaster(Books.SPEED_SLOWEST));
      BibleMetaData[] bmds=(BibleMetaData[])lbmds.toArray(new BibleMetaData[lbmds.size()]);
      String[] uids=getUIDs(bmds);
      return Converter.convertBibleMetaDatasToDocument(bmds,uids);
    }
 else     if (RemoteConstants.METHOD_GETDATA.equals(methodname)) {
      String uid=method.getParameter(RemoteConstants.PARAM_BIBLE);
      BibleMetaData bmd=lookupBibleMetaData(uid);
      Bible bible=bmd.getBible();
      String refstr=method.getParameter(RemoteConstants.PARAM_PASSAGE);
      Passage ref=PassageFactory.createPassage(refstr);
      BibleData data=bible.getData(ref);
      SAXEventProvider provider=OsisUtil.getSAXEventProvider(data);
      SAXHandler handler=new SAXHandler();
      provider.provideSAXEvents(handler);
      return handler.getDocument();
    }
 else     if (RemoteConstants.METHOD_FINDPASSAGE.equals(methodname)) {
      String uid=method.getParameter(RemoteConstants.PARAM_BIBLE);
      BibleMetaData bmd=lookupBibleMetaData(uid);
      Bible bible=bmd.getBible();
      String word=method.getParameter(RemoteConstants.PARAM_FINDSTRING);
      boolean match=Boolean.getBoolean(method.getParameter(RemoteConstants.PARAM_FINDMATCH));
      String refstr=method.getParameter(RemoteConstants.PARAM_FINDRANGE);
      Passage range=PassageFactory.createPassage(refstr);
      Search search=new Search(word,match);
      search.setRestriction(range);
      Passage ref=bible.findPassage(search);
      return Converter.convertPassageToDocument(ref);
    }
 else {
      throw new RemoterException(""String_Node_Str"" + methodname);
    }
  }
 catch (  RemoterException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new RemoterException(""String_Node_Str"",ex);
  }
}",0.9965243296921548
101764,"/** 
 * For a given word find a list of references to it.
 * @param word The text to search for
 * @return The references to the word
 */
public Passage findPassage(Search search) throws BookException {
  try {
    RemoteMethod method=new RemoteMethod(RemoteConstants.METHOD_FINDPASSAGE);
    method.addParam(RemoteConstants.PARAM_BIBLE,rbmd.getID());
    method.addParam(RemoteConstants.PARAM_FINDSTRING,search.getMatch());
    method.addParam(RemoteConstants.PARAM_FINDMATCH,""String_Node_Str"" + search.isBestMatch());
    method.addParam(RemoteConstants.PARAM_FINDRANGE,search.getRange().getName());
    Document doc=remoter.execute(method);
    return Converter.convertDocumentToPassage(doc);
  }
 catch (  ConverterException ex) {
    throw new BookException(""String_Node_Str"",ex);
  }
catch (  RemoterException ex) {
    throw new BookException(""String_Node_Str"",ex);
  }
}","/** 
 * For a given word find a list of references to it.
 * @param word The text to search for
 * @return The references to the word
 */
public Passage findPassage(Search search) throws BookException {
  try {
    RemoteMethod method=new RemoteMethod(RemoteConstants.METHOD_FINDPASSAGE);
    method.addParam(RemoteConstants.PARAM_BIBLE,rbmd.getID());
    method.addParam(RemoteConstants.PARAM_FINDSTRING,search.getMatch());
    method.addParam(RemoteConstants.PARAM_FINDMATCH,""String_Node_Str"" + search.isBestMatch());
    method.addParam(RemoteConstants.PARAM_FINDRANGE,search.getRestriction().getName());
    Document doc=remoter.execute(method);
    return Converter.convertDocumentToPassage(doc);
  }
 catch (  ConverterException ex) {
    throw new BookException(""String_Node_Str"",ex);
  }
catch (  RemoterException ex) {
    throw new BookException(""String_Node_Str"",ex);
  }
}",0.9920544835414302
101765,"/** 
 * Retains only the Verses in this Passage that are contained in the specified Passage.  In other words, removes from this Passage all of its Verses that are not contained in the specified Passage
 * @param that Verses to be retained in this Passage.
 */
public void retainAll(Passage that){
  optimizeWrites();
  if (that instanceof BitwisePassage) {
    BitSet that_store=((BitwisePassage)that).store;
    store.and(that_store);
  }
 else {
    BitSet new_store=new BitSet(BibleInfo.versesInBible());
    Iterator it=that.verseIterator();
    while (it.hasNext()) {
      int ord=((Verse)it.next()).getOrdinal();
      if (store.get(ord))       new_store.set(ord);
    }
    store=new_store;
  }
  fireIntervalRemoved(this,null,null);
}","/** 
 * Retains only the Verses in this Passage that are contained in the specified Passage. In other words, removes from this Passage all of its Verses that are not contained in the specified Passage
 * @param that Verses to be retained in this Passage.
 */
public void retainAll(Passage that){
  optimizeWrites();
  if (that instanceof BitwisePassage) {
    BitSet that_store=((BitwisePassage)that).store;
    store.and(that_store);
  }
 else {
    BitSet new_store=new BitSet(BibleInfo.versesInBible());
    Iterator it=that.verseIterator();
    while (it.hasNext()) {
      int ord=((Verse)it.next()).getOrdinal();
      if (store.get(ord))       new_store.set(ord);
    }
    store=new_store;
  }
  fireIntervalRemoved(this,null,null);
}",0.9993265993265992
101766,"public void testWriteRetainAllCollection() throws Exception {
  temp=PassageFactory.createPassage(""String_Node_Str"");
  temp.retainAll(PassageFactory.createPassage(""String_Node_Str""));
  assertEquals(temp.getName(),""String_Node_Str"");
  temp.retainAll(PassageFactory.createPassage(""String_Node_Str""));
  assertEquals(temp.getName(),""String_Node_Str"");
  temp.retainAll(PassageFactory.createPassage(""String_Node_Str""));
  assertEquals(temp.getName(),""String_Node_Str"");
  temp.retainAll(PassageFactory.createPassage(""String_Node_Str""));
  assertEquals(temp.getName(),""String_Node_Str"");
}","public void testWriteRetainAllCollection() throws Exception {
  temp=PassageFactory.createPassage(""String_Node_Str"");
  temp.retainAll(PassageFactory.createPassage(""String_Node_Str""));
  assertEquals(temp.getName(),""String_Node_Str"");
  temp.retainAll(PassageFactory.createPassage(""String_Node_Str""));
  assertEquals(temp.getName(),""String_Node_Str"");
  temp.retainAll(PassageFactory.createPassage(""String_Node_Str""));
  assertEquals(temp.getName(),""String_Node_Str"");
  temp.retainAll(PassageFactory.createPassage(""String_Node_Str""));
  assertEquals(temp.getName(),""String_Node_Str"");
  temp.addAll(grace);
  assertEquals(temp.countVerses(),grace.countVerses());
  temp.retainAll(gen_rev);
  assertEquals(temp,grace);
  temp.retainAll(PassageFactory.createPassage(""String_Node_Str""));
  assertEquals(temp.countVerses(),10);
  temp.retainAll(PassageFactory.createPassage(""String_Node_Str""));
  assertEquals(temp.countVerses(),4);
  temp.retainAll(PassageFactory.createPassage(""String_Node_Str""));
  assertEquals(temp.getName(),""String_Node_Str"");
}",0.7180428134556575
101767,"/** 
 * Initialize the GUI
 */
private void jbInit(){
  rdo_passg.setSelected(true);
  rdo_passg.setText(""String_Node_Str"");
  rdo_passg.setMnemonic('P');
  rdo_passg.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      lay_cards.show(pnl_cards,PASSAGE);
    }
  }
);
  rdo_match.setText(""String_Node_Str"");
  rdo_match.setMnemonic('M');
  rdo_match.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      lay_cards.show(pnl_cards,MATCH);
    }
  }
);
  rdo_search.setMnemonic('S');
  rdo_search.setText(""String_Node_Str"");
  rdo_search.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      lay_cards.show(pnl_cards,SEARCH);
    }
  }
);
  pnl_select.setLayout(new FlowLayout(FlowLayout.LEFT));
  cbo_versn.setModel(mdl_versn);
  cbo_versn.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent ev){
      changeVersion();
    }
  }
);
  pnl_radios.add(rdo_passg,null);
  pnl_radios.add(rdo_search,null);
  pnl_radios.add(rdo_match,null);
  pnl_versn.setLayout(new BorderLayout());
  pnl_versn.add(cbo_versn,BorderLayout.SOUTH);
  pnl_select.setLayout(new BorderLayout());
  pnl_select.add(pnl_radios,BorderLayout.WEST);
  pnl_select.add(pnl_versn,BorderLayout.EAST);
  grp_type.add(rdo_passg);
  grp_type.add(rdo_search);
  grp_type.add(rdo_match);
  lbl_passg.setDisplayedMnemonic('W');
  lbl_passg.setText(""String_Node_Str"");
  pnl_passg.setLayout(new GridBagLayout());
  txt_passg.setToolTipText(""String_Node_Str"");
  txt_passg.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      doPassageAction();
    }
  }
);
  txt_passg.addKeyListener(new KeyAdapter(){
    public void keyTyped(    KeyEvent ev){
      if (ev.getModifiers() == ActionEvent.CTRL_MASK)       showSelectDialog();
    }
  }
);
  btn_dialg.setText(""String_Node_Str"");
  btn_dialg.setBorder(BorderFactory.createCompoundBorder(txt_passg.getBorder(),btn_dialg.getBorder()));
  btn_dialg.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      showSelectDialog();
    }
  }
);
  btn_passg.setText(""String_Node_Str"");
  btn_passg.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      doPassageAction();
    }
  }
);
  pnl_passg.add(lbl_passg,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.VERTICAL,new Insets(5,5,0,2),0,0));
  pnl_passg.add(txt_passg,new GridBagConstraints(1,0,1,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,2,2,-1),0,0));
  pnl_passg.add(btn_dialg,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.VERTICAL,new Insets(5,-1,0,2),0,0));
  pnl_passg.add(btn_passg,new GridBagConstraints(0,1,3,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,20,5,20),0,0));
  pnl_search.setLayout(new GridBagLayout());
  lbl_search.setDisplayedMnemonic('S');
  lbl_search.setLabelFor(txt_search);
  lbl_search.setText(""String_Node_Str"");
  txt_search.setText(""String_Node_Str"");
  txt_search.setColumns(20);
  txt_search.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      doSearchAction();
    }
  }
);
  chk_srestrict.setSelected(false);
  chk_srestrict.setMnemonic('R');
  chk_srestrict.setText(""String_Node_Str"");
  chk_srestrict.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent ev){
      boolean selected=chk_srestrict.isSelected();
      txt_srestrict.setEnabled(selected);
    }
  }
);
  txt_srestrict.setEnabled(false);
  txt_srestrict.setText(""String_Node_Str"");
  btn_search.setText(""String_Node_Str"");
  btn_search.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      doSearchAction();
    }
  }
);
  pnl_search.add(lbl_search,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,0),0,0));
  pnl_search.add(txt_search,new GridBagConstraints(1,0,2,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,2,2,5),0,0));
  pnl_search.add(chk_srestrict,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,5,2),0,0));
  pnl_search.add(txt_srestrict,new GridBagConstraints(1,1,1,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(2,2,5,2),0,0));
  pnl_search.add(btn_search,new GridBagConstraints(2,1,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,20,5,20),0,0));
  pnl_match.setLayout(new GridBagLayout());
  lbl_match.setDisplayedMnemonic('V');
  lbl_match.setLabelFor(txt_match);
  lbl_match.setText(""String_Node_Str"");
  txt_match.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      doMatchAction();
    }
  }
);
  chk_mrestrict.setText(""String_Node_Str"");
  chk_mrestrict.setMnemonic('R');
  chk_mrestrict.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent ev){
      boolean selected=chk_mrestrict.isSelected();
      txt_mrestrict.setEnabled(selected);
    }
  }
);
  txt_mrestrict.setText(""String_Node_Str"");
  txt_mrestrict.setEnabled(false);
  btn_match.setText(""String_Node_Str"");
  btn_match.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      doMatchAction();
    }
  }
);
  pnl_match.add(lbl_match,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,2,2),0,0));
  pnl_match.add(txt_match,new GridBagConstraints(1,0,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,2,2,5),0,0));
  pnl_match.add(chk_mrestrict,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,5,2),0,0));
  pnl_match.add(txt_mrestrict,new GridBagConstraints(1,1,1,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(2,2,5,2),0,0));
  pnl_match.add(btn_match,new GridBagConstraints(2,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,20,5,20),0,0));
  pnl_cards.setLayout(lay_cards);
  pnl_cards.add(pnl_passg,PASSAGE);
  pnl_cards.add(pnl_search,SEARCH);
  pnl_cards.add(pnl_match,MATCH);
  this.setLayout(new BorderLayout());
  this.add(pnl_select,BorderLayout.NORTH);
  this.add(pnl_cards,BorderLayout.CENTER);
}","/** 
 * Initialize the GUI
 */
private void jbInit(){
  rdo_passg.setSelected(true);
  rdo_passg.setText(""String_Node_Str"");
  rdo_passg.setMnemonic('P');
  rdo_passg.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      lay_cards.show(pnl_cards,PASSAGE);
      adjustFocus();
    }
  }
);
  rdo_match.setText(""String_Node_Str"");
  rdo_match.setMnemonic('M');
  rdo_match.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      lay_cards.show(pnl_cards,MATCH);
      adjustFocus();
    }
  }
);
  rdo_search.setMnemonic('S');
  rdo_search.setText(""String_Node_Str"");
  rdo_search.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      lay_cards.show(pnl_cards,SEARCH);
      adjustFocus();
    }
  }
);
  pnl_select.setLayout(new FlowLayout(FlowLayout.LEFT));
  cbo_versn.setModel(mdl_versn);
  cbo_versn.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent ev){
      changeVersion();
    }
  }
);
  pnl_radios.add(rdo_passg,null);
  pnl_radios.add(rdo_search,null);
  pnl_radios.add(rdo_match,null);
  pnl_versn.setLayout(new BorderLayout());
  pnl_versn.add(cbo_versn,BorderLayout.SOUTH);
  pnl_select.setLayout(new BorderLayout());
  pnl_select.add(pnl_radios,BorderLayout.WEST);
  pnl_select.add(pnl_versn,BorderLayout.EAST);
  grp_type.add(rdo_passg);
  grp_type.add(rdo_search);
  grp_type.add(rdo_match);
  lbl_passg.setDisplayedMnemonic('W');
  lbl_passg.setText(""String_Node_Str"");
  pnl_passg.setLayout(new GridBagLayout());
  txt_passg.setToolTipText(""String_Node_Str"");
  txt_passg.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      doPassageAction();
    }
  }
);
  txt_passg.addKeyListener(new KeyAdapter(){
    public void keyTyped(    KeyEvent ev){
      if (ev.getModifiers() == ActionEvent.CTRL_MASK)       showSelectDialog();
    }
  }
);
  btn_dialg.setText(""String_Node_Str"");
  btn_dialg.setBorder(BorderFactory.createCompoundBorder(txt_passg.getBorder(),btn_dialg.getBorder()));
  btn_dialg.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      showSelectDialog();
    }
  }
);
  btn_passg.setText(""String_Node_Str"");
  btn_passg.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      doPassageAction();
    }
  }
);
  pnl_passg.add(lbl_passg,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.VERTICAL,new Insets(5,5,0,2),0,0));
  pnl_passg.add(txt_passg,new GridBagConstraints(1,0,1,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,2,2,-1),0,0));
  pnl_passg.add(btn_dialg,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.VERTICAL,new Insets(5,-1,0,2),0,0));
  pnl_passg.add(btn_passg,new GridBagConstraints(0,1,3,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,20,5,20),0,0));
  pnl_search.setLayout(new GridBagLayout());
  lbl_search.setDisplayedMnemonic('S');
  lbl_search.setLabelFor(txt_search);
  lbl_search.setText(""String_Node_Str"");
  txt_search.setText(""String_Node_Str"");
  txt_search.setColumns(20);
  txt_search.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      doSearchAction();
    }
  }
);
  chk_srestrict.setSelected(false);
  chk_srestrict.setMnemonic('R');
  chk_srestrict.setText(""String_Node_Str"");
  chk_srestrict.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent ev){
      boolean selected=chk_srestrict.isSelected();
      txt_srestrict.setEnabled(selected);
    }
  }
);
  txt_srestrict.setEnabled(false);
  txt_srestrict.setText(""String_Node_Str"");
  btn_search.setText(""String_Node_Str"");
  btn_search.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      doSearchAction();
    }
  }
);
  pnl_search.add(lbl_search,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,0),0,0));
  pnl_search.add(txt_search,new GridBagConstraints(1,0,2,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,2,2,5),0,0));
  pnl_search.add(chk_srestrict,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,5,2),0,0));
  pnl_search.add(txt_srestrict,new GridBagConstraints(1,1,1,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(2,2,5,2),0,0));
  pnl_search.add(btn_search,new GridBagConstraints(2,1,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,20,5,20),0,0));
  pnl_match.setLayout(new GridBagLayout());
  lbl_match.setDisplayedMnemonic('V');
  lbl_match.setLabelFor(txt_match);
  lbl_match.setText(""String_Node_Str"");
  txt_match.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      doMatchAction();
    }
  }
);
  chk_mrestrict.setText(""String_Node_Str"");
  chk_mrestrict.setMnemonic('R');
  chk_mrestrict.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent ev){
      boolean selected=chk_mrestrict.isSelected();
      txt_mrestrict.setEnabled(selected);
    }
  }
);
  txt_mrestrict.setText(""String_Node_Str"");
  txt_mrestrict.setEnabled(false);
  btn_match.setText(""String_Node_Str"");
  btn_match.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      doMatchAction();
    }
  }
);
  pnl_match.add(lbl_match,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,2,2),0,0));
  pnl_match.add(txt_match,new GridBagConstraints(1,0,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,2,2,5),0,0));
  pnl_match.add(chk_mrestrict,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,5,2),0,0));
  pnl_match.add(txt_mrestrict,new GridBagConstraints(1,1,1,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(2,2,5,2),0,0));
  pnl_match.add(btn_match,new GridBagConstraints(2,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,20,5,20),0,0));
  pnl_cards.setLayout(lay_cards);
  pnl_cards.add(pnl_passg,PASSAGE);
  pnl_cards.add(pnl_search,SEARCH);
  pnl_cards.add(pnl_match,MATCH);
  this.setLayout(new BorderLayout());
  this.add(pnl_select,BorderLayout.NORTH);
  this.add(pnl_cards,BorderLayout.CENTER);
}",0.9951742627345844
101768,"/** 
 * Someone pressed return in the search area
 */
protected void doSearchAction(){
  try {
    String param=txt_search.getText();
    Search search=new Search(param,false);
    if (chk_srestrict.isSelected()) {
      Passage restrict=PassageFactory.createPassage(txt_srestrict.getText());
      search.setRange(restrict);
    }
    Bible version=(Bible)mdl_versn.getSelectedBookMetaData().getBook();
    Passage ref=version.findPassage(search);
    txt_passg.setText(ref.getName());
    updateDisplay();
    setDefaultName(param);
  }
 catch (  Exception ex) {
    Reporter.informUser(this,ex);
  }
}","/** 
 * Someone pressed return in the search area
 */
protected void doSearchAction(){
  try {
    String param=txt_search.getText();
    Search search=new Search(param,false);
    if (chk_srestrict.isSelected()) {
      Passage restrict=PassageFactory.createPassage(txt_srestrict.getText());
      search.setRestriction(restrict);
    }
    Bible version=(Bible)mdl_versn.getSelectedBookMetaData().getBook();
    Passage ref=version.findPassage(search);
    txt_passg.setText(ref.getName());
    setDefaultName(param);
    updateDisplay();
    setCurrentAction(PASSAGE);
  }
 catch (  Exception ex) {
    Reporter.informUser(this,ex);
  }
}",0.8353413654618473
101769,"/** 
 * Inform the command listeners
 */
protected void fireCommandMade(DisplaySelectEvent ev){
  if (commandListeners != null) {
    Vector listeners=commandListeners;
    int count=listeners.size();
    for (int i=0; i < count; i++) {
      ((DisplaySelectListener)listeners.elementAt(i)).passageSelected(ev);
    }
  }
}","/** 
 * Inform the command listeners
 */
protected void fireCommandMade(DisplaySelectEvent ev){
  if (listeners != null) {
    for (int i=0; i < listeners.size(); i++) {
      DisplaySelectListener li=(DisplaySelectListener)listeners.get(i);
      li.passageSelected(ev);
    }
  }
}",0.7392739273927392
101770,"/** 
 * What is the currently displayed action?
 * @param action one of the constants PASSAGE, SEARCH or MATCH;
 */
public void setCurrentAction(String action){
  lay_cards.show(pnl_cards,action);
  if (action == PASSAGE) {
    rdo_passg.setSelected(true);
  }
 else   if (action == SEARCH) {
    rdo_search.setSelected(true);
  }
 else   if (action == MATCH) {
    rdo_match.setSelected(true);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * What is the currently displayed action?
 * @param action one of the constants PASSAGE, SEARCH or MATCH;
 */
private void setCurrentAction(String action){
  lay_cards.show(pnl_cards,action);
  if (action == PASSAGE) {
    rdo_passg.setSelected(true);
  }
 else   if (action == SEARCH) {
    rdo_search.setSelected(true);
  }
 else   if (action == MATCH) {
    rdo_match.setSelected(true);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  adjustFocus();
}",0.9708333333333332
101771,"/** 
 * Add a command listener
 */
public synchronized void removeCommandListener(DisplaySelectListener li){
  if (commandListeners != null && commandListeners.contains(li)) {
    Vector v=(Vector)commandListeners.clone();
    v.removeElement(li);
    commandListeners=v;
  }
}","/** 
 * Remove a command listener
 */
public synchronized void removeCommandListener(DisplaySelectListener li){
  if (listeners != null && listeners.contains(li)) {
    List temp=new ArrayList();
    temp.addAll(listeners);
    temp.remove(li);
    listeners=temp;
  }
}",0.680073126142596
101772,"/** 
 * Someone pressed return in the passage area
 */
protected void doPassageAction(){
  updateDisplay();
  setDefaultName(txt_passg.getText());
}","/** 
 * Someone pressed return in the passage area
 */
protected void doPassageAction(){
  setDefaultName(txt_passg.getText());
  updateDisplay();
}",0.8716216216216216
101773,"/** 
 * Someone pressed return in the search area
 */
protected void doMatchAction(){
  try {
    String param=txt_match.getText();
    Search search=new Search(param,true);
    if (chk_mrestrict.isSelected()) {
      Passage restrict=PassageFactory.createPassage(txt_mrestrict.getText());
      search.setRange(restrict);
    }
    Bible version=(Bible)mdl_versn.getSelectedBookMetaData().getBook();
    Passage ref=version.findPassage(search);
    if (ref instanceof PassageTally) {
      PassageTally tally=(PassageTally)ref;
      tally.setOrdering(PassageTally.ORDER_TALLY);
      tally.trimRanges(20);
    }
    txt_passg.setText(ref.getName());
    updateDisplay();
    setDefaultName(param);
  }
 catch (  Exception ex) {
    Reporter.informUser(this,ex);
  }
}","/** 
 * Someone pressed return in the search area
 */
protected void doMatchAction(){
  try {
    String param=txt_match.getText();
    Search search=new Search(param,true);
    if (chk_mrestrict.isSelected()) {
      Passage restrict=PassageFactory.createPassage(txt_mrestrict.getText());
      search.setRestriction(restrict);
    }
    Bible version=(Bible)mdl_versn.getSelectedBookMetaData().getBook();
    Passage ref=version.findPassage(search);
    if (ref instanceof PassageTally) {
      PassageTally tally=(PassageTally)ref;
      tally.setOrdering(PassageTally.ORDER_TALLY);
      tally.trimRanges(20);
    }
    txt_passg.setText(ref.getName());
    setDefaultName(param);
    updateDisplay();
    setCurrentAction(PASSAGE);
  }
 catch (  Exception ex) {
    Reporter.informUser(this,ex);
  }
}",0.9511111111111112
101774,"/** 
 * Remove a command listener
 */
public synchronized void addCommandListener(DisplaySelectListener li){
  Vector v=commandListeners == null ? new Vector(2) : (Vector)commandListeners.clone();
  if (!v.contains(li)) {
    v.addElement(li);
    commandListeners=v;
  }
}","/** 
 * Add a command listener
 */
public synchronized void addCommandListener(DisplaySelectListener li){
  List temp=new ArrayList(2);
  if (listeners != null) {
    temp.addAll(listeners);
  }
  if (!temp.contains(li)) {
    temp.add(li);
    listeners=temp;
  }
}",0.4267161410018553
101775,"/** 
 * Inform the version listeners
 */
protected void fireVersionChanged(DisplaySelectEvent ev){
  if (versionListeners != null) {
    Vector listeners=versionListeners;
    int count=listeners.size();
    for (int i=0; i < count; i++) {
      ((DisplaySelectListener)listeners.elementAt(i)).bookChosen(ev);
    }
  }
}","/** 
 * Inform the version listeners
 */
protected void fireVersionChanged(DisplaySelectEvent ev){
  if (listeners != null) {
    int count=listeners.size();
    for (int i=0; i < count; i++) {
      ((DisplaySelectListener)listeners.get(i)).bookChosen(ev);
    }
  }
}",0.9016949152542372
101776,"/** 
 * @see Remoter#execute(RemoteMethod)
 */
public Document execute(RemoteMethod method) throws RemoterException {
  String methodname=method.getMethodName();
  try {
    if (RemoteConstants.METHOD_GETBIBLES.equals(methodname)) {
      List lbmds=Books.getBooks(BookFilters.getFaster(Books.SPEED_SLOWEST));
      BibleMetaData[] bmds=(BibleMetaData[])lbmds.toArray(new BibleMetaData[lbmds.size()]);
      String[] uids=getUIDs(bmds);
      return Converter.convertBibleMetaDatasToDocument(bmds,uids);
    }
 else     if (RemoteConstants.METHOD_GETDATA.equals(methodname)) {
      String uid=method.getParameter(RemoteConstants.PARAM_BIBLE);
      BibleMetaData bmd=lookupBibleMetaData(uid);
      Bible bible=bmd.getBible();
      String refstr=method.getParameter(RemoteConstants.PARAM_PASSAGE);
      Passage ref=PassageFactory.createPassage(refstr);
      BibleData data=bible.getData(ref);
      SAXEventProvider provider=OsisUtil.getSAXEventProvider(data);
      SAXHandler handler=new SAXHandler();
      provider.provideSAXEvents(handler);
      return handler.getDocument();
    }
 else     if (RemoteConstants.METHOD_FINDPASSAGE.equals(methodname)) {
      String uid=method.getParameter(RemoteConstants.PARAM_BIBLE);
      BibleMetaData bmd=lookupBibleMetaData(uid);
      Bible bible=bmd.getBible();
      String word=method.getParameter(RemoteConstants.PARAM_FINDSTRING);
      boolean match=Boolean.getBoolean(method.getParameter(RemoteConstants.PARAM_FINDMATCH));
      String refstr=method.getParameter(RemoteConstants.PARAM_FINDRANGE);
      Passage range=PassageFactory.createPassage(refstr);
      Search search=new Search(word,match);
      search.setRestriction(range);
      Passage ref=bible.findPassage(search);
      return Converter.convertPassageToDocument(ref);
    }
 else {
      throw new RemoterException(""String_Node_Str"" + methodname);
    }
  }
 catch (  RemoterException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new RemoterException(""String_Node_Str"",ex);
  }
}","/** 
 * @see Remoter#execute(RemoteMethod)
 */
public Document execute(RemoteMethod method) throws RemoterException {
  String methodname=method.getMethodName();
  try {
    if (RemoteConstants.METHOD_GETBIBLES.equals(methodname)) {
      List lbmds=Books.getBooks(FILTER);
      BibleMetaData[] bmds=(BibleMetaData[])lbmds.toArray(new BibleMetaData[lbmds.size()]);
      String[] uids=getUIDs(bmds);
      return Converter.convertBibleMetaDatasToDocument(bmds,uids);
    }
 else     if (RemoteConstants.METHOD_GETDATA.equals(methodname)) {
      String uid=method.getParameter(RemoteConstants.PARAM_BIBLE);
      BibleMetaData bmd=lookupBibleMetaData(uid);
      Bible bible=bmd.getBible();
      String refstr=method.getParameter(RemoteConstants.PARAM_PASSAGE);
      Passage ref=PassageFactory.createPassage(refstr);
      BibleData data=bible.getData(ref);
      SAXEventProvider provider=OsisUtil.getSAXEventProvider(data);
      SAXHandler handler=new SAXHandler();
      provider.provideSAXEvents(handler);
      return handler.getDocument();
    }
 else     if (RemoteConstants.METHOD_FINDPASSAGE.equals(methodname)) {
      String uid=method.getParameter(RemoteConstants.PARAM_BIBLE);
      BibleMetaData bmd=lookupBibleMetaData(uid);
      Bible bible=bmd.getBible();
      String word=method.getParameter(RemoteConstants.PARAM_FINDSTRING);
      boolean match=Boolean.getBoolean(method.getParameter(RemoteConstants.PARAM_FINDMATCH));
      String refstr=method.getParameter(RemoteConstants.PARAM_FINDRANGE);
      Passage range=PassageFactory.createPassage(refstr);
      Search search=new Search(word,match);
      search.setRestriction(range);
      Passage ref=bible.findPassage(search);
      return Converter.convertPassageToDocument(ref);
    }
 else {
      throw new RemoterException(""String_Node_Str"" + methodname);
    }
  }
 catch (  RemoterException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new RemoterException(""String_Node_Str"",ex);
  }
}",0.9889944972486244
101777,"public void testGetBibles() throws Exception {
  List lbmds=Books.getBooks(BookFilters.getFaster(Books.SPEED_SLOWEST));
  BibleMetaData[] names1=(BibleMetaData[])lbmds.toArray(new BibleMetaData[lbmds.size()]);
  RemoteMethod method=new RemoteMethod(RemoteConstants.METHOD_GETBIBLES);
  Document doc=remote.execute(method);
  BibleMetaData[] names2=Converter.convertDocumentToBibleMetaDatas(doc,new FixtureRemoter(),Books.SPEED_INACCURATE);
  assertEquals(names1.length,names2.length);
  for (int i=0; i < names1.length; i++) {
    assertEquals(names1[i].getName(),names2[i].getName());
  }
}","public void testGetBibles() throws Exception {
  BookFilter filter=BookFilters.both(BookFilters.getFaster(Books.SPEED_SLOWEST),BookFilters.getBibles());
  List lbmds=Books.getBooks(filter);
  BibleMetaData[] names1=(BibleMetaData[])lbmds.toArray(new BibleMetaData[lbmds.size()]);
  RemoteMethod method=new RemoteMethod(RemoteConstants.METHOD_GETBIBLES);
  Document doc=remote.execute(method);
  BibleMetaData[] names2=Converter.convertDocumentToBibleMetaDatas(doc,new FixtureRemoter(),Books.SPEED_INACCURATE);
  assertEquals(names1.length,names2.length);
  for (int i=0; i < names1.length; i++) {
    assertEquals(names1[i].getName(),names2[i].getName());
  }
}",0.9121405750798722
101778,"/** 
 * Something has happened. We need to tell the user or someone. <p>Maybe we should have an extra parameter (or even several versions of this method like log*()) that describes the severity of the message. A Sw*ng listener could use this to decide the icon in the OptionPane for example.</p>
 * @param source The cause of the message, a Component if possible.
 * @param message The message to pass to the user
 */
public static void informUser(String message){
  fireCapture(new ReporterEvent(message));
}","/** 
 * Something has happened. We need to tell the user or someone. <p>Maybe we should have an extra parameter (or even several versions of this method like log*()) that describes the severity of the message. A Sw*ng listener could use this to decide the icon in the OptionPane for example.</p>
 * @param source The cause of the message, a Component if possible.
 * @param message The message to pass to the user
 */
public static void informUser(String message){
  log.debug(message);
  fireCapture(new ReporterEvent(message));
}",0.9788461538461538
101779,"/** 
 * Log a message
 * @param source Where the message comes from
 * @param message The text message
 */
protected static void fireCapture(ReporterEvent ev){
  try {
    Object[] listeners=inform_list.getListenerList();
    for (int i=listeners.length - 2; i >= 0; i-=2) {
      if (listeners[i] == ReporterListener.class) {
        ReporterListener li=(ReporterListener)listeners[i + 1];
        try {
          if (ev.getException() != null)           li.reportException(ev);
 else           li.reportMessage(ev);
        }
 catch (        Throwable ex) {
          if (ex instanceof ThreadDeath)           throw (ThreadDeath)ex;
          inform_list.remove(CaptureListener.class,li);
          log.warn(""String_Node_Str"",ex);
        }
      }
    }
  }
 catch (  Exception ex) {
    System.out.println(ex);
  }
}","/** 
 * Log a message
 * @param source Where the message comes from
 * @param message The text message
 */
protected static void fireCapture(ReporterEvent ev){
  try {
    Object[] listeners=inform_list.getListenerList();
    if (listeners.length == 0) {
      log.warn(""String_Node_Str"" + ev.getMessage());
    }
    for (int i=listeners.length - 2; i >= 0; i-=2) {
      if (listeners[i] == ReporterListener.class) {
        ReporterListener li=(ReporterListener)listeners[i + 1];
        try {
          if (ev.getException() != null)           li.reportException(ev);
 else           li.reportMessage(ev);
        }
 catch (        Throwable ex) {
          if (ex instanceof ThreadDeath)           throw (ThreadDeath)ex;
          inform_list.remove(CaptureListener.class,li);
          log.warn(""String_Node_Str"",ex);
        }
      }
    }
  }
 catch (  Exception ex) {
    System.out.println(ex);
  }
}",0.9468208092485548
101780,"/** 
 * Generic resource URL fetcher. One way or the other we'll find it!
 * @param search The name of the resource (without a leading /) to find
 * @return A URL of the found resource or null if we couldn't find one.
 */
public URL getResource(String search){
  URL reply=getClass().getResource(search);
  if (reply == null)   reply=getClass().getResource(""String_Node_Str"" + search);
  if (reply == null)   reply=getClass().getResource(""String_Node_Str"" + search);
  if (reply == null)   reply=getClass().getClassLoader().getResource(search);
  if (reply == null)   reply=getClass().getClassLoader().getResource(""String_Node_Str"" + search);
  if (reply == null)   reply=getClass().getClassLoader().getSystemResource(search);
  if (reply == null)   reply=getClass().getClassLoader().getSystemResource(""String_Node_Str"" + search);
  return reply;
}","/** 
 * Generic resource URL fetcher. One way or the other we'll find it!
 * @param search The name of the resource (without a leading /) to find
 * @return A URL of the found resource or null if we couldn't find one.
 */
public URL getResource(String search){
  URL reply=getClass().getResource(search);
  if (reply == null)   reply=getClass().getResource(""String_Node_Str"" + search);
  if (reply == null)   reply=getClass().getClassLoader().getResource(search);
  if (reply == null)   reply=getClass().getClassLoader().getResource(""String_Node_Str"" + search);
  if (reply == null)   reply=getClass().getClassLoader().getSystemResource(search);
  if (reply == null)   reply=getClass().getClassLoader().getSystemResource(""String_Node_Str"" + search);
  return reply;
}",0.8024767801857585
101781,"/** 
 * Get a list of the Books available from the driver
 * @return an array of book names
 */
public String[] getBibleNames(){
  if (dir == null)   return new String[0];
  try {
    if (dir.getProtocol().equals(""String_Node_Str"")) {
      File fdir=new File(dir.getFile());
      if (!fdir.isDirectory()) {
        return new String[0];
      }
      return fdir.list(new CustomFilenameFilter());
    }
 else {
      URL search=NetUtil.lengthenURL(dir,""String_Node_Str"");
      InputStream in=search.openStream();
      String contents=StringUtil.read(new InputStreamReader(in));
      return StringUtil.tokenize(contents,""String_Node_Str"");
    }
  }
 catch (  IOException ex) {
    log.warn(""String_Node_Str"" + ex);
    return new String[0];
  }
}","/** 
 * Get a list of the Books available from the driver
 * @return an array of book names
 */
public String[] getBibleNames(){
  if (dir == null)   return new String[0];
  try {
    if (dir.getProtocol().equals(""String_Node_Str"")) {
      File fdir=new File(dir.getFile());
      if (!fdir.isDirectory()) {
        return new String[0];
      }
      return fdir.list(new CustomFilenameFilter());
    }
 else {
      URL search=NetUtil.lengthenURL(dir,""String_Node_Str"");
      InputStream in=search.openStream();
      String contents=StringUtil.read(new InputStreamReader(in));
      String[] names=StringUtil.tokenize(contents,""String_Node_Str"");
      for (int i=0; i < names.length; i++) {
        names[i]=names[i].trim();
      }
      return names;
    }
  }
 catch (  IOException ex) {
    log.warn(""String_Node_Str"" + ex);
    return new String[0];
  }
}",0.9202226345083488
101782,"/** 
 * Initialize the GUI, and display it.
 */
private void jbInit(){
  splash.setProgress(22,""String_Node_Str"");
  menu_file.setText(""String_Node_Str"");
  menu_file.setMnemonic('F');
  menu_file.add(act_file_new).addMouseListener(bar_status);
  menu_file.add(act_file_open).addMouseListener(bar_status);
  menu_file.addSeparator();
  menu_file.add(act_file_close).addMouseListener(bar_status);
  menu_file.add(act_file_closeall).addMouseListener(bar_status);
  menu_file.addSeparator();
  menu_file.add(act_file_print).addMouseListener(bar_status);
  menu_file.addSeparator();
  menu_file.add(act_file_save).addMouseListener(bar_status);
  menu_file.add(act_file_saveas).addMouseListener(bar_status);
  menu_file.add(act_file_saveall).addMouseListener(bar_status);
  menu_file.addSeparator();
  menu_file.add(act_file_exit).addMouseListener(bar_status);
  splash.setProgress(25,""String_Node_Str"");
  menu_edit.setText(""String_Node_Str"");
  menu_edit.setMnemonic('E');
  menu_edit.add(act_edit_cut).addMouseListener(bar_status);
  menu_edit.add(act_edit_copy).addMouseListener(bar_status);
  menu_edit.add(act_edit_paste).addMouseListener(bar_status);
  rdo_view_tdi.addMouseListener(bar_status);
  rdo_view_mdi.addMouseListener(bar_status);
  rdo_view_sdi.addMouseListener(bar_status);
  chk_view_tbar.addMouseListener(bar_status);
  chk_view_sbar.addMouseListener(bar_status);
  rdo_view_sdi.setSelected(true);
  chk_view_tbar.setSelected(view_status);
  chk_view_sbar.setSelected(view_tool);
  grp_views.add(rdo_view_mdi);
  grp_views.add(rdo_view_sdi);
  grp_views.add(rdo_view_tdi);
  splash.setProgress(27,""String_Node_Str"");
  menu_view.setText(""String_Node_Str"");
  menu_view.setMnemonic('V');
  menu_view.add(rdo_view_sdi);
  menu_view.add(rdo_view_tdi);
  menu_view.add(rdo_view_mdi);
  menu_view.addSeparator();
  menu_view.add(chk_view_tbar);
  menu_view.add(chk_view_sbar);
  splash.setProgress(30,""String_Node_Str"");
  menu_list.setText(""String_Node_Str"");
  menu_list.setMnemonic('L');
  menu_list.add(act_list_toggle).addMouseListener(bar_status);
  menu_list.addSeparator();
  menu_list.add(act_edit_blur1).addMouseListener(bar_status);
  menu_list.add(act_edit_blur5).addMouseListener(bar_status);
  menu_list.addSeparator();
  menu_list.add(act_list_delete).addMouseListener(bar_status);
  splash.setProgress(32,""String_Node_Str"");
  menu_tools.setText(""String_Node_Str"");
  menu_tools.setMnemonic('T');
  menu_tools.add(act_tools_generate).addMouseListener(bar_status);
  menu_tools.add(act_tools_diff).addMouseListener(bar_status);
  menu_tools.addSeparator();
  menu_tools.add(act_tools_options).addMouseListener(bar_status);
  splash.setProgress(35,""String_Node_Str"");
  menu_help.setText(""String_Node_Str"");
  menu_help.setMnemonic('H');
  menu_help.add(act_help_contents).addMouseListener(bar_status);
  menu_help.addSeparator();
  menu_help.add(act_help_system).addMouseListener(bar_status);
  menu_help.add(act_help_log).addMouseListener(bar_status);
  menu_help.addSeparator();
  menu_help.add(act_help_about).addMouseListener(bar_status);
  menu_help.addSeparator();
  menu_help.add(act_help_debug).addMouseListener(bar_status);
  splash.setProgress(37,""String_Node_Str"");
  bar_menu.add(menu_file);
  bar_menu.add(menu_edit);
  bar_menu.add(menu_view);
  bar_menu.add(menu_list);
  bar_menu.add(menu_tools);
  bar_menu.add(menu_help);
  pnl_tbar.setRollover(true);
  pnl_tbar.add(act_file_new).addMouseListener(bar_status);
  pnl_tbar.add(act_file_open).addMouseListener(bar_status);
  pnl_tbar.add(act_file_save).addMouseListener(bar_status);
  pnl_tbar.addSeparator();
  pnl_tbar.add(act_edit_cut).addMouseListener(bar_status);
  pnl_tbar.add(act_edit_copy).addMouseListener(bar_status);
  pnl_tbar.add(act_edit_paste).addMouseListener(bar_status);
  pnl_tbar.addSeparator();
  pnl_tbar.add(act_tools_generate).addMouseListener(bar_status);
  pnl_tbar.add(act_tools_diff).addMouseListener(bar_status);
  pnl_tbar.addSeparator();
  pnl_tbar.add(act_help_contents).addMouseListener(bar_status);
  pnl_tbar.add(act_help_system).addMouseListener(bar_status);
  pnl_tbar.add(act_help_log).addMouseListener(bar_status);
  pnl_tbar.add(act_help_about).addMouseListener(bar_status);
  splash.setProgress(40,""String_Node_Str"");
  this.addWindowListener(new WindowAdapter(){
    public void windowClosed(    WindowEvent ev){
      act_file_exit.actionPerformed(null);
    }
  }
);
  this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  this.getContentPane().setLayout(new BorderLayout());
  this.getContentPane().add(pnl_tbar,BorderLayout.NORTH);
  this.getContentPane().add(bar_status,BorderLayout.SOUTH);
  this.setJMenuBar(bar_menu);
  this.setEnabled(true);
  this.setTitle(""String_Node_Str"");
  accelerateMenu(bar_menu);
}","/** 
 * Initialize the GUI, and display it.
 */
private void jbInit(){
  splash.setProgress(22,""String_Node_Str"");
  menu_file.setText(""String_Node_Str"");
  menu_file.setMnemonic('F');
  menu_file.add(act_file_new).addMouseListener(bar_status);
  menu_file.add(act_file_open).addMouseListener(bar_status);
  menu_file.addSeparator();
  menu_file.add(act_file_close).addMouseListener(bar_status);
  menu_file.add(act_file_closeall).addMouseListener(bar_status);
  menu_file.addSeparator();
  menu_file.add(act_file_print).addMouseListener(bar_status);
  menu_file.addSeparator();
  menu_file.add(act_file_save).addMouseListener(bar_status);
  menu_file.add(act_file_saveas).addMouseListener(bar_status);
  menu_file.add(act_file_saveall).addMouseListener(bar_status);
  menu_file.addSeparator();
  menu_file.add(act_file_exit).addMouseListener(bar_status);
  splash.setProgress(25,""String_Node_Str"");
  menu_edit.setText(""String_Node_Str"");
  menu_edit.setMnemonic('E');
  menu_edit.add(act_edit_cut).addMouseListener(bar_status);
  menu_edit.add(act_edit_copy).addMouseListener(bar_status);
  menu_edit.add(act_edit_paste).addMouseListener(bar_status);
  rdo_view_tdi.addMouseListener(bar_status);
  rdo_view_mdi.addMouseListener(bar_status);
  rdo_view_sdi.addMouseListener(bar_status);
  chk_view_tbar.addMouseListener(bar_status);
  chk_view_sbar.addMouseListener(bar_status);
  rdo_view_sdi.setSelected(true);
  chk_view_tbar.setSelected(view_status);
  chk_view_sbar.setSelected(view_tool);
  grp_views.add(rdo_view_mdi);
  grp_views.add(rdo_view_sdi);
  grp_views.add(rdo_view_tdi);
  splash.setProgress(27,""String_Node_Str"");
  menu_view.setText(""String_Node_Str"");
  menu_view.setMnemonic('V');
  menu_view.add(rdo_view_sdi);
  menu_view.add(rdo_view_tdi);
  menu_view.add(rdo_view_mdi);
  menu_view.addSeparator();
  menu_view.add(chk_view_tbar);
  menu_view.add(chk_view_sbar);
  splash.setProgress(30,""String_Node_Str"");
  menu_list.setText(""String_Node_Str"");
  menu_list.setMnemonic('L');
  menu_list.add(act_list_toggle).addMouseListener(bar_status);
  menu_list.addSeparator();
  menu_list.add(act_edit_blur1).addMouseListener(bar_status);
  menu_list.add(act_edit_blur5).addMouseListener(bar_status);
  menu_list.addSeparator();
  menu_list.add(act_list_delete).addMouseListener(bar_status);
  splash.setProgress(32,""String_Node_Str"");
  menu_tools.setText(""String_Node_Str"");
  menu_tools.setMnemonic('T');
  menu_tools.add(act_tools_generate).addMouseListener(bar_status);
  menu_tools.add(act_tools_diff).addMouseListener(bar_status);
  menu_tools.addSeparator();
  menu_tools.add(act_tools_options).addMouseListener(bar_status);
  splash.setProgress(35,""String_Node_Str"");
  menu_help.setText(""String_Node_Str"");
  menu_help.setMnemonic('H');
  menu_help.add(act_help_contents).addMouseListener(bar_status);
  menu_help.addSeparator();
  menu_help.add(act_help_system).addMouseListener(bar_status);
  menu_help.add(act_help_log).addMouseListener(bar_status);
  menu_help.addSeparator();
  menu_help.add(act_help_about).addMouseListener(bar_status);
  menu_help.addSeparator();
  menu_help.add(act_help_debug).addMouseListener(bar_status);
  splash.setProgress(37,""String_Node_Str"");
  bar_menu.add(menu_file);
  bar_menu.add(menu_edit);
  bar_menu.add(menu_view);
  bar_menu.add(menu_list);
  bar_menu.add(menu_tools);
  bar_menu.add(menu_help);
  try {
    Class cl=pnl_tbar.getClass();
    Class[] clArr={Boolean.TYPE};
    Method meth=cl.getMethod(""String_Node_Str"",clArr);
    if (meth != null) {
      Object[] argArr={Boolean.TRUE};
      meth.invoke(pnl_tbar,argArr);
    }
  }
 catch (  NoSuchMethodException nsme) {
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  pnl_tbar.add(act_file_new).addMouseListener(bar_status);
  pnl_tbar.add(act_file_open).addMouseListener(bar_status);
  pnl_tbar.add(act_file_save).addMouseListener(bar_status);
  pnl_tbar.addSeparator();
  pnl_tbar.add(act_edit_cut).addMouseListener(bar_status);
  pnl_tbar.add(act_edit_copy).addMouseListener(bar_status);
  pnl_tbar.add(act_edit_paste).addMouseListener(bar_status);
  pnl_tbar.addSeparator();
  pnl_tbar.add(act_tools_generate).addMouseListener(bar_status);
  pnl_tbar.add(act_tools_diff).addMouseListener(bar_status);
  pnl_tbar.addSeparator();
  pnl_tbar.add(act_help_contents).addMouseListener(bar_status);
  pnl_tbar.add(act_help_system).addMouseListener(bar_status);
  pnl_tbar.add(act_help_log).addMouseListener(bar_status);
  pnl_tbar.add(act_help_about).addMouseListener(bar_status);
  splash.setProgress(40,""String_Node_Str"");
  this.addWindowListener(new WindowAdapter(){
    public void windowClosed(    WindowEvent ev){
      act_file_exit.actionPerformed(null);
    }
  }
);
  this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  this.getContentPane().setLayout(new BorderLayout());
  this.getContentPane().add(pnl_tbar,BorderLayout.NORTH);
  this.getContentPane().add(bar_status,BorderLayout.SOUTH);
  this.setJMenuBar(bar_menu);
  this.setEnabled(true);
  this.setTitle(""String_Node_Str"");
  accelerateMenu(bar_menu);
}",0.9637990644702054
101783,"private Object tryResolveObject(final ObjectWithPath<Object> objectWithPath){
  try {
    return resolveObject(objectWithPath);
  }
 catch (  final IllegalStateException e) {
    log.warn(e);
    return objectWithPath.getObject();
  }
}","private Object tryResolveObject(final ObjectWithPath<? extends Object> objectWithPath){
  try {
    return resolveObject(objectWithPath);
  }
 catch (  final IllegalStateException e) {
    log.warn(e);
    return objectWithPath.getObject();
  }
}",0.979253112033195
101784,"private Object resolveObject(final ObjectWithPath<Object> objectWithPath){
  final Object object=objectWithPath.getObject();
  final StringBuilder path=new StringBuilder();
  path.append(objectWithPath.getPath());
  path.append(""String_Node_Str"");
  path.append(""String_Node_Str"" + modelUtil.getGroupId(object) + ""String_Node_Str"");
  path.append(""String_Node_Str"" + modelUtil.getArtifactId(object) + ""String_Node_Str"");
  final String type=modelUtil.tryGetType(object);
  if (type != null) {
    path.append(""String_Node_Str"" + type + ""String_Node_Str"");
  }
  final String classifier=modelUtil.tryGetClassifier(object);
  if (classifier != null) {
    path.append(""String_Node_Str"" + classifier + ""String_Node_Str"");
  }
  path.append(""String_Node_Str"");
  final Model model=objectWithPath.getProject().getModel();
  final Collection<Object> objects=expressionEvaluator.getPath(model,path.toString());
  if (objects.isEmpty()) {
    throw new IllegalStateException(""String_Node_Str"" + object + ""String_Node_Str""+ path);
  }
 else   if (objects.size() > 1) {
    throw new IllegalStateException(""String_Node_Str"" + objects.size() + ""String_Node_Str""+ path);
  }
 else {
    return objects.iterator().next();
  }
}","/** 
 * This uses the path of an object that was found in the ""original model"", and tries to find the same object in the ""model"".  The ""model"" has had properties replaced with values, so this is how we find the resolved version of the object.
 */
private Object resolveObject(final ObjectWithPath<? extends Object> objectWithPath){
  final Object object=objectWithPath.getObject();
  final StringBuilder path=new StringBuilder();
  path.append(objectWithPath.getPath());
  path.append(""String_Node_Str"");
  path.append(""String_Node_Str"" + modelUtil.getGroupId(object) + ""String_Node_Str"");
  path.append(""String_Node_Str"" + modelUtil.getArtifactId(object) + ""String_Node_Str"");
  final String type=modelUtil.tryGetType(object);
  if (type != null) {
    path.append(""String_Node_Str"" + type + ""String_Node_Str"");
  }
  final String classifier=modelUtil.tryGetClassifier(object);
  if (classifier != null) {
    path.append(""String_Node_Str"" + classifier + ""String_Node_Str"");
  }
  path.append(""String_Node_Str"");
  final Model model=objectWithPath.getProject().getModel();
  final Collection<Object> objects=expressionEvaluator.getPath(model,path.toString());
  if (objects.isEmpty()) {
    throw new IllegalStateException(""String_Node_Str"" + object + ""String_Node_Str""+ path);
  }
 else   if (objects.size() > 1) {
    throw new IllegalStateException(""String_Node_Str"" + objects.size() + ""String_Node_Str""+ path);
  }
 else {
    return objects.iterator().next();
  }
}",0.3165735567970205
101785,"protected void checkForRedundantVersions(final MavenProject mavenProject,final ResultCollector resultCollector,final ObjectWithPath<Object> object,final ObjectWithPath<Object> inheritedObject,final String dependencyDescription,final String inheritedDescription){
  final Object modelObject=object.getObject();
  final Object resolvedModelObject=tryResolveObject(object);
  if (isExcluded(resolvedModelObject)) {
    return;
  }
  final String version=resolveVersion(modelObject,resolvedModelObject);
  final String inheritedVersion=modelUtil.getVersion(tryResolveObject(inheritedObject));
  if (version != null && inheritedVersion != null && inheritedVersion.equals(version)) {
    final InputLocation location=modelUtil.getLocation(modelObject,""String_Node_Str"");
    resultCollector.addViolation(mavenProject,this,dependencyDescription + ""String_Node_Str"" + modelUtil.getKey(modelObject)+ ""String_Node_Str""+ version+ ""String_Node_Str""+ inheritedDescription,location);
  }
}","protected void checkForRedundantVersions(final MavenProject mavenProject,final ResultCollector resultCollector,final ObjectWithPath<? extends Object> object,final ObjectWithPath<? extends Object> inheritedObject,final String dependencyDescription,final String inheritedDescription){
  final Object modelObject=object.getObject();
  final Object resolvedModelObject=tryResolveObject(object);
  if (isExcluded(resolvedModelObject)) {
    return;
  }
  final String version=resolveVersion(modelObject,resolvedModelObject);
  final String inheritedVersion=modelUtil.getVersion(tryResolveObject(inheritedObject));
  if (version != null && inheritedVersion != null && inheritedVersion.equals(version)) {
    final InputLocation location=modelUtil.getLocation(modelObject,""String_Node_Str"");
    resultCollector.addViolation(mavenProject,this,dependencyDescription + ""String_Node_Str"" + modelUtil.getKey(modelObject)+ ""String_Node_Str""+ version+ ""String_Node_Str""+ inheritedDescription,location);
  }
}",0.9898477157360406
101786,"@Override public void invoke(final MavenProject mavenProject,final Map<String,Object> models,final ResultCollector resultCollector){
  final Model originalModel=mavenProject.getOriginalModel();
  final Collection<Dependency> dependencies=expressionEvaluator.getPath(originalModel,""String_Node_Str"");
  final Collection<Dependency> managedDependencies=expressionEvaluator.getPath(originalModel,""String_Node_Str"");
  final Map<String,Dependency> managedDependenciesByManagementKey=modelUtil.mapByManagementKey(managedDependencies);
  for (  final Dependency dependency : dependencies) {
    final Dependency managedDependency=managedDependenciesByManagementKey.get(dependency.getManagementKey());
    if (managedDependency != null) {
      checkForRedundantVersions(mavenProject,resultCollector,new ObjectWithPath<Object>(dependency,mavenProject,""String_Node_Str""),new ObjectWithPath<Object>(managedDependency,mavenProject,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
    }
    final ExtDependency inheritedDependency=modelUtil.findInheritedDependency(mavenProject,dependency);
    if (inheritedDependency != null) {
      checkForRedundantVersions(mavenProject,resultCollector,new ObjectWithPath<Object>(dependency,mavenProject,""String_Node_Str""),new ObjectWithPath<Object>(inheritedDependency,inheritedDependency.getMavenProject(),null),""String_Node_Str"",""String_Node_Str"" + inheritedDependency.getMavenProject().getId());
    }
  }
  for (  final Dependency managedDependency : managedDependencies) {
    final ExtDependency inheritedDependency=modelUtil.findInheritedDependency(mavenProject,managedDependency);
    if (inheritedDependency != null) {
      checkForRedundantVersions(mavenProject,resultCollector,new ObjectWithPath<Object>(managedDependency,mavenProject,""String_Node_Str""),new ObjectWithPath<Object>(inheritedDependency,inheritedDependency.getMavenProject(),null),""String_Node_Str"",""String_Node_Str"" + inheritedDependency.getMavenProject().getId());
    }
  }
}","@Override public void invoke(final MavenProject mavenProject,final Map<String,Object> models,final ResultCollector resultCollector){
  final Model originalModel=mavenProject.getOriginalModel();
  final Collection<Dependency> dependencies=expressionEvaluator.getPath(originalModel,""String_Node_Str"");
  final Collection<Dependency> managedDependencies=expressionEvaluator.getPath(originalModel,""String_Node_Str"");
  final Map<String,Dependency> managedDependenciesByManagementKey=modelUtil.mapByManagementKey(managedDependencies);
  for (  final Dependency dependency : dependencies) {
    final Dependency managedDependency=managedDependenciesByManagementKey.get(dependency.getManagementKey());
    if (managedDependency != null) {
      checkForRedundantVersions(mavenProject,resultCollector,new ObjectWithPath<Object>(dependency,mavenProject,""String_Node_Str""),new ObjectWithPath<Object>(managedDependency,mavenProject,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
    }
    final ObjectWithPath<ExtDependency> inheritedDependency=modelUtil.findInheritedDependency(mavenProject,dependency);
    if (inheritedDependency != null) {
      checkForRedundantVersions(mavenProject,resultCollector,new ObjectWithPath<Object>(dependency,mavenProject,""String_Node_Str""),inheritedDependency,""String_Node_Str"",""String_Node_Str"" + inheritedDependency.getProject().getId());
    }
  }
  for (  final Dependency managedDependency : managedDependencies) {
    final ObjectWithPath<ExtDependency> inheritedDependency=modelUtil.findInheritedDependency(mavenProject,managedDependency);
    if (inheritedDependency != null) {
      checkForRedundantVersions(mavenProject,resultCollector,new ObjectWithPath<Object>(managedDependency,mavenProject,""String_Node_Str""),inheritedDependency,""String_Node_Str"",""String_Node_Str"" + inheritedDependency.getProject().getId());
    }
  }
}",0.689119170984456
101787,"public ExtDependency findInheritedDependency(final MavenProject mavenProject,final Dependency dependency){
  final MavenProject parent=mavenProject.getParent();
  if (parent != null) {
    final Map<String,Dependency> dependencies=mapByManagementKey(expressionEvaluator.<Dependency>getPath(parent.getOriginalModel(),""String_Node_Str""));
    final Map<String,Dependency> managedDependencies=mapByManagementKey(expressionEvaluator.<Dependency>getPath(parent.getOriginalModel(),""String_Node_Str""));
    final Dependency parentDependency=dependencies.get(dependency.getManagementKey());
    if (parentDependency != null) {
      return new ExtDependency(parent,parentDependency);
    }
    final Dependency parentManagedDependency=managedDependencies.get(dependency.getManagementKey());
    if (parentManagedDependency != null) {
      return new ExtDependency(parent,parentManagedDependency);
    }
    return findInheritedDependency(parent,dependency);
  }
  return null;
}","public ObjectWithPath<ExtDependency> findInheritedDependency(final MavenProject mavenProject,final Dependency dependency){
  final MavenProject parent=mavenProject.getParent();
  if (parent != null) {
    final Map<String,Dependency> dependencies=mapByManagementKey(expressionEvaluator.<Dependency>getPath(parent.getOriginalModel(),""String_Node_Str""));
    final Map<String,Dependency> managedDependencies=mapByManagementKey(expressionEvaluator.<Dependency>getPath(parent.getOriginalModel(),""String_Node_Str""));
    final Dependency parentDependency=dependencies.get(dependency.getManagementKey());
    if (parentDependency != null) {
      return new ObjectWithPath<ExtDependency>(new ExtDependency(parent,parentDependency),parent,""String_Node_Str"");
    }
    final Dependency parentManagedDependency=managedDependencies.get(dependency.getManagementKey());
    if (parentManagedDependency != null) {
      return new ObjectWithPath<ExtDependency>(new ExtDependency(parent,parentManagedDependency),parent,""String_Node_Str"");
    }
    return findInheritedDependency(parent,dependency);
  }
  return null;
}",0.9345524542829644
101788,"private void addEmptySlot(){
  if (inventory.size() > 35) {
    return;
  }
  List<InventorySlot> outInventory=new ArrayList<InventorySlot>();
  for (int i=0; i < tempInventory.size(); i++) {
    if (tempInventory.get(i).getSlot() < 9) {
      outInventory.add(tempInventory.get(i));
    }
  }
  InventorySlot slot=new InventorySlot((byte)(inventory.size() + 9),new ItemStack((short)0,(short)0,(short)0));
  inventory.add(slot);
  inventoryListAdapter.notifyDataSetChanged();
  outInventory.addAll(inventory);
  EditorActivity.level.getPlayer().setInventory(outInventory);
  EditorActivity.save(this);
}","private void addEmptySlot(){
  if (inventory.size() > 35) {
    return;
  }
  List<InventorySlot> outInventory=new ArrayList<InventorySlot>();
  for (int i=0; i < tempInventory.size(); i++) {
    if (tempInventory.get(i).getSlot() < 9) {
      outInventory.add(tempInventory.get(i));
    }
  }
  InventorySlot slot=new InventorySlot((byte)(inventory.size() + 9),new ItemStack((short)0,(short)0,(short)0));
  alignSlots();
  inventory.add(slot);
  inventoryListAdapter.notifyDataSetChanged();
  outInventory.addAll(inventory);
  EditorActivity.level.getPlayer().setInventory(outInventory);
  EditorActivity.save(this);
}",0.9869067103109656
101789,"public void log(String message,int i){
  if (getConfiguration().logConsole()) {
    Bukkit.getConsoleSender().sendMessage(ChatColor.RED + message);
  }
  if (i == 0 && getConfiguration().getFileLogLevel() == LOG_LEVEL_HIGH) {
    fileLog(message);
  }
 else   if (getConfiguration().getFileLogLevel() != 0) {
    fileLog(message);
  }
  logs.add(ChatColor.stripColor(message));
}","public void log(String message,int i){
  if (i != 1 && getConfiguration().logConsole()) {
    Bukkit.getConsoleSender().sendMessage(ChatColor.RED + message);
  }
  if (i == 0 && getConfiguration().getFileLogLevel() == LOG_LEVEL_HIGH) {
    fileLog(message);
  }
 else   if (getConfiguration().getFileLogLevel() != 0) {
    fileLog(message);
  }
  logs.add(ChatColor.stripColor(message));
}",0.9869791666666666
101790,"public void alert(User user,Level level,CheckType type){
  List<String> messageArray=lang.getAlert();
  for (int i=0; i < messageArray.size(); i++) {
    String message=messageArray.get(i);
    message=message.replaceAll(""String_Node_Str"",GOLD + user.getName() + GRAY);
    message=message.replaceAll(""String_Node_Str"",GOLD + CheckType.getName(type) + GRAY);
    message=message.replaceAll(""String_Node_Str"",level.getColor() + level.getName() + GRAY);
    messageArray.set(i,message);
  }
  Utilities.alert(messageArray);
  execute(user,level.getActions(),type);
}","public void alert(User user,Level level,CheckType type){
  List<String> messageArray=config.getLang().getAlert();
  for (int i=0; i < messageArray.size(); i++) {
    String message=messageArray.get(i);
    message=message.replaceAll(""String_Node_Str"",GOLD + user.getName() + GRAY);
    message=message.replaceAll(""String_Node_Str"",GOLD + CheckType.getName(type) + GRAY);
    message=message.replaceAll(""String_Node_Str"",level.getColor() + level.getName() + GRAY);
    messageArray.set(i,message);
  }
  Utilities.alert(messageArray);
  execute(user,level.getActions(),type);
}",0.9824561403508772
101791,"public UserManager(Configuration conf){
  config=conf;
  lang=conf.getLang();
}","public UserManager(Configuration conf){
  config=conf;
}",0.8296296296296296
101792,"public void execute(User user,List<String> actions,CheckType type){
  final String name=user.getName();
  for (  String event : actions) {
    event=event.replaceAll(""String_Node_Str"",name).replaceAll(""String_Node_Str"",user.getPlayer().getWorld().getName()).replaceAll(""String_Node_Str"",type.name());
    if (event.startsWith(""String_Node_Str"")) {
      for (      String cmd : Utilities.getCommands(event)) {
        Bukkit.getServer().dispatchCommand(Bukkit.getConsoleSender(),cmd);
      }
    }
 else     if (event.equalsIgnoreCase(""String_Node_Str"")) {
      user.getPlayer().kickPlayer(RED + lang.getKickReason());
      String msg=RED + lang.getKickBroadcast().replaceAll(""String_Node_Str"",name);
      if (!msg.equals(""String_Node_Str"")) {
        Bukkit.broadcastMessage(msg);
      }
    }
 else     if (event.equalsIgnoreCase(""String_Node_Str"")) {
      List<String> message=lang.getWarning();
      for (      String string : message) {
        user.getPlayer().sendMessage(RED + string);
      }
    }
 else     if (event.equalsIgnoreCase(""String_Node_Str"")) {
      user.getPlayer().setBanned(true);
      user.getPlayer().kickPlayer(RED + lang.getBanReason());
      String msg=RED + lang.getBanBroadcast().replaceAll(""String_Node_Str"",name);
      if (!msg.equals(""String_Node_Str"")) {
        Bukkit.broadcastMessage(msg);
      }
    }
  }
}","public void execute(User user,List<String> actions,CheckType type){
  final String name=user.getName();
  for (  String event : actions) {
    event=event.replaceAll(""String_Node_Str"",name).replaceAll(""String_Node_Str"",user.getPlayer().getWorld().getName()).replaceAll(""String_Node_Str"",type.name());
    if (event.startsWith(""String_Node_Str"")) {
      for (      String cmd : Utilities.getCommands(event)) {
        Bukkit.getServer().dispatchCommand(Bukkit.getConsoleSender(),cmd);
      }
    }
 else     if (event.equalsIgnoreCase(""String_Node_Str"")) {
      user.getPlayer().kickPlayer(RED + config.getLang().getKickReason());
      String msg=RED + config.getLang().getKickBroadcast().replaceAll(""String_Node_Str"",name);
      if (!msg.equals(""String_Node_Str"")) {
        Bukkit.broadcastMessage(msg);
      }
    }
 else     if (event.equalsIgnoreCase(""String_Node_Str"")) {
      List<String> message=config.getLang().getWarning();
      for (      String string : message) {
        user.getPlayer().sendMessage(RED + string);
      }
    }
 else     if (event.equalsIgnoreCase(""String_Node_Str"")) {
      user.getPlayer().setBanned(true);
      user.getPlayer().kickPlayer(RED + config.getLang().getBanReason());
      String msg=RED + config.getLang().getBanBroadcast().replaceAll(""String_Node_Str"",name);
      if (!msg.equals(""String_Node_Str"")) {
        Bukkit.broadcastMessage(msg);
      }
    }
  }
}",0.9640028797696184
101793,"public Language(FileConfiguration file,File f){
  this.file=file;
  this.f=f;
  List<String> list=file.getStringList(""String_Node_Str"");
  if (list != null && list.size() > 0) {
    list.set(1,""String_Node_Str"");
    file.set(""String_Node_Str"",null);
    file.set(""String_Node_Str"",list);
    save();
  }
  List<String> temp=file.getStringList(""String_Node_Str"");
  alert=new ArrayList<String>();
  alert.add(GOLD + ""String_Node_Str"" + GRAY+ ""String_Node_Str""+ GOLD+ ""String_Node_Str"");
  for (int i=0; i < temp.size(); i++) {
    alert.add(GRAY + temp.get(i));
  }
  alert.add(GOLD + ""String_Node_Str"");
  warning=file.getStringList(""String_Node_Str"");
  banReason=getString(""String_Node_Str"",""String_Node_Str"");
  banBroadcast=getString(""String_Node_Str"",""String_Node_Str"");
  kickReason=getString(""String_Node_Str"",""String_Node_Str"");
  kickBroadcast=getString(""String_Node_Str"",""String_Node_Str"");
  chatWarning=getString(""String_Node_Str"",""String_Node_Str"");
  chatKickReason=getString(""String_Node_Str"",""String_Node_Str"");
  chatBanReason=getString(""String_Node_Str"",""String_Node_Str"");
  chatKickBroadcast=getString(""String_Node_Str"",""String_Node_Str"");
  chatBanBroadcast=getString(""String_Node_Str"",""String_Node_Str"");
  save();
}","public Language(FileConfiguration file,File f){
  this.file=file;
  this.f=f;
  List<String> list=file.getStringList(""String_Node_Str"");
  if (list != null && list.size() > 0) {
    list.set(0,""String_Node_Str"");
    file.set(""String_Node_Str"",null);
    file.set(""String_Node_Str"",null);
    file.set(""String_Node_Str"",list);
    save();
  }
  List<String> defAlert=new ArrayList<String>();
  defAlert.add(""String_Node_Str"");
  defAlert.add(""String_Node_Str"");
  defAlert.add(""String_Node_Str"");
  List<String> temp=getStringList(""String_Node_Str"",defAlert);
  alert=new ArrayList<String>();
  alert.add(GOLD + ""String_Node_Str"" + GRAY+ ""String_Node_Str""+ GOLD+ ""String_Node_Str"");
  for (int i=0; i < temp.size(); i++) {
    alert.add(GRAY + temp.get(i));
  }
  alert.add(GOLD + ""String_Node_Str"");
  List<String> defWarning=new ArrayList<String>();
  defWarning.add(""String_Node_Str"");
  defWarning.add(""String_Node_Str"");
  warning=getStringList(""String_Node_Str"",defWarning);
  banReason=getString(""String_Node_Str"",""String_Node_Str"");
  banBroadcast=getString(""String_Node_Str"",""String_Node_Str"");
  kickReason=getString(""String_Node_Str"",""String_Node_Str"");
  kickBroadcast=getString(""String_Node_Str"",""String_Node_Str"");
  chatWarning=getString(""String_Node_Str"",""String_Node_Str"");
  chatKickReason=getString(""String_Node_Str"",""String_Node_Str"");
  chatBanReason=getString(""String_Node_Str"",""String_Node_Str"");
  chatKickBroadcast=getString(""String_Node_Str"",""String_Node_Str"");
  chatBanBroadcast=getString(""String_Node_Str"",""String_Node_Str"");
  save();
}",0.8513368983957219
101794,"public void handleHelp(CommandSender cs){
  if (hasPermission(cs,Permission.SYSTEM_HELP)) {
    String base=""String_Node_Str"";
    String[] lines={""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str""};
    cs.sendMessage(""String_Node_Str"" + GREEN + ""String_Node_Str""+ WHITE+ ""String_Node_Str"");
    for (    String s : lines) {
      cs.sendMessage(base + GREEN + s);
    }
    cs.sendMessage(MENU_END);
  }
}","public void handleHelp(CommandSender cs){
  if (hasPermission(cs,Permission.SYSTEM_HELP)) {
    String base=""String_Node_Str"";
    String[] lines={""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str"",""String_Node_Str"" + WHITE + ""String_Node_Str""};
    cs.sendMessage(""String_Node_Str"" + GREEN + ""String_Node_Str""+ WHITE+ ""String_Node_Str"");
    for (    String s : lines) {
      cs.sendMessage(base + GREEN + s);
    }
  }
}",0.9812734082397004
101795,"public void alert(User user,Level level,CheckType type){
  final String name=user.getName();
  List<String> messageArray=config.getLang().getAlert();
  for (int i=0; i < messageArray.size(); i++) {
    String message=messageArray.get(i);
    message=message.replaceAll(""String_Node_Str"",GOLD + name + GRAY);
    message=message.replaceAll(""String_Node_Str"",GOLD + CheckType.getName(type) + GRAY);
    message=message.replaceAll(""String_Node_Str"",level.getColor() + level.getName() + GRAY);
    messageArray.set(i,message);
  }
  Utilities.alert(messageArray);
  execute(user,level.getActions(),type);
}","public void alert(User user,Level level,CheckType type){
  ArrayList<String> messageArray=new ArrayList<String>();
  for (int i=0; i < alert.size(); i++) {
    String message=alert.get(i);
    message=message.replaceAll(""String_Node_Str"",GOLD + user.getName() + GRAY);
    message=message.replaceAll(""String_Node_Str"",GOLD + CheckType.getName(type) + GRAY);
    message=message.replaceAll(""String_Node_Str"",level.getColor() + level.getName() + GRAY);
    messageArray.add(message);
  }
  Utilities.alert(messageArray);
  execute(user,level.getActions(),type);
}",0.8495270851246776
101796,"public UserManager(Configuration conf){
  config=conf;
}","public UserManager(Configuration conf){
  config=conf;
  alert=config.getLang().getAlert();
}",0.7516778523489933
101797,"@EventHandler public void onInventoryOpen(InventoryOpenEvent event){
  getUserManager().getUser(event.getPlayer().getName()).setSnapshot(event.getInventory().getContents());
}","@EventHandler public void onInventoryOpen(InventoryOpenEvent event){
  if (event.getInventory().getType() != InventoryType.BEACON) {
    getUserManager().getUser(event.getPlayer().getName()).setSnapshot(event.getInventory().getContents());
  }
}",0.8333333333333334
101798,"public void restore(Inventory inventory){
  inventory.clear();
  for (  ItemStack is : inventorySnapshot) {
    if (is != null) {
      inventory.addItem(is);
    }
  }
}","public void restore(Inventory inventory){
  if (inventorySnapshot != null) {
    inventory.clear();
    for (    ItemStack is : inventorySnapshot) {
      if (is != null) {
        inventory.addItem(is);
      }
    }
  }
}",0.8295165394402035
101799,"/** 
 * Get the total bytes of the file (can only be used after running a version check or a normal run).
 */
public long getFileSize(){
  return totalSize;
}","/** 
 * Get the total bytes of the file (can only be used after running a version check or a normal run).
 */
public long getFileSize(){
  waitForThread();
  return totalSize;
}",0.9432835820895522
101800,"/** 
 * Get the version string latest file avaliable online.
 */
public String getLatestVersionString(){
  return versionTitle;
}","/** 
 * Get the version string latest file avaliable online.
 */
public String getLatestVersionString(){
  waitForThread();
  return versionTitle;
}",0.9314079422382672
101801,"/** 
 * Initialize the updater
 * @param plugin The plugin that is checking for an update.
 * @param slug The dev.bukkit.org slug of the project (http://dev.bukkit.org/server-mods/SLUG_IS_HERE)
 * @param file The file that the plugin is running from, get this by doing this.getFile() from within your main class.
 * @param type Specify the type of update this will be. See  {@link UpdateType}
 * @param announce True if the program should announce the progress of new updates in console
 */
public Updater(Plugin plugin,String slug,File file,UpdateType type,boolean announce){
  this.plugin=plugin;
  this.type=type;
  this.announce=announce;
  this.file=file;
  try {
    url=new URL(DBOUrl + slug + ""String_Node_Str"");
  }
 catch (  MalformedURLException ex) {
    plugin.getLogger().warning(""String_Node_Str"" + plugin.getDescription().getAuthors().get(0) + ""String_Node_Str"");
    plugin.getLogger().warning(""String_Node_Str"" + slug + ""String_Node_Str"");
    result=Updater.UpdateResult.FAIL_BADSLUG;
  }
  new Thread(new UpdateRunnable()).start();
}","/** 
 * Initialize the updater
 * @param plugin The plugin that is checking for an update.
 * @param slug The dev.bukkit.org slug of the project (http://dev.bukkit.org/server-mods/SLUG_IS_HERE)
 * @param file The file that the plugin is running from, get this by doing this.getFile() from within your main class.
 * @param type Specify the type of update this will be. See  {@link UpdateType}
 * @param announce True if the program should announce the progress of new updates in console
 */
public Updater(Plugin plugin,String slug,File file,UpdateType type,boolean announce){
  this.plugin=plugin;
  this.type=type;
  this.announce=announce;
  this.file=file;
  try {
    url=new URL(DBOUrl + slug + ""String_Node_Str"");
  }
 catch (  MalformedURLException ex) {
    plugin.getLogger().warning(""String_Node_Str"" + plugin.getDescription().getAuthors().get(0) + ""String_Node_Str"");
    plugin.getLogger().warning(""String_Node_Str"" + slug + ""String_Node_Str"");
    result=Updater.UpdateResult.FAIL_BADSLUG;
  }
  thread=new Thread(new UpdateRunnable());
  thread.start();
}",0.9844559585492229
101802,"/** 
 * Get the result of the update process.
 */
public Updater.UpdateResult getResult(){
  return result;
}","/** 
 * Get the result of the update process.
 */
public Updater.UpdateResult getResult(){
  waitForThread();
  return result;
}",0.919831223628692
101803,"@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void checkSpeed(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Location from=event.getFrom();
  Location to=event.getTo();
  boolean changed=false;
  if (event.getTo() != event.getFrom()) {
    Distance distance=new Distance(from,to);
    double x=distance.getXDifference();
    double y=distance.getYDifference();
    double z=distance.getZDifference();
    if (checkManager.willCheck(player,CheckType.SPEED) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)) {
      if (event.getFrom().getY() < event.getTo().getY() && backend.checkYSpeed(player,y)) {
        if (!config.silentMode()) {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        log(""String_Node_Str"",player,CheckType.SPEED);
        changed=true;
      }
      if (backend.checkXZSpeed(player,x,z)) {
        if (!config.silentMode()) {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        log(""String_Node_Str"",player,CheckType.SPEED);
        changed=true;
      }
      if ((event.getFrom().getX() != event.getTo().getX() || event.getFrom().getZ() != event.getTo().getZ()) && backend.checkTimer(player)) {
        if (!config.silentMode()) {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        log(""String_Node_Str"",player,CheckType.SPEED);
        changed=true;
      }
    }
    if (checkManager.willCheck(player,CheckType.WATER_WALK) && backend.checkWaterWalk(player,x,y,z)) {
      if (!config.silentMode()) {
        player.teleport(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(player.getLocation().add(0,-1,0)));
      }
      log(""String_Node_Str"",player,CheckType.WATER_WALK);
      changed=true;
    }
    if (checkManager.willCheck(player,CheckType.SNEAK) && backend.checkSneak(player,x,z)) {
      if (!config.silentMode()) {
        event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        player.setSneaking(false);
      }
      log(""String_Node_Str"",player,CheckType.SNEAK);
      changed=true;
    }
    if (checkManager.willCheck(player,CheckType.SPIDER) && backend.checkSpider(player,y)) {
      if (!config.silentMode()) {
        event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
      }
      log(""String_Node_Str"",player,CheckType.SPIDER);
      changed=true;
    }
    if (!changed) {
      Anticheat.getManager().getUserManager().getUser(player.getName()).setGoodLocation(event.getFrom());
    }
  }
  Anticheat.getManager().addEvent(event.getEventName(),event.getHandlers().getRegisteredListeners());
}","@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void checkSpeed(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Location from=event.getFrom();
  Location to=event.getTo();
  boolean changed=false;
  if (event.getTo() != event.getFrom()) {
    Distance distance=new Distance(from,to);
    double x=distance.getXDifference();
    double y=distance.getYDifference();
    double z=distance.getZDifference();
    if (checkManager.willCheck(player,CheckType.SPEED) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)) {
      if (event.getFrom().getY() < event.getTo().getY() && backend.checkYSpeed(player,y)) {
        if (!config.silentMode()) {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        log(""String_Node_Str"",player,CheckType.SPEED);
        changed=true;
      }
      if (backend.checkXZSpeed(player,x,z)) {
        if (!config.silentMode()) {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        log(""String_Node_Str"",player,CheckType.SPEED);
        changed=true;
      }
      if ((event.getFrom().getX() != event.getTo().getX() || event.getFrom().getZ() != event.getTo().getZ()) && backend.checkTimer(player)) {
        if (!config.silentMode()) {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        log(""String_Node_Str"",player,CheckType.SPEED);
        changed=true;
      }
    }
    if (checkManager.willCheck(player,CheckType.WATER_WALK) && backend.checkWaterWalk(player,x,y,z)) {
      if (!config.silentMode()) {
        player.teleport(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(player.getLocation().add(0,-1,0)));
      }
      log(""String_Node_Str"",player,CheckType.WATER_WALK);
      changed=true;
    }
    if (checkManager.willCheck(player,CheckType.SNEAK) && backend.checkSneak(player,x,z)) {
      if (!config.silentMode()) {
        event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        player.setSneaking(false);
      }
      log(""String_Node_Str"",player,CheckType.SNEAK);
      changed=true;
    }
    if (checkManager.willCheck(player,CheckType.SPIDER) && backend.checkSpider(player,y)) {
      if (!config.silentMode()) {
        event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
      }
      log(""String_Node_Str"",player,CheckType.SPIDER);
      changed=true;
    }
    if (!changed) {
      Anticheat.getManager().getUserManager().getUser(player.getName()).setGoodLocation(event.getFrom());
    }
  }
  Anticheat.getManager().addEvent(event.getEventName(),event.getHandlers().getRegisteredListeners());
}",0.9994910941475827
101804,"@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void checkExploit(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Location from=event.getFrom();
  Location to=event.getTo();
  Distance distance=new Distance(from,to);
  double y=distance.getYDifference();
  backend.logAscension(player,from.getY(),to.getY());
  if (checkManager.willCheck(player,CheckType.SPEED) && backend.checkFreeze(player,from.getY(),to.getY())) {
    log(""String_Node_Str"",player,CheckType.SPEED);
    player.kickPlayer(""String_Node_Str"");
  }
  if (checkManager.willCheck(player,CheckType.SPRINT)) {
    if (backend.checkSprintStill(player,from,to)) {
      event.setCancelled(!config.silentMode());
      log(""String_Node_Str"",player,CheckType.SPRINT);
    }
  }
  if (checkManager.willCheck(player,CheckType.FLY) && !player.isFlying() && checkManager.willCheck(player,CheckType.ZOMBE_FLY)&& backend.checkFlight(player,distance)) {
    if (!config.silentMode()) {
      event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
    }
    log(""String_Node_Str"",player,CheckType.FLY);
  }
  if (checkManager.willCheck(player,CheckType.FLY) && !player.isFlying() && checkManager.willCheck(player,CheckType.ZOMBE_FLY)&& (backend.checkYAxis(player,distance) || backend.checkAscension(player,from.getY(),to.getY()))) {
    if (!config.silentMode()) {
      event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
    }
    log(""String_Node_Str"",player,CheckType.FLY);
  }
  if (checkManager.willCheck(player,CheckType.VCLIP) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)&& event.getFrom().getY() > event.getTo().getY()) {
    int result=backend.checkVClip(player,new Distance(event.getFrom(),event.getTo()));
    if (result > 0) {
      if (!config.silentMode()) {
        Location newloc=new Location(player.getWorld(),event.getFrom().getX(),event.getFrom().getY() + result,event.getFrom().getZ());
        if (result > 3) {
          result=3;
        }
        if (newloc.getBlock().getTypeId() == 0) {
          event.setTo(newloc);
        }
 else {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        player.damage(3);
      }
      log(""String_Node_Str"",player,CheckType.VCLIP);
    }
  }
  if (checkManager.willCheck(player,CheckType.NOFALL) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)&& !Utilities.isClimbableBlock(player.getLocation().getBlock())&& event.getFrom().getY() > event.getTo().getY() && backend.checkNoFall(player,y)) {
    if (!config.silentMode()) {
      event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
      player.damage(2);
    }
    log(""String_Node_Str"",player,CheckType.NOFALL);
  }
  Anticheat.getManager().addEvent(event.getEventName(),event.getHandlers().getRegisteredListeners());
}","@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void checkExploit(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Location from=event.getFrom();
  Location to=event.getTo();
  Distance distance=new Distance(from,to);
  double y=distance.getYDifference();
  backend.logAscension(player,from.getY(),to.getY());
  if (checkManager.willCheck(player,CheckType.SPEED) && backend.checkFreeze(player,from.getY(),to.getY())) {
    log(""String_Node_Str"",player,CheckType.SPEED);
    player.kickPlayer(""String_Node_Str"");
  }
  if (checkManager.willCheck(player,CheckType.SPRINT)) {
    if (backend.checkSprintStill(player,from,to)) {
      event.setCancelled(!config.silentMode());
      log(""String_Node_Str"",player,CheckType.SPRINT);
    }
  }
  if (checkManager.willCheck(player,CheckType.FLY) && !player.isFlying() && checkManager.willCheck(player,CheckType.ZOMBE_FLY)&& backend.checkFlight(player,distance)) {
    if (!config.silentMode()) {
      event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
    }
    log(""String_Node_Str"",player,CheckType.FLY);
  }
  if (checkManager.willCheck(player,CheckType.FLY) && !player.isFlying() && checkManager.willCheck(player,CheckType.ZOMBE_FLY)&& (backend.checkYAxis(player,distance) || backend.checkAscension(player,from.getY(),to.getY()))) {
    if (!config.silentMode()) {
      event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
    }
    log(""String_Node_Str"",player,CheckType.FLY);
  }
  if (checkManager.willCheck(player,CheckType.VCLIP) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)&& event.getFrom().getY() > event.getTo().getY()) {
    int result=backend.checkVClip(player,new Distance(event.getFrom(),event.getTo()));
    if (result > 0) {
      if (!config.silentMode()) {
        Location newloc=new Location(player.getWorld(),event.getFrom().getX(),event.getFrom().getY() + result,event.getFrom().getZ());
        if (result > 3) {
          result=3;
        }
        if (newloc.getBlock().getTypeId() == 0) {
          event.setTo(newloc);
        }
 else {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        player.damage(3);
      }
      log(""String_Node_Str"",player,CheckType.VCLIP);
    }
  }
  if (checkManager.willCheck(player,CheckType.NOFALL) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)&& !Utilities.isClimbableBlock(player.getLocation().getBlock())&& event.getFrom().getY() > event.getTo().getY() && backend.checkNoFall(player,y)) {
    if (!config.silentMode()) {
      event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
      player.damage(2);
    }
    log(""String_Node_Str"",player,CheckType.NOFALL);
  }
  Anticheat.getManager().addEvent(event.getEventName(),event.getHandlers().getRegisteredListeners());
}",0.9995141700404858
101805,"@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void checkSpeed(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Location from=event.getFrom();
  Location to=event.getTo();
  boolean changed=false;
  if (event.getTo() != event.getFrom()) {
    Distance distance=new Distance(from,to);
    double x=distance.getXDifference();
    double y=distance.getYDifference();
    double z=distance.getZDifference();
    if (checkManager.willCheck(player,CheckType.SPEED) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)) {
      if (event.getFrom().getY() < event.getTo().getY() && backend.checkYSpeed(player,y)) {
        if (!config.silentMode()) {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        log(""String_Node_Str"",player,CheckType.SPEED);
        changed=true;
      }
      if (backend.checkXZSpeed(player,x,z)) {
        if (!config.silentMode()) {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        log(""String_Node_Str"",player,CheckType.SPEED);
        changed=true;
      }
      if ((event.getFrom().getX() != event.getTo().getX() || event.getFrom().getZ() != event.getTo().getZ()) && backend.checkTimer(player)) {
        if (!config.silentMode()) {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        log(""String_Node_Str"",player,CheckType.SPEED);
        changed=true;
      }
    }
    if (checkManager.willCheck(player,CheckType.WATER_WALK) && backend.checkWaterWalk(player,x,y,z)) {
      if (!config.silentMode()) {
        player.teleport(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(player.getLocation().add(0,-1,0)));
      }
      log(""String_Node_Str"",player,CheckType.WATER_WALK);
      changed=true;
    }
    if (checkManager.willCheck(player,CheckType.SNEAK) && backend.checkSneak(player,x,z)) {
      if (!config.silentMode()) {
        event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        player.setSneaking(false);
      }
      log(""String_Node_Str"",player,CheckType.SNEAK);
      changed=true;
    }
    if (checkManager.willCheck(player,CheckType.SPIDER) && backend.checkSpider(player,y)) {
      if (!config.silentMode()) {
        event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
      }
      log(""String_Node_Str"",player,CheckType.SPIDER);
      changed=true;
    }
    if (!changed) {
      Anticheat.getManager().getUserManager().getUser(player.getName()).setGoodLocation(event.getFrom());
    }
  }
  Anticheat.getManager().addEvent(event.getEventName(),event.getHandlers().getRegisteredListeners());
}","@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void checkSpeed(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Location from=event.getFrom();
  Location to=event.getTo();
  boolean changed=false;
  if (event.getTo() != event.getFrom()) {
    Distance distance=new Distance(from,to);
    double x=distance.getXDifference();
    double y=distance.getYDifference();
    double z=distance.getZDifference();
    if (checkManager.willCheck(player,CheckType.SPEED) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)) {
      if (event.getFrom().getY() < event.getTo().getY() && backend.checkYSpeed(player,y)) {
        if (!config.silentMode()) {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        log(""String_Node_Str"",player,CheckType.SPEED);
        changed=true;
      }
      if (backend.checkXZSpeed(player,x,z)) {
        if (!config.silentMode()) {
          event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        }
        log(""String_Node_Str"",player,CheckType.SPEED);
        changed=true;
      }
      if ((event.getFrom().getX() != event.getTo().getX() || event.getFrom().getZ() != event.getTo().getZ()) && backend.checkTimer(player)) {
      }
    }
    if (checkManager.willCheck(player,CheckType.WATER_WALK) && backend.checkWaterWalk(player,x,y,z)) {
      if (!config.silentMode()) {
        player.teleport(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(player.getLocation().add(0,-1,0)));
      }
      log(""String_Node_Str"",player,CheckType.WATER_WALK);
      changed=true;
    }
    if (checkManager.willCheck(player,CheckType.SNEAK) && backend.checkSneak(player,x,z)) {
      if (!config.silentMode()) {
        event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
        player.setSneaking(false);
      }
      log(""String_Node_Str"",player,CheckType.SNEAK);
      changed=true;
    }
    if (checkManager.willCheck(player,CheckType.SPIDER) && backend.checkSpider(player,y)) {
      if (!config.silentMode()) {
        event.setTo(Anticheat.getManager().getUserManager().getUser(player.getName()).getGoodLocation(from.clone()));
      }
      log(""String_Node_Str"",player,CheckType.SPIDER);
      changed=true;
    }
    if (!changed) {
      Anticheat.getManager().getUserManager().getUser(player.getName()).setGoodLocation(event.getFrom());
    }
  }
  Anticheat.getManager().addEvent(event.getEventName(),event.getHandlers().getRegisteredListeners());
}",0.9570291777188328
101806,"@EventHandler(ignoreCancelled=true) public void onEntityDamage(EntityDamageEvent event){
  boolean noHack=true;
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (event.getEntity() instanceof Player) {
      Player player=(Player)event.getEntity();
      if (e.getDamager() instanceof Arrow) {
        Arrow arrow=(Arrow)e.getDamager();
        if (arrow.getShooter() instanceof Player && event.getEntity() == arrow.getShooter()) {
          event.setCancelled(true);
        }
      }
      if (e.getDamager() instanceof Player) {
        Player p=(Player)e.getDamager();
        backend.logDamage(p,1);
        int value=p.getInventory().getItemInHand().containsEnchantment(Enchantment.KNOCKBACK) ? 2 : 1;
        backend.logDamage(player,value);
        if (checkManager.willCheck(p,CheckType.LONG_REACH)) {
          Distance distance=new Distance(player.getLocation(),p.getLocation());
          if (backend.checkLongReachDamage(distance.getXDifference(),distance.getYDifference(),distance.getZDifference())) {
            event.setCancelled(!config.silentMode());
            log(""String_Node_Str"",p,CheckType.LONG_REACH);
            noHack=false;
          }
        }
      }
 else {
        if (e.getDamager() instanceof TNTPrimed || e.getDamager() instanceof Creeper) {
          backend.logDamage(player,3);
        }
 else {
          backend.logDamage(player,1);
        }
      }
    }
    if (e.getDamager() instanceof Player) {
      Player player=(Player)e.getDamager();
      backend.logDamage(player,1);
      if (checkManager.willCheck(player,CheckType.AUTOTOOL) && backend.justSwitchedTool(player)) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.AUTOTOOL);
        noHack=false;
      }
      if (checkManager.willCheck(player,CheckType.FORCEFIELD) && backend.justSprinted(player)) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.FORCEFIELD);
        noHack=false;
      }
      if (checkManager.willCheck(player,CheckType.NO_SWING) && !backend.justAnimated(player)) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.NO_SWING);
        noHack=false;
      }
      if (checkManager.willCheck(player,CheckType.FORCEFIELD) && !backend.checkSight(player,e.getEntity())) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.FORCEFIELD);
        noHack=false;
      }
      if (noHack) {
        decrease(player);
      }
    }
  }
  Anticheat.getManager().addEvent(event.getEventName(),event.getHandlers().getRegisteredListeners());
}","@EventHandler(ignoreCancelled=true) public void onEntityDamage(EntityDamageEvent event){
  boolean noHack=true;
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (event.getEntity() instanceof Player) {
      Player player=(Player)event.getEntity();
      if (e.getDamager() instanceof Arrow) {
        Arrow arrow=(Arrow)e.getDamager();
        if (arrow.getShooter() instanceof Player && event.getEntity() == arrow.getShooter()) {
          event.setCancelled(true);
        }
      }
      if (e.getDamager() instanceof Player) {
        Player p=(Player)e.getDamager();
        backend.logDamage(p,1);
        int value=p.getInventory().getItemInHand().containsEnchantment(Enchantment.KNOCKBACK) ? 2 : 1;
        backend.logDamage(player,value);
        if (checkManager.willCheck(p,CheckType.LONG_REACH)) {
          Distance distance=new Distance(player.getLocation(),p.getLocation());
          if (backend.checkLongReachDamage(distance.getXDifference(),distance.getYDifference(),distance.getZDifference())) {
            event.setCancelled(!config.silentMode());
            log(""String_Node_Str"",p,CheckType.LONG_REACH);
            noHack=false;
          }
        }
      }
 else {
        if (e.getDamager() instanceof TNTPrimed || e.getDamager() instanceof Creeper) {
          backend.logDamage(player,3);
        }
 else {
          backend.logDamage(player,1);
        }
      }
    }
    if (e.getDamager() instanceof Player) {
      Player player=(Player)e.getDamager();
      backend.logDamage(player,1);
      if (checkManager.willCheck(player,CheckType.AUTOTOOL) && backend.justSwitchedTool(player)) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.AUTOTOOL);
        noHack=false;
      }
      if (checkManager.willCheck(player,CheckType.FORCEFIELD) && backend.justSprinted(player)) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.FORCEFIELD);
        noHack=false;
      }
      if (checkManager.willCheck(player,CheckType.NO_SWING) && !backend.justAnimated(player,event.getEntity())) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.NO_SWING);
        noHack=false;
      }
      if (checkManager.willCheck(player,CheckType.FORCEFIELD) && !backend.checkSight(player,e.getEntity())) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.FORCEFIELD);
        noHack=false;
      }
      if (noHack) {
        decrease(player);
      }
    }
  }
  Anticheat.getManager().addEvent(event.getEventName(),event.getHandlers().getRegisteredListeners());
}",0.9967069154774972
101807,"public boolean checkSwing(Player player,Block block){
  String name=player.getName();
  if (!isInstantBreakExempt(player)) {
    if (!player.getInventory().getItemInHand().containsEnchantment(Enchantment.DIG_SPEED) && !(player.getInventory().getItemInHand().getType() == Material.SHEARS && block.getType() == Material.LEAVES)) {
      if (blockPunches.get(name) != null && player.getGameMode() != GameMode.CREATIVE) {
        int i=blockPunches.get(name);
        if (i < magic.BLOCK_PUNCH_MIN) {
          return true;
        }
 else {
          blockPunches.put(name,0);
        }
      }
    }
  }
  return !justAnimated(player);
}","public boolean checkSwing(Player player,Block block){
  String name=player.getName();
  if (!isInstantBreakExempt(player)) {
    if (!player.getInventory().getItemInHand().containsEnchantment(Enchantment.DIG_SPEED) && !(player.getInventory().getItemInHand().getType() == Material.SHEARS && block.getType() == Material.LEAVES)) {
      if (blockPunches.get(name) != null && player.getGameMode() != GameMode.CREATIVE) {
        int i=blockPunches.get(name);
        if (i < magic.BLOCK_PUNCH_MIN) {
          return true;
        }
 else {
          blockPunches.put(name,0);
        }
      }
    }
  }
  return !justAnimated(player,block);
}",0.9952978056426331
101808,"public boolean justAnimated(Player player){
  if (player.getItemInHand().containsEnchantment(Enchantment.DIG_SPEED)) {
    return true;
  }
  String name=player.getName();
  if (animated.containsKey(name)) {
    long time=System.currentTimeMillis() - animated.get(name);
    animated.remove(player.getName());
    return time < magic.ANIMATION_MIN;
  }
 else {
    return false;
  }
}","private boolean justAnimated(Player player){
  String name=player.getName();
  if (animated.containsKey(name)) {
    long time=System.currentTimeMillis() - animated.get(name);
    animated.remove(player.getName());
    return time < magic.ANIMATION_MIN;
  }
 else {
    return false;
  }
}",0.8380386329866271
101809,"public static long calcSurvivalFastBreak(ItemStack tool,Material block){
  double bhardness=BlockHardness.getBlockHardness(block);
  double thardness=ToolHardness.getToolHardness(tool.getType());
  long enchantlvl=(long)tool.getEnchantmentLevel(Enchantment.DIG_SPEED);
  long result=(long)((long)Math.round((bhardness * thardness) * 0.10 * 10000));
  result+=150;
  if (enchantlvl > 0)   result/=enchantlvl * enchantlvl + 1L;
  if (result > 25000)   result=25000;
 else   if (result < 0)   result=0;
  return result;
}","public static long calcSurvivalFastBreak(ItemStack tool,Material block){
  if (isInstantBreak(block) || (tool.getType() == Material.SHEARS && block.getId() == Material.LEAVES.getId())) {
    return 0;
  }
  double bhardness=BlockHardness.getBlockHardness(block);
  double thardness=ToolHardness.getToolHardness(tool.getType());
  long enchantlvl=(long)tool.getEnchantmentLevel(Enchantment.DIG_SPEED);
  long result=(long)((long)Math.round((bhardness * thardness) * 0.10 * 10000));
  result+=150;
  if (enchantlvl > 0)   result/=enchantlvl * enchantlvl + 1L;
  if (result > 25000)   result=25000;
 else   if (result < 0)   result=0;
  return result;
}",0.886986301369863
101810,"@EventHandler public void onInventoryClick(InventoryClickEvent event){
  if (event.getWhoClicked() instanceof Player) {
    Player player=(Player)event.getWhoClicked();
    if (checkManager.willCheck(player,CheckType.FAST_INVENTORY)) {
      if (backend.checkInventoryClicks(player)) {
        if (!config.silentMode()) {
          event.setCancelled(!config.silentMode());
          player.setHealth(0);
        }
        log(""String_Node_Str"",player,CheckType.FAST_INVENTORY);
      }
 else {
        decrease(player);
      }
    }
  }
  Anticheat.getManager().addEvent(event.getEventName(),event.getHandlers().getRegisteredListeners());
}","@EventHandler public void onInventoryClick(InventoryClickEvent event){
  if (event.getWhoClicked() instanceof Player) {
    Player player=(Player)event.getWhoClicked();
    if (checkManager.willCheck(player,CheckType.FAST_INVENTORY)) {
      if (backend.checkInventoryClicks(player)) {
        if (!config.silentMode()) {
          event.setCancelled(!config.silentMode());
          player.damage(9999);
        }
        log(""String_Node_Str"",player,CheckType.FAST_INVENTORY);
      }
 else {
        decrease(player);
      }
    }
  }
  Anticheat.getManager().addEvent(event.getEventName(),event.getHandlers().getRegisteredListeners());
}",0.9828660436137072
101811,"public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  String name=player.getName();
  double y1=distance.fromY();
  double y2=distance.toY();
  if (!isMovingExempt(player) && !Utilities.isInWater(player) && !Utilities.canStand(player.getLocation().getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-1,0).getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-2,0).getBlock())) {
    Block block=player.getLocation().getBlock();
    if (block.getRelative(BlockFace.NORTH).isLiquid() || block.getRelative(BlockFace.SOUTH).isLiquid() || block.getRelative(BlockFace.EAST).isLiquid()|| block.getRelative(BlockFace.WEST).isLiquid()) {
      if (y1 < y2) {
        return distance.getYDifference() > magic.WATER_CLIMB_MAX;
      }
    }
 else     if (y1 == y2 || y1 < y2) {
      if (player.isSneaking()) {
        if (block.getRelative(BlockFace.NORTH).getTypeId() == 43 || block.getRelative(BlockFace.NORTH).getTypeId() == 44 || block.getRelative(BlockFace.SOUTH).getTypeId() == 43 || block.getRelative(BlockFace.SOUTH).getTypeId() == 44 || block.getRelative(BlockFace.EAST).getTypeId() == 43 || block.getRelative(BlockFace.EAST).getTypeId() == 44 || block.getRelative(BlockFace.WEST).getTypeId() == 43 || block.getRelative(BlockFace.WEST).getTypeId() == 44) {
          return false;
        }
      }
      int violation=flightViolation.containsKey(name) ? flightViolation.get(name) + 1 : 1;
      increment(player,flightViolation,violation);
      if (violation > magic.FLIGHT_LIMIT) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  flightViolation.put(name,0);
  return false;
}","public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  String name=player.getName();
  double y1=distance.fromY();
  double y2=distance.toY();
  if (!isMovingExempt(player) && !Utilities.isInWater(player) && !Utilities.canStand(player.getLocation().getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-1,0).getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-2,0).getBlock())) {
    Block block=player.getLocation().getBlock();
    if (block.getRelative(BlockFace.NORTH).isLiquid() || block.getRelative(BlockFace.SOUTH).isLiquid() || block.getRelative(BlockFace.EAST).isLiquid()|| block.getRelative(BlockFace.WEST).isLiquid()) {
      if (y1 < y2) {
        return distance.getYDifference() > magic.WATER_CLIMB_MAX;
      }
    }
 else     if (y1 == y2 || y1 < y2) {
      if (player.isSneaking()) {
        if (block.getRelative(BlockFace.NORTH).getTypeId() == 43 || block.getRelative(BlockFace.NORTH).getTypeId() == 44 || block.getRelative(BlockFace.SOUTH).getTypeId() == 43 || block.getRelative(BlockFace.SOUTH).getTypeId() == 44 || block.getRelative(BlockFace.EAST).getTypeId() == 43 || block.getRelative(BlockFace.EAST).getTypeId() == 44 || block.getRelative(BlockFace.WEST).getTypeId() == 43 || block.getRelative(BlockFace.WEST).getTypeId() == 44) {
          return false;
        }
        if (Utilities.isStair(block.getRelative(BlockFace.NORTH)) || Utilities.isStair(block.getRelative(BlockFace.SOUTH)) || Utilities.isStair(block.getRelative(BlockFace.EAST))|| Utilities.isStair(block.getRelative(BlockFace.WEST))) {
          return false;
        }
      }
      int violation=flightViolation.containsKey(name) ? flightViolation.get(name) + 1 : 1;
      increment(player,flightViolation,violation);
      if (violation > magic.FLIGHT_LIMIT) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  flightViolation.put(name,0);
  return false;
}",0.926298612999728
101812,"public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  String name=player.getName();
  double y1=distance.fromY();
  double y2=distance.toY();
  if (!isMovingExempt(player) && !Utilities.isInWater(player) && !Utilities.canStand(player.getLocation().getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-1,0).getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-2,0).getBlock())) {
    Block block=player.getLocation().getBlock();
    if (block.getRelative(BlockFace.NORTH).isLiquid() || block.getRelative(BlockFace.SOUTH).isLiquid() || block.getRelative(BlockFace.EAST).isLiquid()|| block.getRelative(BlockFace.WEST).isLiquid()) {
      if (y1 < y2) {
        return distance.getYDifference() > magic.WATER_CLIMB_MAX;
      }
    }
 else     if (y1 == y2 || y1 < y2) {
      if (y1 == y2) {
        if (block.getRelative(BlockFace.NORTH).getTypeId() == 43 || block.getRelative(BlockFace.NORTH).getTypeId() == 44 || block.getRelative(BlockFace.SOUTH).getTypeId() == 43 || block.getRelative(BlockFace.SOUTH).getTypeId() == 44 || block.getRelative(BlockFace.EAST).getTypeId() == 43 || block.getRelative(BlockFace.EAST).getTypeId() == 44 || block.getRelative(BlockFace.WEST).getTypeId() == 43 || block.getRelative(BlockFace.WEST).getTypeId() == 44) {
          return false;
        }
 else         if (player.isSneaking() && (Utilities.isStair(block.getRelative(BlockFace.NORTH)) || Utilities.isStair(block.getRelative(BlockFace.SOUTH)) || Utilities.isStair(block.getRelative(BlockFace.EAST))|| Utilities.isStair(block.getRelative(BlockFace.WEST))|| Utilities.isStair(block.getRelative(BlockFace.NORTH_EAST))|| Utilities.isStair(block.getRelative(BlockFace.SOUTH_EAST))|| Utilities.isStair(block.getRelative(BlockFace.SOUTH_WEST))|| Utilities.isStair(block.getRelative(BlockFace.NORTH_WEST)))) {
          return false;
        }
      }
      int violation=flightViolation.containsKey(name) ? flightViolation.get(name) + 1 : 1;
      increment(player,flightViolation,violation);
      if (violation > magic.FLIGHT_LIMIT) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  flightViolation.put(name,0);
  return false;
}","public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  String name=player.getName();
  double y1=distance.fromY();
  double y2=distance.toY();
  if (!isMovingExempt(player) && !Utilities.isInWater(player) && !Utilities.canStand(player.getLocation().getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-1,0).getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-2,0).getBlock())) {
    Block block=player.getLocation().getBlock();
    if (block.getRelative(BlockFace.NORTH).isLiquid() || block.getRelative(BlockFace.SOUTH).isLiquid() || block.getRelative(BlockFace.EAST).isLiquid()|| block.getRelative(BlockFace.WEST).isLiquid()) {
      if (y1 < y2) {
        return distance.getYDifference() > magic.WATER_CLIMB_MAX;
      }
    }
 else     if (y1 == y2 || y1 < y2) {
      if (y1 == y2) {
        if (block.getRelative(BlockFace.NORTH).getTypeId() == 43 || block.getRelative(BlockFace.NORTH).getTypeId() == 44 || block.getRelative(BlockFace.SOUTH).getTypeId() == 43 || block.getRelative(BlockFace.SOUTH).getTypeId() == 44 || block.getRelative(BlockFace.EAST).getTypeId() == 43 || block.getRelative(BlockFace.EAST).getTypeId() == 44 || block.getRelative(BlockFace.WEST).getTypeId() == 43 || block.getRelative(BlockFace.WEST).getTypeId() == 44 || block.getRelative(BlockFace.SOUTH_EAST).getTypeId() == 43 || block.getRelative(BlockFace.SOUTH_EAST).getTypeId() == 44 || block.getRelative(BlockFace.SOUTH_WEST).getTypeId() == 43 || block.getRelative(BlockFace.SOUTH_WEST).getTypeId() == 44 || block.getRelative(BlockFace.NORTH_EAST).getTypeId() == 43 || block.getRelative(BlockFace.NORTH_EAST).getTypeId() == 44 || block.getRelative(BlockFace.NORTH_WEST).getTypeId() == 43 || block.getRelative(BlockFace.NORTH_WEST).getTypeId() == 44) {
          return false;
        }
 else         if (player.isSneaking() && (Utilities.isStair(block.getRelative(BlockFace.NORTH)) || Utilities.isStair(block.getRelative(BlockFace.SOUTH)) || Utilities.isStair(block.getRelative(BlockFace.EAST))|| Utilities.isStair(block.getRelative(BlockFace.WEST))|| Utilities.isStair(block.getRelative(BlockFace.NORTH_EAST))|| Utilities.isStair(block.getRelative(BlockFace.SOUTH_EAST))|| Utilities.isStair(block.getRelative(BlockFace.SOUTH_WEST))|| Utilities.isStair(block.getRelative(BlockFace.NORTH_WEST)))) {
          return false;
        }
      }
      int violation=flightViolation.containsKey(name) ? flightViolation.get(name) + 1 : 1;
      increment(player,flightViolation,violation);
      if (violation > magic.FLIGHT_LIMIT) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  flightViolation.put(name,0);
  return false;
}",0.9016921837228042
101813,"public CommentedConfiguration(){
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
}","public CommentedConfiguration(){
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
  comments.put(""String_Node_Str"",""String_Node_Str"");
}",0.9763498438197232
101814,"public boolean checkAscension(Player player,double y1,double y2){
  int max=magic.ASCENSION_COUNT_MAX;
  if (player.hasPotionEffect(PotionEffectType.JUMP)) {
    max+=12;
  }
  Block block=player.getLocation().getBlock();
  if (!isMovingExempt(player) && !Utilities.isInWater(player) && !Utilities.isClimbableBlock(player.getLocation().getBlock())&& !player.isInsideVehicle()) {
    String name=player.getName();
    if (y1 < y2) {
      if (!block.getRelative(BlockFace.NORTH).isLiquid() && !block.getRelative(BlockFace.SOUTH).isLiquid() && !block.getRelative(BlockFace.EAST).isLiquid()&& !block.getRelative(BlockFace.WEST).isLiquid()) {
        increment(player,ascensionCount,max);
        if (ascensionCount.get(name) >= max) {
          return true;
        }
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}","public boolean checkAscension(Player player,double y1,double y2){
  int max=magic.ASCENSION_COUNT_MAX;
  if (player.hasPotionEffect(PotionEffectType.JUMP)) {
    max+=12;
  }
  Block block=player.getLocation().getBlock();
  if (!isMovingExempt(player) && !Utilities.isInWater(player) && !justBroke(player)&& !Utilities.isClimbableBlock(player.getLocation().getBlock())&& !player.isInsideVehicle()) {
    String name=player.getName();
    if (y1 < y2) {
      if (!block.getRelative(BlockFace.NORTH).isLiquid() && !block.getRelative(BlockFace.SOUTH).isLiquid() && !block.getRelative(BlockFace.EAST).isLiquid()&& !block.getRelative(BlockFace.WEST).isLiquid()) {
        increment(player,ascensionCount,max);
        if (ascensionCount.get(name) >= max) {
          return true;
        }
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}",0.9877693651718114
101815,"public boolean checkNoFall(Player player,double y){
  String name=player.getName();
  if (player.getGameMode() != GameMode.CREATIVE && player.getVehicle() == null && !isMovingExempt(player) && !Utilities.isInWater(player)) {
    if (player.getFallDistance() == 0) {
      if (nofallViolation.get(name) == null) {
        nofallViolation.put(name,1);
      }
 else {
        nofallViolation.put(name,nofallViolation.get(player.getName()) + 1);
      }
      if (nofallViolation.get(name) >= magic.NOFALL_LIMIT) {
        nofallViolation.put(player.getName(),1);
        return true;
      }
 else {
        return false;
      }
    }
 else {
      nofallViolation.put(name,0);
      return false;
    }
  }
  return false;
}","public boolean checkNoFall(Player player,double y){
  String name=player.getName();
  if (player.getGameMode() != GameMode.CREATIVE && player.getVehicle() == null && !isMovingExempt(player) && !justPlaced(player) && !Utilities.isInWater(player)) {
    if (player.getFallDistance() == 0) {
      if (nofallViolation.get(name) == null) {
        nofallViolation.put(name,1);
      }
 else {
        nofallViolation.put(name,nofallViolation.get(player.getName()) + 1);
      }
      if (nofallViolation.get(name) >= magic.NOFALL_LIMIT) {
        nofallViolation.put(player.getName(),1);
        return true;
      }
 else {
        return false;
      }
    }
 else {
      nofallViolation.put(name,0);
      return false;
    }
  }
  return false;
}",0.9843643779741672
101816,"@Override public void onEnable(){
  manager=new AnticheatManager(this,getLogger());
  eventList.add(new PlayerListener());
  eventList.add(new BlockListener());
  eventList.add(new EntityListener());
  eventList.add(new VehicleListener());
  setupConfig();
  setupXray();
  setupEvents();
  setupCommands();
  setupUpdater();
  setupMetrics();
  restoreLevels();
  if (verbose) {
    getLogger().log(Level.INFO,""String_Node_Str"");
  }
}","@Override public void onEnable(){
  manager=new AnticheatManager(this,getLogger());
  eventList.add(new PlayerListener());
  eventList.add(new BlockListener());
  eventList.add(new EntityListener());
  eventList.add(new VehicleListener());
  eventList.add(new InventoryListener());
  setupConfig();
  setupXray();
  setupEvents();
  setupCommands();
  setupUpdater();
  setupMetrics();
  restoreLevels();
  if (verbose) {
    getLogger().log(Level.INFO,""String_Node_Str"");
  }
}",0.9540481400437636
101817,"public Magic(FileConfiguration magic,Configuration config,FileConfiguration defaults){
  this.magic=magic;
  this.config=config;
  this.defaults=defaults;
  ENTERED_EXITED_TIME=getInt(""String_Node_Str"");
  SNEAK_TIME=getInt(""String_Node_Str"");
  TELEPORT_TIME=getInt(""String_Node_Str"");
  EXIT_FLY_TIME=getInt(""String_Node_Str"");
  JOIN_TIME=getInt(""String_Node_Str"");
  INSTANT_BREAK_TIME=getInt(""String_Node_Str"");
  DAMAGE_TIME=getLong(""String_Node_Str"");
  KNOCKBACK_DAMAGE_TIME=getLong(""String_Node_Str"");
  EXPLOSION_DAMAGE_TIME=getLong(""String_Node_Str"");
  PROJECTILE_TIME_MIN=getInt(""String_Node_Str"");
  PROJECTILE_CHECK=getInt(""String_Node_Str"");
  DROP_TIME_MIN=getInt(""String_Node_Str"");
  DROP_CHECK=getInt(""String_Node_Str"");
  FASTBREAK_LIMIT=getInt(""String_Node_Str"");
  FASTBREAK_TIMEMAX=getInt(""String_Node_Str"");
  FASTBREAK_MAXVIOLATIONS=getInt(""String_Node_Str"");
  FASTBREAK_MAXVIOLATIONS_CREATIVE=getInt(""String_Node_Str"");
  FASTBREAK_MAXVIOLATIONTIME=getInt(""String_Node_Str"");
  FASTPLACE_ZEROLIMIT=getInt(""String_Node_Str"");
  FASTPLACE_TIMEMAX=getInt(""String_Node_Str"");
  FASTPLACE_MAXVIOLATIONS=getInt(""String_Node_Str"");
  FASTPLACE_MAXVIOLATIONS_CREATIVE=getInt(""String_Node_Str"");
  FASTPLACE_MAXVIOLATIONTIME=getInt(""String_Node_Str"");
  BLOCK_PUNCH_MIN=getInt(""String_Node_Str"");
  CHAT_WARN_LEVEL=getInt(""String_Node_Str"");
  CHAT_KICK_LEVEL=getInt(""String_Node_Str"");
  CHAT_BAN_LEVEL=getInt(""String_Node_Str"");
  FLIGHT_LIMIT=getInt(""String_Node_Str"");
  WATER_CLIMB_MAX=getDouble(""String_Node_Str"");
  Y_MAXVIOLATIONS=getInt(""String_Node_Str"");
  Y_MAXVIOTIME=getInt(""String_Node_Str"");
  VELOCITY_TIME=getInt(""String_Node_Str"");
  VELOCITY_SCHETIME=getLong(""String_Node_Str"");
  VELOCITY_CHECKTIME=getLong(""String_Node_Str"");
  VELOCITY_PREVENT=getLong(""String_Node_Str"");
  VELOCITY_MAXTIMES=getInt(""String_Node_Str"");
  NOFALL_LIMIT=getInt(""String_Node_Str"");
  ASCENSION_COUNT_MAX=getInt(""String_Node_Str"");
  WATER_ASCENSION_VIOLATION_MAX=getInt(""String_Node_Str"");
  WATER_SPEED_VIOLATION_MAX=getInt(""String_Node_Str"");
  SPRINT_FOOD_MIN=getInt(""String_Node_Str"");
  ANIMATION_MIN=getInt(""String_Node_Str"");
  CHAT_MIN=getInt(""String_Node_Str"");
  CHAT_REPEAT_MIN=getInt(""String_Node_Str"");
  SPRINT_MIN=getDouble(""String_Node_Str"");
  BLOCK_BREAK_MIN=getDouble(""String_Node_Str"");
  BLOCK_PLACE_MIN=getDouble(""String_Node_Str"");
  HEAL_TIME_MIN=getLong(""String_Node_Str"");
  EAT_TIME_MIN=getLong(""String_Node_Str"");
  BOW_ERROR=getDouble(""String_Node_Str"");
  BLOCK_MAX_DISTANCE=getDouble(""String_Node_Str"");
  ENTITY_MAX_DISTANCE=getDouble(""String_Node_Str"");
  LADDER_Y_MAX=getDouble(""String_Node_Str"");
  LADDER_Y_MIN=getDouble(""String_Node_Str"");
  Y_SPEED_MAX=getDouble(""String_Node_Str"");
  Y_MAXDIFF=getDouble(""String_Node_Str"");
  Y_TIME=getLong(""String_Node_Str"");
  XZ_SPEED_MAX=getDouble(""String_Node_Str"");
  XZ_SPEED_MAX_SPRINT=getDouble(""String_Node_Str"");
  XZ_SPEED_MAX_FLY=getDouble(""String_Node_Str"");
  XZ_SPEED_MAX_POTION=getDouble(""String_Node_Str"");
  XZ_SPEED_MAX_SNEAK=getDouble(""String_Node_Str"");
  XZ_SPEED_MAX_WATER=getDouble(""String_Node_Str"");
  XZ_SPEED_MAX_WATER_SPRINT=getDouble(""String_Node_Str"");
  SPEED_MAX=getInt(""String_Node_Str"");
}","public Magic(FileConfiguration magic,Configuration config,FileConfiguration defaults){
  this.magic=magic;
  this.config=config;
  this.defaults=defaults;
  ENTERED_EXITED_TIME=getInt(""String_Node_Str"");
  SNEAK_TIME=getInt(""String_Node_Str"");
  TELEPORT_TIME=getInt(""String_Node_Str"");
  EXIT_FLY_TIME=getInt(""String_Node_Str"");
  JOIN_TIME=getInt(""String_Node_Str"");
  INSTANT_BREAK_TIME=getInt(""String_Node_Str"");
  DAMAGE_TIME=getLong(""String_Node_Str"");
  KNOCKBACK_DAMAGE_TIME=getLong(""String_Node_Str"");
  EXPLOSION_DAMAGE_TIME=getLong(""String_Node_Str"");
  PROJECTILE_TIME_MIN=getInt(""String_Node_Str"");
  PROJECTILE_CHECK=getInt(""String_Node_Str"");
  DROP_TIME_MIN=getInt(""String_Node_Str"");
  DROP_CHECK=getInt(""String_Node_Str"");
  FASTBREAK_LIMIT=getInt(""String_Node_Str"");
  FASTBREAK_TIMEMAX=getInt(""String_Node_Str"");
  FASTBREAK_MAXVIOLATIONS=getInt(""String_Node_Str"");
  FASTBREAK_MAXVIOLATIONS_CREATIVE=getInt(""String_Node_Str"");
  FASTBREAK_MAXVIOLATIONTIME=getInt(""String_Node_Str"");
  FASTPLACE_ZEROLIMIT=getInt(""String_Node_Str"");
  FASTPLACE_TIMEMAX=getInt(""String_Node_Str"");
  FASTPLACE_MAXVIOLATIONS=getInt(""String_Node_Str"");
  FASTPLACE_MAXVIOLATIONS_CREATIVE=getInt(""String_Node_Str"");
  FASTPLACE_MAXVIOLATIONTIME=getInt(""String_Node_Str"");
  BLOCK_PUNCH_MIN=getInt(""String_Node_Str"");
  CHAT_WARN_LEVEL=getInt(""String_Node_Str"");
  CHAT_KICK_LEVEL=getInt(""String_Node_Str"");
  CHAT_BAN_LEVEL=getInt(""String_Node_Str"");
  FLIGHT_LIMIT=getInt(""String_Node_Str"");
  WATER_CLIMB_MAX=getDouble(""String_Node_Str"");
  Y_MAXVIOLATIONS=getInt(""String_Node_Str"");
  Y_MAXVIOTIME=getInt(""String_Node_Str"");
  VELOCITY_TIME=getInt(""String_Node_Str"");
  VELOCITY_SCHETIME=getLong(""String_Node_Str"");
  VELOCITY_CHECKTIME=getLong(""String_Node_Str"");
  VELOCITY_PREVENT=getLong(""String_Node_Str"");
  VELOCITY_MAXTIMES=getInt(""String_Node_Str"");
  NOFALL_LIMIT=getInt(""String_Node_Str"");
  ASCENSION_COUNT_MAX=getInt(""String_Node_Str"");
  WATER_ASCENSION_VIOLATION_MAX=getInt(""String_Node_Str"");
  WATER_SPEED_VIOLATION_MAX=getInt(""String_Node_Str"");
  SPRINT_FOOD_MIN=getInt(""String_Node_Str"");
  ANIMATION_MIN=getInt(""String_Node_Str"");
  CHAT_MIN=getInt(""String_Node_Str"");
  CHAT_REPEAT_MIN=getInt(""String_Node_Str"");
  SPRINT_MIN=getDouble(""String_Node_Str"");
  BLOCK_BREAK_MIN=getDouble(""String_Node_Str"");
  BLOCK_PLACE_MIN=getDouble(""String_Node_Str"");
  HEAL_TIME_MIN=getLong(""String_Node_Str"");
  EAT_TIME_MIN=getLong(""String_Node_Str"");
  BOW_ERROR=getDouble(""String_Node_Str"");
  BLOCK_MAX_DISTANCE=getDouble(""String_Node_Str"");
  ENTITY_MAX_DISTANCE=getDouble(""String_Node_Str"");
  LADDER_Y_MAX=getDouble(""String_Node_Str"");
  LADDER_Y_MIN=getDouble(""String_Node_Str"");
  Y_SPEED_MAX=getDouble(""String_Node_Str"");
  Y_MAXDIFF=getDouble(""String_Node_Str"");
  Y_TIME=getLong(""String_Node_Str"");
  XZ_SPEED_MAX=getDouble(""String_Node_Str"");
  XZ_SPEED_MAX_SPRINT=getDouble(""String_Node_Str"");
  XZ_SPEED_MAX_FLY=getDouble(""String_Node_Str"");
  XZ_SPEED_MAX_POTION=getDouble(""String_Node_Str"");
  XZ_SPEED_MAX_SNEAK=getDouble(""String_Node_Str"");
  XZ_SPEED_MAX_WATER=getDouble(""String_Node_Str"");
  XZ_SPEED_MAX_WATER_SPRINT=getDouble(""String_Node_Str"");
  SPEED_MAX=getInt(""String_Node_Str"");
  INVENTORY_MAXVIOLATIONS=getInt(""String_Node_Str"");
  INVENTORY_MAXVIOLATIONTIME=getInt(""String_Node_Str"");
  INVENTORY_TIMEMAX=getInt(""String_Node_Str"");
}",0.9763421292083712
101818,"public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  String name=player.getName();
  double y1=distance.fromY();
  double y2=distance.toY();
  if (!isMovingExempt(player) && !Utilities.isInWater(player) && !Utilities.canStand(player.getLocation().getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-1,0).getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-2,0).getBlock())) {
    Block block=player.getLocation().getBlock();
    if (block.getRelative(BlockFace.NORTH).isLiquid() || block.getRelative(BlockFace.SOUTH).isLiquid() || block.getRelative(BlockFace.EAST).isLiquid()|| block.getRelative(BlockFace.WEST).isLiquid()) {
      if (y1 < y2) {
        return distance.getYDifference() > magic.WATER_CLIMB_MAX;
      }
    }
 else     if (y1 == y2 || y1 < y2) {
      if (y1 == y2) {
        if (block.getRelative(BlockFace.NORTH).getTypeId() == 43 || block.getRelative(BlockFace.NORTH).getTypeId() == 44 || block.getRelative(BlockFace.SOUTH).getTypeId() == 43 || block.getRelative(BlockFace.SOUTH).getTypeId() == 44 || block.getRelative(BlockFace.EAST).getTypeId() == 43 || block.getRelative(BlockFace.EAST).getTypeId() == 44 || block.getRelative(BlockFace.WEST).getTypeId() == 43 || block.getRelative(BlockFace.WEST).getTypeId() == 44) {
          return false;
        }
 else         if (player.isSneaking() && Utilities.isStair(block.getRelative(BlockFace.NORTH)) || Utilities.isStair(block.getRelative(BlockFace.SOUTH)) || Utilities.isStair(block.getRelative(BlockFace.EAST)) || Utilities.isStair(block.getRelative(BlockFace.WEST))) {
          return false;
        }
      }
      int violation=flightViolation.containsKey(name) ? flightViolation.get(name) + 1 : 1;
      increment(player,flightViolation,violation);
      if (violation > magic.FLIGHT_LIMIT) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  flightViolation.put(name,0);
  return false;
}","public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  String name=player.getName();
  double y1=distance.fromY();
  double y2=distance.toY();
  if (!isMovingExempt(player) && !Utilities.isInWater(player) && !Utilities.canStand(player.getLocation().getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-1,0).getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-2,0).getBlock())) {
    Block block=player.getLocation().getBlock();
    if (block.getRelative(BlockFace.NORTH).isLiquid() || block.getRelative(BlockFace.SOUTH).isLiquid() || block.getRelative(BlockFace.EAST).isLiquid()|| block.getRelative(BlockFace.WEST).isLiquid()) {
      if (y1 < y2) {
        return distance.getYDifference() > magic.WATER_CLIMB_MAX;
      }
    }
 else     if (y1 == y2 || y1 < y2) {
      if (y1 == y2) {
        if (block.getRelative(BlockFace.NORTH).getTypeId() == 43 || block.getRelative(BlockFace.NORTH).getTypeId() == 44 || block.getRelative(BlockFace.SOUTH).getTypeId() == 43 || block.getRelative(BlockFace.SOUTH).getTypeId() == 44 || block.getRelative(BlockFace.EAST).getTypeId() == 43 || block.getRelative(BlockFace.EAST).getTypeId() == 44 || block.getRelative(BlockFace.WEST).getTypeId() == 43 || block.getRelative(BlockFace.WEST).getTypeId() == 44) {
          return false;
        }
 else         if (player.isSneaking() && (Utilities.isStair(block.getRelative(BlockFace.NORTH)) || Utilities.isStair(block.getRelative(BlockFace.SOUTH)) || Utilities.isStair(block.getRelative(BlockFace.EAST))|| Utilities.isStair(block.getRelative(BlockFace.WEST))|| Utilities.isStair(block.getRelative(BlockFace.NORTH_EAST))|| Utilities.isStair(block.getRelative(BlockFace.SOUTH_EAST))|| Utilities.isStair(block.getRelative(BlockFace.SOUTH_WEST))|| Utilities.isStair(block.getRelative(BlockFace.NORTH_WEST)))) {
          return false;
        }
      }
      int violation=flightViolation.containsKey(name) ? flightViolation.get(name) + 1 : 1;
      increment(player,flightViolation,violation);
      if (violation > magic.FLIGHT_LIMIT) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  flightViolation.put(name,0);
  return false;
}",0.9416213661073032
101819,"public boolean increaseLevel(CheckType type){
  if (silentMode && type.getUses(name) % 4 != 0) {
    return false;
  }
 else {
    level++;
    if (level == med) {
      Anticheat.getManager().getUserManager().alertMed(this,type);
    }
 else     if (level == high) {
      Anticheat.getManager().getUserManager().alertHigh(this,type);
      level=high - 10;
    }
    return true;
  }
}","public boolean increaseLevel(CheckType type){
  if (getPlayer().isOnline()) {
    if (silentMode && type.getUses(name) % 4 != 0) {
      return false;
    }
 else {
      level++;
      if (level == med) {
        Anticheat.getManager().getUserManager().alertMed(this,type);
      }
 else       if (level == high) {
        Anticheat.getManager().getUserManager().alertHigh(this,type);
        level=high - 10;
      }
      return true;
    }
  }
 else {
    return false;
  }
}",0.8429561200923787
101820,"public boolean justStartedEating(Player player){
  if (startEat.containsKey(player.getName())) {
    long l=startEat.get(player.getName());
    startEat.remove(player.getName());
    return (System.currentTimeMillis() - l) < EAT_TIME_MIN;
  }
  return false;
}","public boolean justStartedEating(Player player){
  if (startEat.containsKey(player.getName())) {
    long l=startEat.get(player.getName());
    startEat.remove(player.getName());
    System.out.println(player.getName() + ""String_Node_Str"" + (System.currentTimeMillis() - l));
    return (System.currentTimeMillis() - l) < EAT_TIME_MIN;
  }
  return false;
}",0.8427876823338736
101821,"private boolean isDoing(Player player,Map<String,Long> map,double max){
  if (map.containsKey(player.getName())) {
    if (max != -1) {
      if ((map.get(player.getName()) / 1000) > max) {
        map.remove(player.getName());
        return false;
      }
 else {
        return true;
      }
    }
 else {
      if (map.get(player.getName()) < System.currentTimeMillis()) {
        map.remove(player.getName());
        return false;
      }
 else {
        return true;
      }
    }
  }
 else {
    return false;
  }
}","private boolean isDoing(Player player,Map<String,Long> map,double max){
  if (map.containsKey(player.getName())) {
    if (max != -1) {
      if (((System.currentTimeMillis() - map.get(player.getName())) / 1000) > max) {
        map.remove(player.getName());
        return false;
      }
 else {
        return true;
      }
    }
 else {
      if (map.get(player.getName()) < System.currentTimeMillis()) {
        map.remove(player.getName());
        return false;
      }
 else {
        return true;
      }
    }
  }
 else {
    return false;
  }
}",0.9712163416898792
101822,"@EventHandler(ignoreCancelled=true) public void onEntityDamage(EntityDamageEvent event){
  boolean noHack=true;
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (event.getEntity() instanceof Player) {
      Player player=(Player)event.getEntity();
      if (e.getDamager() instanceof Player) {
        Player p=(Player)e.getDamager();
        backend.logDamage(p);
        backend.logDamage(player);
        if (checkManager.willCheck(p,CheckType.LONG_REACH)) {
          Distance distance=new Distance(player.getLocation(),p.getLocation());
          if (backend.checkLongReachDamage(distance.getXDifference(),distance.getYDifference(),distance.getZDifference())) {
            event.setCancelled(!config.silentMode());
            log(""String_Node_Str"",p,CheckType.LONG_REACH);
            noHack=false;
          }
        }
      }
 else {
        backend.logDamage(player);
      }
    }
    if (e.getDamager() instanceof Player) {
      Player player=(Player)e.getDamager();
      if (checkManager.willCheck(player,CheckType.FORCEFIELD)) {
        if (backend.justSprinted(player)) {
          event.setCancelled(!config.silentMode());
          log(""String_Node_Str"",player,CheckType.FORCEFIELD);
          noHack=false;
        }
      }
      if (checkManager.willCheck(player,CheckType.NO_SWING)) {
        if (!backend.justAnimated(player)) {
          event.setCancelled(!config.silentMode());
          log(""String_Node_Str"",player,CheckType.NO_SWING);
          noHack=false;
        }
      }
      if (noHack) {
        decrease(player);
      }
    }
  }
}","@EventHandler(ignoreCancelled=true) public void onEntityDamage(EntityDamageEvent event){
  boolean noHack=true;
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (event.getEntity() instanceof Player) {
      Player player=(Player)event.getEntity();
      if (e.getDamager() instanceof Player) {
        Player p=(Player)e.getDamager();
        backend.logDamage(p,1);
        int value=p.getInventory().getItemInHand().containsEnchantment(Enchantment.KNOCKBACK) ? 2 : 1;
        backend.logDamage(player,value);
        if (checkManager.willCheck(p,CheckType.LONG_REACH)) {
          Distance distance=new Distance(player.getLocation(),p.getLocation());
          if (backend.checkLongReachDamage(distance.getXDifference(),distance.getYDifference(),distance.getZDifference())) {
            event.setCancelled(!config.silentMode());
            log(""String_Node_Str"",p,CheckType.LONG_REACH);
            noHack=false;
          }
        }
      }
 else {
        if (e.getDamager() instanceof TNTPrimed || e.getDamager() instanceof Creeper) {
          backend.logDamage(player,3);
        }
 else {
          backend.logDamage(player,1);
        }
      }
    }
    if (e.getDamager() instanceof Player) {
      Player player=(Player)e.getDamager();
      if (checkManager.willCheck(player,CheckType.FORCEFIELD)) {
        if (backend.justSprinted(player)) {
          event.setCancelled(!config.silentMode());
          log(""String_Node_Str"",player,CheckType.FORCEFIELD);
          noHack=false;
        }
      }
      if (checkManager.willCheck(player,CheckType.NO_SWING)) {
        if (!backend.justAnimated(player)) {
          event.setCancelled(!config.silentMode());
          log(""String_Node_Str"",player,CheckType.NO_SWING);
          noHack=false;
        }
      }
      if (noHack) {
        decrease(player);
      }
    }
  }
}",0.922645739910314
101823,"public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  String name=player.getName();
  int y1=(int)distance.fromY();
  int y2=(int)distance.toY();
  if ((y1 == y2 || y1 < y2) && !Utilities.isInWater(player) && !Utilities.canStand(player.getLocation().getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-1,0).getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-2,0).getBlock())) {
    int violation=flightViolation.containsKey(name) ? flightViolation.get(name) + 1 : 1;
    increment(player,flightViolation,violation);
    if (violation > FLIGHT_LIMIT) {
      return true;
    }
 else {
      return false;
    }
  }
 else {
    flightViolation.put(name,0);
    return false;
  }
}","public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  String name=player.getName();
  int y1=(int)distance.fromY();
  int y2=(int)distance.toY();
  if (!isMovingExempt(player) && (y1 == y2 || y1 < y2) && !Utilities.isInWater(player)&& !Utilities.canStand(player.getLocation().getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-1,0).getBlock())&& Utilities.cantStandAt(player.getLocation().add(0,-2,0).getBlock())) {
    int violation=flightViolation.containsKey(name) ? flightViolation.get(name) + 1 : 1;
    increment(player,flightViolation,violation);
    if (violation > FLIGHT_LIMIT) {
      return true;
    }
 else {
      return false;
    }
  }
 else {
    flightViolation.put(name,0);
    return false;
  }
}",0.982256020278834
101824,"public void logDamage(final Player player){
  int time=DAMAGE_TIME;
  if (player.getInventory().getItemInHand().getEnchantments().containsKey(Enchantment.KNOCKBACK)) {
    time=KNOCKBACK_DAMAGE_TIME;
  }
  logEvent(movingExempt,player,time);
}","public void logDamage(final Player player,int type){
  int time;
switch (type) {
case 1:
    time=DAMAGE_TIME;
  break;
case 2:
time=KNOCKBACK_DAMAGE_TIME;
break;
case 3:
time=EXPLOSION_DAMAGE_TIME;
break;
default :
time=DAMAGE_TIME;
break;
}
logEvent(movingExempt,player,time);
}",0.260038240917782
101825,"@EventHandler public void onEntityRegainHealth(EntityRegainHealthEvent event){
  if (event.getEntity() instanceof Player && event.getRegainReason() == RegainReason.SATIATED) {
    Player player=(Player)event.getEntity();
    if (checkManager.willCheck(player,CheckType.FAST_HEAL)) {
      if (backend.justHealed(player)) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.FAST_HEAL);
      }
 else {
        decrease(player);
      }
    }
  }
}","@EventHandler public void onEntityRegainHealth(EntityRegainHealthEvent event){
  if (event.getEntity() instanceof Player && event.getRegainReason() == RegainReason.SATIATED) {
    Player player=(Player)event.getEntity();
    if (checkManager.willCheck(player,CheckType.FAST_HEAL)) {
      if (backend.justHealed(player)) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.FAST_HEAL);
        return;
      }
 else {
        decrease(player);
        backend.logHeal(player);
      }
    }
  }
}",0.952657004830918
101826,"@EventHandler public void onFoodLevelChange(FoodLevelChangeEvent event){
  if (event.getEntity() instanceof Player) {
    Player player=(Player)event.getEntity();
    if (checkManager.willCheck(player,CheckType.FAST_EAT)) {
      if (backend.justStartedEating(player)) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.FAST_EAT);
      }
 else {
        decrease(player);
      }
    }
  }
}","@EventHandler public void onFoodLevelChange(FoodLevelChangeEvent event){
  if (event.getEntity() instanceof Player) {
    Player player=(Player)event.getEntity();
    if (checkManager.willCheck(player,CheckType.FAST_EAT)) {
      if (backend.justStartedEating(player)) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.FAST_EAT);
        return;
      }
 else {
        decrease(player);
        backend.logEatingStart(player);
      }
    }
  }
}",0.9401709401709402
101827,"@EventHandler public void onProjectileLaunch(ProjectileLaunchEvent event){
  if (event.getEntity().getShooter() instanceof Player) {
    Player player=(Player)event.getEntity().getShooter();
    if (event.getEntity() instanceof Arrow) {
      return;
    }
    if (checkManager.willCheck(player,CheckType.FAST_PROJECTILE)) {
      if (backend.justLaunched(player)) {
        event.setCancelled(!config.silentMode());
        log(""String_Node_Str"",player,CheckType.FAST_PROJECTILE);
      }
 else {
        backend.logProjectile(player,this);
      }
    }
  }
}","@EventHandler public void onProjectileLaunch(ProjectileLaunchEvent event){
  if (event.getEntity().getShooter() instanceof Player) {
    Player player=(Player)event.getEntity().getShooter();
    if (event.getEntity() instanceof Arrow) {
      return;
    }
    if (checkManager.willCheck(player,CheckType.FAST_PROJECTILE)) {
      backend.logProjectile(player,this);
    }
  }
}",0.7561235356762513
101828,"public static void alert(String[] message){
  for (  Player player : Bukkit.getOnlinePlayers()) {
    if (player.hasPermission(""String_Node_Str""))     ;
    for (    String msg : message) {
      player.sendMessage(msg);
    }
  }
  if (Anticheat.getManager().getConfiguration().logConsole()) {
    for (    String msg : message) {
      Anticheat.getManager().log(msg);
    }
  }
}","public static void alert(String[] message){
  for (  Player player : Bukkit.getOnlinePlayers()) {
    for (    String msg : message) {
      if (player.hasPermission(""String_Node_Str""))       player.sendMessage(msg);
    }
  }
  if (Anticheat.getManager().getConfiguration().logConsole()) {
    for (    String msg : message) {
      Anticheat.getManager().log(msg);
    }
  }
}",0.8921052631578947
101829,"@EventHandler public void onBlockBreak(BlockBreakEvent event){
  if (config.logXRay()) {
    Player p=event.getPlayer();
    String player=p.getName();
    if (checkManager.willCheck(p,CheckType.XRAY)) {
      Material m=event.getBlock().getType();
      if (m == Material.DIAMOND_ORE) {
        tracker.addDiamond(player);
      }
 else       if (m == Material.IRON_ORE) {
        tracker.addIron(player);
      }
 else       if (m == Material.COAL_ORE) {
        tracker.addCoal(player);
      }
 else       if (m == Material.GOLD_ORE) {
        tracker.addGold(player);
      }
 else       if (m == Material.LAPIS_ORE) {
        tracker.addLapis(player);
      }
 else       if (m == Material.REDSTONE_ORE) {
        tracker.addRedstone(player);
      }
 else       if (m == Material.GOLD_ORE) {
        tracker.addGold(player);
      }
 else {
        tracker.addBlock(player);
      }
      tracker.addTotal(player);
    }
  }
}","@EventHandler public void onBlockBreak(BlockBreakEvent event){
  if (config.logXRay()) {
    Player p=event.getPlayer();
    String player=p.getName();
    if (checkManager.willCheck(p,CheckType.XRAY)) {
      Material m=event.getBlock().getType();
      if (m == Material.DIAMOND_ORE) {
        tracker.addDiamond(player);
      }
 else       if (m == Material.IRON_ORE) {
        tracker.addIron(player);
      }
 else       if (m == Material.GOLD_ORE) {
        tracker.addGold(player);
      }
 else       if (m == Material.LAPIS_ORE) {
        tracker.addLapis(player);
      }
 else       if (m == Material.REDSTONE_ORE) {
        tracker.addRedstone(player);
      }
 else       if (m == Material.GOLD_ORE) {
        tracker.addGold(player);
      }
 else {
        tracker.addBlock(player);
      }
      tracker.addTotal(player);
    }
  }
}",0.9534492428491308
101830,"public XRayStats(String player,Map<String,Integer> diamond,Map<String,Integer> gold,Map<String,Integer> iron,Map<String,Integer> coal,Map<String,Integer> lapis,Map<String,Integer> redstone,Map<String,Integer> other,Map<String,Integer> total){
  if (total.get(player) != null) {
    t=total.get(player);
  }
  if (diamond.get(player) != null) {
    d=(diamond.get(player) / t) * DIVISOR;
  }
  if (gold.get(player) != null) {
    g=(gold.get(player) / t) * DIVISOR;
  }
  if (iron.get(player) != null) {
    i=(iron.get(player) / t) * DIVISOR;
  }
  if (coal.get(player) != null) {
    c=(coal.get(player) / t) * DIVISOR;
  }
  if (lapis.get(player) != null) {
    l=(lapis.get(player) / t) * DIVISOR;
  }
  if (redstone.get(player) != null) {
    r=(redstone.get(player) / t) * DIVISOR;
  }
  if (other.get(player) != null) {
    o=(other.get(player) / t) * DIVISOR;
  }
}","public XRayStats(String player,Map<String,Integer> diamond,Map<String,Integer> gold,Map<String,Integer> iron,Map<String,Integer> lapis,Map<String,Integer> redstone,Map<String,Integer> other,Map<String,Integer> total){
  if (total.get(player) != null) {
    t=total.get(player);
  }
  if (diamond.get(player) != null) {
    d=(diamond.get(player) / t) * DIVISOR;
  }
  if (gold.get(player) != null) {
    g=(gold.get(player) / t) * DIVISOR;
  }
  if (iron.get(player) != null) {
    i=(iron.get(player) / t) * DIVISOR;
  }
  if (lapis.get(player) != null) {
    l=(lapis.get(player) / t) * DIVISOR;
  }
  if (redstone.get(player) != null) {
    r=(redstone.get(player) / t) * DIVISOR;
  }
  if (other.get(player) != null) {
    o=(other.get(player) / t) * DIVISOR;
  }
}",0.8848263254113345
101831,"public void getStats(CommandSender cs,String player){
  XRayStats stats=new XRayStats(player,diamond,gold,iron,coal,lapis,redstone,block,totalblock);
  double total=stats.getOther();
  cs.sendMessage(""String_Node_Str"" + GREEN + ""String_Node_Str""+ WHITE+ ""String_Node_Str"");
  cs.sendMessage(GRAY + ""String_Node_Str"" + WHITE+ player);
  cs.sendMessage(GRAY + ""String_Node_Str"" + WHITE+ stats.getTotal());
  calculate(cs,player,stats.getDiamond(),total,""String_Node_Str"");
  calculate(cs,player,stats.getGold(),total,""String_Node_Str"");
  calculate(cs,player,stats.getIron(),total,""String_Node_Str"");
  calculate(cs,player,stats.getCoal(),total,""String_Node_Str"");
  calculate(cs,player,stats.getLapis(),total,""String_Node_Str"");
  calculate(cs,player,stats.getRedstone(),total,""String_Node_Str"");
  cs.sendMessage(GRAY + ""String_Node_Str"" + WHITE+ round(stats.getOther())+ ""String_Node_Str"");
  cs.sendMessage(""String_Node_Str"");
}","public void getStats(CommandSender cs,String player){
  XRayStats stats=new XRayStats(player,diamond,gold,iron,lapis,redstone,block,totalblock);
  double total=stats.getOther();
  cs.sendMessage(""String_Node_Str"" + GREEN + ""String_Node_Str""+ WHITE+ ""String_Node_Str"");
  cs.sendMessage(GRAY + ""String_Node_Str"" + WHITE+ player);
  cs.sendMessage(GRAY + ""String_Node_Str"" + WHITE+ stats.getTotal());
  calculate(cs,player,stats.getDiamond(),total,""String_Node_Str"");
  calculate(cs,player,stats.getGold(),total,""String_Node_Str"");
  calculate(cs,player,stats.getIron(),total,""String_Node_Str"");
  calculate(cs,player,stats.getLapis(),total,""String_Node_Str"");
  calculate(cs,player,stats.getRedstone(),total,""String_Node_Str"");
  cs.sendMessage(GRAY + ""String_Node_Str"" + WHITE+ round(stats.getOther())+ ""String_Node_Str"");
  cs.sendMessage(""String_Node_Str"");
}",0.9614740368509213
101832,"public boolean hasAbnormal(String player){
  XRayStats stats=new XRayStats(player,diamond,gold,iron,coal,lapis,redstone,block,totalblock);
  double total=stats.getOther();
  return calculate(player,stats.getDiamond(),total) || calculate(player,stats.getGold(),total) || calculate(player,stats.getIron(),total)|| calculate(player,stats.getCoal(),total)|| calculate(player,stats.getLapis(),total)|| calculate(player,stats.getRedstone(),total);
}","public boolean hasAbnormal(String player){
  XRayStats stats=new XRayStats(player,diamond,gold,iron,lapis,redstone,block,totalblock);
  double total=stats.getOther();
  return calculate(player,stats.getDiamond(),total) || calculate(player,stats.getGold(),total) || calculate(player,stats.getIron(),total)|| calculate(player,stats.getLapis(),total)|| calculate(player,stats.getRedstone(),total);
}",0.9439809296781884
101833,"public void reset(String player){
  totalblock.put(player,1);
  diamond.put(player,0);
  iron.put(player,0);
  gold.put(player,0);
  coal.put(player,0);
  redstone.put(player,0);
  lapis.put(player,0);
  totalblock.put(player,0);
}","public void reset(String player){
  totalblock.put(player,1);
  diamond.put(player,0);
  iron.put(player,0);
  gold.put(player,0);
  redstone.put(player,0);
  lapis.put(player,0);
  totalblock.put(player,0);
}",0.95
101834,"@EventHandler public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  Block playerClick=player.getTargetBlock(Utilities.getNonSolid(),5);
  PlayerInventory inv=player.getInventory();
  if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    Material m=inv.getItemInHand().getType();
    if (m == Material.BOW) {
      backend.logBowWindUp(player);
    }
 else     if (Utilities.isFood(m)) {
      backend.logEatingStart(player);
    }
  }
  Block block=event.getClickedBlock();
  if (block != null) {
    Distance distance=new Distance(player.getLocation(),block.getLocation());
    backend.checkLongReachBlock(player,distance.getXDifference(),distance.getYDifference(),distance.getZDifference());
  }
}","@EventHandler public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  PlayerInventory inv=player.getInventory();
  if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    Material m=inv.getItemInHand().getType();
    if (m == Material.BOW) {
      backend.logBowWindUp(player);
    }
 else     if (Utilities.isFood(m)) {
      backend.logEatingStart(player);
    }
  }
  Block block=event.getClickedBlock();
  if (block != null) {
    Distance distance=new Distance(player.getLocation(),block.getLocation());
    backend.checkLongReachBlock(player,distance.getXDifference(),distance.getYDifference(),distance.getZDifference());
  }
}",0.953580901856764
101835,"public static void alert(String[] message){
  for (  String msg : message) {
    Bukkit.broadcast(msg,""String_Node_Str"");
  }
  if (Anticheat.getManager().getConfiguration().logConsole()) {
    for (    String msg : message) {
      Anticheat.getManager().log(msg);
    }
  }
}","public static void alert(String[] message){
  for (  Player player : Bukkit.getOnlinePlayers()) {
    if (player.hasPermission(""String_Node_Str""))     ;
    for (    String msg : message) {
      player.sendMessage(msg);
    }
  }
  if (Anticheat.getManager().getConfiguration().logConsole()) {
    for (    String msg : message) {
      Anticheat.getManager().log(msg);
    }
  }
}",0.7223065250379362
101836,"public boolean checkVisuals(Player player,Block targetBlock,Block playerClick){
  if (!Utilities.isInteractable(targetBlock.getType())) {
    return false;
  }
  double x=targetBlock.getX() - playerClick.getX() * ((targetBlock.getX() - playerClick.getX() * 1) < 0 ? -1 : 1);
  double y=targetBlock.getY() - playerClick.getY() * ((targetBlock.getY() - playerClick.getY() * 1) < 0 ? -1 : 1);
  double z=targetBlock.getZ() - playerClick.getZ() * ((targetBlock.getZ() - playerClick.getZ() * 1) < 0 ? -1 : 1);
  return x >= VISUALS_MAXOFFSET || y >= VISUALS_MAXOFFSET || z >= VISUALS_MAXOFFSET;
}","public boolean checkVisuals(Player player,Block targetBlock,Block playerClick){
  if (!Utilities.isInteractable(targetBlock.getType())) {
    return false;
  }
  if (playerClick.getType() == Material.TRAP_DOOR) {
    Location x1=new Location(targetBlock.getWorld(),playerClick.getX() - 1,playerClick.getY(),playerClick.getZ());
    Location x2=new Location(targetBlock.getWorld(),playerClick.getX() + 1,playerClick.getY(),playerClick.getZ());
    Location y1=new Location(targetBlock.getWorld(),playerClick.getX(),playerClick.getY() - 1,playerClick.getZ());
    Location y2=new Location(targetBlock.getWorld(),playerClick.getX(),playerClick.getY() + 1,playerClick.getZ());
    Location z1=new Location(targetBlock.getWorld(),playerClick.getX(),playerClick.getY(),playerClick.getZ() - 1);
    Location z2=new Location(targetBlock.getWorld(),playerClick.getX(),playerClick.getY(),playerClick.getZ() + 1);
    if (x1.equals(targetBlock.getLocation()) || x2.equals(targetBlock.getLocation()) || y1.equals(targetBlock.getLocation())|| y2.equals(targetBlock.getLocation())|| z1.equals(targetBlock.getLocation())|| z2.equals(targetBlock.getLocation())) {
      System.out.println((int)playerClick.getData());
      String dir=Utilities.getCardinalDirection(player);
      int minimum=0;
      if (dir.equalsIgnoreCase(""String_Node_Str"")) {
        minimum=0;
      }
      if (dir.equalsIgnoreCase(""String_Node_Str"")) {
        minimum=1;
      }
      if (dir.equalsIgnoreCase(""String_Node_Str"")) {
        minimum=2;
      }
      if (dir.equalsIgnoreCase(""String_Node_Str"")) {
        minimum=3;
      }
      if ((int)playerClick.getData() == minimum)       return true;
      if ((int)playerClick.getData() == minimum + 4 && (playerClick.getLocation().distance(player.getLocation())) < 2)       return false;
    }
  }
  double x=targetBlock.getX() - playerClick.getX() * ((targetBlock.getX() - playerClick.getX() * 1) < 0 ? -1 : 1);
  double y=targetBlock.getY() - playerClick.getY() * ((targetBlock.getY() - playerClick.getY() * 1) < 0 ? -1 : 1);
  double z=targetBlock.getZ() - playerClick.getZ() * ((targetBlock.getZ() - playerClick.getZ() * 1) < 0 ? -1 : 1);
  return x >= VISUALS_MAXOFFSET || y >= VISUALS_MAXOFFSET || z >= VISUALS_MAXOFFSET;
}",0.4163437830221909
101837,"public boolean checkVisuals(Player player,Block targetBlock,Block playerClick){
  if (isInteracting(player)) {
    return false;
  }
  double x=targetBlock.getX() - playerClick.getX() * ((targetBlock.getX() - playerClick.getX() * 1) < 0 ? -1 : 1);
  double y=targetBlock.getY() - playerClick.getY() * ((targetBlock.getY() - playerClick.getY() * 1) < 0 ? -1 : 1);
  double z=targetBlock.getZ() - playerClick.getZ() * ((targetBlock.getZ() - playerClick.getZ() * 1) < 0 ? -1 : 1);
  return x >= VISUALS_MAXOFFSET || y >= VISUALS_MAXOFFSET || z >= VISUALS_MAXOFFSET;
}","public boolean checkVisuals(Player player,Block targetBlock,Block playerClick){
  if (isInteracting(player) || playerClick.isLiquid()) {
    return false;
  }
  double x=targetBlock.getX() - playerClick.getX() * ((targetBlock.getX() - playerClick.getX() * 1) < 0 ? -1 : 1);
  double y=targetBlock.getY() - playerClick.getY() * ((targetBlock.getY() - playerClick.getY() * 1) < 0 ? -1 : 1);
  double z=targetBlock.getZ() - playerClick.getZ() * ((targetBlock.getZ() - playerClick.getZ() * 1) < 0 ? -1 : 1);
  return x >= VISUALS_MAXOFFSET || y >= VISUALS_MAXOFFSET || z >= VISUALS_MAXOFFSET;
}",0.977469670710572
101838,"public boolean checkAscension(Player player,double y1,double y2){
  int max=ASCENSION_COUNT_MAX;
  if (player.hasPotionEffect(PotionEffectType.JUMP)) {
    max+=12;
  }
  Block block=player.getLocation().getBlock();
  if (!isMovingExempt(player) && !Utilities.isInWater(player) && !Utilities.isOnLadder(player)&& !player.isInsideVehicle()) {
    String name=player.getName();
    if (y1 < y2) {
      if (!block.getRelative(BlockFace.NORTH).isLiquid() && !block.getRelative(BlockFace.SOUTH).isLiquid() && !block.getRelative(BlockFace.EAST).isLiquid()&& !block.getRelative(BlockFace.WEST).isLiquid()) {
        increment(player,ascensionCount,max);
        if (ascensionCount.get(name) >= max) {
          return true;
        }
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}","public boolean checkAscension(Player player,double y1,double y2){
  int max=ASCENSION_COUNT_MAX;
  if (player.hasPotionEffect(PotionEffectType.JUMP)) {
    max+=12;
  }
  Block block=player.getLocation().getBlock();
  if (!isMovingExempt(player) && !Utilities.isInWater(player) && !Utilities.isOnClimbableBlock(player)&& !player.isInsideVehicle()) {
    String name=player.getName();
    if (y1 < y2) {
      if (!block.getRelative(BlockFace.NORTH).isLiquid() && !block.getRelative(BlockFace.SOUTH).isLiquid() && !block.getRelative(BlockFace.EAST).isLiquid()&& !block.getRelative(BlockFace.WEST).isLiquid()) {
        increment(player,ascensionCount,max);
        if (ascensionCount.get(name) >= max) {
          return true;
        }
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}",0.9877300613496932
101839,"public boolean checkSpider(Player player,double y){
  if (y <= LADDER_Y_MAX && y >= LADDER_Y_MIN && !Utilities.isOnLadder(player)) {
    return true;
  }
  return false;
}","public boolean checkSpider(Player player,double y){
  if (y <= LADDER_Y_MAX && y >= LADDER_Y_MIN && !Utilities.isOnClimbableBlock(player)) {
    return true;
  }
  return false;
}",0.9542857142857144
101840,"public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  double y1=distance.fromY();
  double y2=distance.toY();
  Block block=player.getLocation().getBlock().getRelative(BlockFace.DOWN);
  if (y1 == y2 && !isMovingExempt(player) && !player.isInsideVehicle() && player.getFallDistance() == 0 && !Utilities.isOnLilyPad(player)) {
    String name=player.getName();
    if (Utilities.cantStandAt(block) && !Utilities.isOnLilyPad(player) && Utilities.cantStandAt(player.getLocation().getBlock())&& !Utilities.isInWater(player)) {
      int violation=1;
      if (!flightViolation.containsKey(name)) {
        flightViolation.put(name,violation);
      }
 else {
        violation=flightViolation.get(name) + 1;
        flightViolation.put(name,violation);
      }
      if (violation >= FLIGHT_LIMIT) {
        flightViolation.put(name,1);
        return true;
      }
      if (flightViolation.containsKey(name) && flightViolation.get(name) > 0) {
        for (int i=FLY_LOOP; i > 0; i--) {
          Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
          Block lower=newLocation.getBlock();
          if (lower.getTypeId() == 0) {
            player.teleport(newLocation);
            break;
          }
        }
      }
    }
  }
  return false;
}","public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  double y1=distance.fromY();
  double y2=distance.toY();
  Block block=player.getLocation().getBlock().getRelative(BlockFace.DOWN);
  if (y1 == y2 && !isMovingExempt(player) && !player.isInsideVehicle() && player.getFallDistance() == 0 && !Utilities.isOnLilyPad(player) && !Utilities.isOnVine(player)) {
    String name=player.getName();
    if (Utilities.cantStandAt(block) && !Utilities.isOnLilyPad(player) && Utilities.cantStandAt(player.getLocation().getBlock())&& !Utilities.isInWater(player)) {
      int violation=1;
      if (!flightViolation.containsKey(name)) {
        flightViolation.put(name,violation);
      }
 else {
        violation=flightViolation.get(name) + 1;
        flightViolation.put(name,violation);
      }
      if (violation >= FLIGHT_LIMIT) {
        flightViolation.put(name,1);
        return true;
      }
      if (flightViolation.containsKey(name) && flightViolation.get(name) > 0) {
        for (int i=FLY_LOOP; i > 0; i--) {
          Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
          Block lower=newLocation.getBlock();
          if (lower.getTypeId() == 0) {
            player.teleport(newLocation);
            break;
          }
        }
      }
    }
  }
  return false;
}",0.9891494574728736
101841,"public boolean checkYAxis(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  if (!isMovingExempt(player) && !Utilities.isOnLadder(player) && !player.isInsideVehicle()&& !Utilities.isInWater(player)) {
    double y1=player.getLocation().getY();
    String name=player.getName();
    if (!lastYcoord.containsKey(name) || !lastYtime.containsKey(name) || !yAxisLastViolation.containsKey(name)|| !yAxisLastViolation.containsKey(name)) {
      lastYcoord.put(name,y1);
      yAxisViolations.put(name,0);
      yAxisLastViolation.put(name,0L);
      lastYtime.put(name,System.currentTimeMillis());
    }
 else {
      if (y1 > lastYcoord.get(name) && yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) < Y_MAXVIOTIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if (yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) > Y_MAXVIOTIME) {
          yAxisViolations.put(name,0);
          yAxisLastViolation.put(name,0L);
        }
      }
      if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF && (System.currentTimeMillis() - lastYtime.get(name)) < Y_TIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF + 1 || (System.currentTimeMillis() - lastYtime.get(name)) > Y_TIME) {
          lastYtime.put(name,System.currentTimeMillis());
          lastYcoord.put(name,y1);
        }
      }
    }
  }
  return false;
}","public boolean checkYAxis(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  if (!isMovingExempt(player) && !Utilities.isOnClimbableBlock(player) && !player.isInsideVehicle()&& !Utilities.isInWater(player)) {
    double y1=player.getLocation().getY();
    String name=player.getName();
    if (!lastYcoord.containsKey(name) || !lastYtime.containsKey(name) || !yAxisLastViolation.containsKey(name)|| !yAxisLastViolation.containsKey(name)) {
      lastYcoord.put(name,y1);
      yAxisViolations.put(name,0);
      yAxisLastViolation.put(name,0L);
      lastYtime.put(name,System.currentTimeMillis());
    }
 else {
      if (y1 > lastYcoord.get(name) && yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) < Y_MAXVIOTIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if (yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) > Y_MAXVIOTIME) {
          yAxisViolations.put(name,0);
          yAxisLastViolation.put(name,0L);
        }
      }
      if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF && (System.currentTimeMillis() - lastYtime.get(name)) < Y_TIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF + 1 || (System.currentTimeMillis() - lastYtime.get(name)) > Y_TIME) {
          lastYtime.put(name,System.currentTimeMillis());
          lastYcoord.put(name,y1);
        }
      }
    }
  }
  return false;
}",0.9953682260305696
101842,"@EventHandler public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  Block playerClick=player.getTargetBlock(null,5);
  PlayerInventory inv=player.getInventory();
  if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    Material m=inv.getItemInHand().getType();
    if (m == Material.BOW) {
      backend.logBowWindUp(player);
    }
 else     if (Utilities.isFood(m)) {
      backend.logEatingStart(player);
    }
  }
  if (event.getClickedBlock() != null) {
    Distance distance=new Distance(player.getLocation(),event.getClickedBlock().getLocation());
    backend.checkLongReachBlock(player,distance.getXDifference(),distance.getYDifference(),distance.getZDifference());
  }
  Block block=event.getClickedBlock();
  if (block != null) {
    if (checkManager.willCheck(player,CheckType.VISUAL)) {
      if (backend.checkInteraction(player,block,playerClick)) {
        event.setCancelled(true);
        log(""String_Node_Str"",player,CheckType.VISUAL);
      }
    }
  }
}","@EventHandler public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  Block playerClick=player.getTargetBlock(null,5);
  PlayerInventory inv=player.getInventory();
  if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    Material m=inv.getItemInHand().getType();
    if (m == Material.BOW) {
      backend.logBowWindUp(player);
    }
 else     if (Utilities.isFood(m)) {
      backend.logEatingStart(player);
    }
  }
  if (event.getClickedBlock() != null) {
    Distance distance=new Distance(player.getLocation(),event.getClickedBlock().getLocation());
    backend.checkLongReachBlock(player,distance.getXDifference(),distance.getYDifference(),distance.getZDifference());
  }
  Block block=event.getClickedBlock();
  if (block != null) {
    if (checkManager.willCheck(player,CheckType.VISUAL)) {
      if (backend.checkInteraction(player,block,playerClick)) {
        event.setCancelled(true);
        log(""String_Node_Str"",player,CheckType.VISUAL);
      }
 else {
        backend.logInteraction(player);
      }
    }
  }
}",0.9742647058823528
101843,"public boolean checkInteraction(Player player,Block targetBlock,Block playerClick){
  int strikes=0;
  double x=targetBlock.getX() - playerClick.getX() * ((targetBlock.getX() - playerClick.getX() * 1) < 0 ? -1 : 1);
  double y=targetBlock.getY() - playerClick.getY() * ((targetBlock.getY() - playerClick.getY() * 1) < 0 ? -1 : 1);
  double z=targetBlock.getZ() - playerClick.getZ() * ((targetBlock.getZ() - playerClick.getZ() * 1) < 0 ? -1 : 1);
  if (x >= VISUALS_MAXOFFSET)   strikes++;
  if (y >= VISUALS_MAXOFFSET)   strikes++;
  if (z >= VISUALS_MAXOFFSET)   strikes++;
  return strikes > 0;
}","public boolean checkInteraction(Player player,Block targetBlock,Block playerClick){
  if (isInteracting(player) && !Utilities.isInteractable(targetBlock.getType()))   return false;
  int strikes=0;
  double x=targetBlock.getX() - playerClick.getX() * ((targetBlock.getX() - playerClick.getX() * 1) < 0 ? -1 : 1);
  double y=targetBlock.getY() - playerClick.getY() * ((targetBlock.getY() - playerClick.getY() * 1) < 0 ? -1 : 1);
  double z=targetBlock.getZ() - playerClick.getZ() * ((targetBlock.getZ() - playerClick.getZ() * 1) < 0 ? -1 : 1);
  if (x >= VISUALS_MAXOFFSET)   strikes++;
  if (y >= VISUALS_MAXOFFSET)   strikes++;
  if (z >= VISUALS_MAXOFFSET)   strikes++;
  return strikes > 0;
}",0.9249806651198764
101844,"@EventHandler public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  Block playerClick=player.getTargetBlock(null,5);
  PlayerInventory inv=player.getInventory();
  if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    Material m=inv.getItemInHand().getType();
    if (m == Material.BOW) {
      backend.logBowWindUp(player);
    }
 else     if (Utilities.isFood(m)) {
      backend.logEatingStart(player);
    }
  }
  if (event.getClickedBlock() != null) {
    Distance distance=new Distance(player.getLocation(),event.getClickedBlock().getLocation());
    backend.checkLongReachBlock(player,distance.getXDifference(),distance.getYDifference(),distance.getZDifference());
  }
  Block block=event.getClickedBlock();
  if (block != null) {
    if (checkManager.willCheck(player,CheckType.VISUAL)) {
      if (backend.checkVisuals(player,block,playerClick)) {
        event.setCancelled(true);
        log(""String_Node_Str"",player,CheckType.VISUAL);
      }
 else {
        backend.logInteraction(player);
      }
    }
  }
}","@EventHandler public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  Block playerClick=player.getTargetBlock(null,5);
  PlayerInventory inv=player.getInventory();
  if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    Material m=inv.getItemInHand().getType();
    if (m == Material.BOW) {
      backend.logBowWindUp(player);
    }
 else     if (Utilities.isFood(m)) {
      backend.logEatingStart(player);
    }
  }
  if (event.getClickedBlock() != null) {
    Distance distance=new Distance(player.getLocation(),event.getClickedBlock().getLocation());
    backend.checkLongReachBlock(player,distance.getXDifference(),distance.getYDifference(),distance.getZDifference());
  }
  Block block=event.getClickedBlock();
  if (block != null) {
    if (checkManager.willCheck(player,CheckType.VISUAL) && !Utilities.isPressurePlate(block.getType())) {
      if (backend.checkVisuals(player,block,playerClick)) {
        event.setCancelled(true);
        log(""String_Node_Str"",player,CheckType.VISUAL);
      }
 else {
        backend.logInteraction(player);
      }
    }
  }
}",0.979304271246147
101845,"@Override public void onDisable(){
  Map<String,Integer> map=manager.getPlayerManager().getLevels();
  Iterator<String> set=map.keySet().iterator();
  while (set.hasNext()) {
    String player=set.next();
    config.saveLevel(player,map.get(player));
  }
  config.saveLevels();
  getServer().getScheduler().cancelAllTasks();
}","@Override public void onDisable(){
  AnticheatManager.close();
  Map<String,Integer> map=manager.getPlayerManager().getLevels();
  Iterator<String> set=map.keySet().iterator();
  while (set.hasNext()) {
    String player=set.next();
    config.saveLevel(player,map.get(player));
  }
  config.saveLevels();
  getServer().getScheduler().cancelAllTasks();
}",0.9588235294117649
101846,"@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void checkExploit(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Location from=event.getFrom();
  Location to=event.getTo();
  Distance distance=new Distance(from,to);
  double x=distance.getXDifference();
  double y=distance.getYDifference();
  double z=distance.getZDifference();
  backend.checkAscension(player,from.getY(),to.getY());
  if (checkManager.willCheck(player,CheckType.FLY) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && backend.checkFlight(player,distance)) {
    from.setX(from.getX() - 1);
    from.setY(from.getY() - 1);
    from.setZ(from.getZ() - 1);
    event.setTo(from);
    Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - 2,player.getLocation().getZ());
    Block newBlock=newLocation.getBlock();
    if (newBlock.getTypeId() != 0) {
      event.setTo(newLocation);
    }
    log(""String_Node_Str"",player,CheckType.FLY);
  }
  if (checkManager.willCheck(player,CheckType.FLY) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && backend.checkYAxis(player,distance)) {
    from.setX(from.getX() - 1);
    from.setY(from.getY() - 1);
    from.setZ(from.getZ() - 1);
    if (from.getBlock().getTypeId() == 0) {
      event.setTo(from);
    }
    for (int i=5; i > 0; i--) {
      Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
      Block lower=newLocation.getBlock();
      if (lower.getTypeId() == 0) {
        player.teleport(newLocation);
        break;
      }
    }
    Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - 2,player.getLocation().getZ());
    Block newBlock=newLocation.getBlock();
    if (newBlock.getTypeId() != 0) {
      event.setTo(newLocation);
    }
    log(""String_Node_Str"",player,CheckType.FLY);
  }
  if (checkManager.willCheck(player,CheckType.SPEED) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)) {
    if (event.getFrom().getY() < event.getTo().getY() && backend.checkYSpeed(player,y)) {
      event.setTo(from);
      log(""String_Node_Str"",player,CheckType.SPEED);
    }
    if (backend.checkXZSpeed(player,x,z)) {
      event.setTo(from);
      log(""String_Node_Str"",player,CheckType.SPEED);
    }
  }
  if (checkManager.willCheck(player,CheckType.NOFALL) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)&& event.getFrom().getY() > event.getTo().getY() && backend.checkNoFall(player,y)) {
    event.setTo(from);
    log(""String_Node_Str"",player,CheckType.NOFALL);
  }
}","@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void checkExploit(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Location from=event.getFrom();
  Location to=event.getTo();
  Distance distance=new Distance(from,to);
  double x=distance.getXDifference();
  double y=distance.getYDifference();
  double z=distance.getZDifference();
  backend.logAscension(player,from.getY(),to.getY());
  if (checkManager.willCheck(player,CheckType.FLY) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && backend.checkFlight(player,distance)) {
    from.setX(from.getX() - 1);
    from.setY(from.getY() - 1);
    from.setZ(from.getZ() - 1);
    event.setTo(from);
    Block lower=player.getWorld().getHighestBlockAt(from);
    player.teleport(new Location(lower.getWorld(),lower.getLocation().getX(),lower.getLocation().getY() + 2,lower.getLocation().getZ()));
    log(""String_Node_Str"",player,CheckType.FLY);
  }
  if (checkManager.willCheck(player,CheckType.FLY) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && (backend.checkYAxis(player,distance) || backend.checkAscension(player,from.getY(),to.getY()))) {
    Block lower=player.getWorld().getHighestBlockAt(player.getLocation());
    player.teleport(new Location(lower.getWorld(),lower.getLocation().getX(),lower.getLocation().getY() + 2,lower.getLocation().getZ()));
    log(""String_Node_Str"",player,CheckType.FLY);
  }
  if (checkManager.willCheck(player,CheckType.SPEED) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)) {
    if (event.getFrom().getY() < event.getTo().getY() && backend.checkYSpeed(player,y)) {
      event.setTo(from);
      log(""String_Node_Str"",player,CheckType.SPEED);
    }
    if (backend.checkXZSpeed(player,x,z)) {
      event.setTo(from);
      log(""String_Node_Str"",player,CheckType.SPEED);
    }
  }
  if (checkManager.willCheck(player,CheckType.NOFALL) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)&& event.getFrom().getY() > event.getTo().getY() && backend.checkNoFall(player,y)) {
    event.setTo(from);
    log(""String_Node_Str"",player,CheckType.NOFALL);
  }
}",0.7320922703358964
101847,"public void checkAscension(Player player,double y1,double y2){
  if (y1 < y2) {
    isAscending.add(player.getName());
  }
 else {
    isAscending.remove(player.getName());
  }
}","public boolean checkAscension(Player player,double y1,double y2){
  if (!isMovingExempt(player)) {
    String name=player.getName();
    if (y1 < y2) {
      increment(player,ascensionCount,ASCENSION_COUNT_MAX);
      if (ascensionCount.get(name) >= ASCENSION_COUNT_MAX) {
        return true;
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}",0.1117117117117117
101848,"public boolean checkAscension(Player player,double y1,double y2){
  if (!isMovingExempt(player) && player.getLocation().getBlock().getType() != Material.WATER && player.getLocation().getBlock().getType() != Material.STATIONARY_WATER && !Utilities.isOnLadder(player)) {
    String name=player.getName();
    if (y1 < y2) {
      increment(player,ascensionCount,ASCENSION_COUNT_MAX);
      if (ascensionCount.get(name) >= ASCENSION_COUNT_MAX) {
        return true;
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}","public boolean checkAscension(Player player,double y1,double y2){
  if (!isMovingExempt(player) && player.getLocation().getBlock().getType() != Material.WATER && player.getLocation().getBlock().getType() != Material.STATIONARY_WATER && !Utilities.isOnLadder(player) && !player.isInsideVehicle()) {
    String name=player.getName();
    if (y1 < y2) {
      increment(player,ascensionCount,ASCENSION_COUNT_MAX);
      if (ascensionCount.get(name) >= ASCENSION_COUNT_MAX) {
        return true;
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}",0.9741763134461264
101849,"public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  double y1=distance.fromY();
  double y2=distance.toY();
  Block block=player.getLocation().getBlock().getRelative(BlockFace.DOWN);
  if (y1 == y2 && !isMovingExempt(player) && player.getVehicle() == null && player.getFallDistance() == 0 && !Utilities.isOnLilyPad(player)) {
    String name=player.getName();
    if (Utilities.cantStandAt(block) && !Utilities.isOnLilyPad(player) && Utilities.cantStandAt(player.getLocation().getBlock())&& player.getLocation().getBlock().getType() != Material.WATER && player.getLocation().getBlock().getType() != Material.STATIONARY_WATER) {
      int violation=1;
      if (!flightViolation.containsKey(name)) {
        flightViolation.put(name,violation);
      }
 else {
        violation=flightViolation.get(name) + 1;
        flightViolation.put(name,violation);
      }
      if (violation >= FLIGHT_LIMIT) {
        flightViolation.put(name,1);
        return true;
      }
      if (flightViolation.containsKey(name) && flightViolation.get(name) > 0) {
        for (int i=FLY_LOOP; i > 0; i--) {
          Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
          Block lower=newLocation.getBlock();
          if (lower.getTypeId() == 0) {
            player.teleport(newLocation);
            break;
          }
        }
      }
    }
  }
  return false;
}","public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  double y1=distance.fromY();
  double y2=distance.toY();
  Block block=player.getLocation().getBlock().getRelative(BlockFace.DOWN);
  if (y1 == y2 && !isMovingExempt(player) && !player.isInsideVehicle() && player.getFallDistance() == 0 && !Utilities.isOnLilyPad(player)) {
    String name=player.getName();
    if (Utilities.cantStandAt(block) && !Utilities.isOnLilyPad(player) && Utilities.cantStandAt(player.getLocation().getBlock())&& player.getLocation().getBlock().getType() != Material.WATER && player.getLocation().getBlock().getType() != Material.STATIONARY_WATER) {
      int violation=1;
      if (!flightViolation.containsKey(name)) {
        flightViolation.put(name,violation);
      }
 else {
        violation=flightViolation.get(name) + 1;
        flightViolation.put(name,violation);
      }
      if (violation >= FLIGHT_LIMIT) {
        flightViolation.put(name,1);
        return true;
      }
      if (flightViolation.containsKey(name) && flightViolation.get(name) > 0) {
        for (int i=FLY_LOOP; i > 0; i--) {
          Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
          Block lower=newLocation.getBlock();
          if (lower.getTypeId() == 0) {
            player.teleport(newLocation);
            break;
          }
        }
      }
    }
  }
  return false;
}",0.9888084265964452
101850,"public boolean checkYAxis(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  if (!isMovingExempt(player) && !Utilities.isOnLadder(player)) {
    double y1=player.getLocation().getY();
    String name=player.getName();
    if (!lastYcoord.containsKey(name) || !lastYtime.containsKey(name) || !yAxisLastViolation.containsKey(name)|| !yAxisLastViolation.containsKey(name)) {
      lastYcoord.put(name,y1);
      yAxisViolations.put(name,0);
      yAxisLastViolation.put(name,0L);
      lastYtime.put(name,System.currentTimeMillis());
    }
 else {
      if (y1 > lastYcoord.get(name) && yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) < Y_MAXVIOTIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if (yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) > Y_MAXVIOTIME) {
          yAxisViolations.put(name,0);
          yAxisLastViolation.put(name,0L);
        }
      }
      if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF && (System.currentTimeMillis() - lastYtime.get(name)) < Y_TIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF + 1 || (System.currentTimeMillis() - lastYtime.get(name)) > Y_TIME) {
          lastYtime.put(name,System.currentTimeMillis());
          lastYcoord.put(name,y1);
        }
      }
    }
  }
  return false;
}","public boolean checkYAxis(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  if (!isMovingExempt(player) && !Utilities.isOnLadder(player) && !player.isInsideVehicle()) {
    double y1=player.getLocation().getY();
    String name=player.getName();
    if (!lastYcoord.containsKey(name) || !lastYtime.containsKey(name) || !yAxisLastViolation.containsKey(name)|| !yAxisLastViolation.containsKey(name)) {
      lastYcoord.put(name,y1);
      yAxisViolations.put(name,0);
      yAxisLastViolation.put(name,0L);
      lastYtime.put(name,System.currentTimeMillis());
    }
 else {
      if (y1 > lastYcoord.get(name) && yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) < Y_MAXVIOTIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if (yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) > Y_MAXVIOTIME) {
          yAxisViolations.put(name,0);
          yAxisLastViolation.put(name,0L);
        }
      }
      if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF && (System.currentTimeMillis() - lastYtime.get(name)) < Y_TIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF + 1 || (System.currentTimeMillis() - lastYtime.get(name)) > Y_TIME) {
          lastYtime.put(name,System.currentTimeMillis());
          lastYcoord.put(name,y1);
        }
      }
    }
  }
  return false;
}",0.9931263332543256
101851,"public boolean checkYSpeed(Player player,double y){
  if (player.getVehicle() == null && y > Y_SPEED_MAX && !isVelocity(player)) {
    return true;
  }
  return false;
}","public boolean checkYSpeed(Player player,double y){
  if (!player.isInsideVehicle() && y > Y_SPEED_MAX && !isVelocity(player)) {
    return true;
  }
  return false;
}",0.9464285714285714
101852,"public boolean checkAscension(Player player,double y1,double y2){
  if (!isMovingExempt(player) && player.getLocation().getBlock().getType() != Material.WATER && player.getLocation().getBlock().getType() != Material.STATIONARY_WATER && !Utilities.isOnLadder(player) && !player.isInsideVehicle()) {
    String name=player.getName();
    if (y1 < y2) {
      increment(player,ascensionCount,ASCENSION_COUNT_MAX);
      if (ascensionCount.get(name) >= ASCENSION_COUNT_MAX) {
        return true;
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}","public boolean checkAscension(Player player,double y1,double y2){
  Block block=player.getLocation().getBlock();
  if (!isMovingExempt(player) && !Utilities.isInWater(player) && !Utilities.isOnLadder(player)&& !player.isInsideVehicle()) {
    String name=player.getName();
    if (y1 < y2) {
      if (!block.getRelative(BlockFace.NORTH).isLiquid() && !block.getRelative(BlockFace.SOUTH).isLiquid() && !block.getRelative(BlockFace.EAST).isLiquid()&& !block.getRelative(BlockFace.WEST).isLiquid()) {
        increment(player,ascensionCount,ASCENSION_COUNT_MAX);
        if (ascensionCount.get(name) >= ASCENSION_COUNT_MAX) {
          return true;
        }
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}",0.5258358662613982
101853,"public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  double y1=distance.fromY();
  double y2=distance.toY();
  Block block=player.getLocation().getBlock().getRelative(BlockFace.DOWN);
  if (y1 == y2 && !isMovingExempt(player) && !player.isInsideVehicle() && player.getFallDistance() == 0 && !Utilities.isOnLilyPad(player)) {
    String name=player.getName();
    if (Utilities.cantStandAt(block) && !Utilities.isOnLilyPad(player) && Utilities.cantStandAt(player.getLocation().getBlock())&& player.getLocation().getBlock().getType() != Material.WATER && player.getLocation().getBlock().getType() != Material.STATIONARY_WATER) {
      int violation=1;
      if (!flightViolation.containsKey(name)) {
        flightViolation.put(name,violation);
      }
 else {
        violation=flightViolation.get(name) + 1;
        flightViolation.put(name,violation);
      }
      if (violation >= FLIGHT_LIMIT) {
        flightViolation.put(name,1);
        return true;
      }
      if (flightViolation.containsKey(name) && flightViolation.get(name) > 0) {
        for (int i=FLY_LOOP; i > 0; i--) {
          Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
          Block lower=newLocation.getBlock();
          if (lower.getTypeId() == 0) {
            player.teleport(newLocation);
            break;
          }
        }
      }
    }
  }
  return false;
}","public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  double y1=distance.fromY();
  double y2=distance.toY();
  Block block=player.getLocation().getBlock().getRelative(BlockFace.DOWN);
  if (y1 == y2 && !isMovingExempt(player) && !player.isInsideVehicle() && player.getFallDistance() == 0 && !Utilities.isOnLilyPad(player)) {
    String name=player.getName();
    if (Utilities.cantStandAt(block) && !Utilities.isOnLilyPad(player) && Utilities.cantStandAt(player.getLocation().getBlock())&& !Utilities.isInWater(player)) {
      int violation=1;
      if (!flightViolation.containsKey(name)) {
        flightViolation.put(name,violation);
      }
 else {
        violation=flightViolation.get(name) + 1;
        flightViolation.put(name,violation);
      }
      if (violation >= FLIGHT_LIMIT) {
        flightViolation.put(name,1);
        return true;
      }
      if (flightViolation.containsKey(name) && flightViolation.get(name) > 0) {
        for (int i=FLY_LOOP; i > 0; i--) {
          Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
          Block lower=newLocation.getBlock();
          if (lower.getTypeId() == 0) {
            player.teleport(newLocation);
            break;
          }
        }
      }
    }
  }
  return false;
}",0.9464346639372228
101854,"public boolean checkYAxis(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  if (!isMovingExempt(player) && !Utilities.isOnLadder(player) && !player.isInsideVehicle()) {
    double y1=player.getLocation().getY();
    String name=player.getName();
    if (!lastYcoord.containsKey(name) || !lastYtime.containsKey(name) || !yAxisLastViolation.containsKey(name)|| !yAxisLastViolation.containsKey(name)) {
      lastYcoord.put(name,y1);
      yAxisViolations.put(name,0);
      yAxisLastViolation.put(name,0L);
      lastYtime.put(name,System.currentTimeMillis());
    }
 else {
      if (y1 > lastYcoord.get(name) && yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) < Y_MAXVIOTIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if (yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) > Y_MAXVIOTIME) {
          yAxisViolations.put(name,0);
          yAxisLastViolation.put(name,0L);
        }
      }
      if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF && (System.currentTimeMillis() - lastYtime.get(name)) < Y_TIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF + 1 || (System.currentTimeMillis() - lastYtime.get(name)) > Y_TIME) {
          lastYtime.put(name,System.currentTimeMillis());
          lastYcoord.put(name,y1);
        }
      }
    }
  }
  return false;
}","public boolean checkYAxis(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  if (!isMovingExempt(player) && !Utilities.isOnLadder(player) && !player.isInsideVehicle()&& !Utilities.isInWater(player)) {
    double y1=player.getLocation().getY();
    String name=player.getName();
    if (!lastYcoord.containsKey(name) || !lastYtime.containsKey(name) || !yAxisLastViolation.containsKey(name)|| !yAxisLastViolation.containsKey(name)) {
      lastYcoord.put(name,y1);
      yAxisViolations.put(name,0);
      yAxisLastViolation.put(name,0L);
      lastYtime.put(name,System.currentTimeMillis());
    }
 else {
      if (y1 > lastYcoord.get(name) && yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) < Y_MAXVIOTIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if (yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) > Y_MAXVIOTIME) {
          yAxisViolations.put(name,0);
          yAxisLastViolation.put(name,0L);
        }
      }
      if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF && (System.currentTimeMillis() - lastYtime.get(name)) < Y_TIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF + 1 || (System.currentTimeMillis() - lastYtime.get(name)) > Y_TIME) {
          lastYtime.put(name,System.currentTimeMillis());
          lastYcoord.put(name,y1);
        }
      }
    }
  }
  return false;
}",0.9927553166627716
101855,"@EventHandler(ignoreCancelled=true) public void checkSpeed(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Location from=event.getFrom();
  Location to=event.getTo();
  Distance distance=new Distance(from,to);
  double x=distance.getXDifference();
  double y=distance.getYDifference();
  double z=distance.getZDifference();
  if (checkManager.willCheck(player,CheckType.WATER_WALK) && backend.checkWaterWalk(player,x,z)) {
    event.setTo(from);
    log(""String_Node_Str"",player,CheckType.WATER_WALK);
  }
  if (checkManager.willCheck(player,CheckType.SNEAK) && backend.checkSneak(player,x,z)) {
    event.setTo(from);
    player.setSneaking(false);
    log(""String_Node_Str"",player,CheckType.SNEAK);
  }
  if (checkManager.willCheck(player,CheckType.SPIDER) && backend.checkSpider(player,y)) {
    event.setTo(from);
    log(""String_Node_Str"",player,CheckType.SPIDER);
  }
}","@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void checkSpeed(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Location from=event.getFrom();
  Location to=event.getTo();
  if (event.getTo() != event.getFrom()) {
    Distance distance=new Distance(from,to);
    double x=distance.getXDifference();
    double y=distance.getYDifference();
    double z=distance.getZDifference();
    if (checkManager.willCheck(player,CheckType.WATER_WALK) && backend.checkWaterWalk(player,x,z)) {
      event.setTo(from);
      log(""String_Node_Str"",player,CheckType.WATER_WALK);
    }
    if (checkManager.willCheck(player,CheckType.SNEAK) && backend.checkSneak(player,x,z)) {
      event.setTo(from);
      player.setSneaking(false);
      log(""String_Node_Str"",player,CheckType.SNEAK);
    }
    if (checkManager.willCheck(player,CheckType.SPIDER) && backend.checkSpider(player,y)) {
      event.setTo(from);
      log(""String_Node_Str"",player,CheckType.SPIDER);
    }
  }
}",0.9144981412639404
101856,"public boolean checkAscension(Player player,double y1,double y2){
  if (!isMovingExempt(player)) {
    String name=player.getName();
    if (y1 < y2) {
      increment(player,ascensionCount,ASCENSION_COUNT_MAX);
      if (ascensionCount.get(name) >= ASCENSION_COUNT_MAX) {
        return true;
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}","public boolean checkAscension(Player player,double y1,double y2){
  if (!isMovingExempt(player) && !Utilities.isSubmersed(player) && !Utilities.isOnLadder(player)) {
    String name=player.getName();
    if (y1 < y2) {
      increment(player,ascensionCount,ASCENSION_COUNT_MAX);
      if (ascensionCount.get(name) >= ASCENSION_COUNT_MAX) {
        return true;
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}",0.9183922046285018
101857,"public boolean checkSpider(Player player,double y){
  if (y <= LADDER_Y_MAX && y >= LADDER_Y_MIN && player.getLocation().getBlock().getType() != Material.VINE && player.getLocation().getBlock().getType() != Material.LADDER) {
    return true;
  }
  return false;
}","public boolean checkSpider(Player player,double y){
  if (y <= LADDER_Y_MAX && y >= LADDER_Y_MIN && !Utilities.isOnLadder(player)) {
    return true;
  }
  return false;
}",0.6850574712643678
101858,"public boolean checkYAxis(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  if (!isMovingExempt(player)) {
    double y1=player.getLocation().getY();
    String name=player.getName();
    if (!lastYcoord.containsKey(name) || !lastYtime.containsKey(name) || !yAxisLastViolation.containsKey(name)|| !yAxisLastViolation.containsKey(name)) {
      lastYcoord.put(name,y1);
      yAxisViolations.put(name,0);
      yAxisLastViolation.put(name,0L);
      lastYtime.put(name,System.currentTimeMillis());
    }
 else {
      if (y1 > lastYcoord.get(name) && yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) < Y_MAXVIOTIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if (yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) > Y_MAXVIOTIME) {
          yAxisViolations.put(name,0);
          yAxisLastViolation.put(name,0L);
        }
      }
      if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF && (System.currentTimeMillis() - lastYtime.get(name)) < Y_TIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF + 1 || (System.currentTimeMillis() - lastYtime.get(name)) > Y_TIME) {
          lastYtime.put(name,System.currentTimeMillis());
          lastYcoord.put(name,y1);
        }
      }
    }
  }
  return false;
}","public boolean checkYAxis(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  if (!isMovingExempt(player) && !Utilities.isOnLadder(player)) {
    double y1=player.getLocation().getY();
    String name=player.getName();
    if (!lastYcoord.containsKey(name) || !lastYtime.containsKey(name) || !yAxisLastViolation.containsKey(name)|| !yAxisLastViolation.containsKey(name)) {
      lastYcoord.put(name,y1);
      yAxisViolations.put(name,0);
      yAxisLastViolation.put(name,0L);
      lastYtime.put(name,System.currentTimeMillis());
    }
 else {
      if (y1 > lastYcoord.get(name) && yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) < Y_MAXVIOTIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if (yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) > Y_MAXVIOTIME) {
          yAxisViolations.put(name,0);
          yAxisLastViolation.put(name,0L);
        }
      }
      if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF && (System.currentTimeMillis() - lastYtime.get(name)) < Y_TIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF + 1 || (System.currentTimeMillis() - lastYtime.get(name)) > Y_TIME) {
          lastYtime.put(name,System.currentTimeMillis());
          lastYcoord.put(name,y1);
        }
      }
    }
  }
  return false;
}",0.9920615828722636
101859,"@Override public void run(){
  if (map.get(player.getName()) == obj) {
    map.remove(player.getName());
  }
}","@Override public void run(){
  map.remove(player.getName());
}",0.7209302325581395
101860,"public void logChat(Player player){
  String name=player.getName();
  if (chatLevel.get(name) == null) {
    logEvent(chatLevel,player,1,CHAT_MIN);
  }
 else {
    int amount=chatLevel.get(name) + 1;
    chatLevel.put(name,amount);
    checkChatLevel(player,amount);
  }
}","public void logChat(Player player){
  String name=player.getName();
  if (chatLevel.get(name) == null) {
    logEventNoCheck(chatLevel,player,1,CHAT_MIN);
  }
 else {
    int amount=chatLevel.get(name) + 1;
    chatLevel.put(name,amount);
    checkChatLevel(player,amount);
  }
}",0.9872958257713248
101861,"public AnticheatManager(Anticheat instance){
  plugin=instance;
  LOGGER=plugin.getAnticheatLogger();
  FILE_LOGGER=LOGGER;
  configuration=new Configuration(this);
  xrayTracker=new XRayTracker();
  playerManager=new PlayerManager(this);
  checkManager=new CheckManager(this);
  backend=new Backend(this);
  try {
    File file=new File(plugin.getDataFolder() + ""String_Node_Str"");
    if (!file.exists()) {
      file.mkdir();
    }
    handler=new FileHandler(plugin.getDataFolder() + ""String_Node_Str"",true);
    handler.setFormatter(new FileFormatter());
    handler.setLevel(Level.INFO);
  }
 catch (  IOException ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
catch (  SecurityException ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
  FILE_LOGGER.setUseParentHandlers(false);
  FILE_LOGGER.addHandler(handler);
  LOGGER.setUseParentHandlers(false);
  Handler chandler=new ConsoleHandler();
  chandler.setFormatter(new ConsoleFormatter());
  LOGGER.addHandler(chandler);
}","public AnticheatManager(Anticheat instance){
  plugin=instance;
  LOGGER=Logger.getLogger(""String_Node_Str"");
  FILE_LOGGER=Logger.getLogger(""String_Node_Str"");
  configuration=new Configuration(this);
  xrayTracker=new XRayTracker();
  playerManager=new PlayerManager(this);
  checkManager=new CheckManager(this);
  backend=new Backend(this);
  try {
    File file=new File(plugin.getDataFolder() + ""String_Node_Str"");
    if (!file.exists()) {
      file.mkdir();
    }
    fileHandler=new FileHandler(plugin.getDataFolder() + ""String_Node_Str"",true);
    fileHandler.setFormatter(new FileFormatter());
  }
 catch (  Exception ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
  FILE_LOGGER.setUseParentHandlers(false);
  FILE_LOGGER.addHandler(fileHandler);
}",0.6168868466398622
101862,"public static void close(){
  handler.close();
}","public static void close(){
  fileHandler.close();
  consoleHandler.close();
}",0.746031746031746
101863,"@Override public String format(LogRecord record){
  StringBuilder output=new StringBuilder().append(""String_Node_Str"").append(record.getLevel()).append('|').append(format.format(new Date(record.getMillis()))).append(""String_Node_Str"").append(record.getMessage()).append(' ').append(lineSep);
  return output.toString();
}","@Override public String format(LogRecord record){
  if (record.getMessage().startsWith(""String_Node_Str"")) {
    StringBuilder output=new StringBuilder().append(""String_Node_Str"").append(record.getLevel()).append('|').append(format.format(new Date(record.getMillis()))).append(""String_Node_Str"").append(record.getMessage()).append(' ').append(lineSep);
    return output.toString();
  }
 else {
    return ""String_Node_Str"";
  }
}",0.8548601864181092
101864,"public void log(String message){
  if (getConfiguration().logConsole()) {
    LOGGER.info(ChatColor.stripColor(message));
  }
  if (getConfiguration().getFileLogLevel() == LOG_LEVEL_HIGH) {
    fileLog(ChatColor.stripColor(message));
  }
}","public void log(String message){
  if (getConfiguration().logConsole()) {
    LOGGER.info(""String_Node_Str"" + ChatColor.stripColor(message));
  }
  if (getConfiguration().getFileLogLevel() == LOG_LEVEL_HIGH) {
    fileLog(ChatColor.stripColor(message));
  }
}",0.9598393574297188
101865,"@Override public void run(){
  map.remove(player);
}","@Override public void run(){
  if (map.get(player.getName()) == obj) {
    map.remove(player.getName());
  }
}",0.6419753086419753
101866,"public boolean justAnimated(Player player){
  return animated.contains(player.getName());
}","public boolean justAnimated(Player player){
  return animated.containsKey(player.getName());
}",0.9837837837837838
101867,"@SuppressWarnings(""String_Node_Str"") private void logEvent(@SuppressWarnings(""String_Node_Str"") final Map map,final Player player,final Object obj,long time){
  map.put(player,obj);
  micromanage.getPlugin().getServer().getScheduler().scheduleSyncDelayedTask(micromanage.getPlugin(),new Runnable(){
    @Override public void run(){
      map.remove(player);
    }
  }
,time);
}","@SuppressWarnings(""String_Node_Str"") private void logEvent(@SuppressWarnings(""String_Node_Str"") final Map map,final Player player,final Object obj,long time){
  map.put(player.getName(),obj);
  micromanage.getPlugin().getServer().getScheduler().scheduleSyncDelayedTask(micromanage.getPlugin(),new Runnable(){
    @Override public void run(){
      if (map.get(player.getName()) == obj) {
        map.remove(player.getName());
      }
    }
  }
,time);
}",0.8674698795180723
101868,"public void logAnimation(final Player player){
  logEvent(animated,player,ANIMATION_MIN);
  increment(player,blockPunches,BLOCK_PUNCH_MIN);
}","public void logAnimation(final Player player){
  logEvent(animated,player,player.getLocation(),ANIMATION_MIN);
  increment(player,blockPunches,BLOCK_PUNCH_MIN);
}",0.9306930693069309
101869,"public final void load(){
  FileConfiguration bukkit;
  micromanage.getPlugin().checkConfig();
  config=YamlConfiguration.loadConfiguration(configFile);
  level=YamlConfiguration.loadConfiguration(levelFile);
  bukkit=YamlConfiguration.loadConfiguration(bukkitFile);
  lang=YamlConfiguration.loadConfiguration(langFile);
  language=new Language(lang);
  updateFolder=bukkit.getString(""String_Node_Str"");
  if (config.getString(""String_Node_Str"") != null) {
    boolean b=config.getBoolean(""String_Node_Str"");
    config.set(""String_Node_Str"",null);
    config.set(""String_Node_Str"",b);
    save();
  }
  logConsole=config.getBoolean(""String_Node_Str"");
  if (config.getList(""String_Node_Str"") == null) {
    List<String> w=new ArrayList<String>();
    for (    World world : Bukkit.getServer().getWorlds()) {
      w.add(world.getName());
    }
    config.set(""String_Node_Str"",w);
    save();
  }
  worlds=(List<String>)(config.getList(""String_Node_Str""));
  if (config.getString(""String_Node_Str"") == null) {
    config.set(""String_Node_Str"",true);
    save();
  }
  logXRay=config.getBoolean(""String_Node_Str"");
  if (config.getString(""String_Node_Str"") == null) {
    config.set(""String_Node_Str"",true);
    save();
  }
  autoUpdate=config.getBoolean(""String_Node_Str"");
  if (config.getString(""String_Node_Str"") == null) {
    config.set(""String_Node_Str"",false);
    save();
  }
  verboseStartup=config.getBoolean(""String_Node_Str"");
  if (config.getString(""String_Node_Str"") == null) {
    config.set(""String_Node_Str"",false);
    save();
  }
  alertXRay=config.getBoolean(""String_Node_Str"");
  if (config.getString(""String_Node_Str"") == null) {
    config.set(""String_Node_Str"",1);
    save();
  }
  fileLogLevel=config.getInt(""String_Node_Str"");
}","public final void load(){
  FileConfiguration bukkit;
  micromanage.getPlugin().checkConfig();
  config=YamlConfiguration.loadConfiguration(configFile);
  level=YamlConfiguration.loadConfiguration(levelFile);
  bukkit=YamlConfiguration.loadConfiguration(bukkitFile);
  lang=YamlConfiguration.loadConfiguration(langFile);
  language=new Language(lang);
  updateFolder=bukkit.getString(""String_Node_Str"");
  if (config.getString(""String_Node_Str"") != null) {
    boolean b=config.getBoolean(""String_Node_Str"");
    config.set(""String_Node_Str"",null);
    config.set(""String_Node_Str"",b);
    save();
  }
  logConsole=config.getBoolean(""String_Node_Str"");
  if (config.getList(""String_Node_Str"") == null) {
    List<String> w=new ArrayList<String>();
    for (    World world : Bukkit.getServer().getWorlds()) {
      w.add(world.getName());
    }
    config.set(""String_Node_Str"",w);
    save();
  }
  worlds=(List<String>)(config.getList(""String_Node_Str""));
  if (config.getString(""String_Node_Str"") == null) {
    config.set(""String_Node_Str"",true);
    save();
  }
  logXRay=config.getBoolean(""String_Node_Str"");
  if (config.getString(""String_Node_Str"") == null) {
    config.set(""String_Node_Str"",true);
    save();
  }
  autoUpdate=config.getBoolean(""String_Node_Str"");
  if (config.getString(""String_Node_Str"") == null) {
    config.set(""String_Node_Str"",false);
    save();
  }
  verboseStartup=config.getBoolean(""String_Node_Str"");
  if (config.getString(""String_Node_Str"") == null) {
    config.set(""String_Node_Str"",false);
    save();
  }
  alertXRay=config.getBoolean(""String_Node_Str"");
  if (config.getString(""String_Node_Str"") == null) {
    config.set(""String_Node_Str"",1);
    save();
  }
  fileLogLevel=config.getInt(""String_Node_Str"");
  if (config.getString(""String_Node_Str"") == null) {
    config.set(""String_Node_Str"",true);
    save();
  }
  chatSpam=config.getBoolean(""String_Node_Str"");
  if (config.getString(""String_Node_Str"") == null) {
    config.set(""String_Node_Str"",true);
    save();
  }
  commandSpam=config.getBoolean(""String_Node_Str"");
}",0.916731923779692
101870,"@EventHandler public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  Player player=event.getPlayer();
  if (checkManager.willCheck(player,CheckType.SPAM)) {
    backend.logChat(player);
    if (backend.checkSpam(player,event.getMessage())) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}","@EventHandler public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  Player player=event.getPlayer();
  if (checkManager.willCheck(player,CheckType.SPAM) && config.commandSpam()) {
    backend.logChat(player);
    if (backend.checkSpam(player,event.getMessage())) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}",0.968421052631579
101871,"@EventHandler(ignoreCancelled=true) public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  if (checkManager.willCheck(player,CheckType.SPAM)) {
    backend.logChat(player);
    if (backend.checkSpam(player,event.getMessage())) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}","@EventHandler(ignoreCancelled=true) public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  if (checkManager.willCheck(player,CheckType.SPAM) && config.chatSpam()) {
    backend.logChat(player);
    if (backend.checkSpam(player,event.getMessage())) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}",0.97196261682243
101872,"@EventHandler public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  Player player=event.getPlayer();
  if (checkManager.willCheck(player,CheckType.SPAM)) {
    backend.logChat(player);
  }
}","@EventHandler public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  Player player=event.getPlayer();
  if (checkManager.willCheck(player,CheckType.SPAM)) {
    backend.logChat(player);
    if (backend.checkSpam(player,event.getMessage())) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}",0.7332185886402753
101873,"public boolean isMovingExempt(Player player){
  return movingExempt.contains(player.getName()) || player.isFlying();
}","public boolean isMovingExempt(Player player){
  return movingExempt.contains(player.getName()) || player.isFlying() || isVelocity(player);
}",0.9147286821705426
101874,"public boolean isSpeedExempt(Player player){
  return movingExempt.contains(player.getName());
}","public boolean isSpeedExempt(Player player){
  return movingExempt.contains(player.getName()) || isVelocity(player);
}",0.897196261682243
101875,"public boolean checkAscension(Player player,double y1,double y2){
  if (!isMovingExempt(player) && !Utilities.isSubmersed(player) && !Utilities.isOnLadder(player)) {
    String name=player.getName();
    if (y1 < y2) {
      increment(player,ascensionCount,ASCENSION_COUNT_MAX);
      if (ascensionCount.get(name) >= ASCENSION_COUNT_MAX) {
        return true;
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}","public boolean checkAscension(Player player,double y1,double y2){
  if (!isMovingExempt(player) && player.getLocation().getBlock().getType() != Material.WATER && player.getLocation().getBlock().getType() != Material.STATIONARY_WATER && !Utilities.isOnLadder(player)) {
    String name=player.getName();
    if (y1 < y2) {
      increment(player,ascensionCount,ASCENSION_COUNT_MAX);
      if (ascensionCount.get(name) >= ASCENSION_COUNT_MAX) {
        return true;
      }
    }
 else {
      ascensionCount.put(name,0);
    }
  }
  return false;
}",0.8395560040363269
101876,"public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  double y1=distance.fromY();
  double y2=distance.toY();
  Block block=player.getLocation().getBlock().getRelative(BlockFace.DOWN);
  if (y1 == y2 && !isMovingExempt(player) && player.getVehicle() == null && player.getFallDistance() == 0 && !Utilities.isOnLilyPad(player)) {
    String name=player.getName();
    if (Utilities.cantStandAt(block) && !Utilities.isOnLilyPad(player) && Utilities.cantStandAt(player.getLocation().getBlock())&& !Utilities.isSubmersed(player)) {
      int violation=1;
      if (!flightViolation.containsKey(name)) {
        flightViolation.put(name,violation);
      }
 else {
        violation=flightViolation.get(name) + 1;
        flightViolation.put(name,violation);
      }
      if (violation >= FLIGHT_LIMIT) {
        flightViolation.put(name,1);
        return true;
      }
      if (flightViolation.containsKey(name) && flightViolation.get(name) > 0) {
        for (int i=FLY_LOOP; i > 0; i--) {
          Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
          Block lower=newLocation.getBlock();
          if (lower.getTypeId() == 0) {
            player.teleport(newLocation);
            break;
          }
        }
      }
    }
  }
  return false;
}","public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  double y1=distance.fromY();
  double y2=distance.toY();
  Block block=player.getLocation().getBlock().getRelative(BlockFace.DOWN);
  if (y1 == y2 && !isMovingExempt(player) && player.getVehicle() == null && player.getFallDistance() == 0 && !Utilities.isOnLilyPad(player)) {
    String name=player.getName();
    if (Utilities.cantStandAt(block) && !Utilities.isOnLilyPad(player) && Utilities.cantStandAt(player.getLocation().getBlock())&& player.getLocation().getBlock().getType() != Material.WATER && player.getLocation().getBlock().getType() != Material.STATIONARY_WATER) {
      int violation=1;
      if (!flightViolation.containsKey(name)) {
        flightViolation.put(name,violation);
      }
 else {
        violation=flightViolation.get(name) + 1;
        flightViolation.put(name,violation);
      }
      if (violation >= FLIGHT_LIMIT) {
        flightViolation.put(name,1);
        return true;
      }
      if (flightViolation.containsKey(name) && flightViolation.get(name) > 0) {
        for (int i=FLY_LOOP; i > 0; i--) {
          Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
          Block lower=newLocation.getBlock();
          if (lower.getTypeId() == 0) {
            player.teleport(newLocation);
            break;
          }
        }
      }
    }
  }
  return false;
}",0.9458631256384066
101877,"public static boolean isUsingMcMMOAbility(Player player){
  boolean b=false;
  if (player.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    if (mcMMO.p.getPlayerProfile(player).getAbilityMode(AbilityType.TREE_FELLER) || mcMMO.p.getPlayerProfile(player).getAbilityMode(AbilityType.SUPER_BREAKER) || mcMMO.p.getPlayerProfile(player).getAbilityMode(AbilityType.BERSERK)) {
      b=true;
    }
  }
  return b;
}","public static boolean isUsingMcMMOAbility(Player player){
  boolean b=false;
  if (player.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    if (mcMMO.p.getPlayerProfile(player).getAbilityMode(AbilityType.TREE_FELLER) || mcMMO.p.getPlayerProfile(player).getAbilityMode(AbilityType.SUPER_BREAKER) || mcMMO.p.getPlayerProfile(player).getAbilityMode(AbilityType.BERSERK)|| mcMMO.p.getPlayerProfile(player).getAbilityMode(AbilityType.GIGA_DRILL_BREAKER)|| mcMMO.p.getPlayerProfile(player).getAbilityMode(AbilityType.BLAST_MINING)) {
      b=true;
    }
  }
  return b;
}",0.8454011741682974
101878,"@Override public void run(){
  map.remove(player.getName());
}","@Override public void run(){
  if (map.get(player.getName()) == obj) {
    map.remove(player.getName());
  }
 else {
  }
}",0.6739130434782609
101879,"@SuppressWarnings(""String_Node_Str"") private void logEvent(@SuppressWarnings(""String_Node_Str"") final Map map,final Player player,final Object obj,long time){
  map.put(player.getName(),obj);
  micromanage.getPlugin().getServer().getScheduler().scheduleSyncDelayedTask(micromanage.getPlugin(),new Runnable(){
    @Override public void run(){
      if (map.get(player.getName()) == obj) {
        map.remove(player.getName());
      }
    }
  }
,time);
}","@SuppressWarnings(""String_Node_Str"") private void logEvent(@SuppressWarnings(""String_Node_Str"") final Map map,final Player player,final Object obj,long time){
  map.put(player.getName(),obj);
  micromanage.getPlugin().getServer().getScheduler().scheduleSyncDelayedTask(micromanage.getPlugin(),new Runnable(){
    @Override public void run(){
      if (map.get(player.getName()) == obj) {
        map.remove(player.getName());
      }
 else {
      }
    }
  }
,time);
}",0.982646420824295
101880,"public void logChat(Player player){
  String name=player.getName();
  if (chatLevel.get(name) == null) {
    logEventNoCheck(chatLevel,player,1,CHAT_MIN);
  }
 else {
    int amount=chatLevel.get(name) + 1;
    chatLevel.put(name,amount);
    checkChatLevel(player,amount);
  }
}","public void logChat(Player player){
  String name=player.getName();
  if (chatLevel.get(name) == null) {
    logEvent(chatLevel,player,1,CHAT_MIN);
  }
 else {
    int amount=chatLevel.get(name) + 1;
    logEvent(chatLevel,player,amount,CHAT_MIN);
    checkChatLevel(player,amount);
  }
}",0.8712522045855379
101881,"@Override public void onEnable(){
  logger=getLogger();
  manager=new AnticheatManager(this);
  config=manager.getConfiguration();
  checkConfig();
  verbose=config.verboseStartup();
  updateFolder=config.updateFolder();
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
  }
  checkForUpdate();
  eventList.add(new PlayerListener());
  eventList.add(new BlockListener());
  eventList.add(new EntityListener());
  eventList.add(new VehicleListener());
  final XRayTracker xtracker=manager.getXRayTracker();
  if (config.logXRay()) {
    eventList.add(new XRayListener());
    if (config.alertXRay()) {
      getServer().getScheduler().scheduleAsyncRepeatingTask(this,new Runnable(){
        @Override public void run(){
          for (          Player player : getServer().getOnlinePlayers()) {
            String name=player.getName();
            if (!xtracker.hasAlerted(name) && xtracker.sufficientData(name) && xtracker.hasAbnormal(name)) {
              String[] alert=new String[2];
              alert[0]=ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ name+ ChatColor.YELLOW+ ""String_Node_Str"";
              alert[1]=ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ name+ ChatColor.YELLOW+ ""String_Node_Str"";
              Utilities.alert(alert);
              xtracker.logAlert(name);
            }
          }
        }
      }
,XRAY_TIME,XRAY_TIME);
      if (verbose) {
        logger.log(Level.INFO,""String_Node_Str"");
      }
    }
  }
  for (  Listener listener : eventList) {
    getServer().getPluginManager().registerEvents(listener,this);
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"".concat(listener.toString()));
    }
  }
  getCommand(""String_Node_Str"").setExecutor(new CommandHandler());
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
    logger.log(Level.INFO,""String_Node_Str"");
  }
  if (update && config.autoUpdate()) {
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
    File file=new File(""String_Node_Str"" + updateFolder);
    if (!file.exists()) {
      try {
        file.mkdir();
      }
 catch (      Exception ex) {
      }
    }
    try {
      saveFile(file.getCanonicalPath() + ""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException ex) {
    }
  }
  try {
    metrics=new Metrics(this);
    final EventListener listener=new EventListener();
    Graph hacksGraph=metrics.createGraph(""String_Node_Str"");
    for (    final CheckType type : CheckType.values()) {
      hacksGraph.addPlotter(new Metrics.Plotter(CheckType.getName(type)){
        @Override public int getValue(){
          return listener.getCheats(type);
        }
      }
);
      listener.resetCheck(type);
    }
    Graph apiGraph=metrics.createGraph(""String_Node_Str"");
    apiGraph.addPlotter(new Metrics.Plotter(""String_Node_Str""){
      @Override public int getValue(){
        return manager.getCheckManager().getDisabled();
      }
    }
);
    apiGraph.addPlotter(new Metrics.Plotter(""String_Node_Str""){
      @Override public int getValue(){
        return manager.getCheckManager().getExempt();
      }
    }
);
    metrics.start();
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
  }
 catch (  IOException ex) {
  }
  for (  Player player : getServer().getOnlinePlayers()) {
    String name=player.getName();
    manager.getPlayerManager().setLevel(player,config.getLevel(name));
  }
}","@Override public void onEnable(){
  logger=this.getLogger();
  manager=new AnticheatManager(this);
  config=manager.getConfiguration();
  checkConfig();
  verbose=config.verboseStartup();
  updateFolder=config.updateFolder();
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
  }
  checkForUpdate();
  eventList.add(new PlayerListener());
  eventList.add(new BlockListener());
  eventList.add(new EntityListener());
  eventList.add(new VehicleListener());
  final XRayTracker xtracker=manager.getXRayTracker();
  if (config.logXRay()) {
    eventList.add(new XRayListener());
    if (config.alertXRay()) {
      getServer().getScheduler().scheduleAsyncRepeatingTask(this,new Runnable(){
        @Override public void run(){
          for (          Player player : getServer().getOnlinePlayers()) {
            String name=player.getName();
            if (!xtracker.hasAlerted(name) && xtracker.sufficientData(name) && xtracker.hasAbnormal(name)) {
              String[] alert=new String[2];
              alert[0]=ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ name+ ChatColor.YELLOW+ ""String_Node_Str"";
              alert[1]=ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ name+ ChatColor.YELLOW+ ""String_Node_Str"";
              Utilities.alert(alert);
              xtracker.logAlert(name);
            }
          }
        }
      }
,XRAY_TIME,XRAY_TIME);
      if (verbose) {
        logger.log(Level.INFO,""String_Node_Str"");
      }
    }
  }
  for (  Listener listener : eventList) {
    getServer().getPluginManager().registerEvents(listener,this);
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"".concat(listener.toString()));
    }
  }
  getCommand(""String_Node_Str"").setExecutor(new CommandHandler());
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
    logger.log(Level.INFO,""String_Node_Str"");
  }
  if (update && config.autoUpdate()) {
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
    File file=new File(""String_Node_Str"" + updateFolder);
    if (!file.exists()) {
      try {
        file.mkdir();
      }
 catch (      Exception ex) {
      }
    }
    try {
      saveFile(file.getCanonicalPath() + ""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException ex) {
    }
  }
  try {
    metrics=new Metrics(this);
    final EventListener listener=new EventListener();
    Graph hacksGraph=metrics.createGraph(""String_Node_Str"");
    for (    final CheckType type : CheckType.values()) {
      hacksGraph.addPlotter(new Metrics.Plotter(CheckType.getName(type)){
        @Override public int getValue(){
          return listener.getCheats(type);
        }
      }
);
      listener.resetCheck(type);
    }
    Graph apiGraph=metrics.createGraph(""String_Node_Str"");
    apiGraph.addPlotter(new Metrics.Plotter(""String_Node_Str""){
      @Override public int getValue(){
        return manager.getCheckManager().getDisabled();
      }
    }
);
    apiGraph.addPlotter(new Metrics.Plotter(""String_Node_Str""){
      @Override public int getValue(){
        return manager.getCheckManager().getExempt();
      }
    }
);
    metrics.start();
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
  }
 catch (  IOException ex) {
  }
  for (  Player player : getServer().getOnlinePlayers()) {
    String name=player.getName();
    manager.getPlayerManager().setLevel(player,config.getLevel(name));
  }
}",0.999275047121937
101882,"public void fileLog(String message){
  FILE_LOGGER.log(Level.WARNING,message);
}","public void fileLog(String message){
  FILE_LOGGER.warning(message);
}",0.8533333333333334
101883,"public void log(String message){
  if (getConfiguration().logConsole()) {
    LOGGER.log(Level.WARNING,""String_Node_Str"".concat(message));
  }
  if (getConfiguration().getFileLogLevel() == LOG_LEVEL_HIGH) {
    fileLog(message);
  }
}","public void log(String message){
  if (getConfiguration().logConsole()) {
    LOGGER.warning(message);
  }
  if (getConfiguration().getFileLogLevel() == LOG_LEVEL_HIGH) {
    fileLog(message);
  }
}",0.9027777777777778
101884,"public AnticheatManager(Anticheat instance){
  plugin=instance;
  configuration=new Configuration(this);
  xrayTracker=new XRayTracker();
  playerManager=new PlayerManager(this);
  checkManager=new CheckManager(this);
  backend=new Backend(this);
  try {
    File file=new File(plugin.getDataFolder() + ""String_Node_Str"");
    if (!file.exists()) {
      file.mkdir();
    }
    handler=new FileHandler(plugin.getDataFolder() + ""String_Node_Str"",true);
  }
 catch (  IOException ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
catch (  SecurityException ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
  handler.setFormatter(new SimpleFormatter());
  FILE_LOGGER.setUseParentHandlers(false);
  FILE_LOGGER.addHandler(handler);
}","public AnticheatManager(Anticheat instance){
  plugin=instance;
  LOGGER=plugin.getAnticheatLogger();
  FILE_LOGGER=LOGGER;
  configuration=new Configuration(this);
  xrayTracker=new XRayTracker();
  playerManager=new PlayerManager(this);
  checkManager=new CheckManager(this);
  backend=new Backend(this);
  try {
    File file=new File(plugin.getDataFolder() + ""String_Node_Str"");
    if (!file.exists()) {
      file.mkdir();
    }
    handler=new FileHandler(plugin.getDataFolder() + ""String_Node_Str"",true);
    handler.setFormatter(new FileFormatter());
  }
 catch (  IOException ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
catch (  SecurityException ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
  FILE_LOGGER.setUseParentHandlers(false);
  FILE_LOGGER.addHandler(handler);
  LOGGER.setUseParentHandlers(false);
  Handler chandler=new ConsoleHandler();
  chandler.setFormatter(new ConsoleFormatter());
  LOGGER.addHandler(chandler);
}",0.7820895522388059
101885,"public boolean checkYAxis(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  if (!player.isFlying()) {
    double y1=player.getLocation().getY();
    String name=player.getName();
    if (!lastYcoord.containsKey(name) || !lastYtime.containsKey(name) || !yAxisLastViolation.containsKey(name)|| !yAxisLastViolation.containsKey(name)) {
      lastYcoord.put(name,y1);
      yAxisViolations.put(name,0);
      yAxisLastViolation.put(name,0L);
      lastYtime.put(name,System.currentTimeMillis());
    }
 else {
      if (y1 > lastYcoord.get(name) && yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) < Y_MAXVIOTIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if (yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) > Y_MAXVIOTIME) {
          yAxisViolations.put(name,0);
          yAxisLastViolation.put(name,0L);
        }
      }
      if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF && (System.currentTimeMillis() - lastYtime.get(name)) < Y_TIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF + 1 || (System.currentTimeMillis() - lastYtime.get(name)) > Y_TIME) {
          lastYtime.put(name,System.currentTimeMillis());
          lastYcoord.put(name,y1);
        }
      }
    }
  }
  return false;
}","public boolean checkYAxis(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  if (!isMovingExempt(player)) {
    double y1=player.getLocation().getY();
    String name=player.getName();
    if (!lastYcoord.containsKey(name) || !lastYtime.containsKey(name) || !yAxisLastViolation.containsKey(name)|| !yAxisLastViolation.containsKey(name)) {
      lastYcoord.put(name,y1);
      yAxisViolations.put(name,0);
      yAxisLastViolation.put(name,0L);
      lastYtime.put(name,System.currentTimeMillis());
    }
 else {
      if (y1 > lastYcoord.get(name) && yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) < Y_MAXVIOTIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if (yAxisViolations.get(name) > Y_MAXVIOLATIONS && (System.currentTimeMillis() - yAxisLastViolation.get(name)) > Y_MAXVIOTIME) {
          yAxisViolations.put(name,0);
          yAxisLastViolation.put(name,0L);
        }
      }
      if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF && (System.currentTimeMillis() - lastYtime.get(name)) < Y_TIME) {
        Location g=player.getLocation();
        g.setY(lastYcoord.get(name));
        yAxisViolations.put(name,yAxisViolations.get(name) + 1);
        yAxisLastViolation.put(name,System.currentTimeMillis());
        if (g.getBlock().getTypeId() == 0) {
          player.teleport(g);
        }
        return true;
      }
 else {
        if ((y1 - lastYcoord.get(name)) > Y_MAXDIFF + 1 || (System.currentTimeMillis() - lastYtime.get(name)) > Y_TIME) {
          lastYtime.put(name,System.currentTimeMillis());
          lastYcoord.put(name,y1);
        }
      }
    }
  }
  return false;
}",0.9910172371934935
101886,"public boolean checkFastBreak(Player player,Block block){
  if (!Utilities.isUsingMcMMOAbility(player)) {
    int violations=FASTBREAK_MAXVIOLATIONS;
    if (player.getGameMode() == GameMode.CREATIVE) {
      violations=FASTBREAK_MAXVIOLATIONS_CREATIVE;
    }
    String name=player.getName();
    if (!player.getInventory().getItemInHand().containsEnchantment(Enchantment.DIG_SPEED) && !Utilities.isInstantBreak(block.getType()) && !isInstantBreakExempt(player)&& !(player.getInventory().getItemInHand().getType() == Material.SHEARS && block.getType() == Material.LEAVES && player.getGameMode() != GameMode.CREATIVE)) {
      if (blockPunches.get(name) != null) {
        int i=blockPunches.get(name);
        if (i < BLOCK_PUNCH_MIN) {
          return true;
        }
      }
      if (!fastBreakViolation.containsKey(name)) {
        fastBreakViolation.put(name,0);
      }
 else {
        Long math=System.currentTimeMillis() - lastBlockBroken.get(name);
        if (fastBreakViolation.get(name) > violations && math < FASTBREAK_MAXVIOLATIONTIME) {
          lastBlockBroken.put(name,System.currentTimeMillis());
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
 else         if (fastBreakViolation.get(name) > 0 && math > FASTBREAK_MAXVIOLATIONTIME) {
          fastBreakViolation.put(name,0);
        }
      }
      if (!blocksBroken.containsKey(name) || !lastBlockBroken.containsKey(name)) {
        if (!lastBlockBroken.containsKey(name)) {
          lastBlockBroken.put(name,System.currentTimeMillis());
        }
        blocksBroken.put(name,0);
      }
 else {
        blocksBroken.put(name,blocksBroken.get(name) + 1);
        Long math=System.currentTimeMillis() - lastBlockBroken.get(name);
        if (blocksBroken.get(name) > FASTBREAK_LIMIT && math < FASTBREAK_TIMEMAX) {
          blocksBroken.put(name,0);
          lastBlockBroken.put(name,System.currentTimeMillis());
          fastBreakViolation.put(name,fastBreakViolation.get(name) + 1);
          return true;
        }
 else         if (blocksBroken.get(name) > FASTBREAK_LIMIT) {
          lastBlockBroken.put(name,System.currentTimeMillis());
          blocksBroken.put(name,0);
        }
      }
    }
  }
  return false;
}","public boolean checkFastBreak(Player player,Block block){
  if (!Utilities.isUsingMcMMOAbility(player)) {
    int violations=FASTBREAK_MAXVIOLATIONS;
    if (player.getGameMode() == GameMode.CREATIVE) {
      violations=FASTBREAK_MAXVIOLATIONS_CREATIVE;
    }
    String name=player.getName();
    if (!player.getInventory().getItemInHand().containsEnchantment(Enchantment.DIG_SPEED) && !Utilities.isInstantBreak(block.getType()) && !isInstantBreakExempt(player)&& !(player.getInventory().getItemInHand().getType() == Material.SHEARS && block.getType() == Material.LEAVES)) {
      if (blockPunches.get(name) != null && player.getGameMode() != GameMode.CREATIVE) {
        int i=blockPunches.get(name);
        if (i < BLOCK_PUNCH_MIN) {
          return true;
        }
      }
      if (!fastBreakViolation.containsKey(name)) {
        fastBreakViolation.put(name,0);
      }
 else {
        Long math=System.currentTimeMillis() - lastBlockBroken.get(name);
        if (fastBreakViolation.get(name) > violations && math < FASTBREAK_MAXVIOLATIONTIME) {
          lastBlockBroken.put(name,System.currentTimeMillis());
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
 else         if (fastBreakViolation.get(name) > 0 && math > FASTBREAK_MAXVIOLATIONTIME) {
          fastBreakViolation.put(name,0);
        }
      }
      if (!blocksBroken.containsKey(name) || !lastBlockBroken.containsKey(name)) {
        if (!lastBlockBroken.containsKey(name)) {
          lastBlockBroken.put(name,System.currentTimeMillis());
        }
        blocksBroken.put(name,0);
      }
 else {
        blocksBroken.put(name,blocksBroken.get(name) + 1);
        Long math=System.currentTimeMillis() - lastBlockBroken.get(name);
        if (blocksBroken.get(name) > FASTBREAK_LIMIT && math < FASTBREAK_TIMEMAX) {
          blocksBroken.put(name,0);
          lastBlockBroken.put(name,System.currentTimeMillis());
          fastBreakViolation.put(name,fastBreakViolation.get(name) + 1);
          return true;
        }
 else         if (blocksBroken.get(name) > FASTBREAK_LIMIT) {
          lastBlockBroken.put(name,System.currentTimeMillis());
          blocksBroken.put(name,0);
        }
      }
    }
  }
  return false;
}",0.9800354924578528
101887,"public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  double y1=distance.fromY();
  double y2=distance.toY();
  Block block=player.getLocation().getBlock().getRelative(BlockFace.DOWN);
  if (y1 == y2 && !isMovingExempt(player) && player.getVehicle() == null && player.getFallDistance() == 0 && !Utilities.isOnLilyPad(player)) {
    String name=player.getName();
    if (Utilities.cantStandAt(block) && !Utilities.isOnLilyPad(player) && !Utilities.canStand(player.getLocation().getBlock())) {
      int violation=1;
      if (!flightViolation.containsKey(name)) {
        flightViolation.put(name,violation);
      }
 else {
        violation=flightViolation.get(name) + 1;
        flightViolation.put(name,violation);
      }
      if (violation >= FLIGHT_LIMIT) {
        flightViolation.put(name,1);
        return true;
      }
      if (flightViolation.containsKey(name) && flightViolation.get(name) > 0) {
        for (int i=FLY_LOOP; i > 0; i--) {
          Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
          Block lower=newLocation.getBlock();
          if (lower.getTypeId() == 0) {
            player.teleport(newLocation);
            break;
          }
        }
      }
    }
  }
  return false;
}","public boolean checkFlight(Player player,Distance distance){
  if (distance.getYDifference() > 400) {
    return false;
  }
  double y1=distance.fromY();
  double y2=distance.toY();
  Block block=player.getLocation().getBlock().getRelative(BlockFace.DOWN);
  if (y1 == y2 && !isMovingExempt(player) && player.getVehicle() == null && player.getFallDistance() == 0 && !Utilities.isOnLilyPad(player)) {
    String name=player.getName();
    if (Utilities.cantStandAt(block) && !Utilities.isOnLilyPad(player) && !Utilities.canStand(player.getLocation().getBlock())&& !Utilities.isSubmersed(player)) {
      int violation=1;
      if (!flightViolation.containsKey(name)) {
        flightViolation.put(name,violation);
      }
 else {
        violation=flightViolation.get(name) + 1;
        flightViolation.put(name,violation);
      }
      if (violation >= FLIGHT_LIMIT) {
        flightViolation.put(name,1);
        return true;
      }
      if (flightViolation.containsKey(name) && flightViolation.get(name) > 0) {
        for (int i=FLY_LOOP; i > 0; i--) {
          Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
          Block lower=newLocation.getBlock();
          if (lower.getTypeId() == 0) {
            player.teleport(newLocation);
            break;
          }
        }
      }
    }
  }
  return false;
}",0.9882016446192348
101888,"public boolean checkXZSpeed(Player player,double x,double z){
  if (!isSpeedExempt(player) && player.getVehicle() == null) {
    if (player.isFlying()) {
      return x > XZ_SPEED_MAX_FLY || z > XZ_SPEED_MAX_FLY;
    }
    if (!player.isSprinting()) {
      return x > XZ_SPEED_MAX || z > XZ_SPEED_MAX;
    }
 else {
      return x > XZ_SPEED_MAX_SPRINT || z > XZ_SPEED_MAX_SPRINT;
    }
  }
 else {
    return false;
  }
}","public boolean checkXZSpeed(Player player,double x,double z){
  if (!isSpeedExempt(player) && player.getVehicle() == null) {
    if (player.isFlying()) {
      return x > XZ_SPEED_MAX_FLY || z > XZ_SPEED_MAX_FLY;
    }
    if (!player.isSprinting()) {
      return x > XZ_SPEED_MAX || z > XZ_SPEED_MAX;
    }
 else     if (player.hasPotionEffect(PotionEffectType.SPEED)) {
      return x > XZ_SPEED_MAX_POTION || z > XZ_SPEED_MAX_POTION;
    }
 else {
      return x > XZ_SPEED_MAX_SPRINT || z > XZ_SPEED_MAX_SPRINT;
    }
  }
 else {
    return false;
  }
}",0.8623853211009175
101889,"@Override public void onEnable(){
  logger=this.getLogger();
  manager=new AnticheatManager(this);
  config=manager.getConfiguration();
  checkConfig();
  verbose=config.verboseStartup();
  updateFolder=config.updateFolder();
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
  }
  checkForUpdate();
  eventList.add(new PlayerListener());
  eventList.add(new BlockListener());
  eventList.add(new EntityListener());
  eventList.add(new VehicleListener());
  final XRayTracker xtracker=manager.getXRayTracker();
  if (config.logXRay()) {
    eventList.add(new XRayListener());
    if (config.alertXRay()) {
      getServer().getScheduler().scheduleAsyncRepeatingTask(this,new Runnable(){
        @Override public void run(){
          for (          Player player : getServer().getOnlinePlayers()) {
            String name=player.getName();
            if (!xtracker.hasAlerted(name) && xtracker.sufficientData(name) && xtracker.hasAbnormal(name)) {
              String[] alert=new String[2];
              alert[0]=ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ name+ ChatColor.YELLOW+ ""String_Node_Str"";
              alert[1]=ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ name+ ChatColor.YELLOW+ ""String_Node_Str"";
              Utilities.alert(alert);
              xtracker.logAlert(name);
            }
          }
        }
      }
,XRAY_TIME,XRAY_TIME);
      if (verbose) {
        logger.log(Level.INFO,""String_Node_Str"");
      }
    }
  }
  for (  Listener listener : eventList) {
    getServer().getPluginManager().registerEvents(listener,this);
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"".concat(listener.toString()));
    }
  }
  getCommand(""String_Node_Str"").setExecutor(new CommandHandler());
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
    logger.log(Level.INFO,""String_Node_Str"");
  }
  if (update && config.autoUpdate()) {
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
    File file=new File(""String_Node_Str"" + updateFolder);
    if (!file.exists()) {
      try {
        file.mkdir();
      }
 catch (      Exception ex) {
      }
    }
    try {
      saveFile(file.getCanonicalPath() + ""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException ex) {
    }
  }
  try {
    metrics=new Metrics(this);
    final EventListener listener=new EventListener();
    Graph hacksGraph=metrics.createGraph(""String_Node_Str"");
    for (    final CheckType type : CheckType.values()) {
      hacksGraph.addPlotter(new Metrics.Plotter(CheckType.getName(type)){
        @Override public int getValue(){
          return listener.getCheats(type);
        }
      }
);
      listener.resetCheck(type);
    }
    Graph apiGraph=metrics.createGraph(""String_Node_Str"");
    apiGraph.addPlotter(new Metrics.Plotter(""String_Node_Str""){
      @Override public int getValue(){
        return manager.getCheckManager().getDisabled();
      }
    }
);
    apiGraph.addPlotter(new Metrics.Plotter(""String_Node_Str""){
      @Override public int getValue(){
        return manager.getCheckManager().getExempt();
      }
    }
);
    metrics.start();
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
  }
 catch (  IOException ex) {
  }
  for (  Player player : getServer().getOnlinePlayers()) {
    String name=player.getName();
    manager.getPlayerManager().setLevel(player,config.getLevel(name));
  }
}","@Override public void onEnable(){
  logger=this.getLogger();
  manager=new AnticheatManager(this);
  config=manager.getConfiguration();
  checkConfig();
  verbose=config.verboseStartup();
  updateFolder=config.updateFolder();
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
  }
  checkForUpdate();
  eventList.add(new PlayerListener());
  eventList.add(new BlockListener());
  eventList.add(new EntityListener());
  eventList.add(new VehicleListener());
  final XRayTracker xtracker=manager.getXRayTracker();
  if (config.logXRay()) {
    eventList.add(new XRayListener());
    if (config.alertXRay()) {
      getServer().getScheduler().scheduleAsyncRepeatingTask(this,new Runnable(){
        @Override public void run(){
          for (          Player player : getServer().getOnlinePlayers()) {
            String name=player.getName();
            if (!xtracker.hasAlerted(name) && xtracker.sufficientData(name) && xtracker.hasAbnormal(name)) {
              String[] alert=new String[2];
              alert[0]=ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ name+ ChatColor.YELLOW+ ""String_Node_Str"";
              alert[1]=ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ name+ ChatColor.YELLOW+ ""String_Node_Str"";
              Utilities.alert(alert);
              xtracker.logAlert(name);
            }
          }
        }
      }
,XRAY_TIME,XRAY_TIME);
      if (verbose) {
        logger.log(Level.INFO,""String_Node_Str"");
      }
    }
  }
  for (  Listener listener : eventList) {
    getServer().getPluginManager().registerEvents(listener,this);
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"".concat(listener.toString()));
    }
  }
  getCommand(""String_Node_Str"").setExecutor(new CommandHandler());
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
  }
  if (update && config.autoUpdate()) {
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
    File file=new File(""String_Node_Str"" + updateFolder);
    if (!file.exists()) {
      try {
        file.mkdir();
      }
 catch (      Exception ex) {
      }
    }
    try {
      saveFile(file.getCanonicalPath() + ""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException ex) {
    }
  }
  try {
    metrics=new Metrics(this);
    final EventListener listener=new EventListener();
    Graph hacksGraph=metrics.createGraph(""String_Node_Str"");
    for (    final CheckType type : CheckType.values()) {
      hacksGraph.addPlotter(new Metrics.Plotter(CheckType.getName(type)){
        @Override public int getValue(){
          return listener.getCheats(type);
        }
      }
);
      listener.resetCheck(type);
    }
    Graph apiGraph=metrics.createGraph(""String_Node_Str"");
    apiGraph.addPlotter(new Metrics.Plotter(""String_Node_Str""){
      @Override public int getValue(){
        return manager.getCheckManager().getDisabled();
      }
    }
);
    apiGraph.addPlotter(new Metrics.Plotter(""String_Node_Str""){
      @Override public int getValue(){
        return manager.getCheckManager().getExempt();
      }
    }
);
    metrics.start();
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
  }
 catch (  IOException ex) {
  }
  for (  Player player : getServer().getOnlinePlayers()) {
    String name=player.getName();
    manager.getPlayerManager().setLevel(player,config.getLevel(name));
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
  }
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
  }
}",0.6058280028429283
101890,"public boolean checkSwing(Player player,Block block){
  return !player.getInventory().getItemInHand().containsEnchantment(Enchantment.DIG_SPEED) && !Utilities.isInstantBreak(block.getType()) && !justAnimated(player)&& !Utilities.isUsingMcMMOAbility(player);
}","public boolean checkSwing(Player player,Block block){
  return !player.getInventory().getItemInHand().containsEnchantment(Enchantment.DIG_SPEED) && !Utilities.isInstantBreak(block.getType()) && !justAnimated(player)&& !Utilities.isUsingMcMMOAbility(player)&& !(player.getInventory().getItemInHand().getType() == Material.SHEARS && block.getType() == Material.LEAVES);
}",0.8248407643312102
101891,"private void checkForUpdate(){
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
  }
  URL url=null;
  URLConnection urlConn=null;
  InputStreamReader inStream=null;
  BufferedReader buff=null;
  String v=""String_Node_Str"";
  try {
    url=new URL(""String_Node_Str"");
    urlConn=url.openConnection();
    inStream=new InputStreamReader(urlConn.getInputStream());
  }
 catch (  Exception ex) {
  }
  buff=new BufferedReader(inStream);
  try {
    v=buff.readLine();
    urlConn=null;
    inStream=null;
    buff.close();
    buff=null;
  }
 catch (  Exception ex) {
  }
  if (!this.getDescription().getVersion().equalsIgnoreCase(v)) {
    String version=this.getDescription().getVersion();
    if (version.endsWith(""String_Node_Str"") || version.endsWith(""String_Node_Str"")) {
      if (version.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(v)) {
        update=true;
        if (verbose) {
          logger.log(Level.INFO,""String_Node_Str"");
        }
      }
 else {
        update=false;
        if (verbose) {
          logger.log(Level.INFO,""String_Node_Str"");
        }
      }
    }
 else {
      update=true;
      if (verbose) {
        logger.log(Level.INFO,""String_Node_Str"");
      }
    }
  }
 else {
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
    update=false;
  }
}","private void checkForUpdate(){
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
  }
  URL url;
  URLConnection urlConn;
  InputStreamReader inStream=null;
  BufferedReader buff;
  String v=""String_Node_Str"";
  try {
    url=new URL(""String_Node_Str"");
    urlConn=url.openConnection();
    inStream=new InputStreamReader(urlConn.getInputStream());
  }
 catch (  Exception ex) {
  }
  buff=new BufferedReader(inStream);
  try {
    v=buff.readLine();
    urlConn=null;
    inStream=null;
    buff.close();
    buff=null;
  }
 catch (  Exception ex) {
  }
  if (!this.getDescription().getVersion().equalsIgnoreCase(v)) {
    String version=this.getDescription().getVersion();
    if (version.endsWith(""String_Node_Str"") || version.endsWith(""String_Node_Str"")) {
      if (version.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(v)) {
        update=true;
        if (verbose) {
          logger.log(Level.INFO,""String_Node_Str"");
        }
      }
 else {
        update=false;
        if (verbose) {
          logger.log(Level.INFO,""String_Node_Str"");
        }
      }
    }
 else {
      update=true;
      if (verbose) {
        logger.log(Level.INFO,""String_Node_Str"");
      }
    }
  }
 else {
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
    update=false;
  }
}",0.99457111834962
101892,"@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void checkExploit(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Location from=event.getFrom();
  Location to=event.getTo();
  Distance distance=new Distance(from,to);
  double x=distance.getXDifference();
  double y=distance.getYDifference();
  double z=distance.getZDifference();
  if (checkManager.willCheck(player,CheckType.FLY) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && backend.checkFlight(player,distance)) {
    from.setX(from.getX() - 1);
    from.setY(from.getY() - 1);
    from.setZ(from.getZ() - 1);
    event.setTo(from);
    Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - 2,player.getLocation().getZ());
    Block newBlock=newLocation.getBlock();
    if (newBlock.getTypeId() != 0) {
      event.setTo(newLocation);
    }
    log(""String_Node_Str"",player,CheckType.FLY);
  }
  if (checkManager.willCheck(player,CheckType.FLY) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && backend.checkYAxis(player,distance)) {
    from.setX(from.getX() - 1);
    from.setY(from.getY() - 1);
    from.setZ(from.getZ() - 1);
    if (from.getBlock().getTypeId() == 0) {
      event.setTo(from);
    }
    for (int i=5; i > 0; i--) {
      Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
      Block lower=newLocation.getBlock();
      if (lower.getTypeId() == 0) {
        player.teleport(newLocation);
        break;
      }
    }
    Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - 2,player.getLocation().getZ());
    Block newBlock=newLocation.getBlock();
    if (newBlock.getTypeId() != 0) {
      event.setTo(newLocation);
    }
    log(""String_Node_Str"",player,CheckType.FLY);
  }
  if (checkManager.willCheck(player,CheckType.SPEED) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)) {
    if (event.getFrom().getY() < event.getTo().getY() && backend.checkYSpeed(player,y)) {
      event.setTo(from);
      log(""String_Node_Str"",player,CheckType.SPEED);
    }
    if (backend.checkXZSpeed(player,x,z)) {
      event.setTo(from);
      log(""String_Node_Str"",player,CheckType.SPEED);
    }
  }
  if (checkManager.willCheck(player,CheckType.NOFALL) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)&& event.getFrom().getY() > event.getTo().getY() && backend.checkNoFall(player,y)) {
    event.setTo(from);
    log(""String_Node_Str"",player,CheckType.NOFALL);
  }
}","@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void checkExploit(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Location from=event.getFrom();
  Location to=event.getTo();
  Distance distance=new Distance(from,to);
  double x=distance.getXDifference();
  double y=distance.getYDifference();
  double z=distance.getZDifference();
  backend.checkAscension(player,from.getY(),to.getY());
  if (checkManager.willCheck(player,CheckType.FLY) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && backend.checkFlight(player,distance)) {
    from.setX(from.getX() - 1);
    from.setY(from.getY() - 1);
    from.setZ(from.getZ() - 1);
    event.setTo(from);
    Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - 2,player.getLocation().getZ());
    Block newBlock=newLocation.getBlock();
    if (newBlock.getTypeId() != 0) {
      event.setTo(newLocation);
    }
    log(""String_Node_Str"",player,CheckType.FLY);
  }
  if (checkManager.willCheck(player,CheckType.FLY) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && backend.checkYAxis(player,distance)) {
    from.setX(from.getX() - 1);
    from.setY(from.getY() - 1);
    from.setZ(from.getZ() - 1);
    if (from.getBlock().getTypeId() == 0) {
      event.setTo(from);
    }
    for (int i=5; i > 0; i--) {
      Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - i,player.getLocation().getZ());
      Block lower=newLocation.getBlock();
      if (lower.getTypeId() == 0) {
        player.teleport(newLocation);
        break;
      }
    }
    Location newLocation=new Location(player.getWorld(),player.getLocation().getX(),player.getLocation().getY() - 2,player.getLocation().getZ());
    Block newBlock=newLocation.getBlock();
    if (newBlock.getTypeId() != 0) {
      event.setTo(newLocation);
    }
    log(""String_Node_Str"",player,CheckType.FLY);
  }
  if (checkManager.willCheck(player,CheckType.SPEED) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)) {
    if (event.getFrom().getY() < event.getTo().getY() && backend.checkYSpeed(player,y)) {
      event.setTo(from);
      log(""String_Node_Str"",player,CheckType.SPEED);
    }
    if (backend.checkXZSpeed(player,x,z)) {
      event.setTo(from);
      log(""String_Node_Str"",player,CheckType.SPEED);
    }
  }
  if (checkManager.willCheck(player,CheckType.NOFALL) && checkManager.willCheck(player,CheckType.ZOMBE_FLY) && checkManager.willCheck(player,CheckType.FLY)&& event.getFrom().getY() > event.getTo().getY() && backend.checkNoFall(player,y)) {
    event.setTo(from);
    log(""String_Node_Str"",player,CheckType.NOFALL);
  }
}",0.9897134459955916
101893,"public boolean checkWaterWalk(Player player,double x,double z){
  Block block=player.getLocation().getBlock();
  if (block.isLiquid() && player.getVehicle() == null) {
    if (isInWater.contains(player.getName())) {
      if (isInWaterCache.contains(player.getName())) {
        if (x > XZ_SPEED_MAX_WATER || z > XZ_SPEED_MAX_WATER && !Utilities.sprintFly(player) && player.getNearbyEntities(1,1,1).isEmpty()) {
          return true;
        }
 else         if (x > XZ_SPEED_MAX_WATER_SPRINT || z > XZ_SPEED_MAX_WATER_SPRINT) {
          return true;
        }
      }
 else {
        isInWaterCache.add(player.getName());
        return false;
      }
    }
 else {
      isInWater.add(player.getName());
      return false;
    }
  }
  isInWater.remove(player.getName());
  isInWaterCache.remove(player.getName());
  return false;
}","public boolean checkWaterWalk(Player player,double x,double z){
  Block block=player.getLocation().getBlock();
  if (player.getVehicle() == null && !player.isFlying()) {
    if (block.isLiquid() && block.getRelative(BlockFace.DOWN).isLiquid()) {
      if (isInWater.contains(player.getName())) {
        if (isInWaterCache.contains(player.getName())) {
          if (player.getNearbyEntities(1,1,1).isEmpty()) {
            boolean b=false;
            if (!Utilities.sprintFly(player) && x > XZ_SPEED_MAX_WATER || z > XZ_SPEED_MAX_WATER) {
              b=true;
            }
 else             if (x > XZ_SPEED_MAX_WATER_SPRINT || z > XZ_SPEED_MAX_WATER_SPRINT) {
              b=true;
            }
            if (b) {
              if (waterSpeedViolation.containsKey(player.getName())) {
                int v=waterSpeedViolation.get(player.getName());
                if (v >= WATER_SPEED_VIOLATION_MAX) {
                  waterSpeedViolation.put(player.getName(),0);
                  return true;
                }
 else {
                  waterSpeedViolation.put(player.getName(),v + 1);
                }
              }
 else {
                waterSpeedViolation.put(player.getName(),1);
              }
            }
          }
        }
 else {
          isInWaterCache.add(player.getName());
          return false;
        }
      }
 else {
        isInWater.add(player.getName());
        return false;
      }
    }
 else     if (block.getRelative(BlockFace.DOWN).isLiquid() && isAscending(player) && Utilities.cantStandAt(block)&& Utilities.cantStandAt(block.getRelative(BlockFace.DOWN))) {
      if (waterAscensionViolation.containsKey(player.getName())) {
        int v=waterAscensionViolation.get(player.getName());
        if (v >= WATER_ASCENSION_VIOLATION_MAX) {
          waterAscensionViolation.put(player.getName(),0);
          return true;
        }
 else {
          waterAscensionViolation.put(player.getName(),v + 1);
        }
      }
 else {
        waterAscensionViolation.put(player.getName(),1);
      }
    }
 else {
      isInWater.remove(player.getName());
      isInWaterCache.remove(player.getName());
    }
  }
  return false;
}",0.3926910299003322
101894,"private static boolean cantStandFar(Block block){
  return !canStand(block.getRelative(BlockFace.NORTH_WEST)) && !canStand(block.getRelative(BlockFace.NORTH_EAST)) && !canStand(block.getRelative(BlockFace.SOUTH_WEST))&& !canStand(block.getRelative(BlockFace.SOUTH_EAST));
}","public static boolean cantStandFar(Block block){
  return !canStand(block.getRelative(BlockFace.NORTH_WEST)) && !canStand(block.getRelative(BlockFace.NORTH_EAST)) && !canStand(block.getRelative(BlockFace.SOUTH_WEST))&& !canStand(block.getRelative(BlockFace.SOUTH_EAST));
}",0.979816513761468
101895,"private static boolean cantStandClose(Block block){
  return !canStand(block.getRelative(BlockFace.NORTH)) && !canStand(block.getRelative(BlockFace.EAST)) && !canStand(block.getRelative(BlockFace.SOUTH))&& !canStand(block.getRelative(BlockFace.WEST));
}","public static boolean cantStandClose(Block block){
  return !canStand(block.getRelative(BlockFace.NORTH)) && !canStand(block.getRelative(BlockFace.EAST)) && !canStand(block.getRelative(BlockFace.SOUTH))&& !canStand(block.getRelative(BlockFace.WEST));
}",0.9782178217821782
101896,"public void logTeleport(final Player player){
  logEvent(movingExempt,player,TELEPORT_TIME);
}","public void logTeleport(final Player player){
  logEvent(movingExempt,player,TELEPORT_TIME);
  nofallViolation.remove(player.getName());
  flightViolation.remove(player.getName());
  yAxisViolations.remove(player.getName());
  yAxisLastViolation.remove(player.getName());
  lastYcoord.remove(player.getName());
  lastYtime.remove(player.getName());
}",0.4234234234234234
101897,"@Override public void onEnable(){
  plugin=this;
  config=AnticheatManager.CONFIGURATION;
  verbose=config.verboseStartup();
  updateFolder=config.updateFolder();
  checkForUpdate();
  if (!new File(""String_Node_Str"").exists()) {
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
    saveDefaultConfig();
  }
  eventList.add(new PlayerListener());
  eventList.add(new BlockListener());
  eventList.add(new EntityListener());
  eventList.add(new VehicleListener());
  if (config.logXRay()) {
    eventList.add(new XRayListener());
  }
  for (  Listener listener : eventList) {
    getServer().getPluginManager().registerEvents(listener,this);
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"".concat(listener.toString()));
    }
  }
  getCommand(""String_Node_Str"").setExecutor(new CommandHandler());
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
    logger.log(Level.INFO,""String_Node_Str"");
  }
  if (update && config.autoUpdate()) {
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
    File file=new File(""String_Node_Str"" + updateFolder);
    if (!file.exists()) {
      try {
        file.mkdir();
      }
 catch (      Exception ex) {
      }
    }
    try {
      saveFile(file.getCanonicalPath() + ""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException ex) {
    }
  }
}","@Override public void onEnable(){
  plugin=this;
  if (!new File(this.getDataFolder() + ""String_Node_Str"").exists()) {
    saveDefaultConfig();
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
  }
  config=AnticheatManager.CONFIGURATION;
  verbose=config.verboseStartup();
  updateFolder=config.updateFolder();
  checkForUpdate();
  eventList.add(new PlayerListener());
  eventList.add(new BlockListener());
  eventList.add(new EntityListener());
  eventList.add(new VehicleListener());
  if (config.logXRay()) {
    eventList.add(new XRayListener());
  }
  for (  Listener listener : eventList) {
    getServer().getPluginManager().registerEvents(listener,this);
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"".concat(listener.toString()));
    }
  }
  getCommand(""String_Node_Str"").setExecutor(new CommandHandler());
  if (verbose) {
    logger.log(Level.INFO,""String_Node_Str"");
    logger.log(Level.INFO,""String_Node_Str"");
  }
  if (update && config.autoUpdate()) {
    if (verbose) {
      logger.log(Level.INFO,""String_Node_Str"");
    }
    File file=new File(""String_Node_Str"" + updateFolder);
    if (!file.exists()) {
      try {
        file.mkdir();
      }
 catch (      Exception ex) {
      }
    }
    try {
      saveFile(file.getCanonicalPath() + ""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException ex) {
    }
  }
}",0.883653497644074
101898,"@Override public Builder<?> select(List<Builder<?>> aBuilders){
  try {
    JsonToken _token=reader.peek();
    String _name=names.isEmpty() ? ""String_Node_Str"" : names.peek();
    for (    Builder<?> _b : aBuilders) {
      Name _n=_b.getName();
      String _bn=(_n.getAlias() != null) ? _n.getAlias() : _n.getName();
      if (_name.equals(_bn)) {
        return _b;
      }
    }
    return null;
  }
 catch (  IOException anExc) {
    throw new ParsingException(anExc);
  }
}","@Override public Builder<?> select(List<Builder<?>> aBuilders){
  String _name=names.isEmpty() ? ""String_Node_Str"" : names.peek();
  for (  Builder<?> _b : aBuilders) {
    if ((_name.equals(_b.getName().getName())) || (_b.getName().equals(Name.MISSING) && aBuilders.size() == 1)) {
      return _b;
    }
  }
  return null;
}",0.3101736972704714
101899,"public <T>T build(Builder<T> aBuilder){
  try {
    Builder _b=aBuilder;
    builders.push(_b);
    _b.prepare(this);
    while (reader.hasNext()) {
      JsonToken _token=reader.peek();
      System.out.println(_token);
switch (_token) {
case NAME:
        names.push(reader.nextName());
      break;
case STRING:
    Builder<?> _p=_b.moveDown(this);
  if (_p == null)   _p=builders.peek();
_p.prepare(this);
_p.setValue(this,""String_Node_Str"",reader.nextString());
_b.setValue(this,names.pop(),_p.build(this));
break;
case NUMBER:
_p=_b.moveDown(this);
if (_p == null) {
reader.skipValue();
}
 else {
_p.prepare(this);
_p.setValue(this,""String_Node_Str"",reader.nextDouble());
_b.setValue(this,names.pop(),_p.build(this));
}
break;
case BOOLEAN:
_p=_b.moveDown(this);
if (_p == null) {
reader.skipValue();
}
 else {
_p.prepare(this);
_p.setValue(this,""String_Node_Str"",reader.nextBoolean());
_b.setValue(this,names.pop(),_p.build(this));
}
break;
case NULL:
reader.nextNull();
names.pop();
case BEGIN_ARRAY:
reader.beginArray();
_b=_b.moveDown(this);
if (_b == null) {
_b=builders.peek();
if (reader.peek() == JsonToken.END_ARRAY) reader.endArray();
 else reader.skipValue();
}
 else {
_b.prepare(this);
builders.push(_b);
}
break;
case END_ARRAY:
reader.endArray();
_p=builders.pop();
_b=builders.peek();
_b.setValue(this,names.pop(),_p.build(this));
break;
case BEGIN_OBJECT:
reader.beginObject();
_b=_b.moveDown(this);
if (_b == null) {
_b=builders.peek();
}
 else {
_b.prepare(this);
builders.push(_b);
}
break;
case END_OBJECT:
reader.endObject();
_p=builders.pop();
_b=builders.peek();
_b.setValue(this,names.pop(),_p.build(this));
break;
case END_DOCUMENT:
return aBuilder.build(this);
}
}
return aBuilder.build(this);
}
 catch (ParsingException anExc) {
throw anExc;
}
catch (Exception anExc) {
throw new ParsingException(anExc);
}
}","public <T>T build(Builder<T> aBuilder){
  try {
    Builder _b=aBuilder;
    builders.push(_b);
    _b.prepare(this);
    JsonToken _token=null;
    while ((_token=reader.peek()) != null) {
      System.out.println(_token);
switch (_token) {
case NAME:
        names.push(reader.nextName());
      break;
case STRING:
    Builder<?> _p=_b.moveDown(this);
  if (_p == null)   _p=builders.peek();
System.out.println(_p);
_p.prepare(this);
_p.setValue(this,""String_Node_Str"",reader.nextString());
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,names.pop(),_p.build(this));
break;
case NUMBER:
_p=_b.moveDown(this);
if (_p == null) _p=builders.peek();
_p.prepare(this);
_p.setValue(this,""String_Node_Str"",reader.nextDouble());
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,names.pop(),_p.build(this));
break;
case BOOLEAN:
_p=_b.moveDown(this);
if (_p == null) _p=builders.peek();
_p.prepare(this);
_p.setValue(this,""String_Node_Str"",reader.nextBoolean());
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,names.pop(),_p.build(this));
break;
case NULL:
reader.nextNull();
names.pop();
case BEGIN_ARRAY:
reader.beginArray();
_b=_b.moveDown(this);
if (_b == null) {
_b=builders.peek();
if (reader.peek() == JsonToken.END_ARRAY) reader.endArray();
 else reader.skipValue();
}
 else {
_b.prepare(this);
builders.push(_b);
}
break;
case END_ARRAY:
reader.endArray();
_p=builders.pop();
_b=builders.peek();
_b.setValue(this,names.pop(),_p.build(this));
break;
case BEGIN_OBJECT:
reader.beginObject();
_b=_b.moveDown(this);
if (_b == null) {
_b=builders.peek();
}
 else {
_b.prepare(this);
builders.push(_b);
}
break;
case END_OBJECT:
reader.endObject();
_p=builders.pop();
if (!builders.isEmpty()) {
_b=builders.peek();
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,names.pop(),_p.build(this));
}
break;
case END_DOCUMENT:
return aBuilder.build(this);
}
}
return aBuilder.build(this);
}
 catch (ParsingException anExc) {
throw anExc;
}
catch (Exception anExc) {
throw new ParsingException(anExc);
}
}",0.8476095617529881
101900,"@Override public <R>UnNamedArray<R> array(final Class<? extends R> aType){
  return new UnNamedArray<R>(){
    private UnNamedObject<?> obj;
    private UnNamedProperty<?,?> property;
    private UnNamedArray<?> array;
    private Class<?> intermediate;
    private Converter<?,? extends R> converter;
    private ReflectorFactory reflector=new ReflectorFactory();
    @Override public <I>UnNamedArray<I> via(    Class<I> anIntermediateType){
      intermediate=anIntermediateType;
      converter=(Converter<?,R>)getConverter(intermediate,aType);
      return (UnNamedArray<I>)this;
    }
    @Override public <I>UnNamedArray<I> via(    Class<I> anIntermediateType,    Converter<I,R> aConverter){
      intermediate=anIntermediateType;
      converter=aConverter;
      return (UnNamedArray<I>)this;
    }
    @Override public UnNamedArray<R> of(    Class<?> aConvertableType){
      obj=object(aConvertableType);
      obj.onAttach(List.class,reflector,JsonDocumentDefinition.this);
      return this;
    }
    @Override public UnNamedArray<R> of(    UnNamedProperty<?,?> aContent){
      property=aContent;
      property.onAttach(List.class,reflector,JsonDocumentDefinition.this);
      return this;
    }
    @Override public UnNamedArray<R> of(    UnNamedObject<?> aContent){
      obj=aContent;
      obj.onAttach(List.class,reflector,JsonDocumentDefinition.this);
      return this;
    }
    @Override public UnNamedArray<R> of(    UnNamedArray<?> aContent){
      array=aContent;
      array.onAttach(List.class,reflector,JsonDocumentDefinition.this);
      return this;
    }
    @Override public void onAttach(    Class<?> aContainerType,    ReflectorFactory aReflector,    HasConverters aConverters){
      aReflector.prepare(aContainerType,Name.MISSING,aType);
    }
    @Override public Name getName(){
      return Name.MISSING;
    }
    @Override @SuppressWarnings(""String_Node_Str"") public Builder<T> newBuilder(){
      Definition<?> _def=firstNonNull(obj,property,array);
      return new ReflectiveBuilder(Name.MISSING,aType,intermediate,converter,reflector.newReflector(),Collections.singletonList(_def));
    }
  }
;
}","@Override public <R>UnNamedArray<R> array(final Class<? extends R> aType){
  return new UnNamedArray<R>(){
    private UnNamedObject<?> obj;
    private UnNamedProperty<?,?> property;
    private UnNamedArray<?> array;
    private Class<?> intermediate;
    private Converter<?,? extends R> converter;
    private ReflectorFactory reflector=new ReflectorFactory();
    @Override public <I>UnNamedArray<I> via(    Class<I> anIntermediateType){
      intermediate=anIntermediateType;
      converter=(Converter<?,R>)getConverter(intermediate,aType);
      return (UnNamedArray<I>)this;
    }
    @Override public <I>UnNamedArray<I> via(    Class<I> anIntermediateType,    Converter<I,R> aConverter){
      intermediate=anIntermediateType;
      converter=aConverter;
      return (UnNamedArray<I>)this;
    }
    @Override public UnNamedArray<R> of(    Class<?> aConvertableType){
      property=property(aConvertableType);
      return this;
    }
    @Override public UnNamedArray<R> of(    UnNamedProperty<?,?> aContent){
      property=aContent;
      return this;
    }
    @Override public UnNamedArray<R> of(    UnNamedObject<?> aContent){
      obj=aContent;
      return this;
    }
    @Override public UnNamedArray<R> of(    UnNamedArray<?> aContent){
      array=aContent;
      return this;
    }
    @Override public void onAttach(    Class<?> aContainerType,    ReflectorFactory aReflector,    HasConverters aConverters){
      Content<?> _def=firstNonNull(obj,property,array);
      _def.onAttach(ArrayList.class,reflector,JsonDocumentDefinition.this);
      aReflector.prepare(aContainerType,Name.MISSING,aType);
    }
    @Override public Name getName(){
      return Name.MISSING;
    }
    @Override @SuppressWarnings(""String_Node_Str"") public Builder<T> newBuilder(){
      Definition<?> _def=firstNonNull(obj,property,array);
      return new ReflectiveBuilder(Name.MISSING,aType,intermediate,converter,reflector.newReflector(),Collections.singletonList(_def),true);
    }
  }
;
}",0.6666666666666666
101901,"@Override public UnNamedArray<R> of(UnNamedArray<?> aContent){
  array=aContent;
  array.onAttach(List.class,reflector,JsonDocumentDefinition.this);
  return this;
}","@Override public UnNamedArray<R> of(UnNamedArray<?> aContent){
  array=aContent;
  return this;
}",0.7404580152671756
101902,"@Override public Name alias(final String aName,final String anAlias){
  return new Name(){
    @Override public String getNamespace(){
      return ""String_Node_Str"";
    }
    @Override public String getName(){
      return aName;
    }
    @Override public String getAlias(){
      return anAlias;
    }
    @Override public String toString(){
      return ""String_Node_Str"" + aName + ""String_Node_Str""+ anAlias+ ""String_Node_Str"";
    }
    @Override public int hashCode(){
      return getClass().hashCode() ^ aName.hashCode() ^ anAlias.hashCode();
    }
    @Override public boolean equals(    Object anObject){
      if (anObject instanceof Name) {
        Name _other=(Name)anObject;
        return ((aName != null) && (aName.equals(_other.getName()))) && ((anAlias != null) && (anAlias.equals(_other.getAlias())));
      }
      return false;
    }
  }
;
}","@Override public Name alias(final String aName,final String anAlias){
  return new Name(){
    @Override public String getNamespace(){
      return ""String_Node_Str"";
    }
    @Override public String getName(){
      return aName;
    }
    @Override public String getAlias(){
      return (anAlias != null) ? anAlias : aName;
    }
    @Override public String toString(){
      return ""String_Node_Str"" + aName + ""String_Node_Str""+ anAlias+ ""String_Node_Str"";
    }
    @Override public int hashCode(){
      return getClass().hashCode() ^ aName.hashCode() ^ anAlias.hashCode();
    }
    @Override public boolean equals(    Object anObject){
      if (anObject instanceof Name) {
        Name _other=(Name)anObject;
        return ((aName != null) && (aName.equals(_other.getName()))) && ((anAlias != null) && (anAlias.equals(_other.getAlias())));
      }
      return false;
    }
  }
;
}",0.9840546697038725
101903,"@Override public Document<T> mapping(final Class<? extends T> aType){
  if (document != null)   throw new IllegalStateException(""String_Node_Str"");
  return document=new Document<T>(){
    private Class<?> intermediate;
    private List<Content<?>> content=NO_CONTENT;
    private Converter<Object,T> converter;
    private ReflectorFactory reflector=new ReflectorFactory();
    private Class<? extends T> type=reflector.getProxy(aType);
    @Override public Document<T> with(    Content<?>... aContent){
      content=new ArrayList<Content<?>>();
      for (      Content<?> _c : aContent) {
        _c.onAttach(type,reflector,JsonDocumentDefinition.this);
        content.add(_c);
      }
      return this;
    }
    @Override public <I>Document<I> via(    Class<I> anIntermediateType){
      intermediate=reflector.getProxy(anIntermediateType);
      converter=(Converter<Object,T>)getConverter(anIntermediateType,type);
      return (Document<I>)this;
    }
    @Override public <I>Document<I> via(    Class<I> anIntermediateType,    Converter<I,? extends T> aConverter){
      intermediate=reflector.getProxy(anIntermediateType);
      converter=(Converter<Object,T>)aConverter;
      return (Document<I>)this;
    }
    @Override @SuppressWarnings(""String_Node_Str"") public Builder<T> newBuilder(){
      List<Builder<?>> _nested=new ArrayList<Builder<?>>();
      for (      Content<?> _c : content)       _nested.add(_c.newBuilder());
      return new ReflectiveBuilder(Name.MISSING,aType,intermediate,converter,reflector.newReflector(),_nested);
    }
  }
;
}","@Override public Document<T> mapping(final Class<? extends T> aType){
  if (document != null)   throw new IllegalStateException(""String_Node_Str"");
  return document=new Document<T>(){
    private Class<?> intermediate;
    private List<Content<?>> content=NO_CONTENT;
    private Converter<Object,T> converter;
    private ReflectorFactory reflector=new ReflectorFactory();
    private Class<? extends T> type=ReflectorFactory.maybeConvertToProxy(aType);
    @Override public Document<T> with(    Content<?>... aContent){
      content=new ArrayList<Content<?>>();
      for (      Content<?> _c : aContent) {
        _c.onAttach(type,reflector,JsonDocumentDefinition.this);
        content.add(_c);
      }
      return this;
    }
    @Override public <I>Document<I> via(    Class<I> anIntermediateType){
      intermediate=ReflectorFactory.maybeConvertToProxy(anIntermediateType);
      converter=(Converter<Object,T>)getConverter(anIntermediateType,type);
      return (Document<I>)this;
    }
    @Override public <I>Document<I> via(    Class<I> anIntermediateType,    Converter<I,? extends T> aConverter){
      intermediate=ReflectorFactory.maybeConvertToProxy(anIntermediateType);
      converter=(Converter<Object,T>)aConverter;
      return (Document<I>)this;
    }
    @Override @SuppressWarnings(""String_Node_Str"") public Builder<T> newBuilder(){
      List<Builder<?>> _nested=new ArrayList<Builder<?>>();
      for (      Content<?> _c : content)       _nested.add(_c.newBuilder());
      return new ReflectiveBuilder(Name.MISSING,aType,intermediate,converter,reflector.newReflector(),_nested,false);
    }
  }
;
}",0.9737335834896812
101904,"@Override public String getAlias(){
  return anAlias;
}","@Override public String getAlias(){
  return (anAlias != null) ? anAlias : aName;
}",0.7971014492753623
101905,"@Override public <R>UnNamedObject<R> object(final Class<? extends R> aType){
  return new UnNamedObject<R>(){
    private List<Content<?>> content;
    private Converter<?,R> converter;
    private Class<?> intermediate;
    private ReflectorFactory reflector=new ReflectorFactory();
    private Class<? extends R> type=reflector.getProxy(aType);
    @Override public <I>UnNamedObject<I> via(    Class<I> anIntermediateType){
      intermediate=reflector.getProxy(anIntermediateType);
      converter=(Converter<?,R>)getConverter(intermediate,aType);
      return (UnNamedObject<I>)this;
    }
    @Override public <I>UnNamedObject<I> via(    Class<I> anIntermediateType,    Converter<I,R> aConverter){
      intermediate=reflector.getProxy(anIntermediateType);
      converter=aConverter;
      return (UnNamedObject<I>)this;
    }
    @Override public UnNamedObject<R> with(    Content<?>... aContent){
      content=new ArrayList<Content<?>>();
      for (      Content<?> _c : aContent) {
        _c.onAttach(type,reflector,JsonDocumentDefinition.this);
        content.add(_c);
      }
      return this;
    }
    @Override public void onAttach(    Class<?> aContainerType,    ReflectorFactory aReflector,    HasConverters aConverters){
      aReflector.prepare(aContainerType,Name.MISSING,type);
    }
    @Override public Name getName(){
      return Name.MISSING;
    }
    @Override @SuppressWarnings(""String_Node_Str"") public Builder<T> newBuilder(){
      List<Builder<?>> _nested=new ArrayList<Builder<?>>();
      for (      Content<?> _c : content)       _nested.add(_c.newBuilder());
      return new ReflectiveBuilder(Name.MISSING,type,intermediate,converter,reflector.newReflector(),_nested);
    }
  }
;
}","@Override public <R>UnNamedObject<R> object(final Class<? extends R> aType){
  return new UnNamedObject<R>(){
    private List<Content<?>> content=Collections.emptyList();
    private Converter<?,R> converter;
    private Class<?> intermediate;
    private ReflectorFactory reflector=new ReflectorFactory();
    private Class<? extends R> type=reflector.maybeConvertToProxy(aType);
    @Override public <I>UnNamedObject<I> via(    Class<I> anIntermediateType){
      intermediate=reflector.maybeConvertToProxy(anIntermediateType);
      converter=(Converter<?,R>)getConverter(intermediate,aType);
      return (UnNamedObject<I>)this;
    }
    @Override public <I>UnNamedObject<I> via(    Class<I> anIntermediateType,    Converter<I,R> aConverter){
      intermediate=reflector.maybeConvertToProxy(anIntermediateType);
      converter=aConverter;
      return (UnNamedObject<I>)this;
    }
    @Override public UnNamedObject<R> with(    Content<?>... aContent){
      content=new ArrayList<Content<?>>();
      for (      Content<?> _c : aContent) {
        _c.onAttach(type,reflector,JsonDocumentDefinition.this);
        content.add(_c);
      }
      return this;
    }
    @Override public void onAttach(    Class<?> aContainerType,    ReflectorFactory aReflector,    HasConverters aConverters){
      aReflector.prepare(aContainerType,Name.MISSING,type);
    }
    @Override public Name getName(){
      return Name.MISSING;
    }
    @Override @SuppressWarnings(""String_Node_Str"") public Builder<T> newBuilder(){
      List<Builder<?>> _nested=new ArrayList<Builder<?>>();
      for (      Content<?> _c : content)       _nested.add(_c.newBuilder());
      return new ReflectiveBuilder(Name.MISSING,aType,intermediate,converter,reflector.newReflector(),_nested,false);
    }
  }
;
}",0.9760820045558086
101906,"public <T>T build(Builder<T> aBuilder){
  try {
    Builder _b=aBuilder;
    builders.push(_b);
    _b.prepare(this);
    JsonToken _token=null;
    while ((_token=reader.peek()) != null) {
switch (_token) {
case NAME:
        names.push(reader.nextName());
      break;
case STRING:
    Builder<?> _p=_b.moveDown(this);
  if (_p == null)   _p=builders.peek();
_p.prepare(this);
_p.setValue(this,""String_Node_Str"",reader.nextString());
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,names.pop(),_p.build(this));
break;
case NUMBER:
_p=_b.moveDown(this);
if (_p == null) _p=builders.peek();
_p.prepare(this);
_p.setValue(this,""String_Node_Str"",reader.nextDouble());
String _name=""String_Node_Str"";
try {
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,_name=names.pop(),_p.build(this));
}
 catch (ClassCastException anExc) {
throw new ParsingException(""String_Node_Str"" + _name + ""String_Node_Str""+ _b.getName().getName()+ ""String_Node_Str"",anExc);
}
break;
case BOOLEAN:
_p=_b.moveDown(this);
if (_p == null) _p=builders.peek();
_p.prepare(this);
_p.setValue(this,""String_Node_Str"",reader.nextBoolean());
_name=""String_Node_Str"";
try {
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,_name=names.pop(),_p.build(this));
}
 catch (ClassCastException anExc) {
throw new ParsingException(""String_Node_Str"" + _name + ""String_Node_Str""+ _b.getName().getName()+ ""String_Node_Str"",anExc);
}
break;
case NULL:
reader.nextNull();
names.pop();
case BEGIN_ARRAY:
reader.beginArray();
_b=_b.moveDown(this);
if (_b == null) {
_b=builders.peek();
if (reader.peek() == JsonToken.END_ARRAY) reader.endArray();
 else reader.skipValue();
}
 else {
_b.prepare(this);
builders.push(_b);
}
break;
case END_ARRAY:
reader.endArray();
_p=builders.pop();
_b=builders.peek();
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,names.pop(),_p.build(this));
break;
case BEGIN_OBJECT:
reader.beginObject();
_b=_b.moveDown(this);
if (_b == null) {
_b=builders.peek();
}
 else {
_b.prepare(this);
builders.push(_b);
}
break;
case END_OBJECT:
reader.endObject();
_p=builders.pop();
if (!builders.isEmpty()) {
_b=builders.peek();
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,names.pop(),_p.build(this));
}
break;
case END_DOCUMENT:
return aBuilder.build(this);
}
}
return aBuilder.build(this);
}
 catch (ParsingException anExc) {
throw anExc;
}
catch (Exception anExc) {
throw new ParsingException(anExc);
}
}","public <T>T build(Builder<T> aBuilder){
  try {
    Builder _b=aBuilder;
    builders.push(_b);
    _b.prepare(this);
    JsonToken _token=null;
    while ((_token=reader.peek()) != null) {
switch (_token) {
case NAME:
        names.push(reader.nextName());
      break;
case STRING:
    Builder<?> _p=_b.moveDown(this);
  if (_p == null)   _p=builders.peek();
_p.prepare(this);
_p.setValue(this,""String_Node_Str"",reader.nextString());
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,names.pop(),_p.build(this));
break;
case NUMBER:
_p=_b.moveDown(this);
if (_p == null) _p=builders.peek();
_p.prepare(this);
_p.setValue(this,""String_Node_Str"",reader.nextDouble());
String _name=""String_Node_Str"";
try {
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,_name=names.pop(),_p.build(this));
}
 catch (ClassCastException anExc) {
throw new ParsingException(""String_Node_Str"" + _name + ""String_Node_Str""+ _b.getName().getName()+ ""String_Node_Str"",anExc);
}
break;
case BOOLEAN:
_p=_b.moveDown(this);
if (_p == null) _p=builders.peek();
_p.prepare(this);
_p.setValue(this,""String_Node_Str"",reader.nextBoolean());
_name=""String_Node_Str"";
try {
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,_name=names.pop(),_p.build(this));
}
 catch (ClassCastException anExc) {
throw new ParsingException(""String_Node_Str"" + _name + ""String_Node_Str""+ _b.getName().getName()+ ""String_Node_Str"",anExc);
}
break;
case NULL:
reader.nextNull();
names.pop();
break;
case BEGIN_ARRAY:
reader.beginArray();
_b=_b.moveDown(this);
if (_b == null) {
_b=builders.peek();
if (reader.peek() == JsonToken.END_ARRAY) reader.endArray();
 else reader.skipValue();
}
 else {
_b.prepare(this);
builders.push(_b);
}
break;
case END_ARRAY:
reader.endArray();
_p=builders.pop();
_b=builders.peek();
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,names.pop(),_p.build(this));
break;
case BEGIN_OBJECT:
reader.beginObject();
_b=_b.moveDown(this);
if (_b == null) {
_b=builders.peek();
}
 else {
_b.prepare(this);
builders.push(_b);
}
break;
case END_OBJECT:
reader.endObject();
_p=builders.pop();
if (!builders.isEmpty()) {
_b=builders.peek();
if (_b.isArray()) _b.setValue(this,""String_Node_Str"",_p.build(this));
 else _b.setValue(this,names.pop(),_p.build(this));
}
break;
case END_DOCUMENT:
return aBuilder.build(this);
}
}
return aBuilder.build(this);
}
 catch (ParsingException anExc) {
throw anExc;
}
catch (Exception anExc) {
throw new ParsingException(anExc);
}
}",0.9986561720099828
101907,"@Test public void parsesComplexMemberJsonWithIdObjects() throws Exception {
  GsonDocumentReader<Member2> _reader=new GsonDocumentReader<Member2>(new JsonDocumentDefinition<Member2>(){
{
      registerConverters(new ThreadSafeDateStringConverter(""String_Node_Str""));
      mapping(Member2.class).with(object(""String_Node_Str"",Member2.Identifier.class).with(property(""String_Node_Str"")),property(""String_Node_Str""),object(""String_Node_Str"",Member2.Person.class).with(object(""String_Node_Str"",Member2.Identifier.class).with(property(""String_Node_Str"")),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),object(""String_Node_Str"",Member2.Social.class).with(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),property(""String_Node_Str""));
    }
  }
);
  Member2 _result=_reader.read(new InputStreamReader(getClass().getResourceAsStream(""String_Node_Str"")));
  Assert.assertNotNull(_result);
  Assert.assertEquals(""String_Node_Str"",_result.getId().toSerializedForm());
  Assert.assertEquals(new SimpleDateFormat(""String_Node_Str"").parse(""String_Node_Str""),_result.getRegistrationDate());
  Member2.Person _person=_result.getPerson();
  Assert.assertNotNull(_person);
  Assert.assertEquals(""String_Node_Str"",_person.getId().toSerializedForm());
  Assert.assertEquals(""String_Node_Str"",_person.getFirstname());
  Assert.assertEquals(""String_Node_Str"",_person.getLastname());
  Assert.assertNull(_person.getEmail());
  Assert.assertNull(_person.getTitle());
  Member2.Social _social=_result.getSocial();
  Assert.assertNotNull(_social);
  Assert.assertEquals(""String_Node_Str"",_social.getProviderId());
  Assert.assertEquals(""String_Node_Str"",_social.getProviderUserId());
  Assert.assertEquals(""String_Node_Str"",_social.getImageUrl());
  Assert.assertEquals(50,_result.getPointsAccrued());
}","@Test public void parsesComplexMemberJsonWithIdObjects() throws Exception {
  GsonDocumentReader<Member2> _reader=new GsonDocumentReader<Member2>(new JsonDocumentDefinition<Member2>(){
{
      registerConverters(new ThreadSafeDateStringConverter(""String_Node_Str""));
      mapping(Member2.class).with(object(""String_Node_Str"",Member2.Identifier.class).with(property(""String_Node_Str"")),property(""String_Node_Str""),object(""String_Node_Str"",Member2.Person.class).with(object(""String_Node_Str"",Member2.Identifier.class).with(property(""String_Node_Str"")),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),object(""String_Node_Str"",Member2.Social.class).with(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),number(""String_Node_Str"",Integer.class));
    }
  }
);
  Member2 _result=_reader.read(new InputStreamReader(getClass().getResourceAsStream(""String_Node_Str"")));
  Assert.assertNotNull(_result);
  Assert.assertEquals(""String_Node_Str"",_result.getId().toSerializedForm());
  Assert.assertEquals(new SimpleDateFormat(""String_Node_Str"").parse(""String_Node_Str""),_result.getRegistrationDate());
  Member2.Person _person=_result.getPerson();
  Assert.assertNotNull(_person);
  Assert.assertEquals(""String_Node_Str"",_person.getId().toSerializedForm());
  Assert.assertEquals(""String_Node_Str"",_person.getFirstname());
  Assert.assertEquals(""String_Node_Str"",_person.getLastname());
  Assert.assertNull(_person.getEmail());
  Assert.assertNull(_person.getTitle());
  Member2.Social _social=_result.getSocial();
  Assert.assertNotNull(_social);
  Assert.assertEquals(""String_Node_Str"",_social.getProviderId());
  Assert.assertEquals(""String_Node_Str"",_social.getProviderUserId());
  Assert.assertEquals(""String_Node_Str"",_social.getImageUrl());
  Assert.assertEquals(50,_result.getPointsAccrued());
}",0.9830328738069988
101908,"private GsonDocumentReader<Member2> createMember2Reader(){
  return new GsonDocumentReader<Member2>(new JsonDocumentDefinition<Member2>(){
{
      registerConverters(new ThreadSafeDateStringConverter(""String_Node_Str""));
      mapping(Member2.class).with(object(""String_Node_Str"",Member2.Identifier.class).with(property(""String_Node_Str"")),property(""String_Node_Str""),object(""String_Node_Str"",Member2.Person.class).with(object(""String_Node_Str"",Member2.Identifier.class).with(property(""String_Node_Str"")),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),object(""String_Node_Str"",Member2.Social.class).with(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),number(""String_Node_Str"",Integer.class));
    }
  }
);
}","private GsonDocumentReader<Member2> createMember2Reader(){
  return new GsonDocumentReader<Member2>(new JsonDocumentDefinition<Member2>(){
{
      registerConverters(new ThreadSafeDateStringConverter(""String_Node_Str""));
      converting(Member2.Identifier.class).to(ImmutableIdentifier.class).using(new Converter<Member2.Identifier,ImmutableIdentifier>(){
        public ImmutableIdentifier convert(        Member2.Identifier aFrom){
          return ImmutableIdentifier.create(aFrom);
        }
      }
);
      mapping(Member2.class).with(object(""String_Node_Str"",ImmutableIdentifier.class).via(Member2.Identifier.class).with(property(""String_Node_Str"")),property(""String_Node_Str""),object(""String_Node_Str"",Member2.Person.class).with(object(""String_Node_Str"",ImmutableIdentifier.class).via(Member2.Identifier.class).with(property(""String_Node_Str"")),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),object(""String_Node_Str"",Member2.Social.class).with(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),number(""String_Node_Str"",Integer.class));
    }
  }
);
}",0.8117706747843734
101909,"@Test public void parsesComplexMemberJson() throws Exception {
  GsonDocumentReader<Member1> _reader=new GsonDocumentReader<Member1>(new JsonDocumentDefinition<Member1>(){
{
      registerConverters(new ThreadSafeDateStringConverter(""String_Node_Str""));
      mapping(Member1.class).with(property(""String_Node_Str""),property(""String_Node_Str""),object(""String_Node_Str"",Member1.Person.class).with(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),object(""String_Node_Str"",Member1.Social.class).with(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),property(""String_Node_Str""));
    }
  }
);
  Member1 _result=_reader.read(new InputStreamReader(getClass().getResourceAsStream(""String_Node_Str"")));
  Assert.assertNotNull(_result);
  Assert.assertEquals(""String_Node_Str"",_result.getId());
  Assert.assertEquals(new SimpleDateFormat(""String_Node_Str"").parse(""String_Node_Str""),_result.getRegistrationDate());
  Member1.Person _person=_result.getPerson();
  Assert.assertNotNull(_person);
  Assert.assertEquals(""String_Node_Str"",_person.getId());
  Assert.assertEquals(""String_Node_Str"",_person.getFirstname());
  Assert.assertEquals(""String_Node_Str"",_person.getLastname());
  Assert.assertNull(_person.getEmail());
  Assert.assertNull(_person.getTitle());
  Member1.Social _social=_result.getSocial();
  Assert.assertNotNull(_social);
  Assert.assertEquals(""String_Node_Str"",_social.getProviderId());
  Assert.assertEquals(""String_Node_Str"",_social.getProviderUserId());
  Assert.assertEquals(""String_Node_Str"",_social.getImageUrl());
  Assert.assertEquals(50,_result.getPointsAccrued());
}","@Test public void parsesComplexMemberJson() throws Exception {
  GsonDocumentReader<Member1> _reader=new GsonDocumentReader<Member1>(new JsonDocumentDefinition<Member1>(){
{
      registerConverters(new ThreadSafeDateStringConverter(""String_Node_Str""));
      mapping(Member1.class).with(property(""String_Node_Str""),property(""String_Node_Str""),object(""String_Node_Str"",Member1.Person.class).with(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),object(""String_Node_Str"",Member1.Social.class).with(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),number(""String_Node_Str"",Integer.class));
    }
  }
);
  Member1 _result=_reader.read(new InputStreamReader(getClass().getResourceAsStream(""String_Node_Str"")));
  Assert.assertNotNull(_result);
  Assert.assertEquals(""String_Node_Str"",_result.getId());
  Assert.assertEquals(new SimpleDateFormat(""String_Node_Str"").parse(""String_Node_Str""),_result.getRegistrationDate());
  Member1.Person _person=_result.getPerson();
  Assert.assertNotNull(_person);
  Assert.assertEquals(""String_Node_Str"",_person.getId());
  Assert.assertEquals(""String_Node_Str"",_person.getFirstname());
  Assert.assertEquals(""String_Node_Str"",_person.getLastname());
  Assert.assertNull(_person.getEmail());
  Assert.assertNull(_person.getTitle());
  Member1.Social _social=_result.getSocial();
  Assert.assertNotNull(_social);
  Assert.assertEquals(""String_Node_Str"",_social.getProviderId());
  Assert.assertEquals(""String_Node_Str"",_social.getProviderUserId());
  Assert.assertEquals(""String_Node_Str"",_social.getImageUrl());
  Assert.assertEquals(50,_result.getPointsAccrued());
}",0.9814061592097618
101910,"@Override public boolean canConvertFrom(Class<?> aClass){
  return aClass.isAssignableFrom(CharSequence.class);
}","@Override public boolean canConvertFrom(Class<?> aClass){
  return CharSequence.class.isAssignableFrom(aClass);
}",0.8761061946902655
101911,void registerConverters(Converter<?>... converters);,void registerConverters(StringConverter<?>... converters);,0.9454545454545454
101912,"@Override public void registerConverters(Converter<?>... aConverters){
  converters.addAll(0,Arrays.asList(aConverters));
}","@Override public void registerConverters(com.sjl.dsl4xml.support.StringConverter<?>... aConverters){
  converters.addAll(0,Arrays.asList(aConverters));
}",0.8913043478260869
101913,"public GsonContext(JsonReader aReader){
  reader=aReader;
  stack=new Stack<Object>();
  names=new Stack<String>();
  converters=new ArrayList<Converter<?>>();
  registerConverters(new PrimitiveBooleanConverter(),new DecimalToByteConverter(),new DecimalToShortConverter(),new DecimalToIntConverter(),new DecimalToLongConverter(),new PrimitiveCharConverter(),new PrimitiveFloatConverter(),new PrimitiveDoubleConverter(),new BooleanConverter(),new ByteConverter(),new ShortConverter(),new IntegerConverter(),new LongConverter(),new CharacterConverter(),new FloatConverter(),new DoubleConverter(),new ClassConverter(),new StringConverter());
}","public GsonContext(JsonReader aReader){
  reader=aReader;
  stack=new Stack<Object>();
  names=new Stack<String>();
  converters=new ArrayList<com.sjl.dsl4xml.support.StringConverter<?>>();
  registerConverters(new PrimitiveBooleanStringConverter(),new DecimalToByteStringConverter(),new DecimalToShortStringConverter(),new DecimalToIntStringConverter(),new DecimalToLongStringConverter(),new PrimitiveCharStringConverter(),new PrimitiveFloatStringConverter(),new PrimitiveDoubleStringConverter(),new BooleanStringConverter(),new ByteStringConverter(),new ShortStringConverter(),new IntegerStringConverter(),new LongStringConverter(),new CharacterStringConverter(),new FloatStringConverter(),new DoubleStringConverter(),new ClassStringConverter(),new StringStringConverter());
}",0.8504936530324401
101914,"@Override public <T>Converter<T> getConverter(Class<T> aArgType){
  for (  Converter<?> _c : converters) {
    if (_c.canConvertTo(aArgType)) {
      return (Converter<T>)_c;
    }
  }
  throw new RuntimeException(""String_Node_Str"" + aArgType);
}","@Override public <T>com.sjl.dsl4xml.support.StringConverter<T> getConverter(Class<T> aArgType){
  for (  com.sjl.dsl4xml.support.StringConverter<?> _c : converters) {
    if (_c.canConvertTo(aArgType)) {
      return (com.sjl.dsl4xml.support.StringConverter<T>)_c;
    }
  }
  throw new RuntimeException(""String_Node_Str"" + aArgType);
}",0.845360824742268
101915,"protected DocumentReader<Person> newPersonUnmarshaller(){
  DocumentReader<Person> _r=mappingOf(Person.class).to(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""));
  _r.registerConverters(new ThreadUnsafeDateConverter(""String_Node_Str""));
  return _r;
}","protected DocumentReader<Person> newPersonUnmarshaller(){
  DocumentReader<Person> _r=mappingOf(Person.class).to(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""));
  _r.registerConverters(new ThreadUnsafeDateStringConverter(""String_Node_Str""));
  return _r;
}",0.9896907216494846
101916,"public void invoke(String aKey,Object anOn,String aWith){
  try {
    if (twoArgSetter) {
      method.invoke(anOn,aKey,converter.convert(aWith));
    }
 else {
      method.invoke(anOn,converter.convert(aWith));
    }
  }
 catch (  ParsingException anExc) {
    throw anExc;
  }
catch (  IllegalArgumentException anExc) {
    throw new ParsingException(""String_Node_Str"" + method + ""String_Node_Str""+ anOn+ ""String_Node_Str""+ ((aKey != null) ? aKey + ""String_Node_Str"" : ""String_Node_Str"")+ aWith+ ""String_Node_Str""+ converter,anExc);
  }
catch (  Exception anExc) {
    throw new RuntimeException(anExc);
  }
}","public void invoke(String aKey,Object anOn,String aWith){
  try {
    if (twoArgSetter) {
      method.invoke(anOn,aKey,converter.convert(aWith));
    }
 else {
      method.invoke(anOn,converter.convert(aWith));
    }
  }
 catch (  ParsingException anExc) {
    throw anExc;
  }
catch (  IllegalArgumentException anExc) {
    throw new ParsingException(anExc.getMessage() + ""String_Node_Str"" + method+ ""String_Node_Str""+ anOn+ ""String_Node_Str""+ ((aKey != null) ? aKey + ""String_Node_Str"" : ""String_Node_Str"")+ aWith+ ""String_Node_Str""+ converter,anExc);
  }
catch (  Exception anExc) {
    throw new RuntimeException(anExc);
  }
}",0.9823151125401928
101917,"@Override public JsonToken next(){
  try {
    token=reader.peek();
    System.out.println(token);
switch (token) {
case NAME:
      value=null;
    name=names.push(reader.nextName());
  token=reader.peek();
break;
case BEGIN_OBJECT:
value=null;
reader.beginObject();
break;
case END_OBJECT:
value=null;
reader.endObject();
if (!names.isEmpty()) {
names.pop();
if (!names.isEmpty()) name=names.peek();
 else name=null;
}
 else {
name=null;
}
break;
case BEGIN_ARRAY:
reader.beginArray();
value=null;
token=reader.peek();
break;
case END_ARRAY:
value=null;
reader.endArray();
if (!names.isEmpty()) {
names.pop();
if (!names.isEmpty()) name=names.peek();
 else name=null;
}
 else {
name=null;
}
token=reader.peek();
break;
case STRING:
value=reader.nextString();
name=names.pop();
break;
case BOOLEAN:
value=String.valueOf(reader.nextBoolean());
name=names.pop();
break;
case NUMBER:
value=String.valueOf(reader.nextDouble());
name=names.pop();
break;
case NULL:
value=null;
reader.nextNull();
name=names.pop();
break;
}
return token;
}
 catch (IOException anExc) {
throw new ParsingException(anExc);
}
}","@Override public JsonToken next(){
  try {
    token=reader.peek();
switch (token) {
case NAME:
      value=null;
    name=names.push(reader.nextName());
  token=reader.peek();
break;
case BEGIN_OBJECT:
value=null;
reader.beginObject();
break;
case END_OBJECT:
value=null;
reader.endObject();
if (!names.isEmpty()) {
names.pop();
if (!names.isEmpty()) name=names.peek();
 else name=null;
}
 else {
name=null;
}
break;
case BEGIN_ARRAY:
reader.beginArray();
value=null;
token=reader.peek();
break;
case END_ARRAY:
value=null;
reader.endArray();
if (!names.isEmpty()) {
names.pop();
if (!names.isEmpty()) name=names.peek();
 else name=null;
}
 else {
name=null;
}
token=reader.peek();
break;
case STRING:
value=reader.nextString();
name=names.pop();
break;
case BOOLEAN:
value=String.valueOf(reader.nextBoolean());
name=names.pop();
break;
case NUMBER:
value=String.valueOf(reader.nextDouble());
name=names.pop();
break;
case NULL:
value=null;
reader.nextNull();
name=names.pop();
break;
}
return token;
}
 catch (IOException anExc) {
throw new ParsingException(anExc);
}
}",0.985734008283479
101918,public String getId();,public Identifier getId();,0.75
101919,"@Test public void parsesComplexMemberJson(){
  GsonDocumentReader<Member> _reader=mappingOf(Member.class).to(property(""String_Node_Str""),property(""String_Node_Str""),object(""String_Node_Str"",Member.Person.class).with(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),object(""String_Node_Str"",Member.Social.class).with(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),property(""String_Node_Str""));
  _reader.registerConverters(new ThreadSafeDateConverter(""String_Node_Str""));
  Member _result=_reader.read(new InputStreamReader(getClass().getResourceAsStream(""String_Node_Str"")));
  Assert.assertNotNull(_result);
}","@Test public void parsesComplexMemberJson() throws Exception {
  GsonDocumentReader<Member1> _reader=mappingOf(Member1.class).to(property(""String_Node_Str""),property(""String_Node_Str""),object(""String_Node_Str"",Member1.Person.class).with(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),object(""String_Node_Str"",Member1.Social.class).with(property(""String_Node_Str""),property(""String_Node_Str""),property(""String_Node_Str"")),property(""String_Node_Str""));
  _reader.registerConverters(new ThreadSafeDateConverter(""String_Node_Str""));
  Member1 _result=_reader.read(new InputStreamReader(getClass().getResourceAsStream(""String_Node_Str"")));
  Assert.assertNotNull(_result);
  Assert.assertEquals(""String_Node_Str"",_result.getId());
  Assert.assertEquals(new SimpleDateFormat(""String_Node_Str"").parse(""String_Node_Str""),_result.getRegistrationDate());
  Member1.Person _person=_result.getPerson();
  Assert.assertNotNull(_person);
  Assert.assertEquals(""String_Node_Str"",_person.getId());
  Assert.assertEquals(""String_Node_Str"",_person.getFirstname());
  Assert.assertEquals(""String_Node_Str"",_person.getLastname());
  Assert.assertNull(_person.getEmail());
  Assert.assertNull(_person.getTitle());
  Member1.Social _social=_result.getSocial();
  Assert.assertNotNull(_social);
  Assert.assertEquals(""String_Node_Str"",_social.getProviderId());
  Assert.assertEquals(""String_Node_Str"",_social.getProviderUserId());
  Assert.assertEquals(""String_Node_Str"",_social.getImageUrl());
  Assert.assertEquals(50,_result.getPointsAccrued());
}",0.626853028377806
101920,"private void startSyncingPicutres_async(){
  new Thread(new Runnable(){
    @Override public void run(){
      SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(PictureSync.this);
      final boolean useProfilePic=preferences.getBoolean(""String_Node_Str"",false);
      final boolean cropPictures=preferences.getBoolean(""String_Node_Str"",true);
      for (      SyncObject soh : syncObjects) {
        if (soh.url == null || soh.url.equals(""String_Node_Str""))         continue;
        lastPicture=null;
        if (!useProfilePic) {
          String largeURL=getLargeProfilePictureURL(soh.uid);
          if (largeURL != null)           lastPicture=Tools.downloadBitmap(largeURL);
        }
        if (lastPicture == null)         lastPicture=Tools.downloadBitmap(soh.url);
        if (cropPictures)         lastPicture=cropPictureToSquare(lastPicture);
        lastName=soh.name;
        updateProgressCounterHandler.sendEmptyMessage(0);
        if (lastPicture != null)         ContactHandler.setContactPicture(PictureSync.this,soh.contactID,lastPicture);
      }
      EasyTracker.getTracker().trackEvent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",syncObjects.size());
      syncingDoneHandler.sendEmptyMessage(0);
    }
  }
).start();
}","private void startSyncingPicutres_async(){
  new Thread(new Runnable(){
    @Override public void run(){
      SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(PictureSync.this);
      final boolean useProfilePic=preferences.getBoolean(""String_Node_Str"",false);
      final boolean cropPictures=preferences.getBoolean(""String_Node_Str"",true);
      for (      SyncObject soh : syncObjects) {
        if (soh.url == null || soh.url.equals(""String_Node_Str""))         continue;
        lastPicture=null;
        if (!useProfilePic) {
          String largeURL=getLargeProfilePictureURL(soh.uid);
          if (largeURL != null)           lastPicture=Tools.downloadBitmap(largeURL);
        }
        if (lastPicture == null)         lastPicture=Tools.downloadBitmap(soh.url);
        if (lastPicture != null && cropPictures)         lastPicture=cropPictureToSquare(lastPicture);
        lastName=soh.name;
        updateProgressCounterHandler.sendEmptyMessage(0);
        if (lastPicture != null)         ContactHandler.setContactPicture(PictureSync.this,soh.contactID,lastPicture);
      }
      EasyTracker.getTracker().trackEvent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",syncObjects.size());
      syncingDoneHandler.sendEmptyMessage(0);
    }
  }
).start();
}",0.9910818146568438
101921,"@Override public void run(){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(PictureSync.this);
  final boolean useProfilePic=preferences.getBoolean(""String_Node_Str"",false);
  final boolean cropPictures=preferences.getBoolean(""String_Node_Str"",true);
  for (  SyncObject soh : syncObjects) {
    if (soh.url == null || soh.url.equals(""String_Node_Str""))     continue;
    lastPicture=null;
    if (!useProfilePic) {
      String largeURL=getLargeProfilePictureURL(soh.uid);
      if (largeURL != null)       lastPicture=Tools.downloadBitmap(largeURL);
    }
    if (lastPicture == null)     lastPicture=Tools.downloadBitmap(soh.url);
    if (cropPictures)     lastPicture=cropPictureToSquare(lastPicture);
    lastName=soh.name;
    updateProgressCounterHandler.sendEmptyMessage(0);
    if (lastPicture != null)     ContactHandler.setContactPicture(PictureSync.this,soh.contactID,lastPicture);
  }
  EasyTracker.getTracker().trackEvent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",syncObjects.size());
  syncingDoneHandler.sendEmptyMessage(0);
}","@Override public void run(){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(PictureSync.this);
  final boolean useProfilePic=preferences.getBoolean(""String_Node_Str"",false);
  final boolean cropPictures=preferences.getBoolean(""String_Node_Str"",true);
  for (  SyncObject soh : syncObjects) {
    if (soh.url == null || soh.url.equals(""String_Node_Str""))     continue;
    lastPicture=null;
    if (!useProfilePic) {
      String largeURL=getLargeProfilePictureURL(soh.uid);
      if (largeURL != null)       lastPicture=Tools.downloadBitmap(largeURL);
    }
    if (lastPicture == null)     lastPicture=Tools.downloadBitmap(soh.url);
    if (lastPicture != null && cropPictures)     lastPicture=cropPictureToSquare(lastPicture);
    lastName=soh.name;
    updateProgressCounterHandler.sendEmptyMessage(0);
    if (lastPicture != null)     ContactHandler.setContactPicture(PictureSync.this,soh.contactID,lastPicture);
  }
  EasyTracker.getTracker().trackEvent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",syncObjects.size());
  syncingDoneHandler.sendEmptyMessage(0);
}",0.9895120839033288
101922,"public static void matchContactsToFriends(ArrayList<Friend> friends,Context context){
  Cursor people=context.getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null);
  while (people.moveToNext()) {
    String ID=null, name=null;
    int columnIndex=people.getColumnIndex(ContactsContract.Contacts._ID);
    if (columnIndex != -1)     ID=people.getString(columnIndex);
    columnIndex=people.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME);
    if (columnIndex != -1)     name=people.getString(columnIndex);
    if (name == null)     continue;
    for (    Friend f : friends) {
      if (f.isMatchedWithContact())       continue;
      if (f.getName().equals(name)) {
        f.setContactID(ID);
        f.setContactPicture(getPhoto(context,ID));
        break;
      }
    }
  }
  people.close();
}","public static void matchContactsToFriends(ArrayList<Friend> friends,Context context){
  Cursor people=context.getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null);
  while (people.moveToNext()) {
    String ID=null, name=null;
    int columnIndex=people.getColumnIndex(ContactsContract.Contacts._ID);
    if (columnIndex != -1)     ID=people.getString(columnIndex);
    columnIndex=people.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME);
    if (columnIndex != -1)     name=people.getString(columnIndex);
    if (name == null)     continue;
    for (    Friend f : friends) {
      if (f.isMatchedWithContact())       continue;
      if (f.getName().equals(name)) {
        f.setContactID(ID);
        Bitmap contactPhoto=getPhoto(context,ID);
        if (contactPhoto != null)         f.setContactPicture(contactPhoto);
        break;
      }
    }
  }
  people.close();
}",0.9314285714285714
101923,"public void setContactPicture(Bitmap contactPicture){
  Pair<Integer,Integer> size=getSmallSize(contactPicture);
  this.contactPicture=Bitmap.createScaledBitmap(contactPicture,size.first,size.second,true);
}","public void setContactPicture(Bitmap contactPicture){
  if (contactPicture == null)   return;
  Pair<Integer,Integer> size=getSmallSize(contactPicture);
  this.contactPicture=Bitmap.createScaledBitmap(contactPicture,size.first,size.second,true);
}",0.9118942731277532
101924,"public void savePictureHash(){
  profilePictureSyncHash=profilePicture.hashCode();
}","public void savePictureHash(){
  profilePictureSyncHash=profilePicture != null ? profilePicture.hashCode() : 0;
}",0.8527918781725888
101925,"@Override public void onComplete(Bundle values){
  saveFacebookAccess();
}","@Override public void onComplete(Bundle values){
  saveFacebookAccess();
  launchFriendList();
}",0.8705882352941177
101926,"protected void authorizeWithFacebook(){
  facebook.authorize(this,new String[]{""String_Node_Str""},new DialogListener(){
    @Override public void onComplete(    Bundle values){
      saveFacebookAccess();
    }
    @Override public void onFacebookError(    FacebookError error){
      showError(getString(R.string.login_failed_text) + ""String_Node_Str"" + error.toString()+ ""String_Node_Str"");
    }
    @Override public void onError(    DialogError e){
      showError(getString(R.string.login_failed_text) + ""String_Node_Str"" + e.toString()+ ""String_Node_Str"");
    }
    @Override public void onCancel(){
      showError(getString(R.string.login_failed_text) + ""String_Node_Str"" + getString(R.string.login_canceled_text)+ ""String_Node_Str"");
    }
  }
);
}","protected void authorizeWithFacebook(){
  facebook.authorize(this,new String[]{""String_Node_Str""},new DialogListener(){
    @Override public void onComplete(    Bundle values){
      saveFacebookAccess();
      launchFriendList();
    }
    @Override public void onFacebookError(    FacebookError error){
      showError(getString(R.string.login_failed_text) + ""String_Node_Str"" + error.toString()+ ""String_Node_Str"");
    }
    @Override public void onError(    DialogError e){
      showError(getString(R.string.login_failed_text) + ""String_Node_Str"" + e.toString()+ ""String_Node_Str"");
    }
    @Override public void onCancel(){
      showError(getString(R.string.login_failed_text) + ""String_Node_Str"" + getString(R.string.login_canceled_text)+ ""String_Node_Str"");
    }
  }
);
}",0.9831387808041504
101927,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  facebook.authorizeCallback(requestCode,resultCode,data);
  if (facebook.isSessionValid()) {
    saveFacebookAccess();
    launchFriendList();
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  facebook.authorizeCallback(requestCode,resultCode,data);
}",0.8172484599589322
101928,"protected void downloadProfilePictures_async(){
  new Thread(new Runnable(){
    @Override public void run(){
      for (int i=0; i < friends.size(); i++) {
        int bestIndex=getBestFriend(i);
        final Friend f=friends.get(bestIndex);
        if (f.hasDownloadedProfilePicture())         continue;
        File file=new File(getCacheDir(),f.getUID());
        Bitmap picture=Tools.getBitmapFromFile(file);
        if (picture == null) {
          picture=Tools.downloadBitmap(f.getProfilePictureURL());
        }
        if (picture != null) {
          f.setProfilePic(picture);
          Tools.storePictureToFile(file,picture);
        }
        updateProfilePictureAtIndex(f,bestIndex);
        if (bestIndex != i)         i--;
      }
    }
    private void updateProfilePictureAtIndex(    final Friend f,    final int index){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          View v=friendListView.getChildAt(index - friendListView.getFirstVisiblePosition());
          if (v != null) {
            ImageView iv=(ImageView)v.findViewById(R.id.profile_picture);
            if (f.hasDownloadedProfilePicture()) {
              iv.setImageBitmap(f.getProfilePicture());
            }
          }
        }
      }
);
    }
    private int getBestFriend(    int index){
      int viewingIndex=friendListView.getFirstVisiblePosition();
      int lastViewingIndex=friendListView.getLastVisiblePosition();
      while (viewingIndex <= lastViewingIndex && viewingIndex <= friends.size()) {
        if (!friends.get(viewingIndex).hasDownloadedProfilePicture()) {
          index=viewingIndex;
          break;
        }
        viewingIndex++;
      }
      return index;
    }
  }
).start();
}","protected void downloadProfilePictures_async(){
  new Thread(new Runnable(){
    @Override public void run(){
      for (int i=0; i < friends.size(); i++) {
        int bestIndex=getBestFriend(i);
        final Friend f=friends.get(bestIndex);
        if (f.hasDownloadedProfilePicture())         continue;
        File file=new File(getCacheDir(),f.getSaveProfiePictureFileName());
        Bitmap picture=Tools.getBitmapFromFile(file);
        if (picture == null) {
          picture=Tools.downloadBitmap(f.getProfilePictureURL());
        }
        if (picture != null) {
          f.setProfilePic(picture);
          Tools.storePictureToFile(file,picture);
        }
        updateProfilePictureAtIndex(f,bestIndex);
        if (bestIndex != i)         i--;
      }
    }
    private void updateProfilePictureAtIndex(    final Friend f,    final int index){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          View v=friendListView.getChildAt(index - friendListView.getFirstVisiblePosition());
          if (v != null) {
            ImageView iv=(ImageView)v.findViewById(R.id.profile_picture);
            if (f.hasDownloadedProfilePicture()) {
              iv.setImageBitmap(f.getProfilePicture());
            }
          }
        }
      }
);
    }
    private int getBestFriend(    int index){
      int viewingIndex=friendListView.getFirstVisiblePosition();
      int lastViewingIndex=friendListView.getLastVisiblePosition();
      while (viewingIndex <= lastViewingIndex && viewingIndex <= friends.size()) {
        if (!friends.get(viewingIndex).hasDownloadedProfilePicture()) {
          index=viewingIndex;
          break;
        }
        viewingIndex++;
      }
      return index;
    }
  }
).start();
}",0.9919724770642202
101929,"@Override public void handleMessage(Message msg){
  AlertDialog.Builder builder=new AlertDialog.Builder(PictureSync.this);
  builder.setMessage(getString(R.string.syncing_done_text)).setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      PictureSync.this.finish();
    }
  }
);
  builder.create().show();
}","@Override public void handleMessage(Message msg){
  AlertDialog.Builder builder=new AlertDialog.Builder(PictureSync.this);
  builder.setMessage(getString(R.string.syncing_done_text)).setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      PictureSync.this.finish();
    }
  }
);
  try {
    builder.create().show();
  }
 catch (  BadTokenException bte) {
    bte.printStackTrace();
  }
}",0.912472647702407
101930,"private void loadAllFriendLinks(){
  for (  Friend f : friends) {
    File file=new File(getCacheDir(),f.getSaveContactIDFileName());
    String ID=Tools.getStringFromFile(file);
    if (ID == null)     continue;
    f.setContactID(ID);
    ContactHandler.setContactPicture(f,this);
  }
  friendListAdapter.notifyDataSetChanged();
}","public void loadAllFriendLinks(){
  for (  Friend f : friends) {
    File file=new File(getCacheDir(),f.getSaveContactIDFileName());
    String ID=Tools.getStringFromFile(file);
    if (ID == null)     continue;
    f.setContactID(ID);
    ContactHandler.setContactPicture(f,this);
  }
}",0.0452342487883683
101931,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_unlink_all:
    for (    Friend f : friends)     f.setContactID(null);
  friendListAdapter.notifyDataSetChanged();
return true;
case R.id.menu_smartmatch:
dialog.show();
matchContactToFriends_async(false);
return true;
case R.id.menu_syncpictures:
startSyncingActivity();
return true;
case R.id.menu_savelinks:
saveAllFriendLinks();
return true;
case R.id.menu_loadlinks:
loadAllFriendLinks();
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_unlink_all:
    for (    Friend f : friends)     f.setContactID(null);
  friendListAdapter.notifyDataSetChanged();
return true;
case R.id.menu_smartmatch:
dialog.show();
matchContactToFriends_async(false);
return true;
case R.id.menu_syncpictures:
startSyncingActivity();
return true;
case R.id.menu_savelinks:
saveAllFriendLinks();
return true;
case R.id.menu_loadlinks:
loadAllFriendLinks();
friendListAdapter.notifyDataSetChanged();
return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.9643463497453312
101932,"public void setProfilePic(Bitmap b){
  this.profilePicture=Bitmap.createScaledBitmap(b,Constants.size_Profile_Picture_Width,Constants.size_Profile_Picture_Heigth,true);
}","public void setProfilePic(Bitmap b){
  this.profilePicture=Bitmap.createScaledBitmap(b,Constants.size_Profile_Picture,Constants.size_Profile_Picture,true);
}",0.9602446483180428
101933,"public void setContactPicture(Bitmap contactPicture){
  this.contactPicture=contactPicture;
}","public void setContactPicture(Bitmap contactPicture){
  Pair<Integer,Integer> size=getSmallSize(contactPicture);
  this.contactPicture=Bitmap.createScaledBitmap(contactPicture,size.first,size.second,true);
}",0.5266666666666666
101934,"public FriendListAdapter(Context context,ArrayList<Friend> friends){
  super(context,R.layout.list_item_friend,friends);
  this.context=context;
  this.friends=friends;
  Resources r=this.getContext().getResources();
  Bitmap b=BitmapFactory.decodeResource(r,R.drawable.mr_unknown);
  mr_unknown=Bitmap.createScaledBitmap(b,Constants.size_Profile_Picture_Width,Constants.size_Profile_Picture_Heigth,true);
  createKeyIndex();
}","public FriendListAdapter(Context context,ArrayList<Friend> friends){
  super(context,R.layout.list_item_friend,friends);
  this.context=context;
  this.friends=friends;
  Resources r=this.getContext().getResources();
  Bitmap b=BitmapFactory.decodeResource(r,R.drawable.mr_unknown);
  mr_unknown=Bitmap.createScaledBitmap(b,Constants.size_Profile_Picture,Constants.size_Profile_Picture,true);
  createKeyIndex();
}",0.9845422116527944
101935,"public void setProfilePic(Bitmap b){
  this.profilePicture=Bitmap.createScaledBitmap(b,80,80,true);
}","public void setProfilePic(Bitmap b){
  this.profilePicture=Bitmap.createScaledBitmap(b,Constants.size_Profile_Picture_Width,Constants.size_Profile_Picture_Heigth,true);
}",0.7158671586715867
101936,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.friend_list);
  final Intent recieve_intent=getIntent();
  String access_token=recieve_intent.getStringExtra(Constants.bundle_Access_Token);
  long expires=recieve_intent.getLongExtra(Constants.bundle_Access_Expires,0);
  if (access_token != null)   facebook.setAccessToken(access_token);
  if (expires != 0)   facebook.setAccessExpires(expires);
  dialog=ProgressDialog.show(FriendList.this,""String_Node_Str"",getString(R.string.downloading_friends_text),true);
  dialog.setCancelable(false);
  dialog.show();
  downloadFacebookFriends_async();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.friend_list);
  final Intent recieve_intent=getIntent();
  String access_token=recieve_intent.getStringExtra(Constants.bundle_Access_Token);
  long expires=recieve_intent.getLongExtra(Constants.bundle_Access_Expires,0);
  if (access_token != null)   facebook.setAccessToken(access_token);
  if (expires != 0)   facebook.setAccessExpires(expires);
  dialog=ProgressDialog.show(FriendList.this,""String_Node_Str"",getString(R.string.downloading_friends_text),true);
  dialog.setCancelable(false);
  dialog.show();
  friends=new ArrayList<Friend>();
  friendListAdapter=new FriendListAdapter(FriendList.this,friends);
  friendListView=(ListView)findViewById(R.id.friend_list);
  friendListView.setAdapter(friendListAdapter);
  downloadFacebookFriends_async();
}",0.8728813559322034
101937,"@Override public void handleMessage(Message msg){
  friendListAdapter=new FriendListAdapter(FriendList.this,friends);
  friendListView=(ListView)findViewById(R.id.friend_list);
  friendListView.setAdapter(friendListAdapter);
  downloadProfilePictures_async();
  dialog.cancel();
}","@Override public void handleMessage(Message msg){
  friendListAdapter.notifyDataSetChanged();
  downloadProfilePictures_async();
  dialog.cancel();
}",0.6153846153846154
101938,"protected void downloadFacebookFriends_async(){
  new Thread(new Runnable(){
    @Override public void run(){
      Bundle params=new Bundle();
      params.putString(""String_Node_Str"",""String_Node_Str"");
      params.putString(""String_Node_Str"",""String_Node_Str"");
      friends=new ArrayList<Friend>();
      try {
        String response=facebook.request(params);
        System.out.println(response);
        JSONArray array=new JSONArray(response);
        for (int i=0; i < array.length(); i++) {
          System.out.println(array.getJSONObject(i).get(""String_Node_Str"") + ""String_Node_Str"" + array.getJSONObject(i).getString(""String_Node_Str""));
          friends.add(new Friend(array.getJSONObject(i)));
        }
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
catch (      JSONException e) {
        e.printStackTrace();
      }
      downloadCompleteHandler.sendEmptyMessage(0);
    }
  }
).start();
}","protected void downloadFacebookFriends_async(){
  new Thread(new Runnable(){
    @Override public void run(){
      Bundle params=new Bundle();
      params.putString(""String_Node_Str"",""String_Node_Str"");
      params.putString(""String_Node_Str"",""String_Node_Str"");
      try {
        String response=facebook.request(params);
        JSONArray array=new JSONArray(response);
        for (int i=0; i < array.length(); i++) {
          friends.add(new Friend(array.getJSONObject(i)));
        }
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
catch (      JSONException e) {
        e.printStackTrace();
      }
      downloadCompleteHandler.sendEmptyMessage(0);
    }
  }
).start();
}",0.8495575221238938
101939,"@Override public int getSectionForPosition(int position){
  return 1;
}","@Override public int getSectionForPosition(int arg0){
  return 0;
}",0.8985507246376812
101940,"public FriendListAdapter(Context context,ArrayList<Friend> friends){
  super(context,R.layout.list_item_friend,friends);
  this.context=context;
  this.friends=friends;
  letterIndex=new HashMap<Character,Integer>();
  for (int i=friends.size() - 1; i > 0; i--) {
    letterIndex.put(friends.get(i).getName().charAt(0),i);
  }
  Set<Character> keys=letterIndex.keySet();
  ArrayList<Character> keyList=new ArrayList<Character>();
  for (  Character c : keys)   keyList.add(c);
  Collections.sort(keyList);
  sections=new Character[keyList.size()];
  keyList.toArray(sections);
}","public FriendListAdapter(Context context,ArrayList<Friend> friends){
  super(context,R.layout.list_item_friend,friends);
  this.context=context;
  this.friends=friends;
}",0.4545454545454545
101941,"/** 
 * Extract an   {@link URL} from the given {@link IConnectionProfile} usingthe given property key and test its connectivity. <p> If the URL requires authentication then the authentication security type, username and password will all be extracted from the {@link IConnectionProfile}. Thus, the values for the authentication should be stored in the connection profile using the keys from  {@link ICredentialsCommon}.
 * @param connectionProfile
 * @param propertyKey
 * @return
 */
public static Exception testURLConnection(IConnectionProfile connectionProfile,final String propertyKey){
  Properties connProperties=connectionProfile.getBaseProperties();
  String xmlFile=connProperties == null ? null : (String)connProperties.get(propertyKey);
  String responseType=IWSProfileConstants.XML;
  if (connProperties != null) {
    if (connProperties.get(IWSProfileConstants.RESPONSE_TYPE_PROPERTY_KEY) != null) {
      responseType=(String)connProperties.get(IWSProfileConstants.RESPONSE_TYPE_PROPERTY_KEY);
    }
  }
  try {
    URL url=URLHelper.buildURL(xmlFile);
    boolean resolved=false;
    Map<String,String> connPropMap=new HashMap<String,String>();
    if (connProperties.get(IWSProfileConstants.ACCEPT_PROPERTY_KEY) != null) {
      connPropMap.put(IWSProfileConstants.ACCEPT_PROPERTY_KEY,(String)connProperties.get(IWSProfileConstants.ACCEPT_PROPERTY_KEY));
    }
 else {
      if (responseType.equalsIgnoreCase(IWSProfileConstants.JSON)) {
        connPropMap.put(IWSProfileConstants.ACCEPT_PROPERTY_KEY,IWSProfileConstants.CONTENT_TYPE_JSON_VALUE);
      }
 else {
        connPropMap.put(IWSProfileConstants.ACCEPT_PROPERTY_KEY,IWSProfileConstants.ACCEPT_DEFAULT_VALUE);
      }
    }
    if (connProperties.get(IWSProfileConstants.CONTENT_TYPE_PROPERTY_KEY) != null) {
      connPropMap.put(IWSProfileConstants.CONTENT_TYPE_PROPERTY_KEY,(String)connProperties.get(IWSProfileConstants.CONTENT_TYPE_PROPERTY_KEY));
    }
 else {
      connPropMap.put(IWSProfileConstants.CONTENT_TYPE_PROPERTY_KEY,IWSProfileConstants.CONTENT_TYPE_DEFAULT_VALUE);
    }
    for (    Object key : connPropMap.keySet()) {
      String keyStr=(String)key;
      if (IWSProfileConstants.AUTHORIZATION_KEY.equalsIgnoreCase(keyStr) || ICredentialsCommon.PASSWORD_PROP_ID.equalsIgnoreCase(keyStr) || ICredentialsCommon.SECURITY_TYPE_ID.equalsIgnoreCase(keyStr)|| ICredentialsCommon.USERNAME_PROP_ID.equalsIgnoreCase(keyStr)|| IWSProfileConstants.END_POINT_URI_PROP_ID.equalsIgnoreCase(keyStr)|| IWSProfileConstants.CONTENT_TYPE_PROPERTY_KEY.equalsIgnoreCase(keyStr)|| IWSProfileConstants.ACCEPT_PROPERTY_KEY.equalsIgnoreCase(keyStr)) {
      }
 else {
        connPropMap.put(keyStr,connProperties.getProperty(keyStr));
      }
    }
    String userName=null;
    String password=null;
    userName=connProperties.getProperty(ICredentialsCommon.USERNAME_PROP_ID);
    password=connProperties.getProperty(ICredentialsCommon.PASSWORD_PROP_ID);
    if (connProperties.getProperty(ICredentialsCommon.SECURITY_TYPE_ID).equals(ICredentialsCommon.SecurityType.Digest.name())) {
      resolved=URLHelper.resolveUrlWithDigest(url,userName,password,connPropMap,true);
    }
 else {
      resolved=URLHelper.resolveUrl(url,userName,password,connPropMap,true);
    }
    if (!resolved) {
      throw new Exception(DatatoolsUiConstants.UTIL.getString(""String_Node_Str""));
    }
  }
 catch (  Exception ex) {
    return ex;
  }
  return null;
}","/** 
 * Extract an   {@link URL} from the given {@link IConnectionProfile} usingthe given property key and test its connectivity. <p> If the URL requires authentication then the authentication security type, username and password will all be extracted from the {@link IConnectionProfile}. Thus, the values for the authentication should be stored in the connection profile using the keys from  {@link ICredentialsCommon}.
 * @param connectionProfile
 * @param propertyKey
 * @return
 */
public static Exception testURLConnection(IConnectionProfile connectionProfile,final String propertyKey){
  Properties connProperties=connectionProfile.getBaseProperties();
  String xmlFile=connProperties == null ? null : (String)connProperties.get(propertyKey);
  String responseType=IWSProfileConstants.XML;
  if (connProperties != null) {
    if (connProperties.get(IWSProfileConstants.RESPONSE_TYPE_PROPERTY_KEY) != null) {
      responseType=(String)connProperties.get(IWSProfileConstants.RESPONSE_TYPE_PROPERTY_KEY);
    }
  }
  try {
    URL url=URLHelper.buildURL(xmlFile);
    boolean resolved=false;
    Map<String,String> connPropMap=new HashMap<String,String>();
    if (connProperties.get(IWSProfileConstants.ACCEPT_PROPERTY_KEY) != null) {
      connPropMap.put(IWSProfileConstants.ACCEPT_PROPERTY_KEY,(String)connProperties.get(IWSProfileConstants.ACCEPT_PROPERTY_KEY));
    }
 else {
      if (responseType.equalsIgnoreCase(IWSProfileConstants.JSON)) {
        connPropMap.put(IWSProfileConstants.ACCEPT_PROPERTY_KEY,IWSProfileConstants.CONTENT_TYPE_JSON_VALUE);
      }
 else {
        connPropMap.put(IWSProfileConstants.ACCEPT_PROPERTY_KEY,IWSProfileConstants.ACCEPT_DEFAULT_VALUE);
      }
    }
    if (connProperties.get(IWSProfileConstants.CONTENT_TYPE_PROPERTY_KEY) != null) {
      connPropMap.put(IWSProfileConstants.CONTENT_TYPE_PROPERTY_KEY,(String)connProperties.get(IWSProfileConstants.CONTENT_TYPE_PROPERTY_KEY));
    }
 else {
      connPropMap.put(IWSProfileConstants.CONTENT_TYPE_PROPERTY_KEY,IWSProfileConstants.CONTENT_TYPE_DEFAULT_VALUE);
    }
    for (    Object key : connPropMap.keySet()) {
      String keyStr=(String)key;
      if (IWSProfileConstants.AUTHORIZATION_KEY.equalsIgnoreCase(keyStr) || ICredentialsCommon.PASSWORD_PROP_ID.equalsIgnoreCase(keyStr) || ICredentialsCommon.SECURITY_TYPE_ID.equalsIgnoreCase(keyStr)|| ICredentialsCommon.USERNAME_PROP_ID.equalsIgnoreCase(keyStr)|| IWSProfileConstants.END_POINT_URI_PROP_ID.equalsIgnoreCase(keyStr)|| IWSProfileConstants.CONTENT_TYPE_PROPERTY_KEY.equalsIgnoreCase(keyStr)|| IWSProfileConstants.ACCEPT_PROPERTY_KEY.equalsIgnoreCase(keyStr)) {
      }
 else {
        connPropMap.put(keyStr,connProperties.getProperty(keyStr));
      }
    }
    String userName=null;
    String password=null;
    userName=connProperties.getProperty(ICredentialsCommon.USERNAME_PROP_ID);
    password=connProperties.getProperty(ICredentialsCommon.PASSWORD_PROP_ID);
    if (ICredentialsCommon.SecurityType.Digest.name().equals(connProperties.getProperty(ICredentialsCommon.SECURITY_TYPE_ID))) {
      resolved=URLHelper.resolveUrlWithDigest(url,userName,password,connPropMap,true);
    }
 else {
      resolved=URLHelper.resolveUrl(url,userName,password,connPropMap,true);
    }
    if (!resolved) {
      throw new Exception(DatatoolsUiConstants.UTIL.getString(""String_Node_Str""));
    }
  }
 catch (  Exception ex) {
    return ex;
  }
  return null;
}",0.9812920198772288
101942,"/** 
 * Set the description on the EMF object.  Looks up annotation - if not found then the annotation is created.
 * @param eObject the target object
 * @param description the description
 * @param modelResource the model resource
 */
public void setDescription(EObject eObject,String description,ModelResource modelResource){
  System.out.println(""String_Node_Str"" + description + ""String_Node_Str""+ eObject);
  if (description != null && description.trim().length() > 0) {
    try {
      AnnotationContainer annotations=null;
      final Iterator contents=modelResource.getEmfResource().getContents().iterator();
      while (contents.hasNext()) {
        final Object next=contents.next();
        if (next instanceof AnnotationContainer) {
          annotations=(AnnotationContainer)next;
          break;
        }
      }
      if (annotations == null) {
        annotations=CoreFactory.eINSTANCE.createAnnotationContainer();
        modelResource.getEmfResource().getContents().add(annotations);
      }
      Annotation annotation=annotations.findAnnotation(eObject);
      if (annotation == null) {
        annotation=CoreFactory.eINSTANCE.createAnnotation();
        annotations.getAnnotations().add(annotation);
        annotation.setAnnotatedObject(eObject);
      }
      annotation.setDescription(description);
    }
 catch (    ModelWorkspaceException e) {
      RelationalPlugin.Util.log(IStatus.ERROR,NLS.bind(Messages.emfModelGenerator_error_adding_desciption_to_0,eObject));
    }
  }
}","/** 
 * Set the description on the EMF object.  Looks up annotation - if not found then the annotation is created.
 * @param eObject the target object
 * @param description the description
 * @param modelResource the model resource
 */
public void setDescription(EObject eObject,String description,ModelResource modelResource){
  if (description != null && description.trim().length() > 0) {
    try {
      AnnotationContainer annotations=null;
      final Iterator contents=modelResource.getEmfResource().getContents().iterator();
      while (contents.hasNext()) {
        final Object next=contents.next();
        if (next instanceof AnnotationContainer) {
          annotations=(AnnotationContainer)next;
          break;
        }
      }
      if (annotations == null) {
        annotations=CoreFactory.eINSTANCE.createAnnotationContainer();
        modelResource.getEmfResource().getContents().add(annotations);
      }
      Annotation annotation=annotations.findAnnotation(eObject);
      if (annotation == null) {
        annotation=CoreFactory.eINSTANCE.createAnnotation();
        annotations.getAnnotations().add(annotation);
        annotation.setAnnotatedObject(eObject);
      }
      annotation.setDescription(description);
    }
 catch (    ModelWorkspaceException e) {
      RelationalPlugin.Util.log(IStatus.ERROR,NLS.bind(Messages.emfModelGenerator_error_adding_desciption_to_0,eObject));
    }
  }
}",0.9713310580204778
101943,"@Override protected RelationalProcedure createProcedure(AstNode procedureNode,RelationalModel model) throws Exception {
  RelationalProcedure procedure=super.createProcedure(procedureNode,model);
  List<AstNode> procOptionNodes=new ArrayList<AstNode>();
  for (  AstNode child : procedureNode) {
    if (is(child,TeiidDdlLexicon.CreateProcedure.PARAMETER)) {
      createProcedureParameter(child,procedure);
    }
 else     if (is(child,TeiidDdlLexicon.CreateProcedure.RESULT_COLUMNS)) {
      RelationalProcedureResultSet result=getFactory().createProcedureResultSet();
      procedure.setResultSet(result);
      initialize(result,procedureNode);
      for (      AstNode resultCol : child) {
        if (resultCol.hasMixin(TeiidDdlLexicon.CreateProcedure.RESULT_COLUMN)) {
          createColumn(resultCol,result);
        }
      }
    }
 else     if (is(child,TeiidDdlLexicon.CreateProcedure.RESULT_DATA_TYPE)) {
      RelationalParameter param=createProcedureParameter(child,procedure);
      param.setName(""String_Node_Str"");
      param.setDirection(DirectionKind.RETURN_LITERAL.toString());
    }
 else     if (is(child,StandardDdlLexicon.TYPE_STATEMENT_OPTION)) {
      procOptionNodes.add(child);
    }
  }
  processOptions(procOptionNodes,procedure);
  return procedure;
}","@Override protected RelationalProcedure createProcedure(AstNode procedureNode,RelationalModel model) throws Exception {
  RelationalProcedure procedure=super.createProcedure(procedureNode,model);
  List<AstNode> procOptionNodes=new ArrayList<AstNode>();
  for (  AstNode child : procedureNode) {
    if (is(child,TeiidDdlLexicon.CreateProcedure.PARAMETER)) {
      createProcedureParameter(child,procedure);
    }
 else     if (is(child,TeiidDdlLexicon.CreateProcedure.RESULT_COLUMNS)) {
      RelationalProcedureResultSet result=getFactory().createProcedureResultSet();
      procedure.setResultSet(result);
      initialize(result,procedureNode);
      List<AstNode> resultOptionNodes=new ArrayList<AstNode>();
      for (      AstNode resultCol : child) {
        if (resultCol.hasMixin(TeiidDdlLexicon.CreateProcedure.RESULT_COLUMN)) {
          createColumn(resultCol,result);
        }
 else         if (is(child,StandardDdlLexicon.TYPE_STATEMENT_OPTION)) {
          resultOptionNodes.add(resultCol);
        }
      }
      processOptions(resultOptionNodes,result);
    }
 else     if (is(child,TeiidDdlLexicon.CreateProcedure.RESULT_DATA_TYPE)) {
      RelationalParameter param=createProcedureParameter(child,procedure);
      param.setName(""String_Node_Str"");
      param.setDirection(DirectionKind.RETURN_LITERAL.toString());
    }
 else     if (is(child,StandardDdlLexicon.TYPE_STATEMENT_OPTION)) {
      procOptionNodes.add(child);
    }
  }
  processOptions(procOptionNodes,procedure);
  return procedure;
}",0.9151817533856024
101944,"/** 
 * Process the options that are specific to the provided entity type
 * @param optionNodes the list of AstNode
 * @param relationalReference the RelationalReference
 */
private void processTeiidStandardOptions(List<AstNode> optionNodes,RelationalReference relationalReference){
  processTeiidCommonOptions(optionNodes,relationalReference);
  if (relationalReference instanceof RelationalTable) {
    processTeiidTableOptions(optionNodes,(RelationalTable)relationalReference);
  }
 else   if (relationalReference instanceof RelationalColumn) {
    processTeiidColumnOptions(optionNodes,(RelationalColumn)relationalReference);
  }
 else   if (relationalReference instanceof RelationalProcedure) {
    processTeiidProcedureOptions(optionNodes,(RelationalProcedure)relationalReference);
  }
}","/** 
 * Process the options that are specific to the provided entity type
 * @param optionNodes the list of AstNode
 * @param relationalReference the RelationalReference
 */
private void processTeiidStandardOptions(List<AstNode> optionNodes,RelationalReference relationalReference){
  processTeiidCommonOptions(optionNodes,relationalReference);
  if (relationalReference instanceof RelationalTable) {
    processTeiidTableOptions(optionNodes,(RelationalTable)relationalReference);
  }
 else   if (relationalReference instanceof RelationalColumn) {
    processTeiidColumnOptions(optionNodes,(RelationalColumn)relationalReference);
  }
 else   if (relationalReference instanceof RelationalProcedure) {
    processTeiidProcedureOptions(optionNodes,(RelationalProcedure)relationalReference);
  }
 else   if (relationalReference instanceof RelationalParameter) {
    processTeiidParameterOptions(optionNodes,(RelationalParameter)relationalReference);
  }
}",0.9094036697247706
101945,"/** 
 * @param procedureNode
 * @param model
 * @return procedure
 * @throws Exception
 */
protected RelationalProcedure createVirtualProcedure(AstNode procedureNode,RelationalModel model) throws Exception {
  RelationalViewProcedure procedure=getFactory().createViewProcedure();
  Info info=createInfo(procedureNode,model);
  if (info.getSchema() == null)   model.addChild(procedure);
 else {
    info.getSchema().getProcedures().add(procedure);
    procedure.setParent(info.getSchema());
  }
  initialize(procedure,procedureNode,info.getName());
  if (procedureNode.getProperty(StandardDdlLexicon.DATATYPE_NAME) != null) {
    RelationalProcedureResultSet result=getFactory().createProcedureResultSet();
    procedure.setResultSet(result);
    initialize(result,procedureNode);
  }
  List<AstNode> procOptionNodes=new ArrayList<AstNode>();
  for (  AstNode child : procedureNode) {
    if (is(child,TeiidDdlLexicon.CreateProcedure.PARAMETER)) {
      createProcedureParameter(child,procedure);
    }
 else     if (is(child,TeiidDdlLexicon.CreateProcedure.RESULT_COLUMNS)) {
      RelationalProcedureResultSet result=getFactory().createProcedureResultSet();
      procedure.setResultSet(result);
      initialize(result,procedureNode);
      for (      AstNode resultCol : child) {
        if (resultCol.hasMixin(TeiidDdlLexicon.CreateProcedure.RESULT_COLUMN)) {
          createColumn(resultCol,result);
        }
      }
    }
 else     if (is(child,TeiidDdlLexicon.CreateProcedure.RESULT_DATA_TYPE)) {
      RelationalParameter param=createProcedureParameter(child,procedure);
      param.setDirection(DirectionKind.RETURN_LITERAL.toString());
      param.setName(TeiidDDLConstants.RETURNS);
    }
 else     if (is(child,StandardDdlLexicon.TYPE_STATEMENT_OPTION)) {
      procOptionNodes.add(child);
    }
  }
  try {
    NewModelObjectHelperManager.helpCreate(procedure,new Properties());
  }
 catch (  ModelerCoreException err) {
    DdlImporterPlugin.UTIL.log(IStatus.ERROR,err,err.getMessage());
  }
  String queryExpression=(String)procedureNode.getProperty(TeiidDdlLexicon.CreateProcedure.STATEMENT);
  if (!StringUtilities.isEmpty(queryExpression)) {
    procedure.setTransformationSQL(queryExpression);
  }
  processOptions(procOptionNodes,procedure);
  return procedure;
}","/** 
 * @param procedureNode
 * @param model
 * @return procedure
 * @throws Exception
 */
protected RelationalProcedure createVirtualProcedure(AstNode procedureNode,RelationalModel model) throws Exception {
  RelationalViewProcedure procedure=getFactory().createViewProcedure();
  Info info=createInfo(procedureNode,model);
  if (info.getSchema() == null)   model.addChild(procedure);
 else {
    info.getSchema().getProcedures().add(procedure);
    procedure.setParent(info.getSchema());
  }
  initialize(procedure,procedureNode,info.getName());
  if (procedureNode.getProperty(StandardDdlLexicon.DATATYPE_NAME) != null) {
    RelationalProcedureResultSet result=getFactory().createProcedureResultSet();
    procedure.setResultSet(result);
    initialize(result,procedureNode);
  }
  List<AstNode> procOptionNodes=new ArrayList<AstNode>();
  for (  AstNode child : procedureNode) {
    if (is(child,TeiidDdlLexicon.CreateProcedure.PARAMETER)) {
      createProcedureParameter(child,procedure);
    }
 else     if (is(child,TeiidDdlLexicon.CreateProcedure.RESULT_COLUMNS)) {
      RelationalProcedureResultSet result=getFactory().createProcedureResultSet();
      procedure.setResultSet(result);
      initialize(result,procedureNode);
      List<AstNode> resultOptionNodes=new ArrayList<AstNode>();
      for (      AstNode resultCol : child) {
        if (resultCol.hasMixin(TeiidDdlLexicon.CreateProcedure.RESULT_COLUMN)) {
          createColumn(resultCol,result);
        }
 else         if (is(resultCol,StandardDdlLexicon.TYPE_STATEMENT_OPTION)) {
          resultOptionNodes.add(resultCol);
        }
      }
      processOptions(resultOptionNodes,result);
    }
 else     if (is(child,TeiidDdlLexicon.CreateProcedure.RESULT_DATA_TYPE)) {
      RelationalParameter param=createProcedureParameter(child,procedure);
      param.setDirection(DirectionKind.RETURN_LITERAL.toString());
      param.setName(TeiidDDLConstants.RETURNS);
    }
 else     if (is(child,StandardDdlLexicon.TYPE_STATEMENT_OPTION)) {
      procOptionNodes.add(child);
    }
  }
  try {
    NewModelObjectHelperManager.helpCreate(procedure,new Properties());
  }
 catch (  ModelerCoreException err) {
    DdlImporterPlugin.UTIL.log(IStatus.ERROR,err,err.getMessage());
  }
  String queryExpression=(String)procedureNode.getProperty(TeiidDdlLexicon.CreateProcedure.STATEMENT);
  if (!StringUtilities.isEmpty(queryExpression)) {
    procedure.setTransformationSQL(queryExpression);
  }
  processOptions(procOptionNodes,procedure);
  return procedure;
}",0.9497090606816292
101946,"@Override protected RelationalParameter createProcedureParameter(AstNode node,RelationalProcedure procedure) throws Exception {
  RelationalParameter prm=super.createProcedureParameter(node,procedure);
  String direction=node.getProperty(TeiidDdlLexicon.CreateProcedure.PARAMETER_TYPE).toString();
  String resultFlag=node.getProperty(TeiidDdlLexicon.CreateProcedure.PARAMETER_RESULT_FLAG).toString();
  if (resultFlag != null && resultFlag.equalsIgnoreCase(Boolean.TRUE.toString())) {
    direction=DirectionKind.RETURN_LITERAL.toString();
  }
  prm.setDirection(direction);
  List<AstNode> optionNodes=new ArrayList<AstNode>();
  List<AstNode> children=node.getChildren();
  for (  AstNode child : children) {
    if (is(child,StandardDdlLexicon.TYPE_STATEMENT_OPTION)) {
      optionNodes.add(child);
    }
  }
  processOptions(optionNodes,prm);
  return prm;
}","@Override protected RelationalParameter createProcedureParameter(AstNode node,RelationalProcedure procedure) throws Exception {
  RelationalParameter prm=super.createProcedureParameter(node,procedure);
  prm.setNativeType(RelationalColumn.DEFAULT_NATIVE_TYPE);
  String direction=node.getProperty(TeiidDdlLexicon.CreateProcedure.PARAMETER_TYPE).toString();
  String resultFlag=node.getProperty(TeiidDdlLexicon.CreateProcedure.PARAMETER_RESULT_FLAG).toString();
  if (resultFlag != null && resultFlag.equalsIgnoreCase(Boolean.TRUE.toString())) {
    direction=DirectionKind.RETURN_LITERAL.toString();
  }
  prm.setDirection(direction);
  List<AstNode> optionNodes=new ArrayList<AstNode>();
  List<AstNode> children=node.getChildren();
  for (  AstNode child : children) {
    if (is(child,StandardDdlLexicon.TYPE_STATEMENT_OPTION)) {
      optionNodes.add(child);
    }
  }
  processOptions(optionNodes,prm);
  return prm;
}",0.9669837716843872
101947,"private Map<String,String> getParameterOptions(ProcedureParameter parameter){
  Map<String,String> options=new HashMap<String,String>();
  if (this.includeNIS && parameter.getNameInSource() != null) {
    options.put(NAMEINSOURCE,parameter.getNameInSource());
  }
  return options;
}","private Map<String,String> getParameterOptions(ProcedureParameter parameter){
  Map<String,String> options=new HashMap<String,String>();
  if (this.includeNIS && parameter.getNameInSource() != null) {
    options.put(NAMEINSOURCE,parameter.getNameInSource());
  }
  if (this.includeNativeType) {
    options.put(NATIVE_TYPE,parameter.getNativeType());
  }
  return options;
}",0.817629179331307
101948,"private String procedure(Procedure procedure){
  if (!includeProcedures)   return null;
  if (ignoreTeiidProcedures && isTeiidProcedure(procedure.getName()))   return null;
  StringBuilder sb=new StringBuilder();
  boolean isFunction=procedure.isFunction();
  if (isFunction) {
    if (isVirtual)     sb.append(CREATE_VIRTUAL_FUNCTION).append(SPACE);
 else     sb.append(CREATE_FOREIGN_FUNCTION).append(SPACE);
  }
 else {
    if (isVirtual)     sb.append(CREATE_VIRTUAL_PROCEDURE).append(SPACE);
 else     sb.append(CREATE_FOREIGN_PROCEDURE).append(SPACE);
  }
  sb.append(getName(procedure));
  sb.append(SPACE + OPEN_BRACKET);
  @SuppressWarnings(""String_Node_Str"") List<ProcedureParameter> params=procedure.getParameters();
  int nParams=params.size();
  int count=0;
  for (  ProcedureParameter param : params) {
    String paramStr=getParameterDdl(param);
    count++;
    sb.append(paramStr);
    String options=getOptions(param);
    if (!StringUtilities.isEmpty(options)) {
      sb.append(SPACE).append(options);
    }
    if (count < nParams)     sb.append(COMMA + SPACE);
  }
  sb.append(CLOSE_BRACKET);
  if (procedure.getResult() != null) {
    sb.append(SPACE + RETURNS);
    String options=getOptions(procedure.getResult());
    if (!StringUtilities.isEmpty(options)) {
      sb.append(SPACE).append(options);
    }
    sb.append(SPACE + TABLE + SPACE);
    sb.append(OPEN_BRACKET);
    count=0;
    int nCols=procedure.getResult().getColumns().size();
    for (    Object col : procedure.getResult().getColumns()) {
      Column nextCol=(Column)col;
      count++;
      String columnStr=getColumnDdl(nextCol);
      sb.append(columnStr);
      if (count < nCols)       sb.append(COMMA + SPACE);
    }
    sb.append(CLOSE_BRACKET);
  }
  String options=getProcedureOptions(procedure);
  if (!StringUtilities.isEmpty(options)) {
    sb.append(NEW_LINE);
    sb.append(SPACE).append(options);
  }
  if (isVirtual && !isFunction) {
    TransformationMappingRoot tRoot=(TransformationMappingRoot)TransformationHelper.getTransformationMappingRoot(procedure);
    String sqlString=TransformationHelper.getSelectSqlString(tRoot).replace(CREATE_VIRTUAL_PROCEDURE,StringConstants.EMPTY_STRING);
    if (sqlString != null) {
      if (sqlString.indexOf('\n') == 0) {
        sqlString=sqlString.replace(StringConstants.NEW_LINE,StringConstants.EMPTY_STRING);
      }
      sb.append(NEW_LINE + TAB).append(Reserved.AS).append(NEW_LINE).append(sqlString);
      if (!sqlString.endsWith(SEMI_COLON))       sb.append(SEMI_COLON);
      sb.append(NEW_LINE);
    }
  }
 else {
    sb.append(SEMI_COLON + NEW_LINE);
  }
  return sb.toString();
}","private String procedure(Procedure procedure){
  if (!includeProcedures)   return null;
  if (ignoreTeiidProcedures && isTeiidProcedure(procedure.getName()))   return null;
  StringBuilder sb=new StringBuilder();
  boolean isFunction=procedure.isFunction();
  if (isFunction) {
    if (isVirtual)     sb.append(CREATE_VIRTUAL_FUNCTION).append(SPACE);
 else     sb.append(CREATE_FOREIGN_FUNCTION).append(SPACE);
  }
 else {
    if (isVirtual)     sb.append(CREATE_VIRTUAL_PROCEDURE).append(SPACE);
 else     sb.append(CREATE_FOREIGN_PROCEDURE).append(SPACE);
  }
  sb.append(getName(procedure));
  sb.append(SPACE + OPEN_BRACKET);
  @SuppressWarnings(""String_Node_Str"") List<ProcedureParameter> params=procedure.getParameters();
  int nParams=params.size();
  int count=0;
  for (  ProcedureParameter param : params) {
    if (count == 0)     sb.append(NEW_LINE);
    String paramStr=getParameterDdl(param);
    count++;
    sb.append(TAB).append(paramStr);
    String options=getOptions(param);
    if (!StringUtilities.isEmpty(options)) {
      sb.append(SPACE).append(options);
    }
    if (count < nParams)     sb.append(COMMA + NEW_LINE);
  }
  sb.append(NEW_LINE + CLOSE_BRACKET);
  if (procedure.getResult() != null) {
    sb.append(SPACE + RETURNS);
    String options=getOptions(procedure.getResult());
    if (!StringUtilities.isEmpty(options)) {
      sb.append(SPACE).append(options);
    }
    sb.append(NEW_LINE + TAB + TABLE+ SPACE);
    sb.append(OPEN_BRACKET);
    count=0;
    int nCols=procedure.getResult().getColumns().size();
    for (    Object col : procedure.getResult().getColumns()) {
      if (count == 0)       sb.append(NEW_LINE);
      Column nextCol=(Column)col;
      count++;
      String columnStr=getColumnDdl(nextCol);
      sb.append(TAB + TAB).append(columnStr);
      if (count < nCols)       sb.append(COMMA + NEW_LINE);
    }
    sb.append(NEW_LINE + CLOSE_BRACKET);
  }
  String options=getProcedureOptions(procedure);
  if (!StringUtilities.isEmpty(options)) {
    sb.append(SPACE).append(options);
  }
  if (isVirtual && !isFunction) {
    TransformationMappingRoot tRoot=(TransformationMappingRoot)TransformationHelper.getTransformationMappingRoot(procedure);
    String sqlString=TransformationHelper.getSelectSqlString(tRoot).replace(CREATE_VIRTUAL_PROCEDURE,StringConstants.EMPTY_STRING);
    if (sqlString != null) {
      if (sqlString.indexOf('\n') == 0) {
        sqlString=sqlString.replace(StringConstants.NEW_LINE,StringConstants.EMPTY_STRING);
      }
      sb.append(NEW_LINE + TAB).append(Reserved.AS).append(NEW_LINE).append(sqlString);
      if (!sqlString.endsWith(SEMI_COLON))       sb.append(SEMI_COLON);
      sb.append(NEW_LINE);
    }
  }
 else {
    sb.append(SEMI_COLON + NEW_LINE);
  }
  return sb.toString();
}",0.960751796572692
101949,"@Override public XmiVdb xmiVdbConvert(IFile destination,Properties options) throws Exception {
  NullProgressMonitor monitor=new NullProgressMonitor();
  try {
    VdbPlugin.singleton().setConversionInProgress(true);
    XmiVdb xmiVdb=new XmiVdb(destination);
    populateVdb(xmiVdb);
    List<DynamicModel> dynamicModels=new ArrayList<DynamicModel>(getDynamicModels());
    if (!dynamicModels.isEmpty())     Collections.sort(dynamicModels,new DynamicModelComparator());
    Map<ModelResource,DdlImporter> importerModelMap=new HashMap<ModelResource,DdlImporter>();
    for (    DynamicModel dynModel : dynamicModels) {
      IFile sourceFile=this.getSourceFile();
      IContainer parent=sourceFile.getParent();
      String fileName=dynModel.getName() + DOT_XMI;
      ModelResource modelResource=null;
      IFile modelFile=parent.getFile(new Path(fileName));
      if (modelFile.exists())       modelFile.delete(true,monitor);
      modelResource=ModelerCore.create(modelFile);
      if (modelResource == null)       throw new Exception(""String_Node_Str"");
      ModelAnnotation annotation=modelResource.getModelAnnotation();
      annotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
      annotation.setModelType(ModelType.get(dynModel.getModelType().getType()));
      VdbSource[] sources=dynModel.getSources();
      if (sources != null) {
        for (        VdbSource source : sources) {
          String translatorProperty=IConnectionInfoHelper.TRANSLATOR_NAMESPACE + IConnectionInfoHelper.TRANSLATOR_NAME_KEY;
          ModelUtil.setModelAnnotationPropertyValue(modelResource,translatorProperty,source.getTranslatorName());
          String jndiProperty=IConnectionInfoHelper.CONNECTION_NAMESPACE + IJBossDsProfileConstants.JNDI_PROP_ID;
          ModelUtil.setModelAnnotationPropertyValue(modelResource,jndiProperty,source.getJndiName());
        }
      }
      modelResource.save(monitor,false);
      ModelBuildUtil.indexResources(monitor,Collections.singleton(modelResource.getCorrespondingResource()));
      Metadata metadata=dynModel.getMetadata();
      if (metadata != null) {
        IProject project=parent.getProject();
        DdlImporter importer=new DdlImporter(new IProject[]{project});
        importer.setModelFolder(parent);
        importer.setModelName(fileName);
        importer.setOptToCreateModelEntitiesForUnsupportedDdl(false);
        String ddlAsDescriptionOption=options.getProperty(Vdb.SET_DDL_AS_DESCRIPTION,Boolean.FALSE.toString());
        importer.setOptToSetModelEntityDescription(Boolean.parseBoolean(ddlAsDescriptionOption));
        Type dynModelType=dynModel.getModelType();
        String modelType=dynModelType.toString();
        importer.setModelType(ModelType.get(modelType));
        importer.setGenerateDefaultSQL(Type.VIRTUAL.equals(dynModelType));
        importer.setDdlFileName(getSourceFile().getLocation().toOSString());
        importer.setSpecifiedParser(""String_Node_Str"");
        importer.importDdl(metadata.getSchemaText(),monitor,1,new Properties());
        if (importer.hasParseError()) {
          StringBuffer buffer=new StringBuffer();
          buffer.append(""String_Node_Str"").append(TAB);
          buffer.append(importer.getParseErrorMessage().trim()).append(NEW_LINE);
          buffer.append(TAB).append(TAB).append(SPACE).append(SPACE).append(""String_Node_Str"").append(TAB);
          buffer.append(importer.getParseErrorLineNumber()).append(NEW_LINE);
          buffer.append(TAB).append(TAB).append(SPACE).append(SPACE).append(""String_Node_Str"").append(TAB);
          buffer.append(importer.getParseErrorColNumber()).append(NEW_LINE);
          buffer.append(TAB).append(TAB).append(SPACE).append(SPACE).append(""String_Node_Str"").append(TAB);
          buffer.append(importer.getParseErrorIndex()).append(NEW_LINE);
          throw new Exception(buffer.toString());
        }
        if (!importer.noDdlImported()) {
          importer.save(monitor,1);
        }
        modelResource=importer.model();
        String desc=dynModel.getDescription();
        if (!StringUtilities.isEmpty(desc)) {
          modelResource.getModelAnnotation().setDescription(desc);
          modelResource.save(monitor,false);
        }
        importerModelMap.put(modelResource,importer);
      }
      VdbModelEntry modelEntry=xmiVdb.addEntry(modelFile.getFullPath());
      for (      Map.Entry<Object,Object> prop : dynModel.getProperties().entrySet()) {
        modelEntry.setProperty(prop.getKey().toString(),prop.getValue().toString());
      }
      String desc=dynModel.getDescription();
      if (!StringUtilities.isEmpty(desc)) {
        modelEntry.setDescription(desc);
      }
      modelEntry.setVisible(dynModel.isVisible());
      VdbSourceInfo sourceInfo=modelEntry.getSourceInfo();
      sourceInfo.setIsMultiSource(dynModel.isMultiSource());
      sourceInfo.setAddColumn(dynModel.doAddColumn());
      sourceInfo.setColumnAlias(dynModel.getColumnAlias());
      for (      VdbSource source : dynModel.getSources()) {
        sourceInfo.add(source.getName(),source.getJndiName(),source.getTranslatorName());
      }
      for (      Map.Entry<Object,Object> entry : dynModel.getProperties().entrySet()) {
        modelEntry.setProperty(entry.getKey().toString(),entry.getValue().toString());
      }
    }
    for (    DdlImporter importer : importerModelMap.values()) {
      importer.setMaterializedTableReferences(importerModelMap.keySet());
    }
    return xmiVdb;
  }
  finally {
    VdbPlugin.singleton().setConversionInProgress(false);
  }
}","@Override public XmiVdb xmiVdbConvert(IFile destination,Properties options) throws Exception {
  NullProgressMonitor monitor=new NullProgressMonitor();
  try {
    VdbPlugin.singleton().setConversionInProgress(true);
    XmiVdb xmiVdb=new XmiVdb(destination);
    populateVdb(xmiVdb);
    List<DynamicModel> dynamicModels=new ArrayList<DynamicModel>(getDynamicModels());
    if (!dynamicModels.isEmpty())     Collections.sort(dynamicModels,new DynamicModelComparator());
    Map<ModelResource,DdlImporter> importerModelMap=new HashMap<ModelResource,DdlImporter>();
    for (    DynamicModel dynModel : dynamicModels) {
      IFile sourceFile=this.getSourceFile();
      IContainer parent=sourceFile.getParent();
      String fileName=dynModel.getName() + DOT_XMI;
      ModelResource modelResource=null;
      IFile modelFile=parent.getFile(new Path(fileName));
      if (modelFile.exists())       modelFile.delete(true,monitor);
      modelResource=ModelerCore.create(modelFile);
      if (modelResource == null)       throw new Exception(""String_Node_Str"");
      ModelAnnotation annotation=modelResource.getModelAnnotation();
      annotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
      annotation.setModelType(ModelType.get(dynModel.getModelType().getType()));
      VdbSource[] sources=dynModel.getSources();
      if (sources != null) {
        boolean propsAreSet=false;
        for (        VdbSource source : sources) {
          if (propsAreSet)           break;
          String translatorProperty=IConnectionInfoHelper.TRANSLATOR_NAMESPACE + IConnectionInfoHelper.TRANSLATOR_NAME_KEY;
          ModelUtil.setModelAnnotationPropertyValue(modelResource,translatorProperty,source.getTranslatorName());
          String jndiProperty=IConnectionInfoHelper.CONNECTION_NAMESPACE + IJBossDsProfileConstants.JNDI_PROP_ID;
          ModelUtil.setModelAnnotationPropertyValue(modelResource,jndiProperty,source.getJndiName());
          propsAreSet=true;
        }
      }
      modelResource.save(monitor,false);
      ModelBuildUtil.indexResources(monitor,Collections.singleton(modelResource.getCorrespondingResource()));
      Metadata metadata=dynModel.getMetadata();
      if (metadata != null) {
        IProject project=parent.getProject();
        DdlImporter importer=new DdlImporter(new IProject[]{project});
        importer.setModelFolder(parent);
        importer.setModelName(fileName);
        importer.setOptToCreateModelEntitiesForUnsupportedDdl(false);
        String ddlAsDescriptionOption=options.getProperty(Vdb.SET_DDL_AS_DESCRIPTION,Boolean.FALSE.toString());
        importer.setOptToSetModelEntityDescription(Boolean.parseBoolean(ddlAsDescriptionOption));
        Type dynModelType=dynModel.getModelType();
        String modelType=dynModelType.toString();
        importer.setModelType(ModelType.get(modelType));
        importer.setGenerateDefaultSQL(Type.VIRTUAL.equals(dynModelType));
        importer.setDdlFileName(getSourceFile().getLocation().toOSString());
        importer.setSpecifiedParser(""String_Node_Str"");
        importer.importDdl(metadata.getSchemaText(),monitor,1,new Properties());
        if (importer.hasParseError()) {
          StringBuffer buffer=new StringBuffer();
          buffer.append(""String_Node_Str"").append(TAB);
          buffer.append(importer.getParseErrorMessage().trim()).append(NEW_LINE);
          buffer.append(TAB).append(TAB).append(SPACE).append(SPACE).append(""String_Node_Str"").append(TAB);
          buffer.append(importer.getParseErrorLineNumber()).append(NEW_LINE);
          buffer.append(TAB).append(TAB).append(SPACE).append(SPACE).append(""String_Node_Str"").append(TAB);
          buffer.append(importer.getParseErrorColNumber()).append(NEW_LINE);
          buffer.append(TAB).append(TAB).append(SPACE).append(SPACE).append(""String_Node_Str"").append(TAB);
          buffer.append(importer.getParseErrorIndex()).append(NEW_LINE);
          throw new Exception(buffer.toString());
        }
        if (!importer.noDdlImported()) {
          importer.save(monitor,1);
        }
        modelResource=importer.model();
        String desc=dynModel.getDescription();
        if (!StringUtilities.isEmpty(desc)) {
          modelResource.getModelAnnotation().setDescription(desc);
          modelResource.save(monitor,false);
        }
        importerModelMap.put(modelResource,importer);
      }
      VdbModelEntry modelEntry=xmiVdb.addEntry(modelFile.getFullPath());
      for (      Map.Entry<Object,Object> prop : dynModel.getProperties().entrySet()) {
        modelEntry.setProperty(prop.getKey().toString(),prop.getValue().toString());
      }
      String desc=dynModel.getDescription();
      if (!StringUtilities.isEmpty(desc)) {
        modelEntry.setDescription(desc);
      }
      modelEntry.setVisible(dynModel.isVisible());
      VdbSourceInfo sourceInfo=modelEntry.getSourceInfo();
      sourceInfo.setIsMultiSource(dynModel.isMultiSource());
      sourceInfo.setAddColumn(dynModel.doAddColumn());
      sourceInfo.setColumnAlias(dynModel.getColumnAlias());
      for (      VdbSource source : dynModel.getSources()) {
        sourceInfo.add(source.getName(),source.getJndiName(),source.getTranslatorName());
      }
      for (      Map.Entry<Object,Object> entry : dynModel.getProperties().entrySet()) {
        modelEntry.setProperty(entry.getKey().toString(),entry.getValue().toString());
      }
    }
    for (    DdlImporter importer : importerModelMap.values()) {
      importer.setMaterializedTableReferences(importerModelMap.keySet());
    }
    return xmiVdb;
  }
  finally {
    VdbPlugin.singleton().setConversionInProgress(false);
  }
}",0.9904489868785148
101950,"private Composite createDdlPanel(Composite parent){
  final Composite mainPanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(mainPanel);
  ddlFileContentsBox=WidgetFactory.createTextBox(mainPanel);
  ddlFileContentsBox.setEditable(false);
  return mainPanel;
}","private Composite createDdlPanel(Composite parent){
  final Composite mainPanel=WidgetFactory.createPanel(parent,SWT.NONE,1,1);
  GridLayoutFactory.fillDefaults().margins(10,10).applyTo(mainPanel);
  ddlFileContentsBox=new StyledText(mainPanel,SWT.READ_ONLY | SWT.BORDER | SWT.MULTI| SWT.H_SCROLL| SWT.V_SCROLL);
  GridDataFactory.fillDefaults().grab(true,true).minSize(400,300).applyTo(ddlFileContentsBox);
  ddlFileContentsBox.setEditable(false);
  ddlFileContentsBox.setFont(monospaceFont);
  return mainPanel;
}",0.5598086124401914
101951,"/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
 */
@Override public void createControl(final Composite parent){
  final IDialogSettings settings=getDialogSettings();
  initDlgFolderName=settings.get(INITIAL_DIALOG_FOLDER_SETTING);
  final Composite hostPanel=new Composite(parent,SWT.NONE);
  hostPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hostPanel.setLayout(new GridLayout(1,false));
  DefaultScrolledComposite scrolledComposite=new DefaultScrolledComposite(hostPanel,SWT.H_SCROLL | SWT.V_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().equalWidth(false).applyTo(scrolledComposite);
  GridDataFactory.fillDefaults().grab(true,false);
  final Composite panel=scrolledComposite.getPanel();
  panel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  panel.setLayout(new GridLayout(3,false));
  setControl(panel);
  Composite ddlFileGroup=WidgetFactory.createGroup(panel,DdlImporterUiI18n.FILE_GROUP_LABEL,GridData.FILL_HORIZONTAL,3,3);
  WidgetFactory.createLabel(ddlFileGroup,GridData.VERTICAL_ALIGN_CENTER,DdlImporterUiI18n.DDL_FILE_LABEL);
  String[] ddlFileHistory=settings.getArray(HISTORY_SETTING);
  List<String> historyList=null;
  if (ddlFileHistory != null) {
    historyList=Arrays.asList(ddlFileHistory);
  }
 else {
    historyList=Collections.emptyList();
  }
  ddlFileCombo=WidgetFactory.createCombo(ddlFileGroup,SWT.NONE,GridData.FILL_HORIZONTAL,historyList,new LabelProvider(),false);
  ddlFileCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      ddlFileModified();
    }
  }
);
  ddlFileCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent event){
      ddlFileSelected();
    }
  }
);
  final Composite buttonPanel=WidgetFactory.createPanel(ddlFileGroup,SWT.NO_TRIM);
  Button button=WidgetFactory.createButton(buttonPanel,DdlImporterUiI18n.CHOOSE_FROM_FILE_SYSTEM_BUTTON,GridData.HORIZONTAL_ALIGN_FILL);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent event){
      chooseDdlFile();
    }
  }
);
  button=WidgetFactory.createButton(buttonPanel,DdlImporterUiI18n.CHOOSE_FROM_WORKSPACE_BUTTON,GridData.HORIZONTAL_ALIGN_FILL);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent event){
      chooseDdlFileFromWorkspace();
    }
  }
);
  TabFolder tabFolder=createTabFolder(panel);
  createModelDefinitionTab(tabFolder);
  createNameOptionsTab(tabFolder);
  createDdlTab(tabFolder);
  scrolledComposite.sizeScrolledPanel();
  setControl(hostPanel);
  if (selectedFile != null) {
    if (relationalModel(selectedFile)) {
      modelNameFld.setText(selectedFile.getFullPath().removeFileExtension().lastSegment());
      generateModelName=false;
    }
 else {
      String ext=selectedFile.getFileExtension();
      if (ext != null) {
        ext=ext.toLowerCase();
        if (""String_Node_Str"".equals(ext) || ""String_Node_Str"".equals(ext))         ddlFileCombo.setText(selectedFile.getLocation().toString());
      }
    }
  }
 else   validate();
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
 */
@Override public void createControl(final Composite parent){
  monospaceFont(parent);
  final IDialogSettings settings=getDialogSettings();
  initDlgFolderName=settings.get(INITIAL_DIALOG_FOLDER_SETTING);
  final Composite hostPanel=new Composite(parent,SWT.NONE);
  hostPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hostPanel.setLayout(new GridLayout(1,false));
  DefaultScrolledComposite scrolledComposite=new DefaultScrolledComposite(hostPanel,SWT.H_SCROLL | SWT.V_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  GridLayoutFactory.fillDefaults().equalWidth(false).applyTo(scrolledComposite);
  GridDataFactory.fillDefaults().grab(true,false);
  final Composite panel=scrolledComposite.getPanel();
  panel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  panel.setLayout(new GridLayout(3,false));
  setControl(panel);
  Composite ddlFileGroup=WidgetFactory.createGroup(panel,DdlImporterUiI18n.FILE_GROUP_LABEL,GridData.FILL_HORIZONTAL,3,3);
  WidgetFactory.createLabel(ddlFileGroup,GridData.VERTICAL_ALIGN_CENTER,DdlImporterUiI18n.DDL_FILE_LABEL);
  String[] ddlFileHistory=settings.getArray(HISTORY_SETTING);
  List<String> historyList=null;
  if (ddlFileHistory != null) {
    historyList=Arrays.asList(ddlFileHistory);
  }
 else {
    historyList=Collections.emptyList();
  }
  ddlFileCombo=WidgetFactory.createCombo(ddlFileGroup,SWT.NONE,GridData.FILL_HORIZONTAL,historyList,new LabelProvider(),false);
  ddlFileCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent event){
      ddlFileModified();
    }
  }
);
  ddlFileCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent event){
      ddlFileSelected();
    }
  }
);
  final Composite buttonPanel=WidgetFactory.createPanel(ddlFileGroup,SWT.NO_TRIM);
  Button button=WidgetFactory.createButton(buttonPanel,DdlImporterUiI18n.CHOOSE_FROM_FILE_SYSTEM_BUTTON,GridData.HORIZONTAL_ALIGN_FILL);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent event){
      chooseDdlFile();
    }
  }
);
  button=WidgetFactory.createButton(buttonPanel,DdlImporterUiI18n.CHOOSE_FROM_WORKSPACE_BUTTON,GridData.HORIZONTAL_ALIGN_FILL);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent event){
      chooseDdlFileFromWorkspace();
    }
  }
);
  TabFolder tabFolder=createTabFolder(panel);
  createModelDefinitionTab(tabFolder);
  createNameOptionsTab(tabFolder);
  createDdlTab(tabFolder);
  scrolledComposite.sizeScrolledPanel();
  setControl(hostPanel);
  if (selectedFile != null) {
    if (relationalModel(selectedFile)) {
      modelNameFld.setText(selectedFile.getFullPath().removeFileExtension().lastSegment());
      generateModelName=false;
    }
 else {
      String ext=selectedFile.getFileExtension();
      if (ext != null) {
        ext=ext.toLowerCase();
        if (""String_Node_Str"".equals(ext) || ""String_Node_Str"".equals(ext))         ddlFileCombo.setText(selectedFile.getLocation().toString());
      }
    }
  }
 else   validate();
}",0.9962456825349152
101952,"private void refreshDisplayValues(final String adminPWD,final String jdbcPWD){
  if (!active || teiidServer == null || form.isDisposed())   return;
  if (hostNameLabel.isDisposed())   return;
  hostNameLabel.setText(teiidServer.getHost());
  String versionValue=teiidServer.getServerVersion().toString();
  if (!versionValueCombo.getText().equals(versionValue)) {
    versionValueCombo.setText(versionValue);
  }
  versionValueCombo.setEnabled(!teiidServer.isConnected());
  jbServerNameLabel.setText(parentServer != null ? parentServer.getName() : ""String_Node_Str"");
  ITeiidAdminInfo teiidAdminInfo=teiidServer.getTeiidAdminInfo();
  ITeiidJdbcInfo teiidJdbcInfo=teiidServer.getTeiidJdbcInfo();
  if (isSevenServer()) {
    if (adminUserNameText != null) {
      setIfDifferent(adminUserNameText,teiidAdminInfo.getUsername() != null ? teiidAdminInfo.getUsername() : EMPTY_STRING);
    }
    if (adminPasswdText != null) {
      setIfDifferent(adminPasswdText,adminPWD != null ? adminPWD : EMPTY_STRING);
    }
    String portValue=teiidAdminInfo.getPort() != null ? teiidAdminInfo.getPort() : EMPTY_STRING;
    if (adminPort instanceof Text) {
      setIfDifferent((Text)adminPort,portValue);
    }
 else     if (adminPort instanceof Label) {
      ((Label)adminPort).setText(portValue);
    }
    if (adminSSLCheckbox != null) {
      adminSSLCheckbox.setSelection(teiidAdminInfo.isSecure());
    }
  }
 else {
    String portValue=teiidAdminInfo.getPort() != null ? teiidAdminInfo.getPort() : EMPTY_STRING;
    if (adminPort instanceof Text) {
      setIfDifferent((Text)adminPort,portValue);
    }
 else     if (adminPort instanceof Label) {
      ((Label)adminPort).setText(portValue);
    }
  }
  setIfDifferent(jdbcUserNameText,teiidJdbcInfo.getUsername() != null ? teiidJdbcInfo.getUsername() : EMPTY_STRING);
  setIfDifferent(jdbcPasswdText,jdbcPWD != null ? jdbcPWD : EMPTY_STRING);
  if (isSevenServer()) {
    String portValue=teiidJdbcInfo.getPort() != null ? teiidJdbcInfo.getPort() : EMPTY_STRING;
    if (jdbcPort instanceof Text) {
      setIfDifferent((Text)jdbcPort,portValue);
    }
  }
 else {
    String portValue=NOT_CONNECTED;
    if (teiidServer.isConnected()) {
      portValue=getServerManager().getJdbcPort(teiidServer,false);
      if (portValue == null) {
        portValue=NOT_CONNECTED;
      }
      ((Label)jdbcPort).setText(portValue);
    }
    portValue=getServerManager().getJdbcPort(teiidServer,true);
    if (portValue != null) {
      setIfDifferent(jdbcPortOverride,portValue);
    }
  }
  jdbcSSLCheckbox.setSelection(teiidJdbcInfo.isSecure());
}","private void refreshDisplayValues(final String adminPWD,final String jdbcPWD){
  if (!active || teiidServer == null || form.isDisposed())   return;
  if (hostNameLabel == null || hostNameLabel.isDisposed())   return;
  hostNameLabel.setText(teiidServer.getHost());
  String versionValue=teiidServer.getServerVersion().toString();
  if (!versionValueCombo.getText().equals(versionValue)) {
    versionValueCombo.setText(versionValue);
  }
  versionValueCombo.setEnabled(!teiidServer.isConnected());
  jbServerNameLabel.setText(parentServer != null ? parentServer.getName() : ""String_Node_Str"");
  ITeiidAdminInfo teiidAdminInfo=teiidServer.getTeiidAdminInfo();
  ITeiidJdbcInfo teiidJdbcInfo=teiidServer.getTeiidJdbcInfo();
  if (isSevenServer()) {
    if (adminUserNameText != null) {
      setIfDifferent(adminUserNameText,teiidAdminInfo.getUsername() != null ? teiidAdminInfo.getUsername() : EMPTY_STRING);
    }
    if (adminPasswdText != null) {
      setIfDifferent(adminPasswdText,adminPWD != null ? adminPWD : EMPTY_STRING);
    }
    String portValue=teiidAdminInfo.getPort() != null ? teiidAdminInfo.getPort() : EMPTY_STRING;
    if (adminPort instanceof Text) {
      setIfDifferent((Text)adminPort,portValue);
    }
 else     if (adminPort instanceof Label) {
      ((Label)adminPort).setText(portValue);
    }
    if (adminSSLCheckbox != null) {
      adminSSLCheckbox.setSelection(teiidAdminInfo.isSecure());
    }
  }
 else {
    String portValue=teiidAdminInfo.getPort() != null ? teiidAdminInfo.getPort() : EMPTY_STRING;
    if (adminPort instanceof Text) {
      setIfDifferent((Text)adminPort,portValue);
    }
 else     if (adminPort instanceof Label) {
      ((Label)adminPort).setText(portValue);
    }
  }
  setIfDifferent(jdbcUserNameText,teiidJdbcInfo.getUsername() != null ? teiidJdbcInfo.getUsername() : EMPTY_STRING);
  setIfDifferent(jdbcPasswdText,jdbcPWD != null ? jdbcPWD : EMPTY_STRING);
  if (isSevenServer()) {
    String portValue=teiidJdbcInfo.getPort() != null ? teiidJdbcInfo.getPort() : EMPTY_STRING;
    if (jdbcPort instanceof Text) {
      setIfDifferent((Text)jdbcPort,portValue);
    }
  }
 else {
    String portValue=NOT_CONNECTED;
    if (teiidServer.isConnected()) {
      portValue=getServerManager().getJdbcPort(teiidServer,false);
      if (portValue == null) {
        portValue=NOT_CONNECTED;
      }
      ((Label)jdbcPort).setText(portValue);
    }
    portValue=getServerManager().getJdbcPort(teiidServer,true);
    if (portValue != null) {
      setIfDifferent(jdbcPortOverride,portValue);
    }
  }
  jdbcSSLCheckbox.setSelection(teiidJdbcInfo.isSecure());
}",0.9951987708853468
101953,"/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.operation.IRunnableWithProgress#run(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override @SuppressWarnings(""String_Node_Str"") public void run(final IProgressMonitor monitor) throws InvocationTargetException {
  try {
    final IFile ddlFileToCreate=targetContainer.getFile(new Path(ddlFileName));
    String ddl=getDDL();
    InputStream istream=new ByteArrayInputStream(ddl.getBytes());
    ddlFileToCreate.create(istream,false,monitor);
    targetContainer.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  }
 catch (  final Exception err) {
    throw new InvocationTargetException(err);
  }
 finally {
    monitor.done();
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.operation.IRunnableWithProgress#run(org.eclipse.core.runtime.IProgressMonitor)
 */
@Override public void run(final IProgressMonitor monitor) throws InvocationTargetException {
  try {
    final IFile ddlFileToCreate=targetContainer.getFile(new Path(ddlFileName));
    String ddl=getDDL();
    InputStream istream=new ByteArrayInputStream(ddl.getBytes());
    ddlFileToCreate.create(istream,false,monitor);
    targetContainer.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  }
 catch (  final Exception err) {
    throw new InvocationTargetException(err);
  }
 finally {
    monitor.done();
  }
}",0.9721175584024114
101954,"private void createDDLFile(final IContainer targetContainer,final String ddlFileName){
  final IRunnableWithProgress op=new IRunnableWithProgress(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.operation.IRunnableWithProgress#run(org.eclipse.core.runtime.IProgressMonitor)
 */
    @Override @SuppressWarnings(""String_Node_Str"") public void run(    final IProgressMonitor monitor) throws InvocationTargetException {
      try {
        final IFile ddlFileToCreate=targetContainer.getFile(new Path(ddlFileName));
        String ddl=getDDL();
        InputStream istream=new ByteArrayInputStream(ddl.getBytes());
        ddlFileToCreate.create(istream,false,monitor);
        targetContainer.refreshLocal(IResource.DEPTH_INFINITE,monitor);
      }
 catch (      final Exception err) {
        throw new InvocationTargetException(err);
      }
 finally {
        monitor.done();
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(getShell()).run(false,true,op);
  }
 catch (  Throwable err) {
    if (err instanceof InvocationTargetException) {
      err=((InvocationTargetException)err).getTargetException();
    }
    ModelerCore.Util.log(IStatus.ERROR,err,err.getMessage());
    WidgetUtil.showError(Util.getString(""String_Node_Str""));
  }
}","private void createDDLFile(final IContainer targetContainer,final String ddlFileName){
  final IRunnableWithProgress op=new IRunnableWithProgress(){
    /** 
 * {@inheritDoc}
 * @see org.eclipse.jface.operation.IRunnableWithProgress#run(org.eclipse.core.runtime.IProgressMonitor)
 */
    @Override public void run(    final IProgressMonitor monitor) throws InvocationTargetException {
      try {
        final IFile ddlFileToCreate=targetContainer.getFile(new Path(ddlFileName));
        String ddl=getDDL();
        InputStream istream=new ByteArrayInputStream(ddl.getBytes());
        ddlFileToCreate.create(istream,false,monitor);
        targetContainer.refreshLocal(IResource.DEPTH_INFINITE,monitor);
      }
 catch (      final Exception err) {
        throw new InvocationTargetException(err);
      }
 finally {
        monitor.done();
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(getShell()).run(false,true,op);
  }
 catch (  Throwable err) {
    if (err instanceof InvocationTargetException) {
      err=((InvocationTargetException)err).getTargetException();
    }
    ModelerCore.Util.log(IStatus.ERROR,err,err.getMessage());
    WidgetUtil.showError(Util.getString(""String_Node_Str""));
  }
}",0.9850263051396196
101955,"private void createDDLDisplayGroup(Composite parent){
  Group theGroup=WidgetFactory.createGroup(parent,""String_Node_Str"",SWT.NONE,1,1);
  GridData groupGD=new GridData(GridData.FILL_BOTH);
  groupGD.heightHint=GROUP_HEIGHT_190;
  groupGD.widthHint=400;
  theGroup.setLayoutData(groupGD);
  ddlContentsBox=WidgetFactory.createTextBox(theGroup);
  ddlContentsBox.setEditable(false);
}","private void createDDLDisplayGroup(Composite parent){
  Group theGroup=WidgetFactory.createGroup(parent,""String_Node_Str"",SWT.NONE,1,1);
  GridData groupGD=new GridData(GridData.FILL_BOTH);
  groupGD.heightHint=GROUP_HEIGHT_190;
  groupGD.widthHint=400;
  theGroup.setLayoutData(groupGD);
  ddlContentsBox=new StyledText(theGroup,SWT.READ_ONLY | SWT.BORDER | SWT.MULTI| SWT.H_SCROLL| SWT.V_SCROLL);
  GridDataFactory.fillDefaults().grab(true,true).minSize(400,300).applyTo(ddlContentsBox);
  ddlContentsBox.setEditable(false);
  ddlContentsBox.setFont(monospaceFont);
}",0.6701680672268907
101956,"@Override public void createControl(Composite parent){
  final Composite mainPanel=new Composite(parent,SWT.NONE);
  mainPanel.setLayout(new GridLayout(1,false));
  mainPanel.setLayoutData(new GridData());
  mainPanel.setSize(mainPanel.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  setControl(mainPanel);
  createButtonPanel(mainPanel);
  createDDLDisplayGroup(mainPanel);
  setPageComplete(false);
}","@Override public void createControl(Composite parent){
  monospaceFont(parent);
  final Composite mainPanel=new Composite(parent,SWT.NONE);
  mainPanel.setLayout(new GridLayout(1,false));
  mainPanel.setLayoutData(new GridData());
  mainPanel.setSize(mainPanel.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  setControl(mainPanel);
  createButtonPanel(mainPanel);
  createDDLDisplayGroup(mainPanel);
  setPageComplete(false);
}",0.9693251533742332
101957,"private String view(Table table){
  if (!includeTables)   return null;
  boolean isGlobalTempTable=false;
  StringBuilder sb=new StringBuilder();
  try {
    if (hasOption(table,BASE_TABLE_EXT_PROPERTIES.VIEW_TABLE_GLOBAL_TEMP_TABLE)) {
      String value=getOption(table,BASE_TABLE_EXT_PROPERTIES.VIEW_TABLE_GLOBAL_TEMP_TABLE);
      if (value.toLowerCase().equals(Boolean.TRUE.toString())) {
        isGlobalTempTable=true;
      }
    }
  }
 catch (  Exception e) {
    addIssue(IStatus.ERROR,""String_Node_Str"" + getName(table),e);
  }
  if (isGlobalTempTable) {
    sb.append(CREATE_GLOBAL_TEMPORARY_TABLE).append(SPACE);
  }
 else {
    sb.append(CREATE_VIEW).append(SPACE);
  }
  sb.append(getName(table));
  sb.append(SPACE + OPEN_BRACKET);
  @SuppressWarnings(""String_Node_Str"") List<Column> columns=table.getColumns();
  int nColumns=columns.size();
  int count=0;
  for (  Column col : columns) {
    if (count == 0)     sb.append(NEW_LINE);
    String columnStr=getColumnDdl(col);
    count++;
    sb.append(TAB).append(columnStr);
    if (count < nColumns)     sb.append(COMMA + NEW_LINE);
  }
  if (table instanceof BaseTable) {
    String constraints=getContraints((BaseTable)table);
    if (constraints != null) {
      sb.append(constraints);
    }
  }
  sb.append(NEW_LINE + CLOSE_BRACKET);
  String options=getTableOptions(table);
  if (!StringUtilities.isEmpty(options)) {
    sb.append(SPACE).append(options);
  }
  if (!isGlobalTempTable) {
    TransformationMappingRoot tRoot=(TransformationMappingRoot)TransformationHelper.getTransformationMappingRoot(table);
    String sqlString=TransformationHelper.getSelectSqlUserString(tRoot);
    if (sqlString != null) {
      sb.append(SPACE).append(NEW_LINE + Reserved.AS).append(NEW_LINE + TAB).append(sqlString);
    }
  }
  sb.append(SEMI_COLON + NEW_LINE);
  return sb.toString();
}","private String view(Table table){
  if (!includeTables)   return null;
  boolean isGlobalTempTable=false;
  StringBuilder sb=new StringBuilder();
  try {
    if (hasOption(table,BASE_TABLE_EXT_PROPERTIES.VIEW_TABLE_GLOBAL_TEMP_TABLE)) {
      String value=getOption(table,BASE_TABLE_EXT_PROPERTIES.VIEW_TABLE_GLOBAL_TEMP_TABLE);
      if (value.toLowerCase().equals(Boolean.TRUE.toString())) {
        isGlobalTempTable=true;
      }
    }
  }
 catch (  Exception e) {
    addIssue(IStatus.ERROR,""String_Node_Str"" + getName(table),e);
  }
  if (isGlobalTempTable) {
    sb.append(CREATE_GLOBAL_TEMPORARY_TABLE).append(SPACE);
  }
 else {
    sb.append(CREATE_VIEW).append(SPACE);
  }
  sb.append(getName(table));
  sb.append(SPACE + OPEN_BRACKET);
  @SuppressWarnings(""String_Node_Str"") List<Column> columns=table.getColumns();
  int nColumns=columns.size();
  int count=0;
  for (  Column col : columns) {
    if (count == 0)     sb.append(NEW_LINE);
    String columnStr=getColumnDdl(col);
    count++;
    sb.append(TAB).append(columnStr);
    if (count < nColumns)     sb.append(COMMA + NEW_LINE);
  }
  if (table instanceof BaseTable) {
    String constraints=getContraints((BaseTable)table);
    if (constraints != null) {
      sb.append(COMMA);
      sb.append(constraints);
    }
  }
  sb.append(NEW_LINE + CLOSE_BRACKET);
  String options=getTableOptions(table);
  if (!StringUtilities.isEmpty(options)) {
    sb.append(SPACE).append(options);
  }
  if (!isGlobalTempTable) {
    TransformationMappingRoot tRoot=(TransformationMappingRoot)TransformationHelper.getTransformationMappingRoot(table);
    String sqlString=TransformationHelper.getSelectSqlUserString(tRoot);
    if (sqlString != null) {
      sb.append(SPACE).append(NEW_LINE + Reserved.AS).append(NEW_LINE + TAB).append(sqlString);
    }
  }
  sb.append(SEMI_COLON + NEW_LINE);
  return sb.toString();
}",0.9935622317596566
101958,"private String getContraints(BaseTable table){
  StringBuffer sb=new StringBuffer();
  boolean hasPK=table.getPrimaryKey() != null;
  boolean hasFKs=table.getForeignKeys().size() > 0;
  boolean hasAPs=table.getAccessPatterns().size() > 0;
  int nColumns=0;
  int count=0;
  Collection<UniqueConstraint> uniqueConstraints=getUniqueUniqueContraints(table);
  boolean hasUCs=uniqueConstraints.size() > 0;
  if (hasPK) {
    PrimaryKey pk=table.getPrimaryKey();
    String pkName=getName(pk);
    sb.append(COMMA);
    StringBuilder theSB=new StringBuilder(NEW_LINE + TAB + CONSTRAINT+ SPACE+ pkName+ SPACE+ PRIMARY_KEY);
    nColumns=pk.getColumns().size();
    count=0;
    for (    Object col : pk.getColumns()) {
      count++;
      if (count == 1)       theSB.append(OPEN_BRACKET);
      theSB.append(getName((EObject)col));
      if (count < nColumns)       theSB.append(COMMA + SPACE);
 else       theSB.append(CLOSE_BRACKET);
    }
    String options=getOptions(pk);
    if (!StringUtilities.isEmpty(options)) {
      theSB.append(SPACE).append(options);
    }
    sb.append(theSB.toString());
    if ((hasFKs && includeFKs) || hasUCs || hasAPs)     sb.append(COMMA);
  }
  if (hasFKs && includeFKs) {
    int nFKs=table.getForeignKeys().size();
    int countFK=0;
    for (    Object obj : table.getForeignKeys()) {
      countFK++;
      ForeignKey fk=(ForeignKey)obj;
      String fkName=getName(fk);
      StringBuilder theSB=new StringBuilder(NEW_LINE + TAB + CONSTRAINT+ SPACE+ fkName+ SPACE+ FOREIGN_KEY);
      nColumns=fk.getColumns().size();
      count=0;
      for (      Object col : fk.getColumns()) {
        count++;
        if (count == 1)         theSB.append(OPEN_BRACKET);
        theSB.append(getName((EObject)col));
        if (count < nColumns)         theSB.append(COMMA + SPACE);
 else         theSB.append(CLOSE_BRACKET);
      }
      if (fk.getTable() != null) {
        UniqueKey uk=fk.getUniqueKey();
        BaseTable fkTableRef=(BaseTable)uk.getTable();
        String fkTableRefName=getName(fkTableRef);
        theSB.append(SPACE).append(REFERENCES).append(SPACE).append(fkTableRefName);
        if (uk instanceof UniqueConstraint) {
          UniqueConstraint ucRef=fkTableRef.getUniqueConstraints().get(0);
          nColumns=ucRef.getColumns().size();
          count=0;
          for (          Object col : ucRef.getColumns()) {
            count++;
            if (count == 1)             theSB.append(OPEN_BRACKET);
            theSB.append(getName((EObject)col));
            if (count < nColumns)             theSB.append(COMMA + SPACE);
 else             theSB.append(CLOSE_BRACKET);
          }
        }
 else {
          PrimaryKey pkRef=fkTableRef.getPrimaryKey();
          nColumns=pkRef.getColumns().size();
          count=0;
          for (          Object col : pkRef.getColumns()) {
            count++;
            if (count == 1)             theSB.append(OPEN_BRACKET);
            theSB.append(getName((EObject)col));
            if (count < nColumns)             theSB.append(COMMA + SPACE);
 else             theSB.append(CLOSE_BRACKET);
          }
        }
      }
      String options=getOptions(fk);
      if (!StringUtilities.isEmpty(options)) {
        theSB.append(SPACE).append(options);
      }
      sb.append(theSB.toString());
      if (countFK < nFKs)       sb.append(COMMA);
    }
    if (hasUCs || hasAPs)     sb.append(COMMA);
  }
  if (hasUCs) {
    int nUCs=uniqueConstraints.size();
    int ucCount=0;
    for (    Object obj : uniqueConstraints) {
      ucCount++;
      UniqueConstraint uc=(UniqueConstraint)obj;
      String name=getName(uc);
      StringBuilder theSB=new StringBuilder(NEW_LINE + TAB + CONSTRAINT+ SPACE+ name+ SPACE+ UNIQUE);
      nColumns=uc.getColumns().size();
      count=0;
      for (      Object col : uc.getColumns()) {
        count++;
        if (count == 1)         theSB.append(OPEN_BRACKET);
        theSB.append(getName((EObject)col));
        if (count < nColumns)         theSB.append(COMMA + SPACE);
 else         theSB.append(CLOSE_BRACKET);
      }
      String options=getOptions(uc);
      if (!StringUtilities.isEmpty(options)) {
        theSB.append(SPACE).append(options);
      }
      if (ucCount < nUCs)       sb.append(COMMA);
      sb.append(theSB.toString());
    }
  }
  if (!hasPK && !(hasFKs) && !hasUCs&& hasAPs) {
    sb.append(COMMA);
  }
  if (hasAPs) {
    int nAPs=table.getAccessPatterns().size();
    int apCount=0;
    for (    Object obj : table.getAccessPatterns()) {
      apCount++;
      AccessPattern ap=(AccessPattern)obj;
      String name=getName(ap);
      StringBuilder theSB=new StringBuilder(NEW_LINE + TAB + CONSTRAINT+ SPACE+ name+ SPACE+ ACCESSPATTERN);
      nColumns=ap.getColumns().size();
      count=0;
      for (      Object col : ap.getColumns()) {
        count++;
        if (count == 1)         theSB.append(OPEN_BRACKET);
        theSB.append(getName((EObject)col));
        if (count < nColumns)         theSB.append(COMMA + SPACE);
 else         theSB.append(CLOSE_BRACKET);
      }
      if (apCount < nAPs)       sb.append(COMMA);
      sb.append(theSB.toString());
    }
  }
  return sb.toString();
}","private String getContraints(BaseTable table){
  StringBuffer sb=new StringBuffer();
  boolean hasPK=table.getPrimaryKey() != null;
  boolean hasFKs=table.getForeignKeys().size() > 0;
  boolean hasAPs=table.getAccessPatterns().size() > 0;
  int nColumns=0;
  int count=0;
  Collection<UniqueConstraint> uniqueConstraints=getUniqueUniqueContraints(table);
  boolean hasUCs=uniqueConstraints.size() > 0;
  if (hasPK) {
    PrimaryKey pk=table.getPrimaryKey();
    String pkName=getName(pk);
    StringBuilder theSB=new StringBuilder(NEW_LINE + TAB + CONSTRAINT+ SPACE+ pkName+ SPACE+ PRIMARY_KEY);
    nColumns=pk.getColumns().size();
    count=0;
    for (    Object col : pk.getColumns()) {
      count++;
      if (count == 1)       theSB.append(OPEN_BRACKET);
      theSB.append(getName((EObject)col));
      if (count < nColumns)       theSB.append(COMMA + SPACE);
 else       theSB.append(CLOSE_BRACKET);
    }
    String options=getOptions(pk);
    if (!StringUtilities.isEmpty(options)) {
      theSB.append(SPACE).append(options);
    }
    sb.append(theSB.toString());
    if ((hasFKs && includeFKs) || hasUCs || hasAPs)     sb.append(COMMA);
  }
  if (hasFKs && includeFKs) {
    int nFKs=table.getForeignKeys().size();
    int countFK=0;
    for (    Object obj : table.getForeignKeys()) {
      countFK++;
      ForeignKey fk=(ForeignKey)obj;
      String fkName=getName(fk);
      StringBuilder theSB=new StringBuilder(NEW_LINE + TAB + CONSTRAINT+ SPACE+ fkName+ SPACE+ FOREIGN_KEY);
      nColumns=fk.getColumns().size();
      count=0;
      for (      Object col : fk.getColumns()) {
        count++;
        if (count == 1)         theSB.append(OPEN_BRACKET);
        theSB.append(getName((EObject)col));
        if (count < nColumns)         theSB.append(COMMA + SPACE);
 else         theSB.append(CLOSE_BRACKET);
      }
      if (fk.getTable() != null) {
        UniqueKey uk=fk.getUniqueKey();
        BaseTable fkTableRef=(BaseTable)uk.getTable();
        String fkTableRefName=getName(fkTableRef);
        theSB.append(SPACE).append(REFERENCES).append(SPACE).append(fkTableRefName);
        if (uk instanceof UniqueConstraint) {
          UniqueConstraint ucRef=fkTableRef.getUniqueConstraints().get(0);
          nColumns=ucRef.getColumns().size();
          count=0;
          for (          Object col : ucRef.getColumns()) {
            count++;
            if (count == 1)             theSB.append(OPEN_BRACKET);
            theSB.append(getName((EObject)col));
            if (count < nColumns)             theSB.append(COMMA + SPACE);
 else             theSB.append(CLOSE_BRACKET);
          }
        }
 else {
          PrimaryKey pkRef=fkTableRef.getPrimaryKey();
          nColumns=pkRef.getColumns().size();
          count=0;
          for (          Object col : pkRef.getColumns()) {
            count++;
            if (count == 1)             theSB.append(OPEN_BRACKET);
            theSB.append(getName((EObject)col));
            if (count < nColumns)             theSB.append(COMMA + SPACE);
 else             theSB.append(CLOSE_BRACKET);
          }
        }
      }
      String options=getOptions(fk);
      if (!StringUtilities.isEmpty(options)) {
        theSB.append(SPACE).append(options);
      }
      sb.append(theSB.toString());
      if (countFK < nFKs)       sb.append(COMMA);
    }
    if (hasUCs || hasAPs)     sb.append(COMMA);
  }
  if (hasUCs) {
    int nUCs=uniqueConstraints.size();
    int ucCount=0;
    for (    Object obj : uniqueConstraints) {
      ucCount++;
      UniqueConstraint uc=(UniqueConstraint)obj;
      String name=getName(uc);
      StringBuilder theSB=new StringBuilder(NEW_LINE + TAB + CONSTRAINT+ SPACE+ name+ SPACE+ UNIQUE);
      nColumns=uc.getColumns().size();
      count=0;
      for (      Object col : uc.getColumns()) {
        count++;
        if (count == 1)         theSB.append(OPEN_BRACKET);
        theSB.append(getName((EObject)col));
        if (count < nColumns)         theSB.append(COMMA + SPACE);
 else         theSB.append(CLOSE_BRACKET);
      }
      String options=getOptions(uc);
      if (!StringUtilities.isEmpty(options)) {
        theSB.append(SPACE).append(options);
      }
      if (ucCount < nUCs)       sb.append(COMMA);
      sb.append(theSB.toString());
    }
  }
  if (!hasPK && !(hasFKs) && !hasUCs&& hasAPs) {
    sb.append(COMMA);
  }
  if (hasAPs) {
    int nAPs=table.getAccessPatterns().size();
    int apCount=0;
    for (    Object obj : table.getAccessPatterns()) {
      apCount++;
      AccessPattern ap=(AccessPattern)obj;
      String name=getName(ap);
      StringBuilder theSB=new StringBuilder(NEW_LINE + TAB + CONSTRAINT+ SPACE+ name+ SPACE+ ACCESSPATTERN);
      nColumns=ap.getColumns().size();
      count=0;
      for (      Object col : ap.getColumns()) {
        count++;
        if (count == 1)         theSB.append(OPEN_BRACKET);
        theSB.append(getName((EObject)col));
        if (count < nColumns)         theSB.append(COMMA + SPACE);
 else         theSB.append(CLOSE_BRACKET);
      }
      if (apCount < nAPs)       sb.append(COMMA);
      sb.append(theSB.toString());
    }
  }
  return sb.toString();
}",0.9978731631863882
101959,"private String table(Table table){
  if (!includeTables)   return null;
  StringBuilder sb=new StringBuilder();
  sb.append(CREATE_FOREIGN_TABLE).append(SPACE);
  sb.append(getName(table));
  sb.append(SPACE + OPEN_BRACKET);
  @SuppressWarnings(""String_Node_Str"") List<Column> columns=table.getColumns();
  int nColumns=columns.size();
  int count=0;
  for (  Column col : columns) {
    if (count == 0)     sb.append(NEW_LINE);
    String columnStr=getColumnDdl(col);
    count++;
    sb.append(TAB).append(columnStr);
    if (count < nColumns)     sb.append(COMMA + NEW_LINE);
  }
  if (table instanceof BaseTable) {
    String constraints=getContraints((BaseTable)table);
    if (constraints != null) {
      sb.append(constraints);
    }
  }
  sb.append(NEW_LINE + CLOSE_BRACKET);
  String options=getTableOptions(table);
  if (!StringUtilities.isEmpty(options)) {
    sb.append(SPACE).append(options);
  }
  sb.append(SEMI_COLON);
  sb.append(NEW_LINE);
  return sb.toString();
}","private String table(Table table){
  if (!includeTables)   return null;
  StringBuilder sb=new StringBuilder();
  sb.append(CREATE_FOREIGN_TABLE).append(SPACE);
  sb.append(getName(table));
  sb.append(SPACE + OPEN_BRACKET);
  @SuppressWarnings(""String_Node_Str"") List<Column> columns=table.getColumns();
  int nColumns=columns.size();
  int count=0;
  for (  Column col : columns) {
    if (count == 0)     sb.append(NEW_LINE);
    String columnStr=getColumnDdl(col);
    count++;
    sb.append(TAB).append(columnStr);
    if (count < nColumns)     sb.append(COMMA + NEW_LINE);
  }
  if (table instanceof BaseTable) {
    String constraints=getContraints((BaseTable)table);
    if (constraints != null) {
      sb.append(COMMA);
      sb.append(constraints);
    }
  }
  sb.append(NEW_LINE + CLOSE_BRACKET);
  String options=getTableOptions(table);
  if (!StringUtilities.isEmpty(options)) {
    sb.append(SPACE).append(options);
  }
  sb.append(SEMI_COLON);
  sb.append(NEW_LINE);
  return sb.toString();
}",0.9879518072289156
101960,"public CacheDirective(TeiidParser teiidParser,Boolean prefersMemory,Long ttl){
  this(teiidParser);
  this.prefersMemory=prefersMemory;
  this.ttl=ttl;
}","public CacheDirective(ITeiidServerVersion teiidVersion,Boolean prefersMemory,Long ttl){
  this(teiidVersion);
  this.prefersMemory=prefersMemory;
  this.ttl=ttl;
}",0.8924050632911392
101961,"/** 
 * @return version
 */
public ITeiidServerVersion getTeiidVersion(){
  return this.getTeiidParser().getVersion();
}","/** 
 * @return version
 */
public ITeiidServerVersion getTeiidVersion(){
  return this.teiidVersion;
}",0.9237668161434978
101962,"public CacheDirective(TeiidParser teiidParser,Boolean prefersMemory,Long ttl){
  this(teiidParser);
  this.prefersMemory=prefersMemory;
  this.ttl=ttl;
}","public CacheDirective(ITeiidServerVersion teiidVersion,Boolean prefersMemory,Long ttl){
  this(teiidVersion);
  this.prefersMemory=prefersMemory;
  this.ttl=ttl;
}",0.8924050632911392
101963,"/** 
 * @return version
 */
public ITeiidServerVersion getTeiidVersion(){
  return this.getTeiidParser().getVersion();
}","/** 
 * @return version
 */
public ITeiidServerVersion getTeiidVersion(){
  return this.teiidVersion;
}",0.9237668161434978
101964,"/** 
 * @param metadata
 * @param query
 * @throws Exception
 */
public void resolveWith(TempMetadataAdapter metadata,QueryCommand query) throws Exception {
  if (query.getWith() == null) {
    return;
  }
  LinkedHashSet<GroupSymbol> discoveredGroups=new LinkedHashSet<GroupSymbol>();
  for (  WithQueryCommand obj : query.getWith()) {
    QueryCommand queryExpression=obj.getCommand();
    getQueryResolver().setChildMetadata(queryExpression,query);
    QueryCommand recursive=null;
    if (getTeiidVersion().isGreaterThanOrEqualTo(Version.TEIID_8_10)) {
      try {
        getQueryResolver().resolveCommand(queryExpression,metadata.getMetadata(),false);
      }
 catch (      QueryResolverException e) {
        if (!(queryExpression instanceof SetQuery)) {
          throw e;
        }
        SetQuery setQuery=(SetQuery)queryExpression;
        if (setQuery.getOperation() != Operation.UNION || setQuery.getLimit() != null || setQuery.getOrderBy() != null || setQuery.getOption() != null) {
          throw e;
        }
        getQueryResolver().resolveCommand(queryExpression,metadata.getMetadata(),false);
        recursive=setQuery.getRightQuery();
      }
    }
 else {
      getQueryResolver().resolveCommand(queryExpression,metadata.getMetadata(),false);
    }
    if (!discoveredGroups.add(obj.getGroupSymbol())) {
      throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30101,obj.getGroupSymbol()));
    }
    List<? extends Expression> projectedSymbols=obj.getCommand().getProjectedSymbols();
    if (obj.getColumns() != null && !obj.getColumns().isEmpty()) {
      if (obj.getColumns().size() != projectedSymbols.size()) {
        throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30102,obj.getGroupSymbol()));
      }
      Iterator<ElementSymbol> iter=obj.getColumns().iterator();
      for (      Expression singleElementSymbol : projectedSymbols) {
        ElementSymbol es=iter.next();
        es.setType(singleElementSymbol.getType());
      }
      projectedSymbols=obj.getColumns();
    }
    TempMetadataID id=ResolverUtil.addTempGroup(metadata,obj.getGroupSymbol(),projectedSymbols,true);
    obj.getGroupSymbol().setMetadataID(metadata.getMetadataStore().getTempGroupID(obj.getGroupSymbol().getName()));
    obj.getGroupSymbol().setIsTempTable(true);
    List<GroupSymbol> groups=Collections.singletonList(obj.getGroupSymbol());
    ResolverVisitor visitor=new ResolverVisitor(obj.getTeiidVersion());
    if (obj.getColumns() != null && !obj.getColumns().isEmpty()) {
      for (      Expression singleElementSymbol : projectedSymbols) {
        visitor.resolveLanguageObject(singleElementSymbol,groups,metadata);
      }
    }
    if (obj.getColumns() != null && !obj.getColumns().isEmpty()) {
      Iterator<ElementSymbol> iter=obj.getColumns().iterator();
      for (      TempMetadataID colid : id.getElements()) {
        ElementSymbol es=iter.next();
        es.setMetadataID(colid);
        es.setGroupSymbol(obj.getGroupSymbol());
      }
    }
    if (recursive != null) {
      getQueryResolver().setChildMetadata(recursive,query);
      getQueryResolver().resolveCommand(recursive,metadata.getMetadata(),false);
      new SetQueryResolver(getQueryResolver()).resolveSetQuery(metadata,false,(SetQuery)queryExpression,((SetQuery)queryExpression).getLeftQuery(),recursive);
      obj.setRecursive(true);
    }
  }
}","/** 
 * @param metadata
 * @param query
 * @throws Exception
 */
public void resolveWith(TempMetadataAdapter metadata,QueryCommand query) throws Exception {
  if (query.getWith() == null) {
    return;
  }
  LinkedHashSet<GroupSymbol> discoveredGroups=new LinkedHashSet<GroupSymbol>();
  for (  WithQueryCommand obj : query.getWith()) {
    QueryCommand queryExpression=obj.getCommand();
    getQueryResolver().setChildMetadata(queryExpression,query);
    QueryCommand recursive=null;
    if (getTeiidVersion().isGreaterThanOrEqualTo(Version.TEIID_8_10)) {
      try {
        getQueryResolver().resolveCommand(queryExpression,metadata.getMetadata(),false);
      }
 catch (      QueryResolverException e) {
        if (!(queryExpression instanceof SetQuery)) {
          throw e;
        }
        SetQuery setQuery=(SetQuery)queryExpression;
        if (setQuery.getOperation() != Operation.UNION || setQuery.getLimit() != null || setQuery.getOrderBy() != null || setQuery.getOption() != null) {
          throw e;
        }
        getQueryResolver().resolveCommand(setQuery.getLeftQuery(),metadata.getMetadata(),false);
        recursive=setQuery.getRightQuery();
      }
    }
 else {
      getQueryResolver().resolveCommand(queryExpression,metadata.getMetadata(),false);
    }
    if (!discoveredGroups.add(obj.getGroupSymbol())) {
      throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30101,obj.getGroupSymbol()));
    }
    List<? extends Expression> projectedSymbols=obj.getCommand().getProjectedSymbols();
    if (obj.getColumns() != null && !obj.getColumns().isEmpty()) {
      if (obj.getColumns().size() != projectedSymbols.size()) {
        throw new QueryResolverException(Messages.gs(Messages.TEIID.TEIID30102,obj.getGroupSymbol()));
      }
      Iterator<ElementSymbol> iter=obj.getColumns().iterator();
      for (      Expression singleElementSymbol : projectedSymbols) {
        ElementSymbol es=iter.next();
        es.setType(singleElementSymbol.getType());
      }
      projectedSymbols=obj.getColumns();
    }
    TempMetadataID id=ResolverUtil.addTempGroup(metadata,obj.getGroupSymbol(),projectedSymbols,true);
    obj.getGroupSymbol().setMetadataID(metadata.getMetadataStore().getTempGroupID(obj.getGroupSymbol().getName()));
    obj.getGroupSymbol().setIsTempTable(true);
    List<GroupSymbol> groups=Collections.singletonList(obj.getGroupSymbol());
    ResolverVisitor visitor=new ResolverVisitor(obj.getTeiidVersion());
    if (obj.getColumns() != null && !obj.getColumns().isEmpty()) {
      for (      Expression singleElementSymbol : projectedSymbols) {
        visitor.resolveLanguageObject(singleElementSymbol,groups,metadata);
      }
    }
    if (obj.getColumns() != null && !obj.getColumns().isEmpty()) {
      Iterator<ElementSymbol> iter=obj.getColumns().iterator();
      for (      TempMetadataID colid : id.getElements()) {
        ElementSymbol es=iter.next();
        es.setMetadataID(colid);
        es.setGroupSymbol(obj.getGroupSymbol());
      }
    }
    if (recursive != null) {
      getQueryResolver().setChildMetadata(recursive,query);
      getQueryResolver().resolveCommand(recursive,metadata.getMetadata(),false);
      new SetQueryResolver(getQueryResolver()).resolveSetQuery(metadata,false,(SetQuery)queryExpression,((SetQuery)queryExpression).getLeftQuery(),recursive);
      obj.setRecursive(true);
    }
  }
}",0.994388659184879
101965,"/** 
 * Get the User SqlTransformation from a SqlTransformationMappingRoot. This is the nested SqlTransformation that is used to store the ""user"" (or non-uuid) SQL strings.
 * @param transMappingRoot the transformation mapping root
 * @return the mapping helper
 */
public static SqlTransformation getUserSqlTransformation(final SqlTransformationMappingRoot root){
  SqlTransformation nestedSqlTrans=null;
  if (root != null) {
    final MappingHelper helper=root.getHelper();
    if (helper != null) {
      for (final Iterator iter=helper.getNested().iterator(); iter.hasNext(); ) {
        final Object obj=iter.next();
        if (obj != null && obj instanceof SqlTransformation) {
          nestedSqlTrans=(SqlTransformation)obj;
          break;
        }
      }
    }
  }
  return nestedSqlTrans;
}","/** 
 * Get the User SqlTransformation from a SqlTransformationMappingRoot. This is the nested SqlTransformation that is used to store the ""user"" (or non-uuid) SQL strings.
 * @param root the transformation mapping root
 * @return the mapping helper
 */
public static SqlTransformation getUserSqlTransformation(final SqlTransformationMappingRoot root){
  SqlTransformation nestedSqlTrans=null;
  if (root != null) {
    final MappingHelper helper=root.getHelper();
    if (helper != null) {
      for (final Iterator iter=helper.getNested().iterator(); iter.hasNext(); ) {
        final Object obj=iter.next();
        if (obj != null && obj instanceof SqlTransformation) {
          nestedSqlTrans=(SqlTransformation)obj;
          break;
        }
      }
    }
  }
  return nestedSqlTrans;
}",0.99125
101966,"/** 
 * Copy the model to the target, only copying those nodes selected in the tree viewer.
 * @param sourceModelResource modelResource containing the old information
 * @param targetModelResource the target ModelResource
 * @param viewer the tree viewer; root is the ModelResource
 * @param extraProperties optional properties to tweak creation of objects.
 * @param copyAllDescriptions option to copy or suppress copying all descriptions
 * @param monitor a progress monitor
 * @throws ModelerCoreException 
 */
@Override public void copyModel(ModelResource sourceModelResource,ModelResource targetModelResource,Map extraProperties,boolean copyAllDescriptions,IProgressMonitor monitor) throws ModelerCoreException {
  List allSourceRootContents=sourceModelResource.getEmfResource().getContents();
  boolean sourceIsVirtual=sourceModelResource.getModelAnnotation().getModelType().equals(ModelType.VIRTUAL_LITERAL);
  boolean targetIsVirtual=targetModelResource.getModelAnnotation().getModelType().equals(ModelType.VIRTUAL_LITERAL);
  ModelType targetModelType=targetModelResource.getModelAnnotation().getModelType();
  List filteredChildren=new ArrayList(allSourceRootContents.size());
  for (Iterator iter=allSourceRootContents.iterator(); iter.hasNext(); ) {
    EObject nextChild=(EObject)iter.next();
    if (nextChild instanceof AnnotationContainer) {
      if (copyAllDescriptions) {
        filteredChildren.add(nextChild);
      }
    }
 else     if (nextChild instanceof TransformationContainer) {
      if (targetIsVirtual && sourceIsVirtual) {
        filteredChildren.add(nextChild);
      }
    }
 else     if (ModelObjectUtilities.isJdbcSource(nextChild)) {
      if (!targetIsVirtual) {
        filteredChildren.add(nextChild);
      }
    }
 else {
      filteredChildren.add(nextChild);
    }
  }
  Collection sourceFirstLevelChildrenCopies=null;
  try {
    sourceFirstLevelChildrenCopies=ModelerCore.getModelEditor().copyAll(filteredChildren);
    List targetChildren=targetModelResource.getEmfResource().getContents();
    for (int numKids=targetChildren.size(), i=0; i < numKids; ++i) {
      Object kid=targetChildren.get(i);
      if (kid instanceof ModelAnnotation) {
        targetChildren.remove(kid);
        break;
      }
    }
  }
 catch (  ModelerCoreException ex) {
    throw ex;
  }
  targetModelResource.getEmfResource().getContents().addAll(sourceFirstLevelChildrenCopies);
  targetModelResource.getModelAnnotation().setModelType(targetModelType);
  if (targetIsVirtual) {
    try {
      List eObjects=targetModelResource.getEObjects();
      for (Iterator iter=eObjects.iterator(); iter.hasNext(); ) {
        NewModelObjectHelperManager.helpCreate(iter.next(),extraProperties);
      }
    }
 catch (    ModelerCoreException err) {
      throw err;
    }
  }
}","/** 
 * Copy the model to the target, only copying those nodes selected in the tree viewer.
 * @param sourceModelResource modelResource containing the old information
 * @param targetModelResource the target ModelResource
 * @param viewer the tree viewer; root is the ModelResource
 * @param extraProperties optional properties to tweak creation of objects.
 * @param copyAllDescriptions option to copy or suppress copying all descriptions
 * @param monitor a progress monitor
 * @throws ModelerCoreException 
 */
@Override public void copyModel(ModelResource sourceModelResource,ModelResource targetModelResource,Map extraProperties,boolean copyAllDescriptions,IProgressMonitor monitor) throws ModelerCoreException {
  List allSourceRootContents=sourceModelResource.getEmfResource().getContents();
  boolean sourceIsVirtual=sourceModelResource.getModelAnnotation().getModelType().equals(ModelType.VIRTUAL_LITERAL);
  boolean targetIsVirtual=targetModelResource.getModelAnnotation().getModelType().equals(ModelType.VIRTUAL_LITERAL);
  ModelType targetModelType=targetModelResource.getModelAnnotation().getModelType();
  List filteredChildren=new ArrayList(allSourceRootContents.size());
  for (Iterator iter=allSourceRootContents.iterator(); iter.hasNext(); ) {
    EObject nextChild=(EObject)iter.next();
    if (nextChild instanceof AnnotationContainer) {
      if (copyAllDescriptions) {
        filteredChildren.add(nextChild);
      }
    }
 else     if (nextChild instanceof TransformationContainer) {
      if (targetIsVirtual && sourceIsVirtual) {
        filteredChildren.add(nextChild);
      }
    }
 else     if (ModelObjectUtilities.isJdbcSource(nextChild)) {
      if (!targetIsVirtual) {
        filteredChildren.add(nextChild);
      }
    }
 else {
      filteredChildren.add(nextChild);
    }
  }
  Collection sourceFirstLevelChildrenCopies=null;
  try {
    sourceFirstLevelChildrenCopies=ModelerCore.getModelEditor().copyAll(filteredChildren);
    List targetChildren=targetModelResource.getEmfResource().getContents();
    for (int numKids=targetChildren.size(), i=0; i < numKids; ++i) {
      Object kid=targetChildren.get(i);
      if (kid instanceof ModelAnnotation) {
        targetChildren.remove(kid);
        break;
      }
    }
  }
 catch (  ModelerCoreException ex) {
    throw ex;
  }
  SqlTransformationMappingRootSqlAspect.replaceTransformationLiteral(sourceFirstLevelChildrenCopies,sourceModelResource.getItemName(),targetModelResource.getItemName());
  targetModelResource.getEmfResource().getContents().addAll(sourceFirstLevelChildrenCopies);
  ModelAnnotation modelAnnotation=targetModelResource.getModelAnnotation();
  modelAnnotation.setModelType(targetModelType);
  EList imports=modelAnnotation.getModelImports();
  if (imports != null) {
    ResourceFinder resourceFinder;
    try {
      resourceFinder=ModelerCore.getModelContainer().getResourceFinder();
    }
 catch (    CoreException ex) {
      throw new ModelerCoreException(ex);
    }
    List<Object> mImports=Arrays.asList(imports.toArray());
    for (    Object mImport : mImports) {
      ModelImport modelImport=(ModelImport)mImport;
      URI uri=URI.createURI(modelImport.getModelLocation());
      if (resourceFinder.isBuiltInResource(uri))       continue;
      Resource resource=resourceFinder.findByWorkspaceUri(uri,targetModelResource.getEmfResource());
      if (resource == null) {
        imports.remove(mImport);
      }
    }
  }
  if (targetIsVirtual) {
    try {
      List eObjects=targetModelResource.getEObjects();
      for (Iterator iter=eObjects.iterator(); iter.hasNext(); ) {
        NewModelObjectHelperManager.helpCreate(iter.next(),extraProperties);
      }
    }
 catch (    ModelerCoreException err) {
      throw err;
    }
  }
}",0.8454739408716855
101967,"@Override protected void checkResource(IResource resource,IProgressMonitor progressMonitor,RefactoringStatus status){
  int readOnlyStatusLevel;
  String readOnlyStatusMsg;
  if (isSelectedOrChildResource(resource)) {
    readOnlyStatusLevel=IStatus.WARNING;
    readOnlyStatusMsg=RefactorResourcesUtils.getString(""String_Node_Str"",resource.getName());
  }
 else {
    readOnlyStatusLevel=IStatus.ERROR;
    readOnlyStatusMsg=RefactorResourcesUtils.getString(""String_Node_Str"",resource.getName());
  }
  RefactorResourcesUtils.checkResourceExists(resource,status);
  if (status.getSeverity() > IStatus.WARNING)   return;
  RefactorResourcesUtils.checkResourceSynched(resource,status);
  if (status.getSeverity() > IStatus.WARNING)   return;
  if (resource instanceof IProject)   checkProjectReadOnly((IProject)resource,status);
 else   RefactorResourcesUtils.checkResourceWritable(resource,status,readOnlyStatusLevel,readOnlyStatusMsg);
  if (status.getSeverity() > IStatus.WARNING)   return;
  RefactorResourcesUtils.checkExtensionManager(resource,RefactorType.DELETE,progressMonitor,status);
  if (status.getSeverity() > IStatus.WARNING)   return;
  RefactorResourcesUtils.checkModelResourceWritable(resource,status,readOnlyStatusLevel,readOnlyStatusMsg);
  if (status.getSeverity() > IStatus.WARNING)   return;
  RefactorResourcesUtils.checkSavedResource(resource,status);
  if (status.getSeverity() > IStatus.WARNING)   return;
  if (!getResources().contains(resource)) {
    RefactorResourcesUtils.checkOpenEditors(resource,status);
  }
}","@Override protected void checkResource(IResource resource,IProgressMonitor progressMonitor,RefactoringStatus status){
  int readOnlyStatusLevel;
  String readOnlyStatusMsg;
  if (isSelectedOrChildResource(resource)) {
    readOnlyStatusLevel=IStatus.WARNING;
    readOnlyStatusMsg=RefactorResourcesUtils.getString(""String_Node_Str"",resource.getName());
  }
 else {
    readOnlyStatusLevel=IStatus.ERROR;
    readOnlyStatusMsg=RefactorResourcesUtils.getString(""String_Node_Str"",resource.getName());
  }
  RefactorResourcesUtils.checkResourceExists(resource,status);
  if (status.getSeverity() > IStatus.WARNING)   return;
  RefactorResourcesUtils.checkResourceSynched(resource,status);
  if (status.getSeverity() > IStatus.WARNING)   return;
  if (resource instanceof IProject)   checkProjectReadOnly((IProject)resource,status);
 else   RefactorResourcesUtils.checkResourceWritable(resource,status,readOnlyStatusLevel,readOnlyStatusMsg);
  if (status.getSeverity() > IStatus.WARNING)   return;
  RefactorResourcesUtils.checkExtensionManager(resource,RefactorType.DELETE,progressMonitor,status);
  if (status.getSeverity() > IStatus.WARNING)   return;
  RefactorResourcesUtils.checkSavedResource(resource,status);
  if (status.getSeverity() > IStatus.WARNING)   return;
  if (!getResources().contains(resource)) {
    RefactorResourcesUtils.checkOpenEditors(resource,status);
  }
}",0.943874058863792
101968,"/** 
 * Create EMF ForeignKey from the supplied RelationalReference
 * @param ref the relational fk object
 * @param baseTable the table parent of the fk
 * @param modelResource the model resource
 * @return the foreign key object
 */
public EObject createForeignKey(RelationalReference ref,BaseTable baseTable,ModelResource modelResource){
  CoreArgCheck.isInstanceOf(RelationalForeignKey.class,ref);
  RelationalForeignKey fkRef=(RelationalForeignKey)ref;
  final ForeignKey foreignKey=FACTORY.createForeignKey();
  foreignKey.setTable(baseTable);
  foreignKey.setName(fkRef.getName());
  foreignKey.setNameInSource(fkRef.getNameInSource());
  foreignKey.setForeignKeyMultiplicity(getMultiplictyKind(fkRef.getForeignKeyMultiplicity()));
  foreignKey.setPrimaryKeyMultiplicity(getMultiplictyKind(fkRef.getPrimaryKeyMultiplicity()));
  final List keyColumns=foreignKey.getColumns();
  for (  RelationalColumn relColumn : fkRef.getColumns()) {
    Column column=getColumn(relColumn.getName(),baseTable);
    if (column != null) {
      keyColumns.add(column);
    }
  }
  BaseTable fkTable=getTable(fkRef.getUniqueKeyTableName(),modelResource);
  String ukRefName=fkRef.getUniqueKeyName();
  if (fkTable != null && ukRefName != null) {
    if (fkTable.getPrimaryKey() != null && fkTable.getPrimaryKey().getName().equalsIgnoreCase(ukRefName)) {
      foreignKey.setUniqueKey(fkTable.getPrimaryKey());
    }
 else     if (fkTable.getUniqueConstraints().isEmpty()) {
      for (      Object key : fkTable.getUniqueConstraints()) {
        String keyName=this.getModelEditor().getName((UniqueKey)key);
        if (keyName.equalsIgnoreCase(ukRefName)) {
          foreignKey.setUniqueKey((UniqueKey)key);
        }
      }
    }
  }
  updateDeferredList(fkRef,foreignKey);
  return foreignKey;
}","/** 
 * Create EMF ForeignKey from the supplied RelationalReference
 * @param ref the relational fk object
 * @param baseTable the table parent of the fk
 * @param modelResource the model resource
 * @return the foreign key object
 */
public EObject createForeignKey(RelationalReference ref,BaseTable baseTable,ModelResource modelResource){
  CoreArgCheck.isInstanceOf(RelationalForeignKey.class,ref);
  RelationalForeignKey fkRef=(RelationalForeignKey)ref;
  final ForeignKey foreignKey=FACTORY.createForeignKey();
  foreignKey.setTable(baseTable);
  foreignKey.setName(fkRef.getName());
  foreignKey.setNameInSource(fkRef.getNameInSource());
  foreignKey.setForeignKeyMultiplicity(getMultiplictyKind(fkRef.getForeignKeyMultiplicity()));
  foreignKey.setPrimaryKeyMultiplicity(getMultiplictyKind(fkRef.getPrimaryKeyMultiplicity()));
  final List keyColumns=foreignKey.getColumns();
  for (  RelationalColumn relColumn : fkRef.getColumns()) {
    Column column=getColumn(relColumn.getName(),baseTable);
    if (column != null) {
      keyColumns.add(column);
    }
  }
  BaseTable fkTable=getTable(fkRef.getUniqueKeyTableName(),modelResource);
  String ukRefName=fkRef.getUniqueKeyName();
  if (fkTable != null && ukRefName != null) {
    if (fkTable.getPrimaryKey() != null && fkTable.getPrimaryKey().getName().equalsIgnoreCase(ukRefName)) {
      foreignKey.setUniqueKey(fkTable.getPrimaryKey());
    }
 else     if (!fkTable.getUniqueConstraints().isEmpty()) {
      for (      Object key : fkTable.getUniqueConstraints()) {
        String keyName=this.getModelEditor().getName((UniqueKey)key);
        if (keyName.equalsIgnoreCase(ukRefName)) {
          foreignKey.setUniqueKey((UniqueKey)key);
        }
      }
    }
  }
  updateDeferredList(fkRef,foreignKey);
  return foreignKey;
}",0.9997205923442304
101969,"/** 
 * EMF Model Generator execute
 * @param diffReport the difference report
 * @param targetModelResource the model resource
 * @param progressMonitor progress monitor
 * @param totalWork the total work units to be done
 * @return the execution status
 * @throws ModelerCoreException if problems building model
 */
public IStatus execute(DifferenceReport diffReport,ModelResource targetModelResource,IProgressMonitor progressMonitor,int totalWork) throws ModelerCoreException {
  clearLists();
  int workUnit=totalWork / 5;
  addRelationalExtensionAssistant(targetModelResource);
  progressMonitor.setTaskName(Messages.emfModelGenerator_generatingModel);
  progressMonitor.subTask(Messages.emfModelGenerator_deletingPrimaryObjects);
  List<RelationalReference> objsToDelete=diffReport.getObjectsToDelete().getList();
  for (  RelationalReference child : objsToDelete) {
    if (child.isChecked()) {
      deleteMatchingChild(targetModelResource,child);
    }
  }
  progressMonitor.worked(workUnit);
  progressMonitor.subTask(Messages.emfModelGenerator_creatingPrimaryObjects);
  List<RelationalReference> objsToCreate=diffReport.getObjectsToCreate().getList();
  for (  RelationalReference child : objsToCreate) {
    if (child.isChecked()) {
      createObject(child,targetModelResource);
    }
  }
  progressMonitor.worked(workUnit);
  progressMonitor.subTask(Messages.emfModelGenerator_updatingPrimaryObjects);
  List<RelationalReference> objsToUpdate=diffReport.getObjectsToUpdate().getList();
  for (  RelationalReference child : objsToUpdate) {
    if (child.isChecked()) {
      deleteMatchingChild(targetModelResource,child);
      createObject(child,targetModelResource);
    }
  }
  progressMonitor.worked(workUnit);
  progressMonitor.subTask(Messages.emfModelGenerator_creatingSecondaryObjects);
  if (!pkList.isEmpty()) {
    for (    DeferredPair item : pkList) {
      RelationalPrimaryKey pk=(RelationalPrimaryKey)item.getRelationalReference();
      BaseTable table=(BaseTable)item.getEObject();
      createPrimaryKey(pk,table,targetModelResource);
    }
  }
  if (!fkList.isEmpty()) {
    for (    DeferredPair item : fkList) {
      RelationalForeignKey fk=(RelationalForeignKey)item.getRelationalReference();
      BaseTable table=(BaseTable)item.getEObject();
      createForeignKey(fk,table,targetModelResource);
    }
  }
  if (!apList.isEmpty()) {
    for (    DeferredPair item : apList) {
      RelationalAccessPattern ap=(RelationalAccessPattern)item.getRelationalReference();
      Table table=(Table)item.getEObject();
      createAccessPattern(ap,table,targetModelResource);
    }
  }
  if (!ucList.isEmpty()) {
    for (    DeferredPair item : ucList) {
      RelationalUniqueConstraint uc=(RelationalUniqueConstraint)item.getRelationalReference();
      BaseTable table=(BaseTable)item.getEObject();
      createUniqueConstraint(uc,table,targetModelResource);
    }
  }
  if (!indexList.isEmpty()) {
    for (    RelationalIndex index : indexList) {
      createIndex(index,targetModelResource);
    }
  }
  progressMonitor.worked(workUnit);
  progressMonitor.subTask(Messages.emfModelGenerator_settingExtensionProps);
  if (!deferredProcessingList.isEmpty()) {
    for (    DeferredPair item : deferredProcessingList) {
      RelationalReference relRef=item.getRelationalReference();
      EObject eObj=item.getEObject();
      processExtensionProperties(targetModelResource,relRef,eObj);
      setDescription(eObj,relRef.getDescription(),targetModelResource);
    }
  }
  progressMonitor.worked(workUnit);
  MultiStatus multiStatus=new MultiStatus(RelationalPlugin.PLUGIN_ID,IStatus.OK,Messages.emfModelGenerator_modelGenerationSuccess,null);
  if (!this.propsWithNoAssistant.isEmpty()) {
    StringBuffer sb=new StringBuffer();
    Iterator iter=this.propsWithNoAssistant.iterator();
    while (iter.hasNext()) {
      String prop=(String)iter.next();
      sb.append(prop);
      if (iter.hasNext())       sb.append(""String_Node_Str"");
    }
    multiStatus.add(new Status(IStatus.WARNING,RelationalPlugin.PLUGIN_ID,0,NLS.bind(Messages.emfModelGenerator_warningAssistantForPropertyNotFound,sb.toString()),null));
  }
 else   if (!this.metaclassesWithNoAssistant.isEmpty()) {
    StringBuffer sb=new StringBuffer();
    Iterator iter=this.metaclassesWithNoAssistant.iterator();
    while (iter.hasNext()) {
      String prop=(String)iter.next();
      sb.append(prop);
      if (iter.hasNext())       sb.append(""String_Node_Str"");
    }
    multiStatus.add(new Status(IStatus.WARNING,RelationalPlugin.PLUGIN_ID,0,NLS.bind(Messages.emfModelGenerator_warningAssistantForMetaclassNotFound,sb.toString()),null));
  }
  clearLists();
  return multiStatus;
}","/** 
 * EMF Model Generator execute
 * @param diffReport the difference report
 * @param targetModelResource the model resource
 * @param progressMonitor progress monitor
 * @param totalWork the total work units to be done
 * @return the execution status
 * @throws ModelerCoreException if problems building model
 */
public IStatus execute(DifferenceReport diffReport,ModelResource targetModelResource,IProgressMonitor progressMonitor,int totalWork) throws ModelerCoreException {
  clearLists();
  int workUnit=totalWork / 5;
  addRelationalExtensionAssistant(targetModelResource);
  progressMonitor.setTaskName(Messages.emfModelGenerator_generatingModel);
  progressMonitor.subTask(Messages.emfModelGenerator_deletingPrimaryObjects);
  List<RelationalReference> objsToDelete=diffReport.getObjectsToDelete().getList();
  for (  RelationalReference child : objsToDelete) {
    if (child.isChecked()) {
      deleteMatchingChild(targetModelResource,child);
    }
  }
  progressMonitor.worked(workUnit);
  progressMonitor.subTask(Messages.emfModelGenerator_creatingPrimaryObjects);
  List<RelationalReference> objsToCreate=diffReport.getObjectsToCreate().getList();
  for (  RelationalReference child : objsToCreate) {
    if (child.isChecked()) {
      createObject(child,targetModelResource);
    }
  }
  progressMonitor.worked(workUnit);
  progressMonitor.subTask(Messages.emfModelGenerator_updatingPrimaryObjects);
  List<RelationalReference> objsToUpdate=diffReport.getObjectsToUpdate().getList();
  for (  RelationalReference child : objsToUpdate) {
    if (child.isChecked()) {
      deleteMatchingChild(targetModelResource,child);
      createObject(child,targetModelResource);
    }
  }
  progressMonitor.worked(workUnit);
  progressMonitor.subTask(Messages.emfModelGenerator_creatingSecondaryObjects);
  if (!pkList.isEmpty()) {
    for (    DeferredPair item : pkList) {
      RelationalPrimaryKey pk=(RelationalPrimaryKey)item.getRelationalReference();
      BaseTable table=(BaseTable)item.getEObject();
      createPrimaryKey(pk,table,targetModelResource);
    }
  }
  if (!ucList.isEmpty()) {
    for (    DeferredPair item : ucList) {
      RelationalUniqueConstraint uc=(RelationalUniqueConstraint)item.getRelationalReference();
      BaseTable table=(BaseTable)item.getEObject();
      createUniqueConstraint(uc,table,targetModelResource);
    }
  }
  if (!apList.isEmpty()) {
    for (    DeferredPair item : apList) {
      RelationalAccessPattern ap=(RelationalAccessPattern)item.getRelationalReference();
      Table table=(Table)item.getEObject();
      createAccessPattern(ap,table,targetModelResource);
    }
  }
  if (!indexList.isEmpty()) {
    for (    RelationalIndex index : indexList) {
      createIndex(index,targetModelResource);
    }
  }
  if (!fkList.isEmpty()) {
    for (    DeferredPair item : fkList) {
      RelationalForeignKey fk=(RelationalForeignKey)item.getRelationalReference();
      BaseTable table=(BaseTable)item.getEObject();
      createForeignKey(fk,table,targetModelResource);
    }
  }
  progressMonitor.worked(workUnit);
  progressMonitor.subTask(Messages.emfModelGenerator_settingExtensionProps);
  if (!deferredProcessingList.isEmpty()) {
    for (    DeferredPair item : deferredProcessingList) {
      RelationalReference relRef=item.getRelationalReference();
      EObject eObj=item.getEObject();
      processExtensionProperties(targetModelResource,relRef,eObj);
      setDescription(eObj,relRef.getDescription(),targetModelResource);
    }
  }
  progressMonitor.worked(workUnit);
  MultiStatus multiStatus=new MultiStatus(RelationalPlugin.PLUGIN_ID,IStatus.OK,Messages.emfModelGenerator_modelGenerationSuccess,null);
  if (!this.propsWithNoAssistant.isEmpty()) {
    StringBuffer sb=new StringBuffer();
    Iterator iter=this.propsWithNoAssistant.iterator();
    while (iter.hasNext()) {
      String prop=(String)iter.next();
      sb.append(prop);
      if (iter.hasNext())       sb.append(""String_Node_Str"");
    }
    multiStatus.add(new Status(IStatus.WARNING,RelationalPlugin.PLUGIN_ID,0,NLS.bind(Messages.emfModelGenerator_warningAssistantForPropertyNotFound,sb.toString()),null));
  }
 else   if (!this.metaclassesWithNoAssistant.isEmpty()) {
    StringBuffer sb=new StringBuffer();
    Iterator iter=this.metaclassesWithNoAssistant.iterator();
    while (iter.hasNext()) {
      String prop=(String)iter.next();
      sb.append(prop);
      if (iter.hasNext())       sb.append(""String_Node_Str"");
    }
    multiStatus.add(new Status(IStatus.WARNING,RelationalPlugin.PLUGIN_ID,0,NLS.bind(Messages.emfModelGenerator_warningAssistantForMetaclassNotFound,sb.toString()),null));
  }
  clearLists();
  return multiStatus;
}",0.8522388059701492
101970,"/** 
 * Create an EMF object, using the provided RelationalReference object
 * @param relationalRef the relational model object
 * @param modelResource the model resource
 * @return the new EMF object
 * @throws ModelWorkspaceException if problems building model
 */
public EObject createObject(RelationalReference relationalRef,ModelResource modelResource) throws ModelWorkspaceException {
  EObject newEObject=null;
switch (relationalRef.getType()) {
case TYPES.MODEL:
{
    }
  break;
case TYPES.SCHEMA:
{
}
break;
case TYPES.CATALOG:
{
}
break;
case TYPES.TABLE:
{
if (relationalRef instanceof RelationalViewTable) {
newEObject=VIEW_MODEL_FACTORY.buildObject(relationalRef,modelResource,new NullProgressMonitor());
}
 else {
newEObject=createBaseTable(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
}
break;
case TYPES.VIEW:
{
newEObject=createView(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
break;
case TYPES.PROCEDURE:
{
if (relationalRef instanceof RelationalViewProcedure) {
newEObject=VIEW_MODEL_FACTORY.buildObject(relationalRef,modelResource,new NullProgressMonitor());
}
 else {
newEObject=createProcedure(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
}
break;
case TYPES.INDEX:
{
newEObject=createIndex(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
break;
case TYPES.UNDEFINED:
default :
{
RelationalPlugin.Util.log(IStatus.WARNING,NLS.bind(Messages.emfModelGenerator_unknown_object_type_0_cannot_be_processed,relationalRef.getName()));
}
break;
}
return newEObject;
}","/** 
 * Create an EMF object, using the provided RelationalReference object
 * @param relationalRef the relational model object
 * @param modelResource the model resource
 * @return the new EMF object
 * @throws ModelWorkspaceException if problems building model
 */
public EObject createObject(RelationalReference relationalRef,ModelResource modelResource) throws ModelWorkspaceException {
  EObject newEObject=null;
switch (relationalRef.getType()) {
case TYPES.MODEL:
{
    }
  break;
case TYPES.SCHEMA:
{
}
break;
case TYPES.CATALOG:
{
}
break;
case TYPES.TABLE:
{
if (relationalRef instanceof RelationalViewTable) {
newEObject=createBaseTable(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
VIEW_MODEL_FACTORY.addTransformation((BaseTable)newEObject,(RelationalViewTable)relationalRef);
}
 else {
newEObject=createBaseTable(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
}
break;
case TYPES.VIEW:
{
newEObject=createView(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
break;
case TYPES.PROCEDURE:
{
if (relationalRef instanceof RelationalViewProcedure) {
newEObject=VIEW_MODEL_FACTORY.buildObject(relationalRef,modelResource,new NullProgressMonitor());
}
 else {
newEObject=createProcedure(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
}
break;
case TYPES.INDEX:
{
newEObject=createIndex(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
break;
case TYPES.UNDEFINED:
default :
{
RelationalPlugin.Util.log(IStatus.WARNING,NLS.bind(Messages.emfModelGenerator_unknown_object_type_0_cannot_be_processed,relationalRef.getName()));
}
break;
}
return newEObject;
}",0.9293337179117392
101971,"/** 
 * @see org.eclipse.ui.IWorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
 * @since 4.0
 */
@Override public void createPartControl(final Composite parent){
  this.ctrl=parent;
  ComponentLoadingManager manager=ComponentLoadingManager.getInstance();
  manager.manageLoading(this);
}","/** 
 * @see org.eclipse.ui.IWorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
 * @since 4.0
 */
@Override public void createPartControl(final Composite parent){
  internalCreatePartControl(parent);
  ComponentLoadingManager manager=ComponentLoadingManager.getInstance();
  manager.manageLoading(this);
}",0.6016
101972,"private void internalCreatePartControl(){
  Composite parent=(Composite)this.ctrl;
  GridDataFactory.fillDefaults().grab(true,true).applyTo(parent);
  GridLayoutFactory.fillDefaults().applyTo(parent);
  toolkit=new FormToolkit(parent.getDisplay());
  contentsPanel=toolkit.createComposite(parent);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(contentsPanel);
  GridLayoutFactory.fillDefaults().applyTo(contentsPanel);
  super.createPartControl(contentsPanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(getTreeViewer().getTree());
  createServerStatusPanel(contentsPanel);
  new ModelExplorerSelectionHelper(getTreeViewer());
  if (UiPlugin.getDefault().isProductContextSupported(IModelerProductContexts.Views.ID_MODEL_PROJECT_FILTER)) {
    ModelWorkspaceViewerFilter filter=new ModelWorkspaceViewerFilter(true,true,true);
    filter.setResourceFilter(getPatternFilter());
    getTreeViewer().addFilter(filter);
  }
  final IWorkbenchWindow wdw=UiPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow();
  final ModelerActionService svc=(ModelerActionService)UiPlugin.getDefault().getActionService(getSite().getPage());
  final IActionBars bars=getViewSite().getActionBars();
  this.copyAction=new ModelExplorerCopyAction(bars,svc);
  wdw.getSelectionService().addSelectionListener(this.copyAction);
  this.removeProjectAction=new RemoveProjectAction();
  wdw.getSelectionService().addSelectionListener(this.removeProjectAction);
  svc.registerDefaultGlobalActions(bars);
  actionsMap=new ModelerGlobalActionsMap();
  try {
    bars.setGlobalActionHandler(EclipseGlobalActions.COPY,copyAction);
    renameAction=new ModelExplorerRenameAction(wdw.getShell(),getTreeViewer());
    renameAction.selectionChanged((IStructuredSelection)getTreeViewer().getSelection());
    actionsMap.put(EclipseGlobalActions.RENAME,renameAction);
    bars.setGlobalActionHandler(EclipseGlobalActions.RENAME,renameAction);
    final IAction deleteAction=svc.getAction(DeleteAction.class);
    bars.setGlobalActionHandler(ActionFactory.DELETE.getId(),deleteAction);
    final IAction pasteAction=svc.getAction(PasteInResourceAction.class);
    bars.setGlobalActionHandler(ActionFactory.PASTE.getId(),pasteAction);
    moveAction=new ModelExplorerMoveAction(wdw.getShell(),getTreeViewer());
    bars.setGlobalActionHandler(ActionFactory.MOVE.getId(),moveAction);
    bars.updateActionBars();
  }
 catch (  final CoreException err) {
    Util.log(err);
    WidgetUtil.showError(CREATE_RENAME_ACTION_ERROR_MESSAGE);
  }
  propertyAction=new PropertyDialogAction(getTreeViewer().getControl(),getTreeViewer());
  bars.setGlobalActionHandler(ActionFactory.PROPERTIES.getId(),propertyAction);
  notificationHandler=getNotifyChangedListener();
  if (notificationHandler != null) {
    ModelUtilities.addNotifyChangedListener(notificationHandler);
  }
  this.partListener=new IPartListener(){
    @Override public void partActivated(    IWorkbenchPart part){
    }
    @Override public void partBroughtToTop(    IWorkbenchPart part){
    }
    @Override public void partClosed(    IWorkbenchPart part){
    }
    @Override public void partDeactivated(    IWorkbenchPart part){
    }
    @Override public void partOpened(    IWorkbenchPart part){
      checkResource(part);
    }
    private void checkResource(    final IWorkbenchPart part){
      if (part instanceof ModelEditor) {
        Display.getCurrent().asyncExec(new Runnable(){
          @Override public void run(){
            if (!getViewer().getTree().isDisposed()) {
              getViewer().refresh(((ModelEditor)part).getModelFile());
            }
          }
        }
);
      }
    }
  }
;
  getSite().getPage().addPartListener(this.partListener);
  markerListener=new IResourceChangeListener(){
    @Override public void resourceChanged(    IResourceChangeEvent event){
      final IMarkerDelta[] deltas=event.findMarkerDeltas(null,true);
      if (deltas != null && deltas.length > 0) {
        Set<IProject> projects=new HashSet<IProject>();
        for (int i=0; i < deltas.length; ++i) {
          projects.add(deltas[i].getResource().getProject());
        }
        final Iterator<IProject> itr=projects.iterator();
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            if (!getTreeViewer().getTree().isDisposed()) {
              TreeViewer viewer=getTreeViewer();
              while (itr.hasNext()) {
                IProject project=itr.next();
                viewer.refresh(project,true);
              }
            }
          }
        }
);
      }
    }
  }
;
  ModelerCore.getWorkspace().addResourceChangeListener(markerListener);
  addCustomListeners();
  IUndoContext undoContext=(IUndoContext)ResourcesPlugin.getWorkspace().getAdapter(IUndoContext.class);
  UndoActionHandler undoAction=new UndoActionHandler(getSite(),undoContext);
  undoAction.setActionDefinitionId(IWorkbenchCommandConstants.EDIT_UNDO);
  getViewSite().getActionBars().setGlobalActionHandler(ActionFactory.UNDO.getId(),undoAction);
  IContributionItem[] items=bars.getToolBarManager().getItems();
  Collection<IContributionItem> itemsToRemove=new ArrayList<IContributionItem>();
  for (  IContributionItem item : items) {
    if (item instanceof ActionContributionItem) {
      if (((ActionContributionItem)item).getAction() instanceof BackAction) {
        itemsToRemove.add(item);
      }
      if (((ActionContributionItem)item).getAction() instanceof ForwardAction) {
        itemsToRemove.add(item);
      }
      if (((ActionContributionItem)item).getAction() instanceof GoIntoAction) {
        itemsToRemove.add(item);
      }
    }
  }
  for (  IContributionItem item : itemsToRemove) {
    bars.getToolBarManager().remove(item);
  }
}","private void internalCreatePartControl(Composite parent){
  GridDataFactory.fillDefaults().grab(true,true).applyTo(parent);
  GridLayoutFactory.fillDefaults().applyTo(parent);
  toolkit=new FormToolkit(parent.getDisplay());
  contentsPanel=toolkit.createComposite(parent);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(contentsPanel);
  GridLayoutFactory.fillDefaults().applyTo(contentsPanel);
  super.createPartControl(contentsPanel);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(getTreeViewer().getTree());
  createServerStatusPanel(contentsPanel);
  new ModelExplorerSelectionHelper(getTreeViewer());
}",0.1916392672616251
101973,"@Override public void manageLoad(Properties args){
  Runnable runnable=new Runnable(){
    @Override public void run(){
      internalCreatePartControl();
    }
  }
;
  UiUtil.runInSwtThread(runnable,true);
}","@Override public void manageLoad(Properties args){
  Runnable runnable=new Runnable(){
    @Override public void run(){
      applyCustomActionService();
    }
  }
;
  UiUtil.runInSwtThread(runnable,false);
}",0.8701923076923077
101974,"/** 
 * Handles a selection changed event from the viewer. Overridden (copied, actually) from ResourceNavigator, with code to update the status line commented out, since we are adding a separate SelectionChangedListener to take care of that. Still updates the action bars and links to editor.
 * @param event the selection event
 * @since 4.0
 */
@Override protected void handleSelectionChanged(SelectionChangedEvent event){
  IStructuredSelection sel=(IStructuredSelection)event.getSelection();
  updateActionBars(sel);
  linkToEditor(sel);
  super.handleSelectionChanged(event);
}","/** 
 * Handles a selection changed event from the viewer. Overridden (copied, actually) from ResourceNavigator, with code to update the status line commented out, since we are adding a separate SelectionChangedListener to take care of that. Still updates the action bars and links to editor.
 * @param event the selection event
 * @since 4.0
 */
@Override protected void handleSelectionChanged(SelectionChangedEvent event){
  IStructuredSelection sel=(IStructuredSelection)event.getSelection();
  updateActionBars(sel);
  linkToEditor(sel);
}",0.9653333333333334
101975,"/** 
 * Create EMF Column from the supplied RelationalReference
 * @param ref the relational object
 * @param procedureResult the procedure result set
 * @param modelResource the model resource
 * @return the new object
 */
public EObject createColumn(RelationalReference ref,ProcedureResult procedureResult,ModelResource modelResource){
  CoreArgCheck.isInstanceOf(RelationalColumn.class,ref);
  RelationalColumn columnRef=(RelationalColumn)ref;
  Column column=FACTORY.createColumn();
  column.setOwner(procedureResult);
  column.setName(columnRef.getName());
  column.setNameInSource(columnRef.getNameInSource());
  column.setAutoIncremented(columnRef.isAutoIncremented());
  column.setCaseSensitive(columnRef.isCaseSensitive());
  column.setCharacterSetName(columnRef.getCharacterSetName());
  column.setCollationName(columnRef.getCollationName());
  column.setCurrency(columnRef.isCurrency());
  column.setDefaultValue(columnRef.getDefaultValue());
  column.setDistinctValueCount(columnRef.getDistinctValueCount());
  column.setFixedLength(columnRef.isLengthFixed());
  column.setFormat(columnRef.getFormat());
  column.setLength(columnRef.getLength());
  column.setMaximumValue(columnRef.getMaximumValue());
  column.setMinimumValue(columnRef.getMinimumValue());
  column.setNativeType(columnRef.getNativeType());
  String nullableStr=columnRef.getNullable();
  column.setNullable(getNullableType(nullableStr));
  column.setNullValueCount(columnRef.getNullValueCount());
  column.setPrecision(columnRef.getPrecision());
  column.setRadix(columnRef.getRadix());
  column.setScale(columnRef.getScale());
  column.setSearchability(getSearchabilityType(columnRef.getSearchability()));
  column.setSelectable(columnRef.isSelectable());
  column.setSigned(columnRef.isSigned());
  column.setUpdateable(columnRef.isUpdateable());
  String dType=columnRef.getDatatype();
  if (dType == null || dType.length() == 0) {
    dType=DatatypeProcessor.DEFAULT_DATATYPE;
  }
  EObject datatype=this.datatypeProcessor.findDatatype(dType);
  if (datatype != null) {
    column.setType(datatype);
    String dTypeName=this.modelEditor.getName(datatype);
    int datatypeLength=columnRef.getLength();
    if (datatypeLength == 0 && DatatypeProcessor.DEFAULT_DATATYPE.equalsIgnoreCase(dTypeName)) {
      columnRef.setLength(DatatypeProcessor.DEFAULT_DATATYPE_LENGTH);
    }
 else {
      columnRef.setLength(datatypeLength);
    }
  }
  updateDeferredList(columnRef,column);
  return column;
}","/** 
 * Create EMF Column from the supplied RelationalReference
 * @param ref the relational object
 * @param procedureResult the procedure result set
 * @param modelResource the model resource
 * @return the new object
 */
public EObject createColumn(RelationalReference ref,ProcedureResult procedureResult,ModelResource modelResource){
  CoreArgCheck.isInstanceOf(RelationalColumn.class,ref);
  RelationalColumn columnRef=(RelationalColumn)ref;
  Column column=FACTORY.createColumn();
  column.setOwner(procedureResult);
  column.setName(columnRef.getName());
  column.setNameInSource(columnRef.getNameInSource());
  column.setAutoIncremented(columnRef.isAutoIncremented());
  column.setCaseSensitive(columnRef.isCaseSensitive());
  column.setCharacterSetName(columnRef.getCharacterSetName());
  column.setCollationName(columnRef.getCollationName());
  column.setCurrency(columnRef.isCurrency());
  column.setDefaultValue(columnRef.getDefaultValue());
  column.setDistinctValueCount(columnRef.getDistinctValueCount());
  column.setFixedLength(columnRef.isLengthFixed());
  column.setFormat(columnRef.getFormat());
  column.setLength(columnRef.getLength());
  column.setMaximumValue(columnRef.getMaximumValue());
  column.setMinimumValue(columnRef.getMinimumValue());
  column.setNativeType(columnRef.getNativeType());
  String nullableStr=columnRef.getNullable();
  column.setNullable(getNullableType(nullableStr));
  column.setNullValueCount(columnRef.getNullValueCount());
  column.setPrecision(columnRef.getPrecision());
  column.setRadix(columnRef.getRadix());
  column.setScale(columnRef.getScale());
  column.setSearchability(getSearchabilityType(columnRef.getSearchability()));
  column.setSelectable(columnRef.isSelectable());
  column.setSigned(columnRef.isSigned());
  column.setUpdateable(columnRef.isUpdateable());
  String dType=columnRef.getDatatype();
  if (dType == null || dType.length() == 0) {
    dType=DatatypeProcessor.DEFAULT_DATATYPE;
  }
  EObject datatype=this.datatypeProcessor.findDatatype(dType);
  if (datatype != null) {
    column.setType(datatype);
    String dTypeName=this.getModelEditor().getName(datatype);
    int datatypeLength=columnRef.getLength();
    if (datatypeLength == 0 && DatatypeProcessor.DEFAULT_DATATYPE.equalsIgnoreCase(dTypeName)) {
      columnRef.setLength(DatatypeProcessor.DEFAULT_DATATYPE_LENGTH);
    }
 else {
      columnRef.setLength(datatypeLength);
    }
  }
  updateDeferredList(columnRef,column);
  return column;
}",0.998589562764457
101976,"/** 
 * Delete the emf object the targetResource that matches the supplied RelationalReference
 * @param targetResource the target model
 * @param ref the relational reference
 * @throws ModelerCoreException
 */
private void deleteMatchingChild(ModelResource targetResource,RelationalReference ref) throws ModelerCoreException {
  int refType=ref.getType();
  Collection<EObject> existingChildren=targetResource.getEmfResource().getContents();
  EObject childToDelete=null;
  for (  EObject child : existingChildren) {
    String eObjName=this.modelEditor.getName(child);
    if (refType == RelationalConstants.TYPES.TABLE && child instanceof BaseTable) {
      if (CoreStringUtil.equals(eObjName,ref.getName())) {
        childToDelete=child;
        break;
      }
    }
 else     if (refType == RelationalConstants.TYPES.VIEW && child instanceof View) {
      if (CoreStringUtil.equals(eObjName,ref.getName())) {
        childToDelete=child;
        break;
      }
    }
 else     if (refType == RelationalConstants.TYPES.PROCEDURE && child instanceof Procedure) {
      if (CoreStringUtil.equals(eObjName,ref.getName())) {
        childToDelete=child;
        break;
      }
    }
 else     if (refType == RelationalConstants.TYPES.INDEX && child instanceof Index) {
      if (CoreStringUtil.equals(eObjName,ref.getName())) {
        childToDelete=child;
        break;
      }
    }
 else     if (refType == RelationalConstants.TYPES.SCHEMA && child instanceof Schema) {
      if (CoreStringUtil.equals(eObjName,ref.getName())) {
        childToDelete=child;
        break;
      }
    }
 else     if (refType == RelationalConstants.TYPES.CATALOG && child instanceof Catalog) {
      if (CoreStringUtil.equals(eObjName,ref.getName())) {
        childToDelete=child;
        break;
      }
    }
  }
  if (childToDelete != null) {
    this.modelEditor.delete(childToDelete);
  }
}","/** 
 * Delete the emf object the targetResource that matches the supplied RelationalReference
 * @param targetResource the target model
 * @param ref the relational reference
 * @throws ModelerCoreException
 */
private void deleteMatchingChild(ModelResource targetResource,RelationalReference ref) throws ModelerCoreException {
  int refType=ref.getType();
  Collection<EObject> existingChildren=targetResource.getEmfResource().getContents();
  EObject childToDelete=null;
  for (  EObject child : existingChildren) {
    String eObjName=this.getModelEditor().getName(child);
    if (refType == RelationalConstants.TYPES.TABLE && child instanceof BaseTable) {
      if (CoreStringUtil.equals(eObjName,ref.getName())) {
        childToDelete=child;
        break;
      }
    }
 else     if (refType == RelationalConstants.TYPES.VIEW && child instanceof View) {
      if (CoreStringUtil.equals(eObjName,ref.getName())) {
        childToDelete=child;
        break;
      }
    }
 else     if (refType == RelationalConstants.TYPES.PROCEDURE && child instanceof Procedure) {
      if (CoreStringUtil.equals(eObjName,ref.getName())) {
        childToDelete=child;
        break;
      }
    }
 else     if (refType == RelationalConstants.TYPES.INDEX && child instanceof Index) {
      if (CoreStringUtil.equals(eObjName,ref.getName())) {
        childToDelete=child;
        break;
      }
    }
 else     if (refType == RelationalConstants.TYPES.SCHEMA && child instanceof Schema) {
      if (CoreStringUtil.equals(eObjName,ref.getName())) {
        childToDelete=child;
        break;
      }
    }
 else     if (refType == RelationalConstants.TYPES.CATALOG && child instanceof Catalog) {
      if (CoreStringUtil.equals(eObjName,ref.getName())) {
        childToDelete=child;
        break;
      }
    }
  }
  if (childToDelete != null) {
    this.getModelEditor().delete(childToDelete);
  }
}",0.9857067231339331
101977,"/** 
 * Create EMF ForeignKey from the supplied RelationalReference
 * @param ref the relational fk object
 * @param baseTable the table parent of the fk
 * @param modelResource the model resource
 * @return the foreign key object
 */
public EObject createForeignKey(RelationalReference ref,BaseTable baseTable,ModelResource modelResource){
  CoreArgCheck.isInstanceOf(RelationalForeignKey.class,ref);
  RelationalForeignKey fkRef=(RelationalForeignKey)ref;
  final ForeignKey foreignKey=FACTORY.createForeignKey();
  foreignKey.setTable(baseTable);
  foreignKey.setName(fkRef.getName());
  foreignKey.setNameInSource(fkRef.getNameInSource());
  foreignKey.setForeignKeyMultiplicity(getMultiplictyKind(fkRef.getForeignKeyMultiplicity()));
  foreignKey.setPrimaryKeyMultiplicity(getMultiplictyKind(fkRef.getPrimaryKeyMultiplicity()));
  final List keyColumns=foreignKey.getColumns();
  for (  RelationalColumn relColumn : fkRef.getColumns()) {
    Column column=getColumn(relColumn.getName(),baseTable);
    if (column != null) {
      keyColumns.add(column);
    }
  }
  BaseTable fkTable=getTable(fkRef.getUniqueKeyTableName(),modelResource);
  String ukRefName=fkRef.getUniqueKeyName();
  if (fkTable != null && ukRefName != null) {
    if (fkTable.getPrimaryKey() != null && fkTable.getPrimaryKey().getName().equalsIgnoreCase(ukRefName)) {
      foreignKey.setUniqueKey(fkTable.getPrimaryKey());
    }
 else     if (fkTable.getUniqueConstraints().isEmpty()) {
      for (      Object key : fkTable.getUniqueConstraints()) {
        String keyName=this.modelEditor.getName((UniqueKey)key);
        if (keyName.equalsIgnoreCase(ukRefName)) {
          foreignKey.setUniqueKey((UniqueKey)key);
        }
      }
    }
  }
  updateDeferredList(fkRef,foreignKey);
  return foreignKey;
}","/** 
 * Create EMF ForeignKey from the supplied RelationalReference
 * @param ref the relational fk object
 * @param baseTable the table parent of the fk
 * @param modelResource the model resource
 * @return the foreign key object
 */
public EObject createForeignKey(RelationalReference ref,BaseTable baseTable,ModelResource modelResource){
  CoreArgCheck.isInstanceOf(RelationalForeignKey.class,ref);
  RelationalForeignKey fkRef=(RelationalForeignKey)ref;
  final ForeignKey foreignKey=FACTORY.createForeignKey();
  foreignKey.setTable(baseTable);
  foreignKey.setName(fkRef.getName());
  foreignKey.setNameInSource(fkRef.getNameInSource());
  foreignKey.setForeignKeyMultiplicity(getMultiplictyKind(fkRef.getForeignKeyMultiplicity()));
  foreignKey.setPrimaryKeyMultiplicity(getMultiplictyKind(fkRef.getPrimaryKeyMultiplicity()));
  final List keyColumns=foreignKey.getColumns();
  for (  RelationalColumn relColumn : fkRef.getColumns()) {
    Column column=getColumn(relColumn.getName(),baseTable);
    if (column != null) {
      keyColumns.add(column);
    }
  }
  BaseTable fkTable=getTable(fkRef.getUniqueKeyTableName(),modelResource);
  String ukRefName=fkRef.getUniqueKeyName();
  if (fkTable != null && ukRefName != null) {
    if (fkTable.getPrimaryKey() != null && fkTable.getPrimaryKey().getName().equalsIgnoreCase(ukRefName)) {
      foreignKey.setUniqueKey(fkTable.getPrimaryKey());
    }
 else     if (fkTable.getUniqueConstraints().isEmpty()) {
      for (      Object key : fkTable.getUniqueConstraints()) {
        String keyName=this.getModelEditor().getName((UniqueKey)key);
        if (keyName.equalsIgnoreCase(ukRefName)) {
          foreignKey.setUniqueKey((UniqueKey)key);
        }
      }
    }
  }
  updateDeferredList(fkRef,foreignKey);
  return foreignKey;
}",0.9980408620207109
101978,"/** 
 * Create EMF ProcedureParameter from the supplied RelationalReference
 * @param ref the parameter object
 * @param procedure the parent procedure
 * @param modelResource the  model resource
 * @return the ProcedureParameter EObject
 */
public EObject createParameter(RelationalReference ref,Procedure procedure,ModelResource modelResource){
  CoreArgCheck.isInstanceOf(RelationalParameter.class,ref);
  RelationalParameter parameterRef=(RelationalParameter)ref;
  ProcedureParameter parameter=FACTORY.createProcedureParameter();
  parameter.setProcedure(procedure);
  parameter.setName(parameterRef.getName());
  parameter.setNameInSource(parameterRef.getNameInSource());
  parameter.setDefaultValue(parameterRef.getDefaultValue());
  parameter.setDirection(getDirectionKind(parameterRef.getDirection()));
  parameter.setNativeType(parameterRef.getNativeType());
  parameter.setNullable(getNullableType(parameterRef.getNullable()));
  parameter.setPrecision(parameterRef.getPrecision());
  parameter.setRadix(parameterRef.getRadix());
  parameter.setScale(parameterRef.getScale());
  String dType=parameterRef.getDatatype();
  if (dType == null || dType.length() == 0) {
    dType=DatatypeProcessor.DEFAULT_DATATYPE;
  }
  EObject datatype=this.datatypeProcessor.findDatatype(dType);
  if (datatype != null) {
    parameter.setType(datatype);
    String dTypeName=this.modelEditor.getName(datatype);
    int datatypeLength=parameterRef.getLength();
    if (datatypeLength == 0 && DatatypeProcessor.DEFAULT_DATATYPE.equalsIgnoreCase(dTypeName)) {
      parameter.setLength(DatatypeProcessor.DEFAULT_DATATYPE_LENGTH);
    }
 else {
      parameter.setLength(datatypeLength);
    }
  }
  updateDeferredList(parameterRef,parameter);
  return parameter;
}","/** 
 * Create EMF ProcedureParameter from the supplied RelationalReference
 * @param ref the parameter object
 * @param procedure the parent procedure
 * @param modelResource the  model resource
 * @return the ProcedureParameter EObject
 */
public EObject createParameter(RelationalReference ref,Procedure procedure,ModelResource modelResource){
  CoreArgCheck.isInstanceOf(RelationalParameter.class,ref);
  RelationalParameter parameterRef=(RelationalParameter)ref;
  ProcedureParameter parameter=FACTORY.createProcedureParameter();
  parameter.setProcedure(procedure);
  parameter.setName(parameterRef.getName());
  parameter.setNameInSource(parameterRef.getNameInSource());
  parameter.setDefaultValue(parameterRef.getDefaultValue());
  parameter.setDirection(getDirectionKind(parameterRef.getDirection()));
  parameter.setNativeType(parameterRef.getNativeType());
  parameter.setNullable(getNullableType(parameterRef.getNullable()));
  parameter.setPrecision(parameterRef.getPrecision());
  parameter.setRadix(parameterRef.getRadix());
  parameter.setScale(parameterRef.getScale());
  String dType=parameterRef.getDatatype();
  if (dType == null || dType.length() == 0) {
    dType=DatatypeProcessor.DEFAULT_DATATYPE;
  }
  EObject datatype=this.datatypeProcessor.findDatatype(dType);
  if (datatype != null) {
    parameter.setType(datatype);
    String dTypeName=this.getModelEditor().getName(datatype);
    int datatypeLength=parameterRef.getLength();
    if (datatypeLength == 0 && DatatypeProcessor.DEFAULT_DATATYPE.equalsIgnoreCase(dTypeName)) {
      parameter.setLength(DatatypeProcessor.DEFAULT_DATATYPE_LENGTH);
    }
 else {
      parameter.setLength(datatypeLength);
    }
  }
  updateDeferredList(parameterRef,parameter);
  return parameter;
}",0.9980096673301108
101979,"/** 
 * @param tableName
 * @param modelResource
 * @return
 */
private BaseTable getTable(String tableName,ModelResource modelResource){
  try {
    for (    EObject eObj : modelResource.getEmfResource().getContents()) {
      String eObjName=this.modelEditor.getName(eObj);
      if (eObj instanceof BaseTable && eObjName != null && eObjName.equalsIgnoreCase(tableName)) {
        return (BaseTable)eObj;
      }
    }
  }
 catch (  ModelWorkspaceException e) {
    RelationalPlugin.Util.log(IStatus.ERROR,NLS.bind(Messages.emfModelGenerator_error_finding_table_named,tableName));
  }
  return null;
}","/** 
 * @param tableName
 * @param modelResource
 * @return
 */
private BaseTable getTable(String tableName,ModelResource modelResource){
  try {
    for (    EObject eObj : modelResource.getEmfResource().getContents()) {
      String eObjName=this.getModelEditor().getName(eObj);
      if (eObj instanceof BaseTable && eObjName != null && eObjName.equalsIgnoreCase(tableName)) {
        return (BaseTable)eObj;
      }
    }
  }
 catch (  ModelWorkspaceException e) {
    RelationalPlugin.Util.log(IStatus.ERROR,NLS.bind(Messages.emfModelGenerator_error_finding_table_named,tableName));
  }
  return null;
}",0.9942196531791908
101980,"protected ModelEditor getModelEditor(){
  return this.editor;
}","protected ModelEditor getModelEditor(){
  return ModelerCore.getModelEditor();
}",0.8251748251748252
101981,"/** 
 * Method to create document contents for an Index object.
 * @param parent the Element that is the parent of any created Elements or Attributes; may not be null
 * @param eobj the Index representing the graph of objects for which document content may be created; may not be null
 */
protected void create(final Element parent,final Index index,final ModelWrapper wrapper){
  CoreArgCheck.isNotNull(parent);
  CoreArgCheck.isNotNull(index);
  if (!wrapper.isSelected(index)) {
    return;
  }
  final Element indexElement=new Element(Xml.Index.TAG);
  parent.addContent(indexElement);
  setAttribute(indexElement,Xml.Index.Attributes.NAME,getUniqueObjectName(index));
  setAttribute(indexElement,Xml.Index.Attributes.UUID,editor.getObjectID(index));
  setAttribute(indexElement,Xml.Index.Attributes.PATH_IN_MODEL,editor.getModelRelativePath(index));
  final List columns=index.getColumns();
  final Element indexColumnElement=new Element(Xml.IndexColumns.TAG);
  indexElement.addContent(indexColumnElement);
  Table indexedTable=null;
  final Iterator iter=columns.iterator();
  while (iter.hasNext()) {
    final Column column=(Column)iter.next();
    final Element indexedColumnElement=new Element(Xml.IndexColumn.TAG);
    setAttribute(indexedColumnElement,Xml.IndexColumn.Attributes.NAME,getObjectNameInDdl(column));
    setAttribute(indexedColumnElement,Xml.IndexColumn.Attributes.UUID,editor.getObjectID(column));
    indexColumnElement.addContent(indexedColumnElement);
    indexedTable=(Table)column.getOwner();
  }
  if (indexedTable != null) {
    setAttribute(indexElement,Xml.ForeignKey.Attributes.TABLE_NAME,getObjectNameInDdl(indexedTable));
  }
}","/** 
 * Method to create document contents for an Index object.
 * @param parent the Element that is the parent of any created Elements or Attributes; may not be null
 * @param eobj the Index representing the graph of objects for which document content may be created; may not be null
 */
protected void create(final Element parent,final Index index,final ModelWrapper wrapper){
  CoreArgCheck.isNotNull(parent);
  CoreArgCheck.isNotNull(index);
  if (!wrapper.isSelected(index)) {
    return;
  }
  final Element indexElement=new Element(Xml.Index.TAG);
  parent.addContent(indexElement);
  setAttribute(indexElement,Xml.Index.Attributes.NAME,getUniqueObjectName(index));
  setAttribute(indexElement,Xml.Index.Attributes.UUID,getModelEditor().getObjectID(index));
  setAttribute(indexElement,Xml.Index.Attributes.PATH_IN_MODEL,getModelEditor().getModelRelativePath(index));
  final List columns=index.getColumns();
  final Element indexColumnElement=new Element(Xml.IndexColumns.TAG);
  indexElement.addContent(indexColumnElement);
  Table indexedTable=null;
  final Iterator iter=columns.iterator();
  while (iter.hasNext()) {
    final Column column=(Column)iter.next();
    final Element indexedColumnElement=new Element(Xml.IndexColumn.TAG);
    setAttribute(indexedColumnElement,Xml.IndexColumn.Attributes.NAME,getObjectNameInDdl(column));
    setAttribute(indexedColumnElement,Xml.IndexColumn.Attributes.UUID,getModelEditor().getObjectID(column));
    indexColumnElement.addContent(indexedColumnElement);
    indexedTable=(Table)column.getOwner();
  }
  if (indexedTable != null) {
    setAttribute(indexElement,Xml.ForeignKey.Attributes.TABLE_NAME,getObjectNameInDdl(indexedTable));
  }
}",0.9803688280785248
101982,"/** 
 * Construct an instance of IntermediateFormat.
 */
public IntermediateFormat(final List modelWrappers,final DdlOptions options,final IProgressMonitor monitor){
  super();
  CoreArgCheck.isNotNull(modelWrappers);
  CoreArgCheck.isNotNull(options);
  this.modelWrappers=new ArrayList(modelWrappers);
  this.options=options;
  this.editor=ModelerCore.getModelEditor();
  this.relationalEntities=new HashMap();
}","/** 
 * Construct an instance of IntermediateFormat.
 */
public IntermediateFormat(final List modelWrappers,final DdlOptions options,final IProgressMonitor monitor){
  super();
  CoreArgCheck.isNotNull(modelWrappers);
  CoreArgCheck.isNotNull(options);
  this.modelWrappers=new ArrayList(modelWrappers);
  this.options=options;
  this.relationalEntities=new HashMap();
}",0.8775510204081632
101983,"/** 
 * Move the existing child to the appropriate index in the docParent so that it is consistent with the schema
 * @param documentElement
 * @param xsdComponent
 * @return true if document element was moved.
 */
private boolean moveIfNotAtSameIndex(final XmlDocumentEntity documentElement,final XSDComponent xsdComponent) throws ModelerCoreException {
  boolean moved=false;
  final XmlDocumentEntity docParent=(XmlDocumentEntity)documentElement.eContainer();
  final XSDComponent schemaParent=(XSDComponent)xsdComponent.eContainer();
  final int docIndex=getIndexOfChild(docParent,documentElement);
  final int schemaIndex=getIndexOfChild(schemaParent,xsdComponent);
  if (docIndex == -1)   throw new ModelerCoreException(XmlDocumentPlugin.Util.getString(""String_Node_Str"") + xsdComponent.toString());
 else   if (schemaIndex == -1)   throw new ModelerCoreException(XmlDocumentPlugin.Util.getString(""String_Node_Str"") + documentElement.toString());
  if (docIndex == 0 && schemaIndex == 0)   return moved;
  final EList docList=(EList)docParent.eGet(documentElement.eContainmentFeature());
  EList schemaList=null;
  if (schemaParent instanceof XSDParticle || schemaParent instanceof XSDAttributeUse)   schemaList=(EList)schemaParent.eContainer().eGet(schemaParent.eContainmentFeature());
 else   schemaList=(EList)schemaParent.eGet(xsdComponent.eContainmentFeature());
  if (schemaIndex > 0 && docList.size() > 1) {
    final EObject tempSchemaElement=(EObject)schemaList.get((schemaIndex - 1));
    final Iterator docChildren=docList.iterator();
    boolean found=false;
    while (docChildren.hasNext() && !found) {
      final EObject docChild=(EObject)docChildren.next();
      final EObject schemaRef=findSchemaReference(docChild);
      if (schemaRef != null && schemaRef == tempSchemaElement) {
        found=true;
        final int temp=getIndexOfChild(docParent,docChild) + 1;
        if (temp != docIndex) {
          me.move(docParent,documentElement,temp);
          moved=true;
        }
      }
    }
  }
 else   if (schemaIndex == 0 && docList.size() > 1) {
    int foundIndex=Integer.MAX_VALUE;
    final Iterator docChildren=docList.iterator();
    while (docChildren.hasNext()) {
      final EObject docChild=(EObject)docChildren.next();
      final EObject schemaRef=findSchemaReference(docChild);
      if (schemaRef != null && schemaRef != xsdComponent && schemaList.contains(schemaRef)) {
        final int temp=getIndexOfChild(docParent,docChild);
        if (temp < foundIndex)         foundIndex=temp;
      }
    }
    if (foundIndex < Integer.MAX_VALUE && foundIndex != docIndex) {
      me.move(docParent,documentElement,foundIndex);
      moved=true;
    }
  }
  return moved;
}","/** 
 * Move the existing child to the appropriate index in the docParent so that it is consistent with the schema
 * @param documentElement
 * @param xsdComponent
 * @return true if document element was moved.
 */
private boolean moveIfNotAtSameIndex(final XmlDocumentEntity documentElement,final XSDComponent xsdComponent) throws ModelerCoreException {
  boolean moved=false;
  final XmlDocumentEntity docParent=(XmlDocumentEntity)documentElement.eContainer();
  final XSDComponent schemaParent=(XSDComponent)xsdComponent.eContainer();
  final int docIndex=getIndexOfChild(docParent,documentElement);
  final int schemaIndex=getIndexOfChild(schemaParent,xsdComponent);
  if (docIndex == -1)   throw new ModelerCoreException(XmlDocumentPlugin.Util.getString(""String_Node_Str"") + xsdComponent.toString());
 else   if (schemaIndex == -1)   throw new ModelerCoreException(XmlDocumentPlugin.Util.getString(""String_Node_Str"") + documentElement.toString());
  if (docIndex == 0 && schemaIndex == 0)   return moved;
  final EList docList=(EList)docParent.eGet(documentElement.eContainmentFeature());
  EList schemaList=null;
  if (schemaParent instanceof XSDParticle || schemaParent instanceof XSDAttributeUse)   schemaList=(EList)schemaParent.eContainer().eGet(schemaParent.eContainmentFeature());
 else   schemaList=(EList)schemaParent.eGet(xsdComponent.eContainmentFeature());
  if (schemaIndex > 0 && docList.size() > 1) {
    final EObject tempSchemaElement=(EObject)schemaList.get((schemaIndex - 1));
    final Iterator docChildren=docList.iterator();
    boolean found=false;
    while (docChildren.hasNext() && !found) {
      final EObject docChild=(EObject)docChildren.next();
      final EObject schemaRef=findSchemaReference(docChild);
      if (schemaRef != null && schemaRef == tempSchemaElement) {
        found=true;
        final int temp=getIndexOfChild(docParent,docChild) + 1;
        if (temp != docIndex) {
          getModelEditor().move(docParent,documentElement,temp);
          moved=true;
        }
      }
    }
  }
 else   if (schemaIndex == 0 && docList.size() > 1) {
    int foundIndex=Integer.MAX_VALUE;
    final Iterator docChildren=docList.iterator();
    while (docChildren.hasNext()) {
      final EObject docChild=(EObject)docChildren.next();
      final EObject schemaRef=findSchemaReference(docChild);
      if (schemaRef != null && schemaRef != xsdComponent && schemaList.contains(schemaRef)) {
        final int temp=getIndexOfChild(docParent,docChild);
        if (temp < foundIndex)         foundIndex=temp;
      }
    }
    if (foundIndex < Integer.MAX_VALUE && foundIndex != docIndex) {
      getModelEditor().move(docParent,documentElement,foundIndex);
      moved=true;
    }
  }
  return moved;
}",0.9933969185619956
101984,"/** 
 * Perform deletes from the updateDeleteMap
 * @return number of deleted nodes.
 */
private int performTreeUpdates() throws ModelerCoreException {
  int count=0;
  final Iterator keys=updateDeleteMap.keySet().iterator();
  while (keys.hasNext()) {
    final EObject parent=(EObject)keys.next();
    final ArrayList children=(ArrayList)updateDeleteMap.get(parent);
    if (children != null) {
      final Iterator childrenIT=children.iterator();
      while (childrenIT.hasNext()) {
        final EObject child=(EObject)childrenIT.next();
        me.delete(child);
        count++;
      }
    }
  }
  return count;
}","/** 
 * Perform deletes from the updateDeleteMap
 * @return number of deleted nodes.
 */
private int performTreeUpdates() throws ModelerCoreException {
  int count=0;
  final Iterator keys=updateDeleteMap.keySet().iterator();
  while (keys.hasNext()) {
    final EObject parent=(EObject)keys.next();
    final ArrayList children=(ArrayList)updateDeleteMap.get(parent);
    if (children != null) {
      final Iterator childrenIT=children.iterator();
      while (childrenIT.hasNext()) {
        final EObject child=(EObject)childrenIT.next();
        getModelEditor().delete(child);
        count++;
      }
    }
  }
  return count;
}",0.9856687898089171
101985,"private void removeChildrenOfSameName(final EObject parent,final Class clazz,String name){
  final String newName=this.validator.createValidName(name);
  if (newName != null)   name=newName;
  final Iterator children=parent.eContents().iterator();
  while (children.hasNext()) {
    final EObject next=(EObject)children.next();
    if (clazz.isAssignableFrom(next.getClass()))     try {
      final String name2=((XmlDocumentNode)next).getName();
      if (name == null && name2 == null)       me.delete(next);
 else       if (name != null && name.equals(name2))       me.delete(next);
    }
 catch (    final ModelerCoreException e) {
      ModelerCore.Util.log(IStatus.ERROR,e,XmlDocumentPlugin.Util.getString(""String_Node_Str""));
    }
  }
}","private void removeChildrenOfSameName(final EObject parent,final Class clazz,String name){
  final String newName=this.validator.createValidName(name);
  if (newName != null)   name=newName;
  final Iterator children=parent.eContents().iterator();
  while (children.hasNext()) {
    final EObject next=(EObject)children.next();
    if (clazz.isAssignableFrom(next.getClass()))     try {
      final String name2=((XmlDocumentNode)next).getName();
      if (name == null && name2 == null)       getModelEditor().delete(next);
 else       if (name != null && name.equals(name2))       getModelEditor().delete(next);
    }
 catch (    final ModelerCoreException e) {
      ModelerCore.Util.log(IStatus.ERROR,e,XmlDocumentPlugin.Util.getString(""String_Node_Str""));
    }
  }
}",0.9762532981530344
101986,"/** 
 * Create the RelationalModel object representation of an EMF Model
 * @param modelResource the ModelResource
 * @return the RelationalModel object representation
 * @throws Exception the exception
 */
public RelationalModel createRelationalModel(ModelResource modelResource) throws Exception {
  String modelName=modelEditor.getModelName(modelResource);
  RelationalModel relationalModel=new RelationalModel(modelName);
  Map<EObject,RelationalReference> deferredCreateMap=new HashMap<EObject,RelationalReference>();
  List<EObject> rootEObjs=modelResource.getAllRootEObjects();
  for (  EObject eObj : rootEObjs) {
    Map<EObject,RelationalReference> deferredObjMap=createObject(eObj,null,relationalModel);
    if (!deferredObjMap.isEmpty()) {
      deferredCreateMap.putAll(deferredObjMap);
    }
  }
  createDeferredObjects(deferredCreateMap,relationalModel);
  return relationalModel;
}","/** 
 * Create the RelationalModel object representation of an EMF Model
 * @param modelResource the ModelResource
 * @return the RelationalModel object representation
 * @throws Exception the exception
 */
public RelationalModel createRelationalModel(ModelResource modelResource) throws Exception {
  String modelName=getModelEditor().getModelName(modelResource);
  RelationalModel relationalModel=new RelationalModel(modelName);
  Map<EObject,RelationalReference> deferredCreateMap=new HashMap<EObject,RelationalReference>();
  List<EObject> rootEObjs=modelResource.getAllRootEObjects();
  for (  EObject eObj : rootEObjs) {
    Map<EObject,RelationalReference> deferredObjMap=createObject(eObj,null,relationalModel);
    if (!deferredObjMap.isEmpty()) {
      deferredCreateMap.putAll(deferredObjMap);
    }
  }
  createDeferredObjects(deferredCreateMap,relationalModel);
  return relationalModel;
}",0.9849916620344636
101987,"/** 
 * Set Description on the RelationalReference by transferring it from the EObject.
 * @param relationalRef the RelationalReference
 * @param eObject the source EObject
 */
private void setDescription(RelationalReference relationalRef,EObject eObject){
  try {
    String desc=modelEditor.getDescription(eObject);
    relationalRef.setDescription(desc);
  }
 catch (  ModelerCoreException ex) {
    RelationalPlugin.Util.log(IStatus.ERROR,NLS.bind(Messages.relationalRefFactory_errorSettingDescription,relationalRef.getName()));
    relationalRef.setDescription(null);
  }
}","/** 
 * Set Description on the RelationalReference by transferring it from the EObject.
 * @param relationalRef the RelationalReference
 * @param eObject the source EObject
 */
private void setDescription(RelationalReference relationalRef,EObject eObject){
  try {
    String desc=getModelEditor().getDescription(eObject);
    relationalRef.setDescription(desc);
  }
 catch (  ModelerCoreException ex) {
    RelationalPlugin.Util.log(IStatus.ERROR,NLS.bind(Messages.relationalRefFactory_errorSettingDescription,relationalRef.getName()));
    relationalRef.setDescription(null);
  }
}",0.9939707149009476
101988,"/** 
 * @param type type of RelationalReference to find
 * @param eObj the EObject
 * @param parent the parent reference
 * @param allModelRefs the collection of all model RelationalReferences
 * @return RelationalReference which is a match
 * @throws EntityNotFoundException
 * @throws CoreException
 */
protected <T extends RelationalReference>T find(Class<T> type,EObject eObj,RelationalReference parent,Collection<RelationalReference> allModelRefs){
  return find(type,this.modelEditor.getName(eObj),eObj,parent,allModelRefs);
}","/** 
 * @param type type of RelationalReference to find
 * @param eObj the EObject
 * @param parent the parent reference
 * @param allModelRefs the collection of all model RelationalReferences
 * @return RelationalReference which is a match
 * @throws EntityNotFoundException
 * @throws CoreException
 */
protected <T extends RelationalReference>T find(Class<T> type,EObject eObj,RelationalReference parent,Collection<RelationalReference> allModelRefs){
  return find(type,this.getModelEditor().getName(eObj),eObj,parent,allModelRefs);
}",0.9934518241347052
101989,"/** 
 * Overridden method from   {@link StructuralCopyModelFeaturePopulator}.  Copy selected nodes of the source model to the target.  Overridden because also have to do transformations on tables and procedures.
 * @param sourceModelResource modelResource containing the old information
 * @param targetResource        the target
 * @param extraProperties       optional properties to tweak creation of objects.Currently, this only deals with whether virtual tables have their supportsUpdate properties cleared.  See TransformationNewModelObjectHelper for details.
 * @param copyAllDescriptions option to copy or suppress copying all descriptions
 * @param monitor               a progress monitor
 * @throws ModelerCoreException 
 */
@Override public void copyModel(ModelResource sourceModelResource,ModelResource targetModelResource,Map extraProperties,boolean copyAllDescriptions,IProgressMonitor monitor) throws ModelerCoreException {
  List sourceFirstLevelChildren=sourceModelResource.getEObjects();
  int jdbcSourceIndex=-1;
  for (int i=0; i < sourceFirstLevelChildren.size(); i++) {
    EObject nextObj=(EObject)sourceFirstLevelChildren.get(i);
    if (ModelObjectUtilities.isJdbcSource(nextObj)) {
      jdbcSourceIndex=i;
      break;
    }
  }
  if (jdbcSourceIndex > -1) {
    sourceFirstLevelChildren.remove(jdbcSourceIndex);
  }
  if (copyAllDescriptions) {
    List allRootContents=sourceModelResource.getEmfResource().getContents();
    for (Iterator iter=allRootContents.iterator(); iter.hasNext(); ) {
      EObject nextChild=(EObject)iter.next();
      if (nextChild instanceof AnnotationContainer) {
        sourceFirstLevelChildren.add(nextChild);
        break;
      }
    }
  }
  Collection sourceFirstLevelChildrenCopies=null;
  final Map originalsToCopies=new HashMap();
  try {
    sourceFirstLevelChildrenCopies=modelEditor.copyAll(sourceFirstLevelChildren,originalsToCopies);
  }
 catch (  ModelerCoreException ex) {
    throw ex;
  }
  final Map copiesToOriginals=invertMap(originalsToCopies);
  List targetFirstLevelChildren=targetModelResource.getEmfResource().getContents();
  int numInitialFirstLevelNodes=targetFirstLevelChildren.size();
  targetModelResource.getEmfResource().getContents().addAll(sourceFirstLevelChildrenCopies);
  List copiedFirstLevelChildrenList=targetModelResource.getEmfResource().getContents();
  List modifiedCopiedFirstLevelChildrenList=new ArrayList(copiedFirstLevelChildrenList.size() - numInitialFirstLevelNodes);
  for (int i=numInitialFirstLevelNodes; i < copiedFirstLevelChildrenList.size(); i++) {
    modifiedCopiedFirstLevelChildrenList.add(copiedFirstLevelChildrenList.get(i));
  }
  doTransformations(copiesToOriginals,modifiedCopiedFirstLevelChildrenList,extraProperties);
}","/** 
 * Overridden method from   {@link StructuralCopyModelFeaturePopulator}.  Copy selected nodes of the source model to the target.  Overridden because also have to do transformations on tables and procedures.
 * @param sourceModelResource modelResource containing the old information
 * @param targetResource        the target
 * @param extraProperties       optional properties to tweak creation of objects.Currently, this only deals with whether virtual tables have their supportsUpdate properties cleared.  See TransformationNewModelObjectHelper for details.
 * @param copyAllDescriptions option to copy or suppress copying all descriptions
 * @param monitor               a progress monitor
 * @throws ModelerCoreException 
 */
@Override public void copyModel(ModelResource sourceModelResource,ModelResource targetModelResource,Map extraProperties,boolean copyAllDescriptions,IProgressMonitor monitor) throws ModelerCoreException {
  List sourceFirstLevelChildren=sourceModelResource.getEObjects();
  int jdbcSourceIndex=-1;
  for (int i=0; i < sourceFirstLevelChildren.size(); i++) {
    EObject nextObj=(EObject)sourceFirstLevelChildren.get(i);
    if (ModelObjectUtilities.isJdbcSource(nextObj)) {
      jdbcSourceIndex=i;
      break;
    }
  }
  if (jdbcSourceIndex > -1) {
    sourceFirstLevelChildren.remove(jdbcSourceIndex);
  }
  if (copyAllDescriptions) {
    List allRootContents=sourceModelResource.getEmfResource().getContents();
    for (Iterator iter=allRootContents.iterator(); iter.hasNext(); ) {
      EObject nextChild=(EObject)iter.next();
      if (nextChild instanceof AnnotationContainer) {
        sourceFirstLevelChildren.add(nextChild);
        break;
      }
    }
  }
  Collection sourceFirstLevelChildrenCopies=null;
  final Map originalsToCopies=new HashMap();
  try {
    sourceFirstLevelChildrenCopies=ModelerCore.getModelEditor().copyAll(sourceFirstLevelChildren,originalsToCopies);
  }
 catch (  ModelerCoreException ex) {
    throw ex;
  }
  final Map copiesToOriginals=invertMap(originalsToCopies);
  List targetFirstLevelChildren=targetModelResource.getEmfResource().getContents();
  int numInitialFirstLevelNodes=targetFirstLevelChildren.size();
  targetModelResource.getEmfResource().getContents().addAll(sourceFirstLevelChildrenCopies);
  List copiedFirstLevelChildrenList=targetModelResource.getEmfResource().getContents();
  List modifiedCopiedFirstLevelChildrenList=new ArrayList(copiedFirstLevelChildrenList.size() - numInitialFirstLevelNodes);
  for (int i=numInitialFirstLevelNodes; i < copiedFirstLevelChildrenList.size(); i++) {
    modifiedCopiedFirstLevelChildrenList.add(copiedFirstLevelChildrenList.get(i));
  }
  doTransformations(copiesToOriginals,modifiedCopiedFirstLevelChildrenList,extraProperties);
}",0.9965536005804462
101990,"/** 
 * @param monitor
 * @param totalWork
 * @throws Exception
 */
public void save(IProgressMonitor monitor,int totalWork) throws Exception {
  monitor.subTask(DdlImporterI18n.SAVING_MODEL_MSG);
  if (!model.exists()) {
    ModelAnnotation modelAnnotation=model.getModelAnnotation();
    modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
    modelAnnotation.setModelType(importManager.getModelType());
  }
  importStatus=EmfModelGenerator.INSTANCE.execute(diffReport,model,monitor,totalWork);
  if (importManager.getModelType() == ModelType.VIRTUAL_LITERAL) {
    Properties props=new Properties();
    boolean doGenerateDefaultSQL=importManager.optToGenerateDefaultSQL();
    if (doGenerateDefaultSQL) {
      props.put(""String_Node_Str"",doGenerateDefaultSQL);
      props.put(""String_Node_Str"",doGenerateDefaultSQL);
    }
    Collection<EObject> targets=new ArrayList<EObject>();
    for (    Object nextObj : model.getEObjects()) {
      if (nextObj instanceof Procedure || nextObj instanceof BaseTable || nextObj instanceof View) {
        try {
          NewModelObjectHelperManager.helpCreate(nextObj,props);
          targets.add((EObject)nextObj);
        }
 catch (        ModelerCoreException err) {
          DdlImporterPlugin.UTIL.log(IStatus.ERROR,err,err.getMessage());
        }
      }
    }
  }
  model.save(monitor,false);
  monitor.worked(totalWork);
  monitor.done();
}","/** 
 * @param monitor
 * @param totalWork
 * @throws Exception
 */
public void save(IProgressMonitor monitor,int totalWork) throws Exception {
  monitor.subTask(DdlImporterI18n.SAVING_MODEL_MSG);
  if (!model.exists()) {
    ModelAnnotation modelAnnotation=model.getModelAnnotation();
    modelAnnotation.setPrimaryMetamodelUri(RelationalPackage.eNS_URI);
    modelAnnotation.setModelType(importManager.getModelType());
  }
  importStatus=EmfModelGenerator.INSTANCE.execute(diffReport,model,monitor,totalWork);
  if (importManager.getModelType() == ModelType.VIRTUAL_LITERAL) {
    Properties props=new Properties();
    boolean doGenerateDefaultSQL=importManager.optToGenerateDefaultSQL();
    boolean doHelpCreateTransform=importManager.optToHelpCreateTransform();
    if (doHelpCreateTransform) {
      if (doGenerateDefaultSQL) {
        props.put(""String_Node_Str"",doGenerateDefaultSQL);
        props.put(""String_Node_Str"",doGenerateDefaultSQL);
      }
      Collection<EObject> targets=new ArrayList<EObject>();
      for (      Object nextObj : model.getEObjects()) {
        if (nextObj instanceof Procedure || nextObj instanceof BaseTable || nextObj instanceof View) {
          try {
            NewModelObjectHelperManager.helpCreate(nextObj,props);
            targets.add((EObject)nextObj);
          }
 catch (          ModelerCoreException err) {
            DdlImporterPlugin.UTIL.log(IStatus.ERROR,err,err.getMessage());
          }
        }
      }
    }
  }
  model.save(monitor,false);
  monitor.worked(totalWork);
  monitor.done();
}",0.9464105156723964
101991,"/** 
 * Create an EMF object, using the provided RelationalReference object
 * @param relationalRef the relational model object
 * @param modelResource the model resource
 * @return the new EMF object
 * @throws ModelWorkspaceException if problems building model
 */
public EObject createObject(RelationalReference relationalRef,ModelResource modelResource) throws ModelWorkspaceException {
  EObject newEObject=null;
switch (relationalRef.getType()) {
case TYPES.MODEL:
{
    }
  break;
case TYPES.SCHEMA:
{
}
break;
case TYPES.CATALOG:
{
}
break;
case TYPES.TABLE:
{
if (relationalRef instanceof RelationalViewTable) {
newEObject=VIEW_MODEL_FACTORY.buildObject(relationalRef,modelResource,new NullProgressMonitor());
}
 else {
newEObject=createBaseTable(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
}
break;
case TYPES.VIEW:
{
newEObject=createView(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
break;
case TYPES.PROCEDURE:
{
newEObject=createProcedure(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
break;
case TYPES.INDEX:
{
newEObject=createIndex(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
break;
case TYPES.UNDEFINED:
default :
{
RelationalPlugin.Util.log(IStatus.WARNING,NLS.bind(Messages.emfModelGenerator_unknown_object_type_0_cannot_be_processed,relationalRef.getName()));
}
break;
}
return newEObject;
}","/** 
 * Create an EMF object, using the provided RelationalReference object
 * @param relationalRef the relational model object
 * @param modelResource the model resource
 * @return the new EMF object
 * @throws ModelWorkspaceException if problems building model
 */
public EObject createObject(RelationalReference relationalRef,ModelResource modelResource) throws ModelWorkspaceException {
  EObject newEObject=null;
switch (relationalRef.getType()) {
case TYPES.MODEL:
{
    }
  break;
case TYPES.SCHEMA:
{
}
break;
case TYPES.CATALOG:
{
}
break;
case TYPES.TABLE:
{
if (relationalRef instanceof RelationalViewTable) {
newEObject=VIEW_MODEL_FACTORY.buildObject(relationalRef,modelResource,new NullProgressMonitor());
}
 else {
newEObject=createBaseTable(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
}
break;
case TYPES.VIEW:
{
newEObject=createView(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
break;
case TYPES.PROCEDURE:
{
if (relationalRef instanceof RelationalViewProcedure) {
newEObject=VIEW_MODEL_FACTORY.buildObject(relationalRef,modelResource,new NullProgressMonitor());
}
 else {
newEObject=createProcedure(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
}
break;
case TYPES.INDEX:
{
newEObject=createIndex(relationalRef,modelResource);
modelResource.getEmfResource().getContents().add(newEObject);
}
break;
case TYPES.UNDEFINED:
default :
{
RelationalPlugin.Util.log(IStatus.WARNING,NLS.bind(Messages.emfModelGenerator_unknown_object_type_0_cannot_be_processed,relationalRef.getName()));
}
break;
}
return newEObject;
}",0.9440954773869348
101992,"/** 
 * Perform the import
 * @param rootNode the rootNode of the DDL
 * @param importManager the import manager which maintains import options
 * @return the RelationalModel created
 * @throws Exception
 */
@Override public RelationalModel importNode(AstNode rootNode,DdlImporterManager importManager) throws Exception {
  setImporterManager(importManager);
  RelationalModel model=getFactory().createModel(""String_Node_Str"");
  Map<AstNode,RelationalReference> deferredCreateMap=new HashMap<AstNode,RelationalReference>();
  for (  AstNode node : rootNode) {
    if (is(node,StandardDdlLexicon.TYPE_CREATE_SCHEMA_STATEMENT)) {
      RelationalSchema schema=getFactory().createSchema();
      model.addChild(schema);
      initialize(schema,node);
      for (      AstNode node1 : node) {
        Map<AstNode,RelationalReference> deferredMap=createObject(node1,model,schema);
        if (!deferredMap.isEmpty()) {
          deferredCreateMap.putAll(deferredMap);
        }
      }
    }
 else     if (is(node,TeiidDdlLexicon.OptionNamespace.STATEMENT)) {
    }
 else {
      Map<AstNode,RelationalReference> deferredMap=createObject(node,model,null);
      if (!deferredMap.isEmpty()) {
        deferredCreateMap.putAll(deferredMap);
      }
    }
  }
  createDeferredObjects(deferredCreateMap,model);
  return model;
}","/** 
 * Perform the import
 * @param rootNode the rootNode of the DDL
 * @param importManager the import manager which maintains import options
 * @return the RelationalModel created
 * @throws Exception
 */
@Override public RelationalModel importNode(AstNode rootNode,DdlImporterManager importManager) throws Exception {
  setImporterManager(importManager);
  getImporterManager().optToGenerateDefaultSQL(false);
  getImporterManager().optToHelpCreateTransform(false);
  RelationalModel model=getFactory().createModel(""String_Node_Str"");
  Map<AstNode,RelationalReference> deferredCreateMap=new HashMap<AstNode,RelationalReference>();
  for (  AstNode node : rootNode) {
    if (is(node,StandardDdlLexicon.TYPE_CREATE_SCHEMA_STATEMENT)) {
      RelationalSchema schema=getFactory().createSchema();
      model.addChild(schema);
      initialize(schema,node);
      for (      AstNode node1 : node) {
        Map<AstNode,RelationalReference> deferredMap=createObject(node1,model,schema);
        if (!deferredMap.isEmpty()) {
          deferredCreateMap.putAll(deferredMap);
        }
      }
    }
 else     if (is(node,TeiidDdlLexicon.OptionNamespace.STATEMENT)) {
    }
 else {
      Map<AstNode,RelationalReference> deferredMap=createObject(node,model,null);
      if (!deferredMap.isEmpty()) {
        deferredCreateMap.putAll(deferredMap);
      }
    }
  }
  createDeferredObjects(deferredCreateMap,model);
  return model;
}",0.9596510359869138
101993,"/** 
 * Create RelationalReference objects
 * @param node the provided AstNode
 * @param model the RelationalModel being created
 * @param schema the schema
 * @return the map of AstNodes which need to be deferred
 * @throws Exception 
 */
@Override protected Map<AstNode,RelationalReference> createObject(AstNode node,RelationalModel model,RelationalSchema schema) throws Exception {
  Map<AstNode,RelationalReference> deferredMap=new HashMap<AstNode,RelationalReference>();
  if (is(node,TeiidDdlLexicon.CreateTable.TABLE_STATEMENT)) {
    RelationalTable baseTable=getFactory().createBaseTable();
    initializeTable(baseTable,node,model);
    List<AstNode> optionNodes=new ArrayList<AstNode>();
    for (    AstNode child : node) {
      if (is(child,TeiidDdlLexicon.CreateTable.TABLE_ELEMENT)) {
        createColumn(child,baseTable);
      }
 else       if (is(child,StandardDdlLexicon.TYPE_STATEMENT_OPTION)) {
        optionNodes.add(child);
      }
 else       if (is(child,TeiidDdlLexicon.Constraint.TABLE_ELEMENT) || is(child,TeiidDdlLexicon.Constraint.FOREIGN_KEY_CONSTRAINT) || is(child,TeiidDdlLexicon.Constraint.INDEX_CONSTRAINT)) {
        deferredMap.put(child,baseTable);
      }
    }
    if (!optionNodes.isEmpty()) {
      processOptions(optionNodes,baseTable);
    }
  }
 else   if (is(node,TeiidDdlLexicon.CreateTable.VIEW_STATEMENT)) {
    RelationalViewTable viewTable=getFactory().createViewTable();
    initializeTable(viewTable,node,model);
    List<AstNode> optionNodes=new ArrayList<AstNode>();
    for (    AstNode child : node) {
      if (is(child,TeiidDdlLexicon.CreateTable.TABLE_ELEMENT)) {
        createColumn(child,viewTable);
      }
 else       if (is(child,StandardDdlLexicon.TYPE_STATEMENT_OPTION)) {
        optionNodes.add(child);
      }
 else       if (is(child,TeiidDdlLexicon.Constraint.TABLE_ELEMENT) || is(child,TeiidDdlLexicon.Constraint.FOREIGN_KEY_CONSTRAINT) || is(child,TeiidDdlLexicon.Constraint.INDEX_CONSTRAINT)) {
        deferredMap.put(child,viewTable);
      }
    }
    if (!optionNodes.isEmpty()) {
      processOptions(optionNodes,viewTable);
    }
    String queryExpression=(String)node.getProperty(TeiidDdlLexicon.CreateTable.QUERY_EXPRESSION);
    if (!StringUtilities.isEmpty(queryExpression)) {
      viewTable.setTransformationSQL(queryExpression);
    }
  }
 else   if (is(node,TeiidDdlLexicon.CreateProcedure.PROCEDURE_STATEMENT) || is(node,TeiidDdlLexicon.CreateProcedure.FUNCTION_STATEMENT)) {
    createProcedure(node,model);
  }
 else   if (is(node,TeiidDdlLexicon.AlterOptions.TABLE_STATEMENT)) {
    deferredMap.put(node,null);
  }
 else   if (is(node,TeiidDdlLexicon.AlterOptions.VIEW_STATEMENT) || is(node,TeiidDdlLexicon.AlterOptions.PROCEDURE_STATEMENT)) {
  }
 else {
    return super.createObject(node,model,schema);
  }
  return deferredMap;
}","/** 
 * Create RelationalReference objects
 * @param node the provided AstNode
 * @param model the RelationalModel being created
 * @param schema the schema
 * @return the map of AstNodes which need to be deferred
 * @throws Exception 
 */
@Override protected Map<AstNode,RelationalReference> createObject(AstNode node,RelationalModel model,RelationalSchema schema) throws Exception {
  Map<AstNode,RelationalReference> deferredMap=new HashMap<AstNode,RelationalReference>();
  if (is(node,TeiidDdlLexicon.CreateTable.TABLE_STATEMENT)) {
    RelationalTable baseTable=getFactory().createBaseTable();
    initializeTable(baseTable,node,model);
    List<AstNode> optionNodes=new ArrayList<AstNode>();
    for (    AstNode child : node) {
      if (is(child,TeiidDdlLexicon.CreateTable.TABLE_ELEMENT)) {
        createColumn(child,baseTable);
      }
 else       if (is(child,StandardDdlLexicon.TYPE_STATEMENT_OPTION)) {
        optionNodes.add(child);
      }
 else       if (is(child,TeiidDdlLexicon.Constraint.TABLE_ELEMENT) || is(child,TeiidDdlLexicon.Constraint.FOREIGN_KEY_CONSTRAINT) || is(child,TeiidDdlLexicon.Constraint.INDEX_CONSTRAINT)) {
        deferredMap.put(child,baseTable);
      }
    }
    if (!optionNodes.isEmpty()) {
      processOptions(optionNodes,baseTable);
    }
  }
 else   if (is(node,TeiidDdlLexicon.CreateTable.VIEW_STATEMENT)) {
    RelationalViewTable viewTable=getFactory().createViewTable();
    initializeTable(viewTable,node,model);
    List<AstNode> optionNodes=new ArrayList<AstNode>();
    for (    AstNode child : node) {
      if (is(child,TeiidDdlLexicon.CreateTable.TABLE_ELEMENT)) {
        createColumn(child,viewTable);
      }
 else       if (is(child,StandardDdlLexicon.TYPE_STATEMENT_OPTION)) {
        optionNodes.add(child);
      }
 else       if (is(child,TeiidDdlLexicon.Constraint.TABLE_ELEMENT) || is(child,TeiidDdlLexicon.Constraint.FOREIGN_KEY_CONSTRAINT) || is(child,TeiidDdlLexicon.Constraint.INDEX_CONSTRAINT)) {
        deferredMap.put(child,viewTable);
      }
    }
    if (!optionNodes.isEmpty()) {
      processOptions(optionNodes,viewTable);
    }
    String queryExpression=(String)node.getProperty(TeiidDdlLexicon.CreateTable.QUERY_EXPRESSION);
    if (!StringUtilities.isEmpty(queryExpression)) {
      viewTable.setTransformationSQL(queryExpression);
    }
  }
 else   if (is(node,TeiidDdlLexicon.CreateProcedure.PROCEDURE_STATEMENT) || is(node,TeiidDdlLexicon.CreateProcedure.FUNCTION_STATEMENT)) {
    String modelType=(String)node.getProperty(TeiidDdlLexicon.SchemaElement.TYPE);
    if (modelType != null) {
      if (modelType.equalsIgnoreCase(""String_Node_Str"")) {
        createVirtualProcedure(node,model);
      }
 else {
        createProcedure(node,model);
      }
    }
  }
 else   if (is(node,TeiidDdlLexicon.AlterOptions.TABLE_STATEMENT)) {
    deferredMap.put(node,null);
  }
 else   if (is(node,TeiidDdlLexicon.AlterOptions.VIEW_STATEMENT) || is(node,TeiidDdlLexicon.AlterOptions.PROCEDURE_STATEMENT)) {
  }
 else {
    return super.createObject(node,model,schema);
  }
  return deferredMap;
}",0.9521231602097784
101994,"@Override public String getSignature(Object eObject,int showMask){
  Column col=assertColumn(eObject);
  StringBuffer result=new StringBuffer();
  final String tmpName=col.getType() != null ? ModelerCore.getDatatypeManager(col,true).getName(col.getType()) : null;
  final String dtName=(tmpName == null ? CoreStringUtil.Constants.EMPTY_STRING : tmpName);
  final boolean isStringType=col.getType() != null ? ModelerCore.getDatatypeManager(col,true).isCharacter(col.getType()) : false;
switch (showMask) {
case 1:
case 17:
    result.append(col.getName());
  break;
case 2:
case 18:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
break;
case 3:
case 19:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
result.append(col.getName());
break;
case 4:
case 20:
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && isStringType) {
result.append(""String_Node_Str"" + length + ""String_Node_Str"");
}
}
break;
case 5:
case 21:
result.append(col.getName());
result.append(""String_Node_Str"");
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && isStringType) {
result.append(""String_Node_Str"" + length + ""String_Node_Str"");
}
}
break;
case 6:
case 22:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
result.append(""String_Node_Str"");
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && isStringType) {
result.append(""String_Node_Str"" + length + ""String_Node_Str"");
}
}
break;
case 7:
case 23:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
result.append(col.getName());
result.append(""String_Node_Str"");
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && isStringType) {
result.append(""String_Node_Str"" + length + ""String_Node_Str"");
}
}
break;
case 8:
case 24:
result.append(""String_Node_Str"");
break;
case 9:
case 25:
result.append(col.getName());
break;
case 10:
case 26:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
break;
case 11:
case 27:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
result.append(col.getName());
break;
case 12:
case 28:
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && isStringType) {
result.append(""String_Node_Str"" + length + ""String_Node_Str"");
}
}
break;
case 13:
case 29:
result.append(col.getName());
result.append(""String_Node_Str"");
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && isStringType) {
result.append(""String_Node_Str"" + length + ""String_Node_Str"");
}
}
break;
case 14:
case 30:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
result.append(""String_Node_Str"");
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && isStringType) {
result.append(""String_Node_Str"" + length + ""String_Node_Str"");
}
}
break;
case 15:
case 31:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
result.append(col.getName());
result.append(""String_Node_Str"");
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && isStringType) {
result.append(""String_Node_Str"" + length + ""String_Node_Str"");
}
}
break;
case 16:
return (""String_Node_Str"");
default :
throw new TeiidDesignerRuntimeException(RelationalPlugin.Util.getString(""String_Node_Str"",showMask));
}
return result.toString();
}","@Override public String getSignature(Object eObject,int showMask){
  Column col=assertColumn(eObject);
  StringBuffer result=new StringBuffer();
  final String tmpName=col.getType() != null ? ModelerCore.getDatatypeManager(col,true).getName(col.getType()) : null;
  final String dtName=(tmpName == null ? CoreStringUtil.Constants.EMPTY_STRING : tmpName);
  final boolean isLengthType=ModelerCore.getTeiidDataTypeManagerService().isLengthDataType(dtName);
  final boolean isStringType=col.getType() != null ? ModelerCore.getDatatypeManager(col,true).isCharacter(col.getType()) : false;
  final boolean addLength=isStringType || isLengthType;
switch (showMask) {
case 1:
case 17:
    result.append(col.getName());
  break;
case 2:
case 18:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
break;
case 3:
case 19:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
result.append(col.getName());
break;
case 4:
case 20:
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && addLength) {
result.append(OPEN_BRACKET + length + CLOSE_BRACKET);
}
}
break;
case 5:
case 21:
result.append(col.getName());
result.append(""String_Node_Str"");
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && addLength) {
result.append(OPEN_BRACKET + length + CLOSE_BRACKET);
}
}
break;
case 6:
case 22:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
result.append(""String_Node_Str"");
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && addLength) {
result.append(OPEN_BRACKET + length + CLOSE_BRACKET);
}
}
break;
case 7:
case 23:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
result.append(col.getName());
result.append(""String_Node_Str"");
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && addLength) {
result.append(OPEN_BRACKET + length + CLOSE_BRACKET);
}
}
break;
case 8:
case 24:
result.append(""String_Node_Str"");
break;
case 9:
case 25:
result.append(col.getName());
break;
case 10:
case 26:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
break;
case 11:
case 27:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
result.append(col.getName());
break;
case 12:
case 28:
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && addLength) {
result.append(OPEN_BRACKET + length + CLOSE_BRACKET);
}
}
break;
case 13:
case 29:
result.append(col.getName());
result.append(""String_Node_Str"");
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && addLength) {
result.append(OPEN_BRACKET + length + CLOSE_BRACKET);
}
}
break;
case 14:
case 30:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
result.append(""String_Node_Str"");
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && addLength) {
result.append(OPEN_BRACKET + length + CLOSE_BRACKET);
}
}
break;
case 15:
case 31:
result.append(""String_Node_Str"");
result.append(getStereotype(col));
result.append(""String_Node_Str"");
result.append(col.getName());
result.append(""String_Node_Str"");
if (col.getType() != null) {
result.append(dtName);
final int length=col.getLength();
if (length != 0 && addLength) {
result.append(OPEN_BRACKET + length + CLOSE_BRACKET);
}
}
break;
case 16:
return (""String_Node_Str"");
default :
throw new TeiidDesignerRuntimeException(RelationalPlugin.Util.getString(""String_Node_Str"",showMask));
}
return result.toString();
}",0.8594191724492418
101995,"/** 
 * {@inheritDoc}
 * @see org.teiid.designer.core.extension.EmfModelObjectExtensionAssistant#setPropertyValue(java.lang.Object,java.lang.String,java.lang.String)
 */
@Override public void setPropertyValue(final Object modelObject,final String propId,final String newValue) throws Exception {
  super.setPropertyValue(modelObject,propId,newValue);
  if (PropertyName.same(PropertyName.AGGREGATE,propId) && !Boolean.parseBoolean(newValue)) {
    removeProperty(modelObject,PropertyName.ANALYTIC.toString());
    removeProperty(modelObject,PropertyName.ALLOWS_ORDER_BY.toString());
    removeProperty(modelObject,PropertyName.USES_DISTINCT_ROWS.toString());
    removeProperty(modelObject,PropertyName.ALLOWS_DISTINCT.toString());
    removeProperty(modelObject,PropertyName.DECOMPOSABLE.toString());
  }
}","/** 
 * {@inheritDoc}
 * @see org.teiid.designer.core.extension.EmfModelObjectExtensionAssistant#setPropertyValue(java.lang.Object,java.lang.String,java.lang.String)
 */
@Override public void setPropertyValue(final Object modelObject,final String propId,final String newValue) throws Exception {
  boolean isVirtual=ModelUtil.isVirtual(modelObject);
  if (isVirtual && !PropertyName.same(PropertyName.NON_PREPARED,propId)) {
    super.setPropertyValue(modelObject,propId,newValue);
  }
  if (PropertyName.same(PropertyName.AGGREGATE,propId) && !Boolean.parseBoolean(newValue)) {
    removeProperty(modelObject,PropertyName.ANALYTIC.toString());
    removeProperty(modelObject,PropertyName.ALLOWS_ORDER_BY.toString());
    removeProperty(modelObject,PropertyName.USES_DISTINCT_ROWS.toString());
    removeProperty(modelObject,PropertyName.ALLOWS_DISTINCT.toString());
    removeProperty(modelObject,PropertyName.DECOMPOSABLE.toString());
  }
}",0.9228130360205832
101996,"@Override public RefactoringStatus checkFinalConditions(IProgressMonitor progressMonitor) throws OperationCanceledException {
  clearChanges();
  RefactoringStatus status=new RefactoringStatus();
  try {
    String destinationPath=ModelUtil.getLocation(destination).makeAbsolute().toOSString();
    progressMonitor.beginTask(RefactorResourcesUtils.getString(""String_Node_Str""),2);
    Set<PathPair> pathPairs=RefactorResourcesUtils.calculateResourceMoves(getResources(),destinationPath,RefactorResourcesUtils.Option.EXCLUDE_FOLDERS);
    RelatedResourceCallback relatedResourceCallback=new RelatedResourceCallback(pathPairs);
    for (    IResource resource : getResources()) {
      RefactorResourcesUtils.calculateRelatedResources(resource,status,relatedResourceCallback,Relationship.DEPENDENT);
      if (ModelUtil.isModelFile(resource)) {
        IFile file=(IFile)resource;
        Set<PathPair> importPathPairs=RefactorResourcesUtils.calculateImportChanges(file,destinationPath,getResourcesAndChildren(status));
        TextFileChange textFileChange=RefactorResourcesUtils.calculateTextChanges(file,importPathPairs);
        if (addTextChange(file,textFileChange)) {
          RefactorResourcesUtils.calculateRelatedVdbResources(file,status,new VdbResourceCallback());
        }
      }
      addChange(resource,new MoveResourceChange(resource,destination));
    }
  }
 catch (  Exception ex) {
    UiConstants.Util.log(ex);
    status.merge(RefactoringStatus.createFatalErrorStatus(ex.getMessage()));
    return status;
  }
 finally {
    progressMonitor.done();
  }
  return status;
}","@Override public RefactoringStatus checkFinalConditions(IProgressMonitor progressMonitor) throws OperationCanceledException {
  clearChanges();
  RefactoringStatus status=new RefactoringStatus();
  try {
    String destinationPath=ModelUtil.getLocation(destination).makeAbsolute().toOSString();
    progressMonitor.beginTask(RefactorResourcesUtils.getString(""String_Node_Str""),2);
    Set<PathPair> pathPairs=RefactorResourcesUtils.calculateResourceMoves(getResources(),destinationPath,RefactorResourcesUtils.Option.EXCLUDE_FOLDERS);
    RelatedResourceCallback relatedResourceCallback=new RelatedResourceCallback(pathPairs);
    for (    IResource resource : getResources()) {
      RefactorResourcesUtils.calculateRelatedResources(resource,status,relatedResourceCallback,Relationship.DEPENDENT);
      if (ModelUtil.isModelFile(resource)) {
        IFile file=(IFile)resource;
        Set<PathPair> importPathPairs=RefactorResourcesUtils.calculateImportChanges(file,destinationPath,getResourcesAndChildren(status));
        TextFileChange textFileChange=RefactorResourcesUtils.calculateTextChanges(file,importPathPairs);
        for (        PathPair pair : importPathPairs) {
          RefactorResourcesUtils.calculateModelImportsElementLChanges(file,pair,textFileChange);
        }
        if (addTextChange(file,textFileChange)) {
          RefactorResourcesUtils.calculateRelatedVdbResources(file,status,new VdbResourceCallback());
        }
      }
      addChange(resource,new MoveResourceChange(resource,destination));
    }
  }
 catch (  Exception ex) {
    UiConstants.Util.log(ex);
    status.merge(RefactoringStatus.createFatalErrorStatus(ex.getMessage()));
    return status;
  }
 finally {
    progressMonitor.done();
  }
  return status;
}",0.9512996713474754
101997,"/** 
 * @see org.teiid.designer.webservice.IWebServiceModelBuilder#setDestinationPath(org.teiid.designer.webservice.IWebServiceXsdResource,org.eclipse.core.runtime.IPath)
 * @since 4.2
 */
@Override public void setDestinationPath(final IWebServiceXsdResource xsdResource,final IPath workspacePathForXsd){
  if (xsdResource instanceof IInternalWebServiceXsdResource) {
    final IPath existing=xsdResource.getDestinationPath();
    boolean match=false;
    if (existing == null) {
      if (workspacePathForXsd == null) {
        match=true;
      }
    }
 else {
      if (workspacePathForXsd == null) {
        match=existing.segmentCount() == 0;
      }
 else {
        match=existing.makeAbsolute().equals(workspacePathForXsd.makeAbsolute());
      }
    }
    if (!match) {
      ((IInternalWebServiceXsdResource)xsdResource).setDestinationPath(workspacePathForXsd.makeAbsolute());
    }
  }
}","/** 
 * @see org.teiid.designer.webservice.IWebServiceModelBuilder#setDestinationPath(org.teiid.designer.webservice.IWebServiceXsdResource,org.eclipse.core.runtime.IPath)
 * @since 4.2
 */
@Override public void setDestinationPath(final IWebServiceXsdResource xsdResource,final IPath workspacePathForXsd){
  if (xsdResource instanceof IInternalWebServiceXsdResource) {
    final IPath existing=xsdResource.getDestinationPath();
    boolean match=false;
    if (existing == null) {
      if (workspacePathForXsd == null) {
        match=true;
      }
    }
 else {
      if (workspacePathForXsd == null) {
        match=existing.segmentCount() == 0;
      }
 else       if (!existing.toFile().exists()) {
        match=false;
      }
 else {
        match=existing.makeAbsolute().equals(workspacePathForXsd.makeAbsolute());
      }
    }
    if (!match) {
      ((IInternalWebServiceXsdResource)xsdResource).setDestinationPath(workspacePathForXsd.makeAbsolute());
    }
  }
}",0.9593582887700536
101998,"/** 
 * This method is called by   {@link #execute(IProgressMonitor,List)} to process the {@link IWebServiceResource} instances andmake sure that all XSDs are located in the workspace. This includes: <ul> <li>copying into the workspace all XSDs that are outside of the workspace</li> <li>creating XSD files in the workspace for all XSD definitions within the WSDL files</li> </ul> <p> Note that when doing so, it may be required to add to the <code>schemaLocation</code> within the XSDs. </p>
 * @param monitor
 * @param problems
 * @return the set of {@link XSDSchema} instances that should be used by the generator
 * @since 4.2
 */
protected Set doProcessXsds(final IProgressMonitor monitor,final List problems){
  final Set results=new HashSet();
  final Collection xsdDestinations=this.builder.getXsdDestinations();
  final Iterator iter=xsdDestinations.iterator();
  Set newXsdFiles=new HashSet();
  Set destProjectRelativePaths=getDestProjectRelativePaths(xsdDestinations);
  while (iter.hasNext()) {
    final IWebServiceXsdResource xsdDest=(IWebServiceXsdResource)iter.next();
    if (xsdDest == null || xsdDest.getDestinationPath() == null) {
      continue;
    }
    final IPath destFilePath=xsdDest.getDestinationPath();
    final IPath destProjectRelativePath=destFilePath.removeFirstSegments(1);
    final IPath destPath=destProjectRelativePath.removeLastSegments(1);
    final IPath absoluteProjectPath=builder.getParentResource().getLocation();
    final IPath absoluteDestPath=absoluteProjectPath.append(destPath);
    final File pathFile=new File(absoluteDestPath.toOSString());
    pathFile.mkdirs();
    try {
      builder.getParentResource().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException err1) {
      final Object[] params=new Object[]{builder.getParentResource().getName(),err1.getMessage()};
      final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",params);
      final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,null);
      problems.add(status);
    }
    final XSDSchema schema=xsdDest.getSchema();
    final IFile file=((IContainer)builder.getParentResource()).getFile(destProjectRelativePath);
    if (file == null) {
      final Object[] params=new Object[]{xsdDest.getOriginalPath(),destProjectRelativePath};
      final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",params);
      final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,null);
      problems.add(status);
    }
 else {
      File tempFile=null;
      try {
        OutputStream stream=null;
        InputStream inputStream=null;
        try {
          Iterator iter1=schema.getContents().iterator();
          while (iter1.hasNext()) {
            Object content=iter1.next();
            if (content instanceof XSDImport) {
              XSDImport xsdImport=((XSDImport)content);
              String schemaLocation=xsdImport.getSchemaLocation();
              IPath importLocation=null;
              if (schemaLocation != null) {
                importLocation=new Path(URI.createURI(xsdImport.getSchemaLocation()).path()).makeRelative();
              }
 else {
                continue;
              }
              if (destProjectRelativePaths.contains(importLocation)) {
                xsdImport.setSchemaLocation(ModelUtil.getRelativePath(importLocation,destProjectRelativePath));
              }
            }
          }
          tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
          stream=new FileOutputStream(tempFile);
          stream=new BufferedOutputStream(stream);
          final Element schemaElement=schema.getElement();
          doWriteXmlDocument(xsdDest.getTargetNamespace(),stream,schemaElement);
          stream.close();
          stream=null;
          inputStream=new FileInputStream(tempFile);
          inputStream=new BufferedInputStream(inputStream);
          if (file.exists()) {
            file.setContents(inputStream,true,true,monitor);
          }
 else {
            file.create(inputStream,true,monitor);
          }
          newXsdFiles.add(file);
        }
  finally {
          if (stream != null) {
            try {
              stream.close();
            }
 catch (            IOException err) {
              WebServicePlugin.Util.log(err);
            }
          }
          if (inputStream != null) {
            try {
              inputStream.close();
            }
 catch (            IOException err) {
              WebServicePlugin.Util.log(err);
            }
          }
          if (tempFile != null) {
            try {
              tempFile.delete();
            }
 catch (            RuntimeException err) {
              WebServicePlugin.Util.log(err);
            }
          }
        }
      }
 catch (      Exception e) {
        final Object[] params=new Object[]{xsdDest.getOriginalPath(),destProjectRelativePath,e.getLocalizedMessage()};
        final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",params);
        final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,e);
        problems.add(status);
      }
    }
  }
  Iterator iter1=newXsdFiles.iterator();
  while (iter1.hasNext()) {
    IFile xsdFile=(IFile)iter1.next();
    try {
      final ModelResource modelResource=(ModelResource)ModelWorkspaceManager.getModelWorkspaceManager().findModelWorkspaceItem(xsdFile,true);
      final List allRoots=modelResource.getAllRootEObjects();
      final Iterator rootIter=allRoots.iterator();
      while (rootIter.hasNext()) {
        final EObject root=(EObject)rootIter.next();
        if (root instanceof XSDSchema) {
          results.add(root);
        }
      }
    }
 catch (    Exception e) {
      final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",xsdFile);
      final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,e);
      problems.add(status);
    }
  }
  return results;
}","/** 
 * This method is called by   {@link #execute(IProgressMonitor,List)} to process the {@link IWebServiceResource} instances andmake sure that all XSDs are located in the workspace. This includes: <ul> <li>copying into the workspace all XSDs that are outside of the workspace</li> <li>creating XSD files in the workspace for all XSD definitions within the WSDL files</li> </ul> <p> Note that when doing so, it may be required to add to the <code>schemaLocation</code> within the XSDs. </p>
 * @param monitor
 * @param problems
 * @return the set of {@link XSDSchema} instances that should be used by the generator
 * @since 4.2
 */
protected Set doProcessXsds(final IProgressMonitor monitor,final List problems){
  final Set results=new HashSet();
  final Collection xsdDestinations=this.builder.getXsdDestinations();
  final Iterator iter=xsdDestinations.iterator();
  Set newXsdFiles=new HashSet();
  Set destProjectRelativePaths=getDestProjectRelativePaths(xsdDestinations);
  while (iter.hasNext()) {
    final IWebServiceXsdResource xsdDest=(IWebServiceXsdResource)iter.next();
    if (xsdDest == null || xsdDest.getDestinationPath() == null) {
      continue;
    }
    final IPath destFilePath=xsdDest.getDestinationPath();
    final IPath destProjectRelativePath=destFilePath.removeFirstSegments(1);
    final IPath destPath=destProjectRelativePath.removeLastSegments(1);
    final IPath absoluteProjectPath=builder.getParentResource().getProject().getLocation();
    final IPath absoluteDestPath=absoluteProjectPath.append(destPath);
    final File pathFile=new File(absoluteDestPath.toOSString());
    pathFile.mkdirs();
    try {
      builder.getParentResource().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException err1) {
      final Object[] params=new Object[]{builder.getParentResource().getName(),err1.getMessage()};
      final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",params);
      final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,null);
      problems.add(status);
    }
    final XSDSchema schema=xsdDest.getSchema();
    final IFile file=((IContainer)builder.getParentResource().getProject()).getFile(destProjectRelativePath);
    if (file == null) {
      final Object[] params=new Object[]{xsdDest.getOriginalPath(),destProjectRelativePath};
      final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",params);
      final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,null);
      problems.add(status);
    }
 else {
      File tempFile=null;
      try {
        OutputStream stream=null;
        InputStream inputStream=null;
        try {
          Iterator iter1=schema.getContents().iterator();
          while (iter1.hasNext()) {
            Object content=iter1.next();
            if (content instanceof XSDImport) {
              XSDImport xsdImport=((XSDImport)content);
              String schemaLocation=xsdImport.getSchemaLocation();
              IPath importLocation=null;
              if (schemaLocation != null) {
                importLocation=new Path(URI.createURI(xsdImport.getSchemaLocation()).path()).makeRelative();
              }
 else {
                continue;
              }
              if (destProjectRelativePaths.contains(importLocation)) {
                xsdImport.setSchemaLocation(ModelUtil.getRelativePath(importLocation,destProjectRelativePath));
              }
            }
          }
          tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
          stream=new FileOutputStream(tempFile);
          stream=new BufferedOutputStream(stream);
          final Element schemaElement=schema.getElement();
          doWriteXmlDocument(xsdDest.getTargetNamespace(),stream,schemaElement);
          stream.close();
          stream=null;
          inputStream=new FileInputStream(tempFile);
          inputStream=new BufferedInputStream(inputStream);
          if (file.exists()) {
            file.setContents(inputStream,true,true,monitor);
          }
 else {
            file.create(inputStream,true,monitor);
          }
          newXsdFiles.add(file);
        }
  finally {
          if (stream != null) {
            try {
              stream.close();
            }
 catch (            IOException err) {
              WebServicePlugin.Util.log(err);
            }
          }
          if (inputStream != null) {
            try {
              inputStream.close();
            }
 catch (            IOException err) {
              WebServicePlugin.Util.log(err);
            }
          }
          if (tempFile != null) {
            try {
              tempFile.delete();
            }
 catch (            RuntimeException err) {
              WebServicePlugin.Util.log(err);
            }
          }
        }
      }
 catch (      Exception e) {
        final Object[] params=new Object[]{xsdDest.getOriginalPath(),destProjectRelativePath,e.getLocalizedMessage()};
        final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",params);
        final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,e);
        problems.add(status);
      }
    }
  }
  Iterator iter1=newXsdFiles.iterator();
  while (iter1.hasNext()) {
    IFile xsdFile=(IFile)iter1.next();
    try {
      final ModelResource modelResource=(ModelResource)ModelWorkspaceManager.getModelWorkspaceManager().findModelWorkspaceItem(xsdFile,true);
      final List allRoots=modelResource.getAllRootEObjects();
      final Iterator rootIter=allRoots.iterator();
      while (rootIter.hasNext()) {
        final EObject root=(EObject)rootIter.next();
        if (root instanceof XSDSchema) {
          results.add(root);
        }
      }
    }
 catch (    Exception e) {
      final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",xsdFile);
      final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,e);
      problems.add(status);
    }
  }
  return results;
}",0.9978358581654736
101999,"/** 
 * @see org.teiid.designer.webservice.IWebServiceModelBuilder#setDestinationPath(org.teiid.designer.webservice.IWebServiceXsdResource,org.eclipse.core.runtime.IPath)
 * @since 4.2
 */
@Override public void setDestinationPath(final IWebServiceXsdResource xsdResource,final IPath workspacePathForXsd){
  if (xsdResource instanceof IInternalWebServiceXsdResource) {
    final IPath existing=xsdResource.getDestinationPath();
    boolean match=false;
    if (existing == null) {
      if (workspacePathForXsd == null) {
        match=true;
      }
    }
 else {
      if (workspacePathForXsd == null) {
        match=existing.segmentCount() == 0;
      }
 else {
        match=existing.makeAbsolute().equals(workspacePathForXsd.makeAbsolute());
      }
    }
    if (!match) {
      ((IInternalWebServiceXsdResource)xsdResource).setDestinationPath(workspacePathForXsd.makeAbsolute());
    }
  }
}","/** 
 * @see org.teiid.designer.webservice.IWebServiceModelBuilder#setDestinationPath(org.teiid.designer.webservice.IWebServiceXsdResource,org.eclipse.core.runtime.IPath)
 * @since 4.2
 */
@Override public void setDestinationPath(final IWebServiceXsdResource xsdResource,final IPath workspacePathForXsd){
  if (xsdResource instanceof IInternalWebServiceXsdResource) {
    final IPath existing=xsdResource.getDestinationPath();
    boolean match=false;
    if (existing == null) {
      if (workspacePathForXsd == null) {
        match=true;
      }
    }
 else {
      if (workspacePathForXsd == null) {
        match=existing.segmentCount() == 0;
      }
 else       if (!existing.toFile().exists()) {
        match=false;
      }
 else {
        match=existing.makeAbsolute().equals(workspacePathForXsd.makeAbsolute());
      }
    }
    if (!match) {
      ((IInternalWebServiceXsdResource)xsdResource).setDestinationPath(workspacePathForXsd.makeAbsolute());
    }
  }
}",0.9593582887700536
102000,"/** 
 * This method is called by   {@link #execute(IProgressMonitor,List)} to process the {@link IWebServiceResource} instances andmake sure that all XSDs are located in the workspace. This includes: <ul> <li>copying into the workspace all XSDs that are outside of the workspace</li> <li>creating XSD files in the workspace for all XSD definitions within the WSDL files</li> </ul> <p> Note that when doing so, it may be required to add to the <code>schemaLocation</code> within the XSDs. </p>
 * @param monitor
 * @param problems
 * @return the set of {@link XSDSchema} instances that should be used by the generator
 * @since 4.2
 */
protected Set doProcessXsds(final IProgressMonitor monitor,final List problems){
  final Set results=new HashSet();
  final Collection xsdDestinations=this.builder.getXsdDestinations();
  final Iterator iter=xsdDestinations.iterator();
  Set newXsdFiles=new HashSet();
  Set destProjectRelativePaths=getDestProjectRelativePaths(xsdDestinations);
  while (iter.hasNext()) {
    final IWebServiceXsdResource xsdDest=(IWebServiceXsdResource)iter.next();
    if (xsdDest == null || xsdDest.getDestinationPath() == null) {
      continue;
    }
    final IPath destFilePath=xsdDest.getDestinationPath();
    final IPath destProjectRelativePath=destFilePath.removeFirstSegments(1);
    final IPath destPath=destProjectRelativePath.removeLastSegments(1);
    final IPath absoluteProjectPath=builder.getParentResource().getLocation();
    final IPath absoluteDestPath=absoluteProjectPath.append(destPath);
    final File pathFile=new File(absoluteDestPath.toOSString());
    pathFile.mkdirs();
    try {
      builder.getParentResource().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException err1) {
      final Object[] params=new Object[]{builder.getParentResource().getName(),err1.getMessage()};
      final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",params);
      final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,null);
      problems.add(status);
    }
    final XSDSchema schema=xsdDest.getSchema();
    final IFile file=((IContainer)builder.getParentResource()).getFile(destProjectRelativePath);
    if (file == null) {
      final Object[] params=new Object[]{xsdDest.getOriginalPath(),destProjectRelativePath};
      final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",params);
      final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,null);
      problems.add(status);
    }
 else {
      File tempFile=null;
      try {
        OutputStream stream=null;
        InputStream inputStream=null;
        try {
          Iterator iter1=schema.getContents().iterator();
          while (iter1.hasNext()) {
            Object content=iter1.next();
            if (content instanceof XSDImport) {
              XSDImport xsdImport=((XSDImport)content);
              String schemaLocation=xsdImport.getSchemaLocation();
              IPath importLocation=null;
              if (schemaLocation != null) {
                importLocation=new Path(URI.createURI(xsdImport.getSchemaLocation()).path()).makeRelative();
              }
 else {
                continue;
              }
              if (destProjectRelativePaths.contains(importLocation)) {
                xsdImport.setSchemaLocation(ModelUtil.getRelativePath(importLocation,destProjectRelativePath));
              }
            }
          }
          tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
          stream=new FileOutputStream(tempFile);
          stream=new BufferedOutputStream(stream);
          final Element schemaElement=schema.getElement();
          doWriteXmlDocument(xsdDest.getTargetNamespace(),stream,schemaElement);
          stream.close();
          stream=null;
          inputStream=new FileInputStream(tempFile);
          inputStream=new BufferedInputStream(inputStream);
          if (file.exists()) {
            file.setContents(inputStream,true,true,monitor);
          }
 else {
            file.create(inputStream,true,monitor);
          }
          newXsdFiles.add(file);
        }
  finally {
          if (stream != null) {
            try {
              stream.close();
            }
 catch (            IOException err) {
              WebServicePlugin.Util.log(err);
            }
          }
          if (inputStream != null) {
            try {
              inputStream.close();
            }
 catch (            IOException err) {
              WebServicePlugin.Util.log(err);
            }
          }
          if (tempFile != null) {
            try {
              tempFile.delete();
            }
 catch (            RuntimeException err) {
              WebServicePlugin.Util.log(err);
            }
          }
        }
      }
 catch (      Exception e) {
        final Object[] params=new Object[]{xsdDest.getOriginalPath(),destProjectRelativePath,e.getLocalizedMessage()};
        final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",params);
        final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,e);
        problems.add(status);
      }
    }
  }
  Iterator iter1=newXsdFiles.iterator();
  while (iter1.hasNext()) {
    IFile xsdFile=(IFile)iter1.next();
    try {
      final ModelResource modelResource=(ModelResource)ModelWorkspaceManager.getModelWorkspaceManager().findModelWorkspaceItem(xsdFile,true);
      final List allRoots=modelResource.getAllRootEObjects();
      final Iterator rootIter=allRoots.iterator();
      while (rootIter.hasNext()) {
        final EObject root=(EObject)rootIter.next();
        if (root instanceof XSDSchema) {
          results.add(root);
        }
      }
    }
 catch (    Exception e) {
      final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",xsdFile);
      final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,e);
      problems.add(status);
    }
  }
  return results;
}","/** 
 * This method is called by   {@link #execute(IProgressMonitor,List)} to process the {@link IWebServiceResource} instances andmake sure that all XSDs are located in the workspace. This includes: <ul> <li>copying into the workspace all XSDs that are outside of the workspace</li> <li>creating XSD files in the workspace for all XSD definitions within the WSDL files</li> </ul> <p> Note that when doing so, it may be required to add to the <code>schemaLocation</code> within the XSDs. </p>
 * @param monitor
 * @param problems
 * @return the set of {@link XSDSchema} instances that should be used by the generator
 * @since 4.2
 */
protected Set doProcessXsds(final IProgressMonitor monitor,final List problems){
  final Set results=new HashSet();
  final Collection xsdDestinations=this.builder.getXsdDestinations();
  final Iterator iter=xsdDestinations.iterator();
  Set newXsdFiles=new HashSet();
  Set destProjectRelativePaths=getDestProjectRelativePaths(xsdDestinations);
  while (iter.hasNext()) {
    final IWebServiceXsdResource xsdDest=(IWebServiceXsdResource)iter.next();
    if (xsdDest == null || xsdDest.getDestinationPath() == null) {
      continue;
    }
    final IPath destFilePath=xsdDest.getDestinationPath();
    final IPath destProjectRelativePath=destFilePath.removeFirstSegments(1);
    final IPath destPath=destProjectRelativePath.removeLastSegments(1);
    final IPath absoluteProjectPath=builder.getParentResource().getProject().getLocation();
    final IPath absoluteDestPath=absoluteProjectPath.append(destPath);
    final File pathFile=new File(absoluteDestPath.toOSString());
    pathFile.mkdirs();
    try {
      builder.getParentResource().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException err1) {
      final Object[] params=new Object[]{builder.getParentResource().getName(),err1.getMessage()};
      final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",params);
      final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,null);
      problems.add(status);
    }
    final XSDSchema schema=xsdDest.getSchema();
    final IFile file=((IContainer)builder.getParentResource().getProject()).getFile(destProjectRelativePath);
    if (file == null) {
      final Object[] params=new Object[]{xsdDest.getOriginalPath(),destProjectRelativePath};
      final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",params);
      final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,null);
      problems.add(status);
    }
 else {
      File tempFile=null;
      try {
        OutputStream stream=null;
        InputStream inputStream=null;
        try {
          Iterator iter1=schema.getContents().iterator();
          while (iter1.hasNext()) {
            Object content=iter1.next();
            if (content instanceof XSDImport) {
              XSDImport xsdImport=((XSDImport)content);
              String schemaLocation=xsdImport.getSchemaLocation();
              IPath importLocation=null;
              if (schemaLocation != null) {
                importLocation=new Path(URI.createURI(xsdImport.getSchemaLocation()).path()).makeRelative();
              }
 else {
                continue;
              }
              if (destProjectRelativePaths.contains(importLocation)) {
                xsdImport.setSchemaLocation(ModelUtil.getRelativePath(importLocation,destProjectRelativePath));
              }
            }
          }
          tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
          stream=new FileOutputStream(tempFile);
          stream=new BufferedOutputStream(stream);
          final Element schemaElement=schema.getElement();
          doWriteXmlDocument(xsdDest.getTargetNamespace(),stream,schemaElement);
          stream.close();
          stream=null;
          inputStream=new FileInputStream(tempFile);
          inputStream=new BufferedInputStream(inputStream);
          if (file.exists()) {
            file.setContents(inputStream,true,true,monitor);
          }
 else {
            file.create(inputStream,true,monitor);
          }
          newXsdFiles.add(file);
        }
  finally {
          if (stream != null) {
            try {
              stream.close();
            }
 catch (            IOException err) {
              WebServicePlugin.Util.log(err);
            }
          }
          if (inputStream != null) {
            try {
              inputStream.close();
            }
 catch (            IOException err) {
              WebServicePlugin.Util.log(err);
            }
          }
          if (tempFile != null) {
            try {
              tempFile.delete();
            }
 catch (            RuntimeException err) {
              WebServicePlugin.Util.log(err);
            }
          }
        }
      }
 catch (      Exception e) {
        final Object[] params=new Object[]{xsdDest.getOriginalPath(),destProjectRelativePath,e.getLocalizedMessage()};
        final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",params);
        final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,e);
        problems.add(status);
      }
    }
  }
  Iterator iter1=newXsdFiles.iterator();
  while (iter1.hasNext()) {
    IFile xsdFile=(IFile)iter1.next();
    try {
      final ModelResource modelResource=(ModelResource)ModelWorkspaceManager.getModelWorkspaceManager().findModelWorkspaceItem(xsdFile,true);
      final List allRoots=modelResource.getAllRootEObjects();
      final Iterator rootIter=allRoots.iterator();
      while (rootIter.hasNext()) {
        final EObject root=(EObject)rootIter.next();
        if (root instanceof XSDSchema) {
          results.add(root);
        }
      }
    }
 catch (    Exception e) {
      final String msg=WebServicePlugin.Util.getString(""String_Node_Str"",xsdFile);
      final IStatus status=new Status(IStatus.ERROR,WebServicePlugin.PLUGIN_ID,0,msg,e);
      problems.add(status);
    }
  }
  return results;
}",0.9978358581654736
